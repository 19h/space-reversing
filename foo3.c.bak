// File: recv_buffer_hook.c

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <dbghelp.h>
#include <psapi.h>
#include "hook.c"  // MinHook header

#pragma comment(lib, "dbghelp.lib")
#pragma comment(lib, "psapi.lib")

// --- Forward declarations ---
void print_backtrace(void);
static void log_printf(const char *fmt, ...);

// --- Global log file pointer ---
static FILE *g_logFile = NULL;

// --- Absolute address of FUN_1475d8480 ---
// (This address must be verified/adjusted as necessary.)
#define RECV_BUFFER_ADDR ((LPVOID)0x1475d8480)

// --- Typedef for FUN_1475d8480 ---
// Prototype: undefined8 * FUN_1475d8480(longlong param_1, undefined8 *param_2)
// Using: unsigned long long* for undefined8* and long long for longlong.
typedef unsigned long long* (*recv_buffer_t)(long long param_1, unsigned long long *param_2);

// --- Global variable to hold the original function pointer ---
static recv_buffer_t orig_recv_buffer = NULL;

// --- Hook function for FUN_1475d8480 (recv_buffer) ---
unsigned long long* my_recv_buffer(long long param_1, unsigned long long *param_2)
{
    log_printf("\n[+] Hooked recv_buffer (FUN_1475d8480) called with param_1 = 0x%llx, param_2 = %p\n", param_1, param_2);
    print_backtrace();

    // Optionally, log initial state of the output buffer.
    log_printf("    Before call: param_2[2] = 0x%llx, param_2[3] = 0x%llx\n", param_2[2], param_2[3]);

    // Call the original function.
    unsigned long long* ret = orig_recv_buffer(param_1, param_2);

    // Log the result (e.g., updated buffer length).
    log_printf("    After call: param_2[2] = 0x%llx\n", param_2[2]);

    return ret;
}

// --- Helper: logging function ---
static void log_printf(const char *fmt, ...)
{
    if (g_logFile)
    {
        va_list args;
        va_start(args, fmt);
        vfprintf(g_logFile, fmt, args);
        va_end(args);
        fflush(g_logFile);
    }
}

// --- Helper: print a backtrace ---
void print_backtrace(void)
{
    void* stack[62];
    USHORT frames = CaptureStackBackTrace(0, 62, stack, NULL);
    HMODULE hMain = GetModuleHandle(NULL);
    MODULEINFO modInfo = {0};

    if (!GetModuleInformation(GetCurrentProcess(), hMain, &modInfo, sizeof(modInfo)))
    {
        log_printf("Failed to get module information.\n");
        return;
    }

    DWORD64 base    = (DWORD64)hMain;
    DWORD64 modSize = modInfo.SizeOfImage;
    char buffer[1024];

    for (USHORT i = 0; i < frames; i++)
    {
        DWORD64 addr = (DWORD64)stack[i];
        SYMBOL_INFO *symbol = (SYMBOL_INFO*)malloc(sizeof(SYMBOL_INFO) + 256 * sizeof(char));
        if (!symbol)
            continue;
        memset(symbol, 0, sizeof(SYMBOL_INFO) + 256 * sizeof(char));
        symbol->SizeOfStruct = sizeof(SYMBOL_INFO);
        symbol->MaxNameLen   = 255;
        DWORD64 displacement = 0;
        if (SymFromAddr(GetCurrentProcess(), addr, &displacement, symbol))
        {
            if (addr >= base && addr < base + modSize)
            {
                DWORD64 offset = addr - base;
                sprintf(buffer, "ModuleBase+0x%llx %s", offset, symbol->Name);
            }
            else
            {
                sprintf(buffer, "%s+0x%llx", symbol->Name, displacement);
            }
        }
        else
        {
            sprintf(buffer, "0x%llx", addr);
        }
        log_printf("%s\n", buffer);
        free(symbol);
    }
}

// --- DllMain: Install the hook when the DLL is loaded ---
BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
{
    if (ul_reason_for_call == DLL_PROCESS_ATTACH)
    {
        DisableThreadLibraryCalls(hModule);

        // Open log file in the user's home directory.
        char *home = getenv("USERPROFILE");
        if (!home)
            home = "C:\\";
        char logPath[512];
        sprintf(logPath, "%s\\recv_buffer_hook.log", home);
        g_logFile = fopen(logPath, "a+");
        if (!g_logFile)
            g_logFile = fopen("recv_buffer_hook.log", "a+");

        // Initialize DbgHelp for symbol resolution.
        if (!SymInitialize(GetCurrentProcess(), NULL, TRUE))
        {
            log_printf("Failed to initialize DbgHelp.\n");
        }

        // Initialize MinHook.
        if (MH_Initialize() != MH_OK)
        {
            log_printf("Failed to initialize MinHook.\n");
            return FALSE;
        }

        // Hook FUN_1475d8480.
        if (MH_CreateHook(RECV_BUFFER_ADDR, &my_recv_buffer, (LPVOID*)&orig_recv_buffer) != MH_OK)
        {
            log_printf("Failed to hook recv_buffer function at %p.\n", RECV_BUFFER_ADDR);
        }

        // Enable the hook.
        if (MH_EnableHook(RECV_BUFFER_ADDR) != MH_OK)
        {
            log_printf("Failed to enable hook for recv_buffer.\n");
        }

        log_printf("[+] recv_buffer hook installed\n");
    }
    else if (ul_reason_for_call == DLL_PROCESS_DETACH)
    {
        MH_Uninitialize();
        SymCleanup(GetCurrentProcess());
        if (g_logFile)
        {
            fclose(g_logFile);
            g_logFile = NULL;
        }
    }
    return TRUE;
}
