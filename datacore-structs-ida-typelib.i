#define __pragma(x)
#define __unaligned
#define unsigned char _Bool
typedef long long int int64_t;

typedef long long unsigned int uint64_t;
# 122 "/opt/local/libexec/llvm-20/lib/clang/20/include/stdint.h" 3
typedef int64_t int_least64_t;
typedef uint64_t uint_least64_t;
typedef int64_t int_fast64_t;
typedef uint64_t uint_fast64_t;
# 197 "/opt/local/libexec/llvm-20/lib/clang/20/include/stdint.h" 3
typedef int int32_t;




typedef unsigned int uint32_t;
# 220 "/opt/local/libexec/llvm-20/lib/clang/20/include/stdint.h" 3
typedef int32_t int_least32_t;
typedef uint32_t uint_least32_t;
typedef int32_t int_fast32_t;
typedef uint32_t uint_fast32_t;
# 245 "/opt/local/libexec/llvm-20/lib/clang/20/include/stdint.h" 3
typedef short int16_t;

typedef unsigned short uint16_t;
# 259 "/opt/local/libexec/llvm-20/lib/clang/20/include/stdint.h" 3
typedef int16_t int_least16_t;
typedef uint16_t uint_least16_t;
typedef int16_t int_fast16_t;
typedef uint16_t uint_fast16_t;





typedef signed char int8_t;

typedef unsigned char uint8_t;







typedef int8_t int_least8_t;
typedef uint8_t uint_least8_t;
typedef int8_t int_fast8_t;
typedef uint8_t uint_fast8_t;
# 295 "/opt/local/libexec/llvm-20/lib/clang/20/include/stdint.h" 3
typedef long long int intptr_t;






typedef long long unsigned int uintptr_t;





typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;
# 3 "structs.h" 2
# 14 "structs.h"
typedef uint64_t EntityId;


typedef uint32_t Fnv1a32;







struct CryStringT {
    char *m_str;
};


struct CryString_StrHeader {
    int32_t nRefCount;
    int32_t nLength;
    int32_t nAllocSize;

};
# 46 "structs.h"
struct CryGUID {
    uint64_t lo;
    uint64_t hi;
};






struct CLocIdentifier {
    char *m_sIdentifier;
};


typedef Fnv1a32 CLocIdentifierHash;


struct CLocString {
    char *m_wString;
};


typedef Fnv1a32 CStringHash;
# 91 "structs.h"
enum ARDataType {
    ARDataType_Player = 0x0,
    ARDataType_ShopItem = 0x1,
    ARDataType_PointOfInterest = 0x2,
};


enum ARLabelMovementType {
    ARLabelMovementType_Fixed = 0x0,
    ARLabelMovementType_FacingPlayer = 0x1,
    ARLabelMovementType_Rotating = 0x2,
};


enum AbilityType {
    AbilityType_unnamed = 0x0,
    AbilityType_BeingRestrained = 0x0,
    AbilityType_BeingTakenDown = 0x1,
    AbilityType_BeingUnrestrained = 0x2,
    AbilityType_ChangeMode = 0x3,
    AbilityType_Climb = 0x4,
    AbilityType_Crouch = 0x5,
    AbilityType_Duck = 0x6,
    AbilityType_Fire = 0x7,
    AbilityType_UseConsumable = 0x8,
    AbilityType_EatAndDrink = 0x9,
    AbilityType_EatAndDrink2H = 0xa,
    AbilityType_HoldBreath = 0xb,
    AbilityType_Jump = 0xc,
    AbilityType_Land = 0xd,
    AbilityType_LadderSprint = 0xe,
    AbilityType_LadderDodge = 0xf,
    AbilityType_Lean = 0x10,
    AbilityType_Melee = 0x11,
    AbilityType_MedicalMelee = 0x12,
    AbilityType_MobiGlas = 0x13,
    AbilityType_Movement = 0x14,
    AbilityType_Rotation = 0x15,
    AbilityType_PersonalInnerThought = 0x16,
    AbilityType_Place = 0x17,
    AbilityType_Prone = 0x18,
    AbilityType_ProneMove = 0x19,
    AbilityType_ProneRoll = 0x1a,
    AbilityType_Reload = 0x1b,
    AbilityType_AmmoRepool = 0x1c,
    AbilityType_Walk = 0x1d,
    AbilityType_Run = 0x1e,
    AbilityType_Sprint = 0x1f,
    AbilityType_Stand = 0x20,
    AbilityType_Stow = 0x21,
    AbilityType_Restrain = 0x22,
    AbilityType_PreTake = 0x23,
    AbilityType_Take = 0x24,
    AbilityType_TakeDown = 0x25,
    AbilityType_ThrowOverhand = 0x26,
    AbilityType_ThrowUnderhand = 0x27,
    AbilityType_UnarmedCombat = 0x28,
    AbilityType_Unstow = 0x29,
    AbilityType_Unrestrain = 0x2a,
    AbilityType_Zoom = 0x2b,
    AbilityType_HandSignal = 0x2c,
    AbilityType_Carry = 0x2d,
    AbilityType_Carry2H = 0x2e,
    AbilityType_Equip = 0x2f,
    AbilityType_SocialEmote = 0x30,
    AbilityType_Fall = 0x31,
    AbilityType_Inspect = 0x32,
    AbilityType_InteractionMode = 0x33,
    AbilityType_BlockingInteractionMode = 0x34,
    AbilityType_TryOn = 0x35,
    AbilityType_SeatTransition = 0x36,
    AbilityType_DiscardItem = 0x37,
    AbilityType_TurnStep = 0x38,
    AbilityType_Lookback = 0x39,
    AbilityType_ItemRaise = 0x3a,
    AbilityType_HeadTrack = 0x3b,
    AbilityType_FreeLook = 0x3c,
    AbilityType_MeleeBlock = 0x3d,
    AbilityType_LootingInteraction = 0x3e,
    AbilityType_UsableBeingDraggedOut = 0x3f,
    AbilityType_UsableBeingDroppedIn = 0x40,
    AbilityType_UsableDragUserOut = 0x41,
    AbilityType_UsableDropUserIn = 0x42,
    AbilityType_UsableInteraction = 0x43,
    AbilityType_MeleeHeavy = 0x44,
    AbilityType_StickyFilter = 0x45,
    AbilityType_Dodge = 0x46,
    AbilityType_ProtectFace = 0x47,
    AbilityType_SuitEquip = 0x48,
    AbilityType_EVA = 0x49,
    AbilityType_BodyDragging = 0x4a,
    AbilityType_TrackviewControlled = 0x4b,
    AbilityType_Fidgets = 0x4c,
    AbilityType_DamageReactions = 0x4d,
    AbilityType_EffortMoveSet = 0x4e,
    AbilityType_WalkToPlace = 0x4f,
    AbilityType_Looting = 0x50,
    AbilityType_OpenCloseContainer = 0x51,
    AbilityType_UseConsumable2H = 0x52,
    AbilityType_VisorWipe = 0x53,
    AbilityType_CanUseMovable = 0x54,
    AbilityType_ThrowReady = 0x55,
    AbilityType_PlaceReady = 0x56,
    AbilityType_PrimeItem = 0x57,
    AbilityType_Hack = 0x58,
    AbilityType_UsingMovable = 0x59,
    AbilityType_ZeroGTraversal = 0x5a,
    AbilityType_ZeroGTraversalMovement = 0x5b,
    AbilityType_ZeroGTraversalHandAttach = 0x5c,
    AbilityType_WeaponMount = 0x5d,
    AbilityType_Scanning = 0x5e,
    AbilityType_TurnOverApply = 0x5f,
    AbilityType_SyncedRevival = 0x60,
    AbilityType_Vault = 0x61,
    AbilityType_VaultHigh = 0x62,
    AbilityType_Mantle = 0x63,
    AbilityType_MantleHigh = 0x64,
    AbilityType_DrunkStumble = 0x65,
    AbilityType_SelfTarget = 0x66,
    AbilityType_ForceReactions = 0x67,
    AbilityType_SoftLockWeapons = 0x68,
    AbilityType_AnyPlayerAnimatedInteraction = 0x69,
    AbilityType_LeftHandPlayerAnimatedInteraction = 0x6a,
    AbilityType_RightHandPlayerAnimatedInteraction = 0x6b,
    AbilityType_FixOverheat = 0x6c,
    AbilityType_OpenInventory = 0x6d,
    AbilityType_Misfire = 0x6e,
    AbilityType_SyncedMeleeAttack = 0x6f,
    AbilityType_SyncedMeleeDefend = 0x70,
    AbilityType_Swim = 0x71,
    AbilityType_WeaponLowering = 0x72,
    AbilityType_Slide = 0x73,
    AbilityType_SlideDrop = 0x74,
    AbilityType_Malfunctioning = 0x75,
    AbilityType_StaticFiringModeDeploy = 0x76,
    AbilityType_StaticFiringModeIdle = 0x77,
    AbilityType_StaticFiringModeRetract = 0x78,
    AbilityType_AttachedWeaponDeploy = 0x79,
    AbilityType_AttachedWeaponIdle = 0x7a,
    AbilityType_AttachedWeaponRetract = 0x7b,
    AbilityType_EquipWearable = 0x7c,
    AbilityType_UNDEFINED = 0x7d,
};


enum AccountBadge {
    AccountBadge_RSI_BADGE_QA = 0x1,
    AccountBadge_RSI_BADGE_STAFF = 0x2,
    AccountBadge_RSI_BADGE_GM = 0x4,
    AccountBadge_RSI_BADGE_SUBSCRIBER = 0x8,
    AccountBadge_RSI_BADGE_CONCIERGE = 0x10,
    AccountBadge_RSI_BADGE_MMHC = 0x20,
    AccountBadge_RSI_BADGE_BACKER = 0x40,
};


enum ActivationMethod {
    ActivationMethod_ActivateOnAttach = 0x0,
    ActivationMethod_ActivateOnDemand = 0x1,
};


enum ActivationMode {
    ActivationMode_Default = 0x0,
    ActivationMode_Press = 0x1,
    ActivationMode_Tap = 0x2,
    ActivationMode_DoubleTap = 0x3,
    ActivationMode_Hold = 0x4,
    ActivationMode_Release = 0x5,
    ActivationMode_Movement = 0x6,
    ActivationMode_UNDEFINED = 0x7,
};


enum ActiveRange {
    ActiveRange_InteriorRange = 0x0,
    ActiveRange_ExteriorRange = 0x1,
    ActiveRange_UNDEFINED = 0x2,
};


enum ActorBodyDirection {
    ActorBodyDirection_None = 0x0,
    ActorBodyDirection_Chest = 0x1,
    ActorBodyDirection_Back = 0x2,
    ActorBodyDirection_Right = 0x3,
    ActorBodyDirection_Left = 0x4,
    ActorBodyDirection_UNDEFINED = 0x5,
};


enum ActorBone {
    ActorBone_Hips = 0x0,
    ActorBone_Spine = 0x1,
    ActorBone_Spine2 = 0x2,
    ActorBone_Spine3 = 0x3,
    ActorBone_Neck = 0x4,
    ActorBone_Head = 0x5,
    ActorBone_FACIAL_LOD1_R_Eyeball = 0x6,
    ActorBone_FACIAL_LOD1_L_Eyeball = 0x7,
    ActorBone_Weapon = 0x8,
    ActorBone_Weapon2 = 0x9,
    ActorBone_FootRight = 0xa,
    ActorBone_FootLeft = 0xb,
    ActorBone_ArmRight = 0xc,
    ActorBone_ArmLeft = 0xd,
    ActorBone_ForearmRight = 0xe,
    ActorBone_ForearmLeft = 0xf,
    ActorBone_CalfRight = 0x12,
    ActorBone_CalfLeft = 0x13,
    ActorBone_Camera = 0x14,
    ActorBone_LegRight = 0x15,
    ActorBone_LegLeft = 0x16,
};


enum ActorStatCooldownType {
    ActorStatCooldownType_Time = 0x0,
    ActorStatCooldownType_Points = 0x1,
    ActorStatCooldownType_UNDEFINED = 0x2,
};


enum ActorStatType {
    ActorStatType_Hunger = 0x0,
    ActorStatType_Thirst = 0x1,
    ActorStatType_BloodDrugLevel = 0x2,
    ActorStatType_OverdoseLevel = 0x3,
    ActorStatType_BodyTemperature = 0x4,
    ActorStatType_SuitTemperature = 0x5,
    ActorStatType_Stun = 0x6,
    ActorStatType_Distortion = 0x7,
    ActorStatType_Pressure = 0x8,
    ActorStatType_GasSaturationO2 = 0x9,
    ActorStatType_DownedDamage = 0xa,
    ActorStatType_HealthPool = 0xb,
    ActorStatType_HealthHead = 0xc,
    ActorStatType_HealthTorso = 0xd,
    ActorStatType_HealthLeftArm = 0xe,
    ActorStatType_HealthRightArm = 0xf,
    ActorStatType_HealthLeftLeg = 0x10,
    ActorStatType_HealthRightLeg = 0x11,
    ActorStatType_WearHead = 0x12,
    ActorStatType_WearTorso = 0x13,
    ActorStatType_WearLeftArm = 0x14,
    ActorStatType_WearRightArm = 0x15,
    ActorStatType_WearLeftLeg = 0x16,
    ActorStatType_WearRightLeg = 0x17,
    ActorStatType_BodyRadiation = 0x18,
    ActorStatType_SuitRadiation = 0x19,
    ActorStatType_GasSaturationCO2 = 0x1a,
    ActorStatType_GasSaturationCO = 0x1b,
    ActorStatType_Hygiene = 0x1c,
    ActorStatType_UNDEFINED = 0x1d,
};


enum ActorStateFilterByAimStanceState {
    ActorStateFilterByAimStanceState_Any = 0x0,
    ActorStateFilterByAimStanceState_Inactive = 0x1,
    ActorStateFilterByAimStanceState_Relaxed = 0x2,
    ActorStateFilterByAimStanceState_Ready = 0x3,
    ActorStateFilterByAimStanceState_Lowered = 0x4,
    ActorStateFilterByAimStanceState_ADS = 0x5,
    ActorStateFilterByAimStanceState_Inspect = 0x6,
    ActorStateFilterByAimStanceState_SelfTarget = 0x7,
    ActorStateFilterByAimStanceState_MeleeBlock = 0x8,
    ActorStateFilterByAimStanceState_ThrowReady = 0x9,
    ActorStateFilterByAimStanceState_UNDEFINED = 0xa,
};


enum ActorStateFilterByCharacterType {
    ActorStateFilterByCharacterType_Any = 0x0,
    ActorStateFilterByCharacterType_PlayerOnly = 0x1,
    ActorStateFilterByCharacterType_NonPlayersOnly = 0x2,
    ActorStateFilterByCharacterType_UNDEFINED = 0x3,
};


enum ActorStateFilterByHeldItemType {
    ActorStateFilterByHeldItemType_Any = 0x0,
    ActorStateFilterByHeldItemType_Pistol = 0x1,
    ActorStateFilterByHeldItemType_Stocked = 0x2,
    ActorStateFilterByHeldItemType_Shouldered = 0x3,
    ActorStateFilterByHeldItemType_MeleeMode = 0x4,
    ActorStateFilterByHeldItemType_mobiGlas = 0x5,
    ActorStateFilterByHeldItemType_CombatThrowable = 0x6,
    ActorStateFilterByHeldItemType_Food = 0x7,
    ActorStateFilterByHeldItemType_Drink = 0x8,
    ActorStateFilterByHeldItemType_MediPenHeal = 0x9,
    ActorStateFilterByHeldItemType_Other = 0xa,
    ActorStateFilterByHeldItemType_Movable = 0xb,
    ActorStateFilterByHeldItemType_TractorBeam = 0xc,
    ActorStateFilterByHeldItemType_MiningTool = 0xd,
    ActorStateFilterByHeldItemType_None = 0xe,
    ActorStateFilterByHeldItemType_UNDEFINED = 0xf,
};


enum ActorStateFilterByLeanState {
    ActorStateFilterByLeanState_Any = 0x0,
    ActorStateFilterByLeanState_Left = 0x1,
    ActorStateFilterByLeanState_Right = 0x2,
    ActorStateFilterByLeanState_None = 0x3,
    ActorStateFilterByLeanState_UNDEFINED = 0x4,
};


enum ActorStateFilterByLocomotionSet {
    ActorStateFilterByLocomotionSet_Any = 0x0,
    ActorStateFilterByLocomotionSet_Drunk = 0x1,
    ActorStateFilterByLocomotionSet_Standard = 0x2,
    ActorStateFilterByLocomotionSet_Effort = 0x3,
    ActorStateFilterByLocomotionSet_Hurt = 0x4,
    ActorStateFilterByLocomotionSet_Stumble = 0x5,
    ActorStateFilterByLocomotionSet_BodyDragging = 0x6,
    ActorStateFilterByLocomotionSet_Movable = 0x7,
    ActorStateFilterByLocomotionSet_UNDEFINED = 0x8,
};


enum ActorStateFilterByMotionSpeed {
    ActorStateFilterByMotionSpeed_Any = 0x0,
    ActorStateFilterByMotionSpeed_Idle = 0x1,
    ActorStateFilterByMotionSpeed_Movement = 0x2,
    ActorStateFilterByMotionSpeed_Walk = 0x3,
    ActorStateFilterByMotionSpeed_Run = 0x4,
    ActorStateFilterByMotionSpeed_WalkOrRun = 0x5,
    ActorStateFilterByMotionSpeed_Sprint = 0x6,
    ActorStateFilterByMotionSpeed_UNDEFINED = 0x7,
};


enum ActorStateFilterByPoseState {
    ActorStateFilterByPoseState_Any = 0x0,
    ActorStateFilterByPoseState_Inactive = 0x1,
    ActorStateFilterByPoseState_NoWeapon = 0x2,
    ActorStateFilterByPoseState_Weapon = 0x3,
    ActorStateFilterByPoseState_Carry = 0x4,
    ActorStateFilterByPoseState_EnterCarry = 0x5,
    ActorStateFilterByPoseState_ExitCarry = 0x6,
    ActorStateFilterByPoseState_UnarmedCombat = 0x7,
    ActorStateFilterByPoseState_UNDEFINED = 0x8,
};


enum ActorStateFilterBySkeleton {
    ActorStateFilterBySkeleton_Any = 0x0,
    ActorStateFilterBySkeleton_HumanMale = 0x1,
    ActorStateFilterBySkeleton_HumanFemale = 0x2,
    ActorStateFilterBySkeleton_Vanduul = 0x3,
    ActorStateFilterBySkeleton_UNDEFINED = 0x4,
};


enum ActorStateFilterByStanceState {
    ActorStateFilterByStanceState_Any = 0x0,
    ActorStateFilterByStanceState_Inactive = 0x1,
    ActorStateFilterByStanceState_Stand = 0x2,
    ActorStateFilterByStanceState_Crouch = 0x3,
    ActorStateFilterByStanceState_Prone = 0x4,
    ActorStateFilterByStanceState_ProneFront = 0x5,
    ActorStateFilterByStanceState_ProneBack = 0x6,
    ActorStateFilterByStanceState_ProneV2 = 0x7,
    ActorStateFilterByStanceState_CoverLow = 0x8,
    ActorStateFilterByStanceState_CoverHigh = 0x9,
    ActorStateFilterByStanceState_Seated = 0xa,
    ActorStateFilterByStanceState_StandSquashed = 0xb,
    ActorStateFilterByStanceState_Swim = 0xc,
    ActorStateFilterByStanceState_Underground = 0xd,
    ActorStateFilterByStanceState_UNDEFINED = 0xe,
};


enum ActorStateFilterByState {
    ActorStateFilterByState_Any = 0x0,
    ActorStateFilterByState_BodyDragged = 0x1,
    ActorStateFilterByState_BodyDragging = 0x2,
    ActorStateFilterByState_EVA = 0x3,
    ActorStateFilterByState_Jump = 0x4,
    ActorStateFilterByState_Fall = 0x5,
    ActorStateFilterByState_Land = 0x6,
    ActorStateFilterByState_KnockDown = 0x7,
    ActorStateFilterByState_Fly = 0x8,
    ActorStateFilterByState_Swim = 0x9,
    ActorStateFilterByState_Ground = 0xa,
    ActorStateFilterByState_Ladder = 0xb,
    ActorStateFilterByState_Interacting = 0xc,
    ActorStateFilterByState_Ledge = 0xd,
    ActorStateFilterByState_Restrain = 0xe,
    ActorStateFilterByState_Unrestrain = 0xf,
    ActorStateFilterByState_TakeDown = 0x10,
    ActorStateFilterByState_Usable = 0x11,
    ActorStateFilterByState_WeaponMount = 0x12,
    ActorStateFilterByState_Scanning = 0x13,
    ActorStateFilterByState_Linked = 0x14,
    ActorStateFilterByState_ZeroGTraversal = 0x15,
    ActorStateFilterByState_ZeroGLaunch = 0x16,
    ActorStateFilterByState_ZeroGHandholdTraversal = 0x17,
    ActorStateFilterByState_Slide = 0x18,
    ActorStateFilterByState_Reload = 0x19,
    ActorStateFilterByState_HolsterUnholster = 0x1a,
    ActorStateFilterByState_Dead = 0x1b,
    ActorStateFilterByState_UNDEFINED = 0x1c,
};


enum ActorStateSelection_Stance {
    ActorStateSelection_Stance_Any = 0x0,
    ActorStateSelection_Stance_Stand = 0x1,
    ActorStateSelection_Stance_Crouch = 0x2,
    ActorStateSelection_Stance_Prone = 0x3,
    ActorStateSelection_Stance_ProneBack = 0x4,
    ActorStateSelection_Stance_CoverLow = 0x5,
    ActorStateSelection_Stance_CoverHigh = 0x6,
    ActorStateSelection_Stance_Seated = 0x7,
    ActorStateSelection_Stance_StandSquashed = 0x8,
    ActorStateSelection_Stance_Swim = 0x9,
    ActorStateSelection_Stance_UNDEFINED = 0xa,
};


enum ActorStatusType {
    ActorStatusType_Concussion = 0x0,
    ActorStatusType_Hypothermia = 0x1,
    ActorStatusType_Hyperthermia = 0x2,
    ActorStatusType_Depressurization = 0x3,
    ActorStatusType_PoorAtmosphereQuality = 0x4,
    ActorStatusType_LowHealth = 0x5,
    ActorStatusType_Hurt = 0x6,
    ActorStatusType_Damaged = 0x7,
    ActorStatusType_Ruined = 0x8,
    ActorStatusType_Starved = 0x9,
    ActorStatusType_Dehydrated = 0xa,
    ActorStatusType_Dying = 0xb,
    ActorStatusType_MildlyIntoxicated = 0xc,
    ActorStatusType_Intoxicated = 0xd,
    ActorStatusType_Downed = 0xe,
    ActorStatusType_Overdosed = 0xf,
    ActorStatusType_Injury = 0x10,
    ActorStatusType_MajorInjury = 0x11,
    ActorStatusType_DeadlyInjury = 0x12,
    ActorStatusType_RadiationSicknessMild = 0x13,
    ActorStatusType_RadiationSicknessModerate = 0x14,
    ActorStatusType_RadiationSicknessSevere = 0x15,
    ActorStatusType_DistortionInterference = 0x16,
    ActorStatusType_UNDEFINED = 0x17,
};


enum ActorStatusWidget {
    ActorStatusWidget_HealthPool = 0x0,
    ActorStatusWidget_Oxygen = 0x1,
    ActorStatusWidget_BodyTemperature = 0x2,
    ActorStatusWidget_ExternalTemperature = 0x3,
    ActorStatusWidget_InjuryDoll = 0x4,
    ActorStatusWidget_HeartMonitor = 0x5,
    ActorStatusWidget_Hunger = 0x6,
    ActorStatusWidget_Thirst = 0x7,
    ActorStatusWidget_BloodDrugLevel = 0x8,
    ActorStatusWidget_UNDEFINED = 0x9,
};


enum AgentStance {
    AgentStance_Stand = 0x1,
    AgentStance_Crouch = 0x2,
    AgentStance_Prone = 0x3,
    AgentStance_CoverLow = 0x5,
    AgentStance_CoverHigh = 0x6,
};


enum AmmoCategory {
    AmmoCategory_None = 0x0,
    AmmoCategory__5mm = 0x1,
    AmmoCategory__7mm = 0x2,
    AmmoCategory__10mm = 0x3,
    AmmoCategory__50cal = 0x4,
    AmmoCategory__50cal_pistol = 0x5,
    AmmoCategory__12g = 0x6,
    AmmoCategory_Electron = 0x7,
    AmmoCategory_Coil = 0x8,
    AmmoCategory_Plasma = 0x9,
    AmmoCategory_Laser = 0xa,
    AmmoCategory_UNDEFINED = 0xb,
};


enum AmmoSpawnType {
    AmmoSpawnType_AllClients = 0x0,
    AmmoSpawnType_ServerReplicated = 0x1,
    AmmoSpawnType_UNDEFINED = 0x2,
};


enum AnimFootSyncMethod {
    AnimFootSyncMethod_Pairs = 0x0,
};


enum AnimationGraph_TimeModifier {
    AnimationGraph_TimeModifier_None = 0x0,
    AnimationGraph_TimeModifier_Total = 0x1,
    AnimationGraph_TimeModifier_Stagger = 0x2,
};


enum AnimationGraph_TrackType {
    AnimationGraph_TrackType_RotateX = 0x0,
    AnimationGraph_TrackType_RotateY = 0x1,
    AnimationGraph_TrackType_RotateZ = 0x2,
    AnimationGraph_TrackType_Scale = 0x3,
    AnimationGraph_TrackType_Number = 0x4,
};


enum AnimationScopeContextTypes {
    AnimationScopeContextTypes_Self = 0x0,
    AnimationScopeContextTypes_ObjectContainer = 0x1,
    AnimationScopeContextTypes_ItemPort = 0x2,
    AnimationScopeContextTypes_UNDEFINED = 0x3,
};


enum AnimationVariableInterpolationType {
    AnimationVariableInterpolationType_Linear = 0x0,
    AnimationVariableInterpolationType_Acceleration = 0x1,
    AnimationVariableInterpolationType_Deceleration = 0x2,
    AnimationVariableInterpolationType_Snap = 0x3,
    AnimationVariableInterpolationType_UNDEFINED = 0x4,
};


enum AsteroidStatePropertyType {
    AsteroidStatePropertyType_DebrisDensity = 0x0,
    AsteroidStatePropertyType_UNDEFINED = 0x1,
};


enum AtmosphereStatePropertyType {
    AtmosphereStatePropertyType_Pressure = 0x0,
    AtmosphereStatePropertyType_Temperature = 0x1,
    AtmosphereStatePropertyType_Humidity = 0x2,
    AtmosphereStatePropertyType_UNDEFINED = 0x3,
};


enum AtmosphereType {
    AtmosphereType_Static = 0x0,
    AtmosphereType_Dynamic = 0x1,
    AtmosphereType_UNDEFINED = 0x2,
};


enum AttachmentZoneType {
    AttachmentZoneType_Hosted = 0x0,
    AttachmentZoneType_Host = 0x1,
    AttachmentZoneType_HostParent = 0x2,
    AttachmentZoneType_Root = 0x3,
    AttachmentZoneType_UNDEFINED = 0x4,
};


enum AttackType {
    AttackType_LightRight = 0x0,
    AttackType_LightLeft = 0x1,
    AttackType_HeavyRight = 0x2,
    AttackType_HeavyLeft = 0x3,
    AttackType_SyringeStab = 0x4,
    AttackType_AI_Light = 0x5,
    AttackType_AI_Heavy = 0x6,
    AttackType_AI_SwipeLeft = 0x7,
    AttackType_AI_SwipeRight = 0x8,
    AttackType_AI_Stab = 0x9,
    AttackType_AI_Leap = 0xa,
    AttackType_AI_HammerDown = 0xb,
    AttackType_AI_PushBack = 0xc,
    AttackType_AI_Shoot = 0xd,
    AttackType_AI_TestAttack = 0xe,
};


enum BB_AnimationDirection {
    BB_AnimationDirection_Forward = 0x0,
    BB_AnimationDirection_Reverse = 0x1,
    BB_AnimationDirection_Alternate = 0x2,
    BB_AnimationDirection_AlternateReverse = 0x3,
    BB_AnimationDirection_UNDEFINED = 0x4,
};


enum BB_AnimationFillMode {
    BB_AnimationFillMode_None = 0x0,
    BB_AnimationFillMode_Forward = 0x1,
    BB_AnimationFillMode_Backward = 0x2,
    BB_AnimationFillMode_Both = 0x3,
    BB_AnimationFillMode_UNDEFINED = 0x4,
};


enum BB_AudioEvent {
    BB_AudioEvent_Change = 0x0,
    BB_AudioEvent_ChangeToTrue = 0x1,
    BB_AudioEvent_ChangeToFalse = 0x2,
    BB_AudioEvent_UNDEFINED = 0x3,
};


enum BB_AutoScalingMethod {
    BB_AutoScalingMethod_None = 0x0,
    BB_AutoScalingMethod_Fill = 0x1,
    BB_AutoScalingMethod_Contain = 0x2,
    BB_AutoScalingMethod_UNDEFINED = 0x3,
};


enum BB_Axis {
    BB_Axis_None = 0x0,
    BB_Axis_X = 0x1,
    BB_Axis_Y = 0x2,
    BB_Axis_Both = 0x3,
    BB_Axis_UNDEFINED = 0x4,
};


enum BB_AxisDirection {
    BB_AxisDirection_Horizontal = 0x0,
    BB_AxisDirection_Vertical = 0x1,
    BB_AxisDirection_UNDEFINED = 0x2,
};


enum BB_BackgroundType {
    BB_BackgroundType_None = 0x0,
    BB_BackgroundType_Texture = 0x1,
    BB_BackgroundType_UNDEFINED = 0x2,
};


enum BB_BindingsArithmeticType {
    BB_BindingsArithmeticType_Add = 0x0,
    BB_BindingsArithmeticType_Sub = 0x1,
    BB_BindingsArithmeticType_Mul = 0x2,
    BB_BindingsArithmeticType_Div = 0x3,
    BB_BindingsArithmeticType_Min = 0x4,
    BB_BindingsArithmeticType_Max = 0x5,
    BB_BindingsArithmeticType_Mod = 0x6,
    BB_BindingsArithmeticType_Pow = 0x7,
    BB_BindingsArithmeticType_UNDEFINED = 0x8,
};


enum BB_BindingsBuiltInVariableTypeInteger {
    BB_BindingsBuiltInVariableTypeInteger_ServerTime = 0x0,
    BB_BindingsBuiltInVariableTypeInteger_ListIndex = 0x1,
    BB_BindingsBuiltInVariableTypeInteger_UNDEFINED = 0x2,
};


enum BB_BindingsBuiltInVariableTypeNumber {
    BB_BindingsBuiltInVariableTypeNumber_TimerSeconds = 0x0,
    BB_BindingsBuiltInVariableTypeNumber_CameraDistance = 0x1,
    BB_BindingsBuiltInVariableTypeNumber_UNDEFINED = 0x2,
};


enum BB_BindingsCaseModifierType {
    BB_BindingsCaseModifierType_None = 0x0,
    BB_BindingsCaseModifierType_Upper = 0x1,
    BB_BindingsCaseModifierType_Lower = 0x2,
    BB_BindingsCaseModifierType_Pascal = 0x3,
    BB_BindingsCaseModifierType_Camel = 0x4,
    BB_BindingsCaseModifierType_UNDEFINED = 0x5,
};


enum BB_BindingsCurrencyType {
    BB_BindingsCurrencyType_CURRENCY_UEC = 0x0,
    BB_BindingsCurrencyType_CURRENCY_REC = 0x1,
    BB_BindingsCurrencyType_CURRENCY_AUEC = 0x2,
    BB_BindingsCurrencyType_CURRENCY_MER = 0x3,
    BB_BindingsCurrencyType_UNDEFINED = 0x4,
};


enum BB_BindingsFunctionType {
    BB_BindingsFunctionType_Floor = 0x0,
    BB_BindingsFunctionType_Ceil = 0x1,
    BB_BindingsFunctionType_Round = 0x2,
    BB_BindingsFunctionType_ModFrac = 0x3,
    BB_BindingsFunctionType_ModInt = 0x4,
    BB_BindingsFunctionType_Exp = 0x5,
    BB_BindingsFunctionType_Log = 0x6,
    BB_BindingsFunctionType_Sin = 0x7,
    BB_BindingsFunctionType_Cos = 0x8,
    BB_BindingsFunctionType_Abs = 0x9,
    BB_BindingsFunctionType_Tan = 0xa,
    BB_BindingsFunctionType_Asin = 0xb,
    BB_BindingsFunctionType_Acos = 0xc,
    BB_BindingsFunctionType_Atan = 0xd,
    BB_BindingsFunctionType_Sqrt = 0xe,
    BB_BindingsFunctionType_Squared = 0xf,
    BB_BindingsFunctionType_Cubed = 0x10,
    BB_BindingsFunctionType_UNDEFINED = 0x11,
};


enum BB_BindingsIntegerConstants {
    BB_BindingsIntegerConstants_InvalidIndex = 0x0,
    BB_BindingsIntegerConstants_UNDEFINED = 0x1,
};


enum BB_BindingsIntegerFunctionType {
    BB_BindingsIntegerFunctionType_Abs = 0x0,
    BB_BindingsIntegerFunctionType_Squared = 0x1,
    BB_BindingsIntegerFunctionType_Cubed = 0x2,
    BB_BindingsIntegerFunctionType_UNDEFINED = 0x3,
};


enum BB_BooleanField {
    BB_BooleanField_AffectsAutosize = 0x0,
    BB_BooleanField_AffectsLayout = 0x1,
    BB_BooleanField_AutoFontSize = 0x2,
    BB_BooleanField_AutoScroll = 0x3,
    BB_BooleanField_CenterDragProxyOnCursor = 0x4,
    BB_BooleanField_Chamfer = 0x5,
    BB_BooleanField_CustomPivot = 0x6,
    BB_BooleanField_Disabled = 0x7,
    BB_BooleanField_DoFill = 0x8,
    BB_BooleanField_DoStroke = 0x9,
    BB_BooleanField_Editable = 0xa,
    BB_BooleanField_EditBoxSingleLine = 0xb,
    BB_BooleanField_EditBoxAllowSpaces = 0xc,
    BB_BooleanField_EditBoxBindingsAuthoritative = 0xd,
    BB_BooleanField_EditBoxConfirmDeselect = 0xe,
    BB_BooleanField_EditBoxHiddenText = 0xf,
    BB_BooleanField_EnableBackground = 0x10,
    BB_BooleanField_EnableBottomRightBorderChamfer = 0x11,
    BB_BooleanField_EnableBottomLeftBorderChamfer = 0x12,
    BB_BooleanField_EnableColorOverlay = 0x13,
    BB_BooleanField_EnableMinWidth = 0x14,
    BB_BooleanField_EnableMinHeight = 0x15,
    BB_BooleanField_EnableMaxWidth = 0x16,
    BB_BooleanField_EnableMaxHeight = 0x17,
    BB_BooleanField_EnableNineSliceRect = 0x18,
    BB_BooleanField_EnableSegmentedBarFill = 0x19,
    BB_BooleanField_EnableSegmentedFill = 0x1a,
    BB_BooleanField_EnableSilhouette = 0x1b,
    BB_BooleanField_EnableTopLeftBorderChamfer = 0x1c,
    BB_BooleanField_EnableTopRightBorderChamfer = 0x1d,
    BB_BooleanField_FadeXAxis = 0x1e,
    BB_BooleanField_FadeYAxis = 0x1f,
    BB_BooleanField_FadeZAxis = 0x20,
    BB_BooleanField_GeomEntityAnimationNormalizeTime = 0x21,
    BB_BooleanField_GeomEntityAnimationWrapTime = 0x22,
    BB_BooleanField_GhostPrimRearOffset = 0x23,
    BB_BooleanField_ImageFlipHorizontal = 0x24,
    BB_BooleanField_ImageFlipVertical = 0x25,
    BB_BooleanField_IncludeInGroundingEffects = 0x26,
    BB_BooleanField_InheritDisabledState = 0x27,
    BB_BooleanField_InheritDownState = 0x28,
    BB_BooleanField_InheritHoverState = 0x29,
    BB_BooleanField_InheritRadialRotation = 0x2a,
    BB_BooleanField_InheritRadialShapeWarp = 0x2b,
    BB_BooleanField_InheritSelectedState = 0x2c,
    BB_BooleanField_Instantiated = 0x2d,
    BB_BooleanField_Interactable = 0x2e,
    BB_BooleanField_IsActive = 0x2f,
    BB_BooleanField_FillStroke = 0x30,
    BB_BooleanField_Flip = 0x31,
    BB_BooleanField_MaintainGapLength = 0x32,
    BB_BooleanField_MouseTestRadialShape = 0x33,
    BB_BooleanField_MoviePlaying = 0x34,
    BB_BooleanField_ParallelGaps = 0x35,
    BB_BooleanField_PrimitiveFlipHorizontal = 0x36,
    BB_BooleanField_PrimitiveFlipVertical = 0x37,
    BB_BooleanField_PrimitiveHasPerspective = 0x38,
    BB_BooleanField_PrimitiveIsFacingCamera = 0x39,
    BB_BooleanField_PropagateInteractionStates = 0x3a,
    BB_BooleanField_RenderAsHTML = 0x3b,
    BB_BooleanField_RenderShape = 0x3c,
    BB_BooleanField_RotateProgressAngleWidget = 0x3d,
    BB_BooleanField_RotateStartAngleWidget = 0x3e,
    BB_BooleanField_PivotStartAngleWidget = 0x3f,
    BB_BooleanField_PivotProgressAngleWidget = 0x40,
    BB_BooleanField_PrimitiveIsGrouped = 0x41,
    BB_BooleanField_Selected = 0x42,
    BB_BooleanField_SvgFlipHorizontal = 0x43,
    BB_BooleanField_SvgFlipVertical = 0x44,
    BB_BooleanField_TextBold = 0x45,
    BB_BooleanField_TextItalic = 0x46,
    BB_BooleanField_TextKerning = 0x47,
    BB_BooleanField_TextUnderline = 0x48,
    BB_BooleanField_WordWrap = 0x49,
    BB_BooleanField_ParamInput0 = 0x4a,
    BB_BooleanField_ParamInput1 = 0x4b,
    BB_BooleanField_ParamInput2 = 0x4c,
    BB_BooleanField_ParamInput3 = 0x4d,
    BB_BooleanField_ParamInput4 = 0x4e,
    BB_BooleanField_ParamInput5 = 0x4f,
    BB_BooleanField_ParamInput6 = 0x50,
    BB_BooleanField_ParamInput7 = 0x51,
    BB_BooleanField_ParamInput8 = 0x52,
    BB_BooleanField_UNDEFINED = 0x53,
};


enum BB_BooleanWriteMode {
    BB_BooleanWriteMode_Invert = 0x0,
    BB_BooleanWriteMode_Set = 0x1,
    BB_BooleanWriteMode_Clear = 0x2,
    BB_BooleanWriteMode_UNDEFINED = 0x3,
};


enum BB_CanvasCoordinateMethod {
    BB_CanvasCoordinateMethod_useRaw = 0x0,
    BB_CanvasCoordinateMethod_aspectOverridesWidth = 0x1,
    BB_CanvasCoordinateMethod_aspectOverridesHeight = 0x2,
    BB_CanvasCoordinateMethod_auto = 0x3,
    BB_CanvasCoordinateMethod_longestSide = 0x4,
};


enum BB_CanvasWidgetSizingMethod {
    BB_CanvasWidgetSizingMethod_Size = 0x0,
    BB_CanvasWidgetSizingMethod_Scale = 0x1,
    BB_CanvasWidgetSizingMethod_UNDEFINED = 0x2,
};


enum BB_ColorField {
    BB_ColorField_BackgroundColor = 0x0,
    BB_ColorField_BackgroundColorTopLeft = 0x1,
    BB_ColorField_BackgroundColorBottomLeft = 0x2,
    BB_ColorField_BackgroundColorTopRight = 0x3,
    BB_ColorField_BackgroundColorBottomRight = 0x4,
    BB_ColorField_BorderColorLeft = 0x5,
    BB_ColorField_BorderColorRight = 0x6,
    BB_ColorField_BorderColorTop = 0x7,
    BB_ColorField_BorderColorBottom = 0x8,
    BB_ColorField_FillColor = 0x9,
    BB_ColorField_GlowColor = 0xa,
    BB_ColorField_LightColor = 0xb,
    BB_ColorField_SegmentColor = 0xc,
    BB_ColorField_StrokeColor = 0xd,
    BB_ColorField_StripStartColor = 0xe,
    BB_ColorField_StripEndColor = 0xf,
    BB_ColorField_SilhouetteColor = 0x10,
    BB_ColorField_TintColor = 0x11,
    BB_ColorField_ParamInput0 = 0x12,
    BB_ColorField_ParamInput1 = 0x13,
    BB_ColorField_ParamInput2 = 0x14,
    BB_ColorField_ParamInput3 = 0x15,
    BB_ColorField_ParamInput4 = 0x16,
    BB_ColorField_ParamInput5 = 0x17,
    BB_ColorField_ParamInput6 = 0x18,
    BB_ColorField_ParamInput7 = 0x19,
    BB_ColorField_ParamInput8 = 0x1a,
    BB_ColorField_UNDEFINED = 0x1b,
};


enum BB_ColorStyle {
    BB_ColorStyle_Base = 0x0,
    BB_ColorStyle_Positive = 0x1,
    BB_ColorStyle_Moderate = 0x2,
    BB_ColorStyle_Critical = 0x3,
    BB_ColorStyle_Accent1 = 0x4,
    BB_ColorStyle_Accent2 = 0x5,
    BB_ColorStyle_Bright = 0x6,
    BB_ColorStyle_Selected = 0x7,
    BB_ColorStyle_Disabled = 0x8,
    BB_ColorStyle_Background = 0x9,
    BB_ColorStyle_ContactNeutral = 0xa,
    BB_ColorStyle_ContactParty = 0xb,
    BB_ColorStyle_ContactPositiveRep = 0xc,
    BB_ColorStyle_ContactNegativeRep = 0xd,
    BB_ColorStyle_ContactAgressive = 0xe,
    BB_ColorStyle_ContactUnknown = 0xf,
    BB_ColorStyle_MissionObjectives = 0x10,
    BB_ColorStyle_UNDEFINED = 0x11,
};


enum BB_ComparisonOperatorType {
    BB_ComparisonOperatorType_Equal = 0x0,
    BB_ComparisonOperatorType_NotEqual = 0x1,
    BB_ComparisonOperatorType_Greater = 0x2,
    BB_ComparisonOperatorType_GreaterOrEqual = 0x3,
    BB_ComparisonOperatorType_Less = 0x4,
    BB_ComparisonOperatorType_LessOrEqual = 0x5,
    BB_ComparisonOperatorType_UNDEFINED = 0x6,
};


enum BB_ComponentParameter {
    BB_ComponentParameter_ParamInput0 = 0x0,
    BB_ComponentParameter_ParamInput1 = 0x1,
    BB_ComponentParameter_ParamInput2 = 0x2,
    BB_ComponentParameter_ParamInput3 = 0x3,
    BB_ComponentParameter_ParamInput4 = 0x4,
    BB_ComponentParameter_ParamInput5 = 0x5,
    BB_ComponentParameter_ParamInput6 = 0x6,
    BB_ComponentParameter_ParamInput7 = 0x7,
    BB_ComponentParameter_ParamInput8 = 0x8,
    BB_ComponentParameter_UNDEFINED = 0x9,
};


enum BB_ContentBoxPosition {
    BB_ContentBoxPosition_Top = 0x0,
    BB_ContentBoxPosition_Right = 0x1,
    BB_ContentBoxPosition_Bottom = 0x2,
    BB_ContentBoxPosition_Left = 0x3,
    BB_ContentBoxPosition_UNDEFINED = 0x4,
};


enum BB_CurvatureAxis {
    BB_CurvatureAxis_X = 0x0,
    BB_CurvatureAxis_Y = 0x1,
    BB_CurvatureAxis_Z = 0x2,
    BB_CurvatureAxis_UNDEFINED = 0x3,
};


enum BB_DraggablePolicyType {
    BB_DraggablePolicyType_None = 0x0,
    BB_DraggablePolicyType_DropTargetItem = 0x1,
    BB_DraggablePolicyType_UNDEFINED = 0x2,
};


enum BB_DropTargetPolicyType {
    BB_DropTargetPolicyType_None = 0x0,
    BB_DropTargetPolicyType_DropTarget = 0x1,
    BB_DropTargetPolicyType_UNDEFINED = 0x2,
};


enum BB_DropdownAlignment {
    BB_DropdownAlignment_Up = 0x0,
    BB_DropdownAlignment_Down = 0x1,
    BB_DropdownAlignment_UNDEFINED = 0x2,
};


enum BB_DustParticleMovementRestriction {
    BB_DustParticleMovementRestriction_None = 0x0,
    BB_DustParticleMovementRestriction_ZoomExclusive = 0x1,
    BB_DustParticleMovementRestriction_TranslationExclusive = 0x2,
    BB_DustParticleMovementRestriction_UNDEFINED = 0x3,
};


enum BB_FillStyle {
    BB_FillStyle_Filled = 0x0,
    BB_FillStyle_Ghost = 0x1,
    BB_FillStyle_UNDEFINED = 0x2,
};


enum BB_FlexAxisJustification {
    BB_FlexAxisJustification_Start = 0x0,
    BB_FlexAxisJustification_End = 0x1,
    BB_FlexAxisJustification_Center = 0x2,
    BB_FlexAxisJustification_SpaceBetween = 0x3,
    BB_FlexAxisJustification_SpaceAround = 0x4,
    BB_FlexAxisJustification_SpaceEvenly = 0x5,
    BB_FlexAxisJustification_Stretch = 0x6,
    BB_FlexAxisJustification_UNDEFINED = 0x7,
};


enum BB_FlexDirection {
    BB_FlexDirection_Row = 0x0,
    BB_FlexDirection_RowReverse = 0x1,
    BB_FlexDirection_Column = 0x2,
    BB_FlexDirection_ColumnReverse = 0x3,
    BB_FlexDirection_UNDEFINED = 0x4,
};


enum BB_FlexItemAlignment {
    BB_FlexItemAlignment_Start = 0x0,
    BB_FlexItemAlignment_End = 0x1,
    BB_FlexItemAlignment_Center = 0x2,
    BB_FlexItemAlignment_Stretch = 0x3,
    BB_FlexItemAlignment_UNDEFINED = 0x4,
};


enum BB_FlexWrap {
    BB_FlexWrap_Wrap = 0x0,
    BB_FlexWrap_WrapReverse = 0x1,
    BB_FlexWrap_NoWrap = 0x2,
    BB_FlexWrap_NoWrapInfinite = 0x3,
    BB_FlexWrap_UNDEFINED = 0x4,
};


enum BB_FlipDirection {
    BB_FlipDirection_None = 0x0,
    BB_FlipDirection_Vertical = 0x1,
    BB_FlipDirection_Horizontal = 0x2,
    BB_FlipDirection_Both = 0x3,
    BB_FlipDirection_UNDEFINED = 0x4,
};


enum BB_GrabBounds {
    BB_GrabBounds_Sphere = 0x0,
    BB_GrabBounds_Box = 0x1,
    BB_GrabBounds_UNDEFINED = 0x2,
};


enum BB_GrabRotationMode {
    BB_GrabRotationMode_Orbital = 0x0,
    BB_GrabRotationMode_Planar = 0x1,
    BB_GrabRotationMode_UNDEFINED = 0x2,
};


enum BB_GridPackDirection {
    BB_GridPackDirection_Horizontal = 0x0,
    BB_GridPackDirection_Vertical = 0x1,
    BB_GridPackDirection_UNDEFINED = 0x2,
};


enum BB_IconWidgetPreset {
    BB_IconWidgetPreset_None = 0x0,
    BB_IconWidgetPreset_ArrowHollowUp = 0x1,
    BB_IconWidgetPreset_ArrowHollowRight = 0x2,
    BB_IconWidgetPreset_ArrowHollowDown = 0x3,
    BB_IconWidgetPreset_ArrowHollowLeft = 0x4,
    BB_IconWidgetPreset_ArrowHollowCurvedLeft = 0x5,
    BB_IconWidgetPreset_ArrowHollowCurvedRight = 0x6,
    BB_IconWidgetPreset_ArrowHollowCurvedDoubleLeft = 0x7,
    BB_IconWidgetPreset_ArrowHollowCurvedDoubleRight = 0x8,
    BB_IconWidgetPreset_ArrowHollowCurvedDownLeft = 0x9,
    BB_IconWidgetPreset_ArrowHollowCurvedDownRight = 0xa,
    BB_IconWidgetPreset_ArrowUp = 0xb,
    BB_IconWidgetPreset_ArrowRight = 0xc,
    BB_IconWidgetPreset_ArrowDown = 0xd,
    BB_IconWidgetPreset_ArrowLeft = 0xe,
    BB_IconWidgetPreset_ArrowUpLeft = 0xf,
    BB_IconWidgetPreset_ArrowUpRight = 0x10,
    BB_IconWidgetPreset_ArrowDownRight = 0x11,
    BB_IconWidgetPreset_ArrowDownLeft = 0x12,
    BB_IconWidgetPreset_ArrowHookLeft = 0x13,
    BB_IconWidgetPreset_ArrowHookRight = 0x14,
    BB_IconWidgetPreset_ArrowDiamond = 0x15,
    BB_IconWidgetPreset_ArrowSquare = 0x16,
    BB_IconWidgetPreset_ArrowExpandDownUp = 0x17,
    BB_IconWidgetPreset_ArrowExpandUpDown = 0x18,
    BB_IconWidgetPreset_ArrowCurvedLeft = 0x19,
    BB_IconWidgetPreset_ArrowCurvedRight = 0x1a,
    BB_IconWidgetPreset_ArrowCurvedDoubleLeft = 0x1b,
    BB_IconWidgetPreset_ArrowCurvedDoubleRight = 0x1c,
    BB_IconWidgetPreset_ArrowCurvedDownLeft = 0x1d,
    BB_IconWidgetPreset_ArrowCurvedDownRight = 0x1e,
    BB_IconWidgetPreset_ArrowFullCircleCCW = 0x1f,
    BB_IconWidgetPreset_ArrowFullCircleCW = 0x20,
    BB_IconWidgetPreset_ArrowHalfCircleCCW = 0x21,
    BB_IconWidgetPreset_ArrowHalfCircleCW = 0x22,
    BB_IconWidgetPreset_ArrowHalfCircleExclamationCCW = 0x23,
    BB_IconWidgetPreset_ArrowHalfCircleExclamationCW = 0x24,
    BB_IconWidgetPreset_ArrowCaratUp = 0x25,
    BB_IconWidgetPreset_ArrowCaratRight = 0x26,
    BB_IconWidgetPreset_ArrowCaratDown = 0x27,
    BB_IconWidgetPreset_ArrowCaratLeft = 0x28,
    BB_IconWidgetPreset_ArrowCaratDoubleUp = 0x29,
    BB_IconWidgetPreset_ArrowCaratDoubleRight = 0x2a,
    BB_IconWidgetPreset_ArrowCaratDoubleDown = 0x2b,
    BB_IconWidgetPreset_ArrowCaratDoubleLeft = 0x2c,
    BB_IconWidgetPreset_ArrowEncasedUp = 0x2d,
    BB_IconWidgetPreset_ArrowEncasedRight = 0x2e,
    BB_IconWidgetPreset_ArrowEncasedDown = 0x2f,
    BB_IconWidgetPreset_ArrowEncasedLeft = 0x30,
    BB_IconWidgetPreset_ArrowEncasedUpLeft = 0x31,
    BB_IconWidgetPreset_ArrowEncasedUpRight = 0x32,
    BB_IconWidgetPreset_ArrowEncasedDownRight = 0x33,
    BB_IconWidgetPreset_ArrowEncasedDownLeft = 0x34,
    BB_IconWidgetPreset_ArrowEncasedHookLeft = 0x35,
    BB_IconWidgetPreset_ArrowEncasedHookRight = 0x36,
    BB_IconWidgetPreset_ArrowEncasedCaratUp = 0x37,
    BB_IconWidgetPreset_ArrowEncasedCaratRight = 0x38,
    BB_IconWidgetPreset_ArrowEncasedCaratDown = 0x39,
    BB_IconWidgetPreset_ArrowEncasedCaratLeft = 0x3a,
    BB_IconWidgetPreset_ArrowEncasedCaratDoubleUp = 0x3b,
    BB_IconWidgetPreset_ArrowEncasedCaratDoubleRight = 0x3c,
    BB_IconWidgetPreset_ArrowEncasedCaratDoubleDown = 0x3d,
    BB_IconWidgetPreset_ArrowEncasedCaratDoubleLeft = 0x3e,
    BB_IconWidgetPreset_GeneralCheckmark = 0x3f,
    BB_IconWidgetPreset_GeneralCircleFilled = 0x40,
    BB_IconWidgetPreset_GeneralX = 0x41,
    BB_IconWidgetPreset_GeneralInfo = 0x42,
    BB_IconWidgetPreset_UNDEFINED = 0x43,
};


enum BB_ImageScalingMethod {
    BB_ImageScalingMethod_Fill = 0x0,
    BB_ImageScalingMethod_Contain = 0x1,
    BB_ImageScalingMethod_Cover = 0x2,
    BB_ImageScalingMethod_UNDEFINED = 0x3,
};


enum BB_IntegerField {
    BB_IntegerField_AutoScrollBehavior = 0x0,
    BB_IntegerField_BorderBottomLeftRadiusBehavior = 0x1,
    BB_IntegerField_BorderBottomRightRadiusBehavior = 0x2,
    BB_IntegerField_BorderTopLeftRadiusBehavior = 0x3,
    BB_IntegerField_BorderTopRightRadiusBehavior = 0x4,
    BB_IntegerField_CanvasWidgetSizingMethod = 0x5,
    BB_IntegerField_CaretIndex = 0x6,
    BB_IntegerField_CaseModifier = 0x7,
    BB_IntegerField_CurvatureAxis = 0x8,
    BB_IntegerField_DepthBehavior = 0x9,
    BB_IntegerField_DraggablePolicy = 0xa,
    BB_IntegerField_DropTargetPolicy = 0xb,
    BB_IntegerField_DustParticleCount = 0xc,
    BB_IntegerField_DustParticleMovementRestriction = 0xd,
    BB_IntegerField_ImageScalingBehavior = 0xe,
    BB_IntegerField_EditBoxCharLimit = 0xf,
    BB_IntegerField_EntityImageSource = 0x10,
    BB_IntegerField_FlexItemAlignment = 0x11,
    BB_IntegerField_FlexAxisJustification = 0x12,
    BB_IntegerField_FlexCrossAxisJustification = 0x13,
    BB_IntegerField_FlexDirection = 0x14,
    BB_IntegerField_FlexWrap = 0x15,
    BB_IntegerField_GhostPrimCount = 0x16,
    BB_IntegerField_GridPackDirection = 0x17,
    BB_IntegerField_HeightBehavior = 0x18,
    BB_IntegerField_HorizontalAlignment = 0x19,
    BB_IntegerField_LayoutDisplayOrder = 0x1a,
    BB_IntegerField_LayoutPolicy = 0x1b,
    BB_IntegerField_MaxWidthBehavior = 0x1c,
    BB_IntegerField_MaxHeightBehavior = 0x1d,
    BB_IntegerField_MinWidthBehavior = 0x1e,
    BB_IntegerField_MinHeightBehavior = 0x1f,
    BB_IntegerField_MovieStartTimeMs = 0x20,
    BB_IntegerField_RadialPolyResolution = 0x21,
    BB_IntegerField_RuntimeImageSource = 0x22,
    BB_IntegerField_ScrollBehavior = 0x23,
    BB_IntegerField_ScrollDirection = 0x24,
    BB_IntegerField_ScrollEasingType = 0x25,
    BB_IntegerField_ScrollPolicy = 0x26,
    BB_IntegerField_SegmentSizeBehavior = 0x27,
    BB_IntegerField_SegmentSpacingSizeBehavior = 0x28,
    BB_IntegerField_StackDirection = 0x29,
    BB_IntegerField_StrokeAlignment = 0x2a,
    BB_IntegerField_StrokeCapStyle = 0x2b,
    BB_IntegerField_StrokeJointStyle = 0x2c,
    BB_IntegerField_SegmentEasing = 0x2d,
    BB_IntegerField_SegmentProgressBehavior = 0x2e,
    BB_IntegerField_SvgScalingBehavior = 0x2f,
    BB_IntegerField_SliderMode = 0x30,
    BB_IntegerField_TextureGroup = 0x31,
    BB_IntegerField_TickBoxMode = 0x32,
    BB_IntegerField_Segments = 0x33,
    BB_IntegerField_Sides = 0x34,
    BB_IntegerField_SquashAxis = 0x35,
    BB_IntegerField_VerticalAlignment = 0x36,
    BB_IntegerField_WidthBehavior = 0x37,
    BB_IntegerField_ParamInput0 = 0x38,
    BB_IntegerField_ParamInput1 = 0x39,
    BB_IntegerField_ParamInput2 = 0x3a,
    BB_IntegerField_ParamInput3 = 0x3b,
    BB_IntegerField_ParamInput4 = 0x3c,
    BB_IntegerField_ParamInput5 = 0x3d,
    BB_IntegerField_ParamInput6 = 0x3e,
    BB_IntegerField_ParamInput7 = 0x3f,
    BB_IntegerField_ParamInput8 = 0x40,
    BB_IntegerField_UNDEFINED = 0x41,
};


enum BB_JumpTerm {
    BB_JumpTerm_Start = 0x0,
    BB_JumpTerm_End = 0x1,
    BB_JumpTerm_UNDEFINED = 0x2,
};


enum BB_LayoutPolicyType {
    BB_LayoutPolicyType_None = 0x0,
    BB_LayoutPolicyType_Flex = 0x1,
    BB_LayoutPolicyType_GridPack = 0x2,
    BB_LayoutPolicyType_Spacer = 0x3,
    BB_LayoutPolicyType_Stack = 0x4,
    BB_LayoutPolicyType_UNDEFINED = 0x5,
};


enum BB_LineScaleStyle {
    BB_LineScaleStyle_Normal = 0x0,
    BB_LineScaleStyle_Horizontal = 0x1,
    BB_LineScaleStyle_Vertical = 0x2,
    BB_LineScaleStyle_None = 0x3,
    BB_LineScaleStyle_UNDEFINED = 0x4,
};


enum BB_LocalizedField {
    BB_LocalizedField_EditBoxHelperString = 0x0,
    BB_LocalizedField_Text = 0x1,
    BB_LocalizedField_TooltipText = 0x2,
    BB_LocalizedField_ParamInput0 = 0x3,
    BB_LocalizedField_ParamInput1 = 0x4,
    BB_LocalizedField_ParamInput2 = 0x5,
    BB_LocalizedField_ParamInput3 = 0x6,
    BB_LocalizedField_ParamInput4 = 0x7,
    BB_LocalizedField_ParamInput5 = 0x8,
    BB_LocalizedField_ParamInput6 = 0x9,
    BB_LocalizedField_ParamInput7 = 0xa,
    BB_LocalizedField_ParamInput8 = 0xb,
    BB_LocalizedField_UNDEFINED = 0xc,
};


enum BB_NavigationType {
    BB_NavigationType_Back = 0x0,
    BB_NavigationType_Close = 0x1,
    BB_NavigationType_UNDEFINED = 0x2,
};


enum BB_NumberField {
    BB_NumberField_Alpha = 0x0,
    BB_NumberField_AnchorX = 0x1,
    BB_NumberField_AnchorY = 0x2,
    BB_NumberField_AnchorZ = 0x3,
    BB_NumberField_AutoScrollSpeed = 0x4,
    BB_NumberField_AutoScrollStartPause = 0x5,
    BB_NumberField_AutoScrollEndPause = 0x6,
    BB_NumberField_AutoScrollFadeSpeed = 0x7,
    BB_NumberField_BorderTopWidth = 0x8,
    BB_NumberField_BorderRightWidth = 0x9,
    BB_NumberField_BorderBottomWidth = 0xa,
    BB_NumberField_BorderLeftWidth = 0xb,
    BB_NumberField_BorderTopLeftRadius = 0xc,
    BB_NumberField_BorderTopRightRadius = 0xd,
    BB_NumberField_BorderBottomRightRadius = 0xe,
    BB_NumberField_BorderBottomLeftRadius = 0xf,
    BB_NumberField_CharsPerSecond = 0x10,
    BB_NumberField_ConicSlantFactor = 0x11,
    BB_NumberField_CornerRatio = 0x12,
    BB_NumberField_DissolveOpacity = 0x13,
    BB_NumberField_DustParticleDiameter = 0x14,
    BB_NumberField_DustParticleOffsetX = 0x15,
    BB_NumberField_DustParticleOffsetY = 0x16,
    BB_NumberField_DustParticleOffsetZ = 0x17,
    BB_NumberField_DustZoomFactor = 0x18,
    BB_NumberField_EntityContentOrientationX = 0x19,
    BB_NumberField_EntityContentOrientationY = 0x1a,
    BB_NumberField_EntityContentOrientationZ = 0x1b,
    BB_NumberField_EntityContentScaleLimitMin = 0x1c,
    BB_NumberField_EntityContentScaleLimitMax = 0x1d,
    BB_NumberField_EntityDirt = 0x1e,
    BB_NumberField_EntityWear = 0x1f,
    BB_NumberField_InterferenceAmount = 0x20,
    BB_NumberField_FillStrokeWidth = 0x21,
    BB_NumberField_FlexColumnSpacing = 0x22,
    BB_NumberField_FlexGrowProportion = 0x23,
    BB_NumberField_FlexRowSpacing = 0x24,
    BB_NumberField_FlexShrinkProportion = 0x25,
    BB_NumberField_FontSize = 0x26,
    BB_NumberField_GapAngle = 0x27,
    BB_NumberField_GeomEntityAnimationTime = 0x28,
    BB_NumberField_GhostPrimAlphaClamp = 0x29,
    BB_NumberField_GhostPrimAlphaFactor = 0x2a,
    BB_NumberField_GhostPrimScaleFactor = 0x2b,
    BB_NumberField_GlowAmount = 0x2c,
    BB_NumberField_GridPackGutter = 0x2d,
    BB_NumberField_HitDetectionOffset = 0x2e,
    BB_NumberField_LayoutTransitionDelay = 0x2f,
    BB_NumberField_LayoutTransitionDuration = 0x30,
    BB_NumberField_LetterSpacing = 0x31,
    BB_NumberField_LightBulbRadius = 0x32,
    BB_NumberField_LightIntensity = 0x33,
    BB_NumberField_LightFrustumAngle = 0x34,
    BB_NumberField_LightRadius = 0x35,
    BB_NumberField_LinearSliderMinValue = 0x36,
    BB_NumberField_LinearSliderMaxValue = 0x37,
    BB_NumberField_LineSpacing = 0x38,
    BB_NumberField_LocalCoordinateSpace = 0x39,
    BB_NumberField_MarginTop = 0x3a,
    BB_NumberField_MarginRight = 0x3b,
    BB_NumberField_MarginBottom = 0x3c,
    BB_NumberField_MarginLeft = 0x3d,
    BB_NumberField_MarginFront = 0x3e,
    BB_NumberField_MarginBack = 0x3f,
    BB_NumberField_MaxMeterClamp = 0x40,
    BB_NumberField_MaxProgressClamp = 0x41,
    BB_NumberField_MaxSizeX = 0x42,
    BB_NumberField_MaxSizeY = 0x43,
    BB_NumberField_MinMeterClamp = 0x44,
    BB_NumberField_MinProgressClamp = 0x45,
    BB_NumberField_MinSizeX = 0x46,
    BB_NumberField_MinSizeY = 0x47,
    BB_NumberField_NineSliceTop = 0x48,
    BB_NumberField_NineSliceRight = 0x49,
    BB_NumberField_NineSliceBottom = 0x4a,
    BB_NumberField_NineSliceLeft = 0x4b,
    BB_NumberField_NineSliceScale = 0x4c,
    BB_NumberField_OrientationX = 0x4d,
    BB_NumberField_OrientationY = 0x4e,
    BB_NumberField_OrientationZ = 0x4f,
    BB_NumberField_OrientationXOffset = 0x50,
    BB_NumberField_OrientationYOffset = 0x51,
    BB_NumberField_OrientationZOffset = 0x52,
    BB_NumberField_OverflowWidthFadeThreshold = 0x53,
    BB_NumberField_OverflowHeightFadeThreshold = 0x54,
    BB_NumberField_OverflowDepthFadeThreshold = 0x55,
    BB_NumberField_PaddingTop = 0x56,
    BB_NumberField_PaddingRight = 0x57,
    BB_NumberField_PaddingBottom = 0x58,
    BB_NumberField_PaddingLeft = 0x59,
    BB_NumberField_PaddingFront = 0x5a,
    BB_NumberField_PaddingBack = 0x5b,
    BB_NumberField_PosX = 0x5c,
    BB_NumberField_PosY = 0x5d,
    BB_NumberField_PosZ = 0x5e,
    BB_NumberField_PosXOffset = 0x5f,
    BB_NumberField_PosYOffset = 0x60,
    BB_NumberField_PosZOffset = 0x61,
    BB_NumberField_PrimitiveConstantScale = 0x62,
    BB_NumberField_PrimitiveInterferenceEffect = 0x63,
    BB_NumberField_ScaleX = 0x64,
    BB_NumberField_ScaleY = 0x65,
    BB_NumberField_ScaleZ = 0x66,
    BB_NumberField_SizeX = 0x67,
    BB_NumberField_SizeY = 0x68,
    BB_NumberField_SizeZ = 0x69,
    BB_NumberField_TintStrength = 0x6a,
    BB_NumberField_PivotX = 0x6b,
    BB_NumberField_PivotY = 0x6c,
    BB_NumberField_PivotZ = 0x6d,
    BB_NumberField_Progress = 0x6e,
    BB_NumberField_RadialTransformMultiplier = 0x6f,
    BB_NumberField_ScrollEasingTime = 0x70,
    BB_NumberField_ScrollPixelIncrement = 0x71,
    BB_NumberField_SegmentAngle = 0x72,
    BB_NumberField_SegmentSize = 0x73,
    BB_NumberField_SegmentSpacingSize = 0x74,
    BB_NumberField_SegmentXOffset = 0x75,
    BB_NumberField_SilhouetteWidth = 0x76,
    BB_NumberField_StackSpacing = 0x77,
    BB_NumberField_StartAngle = 0x78,
    BB_NumberField_StartDelayTime = 0x79,
    BB_NumberField_UStart = 0x7a,
    BB_NumberField_VStart = 0x7b,
    BB_NumberField_USize = 0x7c,
    BB_NumberField_VSize = 0x7d,
    BB_NumberField_StepAngle = 0x7e,
    BB_NumberField_StepMidPoint = 0x7f,
    BB_NumberField_StripWidth = 0x80,
    BB_NumberField_StrokeExtent = 0x81,
    BB_NumberField_StrokeWidth = 0x82,
    BB_NumberField_SvgContainPositionX = 0x83,
    BB_NumberField_SvgContainPositionY = 0x84,
    BB_NumberField_SvgPlayhead = 0x85,
    BB_NumberField_WindowCameraFOV = 0x86,
    BB_NumberField_ParamInput0 = 0x87,
    BB_NumberField_ParamInput1 = 0x88,
    BB_NumberField_ParamInput2 = 0x89,
    BB_NumberField_ParamInput3 = 0x8a,
    BB_NumberField_ParamInput4 = 0x8b,
    BB_NumberField_ParamInput5 = 0x8c,
    BB_NumberField_ParamInput6 = 0x8d,
    BB_NumberField_ParamInput7 = 0x8e,
    BB_NumberField_ParamInput8 = 0x8f,
    BB_NumberField_UNDEFINED = 0x90,
};


enum BB_OverflowBehavior {
    BB_OverflowBehavior_Visible = 0x0,
    BB_OverflowBehavior_Fade = 0x1,
    BB_OverflowBehavior_Clip = 0x2,
    BB_OverflowBehavior_ClipFade = 0x3,
    BB_OverflowBehavior_UNDEFINED = 0x4,
};


enum BB_ProgressMeterState {
    BB_ProgressMeterState_Static = 0x0,
    BB_ProgressMeterState_Active = 0x1,
    BB_ProgressMeterState_UNDEFINED = 0x2,
};


enum BB_RendererType {
    BB_RendererType_None = 0x0,
    BB_RendererType_Entity = 0x1,
    BB_RendererType_Flash = 0x2,
    BB_RendererType_Primitive = 0x3,
    BB_RendererType_UNDEFINED = 0x4,
};


enum BB_RotationField {
    BB_RotationField_Orientation = 0x0,
    BB_RotationField_OrientationOffset = 0x1,
    BB_RotationField_UNDEFINED = 0x2,
};


enum BB_SIPrefix {
    BB_SIPrefix_INVALID = 0x0,
    BB_SIPrefix_Yocto = 0x1,
    BB_SIPrefix_Zepto = 0x2,
    BB_SIPrefix_Atto = 0x3,
    BB_SIPrefix_Femto = 0x4,
    BB_SIPrefix_Pico = 0x5,
    BB_SIPrefix_Nano = 0x6,
    BB_SIPrefix_Micro = 0x7,
    BB_SIPrefix_Milli = 0x8,
    BB_SIPrefix_Unit = 0x9,
    BB_SIPrefix_Kilo = 0xa,
    BB_SIPrefix_Mega = 0xb,
    BB_SIPrefix_Giga = 0xc,
    BB_SIPrefix_AstronomicalUnit = 0xd,
    BB_SIPrefix_LightYear = 0xe,
    BB_SIPrefix_UNDEFINED = 0xf,
};


enum BB_SIUnit {
    BB_SIUnit_None = 0x0,
    BB_SIUnit_Acceleration = 0x1,
    BB_SIUnit_Area = 0x2,
    BB_SIUnit_Distance = 0x3,
    BB_SIUnit_Force = 0x4,
    BB_SIUnit_Percent = 0x5,
    BB_SIUnit_Power = 0x6,
    BB_SIUnit_Speed = 0x7,
    BB_SIUnit_Temperature = 0x8,
    BB_SIUnit_Volume = 0x9,
    BB_SIUnit_Weight = 0xa,
    BB_SIUnit_UNDEFINED = 0xb,
};


enum BB_SVGScalingBehavior {
    BB_SVGScalingBehavior_Contain = 0x0,
    BB_SVGScalingBehavior_Center = 0x1,
    BB_SVGScalingBehavior_StretchX = 0x2,
    BB_SVGScalingBehavior_StretchY = 0x3,
    BB_SVGScalingBehavior_StretchXY = 0x4,
    BB_SVGScalingBehavior_UNDEFINED = 0x5,
};


enum BB_ScrollBehavior {
    BB_ScrollBehavior_Pixel = 0x0,
    BB_ScrollBehavior_Item = 0x1,
    BB_ScrollBehavior_UNDEFINED = 0x2,
};


enum BB_ScrollPolicyType {
    BB_ScrollPolicyType_None = 0x0,
    BB_ScrollPolicyType_UnidirectionalScroller = 0x1,
    BB_ScrollPolicyType_UNDEFINED = 0x2,
};


enum BB_SegmentProgressBehavior {
    BB_SegmentProgressBehavior_Clip = 0x0,
    BB_SegmentProgressBehavior_Alpha = 0x1,
    BB_SegmentProgressBehavior_Visibility = 0x2,
    BB_SegmentProgressBehavior_ThicknessIn = 0x3,
    BB_SegmentProgressBehavior_ThicknessInAlpha = 0x4,
    BB_SegmentProgressBehavior_ThicknessOut = 0x5,
    BB_SegmentProgressBehavior_ThicknessOutAlpha = 0x6,
    BB_SegmentProgressBehavior_UNDEFINED = 0x7,
};


enum BB_SeparatorStyle {
    BB_SeparatorStyle_Primary = 0x0,
    BB_SeparatorStyle_Secondary = 0x1,
    BB_SeparatorStyle_Tertiary = 0x2,
    BB_SeparatorStyle_UNDEFINED = 0x3,
};


enum BB_SizeBehavior {
    BB_SizeBehavior_Fixed = 0x0,
    BB_SizeBehavior_Percent = 0x1,
    BB_SizeBehavior_PercentOfX = 0x2,
    BB_SizeBehavior_PercentOfY = 0x3,
    BB_SizeBehavior_PercentOfZ = 0x4,
    BB_SizeBehavior_Auto = 0x5,
    BB_SizeBehavior_UNDEFINED = 0x6,
};


enum BB_SliderMode {
    BB_SliderMode_HorizontalBar = 0x0,
    BB_SliderMode_VerticalBar = 0x1,
    BB_SliderMode_HorizontalMarker = 0x2,
    BB_SliderMode_VerticalMarker = 0x3,
    BB_SliderMode_UNDEFINED = 0x4,
};


enum BB_StackDirection {
    BB_StackDirection_Horizontal = 0x0,
    BB_StackDirection_Vertical = 0x1,
    BB_StackDirection_Depth = 0x2,
    BB_StackDirection_UNDEFINED = 0x3,
};


enum BB_StringField {
    BB_StringField_ActorEntityDNAString = 0x0,
    BB_StringField_ActorEntityIdleName = 0x1,
    BB_StringField_ActorEntityFacialName = 0x2,
    BB_StringField_CanvasReferenceRecord = 0x3,
    BB_StringField_EditBoxConfirmTrigger = 0x4,
    BB_StringField_EditBoxVariablePath = 0x5,
    BB_StringField_EntityGeometryTag = 0x6,
    BB_StringField_EntityLoadoutName0 = 0x7,
    BB_StringField_EntityLoadoutName1 = 0x8,
    BB_StringField_EntityLoadoutName2 = 0x9,
    BB_StringField_EntityLoadoutName3 = 0xa,
    BB_StringField_EntityMaterialPath = 0xb,
    BB_StringField_EntityTintPalettePath = 0xc,
    BB_StringField_FontStyleRecord = 0xd,
    BB_StringField_GeneralEntityClassName = 0xe,
    BB_StringField_GeomEntityAnimationPath = 0xf,
    BB_StringField_GeomEntityGeometryPath = 0x10,
    BB_StringField_ImageColorPickerAnchorXURL0 = 0x11,
    BB_StringField_ImageColorPickerAnchorYURL0 = 0x12,
    BB_StringField_ImageColorPickerOutputColorURL0 = 0x13,
    BB_StringField_ImagePath = 0x14,
    BB_StringField_InteractionsOnLeftClickTriggerURL0 = 0x15,
    BB_StringField_LightImagePath = 0x16,
    BB_StringField_MoviePath = 0x17,
    BB_StringField_StyleReferenceRecord = 0x18,
    BB_StringField_SvgPath = 0x19,
    BB_StringField_ParticleEffectName = 0x1a,
    BB_StringField_PrimaryStateTag = 0x1b,
    BB_StringField_SecondaryStateTag = 0x1c,
    BB_StringField_TertiaryStateTag = 0x1d,
    BB_StringField_TextMaterial = 0x1e,
    BB_StringField_QuarternaryStateTag = 0x1f,
    BB_StringField_QuinaryStateTag = 0x20,
    BB_StringField_SenaryStateTag = 0x21,
    BB_StringField_StripMaterialPath = 0x22,
    BB_StringField_URLOptional = 0x23,
    BB_StringField_URLPostfix = 0x24,
    BB_StringField_VehicleEntityClassName = 0x25,
    BB_StringField_VehicleEntityLoadoutName = 0x26,
    BB_StringField_PrimitiveMaterialPath = 0x27,
    BB_StringField_ParamInput0 = 0x28,
    BB_StringField_ParamInput1 = 0x29,
    BB_StringField_ParamInput2 = 0x2a,
    BB_StringField_ParamInput3 = 0x2b,
    BB_StringField_ParamInput4 = 0x2c,
    BB_StringField_ParamInput5 = 0x2d,
    BB_StringField_ParamInput6 = 0x2e,
    BB_StringField_ParamInput7 = 0x2f,
    BB_StringField_ParamInput8 = 0x30,
    BB_StringField_VariableInput0 = 0x31,
    BB_StringField_VariableInput1 = 0x32,
    BB_StringField_VariableInput2 = 0x33,
    BB_StringField_VariableInput3 = 0x34,
    BB_StringField_VariableInput4 = 0x35,
    BB_StringField_UNDEFINED = 0x36,
};


enum BB_StrokeAlignment {
    BB_StrokeAlignment_Center = 0x0,
    BB_StrokeAlignment_Inside = 0x1,
    BB_StrokeAlignment_Outside = 0x2,
    BB_StrokeAlignment_UNDEFINED = 0x3,
};


enum BB_StrokeCapStyle {
    BB_StrokeCapStyle_Round = 0x0,
    BB_StrokeCapStyle_None = 0x1,
    BB_StrokeCapStyle_Square = 0x2,
    BB_StrokeCapStyle_UNDEFINED = 0x3,
};


enum BB_StrokeJointStyle {
    BB_StrokeJointStyle_Round = 0x0,
    BB_StrokeJointStyle_Bevel = 0x1,
    BB_StrokeJointStyle_Miter = 0x2,
    BB_StrokeJointStyle_UNDEFINED = 0x3,
};


enum BB_StyleCountType {
    BB_StyleCountType_Every = 0x0,
    BB_StyleCountType_First = 0x1,
    BB_StyleCountType_Last = 0x2,
};


enum BB_TextAlignment {
    BB_TextAlignment_Left = 0x0,
    BB_TextAlignment_Center = 0x1,
    BB_TextAlignment_Right = 0x2,
    BB_TextAlignment_Justify = 0x3,
    BB_TextAlignment_UNDEFINED = 0x4,
};


enum BB_TextFieldWidgetStylePreset {
    BB_TextFieldWidgetStylePreset_Title1 = 0x0,
    BB_TextFieldWidgetStylePreset_Title2 = 0x1,
    BB_TextFieldWidgetStylePreset_Title3 = 0x2,
    BB_TextFieldWidgetStylePreset_Title4 = 0x3,
    BB_TextFieldWidgetStylePreset_Title5 = 0x4,
    BB_TextFieldWidgetStylePreset_Heading1 = 0x5,
    BB_TextFieldWidgetStylePreset_Heading2 = 0x6,
    BB_TextFieldWidgetStylePreset_Heading3 = 0x7,
    BB_TextFieldWidgetStylePreset_Heading4 = 0x8,
    BB_TextFieldWidgetStylePreset_Heading5 = 0x9,
    BB_TextFieldWidgetStylePreset_Heading6 = 0xa,
    BB_TextFieldWidgetStylePreset_Body = 0xb,
    BB_TextFieldWidgetStylePreset_UNDEFINED = 0xc,
};


enum BB_TextureOrientation {
    BB_TextureOrientation_Landscape = 0x0,
    BB_TextureOrientation_Portrait = 0x1,
    BB_TextureOrientation_UNDEFINED = 0x2,
};


enum BB_TransformField {
    BB_TransformField_PositionOrientation = 0x0,
    BB_TransformField_PositionOrientationOffset = 0x1,
    BB_TransformField_UNDEFINED = 0x2,
};


enum BB_UnidirectionalAutoScrollBehavior {
    BB_UnidirectionalAutoScrollBehavior_LeftToRight_Always = 0x0,
    BB_UnidirectionalAutoScrollBehavior_LeftToRight_IfLong = 0x1,
    BB_UnidirectionalAutoScrollBehavior_RightToLeft_Always = 0x2,
    BB_UnidirectionalAutoScrollBehavior_RightToLeft_IfLong = 0x3,
    BB_UnidirectionalAutoScrollBehavior_Bounce = 0x4,
    BB_UnidirectionalAutoScrollBehavior_UNDEFINED = 0x5,
};


enum BB_UnidirectionalScrollDirection {
    BB_UnidirectionalScrollDirection_DeriveFromLayout = 0x0,
    BB_UnidirectionalScrollDirection_Horizontal = 0x1,
    BB_UnidirectionalScrollDirection_Vertical = 0x2,
    BB_UnidirectionalScrollDirection_Depth = 0x3,
    BB_UnidirectionalScrollDirection_UNDEFINED = 0x4,
};


enum BB_VectorField {
    BB_VectorField_Position = 0x0,
    BB_VectorField_PositionOffset = 0x1,
    BB_VectorField_Orientation = 0x2,
    BB_VectorField_OrientationOffset = 0x3,
    BB_VectorField_Scale = 0x4,
    BB_VectorField_Size = 0x5,
    BB_VectorField_Pivot = 0x6,
    BB_VectorField_Anchor = 0x7,
    BB_VectorField_UNDEFINED = 0x8,
};


enum BB_VerticalTextAlignment {
    BB_VerticalTextAlignment_Top = 0x0,
    BB_VerticalTextAlignment_Center = 0x1,
    BB_VerticalTextAlignment_Bottom = 0x2,
    BB_VerticalTextAlignment_UNDEFINED = 0x3,
};


enum BB_WidgetType {
    BB_WidgetType_ActorEntity = 0x0,
    BB_WidgetType_Base = 0x1,
    BB_WidgetType_Canvas = 0x2,
    BB_WidgetType_Card = 0x3,
    BB_WidgetType_Circle = 0x4,
    BB_WidgetType_Clone = 0x5,
    BB_WidgetType_CustomShape = 0x6,
    BB_WidgetType_EditBox = 0x7,
    BB_WidgetType_EnvironmentProbe = 0x8,
    BB_WidgetType_GeneralEntity = 0x9,
    BB_WidgetType_GeomEntity = 0xa,
    BB_WidgetType_HoloVolume = 0xb,
    BB_WidgetType_Image = 0xc,
    BB_WidgetType_Light = 0xd,
    BB_WidgetType_Line = 0xe,
    BB_WidgetType_LineList = 0xf,
    BB_WidgetType_List = 0x10,
    BB_WidgetType_Movie = 0x11,
    BB_WidgetType_ParticleEffect = 0x12,
    BB_WidgetType_Polygon = 0x13,
    BB_WidgetType_Polymorphic = 0x14,
    BB_WidgetType_RuntimeImage = 0x15,
    BB_WidgetType_Slider = 0x16,
    BB_WidgetType_Slice = 0x17,
    BB_WidgetType_Strip = 0x18,
    BB_WidgetType_Text = 0x19,
    BB_WidgetType_TickBox = 0x1a,
    BB_WidgetType_VehicleEntity = 0x1b,
    BB_WidgetType_Window = 0x1c,
    BB_WidgetType_DustVolume = 0x1d,
};


enum BettingFormat {
    BettingFormat_TopPlayer = 0x0,
    BettingFormat_TopTeam = 0x1,
};


enum CIGAudioContextNamingStrategy {
    CIGAudioContextNamingStrategy_DataCoreFilePathAndEntityClassName = 0x0,
    CIGAudioContextNamingStrategy_EntityClassNameAndEntityName = 0x1,
};


enum CameraViewTransitionMode {
    CameraViewTransitionMode_ExpSlerp = 0x0,
    CameraViewTransitionMode_Nlerp = 0x1,
    CameraViewTransitionMode_NlerpCubic = 0x2,
    CameraViewTransitionMode_Slerp = 0x3,
    CameraViewTransitionMode_UNDEFINED = 0x4,
};


enum CargoFaceStackingSupport {
    CargoFaceStackingSupport_StackAll = 0x0,
    CargoFaceStackingSupport_StackSelf = 0x1,
    CargoFaceStackingSupport_StackNone = 0x2,
    CargoFaceStackingSupport_UNDEFINED = 0x3,
};


enum ChannelColor {
    ChannelColor_Blue = 0x0,
    ChannelColor_White = 0x1,
    ChannelColor_Silver = 0x2,
    ChannelColor_Grey = 0x3,
    ChannelColor_Charcoal = 0x4,
    ChannelColor_Red = 0x5,
    ChannelColor_Orange = 0x6,
    ChannelColor_Yellow = 0x7,
    ChannelColor_Chartreuse = 0x8,
    ChannelColor_Green = 0x9,
    ChannelColor_Mint = 0xa,
    ChannelColor_Cyan = 0xb,
    ChannelColor_Azure = 0xc,
    ChannelColor_Indigo = 0xd,
    ChannelColor_Purple = 0xe,
    ChannelColor_Pink = 0xf,
    ChannelColor_Hotpink = 0x10,
    ChannelColor_UNDEFINED = 0x11,
};


enum ClassMigrationValidationType {
    ClassMigrationValidationType_None = 0x0,
    ClassMigrationValidationType_DataAssert = 0x1,
    ClassMigrationValidationType_DataCritical = 0x2,
};


enum CombatStyle {
    CombatStyle_NotSet = 0x0,
    CombatStyle_Civilian = 0x1,
    CombatStyle_Merc = 0x2,
    CombatStyle_SpecOps = 0x3,
    CombatStyle_Slaver = 0x4,
    CombatStyle_OMC = 0x5,
    CombatStyle_Galson = 0x6,
};


enum ConditionResult {
    ConditionResult_Pass = 0x0,
    ConditionResult_Fail = 0x1,
    ConditionResult_UNDEFINED = 0x2,
};


enum ContractBoolParamType {
    ContractBoolParamType_Illegal = 0x0,
    ContractBoolParamType_ShowLifeTimeInMobiGlas = 0x1,
    ContractBoolParamType_FailIfSentToPrison = 0x2,
    ContractBoolParamType_FailIfBecameCriminal = 0x3,
    ContractBoolParamType_FailIfLeavePrison = 0x4,
    ContractBoolParamType_NotifyOnAvailable = 0x5,
    ContractBoolParamType_OnceOnly = 0x6,
    ContractBoolParamType_CanReacceptAfterAbandoning = 0x7,
    ContractBoolParamType_CanReacceptAfterFailing = 0x8,
    ContractBoolParamType_HasPersonalCooldown = 0x9,
    ContractBoolParamType_CanBeShared = 0xa,
    ContractBoolParamType_HasCompleteButton = 0xb,
    ContractBoolParamType_UNDEFINED = 0xc,
};


enum ContractIntParamType {
    ContractIntParamType_MaxPlayersPerInstance = 0x0,
    ContractIntParamType_AbandonedCooldownTime = 0x1,
    ContractIntParamType_AbandonedCooldownTimeVariation = 0x2,
    ContractIntParamType_PersonalCooldownTime = 0x3,
    ContractIntParamType_PersonalCooldownTimeVariation = 0x4,
    ContractIntParamType_TimeToComplete = 0x5,
    ContractIntParamType_UNDEFINED = 0x6,
};


enum ContractStringParamType {
    ContractStringParamType_Title = 0x0,
    ContractStringParamType_TitleHUD = 0x1,
    ContractStringParamType_Description = 0x2,
    ContractStringParamType_Contractor = 0x3,
    ContractStringParamType_CommsChannelName = 0x4,
    ContractStringParamType_UNDEFINED = 0x5,
};


enum ControlHintConditionActorAttachmentType {
    ControlHintConditionActorAttachmentType_Held = 0x0,
    ControlHintConditionActorAttachmentType_Attached = 0x1,
    ControlHintConditionActorAttachmentType_Wearing = 0x2,
    ControlHintConditionActorAttachmentType_PersonalInventory = 0x3,
};


enum ControlHintConditionActorCommsState {
    ControlHintConditionActorCommsState_BeingCalled = 0x0,
};


enum ControlHintConditionActorEnvironment {
    ControlHintConditionActorEnvironment_Greenzone = 0x0,
    ControlHintConditionActorEnvironment_UsingKiosk = 0x1,
    ControlHintConditionActorEnvironment_NearInteractableObject = 0x2,
    ControlHintConditionActorEnvironment_NearMineableRock = 0x3,
    ControlHintConditionActorEnvironment_NearDraggableBody = 0x4,
    ControlHintConditionActorEnvironment_InRestrainRange = 0x5,
    ControlHintConditionActorEnvironment_InTakeDownRange = 0x6,
    ControlHintConditionActorEnvironment_InMeleeRange = 0x7,
    ControlHintConditionActorEnvironment_InMantleRange = 0x8,
};


enum ControlHintConditionActorInteractionState {
    ControlHintConditionActorInteractionState_InInteractModeNothingUnderCursor = 0x0,
    ControlHintConditionActorInteractionState_InInteractModeInteractableUnderCursor = 0x1,
    ControlHintConditionActorInteractionState_InInteractModeScreenUnderCursor = 0x2,
    ControlHintConditionActorInteractionState_QuickSelectWheelOpen = 0x3,
    ControlHintConditionActorInteractionState_PITMenuOpen = 0x4,
    ControlHintConditionActorInteractionState_PITMenuOpenMultiplePages = 0x5,
    ControlHintConditionActorInteractionState_InventoryOpen = 0x6,
    ControlHintConditionActorInteractionState_InventoryOpenItemUnderCursor = 0x7,
    ControlHintConditionActorInteractionState_InventoryOpenContextMenuOpen = 0x8,
    ControlHintConditionActorInteractionState_LootingOpen = 0x9,
    ControlHintConditionActorInteractionState_UsableLinkedInteractive = 0xa,
    ControlHintConditionActorInteractionState_PISWheelOpen = 0xb,
    ControlHintConditionActorInteractionState_PISWheelOpenMultiplePages = 0xc,
    ControlHintConditionActorInteractionState_SwapWheelOpen = 0xd,
    ControlHintConditionActorInteractionState_SwapWheelOpenMultiplePages = 0xe,
    ControlHintConditionActorInteractionState_PISWheelOpenCustomisablePrimarySecondary = 0xf,
    ControlHintConditionActorInteractionState_PISWheelOpenContextMenuOpen = 0x10,
    ControlHintConditionActorInteractionState_QuickSelectWheelOpenSegmentHasContextMenu = 0x11,
    ControlHintConditionActorInteractionState_QuickSelectWheelOpenHoverOverNavigationSegment = 0x12,
    ControlHintConditionActorInteractionState_QuickSelectWheelOpenMultiplePages = 0x13,
    ControlHintConditionActorInteractionState_InteractionPromptWithSingleOptionAvailable = 0x14,
    ControlHintConditionActorInteractionState_InteractionPromptWithMultipleOptionsAvailable = 0x15,
    ControlHintConditionActorInteractionState_InteractionPromptHasAvailableSecondaryAction = 0x16,
    ControlHintConditionActorInteractionState_OffscreenInteractionAvailable = 0x17,
    ControlHintConditionActorInteractionState_HeldItemHasAvailablePrimaryAction = 0x18,
    ControlHintConditionActorInteractionState_HeldItemHasAvailableSecondaryAction = 0x19,
    ControlHintConditionActorInteractionState_InputAwaitingRebind = 0x1a,
};


enum ControlHintConditionActorLadderState {
    ControlHintConditionActorLadderState_WithinMidPointRange = 0x0,
    ControlHintConditionActorLadderState_WithinLaunchAngle = 0x1,
    ControlHintConditionActorLadderState_IsLadderSlideable = 0x2,
    ControlHintConditionActorLadderState_CanDodgeRight = 0x3,
    ControlHintConditionActorLadderState_CanDodgeLeft = 0x4,
};


enum ControlHintConditionActorMissionOfferReceived {
    ControlHintConditionActorMissionOfferReceived_OfferReceived = 0x0,
};


enum ControlHintConditionActorSightZeroMode {
    ControlHintConditionActorSightZeroMode_Manual = 0x0,
    ControlHintConditionActorSightZeroMode_Auto = 0x1,
    ControlHintConditionActorSightZeroMode_AutoIsZeroed = 0x2,
    ControlHintConditionActorSightZeroMode_None = 0x3,
};


enum ControlHintConditionActorSuitState {
    ControlHintConditionActorSuitState_VisorDirty = 0x0,
};


enum ControlHintConditionActorToolState {
    ControlHintConditionActorToolState_TractorBeamInUseOnObject = 0x0,
    ControlHintConditionActorToolState_TractorBeamInDetachMode = 0x1,
    ControlHintConditionActorToolState_TractorBeamInCargoMode = 0x2,
    ControlHintConditionActorToolState_TractorBeamValidPlacementTarget = 0x3,
    ControlHintConditionActorToolState_TractorBeamMovingToValidTarget = 0x4,
    ControlHintConditionActorToolState_TractorBeamChargingThrow = 0x5,
    ControlHintConditionActorToolState_MediGunInUseOnTarget = 0x6,
};


enum ControlHintConditionActorWeaponState {
    ControlHintConditionActorWeaponState_Reloadable = 0x0,
    ControlHintConditionActorWeaponState_AmmoFull = 0x1,
    ControlHintConditionActorWeaponState_AmmoEmpty = 0x2,
    ControlHintConditionActorWeaponState_ModifierAttachment = 0x3,
    ControlHintConditionActorWeaponState_AltFire = 0x4,
    ControlHintConditionActorWeaponState_HasModifierPortsAvailable = 0x5,
    ControlHintConditionActorWeaponState_HasAmmoAvailableInItemPortOrInventory = 0x6,
    ControlHintConditionActorWeaponState_ActivatableUnderbarrelAttachment = 0x7,
    ControlHintConditionActorWeaponState_Customizing = 0x8,
};


enum ControlHintConditionActorZeroGEVAState {
    ControlHintConditionActorZeroGEVAState_CanAttachToSurface = 0x0,
    ControlHintConditionActorZeroGEVAState_CanAttachToGrip = 0x1,
    ControlHintConditionActorZeroGEVAState_IsAttachedToGrip = 0x2,
};


enum ControlHintConditionMobiglasMapState {
    ControlHintConditionMobiglasMapState_InteriorMapActive = 0x0,
    ControlHintConditionMobiglasMapState_InteriorMapAvailable = 0x1,
    ControlHintConditionMobiglasMapState_InteriorMapRouteAvailable = 0x2,
    ControlHintConditionMobiglasMapState_InteriorMapRouteSet = 0x3,
    ControlHintConditionMobiglasMapState_InteriorMapCrossSectionViewActive = 0x4,
    ControlHintConditionMobiglasMapState_InteriorMapHasMultipleZones = 0x5,
    ControlHintConditionMobiglasMapState_InteriorMapHasMultipleSections = 0x6,
    ControlHintConditionMobiglasMapState_StarMapActive = 0x7,
    ControlHintConditionMobiglasMapState_StarMapInJumpTunnel = 0x8,
    ControlHintConditionMobiglasMapState_StarMapRouteAvailable = 0x9,
    ControlHintConditionMobiglasMapState_StarMapRouteSet = 0xa,
    ControlHintConditionMobiglasMapState_GalacticMapActive = 0xb,
    ControlHintConditionMobiglasMapState_GeneralMapStepBackAvailable = 0xc,
};


enum ControlHintConditionOptInEventState {
    ControlHintConditionOptInEventState_OptInEventAvailable = 0x0,
    ControlHintConditionOptInEventState_OptInEventActive = 0x1,
};


enum ControlHintConditionRemoteTurret {
    ControlHintConditionRemoteTurret_HasRemoteTurretAccess = 0x0,
    ControlHintConditionRemoteTurret_MultipleRemoteTurrets = 0x1,
    ControlHintConditionRemoteTurret_RemoteTurret1Available = 0x2,
    ControlHintConditionRemoteTurret_RemoteTurret2Available = 0x3,
    ControlHintConditionRemoteTurret_RemoteTurret3Available = 0x4,
    ControlHintConditionRemoteTurret_UsingRemoteTurret = 0x5,
};


enum ControlHintConditionTryOnState {
    ControlHintConditionTryOnState_Active = 0x0,
};


enum ControlHintConditionVehicleAutoLandState {
    ControlHintConditionVehicleAutoLandState_Ready = 0x0,
};


enum ControlHintConditionVehicleAutoSelectedContact {
    ControlHintConditionVehicleAutoSelectedContact_None = 0x0,
    ControlHintConditionVehicleAutoSelectedContact_All = 0x1,
    ControlHintConditionVehicleAutoSelectedContact_Hostile = 0x2,
    ControlHintConditionVehicleAutoSelectedContact_Friendly = 0x3,
    ControlHintConditionVehicleAutoSelectedContact_Attacker = 0x4,
};


enum ControlHintConditionVehicleComponents {
    ControlHintConditionVehicleComponents_Missiles = 0x0,
    ControlHintConditionVehicleComponents_Guns = 0x1,
    ControlHintConditionVehicleComponents_Radar = 0x2,
    ControlHintConditionVehicleComponents_QuantumInterdictionSnare = 0x3,
    ControlHintConditionVehicleComponents_MiningLaser = 0x4,
    ControlHintConditionVehicleComponents_QuantumDrive = 0x5,
    ControlHintConditionVehicleComponents_Bombs = 0x6,
    ControlHintConditionVehicleComponents_Gimbals = 0x7,
    ControlHintConditionVehicleComponents_CurrentOrdnanceTypeEmpty = 0x8,
    ControlHintConditionVehicleComponents_JumpThrusterPack = 0x9,
};


enum ControlHintConditionVehicleCounterMeasureState {
    ControlHintConditionVehicleCounterMeasureState_HasChaff = 0x0,
    ControlHintConditionVehicleCounterMeasureState_HasFlare = 0x1,
    ControlHintConditionVehicleCounterMeasureState_IncomingCounterWithChaff = 0x2,
    ControlHintConditionVehicleCounterMeasureState_IncomingCounterWithFlare = 0x3,
};


enum ControlHintConditionVehicleDestroyedState {
    ControlHintConditionVehicleDestroyedState_Alive = 0x0,
    ControlHintConditionVehicleDestroyedState_SoftDeath = 0x1,
};


enum ControlHintConditionVehicleDocking {
    ControlHintConditionVehicleDocking_NoDockingTube = 0x0,
    ControlHintConditionVehicleDocking_Active = 0x1,
    ControlHintConditionVehicleDocking_CanAutoDock = 0x2,
    ControlHintConditionVehicleDocking_AutoDocking = 0x3,
    ControlHintConditionVehicleDocking_NeedUndockRequest = 0x4,
    ControlHintConditionVehicleDocking_NearDockingStation = 0x5,
    ControlHintConditionVehicleDocking_NearDockingShip = 0x6,
    ControlHintConditionVehicleDocking_DockingTargetValid = 0x7,
};


enum ControlHintConditionVehicleEjectorSeat {
    ControlHintConditionVehicleEjectorSeat_EjectorSeat = 0x0,
};


enum ControlHintConditionVehicleEnvironment {
    ControlHintConditionVehicleEnvironment_IncomingMissiles = 0x0,
    ControlHintConditionVehicleEnvironment_ContactOnRadar = 0x1,
    ControlHintConditionVehicleEnvironment_HostileOnRadar = 0x2,
    ControlHintConditionVehicleEnvironment_BlobOnRadar = 0x3,
    ControlHintConditionVehicleEnvironment_UnknownOnRadar = 0x4,
    ControlHintConditionVehicleEnvironment_NearMineableRock = 0x5,
    ControlHintConditionVehicleEnvironment_AttackerOnRadar = 0x6,
};


enum ControlHintConditionVehicleHealthState {
    ControlHintConditionVehicleHealthState_Below10Percent = 0x0,
    ControlHintConditionVehicleHealthState_Below20Percent = 0x1,
    ControlHintConditionVehicleHealthState_Below30Percent = 0x2,
    ControlHintConditionVehicleHealthState_Below40Percent = 0x3,
    ControlHintConditionVehicleHealthState_Below50Percent = 0x4,
};


enum ControlHintConditionVehicleJumpDriveState {
    ControlHintConditionVehicleJumpDriveState_HasJumpDrive = 0x0,
    ControlHintConditionVehicleJumpDriveState_HasLinkedJumpPoint = 0x1,
    ControlHintConditionVehicleJumpDriveState_TunedToJumpPoint = 0x2,
    ControlHintConditionVehicleJumpDriveState_JumpPointClosed = 0x3,
    ControlHintConditionVehicleJumpDriveState_ShipInATCQueue = 0x4,
    ControlHintConditionVehicleJumpDriveState_InJumpTunnel = 0x5,
    ControlHintConditionVehicleJumpDriveState_TakingDistortionDamage = 0x6,
};


enum ControlHintConditionVehicleLandingArea {
    ControlHintConditionVehicleLandingArea_NoLandingArea = 0x0,
    ControlHintConditionVehicleLandingArea_InsideNonReservedLandingArea = 0x1,
    ControlHintConditionVehicleLandingArea_Reserved = 0x2,
    ControlHintConditionVehicleLandingArea_NeedTakeOffPermission = 0x3,
    ControlHintConditionVehicleLandingArea_WaitingForTakeOff = 0x4,
    ControlHintConditionVehicleLandingArea_NearLandingArea = 0x5,
};


enum ControlHintConditionVehicleLandingGearState {
    ControlHintConditionVehicleLandingGearState_Down = 0x0,
    ControlHintConditionVehicleLandingGearState_Up = 0x1,
};


enum ControlHintConditionVehicleLockedTarget {
    ControlHintConditionVehicleLockedTarget_None = 0x0,
    ControlHintConditionVehicleLockedTarget_All = 0x1,
    ControlHintConditionVehicleLockedTarget_Hostile = 0x2,
    ControlHintConditionVehicleLockedTarget_Friendly = 0x3,
    ControlHintConditionVehicleLockedTarget_Attacker = 0x4,
};


enum ControlHintConditionVehicleMainThrustersState {
    ControlHintConditionVehicleMainThrustersState_Off = 0x0,
    ControlHintConditionVehicleMainThrustersState_On = 0x1,
    ControlHintConditionVehicleMainThrustersState_Destroyed = 0x2,
};


enum ControlHintConditionVehicleMasterMode {
    ControlHintConditionVehicleMasterMode_SCM = 0x0,
    ControlHintConditionVehicleMasterMode_NAV = 0x1,
};


enum ControlHintConditionVehicleMiningLaserMode {
    ControlHintConditionVehicleMiningLaserMode_Fracture = 0x0,
    ControlHintConditionVehicleMiningLaserMode_Extractor = 0x1,
};


enum ControlHintConditionVehiclePinnedTarget {
    ControlHintConditionVehiclePinnedTarget_None = 0x0,
    ControlHintConditionVehiclePinnedTarget_All = 0x1,
    ControlHintConditionVehiclePinnedTarget_Hostile = 0x2,
    ControlHintConditionVehiclePinnedTarget_Friendly = 0x3,
    ControlHintConditionVehiclePinnedTarget_Attacker = 0x4,
};


enum ControlHintConditionVehicleQuantumTravelState {
    ControlHintConditionVehicleQuantumTravelState_QT_RouteSet = 0x0,
    ControlHintConditionVehicleQuantumTravelState_QT_ReadyToEngage = 0x1,
    ControlHintConditionVehicleQuantumTravelState_QT_CanTravel = 0x2,
    ControlHintConditionVehicleQuantumTravelState_QT_PartyLeaderRouteSet = 0x3,
};


enum ControlHintConditionVehicleSalvage {
    ControlHintConditionVehicleSalvage_SupportsScraping = 0x0,
    ControlHintConditionVehicleSalvage_SupportsStructural = 0x1,
    ControlHintConditionVehicleSalvage_SupportsTractor = 0x2,
    ControlHintConditionVehicleSalvage_SupportsFocusHeads = 0x3,
    ControlHintConditionVehicleSalvage_SupportsFocusStructural = 0x4,
    ControlHintConditionVehicleSalvage_SupportsHeadsBeamSpacing = 0x5,
};


enum ControlHintConditionVehicleScanWaveAvailability {
    ControlHintConditionVehicleScanWaveAvailability_Available = 0x0,
};


enum ControlHintConditionVehicleSeatTypeState {
    ControlHintConditionVehicleSeatTypeState_SeatToExterior = 0x0,
    ControlHintConditionVehicleSeatTypeState_SeatToInterior = 0x1,
};


enum ControlHintConditionVehicleState {
    ControlHintConditionVehicleState_Docked = 0x0,
    ControlHintConditionVehicleState_Landed = 0x1,
    ControlHintConditionVehicleState_Active = 0x2,
    ControlHintConditionVehicleState_Quantum = 0x3,
    ControlHintConditionVehicleState_Static = 0x4,
    ControlHintConditionVehicleState_VolatileCargoExplosionSoon = 0x5,
    ControlHintConditionVehicleState_BombTargetActive = 0x6,
};


enum ControlHintConditionVehicleSystems {
    ControlHintConditionVehicleSystems_Power_On = 0x0,
    ControlHintConditionVehicleSystems_DecoupledMode_On = 0x1,
    ControlHintConditionVehicleSystems_CruiseControl_On = 0x2,
    ControlHintConditionVehicleSystems_Missile_Locked = 0x3,
    ControlHintConditionVehicleSystems_Afterburner_Active = 0x4,
    ControlHintConditionVehicleSystems_SpeedLimiter_On = 0x5,
    ControlHintConditionVehicleSystems_GForceSafety_On = 0x6,
    ControlHintConditionVehicleSystems_Rotation_Locked = 0x7,
    ControlHintConditionVehicleSystems_AtMaxSpeed = 0x8,
    ControlHintConditionVehicleSystems_AtMaxCruiseSpeed = 0x9,
    ControlHintConditionVehicleSystems_PlayerAcceleration_Active = 0xa,
    ControlHintConditionVehicleSystems_Shields_On = 0xb,
};


enum ControlHintConditionVehicleWeaponState {
    ControlHintConditionVehicleWeaponState_WeaponGroup1Set = 0x0,
    ControlHintConditionVehicleWeaponState_WeaponGroup2Set = 0x1,
};


enum ControlHintConditionVehicleWeaponSystems {
    ControlHintConditionVehicleWeaponSystems_PrecisionTargetingEnabled = 0x0,
    ControlHintConditionVehicleWeaponSystems_StaggeredFiringEnabled = 0x1,
    ControlHintConditionVehicleWeaponSystems_LagPipsEnabled = 0x2,
};


enum ControlSurfaceEnabledMode {
    ControlSurfaceEnabledMode_Disabled = 0x0,
    ControlSurfaceEnabledMode_EnabledForSetUp = 0x1,
    ControlSurfaceEnabledMode_EnabledForAll = 0x2,
    ControlSurfaceEnabledMode_UNDEFINED = 0x3,
};


enum CounterMeasureType {
    CounterMeasureType_Flare = 0x0,
    CounterMeasureType_Chaff = 0x1,
    CounterMeasureType_UNDEFINED = 0x2,
};


enum CoverBodyDirection {
    CoverBodyDirection_None = 0x1,
    CoverBodyDirection_Left = 0x2,
    CoverBodyDirection_Right = 0x3,
};


enum CtxGraph_ContextActionType {
    CtxGraph_ContextActionType_Load = 0x0,
    CtxGraph_ContextActionType_Unload = 0x1,
    CtxGraph_ContextActionType_Enter = 0x2,
    CtxGraph_ContextActionType_Leave = 0x3,
    CtxGraph_ContextActionType_Unfocus = 0x4,
    CtxGraph_ContextActionType_Focus = 0x5,
};


enum CurrencyType {
    CurrencyType_INVALID = 0x0,
    CurrencyType_UEC = 0x1,
    CurrencyType_REC = 0x2,
    CurrencyType_MER = 0x3,
};


enum Cursor {
    Cursor_Auto = -0x1,
    Cursor_Disabled = 0x6e,
    Cursor_DollyCamera = 0x6f,
    Cursor_Grabbable = 0x70,
    Cursor_GrabDisabled = 0x71,
    Cursor_Grabbed = 0x72,
    Cursor_InteractMode = 0x73,
    Cursor_InteractableZoom = 0x74,
    Cursor_Press = 0x75,
    Cursor_SlideHorizontal = 0x76,
    Cursor_SlideVertical = 0x77,
    Cursor_Standard = 0x78,
    Cursor_TextEntry = 0x79,
    Cursor_Conversation = 0x7a,
    Cursor_Throw = 0x7b,
    Cursor_Empty = 0x7c,
};


enum CurveEndPoint {
    CurveEndPoint_MinOptimal = 0x0,
    CurveEndPoint_MaxOptimal = 0x1,
    CurveEndPoint_MaxPower = 0x2,
};


enum CurveStartPoint {
    CurveStartPoint_MinPower = 0x0,
    CurveStartPoint_MinOptimal = 0x1,
    CurveStartPoint_MaxOptimal = 0x2,
};


enum DamageTypes {
    DamageTypes_Physical = 0x0,
    DamageTypes_Energy = 0x1,
    DamageTypes_Distortion = 0x2,
    DamageTypes_Thermal = 0x3,
    DamageTypes_Biochemical = 0x4,
    DamageTypes_Stun = 0x5,
    DamageTypes_UNDEFINED = 0x6,
};


enum DateScheduleRepeat {
    DateScheduleRepeat_OneOff = 0x0,
    DateScheduleRepeat_RepeatDaily = 0x1,
    DateScheduleRepeat_RepeatMonthly = 0x2,
    DateScheduleRepeat_RepeatYearly = 0x3,
    DateScheduleRepeat_UNDEFINED = 0x4,
};


enum DaylightParticleGroupActivation {
    DaylightParticleGroupActivation_AlwaysActive = 0x0,
    DaylightParticleGroupActivation_ActiveDuringNight = 0x1,
    DaylightParticleGroupActivation_ActiveDuringDay = 0x2,
    DaylightParticleGroupActivation_UNDEFINED = 0x3,
};


enum DeliveryObjectiveType {
    DeliveryObjectiveType_None = 0x0,
    DeliveryObjectiveType_Freight_Resource = 0x1,
    DeliveryObjectiveType_Freight_Entity = 0x2,
    DeliveryObjectiveType_ItemPort_Entity = 0x3,
    DeliveryObjectiveType_Locker_Entity = 0x4,
    DeliveryObjectiveType_UNDEFINED = 0x5,
};


enum DeviceType {
    DeviceType_Keyboard = 0x0,
    DeviceType_Mouse = 0x1,
    DeviceType_Gamepad = 0x2,
    DeviceType_Joystick = 0x3,
    DeviceType_UNDEFINED = 0x4,
};


enum DirectForceTypeFilter {
    DirectForceTypeFilter_Any = 0x0,
    DirectForceTypeFilter_Projectile = 0x1,
    DirectForceTypeFilter_Melee = 0x2,
    DirectForceTypeFilter_Physics = 0x3,
};


enum DirectRenderStage {
    DirectRenderStage_None = 0x0,
    DirectRenderStage_BeforeToneMapping = 0x1,
    DirectRenderStage_AfterToneMapping = 0x2,
    DirectRenderStage_AfterPostProcessing = 0x3,
};


enum DisplayCategory {
    DisplayCategory_Critical = 0x0,
    DisplayCategory_Warning = 0x1,
    DisplayCategory_MinorWarning = 0x2,
    DisplayCategory_Normal = 0x3,
    DisplayCategory_UNDEFINED = 0x4,
};


enum DisturbanceStyle {
    DisturbanceStyle_CenteredNoise = 0x0,
    DisturbanceStyle_Figure8 = 0x1,
    DisturbanceStyle_Waterfall = 0x2,
    DisturbanceStyle_Gaussian = 0x3,
};


enum EAEntityInclusionMode {
    EAEntityInclusionMode_DoNotInclude = 0x0,
    EAEntityInclusionMode_ReadyToInclude = 0x1,
};


enum EAGameCompletionAwardType {
    EAGameCompletionAwardType_WinOrLoss = 0x0,
    EAGameCompletionAwardType_ScoreboardPlacement = 0x1,
};


enum EAGunGameArmorLevels {
    EAGunGameArmorLevels_Small = 0x0,
    EAGunGameArmorLevels_Medium = 0x1,
    EAGunGameArmorLevels_Heavy = 0x2,
    EAGunGameArmorLevels_UNDEFINED = 0x3,
};


enum EAIAlertnessLevel {
    EAIAlertnessLevel_Inactive = 0x0,
    EAIAlertnessLevel_Low = 0x1,
    EAIAlertnessLevel_Medium = 0x2,
    EAIAlertnessLevel_High = 0x3,
};


enum EAIMagazineRules {
    EAIMagazineRules_FollowGamerules = 0x0,
    EAIMagazineRules_FiniteMagazines = 0x1,
    EAIMagazineRules_InfiniteMagazines = 0x2,
};


enum EAINavigationGeneration {
    EAINavigationGeneration_Included = 0x0,
    EAINavigationGeneration_Excluded = 0x1,
    EAINavigationGeneration_IgnoreWalkability = 0x2,
    EAINavigationGeneration_UNDEFINED = 0x3,
};


enum EAIPerceptionContext {
    EAIPerceptionContext_Default = 0x0,
    EAIPerceptionContext_OnSeat = 0x1,
    EAIPerceptionContext_UNDEFINED = 0x2,
};


enum EAIWeaponShootingMode {
    EAIWeaponShootingMode_Single = 0x0,
    EAIWeaponShootingMode_Burst = 0x1,
    EAIWeaponShootingMode_Rapid = 0x2,
    EAIWeaponShootingMode_Charge = 0x3,
    EAIWeaponShootingMode_Melee = 0x4,
    EAIWeaponShootingMode_TractorBeam = 0x5,
    EAIWeaponShootingMode_Repair = 0x6,
};


enum EALoadoutSnapshotType {
    EALoadoutSnapshotType_EA_ELIMINATION = 0x0,
    EALoadoutSnapshotType_EA_MARINE = 0x1,
    EALoadoutSnapshotType_EA_SLAVER = 0x2,
    EALoadoutSnapshotType_UNDEFINED = 0x3,
};


enum EAMvpType {
    EAMvpType_None = 0x0,
    EAMvpType_Score = 0x1,
    EAMvpType_Kills = 0x2,
    EAMvpType_Assists = 0x3,
    EAMvpType_LeastDeaths = 0x4,
    EAMvpType_FastestLap = 0x5,
};


enum EAPickupAudioTrigger {
    EAPickupAudioTrigger_PickupAquiredByPlayer = 0x0,
    EAPickupAudioTrigger_PickupAquiredByNLPC = 0x1,
    EAPickupAudioTrigger_PickupAquireFailedByPlayer = 0x2,
    EAPickupAudioTrigger_PickupAquireFailedByNLPC = 0x3,
    EAPickupAudioTrigger_PickupSpawned = 0x4,
    EAPickupAudioTrigger_PickupExpired = 0x5,
};


enum EAPickupType {
    EAPickupType_Ballistics = 0x0,
    EAPickupType_Missiles = 0x1,
    EAPickupType_Fuel = 0x2,
    EAPickupType_Repair = 0x3,
    EAPickupType_KillConfirmed = 0x4,
    EAPickupType_SpecialEvent = 0x5,
    EAPickupType_UNDEFINED = 0x6,
};


enum EASOPSpawnState {
    EASOPSpawnState_None = 0x0,
    EASOPSpawnState_Off = 0x1,
    EASOPSpawnState_On = 0x2,
    EASOPSpawnState_UNDEFINED = 0x3,
};


enum EASpawnScreenMode {
    EASpawnScreenMode_Disabled = 0x0,
    EASpawnScreenMode_InitialSpawn = 0x1,
    EASpawnScreenMode_AlwaysActive = 0x2,
};


enum EATransportOnTransitionFinished {
    EATransportOnTransitionFinished_DoNothing = 0x0,
    EATransportOnTransitionFinished_Explode = 0x1,
    EATransportOnTransitionFinished_Land = 0x2,
    EATransportOnTransitionFinished_LoopNatural = 0x3,
    EATransportOnTransitionFinished_LoopTeleportToSpawner = 0x4,
    EATransportOnTransitionFinished_NextTransition = 0x5,
};


enum EATransportTransitionType {
    EATransportTransitionType_Unknown = 0x0,
    EATransportTransitionType_FlySpline = 0x1,
    EATransportTransitionType_QTravel = 0x2,
};


enum EAccumulatorType {
    EAccumulatorType_Wear = 0x1,
    EAccumulatorType_Dirt = 0x2,
    EAccumulatorType_Wetness = 0x4,
};


enum EActorActionEntityCarryableState {
    EActorActionEntityCarryableState_Undefined = 0x0,
    EActorActionEntityCarryableState_Carryable_Settled = 0x1,
    EActorActionEntityCarryableState_Carryable_Carried = 0x2,
    EActorActionEntityCarryableState_Carryable_CarriedAndEquipped = 0x3,
    EActorActionEntityCarryableState_Carryable_EquippedWorn = 0x4,
    EActorActionEntityCarryableState_Carryable_CarriedAndInspected = 0x5,
    EActorActionEntityCarryableState_Carryable_Dropped = 0x6,
    EActorActionEntityCarryableState_Carryable_Stowed = 0x7,
    EActorActionEntityCarryableState_Carryable_Offered = 0x8,
    EActorActionEntityCarryableState_Carryable_Stored = 0x9,
    EActorActionEntityCarryableState_Carryable_HangingOnOutfitHanger = 0xa,
    EActorActionEntityCarryableState_Special_Gripped = 0xb,
    EActorActionEntityCarryableState_Special_Mounted = 0xc,
    EActorActionEntityCarryableState_UNDEFINED = 0xd,
};


enum EActorActionHandlerEventType {
    EActorActionHandlerEventType_Sleep = 0x0,
    EActorActionHandlerEventType_UNDEFINED = 0x1,
};


enum EActorLookAheadTargetPointType {
    EActorLookAheadTargetPointType_VehicleForward = 0x0,
    EActorLookAheadTargetPointType_VehicleForwardHorizon = 0x1,
    EActorLookAheadTargetPointType_VehicleVelocityTranslation = 0x2,
    EActorLookAheadTargetPointType_VehicleVelocityPitchYaw = 0x3,
    EActorLookAheadTargetPointType_LockedTarget = 0x4,
    EActorLookAheadTargetPointType_JumpPointSpline = 0x5,
    EActorLookAheadTargetPointType_VJoy = 0x6,
    EActorLookAheadTargetPointType_TurretForward = 0x7,
    EActorLookAheadTargetPointType_TurretLockedTarget = 0x8,
    EActorLookAheadTargetPointType_TurretVJoy = 0x9,
    EActorLookAheadTargetPointType_TurretPitchYaw = 0xa,
    EActorLookAheadTargetPointType_TurretPointerTarget = 0xb,
    EActorLookAheadTargetPointType_LockedTargetPadlock = 0xc,
    EActorLookAheadTargetPointType_TurretLockedTargetPadlock = 0xd,
    EActorLookAheadTargetPointType_MgvForward = 0xe,
    EActorLookAheadTargetPointType_MgvPitchYaw = 0xf,
    EActorLookAheadTargetPointType_MgvVJoy = 0x10,
    EActorLookAheadTargetPointType_MgvLockedTarget = 0x11,
    EActorLookAheadTargetPointType_MgvLockedTargetPadlock = 0x12,
    EActorLookAheadTargetPointType_QuantumBoostTarget = 0x13,
    EActorLookAheadTargetPointType_AdsPadlock = 0x14,
    EActorLookAheadTargetPointType_AdsCrosshair = 0x15,
    EActorLookAheadTargetPointType_CustomPoint = 0x16,
    EActorLookAheadTargetPointType_UNDEFINED = 0x17,
};


enum EActorPhysicalizationProfile {
    EActorPhysicalizationProfile_None = 0x0,
    EActorPhysicalizationProfile_Default = 0x1,
    EActorPhysicalizationProfile_Default_PoseMatch = 0x2,
    EActorPhysicalizationProfile_FloppyRagdoll = 0x3,
    EActorPhysicalizationProfile_DrivenRagdoll = 0x4,
    EActorPhysicalizationProfile_NewRagdoll = 0x5,
    EActorPhysicalizationProfile_PassiveRagdoll = 0x6,
    EActorPhysicalizationProfile_Linked = 0x7,
    EActorPhysicalizationProfile_Flying = 0x8,
    EActorPhysicalizationProfile_HostedActiveRagdoll = 0x9,
    EActorPhysicalizationProfile_UNDEFINED = 0xa,
};


enum EActorStanceUpAlignMode {
    EActorStanceUpAlignMode_Auto = 0x0,
    EActorStanceUpAlignMode_OnlyAlignToSurfaceNormal = 0x1,
    EActorStanceUpAlignMode_OnlyAlignToGravity = 0x2,
    EActorStanceUpAlignMode_UNDEFINED = 0x3,
};


enum EActorStateFilterByAimingRestriction {
    EActorStateFilterByAimingRestriction_Any = 0x0,
    EActorStateFilterByAimingRestriction_Friendly = 0x1,
    EActorStateFilterByAimingRestriction_Kiosk = 0x2,
    EActorStateFilterByAimingRestriction_UNDEFINED = 0x3,
};


enum EActorStateFilterByBoolState {
    EActorStateFilterByBoolState_Any = 0x0,
    EActorStateFilterByBoolState_True = 0x1,
    EActorStateFilterByBoolState_False = 0x2,
    EActorStateFilterByBoolState_UNDEFINED = 0x3,
};


enum EActorStateFilterByPlayerCamera {
    EActorStateFilterByPlayerCamera_Any = 0x0,
    EActorStateFilterByPlayerCamera_FirstPerson = 0x1,
    EActorStateFilterByPlayerCamera_ThirdPerson = 0x2,
    EActorStateFilterByPlayerCamera_UNDEFINED = 0x3,
};


enum EActorType {
    EActorType_Regular = 0x0,
    EActorType_PlayerCorpse = 0x1,
    EActorType_DebugGhost = 0x2,
    EActorType_Transport = 0x3,
    EActorType_DeadBody = 0x4,
    EActorType_PlayerShadow = 0x5,
    EActorType_Creature = 0x6,
    EActorType_UNDEFINED = 0x7,
};


enum EAimFireDetectionMode {
    EAimFireDetectionMode_Temperature = 0x0,
    EAimFireDetectionMode_Radius = 0x1,
    EAimFireDetectionMode_Both = 0x2,
};


enum EAmmoContainerType {
    EAmmoContainerType_Primary = 0x0,
    EAmmoContainerType_Medical = 0x1,
    EAmmoContainerType_Salvage = 0x2,
};


enum EAnnouncementPriority {
    EAnnouncementPriority_None = 0x0,
    EAnnouncementPriority_SkipQueue = 0x1,
    EAnnouncementPriority_PlayNow = 0x2,
};


enum EAnnouncerGameTokenType {
    EAnnouncerGameTokenType_None = 0x0,
    EAnnouncerGameTokenType_GameMode = 0x1,
    EAnnouncerGameTokenType_Team = 0x2,
    EAnnouncerGameTokenType_Level = 0x3,
    EAnnouncerGameTokenType_Phase = 0x4,
};


enum EApplicationFormBodyTypes {
    EApplicationFormBodyTypes_Male = 0x0,
    EApplicationFormBodyTypes_Female = 0x1,
    EApplicationFormBodyTypes_PreferToSelfDescribe = 0x2,
    EApplicationFormBodyTypes_PreferNotToSay = 0x3,
    EApplicationFormBodyTypes_UNDEFINED = 0x4,
};


enum EAudioBreathEvents {
    EAudioBreathEvents_BreathIn = 0x0,
    EAudioBreathEvents_BreathOut = 0x1,
    EAudioBreathEvents_BreathingStarted = 0x2,
    EAudioBreathEvents_BreathingStopped = 0x3,
    EAudioBreathEvents_BreathHold = 0x4,
    EAudioBreathEvents_BreathRelease = 0x5,
    EAudioBreathEvents_BreathCustom = 0x6,
    EAudioBreathEvents_UNDEFINED = 0x7,
};


enum EAudioBreathParams {
    EAudioBreathParams_BreathDuration = 0x0,
    EAudioBreathParams_BreathVolume = 0x1,
    EAudioBreathParams_BreathAirSpeed = 0x2,
    EAudioBreathParams_BloodOxygen = 0x3,
    EAudioBreathParams_BlackOut = 0x4,
    EAudioBreathParams_Health = 0x5,
    EAudioBreathParams_Stamina = 0x6,
    EAudioBreathParams_BreathOxygenLevel = 0x7,
    EAudioBreathParams_Exertion = 0x8,
    EAudioBreathParams_Recovery = 0x9,
    EAudioBreathParams_BodyTemperature = 0xa,
    EAudioBreathParams_SuitTemperature = 0xb,
    EAudioBreathParams_ApparentTemperature = 0xc,
    EAudioBreathParams_BreathHeldRatio = 0xd,
    EAudioBreathParams_LungFullness = 0xe,
    EAudioBreathParams_BreathInOut = 0xf,
    EAudioBreathParams_GForce = 0x10,
    EAudioBreathParams_GForceStress = 0x11,
    EAudioBreathParams_GForcePassout = 0x12,
    EAudioBreathParams_StyleActiveTime = 0x13,
    EAudioBreathParams_CustomParameter = 0x14,
    EAudioBreathParams_TorsoWear = 0x15,
    EAudioBreathParams_ArmsLock = 0x16,
    EAudioBreathParams_IsInEVA = 0x17,
    EAudioBreathParams_UNDEFINED = 0x18,
};


enum EAudioControllerEntityType {
    EAudioControllerEntityType_None = 0x0,
    EAudioControllerEntityType_Actor = 0x1,
    EAudioControllerEntityType_Vehicle = 0x2,
    EAudioControllerEntityType_Communication = 0x3,
    EAudioControllerEntityType_TransitCarriage = 0x4,
    EAudioControllerEntityType_UNDEFINED = 0x5,
};


enum EAudioEnvironmentFeedbackMovementType {
    EAudioEnvironmentFeedbackMovementType_EnvironmentMovement_X = 0x0,
    EAudioEnvironmentFeedbackMovementType_EnvironmentMovement_Y = 0x1,
    EAudioEnvironmentFeedbackMovementType_EnvironmentMovement_Z = 0x2,
    EAudioEnvironmentFeedbackMovementType_EnvironmentMovement_Magnitude = 0x3,
    EAudioEnvironmentFeedbackMovementType_UNDEFINED = 0x4,
};


enum EAudioGameContextType {
    EAudioGameContextType_Default = 0x0,
    EAudioGameContextType_ActorDefault = 0x1,
    EAudioGameContextType_ActorEVA = 0x2,
    EAudioGameContextType_VehicleDriver = 0x3,
    EAudioGameContextType_VehicleCrew = 0x4,
    EAudioGameContextType_RemoteTurret = 0x5,
    EAudioGameContextType_Dead = 0x6,
    EAudioGameContextType_Cutscene = 0x7,
    EAudioGameContextType_UNDEFINED = 0x8,
};


enum EAudioIFCSOutputData {
    EAudioIFCSOutputData_IFCS_Update_Mode = 0x0,
    EAudioIFCSOutputData_Ship_Aerodynamics_DragMagnitude = 0x1,
    EAudioIFCSOutputData_Ship_Aerodynamics_LiftMagnitude = 0x2,
    EAudioIFCSOutputData_Ship_AfterburnerCommanded = 0x3,
    EAudioIFCSOutputData_Ship_AfterburnerEnabled = 0x4,
    EAudioIFCSOutputData_Ship_AfterburnerEnabledScaled = 0x5,
    EAudioIFCSOutputData_Ship_AfterburnerRampUpRatio = 0x6,
    EAudioIFCSOutputData_Ship_GSafe_Enabled = 0x7,
    EAudioIFCSOutputData_Ship_Coupled = 0x8,
    EAudioIFCSOutputData_Ship_FuelRatio = 0x9,
    EAudioIFCSOutputData_Ship_HoverMode = 0xa,
    EAudioIFCSOutputData_Ship_HoverModeAnimationPosition = 0xb,
    EAudioIFCSOutputData_Ship_HoverDriftForwardBackward = 0xc,
    EAudioIFCSOutputData_Ship_HoverDriftLeftRight = 0xd,
    EAudioIFCSOutputData_Ship_HoverDriftMagnitude = 0xe,
    EAudioIFCSOutputData_Ship_Planet_Altitude = 0xf,
    EAudioIFCSOutputData_Ship_Planet_AtmosphericDensity = 0x10,
    EAudioIFCSOutputData_Ship_Planet_HeightAboveGround = 0x11,
    EAudioIFCSOutputData_Ship_Atmospheric_Mach = 0x12,
    EAudioIFCSOutputData_Ship_Atmospheric_StagnationTemperature = 0x13,
    EAudioIFCSOutputData_Ship_Atmospheric_StagnationTemperatureFlareStarted = 0x14,
    EAudioIFCSOutputData_Ship_Atmospheric_StagnationTemperatureNormalized = 0x15,
    EAudioIFCSOutputData_Ship_Atmospheric_Wind_Speed_Rotational_Non_Normalised = 0x16,
    EAudioIFCSOutputData_Ship_Atmospheric_Wind_Speed_Translational_Non_Normalised = 0x17,
    EAudioIFCSOutputData_Ship_Translation_Speed = 0x18,
    EAudioIFCSOutputData_Ship_Translation_Speed_NonNormalized = 0x19,
    EAudioIFCSOutputData_Ship_Translation_Acceleration_MaxAll = 0x1a,
    EAudioIFCSOutputData_Ship_Translation_Acceleration_Forward = 0x1b,
    EAudioIFCSOutputData_Ship_Translation_Acceleration_Backward = 0x1c,
    EAudioIFCSOutputData_Ship_Translation_Acceleration_ForwardBackward = 0x1d,
    EAudioIFCSOutputData_Ship_Translation_Acceleration_UpDown = 0x1e,
    EAudioIFCSOutputData_Ship_Translation_Acceleration_UpDownSigned = 0x1f,
    EAudioIFCSOutputData_Ship_Translation_Acceleration_LeftRight = 0x20,
    EAudioIFCSOutputData_Ship_Translation_Acceleration_LeftRightSigned = 0x21,
    EAudioIFCSOutputData_Ship_Translation_Acceleration_MaxLeftRightUpDown = 0x22,
    EAudioIFCSOutputData_Ship_Translation_GSafe_Strength = 0x23,
    EAudioIFCSOutputData_Ship_Translation_InCruiseRange = 0x24,
    EAudioIFCSOutputData_Ship_Rotation_Speed = 0x25,
    EAudioIFCSOutputData_Ship_Rotation_Speed_NonNormalized = 0x26,
    EAudioIFCSOutputData_Ship_Rotation_Speed_Pitch = 0x27,
    EAudioIFCSOutputData_Ship_Rotation_Speed_Pitch_Signed = 0x28,
    EAudioIFCSOutputData_Ship_Rotation_Speed_Yaw = 0x29,
    EAudioIFCSOutputData_Ship_Rotation_Speed_Yaw_Signed = 0x2a,
    EAudioIFCSOutputData_Ship_Rotation_Speed_Roll = 0x2b,
    EAudioIFCSOutputData_Ship_Rotation_Speed_Roll_Signed = 0x2c,
    EAudioIFCSOutputData_Ship_Rotation_Speed_MaxAll = 0x2d,
    EAudioIFCSOutputData_Ship_Rotation_Speed_MaxPitchYaw = 0x2e,
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence = 0x2f,
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_Pitch = 0x30,
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_Yaw = 0x31,
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_Roll = 0x32,
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_MaxAll = 0x33,
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_MaxPitchYaw = 0x34,
    EAudioIFCSOutputData_Gravlev_Compression_One = 0x35,
    EAudioIFCSOutputData_Gravlev_Compression_Two = 0x36,
    EAudioIFCSOutputData_Gravlev_Compression_Three = 0x37,
    EAudioIFCSOutputData_Gravlev_Compression_Four = 0x38,
    EAudioIFCSOutputData_Gravlev_Compression_All = 0x39,
    EAudioIFCSOutputData_Gravlev_Compression_Average = 0x3a,
    EAudioIFCSOutputData_Gravlev_Compression_Max = 0x3b,
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_One = 0x3c,
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Two = 0x3d,
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Three = 0x3e,
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Four = 0x3f,
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_All = 0x40,
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Average = 0x41,
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Max = 0x42,
    EAudioIFCSOutputData_Gravlev_Enabled = 0x43,
    EAudioIFCSOutputData_Ship_Linear_VelocityLengthNormalizedLS = 0x44,
    EAudioIFCSOutputData_Ship_Linear_VelocityGoalLengthNormalizedLS = 0x45,
    EAudioIFCSOutputData_Ship_Linear_VelocityForwardBackwardNormalizedLS = 0x46,
    EAudioIFCSOutputData_Ship_Linear_VelocityRightLeftNormalizedLS = 0x47,
    EAudioIFCSOutputData_Ship_Linear_VelocityUpDownNormalizedLS = 0x48,
    EAudioIFCSOutputData_Ship_Angular_AccelerationLengthLS = 0x49,
    EAudioIFCSOutputData_Ship_Linear_RealAccelerationLS = 0x4a,
    EAudioIFCSOutputData_Ship_MaxSpeedNav = 0x4b,
    EAudioIFCSOutputData_Ship_AtmosphericDensity = 0x4c,
    EAudioIFCSOutputData_Ship_IsInControlSurfaceMode = 0x4d,
    EAudioIFCSOutputData_Ship_IsLanded = 0x4e,
    EAudioIFCSOutputData_Ship_IsGearDown = 0x4f,
    EAudioIFCSOutputData_Ship_IsMainThrustersOn = 0x50,
    EAudioIFCSOutputData_Ship_RawInputRotation = 0x51,
    EAudioIFCSOutputData_Ship_NavModeEnabled = 0x52,
    EAudioIFCSOutputData_Ship_ThrusterDisconnectActive = 0x53,
    EAudioIFCSOutputData_Ship_ThrusterControlSurfaceMix = 0x54,
    EAudioIFCSOutputData_UNDEFINED = 0x55,
};


enum EAudioRayOcclusionCalcRule {
    EAudioRayOcclusionCalcRule_Average = 0x0,
    EAudioRayOcclusionCalcRule_WeightLeastOccluded = 0x1,
    EAudioRayOcclusionCalcRule_WeightMostOccluded = 0x2,
    EAudioRayOcclusionCalcRule_UNDEFINED = 0x3,
};


enum EAudioRayOcclusionType {
    EAudioRayOcclusionType_SingleRayCentre = 0x0,
    EAudioRayOcclusionType_MultiRayBounds = 0x1,
    EAudioRayOcclusionType_MultiRayRadius = 0x2,
    EAudioRayOcclusionType_UNDEFINED = 0x3,
};


enum EAudioTriggerType {
    EAudioTriggerType_None = 0x0,
    EAudioTriggerType_WeaponFire = 0x1,
    EAudioTriggerType_EntityEffect = 0x2,
    EAudioTriggerType_Footsteps = 0x3,
    EAudioTriggerType_Foley = 0x4,
    EAudioTriggerType_ProceduralClip = 0x5,
    EAudioTriggerType_Dialogue = 0x6,
    EAudioTriggerType_Count = 0x7,
    EAudioTriggerType_Stopped = 0x8,
    EAudioTriggerType_UNDEFINED = 0x9,
};


enum EAudioType {
    EAudioType_BulletHit = 0x1,
    EAudioType_BulletWhiz = 0x2,
    EAudioType_Weapon = 0x4,
    EAudioType_Movement = 0x8,
    EAudioType_Explosion = 0x10,
    EAudioType_Collision = 0x20,
    EAudioType_Grenade = 0x40,
    EAudioType_Vehicle = 0x80,
    EAudioType_Ragdoll = 0x100,
    EAudioType_Takedown = 0x200,
    EAudioType_Custom = 0x400,
};


enum EAudioValueOutputCameraInputs {
    EAudioValueOutputCameraInputs_EAVOCI_None = 0x0,
    EAudioValueOutputCameraInputs_EAVOCI_Snapshot = 0x1,
    EAudioValueOutputCameraInputs_EAVOCI_Average = 0x2,
    EAudioValueOutputCameraInputs_EAVOCI_AverageRooted = 0x3,
    EAudioValueOutputCameraInputs_EAVOCI_Max = 0x4,
    EAudioValueOutputCameraInputs_UNDEFINED = 0x5,
};


enum EAutoFillType {
    EAutoFillType_None = 0x0,
    EAutoFillType_Balance = 0x1,
    EAutoFillType_TopToBottom = 0x2,
    EAutoFillType_BottomToTop = 0x3,
    EAutoFillType_SmartBalancing = 0x4,
};


enum EAuxiliaryProxy {
    EAuxiliaryProxy_Head_Proxies = 0x0,
    EAuxiliaryProxy_Neck_Proxies = 0x1,
    EAuxiliaryProxy_Spine_1_Proxies = 0x2,
    EAuxiliaryProxy_Spine_2_Proxies = 0x3,
    EAuxiliaryProxy_Spine_3_Proxies = 0x4,
    EAuxiliaryProxy_Hips_Proxies = 0x5,
    EAuxiliaryProxy_L_Shoulder_Proxies = 0x6,
    EAuxiliaryProxy_L_Arm_Proxies = 0x7,
    EAuxiliaryProxy_L_ForeArm_Proxies = 0x8,
    EAuxiliaryProxy_L_Hand_Proxies = 0x9,
    EAuxiliaryProxy_L_Thigh_Proxies = 0xa,
    EAuxiliaryProxy_L_Knee_Proxies = 0xb,
    EAuxiliaryProxy_L_Foot_Proxies = 0xc,
    EAuxiliaryProxy_L_Toe_Proxies = 0xd,
    EAuxiliaryProxy_R_Shoulder_Proxies = 0xe,
    EAuxiliaryProxy_R_Arm_Proxies = 0xf,
    EAuxiliaryProxy_R_ForeArm_Proxies = 0x10,
    EAuxiliaryProxy_R_Hand_Proxies = 0x11,
    EAuxiliaryProxy_R_Thigh_Proxies = 0x12,
    EAuxiliaryProxy_R_Knee_Proxies = 0x13,
    EAuxiliaryProxy_R_Foot_Proxies = 0x14,
    EAuxiliaryProxy_R_Toe_Proxies = 0x15,
    EAuxiliaryProxy_Helper_01_Proxies = 0x16,
    EAuxiliaryProxy_Helper_02_Proxies = 0x17,
    EAuxiliaryProxy_Helper_03_Proxies = 0x18,
    EAuxiliaryProxy_Helper_04_Proxies = 0x19,
    EAuxiliaryProxy_Helper_05_Proxies = 0x1a,
    EAuxiliaryProxy_Helper_06_Proxies = 0x1b,
    EAuxiliaryProxy_Helper_07_Proxies = 0x1c,
    EAuxiliaryProxy_Helper_08_Proxies = 0x1d,
    EAuxiliaryProxy_Helper_09_Proxies = 0x1e,
    EAuxiliaryProxy_Helper_10_Proxies = 0x1f,
    EAuxiliaryProxy_UNDEFINED = 0x20,
};


enum EAwardId {
    EAwardId_None = 0x1,
    EAwardId_VanduulSwarm_Win_Legacy = 0x2,
    EAwardId_VanduulSwarm_Win = 0x4,
    EAwardId_PirateSwarm_Win = 0x8,
    EAwardId_PirateSwarm_Speedrun = 0x10,
    EAwardId_PirateSwarm_SpecialCondition = 0x20,
    EAwardId_Tank_Win = 0x40,
    EAwardId_GunGame_Win = 0x80,
    EAwardId_ExperimentalMode_Played = 0x100,
    EAwardId_Killed_Developer = 0x200,
    EAwardId_PvE_Deathless = 0x400,
    EAwardId_SC_BDay11_Gold = 0x800,
    EAwardId_SC_BDay11_Platinum = 0x1000,
    EAwardId_Xmas_Win = 0x2000,
    EAwardId_LunarNewYear_Win = 0x4000,
    EAwardId_Valentines_Win = 0x8000,
    EAwardId_Halloween_Win = 0x10000,
    EAwardId_SC_GameMasterEventItem = 0x20000,
    EAwardId_SC_LootableEventItem = 0x40000,
    EAwardId_StPatricks_Win = 0x80000,
    EAwardId_WelcomeToPyro_Chapter_One = 0x100000,
    EAwardId_WelcomeToPyro_Chapter_Two = 0x200000,
    EAwardId_WelcomeToPyro_Chapter_Two_VIG = 0x400000,
    EAwardId_WelcomeToPyro_Chapter_Two_CFP = 0x800000,
    EAwardId_WelcomeToPyro_Chapter_Two_HH = 0x1000000,
    EAwardId_WelcomeToPyro_Firesale = 0x2000000,
    EAwardId_WelcomeToPyro_MiningRush = 0x4000000,
    EAwardId_WelcomeToPyro_SalvageRush = 0x8000000,
    EAwardId_WelcomeToPyro_FiresaleCombo = 0x10000000,
};


enum EBuildingBlocksFlattenBehavior {
    EBuildingBlocksFlattenBehavior_None = 0x0,
    EBuildingBlocksFlattenBehavior_FlattenAs3D = 0x1,
    EBuildingBlocksFlattenBehavior_FlattenAs2D = 0x2,
};


enum ECIGTestA {
    ECIGTestA_Item_A = 0x0,
    ECIGTestA_Item_B = 0x1,
    ECIGTestA_Item_C = 0x2,
    ECIGTestA_Item_D = 0x3,
    ECIGTestA_Item_E = 0x4,
    ECIGTestA_Item_F = 0x5,
    ECIGTestA_Item_G = 0x6,
    ECIGTestA_Item_H = 0x7,
    ECIGTestA_UNDEFINED = 0x8,
};


enum ECameraTransitionRelativeTo {
    ECameraTransitionRelativeTo_Start = 0x0,
    ECameraTransitionRelativeTo_End = 0x1,
};


enum ECameraViewTypes {
    ECameraViewTypes_Simple3P = 0x0,
    ECameraViewTypes_Static = 0x1,
    ECameraViewTypes_StaticFixedSpectator = 0x2,
    ECameraViewTypes_ThirdPersonBase = 0x3,
    ECameraViewTypes_Orbit = 0x4,
    ECameraViewTypes_OrbitEntity = 0x5,
    ECameraViewTypes_OrbitEntityCinematic = 0x6,
    ECameraViewTypes_OrbitPassenger = 0x7,
    ECameraViewTypes_OrbitPlayer = 0x8,
    ECameraViewTypes_OrbitPoint = 0x9,
    ECameraViewTypes_OrbitVehicle = 0xa,
    ECameraViewTypes_OrbitSCItemSeat = 0xb,
    ECameraViewTypes_OrbitPassengerSCItemSeat = 0xc,
    ECameraViewTypes_OrbitSpectatorFollow = 0xd,
    ECameraViewTypes_OrbitSpectatorFollowVehicle = 0xe,
    ECameraViewTypes_ChaseVehicle = 0xf,
    ECameraViewTypes_ChaseSCItemSeat = 0x10,
    ECameraViewTypes_ChasePlayerHead = 0x11,
    ECameraViewTypes_SeatCockpit = 0x12,
    ECameraViewTypes_LookBehind = 0x13,
    ECameraViewTypes_LookVehicleItem = 0x14,
    ECameraViewTypes_FreeCam = 0x15,
    ECameraViewTypes_TimeCam = 0x16,
    ECameraViewTypes_FPSDeathCam = 0x17,
    ECameraViewTypes_CinematicTwoShipsFrame = 0x18,
    ECameraViewTypes_FirstPersonSpectator = 0x19,
    ECameraViewTypes_TrackviewControlled = 0x1a,
    ECameraViewTypes_RemoteTurret = 0x1b,
    ECameraViewTypes_Docking = 0x1c,
    ECameraViewTypes_FirstPersonBase = 0x1d,
    ECameraViewTypes_KillerDeathCam = 0x1e,
    ECameraViewTypes_PlayerInventory = 0x1f,
    ECameraViewTypes_UNDEFINED = 0x20,
};


enum ECarryableDefaultInteractions {
    ECarryableDefaultInteractions_Carry = 0x0,
    ECarryableDefaultInteractions_Place = 0x1,
    ECarryableDefaultInteractions_Drop = 0x2,
    ECarryableDefaultInteractions_EquipToItemport = 0x3,
    ECarryableDefaultInteractions_Store = 0x4,
    ECarryableDefaultInteractions_HoldReady = 0x5,
    ECarryableDefaultInteractions_EquipWearable = 0x6,
    ECarryableDefaultInteractions_Inspect = 0x7,
    ECarryableDefaultInteractions_Flip = 0x8,
    ECarryableDefaultInteractions_SwapAttachments = 0x9,
    ECarryableDefaultInteractions_AttachToHeldItem = 0xa,
    ECarryableDefaultInteractions_UNDEFINED = 0xb,
};


enum ECarryableSequenceActions {
    ECarryableSequenceActions_Undefined = 0x0,
    ECarryableSequenceActions_BespokeTake = 0x1,
    ECarryableSequenceActions_BespokePlace = 0x2,
    ECarryableSequenceActions_UNDEFINED = 0x3,
};


enum ECarryableState {
    ECarryableState_eCS_Dropped = 0x0,
    ECarryableState_eCS_Carried = 0x1,
    ECarryableState_eCS_Settled = 0x2,
    ECarryableState_eCS_CarriedAndEquipped = 0x3,
    ECarryableState_eCS_Stowed = 0x4,
    ECarryableState_eCS_Offered = 0x5,
    ECarryableState_eCS_CarriedAndInspected = 0x6,
    ECarryableState_eCS_EquippedWorn = 0x7,
    ECarryableState_eCS_Stored = 0x8,
    ECarryableState_eCS_HangingOnOutfitHanger = 0x9,
    ECarryableState_UNDEFINED = 0xa,
};


enum ECharacterCustomizerDNARegion {
    ECharacterCustomizerDNARegion_LeftBrow = 0x0,
    ECharacterCustomizerDNARegion_RightBrow = 0x1,
    ECharacterCustomizerDNARegion_LeftEye = 0x2,
    ECharacterCustomizerDNARegion_RightEye = 0x3,
    ECharacterCustomizerDNARegion_Nose = 0x4,
    ECharacterCustomizerDNARegion_LeftEar = 0x5,
    ECharacterCustomizerDNARegion_RightEar = 0x6,
    ECharacterCustomizerDNARegion_LeftCheek = 0x7,
    ECharacterCustomizerDNARegion_RightCheek = 0x8,
    ECharacterCustomizerDNARegion_Mouth = 0x9,
    ECharacterCustomizerDNARegion_Jawline = 0xa,
    ECharacterCustomizerDNARegion_Neckhead = 0xb,
    ECharacterCustomizerDNARegion_AllRegions = 0xc,
    ECharacterCustomizerDNARegion_Invalid = 0xd,
    ECharacterCustomizerDNARegion_UNDEFINED = 0xe,
};


enum ECharacterCustomizerFeature {
    ECharacterCustomizerFeature_Skin = 0x0,
    ECharacterCustomizerFeature_Complexion = 0x1,
    ECharacterCustomizerFeature_Hair = 0x2,
    ECharacterCustomizerFeature_FacialHair = 0x3,
    ECharacterCustomizerFeature_Eyebrows = 0x4,
    ECharacterCustomizerFeature_HairDye = 0x5,
    ECharacterCustomizerFeature_Eyes = 0x6,
    ECharacterCustomizerFeature_Makeup = 0x7,
    ECharacterCustomizerFeature_Tattoos = 0x8,
    ECharacterCustomizerFeature_BodySkin = 0x9,
    ECharacterCustomizerFeature_Invalid = 0xa,
    ECharacterCustomizerFeature_UNDEFINED = 0xb,
};


enum ECharacterCustomizerItemSelectMode {
    ECharacterCustomizerItemSelectMode_HeadSelection = 0x0,
    ECharacterCustomizerItemSelectMode_BindingsValue = 0x1,
    ECharacterCustomizerItemSelectMode_Toggle = 0x2,
    ECharacterCustomizerItemSelectMode_UNDEFINED = 0x3,
};


enum ECharacterCustomizerTextureSelectSlot {
    ECharacterCustomizerTextureSelectSlot_MakeupSlot1 = 0x0,
    ECharacterCustomizerTextureSelectSlot_MakeupSlot2 = 0x1,
    ECharacterCustomizerTextureSelectSlot_MakeupSlot3 = 0x2,
    ECharacterCustomizerTextureSelectSlot_TattooSlot1 = 0x3,
    ECharacterCustomizerTextureSelectSlot_UNDEFINED = 0x4,
};


enum EChargeDrainMode {
    EChargeDrainMode_Charge = 0x0,
    EChargeDrainMode_Drain = 0x1,
};


enum EChatEmoteType {
    EChatEmoteType_Social = 0x0,
    EChatEmoteType_CombatSignal = 0x1,
};


enum ECommsRTTLocation {
    ECommsRTTLocation_None = 0x0,
    ECommsRTTLocation_Visor = 0x1,
    ECommsRTTLocation_Mobiglas = 0x2,
    ECommsRTTLocation_VehicleMFD = 0x3,
    ECommsRTTLocation_Hologram = 0x4,
    ECommsRTTLocation_Tannoy = 0x5,
    ECommsRTTLocation_UNDEFINED = 0x6,
};


enum EComparisonMode {
    EComparisonMode_Equal = 0x0,
    EComparisonMode_Greater = 0x1,
    EComparisonMode_Less = 0x2,
    EComparisonMode_GreaterOrEqual = 0x3,
    EComparisonMode_LessOrEqual = 0x4,
};


enum EConsumableResourceType {
    EConsumableResourceType_None = 0x0,
    EConsumableResourceType_Fuel = 0x1,
    EConsumableResourceType_UNDEFINED = 0x2,
};


enum EControlledSubstanceClass {
    EControlledSubstanceClass_ClassA = 0x0,
    EControlledSubstanceClass_ClassB = 0x1,
    EControlledSubstanceClass_ClassC = 0x2,
    EControlledSubstanceClass_UNDEFINED = 0x3,
};


enum EConversationHubLinkType {
    EConversationHubLinkType_First = 0x0,
    EConversationHubLinkType_Random = 0x1,
    EConversationHubLinkType_RandomCanRepeat = 0x2,
};


enum ECustomSettingType {
    ECustomSettingType_TimeLimit = 0x1,
    ECustomSettingType_ScoreLimit = 0x2,
    ECustomSettingType_EnableMatchCycling = 0x4,
    ECustomSettingType_RandomizeMapOnMatchCycle = 0x8,
    ECustomSettingType_EnableTeamSwitching = 0x10,
    ECustomSettingType_EnableTeamBalancing = 0x20,
    ECustomSettingType_PlayerLimit = 0x40,
};


enum EDFMVictoryScoringType {
    EDFMVictoryScoringType_Kills = 0x0,
    EDFMVictoryScoringType_Score = 0x1,
    EDFMVictoryScoringType_Deaths = 0x2,
    EDFMVictoryScoringType_GunGameLevel = 0x3,
};


enum EDNAEditType {
    EDNAEditType_None = 0x0,
    EDNAEditType_Blending = 0x1,
    EDNAEditType_Sculpting = 0x2,
    EDNAEditType_UNDEFINED = 0x3,
};


enum EDefaultActionsEntityType {
    EDefaultActionsEntityType_MountedGun = 0x0,
    EDefaultActionsEntityType_ActorMovable = 0x1,
    EDefaultActionsEntityType_DraggableBody = 0x2,
    EDefaultActionsEntityType_UNDEFINED = 0x3,
};


enum EDefaultColliderBehaviour {
    EDefaultColliderBehaviour_Pushable = 0x0,
    EDefaultColliderBehaviour_NonPushable = 0x1,
    EDefaultColliderBehaviour_Kinematic = 0x2,
    EDefaultColliderBehaviour_UNDEFINED = 0x3,
};


enum EDefaultEntitlement {
    EDefaultEntitlement_Offline = 0x0,
    EDefaultEntitlement_AllModes = 0x1,
    EDefaultEntitlement_StarMarine = 0x2,
    EDefaultEntitlement_ArenaCommander = 0x3,
};


enum EDeformerType {
    EDeformerType_Standard = 0x0,
    EDeformerType_OriginalSkin = 0x1,
    EDeformerType_Protos = 0x2,
    EDeformerType_ProtosMisc = 0x3,
    EDeformerType_WD_Elastic = 0x4,
    EDeformerType_WD_BShapeExclusion = 0x5,
    EDeformerType_WD_NUScaling = 0x6,
    EDeformerType_WD_ElasticNUScaling = 0x7,
    EDeformerType_WD_ElasticDQSkinning = 0x8,
    EDeformerType_Cloth = 0x9,
    EDeformerType_LinearSkinning = 0xa,
    EDeformerType_UNDEFINED = 0xb,
};


enum EDelayUnit {
    EDelayUnit_Seconds = 0x0,
    EDelayUnit_RPM = 0x1,
};


enum EDelinkMode {
    EDelinkMode_NoDelink = 0x0,
    EDelinkMode_Normal = 0x1,
    EDelinkMode_Quick = 0x2,
    EDelinkMode_Forced = 0x3,
    EDelinkMode_UNDEFINED = 0x4,
};


enum EDeltaSignaturePriority {
    EDeltaSignaturePriority_None = 0x0,
    EDeltaSignaturePriority_Auxiliary = 0x1,
    EDeltaSignaturePriority_Primary = 0x2,
};


enum EDifficultyRange_GameKnowledge {
    EDifficultyRange_GameKnowledge_Noob_gaming_or_tutorial_1 = 0x0,
    EDifficultyRange_GameKnowledge_FPS_mechanics_walk_shoot_mobiGlass_2 = 0x1,
    EDifficultyRange_GameKnowledge_Flight_mechanics_fly_dock_quantum_3 = 0x2,
    EDifficultyRange_GameKnowledge_Standard_understanding_FPS_flight_professions_4 = 0x3,
    EDifficultyRange_GameKnowledge_Expert_understanding_FPS_flight_professions_5 = 0x4,
    EDifficultyRange_GameKnowledge_Pro_understanding_of_optimal_tactics_6 = 0x5,
    EDifficultyRange_GameKnowledge_Basically_a_Dev_7 = 0x6,
    EDifficultyRange_GameKnowledge_No_content_like_this_yet_8 = 0x7,
    EDifficultyRange_GameKnowledge_UNDEFINED = 0x8,
};


enum EDifficultyRange_MechanicalSkill {
    EDifficultyRange_MechanicalSkill_Hands_free_gaming_1 = 0x0,
    EDifficultyRange_MechanicalSkill_Zero_risk_of_action_2 = 0x1,
    EDifficultyRange_MechanicalSkill_Easy_PvE_only_action_3 = 0x2,
    EDifficultyRange_MechanicalSkill_Normal_PvE_only_action_4 = 0x3,
    EDifficultyRange_MechanicalSkill_Hard_PvE_or_Easy_PvP_action_5 = 0x4,
    EDifficultyRange_MechanicalSkill_Multiplayer_PvE_or_Expert_PvP_action_6 = 0x5,
    EDifficultyRange_MechanicalSkill_PvE_PvP_large_group_action_eg_warzone_7 = 0x6,
    EDifficultyRange_MechanicalSkill_No_content_like_this_yet_8 = 0x7,
    EDifficultyRange_MechanicalSkill_UNDEFINED = 0x8,
};


enum EDifficultyRange_MentalLoad {
    EDifficultyRange_MentalLoad_AFK_gaming_1 = 0x0,
    EDifficultyRange_MentalLoad_Requires_minimal_thought_2 = 0x1,
    EDifficultyRange_MentalLoad_Routine_light_work_3 = 0x2,
    EDifficultyRange_MentalLoad_Moments_of_concentration_required_4 = 0x3,
    EDifficultyRange_MentalLoad_Like_spinning_10_plates_at_once_5 = 0x4,
    EDifficultyRange_MentalLoad_Extremely_hard_to_manage_alone_6 = 0x5,
    EDifficultyRange_MentalLoad_Insane_complexity_NOT_soloable_7 = 0x6,
    EDifficultyRange_MentalLoad_No_content_like_this_yet_8 = 0x7,
    EDifficultyRange_MentalLoad_UNDEFINED = 0x8,
};


enum EDifficultyRange_RiskOfLoss {
    EDifficultyRange_RiskOfLoss_Safe_and_sound_zzzz_1 = 0x0,
    EDifficultyRange_RiskOfLoss_Barely_even_breaking_a_sweat_2 = 0x1,
    EDifficultyRange_RiskOfLoss_Minimal_danger_FPS_NOT_ship_action_3 = 0x2,
    EDifficultyRange_RiskOfLoss_Ship_could_get_damaged_Could_lose_cargo_4 = 0x3,
    EDifficultyRange_RiskOfLoss_Player_might_die_Ship_could_explode_5 = 0x4,
    EDifficultyRange_RiskOfLoss_Player_likely_to_die_Ship_too_6 = 0x5,
    EDifficultyRange_RiskOfLoss_Without_help_Player_and_Ship_die_7 = 0x6,
    EDifficultyRange_RiskOfLoss_No_content_like_this_yet_8 = 0x7,
    EDifficultyRange_RiskOfLoss_UNDEFINED = 0x8,
};


enum EDockingTubeAnimationStage {
    EDockingTubeAnimationStage_NotSet = 0x0,
    EDockingTubeAnimationStage_Inactive = 0x1,
    EDockingTubeAnimationStage_PreDocked = 0x2,
    EDockingTubeAnimationStage_Docked = 0x3,
    EDockingTubeAnimationStage_Count = 0x4,
};


enum EDoorCollisionReactionDirection {
    EDoorCollisionReactionDirection_All = 0x0,
    EDoorCollisionReactionDirection_Up = 0x1,
    EDoorCollisionReactionDirection_Down = 0x2,
    EDoorCollisionReactionDirection_Left = 0x3,
    EDoorCollisionReactionDirection_Right = 0x4,
    EDoorCollisionReactionDirection_Front = 0x5,
    EDoorCollisionReactionDirection_Back = 0x6,
    EDoorCollisionReactionDirection_UNDEFINED = 0x7,
};


enum EDoorDestructionBehavior {
    EDoorDestructionBehavior_UnlockDoor = 0x0,
    EDoorDestructionBehavior_BreakDoor = 0x1,
    EDoorDestructionBehavior_UNDEFINED = 0x2,
};


enum EDoorPoweredState {
    EDoorPoweredState_Powered = 0x0,
    EDoorPoweredState_Unpowered = 0x1,
};


enum EEAActionItemMessageType {
    EEAActionItemMessageType_Default = 0x0,
    EEAActionItemMessageType_WaitingForPlayers = 0x1,
    EEAActionItemMessageType_BalancingTeams = 0x2,
    EEAActionItemMessageType_MatchStarting = 0x3,
    EEAActionItemMessageType_MatchEnding = 0x4,
    EEAActionItemMessageType_Contested = 0x5,
    EEAActionItemMessageType_OutOfPosition = 0x6,
    EEAActionItemMessageType_PressKeyToSkip = 0x7,
    EEAActionItemMessageType_Retry = 0x8,
    EEAActionItemMessageType_Respawning = 0x9,
    EEAActionItemMessageType_RespawnPrompt = 0xa,
    EEAActionItemMessageType_RespawnTimer = 0xb,
    EEAActionItemMessageType_Award = 0xc,
    EEAActionItemMessageType_ReadyWaitingOnKeyPress = 0xd,
    EEAActionItemMessageType_ReadyWaitingOnKeyPressForceReady = 0xe,
    EEAActionItemMessageType_ReadyWaitingForOtherPlayers = 0xf,
    EEAActionItemMessageType_WaitingForPlayersWithDebugSkip = 0x10,
};


enum EEACapturableEntityType {
    EEACapturableEntityType_Terminal = 0x0,
    EEACapturableEntityType_Prop = 0x1,
    EEACapturableEntityType_LockedSpawn = 0x2,
};


enum EEAMessageTriggerFrequency {
    EEAMessageTriggerFrequency_Always = 0x0,
    EEAMessageTriggerFrequency_OncePerLife = 0x1,
    EEAMessageTriggerFrequency_OncePerRound = 0x2,
    EEAMessageTriggerFrequency_ActiveWhenInside = 0x3,
};


enum EEAObjectiveState {
    EEAObjectiveState_Default = 0x0,
    EEAObjectiveState_Capturing = 0x1,
    EEAObjectiveState_MultipleCapturing = 0x2,
    EEAObjectiveState_Contesting = 0x3,
    EEAObjectiveState_ReturningToOwner = 0x4,
    EEAObjectiveState_Cooldown = 0x5,
};


enum EEAPlayableAreaOnExit {
    EEAPlayableAreaOnExit_None = 0x0,
    EEAPlayableAreaOnExit_Autopilot = 0x1,
    EEAPlayableAreaOnExit_DamagePerSecond = 0x2,
    EEAPlayableAreaOnExit_Kill = 0x3,
    EEAPlayableAreaOnExit_Disable = 0x4,
    EEAPlayableAreaOnExit_Redout = 0x5,
    EEAPlayableAreaOnExit_SimulationGlitch = 0x6,
};


enum EEASpawnMulticrewType {
    EEASpawnMulticrewType_Public = 0x1,
    EEASpawnMulticrewType_SquadOnly = 0x2,
};


enum EEndCondition {
    EEndCondition_None = 0x0,
    EEndCondition_AllUsed = 0x1,
    EEndCondition_NumberOfUsablesToUse = 0x2,
    EEndCondition_AllUsed_WithSync = 0x3,
    EEndCondition_UNDEFINED = 0x4,
};


enum EEnemyType {
    EEnemyType_ET_Invalid = 0x0,
    EEnemyType_ET_Boss = 0x1,
    EEnemyType_ET_Butterfly = 0x2,
    EEnemyType_ET_Bee = 0x3,
    EEnemyType_ET_Tonbo = 0x4,
    EEnemyType_ET_Momiji = 0x5,
    EEnemyType_ET_Sasori = 0x6,
    EEnemyType_ET_Midori = 0x7,
    EEnemyType_ET_Galboss = 0x8,
    EEnemyType_UNDEFINED = 0x9,
};


enum EEntityComponentCommsChannelJoinType {
    EEntityComponentCommsChannelJoinType_AutoJoin = 0x0,
    EEntityComponentCommsChannelJoinType_Invite = 0x1,
};


enum EEntityMarkerType {
    EEntityMarkerType_None = 0x0,
    EEntityMarkerType_LandingZone = 0x1,
    EEntityMarkerType_MedPen = 0x2,
    EEntityMarkerType_AmmoCrate = 0x3,
    EEntityMarkerType_GrenadeCrate = 0x4,
    EEntityMarkerType_UNDEFINED = 0x5,
};


enum EEntryFlagCondition {
    EEntryFlagCondition_Tracked = 0x0,
    EEntryFlagCondition_Locked = 0x1,
    EEntryFlagCondition_Pinned = 0x2,
    EEntryFlagCondition_DetectedByActiveRadar = 0x3,
    EEntryFlagCondition_Tagged = 0x4,
    EEntryFlagCondition_BoxoutActive = 0x5,
    EEntryFlagCondition_IsObjective = 0x6,
    EEntryFlagCondition_IsPartyMember = 0x7,
    EEntryFlagCondition_UNDEFINED = 0x8,
};


enum EEventTriggerMask {
    EEventTriggerMask_AIAndPlayer = 0x0,
    EEventTriggerMask_OnlyAI = 0x1,
    EEventTriggerMask_OnlyPlayer = 0x2,
    EEventTriggerMask_UNDEFINED = 0x3,
};


enum EExcludeSpawnGender {
    EExcludeSpawnGender_Male = 0x0,
    EExcludeSpawnGender_Female = 0x1,
    EExcludeSpawnGender_None = 0x2,
    EExcludeSpawnGender_UNDEFINED = 0x3,
};


enum EFaceType {
    EFaceType_Bubble = 0x0,
    EFaceType_FrontBack = 0x1,
    EFaceType_Quadrant = 0x2,
    EFaceType_Box = 0x3,
    EFaceType_UNDEFINED = 0x4,
};


enum EFacialAnim {
    EFacialAnim_Neutral = 0x0,
    EFacialAnim_Happy = 0x1,
    EFacialAnim_Sad = 0x2,
    EFacialAnim_Angry = 0x3,
    EFacialAnim_Intense = 0x4,
    EFacialAnim_Interested = 0x5,
};


enum EFiringRangePenaltyType {
    EFiringRangePenaltyType_EnemyReachedPlayer = 0x0,
    EFiringRangePenaltyType_Friendlyfire = 0x1,
    EFiringRangePenaltyType_HeadShot = 0x2,
    EFiringRangePenaltyType_UNDEFINED = 0x3,
};


enum EFirstSelectMode {
    EFirstSelectMode_None = 0x0,
    EFirstSelectMode_Once = 0x1,
    EFirstSelectMode_Always = 0x2,
    EFirstSelectMode_UNDEFINED = 0x3,
};


enum EFrontendGameModeButton {
    EFrontendGameModeButton_PU = 0x0,
    EFrontendGameModeButton_EA = 0x1,
};


enum EGameCollisionClass {
    EGameCollisionClass_Actor_Capsule = 0x400,
    EGameCollisionClass_Actor_Body = 0x800,
    EGameCollisionClass_Actor_PlayerControlled = 0x1000,
    EGameCollisionClass_Actor_AIControlled = 0x2000,
    EGameCollisionClass_Vehicle = 0x4000,
    EGameCollisionClass_Vehicle_Interior = 0x8000,
    EGameCollisionClass_Ragdoll = 0x10000,
    EGameCollisionClass_Projectile = 0x40000,
    EGameCollisionClass_Missile = 0x80000,
    EGameCollisionClass_Debris = 0x800000,
};


enum EGameDifficulty {
    EGameDifficulty_None = 0x0,
    EGameDifficulty_Easy = 0x1,
    EGameDifficulty_Normal = 0x2,
    EGameDifficulty_Hard = 0x3,
    EGameDifficulty_UNDEFINED = 0x4,
};


enum EGameModeFilters {
    EGameModeFilters_Released = 0x1,
    EGameModeFilters_Flight = 0x2,
    EGameModeFilters_GroundVehicles = 0x4,
    EGameModeFilters_FPS = 0x8,
    EGameModeFilters_COOP = 0x10,
    EGameModeFilters_PvP = 0x20,
    EGameModeFilters_PvE = 0x40,
    EGameModeFilters_Racing = 0x80,
    EGameModeFilters_Experimental = 0x100,
    EGameModeFilters_MultiCrew = 0x200,
};


enum EGameModeId {
    EGameModeId_S42_Default = -0x4,
    EGameModeId_SC_Frontend = -0x3,
    EGameModeId_SC_Default = -0x2,
    EGameModeId_INVALID = -0x1,
    EGameModeId_EA_BattleRoyale = 0x0,
    EGameModeId_EA_FreeFlight = 0x1,
    EGameModeId_EA_PirateSwarm = 0x2,
    EGameModeId_EA_SquadronBattle = 0x3,
    EGameModeId_EA_VanduulSwarm = 0x4,
    EGameModeId_EA_ClassicRace = 0x5,
    EGameModeId_EA_Elimination = 0x6,
    EGameModeId_EA_TeamElimination = 0x7,
    EGameModeId_EA_Control = 0x8,
    EGameModeId_EA_TheatersOfWar = 0x9,
    EGameModeId_EA_IterativeTesting = 0xa,
    EGameModeId_EA_Duel = 0xb,
    EGameModeId_EA_FPSGunGame = 0xc,
    EGameModeId_EA_Horde = 0xd,
    EGameModeId_EA_VanduulInvasion = 0xe,
    EGameModeId_EA_ExperimentalMode_1 = 0xf,
    EGameModeId_EA_ExperimentalMode_2 = 0x10,
    EGameModeId_EA_ExperimentalMode_3 = 0x11,
    EGameModeId_EA_ExperimentalMode_4 = 0x12,
    EGameModeId_EA_ExperimentalMode_5 = 0x13,
    EGameModeId_EA_ExperimentalMode_6 = 0x14,
    EGameModeId_EA_ExperimentalMode_7 = 0x15,
    EGameModeId_EA_ExperimentalMode_8 = 0x16,
    EGameModeId_EA_ExperimentalMode_9 = 0x17,
    EGameModeId_EA_ExperimentalMode_10 = 0x18,
    EGameModeId_EA_ExperimentalMode_11 = 0x19,
    EGameModeId_EA_ExperimentalMode_12 = 0x1a,
    EGameModeId_EA_GravRace = 0x1b,
};


enum EGameModePlayedId {
    EGameModePlayedId_None = 0x1,
    EGameModePlayedId_EA_Played_GunGame = 0x2,
    EGameModePlayedId_EA_Played_TankRoyale = 0x4,
    EGameModePlayedId_EA_Played_TeamTank = 0x8,
    EGameModePlayedId_EA_Played_SingleWeapon = 0x10,
    EGameModePlayedId_EA_Played_MirrorMatch = 0x20,
    EGameModePlayedId_EA_Played_MM_Vanduul = 0x40,
    EGameModePlayedId_EA_Played_MM_Dogfight = 0x80,
    EGameModePlayedId_EA_Played_MM_ClassicRace = 0x100,
    EGameModePlayedId_EA_Played_KillConfirmedFPS = 0x200,
    EGameModePlayedId_EA_Played_KillConfirmedVehicle = 0x400,
    EGameModePlayedId_EA_Played_Wingman = 0x800,
    EGameModePlayedId_EA_Played_TeamElimination = 0x1000,
    EGameModePlayedId_EA_Played_GravRace = 0x2000,
    EGameModePlayedId_EA_Played_GravRoyale = 0x4000,
    EGameModePlayedId_EA_Played_RN_SquadronBattle = 0x8000,
    EGameModePlayedId_EA_Played_RN_Duel = 0x10000,
};


enum EGameRulesEventType {
    EGameRulesEventType_PlayerKill = 0x0,
    EGameRulesEventType_PlayerKillAssist = 0x1,
    EGameRulesEventType_PlayerKillAssistTeam1 = 0x2,
    EGameRulesEventType_PlayerKillAssistTeam2 = 0x3,
    EGameRulesEventType_PlayerBledOut = 0x4,
    EGameRulesEventType_PlayerTeamKill = 0x5,
    EGameRulesEventType_Accident = 0x6,
    EGameRulesEventType_Suicide = 0x7,
    EGameRulesEventType_Tagged_PlayerKillAssist = 0x8,
    EGameRulesEventType_PlayerBleeding = 0x9,
    EGameRulesEventType_DistortionDamage = 0xa,
    EGameRulesEventType_DistortionDisabledShip = 0xb,
    EGameRulesEventType_DamageShip = 0xc,
    EGameRulesEventType_DamageTeamShip = 0xd,
    EGameRulesEventType_DestroyedShip = 0xe,
    EGameRulesEventType_DestroyedTeamShip = 0xf,
    EGameRulesEventType_DestroyedShipEjected = 0x10,
    EGameRulesEventType_PlayerKillEjected = 0x11,
    EGameRulesEventType_CompletedLap = 0x12,
    EGameRulesEventType_Award_UnaidedKill = 0x13,
    EGameRulesEventType_Award_Untouchable = 0x14,
    EGameRulesEventType_Award_Ace = 0x15,
    EGameRulesEventType_Award_AceBonus = 0x16,
    EGameRulesEventType_Award_AceKill = 0x17,
    EGameRulesEventType_Award_AceKillBonus = 0x18,
    EGameRulesEventType_Award_KillingSpree = 0x19,
    EGameRulesEventType_Award_KillingSpreeBonus = 0x1a,
    EGameRulesEventType_Award_KillingSpreeKill = 0x1b,
    EGameRulesEventType_Award_KillingSpreeKillBonus = 0x1c,
    EGameRulesEventType_Award_NemesisKill = 0x1d,
    EGameRulesEventType_Award_RedemptionKill = 0x1e,
    EGameRulesEventType_Award_ResurgentKill = 0x1f,
    EGameRulesEventType_Award_ResurgentKillBonus = 0x20,
    EGameRulesEventType_Award_RevengeKill = 0x21,
    EGameRulesEventType_Award_FirstBlood = 0x22,
    EGameRulesEventType_Award_KillAssist = 0x23,
    EGameRulesEventType_Award_KillAssistCrew = 0x24,
    EGameRulesEventType_Award_Savior = 0x25,
    EGameRulesEventType_Award_SquadronRevengeKill = 0x26,
    EGameRulesEventType_Award_UnderdogKill = 0x27,
    EGameRulesEventType_Award_CrashRoberts = 0x28,
    EGameRulesEventType_Award_CheapShot = 0x29,
    EGameRulesEventType_Award_ForcedEject = 0x2a,
    EGameRulesEventType_Award_ForcedError = 0x2b,
    EGameRulesEventType_Award_Goodnight = 0x2c,
    EGameRulesEventType_Award_LightsOut = 0x2d,
    EGameRulesEventType_Award_MartyrKill = 0x2e,
    EGameRulesEventType_Award_ControlTerminalCaptured = 0x2f,
    EGameRulesEventType_Award_ControlTerminalDefended = 0x30,
    EGameRulesEventType_Award_ControlTerminalCaptureAssist = 0x31,
    EGameRulesEventType_Award_ControlTerminalHackerKilled = 0x32,
    EGameRulesEventType_Award_ControlTerminalDomination = 0x33,
    EGameRulesEventType_Award_CaptureAreaCaptureBegin = 0x34,
    EGameRulesEventType_Award_CaptureAreaCaptureComplete = 0x35,
    EGameRulesEventType_Award_CaptureAreaContesting = 0x36,
    EGameRulesEventType_Award_CaptureAreaNeutralized = 0x37,
    EGameRulesEventType_Award_CaptureAreaCapturing = 0x38,
    EGameRulesEventType_Award_CaptureCloseCallKill = 0x39,
    EGameRulesEventType_Award_CaptureReversing = 0x3a,
    EGameRulesEventType_Award_DefenderKill = 0x3b,
    EGameRulesEventType_Award_AttackerKill = 0x3c,
    EGameRulesEventType_Award_Hemorrhage = 0x3d,
    EGameRulesEventType_Award_Headshot = 0x3e,
    EGameRulesEventType_Award_MeleeKill = 0x3f,
    EGameRulesEventType_Award_TakeDown = 0x40,
    EGameRulesEventType_DamageItem = 0x41,
    EGameRulesEventType_DamageTeamItem = 0x42,
    EGameRulesEventType_Award_TerminalTick = 0x43,
    EGameRulesEventType_Award_PhaseWon = 0x44,
    EGameRulesEventType_Award_MatchDefeat = 0x45,
    EGameRulesEventType_Award_MatchVictory = 0x46,
    EGameRulesEventType_Award_SecondPlace = 0x47,
    EGameRulesEventType_Award_ThirdPlace = 0x48,
    EGameRulesEventType_Award_DestroyPhaseObjective = 0x49,
    EGameRulesEventType_Award_DamagePhaseObjective = 0x4a,
    EGameRulesEventType_Award_DamageSentToObjective = 0x4b,
    EGameRulesEventType_Award_KillCollected = 0x4d,
    EGameRulesEventType_Award_KillDenied = 0x4e,
};


enum EGasCloudOverrideVolumeType {
    EGasCloudOverrideVolumeType_Sphere = 0x0,
    EGasCloudOverrideVolumeType_Cube = 0x1,
    EGasCloudOverrideVolumeType_UNDEFINED = 0x2,
};


enum EGeometrySlots {
    EGeometrySlots_Main = 0x0,
    EGeometrySlots_LegacyHelper = 0x1,
    EGeometrySlots_DebrisPieces = 0x2,
    EGeometrySlots_UNDEFINED = 0x3,
};


enum EGeometryVisAreaMode {
    EGeometryVisAreaMode_AABB_Center = 0x0,
    EGeometryVisAreaMode_Pivot = 0x1,
    EGeometryVisAreaMode_Ignore_VisAreas = 0x2,
    EGeometryVisAreaMode_UNDEFINED = 0x3,
};


enum EGestureAnim {
    EGestureAnim_NodHead = 0x0,
    EGestureAnim_ShakeHead = 0x1,
};


enum EGripUser {
    EGripUser_AI = 0x0,
    EGripUser_Player = 0x1,
    EGripUser_All = 0x2,
};


enum EHUDNotificationType {
    EHUDNotificationType_Default = 0x0,
    EHUDNotificationType_Group = 0x1,
    EHUDNotificationType_Party = 0x2,
    EHUDNotificationType_Beacon = 0x3,
    EHUDNotificationType_Tutorial = 0x4,
    EHUDNotificationType_ProgressBar = 0x5,
    EHUDNotificationType_UNDEFINED = 0x6,
};


enum EHackingCodeCommandParamType {
    EHackingCodeCommandParamType_Int = 0x0,
    EHackingCodeCommandParamType_Char = 0x1,
    EHackingCodeCommandParamType_Float = 0x2,
    EHackingCodeCommandParamType_Coordinate = 0x3,
    EHackingCodeCommandParamType_UNDEFINED = 0x4,
};


enum EHackingErrorType {
    EHackingErrorType_Ok = 0x0,
    EHackingErrorType_AbilityIsChargingUp = 0x1,
    EHackingErrorType_AbilityIsActive = 0x2,
    EHackingErrorType_AbilityIsCoolingDown = 0x3,
    EHackingErrorType_AbilityInjectNoOverlappedPoint = 0x4,
    EHackingErrorType_AbilityInjectPointAlreadyActive = 0x5,
    EHackingErrorType_AbilityInjectPointAlreadyInactive = 0x6,
    EHackingErrorType_AbilitySwapSpareNodeUnavailable = 0x7,
    EHackingErrorType_AbilitySwapTargetNodeCantBeSwapped = 0x8,
    EHackingErrorType_AbilitySwapTargetNodeIsUnrevealed = 0x9,
    EHackingErrorType_AbilityWrapTeleportWhileMoving = 0xa,
    EHackingErrorType_AbilityWrapAgentAlreadyTeleporting = 0xb,
    EHackingErrorType_AbilityWrapDestinationNodeIsUnrevealed = 0xc,
    EHackingErrorType_AbilityWrapNoTeleportationDirectionAvailable = 0xd,
    EHackingErrorType_AbilityWrapInvalidDestination = 0xe,
    EHackingErrorType_AbilityWrapAmbiguousDestination = 0xf,
    EHackingErrorType_CodeInvalidCommandToken = 0x10,
    EHackingErrorType_CodeTooManyArgs = 0x11,
    EHackingErrorType_CodeTooLittleArgs = 0x12,
    EHackingErrorType_CodeInvalidArgType = 0x13,
    EHackingErrorType_CodeInvalidArgFormat = 0x14,
    EHackingErrorType_MovementCantMoveToUnrevealedNode = 0x15,
    EHackingErrorType_SpawnInappropriateGameState = 0x16,
    EHackingErrorType_SpawnInvalidNodeSelected = 0x17,
    EHackingErrorType_UnknownError = 0x18,
    EHackingErrorType_UNDEFINED = 0x19,
};


enum EHackingFlagOverrideType {
    EHackingFlagOverrideType_UsePreset = 0x0,
    EHackingFlagOverrideType_False = 0x1,
    EHackingFlagOverrideType_True = 0x2,
    EHackingFlagOverrideType_UNDEFINED = 0x3,
};


enum EHackingParamsAbilityType {
    EHackingParamsAbilityType_Invalid = 0x0,
    EHackingParamsAbilityType_NodeSwap = 0x1,
    EHackingParamsAbilityType_Ping = 0x2,
    EHackingParamsAbilityType_Inject = 0x3,
    EHackingParamsAbilityType_Slowdown = 0x4,
    EHackingParamsAbilityType_WrapAround = 0x5,
    EHackingParamsAbilityType_Any = 0x6,
    EHackingParamsAbilityType_UNDEFINED = 0x7,
};


enum EHandMode {
    EHandMode_LeftHand = 0x0,
    EHandMode_RightHand = 0x1,
    EHandMode_Total = 0x2,
};


enum EHandholdAttachOrientationSpace {
    EHandholdAttachOrientationSpace_ActorSpace = 0x0,
    EHandholdAttachOrientationSpace_HandholdSpace = 0x1,
    EHandholdAttachOrientationSpace_EntitySpace = 0x2,
    EHandholdAttachOrientationSpace_ZoneSpace = 0x3,
    EHandholdAttachOrientationSpace_UNDEFINED = 0x4,
};


enum EHeadWearHair {
    EHeadWearHair_any = 0x0,
    EHeadWearHair_snoopy_cap = 0x1,
    EHeadWearHair_hatHair = 0x2,
    EHeadWearHair_UNDEFINED = 0x3,
};


enum EHealingMode {
    EHealingMode_Target = 0x0,
    EHealingMode_Self = 0x1,
};


enum EHealingValueType {
    EHealingValueType_Health = 0x0,
    EHealingValueType_Buff = 0x1,
};


enum EHelmetState {
    EHelmetState_NONE = 0x0,
    EHelmetState_Open = 0x1,
    EHelmetState_Opening = 0x2,
    EHelmetState_Closed = 0x3,
    EHelmetState_Closing = 0x4,
};


enum EHelmetStateMachine {
    EHelmetStateMachine_Default = 0x0,
    EHelmetStateMachine_EVA = 0x1,
    EHelmetStateMachine_Targeting = 0x2,
};


enum EHitmarkerPositionMethod {
    EHitmarkerPositionMethod_ScreenCenter = 0x0,
    EHitmarkerPositionMethod_CrosshairPosition = 0x1,
    EHitmarkerPositionMethod_CrosshairPositionSnapshot = 0x2,
    EHitmarkerPositionMethod_HitpositionWorld = 0x3,
    EHitmarkerPositionMethod_HitpositionScreen = 0x4,
};


enum EHoloFieldShape {
    EHoloFieldShape_HoloField_Mesh = 0x0,
    EHoloFieldShape_HoloField_Sphere = 0x1,
    EHoloFieldShape_HoloField_HardCodedSphere = 0x2,
    EHoloFieldShape_UNDEFINED = 0x3,
};


enum EHolographicVolumeType {
    EHolographicVolumeType_Sphere = 0x0,
    EHolographicVolumeType_Cube = 0x1,
    EHolographicVolumeType_UNDEFINED = 0x2,
};


enum EHoverPowerStage {
    EHoverPowerStage_PoweredOff = 0x0,
    EHoverPowerStage_PoweringOff = 0x1,
    EHoverPowerStage_PoweringOn = 0x2,
    EHoverPowerStage_PoweredOn = 0x3,
    EHoverPowerStage_UNDEFINED = 0x4,
};


enum EImpoundingTrigger {
    EImpoundingTrigger_IllegalParking = 0x0,
    EImpoundingTrigger_PadRamming = 0x1,
    EImpoundingTrigger_TrespassImpound = 0x2,
    EImpoundingTrigger_UNDEFINED = 0x3,
};


enum EInfractionTrigger {
    EInfractionTrigger_KillActor = 0x0,
    EInfractionTrigger_ForcedIntoDowned = 0x1,
    EInfractionTrigger_DownedDirectDamage = 0x2,
    EInfractionTrigger_Manslaughter = 0x3,
    EInfractionTrigger_DestroyVehicle = 0x4,
    EInfractionTrigger_DestroyEntity = 0x5,
    EInfractionTrigger_IllegalParking = 0x6,
    EInfractionTrigger_Interdiction = 0x7,
    EInfractionTrigger_FireWeapon = 0x8,
    EInfractionTrigger_RamVehicle = 0x9,
    EInfractionTrigger_RamActor = 0xa,
    EInfractionTrigger_PadRamming = 0xb,
    EInfractionTrigger_AssaultActor = 0xc,
    EInfractionTrigger_AssaultLawEnforcement = 0xd,
    EInfractionTrigger_DamageEntity = 0xe,
    EInfractionTrigger_GreenZonePropertyDamage = 0xf,
    EInfractionTrigger_KnockoutActor = 0x10,
    EInfractionTrigger_MeleeActor = 0x11,
    EInfractionTrigger_Arrest = 0x12,
    EInfractionTrigger_PrisonEscape = 0x13,
    EInfractionTrigger_PrisonSuicide = 0x14,
    EInfractionTrigger_KillPrisoner = 0x15,
    EInfractionTrigger_Trespassing = 0x16,
    EInfractionTrigger_State_Trespassing = 0x17,
    EInfractionTrigger_State_Intruding = 0x18,
    EInfractionTrigger_State_WeaponDrawn = 0x19,
    EInfractionTrigger_State_HoldingIllegalItem = 0x1a,
    EInfractionTrigger_State_IllegalVehicleTowing = 0x1b,
    EInfractionTrigger_LowBDL = 0x1c,
    EInfractionTrigger_HighBDL = 0x1d,
    EInfractionTrigger_HighBDLUnconscious = 0x1e,
    EInfractionTrigger_RestrictedAreaTrespass = 0x1f,
    EInfractionTrigger_RemoveItemFromCargoGrid = 0x20,
    EInfractionTrigger_UNDEFINED = 0x21,
};


enum EInputPromptBoundTo {
    EInputPromptBoundTo_ActorEyes = 0x0,
    EInputPromptBoundTo_EntityRoot = 0x1,
    EInputPromptBoundTo_TopBoundingBoxZSurface = 0x2,
    EInputPromptBoundTo_NearestBoundingBoxSurface = 0x3,
    EInputPromptBoundTo_NearestBoundingBoxIgnoreFurthestSurfaces = 0x4,
    EInputPromptBoundTo_InteractionPointFixedOffset = 0x5,
    EInputPromptBoundTo_Tmp_AngleConstraintForwardDirection = 0x6,
    EInputPromptBoundTo_UNDEFINED = 0x7,
};


enum EInputPromptMode {
    EInputPromptMode_SingleClick = 0x0,
    EInputPromptMode_MultiClick = 0x1,
    EInputPromptMode_Hold = 0x2,
    EInputPromptMode_UNDEFINED = 0x3,
};


enum EInteractionConditionTargetEntity {
    EInteractionConditionTargetEntity_Interactor = 0x0,
    EInteractionConditionTargetEntity_Interactable = 0x1,
    EInteractionConditionTargetEntity_InteractableItemOwner = 0x2,
    EInteractionConditionTargetEntity_UNDEFINED = 0x3,
};


enum EInteractionTriggerType {
    EInteractionTriggerType_Self = 0x0,
    EInteractionTriggerType_Root = 0x1,
    EInteractionTriggerType_Children = 0x2,
    EInteractionTriggerType_FullHierarchy = 0x3,
    EInteractionTriggerType_UNDEFINED = 0x4,
};


enum EItemActionEventType {
    EItemActionEventType_PowerOn = 0x0,
    EItemActionEventType_PowerOff = 0x1,
    EItemActionEventType_UNDEFINED = 0x2,
};


enum EItemFunctionalityCondition {
    EItemFunctionalityCondition_Damage = 0x0,
    EItemFunctionalityCondition_Degradation = 0x1,
    EItemFunctionalityCondition_Distortion = 0x2,
    EItemFunctionalityCondition_Heat = 0x3,
    EItemFunctionalityCondition_UNDEFINED = 0x4,
};


enum EItemPortAttachImplType {
    EItemPortAttachImplType_Bone = 0x0,
    EItemPortAttachImplType_Skin = 0x1,
    EItemPortAttachImplType_Face = 0x2,
    EItemPortAttachImplType_Entity = 0x3,
    EItemPortAttachImplType_StatObj = 0x4,
    EItemPortAttachImplType_Noattach = 0x5,
    EItemPortAttachImplType_Logical = 0x6,
    EItemPortAttachImplType_UNDEFINED = 0x7,
};


enum EItemPortAttachRotationLimitAxis {
    EItemPortAttachRotationLimitAxis_None = 0x0,
    EItemPortAttachRotationLimitAxis_XAxis = 0x1,
    EItemPortAttachRotationLimitAxis_YAxis = 0x2,
    EItemPortAttachRotationLimitAxis_ZAxis = 0x3,
    EItemPortAttachRotationLimitAxis_UNDEFINED = 0x4,
};


enum EItemPortConnectionType {
    EItemPortConnectionType_NoConnection = 0x0,
    EItemPortConnectionType_DefaultConnection = 0x1,
    EItemPortConnectionType_ExteriorConnection = 0x2,
};


enum EItemPortPhysicsGridBehavior {
    EItemPortPhysicsGridBehavior_Interior = 0x0,
    EItemPortPhysicsGridBehavior_Exterior = 0x1,
    EItemPortPhysicsGridBehavior_Both = 0x2,
    EItemPortPhysicsGridBehavior_UNDEFINED = 0x3,
};


enum EItemShopAdjustmentMode {
    EItemShopAdjustmentMode_NoAdjustment = 0x0,
    EItemShopAdjustmentMode_Override = 0x1,
    EItemShopAdjustmentMode_Offset = 0x2,
    EItemShopAdjustmentMode_Scale = 0x3,
    EItemShopAdjustmentMode_UNDEFINED = 0x4,
};


enum EItemShopReference {
    EItemShopReference_Item = 0x0,
    EItemShopReference_Rack = 0x1,
    EItemShopReference_InteractionPoint = 0x2,
    EItemShopReference_PlayerCamera = 0x3,
    EItemShopReference_PlayerActor = 0x4,
    EItemShopReference_Pedestal = 0x5,
    EItemShopReference_UNDEFINED = 0x6,
};


enum EItemStatType {
    EItemStatType_Flight_IFCS_BoostSpeedBackward = 0x0,
    EItemStatType_Flight_IFCS_BoostSpeedForward = 0x1,
    EItemStatType_Flight_IFCS_MaxSpeed = 0x2,
    EItemStatType_Flight_IFCS_ScmSpeed = 0x3,
    EItemStatType_Missile_ArmTime = 0x4,
    EItemStatType_Missile_LockRangeMax = 0x5,
    EItemStatType_Missile_LockRangeMin = 0x6,
    EItemStatType_Missile_LockTime = 0x7,
    EItemStatType_Missile_TopSpeed = 0x8,
    EItemStatType_Missile_TotalDamage = 0x9,
    EItemStatType_QDrive_Acceleration_Boost = 0xa,
    EItemStatType_QDrive_Acceleration_Linear = 0xb,
    EItemStatType_QDrive_Counteraction_Boost = 0xc,
    EItemStatType_QDrive_Counteraction_Linear = 0xd,
    EItemStatType_QDrive_IFCSHandoverDownTime_Boost = 0xe,
    EItemStatType_QDrive_IFCSHandoverDownTime_Linear = 0xf,
    EItemStatType_QDrive_MaxSpeed_Boost = 0x10,
    EItemStatType_QDrive_MaxSpeed_Linear = 0x11,
    EItemStatType_Shield_ChargeToFull = 0x12,
    EItemStatType_Shield_DamagedRegenDelay = 0x13,
    EItemStatType_Shield_Health = 0x14,
    EItemStatType_Shield_Regen = 0x15,
    EItemStatType_Vehicle_Mass = 0x16,
    EItemStatType_Vehicle_SizeCount_Countermeasures = 0x17,
    EItemStatType_Vehicle_SizeCount_Ordnance = 0x18,
    EItemStatType_Vehicle_SizeCount_Thrusters = 0x19,
    EItemStatType_Vehicle_SizeCount_Weapon = 0x1a,
    EItemStatType_Weapon_AmmoCapacity = 0x1b,
    EItemStatType_Weapon_FireRate = 0x1c,
    EItemStatType_Weapon_Velocity = 0x1d,
    EItemStatType_UNDEFINED = 0x1e,
};


enum EItemSubType {
    EItemSubType_unnamed = 0x0,
    EItemSubType_ADSComputer = 0x0,
    EItemSubType_AirlockPart = 0x1,
    EItemSubType_Ammo_1000mm = 0x2,
    EItemSubType_Ammo_20mm = 0x3,
    EItemSubType_Ammo_24mm = 0x4,
    EItemSubType_Ammo_25mm = 0x5,
    EItemSubType_Ammo_28mm = 0x6,
    EItemSubType_Ammo_30mm = 0x7,
    EItemSubType_Ammo_35mm = 0x8,
    EItemSubType_Ammo_40mm = 0x9,
    EItemSubType_Ammo_50mm = 0xa,
    EItemSubType_Ammo_60mm = 0xb,
    EItemSubType_Ammo_Rail_60mm = 0xc,
    EItemSubType_Ammo_Rail_80mm = 0xd,
    EItemSubType_AmmoBox_Ballistic_120rd_106mm_exp = 0xe,
    EItemSubType_Armor = 0xf,
    EItemSubType_Autopilot = 0x10,
    EItemSubType_Awesome = 0x11,
    EItemSubType_BallTurret = 0x12,
    EItemSubType_Bar = 0x13,
    EItemSubType_Barrel = 0x14,
    EItemSubType_BombRack = 0x15,
    EItemSubType_Bottle = 0x16,
    EItemSubType_BottomAttachment = 0x17,
    EItemSubType_BottomTurret = 0x18,
    EItemSubType_Box = 0x19,
    EItemSubType_Can = 0x1a,
    EItemSubType_CanardTurret = 0x1b,
    EItemSubType_Cargo = 0x1c,
    EItemSubType_Cockpit_Audio = 0x1d,
    EItemSubType_Constellation = 0x1e,
    EItemSubType_Consumable = 0x1f,
    EItemSubType_CountermeasureLauncher = 0x20,
    EItemSubType_CPU = 0x21,
    EItemSubType_Credit = 0x22,
    EItemSubType_Default = 0x23,
    EItemSubType_delta = 0x24,
    EItemSubType_DoorPart = 0x25,
    EItemSubType_External = 0x26,
    EItemSubType_EyeWare = 0x27,
    EItemSubType_Female = 0x28,
    EItemSubType_Female_Kid = 0x29,
    EItemSubType_FiringMechanism = 0x2a,
    EItemSubType_FixedThruster = 0x2b,
    EItemSubType_Flair_Hanging = 0x2c,
    EItemSubType_Flair_Wall_Picture = 0x2d,
    EItemSubType_Flair_Wall_Interaction = 0x2e,
    EItemSubType_Flair_Static = 0x2f,
    EItemSubType_Flair_Surface_Clutter = 0x30,
    EItemSubType_Flair_Surface_DisplayCase = 0x31,
    EItemSubType_Flair_Surface_HoloViewer = 0x32,
    EItemSubType_Flair_Floor_WallAligned = 0x33,
    EItemSubType_Flashlight = 0x34,
    EItemSubType_FlexThruster = 0x35,
    EItemSubType_Fluid = 0x36,
    EItemSubType_Fuel = 0x37,
    EItemSubType_Fuse = 0x38,
    EItemSubType_Gadget = 0x39,
    EItemSubType_ghostHornet = 0x3a,
    EItemSubType_Glass = 0x3b,
    EItemSubType_Grapple = 0x3c,
    EItemSubType_Grenade = 0x3d,
    EItemSubType_Gun = 0x3e,
    EItemSubType_GunTurret = 0x3f,
    EItemSubType_Hacking = 0x40,
    EItemSubType_Handheld = 0x41,
    EItemSubType_Harvestable = 0x42,
    EItemSubType_Hat = 0x43,
    EItemSubType_Helmet = 0x44,
    EItemSubType_Heavy = 0x45,
    EItemSubType_Idris = 0x46,
    EItemSubType_Idris_Turret = 0x47,
    EItemSubType_Interior_Audio = 0x48,
    EItemSubType_Inventory_Container = 0x49,
    EItemSubType_IronSight = 0x4a,
    EItemSubType_JetPack = 0x4b,
    EItemSubType_JointThruster = 0x4c,
    EItemSubType_JumpDrive = 0x4d,
    EItemSubType_Junk = 0x4e,
    EItemSubType_Knife = 0x4f,
    EItemSubType_Kopion = 0x50,
    EItemSubType_LandingSystem = 0x51,
    EItemSubType_Large = 0x52,
    EItemSubType_legs = 0x53,
    EItemSubType_Light = 0x54,
    EItemSubType_LightArmor = 0x55,
    EItemSubType_ln = 0x56,
    EItemSubType_LongRangeRadar = 0x57,
    EItemSubType_Magazine = 0x58,
    EItemSubType_Male = 0x59,
    EItemSubType_Male_Kid = 0x5a,
    EItemSubType_MannedTurret = 0x5b,
    EItemSubType_Marok = 0x5c,
    EItemSubType_Medical = 0x5d,
    EItemSubType_Medium = 0x5e,
    EItemSubType_MedPack = 0x5f,
    EItemSubType_MeleeMedium = 0x60,
    EItemSubType_MidRangeRadar = 0x61,
    EItemSubType_Mineable = 0x62,
    EItemSubType_Missile = 0x63,
    EItemSubType_MissileRack = 0x64,
    EItemSubType_MissileTurret = 0x65,
    EItemSubType_Mission = 0x66,
    EItemSubType_Motherboard = 0x67,
    EItemSubType_NoseMounted = 0x68,
    EItemSubType_Oxygen = 0x69,
    EItemSubType_OxygenCap = 0x6a,
    EItemSubType_PDCTurret = 0x6b,
    EItemSubType_Personal = 0x6c,
    EItemSubType_Pilot = 0x6d,
    EItemSubType_Plant = 0x6e,
    EItemSubType_Power = 0x6f,
    EItemSubType_PowerArray = 0x70,
    EItemSubType_Power_Idris = 0x71,
    EItemSubType_QDrive = 0x72,
    EItemSubType_QuantumFuel = 0x73,
    EItemSubType_QuasiGrazer = 0x74,
    EItemSubType_Radar = 0x75,
    EItemSubType_Retaliator = 0x76,
    EItemSubType_Retro = 0x77,
    EItemSubType_Rocket = 0x78,
    EItemSubType_Sachet = 0x79,
    EItemSubType_SalvageModifier_TractorBeam = 0x7a,
    EItemSubType_Scanner = 0x7b,
    EItemSubType_ShortRangeRadar = 0x7c,
    EItemSubType_SignatureReductor = 0x7d,
    EItemSubType_SkinTest = 0x7e,
    EItemSubType_Small = 0x7f,
    EItemSubType_SpaceMineRack = 0x80,
    EItemSubType_Stormwal = 0x81,
    EItemSubType_superHornet = 0x82,
    EItemSubType_SystemAccess = 0x83,
    EItemSubType_TargetingComputer = 0x84,
    EItemSubType_ThrusterPack = 0x85,
    EItemSubType_Tin = 0x86,
    EItemSubType_TopTurret = 0x87,
    EItemSubType_Torpedo = 0x88,
    EItemSubType_Utility = 0x89,
    EItemSubType_Unmanned = 0x8a,
    EItemSubType_Vanduul = 0x8b,
    EItemSubType_Xian = 0x8c,
    EItemSubType_Valakkar = 0x8d,
    EItemSubType_VectorThruster = 0x8e,
    EItemSubType_Vehicle_Boat = 0x8f,
    EItemSubType_Vehicle_GroundVehicle = 0x90,
    EItemSubType_Vehicle_Spaceship = 0x91,
    EItemSubType_Ventilation = 0x92,
    EItemSubType_Weapon = 0x93,
    EItemSubType_WeaponControl = 0x94,
    EItemSubType_UNDEFINED = 0x95,
};


enum EItemType {
    EItemType_AIModule = 0x0,
    EItemType_AirTrafficController = 0x1,
    EItemType_AmmoBox = 0x2,
    EItemType_AmmoCrate = 0x3,
    EItemType_Armor = 0x4,
    EItemType_Audio = 0x5,
    EItemType_Avionics = 0x6,
    EItemType_AttachedPart = 0x7,
    EItemType_Battery = 0x8,
    EItemType_BoatController = 0x9,
    EItemType_BodyArmor = 0xa,
    EItemType_Bomb = 0xb,
    EItemType_BombLauncher = 0xc,
    EItemType_Bottle = 0xd,
    EItemType_Button = 0xe,
    EItemType_CapacitorAssignmentController = 0xf,
    EItemType_Cargo = 0x10,
    EItemType_CargoGrid = 0x11,
    EItemType_Char_Accessory_Eyes = 0x12,
    EItemType_Char_Accessory_Head = 0x13,
    EItemType_Char_Armor_Arms = 0x14,
    EItemType_Char_Armor_Feet = 0x15,
    EItemType_Char_Armor_Helmet = 0x16,
    EItemType_Char_Armor_Legs = 0x17,
    EItemType_Char_Armor_Torso = 0x18,
    EItemType_Char_Armor_Undersuit = 0x19,
    EItemType_Char_Armor_Backpack = 0x1a,
    EItemType_Char_Body = 0x1b,
    EItemType_Char_Clothing_Feet = 0x1c,
    EItemType_Char_Clothing_Hands = 0x1d,
    EItemType_Char_Clothing_Hat = 0x1e,
    EItemType_Char_Clothing_Legs = 0x1f,
    EItemType_Char_Clothing_Torso_0 = 0x20,
    EItemType_Char_Clothing_Torso_1 = 0x21,
    EItemType_Char_Clothing_Torso_2 = 0x22,
    EItemType_Char_Clothing_Backpack = 0x23,
    EItemType_Char_Flair = 0x24,
    EItemType_Char_Hair_Color = 0x25,
    EItemType_Char_Head = 0x26,
    EItemType_Char_Head_Beard = 0x27,
    EItemType_Char_Head_Eyebrow = 0x28,
    EItemType_Char_Head_Eyelash = 0x29,
    EItemType_Char_Head_Eyes = 0x2a,
    EItemType_Char_Head_Hair = 0x2b,
    EItemType_Char_Head_Stubble = 0x2c,
    EItemType_Char_Head_Piercings = 0x2d,
    EItemType_Char_Lens = 0x2e,
    EItemType_Char_Skin_Color = 0x2f,
    EItemType_Cloth = 0x30,
    EItemType_CommsController = 0x31,
    EItemType_Container = 0x32,
    EItemType_ControlPanel = 0x33,
    EItemType_Cooler = 0x34,
    EItemType_CoolerController = 0x35,
    EItemType_Crafter = 0x36,
    EItemType_Creature_Body = 0x37,
    EItemType_Creature_Hair = 0x38,
    EItemType_Creature_Harvest = 0x39,
    EItemType_Debris = 0x3a,
    EItemType_Decal = 0x3b,
    EItemType_Display = 0x3c,
    EItemType_DockingAnimator = 0x3d,
    EItemType_DockingCollar = 0x3e,
    EItemType_DockingController = 0x3f,
    EItemType_Door = 0x40,
    EItemType_DoorController = 0x41,
    EItemType_Drink = 0x42,
    EItemType_Elevator = 0x43,
    EItemType_EMP = 0x44,
    EItemType_EnergyController = 0x45,
    EItemType_ExternalFuelTank = 0x46,
    EItemType_Flair_Cockpit = 0x47,
    EItemType_Flair_Floor = 0x48,
    EItemType_Flair_Surface = 0x49,
    EItemType_Flair_Wall = 0x4a,
    EItemType_FlightController = 0x4b,
    EItemType_Food = 0x4c,
    EItemType_FPS_AttachmentBarrel = 0x4d,
    EItemType_FPS_AttachmentBottom = 0x4e,
    EItemType_FPS_AttachmentOptics = 0x4f,
    EItemType_FPS_Consumable = 0x50,
    EItemType_FPS_Cooler = 0x51,
    EItemType_FPS_Deployable = 0x52,
    EItemType_FPS_Magazine = 0x53,
    EItemType_FPS_PowerGen = 0x54,
    EItemType_FPS_Radar = 0x55,
    EItemType_FPS_Scanner = 0x56,
    EItemType_FPS_Throwable = 0x57,
    EItemType_FPS_WeaponMelee = 0x58,
    EItemType_FPS_WeaponShouldered = 0x59,
    EItemType_FPS_WeaponSidearm = 0x5a,
    EItemType_FPS_WeaponStocked = 0x5b,
    EItemType_FPS_WeaponUtility = 0x5c,
    EItemType_FuelController = 0x5d,
    EItemType_FuelIntake = 0x5e,
    EItemType_FuelNozzle = 0x5f,
    EItemType_FuelTank = 0x60,
    EItemType_Gadget = 0x61,
    EItemType_GravityGenerator = 0x62,
    EItemType_Grenade = 0x63,
    EItemType_HangarExpansion = 0x64,
    EItemType_HangarStock = 0x65,
    EItemType_Interior = 0x66,
    EItemType_InventoryContainer = 0x67,
    EItemType_JumpDrive = 0x68,
    EItemType_LandingSystem = 0x69,
    EItemType_LandingGear = 0x6a,
    EItemType_LifeSupportGenerator = 0x6b,
    EItemType_LifeSupportTank = 0x6c,
    EItemType_LifeSupportVent = 0x6d,
    EItemType_Light = 0x6e,
    EItemType_LightController = 0x6f,
    EItemType_Lightgroup = 0x70,
    EItemType_LiveSupport = 0x71,
    EItemType_MaelstromPart = 0x72,
    EItemType_Magazine = 0x73,
    EItemType_MainEngine = 0x74,
    EItemType_MainThruster = 0x75,
    EItemType_ManneuverThruster = 0x76,
    EItemType_MiningController = 0x77,
    EItemType_MiningModifier = 0x78,
    EItemType_Misc = 0x79,
    EItemType_Missile = 0x7a,
    EItemType_MissileController = 0x7b,
    EItemType_MissileLauncher = 0x7c,
    EItemType_MobiGlas = 0x7d,
    EItemType_Module = 0x7e,
    EItemType_MultiLight = 0x7f,
    EItemType_NOITEM_Player = 0x80,
    EItemType_NOITEM_Vehicle = 0x81,
    EItemType_Paints = 0x82,
    EItemType_PersistentHab = 0x83,
    EItemType_PersonalInnerThought = 0x84,
    EItemType_Ping = 0x85,
    EItemType_Player = 0x86,
    EItemType_PowerPlant = 0x87,
    EItemType_QuantumDrive = 0x88,
    EItemType_QuantumInterdictionGenerator = 0x89,
    EItemType_QuantumFuelTank = 0x8a,
    EItemType_Radar = 0x8b,
    EItemType_Relay = 0x8c,
    EItemType_RemoteConnection = 0x8d,
    EItemType_RemovableChip = 0x8e,
    EItemType_RemovableBlade = 0x8f,
    EItemType_Room = 0x90,
    EItemType_SalvageController = 0x91,
    EItemType_SalvageFieldEmitter = 0x92,
    EItemType_SalvageFieldSupporter = 0x93,
    EItemType_SalvageFillerStation = 0x94,
    EItemType_SalvageHead = 0x95,
    EItemType_SalvageInternalStorage = 0x96,
    EItemType_SalvageModifier = 0x97,
    EItemType_Scanner = 0x98,
    EItemType_Seat = 0x99,
    EItemType_SeatAccess = 0x9a,
    EItemType_SeatDashboard = 0x9b,
    EItemType_SelfDestruct = 0x9c,
    EItemType_Sensor = 0x9d,
    EItemType_Shield = 0x9e,
    EItemType_ShieldController = 0x9f,
    EItemType_Ship = 0xa0,
    EItemType_ShopDisplay = 0xa1,
    EItemType_SpaceMine = 0xa2,
    EItemType_SpaceMineLauncher = 0xa3,
    EItemType_StatusScreen = 0xa4,
    EItemType_Suit = 0xa5,
    EItemType_TargetSelector = 0xa6,
    EItemType_ToolArm = 0xa7,
    EItemType_TowingBeam = 0xa8,
    EItemType_TractorBeam = 0xa9,
    EItemType_Transponder = 0xaa,
    EItemType_Turret = 0xab,
    EItemType_TurretBase = 0xac,
    EItemType_Usable = 0xad,
    EItemType_UtilityTurret = 0xae,
    EItemType_Visor = 0xaf,
    EItemType_WeaponAttachment = 0xb0,
    EItemType_WeaponController = 0xb1,
    EItemType_WeaponDefensive = 0xb2,
    EItemType_WeaponGun = 0xb3,
    EItemType_WeaponMining = 0xb4,
    EItemType_WeaponPersonal = 0xb5,
    EItemType_WeaponRegenPool = 0xb6,
    EItemType_WheeledController = 0xb7,
    EItemType_WeaponMount = 0xb8,
    EItemType_UNDEFINED = 0xb9,
};


enum ELandingAreaCanBeUsedBy {
    ELandingAreaCanBeUsedBy_None = 0x0,
    ELandingAreaCanBeUsedBy_AI = 0x1,
    ELandingAreaCanBeUsedBy_Player = 0x2,
    ELandingAreaCanBeUsedBy_All = 0x3,
    ELandingAreaCanBeUsedBy_UNDEFINED = 0x4,
};


enum ELawLicenseType {
    ELawLicenseType_IllegalGoodsLicense_ClassA = 0x0,
    ELawLicenseType_IllegalGoodsLicense_ClassB = 0x1,
    ELawLicenseType_IllegalGoodsLicense_ClassC = 0x2,
    ELawLicenseType_IllegalGoodsLicense_Prohibited = 0x3,
    ELawLicenseType_ArrestLicense = 0x4,
    ELawLicenseType_UNDEFINED = 0x5,
};


enum ELicenseType {
    ELicenseType_Gold = 0x0,
    ELicenseType_Platinum = 0x1,
    ELicenseType_GameMasterEventItem = 0x2,
    ELicenseType_LootableEventItem = 0x3,
    ELicenseType_UNDEFINED = 0x4,
};


enum ELightAffectsGI {
    ELightAffectsGI_On = 0x0,
    ELightAffectsGI_Off = 0x1,
    ELightAffectsGI_InheritAffectsObjects = 0x2,
    ELightAffectsGI_UNDEFINED = 0x3,
};


enum ELightEnabledWithGI {
    ELightEnabledWithGI_Always = 0x0,
    ELightEnabledWithGI_WithGI = 0x1,
    ELightEnabledWithGI_WithoutGI = 0x2,
    ELightEnabledWithGI_UNDEFINED = 0x3,
};


enum ELightImportance {
    ELightImportance_Decorative = 0x0,
    ELightImportance_Standard = 0x1,
    ELightImportance_Secondary = 0x2,
    ELightImportance_Key = 0x3,
    ELightImportance_Cinematic = 0x4,
    ELightImportance_UNDEFINED = 0x5,
};


enum ELightState {
    ELightState_Off = 0x0,
    ELightState_Default = 0x1,
    ELightState_Auxiliary = 0x2,
    ELightState_Emergency = 0x3,
    ELightState_Cinematic = 0x4,
    ELightState_UNDEFINED = 0x5,
};


enum ELightStateOverride {
    ELightStateOverride_Off = 0x0,
    ELightStateOverride_Default = 0x1,
    ELightStateOverride_Auxiliary = 0x2,
    ELightStateOverride_Emergency = 0x3,
    ELightStateOverride_Cinematic = 0x4,
    ELightStateOverride_DisableOverride = 0x5,
};


enum ELightType {
    ELightType_Omni = 0x0,
    ELightType_SoftOmni = 0x1,
    ELightType_Projector = 0x2,
    ELightType_Planar = 0x3,
    ELightType_Ambient = 0x4,
    ELightType_UNDEFINED = 0x5,
};


enum ELinkMode {
    ELinkMode_NoLink = 0x0,
    ELinkMode_FeetLink = 0x1,
    ELinkMode_UNDEFINED = 0x2,
};


enum ELoadingScreenType {
    ELoadingScreenType_StarCitizen = 0x0,
    ELoadingScreenType_ElectronicAccess = 0x1,
    ELoadingScreenType_Squadron42 = 0x2,
    ELoadingScreenType_Frontend = 0x3,
    ELoadingScreenType_UNDEFINED = 0x4,
};


enum ELoadoutGroup {
    ELoadoutGroup_Body = 0x0,
    ELoadoutGroup_SkinTone = 0x1,
    ELoadoutGroup_Head = 0x2,
    ELoadoutGroup_Brows = 0x3,
    ELoadoutGroup_Eyes = 0x4,
    ELoadoutGroup_Hair = 0x5,
    ELoadoutGroup_HairColour = 0x6,
    ELoadoutGroup_FacialHair = 0x7,
    ELoadoutGroup_FacialHairColour = 0x8,
    ELoadoutGroup_FacialAttachments1 = 0x9,
    ELoadoutGroup_FacialAttachments2 = 0xa,
    ELoadoutGroup_Piercings1 = 0xb,
    ELoadoutGroup_Piercings2 = 0xc,
    ELoadoutGroup_Tattoos = 0xd,
    ELoadoutGroup_TattooFace = 0xe,
    ELoadoutGroup_TattooBody = 0xf,
    ELoadoutGroup_Undersuit = 0x10,
    ELoadoutGroup_Helmet = 0x11,
    ELoadoutGroup_Torso = 0x12,
    ELoadoutGroup_Torso2 = 0x13,
    ELoadoutGroup_Torso3 = 0x14,
    ELoadoutGroup_TorsoAttachments = 0x15,
    ELoadoutGroup_Outfit = 0x16,
    ELoadoutGroup_Outfit2 = 0x17,
    ELoadoutGroup_Outfit3 = 0x18,
    ELoadoutGroup_Outfit4 = 0x19,
    ELoadoutGroup_Arm = 0x1a,
    ELoadoutGroup_Leg = 0x1b,
    ELoadoutGroup_Feet = 0x1c,
    ELoadoutGroup_PrimaryWeapon = 0x1d,
    ELoadoutGroup_PrimaryOptics = 0x1e,
    ELoadoutGroup_UnderBarrelAttachment = 0x1f,
    ELoadoutGroup_BarrelAttachment = 0x20,
    ELoadoutGroup_PrimaryAttachments = 0x21,
    ELoadoutGroup_SecondaryWeapon = 0x22,
    ELoadoutGroup_SecondaryOptics = 0x23,
    ELoadoutGroup_SecondarAttachments = 0x24,
    ELoadoutGroup_MeleeWeapon = 0x25,
    ELoadoutGroup_Grenades = 0x26,
    ELoadoutGroup_MedicalSupplies = 0x27,
    ELoadoutGroup_Item = 0x28,
    ELoadoutGroup_Mobiglas = 0x29,
    ELoadoutGroup_Utility1 = 0x2a,
    ELoadoutGroup_Utility2 = 0x2b,
    ELoadoutGroup_UNDEFINED = 0x2c,
};


enum ELocationTypeLevel {
    ELocationTypeLevel_Universe = 0x0,
    ELocationTypeLevel_SolarSystem = 0x1,
    ELocationTypeLevel_LocalSystem = 0x2,
    ELocationTypeLevel_PlanetOrMoon = 0x3,
    ELocationTypeLevel_RegionOrLZ = 0x4,
    ELocationTypeLevel_POIOrCluster = 0x5,
    ELocationTypeLevel_UNDEFINED = 0x6,
};


enum ELootFullnessMode {
    ELootFullnessMode_stopAfterExceed = 0x0,
    ELootFullnessMode_preventExceed = 0x1,
};


enum ELootPruningLevel {
    ELootPruningLevel_none = 0x0,
    ELootPruningLevel_containerSize = 0x1,
    ELootPruningLevel_fullnessTarget = 0x2,
    ELootPruningLevel_dynamic = 0x3,
};


enum ELootingDefaultInteractions {
    ELootingDefaultInteractions_OpenInventoryUI = 0x0,
    ELootingDefaultInteractions_OpenLootingUI = 0x1,
    ELootingDefaultInteractions_UNDEFINED = 0x2,
};


enum EMapId {
    EMapId_EA_AstorsClearing = 0x0,
    EMapId_EA_BloodshotRidge = 0x1,
    EMapId_EA_BrokenMoon = 0x2,
    EMapId_EA_CaplanCircuit = 0x3,
    EMapId_EA_ClioIslands = 0x4,
    EMapId_EA_Crossroads = 0x5,
    EMapId_EA_CryAstro_DC3412 = 0x6,
    EMapId_EA_Daymar = 0x7,
    EMapId_EA_DaymarDunes = 0x8,
    EMapId_EA_Demien = 0x9,
    EMapId_EA_DemienComms = 0xa,
    EMapId_EA_DogfightTest = 0xb,
    EMapId_EA_DunlowDerby = 0xc,
    EMapId_EA_DyingStar = 0xd,
    EMapId_EA_Echo11 = 0xe,
    EMapId_EA_EuterpeIcebreaker = 0xf,
    EMapId_EA_EZHab = 0x10,
    EMapId_EA_Gundo = 0x11,
    EMapId_EA_HurstonGroundArena = 0x12,
    EMapId_EA_JerichoStation = 0x13,
    EMapId_EA_Kareah = 0x14,
    EMapId_EA_LorvilleOutskirts = 0x15,
    EMapId_EA_MagdaGroundArena = 0x16,
    EMapId_EA_MakersPoint = 0x17,
    EMapId_EA_MicroTechRiver = 0x18,
    EMapId_EA_MinersLament = 0x19,
    EMapId_EA_Ministry = 0x1a,
    EMapId_EA_NHS_Arena = 0x1b,
    EMapId_EA_NHS_DeffordLink = 0x1c,
    EMapId_EA_NHS_HalloranCircuit = 0x1d,
    EMapId_EA_NHS_OldVanderval = 0x1e,
    EMapId_EA_NHS_Rikkord = 0x1f,
    EMapId_EA_NHS_Wetlands = 0x20,
    EMapId_EA_Pyro2 = 0x21,
    EMapId_EA_PyroJump = 0x22,
    EMapId_EA_ScenarioTwo = 0x23,
    EMapId_EA_TheGoodDr = 0x24,
    EMapId_EA_TheSkyScraper = 0x25,
    EMapId_EA_TheSnakePit = 0x26,
    EMapId_EA_TheSnakePit_Reverse = 0x27,
    EMapId_EA_RayariStation = 0x28,
    EMapId_EA_YadarValley = 0x29,
    EMapId_EA_YelaGroundArena = 0x2a,
    EMapId_UNDEFINED = 0x2b,
};


enum EMasterMode {
    EMasterMode_Invalid = 0x0,
    EMasterMode_Navigation = 0x1,
    EMasterMode_SCM = 0x2,
    EMasterMode_UNDEFINED = 0x3,
};


enum EMatchCycleType {
    EMatchCycleType_None = 0x0,
    EMatchCycleType_NewServer = 0x1,
    EMatchCycleType_RestartLevel = 0x2,
};


enum EMatchNetworkType {
    EMatchNetworkType_Offline = 0x1,
    EMatchNetworkType_Online = 0x2,
    EMatchNetworkType_Custom = 0x4,
};


enum EMeshChunks {
    EMeshChunks_vneck_zone = 0x0,
    EMeshChunks_torso01_zone = 0x1,
    EMeshChunks_torso02_zone = 0x2,
    EMeshChunks_torso03_zone = 0x3,
    EMeshChunks_torso04_zone = 0x4,
    EMeshChunks_head_zone = 0x5,
    EMeshChunks_hips_zone = 0x6,
    EMeshChunks_underwear_top_zone = 0x7,
    EMeshChunks_underwear_zone = 0x8,
    EMeshChunks_pants_acc_zone = 0x9,
    EMeshChunks_shirt_acc_zone = 0xa,
    EMeshChunks_l_shoulder_zone = 0xb,
    EMeshChunks_l_arm01_zone = 0xc,
    EMeshChunks_l_arm02_zone = 0xd,
    EMeshChunks_l_arm03_zone = 0xe,
    EMeshChunks_l_arm04_zone = 0xf,
    EMeshChunks_l_arm05_zone = 0x10,
    EMeshChunks_l_arm05_body_zone = 0x11,
    EMeshChunks_l_arm05_torso0_zone = 0x12,
    EMeshChunks_l_hand_zone = 0x13,
    EMeshChunks_l_leg01_zone = 0x14,
    EMeshChunks_l_leg02_zone = 0x15,
    EMeshChunks_l_leg03_zone = 0x16,
    EMeshChunks_l_leg04_zone = 0x17,
    EMeshChunks_l_foot_zone = 0x18,
    EMeshChunks_l_eye_zone = 0x19,
    EMeshChunks_r_shoulder_zone = 0x1a,
    EMeshChunks_r_arm01_zone = 0x1b,
    EMeshChunks_r_arm02_zone = 0x1c,
    EMeshChunks_r_arm03_zone = 0x1d,
    EMeshChunks_r_arm04_zone = 0x1e,
    EMeshChunks_r_arm05_zone = 0x1f,
    EMeshChunks_r_arm05_body_zone = 0x20,
    EMeshChunks_r_arm05_torso0_zone = 0x21,
    EMeshChunks_r_hand_zone = 0x22,
    EMeshChunks_r_leg01_zone = 0x23,
    EMeshChunks_r_leg02_zone = 0x24,
    EMeshChunks_r_leg03_zone = 0x25,
    EMeshChunks_r_leg04_zone = 0x26,
    EMeshChunks_r_foot_zone = 0x27,
    EMeshChunks_r_eye_zone = 0x28,
    EMeshChunks_omega_core_zone = 0x29,
    EMeshChunks_omega_arms_zone = 0x2a,
    EMeshChunks_omega_legs_zone = 0x2b,
    EMeshChunks_theta_head_zone = 0x2c,
    EMeshChunks_theta_core_zone = 0x2d,
    EMeshChunks_theta_arms_zone = 0x2e,
    EMeshChunks_theta_legs_zone = 0x2f,
    EMeshChunks_theta_l_arm_zone = 0x30,
    EMeshChunks_theta_r_arm_zone = 0x31,
    EMeshChunks_theta_l_leg_zone = 0x32,
    EMeshChunks_theta_r_leg_zone = 0x33,
    EMeshChunks_pcg_eyebrows = 0x34,
    EMeshChunks_pcg_r_ear = 0x35,
    EMeshChunks_pcg_l_ear = 0x36,
    EMeshChunks_pcg_nose = 0x37,
    EMeshChunks_pcg_mouth = 0x38,
    EMeshChunks_UNDEFINED = 0x39,
};


enum EMisfireType {
    EMisfireType_None = 0x0,
    EMisfireType_Minor = 0x1,
    EMisfireType_Major = 0x2,
    EMisfireType_Critical = 0x3,
    EMisfireType_UNDEFINED = 0x4,
};


enum EMissionObjectiveCategory {
    EMissionObjectiveCategory_Primary = 0x0,
    EMissionObjectiveCategory_Optional = 0x1,
    EMissionObjectiveCategory_UNDEFINED = 0x2,
};


enum EMissionResult {
    EMissionResult_Completed = 0x0,
    EMissionResult_InProgress = 0x1,
    EMissionResult_Failed = 0x2,
    EMissionResult_Abandoned = 0x3,
    EMissionResult_Withdrawn = 0x4,
    EMissionResult_UNDEFINED = 0x5,
};


enum EMobiGlasPersonalStatusSkillsDisplayType {
    EMobiGlasPersonalStatusSkillsDisplayType_None = 0x0,
    EMobiGlasPersonalStatusSkillsDisplayType_Attribute = 0x1,
    EMobiGlasPersonalStatusSkillsDisplayType_Technique = 0x2,
    EMobiGlasPersonalStatusSkillsDisplayType_UNDEFINED = 0x3,
};


enum EModifierSignatureType {
    EModifierSignatureType_GainPercentage = 0x0,
    EModifierSignatureType_LossPercentage = 0x1,
    EModifierSignatureType_UNDEFINED = 0x2,
};


enum EModuleType {
    EModuleType_PersistentUniverse = 0x0,
    EModuleType_ElectronicAccess = 0x1,
    EModuleType_Squadron42 = 0x2,
    EModuleType_Frontend = 0x3,
    EModuleType_Undefined = 0x4,
};


enum EMotionProcessorLimiterType {
    EMotionProcessorLimiterType_NormalizedUniform = 0x0,
    EMotionProcessorLimiterType_NormalizedUniformWithMaxRadius = 0x1,
    EMotionProcessorLimiterType_Ellipsoid = 0x2,
    EMotionProcessorLimiterType_UNDEFINED = 0x3,
};


enum EMovementProcessor {
    EMovementProcessor_Basic = 0x0,
    EMovementProcessor_Locomotion = 0x1,
    EMovementProcessor_SubmergedCreature = 0x2,
};


enum EMyEnum {
    EMyEnum_First = 0x0,
    EMyEnum_Second = 0x1,
    EMyEnum_Third = 0x2,
};


enum ENavPointType {
    ENavPointType_General = 0x0,
    ENavPointType_QTTracePoint = 0x1,
};


enum ENavigationAgentType {
    ENavigationAgentType_MediumSizedCharacters = 0x0,
    ENavigationAgentType_LargeSizedCharacters = 0x1,
    ENavigationAgentType_VehicleMedium = 0x2,
    ENavigationAgentType_UNDEFINED = 0x6,
};


enum ENavigationLinkLinkingType {
    ENavigationLinkLinkingType_LinksInsideSameZone = 0x0,
    ENavigationLinkLinkingType_LinksInsideSameExternalZone = 0x1,
    ENavigationLinkLinkingType_LinksToExternalZone = 0x2,
    ENavigationLinkLinkingType_LinksFromExternalZone = 0x3,
    ENavigationLinkLinkingType_UNDEFINED = 0x4,
};


enum EObjectDataBankEntryTrackerType {
    EObjectDataBankEntryTrackerType_None = 0x0,
    EObjectDataBankEntryTrackerType_LandingArea = 0x1,
    EObjectDataBankEntryTrackerType_FPSMineable = 0x2,
    EObjectDataBankEntryTrackerType_Mineable = 0x3,
    EObjectDataBankEntryTrackerType_Missile = 0x4,
    EObjectDataBankEntryTrackerType_Mission = 0x5,
    EObjectDataBankEntryTrackerType_NavPoint = 0x6,
    EObjectDataBankEntryTrackerType_PartyMember = 0x7,
    EObjectDataBankEntryTrackerType_QuantumTravel = 0x8,
    EObjectDataBankEntryTrackerType_RaceCheckpoint = 0x9,
    EObjectDataBankEntryTrackerType_Transponder = 0xa,
    EObjectDataBankEntryTrackerType_Vehicle = 0xb,
    EObjectDataBankEntryTrackerType_Turret = 0xc,
    EObjectDataBankEntryTrackerType_Debris = 0xd,
    EObjectDataBankEntryTrackerType_Actor = 0xe,
    EObjectDataBankEntryTrackerType_Unknown = 0xf,
    EObjectDataBankEntryTrackerType_BlobContact = 0x10,
    EObjectDataBankEntryTrackerType_InteractionPoint = 0x11,
    EObjectDataBankEntryTrackerType_Interactable = 0x12,
    EObjectDataBankEntryTrackerType_Hint = 0x13,
    EObjectDataBankEntryTrackerType_Explosive = 0x14,
};


enum EObjectiveInteractionType {
    EObjectiveInteractionType_Defend = 0x0,
    EObjectiveInteractionType_Capture = 0x1,
    EObjectiveInteractionType_Damage = 0x2,
    EObjectiveInteractionType_Overload = 0x3,
    EObjectiveInteractionType_UNDEFINED = 0x4,
};


enum EObjectiveTokenState {
    EObjectiveTokenState_NotStarted = 0x0,
    EObjectiveTokenState_Active = 0x1,
    EObjectiveTokenState_Completed = 0x2,
    EObjectiveTokenState_Failed = 0x3,
    EObjectiveTokenState_Abandoned = 0x4,
    EObjectiveTokenState_UNDEFINED = 0x5,
};


enum EOperatorMode {
    EOperatorMode_None = 0x0,
    EOperatorMode_Inactive = 0x1,
    EOperatorMode_Flight = 0x2,
    EOperatorMode_Combat = 0x3,
    EOperatorMode_Turret = 0x4,
    EOperatorMode_Missile = 0x5,
    EOperatorMode_Scanning = 0x6,
    EOperatorMode_Mining = 0x7,
    EOperatorMode_QuantumNavigation = 0x8,
    EOperatorMode_Refuel = 0x9,
    EOperatorMode_AirTrafficController = 0xa,
    EOperatorMode_Salvage = 0xb,
    EOperatorMode_UNDEFINED = 0xc,
};


enum EOrdnanceRelativeDetachType {
    EOrdnanceRelativeDetachType_Ordnance = 0x0,
    EOrdnanceRelativeDetachType_Weapon = 0x1,
    EOrdnanceRelativeDetachType_WeaponHost = 0x2,
    EOrdnanceRelativeDetachType_UNDEFINED = 0x3,
};


enum EOutfitPieceType {
    EOutfitPieceType_Head = 0x0,
    EOutfitPieceType_Torso = 0x1,
    EOutfitPieceType_Arms = 0x2,
    EOutfitPieceType_Legs = 0x3,
    EOutfitPieceType_Undersuit = 0x4,
};


enum EParticleInputs {
    EParticleInputs_Count = 0x0,
    EParticleInputs_Size = 0x1,
    EParticleInputs_Speed = 0x2,
    EParticleInputs_Time = 0x3,
    EParticleInputs_Pulse = 0x4,
    EParticleInputs_Strength = 0x5,
    EParticleInputs_Scale = 0x6,
    EParticleInputs_Diffuse = 0x7,
    EParticleInputs_Radius = 0x8,
    EParticleInputs_UNDEFINED = 0x9,
};


enum EParticleModifierSource {
    EParticleModifierSource_None = 0x0,
    EParticleModifierSource_Power = 0x1,
    EParticleModifierSource_Heat = 0x2,
    EParticleModifierSource_BarrelAttachment = 0x3,
    EParticleModifierSource_MiningLaserThrottle = 0x4,
    EParticleModifierSource_WeaponState = 0x5,
    EParticleModifierSource_SalvageRepair = 0x6,
    EParticleModifierSource_Wear = 0x7,
};


enum EParticleProperties {
    EParticleProperties_strength = 0x0,
    EParticleProperties_alpha = 0x1,
    EParticleProperties_color = 0x2,
    EParticleProperties_count = 0x3,
    EParticleProperties_size = 0x4,
    EParticleProperties_speed = 0x5,
    EParticleProperties_time = 0x6,
    EParticleProperties_pulse = 0x7,
    EParticleProperties_radius = 0x8,
    EParticleProperties_distribution = 0x9,
    EParticleProperties_glowScale = 0xa,
    EParticleProperties_emissionSize = 0xb,
    EParticleProperties_UNDEFINED = 0xc,
};


enum EPerceptionSenses {
    EPerceptionSenses_Vision = 0x0,
    EPerceptionSenses_Hearing = 0x1,
    EPerceptionSenses_Radar = 0x2,
    EPerceptionSenses_UNDEFINED = 0x3,
};


enum EPerceptionTypes {
    EPerceptionTypes_unnamed = 0x0,
    EPerceptionTypes_Explosive = 0x0,
    EPerceptionTypes_Agent = 0x1,
    EPerceptionTypes_Player = 0x2,
    EPerceptionTypes_Interesting = 0x3,
    EPerceptionTypes_SearchSpots = 0x4,
    EPerceptionTypes_SabotageEquipment = 0x5,
    EPerceptionTypes_Vehicle = 0x6,
    EPerceptionTypes_Spaceship = 0x7,
    EPerceptionTypes_Missile = 0x8,
    EPerceptionTypes_Torpedo = 0x9,
    EPerceptionTypes_FiringRangeTarget = 0xa,
    EPerceptionTypes_LargeObject = 0xb,
    EPerceptionTypes_Turret = 0xc,
    EPerceptionTypes_ExplosiveDestructible = 0xd,
    EPerceptionTypes_UNDEFINED = 0xe,
};


enum EPersistentDataPolicy {
    EPersistentDataPolicy_Disabled = 0x0,
    EPersistentDataPolicy_ReadOnly = 0x1,
    EPersistentDataPolicy_WriteFull = 0x2,
};


enum EPhysFlag {
    EPhysFlag_none = 0x0,
    EPhysFlag_geom_colltype_default = 0x1,
    EPhysFlag_geom_colltype_player = 0x2,
    EPhysFlag_geom_colltype_explosion = 0x3,
    EPhysFlag_geom_colltype_vehicle = 0x4,
    EPhysFlag_geom_colltype_foliage = 0x5,
    EPhysFlag_geom_colltype_debris = 0x6,
    EPhysFlag_geom_colltype_shield = 0x7,
    EPhysFlag_geom_colltype_terrain_mesh = 0x8,
    EPhysFlag_geom_colltype_foliage_proxy = 0x9,
    EPhysFlag_geom_colltype_obstruct = 0xa,
    EPhysFlag_geom_colltype_ray = 0xb,
    EPhysFlag_geom_car_wheel = 0xc,
    EPhysFlag_geom_interior = 0xd,
    EPhysFlag_geom_exterior = 0xe,
    EPhysFlag_geom_interior_grid_part = 0xf,
    EPhysFlag_geom_voxelization_proxy = 0x10,
    EPhysFlag_geom_cluster_mesh = 0x11,
    EPhysFlag_geom_interaction = 0x12,
    EPhysFlag_geom_disabled = 0x13,
    EPhysFlag_geom_floats = 0x14,
    EPhysFlag_geom_constraint_on_break = 0x15,
    EPhysFlag_geom_structure_changes = 0x16,
    EPhysFlag_geom_can_modify = 0x17,
    EPhysFlag_geom_squashy = 0x18,
    EPhysFlag_geom_log_interactions = 0x19,
    EPhysFlag_geom_monitor_contacts = 0x1a,
    EPhysFlag_geom_manually_breakable = 0x1b,
    EPhysFlag_geom_no_coll_response = 0x1c,
    EPhysFlag_geom_mat_substitutor = 0x1d,
    EPhysFlag_geom_break_approximation = 0x1e,
    EPhysFlag_geom_no_particle_impulse = 0x1f,
    EPhysFlag_geom_destroyed_on_break = 0x20,
    EPhysFlag_geom_sdf_proxy = 0x21,
    EPhysFlag_geom_removed = 0x22,
    EPhysFlag_geom_invalid = 0x23,
    EPhysFlag_geom_unpushable = 0x24,
    EPhysFlag_geom_foot_coll = 0x25,
    EPhysFlag_geom_kinematic_part = 0x26,
    EPhysFlag_geom_stairs_ramps = 0x27,
    EPhysFlag_UNDEFINED = 0x28,
};


enum EPipeClass {
    EPipeClass_Power = 0x0,
    EPipeClass_Heat = 0x1,
    EPipeClass_Avionics = 0x2,
    EPipeClass_Fuel = 0x3,
    EPipeClass_QuantumFuel = 0x4,
    EPipeClass_Shield = 0x5,
    EPipeClass_Decibel = 0x6,
    EPipeClass_Charge = 0x7,
    EPipeClass_Health = 0x8,
    EPipeClass_Input = 0x9,
    EPipeClass_Output = 0xa,
    EPipeClass_Atmosphere = 0xb,
    EPipeClass_WeaponRegen = 0xc,
    EPipeClass_WeaponAmmoLoad = 0xd,
    EPipeClass_UNDEFINED = 0xe,
};


enum EPipeConnectionProcess {
    EPipeConnectionProcess_Consumer = 0x0,
    EPipeConnectionProcess_Producer = 0x1,
    EPipeConnectionProcess_UNDEFINED = 0x2,
};


enum EPipePriorityGroup {
    EPipePriorityGroup_Weapon = 0x0,
    EPipePriorityGroup_Shield = 0x1,
    EPipePriorityGroup_Thruster = 0x2,
    EPipePriorityGroup_Other = 0x3,
    EPipePriorityGroup_UNDEFINED = 0x4,
};


enum EPlayerActionAnimType {
    EPlayerActionAnimType_NoAnim = 0x0,
    EPlayerActionAnimType_OneShot = 0x1,
    EPlayerActionAnimType_Continuous = 0x2,
    EPlayerActionAnimType_UNDEFINED = 0x3,
};


enum EPlayerAnimatedInteractionType {
    EPlayerAnimatedInteractionType_Instantaneous = 0x0,
    EPlayerAnimatedInteractionType_Reactive = 0x1,
    EPlayerAnimatedInteractionType_Bluetooth = 0x2,
};


enum EPlayerAttachmentSlots {
    EPlayerAttachmentSlots_Barrel = 0x0,
    EPlayerAttachmentSlots_IronSight = 0x1,
    EPlayerAttachmentSlots_UnderBarrel = 0x2,
};


enum EPlayerFormationRadius {
    EPlayerFormationRadius_Target = 0x0,
    EPlayerFormationRadius_Inner = 0x1,
    EPlayerFormationRadius_Outer = 0x2,
    EPlayerFormationRadius_Break = 0x3,
    EPlayerFormationRadius_UNDEFINED = 0x4,
};


enum EPlayerGroupType {
    EPlayerGroupType_Invalid = 0x0,
    EPlayerGroupType_System = 0x1,
    EPlayerGroupType_Party = 0x2,
    EPlayerGroupType_Group = 0x3,
    EPlayerGroupType_Server = 0x4,
    EPlayerGroupType_DirectMessage = 0x5,
    EPlayerGroupType_GameEntity = 0x6,
};


enum EPlayerItemSlots {
    EPlayerItemSlots_ArmorArms = 0x0,
    EPlayerItemSlots_ArmorHelmet = 0x1,
    EPlayerItemSlots_ArmorLegs = 0x2,
    EPlayerItemSlots_ArmorTorso = 0x3,
    EPlayerItemSlots_ArmorUndersuit = 0x4,
    EPlayerItemSlots_CharAccessoryEyes = 0x12,
    EPlayerItemSlots_CharAccessoryHead = 0x13,
    EPlayerItemSlots_CharBody = 0x14,
    EPlayerItemSlots_CharFlair = 0x15,
    EPlayerItemSlots_CharHead = 0x16,
    EPlayerItemSlots_CharHeadBeard = 0x17,
    EPlayerItemSlots_CharHeadEyebrow = 0x18,
    EPlayerItemSlots_CharHeadEyelash = 0x19,
    EPlayerItemSlots_CharHeadEyes = 0x1a,
    EPlayerItemSlots_CharHeadHair = 0x1b,
    EPlayerItemSlots_Grenade = 0x1c,
    EPlayerItemSlots_Medpen = 0x1d,
    EPlayerItemSlots_Radar = 0x1e,
    EPlayerItemSlots_WeaponPrimary = 0x1f,
    EPlayerItemSlots_WeaponSecondary = 0x20,
    EPlayerItemSlots_WeaponSidearm = 0x21,
    EPlayerItemSlots_WeaponMelee = 0x22,
    EPlayerItemSlots_Utility = 0x23,
    EPlayerItemSlots_Visor = 0x24,
};


enum EPlayerStateActions {
    EPlayerStateActions_None = 0x0,
    EPlayerStateActions_Carry = 0x1,
    EPlayerStateActions_Consume = 0x2,
    EPlayerStateActions_Drop = 0x3,
    EPlayerStateActions_Equip = 0x4,
    EPlayerStateActions_FinishConsume = 0x5,
    EPlayerStateActions_FirstSelect = 0x6,
    EPlayerStateActions_Inspect = 0x8,
    EPlayerStateActions_Interact = 0x9,
    EPlayerStateActions_OffHandStore = 0xb,
    EPlayerStateActions_OffHandStow = 0xc,
    EPlayerStateActions_OpenMobiGlas = 0xe,
    EPlayerStateActions_Place = 0xf,
    EPlayerStateActions_PlaceReady = 0x10,
    EPlayerStateActions_Stow = 0x12,
    EPlayerStateActions_Store = 0x13,
    EPlayerStateActions_SwapAttachments = 0x14,
    EPlayerStateActions_ThrowReady = 0x17,
    EPlayerStateActions_ThrowV2 = 0x18,
    EPlayerStateActions_Unequip = 0x19,
    EPlayerStateActions_UnprimeItem = 0x1b,
    EPlayerStateActions_Unstow = 0x1c,
    EPlayerStateActions_VisorWipe = 0x1d,
    EPlayerStateActions_SelfTarget = 0x1e,
};


enum EPowerSourceState {
    EPowerSourceState_None = 0x0,
    EPowerSourceState_Online = 0x1,
    EPowerSourceState_Offline = 0x2,
    EPowerSourceState_Inoperable = 0x3,
};


enum EPresetFStopValues {
    EPresetFStopValues_FStop_0_1 = 0x0,
    EPresetFStopValues_FStop_0_5 = 0x1,
    EPresetFStopValues_FStop_1 = 0x2,
    EPresetFStopValues_FStop_2 = 0x3,
    EPresetFStopValues_FStop_3 = 0x4,
    EPresetFStopValues_FStop_4 = 0x5,
    EPresetFStopValues_FStop_5 = 0x6,
    EPresetFStopValues_FStop_6 = 0x7,
    EPresetFStopValues_FStop_8 = 0x8,
    EPresetFStopValues_FStop_14 = 0x9,
    EPresetFStopValues_FStop_22 = 0xa,
    EPresetFStopValues_FStop_Disabled = 0xb,
};


enum EPresetLensSizes {
    EPresetLensSizes_LensSize_8mm = 0x0,
    EPresetLensSizes_LensSize_9mm46 = 0x1,
    EPresetLensSizes_LensSize_12mm = 0x2,
    EPresetLensSizes_LensSize_14mm = 0x3,
    EPresetLensSizes_LensSize_16mm = 0x4,
    EPresetLensSizes_LensSize_18mm = 0x5,
    EPresetLensSizes_LensSize_21mm = 0x6,
    EPresetLensSizes_LensSize_25mm = 0x7,
    EPresetLensSizes_LensSize_27mm = 0x8,
    EPresetLensSizes_LensSize_32mm = 0x9,
    EPresetLensSizes_LensSize_35mm = 0xa,
    EPresetLensSizes_LensSize_40mm = 0xb,
    EPresetLensSizes_LensSize_50mm = 0xc,
    EPresetLensSizes_LensSize_65mm = 0xd,
    EPresetLensSizes_LensSize_75mm = 0xe,
};


enum EProcLeanPoseType {
    EProcLeanPoseType_Standing = 0x0,
    EProcLeanPoseType_Sitting = 0x1,
    EProcLeanPoseType_Crouching = 0x2,
};


enum EProjectedHudAlignmentType {
    EProjectedHudAlignmentType_NoRotation = 0x0,
    EProjectedHudAlignmentType_AngledToPitchSource = 0x1,
    EProjectedHudAlignmentType_AngledToView = 0x2,
    EProjectedHudAlignmentType_AngledToYawLineOrigin = 0x3,
    EProjectedHudAlignmentType_UNDEFINED = 0x4,
};


enum EProjectedHudPositionType {
    EProjectedHudPositionType_OnAngle = 0x0,
    EProjectedHudPositionType_OnYawLine = 0x1,
    EProjectedHudPositionType_UNDEFINED = 0x2,
};


enum EProjectedHudYawLineAnchorType {
    EProjectedHudYawLineAnchorType_InForward = 0x0,
    EProjectedHudYawLineAnchorType_InWorld = 0x1,
    EProjectedHudYawLineAnchorType_UNDEFINED = 0x2,
};


enum EProjectileType {
    EProjectileType_Primary = 0x0,
    EProjectileType_Secondary = 0x1,
};


enum EProjectionSelection1 {
    EProjectionSelection1_PS1_NoProjection = 0x0,
    EProjectionSelection1_PS1_ShortarcRotation = 0x1,
    EProjectionSelection1_UNDEFINED = 0x2,
};


enum EProjectionSelection2 {
    EProjectionSelection2_PS2_NoProjection = 0x0,
    EProjectionSelection2_PS2_ShortarcRotation = 0x1,
    EProjectionSelection2_PS2_DirectedRotation = 0x2,
    EProjectionSelection2_UNDEFINED = 0x3,
};


enum EProjectionSelection3 {
    EProjectionSelection3_PS3_NoProjection = 0x0,
    EProjectionSelection3_PS3_ShortvecTranslation = 0x1,
    EProjectionSelection3_UNDEFINED = 0x2,
};


enum EProjectionSelection4 {
    EProjectionSelection4_PS4_NoProjection = 0x0,
    EProjectionSelection4_PS4_ShortvecTranslation = 0x1,
    EProjectionSelection4_PS4_DirectedTranslation = 0x2,
    EProjectionSelection4_UNDEFINED = 0x3,
};


enum EQedVisualGraphState {
    EQedVisualGraphState_Idle = 0x0,
    EQedVisualGraphState_Charging = 0x1,
    EQedVisualGraphState_Discharging = 0x2,
    EQedVisualGraphState_Ready = 0x3,
    EQedVisualGraphState_Active = 0x4,
    EQedVisualGraphState_Tethering = 0x5,
    EQedVisualGraphState_Cooldown = 0x6,
    EQedVisualGraphState_Jamming = 0x7,
    EQedVisualGraphState_Off = 0x8,
};


enum EQedVisualGraphTrackedVariable {
    EQedVisualGraphTrackedVariable_ChargePercentage = 0x0,
    EQedVisualGraphTrackedVariable_CooldownPercentage = 0x1,
};


enum EQedVisualGraphTrackedVariableContext {
    EQedVisualGraphTrackedVariableContext_TrackAscending = 0x0,
    EQedVisualGraphTrackedVariableContext_TrackDescending = 0x1,
};


enum ERadarChargeLevels {
    ERadarChargeLevels_LowCharge = 0x0,
    ERadarChargeLevels_FullCharge = 0x1,
};


enum ERadarContactBehaviourCategory {
    ERadarContactBehaviourCategory_Vehicle = 0x0,
    ERadarContactBehaviourCategory_FPS = 0x1,
    ERadarContactBehaviourCategory_Both = 0x2,
    ERadarContactBehaviourCategory_None = 0x3,
};


enum ERadarContactHighlightState {
    ERadarContactHighlightState_TargetScanBlocked = 0x0,
    ERadarContactHighlightState_TargetScannable = 0x1,
    ERadarContactHighlightState_TargetScanned = 0x2,
    ERadarContactHighlightState_TargetScanning = 0x3,
    ERadarContactHighlightState_PingDetected_Hostile = 0x4,
    ERadarContactHighlightState_PingDetected_Neutral = 0x5,
    ERadarContactHighlightState_PingDetected_Friendly = 0x6,
    ERadarContactHighlightState_PingDetected_Objective = 0x7,
    ERadarContactHighlightState_PingDetected_Unknown = 0x8,
};


enum ERadarFocusLevels {
    ERadarFocusLevels_Level1 = 0x0,
    ERadarFocusLevels_Level2 = 0x1,
    ERadarFocusLevels_Level3 = 0x2,
    ERadarFocusLevels_Level4 = 0x3,
    ERadarFocusLevels_Level5 = 0x4,
    ERadarFocusLevels_Level6 = 0x5,
    ERadarFocusLevels_Level7 = 0x6,
    ERadarFocusLevels_Level8 = 0x7,
};


enum ERatingScoreCurveType {
    ERatingScoreCurveType_TwoThousandFiveHundred = 0x0,
    ERatingScoreCurveType_FiveThousand = 0x1,
    ERatingScoreCurveType_SevenThousandFiveHundred = 0x2,
    ERatingScoreCurveType_TenThousand = 0x3,
};


enum ERenderLayer {
    ERenderLayer_Default = 0x0,
    ERenderLayer_Wall = 0x1,
    ERenderLayer_Floor = 0x2,
    ERenderLayer_Bulkhead = 0x3,
    ERenderLayer_Skeleton = 0x4,
    ERenderLayer_Exterior = 0x5,
    ERenderLayer_Hologram = 0x6,
    ERenderLayer_NonPlayable = 0x7,
    ERenderLayer_UIObject = 0x8,
    ERenderLayer_DoorUnlocked = 0x9,
    ERenderLayer_DoorLocked = 0xa,
    ERenderLayer_SurfaceWater = 0xb,
    ERenderLayer_Nominal = 0xc,
    ERenderLayer_Moderate = 0xd,
    ERenderLayer_Critical = 0xe,
    ERenderLayer_Disabled = 0xf,
};


enum ERenderType {
    ERenderType_FORWARD = 0x0,
    ERenderType_TILEDFORWARD = 0x1,
    ERenderType_DEFERRED = 0x2,
};


enum EReputationChangeReason {
    EReputationChangeReason_UNSPECIFIED = 0x0,
    EReputationChangeReason_INITIALIZED = 0x1,
    EReputationChangeReason_INCREASED = 0x2,
    EReputationChangeReason_DECREASED = 0x3,
    EReputationChangeReason_SET = 0x4,
    EReputationChangeReason_RESET = 0x5,
    EReputationChangeReason_STATE = 0x6,
    EReputationChangeReason_STANDING = 0x7,
    EReputationChangeReason_UNDEFINED = 0x8,
};


enum EReputationComparisonOperator {
    EReputationComparisonOperator_EqualTo = 0x0,
    EReputationComparisonOperator_GreaterThan = 0x1,
    EReputationComparisonOperator_GreaterThanOrEqualTo = 0x2,
    EReputationComparisonOperator_LessThan = 0x3,
    EReputationComparisonOperator_LessThanOrEqualTo = 0x4,
    EReputationComparisonOperator_UNDEFINED = 0x5,
};


enum EReputationEntityType {
    EReputationEntityType_Organization = 0x0,
    EReputationEntityType_MissionGiver = 0x1,
    EReputationEntityType_UNDEFINED = 0x2,
};


enum EReputationSortOrderEntity {
    EReputationSortOrderEntity_Alphabetical = 0x0,
    EReputationSortOrderEntity_RecentActivity = 0x1,
    EReputationSortOrderEntity_PrimaryProgress = 0x2,
    EReputationSortOrderEntity_UNDEFINED = 0x3,
};


enum EReputationSortOrderScope {
    EReputationSortOrderScope_Alphabetical = 0x0,
    EReputationSortOrderScope_ListOrder = 0x1,
    EReputationSortOrderScope_UNDEFINED = 0x2,
};


enum ERespawnLocationType {
    ERespawnLocationType_None = 0x0,
    ERespawnLocationType_Hospital = 0x1,
    ERespawnLocationType_Prison = 0x2,
    ERespawnLocationType_PrisonExit = 0x3,
    ERespawnLocationType_CriminalLocation = 0x4,
    ERespawnLocationType_CriminalHospital = 0x5,
    ERespawnLocationType_Other = 0x6,
    ERespawnLocationType_UNDEFINED = 0x7,
};


enum ERtpcBehaviourType {
    ERtpcBehaviourType_None = 0x0,
    ERtpcBehaviourType_Lerped = 0x1,
    ERtpcBehaviourType_TimeBased = 0x2,
    ERtpcBehaviourType_Average = 0x3,
    ERtpcBehaviourType_Capacitor = 0x4,
    ERtpcBehaviourType_UNDEFINED = 0x5,
};


enum ERuntimeImageSourceType {
    ERuntimeImageSourceType_None = 0x0,
    ERuntimeImageSourceType_CommsCall = 0x1,
    ERuntimeImageSourceType_FuelCamera = 0x2,
    ERuntimeImageSourceType_UserInterface = 0x3,
    ERuntimeImageSourceType_InteriorMap = 0x4,
    ERuntimeImageSourceType_Slot_1 = 0x5,
    ERuntimeImageSourceType_Slot_2 = 0x6,
    ERuntimeImageSourceType_Slot_3 = 0x7,
    ERuntimeImageSourceType_Slot_4 = 0x8,
    ERuntimeImageSourceType_Slot_5 = 0x9,
    ERuntimeImageSourceType_Slot_6 = 0xa,
    ERuntimeImageSourceType_Slot_7 = 0xb,
    ERuntimeImageSourceType_Slot_8 = 0xc,
    ERuntimeImageSourceType_Slot_9 = 0xd,
    ERuntimeImageSourceType_Slot_10 = 0xe,
    ERuntimeImageSourceType_UNDEFINED = 0xf,
};


enum ES42StatsComparisonType {
    ES42StatsComparisonType_Equal = 0x0,
    ES42StatsComparisonType_NotEqual = 0x1,
    ES42StatsComparisonType_Greater = 0x2,
    ES42StatsComparisonType_Less = 0x3,
    ES42StatsComparisonType_GreaterOrEqual = 0x4,
    ES42StatsComparisonType_LessOrEqual = 0x5,
    ES42StatsComparisonType_UNDEFINED = 0x6,
};


enum ES42StatsOperationType {
    ES42StatsOperationType_Add = 0x0,
    ES42StatsOperationType_Sub = 0x1,
    ES42StatsOperationType_Mul = 0x2,
    ES42StatsOperationType_Div = 0x3,
    ES42StatsOperationType_UNDEFINED = 0x4,
};


enum ES42StatsPlayerState {
    ES42StatsPlayerState_Any = 0x0,
    ES42StatsPlayerState_OnFoot = 0x1,
    ES42StatsPlayerState_InShip = 0x2,
    ES42StatsPlayerState_UNDEFINED = 0x3,
};


enum ES42StatsType {
    ES42StatsType_EnemyKills = 0x0,
    ES42StatsType_ShipKills = 0x1,
    ES42StatsType_GroundKills = 0x2,
    ES42StatsType_FriendlyFireHits = 0x3,
    ES42StatsType_WeaponShots = 0x4,
    ES42StatsType_WeaponHits = 0x5,
    ES42StatsType_MissileShots = 0x6,
    ES42StatsType_MissileHits = 0x7,
    ES42StatsType_HeadShots = 0x8,
    ES42StatsType_Consumable = 0x9,
    ES42StatsType_FriendlyFireMelee = 0xa,
    ES42StatsType_UNDEFINED = 0xb,
};


enum ESCItemDisplayScreenLightType {
    ESCItemDisplayScreenLightType_None = 0x0,
    ESCItemDisplayScreenLightType_Omni = 0x1,
    ESCItemDisplayScreenLightType_SoftOmni = 0x2,
    ESCItemDisplayScreenLightType_Projector = 0x3,
    ESCItemDisplayScreenLightType_Planar = 0x4,
    ESCItemDisplayScreenLightType_UNDEFINED = 0x5,
};


enum ESCItemDisplayScreenState {
    ESCItemDisplayScreenState_None = 0x0,
    ESCItemDisplayScreenState_NoSignal = 0x1,
    ESCItemDisplayScreenState_NoPower = 0x2,
    ESCItemDisplayScreenState_Normal = 0x3,
    ESCItemDisplayScreenState_Emergency = 0x4,
    ESCItemDisplayScreenState_Auxiliary = 0x5,
    ESCItemDisplayScreenState_CustomOverride = 0x6,
    ESCItemDisplayScreenState_UNDEFINED = 0x7,
};


enum ESCItemDisplayScreenUIModel {
    ESCItemDisplayScreenUIModel_Provider = 0x0,
    ESCItemDisplayScreenUIModel_Consumer = 0x1,
    ESCItemDisplayScreenUIModel_UNDEFINED = 0x2,
};


enum ESCItemElevatorPathNodeType {
    ESCItemElevatorPathNodeType_Stop = 0x0,
    ESCItemElevatorPathNodeType_WayPoint = 0x1,
    ESCItemElevatorPathNodeType_Teleport = 0x2,
    ESCItemElevatorPathNodeType_UNDEFINED = 0x3,
};


enum ESCScreenType {
    ESCScreenType_MFD_16_9 = 0x0,
    ESCScreenType_MFD_4_3 = 0x1,
    ESCScreenType_Support_16_9 = 0x2,
    ESCScreenType_Support_1_1 = 0x3,
    ESCScreenType_Support_Bespoke_1 = 0x4,
    ESCScreenType_Support_Bespoke_2 = 0x5,
    ESCScreenType_HeadUpDisplay = 0x6,
    ESCScreenType_Annunciator = 0x7,
    ESCScreenType_Visor = 0x8,
    ESCScreenType_Radar3DScreen = 0x9,
    ESCScreenType_UNDEFINED = 0xa,
};


enum ESDFSetTypes {
    ESDFSetTypes_Shield = 0x1,
};


enum ESalvageRepairMode {
    ESalvageRepairMode_Salvage = 0x0,
    ESalvageRepairMode_Repair = 0x1,
};


enum EScanCategory {
    EScanCategory_Affiliation = 0x0,
    EScanCategory_General = 0x1,
    EScanCategory_Physical = 0x2,
    EScanCategory_Signatures = 0x3,
    EScanCategory_ScanSystem = 0x4,
};


enum EScanDisplaySection {
    EScanDisplaySection_Boxout = 0x0,
    EScanDisplaySection_Overview = 0x1,
    EScanDisplaySection_Exterior = 0x2,
    EScanDisplaySection_Interior = 0x3,
};


enum EScanDisplayVariable {
    EScanDisplayVariable_Header = 0x0,
    EScanDisplayVariable_Body = 0x1,
    EScanDisplayVariable_Capacity = 0x2,
    EScanDisplayVariable_Extension = 0x3,
};


enum EScanDisplayVariableAuxiliaryType {
    EScanDisplayVariableAuxiliaryType_None = 0x0,
    EScanDisplayVariableAuxiliaryType_ShipRegNumber = 0x1,
};


enum EScanInformation {
    EScanInformation_ActorStatus = 0x0,
    EScanInformation_CargoAmount = 0x1,
    EScanInformation_CargoAmountLoose = 0x2,
    EScanInformation_Classification = 0x3,
    EScanInformation_Commodity = 0x4,
    EScanInformation_ContactType = 0x5,
    EScanInformation_Callout1 = 0x6,
    EScanInformation_Callout2 = 0x7,
    EScanInformation_Callout3 = 0x8,
    EScanInformation_CauseOfDeath = 0x9,
    EScanInformation_CommsChannelStatus = 0xa,
    EScanInformation_DeltaSignature = 0xb,
    EScanInformation_Description = 0xc,
    EScanInformation_DisplaySection = 0xd,
    EScanInformation_DoorLocked = 0xe,
    EScanInformation_DoorOpen = 0xf,
    EScanInformation_DriverOrganization = 0x10,
    EScanInformation_DriverName = 0x11,
    EScanInformation_EntityId = 0x12,
    EScanInformation_EntityClass = 0x13,
    EScanInformation_ID = 0x14,
    EScanInformation_Instability = 0x15,
    EScanInformation_InventoryAmount = 0x16,
    EScanInformation_ItemType = 0x17,
    EScanInformation_ItemStatus = 0x18,
    EScanInformation_Jurisdiction = 0x19,
    EScanInformation_LastScanned = 0x1a,
    EScanInformation_LegalOwnerEntityId = 0x1b,
    EScanInformation_LegalOwnerFlagged = 0x1c,
    EScanInformation_LegalOwnerName = 0x1d,
    EScanInformation_LegalOwnerOrganization = 0x1e,
    EScanInformation_Hackable = 0x1f,
    EScanInformation_Health = 0x20,
    EScanInformation_Mass = 0x21,
    EScanInformation_MasterMode = 0x22,
    EScanInformation_MineablePercentageTotal = 0x23,
    EScanInformation_MineablePercentageValuables = 0x24,
    EScanInformation_Model = 0x25,
    EScanInformation_Name = 0x26,
    EScanInformation_OptimalPowerWindowLow = 0x27,
    EScanInformation_OptimalPowerWindowHigh = 0x28,
    EScanInformation_OtherTrauma1 = 0x29,
    EScanInformation_OtherTrauma2 = 0x2a,
    EScanInformation_OtherTrauma3 = 0x2b,
    EScanInformation_OtherTrauma4 = 0x2c,
    EScanInformation_PassengerCount = 0x2d,
    EScanInformation_PowerAvailability = 0x2e,
    EScanInformation_PowerSwitch = 0x2f,
    EScanInformation_PowerTransferResistance = 0x30,
    EScanInformation_Priority = 0x31,
    EScanInformation_Resource = 0x32,
    EScanInformation_Role = 0x33,
    EScanInformation_ScanFullyCompleted = 0x34,
    EScanInformation_ScanProcedureBits = 0x35,
    EScanInformation_ScanTimeStamp = 0x36,
    EScanInformation_ScanToken = 0x37,
    EScanInformation_SelfDestructFlagged = 0x38,
    EScanInformation_SignatureIR = 0x39,
    EScanInformation_SignatureCS = 0x3a,
    EScanInformation_SignatureEM = 0x3b,
    EScanInformation_SignatureRS = 0x3c,
    EScanInformation_Species = 0x3d,
    EScanInformation_Stolen = 0x3e,
    EScanInformation_SubType = 0x3f,
    EScanInformation_Type = 0x40,
    EScanInformation_Value = 0x41,
    EScanInformation_Volatility = 0x42,
    EScanInformation_WantedLevel = 0x43,
    EScanInformation_MissionId = 0x44,
};


enum EScanProcedure {
    EScanProcedure_Armor = 0x0,
    EScanProcedure_CargoCommodities = 0x1,
    EScanProcedure_Classification = 0x2,
    EScanProcedure_CommsTap = 0x3,
    EScanProcedure_ContactType = 0x4,
    EScanProcedure_Custom = 0x5,
    EScanProcedure_Death = 0x6,
    EScanProcedure_Description = 0x7,
    EScanProcedure_Door = 0x8,
    EScanProcedure_Driver = 0x9,
    EScanProcedure_Emissions = 0xa,
    EScanProcedure_Faction = 0xb,
    EScanProcedure_Instability = 0xc,
    EScanProcedure_InventoryContents = 0xd,
    EScanProcedure_Jurisdiction = 0xe,
    EScanProcedure_LegalOwner = 0xf,
    EScanProcedure_Hackable = 0x10,
    EScanProcedure_Health = 0x11,
    EScanProcedure_Mass = 0x12,
    EScanProcedure_MineableCommodities = 0x13,
    EScanProcedure_Name = 0x14,
    EScanProcedure_OptimalPowerWindow = 0x15,
    EScanProcedure_Passenger = 0x16,
    EScanProcedure_Power = 0x17,
    EScanProcedure_PowerTransferResistance = 0x18,
    EScanProcedure_Species = 0x19,
    EScanProcedure_Status = 0x1a,
    EScanProcedure_Stolen = 0x1b,
    EScanProcedure_SubItems = 0x1c,
    EScanProcedure_VehicleModel = 0x1d,
    EScanProcedure_VehicleRole = 0x1e,
    EScanProcedure_VehicleSelfDestruct = 0x1f,
    EScanProcedure_VehicleMasterMode = 0x20,
    EScanProcedure_WantedLevel = 0x21,
};


enum EScanSortType {
    EScanSortType_Less = 0x0,
    EScanSortType_Greater = 0x1,
};


enum EScanTable {
    EScanTable_Self = 0x0,
    EScanTable_CargoCommodities = 0x1,
    EScanTable_Custom = 0x2,
    EScanTable_MineableCommodities = 0x3,
    EScanTable_Passengers = 0x4,
    EScanTable_SubItems = 0x5,
    EScanTable_InventoryContents = 0x6,
    EScanTable_CommsChannels = 0x7,
    EScanTable_Armor = 0x8,
};


enum EScanType {
    EScanType_AIAutoScan = 0x0,
    EScanType_FocalPointScan = 0x1,
    EScanType_PassiveScan = 0x2,
    EScanType_PingBroadScan = 0x3,
    EScanType_PingFocusScan = 0x4,
};


enum EScopeType {
    EScopeType_None = 0x0,
    EScopeType_Zoom = 0x1,
    EScopeType_Nightvision = 0x2,
};


enum EScoreDisplayType {
    EScoreDisplayType_Score = 0x0,
    EScoreDisplayType_Rounds = 0x1,
};


enum EScoreUIType {
    EScoreUIType_NONE = 0x0,
    EScoreUIType_Primary = 0x1,
    EScoreUIType_Secondary = 0x2,
};


enum EScoreboardType {
    EScoreboardType_TotalScore = 0x0,
    EScoreboardType_ObjectivePoints = 0x1,
    EScoreboardType_Kills = 0x2,
    EScoreboardType_Deaths = 0x3,
    EScoreboardType_Assists = 0x4,
    EScoreboardType_CompletedLaps = 0x5,
    EScoreboardType_FastestLapTime = 0x6,
    EScoreboardType_RacePosition = 0x7,
    EScoreboardType_GunGameLevel = 0x8,
};


enum ESeatAccessConditionType {
    ESeatAccessConditionType_True = 0x0,
    ESeatAccessConditionType_False = 0x1,
    ESeatAccessConditionType_Either = 0x2,
};


enum ESeatAccessEntranceDependencyType {
    ESeatAccessEntranceDependencyType_Never = 0x0,
    ESeatAccessEntranceDependencyType_Exit = 0x1,
    ESeatAccessEntranceDependencyType_Enter = 0x2,
    ESeatAccessEntranceDependencyType_Always = 0x3,
};


enum ESeatAccessPassageCondition {
    ESeatAccessPassageCondition_InteriorOnly = 0x0,
    ESeatAccessPassageCondition_ExteriorOnly = 0x1,
    ESeatAccessPassageCondition_Either = 0x2,
};


enum ESeatViewType {
    ESeatViewType_Background = 0x0,
    ESeatViewType_Comms = 0x1,
    ESeatViewType_Cooler = 0x2,
    ESeatViewType_Energy = 0x3,
    ESeatViewType_Flight = 0x4,
    ESeatViewType_Missile = 0x5,
    ESeatViewType_Quantum = 0x6,
    ESeatViewType_Shield = 0x7,
    ESeatViewType_Target = 0x8,
    ESeatViewType_Weapon = 0x9,
    ESeatViewType_Wheeled = 0xa,
    ESeatViewType_Scanner = 0xb,
};


enum ESecurityNetworkPermissionValue {
    ESecurityNetworkPermissionValue_Inherit = 0x0,
    ESecurityNetworkPermissionValue_Yes = 0x1,
    ESecurityNetworkPermissionValue_No = 0x2,
    ESecurityNetworkPermissionValue_UNDEFINED = 0x3,
};


enum ESelectionBehaviour {
    ESelectionBehaviour_KeepAllSelected = 0x0,
    ESelectionBehaviour_EquipAndUnselectAll = 0x1,
    ESelectionBehaviour_EquipAndKeepItemPortSelected = 0x2,
    ESelectionBehaviour_EquipAndKeepItemSelected = 0x3,
    ESelectionBehaviour_EquipAndKeepFirstSelection = 0x4,
    ESelectionBehaviour_EquipAndKeepLastSelection = 0x5,
    ESelectionBehaviour_UNDEFINED = 0x6,
};


enum ESequenceMode {
    ESequenceMode_Individually = 0x0,
    ESequenceMode_Automatically = 0x1,
    ESequenceMode_Looping = 0x2,
};


enum EServiceBeaconType {
    EServiceBeaconType_None = 0x0,
    EServiceBeaconType_PersonalTransport = 0x1,
    EServiceBeaconType_CombatAssistance = 0x2,
    EServiceBeaconType_Escort = 0x3,
    EServiceBeaconType_Heal = 0x4,
    EServiceBeaconType_Revive = 0x5,
    EServiceBeaconType_Refuel = 0x6,
};


enum EShipComputerMode {
    EShipComputerMode_Default = 0x0,
    EShipComputerMode_Race = 0x1,
    EShipComputerMode_UNDEFINED = 0x2,
};


enum EShipState {
    EShipState_Grounded = 0x0,
    EShipState_Flying = 0x1,
    EShipState_Both = 0x2,
    EShipState_UNDEFINED = 0x3,
};


enum ESignatureType {
    ESignatureType_Infrared = 0x0,
    ESignatureType_Electromagnetic = 0x1,
    ESignatureType_CrossSection = 0x2,
    ESignatureType_Decibel = 0x3,
    ESignatureType_Resource = 0x4,
    ESignatureType_Identity = 0x5,
    ESignatureType_CommsSignal = 0x6,
    ESignatureType_Interactable = 0x7,
};


enum ESilhouetteColourSource {
    ESilhouetteColourSource_HDRTarget = 0x0,
    ESilhouetteColourSource_PerObject = 0x1,
};


enum ESimulationClampType {
    ESimulationClampType_Disabled = 0x0,
    ESimulationClampType_PendulumCone = 0x1,
    ESimulationClampType_PendulumHingePlane = 0x2,
    ESimulationClampType_PendulumHalfCone = 0x3,
    ESimulationClampType_SpringEllipsoid = 0x4,
    ESimulationClampType_TranslationProjection = 0x5,
    ESimulationClampType_UNDEFINED = 0x6,
};


enum ESlottingMode {
    ESlottingMode_EnabledOnSlotting = 0x0,
    ESlottingMode_DisabledOnSlotting = 0x1,
    ESlottingMode_EnabledOnAndOffSlotting = 0x2,
    ESlottingMode_UNDEFINED = 0x3,
};


enum ESoftbodySubstepMode {
    ESoftbodySubstepMode_FullSubstep = 0x0,
    ESoftbodySubstepMode_FullSubstep_SingleCD = 0x1,
    ESoftbodySubstepMode_Iteration = 0x2,
};


enum ESoftbodyVisualBindingMode {
    ESoftbodyVisualBindingMode_Planar = 0x0,
    ESoftbodyVisualBindingMode_Volumetric = 0x1,
    ESoftbodyVisualBindingMode_Spline = 0x2,
};


enum ESoundInputs {
    ESoundInputs_FloatParam = 0x0,
    ESoundInputs_Enable = 0x1,
    ESoundInputs_Disable = 0x2,
    ESoundInputs_UNDEFINED = 0x3,
};


enum ESpecialEffectsType {
    ESpecialEffectsType_ReloadFull = 0x0,
    ESpecialEffectsType_ReloadCheck = 0x1,
    ESpecialEffectsType_ReloadEmpty = 0x2,
};


enum ESpectatorMode {
    ESpectatorMode_SM_Fixed = 0x1,
    ESpectatorMode_SM_Free = 0x2,
    ESpectatorMode_SM_Cinematic = 0x3,
    ESpectatorMode_SM_Follow = 0x4,
    ESpectatorMode_SM_FirstPerson = 0x5,
};


enum ESpikeOperationType {
    ESpikeOperationType_Add = 0x0,
    ESpikeOperationType_Multiply = 0x1,
};


enum ESpinActivationMode {
    ESpinActivationMode_Fire = 0x0,
    ESpinActivationMode_Procclip = 0x1,
};


enum EStarGalaPaths {
    EStarGalaPaths_formationPath1 = 0x0,
    EStarGalaPaths_formationPath2 = 0x1,
    EStarGalaPaths_formationPath3 = 0x2,
    EStarGalaPaths_formationPath4 = 0x3,
    EStarGalaPaths_challengeStage1 = 0x4,
    EStarGalaPaths_challengeStage2 = 0x5,
    EStarGalaPaths_challengeStage3 = 0x6,
    EStarGalaPaths_challengeStage4 = 0x7,
    EStarGalaPaths_challengeStage5 = 0x8,
    EStarGalaPaths_challengeStage6 = 0x9,
    EStarGalaPaths_challengeStage7 = 0xa,
    EStarGalaPaths_challengeStage8 = 0xb,
    EStarGalaPaths_challengeStage9_1 = 0xc,
    EStarGalaPaths_challengeStage9_2 = 0xd,
    EStarGalaPaths_challengeStage10_1 = 0xe,
    EStarGalaPaths_challengeStage10_2 = 0xf,
    EStarGalaPaths_challengeStage11 = 0x10,
    EStarGalaPaths_challengeStage12 = 0x11,
    EStarGalaPaths_challengeStage13_1 = 0x12,
    EStarGalaPaths_challengeStage13_2 = 0x13,
    EStarGalaPaths_challengeStage13_3 = 0x14,
    EStarGalaPaths_challengeStage13_4 = 0x15,
    EStarGalaPaths_challengeStage14 = 0x16,
    EStarGalaPaths_challengeStage15 = 0x17,
    EStarGalaPaths_challengeStage16 = 0x18,
    EStarGalaPaths_UNDEFINED = 0x19,
};


enum EStatCompareMode {
    EStatCompareMode_MoreIsBetter = 0x0,
    EStatCompareMode_LessIsBetter = 0x1,
    EStatCompareMode_Neutral = 0x2,
    EStatCompareMode_UNDEFINED = 0x3,
};


enum EStatType {
    EStatType_OnFoot = 0x0,
    EStatType_Seated = 0x1,
    EStatType_Size = 0x2,
};


enum ESuggestedFOVMode {
    ESuggestedFOVMode_SuggestedFOVMode_None = 0x0,
    ESuggestedFOVMode_SuggestedFOVMode_ForceAlways = 0x1,
    ESuggestedFOVMode_SuggestedFOVMode_ApplyIfBigger = 0x2,
    ESuggestedFOVMode_SuggestedFOVMode_ApplyIfLower = 0x3,
};


enum ESunShadowMode {
    ESunShadowMode_Upto_20m = 0x0,
    ESunShadowMode_Upto_100m = 0x1,
    ESunShadowMode_Upto_400m = 0x2,
    ESunShadowMode_Upto_2000m = 0x3,
    ESunShadowMode_Upto_2000m_AND_Heightmap = 0x4,
    ESunShadowMode_Heightmap_Only = 0x5,
    ESunShadowMode_UNDEFINED = 0x6,
};


enum EThrowMode {
    EThrowMode_Undefined = 0x0,
    EThrowMode_OverhandThrow = 0x1,
    EThrowMode_UnderhandThrow = 0x2,
    EThrowMode_Drop = 0x3,
    EThrowMode_Place = 0x4,
    EThrowMode_InteractionMode = 0x5,
    EThrowMode_TwoHandedThrow = 0x6,
};


enum EThrowPerceptionSound {
    EThrowPerceptionSound_SmallSound = 0x0,
    EThrowPerceptionSound_LargeSound = 0x1,
};


enum EThrusterAnimDriver {
    EThrusterAnimDriver_ThrustWithAfterburner = 0x0,
    EThrusterAnimDriver_Thrust = 0x1,
    EThrusterAnimDriver_Velocity = 0x2,
    EThrusterAnimDriver_ForwardOnlyVelocity = 0x3,
    EThrusterAnimDriver_Nutcracker = 0x4,
    EThrusterAnimDriver_UNDEFINED = 0x5,
};


enum EThrusterFlag {
    EThrusterFlag_StrafeForward = 0x0,
    EThrusterFlag_StrafeBack = 0x1,
    EThrusterFlag_StrafeLeft = 0x2,
    EThrusterFlag_StrafeRight = 0x3,
    EThrusterFlag_StrafeUp = 0x4,
    EThrusterFlag_StrafeDown = 0x5,
    EThrusterFlag_YawLeft = 0x6,
    EThrusterFlag_YawRight = 0x7,
    EThrusterFlag_PitchUp = 0x8,
    EThrusterFlag_PitchDown = 0x9,
    EThrusterFlag_RollLeft = 0xa,
    EThrusterFlag_RollRight = 0xb,
    EThrusterFlag_UNDEFINED = 0xc,
};


enum EThrusterOutputData {
    EThrusterOutputData_FireStrength = 0x0,
    EThrusterOutputData_FireStrengthSmoothed = 0x1,
    EThrusterOutputData_AfterburnerEnabled = 0x2,
    EThrusterOutputData_LastFuelRequested = 0x3,
    EThrusterOutputData_LastFuelReceived = 0x4,
    EThrusterOutputData_HealthRatio = 0x5,
    EThrusterOutputData_MisfireThrustRatio = 0x6,
    EThrusterOutputData_MisfireState = 0x7,
    EThrusterOutputData_TemperatureRatio = 0x8,
    EThrusterOutputData_IsOverheating = 0x9,
    EThrusterOutputData_IsOverheated = 0xa,
    EThrusterOutputData_PowerRatio = 0xb,
    EThrusterOutputData_UNDEFINED = 0xc,
};


enum EThrusterType {
    EThrusterType_Maneuver = 0x0,
    EThrusterType_Main = 0x1,
    EThrusterType_Retro = 0x2,
    EThrusterType_UNDEFINED = 0x3,
};


enum ETriggerDefaultActions {
    ETriggerDefaultActions_pc_item_primary = 0x0,
    ETriggerDefaultActions_pc_item_secondary = 0x1,
    ETriggerDefaultActions_UNDEFINED = 0x2,
};


enum ETurbulentPassEA {
    ETurbulentPassEA_EA_BattleRoyale = 0x1,
    ETurbulentPassEA_EA_FreeFlight = 0x2,
    ETurbulentPassEA_EA_PirateSwarm = 0x4,
    ETurbulentPassEA_EA_SquadronBattle = 0x8,
    ETurbulentPassEA_EA_VanduulSwarm = 0x10,
    ETurbulentPassEA_EA_ClassicRace = 0x20,
    ETurbulentPassEA_EA_Elimination = 0x40,
    ETurbulentPassEA_EA_TeamElimination = 0x80,
    ETurbulentPassEA_EA_Control = 0x100,
    ETurbulentPassEA_EA_TheatersOfWar = 0x200,
    ETurbulentPassEA_EA_IterativeTesting = 0x400,
    ETurbulentPassEA_EA_Duel = 0x800,
    ETurbulentPassEA_EA_FPSGunGame = 0x1000,
    ETurbulentPassEA_EA_Horde = 0x2000,
    ETurbulentPassEA_EA_VanduulInvasion = 0x4000,
    ETurbulentPassEA_EA_ExperimentalMode_1 = 0x8000,
    ETurbulentPassEA_EA_ExperimentalMode_2 = 0x10000,
    ETurbulentPassEA_EA_ExperimentalMode_3 = 0x20000,
    ETurbulentPassEA_EA_ExperimentalMode_4 = 0x40000,
    ETurbulentPassEA_EA_ExperimentalMode_5 = 0x80000,
    ETurbulentPassEA_EA_ExperimentalMode_6 = 0x100000,
    ETurbulentPassEA_EA_ExperimentalMode_7 = 0x200000,
    ETurbulentPassEA_EA_ExperimentalMode_8 = 0x400000,
    ETurbulentPassEA_EA_ExperimentalMode_9 = 0x800000,
    ETurbulentPassEA_EA_ExperimentalMode_10 = 0x1000000,
    ETurbulentPassEA_EA_ExperimentalMode_11 = 0x2000000,
    ETurbulentPassEA_EA_ExperimentalMode_12 = 0x4000000,
    ETurbulentPassEA_EA_GravRace = 0x8000000,
    ETurbulentPassEA_Subscriber = 0x20000000,
    ETurbulentPassEA_EA_SpecialEvent = 0x40000000,
};


enum ETurretRotationStyle {
    ETurretRotationStyle_SingleAxis = 0x0,
    ETurretRotationStyle_MultiAxis = 0x1,
};


enum EUsableEntrySelectionType {
    EUsableEntrySelectionType_FirstFound = 0x0,
    EUsableEntrySelectionType_Closest = 0x1,
    EUsableEntrySelectionType_Farthest = 0x2,
    EUsableEntrySelectionType_Random = 0x3,
    EUsableEntrySelectionType_UNDEFINED = 0x4,
};


enum EUsableSelectionMethod {
    EUsableSelectionMethod_Priority = 0x0,
    EUsableSelectionMethod_Random = 0x1,
    EUsableSelectionMethod_Closest = 0x2,
    EUsableSelectionMethod_UNDEFINED = 0x3,
};


enum EUsableSequencerTaskType {
    EUsableSequencerTaskType_AssignLoadoutToContainer = 0x0,
    EUsableSequencerTaskType_Delink = 0x1,
    EUsableSequencerTaskType_EnableUseChannel = 0x2,
    EUsableSequencerTaskType_DisableUseChannel = 0x3,
    EUsableSequencerTaskType_FillConsumable = 0x4,
    EUsableSequencerTaskType_UNDEFINED = 0x5,
};


enum EUsableStance {
    EUsableStance_Stand = 0x0,
    EUsableStance_Crouch = 0x1,
    EUsableStance_Seated = 0x2,
    EUsableStance_Prone = 0x3,
    EUsableStance_ProneBack = 0x4,
    EUsableStance_Unset = 0x5,
    EUsableStance_UNDEFINED = 0x6,
};


enum EUseSlotReenablePoint {
    EUseSlotReenablePoint_UseChannelCompletion = 0x0,
    EUseSlotReenablePoint_ExitAnimStart = 0x1,
    EUseSlotReenablePoint_UsableDelink = 0x2,
    EUseSlotReenablePoint_UNDEFINED = 0x3,
};


enum EVAStateType {
    EVAStateType_StandIdle = 0x0,
    EVAStateType_StandMove = 0x1,
    EVAStateType_IronmanMove = 0x2,
    EVAStateType_IronmanRelaxed = 0x3,
    EVAStateType_IronmanTurn = 0x4,
};


enum EVehicleDamageModifier {
    EVehicleDamageModifier_AI_HitBy_AI = 0x0,
    EVehicleDamageModifier_AI_HitBy_Player = 0x1,
    EVehicleDamageModifier_Player_HitBy_AI = 0x2,
    EVehicleDamageModifier_Player_HitBy_Player = 0x3,
    EVehicleDamageModifier_Uncontrolled_HitBy_AI = 0x4,
    EVehicleDamageModifier_Uncontrolled_HitBy_Player = 0x5,
    EVehicleDamageModifier_UNDEFINED = 0x6,
};


enum EVehicleMovementClass {
    EVehicleMovementClass_ArcadeWheeled = 0x0,
    EVehicleMovementClass_Dummy = 0x1,
    EVehicleMovementClass_Spaceship = 0x2,
    EVehicleMovementClass_TrackWheeled = 0x3,
    EVehicleMovementClass_Boat = 0x4,
    EVehicleMovementClass_PhysicalWheeled = 0x5,
    EVehicleMovementClass_UNDEFINED = 0x6,
};


enum EVibrationAudioCalculationType {
    EVibrationAudioCalculationType_Additive = 0x0,
    EVibrationAudioCalculationType_MaxOfAll = 0x1,
    EVibrationAudioCalculationType_UNDEFINED = 0x2,
};


enum EVibrationComponentType {
    EVibrationComponentType_DynamicEntity = 0x0,
    EVibrationComponentType_Room = 0x1,
    EVibrationComponentType_UNDEFINED = 0x2,
};


enum EVibrationSource {
    EVibrationSource_unnamed = 0x0,
    EVibrationSource_Collision = 0x0,
    EVibrationSource_Damage = 0x1,
    EVibrationSource_Explosion = 0x2,
    EVibrationSource_IFCSAeroDynamicsDrag = 0x3,
    EVibrationSource_IFCSAeroDynamicsLift = 0x4,
    EVibrationSource_IFCSMasterModeDrag = 0x5,
    EVibrationSource_IFCSAeroStall = 0x6,
    EVibrationSource_Thruster = 0x7,
    EVibrationSource_WeaponFire = 0x8,
    EVibrationSource_WeaponFirePlayer = 0x9,
    EVibrationSource_WindArea = 0xa,
    EVibrationSource_Distortion = 0xb,
    EVibrationSource_MagLaunch_Charge = 0xc,
    EVibrationSource_MagLaunch_Catapult = 0xd,
    EVibrationSource_QuantumBoost = 0xe,
    EVibrationSource_ElectricalCharge = 0xf,
    EVibrationSource_ProjectileImpact = 0x10,
    EVibrationSource_JumpDrive = 0x11,
    EVibrationSource_JumpPoint = 0x12,
    EVibrationSource_JumpTunnel = 0x13,
    EVibrationSource_UNDEFINED = 0x14,
};


enum EVibrationVehiclePlayerRole {
    EVibrationVehiclePlayerRole_None = 0x0,
    EVibrationVehiclePlayerRole_Driver = 0x1,
    EVibrationVehiclePlayerRole_Crew = 0x2,
    EVibrationVehiclePlayerRole_Passenger = 0x3,
    EVibrationVehiclePlayerRole_UNDEFINED = 0x4,
};


enum EViewType {
    EViewType_eView_Off = 0x0,
    EViewType_eView_SelfStatus = 0x1,
    EViewType_eView_TargetStatus = 0x2,
    EViewType_eView_Communications = 0x3,
    EViewType_eView_Configuration = 0x4,
    EViewType_eView_IFCS = 0x5,
    EViewType_eView_Diagnostics = 0x6,
    EViewType_eView_ResourceNetwork = 0x7,
    EViewType_eView_Scanning = 0x8,
    EViewType_eView_Weapons = 0x9,
    EViewType_eView_Shields = 0xa,
    EViewType_UNDEFINED = 0xb,
};


enum EWantedLevelComparison {
    EWantedLevelComparison_Ignore = 0x0,
    EWantedLevelComparison_Equal = 0x1,
    EWantedLevelComparison_EqualOrLess = 0x2,
    EWantedLevelComparison_EqualOrGreater = 0x3,
    EWantedLevelComparison_UNDEFINED = 0x4,
};


enum EWave {
    EWave_EWave_1 = 0x0,
    EWave_EWave_2 = 0x1,
    EWave_EWave_3 = 0x2,
    EWave_EWave_4 = 0x3,
    EWave_EWave_5 = 0x4,
    EWave_UNDEFINED = 0x5,
};


enum EWeaponGroup {
    EWeaponGroup_Gun1 = 0x0,
    EWeaponGroup_Gun2 = 0x1,
    EWeaponGroup_Missiles = 0x2,
    EWeaponGroup_UNDEFINED = 0x3,
};


enum EWeaponRangeCategory {
    EWeaponRangeCategory_Short = 0x0,
    EWeaponRangeCategory_Medium = 0x1,
    EWeaponRangeCategory_Long = 0x2,
};


enum EWeekday {
    EWeekday_Sunday = 0x0,
    EWeekday_Monday = 0x1,
    EWeekday_Tuesday = 0x2,
    EWeekday_Wednesday = 0x3,
    EWeekday_Thursday = 0x4,
    EWeekday_Friday = 0x5,
    EWeekday_Saturday = 0x6,
};


enum ElectricalCalculationPropertyType {
    ElectricalCalculationPropertyType_Distance = 0x0,
    ElectricalCalculationPropertyType_ElectricalCharge = 0x1,
    ElectricalCalculationPropertyType_UNDEFINED = 0x2,
};


enum ElectricalStatePropertyType {
    ElectricalStatePropertyType_Charge = 0x0,
    ElectricalStatePropertyType_UNDEFINED = 0x1,
};


enum EngineeringState {
    EngineeringState_Baseline = 0x0,
    EngineeringState_Warning = 0x1,
    EngineeringState_Critical = 0x2,
    EngineeringState_Disabled = 0x3,
    EngineeringState_UNDEFINED = 0x4,
};


enum EulerAngles {
    EulerAngles_Pitch = 0x0,
    EulerAngles_Roll = 0x1,
    EulerAngles_Yaw = 0x2,
};


enum FactionType {
    FactionType_LawEnforcement = 0x0,
    FactionType_PrivateSecurity = 0x1,
    FactionType_Lawful = 0x2,
    FactionType_Unlawful = 0x3,
    FactionType_UNDEFINED = 0x4,
};


enum FireBehavior {
    FireBehavior_VoxelDamage = 0x0,
    FireBehavior_Radiation = 0x1,
    FireBehavior_Convection = 0x2,
    FireBehavior_Equalization = 0x3,
    FireBehavior_DamageIgnition = 0x4,
    FireBehavior_FlashIgnition = 0x5,
    FireBehavior_OxygenStrength = 0x6,
    FireBehavior_OxygenConsumption = 0x7,
    FireBehavior_LowOxygenExtinguish = 0x8,
    FireBehavior_FuelConsumption = 0x9,
    FireBehavior_RequiresFuel = 0xa,
    FireBehavior_SmokeProduction = 0xb,
    FireBehavior_DamageToHealth = 0xc,
    FireBehavior_AmbientTemperature = 0xd,
    FireBehavior_AutoRepairing = 0xe,
    FireBehavior_Repairing = 0xf,
    FireBehavior_Extinguishing = 0x10,
    FireBehavior_RoomConnectors = 0x11,
    FireBehavior_UNDEFINED = 0x12,
};


enum FireEnabledMode {
    FireEnabledMode_Enabled = 0x0,
    FireEnabledMode_Disabled = 0x1,
    FireEnabledMode_EnabledOnVehicles = 0x2,
    FireEnabledMode_EnabledOnTag = 0x3,
    FireEnabledMode_EnabledOnAllVehicles = 0x4,
    FireEnabledMode_UNDEFINED = 0x5,
};


enum FireFilterMode {
    FireFilterMode_Include = 0x0,
    FireFilterMode_Exclude = 0x1,
    FireFilterMode_UNDEFINED = 0x2,
};


enum FireHazardFogNoiseTextures {
    FireHazardFogNoiseTextures_Noise0 = 0x0,
    FireHazardFogNoiseTextures_Noise1 = 0x1,
    FireHazardFogNoiseTextures_UNDEFINED = 0x2,
};


enum FireHazardMaterials {
    FireHazardMaterials_Baseline = 0x0,
    FireHazardMaterials_MaxSpecular = 0x1,
    FireHazardMaterials_MaxGloss = 0x2,
    FireHazardMaterials_MaxSpecularAndGloss = 0x3,
    FireHazardMaterials_UNDEFINED = 0x4,
};


enum FireHazardSurfaceDirections {
    FireHazardSurfaceDirections_Floors = 0x0,
    FireHazardSurfaceDirections_Walls = 0x1,
    FireHazardSurfaceDirections_Ceilings = 0x2,
    FireHazardSurfaceDirections_UNDEFINED = 0x3,
};


enum FlashValueUpdateMode {
    FlashValueUpdateMode_None = 0x0,
    FlashValueUpdateMode_Offset = 0x1,
    FlashValueUpdateMode_Overwrite = 0x2,
    FlashValueUpdateMode_AttachContent = 0x3,
    FlashValueUpdateMode_AttachScreen = 0x4,
    FlashValueUpdateMode_UNDEFINED = 0x5,
};


enum ForceKnockdownDirection {
    ForceKnockdownDirection_None = 0x0,
    ForceKnockdownDirection_Forward = 0x1,
    ForceKnockdownDirection_Backward = 0x2,
    ForceKnockdownDirection_Left = 0x3,
    ForceKnockdownDirection_Right = 0x4,
    ForceKnockdownDirection_UNDEFINED = 0x5,
};


enum ForceReactionLeanHumanSpineBoneName {
    ForceReactionLeanHumanSpineBoneName_Hips = 0x0,
    ForceReactionLeanHumanSpineBoneName_Spine = 0x1,
    ForceReactionLeanHumanSpineBoneName_Spine1 = 0x2,
    ForceReactionLeanHumanSpineBoneName_Spine2 = 0x3,
    ForceReactionLeanHumanSpineBoneName_Spine3 = 0x4,
    ForceReactionLeanHumanSpineBoneName_Neck = 0x5,
    ForceReactionLeanHumanSpineBoneName_Neck1 = 0x6,
    ForceReactionLeanHumanSpineBoneName_Head = 0x7,
};


enum ForceReactionLeanVanduulSpineBoneName {
    ForceReactionLeanVanduulSpineBoneName_Hips = 0x0,
    ForceReactionLeanVanduulSpineBoneName_Spine = 0x1,
    ForceReactionLeanVanduulSpineBoneName_Spine1 = 0x2,
    ForceReactionLeanVanduulSpineBoneName_Spine2 = 0x3,
    ForceReactionLeanVanduulSpineBoneName_Spine3 = 0x4,
    ForceReactionLeanVanduulSpineBoneName_Neck = 0x5,
    ForceReactionLeanVanduulSpineBoneName_Neck1 = 0x6,
    ForceReactionLeanVanduulSpineBoneName_Head = 0x7,
};


enum ForceReactionLeanXianSpineBoneName {
    ForceReactionLeanXianSpineBoneName_Hips = 0x0,
    ForceReactionLeanXianSpineBoneName_Spine1 = 0x1,
    ForceReactionLeanXianSpineBoneName_Spine2 = 0x2,
    ForceReactionLeanXianSpineBoneName_Spine3 = 0x3,
    ForceReactionLeanXianSpineBoneName_Spine4 = 0x4,
    ForceReactionLeanXianSpineBoneName_Neck1 = 0x5,
    ForceReactionLeanXianSpineBoneName_Neck2 = 0x6,
    ForceReactionLeanXianSpineBoneName_Neck3 = 0x7,
    ForceReactionLeanXianSpineBoneName_Neck4 = 0x8,
    ForceReactionLeanXianSpineBoneName_Head = 0x9,
};


enum FriendlyFireType {
    FriendlyFireType_None = 0x0,
    FriendlyFireType_Self = 0x1,
    FriendlyFireType_Team = 0x2,
};


enum FuelTypes {
    FuelTypes_INVALIDFUEL = 0x0,
    FuelTypes_QuantumFuel = 0x1,
    FuelTypes_HydrogenFuel = 0x2,
    FuelTypes_UNDEFINED = 0x3,
};


enum GRID_TYPE {
    GRID_TYPE_Global = 0x0,
    GRID_TYPE_Planetary = 0x1,
    GRID_TYPE_Small = 0x2,
    GRID_TYPE_Medium = 0x3,
    GRID_TYPE_Large = 0x4,
    GRID_TYPE_SolarSystem = 0x5,
};


enum GenderType {
    GenderType_NotSet = 0x0,
    GenderType_Male = 0x1,
    GenderType_Female = 0x2,
};


enum GeomForm {
    GeomForm_Vertices = 0x0,
    GeomForm_Edges = 0x1,
    GeomForm_Surface = 0x2,
    GeomForm_Volume = 0x3,
};


enum GeomType {
    GeomType_None = 0x0,
    GeomType_BoundingBox = 0x1,
    GeomType_Physics = 0x2,
    GeomType_Render = 0x3,
};


enum HUDPalleteEntry {
    HUDPalleteEntry_Moderate = 0x0,
    HUDPalleteEntry_Positive = 0x1,
    HUDPalleteEntry_Neutral = 0x2,
    HUDPalleteEntry_Hostile = 0x3,
    HUDPalleteEntry_Critical = 0x4,
    HUDPalleteEntry_Unknown = 0x5,
    HUDPalleteEntry_Highlight = 0x6,
    HUDPalleteEntry_Friendly = 0x7,
    HUDPalleteEntry_SubItemTarget = 0x8,
};


enum HackingCodeCommandType {
    HackingCodeCommandType_None = 0x0,
    HackingCodeCommandType_Move = 0x1,
    HackingCodeCommandType_Stop = 0x2,
    HackingCodeCommandType_Swap = 0x3,
    HackingCodeCommandType_Ping = 0x4,
    HackingCodeCommandType_Wrap = 0x5,
    HackingCodeCommandType_Inject = 0x6,
    HackingCodeCommandType_Slowdown = 0x7,
    HackingCodeCommandType_CancelAbility = 0x8,
    HackingCodeCommandType_Spawn = 0x9,
    HackingCodeCommandType_RotatePreview = 0xa,
    HackingCodeCommandType_Help = 0xb,
    HackingCodeCommandType_Commands = 0xc,
    HackingCodeCommandType_AutoCorrect = 0xd,
    HackingCodeCommandType_Exit = 0xe,
    HackingCodeCommandType_UNDEFINED = 0xf,
};


enum HackingCodeEventType {
    HackingCodeEventType_None = 0x0,
    HackingCodeEventType_UnrecognizedCommand = 0x1,
    HackingCodeEventType_HackingInitiated = 0x2,
    HackingCodeEventType_HackingStarted = 0x3,
    HackingCodeEventType_DefenderDetected = 0x4,
    HackingCodeEventType_DefenderAlerted = 0x5,
    HackingCodeEventType_DefenderAlertOver = 0x6,
    HackingCodeEventType_DefenderSpottedIntruder = 0x7,
    HackingCodeEventType_DefenderLostIntruder = 0x8,
    HackingCodeEventType_DefenderStartedSwap = 0x9,
    HackingCodeEventType_DefenderCompletedSwap = 0xa,
    HackingCodeEventType_LinkPointActivated = 0xb,
    HackingCodeEventType_LinkPointDeactivated = 0xc,
    HackingCodeEventType_LinkPointLinked = 0xd,
    HackingCodeEventType_LinkPointUnlinked = 0xe,
    HackingCodeEventType_IntruderCaptured = 0xf,
    HackingCodeEventType_HackTimedOut = 0x10,
    HackingCodeEventType_HackAborted = 0x11,
    HackingCodeEventType_HackSuccessful = 0x12,
    HackingCodeEventType_UNDEFINED = 0x13,
};


enum HandholdType {
    HandholdType_Fixed = 0x0,
    HandholdType_Cylinder = 0x1,
    HandholdType_Corner = 0x2,
    HandholdType_UNDEFINED = 0x3,
};


enum HarvestableOverrideAreaType {
    HarvestableOverrideAreaType_AutoRegisterWithZoneHost = 0x0,
    HarvestableOverrideAreaType_ManualEntityLink = 0x1,
    HarvestableOverrideAreaType_UNDEFINED = 0x2,
};


enum HintEventType {
    HintEventType_None = 0x0,
    HintEventType_ActorStatusBuffApplied = 0x1,
    HintEventType_ActorStatusClothingChanged = 0x2,
    HintEventType_ActorStatusDeadlyInjuryStarted = 0x3,
    HintEventType_ActorStatusDigestionAbsorptionEmpty = 0x4,
    HintEventType_ActorStatusDownedEnter = 0x5,
    HintEventType_ActorStatusEffectArmsLockCannotClimbLadder = 0x6,
    HintEventType_ActorStatusEffectArmsLockCannotMantle = 0x7,
    HintEventType_ActorStatusEffectArmsLockCannotSteerShip = 0x8,
    HintEventType_ActorStatusEffectArmsLockCannotRestrain = 0x9,
    HintEventType_ActorStatusEffectArmsLockCannotTakeDown = 0xa,
    HintEventType_ActorStatusEffectArmsLockCannotUseMountedGun = 0xb,
    HintEventType_ActorStatusEffectArmsLockCannotUseTrolley = 0xc,
    HintEventType_ActorStatusEffectArmsLockDropItem = 0xd,
    HintEventType_ActorStatusEffectArmsLockLowerWeapon = 0xe,
    HintEventType_ActorStatusEffectArmsLockStart = 0xf,
    HintEventType_ActorStatusEffectBleedStart = 0x10,
    HintEventType_ActorStatusEffectProneLockStart = 0x11,
    HintEventType_ActorStatusFoodDrinkItemHeld = 0x12,
    HintEventType_ActorStatusFoodDrinkItemInInventory = 0x13,
    HintEventType_ActorStatusHospitalEnter = 0x14,
    HintEventType_ActorStatusHospitalRoomReserved = 0x15,
    HintEventType_ActorStatusHungerThirstDamageStarted = 0x16,
    HintEventType_ActorStatusHungerThirstDeath = 0x17,
    HintEventType_ActorStatusHungerThirstFull = 0x18,
    HintEventType_ActorStatusHungerThirstStatusStarted = 0x19,
    HintEventType_ActorStatusHyperthermiaDamageStarted = 0x1a,
    HintEventType_ActorStatusHyperthermiaStarted = 0x1b,
    HintEventType_ActorStatusHypothermiaDamageStarted = 0x1c,
    HintEventType_ActorStatusHypothermiaStarted = 0x1d,
    HintEventType_ActorStatusInjuryStarted = 0x1e,
    HintEventType_ActorStatusIntoxicatedEnter = 0x1f,
    HintEventType_ActorStatusMajorInjuryStarted = 0x20,
    HintEventType_ActorStatusMedBedEnter = 0x21,
    HintEventType_ActorStatusOverdoseDamageStarted = 0x22,
    HintEventType_ActorStatusOverdoseDeath = 0x23,
    HintEventType_ActorStatusOverdoseEnter = 0x24,
    HintEventType_ActorStatusPITMenuDrugs = 0x25,
    HintEventType_ActorStatusRespawnMedBed = 0x26,
    HintEventType_ActorStatusRespawnLocationSet = 0x27,
    HintEventType_ActorStatusRespawnCriminal = 0x28,
    HintEventType_ActorStatusRespawnPrison = 0x29,
    HintEventType_ActorStatusTemperatureAboveMaxResistance = 0x2a,
    HintEventType_ActorStatusTemperatureBelowMinResistance = 0x2b,
    HintEventType_ActorStatusTemperatureDeath = 0x2c,
    HintEventType_ActorStatusWearingHelmetConsume = 0x2d,
    HintEventType_ActorStatusWeatherLocomotionEntered = 0x2e,
    HintEventType_AlignShipForCargoTransfer = 0x2f,
    HintEventType_ASOPShipSpawned = 0x30,
    HintEventType_BodyDrag_Start = 0x31,
    HintEventType_CargoTransferInterruptions = 0x32,
    HintEventType_ChatOpened = 0x33,
    HintEventType_CollectCargoFromLoadingArea = 0x34,
    HintEventType_ConsumableFirstMiningConsumableBought = 0x35,
    HintEventType_ConsumableFirstMiningWithConsumablesEquipped = 0x36,
    HintEventType_ConsumableMiningConsumableExpired = 0x37,
    HintEventType_ConsumableMiningConsumableExpiredNoCharges = 0x38,
    HintEventType_ConsumableMiningConsumableUsed = 0x39,
    HintEventType_ContactsOpened = 0x3a,
    HintEventType_CorpseMarkerShown = 0x3b,
    HintEventType_CustomizeACLoadoutMenuEntered = 0x3c,
    HintEventType_CustomizeSMLoadoutMenuEntered = 0x3d,
    HintEventType_DeliverCargoToLoadingArea = 0x3e,
    HintEventType_FPSMiningAttachmentPurchased = 0x3f,
    HintEventType_FPSMiningFinishedRockScan = 0x40,
    HintEventType_FPSMiningRockFracturedBad = 0x41,
    HintEventType_FPSMiningRockFracturedGood = 0x42,
    HintEventType_FPSMiningRockNearby = 0x43,
    HintEventType_FPSMiningRockPowerDangerLevel = 0x44,
    HintEventType_FPSMiningRockPowerOptimalLevel = 0x45,
    HintEventType_FPSMiningRockTargetedNotADS = 0x46,
    HintEventType_FPSMiningShotEnvironment = 0x47,
    HintEventType_FPSMiningShotRockADS = 0x48,
    HintEventType_FPSMiningWeaponSelected = 0x49,
    HintEventType_GreenZoneEntered = 0x4a,
    HintEventType_GreenZoneExited = 0x4b,
    HintEventType_HailCargoServicesForLoading = 0x4c,
    HintEventType_HarvestableInHandBackpackNotFull = 0x4d,
    HintEventType_HarvestableNotInHand = 0x4e,
    HintEventType_HarvestablePlayerLooksAtHarvestableBackpackNotFull = 0x4f,
    HintEventType_HarvestablePlayerLooksAtHarvestableNoBackpack = 0x50,
    HintEventType_HintAreaEntered = 0x51,
    HintEventType_HintAreaExited = 0x52,
    HintEventType_HullC_CargoRequiresSpindlesExtended = 0x53,
    HintEventType_InGameStateBegin = 0x54,
    HintEventType_InteractionModeEntered = 0x55,
    HintEventType_InteractionModeExited = 0x56,
    HintEventType_InteractionConditionGeneric = 0x57,
    HintEventType_InteractionConditionSpecific = 0x58,
    HintEventType_KnockdownStarted = 0x59,
    HintEventType_LegallyLandedShipStarted = 0x5a,
    HintEventType_LogoutEntered = 0x5b,
    HintEventType_LogoutEnteredNonOwned = 0x5c,
    HintEventType_LogoutEnteredNoPlayersAround = 0x5d,
    HintEventType_LogoutEnteredPlayersAround = 0x5e,
    HintEventType_LogoutEnteredPlayersInShip = 0x5f,
    HintEventType_LogoutRespawnFailed = 0x60,
    HintEventType_LogoutEnteredShipInShip = 0x61,
    HintEventType_LogoutEnteredNonPersistent = 0x62,
    HintEventType_MedBeamEquippedMedgun = 0x63,
    HintEventType_MedBeamEquippedMultiTool = 0x64,
    HintEventType_MedBeamSelfHealPrompt = 0x65,
    HintEventType_MedBeamSelfHealDescription = 0x66,
    HintEventType_MedBeamValidTargetAcquired = 0x67,
    HintEventType_MedBeamValidTargetAcquiredIsHurt = 0x68,
    HintEventType_MedBeamBDLTooHighMedgun = 0x69,
    HintEventType_MedBeamBDLTooHighMultiTool = 0x6a,
    HintEventType_MedBeamMedgunToggleAdvancedMode = 0x6b,
    HintEventType_MedBeamMedgunOnAdvancedModeActivated = 0x6c,
    HintEventType_MedBeamMedgunAdvancedModeButtons = 0x6d,
    HintEventType_MedBeamMedgunAdvancedModeSafeBDLBypass = 0x6e,
    HintEventType_MedBeamMedgunAdvancedModeCriticalBDLBypass = 0x6f,
    HintEventType_MedBedClearAllRespawns = 0x70,
    HintEventType_MedBedEraseDNA = 0x71,
    HintEventType_MedBedRespawnNotAvailable = 0x72,
    HintEventType_MedBedRespawnOutOfRange = 0x73,
    HintEventType_MedBedUploadDNA = 0x74,
    HintEventType_MedpenStabBlockedInGreenZone = 0x75,
    HintEventType_MeleeEquip = 0x76,
    HintEventType_MeleeLightAttacks = 0x77,
    HintEventType_MeleeHooks = 0x78,
    HintEventType_MeleeHaymaker = 0x79,
    HintEventType_MeleeUppercut = 0x7a,
    HintEventType_MeleeCombinationAttacks = 0x7b,
    HintEventType_MeleeBlocking = 0x7c,
    HintEventType_MeleeDodging = 0x7d,
    HintEventType_MeleeStun = 0x7e,
    HintEventType_MeleeKnifeEquip = 0x7f,
    HintEventType_MeleeKnifeLight = 0x80,
    HintEventType_MeleeKnifeHeavy = 0x81,
    HintEventType_MeleeTakedownGun = 0x82,
    HintEventType_MeleeTakedownFists = 0x83,
    HintEventType_MeleeTakedownWeapon = 0x84,
    HintEventType_MeleeTakedownStop = 0x85,
    HintEventType_MFDFocusEntered = 0x86,
    HintEventType_MFDFocusExited = 0x87,
    HintEventType_MiningExtractableRockTargeted = 0x88,
    HintEventType_MiningFracturableRockTargeted = 0x89,
    HintEventType_MiningModeSwitch = 0x8a,
    HintEventType_MiningNoProgress = 0x8b,
    HintEventType_MiningRadarBlobFound = 0x8c,
    HintEventType_MiningRockExtracted = 0x8d,
    HintEventType_MiningRockFractured = 0x8e,
    HintEventType_MiningRockInPassiveRadar = 0x8f,
    HintEventType_MiningRockPowerDangerLevel = 0x90,
    HintEventType_MiningRockPowerOptimalLevel = 0x91,
    HintEventType_MiningShipCargoFull = 0x92,
    HintEventType_MiningShipCargoHalfFull = 0x93,
    HintEventType_MiningShipIsFlightReady = 0x94,
    HintEventType_MiningShipLowMoonOrbit = 0x95,
    HintEventType_MobiGlasOpened = 0x96,
    HintEventType_MobiGlasClosed = 0x97,
    HintEventType_MobiGlasJournalOpened = 0x98,
    HintEventType_MobiGlasMissionManagerOpened = 0x99,
    HintEventType_MonitoredZoneEntered = 0x9a,
    HintEventType_MonitoredZoneExited = 0x9b,
    HintEventType_OxygenDroppedTo50pcHasCapsules = 0x9c,
    HintEventType_OxygenDroppedTo50pcNoCapsules = 0x9d,
    HintEventType_OxygenDroppedTo25pcHasCapsules = 0x9e,
    HintEventType_OxygenDroppedTo25pcNoCapsules = 0x9f,
    HintEventType_OxygenRefilled = 0xa0,
    HintEventType_PersonalInnerThoughtClosed = 0xa1,
    HintEventType_PersonalInnerThoughtOpened = 0xa2,
    HintEventType_PersonalInnerThoughtQuickSelectionMode = 0xa3,
    HintEventType_PersonalInnerThoughtQuickSelectionWeaponsOpened = 0xa4,
    HintEventType_PersonalInnerThoughtQuickSelectionModeOpened = 0xa5,
    HintEventType_PersonalInnerThoughtGreyedOutActions = 0xa6,
    HintEventType_PersonalInnerThoughtAddToFavorites = 0xa7,
    HintEventType_PersonalInnerThoughtTriedToCustomizeDefaultActions = 0xa8,
    HintEventType_PersonalInnerThoughtCancelRebind = 0xa9,
    HintEventType_PersonalInventoryBackpackFull = 0xaa,
    HintEventType_PersonalInventoryHarvestableLootedIntoBackpack = 0xab,
    HintEventType_PersonalInventoryItemStowed = 0xac,
    HintEventType_PersonalInventoryShardLootedIntoBackpack = 0xad,
    HintEventType_PersonalInventoryHarvestableDirectlyStowedIntoBackpack = 0xae,
    HintEventType_PersonalInventoryUndersuitClothingIncompatible = 0xaf,
    HintEventType_PersonalInventoryOpen = 0xb0,
    HintEventType_PersonalInventoryHomeItemAdded = 0xb1,
    HintEventType_PersonalInventoryItemPurchased = 0xb2,
    HintEventType_PersonalInventoryContainerSizeLimits = 0xb3,
    HintEventType_PersonalInventoryContainerFull = 0xb4,
    HintEventType_PersonalInventoryVehicleEnter = 0xb5,
    HintEventType_PersonalInventoryOpenInVehicle = 0xb6,
    HintEventType_PersonalInventoryVehicleStorageUsed = 0xb7,
    HintEventType_PersonalInventoryVehicleDestroyed = 0xb8,
    HintEventType_PersonalInventoryOpenWithNoAvailableContainer = 0xb9,
    HintEventType_PersonalInventoryInvalidClothingArmorEquip = 0xba,
    HintEventType_PersonalInventoryOutOfRange = 0xbb,
    HintEventType_PickupCollected = 0xbc,
    HintEventType_PlayerCombatHealed = 0xbd,
    HintEventType_PlayerEnteredEVA = 0xbe,
    HintEventType_PlayerGotAKill = 0xbf,
    HintEventType_PlayerLowHealth = 0xc0,
    HintEventType_PlayerPickupItem = 0xc1,
    HintEventType_PlayerStowItem = 0xc2,
    HintEventType_PlayerThrewItem = 0xc3,
    HintEventType_PlayerWasKilled = 0xc4,
    HintEventType_PlayerWasKilledByGrenade = 0xc5,
    HintEventType_PrivateMatchMenuEntered = 0xc6,
    HintEventType_RepairBeam_AmmoEmpty = 0xc7,
    HintEventType_RepairBeam_HullOverview = 0xc8,
    HintEventType_RepairBeam_Repairing = 0xc9,
    HintEventType_RepairBeam_VehicleTargetAquired = 0xca,
    HintEventType_Restrain = 0xcb,
    HintEventType_RestrictedAreaTunnelActivatedLanding = 0xcc,
    HintEventType_RestrictedAreaTunnelActivatedTakeoff = 0xcd,
    HintEventType_RestrictedAreaTunnelEdge = 0xce,
    HintEventType_RestrictedAreaTunnelNearby = 0xcf,
    HintEventType_SalvageBeam_AmmoFull = 0xd0,
    HintEventType_SalvageBeam_HullOverview = 0xd1,
    HintEventType_SalvageBeam_MaterialDepleeted = 0xd2,
    HintEventType_SalvageBeam_Salvaging = 0xd3,
    HintEventType_SalvageBeam_VehicleTargetAquired = 0xd4,
    HintEventType_SalvageRepairBeam_Shields = 0xd5,
    HintEventType_SalvageRepairBeam_SwitchFireMode = 0xd6,
    HintEventType_ScanModeEntered = 0xd7,
    HintEventType_ScanModeExited = 0xd8,
    HintEventType_ShipAfterburnerOn = 0xd9,
    HintEventType_ShipBoostOn = 0xda,
    HintEventType_ShipCollision = 0xdb,
    HintEventType_ShipCritPartHealthDroppedTo25pc = 0xdc,
    HintEventType_ShipOverallHealthDroppedTo75pc = 0xdd,
    HintEventType_ShipAnyPartAndItemDamaged = 0xde,
    HintEventType_ShipDecoupledOn = 0xdf,
    HintEventType_ShipGSafeToggle = 0xe0,
    HintEventType_ShipHitByGun = 0xe1,
    HintEventType_ShipHitByMissile = 0xe2,
    HintEventType_ShipIsFlightReady = 0xe3,
    HintEventType_ShipEnteringLandingArea = 0xe4,
    HintEventType_ShipLandingGearRaised = 0xe5,
    HintEventType_ShipLandingGearLowered = 0xe6,
    HintEventType_ShipPitchedOrYawedOnce = 0xe7,
    HintEventType_ShipHydrogenFuelDroppedTo25pc = 0xe8,
    HintEventType_ShipHydrogenFuelDroppedTo75pc = 0xe9,
    HintEventType_ShipHydrogenFuelRefilled = 0xea,
    HintEventType_ShipQuantumFuelDroppedTo25pc = 0xeb,
    HintEventType_ShipQuantumFuelDroppedTo75pc = 0xec,
    HintEventType_ShipQuantumFuelRefilled = 0xed,
    HintEventType_ShipQuantumTravelObstructed = 0xee,
    HintEventType_ShipQuantumDriveSpoolingStarted = 0xef,
    HintEventType_ShipQuantumDriveSpoolingOff = 0xf0,
    HintEventType_ShipQuantumDriveTriedSpoolingInCooldown = 0xf1,
    HintEventType_ShipQuantumCalibrationStarted = 0xf2,
    HintEventType_ShipQuantumCalibrationCompletedButNotSpooled = 0xf3,
    HintEventType_ShipQuantumCalibrationStalled = 0xf4,
    HintEventType_ShipQuantumNoCalibrationButSpooled = 0xf5,
    HintEventType_ShipQuantumCalibratedSpooledAlone = 0xf6,
    HintEventType_ShipQuantumCalibratedSpooledInGroup = 0xf7,
    HintEventType_ShipSeatEntered = 0xf8,
    HintEventType_ShipShieldsDown = 0xf9,
    HintEventType_ShipZoneEntered = 0xfa,
    HintEventType_ShipTakenOff = 0xfb,
    HintEventType_ShipThrottledUpOnce = 0xfc,
    HintEventType_ShipStartedPreRampUp = 0xfd,
    HintEventType_ShipStartedQuantumTravel = 0xfe,
    HintEventType_ShipEndedQuantumTravel = 0xff,
    HintEventType_ShipEndedPostRampDown = 0x100,
    HintEventType_ShipAbortedQuantumTravel = 0x101,
    HintEventType_ShipWeaponGroup2Fired = 0x102,
    HintEventType_ShipWeaponsFired = 0x103,
    HintEventType_ShipMissilesDroppedTo25pc = 0x104,
    HintEventType_ShipMissilesRefilled = 0x105,
    HintEventType_ShipBulletsDroppedTo25pc = 0x106,
    HintEventType_ShipBulletsRefilled = 0x107,
    HintEventType_ShoppingTryOnInspectEnter = 0x108,
    HintEventType_ShoppingTryOnInspectExit = 0x109,
    HintEventType_SignatureSystemPingAngleChanged = 0x10a,
    HintEventType_SignatureSystemPingTriggered = 0x10b,
    HintEventType_SignatureSystemScanAbandonned = 0x10c,
    HintEventType_SignatureSystemScanCompleted = 0x10d,
    HintEventType_SignatureSystemScanModeEntered = 0x10e,
    HintEventType_SignatureSystemScanModeExited = 0x10f,
    HintEventType_SignatureSystemScanStarted = 0x110,
    HintEventType_SignatureSystemScanZoomChanged = 0x111,
    HintEventType_SpawnPointEnter = 0x112,
    HintEventType_SpawnPointExit = 0x113,
    HintEventType_StaminaDroppedTo90pc = 0x114,
    HintEventType_StaminaDroppedTo25pc = 0x115,
    HintEventType_StartGame = 0x116,
    HintEventType_TrackviewButtonPressedAllowSwitch = 0x117,
    HintEventType_TrackviewButtonPressedDontAllowSwitch = 0x118,
    HintEventType_TrackviewCameraSwitchTimeOut = 0x119,
    HintEventType_TrackviewCameraSwitchedTo1P = 0x11a,
    HintEventType_TractorBeamPlayerEquipped = 0x11b,
    HintEventType_TractorBeamTetheredToTarget = 0x11c,
    HintEventType_TractorBeamDistControlUsed = 0x11d,
    HintEventType_TractorBeamTetherBrokenDistance = 0x11e,
    HintEventType_TractorBeamTargetedTooHeavyObject = 0x11f,
    HintEventType_TractorBeamTargetedTooLargeObject = 0x120,
    HintEventType_TractorBeamEnteredZeroG = 0x121,
    HintEventType_TractorBeamLineOfSightBroken = 0x122,
    HintEventType_TractorBeamTetherBrokenFastMovement = 0x123,
    HintEventType_UnboundKeyShown = 0x124,
    HintEventType_UsableEntered = 0x125,
    HintEventType_UsableExited = 0x126,
    HintEventType_VolatileCargoCollected = 0x127,
    HintEventType_VolatileCargoCollectedFirstTime = 0x128,
    HintEventType_VolatileCargoCritical = 0x129,
    HintEventType_VolatileCargoExplodedNoDeath = 0x12a,
    HintEventType_VolatileCargoJettisoned = 0x12b,
    HintEventType_VolatileCargoLightOnCritical = 0x12c,
    HintEventType_VolatileCargoLightOnWarning = 0x12d,
    HintEventType_WantedLevelIncreased = 0x12e,
    HintEventType_WeaponADSActivateNightvision = 0x12f,
    HintEventType_WeaponADSActivateZoom = 0x130,
    HintEventType_WeaponADSUsed = 0x131,
    HintEventType_WeaponADSZoomedOut = 0x132,
    HintEventType_WeaponZeroingEnteredADSManual = 0x133,
    HintEventType_WeaponZeroingEnteredADSAuto = 0x134,
    HintEventType_WeaponZeroingAutoSet = 0x135,
    HintEventType_EVENTSCOUNT = 0x136,
    HintEventType_UNDEFINED = 0x137,
};


enum HitReactionPart {
    HitReactionPart_Head = 0x0,
    HitReactionPart_Torso = 0x1,
    HitReactionPart_Crotch = 0x2,
    HitReactionPart_LegLeft = 0x3,
    HitReactionPart_LegRight = 0x4,
};


enum HitReactionRegion {
    HitReactionRegion_Head = 0x0,
    HitReactionRegion_UpperBody = 0x1,
    HitReactionRegion_LowerBody = 0x2,
};


enum InnerThoughtDisplayType {
    InnerThoughtDisplayType_Show = 0x0,
    InnerThoughtDisplayType_Hide = 0x1,
    InnerThoughtDisplayType_ForeignOnly = 0x2,
    InnerThoughtDisplayType_UNDEFINED = 0x3,
};


enum InnerThoughtJustification {
    InnerThoughtJustification_Left = 0x0,
    InnerThoughtJustification_Middle = 0x1,
    InnerThoughtJustification_Right = 0x2,
    InnerThoughtJustification_UNDEFINED = 0x3,
};


enum InnerThoughtOrientation {
    InnerThoughtOrientation_RotateToPlayer = 0x0,
    InnerThoughtOrientation_FixedRotation = 0x1,
    InnerThoughtOrientation_UNDEFINED = 0x2,
};


enum InnerThought_ForceCase {
    InnerThought_ForceCase_None = 0x0,
    InnerThought_ForceCase_Upper = 0x1,
    InnerThought_ForceCase_Lower = 0x2,
};


enum InputDeviceType {
    InputDeviceType_Keyboard = 0x0,
    InputDeviceType_Mouse = 0x1,
    InputDeviceType_Joystick = 0x2,
    InputDeviceType_Gamepad = 0x3,
    InputDeviceType_Headmounted = 0x4,
    InputDeviceType_Count = 0x5,
    InputDeviceType_AllInputs = 0x1f,
    InputDeviceType_Unknown = 0xffff,
};


enum InstancedInteriorSizeEnum {
    InstancedInteriorSizeEnum_Small = 0x0,
    InstancedInteriorSizeEnum_Medium = 0x1,
    InstancedInteriorSizeEnum_Large = 0x2,
    InstancedInteriorSizeEnum_XLarge = 0x3,
    InstancedInteriorSizeEnum_UNDEFINED = 0x4,
};


enum InstancedInteriorTechLevelEnum {
    InstancedInteriorTechLevelEnum_HighTech = 0x0,
    InstancedInteriorTechLevelEnum_LowTech = 0x1,
    InstancedInteriorTechLevelEnum_UNDEFINED = 0x2,
};


enum InteractionBindingsMethod {
    InteractionBindingsMethod_None = 0x0,
    InteractionBindingsMethod_Name = 0x1,
    InteractionBindingsMethod_States = 0x2,
};


enum InteractionGenericCursor {
    InteractionGenericCursor_SingleAction = 0x0,
    InteractionGenericCursor_MultiAction = 0x1,
    InteractionGenericCursor_Button = 0x2,
    InteractionGenericCursor_Grab = 0x3,
    InteractionGenericCursor_Conversation = 0x4,
    InteractionGenericCursor_Invalid = 0x5,
    InteractionGenericCursor_UNDEFINED = 0x6,
};


enum InteractionModifier {
    InteractionModifier_DefaultStanding = 0x0,
    InteractionModifier_Crouch = 0x1,
    InteractionModifier_Prone = 0x2,
    InteractionModifier_Linked = 0x3,
    InteractionModifier_EVA = 0x4,
    InteractionModifier_UNDEFINED = 0x5,
};


enum InteractionPromptBoundTo {
    InteractionPromptBoundTo_ActorEyes = 0x0,
    InteractionPromptBoundTo_EntityRoot = 0x1,
    InteractionPromptBoundTo_TopBoundingBoxZSurface = 0x2,
    InteractionPromptBoundTo_NearestBoundingBoxSurface = 0x3,
    InteractionPromptBoundTo_NearestBoundingBoxIgnoreFurthestSurfaces = 0x4,
    InteractionPromptBoundTo_InteractionPointFixedOffset = 0x5,
    InteractionPromptBoundTo_Tmp_AngleConstraintForwardDirection = 0x6,
    InteractionPromptBoundTo_UNDEFINED = 0x7,
};


enum InteractiveVariableLoopType {
    InteractiveVariableLoopType_NoLoop = 0x0,
    InteractiveVariableLoopType_Loop = 0x1,
    InteractiveVariableLoopType_UNDEFINED = 0x2,
};


enum InterpolationMode {
    InterpolationMode_Linear = 0x0,
    InterpolationMode_EaseInQuad = 0x1,
    InterpolationMode_EaseOutQuad = 0x2,
    InterpolationMode_EaseInOutQuad = 0x3,
    InterpolationMode_EaseInCubic = 0x4,
    InterpolationMode_EaseOutCubic = 0x5,
    InterpolationMode_EaseInOutCubic = 0x6,
    InterpolationMode_EaseInExpo = 0x7,
    InterpolationMode_EaseOutExpo = 0x8,
    InterpolationMode_EaseInOutExpo = 0x9,
};


enum InventoryContainerType {
    InventoryContainerType_Closed = 0x0,
    InventoryContainerType_Open = 0x1,
    InventoryContainerType_OpenAlways = 0x2,
    InventoryContainerType_UNDEFINED = 0x3,
};


enum ItemJumpDriveState {
    ItemJumpDriveState_Idle = 0x0,
    ItemJumpDriveState_EntryChecks = 0x1,
    ItemJumpDriveState_Tuning = 0x2,
    ItemJumpDriveState_RequestingJump = 0x3,
    ItemJumpDriveState_WaitingForOpen = 0x4,
    ItemJumpDriveState_Entering = 0x5,
    ItemJumpDriveState_Transiting = 0x6,
    ItemJumpDriveState_Exiting = 0x7,
    ItemJumpDriveState_Failing = 0x8,
    ItemJumpDriveState_UNDEFINED = 0x9,
};


enum ItemKioskMode {
    ItemKioskMode_Commodity = 0x0,
    ItemKioskMode_Reference = 0x1,
    ItemKioskMode_Vehicle = 0x2,
    ItemKioskMode_Player = 0x3,
    ItemKioskMode_Refinery = 0x4,
    ItemKioskMode_UNDEFINED = 0x5,
};


enum ItemResourceDeltaType {
    ItemResourceDeltaType_Consumption = 0x0,
    ItemResourceDeltaType_Generation = 0x1,
    ItemResourceDeltaType_Storage = 0x2,
    ItemResourceDeltaType_Conversion = 0x3,
    ItemResourceDeltaType_NetworkReflection = 0x4,
    ItemResourceDeltaType_INVALID = 0x5,
    ItemResourceDeltaType_UNDEFINED = 0x6,
};


enum ItemResourceTypes {
    ItemResourceTypes_Vent = 0x0,
    ItemResourceTypes_LifeSupport = 0x1,
    ItemResourceTypes_Light = 0x2,
    ItemResourceTypes_HeatSource = 0x3,
    ItemResourceTypes_GravityGenerator = 0x4,
    ItemResourceTypes_Cooler = 0x5,
    ItemResourceTypes_Relay = 0x6,
    ItemResourceTypes_Misc = 0x7,
    ItemResourceTypes_All = 0x8,
    ItemResourceTypes_UNDEFINED = 0x9,
};


enum JumpVariant {
    JumpVariant_Default = 0x0,
    JumpVariant_Vault = 0x1,
    JumpVariant_ZeroG = 0x2,
    JumpVariant_KnockdownForward = 0x3,
    JumpVariant_KnockdownBackward = 0x4,
    JumpVariant_LadderDisembark = 0x5,
};


enum KioskShopType {
    KioskShopType_Commodity = 0x0,
    KioskShopType_ShipItem = 0x1,
    KioskShopType_Refinery = 0x2,
    KioskShopType_UNDEFINED = 0x3,
};


enum LandingCondition {
    LandingCondition_None = 0x0,
    LandingCondition_ADSTriggered = 0x1,
    LandingCondition_UNDEFINED = 0x2,
};


enum LandingExitStance {
    LandingExitStance_Stand = 0x0,
    LandingExitStance_Crouch = 0x1,
    LandingExitStance_Prone = 0x2,
    LandingExitStance_ProneBack = 0x3,
    LandingExitStance_UNDEFINED = 0x4,
};


enum LandingStrength {
    LandingStrength_Light = 0x0,
    LandingStrength_Medium = 0x1,
    LandingStrength_Heavy = 0x2,
    LandingStrength_Impact = 0x3,
};


enum LeanStateType {
    LeanStateType_Idle = 0x0,
    LeanStateType_LeanLeft = 0x1,
    LeanStateType_LeanRight = 0x2,
    LeanStateType_LeftToIdle = 0x3,
    LeanStateType_IdleToLeft = 0x4,
    LeanStateType_IdleToRight = 0x5,
    LeanStateType_RightToIdle = 0x6,
    LeanStateType_LeftToRight = 0x7,
    LeanStateType_RightToLeft = 0x8,
};


enum LedgeHeight {
    LedgeHeight_Low = 0x0,
    LedgeHeight_Medium = 0x1,
    LedgeHeight_High = 0x2,
    LedgeHeight_Ultra = 0x3,
};


enum LedgeTransition {
    LedgeTransition_Vault = 0x0,
    LedgeTransition_Mantle = 0x1,
};


enum LegacyCraftingPortMode {
    LegacyCraftingPortMode_Both = 0x0,
    LegacyCraftingPortMode_Input = 0x1,
    LegacyCraftingPortMode_Output = 0x2,
    LegacyCraftingPortMode_UNDEFINED = 0x3,
};


enum LevelStreamingMode {
    LevelStreamingMode_Never = 0x0,
    LevelStreamingMode_Always = 0x1,
    LevelStreamingMode_ForTesting = 0x2,
};


enum LightProperties {
    LightProperties_Radius = 0x0,
    LightProperties_DiffuseColor = 0x1,
    LightProperties_Intensity = 0x2,
    LightProperties_UNDEFINED = 0x3,
};


enum LightningStrengthPropertyType {
    LightningStrengthPropertyType_Distance = 0x0,
    LightningStrengthPropertyType_ElectricalCharge = 0x1,
    LightningStrengthPropertyType_UNDEFINED = 0x2,
};


enum LinkedStatReverseSignFlag {
    LinkedStatReverseSignFlag_None = 0x0,
    LinkedStatReverseSignFlag_AlwaysPositive = 0x1,
    LinkedStatReverseSignFlag_AlwaysNegative = 0x2,
    LinkedStatReverseSignFlag_ReverseSign = 0x3,
    LinkedStatReverseSignFlag_UNDEFINED = 0x4,
};


enum MapDisplayFrameType {
    MapDisplayFrameType_Rectangle2D = 0x0,
    MapDisplayFrameType_Rectangle2DRTT = 0x1,
    MapDisplayFrameType_Ellipse2D = 0x2,
    MapDisplayFrameType_Ellipse2DRTT = 0x3,
    MapDisplayFrameType_Sphere3D = 0x4,
    MapDisplayFrameType_None = 0x5,
    MapDisplayFrameType_UNDEFINED = 0x6,
};


enum MapMarkerTrackingPlaneAlignmentMode {
    MapMarkerTrackingPlaneAlignmentMode_GalacticPlane = 0x0,
    MapMarkerTrackingPlaneAlignmentMode_Player = 0x1,
    MapMarkerTrackingPlaneAlignmentMode_UNDEFINED = 0x2,
};


enum MarkerClippingVolumeType {
    MarkerClippingVolumeType_Sphere = 0x0,
    MarkerClippingVolumeType_Cuboid = 0x1,
    MarkerClippingVolumeType_Frustum = 0x2,
    MarkerClippingVolumeType_Camera = 0x3,
    MarkerClippingVolumeType_UNDEFINED = 0x4,
};


enum MarkerTrackingActions {
    MarkerTrackingActions_None = 0x0,
    MarkerTrackingActions_SelectMarker = 0x1,
    MarkerTrackingActions_FocusMarker = 0x2,
    MarkerTrackingActions_LockTarget = 0x3,
    MarkerTrackingActions_PinTarget = 0x4,
    MarkerTrackingActions_HailContact = 0x5,
    MarkerTrackingActions_QuantumTravel = 0x6,
    MarkerTrackingActions_UNDEFINED = 0x7,
};


enum Marker_ARCullingCategory {
    Marker_ARCullingCategory_Unassigned = 0x0,
    Marker_ARCullingCategory_Special_Hostile = 0x1,
    Marker_ARCullingCategory_UnattendedVehicle = 0x2,
    Marker_ARCullingCategory_Vehicle = 0x3,
    Marker_ARCullingCategory_Vehicle_Ground = 0x4,
    Marker_ARCullingCategory_Actor = 0x5,
    Marker_ARCullingCategory_Turret = 0x6,
    Marker_ARCullingCategory_Navpoint = 0x7,
    Marker_ARCullingCategory_Mineable = 0x8,
    Marker_ARCullingCategory_Creature = 0x9,
    Marker_ARCullingCategory_Placeholder1 = 0xa,
    Marker_ARCullingCategory_Placeholder2 = 0xb,
    Marker_ARCullingCategory_Placeholder3 = 0xc,
};


enum Marker_DisplayMode {
    Marker_DisplayMode_FPS = 0x0,
    Marker_DisplayMode_VehicleSeat = 0x1,
};


enum Marker_MapBoxoutSectionType {
    Marker_MapBoxoutSectionType_Amenities = 0x0,
    Marker_MapBoxoutSectionType_Galactapedia = 0x1,
    Marker_MapBoxoutSectionType_Jurisdiction = 0x2,
};


enum Marker_MapDisplayMode {
    Marker_MapDisplayMode_DefaultRadar = 0x0,
    Marker_MapDisplayMode_DefaultStarmap = 0x1,
    Marker_MapDisplayMode_JumpTunnelRadar = 0x2,
    Marker_MapDisplayMode_JumpTunnelStarmap = 0x3,
    Marker_MapDisplayMode_None = 0x4,
};


enum Marker_MapLabelDisplayType {
    Marker_MapLabelDisplayType_Always = 0x0,
    Marker_MapLabelDisplayType_OnInteracted = 0x1,
    Marker_MapLabelDisplayType_OnParentSurface = 0x2,
    Marker_MapLabelDisplayType_OnSelected = 0x3,
};


enum Marker_StackPositionAlignment {
    Marker_StackPositionAlignment_Top = 0x0,
    Marker_StackPositionAlignment_Origin = 0x1,
    Marker_StackPositionAlignment_Center = 0x2,
    Marker_StackPositionAlignment_Bottom = 0x3,
    Marker_StackPositionAlignment_TopAndBottom = 0x4,
};


enum MaterialProperties {
    MaterialProperties_Glow = 0x0,
    MaterialProperties_Wear = 0x1,
    MaterialProperties_Dirt = 0x2,
    MaterialProperties_Damage = 0x3,
    MaterialProperties_Interference = 0x4,
    MaterialProperties_Dissolve = 0x5,
    MaterialProperties_Wetness = 0x6,
    MaterialProperties_UNDEFINED = 0x7,
};


enum MedBedTier {
    MedBedTier_Hospital = 0x0,
    MedBedTier_Clinic = 0x1,
    MedBedTier_Ambulance = 0x2,
    MedBedTier_UNDEFINED = 0x3,
};


enum MeleeAttackClass {
    MeleeAttackClass_Any = -0x1,
    MeleeAttackClass_Basic = 0x1,
    MeleeAttackClass_Synced = 0x2,
};


enum MessageState {
    MessageState_Normal = 0x0,
    MessageState_Moderate = 0x1,
    MessageState_Critical = 0x2,
};


enum MissionLocationResourcePriority {
    MissionLocationResourcePriority_Contract = 0x0,
    MissionLocationResourcePriority_Story = 0x1,
    MissionLocationResourcePriority_Event = 0x2,
    MissionLocationResourcePriority_UNDEFINED = 0x3,
};


enum MissionLocationTagType {
    MissionLocationTagType_General = 0x0,
    MissionLocationTagType_Produces = 0x1,
    MissionLocationTagType_Consumes = 0x2,
    MissionLocationTagType_UNDEFINED = 0x3,
};


enum Month {
    Month_January = 0x0,
    Month_February = 0x1,
    Month_March = 0x2,
    Month_April = 0x3,
    Month_May = 0x4,
    Month_June = 0x5,
    Month_July = 0x6,
    Month_August = 0x7,
    Month_September = 0x8,
    Month_October = 0x9,
    Month_November = 0xa,
    Month_December = 0xb,
    Month_UNDEFINED = 0xc,
};


enum MotionControlType {
    MotionControlType_Animation = 0x0,
    MotionControlType_Entity = 0x1,
};


enum MotionStateType {
    MotionStateType_Idle = 0x0,
    MotionStateType_Move = 0x1,
    MotionStateType_IdleToMove = 0x2,
    MotionStateType_MoveToIdle = 0x3,
    MotionStateType_Step = 0x4,
    MotionStateType_Turn = 0x5,
    MotionStateType_Juke = 0x6,
    MotionStateType_InAirIdle = 0x7,
    MotionStateType_InAirMove = 0x8,
};


enum MovementSet {
    MovementSet_Drunk = 0x1,
    MovementSet_Effort = 0x2,
    MovementSet_Hurt = 0x3,
    MovementSet_Movable = 0x4,
    MovementSet_Standard = 0x5,
    MovementSet_Stumble = 0x6,
};


enum MovementSetCondition {
    MovementSetCondition_StateMovable = 0x0,
    MovementSetCondition_StateBodyDragging = 0x1,
    MovementSetCondition_StateSubmerged = 0x2,
    MovementSetCondition_ForceBrace = 0x3,
    MovementSetCondition_ForceLean = 0x4,
    MovementSetCondition_ForceStumble = 0x5,
    MovementSetCondition_StatusHurt = 0x6,
    MovementSetCondition_StatusDrunk = 0x7,
};


enum MovementSpeed {
    MovementSpeed_WalkSlow = 0x0,
    MovementSpeed_WalkMid = 0x1,
    MovementSpeed_WalkFast = 0x2,
    MovementSpeed_RunSlow = 0x3,
    MovementSpeed_RunFast = 0x4,
    MovementSpeed_Sprint = 0x5,
};


enum NaturalMotionSpeed {
    NaturalMotionSpeed_WalkSlow = 0x0,
    NaturalMotionSpeed_WalkMid = 0x1,
    NaturalMotionSpeed_WalkFast = 0x2,
    NaturalMotionSpeed_RunSlow = 0x3,
    NaturalMotionSpeed_RunFast = 0x4,
    NaturalMotionSpeed_Sprint = 0x5,
    NaturalMotionSpeed_GreenZoneWalk = 0x6,
    NaturalMotionSpeed_GreenZoneSprint = 0x7,
    NaturalMotionSpeed_AimDownSight = 0x8,
    NaturalMotionSpeed_Lean = 0x9,
    NaturalMotionSpeed_Conversation = 0xa,
    NaturalMotionSpeed_UNDEFINED = 0xb,
};


enum NavPointIconEnum {
    NavPointIconEnum_Default = 0x0,
    NavPointIconEnum_Star = 0x1,
    NavPointIconEnum_Planet = 0x2,
    NavPointIconEnum_Moon = 0x3,
    NavPointIconEnum_Station = 0x4,
    NavPointIconEnum_Outpost = 0x5,
    NavPointIconEnum_LandingZone = 0x6,
    NavPointIconEnum_UNDEFINED = 0x7,
};


enum ParticleAttachToZone {
    ParticleAttachToZone_Parent = 0x0,
    ParticleAttachToZone_AboveParent = 0x1,
    ParticleAttachToZone_UNDEFINED = 0x2,
};


enum ParticleCPUVisAreaCullingMode {
    ParticleCPUVisAreaCullingMode_None = 0x0,
    ParticleCPUVisAreaCullingMode_Local = 0x1,
    ParticleCPUVisAreaCullingMode_Dynamic = 0x2,
    ParticleCPUVisAreaCullingMode_UNDEFINED = 0x3,
};


enum ParticleGPUVisAreaCullingMode {
    ParticleGPUVisAreaCullingMode_Default = 0x0,
    ParticleGPUVisAreaCullingMode_None = 0x1,
    ParticleGPUVisAreaCullingMode_PerParticle = 0x2,
    ParticleGPUVisAreaCullingMode_PerPixel = 0x3,
    ParticleGPUVisAreaCullingMode_UNDEFINED = 0x4,
};


enum ParticleTesselationOverride {
    ParticleTesselationOverride_Default = 0x0,
    ParticleTesselationOverride_Off = 0x1,
    ParticleTesselationOverride_Low = 0x2,
    ParticleTesselationOverride_Medium = 0x3,
    ParticleTesselationOverride_High = 0x4,
    ParticleTesselationOverride_Ultra = 0x5,
    ParticleTesselationOverride_UNDEFINED = 0x6,
};


enum PersistentItemGameModeFlag {
    PersistentItemGameModeFlag_Any = 0x0,
    PersistentItemGameModeFlag_StarMarine = 0x0,
    PersistentItemGameModeFlag_ArenaCommander = 0x1,
    PersistentItemGameModeFlag_PersistentUniverse = 0x2,
    PersistentItemGameModeFlag_SubscriberExclusive = 0x3,
    PersistentItemGameModeFlag_Prison = 0x4,
};


enum PersonalThoughtContext {
    PersonalThoughtContext_EVA = 0x0,
    PersonalThoughtContext_Flight = 0x1,
    PersonalThoughtContext_GroundVehicle = 0x2,
    PersonalThoughtContext_OnFoot = 0x3,
    PersonalThoughtContext_Seated = 0x4,
    PersonalThoughtContext_Turret = 0x5,
    PersonalThoughtContext_Usable = 0x6,
    PersonalThoughtContext_UNDEFINED = 0x7,
};


enum PickableCollision {
    PickableCollision_None = 0x0,
    PickableCollision_Transparent = 0x1,
    PickableCollision_Cutout = 0x2,
    PickableCollision_Opaque = 0x3,
};


enum PlanetAreaFitting {
    PlanetAreaFitting_Tight = 0x0,
    PlanetAreaFitting_Loose = 0x1,
};


enum PlanetAreaType {
    PlanetAreaType_Hole = 0x0,
    PlanetAreaType_ExcludeLarge = 0x1,
    PlanetAreaType_ExcludeAll = 0x2,
};


enum PostEffectParams {
    PostEffectParams_Global_DirectionalBlur_Vec = 0x0,
    PostEffectParams_ColorGrading_Brightness = 0x1,
    PostEffectParams_ColorGrading_Contrast = 0x2,
    PostEffectParams_ColorGrading_Saturation = 0x3,
    PostEffectParams_Dof_Active = 0x4,
    PostEffectParams_Dof_FocusDistance = 0x5,
    PostEffectParams_Dof_FocusRange = 0x6,
    PostEffectParams_Dof_FocusMin = 0x7,
    PostEffectParams_Dof_FocusMax = 0x8,
    PostEffectParams_Dof_MaxCoC = 0x9,
    PostEffectParams_Dof_BlurAmount = 0xa,
    PostEffectParams_Dof_User_Active = 0xb,
    PostEffectParams_Dof_User_FocusDistance = 0xc,
    PostEffectParams_Dof_User_FocusRange = 0xd,
    PostEffectParams_Dof_User_BlurAmount = 0xe,
    PostEffectParams_Dof_FocusMinZ = 0xf,
    PostEffectParams_Dof_FocusMinZScale = 0x10,
    PostEffectParams_FilterChromaShift_User_Amount = 0x11,
    PostEffectParams_FilterArtifacts_ChromaShift = 0x12,
    PostEffectParams_FilterGrain_Amount = 0x13,
    PostEffectParams_FilterArtifacts_Grain = 0x14,
    PostEffectParams_FilterArtifacts_GrainTile = 0x15,
    PostEffectParams_FilterBlurring_Amount = 0x16,
    PostEffectParams_FilterRadialBlurring_Amount = 0x17,
    PostEffectParams_FilterRadialBlurring_ScreenPosX = 0x18,
    PostEffectParams_FilterRadialBlurring_ScreenPosY = 0x19,
    PostEffectParams_FilterRadialBlurring_Radius = 0x1a,
    PostEffectParams_FlashBang_Active = 0x1b,
    PostEffectParams_FlashBang_DifractionAmount = 0x1c,
    PostEffectParams_FlashBang_Time = 0x1d,
    PostEffectParams_FlashBang_BlindAmount = 0x1e,
    PostEffectParams_GForce_BlackoutValue = 0x1f,
    PostEffectParams_GForce_RedoutValue = 0x20,
    PostEffectParams_GForce_LatStressValue = 0x21,
    PostEffectParams_GForce_BlackoutRecovery = 0x22,
    PostEffectParams_GForce_LatStressRecovery = 0x23,
    PostEffectParams_GForce_PulseAmplitude = 0x24,
    PostEffectParams_GForce_PulseMaskAmplitude = 0x25,
    PostEffectParams_GForce_PulsePeriod = 0x26,
    PostEffectParams_GForce_PulseDuration = 0x27,
    PostEffectParams_GForce_TunnelRadiusGrey = 0x28,
    PostEffectParams_GForce_TunnelRadiusBlack = 0x29,
    PostEffectParams_GForce_TunnelStrengthGrey = 0x2a,
    PostEffectParams_GForce_TunnelStrengthBlack = 0x2b,
    PostEffectParams_GForce_SaturationGrey = 0x2c,
    PostEffectParams_GForce_SaturationBlack = 0x2d,
    PostEffectParams_HudSilhouettes_Active = 0x2e,
    PostEffectParams_HudSilhouettes_Amount = 0x2f,
    PostEffectParams_HudSilhouettes_FillStr = 0x30,
    PostEffectParams_HudSilhouettes_EdgeWidth = 0x31,
    PostEffectParams_HudSilhouettes_BlurRadius = 0x32,
    PostEffectParams_HudSilhouettes_Type = 0x33,
    PostEffectParams_OcularMigraine_StrengthValue = 0x34,
    PostEffectParams_OcularMigraine_BlindspotSize = 0x35,
    PostEffectParams_OcularMigraine_SpectralOpacity = 0x36,
    PostEffectParams_OcularMigraine_BlindspotOpacity = 0x37,
    PostEffectParams_BloodVision_StrengthValue = 0x38,
    PostEffectParams_BloodVision_BloodAuraStrength = 0x39,
    PostEffectParams_BloodVision_AngularVelocityScaleX = 0x3a,
    PostEffectParams_BloodVision_AngularVelocityScaleY = 0x3b,
    PostEffectParams_SunShafts_Active = 0x3c,
    PostEffectParams_SunShafts_RaysAmount = 0x3d,
    PostEffectParams_SunShafts_RaysAttenuation = 0x3e,
    PostEffectParams_SunShafts_RaysCustomColor = 0x3f,
    PostEffectParams_tex_VisualArtifacts_Mask = 0x40,
    PostEffectParams_clr_VisualArtifacts_ColotTint = 0x41,
    PostEffectParams_VisualArtifacts_Vsync = 0x42,
    PostEffectParams_VisualArtifacts_VsyncFreq = 0x43,
    PostEffectParams_VisualArtifacts_Interlacing = 0x44,
    PostEffectParams_VisualArtifacts_InterlacingTile = 0x45,
    PostEffectParams_VisualArtifacts_InterlacingRot = 0x46,
    PostEffectParams_VisualArtifacts_Pixelation = 0x47,
    PostEffectParams_VisualArtifacts_Noise = 0x48,
    PostEffectParams_VisualArtifacts_SyncWaveFreq = 0x49,
    PostEffectParams_VisualArtifacts_SyncWavePhase = 0x4a,
    PostEffectParams_VisualArtifacts_SyncWaveAmplitude = 0x4b,
    PostEffectParams_WaterDroplets_Amount = 0x4c,
    PostEffectParams_ImageGhosting_Amount = 0x4d,
    PostEffectParams_Letterboxing_WidthAspectRatio = 0x4e,
    PostEffectParams_Letterboxing_HeightAspectRatio = 0x4f,
    PostEffectParams_Letterboxing_Progress = 0x50,
    PostEffectParams_UNDEFINED = 0x51,
};


enum PostureType {
    PostureType_Invalid = 0x0,
    PostureType_Peek = 0x1,
    PostureType_Aim = 0x2,
    PostureType_BlindFire = 0x3,
    PostureType_Throw = 0x4,
};


enum ProceduralAnimationBoneName {
    ProceduralAnimationBoneName_Hips = 0x0,
    ProceduralAnimationBoneName_Spine = 0x1,
    ProceduralAnimationBoneName_Spine1 = 0x2,
    ProceduralAnimationBoneName_Spine2 = 0x3,
    ProceduralAnimationBoneName_Spine3 = 0x4,
    ProceduralAnimationBoneName_Neck = 0x5,
    ProceduralAnimationBoneName_Neck1 = 0x6,
    ProceduralAnimationBoneName_Head = 0x7,
    ProceduralAnimationBoneName_HelmetCam = 0x8,
    ProceduralAnimationBoneName_Head_LowPass = 0x9,
    ProceduralAnimationBoneName_LeftShoulder = 0xa,
    ProceduralAnimationBoneName_RightShoulder = 0xb,
    ProceduralAnimationBoneName_LeftArm = 0xc,
    ProceduralAnimationBoneName_RightArm = 0xd,
    ProceduralAnimationBoneName_LeftForeArm = 0xe,
    ProceduralAnimationBoneName_RightForeArm = 0xf,
    ProceduralAnimationBoneName_LeftHand = 0x10,
    ProceduralAnimationBoneName_RightHand = 0x11,
    ProceduralAnimationBoneName_LeftFoot = 0x12,
    ProceduralAnimationBoneName_RightFoot = 0x13,
    ProceduralAnimationBoneName_LeftLeg = 0x14,
    ProceduralAnimationBoneName_RightLeg = 0x15,
    ProceduralAnimationBoneName_LeftUpLeg = 0x16,
    ProceduralAnimationBoneName_RightUpLeg = 0x17,
};


enum ProceduralAnimationBoneOperation {
    ProceduralAnimationBoneOperation_Offset = 0x0,
    ProceduralAnimationBoneOperation_Rotation = 0x1,
};


enum ProceduralAnimationBoneSpace {
    ProceduralAnimationBoneSpace_ParentBone = 0x0,
    ProceduralAnimationBoneSpace_Character = 0x1,
    ProceduralAnimationBoneSpace_TPose = 0x2,
};


enum ProceduralLandingStrengthFilter {
    ProceduralLandingStrengthFilter_Light = 0x0,
    ProceduralLandingStrengthFilter_Medium = 0x1,
    ProceduralLandingStrengthFilter_Heavy = 0x2,
    ProceduralLandingStrengthFilter_Impact = 0x3,
    ProceduralLandingStrengthFilter_Any = 0x4,
};


enum ProceduralLayout_TagFilteringMode {
    ProceduralLayout_TagFilteringMode_Inclusion = 0x0,
    ProceduralLayout_TagFilteringMode_Exclusion = 0x1,
    ProceduralLayout_TagFilteringMode_UNDEFINED = 0x2,
};


enum ProceduralLayout_VerticalDirection {
    ProceduralLayout_VerticalDirection_Downwards = 0x0,
    ProceduralLayout_VerticalDirection_Upwards = 0x1,
    ProceduralLayout_VerticalDirection_UNDEFINED = 0x2,
};


enum ProceduralPOILookAtType {
    ProceduralPOILookAtType_Origin = 0x0,
    ProceduralPOILookAtType_EntityBB = 0x1,
    ProceduralPOILookAtType_CustomBBs = 0x2,
};


enum PurchasableVehicleUsageType {
    PurchasableVehicleUsageType_Purchase = 0x0,
    PurchasableVehicleUsageType_Rent = 0x1,
    PurchasableVehicleUsageType_UNDEFINED = 0x2,
};


enum QDriveSplineRotationBehavior {
    QDriveSplineRotationBehavior_NoRollback = 0x0,
    QDriveSplineRotationBehavior_Rollback = 0x1,
    QDriveSplineRotationBehavior_UNDEFINED = 0x2,
};


enum QuantumDriveState {
    QuantumDriveState_Off = 0x0,
    QuantumDriveState_Idle = 0x1,
    QuantumDriveState_Aligning = 0x2,
    QuantumDriveState_Pre_Ramp_Up = 0x3,
    QuantumDriveState_Ramp_Up = 0x4,
    QuantumDriveState_Flight_In_Progress = 0x5,
    QuantumDriveState_Ramp_Down = 0x6,
    QuantumDriveState_Post_Ramp_Down = 0x7,
    QuantumDriveState_End_Travel = 0x8,
    QuantumDriveState_Abort = 0x9,
    QuantumDriveState_Cooldown = 0xa,
    QuantumDriveState_UNDEFINED = 0xb,
};


enum RadarPriorityComparison {
    RadarPriorityComparison_LessThan = 0x0,
    RadarPriorityComparison_LessThanEqual = 0x1,
    RadarPriorityComparison_Equals = 0x2,
    RadarPriorityComparison_GreaterThanEqual = 0x3,
    RadarPriorityComparison_GreaterThan = 0x4,
    RadarPriorityComparison_UNDEFINED = 0x5,
};


enum RadiationStatePropertyType {
    RadiationStatePropertyType_Distortion = 0x0,
    RadiationStatePropertyType_IR = 0x1,
    RadiationStatePropertyType_EM = 0x2,
    RadiationStatePropertyType_CS = 0x3,
    RadiationStatePropertyType_RadiationHazard = 0x4,
    RadiationStatePropertyType_UNDEFINED = 0x5,
};


enum ReactionType {
    ReactionType_Hostile = 0x0,
    ReactionType_Neutral = 0x1,
    ReactionType_Friendly = 0x2,
    ReactionType_Unknown = 0x3,
    ReactionType_UNDEFINED = 0x4,
};


enum RefiningQuality {
    RefiningQuality_Normal = 0x0,
    RefiningQuality_Careful = 0x1,
    RefiningQuality_Wasteful = 0x2,
    RefiningQuality_UNDEFINED = 0x3,
};


enum RefiningSpeed {
    RefiningSpeed_Normal = 0x0,
    RefiningSpeed_Slow = 0x1,
    RefiningSpeed_Fast = 0x2,
    RefiningSpeed_UNDEFINED = 0x3,
};


enum RenderToTextureTarget {
    RenderToTextureTarget_Primary = 0x0,
    RenderToTextureTarget_Secondary = 0x1,
    RenderToTextureTarget_All = 0x3,
};


enum ResourceNetworkAcessParameter {
    ResourceNetworkAcessParameter_Pressure = 0x0,
    ResourceNetworkAcessParameter_Temperature = 0x1,
    ResourceNetworkAcessParameter_CarbonDioxide = 0x2,
    ResourceNetworkAcessParameter_Oxygen = 0x3,
    ResourceNetworkAcessParameter_FuncionalityRatio = 0x4,
    ResourceNetworkAcessParameter_Preference = 0x5,
    ResourceNetworkAcessParameter_UNDEFINED = 0x6,
};


enum ResourceNetworkResource {
    ResourceNetworkResource_Power = 0x0,
    ResourceNetworkResource_Fuel = 0x1,
    ResourceNetworkResource_Coolant = 0x2,
    ResourceNetworkResource_Shield = 0x3,
    ResourceNetworkResource_Gravity = 0x4,
    ResourceNetworkResource_QuantumFuel = 0x5,
    ResourceNetworkResource_CPU = 0x6,
    ResourceNetworkResource_Gas = 0x7,
    ResourceNetworkResource_Filter = 0x8,
    ResourceNetworkResource_WeaponRegen = 0x9,
    ResourceNetworkResource_WeaponAmmo = 0xa,
    ResourceNetworkResource_LifeSupport = 0xb,
    ResourceNetworkResource_UNDEFINED = 0xc,
};


enum RestraintStyle {
    RestraintStyle_CuffArmLeg = 0x0,
    RestraintStyle_CuffArmOnly = 0x1,
    RestraintStyle_UNDEFINED = 0x2,
};


enum RestrictedAreaState {
    RestrictedAreaState_Allow = 0x0,
    RestrictedAreaState_Disallow = 0x1,
    RestrictedAreaState_Despawn = 0x2,
    RestrictedAreaState_UNDEFINED = 0x3,
};


enum RoomConnectorOrientationMode {
    RoomConnectorOrientationMode_AutoDetectWidest = 0x0,
    RoomConnectorOrientationMode_ForwardBackward = 0x1,
    RoomConnectorOrientationMode_UpDown = 0x2,
    RoomConnectorOrientationMode_RightLeft = 0x3,
    RoomConnectorOrientationMode_UNDEFINED = 0x4,
};


enum RoomStateModifyType {
    RoomStateModifyType_Inherit = 0x0,
    RoomStateModifyType_Override = 0x1,
    RoomStateModifyType_Additive = 0x2,
    RoomStateModifyType_UNDEFINED = 0x3,
};


enum RoomStatePropertyType {
    RoomStatePropertyType_DebrisDensity = 0x0,
    RoomStatePropertyType_Pressure = 0x1,
    RoomStatePropertyType_Temperature = 0x2,
    RoomStatePropertyType_Humidity = 0x3,
    RoomStatePropertyType_Charge = 0x4,
    RoomStatePropertyType_Distortion = 0x5,
    RoomStatePropertyType_IR = 0x6,
    RoomStatePropertyType_EM = 0x7,
    RoomStatePropertyType_CS = 0x8,
    RoomStatePropertyType_RadiationHazard = 0x9,
    RoomStatePropertyType_UNDEFINED = 0xa,
};


enum RoomType {
    RoomType_Area = 0x0,
    RoomType_Planet = 0x1,
    RoomType_GasCloud = 0x2,
    RoomType_AsteroidField = 0x3,
    RoomType_Helmet = 0x4,
    RoomType_NavPoint = 0x5,
    RoomType_UNDEFINED = 0x6,
};


enum RttOutputType {
    RttOutputType_Default = 0x0,
    RttOutputType_SurfaceWater = 0x1,
};


enum SCSeatActorAttachmentType {
    SCSeatActorAttachmentType_Host = 0x0,
    SCSeatActorAttachmentType_Seat = 0x1,
};


enum SeatSkipStates {
    SeatSkipStates_None = 0x0,
    SeatSkipStates_SkipDeploy = 0x1,
    SeatSkipStates_SkipRetract = 0x2,
    SeatSkipStates_SkipBoth = 0x3,
    SeatSkipStates_UNDEFINED = 0x4,
};


enum SeatTypes {
    SeatTypes_HOTAS_R_L = 0x0,
    SeatTypes_HOTAS_C_L = 0x1,
    SeatTypes_DUAL_STICK = 0x2,
    SeatTypes_UNDEFINED = 0x3,
};


enum ShadowQuality {
    ShadowQuality_Full = 0x0,
    ShadowQuality_Half = 0x1,
    ShadowQuality_Quarter = 0x2,
    ShadowQuality_OneEighth = 0x3,
    ShadowQuality_UNDEFINED = 0x4,
};


enum ShockwaveType {
    ShockwaveType_Sphere = 0x4,
    ShockwaveType_Cylinder = 0x5,
};


enum ShopInventoryType {
    ShopInventoryType_INVALID = 0x0,
    ShopInventoryType_ITEM = 0x1,
    ShopInventoryType_COMMODITY = 0x2,
};


enum ShoppingKioskVariant {
    ShoppingKioskVariant_LOW = 0x0,
    ShoppingKioskVariant_MED = 0x1,
    ShoppingKioskVariant_UNDEFINED = 0x2,
};


enum SinglePlayerOrMultiplayer {
    SinglePlayerOrMultiplayer_Both = 0x0,
    SinglePlayerOrMultiplayer_SinglePlayerOnly = 0x1,
    SinglePlayerOrMultiplayer_MultiplayerOnly = 0x2,
};


enum SkeletonAnimationTaskTransitionType {
    SkeletonAnimationTaskTransitionType_Linear = 0x0,
    SkeletonAnimationTaskTransitionType_Cubic = 0x1,
    SkeletonAnimationTaskTransitionType_UNDEFINED = 0x2,
};


enum SpawnWithMode {
    SpawnWithMode_MostSimilar = 0x0,
    SpawnWithMode_Random = 0x1,
    SpawnWithMode_UNDEFINED = 0x2,
};


enum SpeedThrottleActiveMode {
    SpeedThrottleActiveMode_Always = 0x0,
    SpeedThrottleActiveMode_NoWeapon = 0x1,
};


enum SpeedThrottleNoWeaponSpeedCategory {
    SpeedThrottleNoWeaponSpeedCategory_SlowWalk = 0x0,
    SpeedThrottleNoWeaponSpeedCategory_MidWalk = 0x1,
    SpeedThrottleNoWeaponSpeedCategory_FastWalk = 0x2,
    SpeedThrottleNoWeaponSpeedCategory_SlowRun = 0x3,
    SpeedThrottleNoWeaponSpeedCategory_FastRun = 0x4,
};


enum SpeedThrottleWithWeaponSpeedCategory {
    SpeedThrottleWithWeaponSpeedCategory_SameAsNoWeapon = 0x0,
    SpeedThrottleWithWeaponSpeedCategory_SlowWalk = 0x1,
    SpeedThrottleWithWeaponSpeedCategory_MidWalk = 0x2,
    SpeedThrottleWithWeaponSpeedCategory_FastWalk = 0x3,
    SpeedThrottleWithWeaponSpeedCategory_SlowRun = 0x4,
    SpeedThrottleWithWeaponSpeedCategory_FastRun = 0x5,
    SpeedThrottleWithWeaponSpeedCategory_AimDownSight = 0x6,
};


enum StaminaActionCategory {
    StaminaActionCategory_None = 0x0,
    StaminaActionCategory_MeleeJab = 0x1,
    StaminaActionCategory_MeleeHook = 0x2,
    StaminaActionCategory_MeleeOverhand = 0x3,
    StaminaActionCategory_MeleeArmed = 0x4,
    StaminaActionCategory_MeleeUpperCut = 0x5,
    StaminaActionCategory_MeleeBolo = 0x6,
    StaminaActionCategory_MeleeHaymaker = 0x7,
    StaminaActionCategory_BladeSlash = 0x8,
    StaminaActionCategory_BladeStab = 0x9,
    StaminaActionCategory_BladeLightOver = 0xa,
    StaminaActionCategory_BladeLightUnder = 0xb,
    StaminaActionCategory_BladeHeavyOver = 0xc,
    StaminaActionCategory_BladeHeavyUnder = 0xd,
    StaminaActionCategory_LanceSwipeLeft = 0xe,
    StaminaActionCategory_LanceSwipeRight = 0xf,
    StaminaActionCategory_LanceStab = 0x10,
    StaminaActionCategory_LanceLeap = 0x11,
    StaminaActionCategory_LanceHammerDown = 0x12,
    StaminaActionCategory_LancePushBack = 0x13,
    StaminaActionCategory_LanceShoot = 0x14,
    StaminaActionCategory_TestAttack = 0x15,
    StaminaActionCategory_Blocking = 0x16,
    StaminaActionCategory_SyringeStab = 0x17,
};


enum StarmapBoolOverride {
    StarmapBoolOverride_False = 0x0,
    StarmapBoolOverride_True = 0x1,
    StarmapBoolOverride_NoOverride = 0x2,
    StarmapBoolOverride_UNDEFINED = 0x3,
};


enum StatBuffType {
    StatBuffType_Hypertrophic = 0x0,
    StatBuffType_Atrophic = 0x1,
    StatBuffType_Fatiguing = 0x2,
    StatBuffType_Energizing = 0x3,
    StatBuffType_CognitiveBoost = 0x4,
    StatBuffType_CognitiveImpair = 0x5,
    StatBuffType_HypoMetabolic = 0x6,
    StatBuffType_HyperMetabolic = 0x7,
    StatBuffType_Hydrating = 0x8,
    StatBuffType_Dehydrating = 0x9,
    StatBuffType_Healing = 0xa,
    StatBuffType_Toxic = 0xb,
    StatBuffType_ImmuneBoost = 0xc,
    StatBuffType_ImmuneSuppress = 0xd,
    StatBuffType_WeaponChargeMoveSpeed = 0xe,
    StatBuffType_GForcePassOut = 0xf,
    StatBuffType_OverdoseRevival = 0x10,
    StatBuffType_OverdoseRevivalBDLDecay = 0x11,
    StatBuffType_ReviveDamageMultiplier = 0x12,
    StatBuffType_DownedDamageMultiplier = 0x13,
    StatBuffType_DrugDurationMultiplier = 0x14,
    StatBuffType_HealthPoolMask = 0x15,
    StatBuffType_HurtLocomotionMask = 0x16,
    StatBuffType_StunRecoveryMask = 0x17,
    StatBuffType_ImpactResistanceKnockdownMask = 0x18,
    StatBuffType_ImpactResistanceStaggerMask = 0x19,
    StatBuffType_ImpactResistanceTwitchMask = 0x1a,
    StatBuffType_ImpactResistanceFlinchMask = 0x1b,
    StatBuffType_StaminaRegenMask = 0x1c,
    StatBuffType_StaminaPoolMask = 0x1d,
    StatBuffType_WheezingAudioMask = 0x1e,
    StatBuffType_CoughBloodMask = 0x1f,
    StatBuffType_MoveSpeedMask = 0x20,
    StatBuffType_TraversalLockMask = 0x21,
    StatBuffType_TraversalLockProneMask = 0x22,
    StatBuffType_PainGruntMask = 0x23,
    StatBuffType_ArmsLockMask = 0x24,
    StatBuffType_WeaponSwayMask = 0x25,
    StatBuffType_ADSEnterMask = 0x26,
    StatBuffType_BloodVisionMask = 0x27,
    StatBuffType_MuffledAudioInjuryMask = 0x28,
    StatBuffType_BlurredVisionMask = 0x29,
    StatBuffType_DrunkLocomotionMask = 0x2a,
    StatBuffType_DrunkManoeuvringMask = 0x2b,
    StatBuffType_DoubleVisionMask = 0x2c,
    StatBuffType_OrificeBloodMask = 0x2d,
    StatBuffType_FlashEffect = 0x2e,
    StatBuffType_Slam = 0x2f,
    StatBuffType_RadiationAntidote = 0x30,
    StatBuffType_ThrowForceMask = 0x31,
    StatBuffType_MeleeForceMask = 0x32,
    StatBuffType_UNDEFINED = 0x33,
};


enum StateTypeNetworkAuthority {
    StateTypeNetworkAuthority_Server = 0x0,
    StateTypeNetworkAuthority_Local = 0x1,
};


enum StatusEffectType {
    StatusEffectType_ADSEnter = 0x0,
    StatusEffectType_ArmsLock = 0x1,
    StatusEffectType_Bleed = 0x2,
    StatusEffectType_BloodDrugLevelDecay = 0x3,
    StatusEffectType_BloodVision = 0x4,
    StatusEffectType_BlurredVision = 0x5,
    StatusEffectType_BodyRadiationDecay = 0x6,
    StatusEffectType_CoughBlood = 0x7,
    StatusEffectType_Dead = 0x8,
    StatusEffectType_DehydrationDamage = 0x9,
    StatusEffectType_DepressurizationDamage = 0xa,
    StatusEffectType_DrugDuration = 0xb,
    StatusEffectType_DrunkLocomotion = 0xc,
    StatusEffectType_DrunkManoeuvring = 0xd,
    StatusEffectType_DoubleVision = 0xe,
    StatusEffectType_DownedDamageDecay = 0xf,
    StatusEffectType_EarRinging = 0x10,
    StatusEffectType_ExternalDamageMultiplier = 0x11,
    StatusEffectType_FlashEffect = 0x12,
    StatusEffectType_HeadacheAudio = 0x13,
    StatusEffectType_HealthPool = 0x14,
    StatusEffectType_HealthBoost = 0x15,
    StatusEffectType_HungerDecay = 0x16,
    StatusEffectType_HurtLocomotion = 0x17,
    StatusEffectType_HurtProne = 0x18,
    StatusEffectType_HygieneDecay = 0x19,
    StatusEffectType_HypothermiaDamage = 0x1a,
    StatusEffectType_HyperthermiaDamage = 0x1b,
    StatusEffectType_ImpactResistanceKnockdown = 0x1c,
    StatusEffectType_ImpactResistanceStagger = 0x1d,
    StatusEffectType_ImpactResistanceTwitch = 0x1e,
    StatusEffectType_ImpactResistanceFlinch = 0x1f,
    StatusEffectType_LightSensitivity = 0x20,
    StatusEffectType_MacularDegeneration = 0x21,
    StatusEffectType_MalfunctionDistortion = 0x22,
    StatusEffectType_MeleeDamage = 0x23,
    StatusEffectType_MeleeForce = 0x24,
    StatusEffectType_MoveSpeed = 0x25,
    StatusEffectType_MuffledAudio = 0x26,
    StatusEffectType_OcularMigraine = 0x27,
    StatusEffectType_OrificeBlood = 0x28,
    StatusEffectType_OverdoseDamage = 0x29,
    StatusEffectType_PainGrunt = 0x2a,
    StatusEffectType_PassOutDowned = 0x2b,
    StatusEffectType_PassOutUnconscious = 0x2c,
    StatusEffectType_PassOutGForce = 0x2d,
    StatusEffectType_RadiationDamageLow = 0x2e,
    StatusEffectType_RadiationDamageHigh = 0x2f,
    StatusEffectType_Recoil = 0x30,
    StatusEffectType_Shivering = 0x31,
    StatusEffectType_StaminaCost = 0x32,
    StatusEffectType_StaminaPool = 0x33,
    StatusEffectType_StaminaRegen = 0x34,
    StatusEffectType_StarvationDamage = 0x35,
    StatusEffectType_StatusDamageCap = 0x36,
    StatusEffectType_StatusDamageMultiplier = 0x37,
    StatusEffectType_StomachGroanAudio = 0x38,
    StatusEffectType_StunDecay = 0x39,
    StatusEffectType_Suffocation = 0x3a,
    StatusEffectType_SuffocationDamage = 0x3b,
    StatusEffectType_TempAudioLoss = 0x3c,
    StatusEffectType_ThirstDecay = 0x3d,
    StatusEffectType_ThrowForce = 0x3e,
    StatusEffectType_TraversalLock = 0x3f,
    StatusEffectType_TraversalLockProne = 0x40,
    StatusEffectType_Wheezing = 0x41,
    StatusEffectType_WeaponSway = 0x42,
    StatusEffectType_UNDEFINED = 0x43,
};


enum StatusEffectValueType {
    StatusEffectValueType_Additive = 0x0,
    StatusEffectValueType_Multiplier = 0x1,
    StatusEffectValueType_MaxValue = 0x2,
    StatusEffectValueType_MinValue = 0x3,
    StatusEffectValueType_DiminishingReturns = 0x4,
    StatusEffectValueType_UNDEFINED = 0x5,
};


enum StatusHeadBleedingLocation {
    StatusHeadBleedingLocation_LeftEye = 0x0,
    StatusHeadBleedingLocation_LeftNostril = 0x1,
    StatusHeadBleedingLocation_LeftMouth = 0x2,
    StatusHeadBleedingLocation_LeftEar = 0x3,
    StatusHeadBleedingLocation_RightEye = 0x4,
    StatusHeadBleedingLocation_RightNostril = 0x5,
    StatusHeadBleedingLocation_RightMouth = 0x6,
    StatusHeadBleedingLocation_RightEar = 0x7,
    StatusHeadBleedingLocation_UNDEFINED = 0x8,
};


enum StatusProbabilityCheckType {
    StatusProbabilityCheckType_Always = 0x0,
    StatusProbabilityCheckType_StatValueIncrease = 0x1,
    StatusProbabilityCheckType_StatValueDecrease = 0x2,
    StatusProbabilityCheckType_UNDEFINED = 0x3,
};


enum SubItemScanItemStatus {
    SubItemScanItemStatus_Default = 0x0,
    SubItemScanItemStatus_PowerOn = 0x1,
    SubItemScanItemStatus_PowerOff = 0x2,
    SubItemScanItemStatus_Destroyed = 0x3,
    SubItemScanItemStatus_UNDEFINED = 0x4,
};


enum SyncedMeleeAttackResult {
    SyncedMeleeAttackResult_Hit = 0x0,
    SyncedMeleeAttackResult_Countered = 0x1,
    SyncedMeleeAttackResult_Dodged = 0x2,
};


enum TacticalQuerySystemType {
    TacticalQuerySystemType_TacticalPointQuery = 0x0,
    TacticalQuerySystemType_TacticalTargetQuery = 0x1,
};


enum TakeDownQuadrant {
    TakeDownQuadrant_AllQuadrants = 0x0,
    TakeDownQuadrant_BackOnly = 0x1,
    TakeDownQuadrant_FrontOnly = 0x2,
    TakeDownQuadrant_NotPossible = 0x3,
};


enum TakeDownStance {
    TakeDownStance_AnyStance = 0x0,
    TakeDownStance_StandOnly = 0x1,
    TakeDownStance_ProneOnly = 0x2,
    TakeDownStance_NotPossible = 0x3,
};


enum TestType {
    TestType_PhysicsImpact_Ocean = 0x0,
    TestType_PhysicsImpact_WaterVolume = 0x1,
    TestType_MFXHit = 0x2,
};


enum UI3DDisplayInputType {
    UI3DDisplayInputType_Pan = 0x0,
    UI3DDisplayInputType_Rotate = 0x1,
    UI3DDisplayInputType_Zoom = 0x2,
    UI3DDisplayInputType_UNDEFINED = 0x3,
};


enum UIBlockingMode {
    UIBlockingMode_ScanMode = 0x0,
};


enum UIDisplayActivationTypes {
    UIDisplayActivationTypes_Manual = 0x0,
    UIDisplayActivationTypes_AlwaysOn = 0x1,
    UIDisplayActivationTypes_OnWhenUsed = 0x2,
    UIDisplayActivationTypes_UNDEFINED = 0x3,
};


enum UIDisplayEnvironmentAlignment {
    UIDisplayEnvironmentAlignment_GalacticPlane = 0x0,
    UIDisplayEnvironmentAlignment_World = 0x1,
    UIDisplayEnvironmentAlignment_Owner = 0x2,
    UIDisplayEnvironmentAlignment_UNDEFINED = 0x3,
};


enum UIElementAlignMode {
    UIElementAlignMode_dynamic = 0x0,
    UIElementAlignMode_fullscreen = 0x1,
    UIElementAlignMode_UNDEFINED = 0x2,
};


enum UIGraph_BackBehavior {
    UIGraph_BackBehavior_Unsuported = 0x0,
    UIGraph_BackBehavior_NoAction = 0x1,
    UIGraph_BackBehavior_LastDoNothing = 0x2,
    UIGraph_BackBehavior_Default = 0x3,
    UIGraph_BackBehavior_LastRequestContextEnd = 0x3,
    UIGraph_BackBehavior_LastRequestClose = 0x4,
    UIGraph_BackBehavior_LastCustomCallback = 0x5,
};


enum UIGraph_BlockingMessagePopUpProvider {
    UIGraph_BlockingMessagePopUpProvider_GlobalGame = 0x0,
    UIGraph_BlockingMessagePopUpProvider_ElectronicAccess = 0x1,
};


enum UIGraph_MissionDockComponentTab {
    UIGraph_MissionDockComponentTab_Available = 0x0,
    UIGraph_MissionDockComponentTab_Accepted = 0x1,
    UIGraph_MissionDockComponentTab_Pending = 0x2,
    UIGraph_MissionDockComponentTab_History = 0x3,
    UIGraph_MissionDockComponentTab_Beacon = 0x4,
    UIGraph_MissionDockComponentTab_UNDEFINED = 0x5,
};


enum UIGraph_SimpleComponentType {
    UIGraph_SimpleComponentType_UNDEFINED = -0x1,
    UIGraph_SimpleComponentType_ElectronicAccessFullscreen = 0x0,
    UIGraph_SimpleComponentType_Hints = 0x1,
    UIGraph_SimpleComponentType_PlayerInteraction = 0x2,
    UIGraph_SimpleComponentType_PlayerLens = 0x3,
    UIGraph_SimpleComponentType_ChatWidget = 0x4,
    UIGraph_SimpleComponentType_FpsCombat = 0x5,
    UIGraph_SimpleComponentType_ACLoadoutContextSwitch = 0x6,
    UIGraph_SimpleComponentType_EALoadoutWarningPopUp = 0x7,
    UIGraph_SimpleComponentType_EAShipDetailsKickNoticePopUp = 0x8,
    UIGraph_SimpleComponentType_EAShipDetailsKickWarningPopUp = 0x9,
    UIGraph_SimpleComponentType_EALeaderboards = 0xa,
    UIGraph_SimpleComponentType_GGULoadingScreen = 0xb,
    UIGraph_SimpleComponentType_GGUNotificationScreen = 0xc,
    UIGraph_SimpleComponentType_FrontendViewTransition = 0xd,
    UIGraph_SimpleComponentType_mobiGlasLauncherDock = 0xe,
    UIGraph_SimpleComponentType_mobiGlasHomeDock = 0xf,
    UIGraph_SimpleComponentType_mobiGlasBeacon = 0x10,
    UIGraph_SimpleComponentType_mobiGlasRouteInfo = 0x11,
    UIGraph_SimpleComponentType_ShopApp = 0x12,
    UIGraph_SimpleComponentType_ShopDock = 0x13,
    UIGraph_SimpleComponentType_Popup = 0x14,
    UIGraph_SimpleComponentType_ContactsCommsApp = 0x15,
    UIGraph_SimpleComponentType_BackClick = 0x16,
    UIGraph_SimpleComponentType_ShipList = 0x17,
    UIGraph_SimpleComponentType_PortCategories = 0x18,
    UIGraph_SimpleComponentType_ItemKioskDock = 0x19,
    UIGraph_SimpleComponentType_VehicleQuery = 0x1a,
    UIGraph_SimpleComponentType_ShipSelectOrRental = 0x1b,
    UIGraph_SimpleComponentType_ShopKiosk = 0x1c,
    UIGraph_SimpleComponentType_AreaMapContextComponent = 0x1d,
};


enum UIWorldDisplayFollowRotationMode {
    UIWorldDisplayFollowRotationMode_Default = 0x0,
    UIWorldDisplayFollowRotationMode_None = 0x1,
    UIWorldDisplayFollowRotationMode_Owner = 0x2,
    UIWorldDisplayFollowRotationMode_User = 0x3,
    UIWorldDisplayFollowRotationMode_UNDEFINED = 0x4,
};


enum UIWorldDisplayPlaneAlignment {
    UIWorldDisplayPlaneAlignment_Default = 0x0,
    UIWorldDisplayPlaneAlignment_GalacticPlane = 0x1,
    UIWorldDisplayPlaneAlignment_Owner = 0x2,
    UIWorldDisplayPlaneAlignment_UNDEFINED = 0x3,
};


enum UIWorldDisplayUseInputMode {
    UIWorldDisplayUseInputMode_Default = 0x0,
    UIWorldDisplayUseInputMode_UseInput = 0x1,
    UIWorldDisplayUseInputMode_NoInput = 0x2,
    UIWorldDisplayUseInputMode_UNDEFINED = 0x3,
};


enum VectorBases {
    VectorBases_Right = 0x0,
    VectorBases_Forward = 0x1,
    VectorBases_Up = 0x2,
};


enum WeaponPoseType {
    WeaponPoseType_RightHand = 0x0,
    WeaponPoseType_Zoom = 0x1,
    WeaponPoseType_LeftHand = 0x2,
};


enum WingmanTargetTypes {
    WingmanTargetTypes_None = 0x0,
    WingmanTargetTypes_Player = 0x1,
    WingmanTargetTypes_Target = 0x2,
    WingmanTargetTypes_UNDEFINED = 0x3,
};


enum WorldDisplayObjectFacingMode {
    WorldDisplayObjectFacingMode_Default = 0x0,
    WorldDisplayObjectFacingMode_World = 0x1,
    WorldDisplayObjectFacingMode_Camera = 0x2,
    WorldDisplayObjectFacingMode_AwayFromParent = 0x3,
    WorldDisplayObjectFacingMode_UNDEFINED = 0x4,
};


enum ZeroGTraversalAction {
    ZeroGTraversalAction_None = 0x0,
    ZeroGTraversalAction_Attach = 0x1,
    ZeroGTraversalAction_AttachLanding = 0x2,
    ZeroGTraversalAction_Detach = 0x3,
    ZeroGTraversalAction_Idle = 0x4,
    ZeroGTraversalAction_MoveForward = 0x5,
    ZeroGTraversalAction_LedgeTraversal = 0x6,
    ZeroGTraversalAction_IdleToTurn = 0x7,
    ZeroGTraversalAction_KneeDrop = 0x8,
    ZeroGTraversalAction_LaunchTurn = 0x9,
    ZeroGTraversalAction_Launch = 0xa,
    ZeroGTraversalAction_Sprint = 0xb,
};


enum eCommunicationChannelType {
    eCommunicationChannelType_Global = 0x0,
    eCommunicationChannelType_Group = 0x1,
    eCommunicationChannelType_Personal = 0x2,
};


enum eCommunicationChoiceMethod {
    eCommunicationChoiceMethod_Random = 0x0,
    eCommunicationChoiceMethod_Sequence = 0x1,
    eCommunicationChoiceMethod_RandomSequence = 0x2,
};


enum eCommunicationCriteriaOperant {
    eCommunicationCriteriaOperant_None = 0x0,
    eCommunicationCriteriaOperant_Equals = 0x1,
    eCommunicationCriteriaOperant_LessThan = 0x2,
    eCommunicationCriteriaOperant_LessThanOrEquals = 0x3,
    eCommunicationCriteriaOperant_GreaterThan = 0x4,
    eCommunicationCriteriaOperant_GreaterThanOrEquals = 0x5,
};


enum eContextualCommunicationConcept {
    eContextualCommunicationConcept_None = 0x0,
    eContextualCommunicationConcept_Custom = 0x1,
    eContextualCommunicationConcept_OnIdleChatter = 0x2,
    eContextualCommunicationConcept_OnHit = 0x3,
    eContextualCommunicationConcept_OnVehicleHit = 0x4,
    eContextualCommunicationConcept_OnFriendlyDied = 0x5,
    eContextualCommunicationConcept_OnFriendlyKilledEnemy = 0x6,
    eContextualCommunicationConcept_OnTargetKilled = 0x7,
    eContextualCommunicationConcept_OnVehiclePartDestroyed = 0x8,
    eContextualCommunicationConcept_OnRespawn = 0x9,
    eContextualCommunicationConcept_OnKilled = 0xa,
    eContextualCommunicationConcept_OnVehicleEnemySpotted = 0xb,
    eContextualCommunicationConcept_OnVehicleEnemyMissileLockingOn = 0xc,
    eContextualCommunicationConcept_OnVehicleEnemyMissileLockedOn = 0xd,
    eContextualCommunicationConcept_OnVehicleEnemyMissileLockLost = 0xe,
    eContextualCommunicationConcept_OnVehicleEnemyMissileLaunched = 0xf,
    eContextualCommunicationConcept_OnVehicleMissileLockingOn = 0x10,
    eContextualCommunicationConcept_OnVehicleMissileLaunched = 0x11,
    eContextualCommunicationConcept_OnResponseFinished = 0x12,
};


enum eContextualCommunicationCriteria {
    eContextualCommunicationCriteria_Custom = 0x0,
    eContextualCommunicationCriteria_Who = 0x1,
    eContextualCommunicationCriteria_LevelName = 0x2,
    eContextualCommunicationCriteria_LastResponse = 0x3,
    eContextualCommunicationCriteria_LastDialog = 0x4,
    eContextualCommunicationCriteria_Vehicle = 0x5,
    eContextualCommunicationCriteria_VehicleHealth = 0x6,
    eContextualCommunicationCriteria_VehicleShield = 0x7,
    eContextualCommunicationCriteria_VehicleSpeed = 0x8,
    eContextualCommunicationCriteria_VehicleHitTime = 0x9,
    eContextualCommunicationCriteria_VehicleHitShield = 0xa,
    eContextualCommunicationCriteria_VehicleHitDamage = 0xb,
    eContextualCommunicationCriteria_VehicleStartFireTime = 0xc,
    eContextualCommunicationCriteria_VehicleStopFireTime = 0xd,
    eContextualCommunicationCriteria_VehicleFiringWeapons = 0xe,
    eContextualCommunicationCriteria_Attacker_Vehicle = 0xf,
    eContextualCommunicationCriteria_Attacker_VehicleHealth = 0x10,
    eContextualCommunicationCriteria_Attacker_VehicleShield = 0x11,
    eContextualCommunicationCriteria_Attacker_VehicleSpeed = 0x12,
    eContextualCommunicationCriteria_Attacker_VehicleFiringWeapons = 0x13,
    eContextualCommunicationCriteria_Target_Vehicle = 0x14,
    eContextualCommunicationCriteria_Target_VehicleHealth = 0x15,
    eContextualCommunicationCriteria_Target_VehicleShield = 0x16,
    eContextualCommunicationCriteria_Target_VehicleSpeed = 0x17,
    eContextualCommunicationCriteria_Target_VehicleFiringWeapons = 0x18,
    eContextualCommunicationCriteria_ActorHealth = 0x19,
    eContextualCommunicationCriteria_IsDriving = 0x1a,
    eContextualCommunicationCriteria_IsOnFoot = 0x1b,
    eContextualCommunicationCriteria_IsEjecting = 0x1c,
    eContextualCommunicationCriteria_IsEjected = 0x1d,
    eContextualCommunicationCriteria_IsDead = 0x1e,
    eContextualCommunicationCriteria_Attacker_Who = 0x1f,
    eContextualCommunicationCriteria_Attacker_ActorHealth = 0x20,
    eContextualCommunicationCriteria_Attacker_IsDriving = 0x21,
    eContextualCommunicationCriteria_Attacker_IsOnFoot = 0x22,
    eContextualCommunicationCriteria_Attacker_IsEjecting = 0x23,
    eContextualCommunicationCriteria_Attacker_IsEjected = 0x24,
    eContextualCommunicationCriteria_Attacker_IsDead = 0x25,
    eContextualCommunicationCriteria_Attacker_IsFriendly = 0x26,
    eContextualCommunicationCriteria_Target_Who = 0x27,
    eContextualCommunicationCriteria_Target_ActorHealth = 0x28,
    eContextualCommunicationCriteria_Target_IsDriving = 0x29,
    eContextualCommunicationCriteria_Target_IsOnFoot = 0x2a,
    eContextualCommunicationCriteria_Target_IsEjecting = 0x2b,
    eContextualCommunicationCriteria_Target_IsEjected = 0x2c,
    eContextualCommunicationCriteria_Target_IsDead = 0x2d,
    eContextualCommunicationCriteria_Target_IsFriendly = 0x2e,
};






struct AIWave;
struct AIWaveCollection;
struct AIWaveMember;
struct ActorStatusGlobalParams;
struct AggregateStateModifier;
struct AggregateStateParams;
struct AlignmentSlotBase;
struct AlignmentSlotExclusivityGroup;
struct AreaAlignmentSlot;
struct BaseMissionPropertyValueOption;
struct BeaconsContracts;
struct BoidsComponentParams;
struct BoidsGroupComposition;
struct BountyParams;
struct BuildingBlocks_ActorEntityWidget;
struct BuildingBlocks_Canvas;
struct BuildingBlocks_ComponentBadgeListItem;
struct BuildingBlocks_ComponentCheckboxButton;
struct BuildingBlocks_ComponentCheckboxListItem;
struct BuildingBlocks_ComponentCustomButton;
struct BuildingBlocks_ComponentCustomButtonSecondary;
struct BuildingBlocks_ComponentCustomDropDownMenu;
struct BuildingBlocks_ComponentCustomListItem;
struct BuildingBlocks_ComponentGeneralButton;
struct BuildingBlocks_ComponentGeneralButtonLarge;
struct BuildingBlocks_ComponentGeneralButtonSecondary;
struct BuildingBlocks_ComponentGeneralDropDownMenu;
struct BuildingBlocks_ComponentGeneralListItem;
struct BuildingBlocks_ComponentLabelCaptionPair;
struct BuildingBlocks_ComponentLinearRangeSlider;
struct BuildingBlocks_ComponentMinMaxRangeSlider;
struct BuildingBlocks_ComponentNavigationTabList;
struct BuildingBlocks_ComponentNotification;
struct BuildingBlocks_ComponentOptionTabList;
struct BuildingBlocks_ComponentRadialRangeSlider;
struct BuildingBlocks_ComponentRadioButton;
struct BuildingBlocks_ComponentRadioListItem;
struct BuildingBlocks_ComponentScrollBar;
struct BuildingBlocks_ComponentToggleButton;
struct BuildingBlocks_ComponentToggleListItem;
struct BuildingBlocks_DisplayWidget;
struct BuildingBlocks_EntityWidgetBase;
struct BuildingBlocks_GeneralEntityWidget;
struct BuildingBlocks_GeometryEntityWidget;
struct BuildingBlocks_ShapeWidget;
struct BuildingBlocks_StyleSelectorConditionAllOfTag;
struct BuildingBlocks_StyleSelectorConditionAnyOfTag;
struct BuildingBlocks_TabListBase;
struct BuildingBlocks_TextureBase;
struct BuildingBlocks_TogglerBase;
struct BuildingBlocks_VehicleEntityWidget;
struct BuildingBlocks_WidgetBadge;
struct BuildingBlocks_WidgetBase;
struct BuildingBlocks_WidgetBodyBackground;
struct BuildingBlocks_WidgetCanvas;
struct BuildingBlocks_WidgetCard;
struct BuildingBlocks_WidgetCheckboxControl;
struct BuildingBlocks_WidgetCinematicLabel;
struct BuildingBlocks_WidgetCircle;
struct BuildingBlocks_WidgetClone;
struct BuildingBlocks_WidgetContainer;
struct BuildingBlocks_WidgetCustomShape;
struct BuildingBlocks_WidgetDustVolume;
struct BuildingBlocks_WidgetEditBox;
struct BuildingBlocks_WidgetEnvironmentProbe;
struct BuildingBlocks_WidgetForegroundOverlay;
struct BuildingBlocks_WidgetHoloVolume;
struct BuildingBlocks_WidgetIcon;
struct BuildingBlocks_WidgetImage;
struct BuildingBlocks_WidgetLight;
struct BuildingBlocks_WidgetLighting;
struct BuildingBlocks_WidgetLine;
struct BuildingBlocks_WidgetLineList;
struct BuildingBlocks_WidgetLinearProgressMeter;
struct BuildingBlocks_WidgetList;
struct BuildingBlocks_WidgetLoadingIndicator;
struct BuildingBlocks_WidgetManufacturerLogo;
struct BuildingBlocks_WidgetMovie;
struct BuildingBlocks_WidgetPagination;
struct BuildingBlocks_WidgetParticleEffect;
struct BuildingBlocks_WidgetPolygon;
struct BuildingBlocks_WidgetPolymorphic;
struct BuildingBlocks_WidgetRadialProgressMeter;
struct BuildingBlocks_WidgetRadioControl;
struct BuildingBlocks_WidgetRuntimeImage;
struct BuildingBlocks_WidgetSeparator;
struct BuildingBlocks_WidgetSlice;
struct BuildingBlocks_WidgetSlider;
struct BuildingBlocks_WidgetStrip;
struct BuildingBlocks_WidgetText;
struct BuildingBlocks_WidgetTextEntry;
struct BuildingBlocks_WidgetTextField;
struct BuildingBlocks_WidgetTickBox;
struct BuildingBlocks_WidgetToggleControl;
struct BuildingBlocks_WidgetWindow;
struct CargoManifest;
struct CheckEntitiesOnActorsLoadoutWithinAreaGameplayTrigger;
struct CommunicationAutoMannequinTagsConfig;
struct CommunicationChannel;
struct CommunicationChannelConfig;
struct CommunicationConfig;
struct CommunicationLocationAutoTags;
struct ContactHighlightSharedParams;
struct ContractGiverSettings;
struct ContractTemplate;
struct ControlledSubstanceClass;
struct CrewData;
struct CrewManifest;
struct DataSetMatchCondition_PropertyTags;
struct DataSetMatchCondition_SpecificItemsDef;
struct DataSetMatchCondition_SpecificOrganizationsDef;
struct DataSetMatchCondition_TagSearch;
struct DependentMissionProperty;
struct DialogueContext;
struct DialogueContextBank;
struct DynArray_AIWave;
struct DynArray_AIWaveMember;
struct DynArray_AggregateStateParams;
struct DynArray_AlignmentSlotBase;
struct DynArray_AlignmentSlotExclusivityGroup;
struct DynArray_BaseMissionPropertyValueOption;
struct DynArray_BoidsGroupComposition;
struct DynArray_BuildingBlocks_Canvas;
struct DynArray_BuildingBlocks_WidgetBase;
struct DynArray_CargoManifest;
struct DynArray_CommunicationChannel;
struct DynArray_CommunicationConfig;
struct DynArray_CommunicationLocationAutoTags;
struct DynArray_ContractTemplate;
struct DynArray_ControlledSubstanceClass;
struct DynArray_CrewData;
struct DynArray_DependentMissionProperty;
struct DynArray_DialogueContext;
struct DynArray_DynamicMissionLocation;
struct DynArray_EntityClassDefinition;
struct DynArray_Faction;
struct DynArray_FactionReputation;
struct DynArray_Grip;
struct DynArray_InstancedInteriorLocationParams;
struct DynArray_InteractionProhibitedItemParams;
struct DynArray_ItemResourceControlBlock;
struct DynArray_ItemResourceGroup;
struct DynArray_MinRequiredMissions;
struct DynArray_MissionBrokerEntry;
struct DynArray_MissionItem;
struct DynArray_MissionLocationTags;
struct DynArray_MissionOrganization;
struct DynArray_MissionPropertyValueOption_Float;
struct DynArray_MissionPropertyValueOption_Integer;
struct DynArray_MissionPropertyValueOption_StringHash;
struct DynArray_MissionPropertyValueOption_Tags;
struct DynArray_MusicLogicParameter;
struct DynArray_ObjectiveToken;
struct DynArray_PlayerChoiceMenu;
struct DynArray_ProceduralLayoutNode_AlternateElementProperties;
struct DynArray_ProceduralLayout_SupplementaryElementTagsOptions;
struct DynArray_ProceduralLayout_TagFilter;
struct DynArray_ResourceTypeGroup;
struct DynArray_SCInteractionEffectsMapEntryParams;
struct DynArray_SCItemClothingMeshChunkParams;
struct DynArray_SCItemClothingPortVisibilityConditionParams;
struct DynArray_SCItemClothingVisibilityConditionParams;
struct DynArray_SCItemUIView_DashboardCanvasViewDef;
struct DynArray_SCarryableSequenceRef;
struct DynArray_SCharacterCustomizerDNARegionParams;
struct DynArray_SCharacterCustomizerFeatureBase;
struct DynArray_SCharacterCustomizerStep;
struct DynArray_SCharacterCustomizerVertexParams;
struct DynArray_SCraftingDictionaryEntry;
struct DynArray_SCustomizableMaterialParams;
struct DynArray_SEAFPSGunGameWeaponLists;
struct DynArray_SEAFPSGunGameWeaponSetup;
struct DynArray_SEffectParamsNodeParticle;
struct DynArray_SEffectParamsNodeSound;
struct DynArray_SEntityTraversingNodeBase;
struct DynArray_SGeometryNodeParams;
struct DynArray_SHighlightBehaviorNode;
struct DynArray_SInteractionPointParams;
struct DynArray_SInteractionState;
struct DynArray_SInteractionStateType;
struct DynArray_SItemPortDef;
struct DynArray_SItemPortDefHelperNode;
struct DynArray_SItemPortDefaultItemDef;
struct DynArray_SItemPortLoadoutOutfitTagParams;
struct DynArray_SMaterialNodeParams;
struct DynArray_SMultiMissionCompleteReward;
struct DynArray_SOutfitHangerGroup;
struct DynArray_SSharedInteractionParams;
struct DynArray_STriggerableDevicesTriggerParams;
struct DynArray_Skill;
struct DynArray_SkinInteractableTemplate;
struct DynArray_TQSInputBoolValue;
struct DynArray_TQSInputDynamicVariableValue;
struct DynArray_TQSInputFloatValue;
struct DynArray_TQSInputIntValue;
struct DynArray_TQSInputStringValue;
struct DynArray_TQSInputTagValue;
struct DynArray_TQSWeightDynamicVariableValue;
struct DynArray_TQSWeightInputFloatValue;
struct DynArray_TQSWeightInputIntValue;
struct DynArray_TQSWeightInputTagValue;
struct DynArray_TQSWeightInputValue;
struct DynArray_Tag;
struct DynArray_TagList;
struct DynArray_TagSearchTerm;
struct DynArray_TagsDNFTerm;
struct DynArray_TintPalette;
struct DynArray_UIGraph_Group;
struct DynArray_UsableAlignmentSlot;
struct DynArray_UsableSlottingSetup;
struct DynArray_UsableUseChannelInstance;
struct DynArray_UsableUseSlot;
struct DynArray_UserArrayElement;
struct DynArray_VehicleEditorGroupEquipData;
struct DynArray_VehicleEditorItemOffsets;
struct DynArray_VisorLens_Region;
struct DynArray_VisorLens_Widget;
struct DynArray_mobiGlasApp;
struct DynamicMissionLocation;
struct EntityClassDefinition;
struct EntityComponentCharacterCustomizerParams;
struct EntityComponentLegacyCrafterParams;
struct EntityComponentTriggerableDevicesParams;
struct Faction;
struct FactionReputation;
struct FiringRangeParams;
struct Grip;
struct HarvestableTagListTagEditor;
struct HintTriggerData;
struct InstancedInteriorLocationMap;
struct InstancedInteriorLocationParams;
struct InstancedInteriorSizeList;
struct InteractionConditionDraggedActorHasProhibitedItems;
struct InteractionConditionHasProhibitedItems;
struct InteractionProhibitedItemParams;
struct InventoryContainerManager;
struct ItemRecoveryParams;
struct ItemResourceComponentParams;
struct ItemResourceControlBlock;
struct ItemResourceGroup;
struct JournalEntryDialogueLog;
struct JournalEntryMinRequiredMissionsText;
struct JournalEntryMissionProgressText;
struct Jurisdiction;
struct KeypadInteractionParams;
struct MinRequiredMissions;
struct MissionBroker;
struct MissionBrokerEntry;
struct MissionItem;
struct MissionLocationTags;
struct MissionOrganization;
struct MissionPropertyValueOption_Float;
struct MissionPropertyValueOption_Integer;
struct MissionPropertyValueOption_StringHash;
struct MissionPropertyValueOption_Tags;
struct MissionPropertyValue_Float;
struct MissionPropertyValue_Integer;
struct MissionPropertyValue_Location;
struct MissionPropertyValue_StringHash;
struct MissionPropertyValue_Tags;
struct MusicLogicParameter;
struct ObjectiveToken;
struct OperatorSeatAlignmentSlot;
struct PlayerChoiceMenu;
struct PlayerChoiceMenuType;
struct PlaylistRNGConfig;
struct PointAlignmentSlot;
struct ProceduralLayoutGraph;
struct ProceduralLayoutGraphNode_AlternateElement;
struct ProceduralLayoutGraphNode_AlternateSubGraph;
struct ProceduralLayoutGraphNode_Base;
struct ProceduralLayoutGraphNode_CorridorElement;
struct ProceduralLayoutGraphNode_Element;
struct ProceduralLayoutGraphNode_MultiElement;
struct ProceduralLayoutGraphNode_VerticalElement;
struct ProceduralLayoutNode_AlternateElementProperties;
struct ProceduralLayoutNode_ElementProperties;
struct ProceduralLayout_SupplementaryElementTagsOptions;
struct ProceduralLayout_TagFilter;
struct ResourceContainer;
struct ResourceTypeDatabase;
struct ResourceTypeGroup;
struct RestrictedAreaComponentParams;
struct RestrictedAreaKillParams;
struct S42MissionLogEntryParams;
struct SActionAreaComponentParams;
struct SActorUsableParams;
struct SCEntityDraggableParams;
struct SCInteractionEffectsMapEntryParams;
struct SCItemClothingMeshChunkParams;
struct SCItemClothingParams;
struct SCItemClothingPortVisibilityConditionParams;
struct SCItemClothingVisibilityConditionParams;
struct SCItemConsumableParams;
struct SCItemInteractionEffectsMapParams;
struct SCItemLensDisplayParams;
struct SCItemPurchasableParams;
struct SCItemUIView_DashboardCanvasDef;
struct SCItemUIView_DashboardCanvasViewDef;
struct SCLoadingPlatformEffectParams;
struct SCarryableSequenceRef;
struct SCharacterCustomizerAllowedClasses;
struct SCharacterCustomizerDNARegionParams;
struct SCharacterCustomizerFeatureBase;
struct SCharacterCustomizerFeatureBodyTypeSelect;
struct SCharacterCustomizerFeatureDNA;
struct SCharacterCustomizerFeatureItemEquip;
struct SCharacterCustomizerFeatureShaderEdit;
struct SCharacterCustomizerFeatureTextureSelect;
struct SCharacterCustomizerItemSelect;
struct SCharacterCustomizerMakeupSlot;
struct SCharacterCustomizerStep;
struct SCharacterCustomizerVertexParams;
struct SControlledEntityDynamicTransformParams;
struct SCraftingDictionary;
struct SCraftingDictionaryEntry;
struct SCustomizableMaterialParams;
struct SDespawnerParams;
struct SEAFPSGunGameWeaponLists;
struct SEAFPSGunGameWeaponSetup;
struct SEALoadoutFPSGunGameSetup;
struct SEffectParamsNodeParticle;
struct SEffectParamsNodeSound;
struct SEntityComponentCIGTestBParams;
struct SEntityComponentCarryableParams;
struct SEntityComponentEffects;
struct SEntityLootableContainerParams;
struct SEntityTraversingNodeBase;
struct SEntityTraversingTreeParams;
struct SFlightsuitHangerGroup;
struct SGeometryNodeParams;
struct SHighlightBehaviorNode;
struct SInteractableParams;
struct SInteractionLinkParams;
struct SInteractionLockGameplayTrigger;
struct SInteractionPointParams;
struct SInteractionState;
struct SInteractionStateMachineParams;
struct SInteractionStateType;
struct SItemPortActorRecordParams;
struct SItemPortContainerComponentParams;
struct SItemPortDef;
struct SItemPortDefHelperNode;
struct SItemPortDefaultItemDef;
struct SItemPortLoadoutOutfitParams;
struct SItemPortLoadoutOutfitTagParams;
struct SLoadoutRequirementTags;
struct SMannequinHangerGroup;
struct SMaterialNodeParams;
struct SMultiMissionCompleteReward;
struct SMultiMissionCompleteRewardRecord;
struct SOutfitHangerGroup;
struct SSCSignatureSystemParams;
struct SSequencerImmediateDespawnDespawnerTaskParams;
struct SSequencerUsableDisableUseChannelTask;
struct SSequencerUsableEnableUseChannelTask;
struct SSetInteractionStateInItemportedGameplayTrigger;
struct SSharedInteractionParams;
struct SSpawnerParams;
struct STaggedInverseInteractionLinkExecuteCreateInteractionLinkNode;
struct STriggerableDevicesBehaviorActorStatusParams;
struct STriggerableDevicesBehaviorDetachParams;
struct STriggerableDevicesBehaviorExplosionParams;
struct STriggerableDevicesBehaviorParams;
struct STriggerableDevicesBehaviorUnprimeParams;
struct STriggerableDevicesTriggerAllAnyParams;
struct STriggerableDevicesTriggerGravityParams;
struct STriggerableDevicesTriggerImpactParams;
struct STriggerableDevicesTriggerLaserTripParams;
struct STriggerableDevicesTriggerParams;
struct STriggerableDevicesTriggerTimerParams;
struct SWeaponActionFireTractorBeamAttachDetachParams;
struct SWeaponActionFireTractorBeamParams;
struct SWeaponConditionHasTags;
struct Skill;
struct SkillDefinitions;
struct SkinInteractableTemplate;
struct SkinInteractableTemplates;
struct TQSInputBoolValue;
struct TQSInputDynamicVariableValue;
struct TQSInputFloatValue;
struct TQSInputIntValue;
struct TQSInputStringValue;
struct TQSInputTagValue;
struct TQSWeightDynamicVariableValue;
struct TQSWeightInputFloatValue;
struct TQSWeightInputIntValue;
struct TQSWeightInputTagValue;
struct TQSWeightInputValue;
struct Tag;
struct TagDatabase;
struct TagList;
struct TagSearchTerm;
struct TagsDNF;
struct TagsDNFTerm;
struct TintPalette;
struct UIGraph_DockingGroup;
struct UIGraph_Group;
struct UIOwnerEntityComponentParams;
struct UsableAlignmentSlot;
struct UsableSlottingSetup;
struct UsableUseChannelInstance;
struct UsableUseSlot;
struct UserArrayElement;
struct UserArraysComponentParams;
struct VehicleEditorAvailableVehiclesData;
struct VehicleEditorGroupEquipData;
struct VehicleEditorItemOffsets;
struct VehicleEditorManagerParams;
struct VehicleEditorUIData;
struct VisorLens_Layout;
struct VisorLens_Region;
struct VisorLens_Widget;
struct mobiGlasApp;
struct PlayerGroupManagerNotificationsParams;
struct ShakeComponentParams;
struct StatusPriorityActorStatus;
struct AISeatQuantumDriveControllerComponentParams;
struct BuildingBlocks_BindingsLocalizedFromInteger;
struct ItemHeatModifierParams;
struct LinkedStatPassIncreaseToValue;
struct SCItemControlBaseParams;
struct EntityComponentCommsChannelParams;
struct CraftingResult_Base;
struct SSCActorProceduralRecoilComponentParams;
struct SIVictoryConditionsModule;
struct BuildingBlocks_TRBL;
struct SHackingAgentParamsPreset;
struct SSequencerBespokeTakeCarryableTaskParams;
struct CinematicTriggerMPOptions;
struct SAtmosphericCompositionInheritPlanet;
struct SDashboardInteractionParams;
struct LedgeTransitionParams;
struct MoveViewRestrictionWeighting;
struct FlightControllerHydrogenFuelStates;
struct InteractionConditionInteractableIsIncapacitatedActor;
struct DesignerNavigationVolumeParams;
struct ItemRoomResourcePair;
struct CameraTargetOffsetConfig;
struct InteriorMapWorldUIConfig;
struct CommsAudioEffect;
struct BuildingBlocks_BindingsPathStructure;
struct PlayerAnimatedInteractionCustom;
struct SCItemRadarPingProperties;
struct SRaceCheckpointObjectMetadataParams;
struct SMisfireSeverityFactors;
struct VehicleEditorTerminalParams;
struct ShieldTypeParams;
struct SCItemControllableSimpleParams;
struct SShieldAbsorption;
struct MobiGlasPositionParams;
struct SpectatorModeParams;
struct SSequencerBespokePlaceCarryableTaskParams;
struct CustomFloat;
struct S42Commendation;
struct HygieneParams;
struct BasePortRefillData;
struct SEntityTraversingNodeId;
struct GlobalResourceMaterial;
struct CameraDOFFocusDistanceConfig;
struct SetCloneLocationMedicalTier;
struct SSimulationParamsPendulum;
struct TriggerSubConditionInnerThoughtOptionDef;
struct BuildingBlocks_BindingsLocalizedCurrencyFromNumber;
struct SDoorCollisionReactionRetractParams;
struct SActorHitReactionsDef;
struct Visor_ControlHintsConfig;
struct CommodityCrateComponentParams;
struct SApplicationFormHead;
struct SetPowerSourceStateEvent;
struct InnerThought_LayoutGridSetThought;
struct SCarryableInteractionPointOffsets;
struct SCItemRadarSensitivityModifier;
struct SAnalyticShadowComponentParams;
struct StarMapAssetManagerLocationParams;
struct QuantumDriveLocTypeMusicMap;
struct AeroSurface;
struct SHackingGeneralSettingsPreset;
struct BuildingBlocks_BindingsPathBase;
struct BreathableGasParams;
struct UIGraph_LoadoutItemPortDockContextComponent;
struct BuffDurationBase;
struct CraftingGameplayProperty_Base_Int;
struct ActorStatusAddBuff;
struct AbilityStaminaStates;
struct SAuxiliaryWeaponActionBeamParams;
struct SMFDOperatorModeConfig;
struct StanceBreathModifier;
struct HarvestConditionInteraction;
struct AudioRayOcclusionParams;
struct SFaceHighlightingParams;
struct BuildingBlocks_BindingsTransformMultiply;
struct ServiceBeaconParams;
struct DamageParams;
struct WalkToAlignParams;
struct SGlobalHitBehaviorParams;
struct ActorLookAheadTargetTracking;
struct VehicleEditorCapability;
struct UIRenderToTextureEntityComponentParams;
struct RentalNotificationParams;
struct SEntityPhysicsWheel;
struct CameraActorVibrationShakeConfig;
struct ARMarkerPlayerOffsetParams;
struct BuildingBlocks_BindingsColorFromNumberRGBA;
struct BuildingBlocks_BindingsTagFromBoolean;
struct FireHazardFireProperties;
struct SUIWarningGameplayTrigger;
struct TransitNavigationLink;
struct ItemResourceDeltaInject;
struct SJumpTunnelFailureParams;
struct SExtinguisherImpactParams;
struct ControlHints_KeyInput;
struct LightningTargetMode_Internal;
struct BuildingBlocks_FieldModifierRecordRefTypeFontStyleRecord;
struct VehicleHUDMessagingParams;
struct SHeadRecoilNoiseModifier;
struct SSCSignatureSystemAudioSubRule;
struct SEffectParamsNodeBase;
struct SAnimatedOutfitSwapData;
struct ServiceBeaconBaseTemplateParams;
struct ContractPrerequisite_Locality;
struct PlacementValidatorMines;
struct HealthTemplate;
struct BuildingBlocks_FieldModifierEnumeratedTypeSliderMode;
struct WeatherEffects_Atmosphere_PropertyValue;
struct SSequencerSkeletonAnimationTaskParams;
struct SActorForceReactionStumbleConfigDef;
struct SJumpDriveFlightLinearParams;
struct ActorTurnAngles;
struct EVAConnection;
struct FacialTrackingParams;
struct PlayerInventory;
struct PlanetOceanAudioComponentParams;
struct SActorForceReactionBlockADSConfig;
struct BuildingBlocks_BindingsIntegerArithmatic;
struct MovementSpeedOverride;
struct AIGroupEntityParams;
struct ActorStateSkeletonFilter;
struct SNPCObjectMetadataParams;
struct GlobalResourceTextureDDS;
struct SSilhouetteParamsDef;
struct DamageResistance;
struct SAtmosphericEffectTestsParams;
struct SARDataComponentParams;
struct SActorForceReactionAnimationTwitchConfig;
struct SCDynamicRigLightEnabledParams;
struct ScanDisplayInstanceParams;
struct ActorViewLimitPreset;
struct AeroParams;
struct StatusPriorityStamina;
struct SHackingEntitySpawnParams;
struct SSelfHintActivator;
struct CommsNotificationSelector;
struct ItemResourceControlConditionBase;
struct BuildingBlocks_TimingFunctionBase;
struct SActorForceReactionCurveConfig;
struct ControlHintCondition_OptInEventState;
struct BuildingBlocks_TriggerDirectHyperLink;
struct CraftingGameplayPropertyRecord;
struct LinkedStat;
struct SPartyMemberMarkerObjectMetadataParams;
struct BuildingBlocks_TimingFunctionPreset;
struct EnemyAwarenessConfig;
struct SCharacterCustomizerWildlineSubconditionFeature;
struct SCItemSuitAtmosphereFuelConversionParams;
struct MissionModifier_HostileMission;
struct SZoneHostEntityHighlightNode;
struct BuildingBlocks_FieldModifierInteger;
struct ScreenEffects_Pattern_Linear;
struct VehicleMasterModeScanProcedureParams;
struct CrossSectionGlobalParams;
struct FloatInteractiveVariable;
struct SEALoadoutExplicit;
struct SeatUserActorCDIKConfig;
struct UIGraph_FlashDockingStationComponent;
struct ItemPortViewInformationByItemType;
struct ConversationNode_Dialogue;
struct EntityComponentWaterImpactTestParams;
struct SScopeAttachmentParams;
struct SEntityComponentManagedEntityZoneParams;
struct SPowerPlantMisfireParams;
struct AtmosphereStateBase;
struct SInventoryParams;
struct SCSeatItemPort;
struct ContractPrerequisite_Reputation;
struct ItemResourceContainerPlaceholderParams;
struct RestrictedAreaPatchParams;
struct SCProneMotionGraphDef;
struct BoolUserVariableTask;
struct SSalvageGlobalStructuralVFXParams;
struct ContactHighlightStateBaseParams;
struct TriggeredHealth;
struct BuildingBlocks_RadialTransform;
struct EAPickupBallisticsParams;
struct SDespawnRule_OnStreamOut;
struct PlayerAnimatedInteractionFiltered;
struct VehicleSerialNumberCharacterType;
struct CylinderFieldGeom;
struct SCharacterCustomizerBlemishMapParams;
struct BuildingBlocks_BindingsNumberArithmatic;
struct EntitityEffectSystem_StaticColor;
struct SCSeatAccessGatewayInteractionStateParams;
struct Marker_AbilityNavpoint;
struct SecurityClearanceTokenData;
struct ResourceNetworkParams;
struct GasCloudOverrideCubeVolumeParams;
struct GlobalJumpDriveTuningEffectParams;
struct S42ShipStatusAllowedShipParams;
struct WeaponControllerArmMissileStates;
struct LightGroupParams;
struct TransitCarriageEffects;
struct HarvestableTagListBase;
struct DissolveParams;
struct ShipRecallBannedAreaParams;
struct SCItemCommsControllerParams;
struct SubHarvestableConfigRecord;
struct DynamicCameraEffects;
struct SEntityComponentTrackViewParams;
struct BuildingBlocks_TextFormatModifierBase;
struct SWeaponActionParams;
struct RadiationBehavior_AsteroidInverseSquareSurfaceRadiationParams;
struct BuildingBlocks_ColorIntegerPairDef;
struct SStateAutoChange;
struct SItemPortDefExtensionFPS;
struct SSCSignatureSystemManualCrossSectionParams;
struct SStartHackingGameplayTrigger;
struct InnerThought_LayoutClean;
struct SEALoadoutSetup;
struct UIGraph_MarkerARProviderComponent;
struct SimpleRotationComponentOscillation;
struct ConversationNode_BaseNext;
struct SWeaponAudioParams;
struct PlayerGroupManagerObjectsLocStringParams;
struct CockpitRuleFloat;
struct TransitStationAnnouncement;
struct RefuelBaseService;
struct EntityComponentDockingHubParams;
struct SEntityLinkedContext;
struct BuildingBlocks_BindingsNumberFunction;
struct ConditionProhibitedItemsDisplayParams;
struct SCItemCoolerParams;
struct BuildingBlocks_BindingsBooleanCompare;
struct MineableParams;
struct SEntityComponentUpdateProxyParams;
struct SArmouryItemFilter;
struct JumpTunnelVibrationParams;
struct SPerkReputationParams;
struct SReputationContextPropertiesUI;
struct SCItemProximitySensorBoxParams;
struct UIGraph_MissionDockComponent;
struct MagLaunchNoiseParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeTextFieldWidgetStylePreset;
struct PurchasableDisplayBase;
struct EASpawnNotifierParams;
struct ContactHighlightShaderParams;
struct InteractionConditionDeliveryMissionItem;
struct LedgeShapeComponentParams;
struct SSCRadarContactProperites;
struct EntitityEffectSystem_StaticFloat;
struct BuildingBlocks_BindingsNumberComponentParameter;
struct SimpleSpriteSheet;
struct VideoCommsAudioParams;
struct DigitalSignageComponentParams;
struct SEntityPerceptionComponentParams;
struct SPlayerCameraTypeAllowedParams;
struct ShipComputerDefinition;
struct SCActorCollisionAvoidanceParams;
struct CloneLocationUIProviderParams;
struct TaggedSubHarvestableConfig;
struct OutfitParams;
struct BuildingBlocks_BindingsNumberRound;
struct ScanCustomData;
struct S42StatOperationStat;
struct MapDisplayParamsGalacticMap;
struct AccessibilityExteriorZoneParams;
struct BuildingBlocks_FieldModifierColor;
struct SWeaponActionAIParams;
struct ItemResourceDeltaStorage;
struct GameModeFilter;
struct SEffectInputParamsSound;
struct SMissileEntryTrackerParams;
struct BlueprintCategoryAvailabilityRecord;
struct BuildingBlocks_FieldModifierEnumeratedTypeSegmentEasing;
struct LightStateParams_Aux;
struct BuildingBlocks_ColorStyle;
struct SCItemControlPriorityNoControlValue;
struct WheelAudioParams;
struct CraftingGameplayPropertyImpl_Base;
struct ActionAreaExtensionType;
struct SQuantumDriveEffectTemplate;
struct TargetTrackingAutoZoomDef;
struct SSalvageArmParams;
struct ConversationNode_VariableGameToken;
struct StatusSweatingParams;
struct LightMiscParams;
struct PlayerChoiceMenuItem;
struct AnnouncementGameToken;
struct RastarLocationParams;
struct VisibilityConditionDef;
struct QuantumColorShiftParams;
struct LocalPlayerMusicParams;
struct PlayerTradeNotification;
struct CameraWheeledVehicleConfig;
struct LightFlickerWaveSphereParams;
struct DialogueRealm;
struct SEntityLinkHighlightNode;
struct SCSeatAccessLinkedGatewayParams;
struct ControlHintCondition_ActorLocomotionSet;
struct SHealingBeamBodyPartParams;
struct SBaseLevelStats;
struct TriggerSubConditionInterruptTimerDef;
struct AIDynamicCoverSurfaceComponentParams;
struct SMissionEntityParams;
struct CargoCommoditiesScanProcedureParams;
struct ActorEnvironmentComponent;
struct IncapacitatedPlayerMarkerParams;
struct SEntityBasePhysicsGridParams;
struct TimeToTakeOffMinOverrideByDockingClass;
struct MistedBreathParams;
struct ThrusterEffectsComponentParams;
struct PlanetEffectLODDistance;
struct BuildingBlocks_IntegerIntegerPair;
struct DoorScanProcedureParams;
struct SMicroResourceUnit;
struct EMPoolParams;
struct SSequencerTurretResumeControlTaskParams;
struct BuildingBlocks_BindingsLocalizedField;
struct SpawnHelperComponentParams;
struct SCItemShipCoursePredictionParams;
struct STeamChannel;
struct PlayerAnimatedInteractionTemplate;
struct EAPickupKillConfirmedParams;
struct FunctionalityModifierCurve;
struct BoolUserVariableSetValueTask;
struct SStopFillingGasTankGameplayTrigger;
struct SActorStanceTrailSphereDef;
struct Behavior_ElectricalVehicleEffectParams;
struct EntityComponentHealth_SBaseSequencerTask;
struct InteractionConditionEntityOrientation;
struct BuffValueOverride;
struct SLoadoutRequirementBase;
struct UIElement;
struct SEntityObjectContainerGridProperty;
struct Behavior_JumpDriveEffectsPreset;
struct SCSeatAccessPassageInteractionStateParams;
struct ControlHintCondition_VehicleHealthState;
struct DrugTypeToApply;
struct StateModifierHoverPowerStage;
struct RestrictedAreaPatchTypes;
struct PlayerChoice_MarkerNearestFace;
struct WeaponPoseXYZCurvesMaxValues;
struct SpawnDescription_Ship;
struct ActorProceduralRecoilModifiers;
struct SEntityArticulatedPhysicsControllerParams;
struct SRadiationEmitterGameplayTrigger;
struct SpeciesScanProcedureParams;
struct MarkerTrackingActionParameters;
struct EscortParams;
struct MissionModifier_ShipKioskFilter;
struct EntityComponentHealth_SApplyDamageMapTask;
struct ControlHintCondition_VehiclePinnedTarget;
struct GlobalResourceTexture;
struct SCItemSeatDashboardScreen;
struct AerodynamicTrailCalculation;
struct BuildingBlocks_BindingsStringBase;
struct ThrusterMFXEntityParams;
struct AtmosphericFlightEffects;
struct ControlHintCondition_VehicleQuantumTravel;
struct RttLoadoutPreviewEntityComponentParams;
struct FullscreenTutorial;
struct SPerkParamsBase;
struct WeatherEffects_SpaceLoopEffect;
struct GoToPointComponentParams;
struct SSCLocalPlayerUIComponentParams;
struct EntityComponentRttAspectFocusVehicleParams;
struct SDamageMapShaderValues;
struct SCIGTestAA;
struct DefaultActionsEntityEntryCondition_Customisable;
struct MusicLogicEvent;
struct SActorDefaultDeathBehaviour;
struct BuildingBlocks_ComponentParameterInputBoolean;
struct FogVolumeComponentParams;
struct GlobalGasParams;
struct EAFactionTeamParams;
struct BuildingBlocks_BindingsBooleanBase;
struct MissionVariableBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeDraggablePolicy;
struct BuildingBlocks_BindingsColorFromString;
struct EntityEffectSystem_LightType_PointLight;
struct MineableExplosionParams;
struct DamageMapExplosionParams;
struct SGasProducerConsumerEntryParams;
struct StatusMaskedRetriggerSetupPreset;
struct ContextMenuOption;
struct HoldExhaleDuration;
struct MobiglasDisplayLayoutBase;
struct JurisdictionScanProcedureParams;
struct SStrengthXPGains;
struct SCharacterCustomizerRegionParams;
struct SMissionStagingAreaComponentParams;
struct AudioAreaAmbienceComponentParams;
struct ItemPortViewInformation;
struct SCItemNavigationParams;
struct BuildingBlocks_KeyframeModifierData;
struct SCItemInventoryContainerComponentParams;
struct AnimationScalarVariable;
struct BoxFieldGeom;
struct PlayerUsableInteractionPoint;
struct SControlledEntityGroupCondition;
struct SCItemDoorConnectVisAreas;
struct S42DifficultyParams;
struct SGuidanceAndControlPhaseParams;
struct EALockedSpawnMarkerTracker;
struct GlobalResourceCAF;
struct SActorProceduralAnimationComponentParams;
struct BodyHealthComponentParams;
struct MissionPropertyValue_Boolean;
struct MissionFlowCondition_NOT;
struct InteriorMapWorldUICursorPointParams;
struct SActorForceReactionsProceduralLeanOverride;
struct BodyJoint;
struct CraftingRecipeResults_Base;
struct StatusPriorityStatType;
struct SAttachableObjectContainerData;
struct EAMarkerTrackerBase;
struct VibrationTypeData;
struct BuildingBlocks_BindingsIntegerField;
struct InteractionConditionItemPower;
struct TransitNavSplineDataParams;
struct CombatAssistanceParams;
struct WebRTCCommsCallProjectorLightParams;
struct DefaultActionsEntityState_EntityIsAttachedToOtherActor;
struct LegalRegistrationLocationComponentParams;
struct SCharacterCustomizerMakeupDefaultParams;
struct CtxGraph_Node;
struct SEAFPSGunGameArmorLevel;
struct ControlHintCondition_VehicleAvailableOperatorMode;
struct SMusicEventTagMap;
struct BuildingBlocks_BindingsNumberWaveform;
struct JumpDriveExitParams;
struct SCDashboardConnectionParams;
struct InventoryClosedContainerType;
struct StatusPriorityFloat;
struct OnFootWeaponRangeCategoryScore;
struct BulletVisualParams;
struct Primitive_Billboard;
struct ItemResourceCompositionValue;
struct JournalEntryAudioLog;
struct MissionCompletePerkBaseDef;
struct ReadySystemParams;
struct SLandingCommunicationParams;
struct JumpDriveOpeningParams;
struct SPowerSegmentResourceUnit;
struct SQedVisualGraphTransitionTypeParams;
struct InteractionConditionSwapAvailable;
struct PlacedSurfaceEffects_Emitter;
struct SQuantumServiceBeaconQTPointParams;
struct MissionVariableBoolean;
struct ProbabilisticStatusTrigger;
struct BuildingBlocks_TriggerModifyInt;
struct SSpreadParams;
struct AreaAlignmentSlotTypeParams;
struct ControlHintCondition_VehicleLandingGearState;
struct BuildingBlocks_ComponentLabelProperties;
struct ProjectileParams;
struct BaseMissionModifier;
struct BuildingBlocks_FlashRendererPolicy;
struct QuantumMusicTripCategory;
struct SSpreadMisfireEffect;
struct AudioHitListenerDefinition;
struct SEntityVoxelGridProperty;
struct PersonalThoughtHologramAnimationParams;
struct EntityComponentRefineryUIProviderParams;
struct ScanProcedureParams;
struct MiningAudioParams;
struct SelectionTab;
struct SJournalComponentParams;
struct Marker_AbilityAboveBelowIndicator;
struct BuildingBlocks_ShapeQuad;
struct WeaponProceduralClip;
struct LootGenerationComponentParams;
struct ElectricalStateTemplateInternal;
struct AreaMapCameraParams;
struct LifetimeControlledItemModifierParams;
struct IntoxicationIFCSModifierParams;
struct DownedConfig;
struct SCItemControlPriorityExclusiveValue;
struct SCLoadingPlatformEntityReferences;
struct SVectorFieldParams;
struct PlayerChoiceMenuOption;
struct DisplayState;
struct FlightControllerQuantumFuelStates;
struct BuildingBlocks_Node;
struct PlanetDayNightTemperatureTemplate;
struct BulletProjectileParams;
struct ExtinguishType_Base;
struct SOutfitPlacingRule;
struct SSalvageRepairMaterialParams;
struct InteractionConditionHasItemTypeAttached;
struct BuildingBlocks_TagIntegerPair;
struct CameraThirdPersonBaseConfig;
struct DrugEfficacy;
struct SActorProceduralAimRecoilCurveModifiersDef;
struct ControlHints_HintDisplayInfo;
struct InteractionConditionActorSealedHelmet;
struct UIMapEntityComponentParams;
struct SSimpleRotationComponentParams;
struct UIDataBankDisplay3DParams;
struct EntityEffectSystem_LightType;
struct SWeaponSequenceEntryParams;
struct ConversationNode_Start;
struct LadderLookAroundParams;
struct SMissionLocationComponentParams;
struct SFreightElevatorUIProviderParams;
struct SkylineComponentParams;
struct AILookComponentParams;
struct BuildingBlocks_StyleSelectorConditionNotTag;
struct SSequencerPlayerUsableReserveSlotTaskParams;
struct MissionLocationValidation;
struct ControlHintCondition_VehicleMiningLaserMode;
struct SInteractionStateDef;
struct SActorLocomotionFeatureDef_Slope;
struct PersonalThoughtInventoryFilter;
struct FontSupportParams;
struct FixedSizedCircleTraversalCostShapeConfig;
struct DynamicObjectNavigationTriggerAdapter;
struct SCSeatActorAttachmentParams;
struct PatrolPointComponentParams;
struct HierarchicalContextualData;
struct SDespawnRule_OnFallBelow;
struct SCItemFuelTankParams;
struct StickyFilterAutocenterParams;
struct SWetnessAccumulatorParams;
struct MissionModuleHierarchySubMission;
struct BuildingBlocks_ColorBase;
struct VolumeShape_Sphere;
struct LandingGearContactStateModifier;
struct SSalvageRepairHighlightColorParams;
struct InteractionConditionUsableAlignmentSlotEmpty;
struct BuildingBlocks_BindingsListIndex;
struct BuildingBlocks_PreviewSceneAugmentedRealityRtt;
struct SCItemElevatorParams;
struct SPerkShopItemCategoryBase;
struct BuildingBlocks_BindingsNumberBuiltInVariable;
struct BindingsOperations_LocalizationTimeFormatDuration;
struct MusicLogicSetValue;
struct SCIGTestB;
struct SControlledEntityRopeAttachmentPair;
struct ControlHintCondition_ActorItemTypeAndTags;
struct SEntityDynamicLocationProperties;
struct ObjectiveProperty_Embedded;
struct RecordRefUserVariableTypeFontStyle;
struct SModHealth;
struct LightStateParams_Default;
struct SCItemProximitySensorSphereParams;
struct SCSeatAccessInteractionConditionParams;
struct MissionScenarioCyclePhase;
struct StarMapObjectLocationParams;
struct SNonTeamHostility;
struct GameModeValidMap;
struct AnimationComponentParams;
struct UIGraph_BindingsArrayDockComponent;
struct SMeleeWeaponComponentParams;
struct Ang3;
struct SCItemDoorHazardLightsParams;
struct SHealingBeamBoneEntryParams;
struct SLocalPlayerHapticParams;
struct NavLinkLedgeLocation;
struct CameraDockingConfig;
struct TQSOptionContentRecord;
struct LinkedStatRulePassAlways;
struct ProcBreathingGraphEntry;
struct RadiationEmitterComponentParams;
struct CraftingRecipeCosts_Base;
struct SimpleRotationComponentVariation;
struct HintMarkerParams;
struct SControlledEntityParams;
struct ScreenEffects_DebugParam;
struct CommonTargetVisibilityScore;
struct SEntityGridProperty;
struct SCItemInputAutoAimParams;
struct SSalvageAreaBoxParams;
struct SServiceBeaconNotificationOverride;
struct ServiceBeaconInterfaceParams;
struct SCItemQuantumDriveParams;
struct AIMeleeAttack;
struct VendingMachineItemParams;
struct VaultNavigationLink;
struct SCDynamicRigIntensityParams;
struct GlobalJumpTunnelPassByLightParams;
struct BodyPart;
struct MissionPropertyValue_DeliveryOrder;
struct UIGraph_LoadoutEditorComponent;
struct BuildingBlocks_FieldModifierEnumeratedTypeDropTargetPolicy;
struct TriggeredWarningClear;
struct QuantumDriveSplineFXParams;
struct AudioBreathStyleBaseNode;
struct ItemResourceDeltaConsumption;
struct STurretGlobalParams;
struct SphereAreaAlignmentSlotTypeParams;
struct AtmosphereBehavior_TurbulenceParams;
struct LandingPadSize;
struct SpawnSettingsInventoryItem;
struct UIWorldDisplayRotationModeParams;
struct SSpecializedDataEntry;
struct HeadMotionOffsetParams;
struct ParticleEffectParams;
struct AlignmentSlotAreaHelperComponentParams;
struct SeatedTacticScores;
struct SWeaponConditionAmmoCount;
struct AudioSwitch;
struct QuantumDriveStateMusicMap;
struct LinkedStatRulePassAlwaysPositive;
struct UnitTest_ClassB;
struct ItemTypeModifier;
struct SuggestedFOVSetup;
struct SItemPortLoadoutEntryParams;
struct SCItemFlightControllerParams;
struct ItemPortViewInformationByName;
struct DamageResistanceEntry;
struct LightBoxComponentParams;
struct AtmosphereStateRef;
struct SCharacterCustomizerHairRandomizationParams;
struct SInteractionLinkExecuteCreateInteractionLinkNode;
struct MineableElement;
struct PersonalThoughtInventoryMenu;
struct ControlHintCondition_ActorAimStanceState;
struct SReputationAmountParams;
struct AttentionTargetComponentParams;
struct TimeValue_Base;
struct SCItemTurretJointMovementAxisParams;
struct PlayerTradeGlobalParams;
struct SWeaponProceduralAimRecoilConfigDef;
struct PersonalThoughtHologramParams;
struct AISpecialRangedAttackConfig;
struct AttackCategoryParamsBase;
struct SCRTTCameraParams;
struct Vec2;
struct RestrictedAreaAutopilotParams;
struct MissionModifier_IgnoreMissionPlayerCriminality;
struct SEntityContextBase;
struct SEntityBuoyancyParams;
struct ElevatorPathNodeGatewayParams;
struct WeaponMisfireDef;
struct LightStateParams_Off;
struct SBBDynamicPropertyBool;
struct JumpTunnelCameraEffects;
struct SReputationContextBBPropertyParams;
struct SignatureTypeGlobalParams;
struct BuildingBlocks_BindingsLocalizedComponentParameter;
struct CraftingResearch_Base_NonRef;
struct LegacyCraftingRecipe_Base;
struct ExplosionParams;
struct Marker_AbilityDistanceVisibility;
struct ConstantDOFGrid;
struct SItemDefinition;
struct SReputationStandingJournalEntryParams;
struct SRemoteRigidEntityControllerOneHandedParams;
struct Texture3DFieldGeom;
struct CapacitorAssignmentInputOutputDef;
struct InteractionConditionPlayerNotInCombat;
struct LadderJumpParams;
struct TurretInputDeflectionTimeParams;
struct ARMarkerTrackingParams;
struct StickyFilterMovementParams;
struct SCuttableStateModifier;
struct SDebrisEntryTrackerParams;
struct InteractionConditionSecurityClearanceToken;
struct SItemPortDefExtensionBase;
struct SCLoadingPlatformLightGroupParams;
struct SSequencerTurretSetMovementTagTaskParams;
struct FireHazardAfterglowProperties;
struct ControlHintCondition_VehicleSystems;
struct SWeaponConditionBase;
struct SunLightComponentParams;
struct GameRulesStateBaseParams;
struct ItemResourceConversionModifierBase;
struct GasCloudVDBLightingParams;
struct SItemPortDefExtensionTurret;
struct SCloseKioskInteractionGameplayTrigger;
struct SQuantumDriveEffectBaseParams;
struct BuildingBlocks_StaticVariableArray;
struct CraftingCost_RecordRef;
struct SWeaponActionFireTractorBeamVehicleBased;
struct PersonalThoughtInventoryActionsParams;
struct LightStateParams;
struct ElectricalState;
struct SINotificationsModule;
struct ApplyStatusBuff;
struct FPSReticle_Config;
struct WeaponPoseInterpolationCurves;
struct NavigationLinkTagCost;
struct LandingUIParams;
struct S42CommendationRequirementTriggerCondition;
struct SCItemAimableControllerParams;
struct BuildingBlocks_BindingsStringComponentParameter;
struct LongTermPersistenceWhiteListEntry;
struct ScanCustomValue;
struct CinematicConversationSettings;
struct SRangedWeaponStats;
struct SEntityComponentPlanetAreaParams;
struct ControlHints_Input;
struct ControlHintCondition_ActorHeldItemInteractionState;
struct Burst;
struct GameRulesEAStatePreGameParams;
struct SActorForceReactionWeaponTwitchConfig;
struct SPowerTriangleVertices;
struct CollisionMFXEntityParams;
struct ControlHintCondition_VehicleMasterMode;
struct SExtinguisherVectorFieldParams;
struct DialogueContextEntry;
struct InteractionConditionAvailableSpaceInLinkedUsableItem;
struct InnerThought_CycleAnimRotateZ;
struct SSequencerInteractionTask;
struct SInteractionLinkHighlightNode;
struct ProjectileDetonationParams;
struct SSalvageStructuralAudioParams;
struct LoadoutEditorComponentParams;
struct ScreenEffects_ParamValue_Float;
struct ClothingTypeHeadWear;
struct AnimationJointBaseTranslation;
struct AudioPassByComponentParams;
struct BuildingBlocks_BindingsNumberEase;
struct SurfaceRaindrops_Acceleration;
struct AtmosphereStateHumidityTemplate;
struct SCItemControlPriorityTag;
struct SDashboardWeaponInteractionParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeJointStyle;
struct ControlHintCondition_ActorSkeleton;
struct SecurityNetworkPermissions;
struct EAPickupBaseComponentParams;
struct EAUIMulticrewTypeOptionParams;
struct BasicStatusEffectApplicationType;
struct STrackViewOutfitInteractionSwapData;
struct SWeaponAmmoRepoolParams;
struct SWeaponProceduralHeadRecoilConfigDef;
struct AreaEllipsoidComponentParams;
struct ItemTypeInfo;
struct UIGraph_ArenaCommanderVehicleLoadoutEditorContextComponent;
struct InteriorMapSectionDefinition;
struct EntityComponentAttachableGadgetUIProviderParams;
struct DockingDoorAnimatorComponentParams;
struct ControlHintCondition_ActorHeldItemType;
struct SThrusterMisfireParams;
struct EntityComponentRttAspectMFDShieldsParams;
struct TriggerSubConditionInteractionStateDef;
struct NavSplineAnchorPointComponentParams;
struct ElectricalRoomExtension;
struct AnimationJointLinearRotation;
struct StatusMaskedRetriggerSetupBase;
struct AudioGroupComponentParams;
struct ItemFuelControllerParams;
struct SEntityDensityClassOverwritesBase;
struct VehicleRole;
struct LegacyCraftingOutput_Entity;
struct SWeaponStats;
struct TagToAudioRtpc;
struct ActorInteractionPointStateModifier;
struct BindingsOperations_WaveformShapeSquare;
struct AIActorLocomotionParams;
struct FlightControllerStateModifier;
struct SViewDistanceRatioParams;
struct LinkedStatBase;
struct LightFlickerWaveLinearParams;
struct UIWorldDisplayPathStateParams;
struct SHackingThreatLevelConditionNodeSwapped;
struct SEffectInputParamsDC;
struct CameraBlendConfig;
struct SInteractableEntryTrackerParams;
struct AudioOneShotManagerBudgetEntry;
struct PlayerGroupManagerGlobalParams;
struct MissionInitParamActivity;
struct HarvestableClusterParams;
struct ControlHintAlwaysDisplayCondition;
struct SEntityComponentNoisySmoothingModificationObjectParams;
struct BuildingBlocks_StyleSelectorConditionType;
struct LightFadeParams;
struct SMisfireGenerationParams;
struct PersonalThoughtFavoriteSlot;
struct PersonalThoughtInventoryMissionFilter;
struct BuildingBlocks_TriggerModifyBool;
struct ContractDifficulty;
struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitCaseModifier;
struct SReputationStandingParams;
struct CodeDrivenChatProviderSettings;
struct RadarDisplayProviderParams;
struct AtmosphereStateTemperatureTemplate;
struct SCPlayerPUSpawningComponentParams;
struct BuildingBlocks_Border;
struct ModifierInterpolator;
struct EAWinOrLossAwardParams;
struct ItemTypeCategoryException;
struct RadarDeltaSignatureNotificationParams;
struct EntityEffectSystem_DisableSequencerTask;
struct ScanDisplayScanDataEntryVariableParams;
struct ItemAwardBase;
struct SRenderToTextureViewBaseParams;
struct BoidsCylindricalLimiterRule;
struct SEntityTraversalNodeContext;
struct MiningFilterItemModifierParams;
struct JumpTunnelCubeMapParams;
struct SAudioCapacitor;
struct GlobalEngineTrailsSetting;
struct ObjectiveRewardContribution_PercentOfMission;
struct InteractionConditionPlayerOwnsVehicle;
struct LandingZoneInventoryRedirect;
struct VendingMachineShopParams;
struct RestrictedAreaHandlerParams;
struct SInteractionPointEntryTrackerParams;
struct SShieldStunParams;
struct GlobalMarkerConfigs;
struct SQuantumBoostRotationParams;
struct JumpTunnelCameraEffectParam;
struct BuildingBlocks_TimingFunctionCurveRecord;
struct MissionLogEntry;
struct SCItemTurretGyroParams;
struct SQuantumBoostBubbleIntegrityParams;
struct PatrolGraphLinkComponentParams;
struct BuildingBlocks_StaticVariableBoolean;
struct CameraView2ShipsFrameParams;
struct DataSetMatchCondition_ExcludeNearbyLocationsDef;
struct BlockedCursorParams;
struct HintComponentParams;
struct CommunicationName;
struct ExponentialDamage;
struct SChangeInteractionStateGameplayTrigger;
struct MedBedSurgeryNames;
struct SCLocalPlayerSocialConnectionComponentParams;
struct BuildingBlocks_BindingsIntegerBuiltInVariable;
struct ContractPrerequisite_CompletedContractTags;
struct SAttachableItemModifierStateModifier;
struct NpcBreathingParams;
struct SJumpDriveFlightRotationParams;
struct SFrontendGameModeButton;
struct SCItemCoolerControllerParams;
struct ForceFeedbackEnvelope;
struct ActorCameraOffsetParams;
struct SLoadoutRequirementNOT;
struct ScanOverrideDisplayBaseParams;
struct CommunicationVariableBase;
struct SHazardAreaShapeParams;
struct S42CommendationRequirementBase;
struct SCMeleeWeaponParams;
struct FlightHUDUIMessage;
struct EntityAudioControllerTypeParams;
struct SJumpTunnelMeshParams;
struct PersonalThoughtStateModifier;
struct DematerializeAnimation;
struct SBuildingBlocks_EntityEffects;
struct GlobalAerodynamicTrailSettings;
struct InventoryContainerParams;
struct InteractionConditionCanDropItemInCurrentZone;
struct SEntityComponentAttachmentClusterParams;
struct BreathingHelperComponentParams;
struct BuildingBlocks_ColorSolid;
struct ControlHintCondition_ActorTags;
struct LootArchetypeEntry_Secondary;
struct LightningTargetMode_Vehicle;
struct BuildingBlocks_StaticVariableString;
struct ControlHintCondition_ActorStatusType;
struct BuildingBlocks_GeomEntityEffect;
struct AnimationJointTransform;
struct BuildingBlocks_TransformerBase;
struct BoidsOceanSurfaceRepelRule;
struct SCharacterCustomizerMakeupSlotRandomizationParams;
struct BuildingBlocks_BindingsOperationBase;
struct SObjectMetadataParams;
struct UIElementSoundEntry;
struct SITeamsModule;
struct SICamerasModule;
struct ParticleEffectFixedTintingParams;
struct BreakableEntityClassParams;
struct ActorFootJointPairDef;
struct InteractionConditionHoverPowerStageEqual;
struct BuildingBlocks_VirtualCursorPolicy;
struct ContractPrerequisite_CrimeStat;
struct BuildingBlocks_ScrollPolicyBase;
struct BuildingBlocks_Overflow;
struct SCItemSeatHeadTrackingPositionLimitParams;
struct CraftingGameplayPropertyImpl_Base_Float;
struct SMovableLimits;
struct SCuttableComponentParams;
struct DefaultActionsEntityState_InteractionStateMachineStateTag;
struct SEAUIMessageComponentParams;
struct SIntNumberComparer;
struct SCOptionalZeroGTraversalParams;
struct ObjectiveDisplayInfo;
struct InventoryContainerGridCellSizeBase;
struct DynamicInstancePropertiesParams;
struct SCharacterCustomizerItemRandomizationParams;
struct EntityComponentSpawnClosetAreaParams;
struct AIBasicMeleeAttack;
struct PersonalThoughtAction;
struct TrackWheeledVehicleAudioComponentParams;
struct EntityComponentAsteroidVolumeParams;
struct SDashboardConsumableInteractionParams;
struct ItemResourceControlConditionThrottle;
struct SControlledEntityCameraParams;
struct SDespawnRule;
struct DialogueBundleWeightedReference;
struct LocalPlayerAudioEnvironmentParams;
struct BuildingBlocks_PreviewScreenWorldOrigin;
struct ObjectiveHandlerBase;
struct DirectRTT_PixelGridParams;
struct BuildingBlocks_FieldModifierPair;
struct BuildingBlocks_TriggerSubsumptionBroadcast;
struct SFlowGraphProxyParams;
struct BuildingBlocks_FieldTransitionBase;
struct SSignaturesCategoryEntry;
struct InteriorMapWorldUIFocusPointPlanarGridParams;
struct SDragDropUsableUserConfig;
struct SEAUISpawnScreenFPSEquipmentCategoryParams;
struct SecurityLoginInput;
struct DamageMapDamageTypes;
struct HolographicVolumeParams;
struct ItemResourceDynamicAmountThrusterFuel;
struct SCItemBoatControllerParams;
struct ThrowParams;
struct SCItemLocalization;
struct BuildingBlocks_LocalizationDateFromIntegerTimeStamp;
struct CockpitRuleString;
struct ItemResourceNetworkDefaultPowerDistributionParams;
struct DegradationTemperatureMultiplier;
struct SEntityTraversingNodeExecuteLinkAllTaggedInteractions;
struct ForceFeedbackPattern;
struct Aiming;
struct HeadMotionShakeSettings;
struct VoiceSingle;
struct AudioValueOutputBehaviourMicrophone;
struct SCSeatAccessGatewayInteractionParams;
struct CameraLookBehindConfig;
struct ProjectileProximityTriggerParams;
struct SEntityOnlineStateModifier;
struct BoidsBehaviorRuleContainer;
struct DragCurveParams;
struct BuildingBlocks_ShapeCircle;
struct ActorFrostedVisorParams;
struct ItemCategory;
struct BoidTransition;
struct SMissileLauncher;
struct ActorStateData_LadderValidationParams;
struct SItemPortEntityOnlineStateModifier;
struct EntityComponentFireArea;
struct ScannableComponentParams;
struct QuantumDriveNotifications;
struct SJumpPointAccessParams;
struct SJumpTunnelHostParams;
struct ItemAwardTag;
struct FireVoxelSelectionShape_Sphere;
struct ActorStateValidation;
struct EAPlayableAreaMovementTypeParamsDef;
struct ScanCustomDataDirect;
struct BindingsOperations_AudioParameter;
struct BuildingBlocks_StaticArrayDataBase;
struct UIAudioComponent_ManualOffset;
struct SCItemDoorUserAnimationParams;
struct AIDebugDrawComponentParams;
struct SCItemDoorEffectParams;
struct ExplosiveOrdnancePingVFX;
struct QuantumDriveSplineTraversalParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderTopLeftRadiusBehavior;
struct SCExtendedLocalizationLevelParams;
struct EnvironmentLightFadeParams;
struct SCItemCapacitorAssignmentControllerParams;
struct ContactHighlightMaterialParams;
struct UserRTPC;
struct UnitTestSubRecord;
struct HudColor_HoloMatTextures;
struct SQuantumBoostEffectParams_LEGACY;
struct TransitDisplayPanelStationAnnouncements;
struct EnvironmentTemperatureParams;
struct SCriticalMalfunctionStates;
struct ContractClass_PVPBounty;
struct CameraSpringConfig;
struct OptimalPowerWindowScanProcedureParams;
struct QuickAccessWheelAutoWingmanCommandsDef;
struct DefaultAction_CarryableInteractionDef;
struct S42StatOperationBase;
struct MissionLocationTemplate;
struct PlayerGroupManagerLocStringParams;
struct PatrolGraphComponentParams;
struct SSequencerActorActionHandlerTask;
struct ARModeSettings;
struct SUsableIdlePoseOverride;
struct SEntityComponentPartyMarkerParams;
struct ReviveParams;
struct InteractionConditionSeatUserRegistered;
struct EntityComponentEffects_Test_ColorLink;
struct QuantumDriveEffectParams;
struct SDecayCurveMaxValueParams;
struct BuildingBlocks_FieldModifierRecordRefTypeBase;
struct ItemAwardEntityClass;
struct MobiglasDisplayCounter;
struct FireHazardIgniteEvent;
struct LightningRegionParams;
struct STargetSelectorColorHighlighting;
struct UIGraph_KioskMainComponent;
struct TransitDisplayPanelParams;
struct GPUParticleAudio;
struct BuildingBlocks_FieldModifierEnumeratedTypeDepthBehavior;
struct SParentEntityHighlightNode;
struct SEAVehicleSpawnProperties;
struct STargetSelectorGlobalTargetingParams;
struct SMissionGiverStaticProperties;
struct CameraEffectsModifiers;
struct BuildingBlocks_FieldModifierEnumeratedTypeProgressMeterState;
struct BuildingBlocks_FieldModifierEnumeratedTypeTickBoxMode;
struct SurfaceParticleRTTParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeFillStyle;
struct SStateLevel;
struct ExtraLegalBounds;
struct AudioTriggerSpotParams;
struct RadarQuantumOverrideParams;
struct SEASpawnRespawnIndividualSchedulerParams;
struct BuildingBlocks_EntityEffectBase;
struct SInternalResourceLink;
struct SpawnerPrerequisite_InteractionState;
struct SActorForceReactionKnockdownRangeDef;
struct WorldDisplay_2DLocalEntityEnvironment;
struct SEntityComponentDefaultLoadoutParams;
struct GlobalJumpPointClosingParams;
struct SShopUIProviderCategoryIcon;
struct CIGAudioParams;
struct PlayerChoiceMenuOptionItem;
struct BuildingBlocks_IntegerNumberPair;
struct ItemResourceControlOutputState;
struct FlightControllerEnableStates;
struct ClosestOrientationHandholdAttachSpotChoiceParams;
struct SpawningManagerNotifierComponentParams;
struct UIGraph_LauncherScreenComponent;
struct UIStateDisplay_Threshold;
struct ElectricalCalculationPropertyRange;
struct SCItemAirlockParams;
struct SAtmosphericCompositionBaseParams;
struct EmotionDescription;
struct EntityComponentFireFilter;
struct StatusBuffTypeBase;
struct DefaultEntitlementEntityParams;
struct HealthScanProcedureParams;
struct SCItemRestraintParams;
struct SSCLocalPlayerComponentParams;
struct FireHazardGlobalSmokeParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexDirection;
struct BuildingBlocks_TwoVariablePicker;
struct SObservablePointDef;
struct Marker_AbilityIncapacitatedActor;
struct SCItemPriorityTagParam;
struct GasCloudVDBGamePlayParams;
struct ItemResourceControlOutputControlBlock;
struct EAScoringVehicleComponentParamsDef;
struct SLoadingAreaParams;
struct HandholdAttachSpotParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeContentBoxPosition;
struct ActorCameraOffsetFiltered;
struct CtxGraph_Dependency;
struct SBBDynamicPropertyBase;
struct FiringRangePenaltyDef;
struct SEntityTraversingNodeExecuteLinkUIVendor;
struct InteractionConditionCanAttachItemOnHanger;
struct CraftingBlueprint_RecordRef;
struct HazardAwarenessParams;
struct SCItemUIViewOwnerParams;
struct BuildingBlocks_Background;
struct AITargetingFormulaSettings;
struct InteractionConditionLimitNearbyCarryables;
struct BuildingBlocks_LookAtTransformer;
struct BreakableComponentParams;
struct FireAreaHazards;
struct ItemCarryParams;
struct SUniqueEntityClass;
struct EntityComponentSpawnClosetTransitManagerParams;
struct EntityComponentCommLinkProviderParams;
struct SLayerEntitiesGroupManager;
struct SEntityComponentConstraintPartnerComponentParams;
struct SVehicleObjectMetadataParams;
struct SCBoostScaleParam;
struct GlobalResourceParticle;
struct CommunicationVariableBool;
struct RadiationState;
struct SMissionBrokerInterfaceComponentParams;
struct SHudTapeParams;
struct SReputationMissionRequirementExpression_Or;
struct SVehicleObjectContainerParams;
struct GroupEntityParams;
struct MedBedProviderParams;
struct InnerThought_LayoutPIT;
struct BuildingBlocks_StyleSelectorConditionBase;
struct SDespawnRule_OnDestroyed;
struct ActorStatusStatModifier;
struct LadderAccessPointParams;
struct ExtendedNameEntryTextRandomizedLocalizedSequence;
struct SCIGTestAAA;
struct SJumpTunnelSectionControlPointGenerationParams;
struct LinkedStatRuleHasCrossedBelowThreshold;
struct AITimeSinceTargetSeen;
struct BuildingBlocks_FieldModifierBase;
struct CraftingResult_Item;
struct HackableScanProcedureParams;
struct MedBedSurgeryNamesInjurySeverity;
struct SHandsRecoilCurveNoiseModifer;
struct SMisfireDamageRatio;
struct MobiGlasAuthorizationEntry;
struct EVAReticle_Config;
struct BreathableOxygenParams;
struct SActorForceReactionAnimationFlinchConfig;
struct TestAtomics;
struct ControlHintCondition_MobiglasMapState;
struct DefaultActionsEntityState_CanAttachToHeldWeapon;
struct CommunicationAudioRTPC;
struct AfterActionReportReputationImpact;
struct GlobalJumpPointParams;
struct ItemResourceControlParameterBase;
struct EATransportBaseTransitionParams;
struct DefaultActionsEntityEntryCondition_EntityTypes;
struct SDashboardEffectParams;
struct ScanWaveDetectionParams;
struct PlanetEffectTestParams;
struct SHostExplosionEffect;
struct FoleySuitAmbienceDefinition;
struct EntityComponentSpawnClosetRoomParams;
struct ActorEnvironmentalMovementModifiers;
struct PingSFXSharedParams;
struct BulletDamageDropParams;
struct SLayerEntitiesGroupComponentParams;
struct SCentiResourceUnit;
struct GameModule;
struct MassScanProcedureParams;
struct SFrontendSpawning;
struct InteractionConditionIsAttachedToItemPort;
struct SSCSignatureSystemAudioOffset;
struct SCLegacyThrustParams;
struct ActorJumpFallLandVariantConfigNode;
struct BindingsOperation_BooleanFromStringIsEmpty;
struct SRangeStateLevel;
struct PersonalThoughtActionDescription;
struct EntityComponentWaterDisturbanceParams;
struct SRadarSenseComponentParams;
struct UIWorldDisplayHolographicSettings;
struct UIAudioComponent_Offset;
struct ContractDifficultyProfile;
struct ControlInteractiveVariable;
struct SCItemControlCondition_Tag;
struct InteractionConditionCanStoreInPersonalInventory;
struct ScreenEffects_ParamValue_Vec4Base;
struct QuatT;
struct StarMapAmenityTypeEntry;
struct HaulingOrderBase;
struct SQedVisualGraphTransitionParams;
struct ControlHintCondition_VehicleEnvironment;
struct CombatMarker;
struct LightningTargetMode;
struct CameraViewFirstPersonSpectatorParams;
struct SMusicEvent;
struct SDoorCollisionReactionNoneParams;
struct HitBehaviorDamageOverTime;
struct SSalvageAudioParams;
struct SRootEntityHighlightNode;
struct DialogueBundlePresetWeighted;
struct SLandingAreaObjectMetadataParams;
struct DamageResistanceMacro;
struct RelationMarkerParams;
struct BuildingBlocks_StringTagPair;
struct DefaultActionsEntityState_InTakedownRange;
struct InteractionConditionPlayerVehicleNotInLandingArea;
struct PlanetDayNightTemperatureParams;
struct UIGraph_MouseControlComponent;
struct AnimationMovement;
struct SDisruptionGameplayTrigger;
struct BuildingBlocks_FieldModifierEnumeratedTypeSegmentProgressBehavior;
struct QueueingBehaviour;
struct PlayerInteractionParams;
struct ExtendedNameEntryTextRaw;
struct CraftingResearchUnlock;
struct BuildingBlocks_TimelineTypeBase;
struct DriftingDrunkConfig;
struct SBBDynamicPropertyString;
struct SSequencerPlayerUsableSwitchChannelTaskParams;
struct BuildingBlocksView;
struct VehicleEditorItemData;
struct CargoControllerParams;
struct VisibilityConditionDef_EntryFlag;
struct UIEntityServiceEntityComponentParams;
struct ActorLocomotionRotateParams;
struct InteriorMapWorldUIZoneHostPlanarGridParams;
struct HarvestableAreaTypeManualOverride;
struct WeatherEffects_Asteroid_PropertyValue;
struct PlayerECGGraph_Config;
struct SS42GalactapediaSourceDataParams;
struct SCItemConditionalPriority;
struct SActorProceduralHeadRecoilModifiers;
struct SecurityNotifications;
struct JumpDriveStateAudioMap;
struct BuildingBlocks_UnidirectionalScroller;
struct SAddHealthValue;
struct WorldDisplayEnvironmentColor;
struct LegacyCraftingCost_Base;
struct SSensorMineProximityTrigger;
struct JumpThrusterPackConfig;
struct ControlHintCondition_ActorLadderState;
struct SItemPortDefAttachmentImplementationFace;
struct S42FieldManualCategory;
struct SWeaponProceduralBodyRecoilConfigDef;
struct SLightFlickerVolumeComponentParams;
struct EnvironmentLightGroupParams;
struct SSetInteractionStateOnParentItemportGameplayTrigger;
struct SScenePlayerChoiceSettings;
struct CraftingRecipe_RecordRef;
struct SJumpDriveFlightTurbulenceParams;
struct ToxicGasDef;
struct AudioHitTypeDefinition;
struct SWeaponMisfireEntry;
struct UIGraph_ChatComponent;
struct TriggerSubConditionNumberOfInterruptsDef;
struct DataSetMatchCondition_ExcludeDistantLocationsDef;
struct SSequencerUsableAssignLoadoutTask;
struct AmmoPenetrationParams;
struct SXYZCurvesWithMaxValues;
struct AirlockAreaParams;
struct FireRepairerType_Raycast;
struct DefaultActionsEntityEntryCondition_AttachableItems;
struct DefaultActionsEntityState_CarryableState;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexCrossAxisJustification;
struct NavSplineComponentParams;
struct SActorAnimationComponentParams;
struct AreaSphereComponentParams;
struct QuadGeometryEntityComponentParams;
struct EAPickupFuelParams;
struct CargoLoadingNotificationParams;
struct SAutoCraneParams;
struct SRadarDisplayStateModifier;
struct SLegacyShieldGeneratorMisfireParams;
struct CraftingBlueprint_Base;
struct InteractionConditionIsInteractionShownAsPrompt;
struct BoidsBehaviorRule;
struct SCItemQuantumInterdictionPulseParams;
struct AttachableStateModifierContext_Immediate_Parent;
struct SSCActorEffectsControllerParams;
struct SGameCollisionClass;
struct SMisfireStatCondition;
struct SActorForceReactionsVehicleForceDampeningDef;
struct SCItemLandingGearParams;
struct SLootableItemPortRuleParams;
struct ControlHintCondition_ActorToolState;
struct MobiGlasEffectParams;
struct ItemDashboardScreenMFDParams;
struct AudioGameContext;
struct GlobalJumpTunnelProbeParams;
struct WeaponPortsParams;
struct BuildingBlocks_ComponentParameterInputColor;
struct RParticleFieldNodeDebugParams;
struct STrackviewInterruptComponentParams;
struct ItemResourceDynamicCompositionBase;
struct SHostilityRules;
struct EntityComponentWaterDisturbance_NoiseParams;
struct ProceduralPlanetAudioAlgorithmAveragePosition;
struct SCharacterCustomizerControlParams;
struct BuildingBlocks_WidgetLightSetting;
struct TacticPlayerDistance;
struct AsteroidStateRef;
struct CraftingCost_Ref;
struct SAccumulatorParams;
struct InteractionConditionLinkedUsableItemHasAttachment;
struct WeaponProceduralClipBase;
struct SSequencerUsableDelinkTask;
struct ProjectileSpawnerParams;
struct AtmosphericFlightDataParams;
struct MiningShopProviderEntityComponentParams;
struct LiteralStringUserVariable;
struct SSequencerFirstSelectCarryableTaskParams;
struct SChargeDrainHighlightOutlineValues;
struct SSequencerPickupCarryableTaskParams;
struct HarvestablePreset;
struct JumpDriveApproachRingsParams;
struct MusicLogicTrigger;
struct AreaMapParams;
struct SEntityBoxPhysicsGridParams;
struct SReputationStateModifierParams;
struct SPerkDiscountItemCategory;
struct SGeomCacheEntityComponentParams;
struct SCLoadingPlatformManagerParams;
struct SQuantumBoostParams;
struct CargoOccupancyStateModifier;
struct RTTSunlightParams;
struct SLandingAreaEntryTrackerParams;
struct LightFlareParams;
struct InteractiveVariable_BackToDefaultParams;
struct SIDifficultyModule;
struct BoidRandomTransition;
struct DamageMapChannels;
struct AngYPR;
struct ProcBreathingHoldBreathNoise;
struct DefaultActionsEntityEntryCondition_Tags;
struct DirectRTT_ChromaticAberrationParams;
struct CustomMaterialEntryParams;
struct BuildingBlocks_IntegerTagPair;
struct CameraTimeCamConfig;
struct TriggerSubConditionFocusDef;
struct STemperatureReadOutParams;
struct EntityClusterId;
struct SelfDestructStateModifier;
struct FactionScanProcedureParams;
struct SActivityThresholds;
struct SAnimatedCharacterComponentParams;
struct RaSTaRLibraryElement;
struct CounterMeasureBaseParams;
struct MissionFlowActionBase;
struct SAutoLoadingBoxSizeLoadingTime;
struct OperatorModeStateModifier;
struct TorusFieldGeom;
struct VehicleEditorStat;
struct SPhysicalScreen;
struct LinkedStatRuleBase;
struct SCarryableGrip;
struct HandholdInteractionLink;
struct LootConfig;
struct SStopHackingGameplayTrigger;
struct ReverseTrailsSetting;
struct GlobalEnvironmentEffectSettings;
struct SCMountRotationAxisParams;
struct NotificationDef;
struct AutoSubscribeChatProviderSettings;
struct EnvironmentLightStateParams;
struct SBlobContactEntryTrackerParams;
struct SFrontendS42Settings;
struct VideoComms;
struct SSquadChannel;
struct LedgeGrabbingParams;
struct BuildingBlocks_BindingsLocalizationTimeFormat;
struct ItemResourceDeltaAmount;
struct EmissionsScanProcedureParams;
struct LinkedStatPreset;
struct ShipInsuranceEntityComponentParams;
struct DeliveryItemPortComponentParams;
struct FixedFloat;
struct SEntityDensityClassOverwrites;
struct SInternalHardpointLink;
struct TQSOption;
struct GeometryAsteroidModelTag;
struct SWeaponActionToggleAimStanceParams;
struct SAuxiliaryWeaponActionParams;
struct DialogueExternalSource;
struct EntityComponentPlayerEAUIProviderParams;
struct EAScenarioComponentParams;
struct BuildingBlocks_FlexItem;
struct Vec4;
struct WorldDisplayEnvironmentColor_Custom;
struct BuildingBlocks_BorderRadiusCorner;
struct RttPreviewManagerEntityComponentParams;
struct ArmouryTerminalParams;
struct QuantumDriveSplineFXNode;
struct CraftingResearch;
struct EntityComponentRttAspectMFDSelfStatusParams;
struct SQedVisualGraphEffectParams;
struct SPlayerUsableSearchRouteUsable;
struct SReputationMissionGiverRequirementParams;
struct VehicleSelfDestructScanProcedureParams;
struct WeaponAIAimingMethod;
struct BaseDataSetMatchCondition;
struct PlayerNotificationBannerOptionsParams;
struct MissionPropertyValue_Reward;
struct BuildingBlocks_BindingsColorBase;
struct SStateModifier;
struct ItemResourceDeltaConversion;
struct SecurityNetworkVariableValue_Base;
struct ItemMiningModifierParams;
struct SModelVoiceTagPair;
struct EntityUIDisplayParams;
struct SCItemCommsComponentSetup;
struct AnimationGraph_Timer;
struct SecurityNetworkVariableValue_Bool;
struct ElectricalStateRef;
struct SSCActorRotationComponentParams;
struct SCharacterCustomizerBaseMaterialSet;
struct SCItemSeatDashboardScreenStyle;
struct SpeedThrottleComponentParams;
struct MissionFlowAction_StateChange;
struct SStandardPlayerStats;
struct InteractionConditionEmptyUsableItemPort;
struct S42StatId;
struct LoadoutDummyComponentParams;
struct ControlHintCondition_VehicleState;
struct SCItemMobiGlasParams;
struct DialogueContextReferenceEntry;
struct MonitoredZoneParams;
struct SCharacterCustomizerWildlineSubconditionBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeBase;
struct VehicleLandingGearSpring;
struct SCSeatHeadPosAdjustSetup;
struct HarvestConditionDamageMap;
struct SItemPortDefAttachmentImplementationLogical;
struct SEntityBasePhysicsControllerParams;
struct TriggerSubConditionUsableDef;
struct InteractionConditionCanDropWearableItem;
struct AudioAreaEntityComponentParams;
struct CraftingGameplayPropertyImpl_Base_Int;
struct SCIGTestC;
struct PlayerFormationParams;
struct ThrusterGimbal;
struct TriggerSubConditionDef;
struct SHackingAbilitySlowdownParams;
struct ShadowRegionEntityComponentParams;
struct SDecalParams;
struct HudColor_CustomEntry;
struct SARTrailParams;
struct WeaponControllerStateModifier;
struct SEntityEffectSystem_Attachment_BoneAttachment;
struct HolographicVolumeSphereParams;
struct DefaultAction_ActionDef;
struct BuildingBlocks_BindingsNumberClamp;
struct SElevatorBaseCollisionParams;
struct LegacyCraftingCost_ResourceAmountDerivedFromAmmoContainer;
struct ServiceBeaconGlobalParams;
struct ObjectContainerModifierParams;
struct SSensorMineLaserTrigger;
struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeCapStyle;
struct ControlHintCondition_NOT;
struct BuildingBlocks_SpacerContainer;
struct StatusMaskedRetriggerSetup;
struct SGeometryResourceParams;
struct SCLoadingPlatformTrackviewParams;
struct SJumpPointATCParams;
struct SInteractableMenuTitleParams;
struct SpeedThrottleConfiguration;
struct SPrisonSentenceStateModifier;
struct SCharacterCustomizerRandomizationOverrideParams;
struct UsableStateModifier;
struct SCharacterCustomizerLoadoutItemReplacementMapping;
struct BuildingBlocks_BindingsVariableInput;
struct SChargeDrainRangeParams;
struct SandboxInfractionBaseDef;
struct EntityTemperatureResourceHeatGeneration;
struct HaulingOrder_DropOff;
struct SReputationScopeParams;
struct InteractionConditionOR;
struct JournalEntryText;
struct SecurityClearance_OutfitRequirementDef;
struct STerminalLoginGameplayTrigger;
struct SIObjectives;
struct SProjectedHudParams;
struct SInteractionConditionMovableMover;
struct WorldDisplayRadar_Icon;
struct SendLandingGearObstructedEvent;
struct SMannequinActionDef_PowerSuit;
struct AnimatedAction;
struct PlayerTradeInterfaceParams;
struct JumpDriveTravelParams;
struct SBindingTriggerGameplayTrigger;
struct SAccoladeRequirementWatchedStat;
struct ContractClass_ServiceBeacon;
struct VideoCommsShaderParams;
struct AnimationControlActorIK;
struct CaptureAreaUIParams;
struct FireHazardGlobalPropagation;
struct CommsNotification;
struct DataSetMatchCondition_ExcludeProperty;
struct SCItemControlPriorityCustomValue;
struct ControlHintCondition_ActorAbilityActive;
struct SSCMusicAreaTriggerComponentParams;
struct EntityDefaultLoadoutParams;
struct ActorObservableExtender;
struct SNodeSwapExpansionParams;
struct AsteroidBehavior;
struct SDamageCurveParams;
struct CinematicFlythroughPoint;
struct VehicleAITargetingParams;
struct TimeValue_Partitioned;
struct InteractionConditionEntityTags;
struct UnitTest_ClassA;
struct TQSInput;
struct SSpawnProtectionBarrierParams;
struct EAPickupModule;
struct IObservableExtender;
struct SWeaponAIChargedParams;
struct ActorStatusPreset;
struct ActorGForceCameraEffects;
struct BuildingBlocks_ComponentParameterInputNumber;
struct UIInteriorMapLabelParams;
struct AISeatDashboardControllerComponentParams;
struct SRecoilModifier;
struct ConsumableEffectResource;
struct SLocomotionPersonalityStateFilter;
struct ScanDisplayContactTypeVariableParams;
struct AISeatShieldControllerComponentParams;
struct EAEntityMarkerComponentParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeLayoutPolicy;
struct SItemPortRule_TriggerSequenceDef;
struct UIGraph_BuildingBlocksContextComponent;
struct RadarDisplayEntryEffects_Config;
struct CameraTransitionParams;
struct SSCActorPhysicsControllerComponentParams;
struct SEntityDensityClass;
struct ResourceTypeMolarMass;
struct Vec3;
struct EAUIMarkerBaseComponent;
struct ActorLookAheadPoint;
struct LegacyCraftingRecipeDefRecord;
struct EAPickupFPSParams;
struct RadarSharedParams;
struct SJumpTunnelVisualParams;
struct BuildingBlocks_StaticVariableInteger;
struct ExtendedNameEntryTextLocalized;
struct DefaultActionsEntityState_HasAvailableCommsTap;
struct SCarryableIKInteraction;
struct DefaultPlayerLoadoutEntitlementParams;
struct MusicLogicSwitchValue;
struct ContactHighlightStateParams;
struct ElevatorEffectParams;
struct MissionModifier_SecurityClearance;
struct SPlayerObjectMetadataParams;
struct SMisfireCondition;
struct SCLensAnimationParams;
struct SMobiGlasAppDataPacketBase;
struct BlockedHintParams;
struct SWeaponReticleParams;
struct LegacyCraftingOutput_Base;
struct STargetingParams;
struct BuildingBlocks_EntityRendererPolicy;
struct CraftingResearchUnlock_Base_NonRef;
struct SBurstMisfireEffect;
struct SOrdnanceEmissionsParams;
struct SWeaponActionFireTractorBeamTowingParams;
struct GlobalResourceSkin;
struct SCItemControllableParams;
struct GeomFont_LetterNode;
struct SInteractionPointCuboidPrimitiveParams;
struct BuildingBlocks_NumberTextFormatModifier;
struct RestockService;
struct SMovableGrip;
struct SServiceBeaconCreatorParams;
struct CargoInterfaceParams;
struct HospitalCheckinScreenComponentParams;
struct SSCActorInteractorComponentParams;
struct HitConsistencyParams;
struct SSCLocalPlayerAimControlComponentParams;
struct SSequencerDefInteractionTaskParams;
struct BuildingBlocks_BindingsColorFromIntegerRGBA;
struct SExitInteractionGameplayTrigger;
struct WeaponProceduralRecoilConfigDef;
struct ItemPreview_LightIntensities;
struct GameTokenContainerParams;
struct BindingsOperations_WaveformShapeSine;
struct LinkedStatSetupBase;
struct ExtinguishType_Sphere;
struct SCItemClothingTemperatureResistanceParams;
struct BuildingBlocks_FieldModifierNumber;
struct SMobiGlasPersonalStatusSkillsEntry;
struct PlanetOceanDepthAssignment;
struct FoleyBone;
struct ControlHintCondition_ActorEnvironment;
struct SCItemDockingTubeParams;
struct SSCDamageHandling;
struct SActorStanceHeadSphereDef;
struct BaseService;
struct SMeleeComponentParams;
struct ActorSkeletonConfig;
struct DrugEfficacyConfigForItemSubTypeBase;
struct FloatFactorRange;
struct ConversationNode_ConditionalGameToken;
struct FoleyAxis;
struct ResourceHealthHandlerParams;
struct AttachableStateModifierContext_Self;
struct SEntityTraversingTargetPath;
struct MedicalSkeletonUIProviderParams;
struct CraftingCost_Base_Material;
struct AtmosphereState;
struct BuildingBlocks_BindingsIntegerComponentParameter;
struct RadiationStateBase;
struct InteractionConditionAccessReservedRoom;
struct ProcAimBaseJointTypeConfig;
struct VisualStateParams;
struct BuildingBlocks_BindingsStringFromBooleanCanvas;
struct SSequencerEntityDragTaskParams;
struct SubHarvestableMultiConfigManual;
struct SSequencerDespawnerTaskParams;
struct SCActorDNAComponentParams;
struct SHackingAIDecisionParams;
struct VectorFieldParams;
struct DynamicPowerPool;
struct MarkerTrackingBoxoutParameters;
struct SChargeDrainTargetStateOutlineParams;
struct SecurityNetworkVariableValue_Int;
struct LandingGearStateModifier;
struct SAverageValue;
struct CargoResourceAllocation;
struct STargetingMethodRecord;
struct SWeaponVibrationParams;
struct PowerConnectionStateModifier;
struct GlobalResourceDBA;
struct JumpSystemVibrationParams;
struct LightStatusMultiplier;
struct SHackingAbilityParams;
struct UIDataBankDisplay3DSpaceDustParams;
struct PurchasableVehicleProviderParams;
struct ConsumableContent;
struct SCItemVisorDisplayParams;
struct UsableSlottingAlignmentSlot;
struct AerodynamicTrailCalculationDefault;
struct SandboxInfractionDefinitionTrigger;
struct LinkedStatPassValueBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeSvgScalingBehavior;
struct RewardNotification;
struct SShieldGeneratorMisfireParams;
struct DirectRTT_InterferenceParams;
struct ConversationNode_FlowGraphEvent;
struct SubsumptionMissionAudioComponentParams;
struct SCItemDoorSimpleOpenCloseParams;
struct CraftingCost_Item;
struct SSoftbodyGeometryParams;
struct JumpTunnelForcesParams;
struct ToxiInputModifierDelay;
struct SSCLocalPlayerPersonalThoughtComponentParams;
struct ItemModifierLifetime;
struct ControlHintCondition_VehicleAutoLand;
struct SDFSetParams;
struct SSphereHazardAreaShapeParams;
struct ScanDisplayVariableParams;
struct SQuantumBoostBubbleIntegrityParams_NEW;
struct RoomExtension;
struct SSCSpawningBase;
struct FireHazardGlobalDamageToHealthParams;
struct SubHarvestableConfigSingleManual;
struct SConditionalWeaponAction;
struct PlacementValidator;
struct BuildingBlocks_PreviewSceneRttRoot;
struct SEntityDensityClassOverwritesManual;
struct InteractionConditionEntityIsHeldByOtherActor;
struct TransitDynamicDestinationParams;
struct DockingAnimatorComponentParams;
struct SMobiGlasSetShipRecallAllowed;
struct SWeaponRegenConsumerParams;
struct ItemPortTagsElement;
struct StatusMaskedRetriggerPreset;
struct BuffDurationOverride;
struct FloatUserVariableSetValueTask;
struct WeaponFlickerParams;
struct SApplicationFormRelationParams;
struct BindingsOperations_WaveformShapeRandom;
struct Matrix34;
struct SAnimationScopeContext;
struct LoadoutEditorAdditionalParams;
struct AtmosphereStatePressureTemplate;
struct InteractionConditionInteractionStateMachineTag;
struct BuildingBlocks_LayoutPolicyBase;
struct SControlledEntityStaticTransformParams;
struct SFPSMineableEntryTrackerParams;
struct MusicLogicSwitch;
struct UvInset;
struct ControlHintCondition_RemoteTurret;
struct ActorMotionStateFilter;
struct EATransportSplineTransitionParams;
struct SpecificHandholdAttachSpotChoiceParams;
struct BuildingBlocks_PrimitiveRendererPolicy;
struct SActorProceduralBodyRecoilModifiers;
struct PersonalThoughtPopWindowParams;
struct SEACriticalMessageDef;
struct MusicAreaComponentParams;
struct MissionFlowAction_TokenStateChange;
struct TriggeredWarningAdd;
struct SItemPortInteractionsParams;
struct MaelstromShatterDestroyEvent;
struct SAccolade;
struct StarMapPartyMemberObject;
struct PersonalThoughtPlayerItem;
struct ReputationProviderParams;
struct PlayerUsableItemPort;
struct BindingsOperations_WaveformShapeSawtooth;
struct BuildingBlocks_FontReplacementPair;
struct WeightedLootArchetype;
struct SDecayCurveMaxValues;
struct ScreenEffects_Param;
struct BuildingBlocks_BindingsColorComponentParameter;
struct PlayerUsableView;
struct ControlHintCondition_ActorWeaponState;
struct CommunicationRequest;
struct SQuantumCameraEffectsDef;
struct RewardScale;
struct EntityClassCraftingData;
struct LightningTargetMode_Actor;
struct ContractGeneration;
struct CraftingRecipe_Base;
struct SEntityTraversingNodeTypeItemPort;
struct SurfaceRaindrops_Occluder;
struct SCombatTargeting;
struct SWeaponConditionHeatLevel;
struct SXYZCurvesWithMaxValuesModifer;
struct QuickAccessWheelActionDef;
struct SCLedgeEntityParams;
struct VolumeShape_Box;
struct SpawnDescription_Entity;
struct ContractIntParam;
struct SObjectDataBankParams;
struct SElevatorCustomCollisionParams;
struct ObjectiveHandler_EntityAttached;
struct SActorForceReactionLeanBoneDef;
struct SSecurityNetworkRoomExtensionParams;
struct BaseHoloDisplayProvider;
struct SEntityTraversingNodeTypeZoneHostVehicle;
struct ActorAimAndLookLimitsStateFilter;
struct SCItemHydraulicLeverSwitchParams;
struct LocationManagerParams;
struct ShopInteractionData;
struct UIRenderToTextureTarget;
struct UsableSlottingReferenceItemPort;
struct BuildingBlocks_StaticVariableIntegerConstant;
struct SpawnNotifierEntityComponentParams;
struct SDoorCollisionReactionParams;
struct DirectRTT_DropShadowParams;
struct ContractClassBase;
struct FireRepairerType_Base;
struct MissionFlowTrigger;
struct BuildingBlocks_TriggerNavigation;
struct BuildingBlocks_NumberCompareCondition;
struct AnimationPlayerInputVariable;
struct GrenadeMarkerProvider;
struct STriggerableDevicesBlinking;
struct TriggerSubConditionDistanceDef;
struct EntityComponentPointOfInterestProvider;
struct SHackingAbilityPingParams;
struct PlanetRoomParams;
struct SSimulationParamsBase;
struct MeshFieldGeom;
struct FireHazardGlobalParams;
struct PlayerMarkerProvider;
struct SCItemDoorStatusLightsParams;
struct SSCItemControllableManagerParams;
struct EASerializedCarrier;
struct SCItemMissileControllerParams;
struct SDistortionParams;
struct SCEquipableParams;
struct ProceduralLayoutNode_Base;
struct PlanetDayNightTemperatureBaseParams;
struct BoidActorProximityTransition;
struct SHintGameplayTrigger;
struct ControlHintGameModeRecords;
struct SRemoveCrimesGameplayTrigger;
struct WeatherEffects_Asteroid;
struct SWeaponAIShootingTimeAccuracyData;
struct SEntityComponentUnattendedVehicleMarkerParams;
struct SGreenZoneObedienceComponentParams;
struct SEntityPhysicsControllerParams;
struct SJumpPointParams;
struct SWeaponSimplifiedHeatParamsTemperatureCurveParams;
struct SWeaponActionHighlightCuttablesParams;
struct SRaceCheckpointEntryTrackerParams;
struct SCItemRemoteConnectionParams;
struct ItemResourceNetworkPowerModifier;
struct NameScanProcedureParams;
struct DoorLockStates;
struct LightFlickerWaveParams;
struct ItemModifierTimedLife;
struct CameraSourceComponentParams;
struct SCharacterValidationParams;
struct SEntityBoxGridProperty;
struct CraftingRecipeResults_Base_NonRef;
struct WaterInteractionEffectParams;
struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect;
struct HudColor_HoloMatColors;
struct SCItemTurretAngleLimitParams;
struct InteractionConditionCheckActorState;
struct SPowerSourceComponentParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeHorizontalAlignment;
struct LegalOwnerScanProcedureParams;
struct SUsableExitTransitionParams;
struct ProceduralPlanetAudioComponentParams;
struct SSpreadModifier;
struct DoorNavigationLinkController;
struct CharacterAccuracyModifiers;
struct CinematicTriggerParams;
struct UIAudioEvent;
struct UIGraph_SkyLineWDComponent;
struct GreenZoneFlagsDef;
struct ItemResourceDynamicCompositionExample;
struct SEntityInteractableParams;
struct SAttachableComponentParams;
struct HarvestConditionMovement;
struct InnerThought_AnimBase;
struct ParticleEffectNoneTintingParams;
struct ImpactForceResistance;
struct GlobalFogVolume;
struct ScreenEffects_ParamValue;
struct EntityEffectSystem_ToggleSequencerTask;
struct SEntityComponentNavPointParams;
struct CraftingGameplayProperty_Base;
struct AtmosphereLifeSupportParams;
struct RadiationBehavior_SurfaceRadiationParams;
struct HarvestableTransformParams;
struct SSetParticleEnabledStateGameplayTrigger;
struct SHandsRecoilTimeModifier;
struct SWeaponProceduralAimRecoilCurveConfigDef;
struct SuspensionSprings;
struct SRegenConsumerModifier;
struct SCharacterCustomizerComplexionRandomizationParams;
struct SEntityEffectSystem_Effect;
struct SWeaponAudioReportEnvironment;
struct EntityComponentExtinguisher;
struct SEntityEffectSystem_Category;
struct SFitnessXPGains;
struct PersonalThoughtOption;
struct SItemPortDefAttachmentImplementationSkin;
struct SReputationStandingRewardBonusParams;
struct BuildingBlocks_IntegerLocalizedPair;
struct SCItemCommsComponentParams;
struct BlueprintCategoryAvailability_Base;
struct SCItemWeaponControllerStaggeredFiring;
struct Developer;
struct PurchasableDisplayClothing;
struct EntityComponentNetworkParams;
struct SVehicleAfterburnerParams;
struct SSubsumptionMissionComponentParams;
struct CommunicationVariation;
struct PingSharedParams;
struct VolumeShape;
struct AbilityBreathAction;
struct ResourceLinkedInteractionState;
struct SISpawning;
struct SUnknownEntryTrackerParams;
struct AttachableStateModifierBase;
struct ResourceContainerDefaultCompositionEntry;
struct SObjectiveMarkerComponentParams;
struct RestrictedAreaSplineParams;
struct ObjectiveProperty_Output;
struct BuildingBlocks_BindingsLocalizedFromBoolean;
struct CockpitRuleBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalScrollDirection;
struct TriggeredHealthRatio;
struct DebugLoadoutKit;
struct SSequencerPlayerUsableScoochTaskParams;
struct SEntityHoverPhysicsControllerParams;
struct SVendingMachineSpawnGameplayTrigger;
struct BuildingBlocks_BindingsIntegerFromNumber;
struct LadderNavigationLink;
struct VehicleCollisionParams;
struct SCharacterCustomizerMakeupChannelParams;
struct StarMapMissionObject;
struct ArmorMoveViewRestrictions;
struct TransitCarriageParams;
struct RepairService;
struct SPhysicalProxyComponentParams;
struct BuildingBlocks_ComponentCaptionProperties;
struct HeadMotionConfig;
struct TriggerSubConditionSubsumptionEventDef;
struct SItemPipeSystemParams;
struct ConstraintParams;
struct SEntityEffectSystem_UIOwnerTagEffect;
struct SHelmetLinkedState;
struct PopupDef;
struct SLightFlickerFilteringParams;
struct SActorForceReactionStaggerTagConfig;
struct SCItemProximitySensorParams;
struct DefaultActionDescriptionOverride;
struct CameraLensGhostInstance;
struct HandholdAttachmentTriggerParams;
struct SLockCameraViewAreaParams;
struct CameraGForceShakeConfig;
struct BuildingBlocks_BindingsBooleanComponentParameter;
struct SWeaponAimableAnglesParams;
struct GravityBoxParams;
struct ActorLocomotionAvoidanceParams;
struct SCItemFlashlightParams;
struct EnvironmentLightStateParams_Default;
struct SLauncherBase;
struct SEALoadoutAttachment;
struct CargoResource;
struct BlobVFXDistanceParams;
struct MantleNavigationLink;
struct TakeDownParams;
struct PingBlobLifeTime;
struct TransportAlignmentPointParams;
struct EASimpodStateParams;
struct SInputDeflectionTimeParams;
struct ActorLookAheadRoll;
struct DegYPR;
struct StatusEffectMultipleTrigger;
struct ItemWeaponModifiersParams;
struct UIGraph_ControllerComponent;
struct EABettingModuleParams;
struct ShipWideAudioObject;
struct SInteractionConditionPlayerVehicleNotInArmisticeZone;
struct InteractionConditionEntityIsHeldByInteractor;
struct ArenaCommanderPlanetOverrideParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomRightRadiusBehavior;
struct ActorSignatureMultiplierGlobalParams;
struct ActorStateData_JumpFallValidationParams;
struct UseChannelArchetype;
struct FrontendS42Actions;
struct AtmosphereStateMultiRef;
struct SChangeFactionTrigger;
struct SCItemControlUsableParams;
struct ThrusterGimbalState;
struct PlayerHostilityParams;
struct WeaponProceduralClipHandsOverlay;
struct AINavigationObstacleParams;
struct ControlHintCondition_VehicleJumpDriveState;
struct AIProfile;
struct SIParamsModule;
struct SEASpawningLocalization;
struct GlobalGasCloudVDB_GameplayParams;
struct InteractionConditionListRecord;
struct ActionAreaAudioNoiseExtension;
struct SEntityComponentPersistentEntityEntitlementSpawnerParams;
struct SCItemRadarAIProperties;
struct PersonalTransportBeaconParams;
struct SUsableMovementAlignmentData;
struct SChangeHoloEntityStateModifier;
struct InstancedInteriorManagerComponentParams;
struct ConsumableFoodAttachment;
struct SUsableGroupParams;
struct CraftingBlueprintTier_Base;
struct ActorSomaticShakeConfig;
struct SAILedgeParams;
struct EntityComponentAudioEnvironmentFeedbackPointParams;
struct HarvestDespawnTimerParams;
struct GlobalResourceCharacter;
struct DoorOpenStates;
struct EntityComponentVibrationVehicleParams;
struct CraftingRecipeResults_RecordRef;
struct ItemResourceControlConditionLimitParameter;
struct LadderAccessClimbParams;
struct ReputationPrerequisites;
struct SSalvageRepairRangeParams;
struct PlayerToPlayerCommsCallGlobalParams;
struct InventoryLocation;
struct VehicleItemInteriorController;
struct LightComponentParams;
struct QuantumParams;
struct ObjectiveHandler_WithModule;
struct SCItemControlPriorityValue;
struct SEntityTraversingNodeTypeItemType;
struct CockpitRuleInt;
struct GlobalAtmosphericHeatingSettings;
struct SWeaponAttachmentItemPort;
struct WeaponProceduralClipPose;
struct SQedVisualGraphAnimationParams;
struct MineableCompositionPart;
struct BuildingBlocks_BindingsBooleanField;
struct SEntityFireMisfireEffect;
struct AIPerceptionMeterThresholds;
struct SpecialEventManufacturer;
struct WorldDisplayRadar;
struct SandboxTriggerBaseDef;
struct InterferenceParams_Continuous;
struct BuildingBlocks_FieldModifierBoolean;
struct BuildingBlocks_ColorPicker;
struct SGlobalElectronParams;
struct AtmosphereBehavior;
struct IntUserVariableTask;
struct EntityComponentEffects_Test_Tag;
struct CameraRotationConfig;
struct HintUIData;
struct SScoreboardStat;
struct SS42PlayerStats;
struct AudioEnvironment;
struct CommunicationChannelName;
struct SSetHealthGameplayTrigger;
struct SurfaceRaindropsTargetComponentParams;
struct ActorSpeedCameraEffects;
struct SCItemUserParams;
struct SubHarvestableConfigRef;
struct MineableCommoditiesScanProcedureParams;
struct PercentageStatusTrigger;
struct SSpawnOnTimer;
struct MiningLaserGlobalParams;
struct ProceduralLandingFilter;
struct ControlHintCondition_VehicleLandingArea;
struct RaceRingComponentParams;
struct ElectricalStateTemplate;
struct GlobalResourceGeometry;
struct WaterEffectsGlobalParams;
struct QTERequestConfig;
struct BuildingBlocks_BindingsPathArrayIndexNumber;
struct BuildingBlocks_FontStyle;
struct DeltaSignatureSpikeParams;
struct SFloatNumberComparer;
struct SJumpTunnelObstacleGenerationParams;
struct SUsableTransitionParams;
struct ParticleEffectRandomTintingParams;
struct SUsableRoutingSettings;
struct EntityComponentRttAspectBoxoutParams;
struct EAPickupBaseParams;
struct SActorForceReactionFlinchRangeDef;
struct SEntityComponentATCSpawnableParams;
struct SDespawnRule_OnPartsDetached;
struct SMiningDamageMapParams;
struct ProceduralConnectionLinkController;
struct SAttachmentConstraintParams;
struct TimeValue_LongSeconds;
struct SReflexXPGains;
struct BuildingBlocks_BindingsNumberFromBoolean;
struct BoneCounterRotateConfig;
struct GlobalResourceADB;
struct SARDataGenericComponentParams;
struct EntityComponentVibrationParams;
struct RestrictedAreaParams;
struct EAScoringComponentParamsDef;
struct SEntityComponentManagedEntityRegionParams;
struct DamageMacro;
struct SCItemSeatDashboardScreenPos;
struct CargoGridOccupantProperties;
struct BuildingBlocks_BindingsIntegerFunction;
struct ContractStringParam;
struct ArmorScanProcedureParams;
struct SubHarvestableConfigBase;
struct LegacyCraftingRecipeDef_Direct;
struct SMobiGlasAppLink;
struct BuildingBlocks_BindingsFieldBase;
struct SCharacterCustomizerRandomColorDef;
struct SAccoladeRequirement;
struct SDamageMisfireEffect;
struct ItemTypeCategory;
struct Range;
struct UIWorldDisplay3DParams;
struct EntityComponentRttAspectMFDIFCSParams;
struct LandingSplineVisualParams;
struct FireHazardGlobalLightParams;
struct SurfaceRaindrops_Override;
struct QuantumTravelPreparationStates;
struct SGeometryDataParams;
struct BuildingBlocks_StringStringPair;
struct SGlobalCrosshairParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeWidthBehavior;
struct BreathingHelperParams;
struct SMusicTagBehaviour;
struct ControlHintCondition_VehicleAutoSelectedContact;
struct BlockedColorParams;
struct SActorProceduralAimRecoilModifiers;
struct MissionFailConditionParams;
struct Marker_AbilityComms;
struct SMineableHealthComponentParams;
struct SUsableGroupCoordinatorParams;
struct ContractGenerationParams_Legacy;
struct InteractionConditionDraggedActorNotDead;
struct SSCPlayerGameRulesNetworkComponentParams;
struct SSequencerSetInteractionStateCarryableTaskParams;
struct CraftingOptionEffect_MaterialStats;
struct WearMovementMultipliers;
struct HoloDisplayBackgroundEffects;
struct DefaultActionsEntityState_CanActorBeLooted;
struct IntoxicationWheeledModifierParams;
struct EnvironmentLightComponentParams;
struct DifficultyModifierRange;
struct ProceduralPlanetAudioRiverData;
struct SActorForceReactionStateConfig;
struct ContextualCommunicationCondition;
struct ScreenEffects_ParamValue_Bool;
struct QuantumEffectMusic;
struct ActionRuleNotAllowedInContext;
struct OptionalProbability;
struct SCItemRadarDisplayHoloVolumeParams;
struct BindingsOperations_WaveformShapeTriangle;
struct ArenaCommanderScenarioParams;
struct SCItemSuitHelmetParams;
struct AsteroidStateBase;
struct DialogueBundleReference;
struct TransitDisplayPanelGenericAnnouncements;
struct BaseDifficultyParams;
struct PlacedSurfaceEffects_EmitterEntry;
struct SCActorRestrainableParams;
struct SCInteractionJournalEntryParams;
struct VehicleItem;
struct VoiceChatRxParams;
struct MissionModifier_LawLicense;
struct HealthIconStatusEffect;
struct SMisfireEventParams;
struct GasCloudOverrideVolumeParams;
struct TimeTrialSplit;
struct EntityComponentRttAspectOwnVehicleParams;
struct STransferCreditGameplayTrigger;
struct GlobalJumpDriveEffectParams;
struct ConsumableHelpers;
struct SRGB8;
struct ScanDisplayHeaderOnlySetupParams;
struct AudioEnvironmentFeedbackZoneProcess;
struct SEntityComponentAtmosphereContainerParams;
struct SCItemVehicleDebrisParams;
struct EntryOptionalData_StackSize;
struct SToolArmDeployCondition_Base;
struct DeliveryMissionHelperComponentParams;
struct SClipVolumeProxyParams;
struct SEffectParams;
struct UsableChannelInputAction;
struct WeatherEffects_Atmosphere_WaterDepth;
struct ResourceTypeProperties;
struct LookAtType;
struct SDespawnRule_OnMoved;
struct SCItemRadarSensitivityModifierType;
struct ControlHintCondition_ActorSuitState;
struct ItemResourceSignatureParams;
struct ArmorPenetrationResistanceParams;
struct StatusEffectSetupBase;
struct LinkedStatPassExcessBelowThreshold;
struct SSequencerMoveToAnimateCarryableTaskParams;
struct ScanCustomDataTagEntry;
struct ContractPrerequisite_AreaTags;
struct FireHazardGlobalExtinguishing;
struct SEffectInputParamsParticle;
struct BoidsTerrainSurfaceRepelRule;
struct SSequencerAnimationTaskParams;
struct LadderAnimationOffset;
struct InnerThought_LayoutChoiceBase;
struct SChargeDrainPrimeParams;
struct FireHazardGlobalRoomConnectorParams;
struct CollectibleStateModifier;
struct SubsumptionAssignmentComponentParams;
struct SCoverSystemComponentParams;
struct EntityComponentFuelConnection;
struct SActorForceReactionStaggerRangeDef;
struct UIGraph_JournalEntryDockComponent;
struct ExplosionFlashbangParams;
struct SQuantumDriveEffectTemplateRef;
struct InteractionConditionCanBeBodyDragged;
struct CharacterSkills;
struct SWeaponActionFireTractorBeamMultitractorParams;
struct Marker_AbilityClosure;
struct PostGameScoreboardParams;
struct BaseItem;
struct AudioValueOutputBehaviour;
struct CargoGridOccupantFace;
struct SLegacyMisfireEventParams;
struct EntityComponentVibrationAudioPointParams;
struct BuildingBlocks_LayoutPolicyItemBase;
struct SHackingThreatLevelConditionParams;
struct AuxiliaryVehicleScreenEntityComponentParams;
struct RGB;
struct VisibilityCondition;
struct InteractionConditionPlayerVehicleContainsNoUnownedVehicles;
struct SGlobalShopErrors;
struct SCItemVehicleLandingGearSystemParams;
struct SPowerSourceStateModifier;
struct NavLinkLocation;
struct SQedVisualGraphTransitionTypeParams_ValueBased;
struct EntityComponentEffects_Test_Trigger;
struct BuildingBlocks_FieldModifierEnumeratedTypeHeightBehavior;
struct DateTimeSchedule;
struct BuildingBlocks_StyleSelectorConditionCount;
struct SEntityStaticPhysicsControllerParams;
struct SWeaponAIRapidParams;
struct MotionFootPinningParams;
struct GravlevParams;
struct CameraStaticFixedSpectatorConfig;
struct BuildingBlocks_ComponentTextureProperties;
struct CameraAlternativeViewsConfig;
struct SActorForceReactionProceduralLeanPose;
struct PlayerDockingHubControllerParams;
struct SDashboardPowerInteractionParams;
struct SNodeSwapUnstuckParams;
struct SInitialDamageSpecifierFraction;
struct SInfractionGameplayTrigger;
struct SReputationStateModifierDecrement;
struct InteractionConditionIsUserAI;
struct ScanEvaluationInfractionSettings;
struct UsableGroupCoordinatorDataParams;
struct SSensorMineTriggerType;
struct MissionFlowCondition_PropertyIsSet;
struct SWeaponActionFireTractorBeamCargoModeOverrideParams;
struct UsableChannelInputAction_TriggerSequence;
struct SCharacterCustomizerTattooRandomizationParams;
struct ActorStanceSpeeds;
struct MissionFlowCondition_AnyTokensState;
struct SSequencerPlayerUsableUseChannelTaskParams;
struct SWeaponModifierBeamEffectParams;
struct SSendSeatReadyPoseLockedEvent;
struct STurnOnItemGameplayTrigger;
struct UsableSlottingReferenceLoadoutEntry;
struct SSalvageRepairHighlightOutlineValues;
struct BuildingBlocks_GrabControlsPolicy;
struct UIGraph_BlockingMessagePopUpComponent;
struct SWeaponSimplifiedHeatGlowParams;
struct SItemShopARItemPortParams;
struct ProceduralPlanetAudioTagAndEvent;
struct SeatOperatorSkills;
struct WeaponProceduralClipRaise;
struct HarvestableAreaTypeBase;
struct SAimModifier;
struct DialogueBundleEntry;
struct SInteractableMenuSetTitle;
struct SSpawnEntity;
struct SCItemQuantumInterdictionGeneratorParams;
struct LocalPlayerTargetTrackingAutoZoomComponentParams;
struct InteractionPointTemplate;
struct InteractionConditionCheckItemWeight;
struct SMannequinActionDefRecord;
struct BoidAgentComponentParams;
struct EntityComponentEffects_Test_Link;
struct RadarContactTypeEntry;
struct SEntityParticlePhysicsControllerParams;
struct Marker_AbilityBase;
struct SReputationRewardAmount;
struct SDynamicDifficultyPointsPerEvent;
struct BuildingBlocks_PreviewSceneRttWindow;
struct BaseBuildingParams;
struct EAVotingModule;
struct BuildingBlocks_TimelineTypeReference;
struct ItemResourceDynamicAmountExample;
struct BaseDensityUnit;
struct LinkedStatSetup;
struct ActorStatusUIWarningEntry;
struct SCItemEMPParams;
struct SAuxiliaryWeaponActionFlashlightParams;
struct SActorComponentParams;
struct SConversationIconParams;
struct DeliveryLockerComponentParams;
struct SQuantumTravelEntryTrackerParams;
struct JumpTravelCameraParams;
struct STurnOffItemGameplayTrigger;
struct OrganizationRelationshipParams;
struct GasCloudVDBParams;
struct EntityEffectSystem_EnableSequencerTask;
struct DefaultSphereGeom;
struct UIGraph_KioskBackgroundComponent;
struct SHeadRecoilNoiseParams;
struct ItemResourceDynamicAmountBase;
struct SDirtAccumulatorParams;
struct BoidsAlertPointRepelRule;
struct StatusCost;
struct LegacyCrafterContainerPort;
struct EAEntityMarkerTracker;
struct RadarPlate_Config;
struct BuildingBlocks_StaticVariableBase;
struct SCharacterCustomizerMakeupParams;
struct SJumpTunnelEllipticalParams;
struct SInitialDamage;
struct SCItemExplosiveParams;
struct ActorMovementModifiers;
struct SSCSignatureSystemAudioModifier;
struct SSubsumptionActionAreaTrackerParams;
struct DriftingDrunkBDLEffects;
struct SActorForceReactionHeadRecoilConfig;
struct SendAttemptWirelessLinkEvent;
struct StatusEffectValueAbsolute;
struct GlobalJumpTunnelFogParams;
struct CommunicationVariationCondition;
struct ControlHintCondition_ActorMotionSpeed;
struct WeaponProceduralClipLean;
struct ScreenEffects_Pattern;
struct ItemResourceDynamicAmountJumpTravelFuel;
struct EntityAudioControllerTypeManagementParams;
struct SSequencerMoveToAnimateItemDoorTaskParams;
struct InteriorMapWorldUISectionLabelsParams;
struct LocationMusicConfig;
struct EAPatchNoteParams;
struct SCItemTurretMovementTagName;
struct InnerThought_InteractionSystemConfig;
struct PersonalThoughtActionsMenu;
struct SSequencerStowHeldEntityCarryableTaskParams;
struct JumpFallLandParams;
struct SCTurretSeatRotationParams;
struct Item;
struct SEntityTraversingNodeTypeUserControl;
struct PlanetKillVolumeComponentParams;
struct HealParams;
struct SStandardPlayerSetup;
struct EASpawnRezParams;
struct BuildingBlocks_FieldModifierLocalization;
struct ActorEnvironmentalModifierConfig;
struct SPUHostility;
struct EnvironmentLightProjectionParams;
struct EnvironmentLightStateParams_Emergency;
struct StaminaCost;
struct MatchCycleParams;
struct SCItemControlCondition_Base;
struct SLootableInventoryParams;
struct MagLaunchParams;
struct GlobalJumpPointTuningParams;
struct SCItemTurretSensitivityParams;
struct WheelAudioSurfaceMapping;
struct SecurityNetworkProtocolOverride;
struct AttackDetectionConfig;
struct DefaultActionsEntityState_NOT;
struct CameraFOVConfig;
struct ContractResult_CompletionTag;
struct BuildingBlocks_ColorFromBooleanToggle;
struct SItemPortDefHelper;
struct AtmosphereStateTemplateInternal;
struct SDynamicLaunchZoneDef;
struct EATransportQTravelTransitionParams;
struct ControlHintCondition_GameOptionState;
struct SEntityEffectSystem_PropertyModifier;
struct ActorActionHandler_LadderValidationParams;
struct SResourceTypeDefaultCargoContainers;
struct BaseJournalEntry;
struct SS42SubsumptionMissionComponentParams;
struct ApparentTemperatureParams;
struct PersonalThoughtCameraEffectsParams;
struct StanceCheckConfig;
struct STeamHostility;
struct FloatModifierMultiplicative;
struct StatusEffectValueLinear;
struct MinCompletionTags;
struct MissionFlowCondition_TokenState;
struct ItemPreview_LightingSettings;
struct MissionObjective;
struct GasCloudLightFadeParams;
struct SVehiclePhysicsGridParams;
struct DynamicCameraEffectsRendererParams;
struct EntityComponentHeatConnection;
struct CraftingNameInfo;
struct UIOwnerContextTransitionPair;
struct SHintActivator;
struct SContextualTakedownFragmentTag;
struct InteractionConditionEntityTag;
struct Quat;
struct SubHarvestableConfigSingleRef;
struct SNavPointEntryTrackerParams;
struct LegalRegistrationComponentParams;
struct DoorStateModifier;
struct SCharacterCustomizerClippingVolumeParams;
struct TransitLimboNodeParams;
struct RestrictedAreaBoundaryMeshParams;
struct BuildingBlocks_ComponentIconProperties;
struct AtmosphereStateTemplate;
struct BiomeAccumulationParams;
struct TriggeredVisorMessage;
struct S42StatOperationValue;
struct ProceduralPlanetAudioTagAndRtpc;
struct BuildingBlocks_AspectRatioOption;
struct SVehicleEntryTrackerParams;
struct InteractionConditionInteractableEntityOwnerHasArmorAttached;
struct SReputationStateModifierSet;
struct SSalvageRepairAudioParams;
struct ActorFOVViewParams;
struct BuildingBlocks_BindingsNumberBase;
struct AttachableStateModifierContext_Parent;
struct ScanDisplaySortInfoParams;
struct StatusPriorityBase;
struct SReputationMissionRequirementExpressionElement;
struct TakeDownMaxDistances;
struct SEntityEffectSystem_UIOwnerTriggerEffect;
struct SCLocalPlayerGroupVideoCallComponentParams;
struct InteractionConditionCanBeBodyDragDropped;
struct SAddHealthRatio;
struct IntoxicationBoatModifierParams;
struct ItemResourceDynamicAmountLifeSupport;
struct SCarryableStatesParams;
struct SBBDynamicPropertyLocString;
struct DockingSensitivity;
struct SCItemShipComputerParams;
struct RadiationStateTemplate;
struct SResourceNetworItemType;
struct EntityEventCallbackComponentParams;
struct ScanOverrideDisplayInjectParams;
struct SOrdnanceClusterParams;
struct BuildingBlocks_FieldModifierEnumerated;
struct CraftingCost_Base;
struct StickyFilterRotationParams;
struct SecurityClearanceTokenData_Reputation;
struct DevTeam;
struct StatusEntityComponentParams;
struct UIGraph_MovieClipTransformationInterpolatorComponent;
struct ExtendedNameEntry;
struct SPlayerSkillsTechniques;
struct BuildingBlocks_BindingsNumberAtan2;
struct ItemResourceDynamicAmountFunctionalityRatio;
struct SMineableResourceObjectMetadataParams;
struct FactionRelationship;
struct EntityComponentConsumableLiquidSourceParams;
struct MiningLaserModifiers;
struct LightClipBoxParams;
struct BuildingBlocks_BorderSide;
struct CameraKillerDeathCamParams;
struct SControlledEntityAutoCraneCurve;
struct SInitialDamageSpecifierBase;
struct WorldDisplay_PlaneEnvironment_Ring;
struct SReputationStateModifierSetBool;
struct EAPlayableAreaControllerComponentParamsDef;
struct ActorExternalForceMovementModifiers;
struct SShakeParams;
struct SCollectible;
struct UsableChannelInputAction_ControlInteractive;
struct SVendingMachineItem;
struct ActorViewLimits;
struct ItemMiningBoosterParams;
struct ItemKioskBrand;
struct VoteBaseParams;
struct NavLinkHelperLocation;
struct SCThrustParams;
struct InventoryContainerGridCellSizeCentimeters;
struct ControlHintCondition_VehicleEjectorSeat;
struct RGBA8;
struct SubHarvestableConfigSingleBase;
struct SLocalPlayerShoppingNotificationConfiguration;
struct STurretESP;
struct SPerkEnabledItemCategory;
struct SSafeTeleportPointParams;
struct HospitalEmergencyScreenComponentParams;
struct S42StateParams;
struct LegacyCraftingRecipeList_Base;
struct AIPerceptionProfile;
struct SBaseCargoUnit;
struct Primitive_Ring;
struct SEntityTraversingExecuteNodeBase;
struct InteractionConditionDraggedActorIsPlayer;
struct InteractionConditionPlayerVehicleInAnotherVehicle;
struct HandholdGripType;
struct PlayerAnimatedInteractionTemplateRef;
struct AIPathComponentParams;
struct SAudioProxyParams;
struct LightFlickerWaveRandomParams;
struct MissionModifier_RequestRentShip;
struct BuildingBlocks_TriggerBase;
struct SEnergyPipeDefinition;
struct UIWorldDisplayPathParams;
struct SCItemATCCommsComponentParams;
struct SCItemProximitySensorShapeParams;
struct SSequencerActorAnimationTaskParams;
struct TQSWeightInput;
struct SecurityNetworkProtocol;
struct SLegacyThrusterMisfireParams;
struct SCharacterCustomizerWildlineSubconditionFlowStep;
struct AnimationGraph_KeyFrame;
struct EntityComponentRadiationVolumeParams;
struct SCItemDisplayScreenPreset;
struct WheeledVehicleAudioComponentParams;
struct SCJukeboxParams;
struct SEntityEffectSystem_MinMaxModifier;
struct HeatDegradation;
struct IntUserVariableSetValueTask;
struct AIFireDisciplineSettings;
struct LandingAreaServicesParams;
struct SWearAccumulatorParams;
struct TraversalCostShapeConfig;
struct BlueprintCategoryAvailability_Ref;
struct TemperatureUIParams;
struct ProcBreathingGraph;
struct SInteractionStateTransition;
struct SWeaponProceduralHandsRecoilCurveConfigDef;
struct WeatherEffects_Atmosphere_VolumetricCloudDensity;
struct SecurityNetworkVariableEffect_SetInteractionState;
struct CraftingOptionalEntry;
struct BuildingBlocks_BindingsNumberInterpolate;
struct LinkedStatRulePassBelowThreshold;
struct SIBettingModule;
struct BuildingBlocks_TimingFunctionCustomCurve;
struct SCItemPowerPlantParams;
struct Investigation_Clue_JournalEntry;
struct EAObjectiveMarkerTracker;
struct MovieClipTransformationInterpolatorParams;
struct SStatusTriggerThresholdLevelModifier;
struct ActorMarkerTrackerParams;
struct SHackingCodeErrorEntry;
struct SecurityClearanceTokenData_OutfitRequirementDef;
struct PingVFXSharedParams;
struct SMiningTargeting;
struct LoudspeakerComponentParams;
struct EntityComponentChatProviderParams;
struct PlayerAnimatedInteractionWalkingRequestParams;
struct SActorLocomotionFidgetSeverityParams;
struct SWeaponMountGrip;
struct BuildingBlocks_ExternalColorReference;
struct SInverseInteractionLinkParams;
struct Investigation_Clue;
struct ConsumableEffectHealth;
struct ProcBreathingCurve;
struct SSalvageRepairCardParams;
struct CraftingBlueprint_Base_NonRef;
struct BoidsAreaLimiterRule;
struct SignatureUIGlobalParams;
struct WeaponMisfireFixConfig;
struct SolarSystemComponentParams;
struct SEntityComponentVehicleSeaterParams;
struct RevivalFadeInParams;
struct SCInteractionGeometryMapEntryParams;
struct LegacyCraftingCost_ResourceAmount;
struct AIMercyTimerSettings;
struct EntityEffectSystem_UIOwnerEvent_Goto;
struct AnimationVariableInterpolation;
struct EntityCaptureParams;
struct PlayerScoresUIProviderParams;
struct SCommodityUIProviderParams;
struct SScoreEvent;
struct InterferenceParams_OneShot;
struct ItemResourceDynamicAmountQuantumTravelFuel;
struct ResistanceWeightParams;
struct SEntityComponentLocationDataParams;
struct RemovableChipValue;
struct BuildingBlocks_TimingFunctionSteps;
struct CraftingGameplayProperty_RecordRef;
struct ESPParams;
struct FireHazardFogNoiseParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeScrollEasingType;
struct FireVoxelSelectionShape_Box;
struct SEntityEffectSystem_Attachment_EntitySlot;
struct SWeaponActionFireBeamChainParams;
struct SBBDynamicPropertyInt;
struct ControlHintCondition_VehicleTurretEquippedComponents;
struct SAsteroidGasCloudComponentParams;
struct UISimpleRenderNodeEntityComponentParams;
struct LoadoutProviderEntityComponentParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderTopRightRadiusBehavior;
struct CameraBaseConfig;
struct SObjectDataBankEntryTrackerParams;
struct CameraStaticConfig;
struct FrontendControllerProviderParams;
struct GlobalJumpDriveExitEffectParams;
struct LightningStrengthDriver;
struct ExtinguishType_Spray;
struct GrabCameraControlParams;
struct MapDisplayParamsInteriorMap;
struct CameraSimple3PConfig;
struct BezierModifierInterpolator;
struct SMovableObjectContainerParams;
struct TransitInteractionPanelParams;
struct SEnemyKnowledgeComponentParams;
struct SFPSPlayerStats;
struct VolumeShape_Ellipsoid;
struct EntityComponentFireIgniter;
struct DefaultActionsEntityState_EntityIsAttachedToLootableActor;
struct OpenInventoryOccupantItemTypeProperties;
struct MineableInstabilityParams;
struct SUIEntityGeometryResourceParams;
struct CommodityType;
struct SEntityComponentPushPullModificationObjectParams;
struct SWeaponSimplifiedHeatParams;
struct ScreenEffects_ParamValue_Color;
struct NavigationWaypointMarkerProvider;
struct TraversalCostConditionTags;
struct ChatSystemOptions;
struct IfcsInputDeflectionTimeParams;
struct SurfaceMFXEntityParams;
struct LinkedStatusEffectTrigger;
struct Marker_AbilityJumpPoint;
struct ItemResourceControlRNParameterExternalPort;
struct SIStateModule;
struct ClassificationScanProcedureParams;
struct SEAGameFeedEventParams;
struct SActorForceReactionTwitchRangeDef;
struct SActorProceduralHandsRecoilCurveModifiersDef;
struct SDummyLauncher;
struct SWeaponModifierParams;
struct VoteNextLevelParams;
struct SCMaxLinearVelocityParams;
struct SEASpawning;
struct SWeaponActionFireTractorBeamInputParams;
struct SSpawnOnDestroy;
struct BindingsOperations_LocalizationCombine;
struct BuildingBlocks_GeomEntityAnimationParams;
struct DiminishingReturnsStatusEffectApplicationType;
struct SActorForceReactionLeanFilterDef;
struct ControlHintAlwaysDisplay_WhenConditionsPass;
struct LoadoutItemPreviewTransformParams;
struct ShootingParams;
struct QuantumDriveSplineRollbackParams;
struct GasCloudLightParams;
struct ProjectileTestParams;
struct ConsumableEffectGas;
struct SSpawnRules;
struct BuildingBlocks_FieldModifierEnumeratedTypeMaxHeightBehavior;
struct ItemDashboardScreenPhysicalParams;
struct InteractionConditionAND;
struct SubsumptionMissionLinkComponentParams;
struct SCItemQuantumJammerParams;
struct SEntityEffectSystem_MultiplierModifier;
struct SAtmosphericCompositionInherit;
struct SQuantumResourceNetworkParams;
struct SCItemJumpDriveParams;
struct ControlHintCondition_ActorState;
struct SItemMisfireParams;
struct BindingsOperations_WaveformShapeBase;
struct UIAudioManufacturer;
struct LadderConfig;
struct ContractPrerequisite_Location;
struct SEntityEffectSystem_PatternModifier;
struct SCamerasBaseModule;
struct TriggeredMessage;
struct MissionBeaconProviderEntityComponentParams;
struct AbstractMissionInitParam;
struct LightningRegionLightningParams;
struct InventoryContainerGridCellSizeMeters;
struct ActorMovementSetTransition;
struct TintEntry;
struct SActorForceReactionCurve;
struct QuantumDriveGlobalParams;
struct AudioSignalRtpc;
struct VehicleEditorPortsWithItemData;
struct ProbabilisticStatusEffect;
struct AnimationJointLinearTranslation;
struct JumpDriveAudioMovementParams;
struct SHackingVisualParamsPreset;
struct LightningTargetParams;
struct SCItemTurretStandardAngleLimitTagOverwriteParams;
struct JumpPointEffectParams;
struct SHandsRecoilCurveNoiseParams;
struct SObjectContainerComponentParams;
struct ActorLookLimitsStateFilter;
struct ClothingType;
struct BuildingBlocks_BindingsLocalizationFromTemperature;
struct MarkerAR_ConfigDef;
struct Date;
struct STransponderEntryTrackerParams;
struct BuildingBlocks_PrimitiveVisualState;
struct RestrictedAreaRedoutParams;
struct AIVisualFieldParams;
struct BuildingBlocks_ShapeBase;
struct SChatChannelTypeBase;
struct UsableChannelInputAction_ConsumeWithUsable;
struct HackingControllerParams;
struct FloatModifier;
struct SCItemDoorFiveWayProceduralParams;
struct AudioAllegianceParams;
struct SCItemFuelIntakeParams;
struct MiningFilterParams;
struct JumpPointVibrationParams;
struct FactionPalette;
struct SInteractionPointPrimitiveParams;
struct STintParamsDef;
struct RadarSignatureCategoryEntry;
struct SEntityEffectSystem_SmoothnessModifier;
struct ActorLocomotionPersonality;
struct HolographicVolumeCubeParams;
struct InteractionConditionParams;
struct EAMessageTriggerComponentParams;
struct CraterModifierComponentParams;
struct SWeaponActionToggleParams;
struct Marker_AbilityHostility;
struct ItemResourceDynamicAmountWeaponRegen;
struct TagTrigger;
struct SCItemDoorSingleProceduralParams;
struct SCItemQuantumDriveParams_NEW;
struct SIVotingModule;
struct SCharacterCustomizerHairLengthEntry;
struct LightAudioComponentParams;
struct TargetSelectorSubTargetingStates;
struct ConditionDisplayParams;
struct SVaultingTechniqueGains;
struct PooledLightData;
struct DamageMapDamageForm;
struct ProceduralIdleToMoveParams;
struct AudioThrusterProperties;
struct MotionJukeParams;
struct SItemPortRuleDef;
struct SDoorCollisionReactionToggleParams;
struct SEntityHighlightNode;
struct BuildingBlocks_DropTarget;
struct SStandardCargoUnit;
struct SGasMass;
struct AISyncedMeleeAttack;
struct SCItemMannequinTags;
struct AudioObservableExtender;
struct LoadoutItemHighlightParams;
struct SRenderToTextureRenderLayerParams;
struct HearingDisruptionGameplayTrigger;
struct MotionSmoothingParams;
struct Marker_ShowRule;
struct SCommunicationUserComponentParams;
struct EntityComponentWaterVolumeParams;
struct LedgeObjectComponentParams;
struct AdvancedLootConstraints;
struct AIAimingComponentParams;
struct LinkedStatPassFullValue;
struct STrackViewOutfitExternalSwapData;
struct InteriorMapWorldUIRoomLabelsParams;
struct RammingTrackerParams;
struct SCItemTurretMovementParams;
struct MoveViewRestrictionPenalty;
struct InnerThought_Config;
struct SEntityComponentProceduralOCModifierParams;
struct LandingAreaComponentParams;
struct BlockedTextParams;
struct EntityComponentFireRepairer;
struct SDisruptionGameplayTriggerType;
struct SCItemHoloDisplayParams;
struct SIScoringModule;
struct QuantumDriveHeatParams;
struct SIFCSAuthoredMotionLimits;
struct SEntityHoverPhysicsControllerComponentParams;
struct GlobalJumpPointEffectParams;
struct BuildingBlocks_BindingsColorField;
struct Marker_AbilityVehicleData;
struct BuildingBlocks_GhostPrimitiveSettings;
struct SActorForceReactionsStunDef;
struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect;
struct InteractionConditionPlayerVehicleLandedOrZeroG;
struct SFragmentParams;
struct BindingsOperations_IntegerStringCanvasPair;
struct FunctionalityModifierBase;
struct WorldDisplay_MeshEnvironment;
struct DamageResistanceReference;
struct SurfaceRaindrops_Emitter;
struct SubsumptionConversationLinkComponentParams;
struct UIDataBankDisplay3DInterpolateParams;
struct AudioPropagationParams;
struct SCItemWheeledControllerParams;
struct ActionRuleNotAllowedInGreenZone;
struct ControlHintCondition_AnyHintTrigger;
struct UIGraph_ItemPreviewContextComponentDef;
struct MobiGlasRemoteParams;
struct ChatSystemOptionsModule;
struct BuildingBlocks_LayoutItemCommon;
struct EnvironmentLightSizeParams;
struct SAutoLoadingBoxSizePrices;
struct EAStaticLoadoutDummy;
struct PowerScanProcedureParams;
struct DefaultActionsEntityState_InRestrainRange;
struct BuildingBlocks_ContainerModeBase;
struct DeliveryItemPortPickupComponentParams;
struct ActorGForceHeadBob;
struct ReputationPrerequisiteRange;
struct SLoadoutInventoryItem;
struct BuildingBlocks_TriggerHyperLink;
struct ResourceRangeParams;
struct WantedLevelOwnerScanProcedureParams;
struct BoidsSphericalLimiterRule;
struct ControlHintCondition_ActorStanceState;
struct LifetimeDebugParams;
struct PlayerNotificationBannerParams;
struct InteractionConditionAccountBadge;
struct VehicleInteriorObjectContainer;
struct EAGameCompletionAwardBaseParams;
struct ItemResourceConversionPair;
struct FloatUserVariableTask;
struct RandomFloat;
struct RadarSystemGlobalParams;
struct EATransportTransitionGroupParams;
struct ActorLocomotionSharpTurnParams;
struct DistressCommsSignalComponentParams;
struct EAPickupRepairParams;
struct BuildingBlocks_NumberTagPair;
struct SSCSignatureDummyParams;
struct SEASpawnLocationVehicleSeatSlot;
struct EntityComponentSpawnClosetParams;
struct StatusEffectTrigger;
struct JumpDownNavigationLink;
struct ConversationNode_Base;
struct EventDispatcher;
struct HandholdSharedInteractionLink;
struct SSCSignatureSystemAudioRtpcSubRule;
struct MapDisplayOverrideParams;
struct PhysicalAudioCollisionTrigger;
struct InnerThought_CycleAnimBase;
struct LoadoutInfo;
struct ObjectivePropertyBase;
struct InstabilityScanProcedureParams;
struct SActorAnimationPoseDeathBehaviour;
struct ScoreMessage;
struct SActorForceReactionSustainedImpulseDef;
struct AutopilotParams;
struct SEntityComponentRoomGroupParams;
struct InteractionConditionActorStatusEffect;
struct PlayerAnimatedInteractionHandParams;
struct PlayerChoice_SoftwareCursorEntry;
struct SCSeatAccessLinkedGatewaySequenceParams;
struct SReputationMissionRequirementExpression_And;
struct SMatchNetworkTypeParams;
struct SDialogueComponentParams;
struct LongTermPersistenceWhiteListSubTypeEntry;
struct SActorForceReactionEffectDefaults;
struct DialogueBundleWeighted;
struct Behavior_AtmosphereVehicleEffectParams;
struct SInitialDamageSpecifierFixed;
struct PlanetDayNightTemperatureTemplateRef;
struct LongTermPersistenceSubTypeListOption;
struct PlayerChoice_InteractionModifier;
struct DefaultActionsEntityEntryCondition_CanActorBeLooted;
struct SubHarvestableMultiConfigRef;
struct ConstantDOFGlobalData;
struct SInspectAnimationParams;
struct VehicleLandingGear;
struct InitialDamageOverride;
struct InteractionConditionCanOpenExternalInventory;
struct AudioRtpcWithBehaviour;
struct BuildingBlocks_FieldModifierRecordRefTypeCanvasReferenceRecord;
struct SIHostilityModule;
struct DevOwner;
struct SItemShopReference;
struct BuildingBlocks_ComponentBadgeProperties;
struct ItemResourceDeltaNetworkReflection;
struct SWeaponParticleEffectParams;
struct GlobalCargoLoadingParams;
struct DeliveryLockerItemComponentParams;
struct MusicLogicConfig;
struct BuildingBlocks_TriggerURL;
struct TriggeredWarning;
struct ControlHintCondition_ActorInteractionState;
struct PlayerAnimatedInteractionBase;
struct CraftingGameplayProperty_Base_Float;
struct Marker_AbilityNearestFace;
struct SSCElectronicAccessPlayerComponentParams;
struct SAngleConstraint;
struct SCItemLandingDockControllerParams;
struct ItemResourceControlConditionLimit;
struct InventoryStateModifier;
struct TriggeredHealthValue;
struct SEntityEffectSystem_UIOwnerEffect;
struct AudioBreathInterrupt;
struct DoorNavigationTriggerAdapter;
struct SVehicleHudParams;
struct SElevatorBBoxCollisionParams;
struct SExplosionComponentParams;
struct BuildingBlocks_TriggerSubsumptionCallback;
struct StarMapDisplayProviderParams;
struct SAsteroidFieldComponentParams;
struct SecurityClearanceTokenData_WeaponDrawn;
struct BuildingBlocks_NumberStringPair;
struct OrbitEntityCinematicEvent;
struct EASpawnCameraControllerParamsDef;
struct SCItemControlAIModuleParams;
struct MaterialEffectEntry;
struct BuildingBlocks_AutoTypeParams;
struct ConsumableEffectAddBuffEffect;
struct SCurve;
struct HealthDamageState;
struct SSequencerItemActionTask;
struct RadiationStateTemplateInternal;
struct InputAction;
struct ShockwaveParams;
struct BindingsOperation_BooleanFromStringComparison;
struct SEASpawnRespawnSchedulerParams;
struct VehicleSalvageGlobalParams;
struct SSalvageTractorParams;
struct QuantumGridComponentParams;
struct SSpawner_SpawnedEntityParams;
struct SStandardResourceUnit;
struct BuildingBlocks_GridPackContainer;
struct SubsumptionDataComponentParams;
struct ItemResourceDynamicAmountWeaponAmmo;
struct CommonTargetingSameTargetScore;
struct ActorMeleeDef;
struct SDashboardSeatInteractionParams;
struct BoidsAlignmentRule;
struct UIModeVisibilitySettings;
struct TileParams;
struct ActorStateData_AnimationValidationParams;
struct SMisfireBandParams;
struct CameraBaseSettingsConfig;
struct CounterMeasureChaffParams;
struct BuildingBlocks_Size;
struct SecurityClearanceToken;
struct ResourceTypeDensity;
struct SCAngularMovementParams;
struct AttackCategoryParams;
struct WeaponProceduralClipRecoil;
struct STurbulenceParams;
struct SecurityClearance_OutfitRequirement_RequiredPieceDef;
struct PostureData;
struct SEAObjectiveMarkerStateSettings;
struct SSalvageGlobalStructuralHighlightParams;
struct LandingAnimationSetup;
struct RadarJammerComponentParams;
struct SMissionLocationObjectMetadataParams;
struct SCharacterSkinValidationParams;
struct LinearDamage;
struct SBezierCurveRecord;
struct ActionRuleDisplayParams;
struct SFrontendS42ActionSettings;
struct UIStateColor_Threshold;
struct DeliveryItemPortManagerComponentParams;
struct SQuantumMovementParams;
struct PartialContractRewardRepAdjustment;
struct MiningCameraShakeConfig;
struct SCItemJumpThrusterPackParams;
struct SReputationContextBBEntityListParams;
struct MarkerTrackingLabelParameters;
struct FriendManagerGlobalParams;
struct ActorRestrainPerAttackerConfig;
struct SCBoatMovementParams;
struct LadderMovementParams;
struct SAuthoritativeStatsRecording;
struct CameraLensStreak;
struct BuildingBlocks_DropTargetPolicyBase;
struct SCItemTutorialParams;
struct GlobalResourceObjectContainer;
struct BuildingBlocks_Animation;
struct SActorProceduralAimRecoilCurveNoiseModifiersDef;
struct SUsableEnterTransitionParams;
struct SEntityHoverPhysicsPartialParams;
struct ActionStaminaCosts;
struct ItemResourceNetworkTypeUIData;
struct PlayerNotificationBannerManagerGlobalParams;
struct SEntityVisAreaPhysicsGridParams;
struct SEntityAttachStateModifier;
struct EntitlementItemType;
struct ArmouryItemStat;
struct SEntityComponentOrbitalNavPointParams;
struct SCharacterCustomizerClampedValueParams;
struct SSalvageCargoParams;
struct DescriptionScanProcedureParams;
struct SWeaponProceduralHeadRecoilCurveModifierDef;
struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitVerticalAlignment;
struct DuckPose;
struct MonitoredZoneControllerParams;
struct SResetKeypadInputGameplayTrigger;
struct BuildingBlocks_BindingsBooleanFromNumber;
struct SActorForceReactionFOVScaleConfig;
struct EAScoringParams;
struct RadarJammerSharedParams;
struct ItemAwardWeightingsBase;
struct AreaDisruptionGameplayTrigger;
struct SSalvageRepairItemTypeLocalizationPair;
struct EnvironmentLightMiscParams;
struct BuildingBlocks_BindingsStringFromBoolean;
struct BuildingBlocks_FieldModifierEnumeratedTypeVerticalAlignment;
struct SShieldResistance;
struct EntityComponentAudioHitListenerParams;
struct SMissileObjectMetadataParams;
struct GameNotificationDockItemParams;
struct SecurityClearanceTokenData_PrisonInmate;
struct SIStatsRecordingModule;
struct LandingAreaParamOverrideParams;
struct ItemResourceModifier;
struct ItemAwardWeightingsParams;
struct RadiationStatePropertyParams;
struct AnimationFloatVariable;
struct SSecondaryAmmoContainerParams;
struct LocationMissionLimit;
struct SEAPlayerLoadoutSnapshotEntry;
struct SCItemTurretRemoteParams;
struct ActorFallOverlayNode;
struct EntryOptionalData_SpawnWith;
struct AnnunciatorProviderParams;
struct AsteroidState;
struct ActorSomaticShakingParams;
struct SecurityNetworkVariableEffect_SetHostilityRules;
struct SActorForceReactionLimitDef;
struct SWeaponAttachmentIconPair;
struct PersonalThoughtInventoryOtherFilter;
struct SActorForceReactionBlockConfig;
struct SRopeProxyParams;
struct MissionType;
struct FireHazardSurfaceProperties;
struct ContractClass_Contract;
struct SGlobalCuttableShapeParams;
struct ShipInsuranceParams;
struct SBreakablePhysicsParams;
struct InteractionConditionCanAffordItem;
struct TriggerSubConditionInteractionDef;
struct PlanetSpawnedEntityParams;
struct RastarUIParams;
struct BlinkingLightParams;
struct SItemPortDefAttachmentImplementationBase;
struct Primitive_Quad;
struct SReputationStateModifierIncrement;
struct CraftingMaterialStatTypeRecord;
struct ScanDisplayDeltaSignatureVariableParams;
struct ServiceBeaconNotificationParams;
struct SSuperGUIDComponentParams;
struct IntoxicationTurretModifierParams;
struct ContractLifeTime;
struct SCItemRadarSignatureDetection;
struct ScanSFXSharedParams;
struct SCItemTurretJointMovementParams;
struct QuantumDriveStateModifier;
struct SCommonDamageHandling;
struct MissionFlowCondition_AllTokensState;
struct BuildingBlocks_ComponentParameterInputString;
struct LinkedStatRuleHasCrossedAboveThreshold;
struct PlayerChoice_Option;
struct CapsuleFieldGeom;
struct EnvironmentLightStateParams_Cinematic;
struct SIPlayerStats;
struct BuildingBlocks_FieldModifierRecordRef;
struct SAtmosphericHeatingParams;
struct SXYZCurves;
struct SSequencerPlayerUsableTaskParams;
struct SBoxHazardAreaShapeParams;
struct SWeaponProceduralHeadRecoilCurveConfigDef;
struct InnerThought_Anim;
struct SEAActionItemMessageDef;
struct HoverHeight;
struct DriverScanProcedureParams;
struct InteractionConditionUsableNotInMotion;
struct SQuantumTracePointParams;
struct CraftingRecipeResultsRecord;
struct CraftingBlueprintTier;
struct DeathScanProcedureParams;
struct EAExperimentalModeResetTimeParams;
struct InteractionConditionSwapOnly;
struct SimpleSpriteSlotDouble;
struct SCItemSalvageControllerParams;
struct Behavior_VehicleEffectParams;
struct PrisonDepositKioskParams;
struct EAPlayableAreaMarkerTracker;
struct CinematicCameraControllerSetup;
struct MapDisplayRenderLayerParams;
struct SurfaceAudioProperties;
struct DamageBase;
struct ScanDisplayConditionCompareParams;
struct SBaseHealthComponentParams;
struct BuildingBlocks_RendererPolicyBase;
struct InputPromptConfig;
struct SWeaponActionMiningParams;
struct ChatEmoteAnimData;
struct BoidsVehicleRepelRule;
struct ScreenEffects_ParamStrengthBehavior;
struct LightStateParams_Cinematic;
struct VehicleAIPropertiesParams;
struct EntityReferenceDef;
struct STargetByLineIntersection;
struct ActorStateFilter;
struct SSCActorExternalForceResponseComponentParams;
struct SScanTargeting;
struct AllPortRefillData;
struct StarMapAsteroidRing;
struct BuildingBlocks_BindingsTransformField;
struct UIBindingsConsumerEntityComponentParams;
struct ForceFeedbackMotor;
struct SEntityEffectSystem_AudioEnvironmentFeedbackZone;
struct AttachableStateModifierContext_Sibling;
struct SShopDebugHelperComponentParams;
struct LoadoutKit;
struct LightStyleParams;
struct SSequencerTurretSetLimiterTagTaskParams;
struct LandingAreaGroupParams;
struct SControlledEntityAutoCraneData;
struct SAttachableEntityParams;
struct AudioFootstepSurfaceMapping;
struct CameraLensChromaticAberration;
struct GasCloudOverrideSphereVolumeParams;
struct WeaponControllerMissileEventStates;
struct AudioValueOutputBehaviourCamera;
struct SOverrideControlledEntityCameraParams;
struct BreathingComponentParams;
struct SCentiCargoUnit;
struct AerodynamicTrailCalculationGasCloudOpticalDensityRange;
struct SPartyMemberEntryTrackerParams;
struct SReputationStateModifierBase;
struct ChatManagerColor;
struct SandboxTrigger;
struct SubsumptionEventReceiverComponentParams;
struct SpawnPointComponentParams;
struct ChatChannelFilterRecord;
struct SObjectSilhouetteParamsDef;
struct BuildingBlocks_FieldModifierEnumeratedTypeMinWidthBehavior;
struct GlobalResourceCGF;
struct InnerThought_LegacyUseSystemConfig;
struct SReputationMissionRequirementExpression_LeftParenthesis;
struct SEntitiesGroupComponentParams;
struct RadarContactGamePlayProperties;
struct LinkedStatRulePassCrossingBelowThreshold;
struct EnvironmentalMissionComponentParams;
struct MissionVariableInteger;
struct UIBindingsVendorEntityComponentParams;
struct SHideAmmoAttachmentParams;
struct SIPlayerSetupModule;
struct FrontendStateParams;
struct CameraFreeCamConfig;
struct GreenZoneFlagAdditionalSettingsDef;
struct FireHazardFogParams;
struct ScanOverrideDisplayRemoveParams;
struct VehicleNavigationTriggerAdapter;
struct SThrowableLauncher;
struct SSequencerUsableFillConsumableTaskParams;
struct CameraLensDistortion;
struct ThrusterGimbalAxis;
struct MotionConnection;
struct SEntityComponentHostilityParams;
struct MobiGlasClientParams;
struct SActorForceReactionEnvelope;
struct MissionInitParamFloat;
struct EntityEffectSystem_OverrideColorModifier;
struct SEntityTraversingNodeTypeEntityLink;
struct ScreenEffects_ParamStrengthBehavior_RangeEnable;
struct BuildingBlocks_BindingsLocalizedFromNumber;
struct SUsableAttachFlagParams;
struct NavigationShapeComponentParams;
struct TriggerSubConditionTimerDef;
struct CrafterComponentParams;
struct RadarDeltaSignatureEntry;
struct AIWeaponComponentParams;
struct SCItemShieldEmitterParams;
struct SSCSignatureParamsBase;
struct SCharacterCustomizerDNAHeadParams;
struct ObjectiveHandler_NearLocation;
struct BuildingBlocks_FieldModifierEnumeratedTypeMaxWidthBehavior;
struct InteractionConditionEligibleForPrisonRelease;
struct GameRulesEAStatePostGameParams;
struct Weapon;
struct ControlHints_QuickSelectWheelInput;
struct SubHarvestableMultiConfigRecord;
struct ShipAudioTrackviewParams;
struct SBBDynamicPropertyFloat;
struct SerializedComponentParams;
struct SCItemShopPedestalParams;
struct SAudioBreathParameters;
struct SStandardNotifications;
struct StaminaComponentParams;
struct SCPlayer;
struct BuildingBlocks_BindingsStringField;
struct RadarDeltaSignatureDetectionParams;
struct SendSetAmmoRegenRateEvent;
struct S42FieldManualContentPiece;
struct TargetSelectorStateModifier;
struct ProceduralLayoutGlobalOptions;
struct HandholdAttachPointChoiceParams;
struct InteractionConditionPlayerVehicleNotInQuantum;
struct SCommentEntityParams;
struct SandboxTriggerRecordParams;
struct SQuantumTrailParams;
struct SSubstitutionProxyParams;
struct BuildingBlocks_ContextMenuItem;
struct MobiGlasPersonalMessage_ShipChatScheduleEntry;
struct SEntityTargetingProperties;
struct VoiceChatRxAggregatorParams;
struct EAScoringAssistThreshold;
struct BuildingBlocks_PreviewSceneEnhancedRealityRtt;
struct BuildingBlocks_PrimitiveSettings;
struct BoidsSeparationRule;
struct DialogueBundle;
struct SCItemDisplayScreenStateParams;
struct MiningControllerAudioParams;
struct ColorGradientComponentParams;
struct CraftingRecipeRecord;
struct NavigationCostShapeComponentParams;
struct ProceduralAnimationBone;
struct MissionModifier_FactionHostility;
struct TinyMachineGraphInstanceComponentParams;
struct PlanetOceanAudioCheckpoint;
struct SSolarSystem;
struct SCItemElevatorPathNodeParams;
struct CraftingGameplayPropertyImplValueRange_Int;
struct SEntityTraversingNodeTypeChildTag;
struct UIBindingsInteractionsComponentParams;
struct SRGBA8;
struct SISubsumptionMissionModule;
struct GasCloudLightAudioParams;
struct SSequencerAnimationTaskParamsBase;
struct SCItemClothingRadiationResistanceParams;
struct SEntitySpherePhysicsGridParams;
struct EntityComponentSpawnClosetNPCParams;
struct StringUserVariableSetValueTask;
struct DeliveryTarget;
struct JournalEntryVideo;
struct InteriorMapWorldUIDustParticlesParams;
struct DockingHUDMessagesParams;
struct AmmoParams;
struct DefaultAction_LootingInteractionDef;
struct ProcAimBallJointTypeConfig;
struct LegacyCraftingRecipeDef_Base;
struct MissionDataComponentParams;
struct FloatModifierAdditive;
struct ActorStatusIncapacitatedUIData;
struct SCItemFishParams;
struct InteractiveVariable;
struct BuildingBlocks_StaticVariableCanvas;
struct SEASpawnLivesGovernor;
struct DriftingConsciousnessConfig;
struct CommoditySubtype;
struct EAEntityInclusionParams;
struct GlobalJumpDriveParams;
struct RTTNameTagParams;
struct SCOperatorATCParams;
struct ReputationComparisonRange;
struct SSCActorShoppingAssistanceParams;
struct SEntityComponentRttLiveCameraPreviewParams;
struct ExplosiveOrdnancePingGlobalParams;
struct ObjectiveProperty_Input;
struct HydrogenRefuelService;
struct AsteroidProcedural;
struct SPrimeableAnimationState;
struct InnerThought_LayoutList;
struct SBaseObjectContainerComponentParams;
struct SWeaponActionFireSalvageRepairBeamStrengthValueParams;
struct SStateModifierMovableMover;
struct ShoppingProviderEntityComponentParams;
struct SHackingCodeCommandParam;
struct DefaultActionsEntityState_EntityIsAttachedToDraggableBody;
struct EntityComponentRefineryParams;
struct SHackingThreatLevelConditionAbilityStarted;
struct CameraSourceShakeParams;
struct StatusPriorityOxygen;
struct InteractionConditionEntityIsAttachedToOtherActor;
struct ItemResourceControlConditionGravity;
struct SJumpTunnelDistortionParams;
struct SShipStatusAppParams;
struct ImpoundingDefinition;
struct DirectRTT_BloomParams;
struct SSequencerMoveToAnimateEntityDragTaskParams;
struct BuildingBlocks_BindingsVectorField;
struct SHoloFieldComponentParams;
struct EntityEffectSystem_LightType_AreaLight;
struct UIConfig;
struct SVecWithNoiseParams;
struct SCItemFoleyParams;
struct ToxiInputModifierDistortion;
struct ContractGeneratorHandlerBase;
struct GasParams;
struct ContractPrerequisite_LocationProperty;
struct SCriminalRecordStateModifier;
struct SCItemControlSeatParams;
struct MobiGlasPersonalMessage_ShipChat;
struct FireHazardGlobalUpdate;
struct HudColor_Entry;
struct CameraTrackviewConfig;
struct EntityFireHazard;
struct FunctionalityModifiers;
struct CargoGridSpawnedComponentParams;
struct SCItemWeaponControllerParams;
struct ProcAimHingeJointTypeConfig;
struct SISpectatorModule;
struct GlobalJumpTunnelLightParams;
struct SGeometryActorModelTag;
struct SGuidanceAndControlParams;
struct SObjectContainerPhysicsControllerParams;
struct RadiationBehavior_AsteroidDesignCurveSurfaceRadiationParams;
struct SSalvageModifier;
struct ActorStateData_UsableValidationParams;
struct AbilityComponentParams;
struct SCItemDisplayScreenGlobalLightParams;
struct EntityTemperature;
struct SUnifiedShakeParamsDef;
struct GeometryInstancerComponentParams;
struct CinematicConfig;
struct BuildingBlocks_BindingsVectorBase;
struct MusicLogicReset;
struct SAtmosphericCompositionTemplateRef;
struct SItemShopARParams;
struct MarkerTrackingViewModeParameters;
struct BuildingBlocks_PreviewSceneEntityRoot;
struct UIWorldDisplayPathLineParams;
struct WeatherEffects_Atmosphere_GasCloudOpticalDensity;
struct BuildingBlocks_BindingsIntegerFromBoolean;
struct StayTimeMinOverrideByDockingClass;
struct SecurityClearanceTokenData_NOT;
struct VehicleLandingUIParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeScrollBehavior;
struct ControlHintCondition_VehicleSeatTypeState;
struct SubsumptionMissionMusicComponentParams;
struct ItemKioskLoadoutEditorAdditionalParams;
struct SEntityComponentMiningLaserParams;
struct SpawnDescriptionEntry;
struct SStreamingDependencyComponentParams;
struct LegacyCraftingRecipeList_Record;
struct ObjectDataBankMarkerProvider;
struct InteractionConditionLinkedUsableHasTag;
struct GroundVehicleAudioComponentParams;
struct SubItemScanStatusMappings;
struct CraftingOptionalEffect_Base;
struct TrespassAreaComponentParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeGridPackDirection;
struct SSpawnOnDropped;
struct CraftingMaterialStatEntry;
struct SWeaponActionMeleeParams;
struct ConsumableAttachment;
struct SSequencerUsableTask;
struct LargeObservableExtender;
struct SCItemEnergyControllerParams;
struct TriggerSubConditionMobiGlasDef;
struct AdditionalProjectilesParams;
struct SSetScreenShakeAreaEnabledStateGameplayTrigger;
struct BuildingBlocks_LightParams;
struct BoidAlertedTransition;
struct ContractPropertyTagReplacement;
struct DataForgeComponentParams;
struct WeaponARModifier;
struct AuxiliaryWeaponActionMisfireParams;
struct ConversationNode_Wait;
struct SCItemDoorPortalModeParams;
struct RelationStandingParams;
struct GameModeParams;
struct ServiceBeaconBaseParams;
struct DrugEfficacyConfigForItemSubType;
struct AICoverSurfaceComponentParams;
struct AISeatFlightControllerComponentParams;
struct SCItemObservableScreenViewParams;
struct SWeaponGeometryTagsParams;
struct EnvironmentLightRuntimeParams;
struct ResourceTypeDensityType;
struct SIRoundsModule;
struct WakeMFXEntityParams;
struct ScanCustomValueLocString;
struct SControlledEntityIFCSParams;
struct JumpDriveStateMusicMap;
struct StatusEffectValue;
struct SUsableViewParams;
struct SCItemMiningControllerParams;
struct SCItemAimableComponentParams;
struct SplashDamageInfractionSettings;
struct LinkedStatPassExcessAboveThreshold;
struct Marker_ShowRuleMapDisplayMode;
struct STurretEntryTrackerParams;
struct SCOptionalThrustParams;
struct SMinigameAppParams;
struct SSequencerCarryableTaskParams;
struct LocomotionNavigationLink;
struct SSubsumptionMission;
struct MeleeFragInfo;
struct BoidsCohesionRule;
struct InnerThought_ConversationSystemConfig;
struct SCSeatAccessBaseInteractionParams;
struct SpectatorPointParams;
struct SCItemDoorPortalModeAutomaticParams;
struct GramsPerCubicCentimeter;
struct ItemControllerComponentParams;
struct SEntityTraversalTargetPathContext;
struct GameShapeComponentParams;
struct PointOfInterestData;
struct JumpDriveMusicEvent;
struct FriendlyFireReactionOverride;
struct SSCPlayerUINetworkComponentParams;
struct ScanCustomValueFloat;
struct ItemSignatureModifierParams;
struct TransitGatewayParams;
struct HandholdInteractionPointLink;
struct BuildingBlocks_CalloutSettings;
struct CargoResourceDistribution;
struct BuildingBlocks_SegmentedFill;
struct DynamicCameraEffectsList;
struct HUDSilhouetteParams;
struct ControlHintCondition_VehicleOperatorMode;
struct ActorStanceSpeedsInfo;
struct UnitTest_BaseTest;
struct SHintEntryTrackerParams;
struct SEntityCGFPhysicsGridParams;
struct Behavior_CustomQuantumDriveEffectsPreset;
struct TelevisionScreenParams;
struct DefaultActionsEntityEntryCondition_Primed;
struct MissionDeadline;
struct SServiceBeaconCreatorParamsBase;
struct ChatProviderSettingsBase;
struct SDestroySelfGameplayTrigger;
struct CameraFOVChangeData;
struct ScanDisplayConditionBaseParams;
struct ShipListEntityComponentParams;
struct ItemResourceSignatureEntry;
struct SInteractionPointSpherePrimitiveParams;
struct ItemThrottleParamsBase;
struct PowerTransferResistanceScanProcedureParams;
struct ActorStatusEffect;
struct ReputationRewardBaseDef;
struct UIAudioParameter;
struct UIGraph_ActorLoadoutEditorContextComponent;
struct TriggerSubConditionAngleDef;
struct EntityComponentRoomOccupantParams;
struct BreathVolumeParams;
struct HazardComponentParams;
struct InnerThought_CycleAnimRotateX;
struct ActorLocomotionTurnOnSpotParams;
struct InteractionConditionHackingControllerEnabled;
struct SHardPointHighlightNode;
struct SDecayTimesAndCurves;
struct HoverTilting;
struct CameraKillerDeathCamConfig;
struct SWalletParams;
struct JournalEntryShopAlertsText;
struct RadiationStateRef;
struct PlayerForceReactionParams;
struct SSCItemSelfDestructComponentParams;
struct SCargoGridSpawnedStateModifier;
struct ScanDisplaySetupParams;
struct DefaultActionsEntityEntryConditionDef_InventoryContainerCapacity;
struct SQedVisualGraphTransitionTypeParams_TimeBased;
struct Marker_AbilityVisibility;
struct SMFD;
struct InteractionConditionCanReachMovable;
struct ScanSharedParams;
struct InteractionConditionInteractorNotInZeroG;
struct InteriorMapEntityVisiblityEntityComponentParams;
struct StarMapQuantumTravelDataParams;
struct LegacyUIOptionsParams;
struct SEntityDensityClassOverwritesRecord;
struct OcclusionBindingsParams;
struct HarvestableGeometry;
struct ExplosionRecord;
struct AudioBreathStyleCondition;
struct SActorForceReactionSustainedForceDef;
struct SEntityVoxelPhysicsGridParams;
struct HarvestableParams;
struct InteractionConditionHeldItem;
struct SCItemDoorAnimationParams;
struct SCBoatMovementBuoyancyParams;
struct DirectRTT_AfterTonemappingParams;
struct SGiveClearanceTokenGameplayTrigger;
struct BuildingBlocks_FieldModifierEnumeratedTypeImageScalingBehavior;
struct ItemResourceDeltaBase;
struct SubHarvestableConfigManual;
struct ControlHintCondition;
struct ContractGenerationParamsBase;
struct BuildingBlocks_BindingsIntegerBase;
struct CommunicationSubtitleSettings;
struct SCameraViewStateOrbit;
struct AudioListenerParams;
struct SSCSignatureSystemActorCrossSectionParams;
struct JournalEntryType;
struct CommunicationVariableFloat;
struct BuildingBlocks_RadialTransformChild;
struct SModifierSignaturesEntry;
struct InteractionConditionItem;
struct AudioHitListenerTrigger;
struct LegacyCraftingRecipeDef_Record;
struct BuildingBlocks_TagStringPair;
struct EACapturableEntityComponentDef;
struct ChatManagerDefaultChannelColor;
struct CloneLocationMedicalTier;
struct ItemResourceDynamicAmountCoolant;
struct ObjectiveMarkerLocation;
struct AttachableStateModifierContextBase;
struct SCustomizableMaterialEntry;
struct SMobiGlasLauncherApp;
struct SAudioGroupControllerComponentParams;
struct MissionPropertyValue_StarMapLocation;
struct SSpecialEventInteractionsParams;
struct SCItemCargoGridParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomLeftRadiusBehavior;
struct SGameRulesS42ReputationParamsDef;
struct SecurityClearanceTokenData_UnarmedDef;
struct HaulingOrder_EntityClass;
struct FoleyCollision;
struct BuildingBlocks_FieldModifierEnumeratedTypeMinHeightBehavior;
struct SGalactapediaEntry;
struct EAPickupVehicleParams;
struct FireHazardGlobalDefaultEffects;
struct AudioAllegianceSwitches;
struct SCollectibleCategory;
struct FlashVariableObject;
struct ItemMineableRockModifierParams;
struct LootConstraints;
struct SHackingCodeInputModifiersParams;
struct ZeroGTraversalConnection;
struct BuildingBlocks_BindingsTransformInvert;
struct SMicroCargoUnit;
struct AudioCommsSignalComponentParams;
struct SDockingAnimatorStageTriggerParams;
struct DelayedModifierTriggerParams;
struct EnvironmentFeedbackAudioObject;
struct SEAObjectiveMarkerStatusMessages;
struct MapDisplayControlLimits;
struct CameraComponentOverrideControllerSpawnNotifierComponentParams;
struct EAScoringActorComponentParamsDef;
struct SecurityNetworkVariable;
struct MiningTransactionParams;
struct SGameRulesReputationBaseParamsDef;
struct MovementSystemComponentParams;
struct HackableParams;
struct SEntityComponentCrewManifestParams;
struct ActorStanceDimensionsInfo;
struct DamageResistanceBase;
struct SFirstSelect;
struct EntityComponentRttAspectMFDDiagnosticsParams;
struct CraftingBlueprintTier_Base_NonRef;
struct SecurityClearance_OutfitRequirement_NotDef;
struct JumpDriveEffectParams;
struct SActorForceReactionFilterItemDef;
struct ItemPowerSegmentThrottleParams;
struct SActorEntryTrackerParams;
struct SSCSignatureSystemScanBounds;
struct BuildingBlocks_EntityEffectSilhouette;
struct CommonCurrentTargetDistanceScore;
struct EAEntityDataParams;
struct MarkerTrackingLayoutParameters;
struct ControlHintCondition_VehicleWeaponState;
struct ParticleEffectAudioParams;
struct SGlobalChargeDrainBeamParams;
struct StarMapObjectType;
struct QuickAccessWheelElement;
struct LeanConnection;
struct SHackingThreatLevelConditionLinkPointActivated;
struct STakedownTechniqueGains;
struct SSmoothingWithLerp;
struct LandingSystemStateModifierBase;
struct AfterburnerParams;
struct TrailFadingSettings;
struct SReputationStateParams;
struct ControlHintCondition_VehicleWeaponSystems;
struct LogoutInteractionParams;
struct TransportDoorParams;
struct SActorForceReactionAnimationStaggerConfig;
struct STileSocketParams;
struct SCItemLightGroupParams;
struct RangeEventDispatcherComponentParams;
struct EAPickupSpecialEventOverrideParams;
struct EntityComponentShipCommsChannelParams;
struct RefiningProcess;
struct SGameVolumeComponentParams;
struct SCuttableShapeDefinition;
struct ControlHintCondition_ActorLeanState;
struct ProceduralLayoutNode_Start;
struct EAObjectiveInteractionDef;
struct ConversationStickyFilter;
struct QuantumStateMusicMap;
struct SItemPortBreakable;
struct CraftingGameplayProperty_Crafter_Speed;
struct BuildingBlocks_BooleanTextFormatModifier;
struct SWeaponSpinAnimationParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexItemAlignment;
struct SMineableEntryTrackerParams;
struct AITargetableSettings;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexAxisJustification;
struct SUIGeometryResourceComponentParams;
struct LinkedCloneLocationMedicalTier;
struct SIPickupModule;
struct Infraction;
struct VehicleModelScanProcedureParams;
struct SSCSignatureSystemAudioMultiplier;
struct SWeaponZeroingParams;
struct SItemUserHintActivator;
struct BreathingTriggerDef;
struct FriendManagerNotificationsParams;
struct SEntityComponentCorpseMarkerParams;
struct SCItemManufacturer;
struct ItemSuitArmorSignatureParams;
struct LegacyCrafterInteractions;
struct TransportGatewayTimerPanelParams;
struct FireRepairerType_EntityPos;
struct EntityEffectSystem_LightType_ProjectorLight;
struct SStartRemoveInfractionTimerGameplayTrigger;
struct SMobiGlasSetUniqueShip;
struct CraftingRecipeCosts_RecordRef;
struct ActorStatusScanProcedureParams;
struct CtxGraph_Component;
struct MissionStringVariant;
struct UIGraph_SimpleComponent;
struct BuildingBlocks_IntegerStringPair;
struct UsableItemPort;
struct SHackingAIAlertedStateModifiersParams;
struct HoverCollisions;
struct BuildingBlocks_SteppedLine;
struct OnFootTacticScores;
struct RadarDisplay_Config;
struct DefaultActionsEntityEntryCondition;
struct SJumpTunnelExitParams;
struct TractorBeamTarget;
struct ScanDisplayStandardSetupParams;
struct SLootableMainInteractionsTarget;
struct BuildingBlocks_FieldTransitionNumber;
struct EntityEffectSystem_LightLink;
struct CommodityTemperatureTolerance;
struct MissionVariableFloat;
struct BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalAutoScrollBehavior;
struct SMannequinTagParams;
struct ControlHintCondition_ActorCommsState;
struct ActorBaseStanceMovementModifiers;
struct MedBedComponentParams;
struct BuildingBlocks_SVGContainerMode;
struct SActorStanceDimensionsExtraDef;
struct BuffDurationOverrideIndefiniteS42;
struct mobiGlasAppRef;
struct InteractionConditionCanAttachItem;
struct StatInfluence;
struct HangarAreaComponentParams;
struct MissionLocationParams;
struct ActorTargetedParams;
struct AsteroidStateTemplateInternal;
struct SEntityEffectSystem_OverrideVectorValueModifier;
struct SCItemDisplayScreenPowerParams;
struct SCharacterCustomizerTextureParams;
struct SCItemWeaponRegenPoolComponentParams;
struct STargetSelectorHudParams;
struct Camera;
struct NavigationLinkController;
struct ActorShudderConfig;
struct GlobalJumpPointOpeningParams;
struct UIGraph_MarkerARDockComponent;
struct PortRefillData;
struct HarvestableProviderParams;
struct BuildingBlocks_ColorRecordReference;
struct SAimRecoilNoiseCurves;
struct ControlHintAlwaysDisplay_WhenBaseAndAdditionalConditionsPass;
struct SPlayerLoadoutOverride;
struct SHackingCameraParams;
struct SActorForceReactionExternalImpulseDef;
struct SProjectedDisplayParams;
struct SIReputationModule;
struct EngineeringStateMessages;
struct SVibrationVehicleDef;
struct SAsteroidRingComponentParams;
struct Marker_ShowRuleDisplayMode;
struct EntityComponentRttAspectMFDTargetStatusParams;
struct EntranceDisplayComponentParams;
struct VoiceChatInputParams;
struct SEASimpodSpawning;
struct BuildingBlocks_TooltipPolicy;
struct SProjectedYawLineParams;
struct SActorForceReactionLeanAngleLimitsDef;
struct ArmouryCertificationParams;
struct BuildingBlocks_ColorTextFormatModifier;
struct Time;
struct GlobalResourceBase;
struct FiringRangeTimeEntry;
struct BulletPierceabilityParams;
struct ControlHintCondition_VehicleLockedTarget;
struct SCuttableState;
struct BuildingBlocks_CaseModifierTextFormatModifier;
struct PathingComponentParams;
struct SIDamageHandlingModule;
struct SActorForceReactionFlightDurationConfig;
struct SYawPitchRollCurves;
struct EntityComponentSpawnClosetManagerParams;
struct ObjectiveRewardContributionBase;
struct SCharacterCustomizerRandomizationParams;
struct SCPlayerMissionLogComponentParams;
struct SNonAuthoritativeClientStatsRecording;
struct ScreenEffects_ParamStrengthBehavior_RangeFade;
struct SThrowAudioParams;
struct BuildingBlocks_TriggerModifyNumber;
struct CraftingRecipe_Base_NonRef;
struct AreaBoxComponentParams;
struct SCSeatAccessEntranceInteractionStateParams;
struct BuildingBlocks_BindingsLocalizedBase;
struct SLinkedInteractionStateTags;
struct ActiveContractSettings;
struct ControlHintCondition_VehicleScanWaveAvailability;
struct PlayerScoresManagerParams;
struct ControlHintCondition_VehicleCounterMeasureState;
struct LegacyCraftingOutput_ResourceAmount;
struct AdsCameraParams;
struct VehicleEntranceMarkerProvider;
struct ItemResourceControlParameterUIParameter;
struct NavigationTriggerAdapter;
struct EAPlayerHUDParams;
struct SMisfireDamageValue;
struct Flash_PaletteEntry;
struct EAStateParams;
struct ContractGenerationParams_RequestOnly;
struct PingContactLifeTime;
struct PlayerChoice_HeadLookParams;
struct MobiGlasAppDataBase;
struct SecurityClearanceTokenData_Ownership;
struct BuildingBlocks_StaticVariableNumber;
struct MarkerTrackingViewMode;
struct ContractBoolParam;
struct CounterMeasureProjectileParams;
struct InteractionConditionEmptyItemPort;
struct BuildingBlocks_BindingsLocalizedRandomFromInteger;
struct SActorForceReactionImpulseAccumulationConfig;
struct SHighlightBehaviorNodeParams;
struct SWeaponProceduralHandsRecoilConfigDef;
struct SecurityClearanceTokenData_NeutralZone;
struct SMobiGlasAppDataPacket;
struct GasCloudSunShadowParams;
struct SMobiGlasAppParamsBase;
struct MotionTurnParams;
struct HudColor_HoloParam;
struct LedgeNearbyParams;
struct SCObjectDataBankEntryMarkerConfig;
struct SPerkParamsItem;
struct SMisfireEffect;
struct GeometryBaseHierarchicalData;
struct Behavior_CustomVehicleEffectsPreset;
struct SActorCarryConfigTagSwitch;
struct WorldDisplayEnvironmentColor_Manufacturer;
struct CounterMeasureFlareParams;
struct DefaultStatusTrigger;
struct BuildingBlocks_BindingsNumberField;
struct STargetingMethodBase;
struct PlayerTradeProviderParams;
struct MobiGlasMissionManagerSummaryUpdate;
struct Primitive_Line;
struct SStandardHostility;
struct SObjectiveAnnouncerSettingsDef;
struct SEntityDensityClassOverwritesRef;
struct PowerPool;
struct SSalvageScrapingParams;
struct PrisonSentenceUIProviderParams;
struct SAtmosphericEffectsComponentParams;
struct FormationOffset;
struct SWeaponActionFireTractorBeamStrengthValueParams;
struct AreaEventCallbackComponentParams;
struct SCItemSeatEjectParams;
struct MissionFlowConditionBase;
struct Marker_AbilityScan;
struct SSCSignatureSystemCrossSectionParams;
struct BuildingBlocks_StyleSelectorConditionTag;
struct SFortitudeXPGains;
struct ActorForceMovementModifierConfig;
struct ItemResourceTypeData;
struct DefaultActionsEntityState;
struct CargoDebugHelperParams;
struct SEntityComponentRoomConnectorParams;
struct SSequencerBespokeEntityDragTaskParams;
struct BuildingBlocks_WindowCamera;
struct SItemPortAttachmentPoints;
struct SQuantumDriveParams;
struct SSmoothingTimeBased;
struct RefuelParams;
struct CommunicationVariationRules;
struct ControlFloatInteractiveVariable;
struct MeleeAttackCategoryInfo;
struct SJumpTunnelSectionProbabilityParams;
struct EntityClassStaticDataParams;
struct WeightedDialogueBundleEntry;
struct SJumpDriveFlightSteeringParams;
struct SS42PersonalStatusDrugBuffEffectString;
struct SRenderProxyParams;
struct NumResultsConstraints;
struct SCEntranceItem;
struct SVehicleItemportInteractionLink;
struct ReputationRewardFaction;
struct StolenScanProcedureParams;
struct KilogramsPerCubicMeter;
struct SeatReticleArchetype;
struct Commodity;
struct MissionInitParamTag;
struct SecurityNetworkRoomSettings;
struct BuildingBlocks_PreviewScreenBase;
struct VehicleDifficultyParams;
struct SItemPortRule_HideAllInteractionsDef;
struct PlayerAssetManagerProviderParams;
struct SVendingMachineStateModifier;
struct PingTypeParams;
struct BuildingBlocks_ShapeTriangle;
struct SDashboardEngineInteractionParams;
struct SReputationMissionRequirementExpression_Not;
struct SSequencerDefTaskParams;
struct CameraSpeedShakeConfig;
struct SMusicValueTagMap;
struct RParticleFieldNodeComponentParams;
struct ControlHints_UsableLinkedInteractiveAction;
struct SHackingThreatLevelConditionTime;
struct BuildingBlocks_BindingsRotationField;
struct SStarGalaWaveParams;
struct ActionRuleParams;
struct QuantumTravelStates;
struct Bindings_SubsumptionBroadcastEvent;
struct SEntitySphereGridProperty;
struct SSalvageStructuralParams;
struct WeaponAIAimingMethodHighLowArc;
struct WingmanOrderInfo;
struct EntityComponentPowerConnection;
struct SCItemDoorPortalModeManualParams;
struct SEntityInsuranceProperties;
struct SStreamingObjectContainerComponentParams;
struct SReputationMissionRequirementExpression_RightParenthesis;
struct ShipStateMonitorComponentParams;
struct SPowerUserState;
struct SMusicValue;
struct ScreenEffects_ParamValue_Int;
struct SBaseInteractionGameplayTrigger;
struct PlayerMissionDataBankManagementComponentParams;
struct BuildingBlocks_BindingsBooleanFromInteger;
struct SSpawnOnStreamIn;
struct SendItemResourceNetworkedStateEvent;
struct InteractionConditionActorAbility;
struct ControlHintCondition_HintTrigger;
struct SCoolerMisfireParams;
struct TransitNodeDialogueContext;
struct PlayerMarkerSubscription;
struct SecurityNetworkVariableEffect_Base;
struct BezierDamage;
struct SphereFieldGeom;
struct ARMarkerGlobalParams;
struct SEntityEffectSystem_Attachment;
struct ItemResourceControlOutputBase;
struct BulletImpulseFalloffParams;
struct DialogueContextEmbeddedEntry;
struct RestrictedAreaSphereParams;
struct MobiGlasAppContent;
struct SCBoatMovementInputParams;
struct SLegacyItemMisfireParams;
struct SDashboardQuantumInterdictionParams;
struct PlayerGroupMemberComponentParams;
struct BasicPingTypeParams;
struct BuildingBlocks_Timeline;
struct SSCLocalPlayerAudioComponentParams;
struct QuantumDriveAudioParams;
struct CommodityDamageConfiguration;
struct InterferenceParams;
struct JumpDriveUIConeParams;
struct BoxAreaAlignmentSlotTypeParams;
struct SWeaponConditionIsHeldEntity;
struct SCItemVehicleArmorParams;
struct SHackableStateModifier;
struct AISeatOperatorComponentParams;
struct TileManagerParams;
struct RecordRefUserVariableTypeBase;
struct SGameRulesAnnouncerParams;
struct ComponentMigration;
struct ItemPortHostComponentParams;
struct CameraShakeConfig;
struct HaulingOrder_Resource;
struct MissionPropertyValue_Object;
struct ActorLookAheadComponentParams;
struct MissionScenarioScheduleConstraint;
struct AerodynamicTrailCalculationPropertyRange;
struct SAISkillsComponentParams;
struct ActorAimLimitsStateFilter;
struct UIWorldDisplayAutoRotationParams;
struct BuildingBlocks_BindingsTransformBase;
struct ItemPreview_TurntableSettings;
struct ChatCommandName;
struct ObjectiveHandler_PlayerAttached;
struct GlobalAudioSettings;
struct GlobalJumpTunnelEffectParams;
struct JumpDriveVibrationParams;
struct LocalPlayerSpeedThrottleComponent;
struct InteractionConditionNAND;
struct BuildingBlocks_BindingsRotationBase;
struct TintPaletteRef;
struct AnimationJointBaseRotation;
struct SInteractionParams;
struct SItemPortDefAttachmentImplementationEntity;
struct MeleeComboChainLink;
struct SBeamParticleAudioParams;
struct SStartFillingGasTankGameplayTrigger;
struct ControlHintCondition_TryOnState;
struct WindAreaParams;
struct SLightStateOverride;
struct ScanDisplayHeaderWithBodySetupParams;
struct CommunicationATLConfig;
struct SMisfireDamage;
struct SSCSignatureSystemSDFCrossSectionParams;
struct SDoorCollisionReactionBaseParams;
struct InnerThought_LayoutStates;
struct JumpDriveFlightParams;
struct BlueprintCategoryRecord;
struct SHydraulicPumpableComponentParams;
struct SARMarkersParams;
struct PlayerShipRespawnShipInfo;
struct GravityBaseParams;
struct STransponderObjectMetadataParams;
struct SHealingBeamConsumableType;
struct RearmRefuelTerminalParams;
struct GlobalJumpDriveEntryEffectParams;
struct CraftingCostRecord;
struct ContactTypeScanProcedureParams;
struct SetTriggerableDeviceActiveEvent;
struct CameraCollisionConfig;
struct PVPBountyBaseTemplateParams;
struct QuantumDriveEffectSettings;
struct AreaOutdoorMaterialParams;
struct SInteractorHintActivator;
struct SJumpDriveFlightTurbulenceNoiseParams;
struct SChargeDrainCardParams;
struct SSCSignatureEmissionBaseModifier;
struct InteractiveVariable_BackToDefaultIntParams;
struct SOrbitComponentParams;
struct SHackingCodeSystemLogEntry;
struct SRemoteRigidEntityControllerParams;
struct ConsumableEffectModifyActorStatus;
struct BuildingBlocks_SvgFill;
struct ActorActionHandler_ValidationParams;
struct SGasPressureRangeParams;
struct CameraDistanceConfig;
struct AudioRtpc;
struct BuildingBlocks_TriggerCloseContextMenu;
struct InnerThought_LayoutBase;
struct SGasAtmosphereEntryParams;
struct LinkedStatRulePassCrossingAboveThreshold;
struct SProjectileLauncher;
struct SILayerEntitiesGroupManager;
struct BoidsActorRepelRule;
struct SEntityComponentHostilityCompositeParams;
struct BlueprintCategoryAvailability_Base_NonRef;
struct RaceCheckpointComponentParams;
struct SCItemAIModuleParams;
struct AccessibilityBaseParams;
struct MiniGameRecordDef;
struct ShipRecallParams;
struct PlanetNavigationVolumeParams;
struct AudioWaterInteractions;
struct BuildingBlocks_PreviewSceneHoloVolume;
struct SCItemDoorCodeProceduralParams;
struct SecurityClearanceTokenData_OtherToken;
struct HoverHandling;
struct ConstantDOFPosWeights;
struct InteractionConditionLootableNotBeingViewedByAnyOtherInventory;
struct CraftingCost_Resource;
struct SProjectedPitchLadderParams;
struct SDashboardSystemInteractionParams;
struct UsableSlottingReferenceElementBase;
struct ObjectiveProperty_Referenced;
struct TargetSelectorRootTargetingStates;
struct Marker_AbilityOverrideDisplayName;
struct DigitalSignageContent;
struct LightSizeParams;
struct JournalEntryLawText;
struct SSCSignatureSystemAudioOverride;
struct SimpleSpriteSlot;
struct BuildingBlocks_StaticVariableLocalization;
struct UIWorldDisplayInputSoundParams;
struct BuildingBlocks_FlexContainer;
struct SWeaponProceduralClipSwayOvershoot;
struct BuildingBlocks_FieldTransitionColor;
struct SEntityEffectSystem_OverrideValueModifier;
struct HoverPlane;
struct ExitCollisionCheckOverrideParams;
struct CommsChannelDef;
struct SJumpPointPushAreaParams;
struct EntityComponentRoomFadeVolumeParams;
struct MarkerTrackingDisplayParameters;
struct BuildingBlocks_FieldModifierEnumeratedTypeDustParticleMovementRestriction;
struct EAPickupMissilesParams;
struct SInstancedInteriorGatewayParams;
struct JumpTunnelEffectTintingParams;
struct SThrowMode;
struct SSCItemTargetSelectorComponentParams;
struct StatusTriggerBase;
struct WeaponAIAimingMethodDirect;
struct CraftingRecipe_Ref;
struct MissionPropertyValue_AIName;
struct PlayerChoice_RemoteCommsConfig;
struct BaseSpawnerPrerequisite;
struct SEntityCgfGridProperty;
struct HaulingMissionHelperComponentParams;
struct SDetachItemGameplayTrigger;
struct GlobalJumpTunnelHostParams;
struct ProceduralEntityAudioParams;
struct ObjectiveHandler_Local;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexWrap;
struct CommsTapScanProcedureParams;
struct ControlHints_ActionInput;
struct UIWorldDisplayInputSoundRtpcParam;
struct SSetSecurityNetworkVariableTrigger;
struct SMatchChannel;
struct HintManagerParams;
struct JournalEntry;
struct SSpawnOnlyOnRequest;
struct CustomLookAtBB;
struct SEntityComponentSmoothingModificationObjectParams;
struct MissionInitParamBoolean;
struct ScreenEffects_ParamValue_Vec4;
struct SSequencerItemDoorTaskParams;
struct EntityComponentLocalPlayerVisorAudioParams;
struct SEntityObjectCharacterComponentParams;
struct LinkedStatRulePassAlwaysNegative;
struct BuildingBlocks_StaticVariableFontStyle;
struct TurretModifiersParams;
struct BuildingBlocks_BindingsLocalizedModifyCase;
struct QuickAccessWheelAutoOperatorModeDef;
struct InteractionConditionPlayerAloneInVehicle;
struct ControlHintCondition_ActorSightZeroMode;
struct EntityTemperatureSignature;
struct SQuantumBoostAudioParams;
struct SActorDeathPoseVariant;
struct FireHazardSpawnParams;
struct ControlHintCondition_VehicleMainThrustersState;
struct ControlHintCondition_VehicleDestroyedState;
struct ControlHint_DisplayInfoSet;
struct TriggerSubConditionActionAreaDef;
struct CraftingResult_Resource;
struct ExtendedNameEntryTextBase;
struct BulletElectronParams;
struct DeltaSignatureSensitivityParams;
struct MissionScenarioSchedule;
struct SDFMRaceObjectives;
struct WaterShapeComponentParams;
struct SEntitySoftExPhysicsControllerParams;
struct SCZeroGLaunchParams;
struct EnvironmentLightStateParams_Aux;
struct AutoMountRadiusParams;
struct MobiglasDisplayLocation;
struct StringUserVariableTask;
struct BindingsOperations_IntegerStringFontStylePair;
struct SWeaponAimDofSettings;
struct BuildingBlocks_StandardContainerMode;
struct MissionScenarioScheduleRecurrence;
struct MusicLogicNode;
struct SVisionComponentParams;
struct CraftingCost_Base_NonRef;
struct CameraShopItemOffset;
struct SCIGTestBase;
struct SFireMisfireEffect;
struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitHorizontalAlignment;
struct PlacementValidatorPlacingOnMineable;
struct ProceduralEntityParams;
struct MissionInitParamInteger;
struct BuildingBlocks_StaticArrayDataIntegerRange;
struct MissionReward;
struct DateTime;
struct TransformationInterpolator;
struct SUsableMovementAlignmentParams;
struct WeaponControllerCycleMissileStates;
struct ScanDisplayLocStringVariableParams;
struct PlayerDockContextComponentGlobalParams;
struct TriggerSubConditionPlayerActionDef;
struct ControlHintCondition_VehicleSalvage;
struct MaelstromShatterBaseEvent;
struct SendDockingEnableEvent;
struct UIGraph_SMLoadoutContextComponent;
struct LongTermPersistenceSubTypeAll;
struct DaylightParticleGroupComponentParams;
struct LoadoutDummyTransformParams;
struct RestrictedAreaATCComponentParams;
struct PopupParams;
struct AreaShapeComponentParams;
struct ControlHintCondition_ActorPoseState;
struct CraftingRecipe;
struct FireVoxelSelectionShape;
struct SActorForceReactionFilterDef;
struct ScreenEffects_ParamValue_Texture;
struct SCIGTestA;
struct SSetHazardEnabledStateGameplayTrigger;
struct BuildingBlocks_FieldModifierEnumeratedTypeIconWidgetPreset;
struct BuidlingBlocks_FieldModifierAnimation;
struct SpawnerPrerequisite_NOT;
struct UIGraph_VehicleLoadoutEditorContextComponent;
struct SCharacterEyeValidationParams;
struct ItemResourceRoomModifierParams;
struct SManufacturerMFDView;
struct SignatureParams;
struct CameraSpringAxesConfig;
struct SetDoorAutoCloseGameplayTrigger;
struct MiningControllerGlobalParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeAlignment;
struct BaseItemModifierParams;
struct ControlIntInteractiveVariable;
struct SAimRecoilModifier;
struct GravityShapeComponentParams;
struct JumpDriveWakeParams;
struct MotionTurnSetupFiltered;
struct SItemPortConnectionParam;
struct ActorStateData_StateValidationParams;
struct DefaultAction_InteractionDef;
struct LinkedStatRulePassAboveThreshold;
struct Investigation_Clue_CorpseScanInfo;
struct SDummyPlayerComponentParams;
struct SItemPortDefAttachmentImplementationBone;
struct ShipServicesProviderParams;
struct SAreaComponentParams;
struct SPayFinesGameplayTrigger;
struct BaseCargoFillCapacityValue;
struct SEASpawnRespawnWaveSchedulerParams;
struct ControlHintCondition_ActorAbilityAvailable;
struct GeometryInstancer_Serialized;
struct VehicleEditorValueData;
struct GasCloudLightNoiseParams;
struct SGasTankFillerStateModifier;
struct ControlHintCondition_VehicleEquippedComponents;
struct BindingsOperations_StringCombine;
struct GasCloudVDBDataParams;
struct SPersistentComponentParams;
struct LocStringUserVariable;
struct BuildingBlocks_PreviewScreenWorldRoot;
struct VehicleRoleScanProcedureParams;
struct SActorForceReactionEffectRangeDef;
struct IMannequinActionDef;
struct CraftingRecipeCostsRecord;
struct SEntityComponentPhysicsGridParams;
struct ConsumableParams;
struct SCItemDeployableShieldParams;
struct SCarryParams;
struct SEntitityEffectSystem_SystemBase;
struct LocationPinMarkerProvider;
struct DrugEfficacyForConsumableType;
struct BlockingHelperComponentParams;
struct BuildingBlocks_BindingsNumberCurve;
struct InventoryScanProcedureParams;
struct SSequencerTurretRecenterTaskParams;
struct AsteroidStateTemplate;
struct BindingsOperations_AudioEvent;
struct SSalvageRepairGlowParams;
struct UIGraph_PMAContextComponent;
struct SVehicleHintActivator;
struct CriminalRecordUIProviderParams;
struct SCollectibleComponentParams;
struct SActorProceduralHandsRecoilCurveDecayModifiersDef;
struct ChatFilter;
struct WorldDisplayEnvironmentBase;
struct ActorStateData_ValidationParams;
struct SRtpcBehaviour;
struct TransitPeripheralParams;
struct BuildingBlocks_ComponentParameterInputLocalization;
struct TransportResponsiveGatewayControlPanelParams;
struct SCItemRadarDisplayScreenParams;
struct SGlobalSalvageRepairBeamParams;
struct MovementRecordingParams;
struct SActorDeathBehaviour;
struct SGrip;
struct CraftingResearchUnlock_Base;
struct LicensedItemModifier;
struct STurretHealthModifierDef;
struct FoIPConfigurationProviderParams;
struct ControlHintCondition_ActorMissionOfferReceived;
struct BuildingBlocks_TriggerModifyString;
struct BuildingBlocks_StaticArrayDataNumberRangeRandom;
struct Looping_Quad;
struct InteractionConditionPlayerVehicleNotDestroyed;
struct LightProjectorParams;
struct SActorProceduralHandsRecoilModifiers;
struct ContractPrerequisiteBase;
struct ProceduralLayoutNode_AlternateSubGraphProperties;
struct ActorStatusBuff;
struct DefaultActionsEntityEntryCondition_NOT;
struct Deg3;
struct ContractAutoFinishSettings;
struct TargetSelectorCycleTargetStates;
struct StatusEffectSetupPreset;
struct AreaBaseComponentParams;
struct ShopFranchise;
struct SMissionEntryTrackerParams;
struct SCItemClothingHiddenPartsParams;
struct InteractableHelmetParams;
struct UICanvasDecalDescriptorEntityComponentParams;
struct TransportDestinationParams;
struct BuildingBlocks_BindingsColorFromNumberInterpolate;
struct RecordRefUserVariableTypeCanvasRecord;
struct SecurityManualInput;
struct GreenZoneComponentParams;
struct ProceduralAimRigComponent;
struct GPUParticleAudioStruct;
struct SWeightedRewardEntry;
struct CraftingBlueprintRecord;
struct HologramParams;
struct SExplosiveEntryTrackerParams;
struct SAttachableStateModifier;
struct Investigation_Suspect;
struct IntInteractiveVariable;
struct SEntityandAttachmentsHighlightNode;
struct DevOwnerType_Base;
struct EntityEffectSystem_BaseSequencerTask;
struct MarkerTrackingCommonMapParameters;
struct ControlHintCondition_ActorStatusEffectAcive;
struct SWeaponActionFireTractorBeamRotationParams;
struct BuildingBlocks_BindingsNumberFromInteger;
struct BuildingBlocks_FieldModifierEnumeratedTypeScrollPolicy;
struct SServiceBeaconDifficultyEntry;
struct EntityLinkTargetingParams;
struct TransitManagerParams;
struct AIFormulaScoreModifiers;
struct ItemResourceDynamicResourceFuelTank;
struct SUnifiedShakeParamsRecord;
struct LinkedStatSetupPreset;
struct SCItemAttachableObjectContainerParams;
struct SShopComponentParams;
struct UIInteriorMapSectionParams;
struct SSubstractHealthRatio;
struct ProximityAssistModifierParams;
struct BuildingBlocks_BindingsBooleanInvert;
struct SCDynamicRigLightParams;
struct SActorForceReactionLeanFilterItemDef;
struct SCItemLightGroupControllerParams;
struct BuildingBlocks_StringIntegerPair;
struct NavigationLinkType;
struct AudioSplineParams;
struct CraftingRecipeCosts_Ref;
struct BuildingBlocks_FixedOrRelativeValue;
struct LightStateParams_Emergency;
struct IneractionConditionUserNotInUsable;
struct TriggerSubConditionS42StatsDef;
struct SSpawningBase;
struct GlobalGasCloudVDBParams;
struct AtmosphericCompositionTemplate;
struct LandingSelection;
struct ScanCustomDataDef;
struct UI3DDisplayInput;
struct SGeometryModelTagBase;
struct CommunicationVariableString;
struct BuildingBlocks_IntegerWidgetPairDef;
struct SCLinearMovementParams;
struct ToxiInputModifierAxis;
struct ScanDisplaySignatureSetupParams;
struct CraftingResearch_Base;
struct BuildingBlocks_Range;
struct WorldDisplayRadar_Line;
struct SNavPointObjectMetadataParams;
struct ShockDiamondParams;
struct QuantumMusicEventBase;
struct InnerThought_CycleAnimRotateY;
struct WeatherEffects_Atmosphere;
struct TemperatureDamageControl;
struct JumpDriveVelocityStrengthParams;
struct Hauling_ObjectiveSettings;
struct AnimationVariableLink;
struct BuildingBlocks_SlicerBase;
struct SWeaponActionFireTractorBeamMovementParams;
struct SCDefaultZeroGTraversalParams;
struct STargetByRaycast;
struct ContactTaggingSharedParams;
struct SSCSignatureEmitterParams;
struct SCItemDisplayScreenStateLightParams;
struct WeaponProceduralClipSway;
struct ReputationValueSetting;
struct INavigationCostVolumeExtender;
struct GravityAreaParams;
struct EntityComponentRttAspectMFDScanningParams;
struct LinkedStatPassCustomValue;
struct SCarryAnimationParams;
struct Marker_AbilityProximityVisibility;
struct TransportGatewayParams;
struct LegacyMobiGlasParams;
struct QuatTS;
struct SEntityInsuranceDisplayParams;
struct SReputationStateModifierSetToState;
struct BuildingBlocks_StackContainer;
struct SWeaponActionFireTractorBeamGrappleParams;
struct SCriminalRecordHackingStateModifier;
struct HarvestableOverrideAreaParams;
struct HarvestableTagListString;
struct BuildingBlocks_ComponentParameterInputInteger;
struct SEntityEffectSystem_BlinkingModifier;
struct InnerThought_ColorParams;
struct PersonalTransportParams;
struct PlayerHostilityAccidentalFireParams;
struct HarvestConditionHealth;
struct AerodynamicCurveParams;
struct ItemResourceDynamicAmountFuelNozzleFuel;
struct ControlHintCondition_VehicleDocking;
struct MissionLocationValidation_EntityTags;
struct HackingChipParams;
struct SCItemDisplayScreenUISourceParams;
struct SEntityTraversingNodeTypeParentEntity;
struct SOrdnanceAudioParams;
struct BuildingBlocks_BindingsLocalizedSIUnitFromNumber;
struct BuildingBlocks_TargetSlicer;
struct EntryOptionalData_Base;
struct CraftingRecipeResults_Ref;
struct SEAAnnouncerParamsDef;
struct SSCShipStatusAppParams;
struct SActorForceReactionAimPunchConfig;
struct ControlHintCondition_ActorZeroGEVAState;
struct SCSeatConnectionParams;
struct SAsteroidClusterComponentParams;
struct InteractionConditionShippingBuild;
struct CraftingGameplayProperty_Base_NonRef;
struct SetDoorPowerStateEvent;
struct SHostilityWantedLevelParams;
struct DeadBodyParams;
struct CraftingOptionEffect_Time;
struct SToolArmDeployCondition_LandingGear;
struct InteriorMapWorldUIRoutePathLineParams;
struct VisorHUD_Config;
struct UIGraph_JournalComponent;
struct QuantumRefuelService;
struct BuildingBlocks_BindingsLocalizationFromDistance;
struct SharedTacticParams;
struct TypeSubtypeParams;
struct ElectricalStateBase;
struct SBaseResourceUnit;
struct GlobalResourceAudio;
struct CraftingRecipeCosts_Base_NonRef;
struct CameraTransitionInterpolationCurveRecord;
struct BoundingBoxTraversalCostShapeConfig;
struct CommodityComponentParams;
struct DefaultActionDef;
struct InstancedInteriorComponentParams;
struct ActorBaseMovementModifiers;
struct MissionVariableString;
struct SCItemDoorControllerParams;
struct ForceFeedbackEffect;
struct PUStateParams;
struct HarvestConditionBase;
struct BuildingBlocks_FieldModifierString;
struct BuildingBlocks_BindingsColorFromIntegerPacked;
struct TintPaletteTree;
struct MissionDataBankManagementComponentParams;
struct SRefuelAtmosphereComponentParams;
struct ElectricalBehavior;
struct CharacterNameData;
struct SGameRulesComponentParams;
struct BuildingBlocks_TriggerBindingsHyperLink;
struct SEntityTraversingNodeUniqueId;
struct MissionProperty;
struct LootGenerationSpecialEventArchetype;
struct SGripShapeParams;
struct RadarOptionParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeCanvasWidgetSizingMethod;
struct ConsumableEffect;
struct RGBA;
struct SEntitySoftDeprecatedPhysicsControllerParams;
struct SCoreInventoryItem;
struct ActorProceduralRecoilSetup;
struct LightShadowParams;
struct ResourceTypeVolatility;
struct ItemResourceControlOutputChangeInteractionState;
struct TeamPhaseSettingsDef;
struct SItemPortDefAttachmentImplementationStatObj;
struct SubsumptionConversationComponentParams;
struct SSensorMineComponentParams;
struct AudioRtpcWithDefault;
struct GasCloudLightShadowParams;
struct SCuttableShapeObjectParams;
struct MiningGlobalParams;
struct DockingAutodockingParams;
struct EASpawnModifierParams;
struct FunctionalityModifierLinear;
struct QuickAccessWheelActionStateDef;
struct RadiationBehavior;
struct DamageMapGlobalParams;
struct ProceduralPlanetAudioDisturbanceDef;
struct InteractionConditionNOT;
struct SOrganizationRelationships;
struct SCItemTurretCustomAngleLimit;
struct BindingsOperation_BooleanFromLocalizationIsEmpty;
struct RefineryNotificationConfiguration;
struct SEntityActorPhysicsControllerParams;
struct SAISpecialActionsParams;
struct ItemResourceDynamicResourceBase;
struct ItemResourceControlParameterRNParameter;
struct BuildingBlocks_FieldModifierEnumeratedTypeCaseModifier;
struct BaseMissionPropertyValue;
struct SEntityTraversingNodeTypeZoneHostEntity;
struct AnimationSetVariable;
struct SKioskInteractionStateModifier;
struct DamageInfo;
struct SCItemSeatDashboardParams;
struct MasterModeSwitchDeltaSignatureTypes;
struct SEntityTraversingNodeTypeParams;
struct QuantumDriveNotification;
struct UIGraph_MissionMgrComponent;
struct SEntityDummyPhysicsControllerParams;
struct AnimationNavigationLink;
struct DialogueBundlePreset;
struct BuildingBlocks_OrbitTransformer;
struct LinearModifierInterpolator;
struct AreaTriggerParams;
struct AISeatWeaponControllerComponentParams;
struct LightningTargetMode_RoomOccupants;
struct BuildingBlocks_BindingsVectorFromNumber;
struct SEntityComponentRectangleModificationObjectParams;
struct SEntityTraversingNodeTypeInteractionLink;
struct SEARounds;
struct StatusEffect;
struct SpawnDescription_NPCOption;
struct CraftingGameplayPropertyImplValueRange_Float;
struct SCItemControlTerminalParamsDef;
struct WeaponAIAimingMethodPreferredHeightArc;
struct SpeedThreshold;
struct BuildingBlocks_ComponentParameterInputBase;
struct SEntityTraversingNodeTypeRootEntity;
struct SMiniGameData;
struct CommonTacticScores;
struct InventoryContainerTypeBase;
struct FixedPowerPool;
struct SMultiMissionCompleteRewardParams;
struct GlobalJumpTunnelCameraEffectParams;
struct BoidsNavmeshEdgeRepelRule;
struct GasTankFillerParams;
struct UIGraph_ShopKioskVehicleLoadoutEditorContextComponent;
struct SKeypadStateModifier;
struct ItemResourceDeltaGeneration;
struct SActorForceReactionProceduralLeanPoseList;
struct MobiGlasAppData;
struct SSubstractHealthValue;
struct AnimationVariable;
struct NavLinkTransformLocation;
struct SHealthInteractionLockParams;
struct SAmplitudeFreqencyDecayCurves;
struct LoadoutResponseParams;
struct SMastergraphStateOverride;
struct Marker_AbilityEntityGeometry;
struct BuildingBlocks_RawSlicer;
struct SEAGameFeedParams;
struct SEntityTraversalNodeReferenceContext;
struct ActorSlidingParams;
struct SMissionMarkerObjectMetadataParams;
struct UIGraph_SkyLineComponent;
struct EAEntityEntitlement;
struct RGB8;
struct MusicLogicParameterMultiply;
struct SModifyHealthGameplayTrigger;
struct SDamageMapShaderValueDetails;
struct PlanetWeatherParams;
struct EntityComponentResourceNetworkUIProviderParams;
struct SQuantumDriveEffectParams_LEGACY;
struct DynArray_float;
struct DynArray_bool;
struct DynArray_ARDataType;
struct DynArray_CryStringT;
struct DynArray_CLocIdentifier;
struct DynArray_int64_t;
struct DynArray_int32_t;
struct DynArray_uint32_t;
struct DynArray_int8_t;
struct DynArray_int16_t;
struct DynArray_uint8_t;
struct DynArray_uint16_t;
struct DynArray_uint64_t;
struct DynArray_double;
struct DynArray_CraftingResult_Base;
struct DynArray_ItemRoomResourcePair;
struct DynArray_SShieldAbsorption;
struct DynArray_SpectatorModeParams;
struct DynArray_SApplicationFormHead;
struct DynArray_InnerThought_LayoutGridSetThought;
struct DynArray_SCItemRadarSensitivityModifier;
struct DynArray_QuantumDriveLocTypeMusicMap;
struct DynArray_AeroSurface;
struct DynArray_BuildingBlocks_BindingsPathBase;
struct DynArray_BreathableGasParams;
struct DynArray_ActorStatusAddBuff;
struct DynArray_AbilityStaminaStates;
struct DynArray_SMFDOperatorModeConfig;
struct DynArray_StanceBreathModifier;
struct DynArray_VehicleEditorCapability;
struct DynArray_SEntityPhysicsWheel;
struct DynArray_CameraActorVibrationShakeConfig;
struct DynArray_FireHazardFireProperties;
struct DynArray_ControlHints_KeyInput;
struct DynArray_SSCSignatureSystemAudioSubRule;
struct DynArray_SEffectParamsNodeBase;
struct DynArray_EVAConnection;
struct DynArray_MovementSpeedOverride;
struct DynArray_SCDynamicRigLightEnabledParams;
struct DynArray_ScanDisplayInstanceParams;
struct DynArray_ActorViewLimitPreset;
struct DynArray_CommsNotificationSelector;
struct DynArray_ItemResourceControlConditionBase;
struct DynArray_SCItemSuitAtmosphereFuelConversionParams;
struct DynArray_FloatInteractiveVariable;
struct DynArray_SEALoadoutExplicit;
struct DynArray_SeatUserActorCDIKConfig;
struct DynArray_BoolUserVariableTask;
struct DynArray_PlayerAnimatedInteractionFiltered;
struct DynArray_VehicleSerialNumberCharacterType;
struct DynArray_CylinderFieldGeom;
struct DynArray_SCharacterCustomizerBlemishMapParams;
struct DynArray_EntitityEffectSystem_StaticColor;
struct DynArray_SecurityClearanceTokenData;
struct DynArray_S42ShipStatusAllowedShipParams;
struct DynArray_BuildingBlocks_TextFormatModifierBase;
struct DynArray_SWeaponActionParams;
struct DynArray_BuildingBlocks_ColorIntegerPairDef;
struct DynArray_TransitStationAnnouncement;
struct DynArray_SArmouryItemFilter;
struct DynArray_SPerkReputationParams;
struct DynArray_EntitityEffectSystem_StaticFloat;
struct DynArray_TaggedSubHarvestableConfig;
struct DynArray_OutfitParams;
struct DynArray_ScanCustomData;
struct DynArray_SWeaponActionAIParams;
struct DynArray_GameModeFilter;
struct DynArray_SEffectInputParamsSound;
struct DynArray_ActionAreaExtensionType;
struct DynArray_PlayerChoiceMenuItem;
struct DynArray_AnnouncementGameToken;
struct DynArray_VisibilityConditionDef;
struct DynArray_SCSeatAccessLinkedGatewayParams;
struct DynArray_SHealingBeamBodyPartParams;
struct DynArray_TimeToTakeOffMinOverrideByDockingClass;
struct DynArray_PlanetEffectLODDistance;
struct DynArray_BuildingBlocks_IntegerIntegerPair;
struct DynArray_EntityComponentHealth_SBaseSequencerTask;
struct DynArray_SLoadoutRequirementBase;
struct DynArray_DrugTypeToApply;
struct DynArray_SpawnDescription_Ship;
struct DynArray_GlobalResourceTexture;
struct DynArray_SCItemSeatDashboardScreen;
struct DynArray_MusicLogicEvent;
struct DynArray_EAFactionTeamParams;
struct DynArray_BuildingBlocks_BindingsBooleanBase;
struct DynArray_MissionVariableBase;
struct DynArray_SGasProducerConsumerEntryParams;
struct DynArray_ContextMenuOption;
struct DynArray_HoldExhaleDuration;
struct DynArray_ItemPortViewInformation;
struct DynArray_BuildingBlocks_KeyframeModifierData;
struct DynArray_BoxFieldGeom;
struct DynArray_PlayerUsableInteractionPoint;
struct DynArray_SActorForceReactionsProceduralLeanOverride;
struct DynArray_BodyJoint;
struct DynArray_SAttachableObjectContainerData;
struct DynArray_EAMarkerTrackerBase;
struct DynArray_VibrationTypeData;
struct DynArray_CtxGraph_Node;
struct DynArray_SEAFPSGunGameArmorLevel;
struct DynArray_SMusicEventTagMap;
struct DynArray_ItemResourceCompositionValue;
struct DynArray_BaseMissionModifier;
struct DynArray_QuantumMusicTripCategory;
struct DynArray_ScanProcedureParams;
struct DynArray_SelectionTab;
struct DynArray_WeaponProceduralClip;
struct DynArray_PlayerChoiceMenuOption;
struct DynArray_DisplayState;
struct DynArray_BuildingBlocks_Node;
struct DynArray_SOutfitPlacingRule;
struct DynArray_BuildingBlocks_TagIntegerPair;
struct DynArray_SWeaponSequenceEntryParams;
struct DynArray_MissionLocationValidation;
struct DynArray_PersonalThoughtInventoryFilter;
struct DynArray_MissionModuleHierarchySubMission;
struct DynArray_BuildingBlocks_ColorBase;
struct DynArray_SSalvageRepairHighlightColorParams;
struct DynArray_SPerkShopItemCategoryBase;
struct DynArray_SCIGTestB;
struct DynArray_SControlledEntityRopeAttachmentPair;
struct DynArray_MissionScenarioCyclePhase;
struct DynArray_GameModeValidMap;
struct DynArray_ProcBreathingGraphEntry;
struct DynArray_SControlledEntityParams;
struct DynArray_ScreenEffects_DebugParam;
struct DynArray_AIMeleeAttack;
struct DynArray_BodyPart;
struct DynArray_AudioBreathStyleBaseNode;
struct DynArray_SpawnSettingsInventoryItem;
struct DynArray_SSpecializedDataEntry;
struct DynArray_AudioSwitch;
struct DynArray_QuantumDriveStateMusicMap;
struct DynArray_ItemTypeModifier;
struct DynArray_SItemPortLoadoutEntryParams;
struct DynArray_SReputationAmountParams;
struct DynArray_AISpecialRangedAttackConfig;
struct DynArray_AttackCategoryParamsBase;
struct DynArray_Vec2;
struct DynArray_SReputationContextBBPropertyParams;
struct DynArray_SignatureTypeGlobalParams;
struct DynArray_SReputationStandingJournalEntryParams;
struct DynArray_Texture3DFieldGeom;
struct DynArray_SSequencerTurretSetMovementTagTaskParams;
struct DynArray_SWeaponConditionBase;
struct DynArray_BuildingBlocks_StaticVariableArray;
struct DynArray_NavigationLinkTagCost;
struct DynArray_LongTermPersistenceWhiteListEntry;
struct DynArray_ScanCustomValue;
struct DynArray_SRangedWeaponStats;
struct DynArray_ControlHints_Input;
struct DynArray_SSequencerInteractionTask;
struct DynArray_AnimationJointBaseTranslation;
struct DynArray_SCItemControlPriorityTag;
struct DynArray_EAUIMulticrewTypeOptionParams;
struct DynArray_ItemTypeInfo;
struct DynArray_VehicleRole;
struct DynArray_TagToAudioRtpc;
struct DynArray_SViewDistanceRatioParams;
struct DynArray_LinkedStatBase;
struct DynArray_AudioOneShotManagerBudgetEntry;
struct DynArray_HarvestableClusterParams;
struct DynArray_SReputationStandingParams;
struct DynArray_ModifierInterpolator;
struct DynArray_ItemTypeCategoryException;
struct DynArray_ItemAwardBase;
struct DynArray_LandingZoneInventoryRedirect;
struct DynArray_MissionLogEntry;
struct DynArray_SFrontendGameModeButton;
struct DynArray_ForceFeedbackEnvelope;
struct DynArray_ScanOverrideDisplayBaseParams;
struct DynArray_CommunicationVariableBase;
struct DynArray_S42CommendationRequirementBase;
struct DynArray_FlightHUDUIMessage;
struct DynArray_InventoryContainerParams;
struct DynArray_LootArchetypeEntry_Secondary;
struct DynArray_SObjectMetadataParams;
struct DynArray_UIElementSoundEntry;
struct DynArray_SCOptionalZeroGTraversalParams;
struct DynArray_SDespawnRule;
struct DynArray_BuildingBlocks_FieldModifierPair;
struct DynArray_BuildingBlocks_FieldTransitionBase;
struct DynArray_SSignaturesCategoryEntry;
struct DynArray_SDragDropUsableUserConfig;
struct DynArray_SEAUISpawnScreenFPSEquipmentCategoryParams;
struct DynArray_DegradationTemperatureMultiplier;
struct DynArray_ForceFeedbackPattern;
struct DynArray_VoiceSingle;
struct DynArray_SCSeatAccessGatewayInteractionParams;
struct DynArray_BoidsBehaviorRuleContainer;
struct DynArray_ItemCategory;
struct DynArray_BoidTransition;
struct DynArray_BuildingBlocks_StaticArrayDataBase;
struct DynArray_UserRTPC;
struct DynArray_UnitTestSubRecord;
struct DynArray_S42StatOperationBase;
struct DynArray_SSequencerActorActionHandlerTask;
struct DynArray_SUsableIdlePoseOverride;
struct DynArray_EntityComponentEffects_Test_ColorLink;
struct DynArray_GPUParticleAudio;
struct DynArray_SInternalResourceLink;
struct DynArray_SActorForceReactionKnockdownRangeDef;
struct DynArray_SShopUIProviderCategoryIcon;
struct DynArray_BuildingBlocks_IntegerNumberPair;
struct DynArray_UIStateDisplay_Threshold;
struct DynArray_EmotionDescription;
struct DynArray_SObservablePointDef;
struct DynArray_SCItemPriorityTagParam;
struct DynArray_HandholdAttachSpotParams;
struct DynArray_ActorCameraOffsetFiltered;
struct DynArray_CtxGraph_Dependency;
struct DynArray_GlobalResourceParticle;
struct DynArray_CommunicationVariableBool;
struct DynArray_SVehicleObjectContainerParams;
struct DynArray_BuildingBlocks_StyleSelectorConditionBase;
struct DynArray_LadderAccessPointParams;
struct DynArray_SJumpTunnelSectionControlPointGenerationParams;
struct DynArray_BuildingBlocks_FieldModifierBase;
struct DynArray_MobiGlasAuthorizationEntry;
struct DynArray_TestAtomics;
struct DynArray_AfterActionReportReputationImpact;
struct DynArray_ItemResourceControlParameterBase;
struct DynArray_ActorJumpFallLandVariantConfigNode;
struct DynArray_SRangeStateLevel;
struct DynArray_PersonalThoughtActionDescription;
struct DynArray_QuatT;
struct DynArray_StarMapAmenityTypeEntry;
struct DynArray_HaulingOrderBase;
struct DynArray_SQedVisualGraphTransitionParams;
struct DynArray_LightningTargetMode;
struct DynArray_BuildingBlocks_StringTagPair;
struct DynArray_AnimationMovement;
struct DynArray_BuildingBlocksView;
struct DynArray_VehicleEditorItemData;
struct DynArray_SCItemConditionalPriority;
struct DynArray_JumpDriveStateAudioMap;
struct DynArray_LegacyCraftingCost_Base;
struct DynArray_ToxicGasDef;
struct DynArray_SActorForceReactionsVehicleForceDampeningDef;
struct DynArray_SLootableItemPortRuleParams;
struct DynArray_AudioGameContext;
struct DynArray_SHostilityRules;
struct DynArray_SAccumulatorParams;
struct DynArray_LiteralStringUserVariable;
struct DynArray_SReputationStateModifierParams;
struct DynArray_CustomMaterialEntryParams;
struct DynArray_BuildingBlocks_IntegerTagPair;
struct DynArray_RaSTaRLibraryElement;
struct DynArray_TorusFieldGeom;
struct DynArray_VehicleEditorStat;
struct DynArray_SPhysicalScreen;
struct DynArray_SCarryableGrip;
struct DynArray_NotificationDef;
struct DynArray_VideoComms;
struct DynArray_SInternalHardpointLink;
struct DynArray_TQSOption;
struct DynArray_DialogueExternalSource;
struct DynArray_BaseDataSetMatchCondition;
struct DynArray_SStateModifier;
struct DynArray_SModelVoiceTagPair;
struct DynArray_AnimationGraph_Timer;
struct DynArray_SCharacterCustomizerBaseMaterialSet;
struct DynArray_SCharacterCustomizerWildlineSubconditionBase;
struct DynArray_TriggerSubConditionDef;
struct DynArray_SDecalParams;
struct DynArray_HudColor_CustomEntry;
struct DynArray_SCharacterCustomizerRandomizationOverrideParams;
struct DynArray_SCharacterCustomizerLoadoutItemReplacementMapping;
struct DynArray_EntityTemperatureResourceHeatGeneration;
struct DynArray_SecurityClearance_OutfitRequirementDef;
struct DynArray_AnimatedAction;
struct DynArray_AnimationControlActorIK;
struct DynArray_CinematicFlythroughPoint;
struct DynArray_TQSInput;
struct DynArray_IObservableExtender;
struct DynArray_ActorStatusPreset;
struct DynArray_Vec3;
struct DynArray_ActorLookAheadPoint;
struct DynArray_SCarryableIKInteraction;
struct DynArray_DefaultPlayerLoadoutEntitlementParams;
struct DynArray_ContactHighlightStateParams;
struct DynArray_SMisfireCondition;
struct DynArray_LegacyCraftingOutput_Base;
struct DynArray_SOrdnanceEmissionsParams;
struct DynArray_GeomFont_LetterNode;
struct DynArray_SMovableGrip;
struct DynArray_SMobiGlasPersonalStatusSkillsEntry;
struct DynArray_PlanetOceanDepthAssignment;
struct DynArray_FoleyBone;
struct DynArray_BaseService;
struct DynArray_DrugEfficacyConfigForItemSubTypeBase;
struct DynArray_SEntityTraversingTargetPath;
struct DynArray_ProcAimBaseJointTypeConfig;
struct DynArray_SSequencerEntityDragTaskParams;
struct DynArray_SSequencerDespawnerTaskParams;
struct DynArray_SHackingAIDecisionParams;
struct DynArray_CargoResourceAllocation;
struct DynArray_LightStatusMultiplier;
struct DynArray_ConsumableContent;
struct DynArray_RoomExtension;
struct DynArray_SConditionalWeaponAction;
struct DynArray_PlacementValidator;
struct DynArray_ItemPortTagsElement;
struct DynArray_StatusMaskedRetriggerPreset;
struct DynArray_SApplicationFormRelationParams;
struct DynArray_SAnimationScopeContext;
struct DynArray_LoadoutEditorAdditionalParams;
struct DynArray_SControlledEntityStaticTransformParams;
struct DynArray_SEACriticalMessageDef;
struct DynArray_PlayerUsableItemPort;
struct DynArray_BuildingBlocks_FontReplacementPair;
struct DynArray_WeightedLootArchetype;
struct DynArray_ScreenEffects_Param;
struct DynArray_PlayerUsableView;
struct DynArray_SpawnDescription_Entity;
struct DynArray_ContractIntParam;
struct DynArray_SActorForceReactionLeanBoneDef;
struct DynArray_MissionFlowTrigger;
struct DynArray_BuildingBlocks_NumberCompareCondition;
struct DynArray_MeshFieldGeom;
struct DynArray_ProceduralLayoutNode_Base;
struct DynArray_WeatherEffects_Asteroid;
struct DynArray_ItemResourceNetworkPowerModifier;
struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect;
struct DynArray_UIAudioEvent;
struct DynArray_CraftingGameplayProperty_Base;
struct DynArray_SWeaponAudioReportEnvironment;
struct DynArray_PersonalThoughtOption;
struct DynArray_SReputationStandingRewardBonusParams;
struct DynArray_BuildingBlocks_IntegerLocalizedPair;
struct DynArray_CommunicationVariation;
struct DynArray_AbilityBreathAction;
struct DynArray_ResourceLinkedInteractionState;
struct DynArray_ResourceContainerDefaultCompositionEntry;
struct DynArray_CockpitRuleBase;
struct DynArray_DebugLoadoutKit;
struct DynArray_HeadMotionConfig;
struct DynArray_SEntityEffectSystem_UIOwnerTagEffect;
struct DynArray_SHelmetLinkedState;
struct DynArray_SActorForceReactionStaggerTagConfig;
struct DynArray_DefaultActionDescriptionOverride;
struct DynArray_CameraLensGhostInstance;
struct DynArray_HandholdAttachmentTriggerParams;
struct DynArray_SWeaponAimableAnglesParams;
struct DynArray_SEALoadoutAttachment;
struct DynArray_CargoResource;
struct DynArray_BlobVFXDistanceParams;
struct DynArray_TakeDownParams;
struct DynArray_ActorLookAheadRoll;
struct DynArray_ShipWideAudioObject;
struct DynArray_UseChannelArchetype;
struct DynArray_ThrusterGimbalState;
struct DynArray_CraftingBlueprintTier_Base;
struct DynArray_ActorSomaticShakeConfig;
struct DynArray_InventoryLocation;
struct DynArray_SWeaponAttachmentItemPort;
struct DynArray_MineableCompositionPart;
struct DynArray_SpecialEventManufacturer;
struct DynArray_SandboxTriggerBaseDef;
struct DynArray_BuildingBlocks_ColorPicker;
struct DynArray_IntUserVariableTask;
struct DynArray_EntityComponentEffects_Test_Tag;
struct DynArray_SScoreboardStat;
struct DynArray_ProceduralLandingFilter;
struct DynArray_DeltaSignatureSpikeParams;
struct DynArray_SActorForceReactionFlinchRangeDef;
struct DynArray_BoneCounterRotateConfig;
struct DynArray_ContractStringParam;
struct DynArray_SCharacterCustomizerRandomColorDef;
struct DynArray_SAccoladeRequirement;
struct DynArray_ItemTypeCategory;
struct DynArray_Range;
struct DynArray_BuildingBlocks_StringStringPair;
struct DynArray_SMusicTagBehaviour;
struct DynArray_MissionFailConditionParams;
struct DynArray_DifficultyModifierRange;
struct DynArray_ContextualCommunicationCondition;
struct DynArray_PlacedSurfaceEffects_EmitterEntry;
struct DynArray_SCInteractionJournalEntryParams;
struct DynArray_HealthIconStatusEffect;
struct DynArray_SMisfireEventParams;
struct DynArray_TimeTrialSplit;
struct DynArray_ConsumableHelpers;
struct DynArray_SRGB8;
struct DynArray_AudioEnvironmentFeedbackZoneProcess;
struct DynArray_SToolArmDeployCondition_Base;
struct DynArray_UsableChannelInputAction;
struct DynArray_ResourceTypeProperties;
struct DynArray_LookAtType;
struct DynArray_ScanCustomDataTagEntry;
struct DynArray_SEffectInputParamsParticle;
struct DynArray_LadderAnimationOffset;
struct DynArray_SActorForceReactionStaggerRangeDef;
struct DynArray_AudioValueOutputBehaviour;
struct DynArray_SHackingThreatLevelConditionParams;
struct DynArray_RGB;
struct DynArray_VisibilityCondition;
struct DynArray_EntityComponentEffects_Test_Trigger;
struct DynArray_DateTimeSchedule;
struct DynArray_ScanEvaluationInfractionSettings;
struct DynArray_SItemShopARItemPortParams;
struct DynArray_ProceduralPlanetAudioTagAndEvent;
struct DynArray_DialogueBundleEntry;
struct DynArray_SSpawnEntity;
struct DynArray_EntityComponentEffects_Test_Link;
struct DynArray_RadarContactTypeEntry;
struct DynArray_Marker_AbilityBase;
struct DynArray_SDynamicDifficultyPointsPerEvent;
struct DynArray_ActorStatusUIWarningEntry;
struct DynArray_OrganizationRelationshipParams;
struct DynArray_StatusCost;
struct DynArray_LegacyCrafterContainerPort;
struct DynArray_BuildingBlocks_StaticVariableBase;
struct DynArray_EntityAudioControllerTypeManagementParams;
struct DynArray_EAPatchNoteParams;
struct DynArray_SCItemTurretMovementTagName;
struct DynArray_SCItemControlCondition_Base;
struct DynArray_WheelAudioSurfaceMapping;
struct DynArray_SecurityNetworkProtocolOverride;
struct DynArray_ContractResult_CompletionTag;
struct DynArray_SEntityEffectSystem_PropertyModifier;
struct DynArray_PersonalThoughtCameraEffectsParams;
struct DynArray_MinCompletionTags;
struct DynArray_MissionObjective;
struct DynArray_UIOwnerContextTransitionPair;
struct DynArray_ProceduralPlanetAudioTagAndRtpc;
struct DynArray_BuildingBlocks_AspectRatioOption;
struct DynArray_BuildingBlocks_BindingsNumberBase;
struct DynArray_ScanDisplaySortInfoParams;
struct DynArray_StatusPriorityBase;
struct DynArray_SReputationMissionRequirementExpressionElement;
struct DynArray_SEntityEffectSystem_UIOwnerTriggerEffect;
struct DynArray_CraftingCost_Base;
struct DynArray_ExtendedNameEntry;
struct DynArray_FactionRelationship;
struct DynArray_WorldDisplay_PlaneEnvironment_Ring;
struct DynArray_SVendingMachineItem;
struct DynArray_RGBA8;
struct DynArray_SEntityTraversingExecuteNodeBase;
struct DynArray_HandholdGripType;
struct DynArray_BuildingBlocks_TriggerBase;
struct DynArray_SEnergyPipeDefinition;
struct DynArray_UIWorldDisplayPathParams;
struct DynArray_TQSWeightInput;
struct DynArray_AnimationGraph_KeyFrame;
struct DynArray_SInteractionStateTransition;
struct DynArray_CraftingOptionalEntry;
struct DynArray_MovieClipTransformationInterpolatorParams;
struct DynArray_SStatusTriggerThresholdLevelModifier;
struct DynArray_SHackingCodeErrorEntry;
struct DynArray_SActorLocomotionFidgetSeverityParams;
struct DynArray_SWeaponMountGrip;
struct DynArray_SInverseInteractionLinkParams;
struct DynArray_Investigation_Clue;
struct DynArray_ProcBreathingCurve;
struct DynArray_SCInteractionGeometryMapEntryParams;
struct DynArray_SScoreEvent;
struct DynArray_RemovableChipValue;
struct DynArray_OpenInventoryOccupantItemTypeProperties;
struct DynArray_CommodityType;
struct DynArray_TraversalCostConditionTags;
struct DynArray_SActorForceReactionTwitchRangeDef;
struct DynArray_SWeaponModifierParams;
struct DynArray_SActorForceReactionLeanFilterDef;
struct DynArray_UIAudioManufacturer;
struct DynArray_AbstractMissionInitParam;
struct DynArray_ActorMovementSetTransition;
struct DynArray_SActorForceReactionCurve;
struct DynArray_AudioSignalRtpc;
struct DynArray_VehicleEditorPortsWithItemData;
struct DynArray_SCItemTurretStandardAngleLimitTagOverwriteParams;
struct DynArray_ActorLookLimitsStateFilter;
struct DynArray_AIVisualFieldParams;
struct DynArray_SChatChannelTypeBase;
struct DynArray_FactionPalette;
struct DynArray_RadarSignatureCategoryEntry;
struct DynArray_InteractionConditionParams;
struct DynArray_TagTrigger;
struct DynArray_SCharacterCustomizerHairLengthEntry;
struct DynArray_SItemPortRuleDef;
struct DynArray_SGasMass;
struct DynArray_SRenderToTextureRenderLayerParams;
struct DynArray_Marker_ShowRule;
struct DynArray_SCItemTurretMovementParams;
struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect;
struct DynArray_BindingsOperations_IntegerStringCanvasPair;
struct DynArray_SurfaceRaindrops_Emitter;
struct DynArray_SLoadoutInventoryItem;
struct DynArray_ResourceRangeParams;
struct DynArray_ItemResourceConversionPair;
struct DynArray_FloatUserVariableTask;
struct DynArray_EATransportTransitionGroupParams;
struct DynArray_BuildingBlocks_NumberTagPair;
struct DynArray_SEASpawnLocationVehicleSeatSlot;
struct DynArray_StatusEffectTrigger;
struct DynArray_ConversationNode_Base;
struct DynArray_EventDispatcher;
struct DynArray_HandholdSharedInteractionLink;
struct DynArray_PhysicalAudioCollisionTrigger;
struct DynArray_InnerThought_CycleAnimBase;
struct DynArray_LoadoutInfo;
struct DynArray_ObjectivePropertyBase;
struct DynArray_ScoreMessage;
struct DynArray_PlayerChoice_SoftwareCursorEntry;
struct DynArray_SMatchNetworkTypeParams;
struct DynArray_LongTermPersistenceWhiteListSubTypeEntry;
struct DynArray_PlayerChoice_InteractionModifier;
struct DynArray_SInspectAnimationParams;
struct DynArray_VehicleLandingGear;
struct DynArray_AudioRtpcWithBehaviour;
struct DynArray_SWeaponParticleEffectParams;
struct DynArray_BuildingBlocks_NumberStringPair;
struct DynArray_OrbitEntityCinematicEvent;
struct DynArray_SCurve;
struct DynArray_HealthDamageState;
struct DynArray_SSequencerItemActionTask;
struct DynArray_InputAction;
struct DynArray_SecurityClearanceToken;
struct DynArray_AttackCategoryParams;
struct DynArray_PostureData;
struct DynArray_SEAObjectiveMarkerStateSettings;
struct DynArray_LandingAnimationSetup;
struct DynArray_UIStateColor_Threshold;
struct DynArray_PartialContractRewardRepAdjustment;
struct DynArray_SReputationContextBBEntityListParams;
struct DynArray_ActorRestrainPerAttackerConfig;
struct DynArray_ActionStaminaCosts;
struct DynArray_ItemResourceNetworkTypeUIData;
struct DynArray_EntitlementItemType;
struct DynArray_ArmouryItemStat;
struct DynArray_ItemAwardWeightingsBase;
struct DynArray_SSalvageRepairItemTypeLocalizationPair;
struct DynArray_SShieldResistance;
struct DynArray_SSecondaryAmmoContainerParams;
struct DynArray_LocationMissionLimit;
struct DynArray_SEAPlayerLoadoutSnapshotEntry;
struct DynArray_ActorFallOverlayNode;
struct DynArray_SWeaponAttachmentIconPair;
struct DynArray_FireHazardSurfaceProperties;
struct DynArray_CraftingMaterialStatTypeRecord;
struct DynArray_SCItemRadarSignatureDetection;
struct DynArray_PlayerChoice_Option;
struct DynArray_CapsuleFieldGeom;
struct DynArray_SSequencerPlayerUsableTaskParams;
struct DynArray_SEAActionItemMessageDef;
struct DynArray_SurfaceAudioProperties;
struct DynArray_EntityReferenceDef;
struct DynArray_StarMapAsteroidRing;
struct DynArray_LoadoutKit;
struct DynArray_SSequencerTurretSetLimiterTagTaskParams;
struct DynArray_SAttachableEntityParams;
struct DynArray_AudioFootstepSurfaceMapping;
struct DynArray_ChatManagerColor;
struct DynArray_SHideAmmoAttachmentParams;
struct DynArray_MotionConnection;
struct DynArray_RadarDeltaSignatureEntry;
struct DynArray_SCharacterCustomizerDNAHeadParams;
struct DynArray_RadarDeltaSignatureDetectionParams;
struct DynArray_S42FieldManualContentPiece;
struct DynArray_BuildingBlocks_ContextMenuItem;
struct DynArray_MobiGlasPersonalMessage_ShipChatScheduleEntry;
struct DynArray_EAScoringAssistThreshold;
struct DynArray_SCItemDisplayScreenStateParams;
struct DynArray_ProceduralAnimationBone;
struct DynArray_PlanetOceanAudioCheckpoint;
struct DynArray_CraftingGameplayPropertyImplValueRange_Int;
struct DynArray_SRGBA8;
struct DynArray_SSequencerAnimationTaskParamsBase;
struct DynArray_DeliveryTarget;
struct DynArray_LegacyCraftingRecipeDef_Base;
struct DynArray_CommoditySubtype;
struct DynArray_ReputationComparisonRange;
struct DynArray_AsteroidProcedural;
struct DynArray_SPrimeableAnimationState;
struct DynArray_SHackingCodeCommandParam;
struct DynArray_ImpoundingDefinition;
struct DynArray_ContractGeneratorHandlerBase;
struct DynArray_HudColor_Entry;
struct DynArray_StayTimeMinOverrideByDockingClass;
struct DynArray_SpawnDescriptionEntry;
struct DynArray_SubItemScanStatusMappings;
struct DynArray_CraftingMaterialStatEntry;
struct DynArray_SSequencerUsableTask;
struct DynArray_ContractPropertyTagReplacement;
struct DynArray_DataForgeComponentParams;
struct DynArray_SCItemObservableScreenViewParams;
struct DynArray_JumpDriveStateMusicMap;
struct DynArray_Marker_ShowRuleMapDisplayMode;
struct DynArray_SCOptionalThrustParams;
struct DynArray_SSequencerCarryableTaskParams;
struct DynArray_MeleeFragInfo;
struct DynArray_PointOfInterestData;
struct DynArray_FriendlyFireReactionOverride;
struct DynArray_HandholdInteractionPointLink;
struct DynArray_CargoResourceDistribution;
struct DynArray_ActorStanceSpeedsInfo;
struct DynArray_UnitTest_BaseTest;
struct DynArray_ScanDisplayConditionBaseParams;
struct DynArray_ItemThrottleParamsBase;
struct DynArray_ActorStatusEffect;
struct DynArray_ReputationRewardBaseDef;
struct DynArray_UIAudioParameter;
struct DynArray_SMFD;
struct DynArray_HarvestableGeometry;
struct DynArray_AudioBreathStyleCondition;
struct DynArray_ItemResourceDeltaBase;
struct DynArray_ControlHintCondition;
struct DynArray_BuildingBlocks_BindingsIntegerBase;
struct DynArray_SCameraViewStateOrbit;
struct DynArray_SModifierSignaturesEntry;
struct DynArray_BuildingBlocks_TagStringPair;
struct DynArray_ObjectiveMarkerLocation;
struct DynArray_SCustomizableMaterialEntry;
struct DynArray_SMobiGlasLauncherApp;
struct DynArray_FoleyCollision;
struct DynArray_SGalactapediaEntry;
struct DynArray_FlashVariableObject;
struct DynArray_ZeroGTraversalConnection;
struct DynArray_SDockingAnimatorStageTriggerParams;
struct DynArray_EnvironmentFeedbackAudioObject;
struct DynArray_SecurityNetworkVariable;
struct DynArray_ActorStanceDimensionsInfo;
struct DynArray_StarMapObjectType;
struct DynArray_QuickAccessWheelElement;
struct DynArray_LeanConnection;
struct DynArray_LogoutInteractionParams;
struct DynArray_EAPickupSpecialEventOverrideParams;
struct DynArray_EAObjectiveInteractionDef;
struct DynArray_QuantumStateMusicMap;
struct DynArray_Infraction;
struct DynArray_ItemSuitArmorSignatureParams;
struct DynArray_CtxGraph_Component;
struct DynArray_MissionStringVariant;
struct DynArray_BuildingBlocks_IntegerStringPair;
struct DynArray_UsableItemPort;
struct DynArray_DefaultActionsEntityEntryCondition;
struct DynArray_SMannequinTagParams;
struct DynArray_SActorStanceDimensionsExtraDef;
struct DynArray_mobiGlasAppRef;
struct DynArray_StatInfluence;
struct DynArray_MissionLocationParams;
struct DynArray_SCharacterCustomizerTextureParams;
struct DynArray_Camera;
struct DynArray_PortRefillData;
struct DynArray_SPlayerLoadoutOverride;
struct DynArray_EngineeringStateMessages;
struct DynArray_ArmouryCertificationParams;
struct DynArray_FiringRangeTimeEntry;
struct DynArray_SActorForceReactionFlightDurationConfig;
struct DynArray_SLinkedInteractionStateTags;
struct DynArray_NavigationTriggerAdapter;
struct DynArray_Flash_PaletteEntry;
struct DynArray_MobiGlasAppDataBase;
struct DynArray_MarkerTrackingViewMode;
struct DynArray_ContractBoolParam;
struct DynArray_HudColor_HoloParam;
struct DynArray_SMisfireEffect;
struct DynArray_SActorCarryConfigTagSwitch;
struct DynArray_PowerPool;
struct DynArray_FormationOffset;
struct DynArray_MissionFlowConditionBase;
struct DynArray_ItemResourceTypeData;
struct DynArray_DefaultActionsEntityState;
struct DynArray_SItemPortAttachmentPoints;
struct DynArray_ControlFloatInteractiveVariable;
struct DynArray_MeleeAttackCategoryInfo;
struct DynArray_SJumpTunnelSectionProbabilityParams;
struct DynArray_EntityClassStaticDataParams;
struct DynArray_WeightedDialogueBundleEntry;
struct DynArray_SS42PersonalStatusDrugBuffEffectString;
struct DynArray_SCEntranceItem;
struct DynArray_SVehicleItemportInteractionLink;
struct DynArray_BuildingBlocks_PreviewScreenBase;
struct DynArray_SSequencerDefTaskParams;
struct DynArray_SMusicValueTagMap;
struct DynArray_SStarGalaWaveParams;
struct DynArray_ActionRuleParams;
struct DynArray_Bindings_SubsumptionBroadcastEvent;
struct DynArray_WingmanOrderInfo;
struct DynArray_SPowerUserState;
struct DynArray_SBaseInteractionGameplayTrigger;
struct DynArray_TransitNodeDialogueContext;
struct DynArray_SecurityNetworkVariableEffect_Base;
struct DynArray_SphereFieldGeom;
struct DynArray_ItemResourceControlOutputBase;
struct DynArray_MobiGlasAppContent;
struct DynArray_ComponentMigration;
struct DynArray_ActorAimLimitsStateFilter;
struct DynArray_ChatCommandName;
struct DynArray_AnimationJointBaseRotation;
struct DynArray_SInteractionParams;
struct DynArray_MeleeComboChainLink;
struct DynArray_SBeamParticleAudioParams;
struct DynArray_SLightStateOverride;
struct DynArray_InnerThought_LayoutStates;
struct DynArray_BlueprintCategoryRecord;
struct DynArray_PlayerShipRespawnShipInfo;
struct DynArray_SHealingBeamConsumableType;
struct DynArray_SHackingCodeSystemLogEntry;
struct DynArray_AudioRtpc;
struct DynArray_SGasAtmosphereEntryParams;
struct DynArray_ConstantDOFPosWeights;
struct DynArray_DigitalSignageContent;
struct DynArray_UIWorldDisplayInputSoundParams;
struct DynArray_CommsChannelDef;
struct DynArray_SThrowMode;
struct DynArray_BaseSpawnerPrerequisite;
struct DynArray_JournalEntry;
struct DynArray_CustomLookAtBB;
struct DynArray_SSequencerItemDoorTaskParams;
struct DynArray_SActorDeathPoseVariant;
struct DynArray_ControlHint_DisplayInfoSet;
struct DynArray_ExtendedNameEntryTextBase;
struct DynArray_DeltaSignatureSensitivityParams;
struct DynArray_StringUserVariableTask;
struct DynArray_BindingsOperations_IntegerStringFontStylePair;
struct DynArray_MusicLogicNode;
struct DynArray_CameraShopItemOffset;
struct DynArray_SCIGTestBase;
struct DynArray_SUsableMovementAlignmentParams;
struct DynArray_PopupParams;
struct DynArray_SActorForceReactionFilterDef;
struct DynArray_SCIGTestA;
struct DynArray_SManufacturerMFDView;
struct DynArray_BaseItemModifierParams;
struct DynArray_ControlIntInteractiveVariable;
struct DynArray_MotionTurnSetupFiltered;
struct DynArray_SItemPortConnectionParam;
struct DynArray_LocStringUserVariable;
struct DynArray_DrugEfficacyForConsumableType;
struct DynArray_ChatFilter;
struct DynArray_WorldDisplayEnvironmentBase;
struct DynArray_LicensedItemModifier;
struct DynArray_ContractPrerequisiteBase;
struct DynArray_ProceduralLayoutNode_AlternateSubGraphProperties;
struct DynArray_ActorStatusBuff;
struct DynArray_SCItemClothingHiddenPartsParams;
struct DynArray_SWeightedRewardEntry;
struct DynArray_Investigation_Suspect;
struct DynArray_IntInteractiveVariable;
struct DynArray_EntityEffectSystem_BaseSequencerTask;
struct DynArray_SServiceBeaconDifficultyEntry;
struct DynArray_LinkedStatSetupPreset;
struct DynArray_SCDynamicRigLightParams;
struct DynArray_BuildingBlocks_StringIntegerPair;
struct DynArray_NavigationLinkType;
struct DynArray_LandingSelection;
struct DynArray_UI3DDisplayInput;
struct DynArray_BuildingBlocks_IntegerWidgetPairDef;
struct DynArray_WeatherEffects_Atmosphere;
struct DynArray_AnimationVariableLink;
struct DynArray_ReputationValueSetting;
struct DynArray_INavigationCostVolumeExtender;
struct DynArray_EntryOptionalData_Base;
struct DynArray_TypeSubtypeParams;
struct DynArray_GlobalResourceAudio;
struct DynArray_DefaultActionDef;
struct DynArray_ForceFeedbackEffect;
struct DynArray_HarvestConditionBase;
struct DynArray_MissionProperty;
struct DynArray_LootGenerationSpecialEventArchetype;
struct DynArray_ConsumableEffect;
struct DynArray_RGBA;
struct DynArray_SCoreInventoryItem;
struct DynArray_ActorProceduralRecoilSetup;
struct DynArray_TeamPhaseSettingsDef;
struct DynArray_AudioRtpcWithDefault;
struct DynArray_ProceduralPlanetAudioDisturbanceDef;
struct DynArray_SCItemTurretCustomAngleLimit;
struct DynArray_SpawnDescription_NPCOption;
struct DynArray_CraftingGameplayPropertyImplValueRange_Float;
struct DynArray_SpeedThreshold;
struct DynArray_BuildingBlocks_ComponentParameterInputBase;
struct DynArray_CommonTacticScores;
struct DynArray_MobiGlasAppData;
struct DynArray_AnimationVariable;
struct DynArray_SHealthInteractionLockParams;
struct DynArray_SMastergraphStateOverride;
struct DynArray_RGB8;
struct SFortitudeLevelStats;
struct STakedownTechniqueLevelStats;
struct SReflexLevelStats;
struct SPlayerRoleShakeMultipliers;
struct SStrengthLevelStats;
struct SLightStatePreset;
struct BuildingBlocks_StaticArrayDataNumber;
struct PingDetectionLevelParams;
struct SVaultingTechniqueLevelStats;
struct SFitnessLevelStats;
struct FireHazardGlobalIgnition;
struct SVehicleAiDamageModifiers;
struct HudFeedbackParams;
struct AIHealthThresholdsConfig;
struct ContractResult_RefundBuyIn;
struct OcclusionCheckSharedParams;
struct ContractResult_LegacyReputation;
struct UIV2Markers;
struct SAimableGameModeRoleParams;
struct ContractResult_CalculatedReward;
struct OperatorModeAvailability;
struct RelayFilterParams;
struct ContractResult_Reward;
struct ContractResult_Item;
struct FireParams;
struct ContractResultBase;
struct ContractResult_CalculatedReputation;
struct BuildingBlocks_StaticArrayDataBoolean;
struct SeatAdsDef;
struct PlayerChoice_IMConfig;
struct GlobalShopTerminalParams;
struct SDFMVictoryConditionsLives;
struct SDFMVictoryConditionsTeam;
struct SSimulationParamsTranslationalProjection;
struct WebCustomizationItemTypeName;
struct ItemPreview_CameraSettings;
struct EASpecialEventInformationParams;
struct MaskStatusBuff;
struct SHealingBeamBodyPartHighlightingParams;
struct SGroupChannel;
struct AudioWhitelist;
struct GameModeCustomSetting;
struct ItemPreview_SkinnedLoadoutOverride;
struct STargetableItemType;
struct MasterModeExclusion;
struct SyncedAttackCategoryParams;
struct ItemPreview_CameraSettingsOverride;
struct ItemThrottleParams;
struct InventoryContainer;
struct InventoryContainerItemTypeFilter;
struct StatusEffectAbilityLock;
struct ConsumableEffectClearBuffEffect;
struct SItemTypeFilter;
struct OrificeBloodParams;
struct InfractionDefinition;
struct SEntitySpaceShipPhysicsControllerParams;
struct SocialTab;
struct SSimulationParamsSpringEllipsoid;
struct SDFMVictoryConditionsPlayer;
struct MasterModeExclusionsOverride;
struct MarkerDeclutteringCullingOrder;
struct TransformationInterpolatorParams;
struct AbilityDefinition;
struct SEntityRigidPhysicsControllerParams;
struct PlayerLimitationsProfile;
struct SUninsuredItem;
struct ItemPreview_TurntableOverride;
struct DefaultEntitlementRecord;
struct SStandardVictoryConditionsTeam;
struct SFPSVictoryConditionsTeamLives;
struct ItemResourceNetworkMapTriggerEntry;
struct SecurityClearance_OutfitRequirement_TagRequirementDef;
struct SDestroyAttachedItemGameplayTrigger;
struct SCItemSuitThrusterParams;
struct SItemPortDefTypes;
struct SDFMVictoryConditionsRace;
struct InteractionConditionGameMode;
struct LoadoutCandidateRootParams;
struct AIObservableFilterFlags;
struct PlayerGroupManagerNotificationParams;
struct SItemPortStateModifier;
struct SBadgeCompleteReward;
struct SSimulationParamsPendulumHingePlane;
struct SEAFriendlyFireKickParams;
struct SSimulationParamsPendulumHalfCone;
struct SSimulationParamsPendulumCone;
struct ArmsLockSingleAbility;
struct SFPSVictoryConditionsTeam;
struct OperatorModeDefinitions;
struct SHearingComponentParams;
struct PassengerScanStatusMappings;
struct SObjectiveVictoryConditionsTeam;
struct UIHoloVehicle_Config;
struct ActionAreaAudioFilter;
struct HarvestableAreaTypeObjectPreset;
struct BuildingBlocks_StaticArrayDataString;
struct InteractionConditionActorHasAttachedEntityTypes;
struct NavPointSpawnInformation;
struct ArenaCommanderLocationObjectContainersParams;
struct InteractionConditionActorHasAttachedEntityWithTag;
struct SBonesHighlightNode;
struct LocomotionAnimSyncConfig;
struct LoadoutRequiredAttachmentsParams;
struct PersonalThoughtForceCloseActionList;
struct RagdollRecoveryConfig;
struct InteractionConditionActorInventoryContainerEntityHasTag;
struct FragmentRequiredInfo;
struct DockingSlotVisibilityTagSet;
struct SCItemMissileRackParams;
struct SEntityEffectSystem_Attachment_BoneListAttachment;
struct FragmentInfo;
struct AsteroidFieldShapeLinkParams;
struct SetItemportActiveEvent;
struct InteractionConditionHasSupportingItemport;
struct ActorUndergroundEffects;
struct UndergroundCreatureHelpersComponent;
struct GameTokens;
struct InteractionConditionEntityIsAttachedToInteractor;
struct SWeaponOnAttachParams;
struct SStandardParams;
struct SItemPortRule_HideInteractionsDef;
struct SSCActorInteractionHelperParams;
struct DisabledLoadoutInteraction;
struct SCItemControlCondition_AllowedByRemoteTurretView;
struct DurationTags;
struct Fidget;
struct SMegaMapSolarSystem;
struct PlayerAnimatedInteraction;
struct PersonalThoughtContextualActionsMenu;
struct EntityComponentFrontendPUUIProviderParams;
struct ActorStatusLocalisation;
struct SMasterModeLabels;
struct VoteGenericLocParams;
struct SLoadingScreenInformationDef;
struct ContractDisplayInfo;
struct GlobalTutorialParams;
struct SOperatorModeLabels;
struct ChatEmoteData;
struct InfractionParameters;
struct BuildingBlocks_StaticArrayDataLocalization;
struct SSimpodSimulation;
struct MobiGlasMissionBriefing;
struct SHackingCodeWindowParams;
struct MobiGlasMissionNote;
struct SAimableGimbalModeLabels;
struct RestrictedAreaHUDMessageParams;
struct BuildingBlocks_StaticArrayDataInteger;
struct BuildingBlocks_BindingsBooleanFromIntegerSwitch;
struct SAimableControllerHudParams;
struct KeypadParams;
struct SLightFlickerAnimParams;
struct EAScoreboardPlacementAwardParams;
struct CrimeStatThresholds;
struct AwardService_Award;
struct SHackingDifficultyPreset;
struct CraftingRecipeResults;
struct SPUSpectator;
struct SFPSSpectator;
struct SISpectatorBase;
struct SDFMSpectator;
struct SApplicationFormBodyTypeOption;
struct InnerThought_LayoutGridSet;
struct IFCSParams;
struct BuildingBlocks_BindingsIntegerVariable;
struct BuildingBlocks_BindingsBooleanVariable;
struct BuildingBlocks_BindingsVectorVariable;
struct BuildingBlocks_BindingsTransformVariable;
struct BuildingBlocks_BindingsRotationVariable;
struct BuildingBlocks_BindingsNumberVariable;
struct BuildingBlocks_BindingsLocalizedVariable;
struct BuildingBlocks_BindingsIntegerTimestamp;
struct BuildingBlocks_BindingsStringVariable;
struct ActorStaminaComponent;
struct StatusEffectBuffMacro;
struct SMFDModeConfig;
struct VehicleEditorCapabilities;
struct SEntityWheeledPhysicsComponentParams;
struct ControlHints_LocalizedKeyInput;
struct SSCSignatureSystemAudioTriggerTypeRule;
struct SSCSignatureSystemAudioRule;
struct SSCSignatureSystemAudioTriggerTagRule;
struct SSCSignatureSystemAudioRuleAlways;
struct SEntityEffectCoreParams;
struct EVAState;
struct Character;
struct SCDynamicLightingRigComponentParams;
struct ScanDisplaySectionParams;
struct ActorViewLimitPresetDatabase;
struct SCItemSuitFuelParams;
struct SeatUserActorCDIKMapping;
struct BoolUserVariable;
struct VehicleSerialNumberFormat;
struct SecurityClearanceTokenData_OR;
struct SecurityClearanceTokenData_AND;
struct S42ShipStatusAppParams;
struct BuildingBlocks_TextEmphasisModifierList;
struct SWeaponActionParallelParams;
struct BuildingBlocks_BindingsColorFromIntegerSwitch;
struct TransitStationAnnouncements;
struct SPerkReputationListParams;
struct SubHarvestableMultiConfig;
struct ActorMechanicsParams;
struct CustomScanProcedureParams;
struct SWeaponAIDataParams;
struct SEffectParamSound;
struct PlayerChoiceMenuItems;
struct Announcement;
struct VisibilityConditionDef_AND;
struct SCSeatAccessEntranceInteractionParams;
struct SCSeatAccessPassageInteractionParams;
struct PlanetEffectLOD;
struct BuildingBlocks_BindingsIntegerFromIntegerSwitch;
struct SLoadoutRequirementAND;
struct SLoadoutRequirementOR;
struct SpawnDescription_ShipOptions;
struct CameraRemoteTurretConfig;
struct SCItemSeatDashboardUIDesc;
struct SCItemVisorDashboardConfig;
struct MusicLogicEventList;
struct EATeamsModuleParams;
struct BuildingBlocks_BindingsBooleanEvaluateOr;
struct BuildingBlocks_IntegerFromBitFlagDef;
struct BuildingBlocks_BindingsBooleanEvaluateAnd;
struct EntityClusterMember;
struct SCItemGasProducerConsumerParams;
struct ContextMenu;
struct BreathDurationParams;
struct LoadoutItemPortViewParams;
struct BuildingBlocks_Keyframe;
struct SActorForceReactionsPresetRecord;
struct BodyMapping;
struct SAttachableObjectContainerSpawnerParams;
struct SSCLocalPlayerMarkerTrackerComponentParams;
struct SVibrationDef;
struct SEAFPSGunGameArmorSet;
struct ItemResourceComposition;
struct ScanInformationDef;
struct WeaponProceduralClipsSetUp;
struct PlayerChoiceMenuOptionSubMenu;
struct StatusWidgetDisplayPreset;
struct BuildingBlocks_BindingsIntegerFromTagSwitch;
struct MissionModuleHierarchy;
struct SItemPerkListParams;
struct MissionModifier_ShopItemPerksDef;
struct SControlledEntityRopeAttachmentPairs;
struct MissionScenarioCycle;
struct ProcBreathingExertion;
struct SRemoteRigidEntityControlledEntitiesParams;
struct ScreenEffects_DebugEffect;
struct StatusEffectDamageOverTime;
struct BodyPartConfig;
struct StatusEffectDamageToDeathOverTime;
struct StatusEffectDamage;
struct StatusEffectDamageNonLinear;
struct AudioBreathStyleSuite;
struct AutoSpawnSettings;
struct SSpecializedData;
struct GlobalShopSellingParams;
struct SReputationAmountListParams;
struct AIAvailableSpecialRangedAttacksConfig;
struct SMiniGameSpriteParams;
struct BezierCurve;
struct SReputationScopeContextUI;
struct MissionGiver;
struct SignatureSystemGlobalParams;
struct SReputationJournalGroupParams;
struct SWeaponConditionAll;
struct SWeaponConditionAny;
struct NavigationLinkCostCustomization;
struct LongTermPersistenceGlobalParams;
struct ScanCustomValueArray;
struct ControlHints_HintDisplayInfoAction;
struct SCItemControlPriorityTable;
struct SEAUISpawnScreenComponentParams;
struct VehicleCareer;
struct TagToAudioRtpcList;
struct SGeometryViewDistanceRatioCategories;
struct ActorStatData;
struct AudioBudgetDefinition;
struct HarvestableClusterPreset;
struct SReputationStandingMapParams;
struct ItemWeaponBeamVFXStrengthOverrideParams;
struct ItemTypeCategoryMap;
struct ItemAwardWeightings;
struct MissionLogEntryList;
struct EntityComponentFrontendUIProviderParams;
struct ScanOverrideParams;
struct S42CommendationRulesEntry;
struct FlightHUDUIView_Config;
struct PersonalThoughtInventoryGridParams;
struct LootArchetypeOrGroup_Secondary;
struct SEntityComponentObjectMetadataParams;
struct UIElementSoundsRecord;
struct ActorZeroGTraversalParams;
struct SDespawnRules;
struct STaggedSignaturesEntry;
struct SCEntityComponentDragDropUsableUserParams;
struct SEAUISpawnScreenFPSEquipmentSlotParams;
struct VoiceBundle;
struct PersonalThoughtInventorySingleFilter;
struct PersonalThoughtInventoryItemOrientationOffset;
struct InventoryDropDetachRules;
struct QuickAccessWheelInventoryItemDef;
struct InventoryInteractionBlockingAttachedEntities;
struct LootingTabParams;
struct QuickAccessWheelAttachableSlotsDef;
struct BoidState;
struct BuildingBlocks_StaticArrayEntry;
struct FoleyLoop;
struct FoleyOneShot;
struct UnitTest;
struct MobiGlasAfterActionReportStat;
struct S42CommendationRequirementStat;
struct SUsableIdleParams;
struct GPUParticleAudioList;
struct SActorForceReactionKnockdownConfigDef;
struct SShopUIProviderParams;
struct BuildingBlocks_BindingsNumberFromIntegerSwitch;
struct UIStateDisplay;
struct EmotionList;
struct SCItemPriorityGroupParam;
struct HandholdParams;
struct PingWaveVFXParams;
struct CommunicationVariableConfig;
struct VehicleComponentParams;
struct BuildingBlocks_StyleSelectorConditionAnyOfCondition;
struct BuildingBlocks_StyleSelectorConditionAllOfCondition;
struct BuildingBlocks_StyleSelectorConditionParent;
struct BuildingBlocks_StyleSelectorConditionChild;
struct BuildingBlocks_StyleConditionList;
struct BuildingBlocks_StyleSelectorConditionAncestor;
struct LadderComponentParams;
struct MobiGlasMissionAuthorization;
struct SItemResourceContainerStateModifier;
struct SRangeStateModifier;
struct SDegradationStateModifier;
struct SVolatileCargoHealthStateModifier;
struct SDamageMapStateModifier;
struct EntityTemperatureStateModifier;
struct SHealthStateModifier;
struct SResourceContainerStateModifier;
struct PersonalThoughtActionDescriptionsList;
struct StarMapAmenityTypes;
struct ObjectiveHandler_Hauling;
struct SQedVisualGraphStateParams;
struct LightningBehavior_Effect;
struct BuildingBlocks_BindingsTagFromStringSwitch;
struct BuildingBlocksLayer;
struct VehicleEditorAvailableItemsData;
struct SCItemConditionalControllableGroupParams;
struct JumpDriveAudioParams;
struct ActorToxicGasParams;
struct AudioGameContextSetup;
struct SDegradationParams;
struct LiteralStringProviderComponentParams;
struct SReputationStateMissionResultModifierListParams;
struct CustomMaterialsEntityParams;
struct BuildingBlocks_BindingsTagFromIntegerSwitch;
struct RaSTaRLibraryCategory;
struct SCItemSeatDashboardPhysicalScreenParams;
struct SGripContainer;
struct SecurityTokenNotificationRecordReference;
struct TVMovieList;
struct TQSOptionReference;
struct TacticalQuery;
struct TQSEmbeddedOption;
struct DialogueContent;
struct MissionPropertyValue_MissionItem;
struct MissionPropertyValue_Organization;
struct SCharacterCustomizerVoiceParams;
struct SCharacterCustomizerSkinBaseMaterialList;
struct SCharacterCustomizerWildlineCondition;
struct TriggerConditionDef;
struct SEntityComponentDecalParams;
struct SCharacterCustomizerBodyTypeParams;
struct EntityTemperatureItemResource;
struct SecurityClearance_OutfitRequirement_OrDef;
struct SecurityClearance_OutfitRequirement_AndDef;
struct PlayerAnimatedInteractionConfig;
struct CinematicFlightPointsRecord;
struct SObservableComponentParams;
struct UIGroundingEffectsEntityComponentParams;
struct SCarryableIKInteractionList;
struct DefaultPlayerLoadoutEntitlementRecord;
struct LegacyCraftingRecipe_Default;
struct SExplosiveOrdnanceParams;
struct SCItemMissileParams;
struct SCItemSpaceMineParams;
struct SCItemBombParams;
struct GeomFont_Config;
struct SCEntityActorMovableParams;
struct FoleyFootstepDefinition;
struct AreaServices;
struct DrugEfficacyForItemType;
struct SEntityTraversingTarget;
struct ProcAimRigConfig;
struct SHackingAIParams;
struct CargoFillCapacityValue_Custom;
struct ActionAreaLightExtension;
struct SEntityComponentRoomParams;
struct SWeaponActionConditionParams;
struct SEntityAttachParams;
struct ItemPortTagsDictionary;
struct LoadoutEditorParams;
struct SControlledEntityTransformParams;
struct SEACriticalMessageParams;
struct PlayerUsableSlot;
struct BuildingBlocks_LanguageSpecificFontReplacement;
struct LootTable;
struct ScreenEffects_Effect;
struct SpawnDescription_EntityOptions;
struct SActorForceReactionProceduralVanduulLeanPose;
struct SActorForceReactionProceduralXianLeanPose;
struct SActorForceReactionProceduralHumanLeanPose;
struct MissionFlow;
struct BuildingBlocks_NumberCompareStatement;
struct AsteroidBehavior_WeatherParams;
struct ItemResourceNetworkPowerParams;
struct EntityClassGameplayPropertiesCraftingData;
struct SWeaponAudioReportEnvironmentParams;
struct PersonalThoughtCategory;
struct PersonalThoughtCategoryAction;
struct SReputationMissionGiverRewardBonusParams;
struct BuildingBlocks_BindingsLocalizationFromIntegerSwitch;
struct CommunicationEntry;
struct AbilityBreathingParams;
struct CockpitResponseVariation;
struct WebCustomizationDebug;
struct CameraSeatCockpitConfig;
struct CameraFirstPersonBaseConfig;
struct SHelmetStateBaseParams;
struct SActorForceReactionGlobalStaggerConfig;
struct CameraLensGhostSet;
struct WeaponAimableAnglesDef;
struct SEALoadoutItem;
struct CargoFillCapacityValue_Random;
struct CargoFillCapacityValue_Even;
struct BlobVFXSharedParams;
struct TakeDownConfig;
struct ActorLookAheadVehicle;
struct UsableArchetype;
struct SCItemThrusterParams;
struct CraftingBlueprint;
struct ActorSomaticShakeParams;
struct LandingZoneInventory;
struct MineableComposition;
struct SpecialEventDay;
struct TransitDestinationParams;
struct IntUserVariable;
struct SScoreboard;
struct ProceduralLandingSetup;
struct SActorForceReactionFlinchConfigDef;
struct SpineBone;
struct SCharacterCustomizerEyeRandomizationParams;
struct SAccoladeRequirementOR;
struct SAccoladeRequirementAND;
struct ItemTypeDefinition;
struct BuildingBlocks_BindingsStringFromStringSwitch;
struct MissionFailConditionsList;
struct DifficultyLevelParams;
struct ContextualCommunicationResponse;
struct PlacedSurfaceEffectsComponentParams;
struct SCItemInteractionJournalParams;
struct HealthIconData;
struct SMisfireEvents;
struct MissionPropertyValue_TimeTrialRace;
struct AudioEnvironmentFeedbackZoneSetup;
struct SCItemToolArmParams;
struct UsableChannelInputActionGroup;
struct ResourceType;
struct LookAtTypes;
struct ScanCustomDataTagToggle;
struct SEffectParamParticle;
struct LadderAnimationParams;
struct SActorForceReactionFilteredStaggerRangeDef;
struct SActorForceReactionUnfilteredStaggerConfigDef;
struct AudioValueOutput;
struct SHackingThreatLevelParams;
struct GlobalRoomStateParams;
struct SGlobalHealingBeamParams;
struct VisibleElement;
struct ContractPrerequisite_DateSchedule;
struct LawSystemGlobalSettings;
struct SCItemShopRackParams;
struct ProceduralPlanetAudioTagAndEventsDef;
struct DialogueBundleEmbedded;
struct SEntityComponentEffects_Test;
struct SCItemRadarSensitivityModifierTypeContacts;
struct RadarContactTypeDefinition;
struct RadarContactSubGroupEntry;
struct SDynamicDifficultyParams;
struct ActorStatusUIWarning;
struct ActionStatusCosts;
struct AbilityStatusCosts;
struct EntityAudioControllerManagerParams;
struct EAPatchNoteCategoryParams;
struct SCItemControlCondition_And;
struct WheelAudioSurfaceMap;
struct ContractResult_CompletionTags;
struct EntityEffectSystem_MaterialPropertyLink;
struct EntityEffectSystem_LightPropertyLink;
struct SEntityEffectSystem_SoundPropertyLink;
struct SEntityEffectSystem_PropertyLink;
struct SEntityEffectSystem_ParticlePropertyLink;
struct ContractResult_BadgeAward;
struct MobiGlasAfterActionReportRankRules;
struct KioskInteractionEntityComponentParams;
struct BuildingBlocks_AspectRatioLibrary;
struct BuildingBlocks_BindingsNumberArithmeticMulti;
struct ScanDisplayCustomDataArraySetupParams;
struct ScanDisplayStandardArraySetupParams;
struct ActorStatusPrioritySet;
struct SReputationMissionRequirementsParams;
struct SEntityEffectSystem_UIOwnerCategory;
struct CraftingCost_Select;
struct ExtendedNameData;
struct WorldDisplay_PlaneEnvironment;
struct VendingMachineParams;
struct HandholdGripDatabase;
struct BuildingBlocks_DraggablePolicyBase;
struct BuildingBlocks_Interactions;
struct BuildingBlocks_DropTargetItem;
struct SItemPortMasterControllerParams;
struct RadarDisplay3DPreset;
struct TQSOptionContent;
struct AnimationGraph_Track;
struct CraftingRecipeCosts;
struct MovieClipTransformationInterpolator;
struct SStatusFortitudeLevelModifier;
struct SActorLocomotionFidgetStateFilteredDef;
struct SCEntityWeaponMountParams;
struct SInverseInteractionLinkExecuteCreateInteractionLinkNode;
struct Investigation_ClueItem_Corpse;
struct Investigation_ClueItem_Datapad;
struct Investigation_ClueItem;
struct ProcBreathingCurveDatabase;
struct SCItemInteractionGeometryMapParams;
struct STeamScoring;
struct SPlayerScoring;
struct RemovableChipParams;
struct CostModifierPerAgentType;
struct SActorForceReactionTwitchConfigDef;
struct WeaponGimbalModeModifierDef;
struct SActorForceReactionLeanConfigDef;
struct UIAudioComponentEntityComponentParams;
struct ActorMovementSetsConfig;
struct SActorForceReactionGlobalEffectConfig;
struct VehicleEditorGroupData;
struct SCItemTurretStandardAngleLimitParams;
struct ActorLookLimits;
struct AIContextualVisualFieldProfile;
struct VoiceChannelSettingsRecord;
struct CyclingChannelOption;
struct SChatChannelFilterBase;
struct SChatChannelWhiteList;
struct SChatChannelBlackList;
struct FactionPalettes;
struct SCItemRadarSensitivityModifierTypeSignatureCategory;
struct RadarSignatureCategoryDefinition;
struct SInteractionPointModifierApplyActorOffsetByGravity;
struct InteractionConditionPreset;
struct SInteractionPointModifierReplaceByBoneTransform;
struct SInteractionPointModifier;
struct SEntityAudioControllerParams;
struct SCItemGasTankParams;
struct SRenderToTextureViewParams;
struct SEntityEffectSystem_AudioEnvironmentCategory;
struct BindingsOperations_StringFromIntegerSwitchCanvas;
struct SurfaceRaindropsComponentParams;
struct SItemPortLoadoutXMLParams;
struct SItemPortLoadoutBaseParams;
struct SLoadoutInventoryContainer;
struct SEAPlayerSpawnProperties;
struct SItemPortLoadoutManualParams;
struct SItemPortLoadoutRecordParams;
struct ItemResourceConversionModifierScrub;
struct FloatUserVariable;
struct EATransportControllerComponentParams;
struct BuildingBlocks_BindingsTagFromNumberCompare;
struct SEASpawnLocationParamsDef;
struct ActorStatusData;
struct ConversationNode_Hub;
struct Conversation;
struct EntityPhysicalAudioParams;
struct InnerThought_LayoutCurve;
struct StarMarineLoadoutEditorAdditionalParams;
struct ObjectiveHandler_EventModule;
struct EAScoringMessageParams;
struct SSCLocalPlayerChoiceComponentParams;
struct LongTermPersistenceSubTypeList;
struct PlayerChoice_SignalConfig;
struct SCItemInspectableParams;
struct VehicleLandingGearSystem;
struct VibrationAudioEntry;
struct AudioEnvironmentMovementRtpcBehavior;
struct ThrusterOutputToRtpcList;
struct IFCSOutputToRtpcList;
struct AudioPassByRtpcParams;
struct SWeaponActionFireChargeDrainParams;
struct SWeaponActionFireExtinguisherParams;
struct SWeaponParticleEffectParamsArray;
struct SWeaponActionFireBeamParams;
struct SWeaponActionFireSalvageRepairParams;
struct SAuxiliaryWeaponActionComponentParams;
struct SWeaponMisfireParams;
struct SWeaponActionDynamicConditionParams;
struct SWeaponActionGatheringBeamParams;
struct SWeaponModifierComponentParams;
struct ItemWeaponBeamVFXParams;
struct SWeaponActionLockOnParams;
struct SWeaponActionFireChargedParams;
struct SWeaponConnectionParams;
struct SWeaponActionFireRapidParams;
struct SWeaponActionSequenceParams;
struct SWeaponActionGrappleParams;
struct SWeaponActionFireSingleParams;
struct SWeaponActionFireBurstParams;
struct BuildingBlocks_BindingsStringFromNumberCompare;
struct SXYZCurvesArrays;
struct PersonalThoughtGameModeDef;
struct PersonalThoughtHologramActionsList;
struct SecurityClearanceConditions;
struct SecurityClearanceGiverComponentParams;
struct FiringRangeWeaponItem;
struct SMobiGlasPersonalStatusWeaponItem;
struct StateTokenRequirements;
struct SLawComponentParams;
struct PostureGroup;
struct EAPhaseActivePropComponentDef;
struct EAPhaseObjectiveComponentDef;
struct EAPhaseBaseComponentDef;
struct ActorLandingNode;
struct UIStateColor;
struct PartialContractRewardRange;
struct SReputationGlobalContextBBParams;
struct ActorRestrainConfig;
struct StaminaCostParams;
struct EntitlementAccountItemGlobalParams;
struct EntitlementNonInventoryStorableItemGlobalParams;
struct ArmouryItem;
struct ContractResult_ItemsWeighting;
struct SSalvageRepairLocalizationParams;
struct SCItemShieldGeneratorParams;
struct SEAPlayerLoadoutSnapshots;
struct SWeaponAttachmentUIComponentParams;
struct FireHazardPermanentEffects;
struct CraftingMaterialStatDatabaseRecord;
struct SCItemRadarComponentParams;
struct PlayerChoice_OptionList;
struct SEAActionItemMessageParams;
struct SurfaceAudioPropertiesDefinition;
struct SArmouryManagerParams;
struct FrontendS42ActionData;
struct FrontendS42Scenario;
struct SCharacterCustomizerHeadLibraryParams;
struct StarMapObject;
struct WebCustomizationStaticParams;
struct SCItemTurretParams;
struct AudioFootstepSurfacesDefinition;
struct ChatManagerGlobalParams;
struct SAmmoContainerComponentParams;
struct MotionState;
struct RadarDeltaSignatureDefinition;
struct SCharacterCustomizerDNAHeadPool;
struct S42FieldManual;
struct BuildingBlocks_ContextMenuPolicy;
struct MobiGlasPersonalMessage_ShipChatSchedule;
struct EAScoringAssistParams;
struct SCItemDisplayScreenComponentParams;
struct ProceduralAnimationSequence;
struct PlanetOceanAudioData;
struct CraftingGameplayPropertyImplSingleStatTier_Int;
struct SAnimationControllerParams;
struct HaulingOrder_MissionItemDropOff;
struct ObjectiveHandler_Deliveries;
struct HaulingOrder_MissionItem;
struct LegacyCraftingRecipeListRecord;
struct LegacyCraftingRecipeList_Direct;
struct CommodityTypeDatabase;
struct AsteroidFieldComposition;
struct SPrimeableComponentParams;
struct SHackingCodeCommandEntry;
struct HudColor_Palette;
struct SCAirTrafficControllerDataManagerParams;
struct SpawnDescriptions;
struct SubItemsScanProcedureParams;
struct EntityClassRawMaterialCraftingData;
struct ResourceTypeCraftingData;
struct SCItemObservableScreenParams;
struct JumpDriveMusicParams;
struct Marker_Configuration;
struct MeleeAttackInfo;
struct PointOfInterestList;
struct Faction_LEGACY;
struct HandholdLinkComponentParams;
struct CargoFillCapacityValue_RandomBeta;
struct UnitTest_Inheritance;
struct ScanDisplayConditionVariableParams;
struct ItemControlComponentParams;
struct SandboxTriggerManualParams;
struct UIAudioDefinition;
struct SCItemSeatDashboardMFDParams;
struct HarvestableElementModifier;
struct SubHarvestableSlot;
struct HarvestableElement;
struct AudioBreathStyleConditionList;
struct AudioBreathStyleTransitionNode;
struct ActorBreathingStyleStartup;
struct ItemResourceState;
struct ControlHintCondition_AND;
struct ControlHintCondition_OR;
struct BuildingBlocks_BindingsIntegerArithmeticMulti;
struct CameraOrbitEntityConfig;
struct CameraOrbitPointConfig;
struct CameraOrbitSpectatorFollowConfig;
struct CameraOrbitSpectatorFollowVehicleConfig;
struct CameraOrbitFPSDeathCamConfig;
struct CameraOrbitSCItemSeatConfig;
struct CameraPlayerInventoryConfig;
struct CameraOrbitPassengerSCItemSeatConfig;
struct CameraOrbitConfig;
struct CameraOrbitEntityCinematicConfig;
struct CameraPlayerHeadConfig;
struct SSCSignatureEmissionModifier;
struct BuildingBlocks_BindingsStringFromTagSwitch;
struct SObjectiveMarkerLocationParams;
struct SCustomizableMaterialLookupTable;
struct EntityComponentMobiglasLauncherProviderParams;
struct SGalactapediaUnlockableComponentParams;
struct SGalactapediaCategory;
struct FlashObjectBindingGroup;
struct ZeroGTraversalState;
struct SDockingAnimatorBaseParams;
struct EntityComponentAudioEnvironmentFeedbackParams;
struct ActorStanceConfig;
struct StarMapObjectTypes;
struct QuickAccessWheelMenuDef;
struct PersonalThoughtQuickAccessWheel;
struct LeanState;
struct LogoutComponentParams;
struct EAObjectiveInteractableComponentDef;
struct QuantumMusicParams;
struct InfractionSet;
struct SCItemSuitArmorParams;
struct CtxGraph_Context;
struct UIGraph_Context;
struct MissionStringVariants;
struct BuildingBlocks_BindingsStringFromIntegerSwitch;
struct DefaultActionsEntityEntryCondition_AND;
struct DefaultActionsEntityEntryCondition_OR;
struct DefaultActionsEntry;
struct SWeaponActionAimSimpleParams;
struct ActorStanceDimensions;
struct mobiGlasAppTable;
struct Stat;
struct SubsumptionPlatformComponentParams;
struct SCharacterCustomizerTextureList;
struct SCItemSeatParams;
struct SSCLocalPlayerCameraComponentParams;
struct SEntityComponentZoneCamerasParams;
struct IndividualPortRefillData;
struct SS42Spawning;
struct FiringRangeScenarioDef;
struct SActorForceReactionMovementLaunchConfig;
struct SLinkedInteractionStateChangedStateModifier;
struct AINavigationDynamicTriggerComponent;
struct Flash_Palette;
struct SMobiGlasAppDataPacketEmbedded;
struct MapDisplayParamsStarMap;
struct SMisfireFunctionalityCondition;
struct SMisfireProbabilityParams;
struct SMisfireMeanTimeCondition;
struct SMisfireCriticalItemStateCondition;
struct CarryConfig;
struct ResourceNetworkPowerPoolSetup;
struct Formation;
struct MissionFlowCondition_OR;
struct MissionFlowCondition_AND;
struct DefaultActionsEntityState_OR;
struct DefaultActionsEntityState_AND;
struct InteractiveVariable_BackToDefaultFloatParams;
struct SJumpTunnelSectionGenerationParams;
struct DialogueBundleWeightedEmbedded;
struct SEntrancesDef;
struct SSequencerSequenceTaskEntryParams;
struct SMusicComponentParams;
struct SStarGalaStageParams;
struct PersonalInnerThoughtActionRulePreset;
struct ActionRuleList;
struct UIBindingsSubsumptionComponentParams;
struct WingmanOrderList;
struct SPowerUserStateModifier;
struct SOnInteractionStateChangeTriggers;
struct SOnInteractionTriggers;
struct TransitCarriageAudio;
struct SecurityNetworkVariableEffects;
struct QuantumObstacleParams;
struct GenericDataDisplayAppData;
struct MobiGlasPersonalMessage_Message;
struct EntityClassMigration;
struct ActorAimLimits;
struct ChatCommandFastAccess;
struct AnimationJointMovement;
struct MeleeAttackCombo;
struct SBeamEffectParams;
struct InnerThought_Params;
struct BlueprintCategoryDatabaseRecord;
struct BlueprintCategoryAvailability_Whitelist;
struct PlayerShipRespawn;
struct SWeaponActionFireHealingBeamParams;
struct ProceduralPlanetAudioAlgorithm;
struct ProceduralPlanetAudioAlgorithmCount;
struct ProceduralPlanetAudioAlgorithmClosestObjects;
struct SCItemFuelNozzleParams;
struct EntityAudioControllerRtpcSubscriberListDef;
struct SAtmosphericCompositionParams;
struct ConstantDOFWeights;
struct DigitalSignageContentSet;
struct UIWorldDisplaySoundParams;
struct CommsTapManagerComponentParams;
struct SCCommsSpeakerComponentParams;
struct SCCommsChannelAreaComponentParams;
struct SCItemCommsReceiverComponentParams;
struct SThrowableParams;
struct SpawnerPrerequisite_OR;
struct SpawnerPrerequisite_AND;
struct SPUSpawning;
struct ContractResult_JournalEntry;
struct ContractPrerequisite_JournalEntries;
struct EntityComponentPointOfInterestParams;
struct SCItemDoorParams;
struct SActorStaticColliderDeathBehaviour;
struct ControlHintDef;
struct ExtendedNameEntryTextConcatenateOptions;
struct ExtendedNameEntryTextRandomizedOptions;
struct RadarSystemSharedParams;
struct StringUserVariable;
struct BindingsOperations_StringFromIntegerSwitchFontStyle;
struct MusicLogicIncrement;
struct GreaterThan;
struct MusicEventResponse;
struct MusicLogicCondition;
struct ParentMusicLogicNode;
struct MusicLogicSuite;
struct CameraShopConfig;
struct SCIGTestBB;
struct SUsableAnimationParams;
struct SMFDView;
struct EntityComponentAttachableModifierParams;
struct ItemportTraversingModifiersParams;
struct MotionTurnSetupList;
struct MedBedTierParams;
struct DrugEfficacyForItemSubType;
struct ChatFilterOptions;
struct WorldDisplayEnvironment;
struct GlobalShopBuyingParams;
struct ContractAvailability;
struct SRewardGeneratorComponentParams;
struct SCLinkedInteractiveControllerParams;
struct SEntitityEffectSystem_System;
struct SServiceBeaconCreatorParamsWithDifficulty;
struct SCDynamicLightingRigGlobalParams;
struct BuildingBlocks_BindingsIntegerFromStringSwitch;
struct NavigationLinkComponentParams;
struct ActorFallNode;
struct UI3DDisplayInputParams;
struct AtmosphereBehavior_WeatherParams;
struct AnimationCombineVariable;
struct ReputationValueSettings;
struct NavigationCostVolumeComponentParams;
struct LootArchetypeEntry_Primary;
struct SCPersonalThoughtDisplayParams;
struct LootingItemPortSizeClass;
struct PersonalThoughtInventoryItemUIIcon;
struct SEntityComponentOutfitHangerParams;
struct SApplicationFormVoiceParams;
struct EAPickupParams;
struct AudioSignal;
struct DefaultActionsParams;
struct ForceFeedback;
struct HarvestBehaviourParams;
struct ContractParamOverrides;
struct SMissionLocationModule;
struct SubContract;
struct MissionPropertyValue_CombinedDataSetEntries;
struct LootGenerationGlobalParams;
struct ConsumableSubtype;
struct ActorProceduralRecoilConfig;
struct EAObjectiveControlPhase;
struct AudioGameContextGlobals;
struct ProceduralPlanetAudioDisturbanceList;
struct SCItemTurretCustomAngleLimitTagOverwriteParams;
struct SpawnDescription_NPC_Group;
struct CraftingGameplayPropertyImplSingleStatTier_Float;
struct TacticScoringProfile;
struct mobiGlasDefaultAppEntry;
struct SMobiGlasAppDataPacketReferenced;
struct SHealthComponentParams;
struct SubsumptionComponentParams;
struct DynArray_SFortitudeLevelStats;
struct DynArray_STakedownTechniqueLevelStats;
struct DynArray_SReflexLevelStats;
struct DynArray_SPlayerRoleShakeMultipliers;
struct DynArray_SStrengthLevelStats;
struct DynArray_SLightStatePreset;
struct DynArray_PingDetectionLevelParams;
struct DynArray_SVaultingTechniqueLevelStats;
struct DynArray_SFitnessLevelStats;
struct DynArray_SAimableGameModeRoleParams;
struct DynArray_OperatorModeAvailability;
struct DynArray_ContractResultBase;
struct DynArray_WebCustomizationItemTypeName;
struct DynArray_EASpecialEventInformationParams;
struct DynArray_GameModeCustomSetting;
struct DynArray_ItemPreview_SkinnedLoadoutOverride;
struct DynArray_STargetableItemType;
struct DynArray_MasterModeExclusion;
struct DynArray_ItemPreview_CameraSettingsOverride;
struct DynArray_InventoryContainerItemTypeFilter;
struct DynArray_StatusEffectAbilityLock;
struct DynArray_SItemTypeFilter;
struct DynArray_OrificeBloodParams;
struct DynArray_InfractionDefinition;
struct DynArray_SocialTab;
struct DynArray_AbilityDefinition;
struct DynArray_SUninsuredItem;
struct DynArray_ItemPreview_TurntableOverride;
struct DynArray_ItemResourceNetworkMapTriggerEntry;
struct DynArray_SCItemSuitThrusterParams;
struct DynArray_SItemPortDefTypes;
struct DynArray_AIObservableFilterFlags;
struct DynArray_ArmsLockSingleAbility;
struct DynArray_OperatorModeDefinitions;
struct DynArray_PassengerScanStatusMappings;
struct DynArray_PersonalThoughtForceCloseActionList;
struct DynArray_DockingSlotVisibilityTagSet;
struct DynArray_AsteroidFieldShapeLinkParams;
struct DynArray_SWeaponOnAttachParams;
struct DynArray_DisabledLoadoutInteraction;
struct DynArray_DurationTags;
struct DynArray_Fidget;
struct DynArray_SMegaMapSolarSystem;
struct DynArray_PersonalThoughtContextualActionsMenu;
struct DynArray_ChatEmoteData;
struct DynArray_SSimpodSimulation;
struct DynArray_AwardService_Award;
struct DynArray_SApplicationFormBodyTypeOption;
struct DynArray_InnerThought_LayoutGridSet;
struct DynArray_StatusEffectBuffMacro;
struct DynArray_VehicleEditorCapabilities;
struct DynArray_SSCSignatureSystemAudioRule;
struct DynArray_EVAState;
struct DynArray_ScanDisplaySectionParams;
struct DynArray_SeatUserActorCDIKMapping;
struct DynArray_BoolUserVariable;
struct DynArray_BuildingBlocks_TextEmphasisModifierList;
struct DynArray_SPerkReputationListParams;
struct DynArray_CustomScanProcedureParams;
struct DynArray_Announcement;
struct DynArray_SCSeatAccessEntranceInteractionParams;
struct DynArray_SCSeatAccessPassageInteractionParams;
struct DynArray_SpawnDescription_ShipOptions;
struct DynArray_BuildingBlocks_Keyframe;
struct DynArray_SEAFPSGunGameArmorSet;
struct DynArray_ScanInformationDef;
struct DynArray_WeaponProceduralClipsSetUp;
struct DynArray_MissionScenarioCycle;
struct DynArray_ProcBreathingExertion;
struct DynArray_SRemoteRigidEntityControlledEntitiesParams;
struct DynArray_ScreenEffects_DebugEffect;
struct DynArray_BodyPartConfig;
struct DynArray_AutoSpawnSettings;
struct DynArray_SReputationAmountListParams;
struct DynArray_SMiniGameSpriteParams;
struct DynArray_SReputationScopeContextUI;
struct DynArray_SReputationJournalGroupParams;
struct DynArray_SCItemControlPriorityTable;
struct DynArray_VehicleCareer;
struct DynArray_ActorStatData;
struct DynArray_ItemAwardWeightings;
struct DynArray_S42CommendationRulesEntry;
struct DynArray_LootArchetypeOrGroup_Secondary;
struct DynArray_STaggedSignaturesEntry;
struct DynArray_SEAUISpawnScreenFPSEquipmentSlotParams;
struct DynArray_PersonalThoughtInventorySingleFilter;
struct DynArray_PersonalThoughtInventoryItemOrientationOffset;
struct DynArray_InventoryDropDetachRules;
struct DynArray_InventoryInteractionBlockingAttachedEntities;
struct DynArray_LootingTabParams;
struct DynArray_BoidState;
struct DynArray_BuildingBlocks_StaticArrayEntry;
struct DynArray_FoleyLoop;
struct DynArray_FoleyOneShot;
struct DynArray_UnitTest;
struct DynArray_MobiGlasAfterActionReportStat;
struct DynArray_SCItemPriorityGroupParam;
struct DynArray_HandholdParams;
struct DynArray_BuildingBlocks_StyleConditionList;
struct DynArray_SQedVisualGraphStateParams;
struct DynArray_LightningBehavior_Effect;
struct DynArray_BuildingBlocksLayer;
struct DynArray_SReputationStateMissionResultModifierListParams;
struct DynArray_RaSTaRLibraryCategory;
struct DynArray_DialogueContent;
struct DynArray_SCharacterCustomizerVoiceParams;
struct DynArray_SCharacterCustomizerSkinBaseMaterialList;
struct DynArray_SCharacterCustomizerWildlineCondition;
struct DynArray_TriggerConditionDef;
struct DynArray_SCharacterCustomizerBodyTypeParams;
struct DynArray_DrugEfficacyForItemType;
struct DynArray_SEntityTraversingTarget;
struct DynArray_ProcAimRigConfig;
struct DynArray_PlayerUsableSlot;
struct DynArray_ScreenEffects_Effect;
struct DynArray_SpawnDescription_EntityOptions;
struct DynArray_SActorForceReactionProceduralVanduulLeanPose;
struct DynArray_SActorForceReactionProceduralXianLeanPose;
struct DynArray_SActorForceReactionProceduralHumanLeanPose;
struct DynArray_BuildingBlocks_NumberCompareStatement;
struct DynArray_SReputationMissionGiverRewardBonusParams;
struct DynArray_CommunicationEntry;
struct DynArray_CockpitResponseVariation;
struct DynArray_SHelmetStateBaseParams;
struct DynArray_CameraLensGhostSet;
struct DynArray_SEALoadoutItem;
struct DynArray_UsableArchetype;
struct DynArray_SpecialEventDay;
struct DynArray_IntUserVariable;
struct DynArray_SScoreboard;
struct DynArray_SActorForceReactionFlinchConfigDef;
struct DynArray_SpineBone;
struct DynArray_DifficultyLevelParams;
struct DynArray_ContextualCommunicationResponse;
struct DynArray_UsableChannelInputActionGroup;
struct DynArray_ResourceType;
struct DynArray_SActorForceReactionFilteredStaggerRangeDef;
struct DynArray_AudioValueOutput;
struct DynArray_SHackingThreatLevelParams;
struct DynArray_RadarContactSubGroupEntry;
struct DynArray_ActorStatusUIWarning;
struct DynArray_ActionStatusCosts;
struct DynArray_AbilityStatusCosts;
struct DynArray_EAPatchNoteCategoryParams;
struct DynArray_EntityEffectSystem_MaterialPropertyLink;
struct DynArray_EntityEffectSystem_LightPropertyLink;
struct DynArray_SEntityEffectSystem_SoundPropertyLink;
struct DynArray_SEntityEffectSystem_ParticlePropertyLink;
struct DynArray_MobiGlasAfterActionReportRankRules;
struct DynArray_ExtendedNameData;
struct DynArray_AnimationGraph_Track;
struct DynArray_SActorLocomotionFidgetStateFilteredDef;
struct DynArray_Investigation_ClueItem;
struct DynArray_CostModifierPerAgentType;
struct DynArray_SActorForceReactionTwitchConfigDef;
struct DynArray_VehicleEditorGroupData;
struct DynArray_AIContextualVisualFieldProfile;
struct DynArray_InteractionConditionPreset;
struct DynArray_SInteractionPointModifier;
struct DynArray_SItemPortLoadoutBaseParams;
struct DynArray_FloatUserVariable;
struct DynArray_ActorStatusData;
struct DynArray_Conversation;
struct DynArray_VibrationAudioEntry;
struct DynArray_AudioEnvironmentMovementRtpcBehavior;
struct DynArray_ThrusterOutputToRtpcList;
struct DynArray_IFCSOutputToRtpcList;
struct DynArray_SWeaponParticleEffectParamsArray;
struct DynArray_PersonalThoughtGameModeDef;
struct DynArray_FiringRangeWeaponItem;
struct DynArray_SMobiGlasPersonalStatusWeaponItem;
struct DynArray_StateTokenRequirements;
struct DynArray_PostureGroup;
struct DynArray_ActorLandingNode;
struct DynArray_PartialContractRewardRange;
struct DynArray_ArmouryItem;
struct DynArray_PlayerChoice_OptionList;
struct DynArray_FrontendS42Scenario;
struct DynArray_StarMapObject;
struct DynArray_MotionState;
struct DynArray_SCharacterCustomizerDNAHeadPool;
struct DynArray_ProceduralAnimationSequence;
struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Int;
struct DynArray_SHackingCodeCommandEntry;
struct DynArray_HudColor_Palette;
struct DynArray_SCItemObservableScreenParams;
struct DynArray_MeleeAttackInfo;
struct DynArray_SandboxTriggerManualParams;
struct DynArray_HarvestableElementModifier;
struct DynArray_SubHarvestableSlot;
struct DynArray_HarvestableElement;
struct DynArray_AudioBreathStyleTransitionNode;
struct DynArray_ActorBreathingStyleStartup;
struct DynArray_ItemResourceState;
struct DynArray_SGalactapediaCategory;
struct DynArray_ZeroGTraversalState;
struct DynArray_PersonalThoughtQuickAccessWheel;
struct DynArray_LeanState;
struct DynArray_InfractionSet;
struct DynArray_CtxGraph_Context;
struct DynArray_DefaultActionsEntry;
struct DynArray_Stat;
struct DynArray_SMisfireProbabilityParams;
struct DynArray_Formation;
struct DynArray_SJumpTunnelSectionGenerationParams;
struct DynArray_SSequencerSequenceTaskEntryParams;
struct DynArray_SStarGalaStageParams;
struct DynArray_ActionRuleList;
struct DynArray_SOnInteractionStateChangeTriggers;
struct DynArray_SOnInteractionTriggers;
struct DynArray_SecurityNetworkVariableEffects;
struct DynArray_AnimationJointMovement;
struct DynArray_MeleeAttackCombo;
struct DynArray_SBeamEffectParams;
struct DynArray_EntityAudioControllerRtpcSubscriberListDef;
struct DynArray_ControlHintDef;
struct DynArray_StringUserVariable;
struct DynArray_SCIGTestBB;
struct DynArray_SMFDView;
struct DynArray_MedBedTierParams;
struct DynArray_DrugEfficacyForItemSubType;
struct DynArray_ActorFallNode;
struct DynArray_LootArchetypeEntry_Primary;
struct DynArray_LootingItemPortSizeClass;
struct DynArray_PersonalThoughtInventoryItemUIIcon;
struct DynArray_SApplicationFormVoiceParams;
struct DynArray_AudioSignal;
struct DynArray_DefaultActionsParams;
struct DynArray_SMissionLocationModule;
struct DynArray_SubContract;
struct DynArray_ConsumableSubtype;
struct DynArray_EAObjectiveControlPhase;
struct DynArray_ProceduralPlanetAudioDisturbanceList;
struct DynArray_SCItemTurretCustomAngleLimitTagOverwriteParams;
struct DynArray_SpawnDescription_NPC_Group;
struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Float;
struct DynArray_mobiGlasDefaultAppEntry;
struct STakedownTechnique;
struct SActorExternalForceResponseCameraShakeDef;
struct SLightGroupComponentParams;
struct PingSettingsParams;
struct SVaultingTechnique;
struct SPlayerSkillsParams;
struct SAimableGameModeParams;
struct OperatorModeAvailabilityParams;
struct ContractResults;
struct WebCustomizationGlobalParams;
struct GameMode;
struct STargetableItemTypesRecord;
struct MasterModeExclusionGlobalParams;
struct InventoryOpenContainerType;
struct InventoryOpenAlwaysContainerType;
struct SSalvageRepairHighlightParams;
struct StatusBloodParams;
struct SJurisdictionRoomExtensionParams;
struct ActorAbilityComponent;
struct ShipInsurancePolicyRecord;
struct ItemPreview_Config;
struct ItemResourceNetworkUIParams;
struct SCItemSuitThrusterPackParams;
struct SMFDParamsDiagnostics;
struct VehicleEditorCategoryData;
struct GlobalShopCommodityParams;
struct VehicleEditorAutoEquipData;
struct VehicleEditorPortsData;
struct SLocalPlayerShoppingPredefinedARParams;
struct VehicleEditorItemStatData;
struct AIObservableFilters;
struct ArmsLockConfig;
struct OperatorModeDefinitionParams;
struct PassengerScanProcedureParams;
struct PersonalThoughtForceCloseActionsParams;
struct DockingSlotVisibilityRule;
struct SAsteroidShapeComponentParams;
struct ActorJumpNode;
struct FidgetConfig;
struct MegaMap;
struct ChatEmotePack;
struct SSimpodComponentParams;
struct AwardService_Config;
struct SApplicationFormHeadHomeworld;
struct InnerThought_LayoutGrid;
struct GForceParams;
struct SSCSignatureSystemAudioRuleset;
struct EVAGraph;
struct ScanDisplayLayoutParams;
struct SeatUserActorCDIKRecord;
struct SOrganizationProperties;
struct ScanCustomDataInfo;
struct Announcer;
struct SCItemSeatAccessParams;
struct SpawnDescription_ShipGroup;
struct BuildingBlocks_TimelineTypeEmbedded;
struct ScanInformationTable;
struct WeaponProceduralAnimation;
struct MissionScenario;
struct ProcBreathingSetup;
struct SRemoteRigidEntityControllerControlledGroupParams;
struct ScreenEffects_Debug;
struct BodyHealthConfig;
struct SAsteroids;
struct SVanduulInvaders;
struct SReputationContextUI;
struct SReputationJournalEntriesParams;
struct SCItemControlPriorities;
struct VehicleCareerList;
struct ItemAwardWeightingsRecord;
struct S42CommendationRules;
struct LootArchetype;
struct SSCSignatureSystemBaseSignatureParams;
struct SEAUISpawnScreenFPSEquipmentParams;
struct PersonalThoughtInventoryCategoryFilter;
struct PlayerChoice_PITConfig;
struct InventoryConfig;
struct LootingInventoryParams;
struct BuildingBlocks_StaticArrayDataArray;
struct FoleyItem;
struct TestArrays;
struct MobiGlasAfterActionReportStatsBlock;
struct SCItemControllableGroupParams;
struct HandholdComponentParams;
struct BuildingBlocks_StyleEntry;
struct SQedVisualGraphParams;
struct LightningBehavior;
struct UIBuildingBlocksEntityComponentParams;
struct SReputationStateMissionResultModifierParams;
struct RaSTaRLibrary;
struct DialogueContentBank;
struct SCharacterCustomizerMaterialEditParams;
struct SCharacterCustomizerDialogueEntry;
struct TriggerConditionDataDef;
struct ProceduralAimRigRecord;
struct ScreenEffects_Library;
struct SpawnDescription_EntityGroup;
struct SActorForceReactionProceduralVanduulLeanPoseList;
struct SActorForceReactionProceduralXianLeanPoseList;
struct SActorForceReactionProceduralHumanLeanPoseList;
struct BuildingBlocks_BindingsIntegerFromNumberCompare;
struct SReputationMissionRewardBonusParams;
struct CockpitResponse;
struct SHelmetStateMachineParams;
struct CameraLensParams;
struct SEALoadoutSet;
struct UsableArchetypes;
struct SpecialEventDatabase;
struct SEAUIScoreboardComponentParams;
struct ActorDuckingParams;
struct GameDifficultyModifiers;
struct ContextualCommunicationConfig;
struct PlayerUsableUseChannelInstance;
struct ItemResourceCompositionMap;
struct SActorForceReactionFilteredStaggerConfigDef;
struct AudioValueOutputSetup;
struct SHackingDifficultyPresetOverride;
struct SHackingThreatLevelsPreset;
struct RadarContactGroupEntry;
struct ActorStatusUIData;
struct ActorStatusComponent;
struct SEntityComponentFrontendEAUIProviderParams;
struct EntityEffectSystem_MaterialEffect;
struct EntityEffectSystem_MaterialTagEffect;
struct EntityEffectSystem_MaterialTriggerEffect;
struct EntityEffectSystem_LightTriggerEffect;
struct EntityEffectSystem_LightEffect;
struct EntityEffectSystem_LightTagEffect;
struct SEntityEffectSystem_SoundTriggerEffect;
struct SEntityEffectSystem_SoundTagEffect;
struct SEntityEffectSystem_SoundEffect;
struct SEntityEffectSystem_ParticleTagEffect;
struct SEntityEffectSystem_ParticleEffect;
struct SEntityEffectSystem_ParticleTriggerEffect;
struct ExtendedNameDatabase;
struct AnimationGraph_Timeline;
struct SActorLocomotionFidgetDef;
struct Investigation_Location;
struct TraversalCostConfig;
struct SActorForceReactionsDef;
struct AIVisualFieldProfile;
struct InteractionConditionList;
struct SGroupedLoadouts;
struct StatusEffectSetup;
struct ConversationBank;
struct VibrationAudioPointDef;
struct AudioEnvironmentFeedbackTagAndEvent;
struct ThrusterAudioComponentParams;
struct ShipAudioComponentParams;
struct SCItemWeaponComponentParams;
struct PersonalThoughtContextualActionsMenusParams;
struct S42PersonalStatusAppParams;
struct StateTypeStateTokenRequirements;
struct PostureDatabase;
struct PartialContractRewards;
struct ArmouryItemCategory;
struct PlayerChoice_Library;
struct FrontendControllerProviderSQ42Params;
struct MissionLocality;
struct MotionGraph;
struct ProceduralAnimation;
struct CraftingGameplayPropertyImpl_SingleStat_Int;
struct SHackingCodeParamsPreset;
struct HudColors;
struct SCItemObservableGroupParams;
struct MeleeCombatConfig;
struct SandboxTriggerRecord;
struct HarvestableAreaPreset;
struct SubHarvestableConfig;
struct HarvestableElementGroup;
struct AudioBreathStyleNode;
struct AudioBreathStyle;
struct ItemResourceStateModifier;
struct SGalactapediaData;
struct ZeroGTraversalGraph;
struct PersonalThoughtQuickAccessWheels;
struct LeanGraph;
struct CtxGraph_Group;
struct ActorDefaultActionsConfig;
struct StatDefinitions;
struct SMisfireLevelParams;
struct AITargetableComponentParams;
struct SJumpTunnelGenerationParams;
struct SReplicatedSequencerDefSequenceParams;
struct SSequencerDefSequenceParams;
struct SStarGala;
struct PersonalThoughtActionsRulesParams;
struct SCInteractionStateGameplayTriggerComponentParams;
struct SecurityNetworkMemberComponentParams;
struct SecurityNetworkManifest;
struct AnimationJointControl;
struct AIMeleeCombatConfig;
struct SBeamGroupParams;
struct TachyonProjectileParams;
struct EntityAudioControllerRtpcSubscriberParams;
struct EntityComponentVehicleAudioPointParams;
struct ControlHint_Entry;
struct UserVariablesComponentParams;
struct SEntityComponentCIGTestAParams;
struct SMFDViewList;
struct MedicalItemTierConfig;
struct DrugEfficacyConfigForItemSubTypeWeapon;
struct LootArchetypeOrGroup_Primary;
struct PersonalThoughtLootingScreenParams;
struct PersonalThoughtInventoryParams;
struct AudioSignalList;
struct DefaultActions;
struct MissionLocationData;
struct CareerContract;
struct ContractBase;
struct ContractLegacy;
struct Contract;
struct ConsumableType;
struct EAObjectiveControl;
struct ProceduralPlanetAudioEntry;
struct SCItemTurretCustomAngleLimitParams;
struct MissionPropertyValue_NPCSpawnDescriptions;
struct CraftingGameplayPropertyImpl_SingleStat_Float;
struct SCItemMobiGlasProviderParams;
struct DynArray_PingSettingsParams;
struct DynArray_GameMode;
struct DynArray_VehicleEditorCategoryData;
struct DynArray_VehicleEditorAutoEquipData;
struct DynArray_SLocalPlayerShoppingPredefinedARParams;
struct DynArray_VehicleEditorItemStatData;
struct DynArray_AIObservableFilters;
struct DynArray_DockingSlotVisibilityRule;
struct DynArray_ActorJumpNode;
struct DynArray_MegaMap;
struct DynArray_ChatEmotePack;
struct DynArray_SApplicationFormHeadHomeworld;
struct DynArray_GForceParams;
struct DynArray_SSCSignatureSystemAudioRuleset;
struct DynArray_SpawnDescription_ShipGroup;
struct DynArray_MissionScenario;
struct DynArray_SReputationJournalEntriesParams;
struct DynArray_FoleyItem;
struct DynArray_MobiGlasAfterActionReportStatsBlock;
struct DynArray_BuildingBlocks_StyleEntry;
struct DynArray_SCharacterCustomizerDialogueEntry;
struct DynArray_SpawnDescription_EntityGroup;
struct DynArray_CockpitResponse;
struct DynArray_SHelmetStateMachineParams;
struct DynArray_SEALoadoutSet;
struct DynArray_PlayerUsableUseChannelInstance;
struct DynArray_ItemResourceCompositionMap;
struct DynArray_RadarContactGroupEntry;
struct DynArray_EntityEffectSystem_MaterialTagEffect;
struct DynArray_EntityEffectSystem_MaterialTriggerEffect;
struct DynArray_EntityEffectSystem_LightTriggerEffect;
struct DynArray_EntityEffectSystem_LightTagEffect;
struct DynArray_SEntityEffectSystem_SoundTriggerEffect;
struct DynArray_SEntityEffectSystem_SoundTagEffect;
struct DynArray_SEntityEffectSystem_ParticleTagEffect;
struct DynArray_SEntityEffectSystem_ParticleTriggerEffect;
struct DynArray_AnimationGraph_Timeline;
struct DynArray_Investigation_Location;
struct DynArray_SGroupedLoadouts;
struct DynArray_AudioEnvironmentFeedbackTagAndEvent;
struct DynArray_StateTypeStateTokenRequirements;
struct DynArray_ArmouryItemCategory;
struct DynArray_SCItemObservableGroupParams;
struct DynArray_HarvestableAreaPreset;
struct DynArray_HarvestableElementGroup;
struct DynArray_AudioBreathStyle;
struct DynArray_CtxGraph_Group;
struct DynArray_SMisfireLevelParams;
struct DynArray_SSequencerDefSequenceParams;
struct DynArray_ControlHint_Entry;
struct DynArray_CareerContract;
struct DynArray_ContractLegacy;
struct DynArray_Contract;
struct DynArray_ConsumableType;
struct DynArray_ProceduralPlanetAudioEntry;
struct ChargePingTypeParams;
struct Level;
struct VehicleEditorEditableCategoriesData;
struct SLocalPlayerShoppingData;
struct AIObservableFiltersProfile;
struct DockingSlotVisibility;
struct JumpFallLandConfig;
struct FrontendOverrideParams;
struct ChatEmoteRecord;
struct FlightAcademyApplicationFormComponentParams;
struct ActorGForceComponent;
struct SSCSignatureSystemAudioParams;
struct MissionPropertyValue_ShipSpawnDescriptions;
struct ContractGenerator;
struct SReputationJournalEntryHandlerParams;
struct FoleyDefinition;
struct MobiGlasAfterActionReportGenerationRules;
struct BuildingBlocks_BrandStyles;
struct BuildingBlocks_Style;
struct BuildingBlocks_DefaultStyles;
struct SCharacterCustomizerDialogueData;
struct MissionPropertyValue_EntitySpawnDescriptions;
struct CockpitResponses;
struct ShipComputerPreset;
struct AnimatedHelmetParams;
struct SEALoadoutCollection;
struct SPlayerUsableParams;
struct ItemResourceNetworkGlobal;
struct SCItemRadarSensitivityModifierTypeContactGroups;
struct RadarContactGroupArray;
struct RadarContactGroupDefinition;
struct EntityEffectSystem_MaterialCategory;
struct EntityEffectSystem_LightCategory;
struct SEntityEffectSystem_SoundCategory;
struct SEntityEffectSystem_ParticleCategory;
struct AnimatedMarker_Marker;
struct MissionPropertyValue_Investigation;
struct SLoadoutAssortment;
struct AudioEnvironmentFeedbackPointDef;
struct SecurityAccessTokenStateModifier;
struct ArmouryData;
struct SCItemObservableParams;
struct HarvestableProviderPreset;
struct AudioBreathDefinition;
struct CtxGraph;
struct EntityComponentMisfireParams;
struct SEntityComponentSequencerParams;
struct ControlHints_Preset;
struct ContractGeneratorHandler_Legacy;
struct ContractGeneratorHandler_TutorialSeriesDef;
struct ContractGeneratorHandler_Career;
struct ContractGeneratorHandler_LinearSeries;
struct ContractGeneratorHandler_ServiceBeacon;
struct ContractGeneratorHandler_PVPBountyDef;
struct ContractGeneratorHandler_List;
struct ConsumableTypeDatabase;
struct ProceduralPlanetAudioData;
struct DynArray_ContractGenerator;
struct DynArray_BuildingBlocks_BrandStyles;
struct DynArray_ShipComputerPreset;
struct DynArray_SEALoadoutCollection;
struct DynArray_AnimatedMarker_Marker;
struct DynArray_SLoadoutAssortment;
struct GlobalMissionSettings;
struct ShipComputerPresetList;
struct SEAGlobalSpecialLoadout;
struct AnimatedMarker;
struct SItemPortLoadoutRandomGeneratedParams;
struct DynArray_SEAGlobalSpecialLoadout;
struct SEAGlobalEventLoadouts;
# 15561 "structs.h"
struct AIWave {
    uint8_t _pad_0[0x8];
    int32_t id;
    uint8_t _pad_1[0x4];
    struct CryStringT* textId;
    uint8_t _pad_2[0x8];
    float staggerTime;
    uint8_t _pad_3[0x4];
    struct DynArray_AIWaveMember* members;
    uint8_t _pad_4[0x28];
};




struct AIWaveCollection {
    uint8_t _pad_0[0x8];
    struct DynArray_AIWave* waves;
    uint8_t _pad_1[0x28];
};




struct AIWaveMember {
    uint8_t _pad_0[0x8];
    struct CryStringT* archetype;
    uint8_t _pad_1[0x8];
    struct EntityClassDefinition* entityClassDefinition;
    uint8_t _pad_2[0x10];
    struct CryStringT* name;
    uint8_t _pad_3[0x8];
    struct CryStringT* vehicleName;
    uint8_t _pad_4[0x8];
    int32_t amount;
    int32_t minAmount;
    int32_t midAmount;
    int32_t maxAmount;
    struct CrewManifest* crewManifestOverride;
    uint8_t _pad_5[0x10];
    struct SkillDefinitions* skillsetOverride;
    uint8_t _pad_6[0x10];
    struct DynArray_CargoManifest* cargoManifests;
    uint8_t _pad_7[0x28];
    struct SVehicleAiDamageModifiers* aiDamageModifiersOverride;
    uint8_t _pad_8[0x10];
};




struct ActorStatusGlobalParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorStatusEffect* actorStatusEffects;
    uint8_t _pad_1[0x28];
    struct DynArray_ActorStatusBuff* actorStatusBuffs;
    uint8_t _pad_2[0x28];
    struct ActorStatusLocalisation* actorStatusLocalisation;
    uint8_t _pad_3[0x90];
    struct MedicalItemTierConfig* medicalItemTierConfig;
    uint8_t _pad_4[0x10];
    struct ConsumableType* drugConsumableType;
    uint8_t _pad_5[0x10];
    struct ActorSomaticShakingParams* somaticShakeParams;
    uint8_t _pad_6[0x100];
    struct ConsumableSubtype* overdoseRevivalConsumableSubType;
    uint8_t _pad_7[0x10];
    struct DynArray_Tag* statusPlacedSurfaceEffectsTags;
    uint8_t _pad_8[0x28];
};




struct AggregateStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_AggregateStateParams* aggregateStateParams;
    uint8_t _pad_1[0x28];
};




struct AggregateStateParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SInteractionState* aggregateStates;
    uint8_t _pad_1[0x28];
    struct SInteractionState* state;
    uint8_t _pad_2[0x8];
};




struct AlignmentSlotBase {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    _Bool available;
    _Bool canPlayerUse;
    uint8_t _pad_3[0x6];
    struct DynArray_SInteractionPointParams* interactionPoints;
    uint8_t _pad_4[0x28];
    struct CryStringT* fragmentTag;
    uint8_t _pad_5[0x8];
    struct DynArray_Tag* optionalGameTags;
    uint8_t _pad_6[0x28];
    struct CryStringT* slottedFragmentTag;
    uint8_t _pad_7[0x10];
};




struct AlignmentSlotExclusivityGroup {
    uint8_t _pad_0[0x8];
    struct DynArray_AlignmentSlotBase* alignmentSlots;
    uint8_t _pad_1[0x30];
};




struct AreaAlignmentSlot {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    _Bool available;
    _Bool canPlayerUse;
    uint8_t _pad_3[0x6];
    struct DynArray_SInteractionPointParams* interactionPoints;
    uint8_t _pad_4[0x28];
    struct CryStringT* fragmentTag;
    uint8_t _pad_5[0x8];
    struct DynArray_Tag* optionalGameTags;
    uint8_t _pad_6[0x28];
    struct CryStringT* slottedFragmentTag;
    uint8_t _pad_7[0x10];
    struct CryStringT* helperName;
    uint8_t _pad_8[0x8];
    struct QuatT* relativeTransform;
    uint8_t _pad_9[0x50];
    _Bool entityRelativeRotation;
    _Bool entityRelativeTranslation;
    uint8_t _pad_10[0x2];
    enum ARDataType linkMode;
    enum ARDataType stance;
    _Bool useHandIK;
    _Bool useADIK;
    uint8_t _pad_11[0x2];
    struct SUsableViewParams* viewParams;
    uint8_t _pad_12[0x10];
    struct SUsableEnterTransitionParams* enterParams;
    uint8_t _pad_13[0x60];
    struct SUsableExitTransitionParams* exitParams;
    uint8_t _pad_14[0x70];
    struct SUsableIdleParams* usableIdleParams;
    uint8_t _pad_15[0x30];
    struct SUsableAttachFlagParams* additionalAttachmentFlags;
    uint8_t _pad_16[0x8];
    struct AreaAlignmentSlotTypeParams* areaTypeParams;
    uint8_t _pad_17[0x8];
    int32_t maxAmount;
    uint8_t _pad_18[0x4];
    struct SSharedInteractionParams* interactionOnEnter;
    uint8_t _pad_19[0x8];
};




struct BaseMissionPropertyValueOption {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* textId;
    float weighting;
    _Bool DEBUG_forceChooseThisOption;
    uint8_t _pad_1[0x3];
    struct DynArray_DependentMissionProperty* dependentProperties;
    uint8_t _pad_2[0x28];
};




struct BeaconsContracts {
    uint8_t _pad_0[0x8];
    struct DynArray_ContractTemplate* serviceBeacons;
    uint8_t _pad_1[0x28];
    struct ContractGenerator* serviceBeaconContractGenerator;
    uint8_t _pad_2[0x10];
};




struct BoidsComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_BoidsGroupComposition* boidsGroups;
    uint8_t _pad_1[0x28];
    float groupInfluenceRange;
    uint8_t _pad_2[0x4];
    struct DynArray_BoidState* boidStates;
    uint8_t _pad_3[0x28];
    float querySphereRadius;
    uint8_t _pad_4[0x4];
};




struct BoidsGroupComposition {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* boidsEntityClasses;
    uint8_t _pad_1[0x28];
    int32_t amountOfEntities;
    int32_t amountOfEntitiesVariation;
    float sizeVariation;
    uint8_t _pad_2[0x4];
    struct CryStringT* name;
    uint8_t _pad_3[0x8];
    _Bool spawnOnNavmesh;
    uint8_t _pad_4[0x7];
};




struct BountyParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    int32_t crimeStatThreshold;
    struct Jurisdiction* jurisdiction;
    uint8_t _pad_2[0x10];
    struct DynArray_MissionBrokerEntry* missionBrokerEntries;
    uint8_t _pad_3[0x28];
    struct DynArray_MissionBrokerEntry* escapedPrisonerMissions;
    uint8_t _pad_4[0x28];
    float bountyRewardIncreaseFactor;
    _Bool arrestCriminalOnBountyKill;
    uint8_t _pad_5[0x3];
    float minutesToBlockRepeatedPlayerBounty;
    float minutesToDelayEscapedPrisonerBounty;
    _Bool failMissionIfHunterKilledByBounty;
    uint8_t _pad_6[0x3];
    float mobiglasActiveTimeToPingLocation;
};




struct BuildingBlocks_ActorEntityWidget {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct SBuildingBlocks_EntityEffects* effects;
    uint8_t _pad_44[0x38];
    struct TintPaletteRef* tintPalette;
    uint8_t _pad_45[0x28];
    struct Deg3* contentOrientation;
    uint8_t _pad_46[0x18];
    struct Tag* geometryTag;
    uint8_t _pad_47[0x10];
    struct CryStringT* materialPath;
    uint8_t _pad_48[0x8];
    struct DynArray_CryStringT* loadoutNames;
    uint8_t _pad_49[0x28];
    enum ARDataType imageSource;
    float contentScaleLimitMin;
    float contentScaleLimitMax;
    float dirt;
    float wear;
    _Bool useCustomPivot;
    uint8_t _pad_50[0x3];
    struct CryStringT* idleAnimName;
    uint8_t _pad_51[0x8];
    struct CryStringT* facialAnimName;
    uint8_t _pad_52[0x8];
    struct CryStringT* DNAString;
    uint8_t _pad_53[0x8];
};




struct BuildingBlocks_Canvas {
    uint8_t _pad_0[0x8];
    struct Vec3* size;
    uint8_t _pad_1[0x10];
    struct BuildingBlocks_Style* style;
    uint8_t _pad_2[0x10];
    enum ARDataType collisionType;
    uint8_t _pad_3[0x1];
    uint16_t cacheAmount;
    uint8_t _pad_4[0x4];
    struct BuildingBlocks_PreviewSceneEntityRoot* entityPreviewScene;
    uint8_t _pad_5[0x8];
    struct BuildingBlocks_PreviewSceneAugmentedRealityRtt* arPreviewScene;
    uint8_t _pad_6[0x8];
    struct BuildingBlocks_PreviewSceneRttRoot* rttPreviewScene;
    uint8_t _pad_7[0x8];
    struct DynArray_BuildingBlocks_PreviewScreenBase* previewScenes;
    uint8_t _pad_8[0x28];
    struct DynArray_BuildingBlocks_StaticVariableBase* staticVariables;
    uint8_t _pad_9[0x28];
    struct DynArray_BuildingBlocks_WidgetBase* scene;
    uint8_t _pad_10[0x28];
    struct DynArray_BuildingBlocks_WidgetBase* library;
    uint8_t _pad_11[0x28];
    struct DynArray_BuildingBlocks_Node* operations;
    uint8_t _pad_12[0x28];
    struct Tag* defaultButtonDownSoundTag;
    uint8_t _pad_13[0x10];
    struct Tag* defaultRightButtonDownSoundTag;
    uint8_t _pad_14[0x10];
    struct Tag* defaultLeftClickSoundTag;
    uint8_t _pad_15[0x10];
    struct Tag* defaultRightClickSoundTag;
    uint8_t _pad_16[0x10];
    struct Tag* defaultLeftDoubleClickSoundTag;
    uint8_t _pad_17[0x10];
    struct Tag* defaultRollOverSoundTag;
    uint8_t _pad_18[0x10];
    struct Tag* defaultRollOffSoundTag;
    uint8_t _pad_19[0x10];
    struct Tag* defaultMovementStartSoundTag;
    uint8_t _pad_20[0x10];
    struct Tag* defaultMovementStopSoundTag;
    uint8_t _pad_21[0x10];
    enum ARDataType coordinateMethod;
    uint8_t _pad_22[0x4];
    struct DynArray_BuildingBlocks_StyleEntry* embeddedStyles;
    uint8_t _pad_23[0x28];
    struct BuildingBlocks_DefaultStyles* defaultStyles;
    uint8_t _pad_24[0x48];
    struct DynArray_BuildingBlocks_BrandStyles* brandStyles;
    uint8_t _pad_25[0x28];
    struct BuildingBlocks_WidgetBase* proxyRootNode;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_Canvas* overrideDefaultTooltipCanvas;
    uint8_t _pad_27[0x10];
    struct BuildingBlocks_Canvas* overrideDefaultCalloutCanvas;
    uint8_t _pad_28[0x50];
};




struct BuildingBlocks_ComponentBadgeListItem {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_52[0x18];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_53[0x18];
    struct BuildingBlocks_ComponentBadgeProperties* badgeProperties;
    uint8_t _pad_54[0x18];
    enum ARDataType alignment;
    uint8_t _pad_55[0x4];
};




struct BuildingBlocks_ComponentCheckboxButton {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_52[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_53[0x18];
    enum ARDataType alignment;
    uint8_t _pad_54[0x4];
};




struct BuildingBlocks_ComponentCheckboxListItem {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_52[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_53[0x18];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_54[0x18];
    enum ARDataType alignment;
    uint8_t _pad_55[0x4];
};




struct BuildingBlocks_ComponentCustomButton {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    enum ARDataType fillStyle;
    uint8_t _pad_51[0x4];
};




struct BuildingBlocks_ComponentCustomButtonSecondary {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    enum ARDataType fillStyle;
    uint8_t _pad_51[0x4];
};




struct BuildingBlocks_ComponentCustomDropDownMenu {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* expandedVariable;
    uint8_t _pad_51[0x8];
    struct CLocIdentifier* text;
    struct BuildingBlocks_WidgetBase* content;
    uint8_t _pad_52[0x8];
    enum ARDataType expand;
    uint8_t _pad_53[0x4];
};




struct BuildingBlocks_ComponentCustomListItem {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
};




struct BuildingBlocks_ComponentGeneralButton {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_52[0x18];
    enum ARDataType fillStyle;
    enum ARDataType iconPosition;
};




struct BuildingBlocks_ComponentGeneralButtonLarge {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_52[0x18];
};




struct BuildingBlocks_ComponentGeneralButtonSecondary {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_52[0x18];
    enum ARDataType fillStyle;
    enum ARDataType iconPosition;
};




struct BuildingBlocks_ComponentGeneralDropDownMenu {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CLocIdentifier* placeholderText;
    struct CryStringT* arrayVariable;
    uint8_t _pad_51[0x8];
    struct CryStringT* selectedVariable;
    uint8_t _pad_52[0x8];
    struct CryStringT* hoverVariable;
    uint8_t _pad_53[0x8];
    struct CryStringT* keyboardNavVariable;
    uint8_t _pad_54[0x8];
    struct CryStringT* gamepadNavVariable;
    uint8_t _pad_55[0x8];
    struct CryStringT* expandedVariable;
    uint8_t _pad_56[0x8];
    struct CryStringT* nameVariable;
    uint8_t _pad_57[0x8];
    struct Tag* closeDDMSoundTag;
    uint8_t _pad_58[0x10];
    struct Tag* openDDMSoundTag;
    uint8_t _pad_59[0x10];
    float minListWidth;
    float maxListHeight;
    _Bool collapseAlways;
    uint8_t _pad_60[0x3];
    enum ARDataType expand;
};




struct BuildingBlocks_ComponentGeneralListItem {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_52[0x18];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_53[0x18];
    enum ARDataType alignment;
    uint8_t _pad_54[0x4];
};




struct BuildingBlocks_ComponentLabelCaptionPair {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_52[0x18];
    enum ARDataType alignment;
    uint8_t _pad_53[0x4];
};




struct BuildingBlocks_ComponentLinearRangeSlider {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
    enum ARDataType direction;
    enum ARDataType meterState;
    uint16_t incrementProportion;
    uint8_t _pad_52[0x2];
    float minValue;
    float maxValue;
    uint8_t _pad_53[0x4];
};




struct BuildingBlocks_ComponentMinMaxRangeSlider {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* minVariableName;
    uint8_t _pad_51[0x8];
    struct CryStringT* maxVariableName;
    uint8_t _pad_52[0x8];
    enum ARDataType direction;
    enum ARDataType meterState;
    uint16_t incrementProportion;
    uint8_t _pad_53[0x6];
};




struct BuildingBlocks_ComponentNavigationTabList {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* arrayVariable;
    uint8_t _pad_51[0x8];
    struct CryStringT* selectedVariable;
    uint8_t _pad_52[0x8];
    struct CryStringT* hoverVariable;
    uint8_t _pad_53[0x8];
    struct CryStringT* keyboardNavVariable;
    uint8_t _pad_54[0x8];
    struct CryStringT* gamepadNavVariable;
    uint8_t _pad_55[0x8];
    struct CryStringT* nameVariable;
    uint8_t _pad_56[0x8];
    struct CryStringT* disabledVariable;
    uint8_t _pad_57[0x8];
    enum ARDataType direction;
    uint8_t _pad_58[0x4];
};




struct BuildingBlocks_ComponentNotification {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_52[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_53[0x18];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_54[0x18];
    enum ARDataType alignment;
    _Bool closeButton;
    uint8_t _pad_55[0x3];
};




struct BuildingBlocks_ComponentOptionTabList {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* arrayVariable;
    uint8_t _pad_51[0x8];
    struct CryStringT* selectedVariable;
    uint8_t _pad_52[0x8];
    struct CryStringT* hoverVariable;
    uint8_t _pad_53[0x8];
    struct CryStringT* keyboardNavVariable;
    uint8_t _pad_54[0x8];
    struct CryStringT* gamepadNavVariable;
    uint8_t _pad_55[0x8];
    struct CryStringT* nameVariable;
    uint8_t _pad_56[0x8];
    struct CryStringT* disabledVariable;
    uint8_t _pad_57[0x8];
    enum ARDataType direction;
    uint8_t _pad_58[0x4];
};




struct BuildingBlocks_ComponentRadialRangeSlider {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* targetVariableName;
    uint8_t _pad_51[0x8];
    struct CryStringT* currentVariableName;
    uint8_t _pad_52[0x8];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_53[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_54[0x18];
    float limiterAngle;
    float startAngleOffset;
    enum ARDataType meterState;
    uint16_t incrementProportion;
    uint8_t _pad_55[0x2];
};




struct BuildingBlocks_ComponentRadioButton {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_52[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_53[0x18];
    enum ARDataType alignment;
    uint8_t _pad_54[0x4];
};




struct BuildingBlocks_ComponentRadioListItem {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_52[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_53[0x18];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_54[0x18];
    enum ARDataType alignment;
    uint8_t _pad_55[0x4];
};




struct BuildingBlocks_ComponentScrollBar {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    enum ARDataType direction;
    uint8_t _pad_51[0x4];
    struct BuildingBlocks_WidgetBase* target;
    uint8_t _pad_52[0x8];
    struct CryStringT* scrollPositionURL;
    uint8_t _pad_53[0x8];
};




struct BuildingBlocks_ComponentToggleButton {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_52[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_53[0x18];
    enum ARDataType alignment;
    uint8_t _pad_54[0x4];
};




struct BuildingBlocks_ComponentToggleListItem {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_52[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_53[0x18];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_54[0x18];
    enum ARDataType alignment;
    uint8_t _pad_55[0x4];
};




struct BuildingBlocks_DisplayWidget {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
};




struct BuildingBlocks_EntityWidgetBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct SBuildingBlocks_EntityEffects* effects;
    uint8_t _pad_44[0x38];
    struct TintPaletteRef* tintPalette;
    uint8_t _pad_45[0x28];
    struct Deg3* contentOrientation;
    uint8_t _pad_46[0x18];
    struct Tag* geometryTag;
    uint8_t _pad_47[0x10];
    struct CryStringT* materialPath;
    uint8_t _pad_48[0x8];
    struct DynArray_CryStringT* loadoutNames;
    uint8_t _pad_49[0x28];
    enum ARDataType imageSource;
    float contentScaleLimitMin;
    float contentScaleLimitMax;
    float dirt;
    float wear;
    _Bool useCustomPivot;
    uint8_t _pad_50[0x3];
};




struct BuildingBlocks_GeneralEntityWidget {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct SBuildingBlocks_EntityEffects* effects;
    uint8_t _pad_44[0x38];
    struct TintPaletteRef* tintPalette;
    uint8_t _pad_45[0x28];
    struct Deg3* contentOrientation;
    uint8_t _pad_46[0x18];
    struct Tag* geometryTag;
    uint8_t _pad_47[0x10];
    struct CryStringT* materialPath;
    uint8_t _pad_48[0x8];
    struct DynArray_CryStringT* loadoutNames;
    uint8_t _pad_49[0x28];
    enum ARDataType imageSource;
    float contentScaleLimitMin;
    float contentScaleLimitMax;
    float dirt;
    float wear;
    _Bool useCustomPivot;
    uint8_t _pad_50[0x3];
    struct EntityClassDefinition* class_;
    uint8_t _pad_51[0x10];
    struct ItemPreview_Config* previewConfig;
    uint8_t _pad_52[0x10];
};




struct BuildingBlocks_GeometryEntityWidget {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct SBuildingBlocks_EntityEffects* effects;
    uint8_t _pad_44[0x38];
    struct TintPaletteRef* tintPalette;
    uint8_t _pad_45[0x28];
    struct Deg3* contentOrientation;
    uint8_t _pad_46[0x18];
    struct Tag* geometryTag;
    uint8_t _pad_47[0x10];
    struct CryStringT* materialPath;
    uint8_t _pad_48[0x8];
    struct DynArray_CryStringT* loadoutNames;
    uint8_t _pad_49[0x28];
    enum ARDataType imageSource;
    float contentScaleLimitMin;
    float contentScaleLimitMax;
    float dirt;
    float wear;
    _Bool useCustomPivot;
    uint8_t _pad_50[0x3];
    struct BuildingBlocks_GeomEntityAnimationParams* animationParams;
    uint8_t _pad_51[0x8];
    struct CryStringT* geometryPath;
    uint8_t _pad_52[0x8];
    int64_t viewDistRatio;
    int64_t lodCullDistMultiplier;
};




struct BuildingBlocks_ShapeWidget {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool doFill;
    _Bool doStroke;
    uint8_t _pad_44[0x2];
    float strokeWidth;
    struct BuildingBlocks_ColorBase* fillColor;
    uint8_t _pad_45[0x8];
    struct BuildingBlocks_ColorBase* strokeColor;
    uint8_t _pad_46[0x8];
    enum ARDataType strokeCapStyle;
    enum ARDataType strokeJointStyle;
    enum ARDataType strokeAlignment;
    uint8_t _pad_47[0x4];
};




struct BuildingBlocks_StyleSelectorConditionAllOfTag {
    uint8_t _pad_0[0x10];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_StyleSelectorConditionAnyOfTag {
    uint8_t _pad_0[0x10];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_TabListBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* arrayVariable;
    uint8_t _pad_51[0x8];
    struct CryStringT* selectedVariable;
    uint8_t _pad_52[0x8];
    struct CryStringT* hoverVariable;
    uint8_t _pad_53[0x8];
    struct CryStringT* keyboardNavVariable;
    uint8_t _pad_54[0x8];
    struct CryStringT* gamepadNavVariable;
    uint8_t _pad_55[0x8];
    struct CryStringT* nameVariable;
    uint8_t _pad_56[0x8];
    struct CryStringT* disabledVariable;
    uint8_t _pad_57[0x8];
    enum ARDataType direction;
    uint8_t _pad_58[0x4];
};




struct BuildingBlocks_TextureBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentTextureProperties* textureProperties;
    uint8_t _pad_51[0x10];
};




struct BuildingBlocks_TogglerBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
};




struct BuildingBlocks_VehicleEntityWidget {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct SBuildingBlocks_EntityEffects* effects;
    uint8_t _pad_44[0x38];
    struct TintPaletteRef* tintPalette;
    uint8_t _pad_45[0x28];
    struct Deg3* contentOrientation;
    uint8_t _pad_46[0x18];
    struct Tag* geometryTag;
    uint8_t _pad_47[0x10];
    struct CryStringT* materialPath;
    uint8_t _pad_48[0x8];
    struct DynArray_CryStringT* loadoutNames;
    uint8_t _pad_49[0x28];
    enum ARDataType imageSource;
    float contentScaleLimitMin;
    float contentScaleLimitMax;
    float dirt;
    float wear;
    _Bool useCustomPivot;
    uint8_t _pad_50[0x3];
    struct EntityClassDefinition* class_;
    uint8_t _pad_51[0x10];
    struct CryStringT* loadoutName;
    uint8_t _pad_52[0x8];
};




struct BuildingBlocks_WidgetBadge {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    enum ARDataType fillStyle;
    uint8_t _pad_52[0x4];
};




struct BuildingBlocks_WidgetBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
};




struct BuildingBlocks_WidgetBodyBackground {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentTextureProperties* textureProperties;
    uint8_t _pad_51[0x10];
    enum ARDataType backgroundType;
    uint8_t _pad_52[0x4];
};




struct BuildingBlocks_WidgetCanvas {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
};




struct BuildingBlocks_WidgetCard {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct BuildingBlocks_GhostPrimitiveSettings* ghostPrimitiveSettings;
    uint8_t _pad_44[0x10];
    float constantScale;
    uint8_t textureGroup;
    _Bool flipHorizontal;
    _Bool flipVertical;
    _Bool isFacingCamera;
    _Bool hasPerspective;
    uint8_t _pad_45[0x7];
};




struct BuildingBlocks_WidgetCheckboxControl {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
};




struct BuildingBlocks_WidgetCinematicLabel {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CLocIdentifier* title;
    struct CLocIdentifier* body;
    float constantScale;
    float connectingLineLength;
    _Bool faceCamera;
    _Bool hasBacking;
    _Bool isShowing;
    uint8_t _pad_51[0x1];
    int32_t animationStage;
    enum ARDataType bodyBackgroundColorStyle;
    enum ARDataType bodyTextColorStyle;
    enum ARDataType titleBackgroundColorStyle;
    enum ARDataType titleTextColorStyle;
};




struct BuildingBlocks_WidgetCircle {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool doFill;
    _Bool doStroke;
    uint8_t _pad_44[0x2];
    float strokeWidth;
    struct BuildingBlocks_ColorBase* fillColor;
    uint8_t _pad_45[0x8];
    struct BuildingBlocks_ColorBase* strokeColor;
    uint8_t _pad_46[0x8];
    enum ARDataType strokeCapStyle;
    enum ARDataType strokeJointStyle;
    enum ARDataType strokeAlignment;
    uint8_t _pad_47[0x4];
    uint8_t segments;
    uint8_t _pad_48[0x3];
    float gapAngle;
    _Bool parallelGaps;
    uint8_t _pad_49[0x3];
    float startAngle;
    float progress;
    float minProgressClamp;
    float maxProgressClamp;
    float minMeterClamp;
    float maxMeterClamp;
    enum ARDataType segmentProgressBehavior;
    enum ARDataType segmentEasing;
    _Bool flip;
    _Bool fillStroke;
    uint8_t _pad_50[0x1];
    float fillStrokeWidth;
    struct BuildingBlocks_WidgetBase* startAngleWidget;
    uint8_t _pad_51[0x8];
    struct BuildingBlocks_WidgetBase* progressAngleWidget;
    uint8_t _pad_52[0x8];
    _Bool rotateStartAngleWidget;
    _Bool pivotStartAngleWidget;
    _Bool radialUV;
    _Bool rotateProgressAngleWidget;
    _Bool pivotProgressAngleWidget;
    uint8_t _pad_53[0x3];
};




struct BuildingBlocks_WidgetClone {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct CryStringT* urlPostfix;
    uint8_t _pad_44[0x8];
    _Bool instantiated;
    uint8_t _pad_45[0x7];
    struct BuildingBlocks_WidgetBase* target;
    uint8_t _pad_46[0x8];
    struct DynArray_BuildingBlocks_FieldModifierPair* modifiers;
    uint8_t _pad_47[0x28];
};




struct BuildingBlocks_WidgetContainer {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ContainerModeBase* containerMode;
    uint8_t _pad_51[0x8];
};




struct BuildingBlocks_WidgetCustomShape {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool renderShape;
    _Bool flipHorizontal;
    _Bool flipVertical;
    uint8_t _pad_44[0x5];
    struct CryStringT* svgPath;
    uint8_t _pad_45[0x8];
    _Bool enableColorOverlay;
    uint8_t _pad_46[0x7];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_47[0x8];
    enum ARDataType scalingBehavior;
    float containPositionX;
    float containPositionY;
    _Bool enableNineSliceRect;
    uint8_t _pad_48[0x3];
    struct BuildingBlocks_TRBL* nineSliceRect;
    uint8_t _pad_49[0x18];
    float nineSliceScale;
    float strokeExtent;
    float playhead;
    uint8_t _pad_50[0x4];
};




struct BuildingBlocks_WidgetDustVolume {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    uint16_t particleCount;
    uint8_t _pad_44[0x2];
    float particleDiameter;
    float alphaFadeOffMultiplier;
    float zoomFactor;
    struct Vec3* translationOffset;
    uint8_t _pad_45[0x10];
    enum ARDataType movementRestriction;
    uint8_t _pad_46[0x4];
};




struct BuildingBlocks_WidgetEditBox {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_44[0x8];
    uint16_t characterLimit;
    _Bool isSingleLine;
    _Bool allowSpaces;
    _Bool confirmDeselects;
    _Bool hiddenText;
    uint8_t _pad_45[0x2];
    struct CLocIdentifier* helperString;
    struct BuildingBlocks_WidgetText* textBox;
    uint8_t _pad_46[0x8];
    _Bool bindingsAuthoritative;
    uint8_t _pad_47[0x7];
    struct BuildingBlocks_ColorBase* selectionBackgroundColor;
    uint8_t _pad_48[0x8];
    struct BuildingBlocks_ColorBase* blockCursorColor;
    uint8_t _pad_49[0x8];
    struct CryStringT* confirmTrigger;
    uint8_t _pad_50[0x8];
    struct Tag* activeSoundTag;
    uint8_t _pad_51[0x10];
    struct Tag* inactiveSoundTag;
    uint8_t _pad_52[0x10];
    struct Tag* keyEnterSoundTag;
    uint8_t _pad_53[0x10];
    struct Tag* keyEnterFailSoundTag;
    uint8_t _pad_54[0x10];
    struct Tag* keyDeleteSoundTag;
    uint8_t _pad_55[0x10];
};




struct BuildingBlocks_WidgetEnvironmentProbe {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    float probeRadius;
    float probeIntensity;
    struct CryStringT* specularImage;
    uint8_t _pad_44[0x8];
    struct BuildingBlocks_ColorBase* probeColor;
    uint8_t _pad_45[0x8];
};




struct BuildingBlocks_WidgetForegroundOverlay {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentTextureProperties* textureProperties;
    uint8_t _pad_51[0x10];
};




struct BuildingBlocks_WidgetHoloVolume {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct BuildingBlocks_PreviewSceneHoloVolume* holoVolumePreviewScene;
    uint8_t _pad_44[0x10];
    struct Tag* pickableTag;
    uint8_t _pad_45[0x10];
    enum ARDataType renderType;
    uint8_t _pad_46[0x3];
    enum ARDataType volumeType;
    float objectFadeDist;
    float coordinateSpace;
    _Bool enableSSDO;
    _Bool enableSubsurfaceScattering;
    _Bool enableTAA;
    uint8_t _pad_47[0x5];
};




struct BuildingBlocks_WidgetIcon {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentIconProperties* iconProperties;
    uint8_t _pad_51[0x18];
};




struct BuildingBlocks_WidgetImage {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct CryStringT* imagePath;
    uint8_t _pad_44[0x8];
    struct DynArray_BuildingBlocks_ColorPicker* colorPickers;
    uint8_t _pad_45[0x28];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_46[0x8];
    struct CryStringT* colorPickerHandleIndexURL;
    uint8_t _pad_47[0x8];
    enum ARDataType imageScalingMethod;
    int32_t colorSearchStepX;
    int32_t colorSearchStepY;
    float containPositionX;
    float containPositionY;
    _Bool flipH;
    _Bool flipV;
    uint8_t _pad_48[0xa];
};




struct BuildingBlocks_WidgetLight {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct BuildingBlocks_LightParams* light;
    uint8_t _pad_44[0x38];
    struct BuildingBlocks_TransformerBase* transformer;
    uint8_t _pad_45[0x8];
};




struct BuildingBlocks_WidgetLighting {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_WidgetLightSetting* primaryLightSettings;
    uint8_t _pad_51[0x10];
    struct BuildingBlocks_WidgetLightSetting* secondaryLightSettings;
    uint8_t _pad_52[0x10];
    struct BuildingBlocks_WidgetLightSetting* tertiaryLightSettings;
    uint8_t _pad_53[0x10];
};




struct BuildingBlocks_WidgetLine {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    float strokeWidth;
    uint8_t _pad_44[0x4];
    struct BuildingBlocks_ColorBase* strokeColor;
    uint8_t _pad_45[0x8];
    struct BuildingBlocks_DisplayWidget* targetWidget;
    uint8_t _pad_46[0x8];
    _Bool primitiveFacesCamera;
    _Bool primitiveFixedWidth;
    uint8_t _pad_47[0x6];
    struct BuildingBlocks_SteppedLine* steppedLine;
    uint8_t _pad_48[0x8];
};




struct BuildingBlocks_WidgetLineList {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct CryStringT* urlContainer;
    uint8_t _pad_44[0x8];
    struct CryStringT* urlPosX;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPosY;
    uint8_t _pad_46[0x8];
    struct CryStringT* urlCurveX;
    uint8_t _pad_47[0x8];
    struct CryStringT* urlCurveY;
    uint8_t _pad_48[0x8];
    float strokeWidth;
    uint8_t _pad_49[0x4];
    struct BuildingBlocks_ColorBase* strokeColor;
    uint8_t _pad_50[0x8];
};




struct BuildingBlocks_WidgetLinearProgressMeter {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    enum ARDataType direction;
    enum ARDataType meterState;
    float progress;
    _Bool reverseDirection;
    uint8_t _pad_51[0x3];
};




struct BuildingBlocks_WidgetList {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct CryStringT* arrayVariable;
    uint8_t _pad_44[0x8];
    struct CryStringT* selectedVariable;
    uint8_t _pad_45[0x8];
    struct CryStringT* hoverVariable;
    uint8_t _pad_46[0x8];
    struct CryStringT* keyboardNavVariable;
    uint8_t _pad_47[0x8];
    struct CryStringT* gamepadNavVariable;
    uint8_t _pad_48[0x8];
    struct BuildingBlocks_WidgetBase* target;
    uint8_t _pad_49[0x8];
    _Bool verticalKeyboardNavigation;
    _Bool horizontalKeyboardNavigation;
    _Bool useVirtualization;
    _Bool useCulling;
    uint16_t preCacheAmount;
    uint8_t _pad_50[0x2];
};




struct BuildingBlocks_WidgetLoadingIndicator {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
};




struct BuildingBlocks_WidgetManufacturerLogo {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    _Bool overrideColor;
    uint8_t _pad_51[0x7];
    struct BuildingBlocks_ColorStyle* colorStyle;
    uint8_t _pad_52[0x8];
};




struct BuildingBlocks_WidgetMovie {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct CryStringT* moviePath;
    uint8_t _pad_44[0x8];
    struct DynArray_CryStringT* m_movieList;
    uint8_t _pad_45[0x28];
    int64_t movieStartTimeMs;
    _Bool moviePlaying;
    _Bool movieLooping;
    _Bool movieSeeks;
    _Bool neverSeeks;
    uint8_t _pad_46[0x4];
    struct CryStringT* movieCompleteURL;
    uint8_t _pad_47[0x8];
    struct CryStringT* movieSkipOffsetURL;
    uint8_t _pad_48[0x8];
    struct CryStringT* currentMovieIndexURL;
    uint8_t _pad_49[0x8];
};




struct BuildingBlocks_WidgetPagination {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    _Bool showFirstPageButton;
    _Bool showPreviousPageButton;
    _Bool showNextPageButton;
    _Bool showLastPageButton;
    uint8_t _pad_51[0x4];
    struct CryStringT* pageNumberURL;
    uint8_t _pad_52[0x8];
    struct CryStringT* numPagesURL;
    uint8_t _pad_53[0x8];
};




struct BuildingBlocks_WidgetParticleEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct GlobalResourceParticle* effect;
    uint8_t _pad_44[0x10];
};




struct BuildingBlocks_WidgetPolygon {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool doFill;
    _Bool doStroke;
    uint8_t _pad_44[0x2];
    float strokeWidth;
    struct BuildingBlocks_ColorBase* fillColor;
    uint8_t _pad_45[0x8];
    struct BuildingBlocks_ColorBase* strokeColor;
    uint8_t _pad_46[0x8];
    enum ARDataType strokeCapStyle;
    enum ARDataType strokeJointStyle;
    enum ARDataType strokeAlignment;
    uint8_t _pad_47[0x4];
    float startAngle;
    uint8_t sides;
    uint8_t _pad_48[0x3];
    float cornerRatio;
    _Bool chamfer;
    uint8_t _pad_49[0x3];
};




struct BuildingBlocks_WidgetPolymorphic {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_44[0x8];
    struct DynArray_BuildingBlocks_IntegerWidgetPairDef* targetList;
    uint8_t _pad_45[0x28];
};




struct BuildingBlocks_WidgetRadialProgressMeter {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    struct BuildingBlocks_ComponentCaptionProperties* captionProperties;
    uint8_t _pad_52[0x18];
    enum ARDataType meterState;
    float progress;
};




struct BuildingBlocks_WidgetRadioControl {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
};




struct BuildingBlocks_WidgetRuntimeImage {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct Tag* pickableTag;
    uint8_t _pad_44[0x10];
    enum ARDataType imageSource;
    uint8_t _pad_45[0x4];
};




struct BuildingBlocks_WidgetSeparator {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    enum ARDataType direction;
    enum ARDataType style;
    enum ARDataType flip;
    uint8_t _pad_51[0x4];
};




struct BuildingBlocks_WidgetSlice {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct BuildingBlocks_SlicerBase* slicer;
    uint8_t _pad_44[0x8];
    struct CryStringT* materialName;
    uint8_t _pad_45[0x8];
    float constantScale;
    _Bool flipHorizontal;
    _Bool flipVertical;
    _Bool isFacingCamera;
    _Bool hasPerspective;
};




struct BuildingBlocks_WidgetSlider {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_44[0x8];
    float minimum;
    float maximum;
    enum ARDataType sliderMode;
    int32_t markerIncrementProportion;
    struct BuildingBlocks_WidgetBase* graphicDef;
    uint8_t _pad_45[0x8];
};




struct BuildingBlocks_WidgetStrip {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct BuildingBlocks_ColorBase* StartColor;
    uint8_t _pad_44[0x8];
    struct BuildingBlocks_ColorBase* EndColor;
    uint8_t _pad_45[0x8];
    struct CryStringT* materialPath;
    uint8_t _pad_46[0x8];
    struct CryStringT* segmentArrayVariable;
    uint8_t _pad_47[0x8];
    struct CryStringT* zoneTransformVariable;
    uint8_t _pad_48[0x8];
    struct CryStringT* offsetStartIndexVariable;
    uint8_t _pad_49[0x8];
    struct CryStringT* offsetEndIndexVariable;
    uint8_t _pad_50[0x8];
    struct CryStringT* customEndQuatVariable;
    uint8_t _pad_51[0x8];
    struct CryStringT* quatMemberName;
    uint8_t _pad_52[0x8];
    struct CryStringT* fadeMultiplierMemberName;
    uint8_t _pad_53[0x8];
    float minimumSectionGap;
    float stripWidth;
};




struct BuildingBlocks_WidgetText {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct BuildingBlocks_AutoTypeParams* autoTypeParams;
    uint8_t _pad_44[0x8];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_45[0x8];
    struct CLocIdentifier* locString;
    struct BuildingBlocks_FontStyle* fontStyle;
    uint8_t _pad_46[0x10];
    struct CryStringT* materialOverride;
    uint8_t _pad_47[0x8];
    enum ARDataType textAlignment;
    enum ARDataType verticalAlignment;
    _Bool wordWrap;
    uint8_t _pad_48[0x3];
    float lineSpacing;
    float letterSpacing;
    _Bool horizontalAutoSize;
    _Bool verticalAutoSize;
    _Bool renderAsHTML;
    _Bool ignoreTags;
    float fontSize;
    _Bool autoFontSize;
    uint8_t _pad_49[0x3];
    enum ARDataType squashAxis;
    _Bool bold;
    _Bool italic;
    _Bool underline;
    _Bool kerning;
    enum ARDataType caseModifier;
    uint8_t _pad_50[0x4];
};




struct BuildingBlocks_WidgetTextEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    enum ARDataType textAlignment;
    enum ARDataType verticalTextAlignment;
    struct CryStringT* variableName;
    uint8_t _pad_52[0x8];
    struct CryStringT* confirmTrigger;
    uint8_t _pad_53[0x8];
    uint16_t characterLimit;
    _Bool isSingleLine;
    _Bool allowSpaces;
    _Bool confirmDeselects;
    _Bool hiddenText;
    _Bool confirmEnabled;
    _Bool cancelEnabled;
    struct CLocIdentifier* helperString;
    struct CLocIdentifier* prefixString;
    _Bool bindingsAuthoritative;
    uint8_t _pad_54[0x7];
    struct BuildingBlocks_ColorBase* selectionBackgroundColor;
    uint8_t _pad_55[0x8];
    struct CryStringT* svgPath;
    uint8_t _pad_56[0x8];
    float iconHeight;
    float iconWidth;
};




struct BuildingBlocks_WidgetTextField {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct BuildingBlocks_ComponentLabelProperties* labelProperties;
    uint8_t _pad_51[0x18];
    enum ARDataType textAlignment;
    enum ARDataType verticalTextAlignment;
    struct BuildingBlocks_ColorStyle* colorStyleOverride;
    uint8_t _pad_52[0x8];
    _Bool fitToParent;
    uint8_t _pad_53[0x7];
};




struct BuildingBlocks_WidgetTickBox {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_44[0x8];
    struct BuildingBlocks_WidgetBase* tick;
    uint8_t _pad_45[0x8];
    enum ARDataType mode;
    uint8_t _pad_46[0x4];
};




struct BuildingBlocks_WidgetToggleControl {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    _Bool instantiated;
    uint8_t _pad_44[0x7];
    struct CryStringT* urlOptional;
    uint8_t _pad_45[0x8];
    struct CryStringT* urlPostfix;
    uint8_t _pad_46[0x8];
    struct BuildingBlocks_Style* stylesheetOverride;
    uint8_t _pad_47[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_48[0x10];
    enum ARDataType sizingMethod;
    uint8_t _pad_49[0x4];
    struct DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues;
    uint8_t _pad_50[0x28];
    struct CryStringT* variableName;
    uint8_t _pad_51[0x8];
};




struct BuildingBlocks_WidgetWindow {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_WidgetBase* parent;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewScene;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_PreviewScreenBase* previewSceneFlattened;
    uint8_t _pad_4[0x8];
    struct DynArray_Tag* styleTags;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_PrimitiveSettings* primitiveSettings;
    uint8_t _pad_6[0x48];
    struct Vec3* position;
    uint8_t _pad_7[0x10];
    struct Vec3* positionOffset;
    uint8_t _pad_8[0x10];
    struct Deg3* orientation;
    uint8_t _pad_9[0x18];
    struct Deg3* orientationOffset;
    uint8_t _pad_10[0x18];
    struct Vec3* scale;
    uint8_t _pad_11[0x10];
    struct BuildingBlocks_Size* sizing;
    uint8_t _pad_12[0x78];
    enum ARDataType autoScalingMethod;
    uint8_t _pad_13[0x4];
    struct BuildingBlocks_TRBL* padding;
    uint8_t _pad_14[0x18];
    struct BuildingBlocks_TRBL* margin;
    uint8_t _pad_15[0x18];
    struct Vec3* pivot;
    uint8_t _pad_16[0x10];
    struct Vec3* anchor;
    uint8_t _pad_17[0x10];
    struct BuildingBlocks_Background* background;
    uint8_t _pad_18[0x58];
    struct BuildingBlocks_Border* border;
    uint8_t _pad_19[0x100];
    struct BuildingBlocks_SegmentedFill* segmentedFill;
    uint8_t _pad_20[0x48];
    struct BuildingBlocks_SvgFill* svgFill;
    uint8_t _pad_21[0x68];
    struct BuildingBlocks_RendererPolicyBase* rendererPolicy;
    uint8_t _pad_22[0x8];
    struct BuildingBlocks_LayoutPolicyBase* layoutPolicy;
    uint8_t _pad_23[0x8];
    struct BuildingBlocks_LayoutPolicyItemBase* layoutPolicyItem;
    uint8_t _pad_24[0x8];
    struct BuildingBlocks_LayoutItemCommon* layoutItemCommon;
    uint8_t _pad_25[0x8];
    struct BuildingBlocks_DropTargetPolicyBase* dropTargetPolicy;
    uint8_t _pad_26[0x8];
    struct BuildingBlocks_DraggablePolicyBase* draggablePolicy;
    uint8_t _pad_27[0x8];
    struct BuildingBlocks_TooltipPolicy* tooltipPolicy;
    uint8_t _pad_28[0x8];
    struct BuildingBlocks_ContextMenuPolicy* contextMenuPolicy;
    uint8_t _pad_29[0x8];
    struct BuildingBlocks_GrabControlsPolicy* grabControlsPolicy;
    uint8_t _pad_30[0x8];
    struct BuildingBlocks_CalloutSettings* calloutSettings;
    uint8_t _pad_31[0x8];
    struct BuildingBlocks_ScrollPolicyBase* scrollPolicy;
    uint8_t _pad_32[0x8];
    struct BuildingBlocks_VirtualCursorPolicy* virtualCursorPolicy;
    uint8_t _pad_33[0x8];
    struct BuildingBlocks_Overflow* overflow;
    uint8_t _pad_34[0x18];
    struct BuildingBlocks_Interactions* interactions;
    uint8_t _pad_35[0x208];
    struct BuildingBlocks_RadialTransform* radialTransform;
    uint8_t _pad_36[0x10];
    struct BuildingBlocks_RadialTransformChild* radialTransformChild;
    uint8_t _pad_37[0x8];
    struct BuildingBlocks_Animation* animation;
    uint8_t _pad_38[0x40];
    enum ARDataType rendererType;
    float alpha;
    _Bool canBeVirtual;
    _Bool isActive;
    _Bool affectsLayout;
    _Bool affectsAutosize;
    _Bool inheritsAlpha;
    _Bool inheritsScale;
    _Bool inheritsRotation;
    _Bool inheritsTranslation;
    _Bool inheritsOverflow;
    _Bool enableHeldCursor;
    _Bool exportNode;
    uint8_t _pad_39[0x1];
    int16_t focusIndex;
    uint8_t layer;
    uint8_t _pad_40[0x1];
    struct DynArray_BuildingBlocks_StyleEntry* inlineStyles;
    uint8_t _pad_41[0x28];
    struct BuildingBlocks_AspectRatioLibrary* aspectRatioLibrary;
    uint8_t _pad_42[0x10];
    enum ARDataType hoverCursor;
    enum ARDataType heldCursor;
    uint8_t _pad_43[0x28];
    struct BuildingBlocks_PreviewSceneRttWindow* windowPreviewScene;
    uint8_t _pad_44[0x10];
    struct Tag* pickableTag;
    uint8_t _pad_45[0x10];
    struct BuildingBlocks_WindowCamera* camera;
    uint8_t _pad_46[0x8];
    enum ARDataType renderType;
    uint8_t _pad_47[0x3];
    float fadeTime;
    float coordinateSpace;
    _Bool isStatic;
    uint8_t _pad_48[0x3];
    struct GrabCameraControlParams* grabCameraControlParams;
    uint8_t _pad_49[0x10];
};




struct CargoManifest {
    uint8_t _pad_0[0x8];
    struct TagList* descriptionTags;
    uint8_t _pad_1[0x30];
    struct DynArray_Tag* tags;
    uint8_t _pad_2[0x28];
    struct BaseCargoFillCapacityValue* cargoFillCapacity;
    uint8_t _pad_3[0x8];
};




struct CheckEntitiesOnActorsLoadoutWithinAreaGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* requiredEntities;
    uint8_t _pad_1[0x28];
    struct SInteractionState* successState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* failState;
    uint8_t _pad_3[0x8];
};




struct CommunicationAutoMannequinTagsConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* actorIsPlayerFragmentTags;
    uint8_t _pad_1[0x8];
    struct CryStringT* targetIsPlayerFragmentTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* targetIsAllyFragmentTags;
    uint8_t _pad_3[0x8];
    struct CryStringT* targetIsNeutralFragmentTags;
    uint8_t _pad_4[0x8];
    struct CryStringT* targetIsEnemyFragmentTags;
    uint8_t _pad_5[0x8];
    struct CryStringT* subjectIsPlayerFragmentTags;
    uint8_t _pad_6[0x8];
    struct CryStringT* subjectIsAllyFragmentTags;
    uint8_t _pad_7[0x8];
    struct CryStringT* subjectIsNeutralFragmentTags;
    uint8_t _pad_8[0x8];
    struct CryStringT* subjectIsEnemyFragmentTags;
    uint8_t _pad_9[0x8];
    struct CryStringT* subjectIsDisguisedFragmentTags;
    uint8_t _pad_10[0x8];
    struct DynArray_CommunicationLocationAutoTags* locationsAutoTags;
    uint8_t _pad_11[0x28];
};




struct CommunicationChannel {
    uint8_t _pad_0[0x8];
    struct CommunicationChannelName* name;
    uint8_t _pad_1[0x10];
    struct CryStringT* audioEventForExternalSources;
    uint8_t _pad_2[0x8];
    float minSilence;
    float flushSilence;
    enum ARDataType type_;
    int32_t priority;
    float minSpeakerSilence;
    _Bool ignoreSpeakerSilence;
    uint8_t _pad_3[0x3];
    struct CommunicationSubtitleSettings* subtitles;
    uint8_t _pad_4[0x18];
    struct CommunicationAudioRTPC* audioRTPC;
    uint8_t _pad_5[0x8];
    struct DynArray_CommunicationChannel* subChannels;
    uint8_t _pad_6[0x28];
};




struct CommunicationChannelConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* ChannelConfigName;
    uint8_t _pad_1[0x8];
    struct DynArray_CommunicationChannel* Channels;
    uint8_t _pad_2[0x28];
};




struct CommunicationConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_CommunicationEntry* communications;
    uint8_t _pad_2[0x28];
    struct DynArray_CommunicationConfig* subConfigs;
    uint8_t _pad_3[0x28];
};




struct CommunicationLocationAutoTags {
    uint8_t _pad_0[0x8];
    struct StarMapObject* starMapObject;
    uint8_t _pad_1[0x10];
    struct CryStringT* actorInLocationMannequinTags;
    uint8_t _pad_2[0x8];
    struct DynArray_Tag* availableConversationTopics;
    uint8_t _pad_3[0x28];
    struct DynArray_Tag* conversationTopicsToExclude;
    uint8_t _pad_4[0x28];
};




struct ContactHighlightSharedParams {
    uint8_t _pad_0[0x8];
    float maxHighlightDistance;
    float minHighlightDistance;
    float maxHighlightOpacity;
    float minHighlightOpacity;
    float opacityFadeInDelay;
    float opacityFadeInDuration;
    float opacityFadeOutDuration;
    uint8_t _pad_1[0x4];
    struct DynArray_ContactHighlightStateParams* highlightParams;
    uint8_t _pad_2[0x28];
    struct DynArray_Tag* audioTriggerTags;
    uint8_t _pad_3[0x28];
};




struct ContractGiverSettings {
    uint8_t _pad_0[0x8];
    _Bool lawfulMission;
    uint8_t _pad_1[0x7];
    struct MissionGiver* missionGiverRecord;
    uint8_t _pad_2[0x10];
    struct MissionBrokerEntry* invitationMission;
    uint8_t _pad_3[0x10];
    struct DynArray_Tag* contractTags;
    uint8_t _pad_4[0x28];
    struct CryStringT* contractGiverFragmentTags;
    uint8_t _pad_5[0x8];
};




struct ContractTemplate {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct DevOwner* owner;
    uint8_t _pad_2[0x10];
    struct ContractClassBase* contractClass;
    uint8_t _pad_3[0x8];
    struct ContractDisplayInfo* contractDisplayInfo;
    uint8_t _pad_4[0x8];
    struct DynArray_BaseMissionModifier* modifiers;
    uint8_t _pad_5[0x28];
    struct DynArray_MissionProperty* contractProperties;
    uint8_t _pad_6[0x28];
    struct DynArray_ObjectiveToken* objectiveTokens;
    uint8_t _pad_7[0x28];
    struct PartialContractRewards* partialRewardPayout;
    uint8_t _pad_8[0x8];
    struct MissionFlow* missionFlow;
    uint8_t _pad_9[0x30];
};




struct ControlledSubstanceClass {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* commodities;
    uint8_t _pad_1[0x28];
    struct DynArray_ResourceType* resources;
    uint8_t _pad_2[0x28];
    float maxPossessionSCU;
    uint8_t _pad_3[0x4];
};




struct CrewData {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClassDefinition;
    uint8_t _pad_1[0x10];
    struct DynArray_Tag* outfitTags;
    uint8_t _pad_2[0x28];
    struct DynArray_Tag* tags;
    uint8_t _pad_3[0x28];
    struct TagsDNF* dnfTags;
    uint8_t _pad_4[0x60];
    struct UseChannelArchetype* archetype;
    uint8_t _pad_5[0x10];
};




struct CrewManifest {
    uint8_t _pad_0[0x8];
    struct TagList* descriptionTags;
    uint8_t _pad_1[0x30];
    struct DynArray_CrewData* crew;
    uint8_t _pad_2[0x28];
};




struct DataSetMatchCondition_PropertyTags {
    uint8_t _pad_0[0x8];
    struct MissionProperty* searchProperty;
    uint8_t _pad_1[0x8];
    enum ARDataType propertyTagType;
    uint8_t _pad_2[0x4];
    struct DynArray_Tag* tagFilters;
    uint8_t _pad_3[0x28];
    enum ARDataType targetTagType;
    _Bool searchForAnyTag;
    uint8_t _pad_4[0x3];
};




struct DataSetMatchCondition_SpecificItemsDef {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionItem* items;
    uint8_t _pad_1[0x28];
};




struct DataSetMatchCondition_SpecificOrganizationsDef {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionOrganization* organizations;
    uint8_t _pad_1[0x28];
};




struct DataSetMatchCondition_TagSearch {
    uint8_t _pad_0[0x8];
    struct DynArray_TagSearchTerm* tagSearch;
    uint8_t _pad_1[0x28];
    enum ARDataType tagType;
    uint8_t _pad_2[0x4];
};




struct DependentMissionProperty {
    uint8_t _pad_0[0x8];
    struct MissionProperty* property;
    uint8_t _pad_1[0x8];
    struct DynArray_BaseMissionPropertyValueOption* values;
    uint8_t _pad_2[0x28];
};




struct DialogueContext {
    uint8_t _pad_0[0x8];
    struct Character* speaker;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* localizedSubtitleText;
    struct CryStringT* tempText;
    uint8_t _pad_2[0x8];
    struct GlobalResourceAudio* audioTrigger;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* femaleAudioTrigger;
    uint8_t _pad_4[0x18];
    _Bool forceSubtitles;
    uint8_t _pad_5[0x7];
    struct DynArray_DialogueContent* contents;
    uint8_t _pad_6[0x28];
    struct DynArray_Tag* tags;
    uint8_t _pad_7[0x28];
};




struct DialogueContextBank {
    uint8_t _pad_0[0x8];
    struct DialogueRealm* realm;
    uint8_t _pad_1[0x10];
    struct Character* character;
    uint8_t _pad_2[0x10];
    struct GlobalResourceAudio* defaultTrigger;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* defaultFemaleTrigger;
    uint8_t _pad_4[0x18];
    struct DynArray_DialogueContext* contexts;
    uint8_t _pad_5[0x28];
};




struct DynArray_AIWave {
    struct AIWave** m_data;
};




struct DynArray_AIWaveMember {
    struct AIWaveMember** m_data;
};




struct DynArray_AggregateStateParams {
    struct AggregateStateParams** m_data;
};




struct DynArray_AlignmentSlotBase {
    struct AlignmentSlotBase** m_data;
};




struct DynArray_AlignmentSlotExclusivityGroup {
    struct AlignmentSlotExclusivityGroup** m_data;
};




struct DynArray_BaseMissionPropertyValueOption {
    struct BaseMissionPropertyValueOption** m_data;
};




struct DynArray_BoidsGroupComposition {
    struct BoidsGroupComposition** m_data;
};




struct DynArray_BuildingBlocks_Canvas {
    struct BuildingBlocks_Canvas** m_data;
};




struct DynArray_BuildingBlocks_WidgetBase {
    struct BuildingBlocks_WidgetBase** m_data;
};




struct DynArray_CargoManifest {
    struct CargoManifest** m_data;
};




struct DynArray_CommunicationChannel {
    struct CommunicationChannel** m_data;
};




struct DynArray_CommunicationConfig {
    struct CommunicationConfig** m_data;
};




struct DynArray_CommunicationLocationAutoTags {
    struct CommunicationLocationAutoTags** m_data;
};




struct DynArray_ContractTemplate {
    struct ContractTemplate** m_data;
};




struct DynArray_ControlledSubstanceClass {
    struct ControlledSubstanceClass** m_data;
};




struct DynArray_CrewData {
    struct CrewData** m_data;
};




struct DynArray_DependentMissionProperty {
    struct DependentMissionProperty** m_data;
};




struct DynArray_DialogueContext {
    struct DialogueContext** m_data;
};




struct DynArray_DynamicMissionLocation {
    struct DynamicMissionLocation** m_data;
};




struct DynArray_EntityClassDefinition {
    struct EntityClassDefinition** m_data;
};




struct DynArray_Faction {
    struct Faction** m_data;
};




struct DynArray_FactionReputation {
    struct FactionReputation** m_data;
};




struct DynArray_Grip {
    struct Grip** m_data;
};




struct DynArray_InstancedInteriorLocationParams {
    struct InstancedInteriorLocationParams** m_data;
};




struct DynArray_InteractionProhibitedItemParams {
    struct InteractionProhibitedItemParams** m_data;
};




struct DynArray_ItemResourceControlBlock {
    struct ItemResourceControlBlock** m_data;
};




struct DynArray_ItemResourceGroup {
    struct ItemResourceGroup** m_data;
};




struct DynArray_MinRequiredMissions {
    struct MinRequiredMissions** m_data;
};




struct DynArray_MissionBrokerEntry {
    struct MissionBrokerEntry** m_data;
};




struct DynArray_MissionItem {
    struct MissionItem** m_data;
};




struct DynArray_MissionLocationTags {
    struct MissionLocationTags** m_data;
};




struct DynArray_MissionOrganization {
    struct MissionOrganization** m_data;
};




struct DynArray_MissionPropertyValueOption_Float {
    struct MissionPropertyValueOption_Float** m_data;
};




struct DynArray_MissionPropertyValueOption_Integer {
    struct MissionPropertyValueOption_Integer** m_data;
};




struct DynArray_MissionPropertyValueOption_StringHash {
    struct MissionPropertyValueOption_StringHash** m_data;
};




struct DynArray_MissionPropertyValueOption_Tags {
    struct MissionPropertyValueOption_Tags** m_data;
};




struct DynArray_MusicLogicParameter {
    struct MusicLogicParameter** m_data;
};




struct DynArray_ObjectiveToken {
    struct ObjectiveToken** m_data;
};




struct DynArray_PlayerChoiceMenu {
    struct PlayerChoiceMenu** m_data;
};




struct DynArray_ProceduralLayoutNode_AlternateElementProperties {
    struct ProceduralLayoutNode_AlternateElementProperties** m_data;
};




struct DynArray_ProceduralLayout_SupplementaryElementTagsOptions {
    struct ProceduralLayout_SupplementaryElementTagsOptions** m_data;
};




struct DynArray_ProceduralLayout_TagFilter {
    struct ProceduralLayout_TagFilter** m_data;
};




struct DynArray_ResourceTypeGroup {
    struct ResourceTypeGroup** m_data;
};




struct DynArray_SCInteractionEffectsMapEntryParams {
    struct SCInteractionEffectsMapEntryParams** m_data;
};




struct DynArray_SCItemClothingMeshChunkParams {
    struct SCItemClothingMeshChunkParams** m_data;
};




struct DynArray_SCItemClothingPortVisibilityConditionParams {
    struct SCItemClothingPortVisibilityConditionParams** m_data;
};




struct DynArray_SCItemClothingVisibilityConditionParams {
    struct SCItemClothingVisibilityConditionParams** m_data;
};




struct DynArray_SCItemUIView_DashboardCanvasViewDef {
    struct SCItemUIView_DashboardCanvasViewDef** m_data;
};




struct DynArray_SCarryableSequenceRef {
    struct SCarryableSequenceRef** m_data;
};




struct DynArray_SCharacterCustomizerDNARegionParams {
    struct SCharacterCustomizerDNARegionParams** m_data;
};




struct DynArray_SCharacterCustomizerFeatureBase {
    struct SCharacterCustomizerFeatureBase** m_data;
};




struct DynArray_SCharacterCustomizerStep {
    struct SCharacterCustomizerStep** m_data;
};




struct DynArray_SCharacterCustomizerVertexParams {
    struct SCharacterCustomizerVertexParams** m_data;
};




struct DynArray_SCraftingDictionaryEntry {
    struct SCraftingDictionaryEntry** m_data;
};




struct DynArray_SCustomizableMaterialParams {
    struct SCustomizableMaterialParams** m_data;
};




struct DynArray_SEAFPSGunGameWeaponLists {
    struct SEAFPSGunGameWeaponLists** m_data;
};




struct DynArray_SEAFPSGunGameWeaponSetup {
    struct SEAFPSGunGameWeaponSetup** m_data;
};




struct DynArray_SEffectParamsNodeParticle {
    struct SEffectParamsNodeParticle** m_data;
};




struct DynArray_SEffectParamsNodeSound {
    struct SEffectParamsNodeSound** m_data;
};




struct DynArray_SEntityTraversingNodeBase {
    struct SEntityTraversingNodeBase** m_data;
};




struct DynArray_SGeometryNodeParams {
    struct SGeometryNodeParams** m_data;
};




struct DynArray_SHighlightBehaviorNode {
    struct SHighlightBehaviorNode** m_data;
};




struct DynArray_SInteractionPointParams {
    struct SInteractionPointParams** m_data;
};




struct DynArray_SInteractionState {
    struct SInteractionState** m_data;
};




struct DynArray_SInteractionStateType {
    struct SInteractionStateType** m_data;
};




struct DynArray_SItemPortDef {
    struct SItemPortDef** m_data;
};




struct DynArray_SItemPortDefHelperNode {
    struct SItemPortDefHelperNode** m_data;
};




struct DynArray_SItemPortDefaultItemDef {
    struct SItemPortDefaultItemDef** m_data;
};




struct DynArray_SItemPortLoadoutOutfitTagParams {
    struct SItemPortLoadoutOutfitTagParams** m_data;
};




struct DynArray_SMaterialNodeParams {
    struct SMaterialNodeParams** m_data;
};




struct DynArray_SMultiMissionCompleteReward {
    struct SMultiMissionCompleteReward** m_data;
};




struct DynArray_SOutfitHangerGroup {
    struct SOutfitHangerGroup** m_data;
};




struct DynArray_SSharedInteractionParams {
    struct SSharedInteractionParams** m_data;
};




struct DynArray_STriggerableDevicesTriggerParams {
    struct STriggerableDevicesTriggerParams** m_data;
};




struct DynArray_Skill {
    struct Skill** m_data;
};




struct DynArray_SkinInteractableTemplate {
    struct SkinInteractableTemplate** m_data;
};




struct DynArray_TQSInputBoolValue {
    struct TQSInputBoolValue** m_data;
};




struct DynArray_TQSInputDynamicVariableValue {
    struct TQSInputDynamicVariableValue** m_data;
};




struct DynArray_TQSInputFloatValue {
    struct TQSInputFloatValue** m_data;
};




struct DynArray_TQSInputIntValue {
    struct TQSInputIntValue** m_data;
};




struct DynArray_TQSInputStringValue {
    struct TQSInputStringValue** m_data;
};




struct DynArray_TQSInputTagValue {
    struct TQSInputTagValue** m_data;
};




struct DynArray_TQSWeightDynamicVariableValue {
    struct TQSWeightDynamicVariableValue** m_data;
};




struct DynArray_TQSWeightInputFloatValue {
    struct TQSWeightInputFloatValue** m_data;
};




struct DynArray_TQSWeightInputIntValue {
    struct TQSWeightInputIntValue** m_data;
};




struct DynArray_TQSWeightInputTagValue {
    struct TQSWeightInputTagValue** m_data;
};




struct DynArray_TQSWeightInputValue {
    struct TQSWeightInputValue** m_data;
};




struct DynArray_Tag {
    struct Tag** m_data;
};




struct DynArray_TagList {
    struct TagList** m_data;
};




struct DynArray_TagSearchTerm {
    struct TagSearchTerm** m_data;
};




struct DynArray_TagsDNFTerm {
    struct TagsDNFTerm** m_data;
};




struct DynArray_TintPalette {
    struct TintPalette** m_data;
};




struct DynArray_UIGraph_Group {
    struct UIGraph_Group** m_data;
};




struct DynArray_UsableAlignmentSlot {
    struct UsableAlignmentSlot** m_data;
};




struct DynArray_UsableSlottingSetup {
    struct UsableSlottingSetup** m_data;
};




struct DynArray_UsableUseChannelInstance {
    struct UsableUseChannelInstance** m_data;
};




struct DynArray_UsableUseSlot {
    struct UsableUseSlot** m_data;
};




struct DynArray_UserArrayElement {
    struct UserArrayElement** m_data;
};




struct DynArray_VehicleEditorGroupEquipData {
    struct VehicleEditorGroupEquipData** m_data;
};




struct DynArray_VehicleEditorItemOffsets {
    struct VehicleEditorItemOffsets** m_data;
};




struct DynArray_VisorLens_Region {
    struct VisorLens_Region** m_data;
};




struct DynArray_VisorLens_Widget {
    struct VisorLens_Widget** m_data;
};




struct DynArray_mobiGlasApp {
    struct mobiGlasApp** m_data;
};




struct DynamicMissionLocation {
    uint8_t _pad_0[0x8];
    struct DynArray_TagSearchTerm* locationTagSearch;
    uint8_t _pad_1[0x28];
    struct CryStringT* missionModule;
    uint8_t _pad_2[0x8];
    struct DynArray_Tag* locationResourceTags;
    uint8_t _pad_3[0x28];
    enum ARDataType resourcePriority;
    uint8_t _pad_4[0x4];
    struct DynArray_Tag* dynamicLocationTags;
    uint8_t _pad_5[0x28];
    int32_t maxActiveLocations;
    float spawnTimeMin;
    float spawnTimeMax;
    float activeTimeMin;
    float activeTimeMax;
    uint8_t _pad_6[0x4];
};




struct EntityClassDefinition {
    uint8_t _pad_0[0x8];
    struct CryStringT* Category;
    uint8_t _pad_1[0x8];
    struct CryStringT* Icon;
    uint8_t _pad_2[0x8];
    _Bool Invisible;
    _Bool BBoxSelection;
    uint8_t _pad_3[0x6];
    struct DynArray_Tag* tags;
    uint8_t _pad_4[0x28];
    struct SEntityDensityClass* entityDensityClass;
    uint8_t _pad_5[0x10];
    struct DynArray_DataForgeComponentParams* Components;
    uint8_t _pad_6[0x28];
    struct DynArray_EntityClassStaticDataParams* StaticEntityClassData;
    uint8_t _pad_7[0x28];
};




struct EntityComponentCharacterCustomizerParams {
    uint8_t _pad_0[0x18];
    struct EntityReferenceDef* cameraRigRoot;
    uint8_t _pad_1[0x10];
    struct SFaceHighlightingParams* playerHighlightingParams;
    uint8_t _pad_2[0x20];
    struct SFaceHighlightingParams* currentEditFaceHighlightingParams;
    uint8_t _pad_3[0x20];
    struct EntityReferenceDef* headLibraryTagPoint;
    uint8_t _pad_4[0x10];
    struct EntityReferenceDef* cameraParent;
    uint8_t _pad_5[0x10];
    struct EntityReferenceDef* zoomNavSpline;
    uint8_t _pad_6[0x10];
    float libraryDeselectDelayTime;
    int32_t libraryHeadCount;
    struct DynArray_SCharacterCustomizerDNARegionParams* customizerDNARegions;
    uint8_t _pad_7[0x28];
    struct DynArray_SCharacterCustomizerBodyTypeParams* bodyTypes;
    uint8_t _pad_8[0x28];
    struct EntityClassDefinition* blankSkinVariant;
    uint8_t _pad_9[0x10];
    struct SCharacterCustomizerControlParams* controlParams;
    uint8_t _pad_10[0x60];
    struct SCharacterCustomizerMaterialEditParams* materialEditingParams;
    uint8_t _pad_11[0x98];
    _Bool headLibraryRollOnTriggers;
    uint8_t _pad_12[0x7];
    struct DynArray_SCharacterCustomizerDNAHeadPool* dnaBlendingPools;
    uint8_t _pad_13[0x28];
    struct DynArray_SCharacterCustomizerDNAHeadPool* faceSculptingExclusionPools;
    uint8_t _pad_14[0x28];
    struct SCharacterCustomizerHeadLibraryParams* featureLibraryParams;
    uint8_t _pad_15[0x78];
    struct SCharacterCustomizerHeadLibraryParams* dnaHeadLibraryParams;
    uint8_t _pad_16[0x78];
    struct SCharacterCustomizerClippingVolumeParams* dnaClippingVolumeParams;
    uint8_t _pad_17[0x20];
    struct DynArray_SCharacterCustomizerVoiceParams* voiceOptions;
    uint8_t _pad_18[0x28];
    struct SCharacterCustomizerAllowedClasses* allowedClasses;
    uint8_t _pad_19[0x10];
    struct DynArray_CryStringT* featureItemTags;
    uint8_t _pad_20[0x28];
    _Bool serializeToNetwork;
    uint8_t _pad_21[0x3];
    float serializationTimeout;
    struct DynArray_SCharacterCustomizerLoadoutItemReplacementMapping* loadoutReplacements;
    uint8_t _pad_22[0x28];
    _Bool updatePlayerEntity;
    _Bool clearAllPlayerLoadout;
    uint8_t _pad_23[0x6];
    struct EntityReferenceDef* cameraEntity;
    uint8_t _pad_24[0x10];
    struct SCharacterCustomizerDialogueData* dialogueData;
    uint8_t _pad_25[0x10];
    struct DynArray_SCharacterCustomizerStep* flowSteps;
    uint8_t _pad_26[0x28];
    struct DynArray_SCustomizableMaterialParams* customizableMaterials;
    uint8_t _pad_27[0x28];
};




struct EntityComponentLegacyCrafterParams {
    uint8_t _pad_0[0x18];
    struct LegacyCraftingRecipeList_Base* recipeList;
    uint8_t _pad_1[0x8];
    struct SItemPortDef* screenPort;
    uint8_t _pad_2[0x8];
    struct DynArray_SItemPortDef* outputEntityPorts;
    uint8_t _pad_3[0x28];
    struct DynArray_LegacyCrafterContainerPort* containerPorts;
    uint8_t _pad_4[0x28];
    struct LegacyCrafterInteractions* itemInteractions;
    uint8_t _pad_5[0x8];
    struct LegacyCrafterInteractions* resourceInteractions;
    uint8_t _pad_6[0x8];
};




struct EntityComponentTriggerableDevicesParams {
    uint8_t _pad_0[0x18];
    struct DynArray_STriggerableDevicesTriggerParams* triggers;
    uint8_t _pad_1[0x28];
    struct DynArray_STriggerableDevicesTriggerParams* aiTriggers;
    uint8_t _pad_2[0x28];
    struct STriggerableDevicesBehaviorParams* deathBehavior;
    uint8_t _pad_3[0x8];
};




struct Faction {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    enum ARDataType defaultReaction;
    uint8_t _pad_1[0x4];
    struct DynArray_Faction* alliedFactions;
    uint8_t _pad_2[0x28];
    struct DynArray_Faction* enemyFactions;
    uint8_t _pad_3[0x28];
    struct DynArray_FriendlyFireReactionOverride* friendlyFireBehaviorOverrides;
    uint8_t _pad_4[0x28];
    enum ARDataType factionType;
    _Bool ableToArrest;
    _Bool policesLawfulTrespass;
    _Bool policesCriminality;
    _Bool noLegalRights;
    struct FactionReputation* factionReputationRef;
    uint8_t _pad_5[0x10];
};




struct FactionReputation {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    uint64_t GEID;
    struct CryStringT* logo;
    uint8_t _pad_2[0x8];
    _Bool hideInDelpihApp;
    _Bool isNPC;
    uint8_t _pad_3[0x6];
    struct SReputationContextUI* reputationContextPropertiesUI;
    uint8_t _pad_4[0x10];
    struct DynArray_FactionReputation* allies;
    uint8_t _pad_5[0x28];
    struct DynArray_FactionReputation* enemies;
    uint8_t _pad_6[0x28];
    struct RelationStandingParams* hostilityParams;
    uint8_t _pad_7[0x50];
    struct RelationStandingParams* alliedParams;
    uint8_t _pad_8[0x50];
    struct DynArray_SReputationContextBBPropertyParams* propertiesBB;
    uint8_t _pad_9[0x28];
    struct DynArray_SPerkReputationListParams* perkReputationRewardList;
    uint8_t _pad_10[0x28];
    struct DynArray_SandboxTriggerBaseDef* sandboxTriggers;
    uint8_t _pad_11[0x28];
};




struct FiringRangeParams {
    uint8_t _pad_0[0x18];
    struct SecurityClearanceConditions* authorizationCondition;
    uint8_t _pad_1[0x30];
    struct SInteractionState* authorizedState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* nonAuthorizedState;
    uint8_t _pad_3[0x8];
    struct SInteractionState* offState;
    uint8_t _pad_4[0x8];
    struct DynArray_FiringRangeWeaponItem* allowedWeapons;
    uint8_t _pad_5[0x28];
    struct DynArray_Tag* weaponTagBlackList;
    uint8_t _pad_6[0x28];
    struct EntityReferenceDef* armouryManagerEntity;
    uint8_t _pad_7[0x10];
    struct EntityReferenceDef* actionAreaEntity;
    uint8_t _pad_8[0x10];
    struct FiringRangeScenarioDef* targetPracticeScenario;
    uint8_t _pad_9[0x10];
    float targetPracticeFinishedTime;
    uint8_t _pad_10[0x4];
};




struct Grip {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
    struct SGrip* grip;
    uint8_t _pad_2[0xa8];
};




struct HarvestableTagListTagEditor {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
};




struct HintTriggerData {
    uint8_t _pad_0[0x8];
    struct HintUIData* Hint;
    uint8_t _pad_1[0x10];
    _Bool HintEntityComponentTrigger;
    _Bool ContinuousContextualHint;
    uint8_t _pad_2[0x2];
    enum ARDataType TriggerEvent;
    enum ARDataType UntriggerEvent;
    int32_t NumEventsToTrigger;
    _Bool TriggerInSCPersistentUniverse;
    _Bool TriggerInS42Default;
    _Bool TriggerInSCHanger;
    _Bool TriggerInEABattleRoyale;
    _Bool TriggerInEAFreeFlight;
    _Bool TriggerInEASquadronBattle;
    _Bool TriggerInEASwarm;
    _Bool TriggerInEAPirateSwarm;
    _Bool TriggerInEAClassicRace;
    _Bool TriggerInEAGravRace;
    _Bool TriggerInEAElimination;
    _Bool TriggerInEATeamElimination;
    _Bool TriggerInEAControl;
    _Bool TriggerInEATheatersOfWar;
    _Bool TriggerInEADuel;
    _Bool TriggerInEAFPSGunGame;
    _Bool TriggerInEAHorde;
    _Bool TriggerInEAExperimentalModes;
    _Bool TriggerInSCFrontend;
    _Bool TriggerInFloorDemo;
    enum ARDataType SuppressionEvent;
    _Bool MouseHint;
    _Bool KeyboardHint;
    _Bool GamepadHint;
    _Bool JoystickHint;
    _Bool HintAllowedOnFoot;
    _Bool HintAllowedOnGroundVehicles;
    _Bool HintAllowedOnSpaceships;
    _Bool HintIsDemoOnly;
    float TriggerTimer;
    float DisplayTimeOverride;
    int32_t MaxRepeats;
    float TimeToRepeat;
    _Bool InfiniteTriggers;
    uint8_t _pad_3[0x3];
    int32_t Priority;
    struct HintTriggerData* TriggerOnComplete;
    uint8_t _pad_4[0x10];
    _Bool TriggerInTutorial;
    uint8_t _pad_5[0x7];
    struct DynArray_DialogueContext* dialogueContexts;
    uint8_t _pad_6[0x28];
};




struct InstancedInteriorLocationMap {
    uint8_t _pad_0[0x8];
    float exitTimeBuffer;
    uint8_t _pad_1[0x4];
    struct DynArray_InstancedInteriorLocationParams* locationInteriors;
    uint8_t _pad_2[0x28];
};




struct InstancedInteriorLocationParams {
    uint8_t _pad_0[0x8];
    struct StarMapObject* location;
    uint8_t _pad_1[0x10];
    _Bool devOnly;
    uint8_t _pad_2[0x7];
    struct DynArray_EntityClassDefinition* defaultHangars;
    uint8_t _pad_3[0x28];
};




struct InstancedInteriorSizeList {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* hangars;
    uint8_t _pad_1[0x28];
};




struct InteractionConditionDraggedActorHasProhibitedItems {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct DynArray_InteractionProhibitedItemParams* prohibitedList;
    uint8_t _pad_2[0x28];
};




struct InteractionConditionHasProhibitedItems {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct DynArray_InteractionProhibitedItemParams* prohibitedList;
    uint8_t _pad_2[0x28];
    _Bool AIAlwaysPass;
    uint8_t _pad_3[0x7];
};




struct InteractionProhibitedItemParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPortTag;
    uint8_t _pad_1[0x8];
    struct CryStringT* itemPortName;
    uint8_t _pad_2[0x8];
    struct DynArray_Tag* tags;
    uint8_t _pad_3[0x28];
    struct DynArray_ARDataType* itemTypes;
    uint8_t _pad_4[0x28];
    struct DynArray_ARDataType* itemSubTypes;
    uint8_t _pad_5[0x28];
};




struct InventoryContainerManager {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* lootBoxes;
    uint8_t _pad_1[0x28];
    struct Vec3* spawnLootGrid;
    uint8_t _pad_2[0x10];
    struct DynArray_ARDataType* closedInventoryNonStorableItemTypes;
    uint8_t _pad_3[0x28];
    struct DynArray_ARDataType* closedInventoryNonStorableOutfitItemTypes;
    uint8_t _pad_4[0x28];
    struct DynArray_InventoryContainerItemTypeFilter* openInventoryNonStorableItemTypes;
    uint8_t _pad_5[0x28];
    struct DynArray_OpenInventoryOccupantItemTypeProperties* itemTypeOpenInventoryOccupantProperties;
    uint8_t _pad_6[0x28];
    struct CargoGridOccupantProperties* defaultOpenInventoryOccupantProperties;
    uint8_t _pad_7[0x60];
    float smallItemDropDist;
    float BigItemDropDist;
    float bigItemVolumeThresholdSCU;
    float dropItemMaxHeight;
    float dropItemSurfaceOffset;
    uint8_t _pad_8[0x4];
};




struct ItemRecoveryParams {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* itemRecoveryBlacklist;
    uint8_t _pad_1[0x28];
    struct DynArray_EntityClassDefinition* corpseClasses;
    uint8_t _pad_2[0x28];
    struct DynArray_ARDataType* allowedTypes;
    uint8_t _pad_3[0x28];
    struct DynArray_ARDataType* allowedSubTypes;
    uint8_t _pad_4[0x28];
};




struct ItemResourceComponentParams {
    uint8_t _pad_0[0x18];
    _Bool isResourceNetworked;
    _Bool isRelay;
    uint8_t _pad_1[0x6];
    struct RelayFilterParams* filterParams;
    uint8_t _pad_2[0x8];
    _Bool isConnectedToRoom;
    _Bool wirelessConnection;
    uint8_t _pad_3[0x6];
    struct DynArray_ItemResourceState* states;
    uint8_t _pad_4[0x28];
    struct DynArray_ItemResourceControlParameterBase* controlParameters;
    uint8_t _pad_5[0x28];
    struct DynArray_ItemResourceControlBlock* controlBlocks;
    uint8_t _pad_6[0x28];
    int32_t defaultPriority;
    uint8_t _pad_7[0x4];
    struct FunctionalityModifiers* functionalityModifiers;
    uint8_t _pad_8[0x8];
    struct ItemResourceNetworkPowerModifier* powerPlantOverride;
    uint8_t _pad_9[0x8];
};




struct ItemResourceControlBlock {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct ItemResourceState* startState;
    uint8_t _pad_2[0x8];
    struct DynArray_ItemResourceControlOutputBase* controlOutputs;
    uint8_t _pad_3[0x28];
    struct DynArray_ItemResourceControlConditionBase* controlConditions;
    uint8_t _pad_4[0x28];
    struct DynArray_SInteractionState* linkedInteractionStatesReceive;
    uint8_t _pad_5[0x28];
};




struct ItemResourceGroup {
    uint8_t _pad_0[0x8];
    struct DynArray_SItemPortDef* subPorts;
    uint8_t _pad_1[0x28];
    struct DynArray_ItemResourceGroup* subGroups;
    uint8_t _pad_2[0x28];
    struct CryStringT* groupName;
    uint8_t _pad_3[0x8];
    _Bool controlableSubs;
    uint8_t _pad_4[0x7];
};




struct JournalEntryDialogueLog {
    uint8_t _pad_0[0x8];
    struct DynArray_DialogueContext* Dialogue;
    uint8_t _pad_1[0x28];
    struct CLocIdentifier* Description;
};




struct JournalEntryMinRequiredMissionsText {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* BodyText;
    struct DynArray_MinRequiredMissions* minRequiredMissions;
    uint8_t _pad_1[0x28];
    struct CLocIdentifier* completedText;
    struct CLocIdentifier* allCompletedText;
    enum ARDataType allCompletedAwardTriggerBadge;
    uint8_t _pad_2[0x4];
};




struct JournalEntryMissionProgressText {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* BodyText;
    struct DynArray_MissionBrokerEntry* associatedMissions;
    uint8_t _pad_1[0x28];
    struct CLocIdentifier* completedText;
    struct CLocIdentifier* allCompletedText;
};




struct Jurisdiction {
    uint8_t _pad_0[0x8];
    struct CryStringT* subsumptionJurisdiction;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* name;
    struct CryStringT* logoPath;
    uint8_t _pad_2[0x8];
    struct Jurisdiction* parentJurisdiction;
    uint8_t _pad_3[0x10];
    _Bool respectsParentJurisdictionLaws;
    uint8_t _pad_4[0x7];
    struct DynArray_Infraction* infractions;
    uint8_t _pad_5[0x28];
    struct DynArray_InfractionSet* infractionSets;
    uint8_t _pad_6[0x28];
    struct JournalEntry* journalEntry;
    uint8_t _pad_7[0x10];
    float maxStolenGoodsPossessionSCU;
    uint8_t _pad_8[0x4];
    struct DynArray_EntityClassDefinition* prohibitedGoods;
    uint8_t _pad_9[0x28];
    struct DynArray_ResourceType* prohibitedResources;
    uint8_t _pad_10[0x28];
    struct DynArray_ControlledSubstanceClass* controlledSubstanceClasses;
    uint8_t _pad_11[0x28];
    int32_t baseFine;
    float earlyPaymentPeriod;
    _Bool isPrison;
    uint8_t _pad_12[0x7];
    struct DynArray_ImpoundingDefinition* impoundingDefinitions;
    uint8_t _pad_13[0x28];
};




struct KeypadInteractionParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SSharedInteractionParams* keyInteractions;
    uint8_t _pad_1[0x28];
    struct SSharedInteractionParams* enterCodeInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* clearCodeInteraction;
    uint8_t _pad_3[0x8];
};




struct MinRequiredMissions {
    uint8_t _pad_0[0x8];
    int32_t minRequiredCompletedMissions;
    uint8_t _pad_1[0x4];
    struct TagList* completionTags;
    uint8_t _pad_2[0x30];
    struct DynArray_MissionBrokerEntry* requiredMissions;
    uint8_t _pad_3[0x28];
    struct CLocIdentifier* journalEntryLabel;
};




struct MissionBroker {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionBrokerEntry* missions;
    uint8_t _pad_1[0x28];
    struct DynArray_DynamicMissionLocation* dynamicLocations;
    uint8_t _pad_2[0x28];
    struct DynArray_MissionLocationValidation* locationValidation;
    uint8_t _pad_3[0x28];
    struct Jurisdiction* defaultJurisdictionForPlayerCrimeStats;
    uint8_t _pad_4[0x10];
};




struct MissionBrokerEntry {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct DevOwner* owner;
    uint8_t _pad_2[0x10];
    struct CryStringT* missionModule;
    uint8_t _pad_3[0x8];
    struct CryStringT* playerFacingDebugName;
    uint8_t _pad_4[0x8];
    struct CLocIdentifier* title;
    struct CLocIdentifier* titleHUD;
    struct CLocIdentifier* description;
    struct CLocIdentifier* missionGiver;
    struct CLocIdentifier* commsChannelName;
    struct MissionType* type_;
    uint8_t _pad_5[0x10];
    struct DynArray_MissionBrokerEntry* associatedMissions;
    uint8_t _pad_6[0x28];
    int32_t missionDifficulty;
    uint8_t _pad_7[0x4];
    struct MissionLocality* localityAvailable;
    uint8_t _pad_8[0x10];
    struct StarMapObject* locationMissionAvailable;
    uint8_t _pad_9[0x10];
    struct DynArray_DateTimeSchedule* availableDateSchedule;
    uint8_t _pad_10[0x28];
    struct DynArray_MissionBrokerEntry* onlyAvailableIfAllMissionsNotAvailable;
    uint8_t _pad_11[0x28];
    struct MissionReward* missionReward;
    uint8_t _pad_12[0x28];
    struct PartialContractRewards* partialRewardPayout;
    uint8_t _pad_13[0x8];
    struct DynArray_SReputationAmountListParams* missionResultReputationRewards;
    uint8_t _pad_14[0x28];
    struct DynArray_JournalEntry* journalEntriesToAddOnComplete;
    uint8_t _pad_15[0x28];
    struct DynArray_JournalEntry* journalEntriesToRemoveOnComplete;
    uint8_t _pad_16[0x28];
    _Bool initiallyActive;
    _Bool notifyOnAvailable;
    _Bool preShowObjectives;
    _Bool showAsOffer;
    int32_t missionBuyInAmount;
    _Bool refundBuyInOnWithdraw;
    _Bool hasCompleteButton;
    _Bool onlyOwnerCanComplete;
    _Bool handlesAbandonRequest;
    _Bool missionModulePerPlayer;
    uint8_t _pad_17[0x3];
    int32_t maxInstances;
    int32_t maxPlayersPerInstance;
    int32_t maxInstancesPerPlayer;
    _Bool canBeShared;
    _Bool onceOnly;
    _Bool tutorial;
    uint8_t _pad_18[0x1];
    struct MissionDeadline* missionDeadline;
    uint8_t _pad_19[0x18];
    _Bool displayAlliedMarkers;
    _Bool availableInPrison;
    _Bool failIfSentToPrison;
    _Bool failIfBecameCriminal;
    _Bool failIfLeavePrison;
    uint8_t _pad_20[0x3];
    struct TagList* completionTags;
    uint8_t _pad_21[0x30];
    _Bool applyCompletionTagsOnFailed;
    _Bool applyCompletionTagsOnAbandoned;
    _Bool requestOnly;
    uint8_t _pad_22[0x1];
    float respawnTime;
    float respawnTimeVariation;
    _Bool instanceHasLifeTime;
    _Bool showLifeTimeInMobiGlas;
    uint8_t _pad_23[0x2];
    float instanceLifeTime;
    float instanceLifeTimeVariation;
    _Bool canReacceptAfterAbandoning;
    uint8_t _pad_24[0x3];
    float abandonedCooldownTime;
    float abandonedCooldownTimeVariation;
    _Bool canReacceptAfterFailing;
    _Bool hasPersonalCooldown;
    uint8_t _pad_25[0x2];
    float personalCooldownTime;
    float personalCooldownTimeVariation;
    _Bool moduleHandlesOwnShutdown;
    uint8_t _pad_26[0x7];
    struct MissionBrokerEntry* linkedMission;
    uint8_t _pad_27[0x10];
    struct MissionCompletePerkBaseDef* missionCompletePerk;
    uint8_t _pad_28[0x8];
    struct DynArray_BaseMissionModifier* modifiers;
    uint8_t _pad_29[0x28];
    _Bool lawfulMission;
    uint8_t _pad_30[0x7];
    struct MissionGiver* missionGiverRecord;
    uint8_t _pad_31[0x10];
    struct MissionBrokerEntry* invitationMission;
    uint8_t _pad_32[0x10];
    struct CryStringT* missionGiverFragmentTags;
    uint8_t _pad_33[0x8];
    struct DynArray_Tag* missionTags;
    uint8_t _pad_34[0x28];
    struct ReputationPrerequisites* reputationPrerequisites;
    uint8_t _pad_35[0x28];
    struct SReputationMissionRequirementsParams* reputationRequirements;
    uint8_t _pad_36[0x8];
    struct DynArray_MinRequiredMissions* minRequiredMissions;
    uint8_t _pad_37[0x28];
    struct DynArray_MissionBrokerEntry* requiredMissions;
    uint8_t _pad_38[0x28];
    struct DynArray_TagSearchTerm* requiredCompletedMissionTags;
    uint8_t _pad_39[0x28];
    struct DynArray_JournalEntry* requiredJournalEntries;
    uint8_t _pad_40[0x28];
    struct TagList* requiredAreaTags;
    uint8_t _pad_41[0x30];
    struct TagList* excludedAreaTags;
    uint8_t _pad_42[0x30];
    struct DynArray_MissionProperty* properties;
    uint8_t _pad_43[0x28];
    struct DynArray_ObjectiveToken* objectiveTokens;
    uint8_t _pad_44[0x28];
    struct MissionFlow* missionFlow;
    uint8_t _pad_45[0x38];
};




struct MissionItem {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
    struct MissionStringVariants* stringVariants;
    uint8_t _pad_2[0x30];
    float weighting;
    uint8_t _pad_3[0x4];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_4[0x10];
};




struct MissionLocationTags {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
};




struct MissionOrganization {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionLocationTags* organizationTags;
    uint8_t _pad_1[0x28];
    struct MissionStringVariants* stringVariants;
    uint8_t _pad_2[0x30];
    float weighting;
    uint8_t _pad_3[0x4];
    struct FactionReputation* factionReputation;
    uint8_t _pad_4[0x10];
};




struct MissionPropertyValueOption_Float {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* textId;
    float weighting;
    _Bool DEBUG_forceChooseThisOption;
    uint8_t _pad_1[0x3];
    struct DynArray_DependentMissionProperty* dependentProperties;
    uint8_t _pad_2[0x28];
    float value;
    float variation;
};




struct MissionPropertyValueOption_Integer {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* textId;
    float weighting;
    _Bool DEBUG_forceChooseThisOption;
    uint8_t _pad_1[0x3];
    struct DynArray_DependentMissionProperty* dependentProperties;
    uint8_t _pad_2[0x28];
    int32_t value;
    int32_t variation;
};




struct MissionPropertyValueOption_StringHash {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* textId;
    float weighting;
    _Bool DEBUG_forceChooseThisOption;
    uint8_t _pad_1[0x3];
    struct DynArray_DependentMissionProperty* dependentProperties;
    uint8_t _pad_2[0x28];
    struct CryStringT* value;
    uint8_t _pad_3[0x8];
};




struct MissionPropertyValueOption_Tags {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* textId;
    float weighting;
    _Bool DEBUG_forceChooseThisOption;
    uint8_t _pad_1[0x3];
    struct DynArray_DependentMissionProperty* dependentProperties;
    uint8_t _pad_2[0x28];
    struct TagList* tags;
    uint8_t _pad_3[0x30];
    struct TagList* negativeTags;
    uint8_t _pad_4[0x30];
};




struct MissionPropertyValue_Float {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionPropertyValueOption_Float* options;
    uint8_t _pad_1[0x28];
};




struct MissionPropertyValue_Integer {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionPropertyValueOption_Integer* options;
    uint8_t _pad_1[0x28];
};




struct MissionPropertyValue_Location {
    uint8_t _pad_0[0x8];
    int32_t minLocationsToFind;
    int32_t maxLocationsToFind;
    struct DynArray_BaseDataSetMatchCondition* matchConditions;
    uint8_t _pad_1[0x28];
    struct DynArray_Tag* resourceTags;
    uint8_t _pad_2[0x28];
    enum ARDataType resourcePriority;
    _Bool logErrorOnSearchFail;
    uint8_t _pad_3[0x3];
};




struct MissionPropertyValue_StringHash {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionPropertyValueOption_StringHash* options;
    uint8_t _pad_1[0x28];
};




struct MissionPropertyValue_Tags {
    uint8_t _pad_0[0x8];
    struct TagList* tags;
    uint8_t _pad_1[0x30];
    struct TagList* negativeTags;
    uint8_t _pad_2[0x30];
    struct DynArray_MissionPropertyValueOption_Tags* options;
    uint8_t _pad_3[0x28];
};




struct MusicLogicParameter {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float min;
    float max;
    float defaultValue;
    float decayRate;
    _Bool decayIsPercentage;
    uint8_t _pad_2[0x3];
    float scaleModifier;
    float shiftModifier;
    uint8_t _pad_3[0x4];
    struct CryStringT* rtpc;
    uint8_t _pad_4[0x8];
    _Bool rtpcIsGlobal;
    _Bool inverted;
    uint8_t _pad_5[0x6];
    struct DynArray_MusicLogicParameter* contributors;
    uint8_t _pad_6[0x28];
    struct RGB* debugColour;
    uint8_t _pad_7[0x18];
};




struct ObjectiveToken {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct CryStringT* variableName;
    uint8_t _pad_3[0x8];
    _Bool startsActive;
    uint8_t _pad_4[0x7];
    struct ObjectiveHandlerBase* objectiveHandler;
    uint8_t _pad_5[0x8];
    struct ObjectiveRewardContributionBase* rewardContribution;
    uint8_t _pad_6[0x8];
    struct ObjectiveDisplayInfo* displayInfo;
    uint8_t _pad_7[0x20];
    struct DynArray_CommsNotificationSelector* commsNotifications;
    uint8_t _pad_8[0x28];
    struct DynArray_ObjectivePropertyBase* properties;
    uint8_t _pad_9[0x28];
    struct DynArray_ObjectiveToken* childMissionPhases;
    uint8_t _pad_10[0x28];
};




struct OperatorSeatAlignmentSlot {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    _Bool available;
    _Bool canPlayerUse;
    uint8_t _pad_3[0x6];
    struct DynArray_SInteractionPointParams* interactionPoints;
    uint8_t _pad_4[0x28];
    struct CryStringT* fragmentTag;
    uint8_t _pad_5[0x8];
    struct DynArray_Tag* optionalGameTags;
    uint8_t _pad_6[0x28];
    struct CryStringT* slottedFragmentTag;
    uint8_t _pad_7[0x10];
};




struct PlayerChoiceMenu {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
    struct InnerThought_ColorParams* blockedSelectedColor;
    uint8_t _pad_2[0x10];
    struct InnerThought_ColorParams* blockedUnselectedColor;
    uint8_t _pad_3[0x10];
    struct DynArray_PlayerChoiceMenuOption* options;
    uint8_t _pad_4[0x28];
};




struct PlayerChoiceMenuType {
    uint8_t _pad_0[0x8];
    _Bool focusedConversation;
    uint8_t _pad_1[0x7];
    struct DynArray_PlayerChoiceMenu* menus;
    uint8_t _pad_2[0x28];
};




struct PlaylistRNGConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_MusicLogicParameter* parameters;
    uint8_t _pad_1[0x28];
    float maxDeviation;
    uint8_t _pad_2[0x4];
};




struct PointAlignmentSlot {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    _Bool available;
    _Bool canPlayerUse;
    uint8_t _pad_3[0x6];
    struct DynArray_SInteractionPointParams* interactionPoints;
    uint8_t _pad_4[0x28];
    struct CryStringT* fragmentTag;
    uint8_t _pad_5[0x8];
    struct DynArray_Tag* optionalGameTags;
    uint8_t _pad_6[0x28];
    struct CryStringT* slottedFragmentTag;
    uint8_t _pad_7[0x10];
    struct CryStringT* helperName;
    uint8_t _pad_8[0x8];
    struct QuatT* relativeTransform;
    uint8_t _pad_9[0x50];
    _Bool entityRelativeRotation;
    _Bool entityRelativeTranslation;
    uint8_t _pad_10[0x2];
    enum ARDataType linkMode;
    enum ARDataType stance;
    _Bool useHandIK;
    _Bool useADIK;
    uint8_t _pad_11[0x2];
    struct SUsableViewParams* viewParams;
    uint8_t _pad_12[0x10];
    struct SUsableEnterTransitionParams* enterParams;
    uint8_t _pad_13[0x60];
    struct SUsableExitTransitionParams* exitParams;
    uint8_t _pad_14[0x70];
    struct SUsableIdleParams* usableIdleParams;
    uint8_t _pad_15[0x30];
    struct SUsableAttachFlagParams* additionalAttachmentFlags;
    uint8_t _pad_16[0x8];
};




struct ProceduralLayoutGraph {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* ElementsLibraries;
    uint8_t _pad_1[0x28];
    struct DynArray_CryStringT* RoutingElementsLibraries;
    uint8_t _pad_2[0x28];
    struct DynArray_CryStringT* ConnectorsLibraries;
    uint8_t _pad_3[0x28];
    struct DynArray_CryStringT* CapsLibraries;
    uint8_t _pad_4[0x28];
    struct DynArray_CryStringT* SecondaryElementsLibraries;
    uint8_t _pad_5[0x28];
    struct DynArray_TagList* DefaultRoutingElementsTags;
    uint8_t _pad_6[0x28];
    struct DynArray_ProceduralLayout_TagFilter* GlobalTagFiltering;
    uint8_t _pad_7[0x28];
    struct DynArray_TagList* GlobalAddOnElementsTags;
    uint8_t _pad_8[0x28];
    float GlobalAddOnElementsGenerationChance;
    uint8_t _pad_9[0x4];
    struct CryStringT* TintPalettePath;
    uint8_t _pad_10[0x8];
    struct DynArray_ProceduralLayoutNode_Base* Nodes;
    uint8_t _pad_11[0x28];
};




struct ProceduralLayoutGraphNode_AlternateElement {
    uint8_t _pad_0[0x8];
    int32_t MinDistance;
    int32_t MaxDistance;
    struct DynArray_TagList* SpecificRoutingElementsTags;
    uint8_t _pad_1[0x28];
    float ChanceOfDoor;
    float ChanceOfGeneration;
    _Bool Mandatory;
    uint8_t _pad_2[0x7];
    struct CryStringT* LayerSuffix;
    uint8_t _pad_3[0x8];
    struct CryStringT* TintPalettePath;
    uint8_t _pad_4[0x8];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks;
    uint8_t _pad_5[0x28];
    struct DynArray_ProceduralLayoutNode_AlternateElementProperties* AlternateElements;
    uint8_t _pad_6[0x28];
};




struct ProceduralLayoutGraphNode_AlternateSubGraph {
    uint8_t _pad_0[0x8];
    int32_t MinDistance;
    int32_t MaxDistance;
    struct DynArray_TagList* SpecificRoutingElementsTags;
    uint8_t _pad_1[0x28];
    float ChanceOfDoor;
    float ChanceOfGeneration;
    _Bool Mandatory;
    uint8_t _pad_2[0x7];
    struct CryStringT* LayerSuffix;
    uint8_t _pad_3[0x8];
    struct CryStringT* TintPalettePath;
    uint8_t _pad_4[0x8];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks;
    uint8_t _pad_5[0x28];
    struct DynArray_ProceduralLayoutNode_AlternateSubGraphProperties* AlternateSubGraphs;
    uint8_t _pad_6[0x28];
};




struct ProceduralLayoutGraphNode_Base {
    uint8_t _pad_0[0x8];
    int32_t MinDistance;
    int32_t MaxDistance;
    struct DynArray_TagList* SpecificRoutingElementsTags;
    uint8_t _pad_1[0x28];
    float ChanceOfDoor;
    float ChanceOfGeneration;
    _Bool Mandatory;
    uint8_t _pad_2[0x7];
    struct CryStringT* LayerSuffix;
    uint8_t _pad_3[0x8];
    struct CryStringT* TintPalettePath;
    uint8_t _pad_4[0x8];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks;
    uint8_t _pad_5[0x28];
};




struct ProceduralLayoutGraphNode_CorridorElement {
    uint8_t _pad_0[0x8];
    int32_t MinDistance;
    int32_t MaxDistance;
    struct DynArray_TagList* SpecificRoutingElementsTags;
    uint8_t _pad_1[0x28];
    float ChanceOfDoor;
    float ChanceOfGeneration;
    _Bool Mandatory;
    uint8_t _pad_2[0x7];
    struct CryStringT* LayerSuffix;
    uint8_t _pad_3[0x8];
    struct CryStringT* TintPalettePath;
    uint8_t _pad_4[0x8];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks;
    uint8_t _pad_5[0x28];
    struct ProceduralLayoutNode_ElementProperties* ElementProperties;
    uint8_t _pad_6[0x60];
};




struct ProceduralLayoutGraphNode_Element {
    uint8_t _pad_0[0x8];
    int32_t MinDistance;
    int32_t MaxDistance;
    struct DynArray_TagList* SpecificRoutingElementsTags;
    uint8_t _pad_1[0x28];
    float ChanceOfDoor;
    float ChanceOfGeneration;
    _Bool Mandatory;
    uint8_t _pad_2[0x7];
    struct CryStringT* LayerSuffix;
    uint8_t _pad_3[0x8];
    struct CryStringT* TintPalettePath;
    uint8_t _pad_4[0x8];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks;
    uint8_t _pad_5[0x28];
    struct ProceduralLayoutNode_ElementProperties* ElementProperties;
    uint8_t _pad_6[0x60];
};




struct ProceduralLayoutGraphNode_MultiElement {
    uint8_t _pad_0[0x8];
    int32_t MinDistance;
    int32_t MaxDistance;
    struct DynArray_TagList* SpecificRoutingElementsTags;
    uint8_t _pad_1[0x28];
    float ChanceOfDoor;
    float ChanceOfGeneration;
    _Bool Mandatory;
    uint8_t _pad_2[0x7];
    struct CryStringT* LayerSuffix;
    uint8_t _pad_3[0x8];
    struct CryStringT* TintPalettePath;
    uint8_t _pad_4[0x8];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks;
    uint8_t _pad_5[0x28];
    struct ProceduralLayoutNode_ElementProperties* ElementProperties;
    uint8_t _pad_6[0x60];
    int32_t MinElementsToGenerate;
    int32_t MaxElementsToGenerate;
    _Bool GenerateUniqueElements;
    uint8_t _pad_7[0x7];
};




struct ProceduralLayoutGraphNode_VerticalElement {
    uint8_t _pad_0[0x8];
    int32_t MinDistance;
    int32_t MaxDistance;
    struct DynArray_TagList* SpecificRoutingElementsTags;
    uint8_t _pad_1[0x28];
    float ChanceOfDoor;
    float ChanceOfGeneration;
    _Bool Mandatory;
    uint8_t _pad_2[0x7];
    struct CryStringT* LayerSuffix;
    uint8_t _pad_3[0x8];
    struct CryStringT* TintPalettePath;
    uint8_t _pad_4[0x8];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks;
    uint8_t _pad_5[0x28];
    struct ProceduralLayoutNode_ElementProperties* ElementProperties;
    uint8_t _pad_6[0x60];
    enum ARDataType Direction;
    uint8_t _pad_7[0x4];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks_Floor1;
    uint8_t _pad_8[0x28];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks_Floor2;
    uint8_t _pad_9[0x28];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks_Floor3;
    uint8_t _pad_10[0x28];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks_Floor4;
    uint8_t _pad_11[0x28];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks_Floor5;
    uint8_t _pad_12[0x28];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks_Floor6;
    uint8_t _pad_13[0x28];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks_Floor7;
    uint8_t _pad_14[0x28];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks_Floor8;
    uint8_t _pad_15[0x28];
    struct DynArray_ProceduralLayoutNode_Base* outputLinks_Floor9;
    uint8_t _pad_16[0x28];
};




struct ProceduralLayoutNode_AlternateElementProperties {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* ElementTags;
    uint8_t _pad_1[0x28];
    struct DynArray_Tag* ElementThemes;
    uint8_t _pad_2[0x28];
    float Weight;
    uint8_t _pad_3[0x4];
};




struct ProceduralLayoutNode_ElementProperties {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* ElementTags;
    uint8_t _pad_1[0x28];
    struct DynArray_Tag* ElementThemes;
    uint8_t _pad_2[0x28];
};




struct ProceduralLayout_SupplementaryElementTagsOptions {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* SupplementaryElementTags;
    uint8_t _pad_1[0x28];
    int32_t MaxElementsToGenerate;
    uint8_t _pad_2[0x4];
};




struct ProceduralLayout_TagFilter {
    uint8_t _pad_0[0x8];
    struct DynArray_TagList* GraphNodeTagsToFilter;
    uint8_t _pad_1[0x28];
    enum ARDataType TagFilteringMode;
    uint8_t _pad_2[0x4];
    struct DynArray_ProceduralLayout_SupplementaryElementTagsOptions* SupplementaryElementTagsList;
    uint8_t _pad_3[0x28];
};




struct ResourceContainer {
    uint8_t _pad_0[0x18];
    struct SBaseCargoUnit* capacity;
    uint8_t _pad_1[0x8];
    float mass;
    _Bool immutable;
    uint8_t _pad_2[0x3];
    struct DynArray_ResourceType* inclusiveResources;
    uint8_t _pad_3[0x28];
    struct DynArray_ResourceType* exclusiveResources;
    uint8_t _pad_4[0x28];
    struct DynArray_ResourceTypeGroup* inclusiveGroups;
    uint8_t _pad_5[0x28];
    struct DynArray_ResourceTypeGroup* exclusiveGroups;
    uint8_t _pad_6[0x28];
    struct DynArray_ResourceContainerDefaultCompositionEntry* defaultComposition;
    uint8_t _pad_7[0x28];
    float defaultCompositionFillFactor;
    uint8_t _pad_8[0x4];
};




struct ResourceTypeDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_ResourceTypeGroup* groups;
    uint8_t _pad_1[0x28];
};




struct ResourceTypeGroup {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* description;
    struct CryStringT* defaultThumbnailPath;
    uint8_t _pad_1[0x8];
    struct DynArray_ResourceTypeGroup* groups;
    uint8_t _pad_2[0x28];
    struct DynArray_ResourceType* resources;
    uint8_t _pad_3[0x28];
};




struct RestrictedAreaComponentParams {
    uint8_t _pad_0[0x18];
    enum ARDataType state;
    float timeToDespawn;
    _Bool affectShips;
    _Bool affectGroundVehicles;
    _Bool affectActorsOnFoot;
    uint8_t _pad_1[0x5];
    struct DynArray_Tag* allowTagsOnLoad;
    uint8_t _pad_2[0x28];
};




struct RestrictedAreaKillParams {
    uint8_t _pad_0[0x8];
    _Bool killActorsOnFoot;
    _Bool killGroundVehicles;
    _Bool killShips;
    _Bool despawnObjects;
    float despawnDelay;
    struct DynArray_Tag* allowTagsOnLoad;
    uint8_t _pad_1[0x28];
};




struct S42MissionLogEntryParams {
    uint8_t _pad_0[0x8];
    struct MissionLogEntry* parentMission;
    uint8_t _pad_1[0x10];
    struct DynArray_EntityClassDefinition* playerShips;
    uint8_t _pad_2[0x28];
    struct DynArray_MissionObjective* missionObjectives;
    uint8_t _pad_3[0x28];
    struct MegaMap* megamapRecord;
    uint8_t _pad_4[0x10];
    struct CryStringT* imagePath;
    uint8_t _pad_5[0x8];
    int32_t maxCollectibles;
    int32_t maxOptionalObjectives;
    int32_t maxGalactapediaEntries;
    _Bool restingMission;
    uint8_t _pad_6[0x3];
    struct Tag* nextFrontendTagOnStarted;
    uint8_t _pad_7[0x10];
    struct Tag* nextFrontendTagOnCompleted;
    uint8_t _pad_8[0x10];
};




struct SActionAreaComponentParams {
    uint8_t _pad_0[0x18];
    _Bool triggerOnce;
    uint8_t _pad_1[0x7];
    struct DynArray_Tag* requiredTags;
    uint8_t _pad_2[0x28];
    struct DynArray_Tag* excludedTags;
    uint8_t _pad_3[0x28];
    struct DynArray_Tag* applyTagsToContainedEntities;
    uint8_t _pad_4[0x28];
    struct CryStringT* enterEvent;
    uint8_t _pad_5[0x8];
    struct CryStringT* exitEvent;
    uint8_t _pad_6[0x8];
    _Bool sendEventsToEntity;
    uint8_t _pad_7[0x3];
    enum ARDataType eventTriggerMask;
    struct DynArray_ActionAreaExtensionType* areaExtensions;
    uint8_t _pad_8[0x28];
    struct ActionAreaAudioFilter* audioFilter;
    uint8_t _pad_9[0x8];
};




struct SActorUsableParams {
    uint8_t _pad_0[0x18];
    struct UsableArchetype* archetype;
    uint8_t _pad_1[0x10];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
    struct DynArray_Camera* views;
    uint8_t _pad_3[0x28];
    struct DynArray_ARDataType* abilityLocks;
    uint8_t _pad_4[0x28];
    struct DynArray_UsableUseSlot* useSlots;
    uint8_t _pad_5[0x28];
    struct DynArray_AlignmentSlotBase* alignmentSlots;
    uint8_t _pad_6[0x28];
    struct DynArray_AlignmentSlotExclusivityGroup* exclusivityGroups;
    uint8_t _pad_7[0x28];
    struct DynArray_UsableSlottingSetup* slottingSetups;
    uint8_t _pad_8[0x28];
    struct DynArray_SSequencerUsableTask* usableSequencerTasks;
    uint8_t _pad_9[0x28];
    struct SSpecializedData* specializedData;
    uint8_t _pad_10[0x30];
    _Bool isExterior;
    _Bool allowDeadOrUnconscious;
    uint8_t _pad_11[0x6];
};




struct SCEntityDraggableParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* dragInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* dropInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* turnoverInteraction;
    uint8_t _pad_3[0x8];
    struct Grip* defaultGrip;
    uint8_t _pad_4[0x10];
    struct DynArray_Grip* overrideGrips;
    uint8_t _pad_5[0x28];
    float weightModifier;
    _Bool usingBespokeSetup;
    uint8_t _pad_6[0x3];
    struct DynArray_SSequencerEntityDragTaskParams* dragTasks;
    uint8_t _pad_7[0x28];
};




struct SCInteractionEffectsMapEntryParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* Interaction;
    uint8_t _pad_1[0x8];
    struct DynArray_Tag* enableEffectTags;
    uint8_t _pad_2[0x28];
    struct DynArray_Tag* disableEffectTags;
    uint8_t _pad_3[0x28];
};




struct SCItemClothingMeshChunkParams {
    uint8_t _pad_0[0x8];
    enum ARDataType MeshChunk;
    int32_t Layer;
    struct DynArray_int32_t* VisibleLayers;
    uint8_t _pad_1[0x28];
    struct DynArray_SCItemClothingVisibilityConditionParams* VisibilityConditions;
    uint8_t _pad_2[0x30];
};




struct SCItemClothingParams {
    uint8_t _pad_0[0x18];
    struct TagList* OverlayTags;
    uint8_t _pad_1[0x30];
    struct DynArray_SCItemClothingHiddenPartsParams* HiddenParts;
    uint8_t _pad_2[0x28];
    struct DynArray_SCItemClothingMeshChunkParams* Chunks;
    uint8_t _pad_3[0x28];
    struct ClothingType* Type;
    uint8_t _pad_4[0x8];
    struct FoleyDefinition* FoleyDef;
    uint8_t _pad_5[0x10];
    struct FoleyDefinition* FoleyDefNLPC;
    uint8_t _pad_6[0x10];
    struct FoleyFootstepDefinition* FootstepDef;
    uint8_t _pad_7[0x10];
    struct FoleyFootstepDefinition* FootstepDefNLPC;
    uint8_t _pad_8[0x10];
    struct CryStringT* DressFragmentTags;
    uint8_t _pad_9[0x8];
    struct SCItemClothingTemperatureResistanceParams* TemperatureResistance;
    uint8_t _pad_10[0x8];
    struct SCItemClothingRadiationResistanceParams* RadiationResistance;
    uint8_t _pad_11[0x8];
};




struct SCItemClothingPortVisibilityConditionParams {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* Ports;
    uint8_t _pad_1[0x28];
    struct DynArray_Tag* DisableTags;
    uint8_t _pad_2[0x28];
    struct DynArray_Tag* SkipTags;
    uint8_t _pad_3[0x28];
    struct DynArray_Tag* ActiveTags;
    uint8_t _pad_4[0x28];
};




struct SCItemClothingVisibilityConditionParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SCItemClothingPortVisibilityConditionParams* PortVisibility;
    uint8_t _pad_1[0x28];
};




struct SCItemConsumableParams {
    uint8_t _pad_0[0x18];
    struct SBaseCargoUnit* consumableVolume;
    uint8_t _pad_1[0x8];
    struct DynArray_ConsumableContent* defaultContents;
    uint8_t _pad_2[0x28];
    struct SSharedInteractionParams* consumeInteraction;
    uint8_t _pad_3[0x8];
    struct DynArray_SSharedInteractionParams* consumedInteractionLocks;
    uint8_t _pad_4[0x28];
    struct CryStringT* consumeFragmentId;
    uint8_t _pad_5[0x8];
    struct CryStringT* containerTypeTag;
    uint8_t _pad_6[0x8];
    struct CryStringT* lidTypeTag;
    uint8_t _pad_7[0x8];
    struct CryStringT* utensilTypeTag;
    uint8_t _pad_8[0x8];
    _Bool oneShotConsume;
    _Bool containerClosed;
    _Bool canBeReclosed;
    _Bool discardWhenConsumed;
    _Bool isPropAnimated;
    uint8_t _pad_9[0x3];
    struct CryStringT* fillTargetHelper;
    uint8_t _pad_10[0x8];
    _Bool isTwoHandedConsume;
    _Bool canConsumeInProne;
    _Bool canSkipConsumeAnimLoop;
    uint8_t _pad_11[0x5];
    struct DynArray_CryStringT* chunkNames;
    uint8_t _pad_12[0x28];
    struct DynArray_ConsumableHelpers* helpersMap;
    uint8_t _pad_13[0x28];
    struct ConsumableAttachment* lidAttachment;
    uint8_t _pad_14[0x8];
    struct ConsumableAttachment* utensilAttachment;
    uint8_t _pad_15[0x8];
    struct ConsumableFoodAttachment* foodAttachment;
    uint8_t _pad_16[0x8];
    struct AudioSwitch* consumptionAudioSwitch;
    uint8_t _pad_17[0x30];
};




struct SCItemInteractionEffectsMapParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SCInteractionEffectsMapEntryParams* Entries;
    uint8_t _pad_1[0x28];
};




struct SCItemLensDisplayParams {
    uint8_t _pad_0[0x18];
    float minimapAspectRatioOnLens;
    float minimapAspectRatioOnVisor;
    _Bool inheritVehicleStyle;
    _Bool inheritHelmetStyle;
    _Bool animateHandover;
    uint8_t _pad_1[0x5];
    struct SCLensAnimationParams* animationParams;
    uint8_t _pad_2[0x30];
    struct BuildingBlocks_Style* defaultStyle;
    uint8_t _pad_3[0x10];
    struct BuildingBlocks_Style* defaultVisorStyle;
    uint8_t _pad_4[0x10];
    struct DynArray_Tag* minimalModeTags;
    uint8_t _pad_5[0x28];
    struct DynArray_Tag* displayModeTags;
    uint8_t _pad_6[0x28];
};




struct SCItemPurchasableParams {
    uint8_t _pad_0[0x18];
    struct PurchasableDisplayBase* Display;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* displayType;
    struct CryStringT* displayThumbnail;
    uint8_t _pad_2[0x8];
    _Bool allowTryOn;
    _Bool allowQuickBuy;
    uint8_t _pad_3[0x6];
    struct CLocIdentifier* tryOnInteractionText;
    struct CryStringT* defaultAttachToPortName;
    uint8_t _pad_4[0x8];
    struct InteractionPointTemplate* interactionPointTemplate;
    uint8_t _pad_5[0x10];
    struct DynArray_DisabledLoadoutInteraction* disabledLoadoutInteractions;
    uint8_t _pad_6[0x28];
    struct SCItemTutorialParams* tutorialParams;
    uint8_t _pad_7[0x8];
    struct DynArray_SInteractionPointParams* interactionPoints;
    uint8_t _pad_8[0x28];
};




struct SCItemUIView_DashboardCanvasDef {
    uint8_t _pad_0[0x8];
    struct DynArray_SCItemUIView_DashboardCanvasViewDef* views;
    uint8_t _pad_1[0x28];
};




struct SCItemUIView_DashboardCanvasViewDef {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_Canvas* screens;
    uint8_t _pad_1[0x28];
};




struct SCLoadingPlatformEffectParams {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* raisingLoadingPlatformTrigger;
    uint8_t _pad_1[0x28];
    struct DynArray_Tag* openingLoadingGateTrigger;
    uint8_t _pad_2[0x28];
    struct DynArray_Tag* openingFrontGateTrigger;
    uint8_t _pad_3[0x28];
    struct DynArray_Tag* loweringLoadingPlatformTrigger;
    uint8_t _pad_4[0x28];
    struct DynArray_Tag* closingLoadingGateTrigger;
    uint8_t _pad_5[0x28];
    struct DynArray_Tag* closingFrontGateTrigger;
    uint8_t _pad_6[0x28];
};




struct SCarryableSequenceRef {
    uint8_t _pad_0[0x8];
    enum ARDataType sequenceAction;
    uint8_t _pad_1[0x4];
    struct DynArray_Tag* tags;
    uint8_t _pad_2[0x28];
    struct SSequencerDefSequenceParams* carryableSequence;
    uint8_t _pad_3[0x8];
};




struct SCharacterCustomizerAllowedClasses {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* classes;
    uint8_t _pad_1[0x28];
};




struct SCharacterCustomizerDNARegionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    _Bool visible;
    uint8_t _pad_2[0x7];
    enum ARDataType symmetryRegion;
    uint8_t _pad_3[0x4];
    struct DynArray_SCharacterCustomizerVertexParams* shapingVertices;
    uint8_t _pad_4[0x28];
    float shapingUIWeight;
    uint8_t _pad_5[0x4];
};




struct SCharacterCustomizerFeatureBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct CryStringT* idString;
    uint8_t _pad_2[0x8];
    struct DynArray_SCharacterCustomizerFeatureBase* subFeatures;
    uint8_t _pad_3[0x28];
    struct CryStringT* iconPath;
    uint8_t _pad_4[0x8];
    struct SCharacterCustomizerRandomizationParams* randomizationParams;
    uint8_t _pad_5[0x8];
    struct SCharacterValidationParams* validationParams;
    uint8_t _pad_6[0x8];
    enum ARDataType featureType;
    uint8_t _pad_7[0x4];
    struct SCustomizableMaterialParams* materialParams;
    uint8_t _pad_8[0x8];
    _Bool precacheSkinMaterials;
    _Bool supportsSubFeatureSelection;
    uint8_t _pad_9[0x6];
};




struct SCharacterCustomizerFeatureBodyTypeSelect {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct CryStringT* idString;
    uint8_t _pad_2[0x8];
    struct DynArray_SCharacterCustomizerFeatureBase* subFeatures;
    uint8_t _pad_3[0x28];
    struct CryStringT* iconPath;
    uint8_t _pad_4[0x8];
    struct SCharacterCustomizerRandomizationParams* randomizationParams;
    uint8_t _pad_5[0x8];
    struct SCharacterValidationParams* validationParams;
    uint8_t _pad_6[0x8];
    enum ARDataType featureType;
    uint8_t _pad_7[0x4];
    struct SCustomizableMaterialParams* materialParams;
    uint8_t _pad_8[0x8];
    _Bool precacheSkinMaterials;
    _Bool supportsSubFeatureSelection;
    uint8_t _pad_9[0x6];
};




struct SCharacterCustomizerFeatureDNA {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct CryStringT* idString;
    uint8_t _pad_2[0x8];
    struct DynArray_SCharacterCustomizerFeatureBase* subFeatures;
    uint8_t _pad_3[0x28];
    struct CryStringT* iconPath;
    uint8_t _pad_4[0x8];
    struct SCharacterCustomizerRandomizationParams* randomizationParams;
    uint8_t _pad_5[0x8];
    struct SCharacterValidationParams* validationParams;
    uint8_t _pad_6[0x8];
    enum ARDataType featureType;
    uint8_t _pad_7[0x4];
    struct SCustomizableMaterialParams* materialParams;
    uint8_t _pad_8[0x8];
    _Bool precacheSkinMaterials;
    _Bool supportsSubFeatureSelection;
    uint8_t _pad_9[0x6];
    enum ARDataType editType;
    uint8_t _pad_10[0x4];
};




struct SCharacterCustomizerFeatureItemEquip {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct CryStringT* idString;
    uint8_t _pad_2[0x8];
    struct DynArray_SCharacterCustomizerFeatureBase* subFeatures;
    uint8_t _pad_3[0x28];
    struct CryStringT* iconPath;
    uint8_t _pad_4[0x8];
    struct SCharacterCustomizerRandomizationParams* randomizationParams;
    uint8_t _pad_5[0x8];
    struct SCharacterValidationParams* validationParams;
    uint8_t _pad_6[0x8];
    enum ARDataType featureType;
    uint8_t _pad_7[0x4];
    struct SCustomizableMaterialParams* materialParams;
    uint8_t _pad_8[0x8];
    _Bool precacheSkinMaterials;
    _Bool supportsSubFeatureSelection;
    uint8_t _pad_9[0x6];
    struct SCharacterCustomizerClippingVolumeParams* clippingVolumeParams;
    uint8_t _pad_10[0x20];
    struct SCharacterCustomizerClippingVolumeParams* advancedModeClippingVolumeParams;
    uint8_t _pad_11[0x20];
    _Bool addEmptyEntry;
    uint8_t _pad_12[0x7];
    struct Vec3* featureLibOffset;
    uint8_t _pad_13[0x10];
    struct Vec3* advancedModeLibOffset;
    uint8_t _pad_14[0x10];
    float featureLibScrollTrim;
    float advancedModeFeatureLibScrollTrim;
    enum ARDataType itemSelectMode;
    uint8_t _pad_15[0x4];
    enum ARDataType itemType;
    uint8_t _pad_16[0x4];
    struct CryStringT* requiredPortTag;
    uint8_t _pad_17[0x8];
    struct CryStringT* requiredTags;
    uint8_t _pad_18[0x8];
};




struct SCharacterCustomizerFeatureShaderEdit {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct CryStringT* idString;
    uint8_t _pad_2[0x8];
    struct DynArray_SCharacterCustomizerFeatureBase* subFeatures;
    uint8_t _pad_3[0x28];
    struct CryStringT* iconPath;
    uint8_t _pad_4[0x8];
    struct SCharacterCustomizerRandomizationParams* randomizationParams;
    uint8_t _pad_5[0x8];
    struct SCharacterValidationParams* validationParams;
    uint8_t _pad_6[0x8];
    enum ARDataType featureType;
    uint8_t _pad_7[0x4];
    struct SCustomizableMaterialParams* materialParams;
    uint8_t _pad_8[0x8];
    _Bool precacheSkinMaterials;
    _Bool supportsSubFeatureSelection;
    uint8_t _pad_9[0x6];
    struct DynArray_int32_t* subMaterialsToEdit;
    uint8_t _pad_10[0x28];
};




struct SCharacterCustomizerFeatureTextureSelect {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct CryStringT* idString;
    uint8_t _pad_2[0x8];
    struct DynArray_SCharacterCustomizerFeatureBase* subFeatures;
    uint8_t _pad_3[0x28];
    struct CryStringT* iconPath;
    uint8_t _pad_4[0x8];
    struct SCharacterCustomizerRandomizationParams* randomizationParams;
    uint8_t _pad_5[0x8];
    struct SCharacterValidationParams* validationParams;
    uint8_t _pad_6[0x8];
    enum ARDataType featureType;
    uint8_t _pad_7[0x4];
    struct SCustomizableMaterialParams* materialParams;
    uint8_t _pad_8[0x8];
    _Bool precacheSkinMaterials;
    _Bool supportsSubFeatureSelection;
    uint8_t _pad_9[0x6];
    struct SCharacterCustomizerClippingVolumeParams* clippingVolumeParams;
    uint8_t _pad_10[0x20];
    struct SCharacterCustomizerClippingVolumeParams* advancedModeClippingVolumeParams;
    uint8_t _pad_11[0x20];
    _Bool addEmptyEntry;
    uint8_t _pad_12[0x7];
    struct Vec3* featureLibOffset;
    uint8_t _pad_13[0x10];
    struct Vec3* advancedModeLibOffset;
    uint8_t _pad_14[0x10];
    float featureLibScrollTrim;
    float advancedModeFeatureLibScrollTrim;
    enum ARDataType itemSelectMode;
    uint8_t _pad_15[0x4];
    enum ARDataType slot;
    uint8_t _pad_16[0x4];
    struct DynArray_int32_t* subMaterialsToEdit;
    uint8_t _pad_17[0x28];
    struct SCharacterCustomizerTextureList* textures;
    uint8_t _pad_18[0x30];
};




struct SCharacterCustomizerItemSelect {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct CryStringT* idString;
    uint8_t _pad_2[0x8];
    struct DynArray_SCharacterCustomizerFeatureBase* subFeatures;
    uint8_t _pad_3[0x28];
    struct CryStringT* iconPath;
    uint8_t _pad_4[0x8];
    struct SCharacterCustomizerRandomizationParams* randomizationParams;
    uint8_t _pad_5[0x8];
    struct SCharacterValidationParams* validationParams;
    uint8_t _pad_6[0x8];
    enum ARDataType featureType;
    uint8_t _pad_7[0x4];
    struct SCustomizableMaterialParams* materialParams;
    uint8_t _pad_8[0x8];
    _Bool precacheSkinMaterials;
    _Bool supportsSubFeatureSelection;
    uint8_t _pad_9[0x6];
    struct SCharacterCustomizerClippingVolumeParams* clippingVolumeParams;
    uint8_t _pad_10[0x20];
    struct SCharacterCustomizerClippingVolumeParams* advancedModeClippingVolumeParams;
    uint8_t _pad_11[0x20];
    _Bool addEmptyEntry;
    uint8_t _pad_12[0x7];
    struct Vec3* featureLibOffset;
    uint8_t _pad_13[0x10];
    struct Vec3* advancedModeLibOffset;
    uint8_t _pad_14[0x10];
    float featureLibScrollTrim;
    float advancedModeFeatureLibScrollTrim;
    enum ARDataType itemSelectMode;
    uint8_t _pad_15[0x4];
};




struct SCharacterCustomizerMakeupSlot {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct CryStringT* idString;
    uint8_t _pad_2[0x8];
    struct DynArray_SCharacterCustomizerFeatureBase* subFeatures;
    uint8_t _pad_3[0x28];
    struct CryStringT* iconPath;
    uint8_t _pad_4[0x8];
    struct SCharacterCustomizerRandomizationParams* randomizationParams;
    uint8_t _pad_5[0x8];
    struct SCharacterValidationParams* validationParams;
    uint8_t _pad_6[0x8];
    enum ARDataType featureType;
    uint8_t _pad_7[0x4];
    struct SCustomizableMaterialParams* materialParams;
    uint8_t _pad_8[0x8];
    _Bool precacheSkinMaterials;
    _Bool supportsSubFeatureSelection;
    uint8_t _pad_9[0x6];
    struct SCharacterCustomizerClippingVolumeParams* clippingVolumeParams;
    uint8_t _pad_10[0x20];
    struct SCharacterCustomizerClippingVolumeParams* advancedModeClippingVolumeParams;
    uint8_t _pad_11[0x20];
    _Bool addEmptyEntry;
    uint8_t _pad_12[0x7];
    struct Vec3* featureLibOffset;
    uint8_t _pad_13[0x10];
    struct Vec3* advancedModeLibOffset;
    uint8_t _pad_14[0x10];
    float featureLibScrollTrim;
    float advancedModeFeatureLibScrollTrim;
    enum ARDataType itemSelectMode;
    uint8_t _pad_15[0x4];
    enum ARDataType slot;
    uint8_t _pad_16[0x4];
    struct DynArray_int32_t* subMaterialsToEdit;
    uint8_t _pad_17[0x28];
    struct SCharacterCustomizerTextureList* textures;
    uint8_t _pad_18[0x30];
    struct SCharacterCustomizerClampedValueParams* smoothLimits;
    uint8_t _pad_19[0x10];
    struct SCharacterCustomizerClampedValueParams* metalLimits;
    uint8_t _pad_20[0x10];
    struct SCharacterCustomizerClampedValueParams* opacityLimits;
    uint8_t _pad_21[0x10];
    int32_t basicModeChannel;
    uint8_t _pad_22[0x4];
};




struct SCharacterCustomizerStep {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct DynArray_SCharacterCustomizerFeatureBase* features;
    uint8_t _pad_2[0x28];
    _Bool isVisible;
    _Bool uiVisible;
    uint8_t _pad_3[0x6];
    struct CryStringT* iconPath;
    uint8_t _pad_4[0x8];
    _Bool playerDummyVisible;
    _Bool allowFlowgraphTransition;
    uint8_t _pad_5[0x6];
};




struct SCharacterCustomizerVertexParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    int32_t vertexId;
    uint8_t _pad_2[0x4];
    struct DynArray_SCharacterCustomizerVertexParams* ignoreList;
    uint8_t _pad_3[0x28];
    float shapingTolerance;
    uint8_t _pad_4[0x4];
};




struct SControlledEntityDynamicTransformParams {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityReferenceDef* dynamicTargets;
    uint8_t _pad_1[0x28];
    struct DynArray_EntityClassDefinition* classTargets;
    uint8_t _pad_2[0x28];
    struct DynArray_EntityReferenceDef* dynamicNoGrabTargets;
    uint8_t _pad_3[0x28];
    struct DynArray_EntityClassDefinition* classNoGrabTargets;
    uint8_t _pad_4[0x28];
    struct Vec3* projectionDirection;
    uint8_t _pad_5[0x10];
    struct Vec3* attachmentOffset;
    uint8_t _pad_6[0x10];
    struct Vec3* pullRange;
    uint8_t _pad_7[0x10];
    float pullStrength;
    uint8_t _pad_8[0x4];
    struct EntityReferenceDef* pullReferenceEntity;
    uint8_t _pad_9[0x10];
    float grabRange;
    _Bool canGrab;
    uint8_t _pad_10[0x3];
    struct SControlledEntityAutoCraneData* autoCraneData;
    uint8_t _pad_11[0xe8];
};




struct SCraftingDictionary {
    uint8_t _pad_0[0x8];
    struct DynArray_SCraftingDictionaryEntry* dictionaryEntries;
    uint8_t _pad_1[0x28];
};




struct SCraftingDictionaryEntry {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* itemTags;
    uint8_t _pad_1[0x28];
    struct CryStringT* mannequinFragmentTag;
    uint8_t _pad_2[0x8];
};




struct SCustomizableMaterialParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CryStringT* attachmentName;
    uint8_t _pad_2[0x8];
    enum ARDataType itemType;
    uint8_t _pad_3[0x4];
    struct DynArray_int32_t* submaterialsToEdit;
    uint8_t _pad_4[0x28];
    struct DynArray_SCustomizableMaterialParams* linkedMaterials;
    uint8_t _pad_5[0x28];
    struct CryStringT* additionalFlags;
    uint8_t _pad_6[0x8];
    struct SCharacterValidationParams* validationParams;
    uint8_t _pad_7[0x8];
};




struct SDespawnerParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SItemPortDef* despawningPorts;
    uint8_t _pad_1[0x28];
    float delay;
    uint8_t _pad_2[0x4];
    struct DynArray_SSequencerDespawnerTaskParams* despawnerTasks;
    uint8_t _pad_3[0x28];
};




struct SEAFPSGunGameWeaponLists {
    uint8_t _pad_0[0x8];
    int32_t badgeId;
    uint8_t _pad_1[0x4];
    struct DynArray_SEAFPSGunGameWeaponSetup* weaponList;
    uint8_t _pad_2[0x28];
};




struct SEAFPSGunGameWeaponSetup {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* weaponVariants;
    uint8_t _pad_1[0x28];
    struct EntityClassDefinition* barrelAttachment;
    uint8_t _pad_2[0x10];
    struct EntityClassDefinition* ironSightAttachment;
    uint8_t _pad_3[0x10];
    struct EntityClassDefinition* underBarrelAttachment;
    uint8_t _pad_4[0x10];
};




struct SEALoadoutFPSGunGameSetup {
    uint8_t _pad_0[0x8];
    _Bool loadCustomizationSnapshot;
    uint8_t _pad_1[0x7];
    struct SEAGlobalSpecialLoadout* forcedLoadout;
    uint8_t _pad_2[0x10];
    struct EntityClassDefinition* defaultMelee;
    uint8_t _pad_3[0x10];
    struct DynArray_SEAFPSGunGameWeaponLists* weaponLists;
    uint8_t _pad_4[0x28];
    struct DynArray_SEAFPSGunGameArmorSet* armorSets;
    uint8_t _pad_5[0x28];
    struct DynArray_EntityClassDefinition* lastKillHelmets;
    uint8_t _pad_6[0x28];
    enum ARDataType startingArmorLevel;
    int8_t armorDeathsForLevelPromotion;
    int8_t armorKillsForLevelDemotion;
    int8_t startCatchupMax;
    uint8_t _pad_7[0x1];
    float rankMessageTime;
    uint8_t _pad_8[0x4];
    struct CLocIdentifier* locIdRankUp;
    struct CLocIdentifier* locIdRankDown;
    struct CLocIdentifier* locIdArmorUp;
    struct CLocIdentifier* locIdArmorDown;
};




struct SEffectParamsNodeParticle {
    uint8_t _pad_0[0x8];
    struct CryStringT* GeomTags;
    uint8_t _pad_1[0x8];
    struct SEffectParamParticle* ParticleParams;
    uint8_t _pad_2[0x108];
    struct DynArray_SEffectParamsNodeParticle* SubNodes;
    uint8_t _pad_3[0x28];
};




struct SEffectParamsNodeSound {
    uint8_t _pad_0[0x8];
    struct CryStringT* GeomTags;
    uint8_t _pad_1[0x8];
    struct SEffectParamSound* SoundParams;
    uint8_t _pad_2[0x108];
    struct DynArray_SEffectParamsNodeSound* SubNodes;
    uint8_t _pad_3[0x28];
};




struct SEntityComponentCIGTestBParams {
    uint8_t _pad_0[0x18];
    struct SCIGTestBase* wpTestBase_0;
    uint8_t _pad_1[0x8];
    struct SCIGTestBase* wpTestBase_1;
    uint8_t _pad_2[0x8];
    struct DynArray_SCIGTestBase* wpTestBase_2;
    uint8_t _pad_3[0x28];
    struct DynArray_SCIGTestBase* wpTestBase_3;
    uint8_t _pad_4[0x28];
    struct SCIGTestB* wpTestB_0;
    uint8_t _pad_5[0x8];
    struct SCIGTestB* wpTestB_1;
    uint8_t _pad_6[0x8];
    struct DynArray_SCIGTestB* wpTestB_2;
    uint8_t _pad_7[0x28];
    struct DynArray_SCIGTestB* wpTestB_3;
    uint8_t _pad_8[0x28];
    struct UnitTest* refUnitTest_0;
    uint8_t _pad_9[0x10];
    struct UnitTest* refUnitTest_1;
    uint8_t _pad_10[0x10];
    struct DynArray_UnitTest* refUnitTest_2;
    uint8_t _pad_11[0x28];
    struct DynArray_UnitTest* refUnitTest_3;
    uint8_t _pad_12[0x28];
    struct FactionPalette* refPalette_0;
    uint8_t _pad_13[0x10];
    struct FactionPalette* refPalette_1;
    uint8_t _pad_14[0x10];
    struct DynArray_FactionPalette* refPalette_2;
    uint8_t _pad_15[0x28];
    struct DynArray_FactionPalette* refPalette_3;
    uint8_t _pad_16[0x28];
    struct EntityClassDefinition* refEntity_0;
    uint8_t _pad_17[0x10];
    struct EntityClassDefinition* refEntity_1;
    uint8_t _pad_18[0x10];
    struct DynArray_EntityClassDefinition* refEntity_2;
    uint8_t _pad_19[0x28];
    struct DynArray_EntityClassDefinition* refEntity_3;
    uint8_t _pad_20[0x28];
    struct Tag* refTag_0;
    uint8_t _pad_21[0x10];
    struct Tag* refTag_1;
    uint8_t _pad_22[0x10];
    struct DynArray_Tag* refTag_2;
    uint8_t _pad_23[0x28];
    struct DynArray_Tag* refTag_3;
    uint8_t _pad_24[0x28];
    struct Vec3* Vec3_0;
    uint8_t _pad_25[0x10];
    struct Vec3* Vec3_1;
    uint8_t _pad_26[0x10];
    struct DynArray_Vec3* Vec3_2;
    uint8_t _pad_27[0x28];
    struct DynArray_Vec3* Vec3_3;
    uint8_t _pad_28[0x28];
    struct QuatT* QuatT_0;
    uint8_t _pad_29[0x50];
    struct QuatT* QuatT_1;
    uint8_t _pad_30[0x50];
    struct DynArray_QuatT* QuatT_2;
    uint8_t _pad_31[0x28];
    struct DynArray_QuatT* QuatT_3;
    uint8_t _pad_32[0x28];
    struct RGB8* LRGB__8_0;
    uint8_t _pad_33[0x8];
    struct RGB8* LRGB__8_1;
    uint8_t _pad_34[0x8];
    struct DynArray_RGB8* LRGB__8_2;
    uint8_t _pad_35[0x28];
    struct DynArray_RGB8* LRGB__8_3;
    uint8_t _pad_36[0x28];
    struct RGBA8* LRGBA_8_0;
    uint8_t _pad_37[0x8];
    struct RGBA8* LRGBA_8_1;
    uint8_t _pad_38[0x8];
    struct DynArray_RGBA8* LRGBA_8_2;
    uint8_t _pad_39[0x28];
    struct DynArray_RGBA8* LRGBA_8_3;
    uint8_t _pad_40[0x28];
    struct RGB* LRGB__F_0;
    uint8_t _pad_41[0x10];
    struct RGB* LRGB__F_1;
    uint8_t _pad_42[0x10];
    struct DynArray_RGB* LRGB__F_2;
    uint8_t _pad_43[0x28];
    struct DynArray_RGB* LRGB__F_3;
    uint8_t _pad_44[0x28];
    struct RGBA* LRGBA_F_0;
    uint8_t _pad_45[0x10];
    struct RGBA* LRGBA_F_1;
    uint8_t _pad_46[0x10];
    struct DynArray_RGBA* LRGBA_F_2;
    uint8_t _pad_47[0x28];
    struct DynArray_RGBA* LRGBA_F_3;
    uint8_t _pad_48[0x28];
    struct SRGB8* SRGB__8_0;
    uint8_t _pad_49[0x8];
    struct SRGB8* SRGB__8_1;
    uint8_t _pad_50[0x8];
    struct DynArray_SRGB8* SRGB__8_2;
    uint8_t _pad_51[0x28];
    struct DynArray_SRGB8* SRGB__8_3;
    uint8_t _pad_52[0x28];
    struct SRGBA8* SRGBA_8_0;
    uint8_t _pad_53[0x8];
    struct SRGBA8* SRGBA_8_1;
    uint8_t _pad_54[0x8];
    struct DynArray_SRGBA8* SRGBA_8_2;
    uint8_t _pad_55[0x28];
    struct DynArray_SRGBA8* SRGBA_8_3;
    uint8_t _pad_56[0x28];
};




struct SEntityComponentCarryableParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* carryInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* placeInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* dropInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* equipToItemportInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* offHandEquipToItemportInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* storeInteraction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* offHandStoreInteraction;
    uint8_t _pad_7[0x8];
    struct SSharedInteractionParams* holdReadyInteraction;
    uint8_t _pad_8[0x8];
    struct SSharedInteractionParams* equipWearableInteraction;
    uint8_t _pad_9[0x8];
    struct SSharedInteractionParams* inspectInteraction;
    uint8_t _pad_10[0x8];
    struct SSharedInteractionParams* flipInteraction;
    uint8_t _pad_11[0x8];
    struct SSharedInteractionParams* swapAttachmentsInteraction;
    uint8_t _pad_12[0x8];
    struct SSharedInteractionParams* attachToHeldItemInteraction;
    uint8_t _pad_13[0x8];
    struct SCarryableStatesParams* carryableStatesParams;
    uint8_t _pad_14[0xb0];
    struct CryStringT* enslavementAnimationDatabase;
    uint8_t _pad_15[0x8];
    struct SGripContainer* gripData;
    uint8_t _pad_16[0x38];
    struct DynArray_ARDataType* abilityLocks;
    uint8_t _pad_17[0x28];
    struct DynArray_SSequencerCarryableTaskParams* carryableTasks;
    uint8_t _pad_18[0x28];
    struct SThrowableParams* throwableParams;
    uint8_t _pad_19[0xf8];
    struct SCEquipableParams* equipWearableParams;
    uint8_t _pad_20[0x10];
    struct SInteractionPointParams* interactionPointToMoveOnEquip;
    uint8_t _pad_21[0x8];
    struct SCarryableIKInteractionList* ikInteractionsRecord;
    uint8_t _pad_22[0x10];
    struct DynArray_SCarryableSequenceRef* carryableSequences;
    uint8_t _pad_23[0x28];
    struct SCarryableInteractionPointOffsets* interactionPointOffsets;
    uint8_t _pad_24[0x108];
    _Bool canBeCarriedInProne;
    uint8_t _pad_25[0x7];
};




struct SEntityComponentEffects {
    uint8_t _pad_0[0x18];
    struct SEntitityEffectSystem_System* entityEffects;
    uint8_t _pad_1[0x90];
    struct DynArray_EntitityEffectSystem_StaticFloat* staticValues;
    uint8_t _pad_2[0x28];
    struct DynArray_EntitityEffectSystem_StaticColor* staticColors;
    uint8_t _pad_3[0x28];
    struct DynArray_Tag* tagsToEnableOnLoad;
    uint8_t _pad_4[0x28];
    struct DynArray_Tag* triggersToEnableOnLoad;
    uint8_t _pad_5[0x28];
};




struct SEntityLootableContainerParams {
    uint8_t _pad_0[0x18];
    _Bool initialLocalPlayerAccess;
    uint8_t _pad_1[0x3];
    float radius;
    struct Vec3* maxOffsetTranslation;
    uint8_t _pad_2[0x10];
    struct Ang3* maxOffsetRotation;
    uint8_t _pad_3[0x10];
    struct DynArray_SSharedInteractionParams* mainInteractions;
    uint8_t _pad_4[0x28];
    struct SLootableMainInteractionsTarget* mainInteractionAnimTarget;
    uint8_t _pad_5[0x8];
    _Bool infiniteLootable;
    _Bool smartRefillAmmo;
    _Bool smartRefillGrenadesAndAmmo;
    uint8_t _pad_6[0x5];
    struct SInteractionPointParams* mainInteractionPoint;
    uint8_t _pad_7[0x8];
    struct CryStringT* validTagsOnSwapOutfit;
    uint8_t _pad_8[0x8];
    struct CryStringT* blockingTagsOnSwapOutfit;
    uint8_t _pad_9[0x8];
    struct DynArray_SOutfitPlacingRule* placeOutfitRules;
    uint8_t _pad_10[0x28];
    struct DynArray_SItemPortDef* takeExclussionRules;
    uint8_t _pad_11[0x28];
    struct CryStringT* fragmentTags;
    uint8_t _pad_12[0x8];
    _Bool forceFirstSelect;
    uint8_t _pad_13[0x7];
    struct DynArray_SLootableItemPortRuleParams* itemPortRules;
    uint8_t _pad_14[0x28];
    struct SLootableInventoryParams* lootInventoryParams;
    uint8_t _pad_15[0x8];
    struct DynArray_Tag* tagsOnAllItemPortsEmpty;
    uint8_t _pad_16[0x28];
    struct SSharedInteractionParams* placeIntoPortInteraction;
    uint8_t _pad_17[0x8];
    _Bool bespokePlace;
    uint8_t _pad_18[0x7];
    struct DynArray_Tag* bespokePlaceTags;
    uint8_t _pad_19[0x28];
    _Bool bespokeTake;
    uint8_t _pad_20[0x7];
    struct DynArray_Tag* bespokeTakeTags;
    uint8_t _pad_21[0x28];
    struct SItemPortDef* exactPlaceIntoPort;
    uint8_t _pad_22[0x8];
    struct DynArray_SOutfitHangerGroup* outfitHangerGroups;
    uint8_t _pad_23[0x28];
    struct DynArray_SCoreInventoryItem* coreInventoryItems;
    uint8_t _pad_24[0x28];
};




struct SEntityTraversingNodeBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct SEntityTraversingNodeUniqueId* id;
    uint8_t _pad_2[0x8];
    struct SEntityTraversingNodeTypeParams* entityTraversingType;
    uint8_t _pad_3[0x8];
    struct DynArray_SEntityTraversingExecuteNodeBase* executeNodes;
    uint8_t _pad_4[0x28];
    struct DynArray_SEntityTraversingNodeBase* nextNodes;
    uint8_t _pad_5[0x28];
};




struct SEntityTraversingTreeParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SEntityTraversingNodeBase* TraversingNodes;
    uint8_t _pad_1[0x28];
    struct DynArray_SEntityTraversingTarget* TraversingTargets;
    uint8_t _pad_2[0x28];
};




struct SFlightsuitHangerGroup {
    uint8_t _pad_0[0x8];
    struct DynArray_SItemPortDef* groupPorts;
    uint8_t _pad_1[0x28];
    struct SSharedInteractionParams* equipAllInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* swapAllInteraction;
    uint8_t _pad_3[0x8];
    struct DynArray_SItemPortDef* armorPorts;
    uint8_t _pad_4[0x28];
    struct SSharedInteractionParams* swapAllClothesInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* swapAllUndersuitInteraction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* swapAllHelmetInteraction;
    uint8_t _pad_7[0x8];
    struct SSharedInteractionParams* swapAllCoreInteraction;
    uint8_t _pad_8[0x8];
    struct SSharedInteractionParams* swapUndersuitClothesInteraction;
    uint8_t _pad_9[0x8];
};




struct SGeometryNodeParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* Tags;
    uint8_t _pad_1[0x8];
    struct SGeometryDataParams* Geometry;
    uint8_t _pad_2[0x108];
    float ScaleMultiplier;
    uint8_t _pad_3[0x4];
    struct DynArray_SGeometryNodeParams* SubGeometry;
    uint8_t _pad_4[0x28];
};




struct SHighlightBehaviorNode {
    uint8_t _pad_0[0x8];
    struct SHighlightBehaviorNodeParams* HighlightBehaviorNodeParams;
    uint8_t _pad_1[0x8];
    struct DynArray_SHighlightBehaviorNode* nextNodes;
    uint8_t _pad_2[0x28];
};




struct SInteractableParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SSharedInteractionParams* SharedInteractions;
    uint8_t _pad_1[0x28];
    struct DynArray_SInteractionPointParams* InteractionPoints;
    uint8_t _pad_2[0x28];
    struct DynArray_SSequencerInteractionTask* interactionTasks;
    uint8_t _pad_3[0x28];
    struct DynArray_SSequencerActorActionHandlerTask* actionHandlerTasks;
    uint8_t _pad_4[0x28];
    struct DynArray_SSequencerItemActionTask* itemActionTasks;
    uint8_t _pad_5[0x28];
    struct SInteractableMenuTitleParams* menuTitle;
    uint8_t _pad_6[0x8];
};




struct SInteractionLinkParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SVehicleItemportInteractionLink* vehicleItemPortInteractionLinks;
    uint8_t _pad_1[0x28];
    struct DynArray_Tag* linkPlugs;
    uint8_t _pad_2[0x28];
};




struct SInteractionLockGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct DynArray_SSharedInteractionParams* interactions;
    uint8_t _pad_1[0x28];
    _Bool lockInteraction;
    uint8_t _pad_2[0x7];
};




struct SInteractionPointParams {
    uint8_t _pad_0[0x8];
    _Bool FirstInteractionPrimary;
    _Bool UseHelperLocation;
    _Bool ShowHighlight;
    _Bool ApplyToEntireSkeleton;
    _Bool longRangeIP;
    uint8_t _pad_1[0x3];
    struct CryStringT* HelperName;
    uint8_t _pad_2[0x8];
    struct DynArray_Tag* Tags;
    uint8_t _pad_3[0x28];
    struct DynArray_SHighlightBehaviorNode* HighlightBehaviors;
    uint8_t _pad_4[0x28];
    struct DynArray_CryStringT* AdditionalCollisionBones;
    uint8_t _pad_5[0x28];
    struct DynArray_SInteractionPointModifier* InteractionPointModifiers;
    uint8_t _pad_6[0x28];
    struct QuatT* Offset;
    uint8_t _pad_7[0x50];
    _Bool ScalePromptOffsetWithEntity;
    uint8_t _pad_8[0x7];
    struct QuatT* InteractionPromptOffset;
    uint8_t _pad_9[0x50];
    enum ARDataType TextJustification;
    enum ARDataType TextOrientation;
    float TextScale;
    float Radius;
    _Bool UseHorizontalDistance;
    uint8_t _pad_10[0x3];
    float MaxCursorScreenDistance;
    _Bool ShowInnerThoughtsOffScreen;
    _Bool OnlySelectableInLookDir;
    _Bool ShowInteractionTextAtCursorPos;
    uint8_t _pad_11[0x5];
    struct SAngleConstraint* AngleConstraint;
    uint8_t _pad_12[0x20];
    float InteractionPromptScale;
    float InteractionPromptLabelVerticalOffset;
    enum ARDataType InteractionPromptBound;
    uint8_t _pad_13[0x4];
    struct SInteractionPointPrimitiveParams* Primitive;
    uint8_t _pad_14[0x8];
    struct PlayerAnimatedInteractionBase* PlayerAnimatedInteractionParams;
    uint8_t _pad_15[0x8];
    struct DynArray_SInteractionParams* Interactions;
    uint8_t _pad_16[0x28];
    _Bool HighlightOnRayHitEntity;
    uint8_t _pad_17[0x7];
    uint8_t InteractionPointInternalSettingTemplateRef[0x18];
    uint8_t _pad_18[0x20];
};




struct SInteractionState {
    uint8_t _pad_0[0x8];
    struct CryStringT* StateName;
    uint8_t _pad_1[0x8];
    struct CryStringT* EnterStateEffectGroup;
    uint8_t _pad_2[0x8];
    struct CryStringT* ExitStateEffectGroup;
    uint8_t _pad_3[0x8];
    struct DynArray_Tag* enterStateEffectTags;
    uint8_t _pad_4[0x28];
    struct DynArray_Tag* exitStateEffectTags;
    uint8_t _pad_5[0x28];
    struct DynArray_EventDispatcher* EnterEventDispatchers;
    uint8_t _pad_6[0x28];
    struct SSequencerDefSequenceParams* EnterStatePlaySequence;
    uint8_t _pad_7[0x8];
    struct SSequencerDefSequenceParams* ExitStatePlaySequence;
    uint8_t _pad_8[0x8];
    struct SStateAutoChange* StateAutoChange;
    uint8_t _pad_9[0x8];
    struct DynArray_SInteractionStateTransition* Interactions;
    uint8_t _pad_10[0x28];
    struct DynArray_SInteractionPointParams* interactionPoints;
    uint8_t _pad_11[0x28];
    struct TagList* stateTags;
    uint8_t _pad_12[0x30];
    struct CryStringT* enterGeometryTags;
    uint8_t _pad_13[0x8];
    struct TagList* entityTags;
    uint8_t _pad_14[0x60];
};




struct SInteractionStateMachineParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SInteractionStateType* StateTypes;
    uint8_t _pad_1[0x28];
};




struct SInteractionStateType {
    uint8_t _pad_0[0x8];
    struct CryStringT* StateTypeName;
    uint8_t _pad_1[0x8];
    enum ARDataType bindingsMethod;
    uint8_t _pad_2[0x4];
    struct SInteractionState* DefaultState;
    uint8_t _pad_3[0x8];
    _Bool asopReset;
    enum ARDataType networkAuthority;
    uint8_t _pad_4[0x6];
    struct DynArray_SInteractionState* States;
    uint8_t _pad_5[0x28];
    struct DynArray_SStateModifier* StateModifiers;
    uint8_t _pad_6[0x40];
};




struct SItemPortActorRecordParams {
    uint8_t _pad_0[0x8];
    struct Range* WearRange;
    uint8_t _pad_1[0x8];
    struct Range* DirtRange;
    uint8_t _pad_2[0x8];
    struct DynArray_SLoadoutInventoryItem* InventoryItems;
    uint8_t _pad_3[0x28];
    struct EntityClassDefinition* actorRecord;
    uint8_t _pad_4[0x10];
    struct DynArray_Tag* OutfitNameTags;
    uint8_t _pad_5[0x28];
};




struct SItemPortContainerComponentParams {
    uint8_t _pad_0[0x18];
    struct SItemPortMasterControllerParams* masterController;
    uint8_t _pad_1[0x8];
    struct DynArray_SItemPortDef* Ports;
    uint8_t _pad_2[0x28];
    struct CryStringT* PortFlags;
    uint8_t _pad_3[0x8];
    struct CryStringT* PortTags;
    uint8_t _pad_4[0x8];
    struct CryStringT* RequiredItemTags;
    uint8_t _pad_5[0x8];
    struct DynArray_SInternalResourceLink* InternalResourceLinks;
    uint8_t _pad_6[0x28];
    struct DynArray_SInternalHardpointLink* InternalHardpointLinks;
    uint8_t _pad_7[0x28];
    _Bool LinkAllItemsToResourceNetwork;
    _Bool cheatResourceNetworkUpdate;
    uint8_t _pad_8[0x6];
    struct DynArray_SItemPortDef* destroyEntitiesOnItemportList;
    uint8_t _pad_9[0x28];
    struct ResourceNetworkPowerPoolSetup* resourceNetworkPowerPools;
    uint8_t _pad_10[0x38];
};




struct SItemPortDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct CryStringT* DisplayName;
    uint8_t _pad_2[0x8];
    struct CryStringT* PortTags;
    uint8_t _pad_3[0x8];
    struct CryStringT* RequiredPortTags;
    uint8_t _pad_4[0x8];
    struct CryStringT* Flags;
    uint8_t _pad_5[0x8];
    struct DynArray_Tag* Tags;
    uint8_t _pad_6[0x28];
    struct CryStringT* controllableTag;
    uint8_t _pad_7[0x8];
    int32_t MinSize;
    int32_t MaxSize;
    struct Vec2* PitchLimit;
    uint8_t _pad_8[0x8];
    struct Vec2* YawLimit;
    uint8_t _pad_9[0x8];
    struct Vec2* RollLimit;
    uint8_t _pad_10[0x8];
    float InteractionPointSize;
    uint8_t _pad_11[0x4];
    struct Vec3* InteractionPointOffset;
    uint8_t _pad_12[0x10];
    enum ARDataType DefaultWeaponGroup;
    uint8_t _pad_13[0x4];
    struct DynArray_SItemPortAttachmentPoints* AttachmentPoints;
    uint8_t _pad_14[0x28];
    struct DynArray_SItemPortDefTypes* Types;
    uint8_t _pad_15[0x28];
    struct SItemPortDefExtensionBase* Extension;
    uint8_t _pad_16[0x8];
    struct SItemPortDefAttachmentImplementationBase* AttachmentImplementation;
    uint8_t _pad_17[0x8];
    struct SItemPortBreakable* Breakable;
    uint8_t _pad_18[0x18];
    struct DynArray_SItemPortConnectionParam* Connections;
    uint8_t _pad_19[0x28];
    struct SCItemControlBaseParams* control;
    uint8_t _pad_20[0x8];
    struct DynArray_SItemPortDef* linkedItemPorts;
    uint8_t _pad_21[0x28];
    _Bool resourceLinkToParent;
    _Bool useHelperAsInteractionPointName;
    uint8_t _pad_22[0x6];
    struct DynArray_SItemPortRuleDef* itemPortRules;
    uint8_t _pad_23[0x28];
    struct Vec3* detachDirection;
    uint8_t _pad_24[0x10];
    struct SItemPortDefaultItemDef* defaultItem;
    uint8_t _pad_25[0x58];
    enum ARDataType gridBehavior;
    uint8_t _pad_26[0x4];
    struct SItemPortInteractionsParams* interactions;
    uint8_t _pad_27[0x338];
};




struct SItemPortDefHelperNode {
    uint8_t _pad_0[0x8];
    struct CryStringT* Tags;
    uint8_t _pad_1[0x8];
    struct SItemPortDefHelper* Helper;
    uint8_t _pad_2[0x118];
    struct DynArray_SItemPortDefHelperNode* SubHelpers;
    uint8_t _pad_3[0x28];
};




struct SItemPortDefaultItemDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPort;
    uint8_t _pad_1[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
    struct DynArray_SItemPortDefaultItemDef* childItems;
    uint8_t _pad_3[0x28];
};




struct SItemPortLoadoutOutfitParams {
    uint8_t _pad_0[0x8];
    struct Range* WearRange;
    uint8_t _pad_1[0x8];
    struct Range* DirtRange;
    uint8_t _pad_2[0x8];
    struct DynArray_SLoadoutInventoryItem* InventoryItems;
    uint8_t _pad_3[0x28];
    struct SItemPortLoadoutBaseParams* BaseLoadout;
    uint8_t _pad_4[0x8];
    struct DynArray_SItemPortLoadoutOutfitTagParams* Outfits;
    uint8_t _pad_5[0x28];
};




struct SItemPortLoadoutOutfitTagParams {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* OutfitNameTags;
    uint8_t _pad_1[0x28];
    struct DynArray_SItemPortLoadoutBaseParams* Loadouts;
    uint8_t _pad_2[0x28];
};




struct SLoadoutRequirementTags {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* RequiredTags;
    uint8_t _pad_1[0x28];
    struct DynArray_Tag* BannedTags;
    uint8_t _pad_2[0x28];
};




struct SMannequinHangerGroup {
    uint8_t _pad_0[0x8];
    struct DynArray_SItemPortDef* groupPorts;
    uint8_t _pad_1[0x28];
    struct SSharedInteractionParams* equipAllInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* swapAllInteraction;
    uint8_t _pad_3[0x8];
};




struct SMaterialNodeParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* Tags;
    uint8_t _pad_1[0x8];
    struct GlobalResourceMaterial* Material;
    uint8_t _pad_2[0x10];
    struct TintPaletteRef* Palette;
    uint8_t _pad_3[0x28];
    struct DynArray_SMaterialNodeParams* materialVariants;
    uint8_t _pad_4[0x28];
};




struct SMultiMissionCompleteReward {
    uint8_t _pad_0[0x8];
    struct DynArray_MinRequiredMissions* minRequiredMissions;
    uint8_t _pad_1[0x28];
    struct EntityClassDefinition* rentalEntityClass;
    uint8_t _pad_2[0x10];
    int32_t durationSeconds;
    enum ARDataType badgeToAward;
};




struct SMultiMissionCompleteRewardRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_SMultiMissionCompleteReward* multiMissionCompleteRewards;
    uint8_t _pad_1[0x28];
};




struct SOutfitHangerGroup {
    uint8_t _pad_0[0x8];
    struct DynArray_SItemPortDef* groupPorts;
    uint8_t _pad_1[0x28];
    struct SSharedInteractionParams* equipAllInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* swapAllInteraction;
    uint8_t _pad_3[0x8];
};




struct SSCSignatureSystemParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* bindingURLPrefix;
    uint8_t _pad_1[0x8];
    struct SSCRadarContactProperites* radarProperties;
    uint8_t _pad_2[0x8];
    struct SSCSignatureSystemAudioParams* audioParams;
    uint8_t _pad_3[0x8];
    struct ScanCustomDataDef* scanCustomData;
    uint8_t _pad_4[0x10];
    struct ScanCustomDataInfo* embeddedScanInfo;
    uint8_t _pad_5[0x8];
    struct ScanDisplayLayoutParams* scanDisplayLayoutOverride;
    uint8_t _pad_6[0x10];
    struct DynArray_Tag* detectionTags;
    uint8_t _pad_7[0x28];
    _Bool isOverridden;
    uint8_t _pad_8[0x7];
    struct Vec3* overriddenSize;
    uint8_t _pad_9[0x10];
    _Bool enableDetectionOnItemPort;
    _Bool isObjectOfInterest;
    _Bool ignoreHighlightWhenDetectorInsideBounds;
    uint8_t _pad_10[0x5];
};




struct SSequencerImmediateDespawnDespawnerTaskParams {
    uint8_t _pad_0[0x20];
    struct DynArray_SItemPortDef* immediateDespawnPorts;
    uint8_t _pad_1[0x28];
};




struct SSequencerUsableDisableUseChannelTask {
    uint8_t _pad_0[0x28];
    struct DynArray_UsableUseChannelInstance* useChannelInstancesToDisable;
    uint8_t _pad_1[0x28];
};




struct SSequencerUsableEnableUseChannelTask {
    uint8_t _pad_0[0x28];
    struct DynArray_UsableUseChannelInstance* useChannelInstancesToEnable;
    uint8_t _pad_1[0x28];
};




struct SSetInteractionStateInItemportedGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool bApplyToAllChildren;
    uint8_t _pad_1[0x7];
    struct DynArray_SItemPortDef* itemPorts;
    uint8_t _pad_2[0x28];
    struct CryStringT* stateTypeName;
    uint8_t _pad_3[0x8];
    struct CryStringT* stateName;
    uint8_t _pad_4[0x8];
};




struct SSharedInteractionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x28];
    struct CLocIdentifier* DisplayName;
    enum ARDataType DisplayType;
    enum ARDataType GenericCursor;
    _Bool FocusModeOnly;
    _Bool Sendable;
    _Bool Linkable;
    _Bool LockedByLinks;
    _Bool RequiresAuthorizedUser;
    _Bool available;
    _Bool InheritsConditionDisplaysThroughLinks;
    uint8_t _pad_2[0x11];
    struct DynArray_Tag* QueryTags;
    uint8_t _pad_3[0x28];
    struct Tag* RoomTag;
    uint8_t _pad_4[0x10];
    struct Tag* UsableTag;
    uint8_t _pad_5[0x10];
    struct Tag* LinkingTag;
    uint8_t _pad_6[0x10];
    struct InteractionConditionList* conditionList;
    uint8_t _pad_7[0x8];
    struct PlayerAnimatedInteractionBase* playerAnimatedInteractionBase;
    uint8_t _pad_8[0x8];
};




struct SSpawnerParams {
    uint8_t _pad_0[0x18];
    struct SSpawnRules* spawnRules;
    uint8_t _pad_1[0x8];
    struct SDespawnRules* despawnRules;
    uint8_t _pad_2[0x38];
    _Bool spawnOnGameStart;
    _Bool spawnWithinPlayerRange;
    uint8_t _pad_3[0x2];
    float clampSpawnPlayerCheckTime;
    struct DynArray_SSpawnEntity* entitiesToSpawn;
    uint8_t _pad_4[0x28];
    struct BasePortRefillData* portRefillData;
    uint8_t _pad_5[0x8];
    struct BaseSpawnerPrerequisite* prerequisite;
    uint8_t _pad_6[0x8];
    _Bool startActive;
    uint8_t _pad_7[0x3];
    int32_t groupIndex;
    struct Faction_LEGACY* faction;
    uint8_t _pad_8[0x10];
    _Bool onRequestSpawn;
    _Bool spawnInMovement;
    _Bool untrackOnDetach;
    uint8_t _pad_9[0x5];
    struct DynArray_SItemPortDef* wildcardPorts;
    uint8_t _pad_10[0x28];
};




struct STaggedInverseInteractionLinkExecuteCreateInteractionLinkNode {
    uint8_t _pad_0[0x8];
    struct TagsDNF* matchTags;
    uint8_t _pad_1[0x60];
    struct DynArray_SSharedInteractionParams* linkInteractions;
    uint8_t _pad_2[0x28];
};




struct STriggerableDevicesBehaviorActorStatusParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool shouldBeDestroyed;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct SSequencerDefSequenceParams* startSequence;
    uint8_t _pad_4[0x8];
    struct SSequencerDefSequenceParams* endSequence;
    uint8_t _pad_5[0x8];
    float radius;
    enum ARDataType angleCurve;
    enum ARDataType rangeCurve;
    uint8_t _pad_6[0x2];
    struct DynArray_ActorStatusAddBuff* actorStatusBuffs;
    uint8_t _pad_7[0x28];
};




struct STriggerableDevicesBehaviorDetachParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool shouldBeDestroyed;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct SSequencerDefSequenceParams* startSequence;
    uint8_t _pad_4[0x8];
    struct SSequencerDefSequenceParams* endSequence;
    uint8_t _pad_5[0x8];
};




struct STriggerableDevicesBehaviorExplosionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool shouldBeDestroyed;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct SSequencerDefSequenceParams* startSequence;
    uint8_t _pad_4[0x8];
    struct SSequencerDefSequenceParams* endSequence;
    uint8_t _pad_5[0x8];
    struct ExplosionParams* explosionParams;
    uint8_t _pad_6[0x1b8];
};




struct STriggerableDevicesBehaviorParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool shouldBeDestroyed;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct SSequencerDefSequenceParams* startSequence;
    uint8_t _pad_4[0x8];
    struct SSequencerDefSequenceParams* endSequence;
    uint8_t _pad_5[0x8];
};




struct STriggerableDevicesBehaviorUnprimeParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool shouldBeDestroyed;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct SSequencerDefSequenceParams* startSequence;
    uint8_t _pad_4[0x8];
    struct SSequencerDefSequenceParams* endSequence;
    uint8_t _pad_5[0x8];
};




struct STriggerableDevicesTriggerAllAnyParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool isAuthoritative;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct STriggerableDevicesBlinking* blinkingParams;
    uint8_t _pad_4[0x18];
    struct CryStringT* markerShapePath;
    uint8_t _pad_5[0x8];
    struct CryStringT* markerModelPath;
    uint8_t _pad_6[0x8];
    struct STriggerableDevicesBehaviorParams* behavior;
    uint8_t _pad_7[0x8];
    struct DynArray_STriggerableDevicesTriggerParams* subTriggers;
    uint8_t _pad_8[0x28];
    _Bool finishAll;
    uint8_t _pad_9[0x7];
};




struct STriggerableDevicesTriggerGravityParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool isAuthoritative;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct STriggerableDevicesBlinking* blinkingParams;
    uint8_t _pad_4[0x18];
    struct CryStringT* markerShapePath;
    uint8_t _pad_5[0x8];
    struct CryStringT* markerModelPath;
    uint8_t _pad_6[0x8];
    struct STriggerableDevicesBehaviorParams* behavior;
    uint8_t _pad_7[0x8];
    float angle;
    uint8_t _pad_8[0x4];
};




struct STriggerableDevicesTriggerImpactParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool isAuthoritative;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct STriggerableDevicesBlinking* blinkingParams;
    uint8_t _pad_4[0x18];
    struct CryStringT* markerShapePath;
    uint8_t _pad_5[0x8];
    struct CryStringT* markerModelPath;
    uint8_t _pad_6[0x8];
    struct STriggerableDevicesBehaviorParams* behavior;
    uint8_t _pad_7[0x8];
    _Bool ignoreWaterCollision;
    uint8_t _pad_8[0x7];
};




struct STriggerableDevicesTriggerLaserTripParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool isAuthoritative;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct STriggerableDevicesBlinking* blinkingParams;
    uint8_t _pad_4[0x18];
    struct CryStringT* markerShapePath;
    uint8_t _pad_5[0x8];
    struct CryStringT* markerModelPath;
    uint8_t _pad_6[0x8];
    struct STriggerableDevicesBehaviorParams* behavior;
    uint8_t _pad_7[0x8];
    struct Tag* laserEffectTag;
    uint8_t _pad_8[0x10];
    struct Tag* laserImpactEffectTag;
    uint8_t _pad_9[0x10];
    struct Tag* laserImpactOffsetParameter;
    uint8_t _pad_10[0x10];
    float laserLength;
    float laserRadius;
    struct CryStringT* helperName;
    uint8_t _pad_11[0x8];
    float laserSweepAngle;
    float laserSweepDuration;
    float laserCornerDuration;
    uint8_t _pad_12[0x4];
};




struct STriggerableDevicesTriggerParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool isAuthoritative;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct STriggerableDevicesBlinking* blinkingParams;
    uint8_t _pad_4[0x18];
    struct CryStringT* markerShapePath;
    uint8_t _pad_5[0x8];
    struct CryStringT* markerModelPath;
    uint8_t _pad_6[0x8];
    struct STriggerableDevicesBehaviorParams* behavior;
    uint8_t _pad_7[0x8];
};




struct STriggerableDevicesTriggerTimerParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool isAuthoritative;
    uint8_t _pad_2[0x7];
    struct DynArray_Tag* effectTags;
    uint8_t _pad_3[0x28];
    struct STriggerableDevicesBlinking* blinkingParams;
    uint8_t _pad_4[0x18];
    struct CryStringT* markerShapePath;
    uint8_t _pad_5[0x8];
    struct CryStringT* markerModelPath;
    uint8_t _pad_6[0x8];
    struct STriggerableDevicesBehaviorParams* behavior;
    uint8_t _pad_7[0x8];
    float duration;
    uint8_t _pad_8[0x4];
};




struct SWeaponActionFireTractorBeamAttachDetachParams {
    uint8_t _pad_0[0x8];
    float minAlignmentValidHolo;
    uint8_t _pad_1[0x4];
    struct RGB* validHoloColor;
    uint8_t _pad_2[0x10];
    struct RGB* warningHoloColor;
    uint8_t _pad_3[0x10];
    struct RGB* invalidHoloColor;
    uint8_t _pad_4[0x10];
    struct RGBA* cargoHoloPreviewColor;
    uint8_t _pad_5[0x10];
    float minOutlineWidth;
    float maxOutlineWidth;
    float outlineOpacity;
    float holoOpacity;
    struct GlobalResourceMaterial* holoMaterial;
    uint8_t _pad_6[0x10];
    float detachAccelerationPopAmount;
    float detachAimRange;
    float itemPortDetachForceModifier;
    float attachHoloDefaultRange;
    float attachHoloRangeModifier;
    uint8_t _pad_7[0x4];
    struct CryStringT* requiredPortTagsCarryable;
    uint8_t _pad_8[0x8];
    struct DynArray_SItemPortDefTypes* allowedDetachTypes;
    uint8_t _pad_9[0x28];
    struct DynArray_SItemPortDefTypes* displayPortSizeTypes;
    uint8_t _pad_10[0x28];
    struct DynArray_CryStringT* portFlagBlacklist;
    uint8_t _pad_11[0x28];
    struct DynArray_Tag* entityTagBlacklist;
    uint8_t _pad_12[0x28];
    _Bool isDetachMode;
    _Bool isCargoMode;
    uint8_t _pad_13[0x2];
    float releaseDistancePlacement;
    float releaseDistanceCargoAttachment;
    float aimRigDistance;
    float minThrowForce;
    float maxThrowForce;
    float throwChargeTime;
    float noTetherBreakingDistanceMultiplier;
    float visionFieldMultiplier;
    float holoPreviewScrollValue;
    _Bool useBufferZoneRaycast;
    uint8_t _pad_14[0x3];
    float boxBufferZoneMultiplier;
    float boxBufferZoneRayCastLength;
    _Bool useSuitTransformForPlacement;
    _Bool useSuitTransformForRotation;
    uint8_t _pad_15[0x2];
    struct SWeaponActionFireTractorBeamCargoModeOverrideParams* cargoModeOverrideParams;
    uint8_t _pad_16[0x40];
    _Bool allowGrappleInDetach;
    uint8_t _pad_17[0x7];
};




struct SWeaponActionFireTractorBeamParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct CLocIdentifier* localisedLiftingFunctionalityName;
    struct CLocIdentifier* localisedRotationFunctionalityName;
    struct Tag* liftingFunctionalityTag;
    uint8_t _pad_10[0x10];
    struct Tag* rotationFunctionalityTag;
    uint8_t _pad_11[0x10];
    struct CryStringT* fireHelper;
    uint8_t _pad_12[0x8];
    _Bool toggle;
    uint8_t _pad_13[0x3];
    float minForce;
    float maxForce;
    float additionalForceDuringZeroGHandholding;
    float minDistance;
    float maxDistance;
    float fullStrengthDistance;
    float maxAngle;
    float maxVolume;
    float volumeForceCoefficient;
    float heatPerSecond;
    float wearPerSecond;
    float hitRadius;
    float tetherBreakTime;
    float safeRangeValueFactor;
    float maxPlayerLookRotationScale;
    _Bool allowScrollingIntoBreakingRange;
    _Bool shouldDryFireInGreenZones;
    _Bool shouldFireInHangars;
    _Bool shouldTractorSelf;
    uint8_t _pad_14[0x4];
    struct DynArray_Tag* entityTagBlacklist;
    uint8_t _pad_15[0x28];
    enum ARDataType ammoType;
    float minEnergyDraw;
    float maxEnergyDraw;
    uint8_t _pad_16[0x4];
    struct CryStringT* hitType;
    uint8_t _pad_17[0x8];
    struct ActorStatusAddBuff* actorStatusBuff;
    uint8_t _pad_18[0x8];
    struct WeaponProceduralRecoilConfigDef* recoil;
    uint8_t _pad_19[0x10];
    struct WeaponProceduralRecoilConfigDef* recoilGrappling;
    uint8_t _pad_20[0x10];
    float recoilInterval;
    uint8_t _pad_21[0x4];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_22[0x18];
    struct SFragmentParams* stopFireFragment;
    uint8_t _pad_23[0x18];
    struct SFragmentParams* shootTargetFragment;
    uint8_t _pad_24[0x18];
    struct GlobalResourceAudio* startFireOneShotAudioTrigger;
    uint8_t _pad_25[0x18];
    struct GlobalResourceAudio* startFireLoopAudioTrigger;
    uint8_t _pad_26[0x18];
    struct GlobalResourceAudio* stopFireOneShotAudioTrigger;
    uint8_t _pad_27[0x18];
    struct GlobalResourceAudio* stopFireLoopAudioTrigger;
    uint8_t _pad_28[0x18];
    struct GlobalResourceAudio* beamBrokenOneShotAudioTrigger;
    uint8_t _pad_29[0x18];
    struct GlobalResourceAudio* beamAttachedOneShotAudioTrigger;
    uint8_t _pad_30[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_31[0x18];
    struct GlobalResourceAudio* startRotationModeAudioTrigger;
    uint8_t _pad_32[0x18];
    struct GlobalResourceAudio* stopRotationModeAudioTrigger;
    uint8_t _pad_33[0x18];
    struct GlobalResourceAudio* startGrappleAudioTrigger;
    uint8_t _pad_34[0x18];
    struct GlobalResourceAudio* stopGrappleAudioTrigger;
    uint8_t _pad_35[0x18];
    struct GlobalResourceAudio* shootTargetAudioTrigger;
    uint8_t _pad_36[0x18];
    struct AudioRtpc* timeSinceLastFireRTPC;
    uint8_t _pad_37[0x18];
    struct AudioRtpc* tractorBeamAccelerationRTPC;
    uint8_t _pad_38[0x18];
    struct AudioRtpc* tractorBeamSpeedRTPC;
    uint8_t _pad_39[0x18];
    struct AudioRtpc* rotationModeAmountRTPC;
    uint8_t _pad_40[0x18];
    struct AudioRtpc* tetherWarningStateRTPC;
    uint8_t _pad_41[0x18];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_42[0x28];
    struct AudioRtpc* tractorBeamNormDistanceRTPC;
    uint8_t _pad_43[0x18];
    struct AudioRtpc* tractorBeamNormForceRTPC;
    uint8_t _pad_44[0x18];
    struct AudioRtpc* tractorBeamObjectHeldRTPC;
    uint8_t _pad_45[0x18];
    struct DynArray_SWeaponParticleEffectParams* shootTargetEffects;
    uint8_t _pad_46[0x28];
    struct SBeamGroupParams* beamGroup;
    uint8_t _pad_47[0x8];
    struct SWeaponActionFireTractorBeamStrengthValueParams* beamStrengthValues;
    uint8_t _pad_48[0x30];
    struct SWeaponActionFireTractorBeamInputParams* inputParams;
    uint8_t _pad_49[0x10];
    struct SWeaponActionFireTractorBeamMovementParams* movementParams;
    uint8_t _pad_50[0x20];
    struct SWeaponActionFireTractorBeamAttachDetachParams* attachDetachParams;
    uint8_t _pad_51[0x200];
    struct SWeaponActionFireTractorBeamRotationParams* rotationParams;
    uint8_t _pad_52[0x18];
    struct SWeaponActionFireTractorBeamGrappleParams* grappleParams;
    uint8_t _pad_53[0x18];
    struct SWeaponActionFireTractorBeamVehicleBased* vehicleParams;
    uint8_t _pad_54[0x18];
    struct SWeaponActionFireTractorBeamMultitractorParams* multitractorParams;
    uint8_t _pad_55[0x20];
    struct SWeaponActionFireTractorBeamTowingParams* towingBeamParams;
    uint8_t _pad_56[0x8];
    struct SWeaponConditionBase* updateCondition;
    uint8_t _pad_57[0x8];
    struct Tag* ignoreActorStandingOnEntityTag;
    uint8_t _pad_58[0x10];
    struct Tag* ignoreVolumeTag;
    uint8_t _pad_59[0x10];
    struct Tag* ignoreEntityTag;
    uint8_t _pad_60[0x10];
    struct Tag* beingTractorBeamedTag;
    uint8_t _pad_61[0x10];
    struct Tag* contractedTag;
    uint8_t _pad_62[0x10];
    struct Tag* showLifetimeTag;
    uint8_t _pad_63[0x10];
    _Bool checkParentForIgnoreTag;
    uint8_t _pad_64[0x7];
    struct SSCSignatureEmitterParams* signatureEmitterParams;
    uint8_t _pad_65[0x8];
};




struct SWeaponConditionHasTags {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
};




struct Skill {
    uint8_t _pad_0[0x8];
    _Bool isSkill;
    _Bool optional;
    uint8_t _pad_1[0x2];
    enum ARDataType skillType;
    float skillLevel;
    uint8_t _pad_2[0x4];
    struct Tag* skillTag;
    uint8_t _pad_3[0x10];
    struct CryStringT* categoryName;
    uint8_t _pad_4[0x8];
    struct DynArray_Skill* skills;
    uint8_t _pad_5[0x28];
};




struct SkillDefinitions {
    uint8_t _pad_0[0x8];
    struct TagList* descriptionTags;
    uint8_t _pad_1[0x30];
    struct TagList* traits;
    uint8_t _pad_2[0x30];
    struct DynArray_Skill* skills;
    uint8_t _pad_3[0x28];
};




struct SkinInteractableTemplate {
    uint8_t _pad_0[0x8];
    enum ARDataType Type;
    uint8_t _pad_1[0x4];
    struct DynArray_SInteractionPointParams* InteractionPoints;
    uint8_t _pad_2[0x28];
};




struct SkinInteractableTemplates {
    uint8_t _pad_0[0x8];
    struct DynArray_SkinInteractableTemplate* Templates;
    uint8_t _pad_1[0x28];
};




struct TQSInputBoolValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    _Bool value;
    uint8_t _pad_3[0x7];
    struct DynArray_TQSInputBoolValue* overrides;
    uint8_t _pad_4[0x28];
};




struct TQSInputDynamicVariableValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    struct CryStringT* value;
    uint8_t _pad_3[0x8];
    struct DynArray_TQSInputDynamicVariableValue* overrides;
    uint8_t _pad_4[0x28];
};




struct TQSInputFloatValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    float value;
    uint8_t _pad_3[0x4];
    struct DynArray_TQSInputFloatValue* overrides;
    uint8_t _pad_4[0x28];
};




struct TQSInputIntValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    int32_t value;
    uint8_t _pad_3[0x4];
    struct DynArray_TQSInputIntValue* overrides;
    uint8_t _pad_4[0x28];
};




struct TQSInputStringValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    struct CryStringT* value;
    uint8_t _pad_3[0x8];
    struct DynArray_TQSInputStringValue* overrides;
    uint8_t _pad_4[0x28];
};




struct TQSInputTagValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    struct TagsDNF* value;
    uint8_t _pad_3[0x60];
    struct DynArray_TQSInputTagValue* overrides;
    uint8_t _pad_4[0x28];
};




struct TQSWeightDynamicVariableValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    float weight;
    uint8_t _pad_3[0x4];
    struct CryStringT* value;
    uint8_t _pad_4[0x8];
    struct DynArray_TQSWeightDynamicVariableValue* overrides;
    uint8_t _pad_5[0x28];
};




struct TQSWeightInputFloatValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    float weight;
    uint8_t _pad_3[0x4];
    float value;
    uint8_t _pad_4[0x4];
    struct DynArray_TQSWeightInputFloatValue* overrides;
    uint8_t _pad_5[0x28];
};




struct TQSWeightInputIntValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    float weight;
    uint8_t _pad_3[0x4];
    int32_t value;
    uint8_t _pad_4[0x4];
    struct DynArray_TQSWeightInputIntValue* overrides;
    uint8_t _pad_5[0x28];
};




struct TQSWeightInputTagValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    float weight;
    uint8_t _pad_3[0x4];
    struct TagsDNF* value;
    uint8_t _pad_4[0x60];
    struct DynArray_TQSWeightInputTagValue* overrides;
    uint8_t _pad_5[0x28];
};




struct TQSWeightInputValue {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    float weight;
    uint8_t _pad_3[0x4];
    struct DynArray_TQSWeightInputValue* overrides;
    uint8_t _pad_4[0x28];
};




struct Tag {
    uint8_t _pad_0[0x8];
    uint32_t legacyGUID;
    uint8_t _pad_1[0x4];
    struct CryStringT* tagName;
    uint8_t _pad_2[0x8];
    struct DynArray_Tag* children;
    uint8_t _pad_3[0x30];
};




struct TagDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
};




struct TagList {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* tags;
    uint8_t _pad_1[0x28];
};




struct TagSearchTerm {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* positiveTags;
    uint8_t _pad_1[0x28];
    struct DynArray_Tag* negativeTags;
    uint8_t _pad_2[0x28];
};




struct TagsDNF {
    uint8_t _pad_0[0x8];
    struct DynArray_TagsDNFTerm* terms;
    uint8_t _pad_1[0x58];
};




struct TagsDNFTerm {
    uint8_t _pad_0[0x8];
    struct DynArray_Tag* positiveTags;
    uint8_t _pad_1[0x28];
    struct DynArray_Tag* negativeTags;
    uint8_t _pad_2[0x28];
};




struct TintPalette {
    uint8_t _pad_0[0x8];
    struct DynArray_TintPalette* children;
    uint8_t _pad_1[0x28];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    _Bool inheritsParams;
    uint8_t _pad_3[0x7];
    struct TintEntry* entryA;
    uint8_t _pad_4[0x28];
    struct TintEntry* entryB;
    uint8_t _pad_5[0x28];
    struct TintEntry* entryC;
    uint8_t _pad_6[0x28];
    struct SRGB8* glassColor;
    uint8_t _pad_7[0x8];
    struct CryStringT* decalTexture;
    uint8_t _pad_8[0x8];
    struct SRGB8* decalColorR;
    uint8_t _pad_9[0x8];
    struct SRGB8* decalColorG;
    uint8_t _pad_10[0x8];
    struct SRGB8* decalColorB;
    uint8_t _pad_11[0x8];
};




struct UIGraph_DockingGroup {
    uint8_t _pad_0[0x8];
    struct DynArray_CtxGraph_Context* contexts;
    uint8_t _pad_1[0x28];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    struct DynArray_UIGraph_Group* childGroups;
    uint8_t _pad_3[0x28];
    _Bool indexContexts;
    uint8_t _pad_4[0x7];
};




struct UIGraph_Group {
    uint8_t _pad_0[0x8];
    struct DynArray_CtxGraph_Context* contexts;
    uint8_t _pad_1[0x28];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    struct DynArray_UIGraph_Group* childGroups;
    uint8_t _pad_3[0x28];
    _Bool indexContexts;
    uint8_t _pad_4[0x7];
};




struct UIOwnerEntityComponentParams {
    uint8_t _pad_0[0x18];
    _Bool startOpen;
    _Bool areScreens3D;
    _Bool areSounds3D;
    _Bool hasActions;
    uint8_t _pad_1[0x4];
    struct UIElement* element;
    uint8_t _pad_2[0x10];
    struct CryStringT* domainName;
    uint8_t _pad_3[0x8];
    struct CtxGraph* graph;
    uint8_t _pad_4[0x10];
    float loadDistance;
    uint8_t _pad_5[0x4];
    struct CryStringT* moviePath;
    uint8_t _pad_6[0x8];
    struct CryStringT* variantName;
    uint8_t _pad_7[0x8];
    struct CryStringT* invariantName;
    uint8_t _pad_8[0x8];
    _Bool movieAutoPlay;
    _Bool loopMovie;
    _Bool forceFlashColourCorrection;
    _Bool ignoreTrackviewUnloadRequests;
    _Bool reflectLocalStateMachine;
    _Bool reflectLinkedStateMachines;
    uint8_t _pad_9[0x2];
    struct DynArray_Tag* visibiltyTags;
    uint8_t _pad_10[0x28];
};




struct UsableAlignmentSlot {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    _Bool available;
    _Bool canPlayerUse;
    uint8_t _pad_3[0x6];
    struct DynArray_SInteractionPointParams* interactionPoints;
    uint8_t _pad_4[0x28];
    struct CryStringT* fragmentTag;
    uint8_t _pad_5[0x8];
    struct DynArray_Tag* optionalGameTags;
    uint8_t _pad_6[0x28];
    struct CryStringT* slottedFragmentTag;
    uint8_t _pad_7[0x10];
    struct CryStringT* helperName;
    uint8_t _pad_8[0x8];
    struct QuatT* relativeTransform;
    uint8_t _pad_9[0x50];
    _Bool entityRelativeRotation;
    _Bool entityRelativeTranslation;
    uint8_t _pad_10[0x2];
    enum ARDataType linkMode;
    enum ARDataType stance;
    _Bool useHandIK;
    _Bool useADIK;
    uint8_t _pad_11[0x2];
    struct SUsableViewParams* viewParams;
    uint8_t _pad_12[0x10];
    struct SUsableEnterTransitionParams* enterParams;
    uint8_t _pad_13[0x60];
    struct SUsableExitTransitionParams* exitParams;
    uint8_t _pad_14[0x70];
    struct SUsableIdleParams* usableIdleParams;
    uint8_t _pad_15[0x30];
    struct SUsableAttachFlagParams* additionalAttachmentFlags;
    uint8_t _pad_16[0x8];
};




struct UsableSlottingSetup {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct UsableSlottingReferenceElementBase* routingElement;
    uint8_t _pad_2[0x8];
    struct DynArray_UsableAlignmentSlot* orderedAlignmentSlotsToBeOverriden;
    uint8_t _pad_3[0x28];
    struct DynArray_UsableUseSlot* useSlots;
    uint8_t _pad_4[0x28];
    struct CryStringT* fragmentTagsForSlot;
    uint8_t _pad_5[0x8];
};




struct UsableUseChannelInstance {
    uint8_t _pad_0[0x8];
    struct UseChannelArchetype* useChannelArchetype;
    uint8_t _pad_1[0x10];
    struct DynArray_AlignmentSlotBase* alignmentSlots;
    uint8_t _pad_2[0x28];
    struct InteractionConditionList* conditionList;
    uint8_t _pad_3[0x8];
    struct DynArray_UsableUseChannelInstance* useChannelInstancesToEnable;
    uint8_t _pad_4[0x28];
    struct DynArray_UsableUseChannelInstance* useChannelInstancesToDisable;
    uint8_t _pad_5[0x28];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_6[0x8];
    _Bool triggerInteractionOnSlottedUsables;
    uint8_t _pad_7[0x3];
    enum ARDataType stance;
    _Bool isEnabled;
    _Bool isAvailableOnlyForRouting;
    _Bool isAvailableWhenHoldingTheUsable;
    _Bool shouldValidateExitAnimations;
    uint8_t _pad_8[0x4];
    struct CryStringT* fragmentTag;
    uint8_t _pad_9[0x8];
    struct SSequencerDefSequenceParams* preparationSequence;
    uint8_t _pad_10[0x8];
    struct DynArray_Tag* tagsToAddOnEnter;
    uint8_t _pad_11[0x28];
    struct DynArray_Tag* tagsToRemoveOnEnter;
    uint8_t _pad_12[0x28];
    struct DynArray_Tag* tagsToAddOnExit;
    uint8_t _pad_13[0x28];
    struct DynArray_Tag* tagsToRemoveOnExit;
    uint8_t _pad_14[0x28];
};




struct UsableUseSlot {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool available;
    uint8_t _pad_2[0x7];
    struct DynArray_UsableUseChannelInstance* useChannelInstances;
    uint8_t _pad_3[0x28];
    struct DynArray_UsableItemPort* usableItemPorts;
    uint8_t _pad_4[0x28];
    struct DynArray_UsableUseSlot* useSlotsToDisable;
    uint8_t _pad_5[0x28];
    enum ARDataType useSlotReenablePoint;
    enum ARDataType stance;
    struct QuatT* relativeTransform;
    uint8_t _pad_6[0x50];
    struct CryStringT* additionalFragmentTags;
    uint8_t _pad_7[0x8];
    struct DynArray_Tag* optionalGameTags;
    uint8_t _pad_8[0x28];
    _Bool isScoochable;
    _Bool alignWithGravity;
    _Bool syncAnimationWithUser;
    uint8_t _pad_9[0x5];
};




struct UserArrayElement {
    uint8_t _pad_0[0x8];
    int32_t intVar;
    float floatVar;
    struct CryStringT* stringVar;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* locVar;
    struct DynArray_UserArrayElement* array;
    uint8_t _pad_2[0x28];
};




struct UserArraysComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    int32_t itemsPerPage;
    uint8_t _pad_2[0x4];
    struct DynArray_UserArrayElement* array;
    uint8_t _pad_3[0x28];
    struct DynArray_BuildingBlocks_StaticVariableArray* alternateArray;
    uint8_t _pad_4[0x28];
};




struct VehicleEditorAvailableVehiclesData {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* vehicles;
    uint8_t _pad_1[0x28];
    struct DynArray_EntityClassDefinition* uneditableVehicles;
    uint8_t _pad_2[0x28];
};




struct VehicleEditorGroupEquipData {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityClassDefinition* allowedVehicles;
    uint8_t _pad_1[0x28];
    struct VehicleEditorPortsData* visibleItemPorts;
    uint8_t _pad_2[0x60];
    _Bool forceExposingItemPorts;
    _Bool showOtherItems;
    uint8_t _pad_3[0x6];
    struct DynArray_VehicleEditorGroupData* availableGroups;
    uint8_t _pad_4[0x28];
};




struct VehicleEditorItemOffsets {
    uint8_t _pad_0[0x8];
    struct Vec3* orientationOffset;
    uint8_t _pad_1[0x10];
    struct Vec3* scaleOffset;
    uint8_t _pad_2[0x10];
    struct DynArray_EntityClassDefinition* items;
    uint8_t _pad_3[0x28];
    struct DynArray_SItemPortDefTypes* itemTypes;
    uint8_t _pad_4[0x28];
};




struct VehicleEditorManagerParams {
    uint8_t _pad_0[0x18];
    struct VehicleEditorAvailableVehiclesData* offlineVehicles;
    uint8_t _pad_1[0x10];
    struct VehicleEditorEditableCategoriesData* editableCategories;
    uint8_t _pad_2[0x10];
    struct VehicleEditorAvailableItemsData* offlineItems;
    uint8_t _pad_3[0x10];
    struct DynArray_VehicleEditorAutoEquipData* autoEquipData;
    uint8_t _pad_4[0x28];
    struct DynArray_VehicleEditorGroupEquipData* groupEquipData;
    uint8_t _pad_5[0x28];
    _Bool recursiveItemPortIteration;
    uint8_t _pad_6[0x7];
};




struct VehicleEditorUIData {
    uint8_t _pad_0[0x8];
    struct DynArray_VehicleEditorStat* stats;
    uint8_t _pad_1[0x28];
    struct DynArray_VehicleEditorCapabilities* vehicleCapabilities;
    uint8_t _pad_2[0x28];
    struct DynArray_VehicleEditorItemStatData* itemStats;
    uint8_t _pad_3[0x28];
    struct DynArray_VehicleEditorItemOffsets* itemOffsets;
    uint8_t _pad_4[0x38];
};




struct VisorLens_Layout {
    uint8_t _pad_0[0x8];
    struct DynArray_VisorLens_Region* regions;
    uint8_t _pad_1[0x28];
};




struct VisorLens_Region {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Deg3* orientation;
    uint8_t _pad_2[0x18];
    struct Vec3* size;
    uint8_t _pad_3[0x10];
    struct Vec3* anchor;
    uint8_t _pad_4[0x10];
    struct Vec3* pivot;
    uint8_t _pad_5[0x10];
    enum ARDataType flexDirection;
    enum ARDataType flexAxisJustification;
    enum ARDataType flexCrossAxisJustification;
    enum ARDataType flexItemAlignment;
    struct DynArray_VisorLens_Widget* widgets;
    uint8_t _pad_6[0x28];
};




struct VisorLens_Widget {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* namespace_;
    uint8_t _pad_2[0x8];
    struct Vec3* size;
    uint8_t _pad_3[0x10];
    struct Ang3* orientation;
    uint8_t _pad_4[0x10];
    int32_t slot;
    uint8_t _pad_5[0x4];
    struct DynArray_Tag* showTags;
    uint8_t _pad_6[0x28];
    struct DynArray_Tag* hideTags;
    uint8_t _pad_7[0x28];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_8[0x10];
};




struct mobiGlasApp {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* bindingsNamespace;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_Canvas* appCanvas;
    uint8_t _pad_3[0x10];
    struct BuildingBlocks_Canvas* homeCanvas;
    uint8_t _pad_4[0x10];
    struct CryStringT* displayIcon;
    uint8_t _pad_5[0x8];
    struct CryStringT* displayIcon3d;
    uint8_t _pad_6[0x8];
    struct CLocIdentifier* displayName;
    struct SRGBA8* appColor;
    uint8_t _pad_7[0x8];
    _Bool isHidden;
    uint8_t _pad_8[0x7];
    struct DynArray_MobiGlasAppData* defaultAppData;
    uint8_t _pad_9[0x28];
    struct SMobiGlasAppParamsBase* appParams;
    uint8_t _pad_10[0x8];
    struct DynArray_mobiGlasApp* hostingApps;
    uint8_t _pad_11[0x28];
    _Bool legacyApp;
    uint8_t _pad_12[0x7];
};
# 31005 "structs.h"
struct PlayerGroupManagerNotificationsParams {
    uint8_t _pad_0[0x8];
    struct PlayerGroupManagerNotificationParams* inviteSent;
    uint8_t _pad_1[0x60];
    struct PlayerGroupManagerNotificationParams* inviteReceived;
    uint8_t _pad_2[0x60];
    struct PlayerGroupManagerNotificationParams* memberJoined;
    uint8_t _pad_3[0x60];
    struct PlayerGroupManagerNotificationParams* inviteDeclined;
    uint8_t _pad_4[0x60];
    struct PlayerGroupManagerNotificationParams* localPlayerJoined;
    uint8_t _pad_5[0x60];
    struct PlayerGroupManagerNotificationParams* localPlayerJoinedAuto;
    uint8_t _pad_6[0x60];
    struct PlayerGroupManagerNotificationParams* localPlayerLeft;
    uint8_t _pad_7[0x60];
    struct PlayerGroupManagerNotificationParams* localPlayerKicked;
    uint8_t _pad_8[0x60];
    struct PlayerGroupManagerNotificationParams* groupDisbanded;
    uint8_t _pad_9[0x60];
    struct PlayerGroupManagerNotificationParams* groupCreated;
    uint8_t _pad_10[0x60];
    struct PlayerGroupManagerNotificationParams* leaderChanged;
    uint8_t _pad_11[0x60];
    struct PlayerGroupManagerNotificationParams* memberLeft;
    uint8_t _pad_12[0x60];
    struct PlayerGroupManagerNotificationParams* memberKicked;
    uint8_t _pad_13[0x60];
    struct PlayerGroupManagerNotificationParams* inviteTimeout;
    uint8_t _pad_14[0x60];
    struct PlayerGroupManagerNotificationParams* invitationFailed;
    uint8_t _pad_15[0x60];
};




struct ShakeComponentParams {
    uint8_t _pad_0[0x18];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct SUnifiedShakeParamsRecord* unifiedShakeParams;
    uint8_t _pad_2[0x10];
    struct SBezierCurveRecord* distanceIntensityCurve;
    uint8_t _pad_3[0x10];
};




struct StatusPriorityActorStatus {
    uint8_t _pad_0[0x8];
    enum ARDataType associatedWidget;
    uint8_t _pad_1[0x4];
    enum ARDataType actorStatusType;
    enum ARDataType sourceStatType;
};




struct AISeatQuantumDriveControllerComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_BindingsLocalizedFromInteger {
    uint8_t _pad_0[0x50];
    int64_t defaultNZeros;
    struct BuildingBlocks_BindingsIntegerBase* nZeros;
    uint8_t _pad_1[0x8];
    _Bool withSeparators;
    uint8_t _pad_2[0x7];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_3[0xb8];
};




struct ItemHeatModifierParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    float heatGenerationMultiplier;
    uint8_t _pad_2[0x4];
};




struct LinkedStatPassIncreaseToValue {
    uint8_t _pad_0[0x8];
    float targetValue;
    uint8_t _pad_1[0x4];
};




struct SCItemControlBaseParams {
    uint8_t _pad_0[0x8];
};




struct EntityComponentCommsChannelParams {
    uint8_t _pad_0[0x18];
    enum ARDataType channelJoinType;
    uint8_t _pad_1[0x3];
    float channelLeaveTimer;
    float channelForceLeaveRange;
    uint8_t _pad_2[0x4];
};




struct CraftingResult_Base {
    uint8_t _pad_0[0x8];
};




struct SSCActorProceduralRecoilComponentParams {
    uint8_t _pad_0[0x18];
};




struct SIVictoryConditionsModule {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_TRBL {
    uint8_t _pad_0[0x8];
    float top;
    float right;
    float bottom;
    float left;
    float front;
    float back;
};




struct SHackingAgentParamsPreset {
    uint8_t _pad_0[0x8];
    float size;
    float speed;
    float visibilityRadius;
    uint8_t _pad_1[0x4];
    struct SHackingAIParams* aiParams;
    uint8_t _pad_2[0x8];
    struct SHackingAbilityParams* nodeSwapAbilityParams;
    uint8_t _pad_3[0x8];
    struct SHackingAbilityParams* injectAbilityParams;
    uint8_t _pad_4[0x8];
    struct SHackingAbilityPingParams* pingAbilityParams;
    uint8_t _pad_5[0x8];
    struct SHackingAbilitySlowdownParams* slowdownAbilityParams;
    uint8_t _pad_6[0x8];
    struct SHackingAbilityParams* wrapAroundAbilityParams;
    uint8_t _pad_7[0x8];
};




struct SSequencerBespokeTakeCarryableTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* fragmentId;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragTag;
    uint8_t _pad_2[0x8];
};




struct CinematicTriggerMPOptions {
    uint8_t _pad_0[0x8];
    _Bool networked;
    _Bool perPlayer;
    uint8_t _pad_1[0x2];
    int32_t minPlayers;
};




struct SAtmosphericCompositionInheritPlanet {
    uint8_t _pad_0[0x8];
};




struct SDashboardInteractionParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* flightReady;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* powerOn;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* powerOff;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* saveQuitInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* atcOpenDoorsInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* atcCloseDoorsInteraction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* ejectCargo;
    uint8_t _pad_7[0x8];
    _Bool hasSimpleStartupSequence;
    _Bool closeDoorsWhenFlightReady;
    uint8_t _pad_8[0x6];
};




struct LedgeTransitionParams {
    uint8_t _pad_0[0x8];
    float minHeight;
    float lowMaxHeight;
    float mediumMaxHeight;
    float highMaxHeight;
    float ultraMaxHeight;
    float lowMinWarpDepth;
    float mediumMinWarpDepth;
    float highMinWarpDepth;
    float ultraMinWarpDepth;
    float walkSlowTimeScale;
    float walkFastTimeScale;
    float runSlowTimeScale;
    float runFastTimeScale;
    float sprintTimeScale;
};




struct MoveViewRestrictionWeighting {
    uint8_t _pad_0[0x8];
    float HelmetWeighting;
    float CoreWeighting;
    float LegsWeighting;
    float ArmsWeighting;
};




struct FlightControllerHydrogenFuelStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* full;
    uint8_t _pad_1[0x8];
    struct SInteractionState* warning_75;
    uint8_t _pad_2[0x8];
    struct SInteractionState* warning_50;
    uint8_t _pad_3[0x8];
    struct SInteractionState* warning_25;
    uint8_t _pad_4[0x8];
    struct SInteractionState* warning_10;
    uint8_t _pad_5[0x8];
    struct SInteractionState* depleted;
    uint8_t _pad_6[0x8];
};




struct InteractionConditionInteractableIsIncapacitatedActor {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct DesignerNavigationVolumeParams {
    uint8_t _pad_0[0x18];
};




struct ItemRoomResourcePair {
    uint8_t _pad_0[0x8];
    struct ResourceType* resourceGasRef;
    uint8_t _pad_1[0x10];
    struct GasParams* roomGasRef;
    uint8_t _pad_2[0x10];
};




struct CameraTargetOffsetConfig {
    uint8_t _pad_0[0x8];
    struct Vec3* targetPositionOffset;
    uint8_t _pad_1[0x10];
    struct Vec3* userTargetOffsetMin;
    uint8_t _pad_2[0x10];
    struct Vec3* userTargetOffsetMax;
    uint8_t _pad_3[0x10];
    float userTargetOffsetSpeed;
    float smoothTime;
};




struct InteriorMapWorldUIConfig {
    uint8_t _pad_0[0x8];
    struct InteriorMapWorldUISectionLabelsParams* sectionLabels;
    uint8_t _pad_1[0x8];
    struct InteriorMapWorldUIRoomLabelsParams* roomLabels;
    uint8_t _pad_2[0x8];
    struct InteriorMapWorldUIRoutePathLineParams* routePathLine;
    uint8_t _pad_3[0x8];
    struct InteriorMapWorldUIZoneHostPlanarGridParams* zoneHostPlanarGrid;
    uint8_t _pad_4[0x8];
    struct InteriorMapWorldUIFocusPointPlanarGridParams* focusPointPlanarGrid;
    uint8_t _pad_5[0x8];
    struct InteriorMapWorldUICursorPointParams* cursorPoint;
    uint8_t _pad_6[0x8];
    struct InteriorMapWorldUIDustParticlesParams* dustParticles;
    uint8_t _pad_7[0x8];
};




struct CommsAudioEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* busName;
    uint8_t _pad_1[0x8];
    enum ARDataType locationId;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_BindingsPathStructure {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct PlayerAnimatedInteractionCustom {
    uint8_t _pad_0[0x8];
    struct PlayerAnimatedInteraction* playerAnimatedInteraction;
    uint8_t _pad_1[0x60];
};




struct SCItemRadarPingProperties {
    uint8_t _pad_0[0x8];
    float cooldownTime;
    uint8_t _pad_1[0x4];
};




struct SRaceCheckpointObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct SMisfireSeverityFactors {
    uint8_t _pad_0[0x8];
    float degradation;
    float damage;
    float heat;
    float distortion;
};




struct VehicleEditorTerminalParams {
    uint8_t _pad_0[0x18];
    struct VehicleEditorUIData* uiData;
    uint8_t _pad_1[0x10];
    _Bool autoSelectLonelyVehicle;
    _Bool autoSelectFirstCategory;
    uint8_t _pad_2[0x2];
    enum ARDataType selectionBehaviour;
};




struct ShieldTypeParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* impactEffect;
    uint8_t _pad_1[0x10];
    struct SRGB8* minHealthColor;
    uint8_t _pad_2[0x8];
    struct SRGB8* maxHealthColor;
    uint8_t _pad_3[0x8];
    float maxDamageStrength;
    float sizeScaleMultiplier;
    float sizeScale1stPerson;
    float alphaScaleDefault;
    float alphaScale1stPerson;
    int32_t maxHitImpact;
};




struct SCItemControllableSimpleParams {
    uint8_t _pad_0[0x10];
    uint8_t priority;
    uint8_t _pad_1[0x7];
};




struct SShieldAbsorption {
    uint8_t _pad_0[0x8];
    float Max;
    float Min;
};




struct MobiGlasPositionParams {
    uint8_t _pad_0[0x8];
    struct Vec3* offset;
    uint8_t _pad_1[0x10];
    float scale;
    float angle;
    float tilt;
    uint8_t _pad_2[0x4];
};




struct SpectatorModeParams {
    uint8_t _pad_0[0x8];
    enum ARDataType spectatorMode;
    uint8_t _pad_1[0x4];
    struct Camera* cameraRecord;
    uint8_t _pad_2[0x10];
    _Bool availableToPlayers;
    uint8_t _pad_3[0x7];
};




struct SSequencerBespokePlaceCarryableTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* fragmentId;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragTag;
    uint8_t _pad_2[0x8];
};




struct CustomFloat {
    uint8_t _pad_0[0x8];
};




struct S42Commendation {
    uint8_t _pad_0[0x8];
    struct CryStringT* imagePath;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* toolTipText;
};




struct HygieneParams {
    uint8_t _pad_0[0x8];
    struct StatusSweatingParams* sweatingParams;
    uint8_t _pad_1[0x8];
    struct StatusBloodParams* bloodParams;
    uint8_t _pad_2[0x8];
};




struct BasePortRefillData {
    uint8_t _pad_0[0x8];
};




struct SEntityTraversingNodeId {
    uint8_t _pad_0[0x8];
};




struct GlobalResourceMaterial {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct CameraDOFFocusDistanceConfig {
    uint8_t _pad_0[0x8];
    float focusDistance;
    float minFocusDistance;
    float maxFocusDistance;
    float focusDistanceSpeed;
};




struct SetCloneLocationMedicalTier {
    uint8_t _pad_0[0x8];
    enum ARDataType locationMedicalTier;
    uint8_t _pad_1[0x4];
};




struct SSimulationParamsPendulum {
    uint8_t _pad_0[0x8];
    _Bool UseRedirect;
    _Bool UseDebugSetup;
    _Bool UseDebugText;
    _Bool UseSimulation;
    uint8_t SimFPS;
    uint8_t _pad_1[0x3];
    struct Vec3* PivotOffset;
    uint8_t _pad_2[0x10];
    struct Vec3* SimulationAxis;
    uint8_t _pad_3[0x10];
    float Mass;
    float Gravity;
    float Damping;
    float JointSpring;
    struct Vec2* SpringTarget;
    uint8_t _pad_4[0x8];
    float ConeAngle;
    float HingeRotation;
    struct Vec2* Capsule;
    uint8_t _pad_5[0x8];
};




struct TriggerSubConditionInnerThoughtOptionDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* npcGUID;
    uint8_t _pad_1[0x8];
    struct CryStringT* interactionPoint;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* optionDisplayName;
    enum ARDataType cursorType;
    uint8_t _pad_3[0x4];
};




struct BuildingBlocks_BindingsLocalizedCurrencyFromNumber {
    uint8_t _pad_0[0x50];
    uint8_t numSignificantFigures;
    uint8_t numDecimalPlaces;
    _Bool withSeparators;
    uint8_t _pad_1[0x1];
    enum ARDataType currencyType;
    _Bool showFullValue;
    uint8_t _pad_2[0x7];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_3[0x8];
};




struct SDoorCollisionReactionRetractParams {
    uint8_t _pad_0[0x8];
    enum ARDataType CollisionReactionDirection;
    uint8_t _pad_1[0x4];
};




struct SActorHitReactionsDef {
    uint8_t _pad_0[0x8];
    float impactAccumulationTime;
    float impactReductionFromMass;
    float physicsImpactScalePlayer;
    float physicsImpactScaleAI;
    float deathAnimationInterruptionDelay;
    _Bool enableHitReactionsLight;
    _Bool enableHitReactionsMedium;
    _Bool enableHitReactionsHeavy;
    uint8_t _pad_1[0x1];
    float hitThresholdLight;
    float hitThresholdMedium;
    float hitThresholdHeavy;
    uint8_t _pad_2[0x4];
};




struct Visor_ControlHintsConfig {
    uint8_t _pad_0[0x8];
    struct ControlHintGameModeRecords* controlHintsPU;
    uint8_t _pad_1[0xa8];
    struct ControlHintGameModeRecords* controlHintsSQ42;
    uint8_t _pad_2[0xa8];
};




struct CommodityCrateComponentParams {
    uint8_t _pad_0[0x18];
};




struct SApplicationFormHead {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayImage;
    uint8_t _pad_1[0x8];
    struct CryStringT* selectedDisplayImage;
    uint8_t _pad_2[0x8];
    struct CryStringT* customHeadFile;
    uint8_t _pad_3[0x8];
};




struct SetPowerSourceStateEvent {
    uint8_t _pad_0[0x8];
    enum ARDataType newPowerSourceState;
    uint8_t _pad_1[0x7];
};




struct InnerThought_LayoutGridSetThought {
    uint8_t _pad_0[0x8];
    enum ARDataType justification;
    uint8_t _pad_1[0x4];
    struct Vec3* offset;
    uint8_t _pad_2[0x10];
    struct Quat* angle;
    uint8_t _pad_3[0x28];
};




struct SCarryableInteractionPointOffsets {
    uint8_t _pad_0[0x8];
    struct QuatT* interactionOffsetEquipped;
    uint8_t _pad_1[0x50];
    struct QuatT* interactionOffsetCarried;
    uint8_t _pad_2[0x50];
    struct QuatT* interactionOffsetInspected;
    uint8_t _pad_3[0x50];
};




struct SCItemRadarSensitivityModifier {
    uint8_t _pad_0[0x8];
    struct SCItemRadarSensitivityModifierType* modifierType;
    uint8_t _pad_1[0x8];
    float sensitivityAddition;
    uint8_t _pad_2[0x4];
};




struct SAnalyticShadowComponentParams {
    uint8_t _pad_0[0x18];
    float radius;
    float penumbraWidth;
    float maxRange;
    uint8_t _pad_1[0x4];
};




struct StarMapAssetManagerLocationParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* previewImagePath;
    uint8_t _pad_1[0x8];
    struct CryStringT* previewIconPath;
    uint8_t _pad_2[0x8];
};




struct QuantumDriveLocTypeMusicMap {
    uint8_t _pad_0[0x8];
    struct MusicLogicEvent* musicLogicEvent;
    uint8_t _pad_1[0x10];
    struct GlobalResourceAudio* musicWwiseEvent;
    uint8_t _pad_2[0x18];
    enum ARDataType type_;
    uint8_t _pad_3[0x4];
};




struct AeroSurface {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Vec3* offset;
    uint8_t _pad_2[0x10];
    struct Vec2* size;
    uint8_t _pad_3[0x8];
    struct Vec3* orientation;
    uint8_t _pad_4[0x10];
    _Bool flatPlateSurface;
    uint8_t _pad_5[0x3];
    float liftLevelFlight;
    float peakLift;
    float minLift;
    float negativeAoAMultiplier;
    float flatPlateMultiplier;
    float criticalAngle;
    float fullyStalledAngle;
    struct Vec3* torqueMultiplier;
    uint8_t _pad_6[0x10];
    struct CryStringT* detachParentPartName;
    uint8_t _pad_7[0x8];
    struct CryStringT* transformParentPartName;
    uint8_t _pad_8[0x10];
};




struct SHackingGeneralSettingsPreset {
    uint8_t _pad_0[0x8];
    struct SHackingAgentParamsPreset* intruderParamsPreset;
    uint8_t _pad_1[0x10];
    struct SHackingAgentParamsPreset* defenderParamsPreset;
    uint8_t _pad_2[0x10];
    struct SHackingCodeParamsPreset* codeParamsPreset;
    uint8_t _pad_3[0x10];
    struct SHackingVisualParamsPreset* visualParamsPreset;
    uint8_t _pad_4[0x10];
    float linkPointRadius;
    float generalAINodeSwapCooldown;
    int32_t helpPagesCount;
    uint8_t _pad_5[0x4];
};




struct BuildingBlocks_BindingsPathBase {
    uint8_t _pad_0[0x8];
};




struct BreathableGasParams {
    uint8_t _pad_0[0x8];
    struct GasParams* gasToInhale;
    uint8_t _pad_1[0x10];
    struct GasParams* gasToExhale;
    uint8_t _pad_2[0x10];
    float gasMasRatio;
    float gasConversionRate;
    float gasPressureMaxEffect;
    enum ARDataType actorStatusToAffect;
};




struct UIGraph_LoadoutItemPortDockContextComponent {
    uint8_t _pad_0[0x8];
    struct LoadoutEditorComponentParams* loadoutEditorComponentParams;
    uint8_t _pad_1[0x10];
};




struct BuffDurationBase {
    uint8_t _pad_0[0x8];
};




struct CraftingGameplayProperty_Base_Int {
    uint8_t _pad_0[0x8];
    struct CraftingGameplayPropertyImpl_Base_Int* implementation;
    uint8_t _pad_1[0x8];
};




struct ActorStatusAddBuff {
    uint8_t _pad_0[0x8];
    enum ARDataType buffType;
    uint8_t _pad_1[0x4];
    struct BuffDurationBase* durationOverride;
    uint8_t _pad_2[0x8];
    struct BuffValueOverride* valueOverride;
    uint8_t _pad_3[0x8];
};




struct AbilityStaminaStates {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    enum ARDataType ability;
    uint8_t _pad_2[0x4];
    struct StaminaCost* lastingStaminaCost;
    uint8_t _pad_3[0x8];
    struct StaminaCost* instantStaminaCost;
    uint8_t _pad_4[0x8];
    float staminaToStart;
    float staminaToInterrupt;
    float staminaUsageCap;
    float staminaRegenModifier;
};




struct SAuxiliaryWeaponActionBeamParams {
    uint8_t _pad_0[0x8];
    float range;
    uint8_t _pad_1[0x4];
    struct CryStringT* helper;
    uint8_t _pad_2[0x8];
    struct SBeamGroupParams* beamGroup;
    uint8_t _pad_3[0x8];
};




struct SMFDOperatorModeConfig {
    uint8_t _pad_0[0x8];
    enum ARDataType leftCastView;
    enum ARDataType rightCastView;
    enum ARDataType primaryMFDScreenView;
    enum ARDataType secondaryMFDScreen1View;
    enum ARDataType secondaryMFDScreen2View;
    enum ARDataType secondaryMFDScreen3View;
    enum ARDataType secondaryMFDScreen4View;
    enum ARDataType secondaryMFDScreen5View;
};




struct StanceBreathModifier {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    float modifier;
    uint8_t _pad_2[0x4];
};




struct HarvestConditionInteraction {
    uint8_t _pad_0[0x8];
    _Bool includeAttachedChildren;
    _Bool allInteractionsClearSpawnPoint;
    uint8_t _pad_1[0x6];
};




struct AudioRayOcclusionParams {
    uint8_t _pad_0[0x18];
    enum ARDataType occlusionType;
    enum ARDataType occlusionCalcRule;
    struct CryStringT* rayTargetBoneName;
    uint8_t _pad_1[0x8];
};




struct SFaceHighlightingParams {
    uint8_t _pad_0[0x8];
    float wireFrameMaskPow;
    float pulseSpeed;
    _Bool highlightSymmetrical;
    uint8_t _pad_1[0x7];
    struct SRGBA8* wireFrameColour;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_BindingsTransformMultiply {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsTransformBase* input;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsTransformBase* inputB;
    uint8_t _pad_2[0xa8];
};




struct ServiceBeaconParams {
    uint8_t _pad_0[0x8];
    struct ServiceBeaconBaseParams* params;
    uint8_t _pad_1[0x8];
};




struct DamageParams {
    uint8_t _pad_0[0x8];
    struct DamageMacro* damageMacro;
    uint8_t _pad_1[0x10];
    float damageTotal;
    uint8_t _pad_2[0x24];
};




struct WalkToAlignParams {
    uint8_t _pad_0[0x8];
    float reachDistance;
    float minDistance;
    float maxWalkToTakeTime;
    float maxStuckTakeTime;
    float minimumLookAtTargetDistance;
    uint8_t _pad_1[0x4];
};




struct SGlobalHitBehaviorParams {
    uint8_t _pad_0[0x8];
    float damagePerTickUpperLimit;
    float timeUpperLimit;
};




struct ActorLookAheadTargetTracking {
    uint8_t _pad_0[0x8];
    float trackingThresholdNormal;
    float trackingThresholdExtended;
    float trackingThresholdGracePeriod;
    uint8_t _pad_1[0x4];
};




struct VehicleEditorCapability {
    uint8_t _pad_0[0x8];
    enum ARDataType statType;
    float sumWeight;
};




struct UIRenderToTextureEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* fallbackTextureOnOnload;
    uint8_t _pad_1[0x8];
    struct CryStringT* compositeMaterialName;
    uint8_t _pad_2[0x8];
    struct Tag* pickableTag;
    uint8_t _pad_3[0x10];
    struct GrabCameraControlParams* grabCameraControlParams;
    uint8_t _pad_4[0x10];
    struct UIRenderToTextureTarget* secondaryTarget;
    uint8_t _pad_5[0x8];
    enum ARDataType renderType;
    enum ARDataType directRenderStage;
    enum ARDataType pickableCollision;
    uint8_t _pad_6[0x1];
    float aspectRatioOverride;
    float fieldOfView;
    float interactionDistance;
    float transparentListDepthBias;
    _Bool hideRenderNodeOnUnload;
    _Bool renderFlashBeforeCamera;
    uint8_t _pad_7[0x2];
};




struct RentalNotificationParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* timeToRentalExpireMessage;
    struct CryStringT* rentedItemNameToken;
    uint8_t _pad_1[0x8];
    struct CryStringT* rentalDurationToken;
    uint8_t _pad_2[0x8];
};




struct SEntityPhysicsWheel {
    uint8_t _pad_0[0x8];
    struct CryStringT* wheelJoint;
    uint8_t _pad_1[0x8];
    struct CryStringT* castorJoint;
    uint8_t _pad_2[0x8];
    float radius;
    uint8_t _pad_3[0x4];
    struct Vec3* offset;
    uint8_t _pad_4[0x10];
};




struct CameraActorVibrationShakeConfig {
    uint8_t _pad_0[0x8];
    struct Ang3* offsetAngle;
    uint8_t _pad_1[0x10];
    struct Vec3* offsetPosition;
    uint8_t _pad_2[0x10];
    float timePeriod;
    _Bool enabled;
    uint8_t _pad_3[0x3];
    float frequencyNoiseFactor;
    float translationNoise;
    float rotationNoise;
    uint8_t _pad_4[0x4];
    float frequency;
    uint8_t _pad_5[0x4];
    struct BezierCurve* vibrationOutputMapping;
    uint8_t _pad_6[0x88];
    _Bool processOnlyOnVibrationIncrease;
    uint8_t _pad_7[0x3];
    float processOnlyOnVibrationIncreaseDuration;
    struct BezierCurve* processOnlyOnVibrationIncreaseTimeMapping;
    uint8_t _pad_8[0x88];
    float scaleFirstPerson;
    float scaleThirdPerson;
    float smoothFactor;
    uint8_t _pad_9[0x4];
};




struct ARMarkerPlayerOffsetParams {
    uint8_t _pad_0[0x8];
    struct Vec3* offset;
    uint8_t _pad_1[0x10];
    struct Vec3* offsetProportionPerMeter;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_BindingsColorFromNumberRGBA {
    uint8_t _pad_0[0x50];
    float defaultRedValue;
    float defaultGreenValue;
    float defaultBlueValue;
    float defaultAlphaValue;
    struct BuildingBlocks_BindingsNumberBase* inputRed;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsNumberBase* inputGreen;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsNumberBase* inputBlue;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_BindingsNumberBase* inputAlpha;
    uint8_t _pad_4[0x148];
};




struct BuildingBlocks_BindingsTagFromBoolean {
    uint8_t _pad_0[0x50];
    struct Tag* isTrue;
    uint8_t _pad_1[0x10];
    struct Tag* isFalse;
    uint8_t _pad_2[0x10];
    struct BuildingBlocks_BindingsStringBase* inputTrue;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_BindingsStringBase* inputFalse;
    uint8_t _pad_4[0x8];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_5[0xf8];
};




struct FireHazardFireProperties {
    uint8_t _pad_0[0x8];
    float fireUnderlyingGlow;
    float fireIntensityMultiplier;
    float fireFlowmapMovementSpeed;
    float fireSwirlSpeed;
    float fireMovementSpeed;
    float maximumLuminance;
};




struct SUIWarningGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct TriggeredMessage* warning;
    uint8_t _pad_1[0x8];
};




struct TransitNavigationLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkValidForAgentType;
    uint8_t _pad_1[0x8];
    struct NavigationLinkCostCustomization* costMultiplierSetup;
    uint8_t _pad_2[0x30];
    enum ARDataType linkingType;
    uint8_t _pad_3[0x4];
    struct UsableUseChannelInstance* useChannel;
    uint8_t _pad_4[0x8];
};




struct ItemResourceDeltaInject {
    uint8_t _pad_0[0x8];
    struct ItemResourceDeltaAmount* injectedDelta;
    uint8_t _pad_1[0x18];
    struct ItemResourceComposition* injectedComposition;
    uint8_t _pad_2[0x50];
};




struct SJumpTunnelFailureParams {
    uint8_t _pad_0[0x8];
    float exitAcceleration;
    float exitMaximumSpeed;
    float exitRollAcceleration;
    float exitPitchAcceleration;
    float exitYawAcceleration;
    float exitAngularVelocityMaximum;
    float ratioOfMaxDistortionDamage;
    float ratioOfMaxJDRVWearDamage;
    float ratioOfMaxQDRVWearDamage;
    float ratioOfMaxHullWearDamage;
    struct Range* teleportRangeOffset;
    uint8_t _pad_1[0x8];
    float teleportMaxHeight;
    uint8_t _pad_2[0x4];
};




struct SExtinguisherImpactParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_1[0x10];
    float distanceFromImpactPoint;
    uint8_t _pad_2[0x4];
};




struct ControlHints_KeyInput {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType deviceType;
    uint8_t _pad_2[0x4];
};




struct LightningTargetMode_Internal {
    uint8_t _pad_0[0x8];
    float strikeDensity;
    float scaleMultiplier;
    struct Range* length;
    uint8_t _pad_1[0x8];
    struct Range* distanceRange;
    uint8_t _pad_2[0x8];
    struct GlobalResourceAudio* audioEmitterTrigger;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* audioTargetTrigger;
    uint8_t _pad_4[0x18];
};




struct BuildingBlocks_FieldModifierRecordRefTypeFontStyleRecord {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_FontStyle* value;
    uint8_t _pad_1[0x10];
};




struct VehicleHUDMessagingParams {
    uint8_t _pad_0[0x18];
};




struct SHeadRecoilNoiseModifier {
    uint8_t _pad_0[0x8];
    struct Vec3* offsetModifier;
    uint8_t _pad_1[0x10];
    struct Vec3* noiseModifier;
    uint8_t _pad_2[0x10];
};




struct SSCSignatureSystemAudioSubRule {
    uint8_t _pad_0[0x8];
};




struct SEffectParamsNodeBase {
    uint8_t _pad_0[0x8];
};




struct SAnimatedOutfitSwapData {
    uint8_t _pad_0[0x8];
};




struct ServiceBeaconBaseTemplateParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* objectiveTitle;
    struct CLocIdentifier* objectiveDescription;
    _Bool canBeCreatedInMobiglas;
    uint8_t _pad_1[0x3];
    enum ARDataType serviceBeaconType;
    struct CLocIdentifier* serviceBeaconName;
    int32_t beaconTaxPercentage;
    int32_t beaconMaxPaymentAmount;
    struct MissionPropertyValue_AIName* npcRequesterNameDef;
    uint8_t _pad_2[0x40];
    struct SServiceBeaconCreatorParamsBase* npcCreatorParams;
    uint8_t _pad_3[0x8];
};




struct ContractPrerequisite_Locality {
    uint8_t _pad_0[0x8];
    struct MissionLocality* localityAvailable;
    uint8_t _pad_1[0x10];
};




struct PlacementValidatorMines {
    uint8_t _pad_0[0x8];
};




struct HealthTemplate {
    uint8_t _pad_0[0x8];
    struct BodyMapping* bodyMapping;
    uint8_t _pad_1[0x10];
    struct BodyHealthConfig* healthConfig;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeSliderMode {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct WeatherEffects_Atmosphere_PropertyValue {
    uint8_t _pad_0[0x8];
    enum ARDataType propertyType;
    uint8_t _pad_1[0x4];
    struct WeatherEffects_SpaceLoopEffect* spaceLoopEffect;
    uint8_t _pad_2[0x20];
    struct Range* interpolationRange;
    uint8_t _pad_3[0x8];
};




struct SSequencerSkeletonAnimationTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* animationName;
    uint8_t _pad_1[0x8];
    int32_t layerId;
    _Bool looping;
    uint8_t _pad_2[0x3];
    float playbackSpeed;
    float blendIn;
    float normalizedStartTime;
    enum ARDataType transitionType;
};




struct SActorForceReactionStumbleConfigDef {
    uint8_t _pad_0[0x8];
    float minAdditionalSpeed;
    float maxAdditionalSpeed;
};




struct SJumpDriveFlightLinearParams {
    uint8_t _pad_0[0x8];
    enum ARDataType linearLimiterType;
    uint8_t _pad_1[0x4];
    struct Vec3* linearAccelerationPositive;
    uint8_t _pad_2[0x10];
    struct Vec3* linearAccelerationNegative;
    uint8_t _pad_3[0x10];
    _Bool allowUsingBoost;
    uint8_t _pad_4[0x3];
    float maxSpeed;
    float maxStrafeInputs;
    float linearAccelDecay;
    _Bool useLinearInputs;
    uint8_t _pad_5[0x7];
};




struct ActorTurnAngles {
    uint8_t _pad_0[0x8];
    float defaultTurnAngle;
    float proneTurnAngle;
    float unarmedCombatTurnAngle;
    uint8_t _pad_1[0x4];
};




struct EVAConnection {
    uint8_t _pad_0[0x8];
    _Bool waitUntillFinished;
    uint8_t _pad_1[0x3];
    float delaySeconds;
    struct CryStringT* waitForEvent;
    uint8_t _pad_2[0x8];
    struct EVAState* nextState;
    uint8_t _pad_3[0x8];
};




struct FacialTrackingParams {
    uint8_t _pad_0[0x18];
};




struct PlayerInventory {
    uint8_t _pad_0[0x8];
    struct LandingZoneInventory* landingZoneInventory;
    uint8_t _pad_1[0x10];
};




struct PlanetOceanAudioComponentParams {
    uint8_t _pad_0[0x18];
    struct PlanetOceanAudioData* planetOceanAudioData;
    uint8_t _pad_1[0x10];
};




struct SActorForceReactionBlockADSConfig {
    uint8_t _pad_0[0x8];
    _Bool blockADS;
    uint8_t _pad_1[0x3];
    float triggerADSBlockDuration;
    float heldADSBlockDuration;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_BindingsIntegerArithmatic {
    uint8_t _pad_0[0x50];
    int64_t amount;
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_BindingsIntegerBase* inputL;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsIntegerBase* inputR;
    uint8_t _pad_3[0xa8];
};




struct MovementSpeedOverride {
    uint8_t _pad_0[0x8];
    enum ARDataType speedCategory;
    uint8_t _pad_1[0x3];
    float speedOverride;
};




struct AIGroupEntityParams {
    uint8_t _pad_0[0x18];
};




struct ActorStateSkeletonFilter {
    uint8_t _pad_0[0x8];
    enum ARDataType filterBySkeleton;
    uint8_t _pad_1[0x4];
};




struct SNPCObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct GlobalResourceTextureDDS {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct SSilhouetteParamsDef {
    uint8_t _pad_0[0x8];
    _Bool Enable;
    uint8_t _pad_1[0x3];
    enum ARDataType ColourSource;
    struct RGB* TintColour;
    uint8_t _pad_2[0x10];
    float TintStrength;
    float Brightness;
    float EdgeWidth;
    float EdgeIntensity;
    float FillIntensity;
    float BlurRadius;
    float EdgeGradient;
    uint8_t _pad_3[0x4];
};




struct DamageResistance {
    uint8_t _pad_0[0x8];
    _Bool IgnoreMeleeDamage;
    uint8_t _pad_1[0x7];
    struct DamageResistanceEntry* PhysicalResistance;
    uint8_t _pad_2[0x8];
    struct DamageResistanceEntry* EnergyResistance;
    uint8_t _pad_3[0x8];
    struct DamageResistanceEntry* DistortionResistance;
    uint8_t _pad_4[0x8];
    struct DamageResistanceEntry* ThermalResistance;
    uint8_t _pad_5[0x8];
    struct DamageResistanceEntry* BiochemicalResistance;
    uint8_t _pad_6[0x8];
    struct DamageResistanceEntry* StunResistance;
    uint8_t _pad_7[0x8];
};




struct SAtmosphericEffectTestsParams {
    uint8_t _pad_0[0x8];
    _Bool overrideAtmosphericTrails;
    uint8_t _pad_1[0x3];
    float overrideAtmosphericTrailValue;
    _Bool overrideAtmosphericHeating;
    uint8_t _pad_2[0x3];
    float overrideAtmosphericHeatingValue;
};




struct SARDataComponentParams {
    uint8_t _pad_0[0x18];
    enum ARDataType dataType;
    float rangeMin;
    float rangeMax;
    uint8_t _pad_1[0x4];
    struct Vec3* labelAttachOffset;
    uint8_t _pad_2[0x10];
    struct Vec3* queryOffset;
    uint8_t _pad_3[0x10];
    struct Vec3* labelScale;
    uint8_t _pad_4[0x10];
    enum ARDataType labelMovementType;
    _Bool visibleThroughWalls;
    uint8_t _pad_5[0x3];
    float labelZOrientationOffset;
    uint8_t _pad_6[0x4];
    struct CLocIdentifier* title1;
    struct CLocIdentifier* title2;
    struct CLocIdentifier* subtitle1;
    struct CLocIdentifier* subtitle2;
    struct CLocIdentifier* description;
    float scaleCapDistance;
    uint8_t _pad_7[0x4];
};




struct SActorForceReactionAnimationTwitchConfig {
    uint8_t _pad_0[0x8];
    float blendspaceMin;
    uint8_t _pad_1[0x4];
};




struct SCDynamicRigLightEnabledParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
};




struct ScanDisplayInstanceParams {
    uint8_t _pad_0[0x8];
    struct ScanDisplaySetupParams* boxoutSetup;
    uint8_t _pad_1[0x8];
    struct ScanDisplaySetupParams* displaySetup;
    uint8_t _pad_2[0x8];
};




struct ActorViewLimitPreset {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct ActorViewLimits* lookLimits;
    uint8_t _pad_2[0x20];
    struct ActorViewLimits* aimLimits;
    uint8_t _pad_3[0x20];
};




struct AeroParams {
    uint8_t _pad_0[0x8];
    _Bool enableControlSurfaces;
    uint8_t _pad_1[0x7];
    struct Vec3* controlTorque;
    uint8_t _pad_2[0x10];
    struct Vec3* dampingTorque;
    uint8_t _pad_3[0x10];
    struct Vec3* stabilityTorque;
    uint8_t _pad_4[0x10];
    float minPressureForFullControlSurfaces;
    float stallSpeedThresholdModifier;
    float peakTorqueScaleSpeed;
    uint8_t _pad_5[0x4];
    struct AerodynamicCurveParams* liftCurve;
    uint8_t _pad_6[0x28];
    struct AerodynamicCurveParams* sideLiftCurve;
    uint8_t _pad_7[0x28];
    struct BezierCurve* controlTorqueForSpeedCurve;
    uint8_t _pad_8[0x88];
    float controlTorqueForSpeedCurveMax;
    uint8_t _pad_9[0x4];
    struct DragCurveParams* drag;
    uint8_t _pad_10[0x10];
    float forwardBackThrustMultiplier;
    float zeroGLiftMultiplier;
    float zeroGDragMultiplier;
    float zeroGTorqueMultiplier;
    float maxAtmosphereDensity;
    uint8_t _pad_11[0x4];
    struct Vec3* angularThrustAtmosphericMultiplier;
    uint8_t _pad_12[0x10];
    struct Vec3* angularVelocityAtmosphericMultiplier;
    uint8_t _pad_13[0x10];
    float peakVibrationAoA;
    float minVibrationAoA;
    struct CryStringT* pitchAnimationVariable;
    uint8_t _pad_14[0x8];
    struct CryStringT* yawAnimationVariable;
    uint8_t _pad_15[0x8];
    struct CryStringT* rollAnimationVariable;
    uint8_t _pad_16[0x8];
    struct STurbulenceParams* turbulence;
    uint8_t _pad_17[0x30];
};




struct StatusPriorityStamina {
    uint8_t _pad_0[0x8];
    enum ARDataType associatedWidget;
    uint8_t _pad_1[0x4];
    float thresholdValue;
    enum ARDataType comparison;
};




struct SHackingEntitySpawnParams {
    uint8_t _pad_0[0x8];
    float initialSpawnDelay;
    float spawnDuration;
    float despawnDurationDefault;
    float despawnDurationVictory;
    float despawnDurationFailure;
    float despawnDurationAbort;
};




struct SSelfHintActivator {
    uint8_t _pad_0[0x8];
    enum ARDataType hint;
    uint8_t _pad_1[0x4];
};




struct CommsNotificationSelector {
    uint8_t _pad_0[0x8];
    enum ARDataType trigger;
    uint8_t _pad_1[0x4];
    struct ObjectivePropertyBase* communicationTags;
    uint8_t _pad_2[0x8];
};




struct ItemResourceControlConditionBase {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_TimingFunctionBase {
    uint8_t _pad_0[0x8];
};




struct SActorForceReactionCurveConfig {
    uint8_t _pad_0[0x8];
    struct SActorForceReactionCurve* returnCurve;
    uint8_t _pad_1[0x8];
    float attackDuration;
    float returnDuration;
    float returnYieldDelay;
    float returnYieldMagnitude;
};




struct ControlHintCondition_OptInEventState {
    uint8_t _pad_0[0x8];
    enum ARDataType optInEventState;
    uint8_t _pad_1[0x7];
};




struct BuildingBlocks_TriggerDirectHyperLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* link;
    uint8_t _pad_1[0x8];
};




struct CraftingGameplayPropertyRecord {
    uint8_t _pad_0[0x8];
    struct CraftingGameplayProperty_Base_NonRef* gameplayProperty;
    uint8_t _pad_1[0x8];
};




struct LinkedStat {
    uint8_t _pad_0[0x8];
    enum ARDataType linkedStat;
    uint8_t _pad_1[0x4];
    struct LinkedStatSetup* linkedStatSetup;
    uint8_t _pad_2[0x20];
};




struct SPartyMemberMarkerObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_TimingFunctionPreset {
    uint8_t _pad_0[0x8];
    enum ARDataType preset;
    uint8_t _pad_1[0x7];
};




struct EnemyAwarenessConfig {
    uint8_t _pad_0[0x8];
    struct MusicLogicParameter* numAwareEnemiesParameter;
    uint8_t _pad_1[0x10];
    struct MusicLogicParameter* numInCombatEnemiesParameter;
    uint8_t _pad_2[0x10];
};




struct SCharacterCustomizerWildlineSubconditionFeature {
    uint8_t _pad_0[0x8];
    enum ARDataType feature;
    uint8_t _pad_1[0x4];
};




struct SCItemSuitAtmosphereFuelConversionParams {
    uint8_t _pad_0[0x8];
    struct GasParams* Gas;
    uint8_t _pad_1[0x10];
    float massConversionRatio;
    uint8_t _pad_2[0x4];
};




struct MissionModifier_HostileMission {
    uint8_t _pad_0[0x8];
    struct CryStringT* modifierName;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x1f];
    struct MissionBrokerEntry* missionBrokerEntry;
    uint8_t _pad_3[0x10];
    _Bool legalToAttack;
    uint8_t _pad_4[0x7];
};




struct SZoneHostEntityHighlightNode {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_FieldModifierInteger {
    uint8_t _pad_0[0x8];
    enum ARDataType field;
    uint8_t _pad_1[0x4];
    int64_t value;
};




struct ScreenEffects_Pattern_Linear {
    uint8_t _pad_0[0x8];
    float duration;
    uint8_t _pad_1[0x4];
    _Bool mirrored;
    uint8_t _pad_2[0x7];
};




struct VehicleMasterModeScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct CLocIdentifier* displayForSCM;
    struct CLocIdentifier* displayForNAV;
};




struct CrossSectionGlobalParams {
    uint8_t _pad_0[0x8];
    struct Vec3* globalCSFactor;
    uint8_t _pad_1[0x10];
    float maxDistance;
    float lineOfSightAngle;
};




struct FloatInteractiveVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float defaultValue;
    float minValue;
    float maxValue;
    enum ARDataType loopType;
    struct InteractiveVariable_BackToDefaultFloatParams* backToDefaultParams;
    uint8_t _pad_2[0x8];
};




struct SEALoadoutExplicit {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPort;
    uint8_t _pad_1[0x8];
    struct EntityClassDefinition* itemClass;
    uint8_t _pad_2[0x10];
};




struct SeatUserActorCDIKConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* cdikTargetName;
    uint8_t _pad_1[0x8];
    struct CryStringT* IKLimbHandle;
    uint8_t _pad_2[0x8];
    struct CryStringT* parentJointName;
    uint8_t _pad_3[0x8];
    struct QuatT* cdikTargetOffset;
    uint8_t _pad_4[0x50];
    struct CryStringT* userCDIKReferenceJoint;
    uint8_t _pad_5[0x8];
};




struct UIGraph_FlashDockingStationComponent {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayName;
    uint8_t _pad_1[0x8];
};




struct ItemPortViewInformationByItemType {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
};




struct ConversationNode_Dialogue {
    uint8_t _pad_0[0x8];
    struct ConversationNode_Base* next;
    uint8_t _pad_1[0x8];
    struct DialogueContext* context;
    uint8_t _pad_2[0x10];
    float skipNodeInXSecs;
    uint8_t _pad_3[0x4];
};




struct EntityComponentWaterImpactTestParams {
    uint8_t _pad_0[0x18];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct Vec2* distributionArea;
    uint8_t _pad_2[0x8];
    float radius;
    uint8_t _pad_3[0x4];
};




struct SScopeAttachmentParams {
    uint8_t _pad_0[0x8];
    enum ARDataType scopeType;
    uint8_t _pad_1[0x4];
    struct GlobalResourceAudio* transitionInSound;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* transitionOutSound;
    uint8_t _pad_3[0x18];
    _Bool activateByDefault;
    uint8_t _pad_4[0x7];
};




struct SEntityComponentManagedEntityZoneParams {
    uint8_t _pad_0[0x18];
};




struct SPowerPlantMisfireParams {
    uint8_t _pad_0[0x8];
    _Bool reducesPower;
    uint8_t _pad_1[0x3];
    float powerReductionRatio;
};




struct AtmosphereStateBase {
    uint8_t _pad_0[0x8];
};




struct SInventoryParams {
    uint8_t _pad_0[0x18];
    struct SBaseCargoUnit* capacity;
    uint8_t _pad_1[0x8];
};




struct SCSeatItemPort {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPortName;
    uint8_t _pad_1[0x8];
};




struct ContractPrerequisite_Reputation {
    uint8_t _pad_0[0x8];
    struct FactionReputation* factionReputation;
    uint8_t _pad_1[0x10];
    struct SReputationScopeParams* scope;
    uint8_t _pad_2[0x10];
    _Bool exclude;
    uint8_t _pad_3[0x7];
    struct SReputationStandingParams* minStanding;
    uint8_t _pad_4[0x10];
    struct SReputationStandingParams* maxStanding;
    uint8_t _pad_5[0x10];
    _Bool includePrerequisiteWhenSharing;
    uint8_t _pad_6[0x7];
};




struct ItemResourceContainerPlaceholderParams {
    uint8_t _pad_0[0x18];
    float capacity;
    float defaultFullness;
    struct ItemResourceComposition* composition;
    uint8_t _pad_1[0x50];
};




struct RestrictedAreaPatchParams {
    uint8_t _pad_0[0x18];
    struct RestrictedAreaPatchTypes* patchTypes;
    uint8_t _pad_1[0x8];
    _Bool defaultActive;
    uint8_t _pad_2[0x3];
    int32_t priority;
    _Bool affectsShips;
    _Bool affectsGroundVehicles;
    _Bool affectsActors;
    uint8_t _pad_3[0x5];
};




struct SCProneMotionGraphDef {
    uint8_t _pad_0[0x8];
    float turnTriggerYawThreshold;
    uint8_t _pad_1[0x4];
};




struct BoolUserVariableTask {
    uint8_t _pad_0[0x20];
};




struct SSalvageGlobalStructuralVFXParams {
    uint8_t _pad_0[0x8];
    struct Tag* sourceResonateTag;
    uint8_t _pad_1[0x10];
    struct Tag* sourceDisintegrateTag;
    uint8_t _pad_2[0x10];
    struct Tag* sourceDisintegrateBeamTag;
    uint8_t _pad_3[0x10];
    struct Tag* sourceFieldMaterialsTag;
    uint8_t _pad_4[0x10];
    float sourceIdleFieldStrengthValue;
    float sourceMinEngagedFieldStrengthValue;
    struct Tag* sourceFieldStrengthLinkTag;
    uint8_t _pad_5[0x10];
    float targetDisintegrateDissolveTime;
    uint8_t _pad_6[0x4];
    struct GlobalResourceParticle* targetResonateParticle;
    uint8_t _pad_7[0x10];
    struct GlobalResourceParticle* targetBreakParticle;
    uint8_t _pad_8[0x10];
    struct GlobalResourceParticle* targetDisintegrateParticle;
    uint8_t _pad_9[0x10];
    struct GlobalResourceParticle* targetDisintegrateDebrisParticle;
    uint8_t _pad_10[0x10];
    struct CryStringT* vectorFieldPath;
    uint8_t _pad_11[0x8];
};




struct ContactHighlightStateBaseParams {
    uint8_t _pad_0[0x8];
    struct RGBA* color;
    uint8_t _pad_1[0x10];
};




struct TriggeredHealth {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_RadialTransform {
    uint8_t _pad_0[0x8];
    float transformMultiplier;
    enum ARDataType curvatureAxis;
    _Bool mouseTestShape;
    uint8_t polyResolution;
    uint8_t _pad_1[0x2];
    float conicSlantFactor;
};




struct EAPickupBallisticsParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float percent;
    int32_t requiredScore;
    _Bool spawnOnKill;
    _Bool enabledForFPS;
    _Bool enabledForVehicles;
    _Bool allowSpawnOnSuicide;
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
    _Bool split;
    uint8_t _pad_3[0x7];
};




struct SDespawnRule_OnStreamOut {
    uint8_t _pad_0[0x8];
    float ruleDelaySeconds;
    uint8_t _pad_1[0x4];
};




struct PlayerAnimatedInteractionFiltered {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    enum ARDataType filterByLocomotionSet;
    uint8_t _pad_2[0x4];
    struct PlayerAnimatedInteractionWalkingRequestParams* params;
    uint8_t _pad_3[0x20];
};




struct VehicleSerialNumberCharacterType {
    uint8_t _pad_0[0x8];
    struct CryStringT* possibleCharacters;
    uint8_t _pad_1[0x8];
};




struct CylinderFieldGeom {
    uint8_t _pad_0[0x8];
    struct Vec3* center;
    uint8_t _pad_1[0x10];
    struct Vec3* axis;
    uint8_t _pad_2[0x10];
    float radius;
    float hh;
};




struct SCharacterCustomizerBlemishMapParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* blemishMask;
    uint8_t _pad_1[0x8];
    struct CryStringT* blemishIdMask;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_BindingsNumberArithmatic {
    uint8_t _pad_0[0x50];
    float amount;
    enum ARDataType type_;
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsNumberBase* inputB;
    uint8_t _pad_2[0xa8];
};




struct EntitityEffectSystem_StaticColor {
    uint8_t _pad_0[0x8];
    struct Tag* parameterName;
    uint8_t _pad_1[0x10];
    struct RGB* color;
    uint8_t _pad_2[0x10];
};




struct SCSeatAccessGatewayInteractionStateParams {
    uint8_t _pad_0[0x20];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTags;
    uint8_t _pad_2[0x8];
};




struct Marker_AbilityNavpoint {
    uint8_t _pad_0[0x8];
    struct CryStringT* selectedModel;
    uint8_t _pad_1[0x8];
};




struct SecurityClearanceTokenData {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
};




struct ResourceNetworkParams {
    uint8_t _pad_0[0x8];
    _Bool enableItemResourceNetwork;
    _Bool enableSalvageItemRepair;
    _Bool enableMisfires;
    _Bool enableCriticalMisfires;
    _Bool doorsIgnoreRN;
    _Bool enableExperimentalArmorPenetration;
    uint8_t _pad_1[0x2];
};




struct GasCloudOverrideCubeVolumeParams {
    uint8_t _pad_0[0x8];
    float sizeX;
    float sizeY;
    float sizeZ;
    float fadeX;
    float fadeY;
    float fadeZ;
};




struct GlobalJumpDriveTuningEffectParams {
    uint8_t _pad_0[0x8];
    float interferenceStrength;
    float midPointForInterferencePercentage;
};




struct S42ShipStatusAllowedShipParams {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* shipClass;
    uint8_t _pad_1[0x10];
    _Bool showShields;
    _Bool showFuel;
    _Bool showOrdnance;
    _Bool showAmmo;
    uint8_t _pad_2[0x4];
};




struct WeaponControllerArmMissileStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* noMissilesAvailable;
    uint8_t _pad_1[0x8];
    struct SInteractionState* noMissilesArmed;
    uint8_t _pad_2[0x8];
    struct SInteractionState* someMissilesArmed;
    uint8_t _pad_3[0x8];
    struct SInteractionState* allMissilesArmed;
    uint8_t _pad_4[0x8];
};




struct LightGroupParams {
    uint8_t _pad_0[0x8];
    _Bool flickerOn;
    _Bool temperatureTransition;
    uint8_t _pad_1[0x2];
    int32_t transitionDelayId;
    _Bool useRandomDelayId;
    uint8_t _pad_2[0x7];
};




struct TransitCarriageEffects {
    uint8_t _pad_0[0x8];
    struct Tag* inTransitTag;
    uint8_t _pad_1[0x10];
};




struct HarvestableTagListBase {
    uint8_t _pad_0[0x8];
};




struct DissolveParams {
    uint8_t _pad_0[0x18];
    float dissolveDuration;
    _Bool startDissolved;
    uint8_t _pad_1[0x3];
};




struct ShipRecallBannedAreaParams {
    uint8_t _pad_0[0x18];
};




struct SCItemCommsControllerParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* hailTargetInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* acceptIncomingCallInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* declineIncomingCallInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* hangUpCallInteraction;
    uint8_t _pad_4[0x8];
};




struct SubHarvestableConfigRecord {
    uint8_t _pad_0[0x8];
    struct SubHarvestableConfig* subConfig;
    uint8_t _pad_1[0x50];
};




struct DynamicCameraEffects {
    uint8_t _pad_0[0x8];
    float fov;
    float fStop;
    float focalDistance;
    float focalRange;
    float focusRange;
    float focusMin;
    float focusMinScale;
    float blurAmount;
    float lerpToSpeed;
    float lerpBackTime;
    float lerpBackTimeBreak;
    float transparencyPostEffectsExclusionRegion;
    float circleOfConfusion;
    float focalRangePadding;
    float multipleTargetFStop;
    _Bool manualExposure;
    uint8_t _pad_1[0x3];
    float targetExposureValue;
    float exposureCompensation;
    float outOfFocusMaxLuminance;
    _Bool applyRendererParams;
    uint8_t _pad_2[0x3];
    struct DynamicCameraEffectsRendererParams* rendererParams;
    uint8_t _pad_3[0x18];
};




struct SEntityComponentTrackViewParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_TextFormatModifierBase {
    uint8_t _pad_0[0x8];
};




struct SWeaponActionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
};




struct RadiationBehavior_AsteroidInverseSquareSurfaceRadiationParams {
    uint8_t _pad_0[0x8];
    float scaleOnLargestAsteroid;
    uint8_t _pad_1[0x4];
    float radiusScale;
    float intensityScale;
    float intensityCutoff;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_ColorIntegerPairDef {
    uint8_t _pad_0[0x8];
    int64_t integer;
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_1[0x8];
};




struct SStateAutoChange {
    uint8_t _pad_0[0x8];
    struct SInteractionState* NextState;
    uint8_t _pad_1[0x8];
    float Delay;
    _Bool RunWhenStreamedOut;
    uint8_t _pad_2[0x3];
};




struct SItemPortDefExtensionFPS {
    uint8_t _pad_0[0x8];
    struct CryStringT* SelectTag;
    uint8_t _pad_1[0x8];
};




struct SSCSignatureSystemManualCrossSectionParams {
    uint8_t _pad_0[0x8];
    struct Vec3* crossSection;
    uint8_t _pad_1[0x10];
};




struct SStartHackingGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool useChip;
    uint8_t _pad_1[0x7];
    struct SItemPortDef* itemPort;
    uint8_t _pad_2[0x8];
    struct CryStringT* durationMultiplierName;
    uint8_t _pad_3[0x8];
    struct CryStringT* errorChanceMultiplierName;
    uint8_t _pad_4[0x8];
};




struct InnerThought_LayoutClean {
    uint8_t _pad_0[0x10];
    struct InnerThought_ColorParams* selectedColor;
    uint8_t _pad_1[0x10];
    struct InnerThought_ColorParams* unselectedColor;
    uint8_t _pad_2[0x10];
    float multiThoughtGapFactor;
    uint8_t _pad_3[0x4];
};




struct SEALoadoutSetup {
    uint8_t _pad_0[0x8];
    _Bool loadCustomizationSnapshot;
    uint8_t _pad_1[0x7];
    struct SEAGlobalSpecialLoadout* forcedLoadout;
    uint8_t _pad_2[0x10];
};




struct UIGraph_MarkerARProviderComponent {
    uint8_t _pad_0[0x8];
};




struct SimpleRotationComponentOscillation {
    uint8_t _pad_0[0x8];
    float rotationMaxAngle;
    float smoothness;
    float delay;
    uint8_t _pad_1[0x4];
};




struct ConversationNode_BaseNext {
    uint8_t _pad_0[0x8];
    struct ConversationNode_Base* next;
    uint8_t _pad_1[0x8];
};




struct SWeaponAudioParams {
    uint8_t _pad_0[0x8];
    _Bool visorAudioAvailable;
    uint8_t _pad_1[0x7];
    struct AudioRtpc* ammoCountRTPC;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* weaponPowerRTPC;
    uint8_t _pad_4[0x18];
    struct AudioRtpc* weaponHeatRTPC;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* overheatAudioTrigger;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* overheatEndAudioTrigger;
    uint8_t _pad_7[0x18];
};




struct PlayerGroupManagerObjectsLocStringParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* partyName;
};




struct CockpitRuleFloat {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float priority;
    uint8_t _pad_2[0x4];
    float value;
    uint8_t _pad_3[0x4];
};




struct TransitStationAnnouncement {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* stationName;
    struct GlobalResourceAudio* preArrival;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* postDeparture;
    uint8_t _pad_2[0x18];
};




struct RefuelBaseService {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct CLocIdentifier* productName;
    struct CryStringT* icon;
    uint8_t _pad_1[0x8];
    float serviceDelayTime;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* hudMessage;
    uint8_t _pad_3[0x8];
    _Bool instantRefuel;
    uint8_t _pad_4[0x3];
    int32_t refuelUnitPerSecond;
    struct ResourceType* fuelCommodity;
    uint8_t _pad_5[0x18];
};




struct EntityComponentDockingHubParams {
    uint8_t _pad_0[0x18];
};




struct SEntityLinkedContext {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_BindingsNumberFunction {
    uint8_t _pad_0[0x50];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x8];
};




struct ConditionProhibitedItemsDisplayParams {
    uint8_t _pad_0[0x8];
    struct BlockedTextParams* autoStoreText;
    uint8_t _pad_1[0x8];
    struct BlockedColorParams* autoStoreColor;
    uint8_t _pad_2[0x8];
};




struct SCItemCoolerParams {
    uint8_t _pad_0[0x18];
    float CoolingRate;
    float SuppressionIRFactor;
    float SuppressionHeatFactor;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_BindingsBooleanCompare {
    uint8_t _pad_0[0x50];
    _Bool value;
    uint8_t _pad_1[0x3];
    enum ARDataType type_;
    struct BuildingBlocks_BindingsBooleanBase* inputL;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsBooleanBase* inputR;
    uint8_t _pad_3[0xa8];
};




struct MineableParams {
    uint8_t _pad_0[0x18];
    struct MiningGlobalParams* globalParams;
    uint8_t _pad_1[0x10];
    struct MiningAudioParams* audioParams;
    uint8_t _pad_2[0x10];
    struct MineableComposition* composition;
    uint8_t _pad_3[0x10];
    struct SDamageCurveParams* glowCurvePoints;
    uint8_t _pad_4[0x10];
    float glowCurvePower;
    float glowLerpSpeed;
};




struct SEntityComponentUpdateProxyParams {
    uint8_t _pad_0[0x18];
};




struct SArmouryItemFilter {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* filterName;
    struct CryStringT* tags;
    uint8_t _pad_1[0x8];
};




struct JumpTunnelVibrationParams {
    uint8_t _pad_0[0x8];
    struct BezierCurve* enteringCurve;
    uint8_t _pad_1[0x88];
    struct BezierCurve* wallProximityCurve;
    uint8_t _pad_2[0x88];
    struct BezierCurve* offAxisCurve;
    uint8_t _pad_3[0x88];
    struct BezierCurve* failingCurve;
    uint8_t _pad_4[0x88];
};




struct SPerkReputationParams {
    uint8_t _pad_0[0x8];
    struct SReputationScopeParams* scope;
    uint8_t _pad_1[0x10];
    struct SReputationStandingParams* standing;
    uint8_t _pad_2[0x10];
    struct SPerkParamsBase* perk;
    uint8_t _pad_3[0x8];
};




struct SReputationContextPropertiesUI {
    uint8_t _pad_0[0x8];
    struct SReputationContextUI* context;
    uint8_t _pad_1[0x10];
};




struct SCItemProximitySensorBoxParams {
    uint8_t _pad_0[0x10];
    struct Vec3* Extent;
    uint8_t _pad_1[0x10];
    struct Vec3* Offset;
    uint8_t _pad_2[0x10];
};




struct UIGraph_MissionDockComponent {
    uint8_t _pad_0[0x8];
    enum ARDataType tab;
    uint8_t _pad_1[0x4];
};




struct MagLaunchNoiseParams {
    uint8_t _pad_0[0x8];
    float amplitude;
    float frequency;
    float octaves;
    float stillness;
};




struct BuildingBlocks_FieldModifierEnumeratedTypeTextFieldWidgetStylePreset {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    enum ARDataType paramField;
};




struct PurchasableDisplayBase {
    uint8_t _pad_0[0x8];
};




struct EASpawnNotifierParams {
    uint8_t _pad_0[0x18];
};




struct ContactHighlightShaderParams {
    uint8_t _pad_0[0x8];
    struct RGBA* color;
    uint8_t _pad_1[0x10];
    float outlineWidth;
    float alpha;
    _Bool outlineOnly;
    uint8_t _pad_2[0x3];
    float interferenceAmount;
    float interferenceSpeed;
    float interferenceTiling;
    float interferenceBrightness;
    uint8_t _pad_3[0x4];
};




struct InteractionConditionDeliveryMissionItem {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct LedgeShapeComponentParams {
    uint8_t _pad_0[0x18];
};




struct SSCRadarContactProperites {
    uint8_t _pad_0[0x8];
    struct RadarContactTypeEntry* contactType;
    uint8_t _pad_1[0x10];
    struct SSCSignatureParamsBase* baseSignatureParams;
    uint8_t _pad_2[0x8];
    struct SSCSignatureSystemCrossSectionParams* crossSectionParams;
    uint8_t _pad_3[0x8];
    struct SSCSignatureEmissionBaseModifier* emissionModifierParams;
    uint8_t _pad_4[0x8];
    struct SSCSignatureSystemScanBounds* scanBounds;
    uint8_t _pad_5[0x8];
};




struct EntitityEffectSystem_StaticFloat {
    uint8_t _pad_0[0x8];
    struct Tag* parameterName;
    uint8_t _pad_1[0x10];
    float value;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_BindingsNumberComponentParameter {
    uint8_t _pad_0[0x50];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType parameter;
    float defaultValue;
    uint8_t _pad_2[0x8];
};




struct SimpleSpriteSheet {
    uint8_t _pad_0[0x8];
    struct CryStringT* textureName;
    uint8_t _pad_1[0x8];
    uint8_t rowCount;
    uint8_t columnCount;
    uint8_t _pad_2[0x6];
};




struct VideoCommsAudioParams {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* lowTechInterferenceAudioRTPC;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* highTechInterferenceAudioRTPC;
    uint8_t _pad_2[0x18];
};




struct DigitalSignageComponentParams {
    uint8_t _pad_0[0x18];
    struct Tag* signageAspectRatio;
    uint8_t _pad_1[0x10];
    struct Tag* signageType;
    uint8_t _pad_2[0x10];
    struct BuildingBlocks_Canvas* defaultCanvas;
    uint8_t _pad_3[0x10];
};




struct SEntityPerceptionComponentParams {
    uint8_t _pad_0[0x18];
    _Bool ignoreHostiles;
    uint8_t _pad_1[0x7];
    struct AIPerceptionProfile* perceptionProfile;
    uint8_t _pad_2[0x10];
};




struct SPlayerCameraTypeAllowedParams {
    uint8_t _pad_0[0x8];
    _Bool firstPersonAllowed;
    _Bool chaseAllowed;
    _Bool orbitAllowed;
    uint8_t _pad_1[0x5];
};




struct ShipComputerDefinition {
    uint8_t _pad_0[0x8];
    float preBootUpTime;
    float bootUpTime;
    struct CommunicationConfig* communicationConfig;
    uint8_t _pad_1[0x10];
    struct AudioRtpc* timeSinceLastHitMarkerSfx;
    uint8_t _pad_2[0x18];
};




struct SCActorCollisionAvoidanceParams {
    uint8_t _pad_0[0x18];
    float passRadiusAgent;
    float passRadiusObstacleMoving;
    float passRadiusObstacleStatic;
    float baseAgentAvoidanceRange;
    float baseObstacleAvoidanceRange;
    float baseNavmeshEdgeAvoidanceRange;
    float velocityInfluenceMultiplier;
    float timeHorizonScale;
    float agentAvoidanceTimeHorizon;
    float obstacleAvoidanceTimeHorizon;
    float navmeshEdgeAvoidanceTimeHorizon;
    uint8_t _pad_1[0x4];
    struct Vec2* offsetAgent;
    uint8_t _pad_2[0x8];
    struct Vec2* offsetObstacle;
    uint8_t _pad_3[0x8];
    _Bool alwaysAnObstacle;
    _Bool preferMinSpeedDuringAvoidance;
    uint8_t _pad_4[0x6];
};




struct CloneLocationUIProviderParams {
    uint8_t _pad_0[0x18];
    struct CloneLocationMedicalTier* medicalTier;
    uint8_t _pad_1[0x8];
};




struct TaggedSubHarvestableConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct HarvestableTagListBase* tagList;
    uint8_t _pad_2[0x8];
    struct SubHarvestableConfigSingleBase* subConfig;
    uint8_t _pad_3[0x8];
};




struct OutfitParams {
    uint8_t _pad_0[0x8];
    struct Tag* outfitTag;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* outfitName;
};




struct BuildingBlocks_BindingsNumberRound {
    uint8_t _pad_0[0x50];
    uint8_t amount;
    uint8_t _pad_1[0x7];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x10];
};




struct ScanCustomData {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    enum ARDataType displaySection;
    _Bool addToBoxoutDisplay;
    _Bool displayInSameRowAsHeader;
    uint8_t _pad_1[0x5];
};




struct S42StatOperationStat {
    uint8_t _pad_0[0x8];
    enum ARDataType operationType;
    uint8_t _pad_1[0x4];
    struct S42StatId* statIdRight;
    uint8_t _pad_2[0x38];
};




struct MapDisplayParamsGalacticMap {
    uint8_t _pad_0[0x8];
    float displayRegionHeightPixels;
    uint8_t _pad_1[0x4];
};




struct AccessibilityExteriorZoneParams {
    uint8_t _pad_0[0x8];
    float accessibleTimingInTransit;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_FieldModifierColor {
    uint8_t _pad_0[0x8];
    enum ARDataType field;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_2[0x8];
};




struct SWeaponActionAIParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType aiShootingMode;
    uint8_t _pad_2[0x7];
};




struct ItemResourceDeltaStorage {
    uint8_t _pad_0[0x8];
    struct ItemResourceDeltaAmount* consumption;
    uint8_t _pad_1[0x18];
    struct ItemResourceDeltaAmount* generation;
    uint8_t _pad_2[0x18];
    _Bool discharge;
    uint8_t _pad_3[0x7];
    struct ItemResourceComposition* consumptionComposition;
    uint8_t _pad_4[0x50];
    struct ItemResourceDynamicResourceBase* dynamicResourceOverride;
    uint8_t _pad_5[0x8];
    struct FunctionalityModifiers* transferModifiers;
    uint8_t _pad_6[0x8];
};




struct GameModeFilter {
    uint8_t _pad_0[0x8];
    enum ARDataType id;
    _Bool visibleToPlayers;
    uint8_t _pad_1[0x3];
    struct CLocIdentifier* displayName;
};




struct SEffectInputParamsSound {
    uint8_t _pad_0[0x8];
    struct CryStringT* VarName;
    uint8_t _pad_1[0x8];
    struct CryStringT* ParamName;
    uint8_t _pad_2[0x8];
    float MinRange;
    float MaxRange;
    float Multiplier;
    float LerpTime;
    struct Vec3* VecGoal;
    uint8_t _pad_3[0x10];
    float DefaultValue;
    uint8_t _pad_4[0x4];
    struct Vec3* Axis;
    uint8_t _pad_5[0x10];
    enum ARDataType Type;
    uint8_t _pad_6[0x4];
};




struct SMissileEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct BlueprintCategoryAvailabilityRecord {
    uint8_t _pad_0[0x8];
    struct BlueprintCategoryAvailability_Base_NonRef* categoryAvailability;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeSegmentEasing {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x7];
};




struct LightStateParams_Aux {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float intensity;
    uint8_t _pad_2[0x4];
    struct CryStringT* presetTag;
    uint8_t _pad_3[0x8];
    int32_t lightStyle;
    float temperature;
};




struct BuildingBlocks_ColorStyle {
    uint8_t _pad_0[0x8];
    enum ARDataType color;
    float alpha;
};




struct SCItemControlPriorityNoControlValue {
    uint8_t _pad_0[0x8];
};




struct WheelAudioParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* loopStart;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* loopStop;
    uint8_t _pad_2[0x18];
};




struct CraftingGameplayPropertyImpl_Base {
    uint8_t _pad_0[0x8];
};




struct ActionAreaExtensionType {
    uint8_t _pad_0[0x8];
};




struct SQuantumDriveEffectTemplate {
    uint8_t _pad_0[0x8];
    struct SQuantumDriveEffectParams_LEGACY* tags;
    uint8_t _pad_1[0x120];
};




struct TargetTrackingAutoZoomDef {
    uint8_t _pad_0[0x8];
    struct BezierCurve* zoomByDistance;
    uint8_t _pad_1[0x88];
    float referenceDistance;
    float zoomAngleMin;
    float zoomAngleMax;
    float zoomLerpSpeedIn;
    float zoomLerpSpeedOut;
    uint8_t _pad_2[0x4];
};




struct SSalvageArmParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* straightenJointName;
    uint8_t _pad_1[0x8];
    struct Ang3* straightenAngleOffset;
    uint8_t _pad_2[0x10];
};




struct ConversationNode_VariableGameToken {
    uint8_t _pad_0[0x8];
    struct ConversationNode_Base* next;
    uint8_t _pad_1[0x8];
    struct CryStringT* setVariable;
    uint8_t _pad_2[0x8];
};




struct StatusSweatingParams {
    uint8_t _pad_0[0x8];
    float sweatingStaminaThreshold;
    float sweatMinAccumulationPerSecond;
    float sweatMaxAccumulationPerSecond;
    float sweatDecayDelay;
    float sweatDecayRate;
    float sweatToHygieneMinDecayMultiplier;
    float sweatToHygieneMaxDecayMultiplier;
    uint8_t _pad_1[0x4];
};




struct LightMiscParams {
    uint8_t _pad_0[0x8];
    float specularMultiplier;
    float fogMultiplier;
    float glowMultiplier;
    float planeSoftness;
    _Bool linkIgnoresColor;
    uint8_t _pad_1[0x3];
    float attenuationTweak;
    _Bool forceKeepEntity;
    uint8_t _pad_2[0x7];
};




struct PlayerChoiceMenuItem {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
};




struct AnnouncementGameToken {
    uint8_t _pad_0[0x8];
    struct CryStringT* gameToken;
    uint8_t _pad_1[0x8];
    enum ARDataType gameTokenType;
    uint8_t _pad_2[0x4];
};




struct RastarLocationParams {
    uint8_t _pad_0[0x18];
    float actionAreaRadius;
    float locationSize;
    float externalWear;
    float externalDirt;
    float internalWear;
    float internalDirt;
    struct TintPaletteTree* tintPalette;
    uint8_t _pad_1[0x10];
};




struct VisibilityConditionDef {
    uint8_t _pad_0[0x8];
};




struct QuantumColorShiftParams {
    uint8_t _pad_0[0x18];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float strength;
    float startDistance;
    uint8_t _pad_2[0x4];
};




struct LocalPlayerMusicParams {
    uint8_t _pad_0[0x18];
};




struct PlayerTradeNotification {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* title;
    struct CLocIdentifier* sendSuccessMessage;
    struct CLocIdentifier* receiveSuccessMessage;
    struct CLocIdentifier* sendFailedMessage;
    struct CryStringT* traderNameToken;
    uint8_t _pad_1[0x8];
    struct CryStringT* currencyTypeTokenUEC;
    uint8_t _pad_2[0x8];
    struct CryStringT* currencyTypeTokenMER;
    uint8_t _pad_3[0x8];
    struct CryStringT* currencyValueTokenUEC;
    uint8_t _pad_4[0x8];
    struct CryStringT* currencyValueTokenMER;
    uint8_t _pad_5[0x8];
};




struct CameraWheeledVehicleConfig {
    uint8_t _pad_0[0x8];
    _Bool smoothLinearVelocityX;
    _Bool smoothLinearVelocityY;
    _Bool smoothLinearVelocityZ;
    uint8_t _pad_1[0x1];
    int32_t minWheelContacts;
    struct Vec3* maxAirborneVelocities;
    uint8_t _pad_2[0x10];
    struct Vec3* smoothTimes;
    uint8_t _pad_3[0x10];
};




struct LightFlickerWaveSphereParams {
    uint8_t _pad_0[0x8];
    _Bool expanding;
    uint8_t _pad_1[0x3];
    float maxRadius;
    float radiusPerSecond;
    uint8_t _pad_2[0x4];
};




struct DialogueRealm {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* defaultTrigger;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* defaultFemaleTrigger;
    uint8_t _pad_2[0x18];
};




struct SEntityLinkHighlightNode {
    uint8_t _pad_0[0x8];
};




struct SCSeatAccessLinkedGatewayParams {
    uint8_t _pad_0[0x8];
    struct SCSeatAccessGatewayInteractionParams* gateway;
    uint8_t _pad_1[0x8];
    _Bool syncToEntranceState;
    _Bool oneWaySequencer;
    _Bool ignoreCloseOnEnter;
    _Bool ignoreCloseOnExit;
    uint8_t _pad_2[0x4];
    struct SCSeatAccessLinkedGatewaySequenceParams* openSequenceParams;
    uint8_t _pad_3[0x10];
    struct SCSeatAccessLinkedGatewaySequenceParams* closeSequenceParams;
    uint8_t _pad_4[0x10];
};




struct ControlHintCondition_ActorLocomotionSet {
    uint8_t _pad_0[0x8];
    enum ARDataType locomotionSet;
    uint8_t _pad_1[0x4];
};




struct SHealingBeamBodyPartParams {
    uint8_t _pad_0[0x8];
    struct BodyPart* bodyPart;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* displayName;
    struct SHealingBeamBoneEntryParams* boneEntry;
    uint8_t _pad_2[0x40];
    struct SHealingBeamBodyPartHighlightingParams* highlightParams;
    uint8_t _pad_3[0x50];
};




struct SBaseLevelStats {
    uint8_t _pad_0[0x8];
    float xpValue;
    uint8_t _pad_1[0x4];
};




struct TriggerSubConditionInterruptTimerDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* sequenceSuperGUID;
    uint8_t _pad_1[0x8];
    struct CryStringT* state;
    uint8_t _pad_2[0x8];
    float timer;
    uint8_t _pad_3[0x4];
};




struct AIDynamicCoverSurfaceComponentParams {
    uint8_t _pad_0[0x18];
    _Bool enable;
    uint8_t _pad_1[0x7];
};




struct SMissionEntityParams {
    uint8_t _pad_0[0x18];
};




struct CargoCommoditiesScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct ActorEnvironmentComponent {
    uint8_t _pad_0[0x18];
    struct EnvironmentTemperatureParams* temperatureParams;
    uint8_t _pad_1[0x30];
    struct ActorFrostedVisorParams* frostedVisorParams;
    uint8_t _pad_2[0x20];
    float geigerCounterSensitivityFactor;
    float geigerCounterMinimumFrequencyToActivate;
    float geigerCounterFrequencyLimit;
    uint8_t _pad_3[0x4];
};




struct IncapacitatedPlayerMarkerParams {
    uint8_t _pad_0[0x8];
    float markerHeightOffset;
    float corpseMarkerMaxDistance;
    float unconsciousMarkerMaxDistance;
    float downedMarkerMaxDistance;
    struct CLocIdentifier* corpseMarkerLabel;
    struct CLocIdentifier* unconsciousMarkerLabel;
    struct CLocIdentifier* downedMarkerLabel;
};




struct SEntityBasePhysicsGridParams {
    uint8_t _pad_0[0x8];
    _Bool inheritGravity;
    uint8_t _pad_1[0x7];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x6];
};




struct TimeToTakeOffMinOverrideByDockingClass {
    uint8_t _pad_0[0x8];
    struct LandingPadSize* dockingClass;
    uint8_t _pad_1[0x10];
    float timeToTakeOffMin;
    uint8_t _pad_2[0x4];
};




struct MistedBreathParams {
    uint8_t _pad_0[0x8];
    float apparentTemperatureTrigger;
    float minStrengthAtTemperature;
    float maxStrengthAtTemperature;
    uint8_t _pad_1[0x4];
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_2[0x10];
};




struct ThrusterEffectsComponentParams {
    uint8_t _pad_0[0x18];
    struct Range* thrusterTrailAngles;
    uint8_t _pad_1[0x8];
    struct ShockDiamondParams* shockDiamonds;
    uint8_t _pad_2[0x8];
};




struct PlanetEffectLODDistance {
    uint8_t _pad_0[0x8];
    float minCameraDistance;
    float maxCameraDistance;
    float subPatchLength;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_IntegerIntegerPair {
    uint8_t _pad_0[0x8];
    int64_t first;
    int64_t second;
    struct BuildingBlocks_BindingsIntegerBase* secondOverride;
    uint8_t _pad_1[0x8];
};




struct DoorScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct CLocIdentifier* displayUnknown;
    struct CLocIdentifier* displayForOpen;
    struct CLocIdentifier* displayForOpening;
    struct CLocIdentifier* displayForClosed;
    struct CLocIdentifier* displayForClosing;
    struct CLocIdentifier* displayForLocked;
    struct CLocIdentifier* displayForUnlocked;
};




struct SMicroResourceUnit {
    uint8_t _pad_0[0x8];
    int32_t microResourceUnits;
    uint8_t _pad_1[0x4];
};




struct EMPoolParams {
    uint8_t _pad_0[0x18];
    float overrideEmValue;
    _Bool distortionAffectsRoot;
    uint8_t _pad_1[0x3];
};




struct SSequencerTurretResumeControlTaskParams {
    uint8_t _pad_0[0x20];
};




struct BuildingBlocks_BindingsLocalizedField {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType field;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsLocalizedBase* input;
    uint8_t _pad_3[0x8];
};




struct SpawnHelperComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCItemShipCoursePredictionParams {
    uint8_t _pad_0[0x18];
    int32_t sampleSize;
    float segmentLookAhead;
    float segmentDistance;
    float pathLength;
    float defaultAlignmentAccuracy;
    float defaultAlignmentTime;
    struct Vec3* predictionOffset;
    uint8_t _pad_1[0x10];
    struct TagList* collisionTags;
    uint8_t _pad_2[0x30];
    _Bool forceEnabled;
    _Bool hackDisableIfcsActions;
    _Bool straighteningEnabled;
    uint8_t _pad_3[0x1];
    float straighteningStart;
    float straighteningEnd;
    float pathSmoothing;
    float highlightCursorWidth;
    float highlightSpeedModifier;
};




struct STeamChannel {
    uint8_t _pad_0[0x8];
};




struct PlayerAnimatedInteractionTemplate {
    uint8_t _pad_0[0x8];
    struct PlayerAnimatedInteraction* playerAnimatedInteraction;
    uint8_t _pad_1[0x60];
};




struct EAPickupKillConfirmedParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float percent;
    int32_t requiredScore;
    _Bool spawnOnKill;
    _Bool enabledForFPS;
    _Bool enabledForVehicles;
    _Bool allowSpawnOnSuicide;
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
};




struct FunctionalityModifierCurve {
    uint8_t _pad_0[0x8];
    struct BezierCurve* functionalityModifierCurve;
    uint8_t _pad_1[0x88];
};




struct BoolUserVariableSetValueTask {
    uint8_t _pad_0[0x20];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool value;
    uint8_t _pad_2[0x7];
};




struct SStopFillingGasTankGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct SActorStanceTrailSphereDef {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
    struct Vec3* defaultPivot;
    uint8_t _pad_2[0x10];
    _Bool keepPivotOffsetInZoneSpace;
    uint8_t _pad_3[0x7];
    struct DegYPR* defaultTrailDirection;
    uint8_t _pad_4[0x18];
    _Bool keepTrailDirectionInZoneSpace;
    _Bool alignToSurface;
    uint8_t _pad_5[0x2];
    float minTrailDistance;
    float desiredMinTrailDistance;
    float desiredMaxTrailDistance;
    float expansionMaxDuration;
    uint8_t _pad_6[0xc];
};




struct Behavior_ElectricalVehicleEffectParams {
    uint8_t _pad_0[0x8];
    _Bool enableEngineTrails;
    _Bool enableEngineContrails;
    uint8_t _pad_1[0x6];
    struct Behavior_CustomVehicleEffectsPreset* customVehicleEffects;
    uint8_t _pad_2[0x8];
    struct ElectricalCalculationPropertyRange* customVehicleCalculation;
    uint8_t _pad_3[0x18];
};




struct EntityComponentHealth_SBaseSequencerTask {
    uint8_t _pad_0[0x20];
};




struct InteractionConditionEntityOrientation {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    float angleLimit;
    uint8_t _pad_2[0x4];
    struct Vec3* directionVectorToMatch;
    uint8_t _pad_3[0x10];
    _Bool useLocalGravity;
    uint8_t _pad_4[0x7];
};




struct BuffValueOverride {
    uint8_t _pad_0[0x8];
    float valueOverride;
    uint8_t _pad_1[0x4];
};




struct SLoadoutRequirementBase {
    uint8_t _pad_0[0x8];
};




struct UIElement {
    uint8_t _pad_0[0x8];
    struct CryStringT* sourceFile;
    uint8_t _pad_1[0x8];
    struct UIElementSoundsRecord* soundsRecord;
    uint8_t _pad_2[0x10];
    struct CryStringT* fontFile;
    uint8_t _pad_3[0x8];
    enum ARDataType alignMode;
    _Bool alignScale;
    _Bool alignMax;
    uint8_t _pad_4[0x2];
    int32_t layer;
    _Bool skipFirstFrameInit;
    _Bool keyEvents;
    _Bool eventsExclusive;
    _Bool noDepthTest;
    _Bool forceNoUnload;
    _Bool noPostProcessing;
    uint8_t _pad_5[0x6];
};




struct SEntityObjectContainerGridProperty {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* gridGeometry;
    uint8_t _pad_1[0x10];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool inheritGravity;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x5];
};




struct Behavior_JumpDriveEffectsPreset {
    uint8_t _pad_0[0x8];
    struct SEntityEffectSystem_ParticleCategory* particleEffects;
    uint8_t _pad_1[0x68];
};




struct SCSeatAccessPassageInteractionStateParams {
    uint8_t _pad_0[0x20];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTags;
    uint8_t _pad_2[0x8];
    enum ARDataType condition;
    uint8_t _pad_3[0x3];
    float distance;
    struct SCSeatActorAttachmentParams* attachment;
    uint8_t _pad_4[0x8];
};




struct ControlHintCondition_VehicleHealthState {
    uint8_t _pad_0[0x8];
    enum ARDataType vehicleHealthState;
    uint8_t _pad_1[0x7];
};




struct DrugTypeToApply {
    uint8_t _pad_0[0x8];
    struct ConsumableSubtype* consumableSubtype;
    uint8_t _pad_1[0x10];
};




struct StateModifierHoverPowerStage {
    uint8_t _pad_0[0x8];
    struct SInteractionState* poweredOff;
    uint8_t _pad_1[0x8];
    struct SInteractionState* poweringOff;
    uint8_t _pad_2[0x8];
    struct SInteractionState* poweringOn;
    uint8_t _pad_3[0x8];
    struct SInteractionState* poweredOn;
    uint8_t _pad_4[0x8];
};




struct RestrictedAreaPatchTypes {
    uint8_t _pad_0[0x8];
    _Bool killPatch;
    _Bool autopilotPatch;
    _Bool redoutPatch;
    _Bool permissionPatch;
    uint8_t _pad_1[0x4];
};




struct PlayerChoice_MarkerNearestFace {
    uint8_t _pad_0[0x8];
    enum ARDataType easeType;
    uint8_t _pad_1[0x3];
    float flipAngle;
    float flipTime;
    uint8_t _pad_2[0x4];
};




struct WeaponPoseXYZCurvesMaxValues {
    uint8_t _pad_0[0x8];
    float xMaxValue;
    float yMaxValue;
    float zMaxValue;
    uint8_t _pad_1[0x4];
    struct SXYZCurves* curves;
    uint8_t _pad_2[0x1b0];
};




struct SpawnDescription_Ship {
    uint8_t _pad_0[0x8];
    struct TagList* tags;
    uint8_t _pad_1[0x30];
    struct TagList* negativeTags;
    uint8_t _pad_2[0x30];
    struct TagList* markupTags;
    uint8_t _pad_3[0x30];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    int32_t concurrentAmount;
    _Bool includeLocationAISpawnTags;
    uint8_t _pad_5[0x3];
    struct MissionProperty* nameProperty;
    uint8_t _pad_6[0x8];
    float weight;
    uint8_t _pad_7[0x4];
    struct InitialDamageOverride* initialDamageSettings;
    uint8_t _pad_8[0x10];
};




struct ActorProceduralRecoilModifiers {
    uint8_t _pad_0[0x8];
    struct SActorProceduralHandsRecoilModifiers* actorProceduralHandsRecoilModifiers;
    uint8_t _pad_1[0x1d0];
    struct SActorProceduralAimRecoilModifiers* actorProceduralAimRecoilModifiers;
    uint8_t _pad_2[0xc8];
    struct SActorProceduralBodyRecoilModifiers* actorProceduralBodyRecoilModifiers;
    uint8_t _pad_3[0x20];
    struct SActorProceduralHeadRecoilModifiers* actorProceduralHeadRecoilModifiers;
    uint8_t _pad_4[0xf8];
};




struct SEntityArticulatedPhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
    _Bool IsRagdoll;
    uint8_t _pad_4[0x3];
    float Stiffness;
    float MaxTimeStep;
    int32_t MaxLoggedCollisions;
    float SleepSpeed;
    float Damping;
    float DampingFreefall;
    int32_t LyingModeNColls;
    float LyingDamping;
    float LyingSleepSpeed;
    _Bool Resting;
    uint8_t _pad_5[0x3];
    enum ARDataType aiNavigationType;
};




struct SRadiationEmitterGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool enableEmitter;
    uint8_t _pad_1[0x7];
};




struct SpeciesScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct MarkerTrackingActionParameters {
    uint8_t _pad_0[0x8];
    enum ARDataType leftClickAction;
    enum ARDataType leftDoubleClickAction;
};




struct EscortParams {
    uint8_t _pad_0[0x18];
    enum ARDataType serviceBeaconType;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* serviceBeaconName;
    int32_t beaconTaxPercentage;
    int32_t beaconMaxPaymentAmount;
    struct MissionPropertyValue_AIName* npcRequesterNameDef;
    uint8_t _pad_2[0x40];
    struct SServiceBeaconCreatorParams* playerCreatorParams;
    uint8_t _pad_3[0x8];
    struct SServiceBeaconCreatorParamsBase* npcCreatorParams;
    uint8_t _pad_4[0x8];
    struct CLocIdentifier* objectiveTitle;
    struct CLocIdentifier* objectiveDescription;
};




struct MissionModifier_ShipKioskFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* modifierName;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x1f];
    struct TagsDNF* kioskFilterType;
    uint8_t _pad_3[0x60];
};




struct EntityComponentHealth_SApplyDamageMapTask {
    uint8_t _pad_0[0x20];
    struct CryStringT* damageMapPath;
    uint8_t _pad_1[0x8];
};




struct ControlHintCondition_VehiclePinnedTarget {
    uint8_t _pad_0[0x8];
    enum ARDataType pinnedTarget;
    uint8_t _pad_1[0x7];
};




struct GlobalResourceTexture {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct SCItemSeatDashboardScreen {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct CryStringT* GeomName;
    uint8_t _pad_2[0x8];
    struct CryStringT* MaterialOverride;
    uint8_t _pad_3[0x8];
    struct SCItemSeatDashboardScreenStyle* Style;
    uint8_t _pad_4[0x18];
    struct SCItemSeatDashboardScreenPos* Position;
    uint8_t _pad_5[0x70];
};




struct AerodynamicTrailCalculation {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_BindingsStringBase {
    uint8_t _pad_0[0x50];
};




struct ThrusterMFXEntityParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* customEffect;
    uint8_t _pad_1[0x8];
    struct Vec3* maxEmissionSizeScale;
    uint8_t _pad_2[0x10];
    float distanceOffSurface;
    float strengthDistanceFalloffThreshold;
    float thrusterThrottleImportance;
    float directionalEffectAngleThreshold;
    float omnidirectionalEffectAngleThreshold;
    float minimumEmitAngleScale;
    float maximumEmitAngleScale;
    uint8_t _pad_3[0x4];
};




struct AtmosphericFlightEffects {
    uint8_t _pad_0[0x8];
    float maxAtmosphericPressure;
    uint8_t _pad_1[0x4];
    struct TrailFadingSettings* trailFading;
    uint8_t _pad_2[0x18];
    struct ReverseTrailsSetting* reverseTrailDisabling;
    uint8_t _pad_3[0x8];
    struct GlobalEngineTrailsSetting* engineTrails;
    uint8_t _pad_4[0x18];
    struct GlobalAtmosphericHeatingSettings* atmosphericHeating;
    uint8_t _pad_5[0x50];
    struct GlobalAerodynamicTrailSettings* aerodynamicTrails;
    uint8_t _pad_6[0x28];
    struct GlobalEnvironmentEffectSettings* customEnvironmentEffects;
    uint8_t _pad_7[0x8];
};




struct ControlHintCondition_VehicleQuantumTravel {
    uint8_t _pad_0[0x8];
    enum ARDataType quantumTravelState;
    uint8_t _pad_1[0x7];
};




struct RttLoadoutPreviewEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* entityClipName;
    uint8_t _pad_1[0x8];
    struct CryStringT* starMarineEntityClipName;
    uint8_t _pad_2[0x8];
    struct QuatTS* transform;
    uint8_t _pad_3[0x58];
    struct EntityClassDefinition* geometryRecord;
    uint8_t _pad_4[0x10];
    struct EntityClassDefinition* starMarineGeometryRecord;
    uint8_t _pad_5[0x10];
    struct Vec2* previewWindowDimensions;
    uint8_t _pad_6[0x8];
};




struct FullscreenTutorial {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* headerText;
    struct CLocIdentifier* bodyText;
    struct CryStringT* imagePath;
    uint8_t _pad_1[0x8];
    struct CryStringT* moviePath;
    uint8_t _pad_2[0x8];
    float lerpTime;
    uint8_t _pad_3[0x4];
    struct BezierCurve* timeScaleCurveIn;
    uint8_t _pad_4[0x88];
    struct BezierCurve* timeScaleCurveOut;
    uint8_t _pad_5[0x88];
    float timeout;
    uint8_t _pad_6[0x4];
    struct CryStringT* subsumptionName;
    uint8_t _pad_7[0x8];
    float minTime;
    uint8_t _pad_8[0x4];
};




struct SPerkParamsBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* displayDescription;
    struct CryStringT* icon;
    uint8_t _pad_3[0x8];
};




struct WeatherEffects_SpaceLoopEffect {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* effect;
    uint8_t _pad_1[0x10];
    _Bool updateStrength;
    _Bool updateCount;
    uint8_t _pad_2[0x6];
};




struct GoToPointComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* pointName;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
};




struct SSCLocalPlayerUIComponentParams {
    uint8_t _pad_0[0x18];
    _Bool showRespawnTextForSameLocation;
    uint8_t _pad_1[0x3];
    float respawnScreenWaitTimeAfterTextFinishedSeconds;
    float respawnScreenMaxTextWaitTimeSeconds;
    uint8_t _pad_2[0x4];
    struct SLocalPlayerShoppingData* shoppingData;
    uint8_t _pad_3[0x10];
};




struct EntityComponentRttAspectFocusVehicleParams {
    uint8_t _pad_0[0x18];
};




struct SDamageMapShaderValues {
    uint8_t _pad_0[0x8];
    float damageMapMultiplier;
    float visualHitRadius;
    struct SDamageMapShaderValueDetails* thickness;
    uint8_t _pad_1[0x10];
    struct SDamageMapShaderValueDetails* deformation;
    uint8_t _pad_2[0x10];
    struct SDamageMapShaderValueDetails* burn;
    uint8_t _pad_3[0x10];
    struct SDamageMapShaderValueDetails* temperature;
    uint8_t _pad_4[0x10];
};




struct SCIGTestAA {
    uint8_t _pad_0[0x8];
    _Bool bBase;
    uint8_t _pad_1[0x7];
    _Bool bA;
    uint8_t _pad_2[0x7];
    _Bool bAA;
    uint8_t _pad_3[0x7];
};




struct DefaultActionsEntityEntryCondition_Customisable {
    uint8_t _pad_0[0x8];
    _Bool isCustomisable;
    uint8_t _pad_1[0x7];
};




struct MusicLogicEvent {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float retriggerDelay;
    uint8_t _pad_2[0x4];
};




struct SActorDefaultDeathBehaviour {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_ComponentParameterInputBoolean {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
    _Bool value;
    uint8_t _pad_2[0x7];
};




struct FogVolumeComponentParams {
    uint8_t _pad_0[0x18];
    _Bool active;
    uint8_t _pad_1[0x3];
    int32_t volumeType;
    struct Vec3* size;
    uint8_t _pad_2[0x10];
    struct RGB* color;
    uint8_t _pad_3[0x10];
    float hdrDynamic;
    _Bool useGlobalFogColor;
    uint8_t _pad_4[0x3];
    float globalDensity;
    float densityOffset;
    float fallOffDirLong;
    float fallOffDirLati;
    float fallOffShift;
    float fallOffScale;
    float softEdges;
    float rampStart;
    float rampEnd;
    float rampInfluence;
    float densityNoiseScale;
    float densityNoiseOffset;
    float densityNoiseTimeFrequency;
    uint8_t _pad_5[0x4];
    struct Vec3* densityNoiseSize;
    uint8_t _pad_6[0x10];
    float densityNoiseWindInfluence;
    _Bool affectsThisAreaOnly;
    uint8_t _pad_7[0x3];
    float maxDistance;
    uint8_t _pad_8[0x4];
};




struct GlobalGasParams {
    uint8_t _pad_0[0x8];
    double transferRatePerAtmosphereSquareMetre;
    double minimumTransferRate;
    double mixRatePerSquareMetre;
    double mixAbsPressureDifferenceThreshold;
    double massAdditionRatePerCubicMetre_MatchingGases;
    double massSubtractionRatePerCubicMetre_MatchingGases;
    double massSubtractionRatePerCubicMetre_ForeignGases;
    double resourceCostPerKilogramCorrected;
    double thermalEnergyCorrectionRatePerCubicMetre;
    double resourceCostPerJoule;
    double humidityCorrectionRate;
    double resourceCostPerHumidity;
    struct ApparentTemperatureParams* apparentTemperatureParams;
    uint8_t _pad_1[0x30];
};




struct EAFactionTeamParams {
    uint8_t _pad_0[0x8];
    struct Faction_LEGACY* faction;
    uint8_t _pad_1[0x10];
    _Bool playersAllowed;
    uint8_t maxPlayers;
    uint8_t _pad_2[0x6];
};




struct BuildingBlocks_BindingsBooleanBase {
    uint8_t _pad_0[0x50];
};




struct MissionVariableBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeDraggablePolicy {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_BindingsColorFromString {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsStringBase* input;
    uint8_t _pad_1[0x8];
    _Bool threeChannels;
    uint8_t _pad_2[0x7];
};




struct EntityEffectSystem_LightType_PointLight {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
    float attenuationBulbSize;
    float attenuationTweak;
};




struct MineableExplosionParams {
    uint8_t _pad_0[0x8];
    struct ExplosionParams* defaultExplosionParams;
    uint8_t _pad_1[0x1b8];
    float dangerPoolFactor;
    float defaultVolume;
};




struct DamageMapExplosionParams {
    uint8_t _pad_0[0x8];
    float temperatureMultiplier;
    float volumeThreshold;
};




struct SGasProducerConsumerEntryParams {
    uint8_t _pad_0[0x8];
    struct GasParams* gas;
    uint8_t _pad_1[0x10];
    float massExchange;
    _Bool isDependency;
    uint8_t _pad_2[0x3];
};




struct StatusMaskedRetriggerSetupPreset {
    uint8_t _pad_0[0x8];
    struct StatusMaskedRetriggerPreset* preset;
    uint8_t _pad_1[0x8];
};




struct ContextMenuOption {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct CLocIdentifier* textLoc;
};




struct HoldExhaleDuration {
    uint8_t _pad_0[0x8];
    float breathHeldRatioMin;
    float breathHeldRatioMax;
    float duration;
    uint8_t _pad_1[0x4];
};




struct MobiglasDisplayLayoutBase {
    uint8_t _pad_0[0x8];
    struct ObjectiveDisplayInfo* objectiveTitle;
    uint8_t _pad_1[0x20];
};




struct JurisdictionScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SStrengthXPGains {
    uint8_t _pad_0[0x8];
    float timeRunningWithMass;
    float meleeHit;
    float crouchToggle;
    float knockedDown;
    float vaulting;
    uint8_t _pad_1[0x4];
};




struct SCharacterCustomizerRegionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    _Bool visible;
    uint8_t _pad_2[0x7];
};




struct SMissionStagingAreaComponentParams {
    uint8_t _pad_0[0x18];
};




struct AudioAreaAmbienceComponentParams {
    uint8_t _pad_0[0x18];
    _Bool isEnabled;
    uint8_t _pad_1[0x7];
    struct GlobalResourceAudio* audioPlayTrigger;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* audioStopTrigger;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* areaFadeRTPC;
    uint8_t _pad_4[0x18];
    struct CryStringT* audioEnvironment;
    uint8_t _pad_5[0x8];
    struct CryStringT* audioSwitch;
    uint8_t _pad_6[0x8];
    struct CryStringT* audioSwitchStateInside;
    uint8_t _pad_7[0x8];
    struct CryStringT* audioSwitchStateNear;
    uint8_t _pad_8[0x8];
    struct CryStringT* audioSwitchStateFar;
    uint8_t _pad_9[0x8];
    int32_t soundObstructionType;
    float fadeDistance;
    float environmentFadeDistance;
    float audioSignature;
    float positionFadeDistance;
    float pitch;
    float volume;
    float atsVolumeOffset;
    _Bool isManagedAudioObject;
    uint8_t _pad_10[0x7];
};




struct ItemPortViewInformation {
    uint8_t _pad_0[0x8];
};




struct SCItemNavigationParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_KeyframeModifierData {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_TimingFunctionBase* timingFunction;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_FieldModifierBase* modifier;
    uint8_t _pad_2[0x8];
};




struct SCItemInventoryContainerComponentParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* openInventoryInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* openLootingInteraction;
    uint8_t _pad_2[0x8];
    struct InventoryContainer* containerParams;
    uint8_t _pad_3[0x10];
    _Bool canAutoStoreRestrictedItems;
    uint8_t _pad_4[0x7];
};




struct AnimationScalarVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Range* range;
    uint8_t _pad_2[0x8];
    float defaultValue;
    uint8_t _pad_3[0x4];
    struct AnimationVariableInterpolation* defaultInterpolation;
    uint8_t _pad_4[0x8];
};




struct BoxFieldGeom {
    uint8_t _pad_0[0x8];
    struct Vec3* center;
    uint8_t _pad_1[0x10];
    _Bool oriented;
    uint8_t _pad_2[0x7];
    struct Quat* basis;
    uint8_t _pad_3[0x28];
    struct Vec3* size;
    uint8_t _pad_4[0x10];
};




struct PlayerUsableInteractionPoint {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* interactionPoint;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* useInteraction;
    uint8_t _pad_2[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_3[0x8];
};




struct SControlledEntityGroupCondition {
    uint8_t _pad_0[0x8];
    struct TriggerConditionDataDef* condition;
    uint8_t _pad_1[0x18];
};




struct SCItemDoorConnectVisAreas {
    uint8_t _pad_0[0x8];
    struct Vec3* visAreaOffset;
    uint8_t _pad_1[0x10];
};




struct S42DifficultyParams {
    uint8_t _pad_0[0x18];
    enum ARDataType defaultDifficulty;
    _Bool enableDynamicScaling;
    uint8_t _pad_1[0x3];
    struct SDynamicDifficultyParams* fpsDynamicScaling;
    uint8_t _pad_2[0x70];
    struct SDynamicDifficultyParams* shipDynamicScaling;
    uint8_t _pad_3[0x70];
    struct GameDifficultyModifiers* difficultyModifiers;
    uint8_t _pad_4[0x10];
};




struct SGuidanceAndControlPhaseParams {
    uint8_t _pad_0[0x8];
    float angularSpeed;
    uint8_t _pad_1[0x4];
    struct Vec3* maxLinearAccelerationPositive;
    uint8_t _pad_2[0x10];
    struct Vec3* maxLinearAccelerationNegative;
    uint8_t _pad_3[0x10];
    float maxRotationAccel;
    float pidAggression;
};




struct EALockedSpawnMarkerTracker {
    uint8_t _pad_0[0x8];
    struct MarkerAR_ConfigDef* ARMarkerConfig;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* distanceUnits;
    float ARMarkerAlpha;
    _Bool scaleMarkerByDistance;
    uint8_t _pad_2[0x3];
    float minScaleDistance;
    float maxScaleDistance;
    float minSize;
    float maxSize;
    _Bool allowClipping;
    uint8_t _pad_3[0x7];
    float maxClipRange;
    uint8_t _pad_4[0x4];
};




struct GlobalResourceCAF {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct SActorProceduralAnimationComponentParams {
    uint8_t _pad_0[0x18];
};




struct BodyHealthComponentParams {
    uint8_t _pad_0[0x18];
    struct HealthTemplate* bodyHealthParamsRecord;
    uint8_t _pad_1[0x10];
    struct HealthTemplate* bodyHealthParamsRecordSQ42Override;
    uint8_t _pad_2[0x10];
};




struct MissionPropertyValue_Boolean {
    uint8_t _pad_0[0x8];
    _Bool value;
    uint8_t _pad_1[0x7];
};




struct MissionFlowCondition_NOT {
    uint8_t _pad_0[0x8];
    struct MissionFlowConditionBase* condition;
    uint8_t _pad_1[0x8];
};




struct InteriorMapWorldUICursorPointParams {
    uint8_t _pad_0[0x8];
};




struct SActorForceReactionsProceduralLeanOverride {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x3];
    float maxLeanForward;
    float maxLeanBackward;
    float maxLeanLeft;
    float maxLeanRight;
    _Bool moveHips;
    _Bool lockHands;
    uint8_t _pad_3[0x2];
    enum ARDataType pose;
    uint8_t _pad_4[0x4];
};




struct BodyJoint {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType hitReactionRegion;
    enum ARDataType hitReactionPart;
    struct BodyPart* bodyPart;
    uint8_t _pad_2[0x10];
};




struct CraftingRecipeResults_Base {
    uint8_t _pad_0[0x8];
};




struct StatusPriorityStatType {
    uint8_t _pad_0[0x8];
    enum ARDataType associatedWidget;
    uint8_t _pad_1[0x4];
    float thresholdValue;
    enum ARDataType comparison;
    enum ARDataType statType;
    _Bool useStatRatio;
    uint8_t _pad_2[0x3];
};




struct SAttachableObjectContainerData {
    uint8_t _pad_0[0x8];
    struct CryStringT* fileName;
    uint8_t _pad_1[0x8];
    struct CryStringT* guid;
    uint8_t _pad_2[0x8];
    struct QuatT* Offset;
    uint8_t _pad_3[0x50];
};




struct EAMarkerTrackerBase {
    uint8_t _pad_0[0x8];
    struct MarkerAR_ConfigDef* ARMarkerConfig;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* distanceUnits;
    float ARMarkerAlpha;
    _Bool scaleMarkerByDistance;
    uint8_t _pad_2[0x3];
    float minScaleDistance;
    float maxScaleDistance;
    float minSize;
    float maxSize;
    _Bool allowClipping;
    uint8_t _pad_3[0x7];
};




struct VibrationTypeData {
    uint8_t _pad_0[0x8];
    float maxValue;
    float fallOffTime;
};




struct BuildingBlocks_BindingsIntegerField {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType field;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_3[0x8];
};




struct InteractionConditionItemPower {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType powerState;
    uint8_t _pad_2[0x4];
};




struct TransitNavSplineDataParams {
    uint8_t _pad_0[0x18];
};




struct CombatAssistanceParams {
    uint8_t _pad_0[0x18];
    enum ARDataType serviceBeaconType;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* serviceBeaconName;
    int32_t beaconTaxPercentage;
    int32_t beaconMaxPaymentAmount;
    struct MissionPropertyValue_AIName* npcRequesterNameDef;
    uint8_t _pad_2[0x40];
    struct SServiceBeaconCreatorParams* playerCreatorParams;
    uint8_t _pad_3[0x8];
    struct SServiceBeaconCreatorParamsBase* npcCreatorParams;
    uint8_t _pad_4[0x8];
    struct CLocIdentifier* objectiveTitle;
    struct CLocIdentifier* objectiveDescription;
};




struct WebRTCCommsCallProjectorLightParams {
    uint8_t _pad_0[0x8];
    float temperature;
    float intensity;
    float radius;
    float bulbRadius;
    float lightFrustumAngle;
    uint8_t _pad_1[0x4];
    struct Vec3* offset;
    uint8_t _pad_2[0x10];
    _Bool castShadow;
    uint8_t _pad_3[0x7];
};




struct DefaultActionsEntityState_EntityIsAttachedToOtherActor {
    uint8_t _pad_0[0x8];
};




struct LegalRegistrationLocationComponentParams {
    uint8_t _pad_0[0x18];
    struct SecurityNetworkManifest* securityNetworkManifest;
    uint8_t _pad_1[0x10];
};




struct SCharacterCustomizerMakeupDefaultParams {
    uint8_t _pad_0[0x8];
    struct SCharacterCustomizerMakeupChannelParams* channelR;
    uint8_t _pad_1[0x18];
    struct SCharacterCustomizerMakeupChannelParams* channelG;
    uint8_t _pad_2[0x18];
    struct SCharacterCustomizerMakeupChannelParams* channelB;
    uint8_t _pad_3[0x18];
    float opacity;
    uint8_t _pad_4[0x4];
};




struct CtxGraph_Node {
    uint8_t _pad_0[0x8];
};




struct SEAFPSGunGameArmorLevel {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* armorArms;
    uint8_t _pad_1[0x10];
    struct EntityClassDefinition* armorHelmet;
    uint8_t _pad_2[0x10];
    struct EntityClassDefinition* armorLegs;
    uint8_t _pad_3[0x10];
    struct EntityClassDefinition* armorTorso;
    uint8_t _pad_4[0x10];
};




struct ControlHintCondition_VehicleAvailableOperatorMode {
    uint8_t _pad_0[0x8];
    enum ARDataType operatorMode;
    uint8_t _pad_1[0x4];
};




struct SMusicEventTagMap {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct SMusicEvent* event;
    uint8_t _pad_2[0x38];
};




struct BuildingBlocks_BindingsNumberWaveform {
    uint8_t _pad_0[0x50];
    float frequency;
    float offset;
    float min;
    float max;
    float rangeLow;
    float rangeHigh;
    struct BindingsOperations_WaveformShapeBase* shape;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x8];
};




struct JumpDriveExitParams {
    uint8_t _pad_0[0x8];
    float exitTrailTime;
    uint8_t _pad_1[0x4];
    struct Range* exitSpeedRange;
    uint8_t _pad_2[0x8];
};




struct SCDashboardConnectionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPort;
    uint8_t _pad_1[0x8];
};




struct InventoryClosedContainerType {
    uint8_t _pad_0[0x8];
    struct SBaseCargoUnit* capacity;
    uint8_t _pad_1[0x8];
};




struct StatusPriorityFloat {
    uint8_t _pad_0[0x8];
    enum ARDataType associatedWidget;
    uint8_t _pad_1[0x4];
    float thresholdValue;
    enum ARDataType comparison;
};




struct OnFootWeaponRangeCategoryScore {
    uint8_t _pad_0[0x8];
    float shortWeaponRange;
    float mediumWeaponRange;
    float longWeaponRange;
    uint8_t _pad_1[0x4];
};




struct BulletVisualParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceMaterial* Material;
    uint8_t _pad_1[0x10];
    float maxLength;
    float meshOffset;
    float geometryRadius;
    int32_t renderFrequency;
    float renderProbability;
    uint8_t _pad_2[0x4];
    struct CryStringT* hitEffect;
    uint8_t _pad_3[0x10];
};




struct Primitive_Billboard {
    uint8_t _pad_0[0x8];
    struct Vec3* QuadCentre;
    uint8_t _pad_1[0x10];
    struct Vec2* QuadSize;
    uint8_t _pad_2[0x8];
    struct Vec2* ScreenOffset;
    uint8_t _pad_3[0x8];
    struct Vec2* UV_Start;
    uint8_t _pad_4[0x8];
    struct Vec2* UV_Size;
    uint8_t _pad_5[0x8];
    _Bool InScreenSpace;
    uint8_t _pad_6[0x7];
};




struct ItemResourceCompositionValue {
    uint8_t _pad_0[0x8];
    struct ResourceType* containerResource;
    uint8_t _pad_1[0x10];
    float ratio;
    uint8_t _pad_2[0x4];
};




struct JournalEntryAudioLog {
    uint8_t _pad_0[0x8];
    struct CryStringT* AudioLogName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* Description;
    struct CLocIdentifier* Transcript;
};




struct MissionCompletePerkBaseDef {
    uint8_t _pad_0[0x8];
};




struct ReadySystemParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    int32_t requiredPlayers;
    float forceReadyTime;
    uint8_t _pad_2[0x4];
};




struct SLandingCommunicationParams {
    uint8_t _pad_0[0x18];
};




struct JumpDriveOpeningParams {
    uint8_t _pad_0[0x8];
    float shieldPulseMaxTime;
    uint8_t _pad_1[0x4];
};




struct SPowerSegmentResourceUnit {
    uint8_t _pad_0[0x8];
    int32_t units;
    uint8_t _pad_1[0x4];
};




struct SQedVisualGraphTransitionTypeParams {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionSwapAvailable {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct PlacedSurfaceEffects_Emitter {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Tag* tag;
    uint8_t _pad_2[0x10];
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_3[0x10];
    struct Vec3* emitterPosition;
    uint8_t _pad_4[0x10];
    _Bool linkedToSdf;
    uint8_t _pad_5[0x3];
    float fadeOutDuration;
};




struct SQuantumServiceBeaconQTPointParams {
    uint8_t _pad_0[0x18];
};




struct MissionVariableBoolean {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    _Bool value;
    uint8_t _pad_3[0x7];
};




struct ProbabilisticStatusTrigger {
    uint8_t _pad_0[0x8];
    struct SStatusFortitudeLevelModifier* fortitudeLevelModifier;
    uint8_t _pad_1[0x8];
    float statusTriggerMinThreshold;
    float probabilityInterpMinThreshold;
    float probabilityInterpMaxThreshold;
    float statusTriggerGuaranteedThreshold;
    float maxStatusRangeThreshold;
    float probabilityMin;
    float probabilityMax;
    float probabilityCooldown;
    enum ARDataType probabilityCheckType;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_TriggerModifyInt {
    uint8_t _pad_0[0x8];
    struct CryStringT* variableName;
    uint8_t _pad_1[0x8];
    int64_t value;
};




struct SSpreadParams {
    uint8_t _pad_0[0x8];
    float min;
    float max;
    float firstAttack;
    float attack;
    float decay;
    uint8_t _pad_1[0x4];
};




struct AreaAlignmentSlotTypeParams {
    uint8_t _pad_0[0x8];
};




struct ControlHintCondition_VehicleLandingGearState {
    uint8_t _pad_0[0x8];
    enum ARDataType landingGearState;
    uint8_t _pad_1[0x7];
};




struct BuildingBlocks_ComponentLabelProperties {
    uint8_t _pad_0[0x8];
    _Bool show;
    uint8_t _pad_1[0x7];
    struct CLocIdentifier* label;
    enum ARDataType style;
    enum ARDataType caseModifier;
};




struct ProjectileParams {
    uint8_t _pad_0[0x8];
    struct ProjectileDetonationParams* detonationParams;
    uint8_t _pad_1[0x8];
    struct ProjectileProximityTriggerParams* proximityTriggerParams;
    uint8_t _pad_2[0x8];
};




struct BaseMissionModifier {
    uint8_t _pad_0[0x8];
    struct CryStringT* modifierName;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x1f];
};




struct BuildingBlocks_FlashRendererPolicy {
    uint8_t _pad_0[0x8];
    _Bool useFlashRenderThreadUpdate;
    _Bool transformFrom3D;
    uint8_t _pad_1[0x6];
};




struct QuantumMusicTripCategory {
    uint8_t _pad_0[0x8];
    struct CryStringT* description;
    uint8_t _pad_1[0x8];
    double minDistance;
    struct QuantumMusicEventBase* categoryEvent;
    uint8_t _pad_2[0x38];
    float preArrivalDurationSecs;
    uint8_t _pad_3[0x4];
};




struct SSpreadMisfireEffect {
    uint8_t _pad_0[0x8];
    struct Tag* effectTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* effectTag;
    uint8_t _pad_2[0x10];
};




struct AudioHitListenerDefinition {
    uint8_t _pad_0[0x8];
    struct AudioHitTypeDefinition* melee;
    uint8_t _pad_1[0x8];
    struct AudioHitTypeDefinition* collision;
    uint8_t _pad_2[0x8];
    struct AudioHitTypeDefinition* crash;
    uint8_t _pad_3[0x8];
    struct AudioHitTypeDefinition* frag;
    uint8_t _pad_4[0x8];
    struct AudioHitTypeDefinition* explosion;
    uint8_t _pad_5[0x8];
    struct AudioHitTypeDefinition* takedown;
    uint8_t _pad_6[0x8];
    struct AudioHitTypeDefinition* punish;
    uint8_t _pad_7[0x8];
    struct AudioHitTypeDefinition* normal;
    uint8_t _pad_8[0x8];
    struct AudioHitTypeDefinition* fire;
    uint8_t _pad_9[0x8];
    struct AudioHitTypeDefinition* bullet;
    uint8_t _pad_10[0x8];
    struct AudioHitTypeDefinition* vehicleDestruction;
    uint8_t _pad_11[0x8];
    struct AudioHitTypeDefinition* eventDamage;
    uint8_t _pad_12[0x8];
    struct AudioHitTypeDefinition* bleedOut;
    uint8_t _pad_13[0x8];
    struct AudioHitTypeDefinition* electricArc;
    uint8_t _pad_14[0x8];
    struct AudioHitTypeDefinition* repair;
    uint8_t _pad_15[0x8];
    struct AudioHitTypeDefinition* suffocate;
    uint8_t _pad_16[0x8];
    struct AudioHitTypeDefinition* suicide;
    uint8_t _pad_17[0x8];
    struct AudioHitTypeDefinition* selfDestruct;
    uint8_t _pad_18[0x8];
    struct AudioHitTypeDefinition* boundaryViolation;
    uint8_t _pad_19[0x8];
    struct AudioHitTypeDefinition* drown;
    uint8_t _pad_20[0x8];
    struct AudioHitTypeDefinition* damageOverTime;
    uint8_t _pad_21[0x8];
    struct AudioHitTypeDefinition* hazard;
    uint8_t _pad_22[0x8];
};




struct SEntityVoxelGridProperty {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* gridGeometry;
    uint8_t _pad_1[0x10];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool inheritGravity;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x5];
    struct CryStringT* voxelDataFile;
    uint8_t _pad_4[0x8];
};




struct PersonalThoughtHologramAnimationParams {
    uint8_t _pad_0[0x8];
    float selectedMaxScaling;
    float scalingAnimationDuration;
    float selectedMaxYaw;
    float rotationAnimationRate;
    float rotationRampDuration;
    uint8_t _pad_1[0x4];
};




struct EntityComponentRefineryUIProviderParams {
    uint8_t _pad_0[0x18];
    int32_t jobDescriptionLength;
    uint8_t _pad_1[0x4];
};




struct ScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct MiningAudioParams {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* mineablePowerLevelRtpc;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* mineableDangerBreakingRtpc;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* mineableOptimalBreakingRtpc;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* mineableMassRtpc;
    uint8_t _pad_4[0x18];
    struct AudioRtpc* mineablePowerIncreasingRtpc;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* mineableCrackGlowStrengthRtpc;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* mineableBreakZoneIndicatorRtpc;
    uint8_t _pad_7[0x18];
    float mineablePowerIncreasingFallOff;
    uint8_t _pad_8[0x4];
    struct GlobalResourceAudio* miningStartTrigger;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* miningStopTrigger;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* goodFracturedTrigger;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* badFracturedTrigger;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* extractedTrigger;
    uint8_t _pad_13[0x18];
};




struct SelectionTab {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    _Bool vehicleTab;
    uint8_t _pad_1[0x7];
};




struct SJournalComponentParams {
    uint8_t _pad_0[0x18];
};




struct Marker_AbilityAboveBelowIndicator {
    uint8_t _pad_0[0x8];
    float aboveThreshold;
    float belowThreshold;
};




struct BuildingBlocks_ShapeQuad {
    uint8_t _pad_0[0x8];
    struct Vec2* center;
    uint8_t _pad_1[0x8];
    _Bool showBoundsDebug;
    uint8_t _pad_2[0x7];
    float width;
    float height;
};




struct WeaponProceduralClip {
    uint8_t _pad_0[0x8];
    struct WeaponProceduralClipBase* weaponProceduralClipBase;
    uint8_t _pad_1[0x8];
};




struct LootGenerationComponentParams {
    uint8_t _pad_0[0x18];
    struct LootConfig* lootConfig;
    uint8_t _pad_1[0x50];
};




struct ElectricalStateTemplateInternal {
    uint8_t _pad_0[0x8];
    enum ARDataType chargeMod;
    float charge;
};




struct AreaMapCameraParams {
    uint8_t _pad_0[0x8];
    float cameraDist;
    float cameraPitch;
    float cameraYaw;
    float cameraZoomMax;
    float cameraZoomMin;
    uint8_t _pad_1[0x4];
    struct BezierCurve* cameraPanCurve;
    uint8_t _pad_2[0x88];
    float cameraPanMultiplier;
    uint8_t _pad_3[0x4];
    struct BezierCurve* cameraZoomCurve;
    uint8_t _pad_4[0x88];
    float cameraZoomMultiplier;
    uint8_t _pad_5[0x4];
};




struct LifetimeControlledItemModifierParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
};




struct IntoxicationIFCSModifierParams {
    uint8_t _pad_0[0x8];
    struct ToxiInputModifierDistortion* rotationDistortion;
    uint8_t _pad_1[0x138];
    struct ToxiInputModifierAxis* yaw;
    uint8_t _pad_2[0x20];
    struct ToxiInputModifierAxis* pitch;
    uint8_t _pad_3[0x20];
    struct ToxiInputModifierAxis* roll;
    uint8_t _pad_4[0x20];
    struct ToxiInputModifierDelay* rotationDelay;
    uint8_t _pad_5[0x10];
    struct ToxiInputModifierDistortion* linearDistortion;
    uint8_t _pad_6[0x138];
    struct ToxiInputModifierAxis* forward;
    uint8_t _pad_7[0x20];
    struct ToxiInputModifierAxis* left;
    uint8_t _pad_8[0x20];
    struct ToxiInputModifierAxis* up;
    uint8_t _pad_9[0x20];
    struct ToxiInputModifierDelay* linearDelay;
    uint8_t _pad_10[0x10];
};




struct DownedConfig {
    uint8_t _pad_0[0x8];
    float excessDamageToInstaKill;
    float damageToInstaKillFromDowned;
    float downedReviveTempFOVFadeInSpeed;
    float downedReviveTempFOVFadeOutSpeed;
    float downedReviveTempFOVDuration;
    float downedReviveTempFOVScaleAdjustment;
    float landingZoneRescueTime;
    uint8_t _pad_1[0x4];
    struct StarMapObjectType* landingZoneStarMapObjectType;
    uint8_t _pad_2[0x10];
};




struct SCItemControlPriorityExclusiveValue {
    uint8_t _pad_0[0x8];
};




struct SCLoadingPlatformEntityReferences {
    uint8_t _pad_0[0x8];
    struct CryStringT* loadingGate;
    uint8_t _pad_1[0x8];
    struct CryStringT* loadingPlatform;
    uint8_t _pad_2[0x8];
    struct CryStringT* frontGate;
    uint8_t _pad_3[0x8];
    struct CryStringT* kiosk;
    uint8_t _pad_4[0x8];
    struct CryStringT* obstructionCheckBounds;
    uint8_t _pad_5[0x8];
};




struct SVectorFieldParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
    float radius;
    float width;
    float falloff;
    float maxStrength;
};




struct PlayerChoiceMenuOption {
    uint8_t _pad_0[0x8];
};




struct DisplayState {
    uint8_t _pad_0[0x8];
    float minimumValue;
    float maximumValue;
    float displayDuration;
    enum ARDataType activeRange;
    _Bool enabled;
    uint8_t _pad_1[0x7];
};




struct FlightControllerQuantumFuelStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* normal;
    uint8_t _pad_1[0x8];
    struct SInteractionState* low;
    uint8_t _pad_2[0x8];
    struct SInteractionState* empty;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocks_Node {
    uint8_t _pad_0[0x30];
};




struct PlanetDayNightTemperatureTemplate {
    uint8_t _pad_0[0x8];
    struct PlanetDayNightTemperatureParams* dayNightTemperatureParams;
    uint8_t _pad_1[0x10];
};




struct BulletProjectileParams {
    uint8_t _pad_0[0x8];
    struct ProjectileDetonationParams* detonationParams;
    uint8_t _pad_1[0x8];
    struct ProjectileProximityTriggerParams* proximityTriggerParams;
    uint8_t _pad_2[0x8];
    struct CryStringT* hitType;
    uint8_t _pad_3[0x8];
    float impactRadius;
    float minImpactRadius;
    float ignitionChanceOverride;
    _Bool keepAliveOnZeroDamage;
    uint8_t _pad_4[0x3];
    struct DamageBase* damage;
    uint8_t _pad_5[0x8];
    struct BulletDamageDropParams* damageDropParams;
    uint8_t _pad_6[0x8];
    struct BulletImpulseFalloffParams* impulseFalloffParams;
    uint8_t _pad_7[0x8];
    struct BulletPierceabilityParams* pierceabilityParams;
    uint8_t _pad_8[0x10];
    struct AmmoPenetrationParams* penetrationParams;
    uint8_t _pad_9[0x8];
    struct BulletVisualParams* visualParams;
    uint8_t _pad_10[0x48];
    struct BulletVisualParams* alternateVisualParams;
    uint8_t _pad_11[0x8];
    struct BulletElectronParams* electronParams;
    uint8_t _pad_12[0x8];
    struct AdditionalProjectilesParams* additionalProjectilesParams;
    uint8_t _pad_13[0x8];
    uint8_t* hitBehaviors;
    uint8_t _pad_14[0x30];
};




struct ExtinguishType_Base {
    uint8_t _pad_0[0x8];
};




struct SOutfitPlacingRule {
    uint8_t _pad_0[0x8];
    enum ARDataType Type;
    enum ARDataType SubType;
    struct SItemPortDef* Port;
    uint8_t _pad_1[0x8];
    struct SInteractionPointParams* InteractionPoint;
    uint8_t _pad_2[0x8];
};




struct SSalvageRepairMaterialParams {
    uint8_t _pad_0[0x8];
    float hullThicknessMeters;
    float ammoToMaterialFactor;
    struct ResourceType* RMCResourceType;
    uint8_t _pad_1[0x10];
};




struct InteractionConditionHasItemTypeAttached {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType itemType;
    enum ARDataType itemSubType;
};




struct BuildingBlocks_TagIntegerPair {
    uint8_t _pad_0[0x8];
    struct Tag* first;
    uint8_t _pad_1[0x10];
    int64_t second;
};




struct CameraThirdPersonBaseConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
};




struct DrugEfficacy {
    uint8_t _pad_0[0x8];
    float maxDose;
    float BDLMultiplier;
    float minsPerDosageMultiplier;
    float ValuePerDosageMultiplier;
};




struct SActorProceduralAimRecoilCurveModifiersDef {
    uint8_t _pad_0[0x8];
    float yawMaxDegreesModifier;
    float pitchMaxDegreesModifier;
    float rollMaxDegreesModifier;
    float maxFireTimeModifier;
    float recoilSmoothTimeModifier;
    uint8_t _pad_1[0x4];
    struct Vec3* minLimitsModifier;
    uint8_t _pad_2[0x10];
    struct Vec3* maxLimitsModifier;
    uint8_t _pad_3[0x10];
    float decayStartTimeModifier;
    float minDecayTimeModifier;
    float maxDecayTimeModifier;
    uint8_t _pad_4[0x4];
    struct SActorProceduralAimRecoilCurveNoiseModifiersDef* noiseCurvesModifier;
    uint8_t _pad_5[0x10];
};




struct ControlHints_HintDisplayInfo {
    uint8_t _pad_0[0x8];
    _Bool overrideName;
    uint8_t _pad_1[0x7];
    struct CLocIdentifier* name;
    _Bool includeSeparator;
    uint8_t _pad_2[0x7];
    struct CLocIdentifier* separatorInputName;
    struct CryStringT* separatorIconPath;
    uint8_t _pad_3[0x8];
};




struct InteractionConditionActorSealedHelmet {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct UIMapEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct MapDisplayParamsGalacticMap* galacticMapParams;
    uint8_t _pad_1[0x8];
    struct MapDisplayParamsStarMap* starMapParams;
    uint8_t _pad_2[0x8];
    struct MapDisplayParamsInteriorMap* interiorMapParams;
    uint8_t _pad_3[0x8];
    struct MapDisplayOverrideParams* displayParams;
    uint8_t _pad_4[0x40];
    _Bool startEnabled;
    uint8_t _pad_5[0x3];
    enum ARDataType frameType;
    float aspectRatio;
    int32_t viewDistance;
    float viewAngle;
    uint8_t _pad_6[0x4];
    struct CryStringT* displayMaterialPath;
    uint8_t _pad_7[0x8];
    struct CryStringT* mapBindingsNamespace;
    uint8_t _pad_8[0x8];
    struct MarkerDeclutteringCullingOrder* declutteringParams;
    uint8_t _pad_9[0x10];
    struct mobiGlasApp* linkedContractApp;
    uint8_t _pad_10[0x10];
};




struct SSimpleRotationComponentParams {
    uint8_t _pad_0[0x18];
    struct Ang3* angularVelocity;
    uint8_t _pad_1[0x10];
    _Bool stopRotationOnCollision;
    _Bool rotateAroundCenterOfMass;
    uint8_t _pad_2[0x2];
    float rotationSpeedMassFactor;
    _Bool enableRuntimeParameterUpdates;
    uint8_t _pad_3[0x7];
    struct SimpleRotationComponentVariation* variationParams;
    uint8_t _pad_4[0x8];
    struct SimpleRotationComponentOscillation* oscillationParams;
    uint8_t _pad_5[0x8];
};




struct UIDataBankDisplay3DParams {
    uint8_t _pad_0[0x8];
    struct QuatT* offset;
    uint8_t _pad_1[0x50];
    double renderRadius;
    struct GlobalResourceMaterial* renderNodeMaterial;
    uint8_t _pad_2[0x10];
    struct UI3DDisplayInputParams* inputParams;
    uint8_t _pad_3[0x48];
    struct UIWorldDisplayHolographicSettings* holographicSettings;
    uint8_t _pad_4[0x8];
    struct UIWorldDisplayRotationModeParams* rotationModeSettings;
    uint8_t _pad_5[0x18];
    _Bool centerToSelf;
    uint8_t _pad_6[0x3];
    float focusChangeDuration;
    float extraZoomScale;
    float childlessExtraZoomScale;
    float youAreHereZoomDiameter;
    float maxZoomScalingPerUpdate;
    struct UIWorldDisplayAutoRotationParams* autoRotationSettings;
    uint8_t _pad_7[0x8];
    struct UIWorldDisplaySoundParams* soundSettings;
    uint8_t _pad_8[0x8];
    float loadoutDummyCameraOffset;
    uint8_t _pad_9[0x4];
    _Bool showSpaceDust;
    uint8_t _pad_10[0x7];
    double collapseDistance;
    float labelScale;
    float labelOffsetMultiplier;
    uint32_t overlaySize;
    float maxRelativeHideSize;
    float minimumDisplaySizeMultiplier;
    uint8_t _pad_11[0x4];
    struct UIDataBankDisplay3DInterpolateParams* interpolateSettings;
    uint8_t _pad_12[0xa0];
    struct Vec2* orbitLineUVStart;
    uint8_t _pad_13[0x8];
    struct Vec2* orbitLineUVSize;
    uint8_t _pad_14[0x8];
    struct SRGBA8* overlayGrayedOutColor;
    uint8_t _pad_15[0x8];
    struct SRGBA8* overlayDefaultColor;
    uint8_t _pad_16[0x8];
    struct SRGBA8* overlayHighlightedColor;
    uint8_t _pad_17[0x8];
    struct SRGBA8* overlaySelectedColor;
    uint8_t _pad_18[0x8];
    struct SRGBA8* overlaySelectedHighlightedColor;
    uint8_t _pad_19[0x8];
    float orbitLineWidth;
    uint8_t _pad_20[0x4];
    struct SRGBA8* orbitLineDefaultColor;
    uint8_t _pad_21[0x8];
    struct SRGBA8* orbitLineHighlightedColor;
    uint8_t _pad_22[0x8];
    struct UIDataBankDisplay3DSpaceDustParams* spaceDustSettings;
    uint8_t _pad_23[0x10];
    struct GlobalResourceGeometry* backdropGeometry;
    uint8_t _pad_24[0x10];
    struct GlobalResourceMaterial* backdropMaterial;
    uint8_t _pad_25[0x10];
    float backdropScale;
    uint8_t _pad_26[0x4];
};




struct EntityEffectSystem_LightType {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
};




struct SWeaponSequenceEntryParams {
    uint8_t _pad_0[0x8];
    float delay;
    enum ARDataType unit;
    int32_t repetitions;
    uint8_t _pad_1[0x4];
    struct SWeaponActionParams* weaponAction;
    uint8_t _pad_2[0x8];
};




struct ConversationNode_Start {
    uint8_t _pad_0[0x8];
    struct ConversationNode_Base* next;
    uint8_t _pad_1[0x8];
};




struct LadderLookAroundParams {
    uint8_t _pad_0[0x8];
    float blendBackToClimbingLerpSpeed;
    float blendBackToClimbingLimitAngle;
};




struct SMissionLocationComponentParams {
    uint8_t _pad_0[0x18];
};




struct SFreightElevatorUIProviderParams {
    uint8_t _pad_0[0x18];
    _Bool isItemBank;
    _Bool canBeLoweredWithItem;
    _Bool canBeRaisedManually;
    uint8_t _pad_1[0x5];
    struct SSharedInteractionParams* openInteraction;
    uint8_t _pad_2[0x8];
    struct Camera* gearStorageCamera;
    uint8_t _pad_3[0x10];
};




struct SkylineComponentParams {
    uint8_t _pad_0[0x18];
};




struct AILookComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_StyleSelectorConditionNotTag {
    uint8_t _pad_0[0x10];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
};




struct SSequencerPlayerUsableReserveSlotTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* name;
    uint8_t _pad_1[0x10];
    struct SPlayerUsableSearchRouteUsable* searchUsableRoute;
    uint8_t _pad_2[0x170];
    _Bool reserveSlot;
    uint8_t _pad_3[0x7];
};




struct MissionLocationValidation {
    uint8_t _pad_0[0x8];
};




struct ControlHintCondition_VehicleMiningLaserMode {
    uint8_t _pad_0[0x8];
    enum ARDataType miningLaserMode;
    uint8_t _pad_1[0x7];
};




struct SInteractionStateDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* stateTypeName;
    uint8_t _pad_1[0x8];
    struct CryStringT* stateName;
    uint8_t _pad_2[0x38];
};




struct SActorLocomotionFeatureDef_Slope {
    uint8_t _pad_0[0x8];
    _Bool enableStairAnimSet;
    uint8_t _pad_1[0x7];
};




struct PersonalThoughtInventoryFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayIconPath;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* name;
    _Bool disableForFPSKiosk;
    uint8_t _pad_2[0x7];
};




struct FontSupportParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* letterMaterial;
    uint8_t _pad_1[0x8];
    struct InnerThought_Config* fontParams;
    uint8_t _pad_2[0x20];
};




struct FixedSizedCircleTraversalCostShapeConfig {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
};




struct DynamicObjectNavigationTriggerAdapter {
    uint8_t _pad_0[0x8];
    float minSpeedToBeIgnored;
    _Bool allowNavMeshCutout;
    uint8_t _pad_1[0x3];
    struct TraversalCostConfig* optionalCostConfig;
    uint8_t _pad_2[0x10];
    struct TraversalCostShapeConfig* shapeConfig;
    uint8_t _pad_3[0x8];
};




struct SCSeatActorAttachmentParams {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct CryStringT* boneName;
    uint8_t _pad_2[0x8];
    enum ARDataType stance;
    uint8_t _pad_3[0x4];
};




struct PatrolPointComponentParams {
    uint8_t _pad_0[0x18];
};




struct HierarchicalContextualData {
    uint8_t _pad_0[0x10];
};




struct SDespawnRule_OnFallBelow {
    uint8_t _pad_0[0x8];
    float ruleDelaySeconds;
    uint8_t _pad_1[0x4];
    float distance;
    uint8_t _pad_2[0x4];
};




struct SCItemFuelTankParams {
    uint8_t _pad_0[0x18];
    struct SInteractionState* openState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* closedState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* pumpingState;
    uint8_t _pad_3[0x8];
    struct GlobalResourceAudio* fuelFlowLoopStartAudioTrigger;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* fuelFlowLoopStopAudioTrigger;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* fuelFillDrainRateAudioRtpc;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* fuelFillLevelAudioRtpc;
    uint8_t _pad_7[0x18];
};




struct StickyFilterAutocenterParams {
    uint8_t _pad_0[0x8];
    float idleTimeBeforeRecenter;
    float timeRecenterAtMinAngle;
    float timeRecenterAtMaxAngle;
    float timeRecenterAtMinAngleMoving;
    float timeRecenterAtMaxAngleMoving;
    uint8_t _pad_1[0x4];
    struct Vec3* eyeOffsetAtMinDistance;
    uint8_t _pad_2[0x10];
    struct Vec3* eyeOffsetAtMaxDistance;
    uint8_t _pad_3[0x10];
};




struct SWetnessAccumulatorParams {
    uint8_t _pad_0[0x8];
    float InitialAccumulationRatio;
    _Bool AccumulateWhenUnstreamed;
    _Bool AccumulateOnlyAfterTractorBeam;
    _Bool AccumulateOnlyWhenAttached;
    _Bool StopAccumulationWhenAttached;
    float AccumulationEventThreshold;
    uint8_t _pad_1[0x4];
    struct CryStringT* PortTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* RequiredPortTags;
    uint8_t _pad_3[0x8];
};




struct MissionModuleHierarchySubMission {
    uint8_t _pad_0[0x8];
    struct CryStringT* subMissionModule;
    uint8_t _pad_1[0x8];
    _Bool preSpawn;
    uint8_t _pad_2[0x7];
    struct MissionModuleHierarchy* subModuleHierarchy;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_ColorBase {
    uint8_t _pad_0[0x8];
};




struct VolumeShape_Sphere {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
};




struct LandingGearContactStateModifier {
    uint8_t _pad_0[0x8];
    struct AttachableStateModifierContextBase* context;
    uint8_t _pad_1[0x8];
    struct SInteractionState* landed;
    uint8_t _pad_2[0x8];
    struct SInteractionState* notLanded;
    uint8_t _pad_3[0x8];
};




struct SSalvageRepairHighlightColorParams {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float hullThreshold;
    uint8_t _pad_2[0x4];
};




struct InteractionConditionUsableAlignmentSlotEmpty {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct AlignmentSlotBase* alignmentSlot;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_BindingsListIndex {
    uint8_t _pad_0[0x50];
};




struct BuildingBlocks_PreviewSceneAugmentedRealityRtt {
    uint8_t _pad_0[0x10];
    enum ARDataType renderLayer;
    uint8_t _pad_1[0x7];
    _Bool cardsUseStageRadius;
    uint8_t _pad_2[0x7];
};




struct SCItemElevatorParams {
    uint8_t _pad_0[0x18];
    float MaxSpeed;
    float EasingDistance;
    float IdlingPeriod;
    float OpenWaitTime;
    float QueueWaitTime;
    _Bool SlowDownAtBends;
    uint8_t _pad_1[0x3];
    struct SElevatorBaseCollisionParams* Collision;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* OpenInnerDoorInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* OpenInnerDoorFinishedInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* CloseAllDoorsInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* CloseInnerDoorFinishedInteraction;
    uint8_t _pad_6[0x8];
    struct ElevatorEffectParams* Effects;
    uint8_t _pad_7[0xc0];
    struct ItemResourceState* idleState;
    uint8_t _pad_8[0x8];
    struct ItemResourceState* activeState;
    uint8_t _pad_9[0x8];
};




struct SPerkShopItemCategoryBase {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    struct ShopFranchise* franchise;
    uint8_t _pad_2[0x10];
    enum ARDataType type_;
    enum ARDataType subType;
    struct Tag* requiredTag;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_BindingsNumberBuiltInVariable {
    uint8_t _pad_0[0x50];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
};




struct BindingsOperations_LocalizationTimeFormatDuration {
    uint8_t _pad_0[0x50];
    int32_t significantFigures;
    _Bool useClockFormatting;
    uint8_t _pad_1[0x3];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x8];
};




struct MusicLogicSetValue {
    uint8_t _pad_0[0x8];
    struct MusicLogicParameter* parameter;
    uint8_t _pad_1[0x10];
    float value;
    uint8_t _pad_2[0x4];
};




struct SCIGTestB {
    uint8_t _pad_0[0x8];
    _Bool bBase;
    uint8_t _pad_1[0x7];
    _Bool bB;
    uint8_t _pad_2[0x7];
};




struct SControlledEntityRopeAttachmentPair {
    uint8_t _pad_0[0x8];
    struct EntityReferenceDef* ropeEntity;
    uint8_t _pad_1[0x10];
    struct EntityReferenceDef* attachedEntity;
    uint8_t _pad_2[0x10];
};




struct ControlHintCondition_ActorItemTypeAndTags {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    enum ARDataType subType;
    struct TagList* positiveTags;
    uint8_t _pad_1[0x30];
    struct TagList* negativeTags;
    uint8_t _pad_2[0x30];
    enum ARDataType attachmentType;
    uint8_t _pad_3[0x7];
};




struct SEntityDynamicLocationProperties {
    uint8_t _pad_0[0x8];
    _Bool dynamicallyUpdatePersistanceLocation;
    uint8_t _pad_1[0x7];
};




struct ObjectiveProperty_Embedded {
    uint8_t _pad_0[0x8];
    struct MissionProperty* property;
    uint8_t _pad_1[0x30];
};




struct RecordRefUserVariableTypeFontStyle {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_FontStyle* value;
    uint8_t _pad_1[0x10];
};




struct SModHealth {
    uint8_t _pad_0[0x8];
};




struct LightStateParams_Default {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float intensity;
    uint8_t _pad_2[0x4];
    struct CryStringT* presetTag;
    uint8_t _pad_3[0x8];
    int32_t lightStyle;
    float temperature;
};




struct SCItemProximitySensorSphereParams {
    uint8_t _pad_0[0x10];
    float Radius;
    uint8_t _pad_1[0x4];
    struct Vec3* Center;
    uint8_t _pad_2[0x10];
};




struct SCSeatAccessInteractionConditionParams {
    uint8_t _pad_0[0x8];
    enum ARDataType idle;
    enum ARDataType landed;
    enum ARDataType docked;
    enum ARDataType zeroG;
    enum ARDataType landingGearDown;
    enum ARDataType landingGearUp;
    enum ARDataType inQuantum;
    uint8_t _pad_1[0x4];
};




struct MissionScenarioCyclePhase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    uint32_t duration_seconds;
    uint8_t _pad_3[0x4];
};




struct StarMapObjectLocationParams {
    uint8_t _pad_0[0x8];
    _Bool setEntityLocationOnEnter;
    _Bool exposeForPlayerCreatedMissions;
    _Bool excludeFromLevelLoad;
    uint8_t _pad_1[0x5];
    struct SEntityDensityClassOverwritesBase* densityClassOverwrites;
    uint8_t _pad_2[0x8];
};




struct SNonTeamHostility {
    uint8_t _pad_0[0x18];
};




struct GameModeValidMap {
    uint8_t _pad_0[0x8];
    struct Level* levelReference;
    uint8_t _pad_1[0x10];
    _Bool devOnly;
    uint8_t _pad_2[0x7];
};




struct AnimationComponentParams {
    uint8_t _pad_0[0x18];
};




struct UIGraph_BindingsArrayDockComponent {
    uint8_t _pad_0[0x8];
    struct CryStringT* tagName;
    uint8_t _pad_1[0x8];
    struct CryStringT* arrayName;
    uint8_t _pad_2[0x8];
};




struct SMeleeWeaponComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* helper;
    uint8_t _pad_1[0x8];
    struct CryStringT* audioTriggerName;
    uint8_t _pad_2[0x8];
    struct CryStringT* matFxTriggerName;
    uint8_t _pad_3[0x8];
    _Bool canBeUsedForTakeDown;
    uint8_t _pad_4[0x7];
    struct WeaponProceduralAnimation* proceduralAnimationRecord;
    uint8_t _pad_5[0x10];
    _Bool canBlock;
    _Bool canBeUsedInProne;
    _Bool canDodge;
    uint8_t _pad_6[0x1];
    float stanceTransitionMeleeDelay;
    struct MeleeCombatConfig* meleeCombatConfig;
    uint8_t _pad_7[0x10];
};




struct Ang3 {
    uint8_t _pad_0[0x8];
    float x;
    float y;
    float z;
    uint8_t _pad_1[0x4];
};




struct SCItemDoorHazardLightsParams {
    uint8_t _pad_0[0x18];
    struct Vec3* ProbeOffset;
    uint8_t _pad_1[0x10];
    struct CryStringT* NoHazardEffectGroup;
    uint8_t _pad_2[0x8];
    struct CryStringT* MinorHazardEffectGroup;
    uint8_t _pad_3[0x8];
    struct CryStringT* MajorHazardEffectGroup;
    uint8_t _pad_4[0x8];
};




struct SHealingBeamBoneEntryParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* boneName;
    uint8_t _pad_1[0x8];
    struct Vec3* boneOffset;
    uint8_t _pad_2[0x10];
    struct Vec3* cardOffset;
    uint8_t _pad_3[0x10];
};




struct SLocalPlayerHapticParams {
    uint8_t _pad_0[0x18];
};




struct NavLinkLedgeLocation {
    uint8_t _pad_0[0x8];
    struct QuatT* relativeTransform;
    uint8_t _pad_1[0x50];
};




struct CameraDockingConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
};




struct TQSOptionContentRecord {
    uint8_t _pad_0[0x8];
    struct TQSOptionContent* content;
    uint8_t _pad_1[0xc0];
};




struct LinkedStatRulePassAlways {
    uint8_t _pad_0[0x8];
};




struct ProcBreathingGraphEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* joint;
    uint8_t _pad_1[0x8];
    float additionalScale;
    _Bool relativeToShoulder;
    _Bool firstPersonOnly;
    uint8_t _pad_2[0x2];
    struct ProcBreathingGraph* translation;
    uint8_t _pad_3[0x50];
    struct ProcBreathingGraph* rotation;
    uint8_t _pad_4[0x58];
};




struct RadiationEmitterComponentParams {
    uint8_t _pad_0[0x18];
    struct Tag* radiationReceiverTag;
    uint8_t _pad_1[0x10];
    _Bool enabled;
    uint8_t _pad_2[0x3];
    float emissionRangeMinimum;
    float emissionRangeMaximum;
    float emissionStrength;
    enum ARDataType falloffCurve;
    uint8_t _pad_3[0x3];
    float emissionRangeHeightMinimum;
    float emissionRangeHeightMaximum;
    uint8_t _pad_4[0x4];
};




struct CraftingRecipeCosts_Base {
    uint8_t _pad_0[0x8];
};




struct SimpleRotationComponentVariation {
    uint8_t _pad_0[0x8];
    struct Vec3* rotationAxisVariation;
    uint8_t _pad_1[0x10];
    float rotationSpeedVariationFactor;
    _Bool randomizeStartAngle;
    uint8_t _pad_2[0x3];
};




struct HintMarkerParams {
    uint8_t _pad_0[0x18];
};




struct SControlledEntityParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct EntityReferenceDef* entity;
    uint8_t _pad_2[0x10];
    struct SControlledEntityTransformParams* transformParams;
    uint8_t _pad_3[0x280];
    _Bool toggleKinematicPhysics;
    _Bool forceAwake;
    uint8_t _pad_4[0x6];
    struct SControlledEntityIFCSParams* ifcsParams;
    uint8_t _pad_5[0x10];
};




struct ScreenEffects_DebugParam {
    uint8_t _pad_0[0x8];
    struct Tag* strengthTag;
    uint8_t _pad_1[0x10];
    float strength;
    uint8_t _pad_2[0x4];
};




struct CommonTargetVisibilityScore {
    uint8_t _pad_0[0x8];
    float isVisible;
    float isNotVisible;
};




struct SEntityGridProperty {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* gridGeometry;
    uint8_t _pad_1[0x10];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool inheritGravity;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x5];
};




struct SCItemInputAutoAimParams {
    uint8_t _pad_0[0x8];
    float BaseMuzzleAngleThreshold;
    float AutoAimMuzzleAngleThreshold;
    float AutoAimGimbalAngleThreshold;
    float AutoGimbalMaxAllowedTurretSpeed;
    float AutoGimbalLimitedTurretSpeedInnerAngle;
    float AutoGimbalLimitedTurretSpeedOuterAngle;
    float AutoAimPowerDrawRatio;
    uint8_t _pad_1[0x4];
};




struct SSalvageAreaBoxParams {
    uint8_t _pad_0[0x8];
    struct Vec3* extents;
    uint8_t _pad_1[0x10];
    struct Vec3* offset;
    uint8_t _pad_2[0x10];
};




struct SServiceBeaconNotificationOverride {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* message;
};




struct ServiceBeaconInterfaceParams {
    uint8_t _pad_0[0x18];
};




struct SCItemQuantumDriveParams {
    uint8_t _pad_0[0x18];
    struct SQuantumDriveParams* params;
    uint8_t _pad_1[0xb8];
    struct SQuantumDriveParams* splineJumpParams;
    uint8_t _pad_2[0xb8];
    struct QuantumDriveHeatParams* heatParams;
    uint8_t _pad_3[0x18];
    struct CryStringT* tracePoint;
    uint8_t _pad_4[0x8];
    float quantumFuelRequirement;
    float jumpRange;
    float disconnectRange;
    uint8_t _pad_5[0x4];
    struct SQuantumBoostParams* quantumBoostParams;
    uint8_t _pad_6[0x888];
};




struct AIMeleeAttack {
    uint8_t _pad_0[0x8];
    enum ARDataType attackType;
    uint8_t _pad_1[0x4];
    struct CryStringT* globalFragmentTags;
    uint8_t _pad_2[0x8];
    float minDistanceToTarget2d;
    float maxDistanceToTarget2d;
    float minRelativeTargetHeight;
    float maxRelativeTargetHeight;
    float maxAngleToTarget;
    _Bool ignoreAttackObstructionClearance;
    uint8_t _pad_3[0x3];
};




struct VendingMachineItemParams {
    uint8_t _pad_0[0x18];
};




struct VaultNavigationLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkValidForAgentType;
    uint8_t _pad_1[0x8];
    struct NavigationLinkCostCustomization* costMultiplierSetup;
    uint8_t _pad_2[0x30];
    enum ARDataType linkingType;
    uint8_t _pad_3[0x4];
    struct UsableUseChannelInstance* useChannel;
    uint8_t _pad_4[0x8];
    struct NavLinkLocation* topAnchor;
    uint8_t _pad_5[0x8];
    struct CryStringT* mannequinTags;
    uint8_t _pad_6[0x8];
    float motionWarpSearchDistance;
    uint8_t _pad_7[0x4];
};




struct SCDynamicRigIntensityParams {
    uint8_t _pad_0[0x8];
    float referenceLightMinIntensity;
    float referenceLightMaxIntensity;
    float rigLightMinIntensity;
    float rigLightMaxIntensity;
    float backupIntensity;
    float maxSaturation;
};




struct GlobalJumpTunnelPassByLightParams {
    uint8_t _pad_0[0x8];
    struct Range* intensityRange;
    uint8_t _pad_1[0x8];
    struct Range* radiusRange;
    uint8_t _pad_2[0x8];
    struct Range* bulbRange;
    uint8_t _pad_3[0x8];
    struct Range* spacingRange;
    uint8_t _pad_4[0x8];
    struct Range* distanceFromSpline;
    uint8_t _pad_5[0x8];
    struct Range* speedRange;
    uint8_t _pad_6[0x8];
    struct Range* colorRandomOffsetRange;
    uint8_t _pad_7[0x8];
    float entranceOffset;
    float spawnChance;
    float maxRange;
    float fadeOutDistStart;
};




struct BodyPart {
    uint8_t _pad_0[0x8];
    enum ARDataType partHealthStat;
    enum ARDataType partWearStat;
    struct CryStringT* jointName;
    uint8_t _pad_1[0x10];
};




struct MissionPropertyValue_DeliveryOrder {
    uint8_t _pad_0[0x8];
};




struct UIGraph_LoadoutEditorComponent {
    uint8_t _pad_0[0x8];
    struct LoadoutEditorComponentParams* loadoutEditorComponentParams;
    uint8_t _pad_1[0x10];
    struct EntityClassDefinition* geometryRecord;
    uint8_t _pad_2[0x10];
    struct CryStringT* entityClipName;
    uint8_t _pad_3[0x8];
    struct Vec2* entityClipDimensions;
    uint8_t _pad_4[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeDropTargetPolicy {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct TriggeredWarningClear {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    enum ARDataType messageState;
    uint8_t _pad_1[0x4];
};




struct QuantumDriveSplineFXParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* splineParticleEffect;
    uint8_t _pad_1[0x10];
    struct QuantumDriveSplineFXNode* startNodeParams;
    uint8_t _pad_2[0x8];
    struct QuantumDriveSplineFXNode* segmentNodeParams;
    uint8_t _pad_3[0x8];
    int32_t numSegmentNodes;
    uint8_t _pad_4[0x4];
    struct QuantumDriveSplineFXNode* endNodeParams;
    uint8_t _pad_5[0x8];
};




struct AudioBreathStyleBaseNode {
    uint8_t _pad_0[0x8];
};




struct ItemResourceDeltaConsumption {
    uint8_t _pad_0[0x8];
    struct ItemResourceDeltaAmount* consumption;
    uint8_t _pad_1[0x18];
    struct ItemResourceComposition* consumptionComposition;
    uint8_t _pad_2[0x50];
    struct ItemResourceDynamicAmountBase* dynamicAmountOverride;
    uint8_t _pad_3[0x8];
    float minimumConsumptionFraction;
    uint8_t _pad_4[0x4];
};




struct STurretGlobalParams {
    uint8_t _pad_0[0x8];
    _Bool pointerModeAllowed;
    uint8_t _pad_1[0x3];
    float pointerModeInputSmoothing;
    float pointerModeInnerAngle;
    float pointerModeInnerAngleTurretSmoothing;
    float pointerModeInnerAngleMaxSpeedModifier;
    float pointerModeMiddleAngle;
    float pointerModeOuterAngle;
    float pointerModeOuterAngleTurretSmoothing;
    float pointerModeMaxDegPerSec;
    _Bool relativeInputAllowed;
    uint8_t _pad_2[0x3];
    float relativeInputSmoothing;
    uint8_t _pad_3[0x4];
};




struct SphereAreaAlignmentSlotTypeParams {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
};




struct AtmosphereBehavior_TurbulenceParams {
    uint8_t _pad_0[0x8];
    float frequencyMultiplier;
    float amplitudeMultiplier;
    float vibrationMultiplier;
    uint8_t _pad_1[0x4];
};




struct LandingPadSize {
    uint8_t _pad_0[0x8];
    int32_t id;
    uint8_t _pad_1[0x4];
    struct Vec3* shipSize;
    uint8_t _pad_2[0x10];
    struct Vec3* groundVehicleSize;
    uint8_t _pad_3[0x10];
};




struct SpawnSettingsInventoryItem {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    int32_t quantity;
    int32_t amountInventoriesToFill;
    _Bool markAsMissionItem;
    uint8_t _pad_2[0x7];
};




struct UIWorldDisplayRotationModeParams {
    uint8_t _pad_0[0x8];
    enum ARDataType defaultPlaneAlignment;
    float defaultPitchRotation;
    enum ARDataType defaultFollowRotationMode;
    _Bool defaultUseInputRotation;
    uint8_t _pad_1[0x3];
    float transitionDuration;
    enum ARDataType transitionInterpolationMode;
    uint8_t _pad_2[0x3];
};




struct SSpecializedDataEntry {
    uint8_t _pad_0[0x8];
};




struct HeadMotionOffsetParams {
    uint8_t _pad_0[0x8];
    struct Vec3* minOffset;
    uint8_t _pad_1[0x10];
    struct Vec3* maxOffset;
    uint8_t _pad_2[0x10];
    float timePeriod;
    float smoothConstant;
    _Bool flipShakeVector;
    uint8_t _pad_3[0x3];
    float flipShakeVectorError;
    _Bool matchFootstepsCadence;
    uint8_t _pad_4[0x3];
    float footstepsCycleDelay;
    struct Vec3* sineWavesPerCycle;
    uint8_t _pad_5[0x10];
    float minScaleLookingAway;
    float maxLookingAwayAngle;
};




struct ParticleEffectParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_1[0x10];
    struct CryStringT* comment;
    uint8_t _pad_2[0x8];
    _Bool activate;
    uint8_t _pad_3[0x3];
    float spawnProbability;
    _Bool primed;
    uint8_t _pad_4[0x7];
    struct CustomFloat* scale;
    uint8_t _pad_5[0x8];
    struct Vec3* emissionSizeScale;
    uint8_t _pad_6[0x10];
    struct CustomFloat* speedScale;
    uint8_t _pad_7[0x8];
    struct CustomFloat* timeScale;
    uint8_t _pad_8[0x8];
    struct CustomFloat* countScale;
    uint8_t _pad_9[0x8];
    _Bool countPerUnit;
    uint8_t _pad_10[0x7];
    struct CustomFloat* strength;
    uint8_t _pad_11[0x8];
    struct CustomFloat* alphaScale;
    uint8_t _pad_12[0x8];
    struct CustomFloat* pulsePeriod;
    uint8_t _pad_13[0x8];
    struct ParticleEffectNoneTintingParams* externalTint;
    uint8_t _pad_14[0x8];
    enum ARDataType attachType;
    enum ARDataType attachForm;
    _Bool registerByBbox;
    uint8_t _pad_15[0x3];
    enum ARDataType clipToVisArea;
    enum ARDataType gpuVisAreaCullingMode;
    _Bool forceDisableShadows;
    uint8_t _pad_16[0x3];
    enum ARDataType tesselationAmount;
    enum ARDataType attachToZone;
    struct ParticleEffectAudioParams* audio;
    uint8_t _pad_17[0x30];
    struct GPUParticleAudioStruct* gpuAudio;
    uint8_t _pad_18[0x100];
    int32_t seed;
    enum ARDataType renderLayer;
    uint8_t _pad_19[0x3];
};




struct AlignmentSlotAreaHelperComponentParams {
    uint8_t _pad_0[0x18];
};




struct SeatedTacticScores {
    uint8_t _pad_0[0x8];
    struct CryStringT* tacticName;
    uint8_t _pad_1[0x8];
    struct CommonTargetingSameTargetScore* amountOfEntitiesTargetingSameTargetScore;
    uint8_t _pad_2[0x18];
    struct CommonTargetVisibilityScore* isCurrentTargetVisibleScore;
    uint8_t _pad_3[0x8];
    struct CommonCurrentTargetDistanceScore* currentDistanceToTargetScore;
    uint8_t _pad_4[0x28];
    float emptyTest;
    uint8_t _pad_5[0x4];
};




struct SWeaponConditionAmmoCount {
    uint8_t _pad_0[0x8];
    struct SIntNumberComparer* comparer;
    uint8_t _pad_1[0x8];
};




struct AudioSwitch {
    uint8_t _pad_0[0x8];
    struct CryStringT* switch_;
    uint8_t _pad_1[0x28];
};




struct QuantumDriveStateMusicMap {
    uint8_t _pad_0[0x8];
    struct MusicLogicEvent* musicLogicEvent;
    uint8_t _pad_1[0x10];
    struct GlobalResourceAudio* musicWwiseEvent;
    uint8_t _pad_2[0x18];
    enum ARDataType state;
    uint8_t _pad_3[0x4];
};




struct LinkedStatRulePassAlwaysPositive {
    uint8_t _pad_0[0x8];
};




struct UnitTest_ClassB {
    uint8_t _pad_0[0x8];
    struct CryStringT* myBaseString;
    uint8_t _pad_1[0x8];
    struct CryStringT* myClassA;
    uint8_t _pad_2[0x8];
    struct CryStringT* myClassB;
    uint8_t _pad_3[0x8];
};




struct ItemTypeModifier {
    uint8_t _pad_0[0x8];
    enum ARDataType Type;
    enum ARDataType SubType;
    float matchPercentage;
    uint8_t _pad_1[0x4];
};




struct SuggestedFOVSetup {
    uint8_t _pad_0[0x8];
    float suggestedFOV;
    enum ARDataType mode;
};




struct SItemPortLoadoutEntryParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPortName;
    uint8_t _pad_1[0x8];
    struct CryStringT* entityClassName;
    uint8_t _pad_2[0x8];
    struct EntityClassDefinition* entityClassReference;
    uint8_t _pad_3[0x10];
    struct SLoadoutInventoryContainer* inventoryContainer;
    uint8_t _pad_4[0x8];
    struct SItemPortLoadoutBaseParams* loadout;
    uint8_t _pad_5[0x8];
};




struct SCItemFlightControllerParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* engineOnInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* engineOffInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* enableCoupledModeInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* disableCoupledModeInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* enableGSafetyInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* disableGSafetyInteraction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* enableESPInteraction;
    uint8_t _pad_7[0x8];
    struct SSharedInteractionParams* disableESPInteraction;
    uint8_t _pad_8[0x8];
    struct SSharedInteractionParams* enableCruiseControlInteraction;
    uint8_t _pad_9[0x8];
    struct SSharedInteractionParams* disableCruiseControlInteraction;
    uint8_t _pad_10[0x8];
    struct SSharedInteractionParams* enableVTOLInteraction;
    uint8_t _pad_11[0x8];
    struct SSharedInteractionParams* disableVTOLInteraction;
    uint8_t _pad_12[0x8];
    struct SSharedInteractionParams* enableProximityAssistInteraction;
    uint8_t _pad_13[0x8];
    struct SSharedInteractionParams* disableProximityAssistInteraction;
    uint8_t _pad_14[0x8];
    struct SSharedInteractionParams* deployTransformInteraction;
    uint8_t _pad_15[0x8];
    struct SSharedInteractionParams* retractTransformInteraction;
    uint8_t _pad_16[0x8];
    struct SSharedInteractionParams* cycleTransformInteraction;
    uint8_t _pad_17[0x8];
    float fuelWarningDisplayTime;
    float passiveRefuelWarningThresholdPercentage;
    float hoverAnimPlaybackDuration;
    _Bool hoverAnimPlayInLandingMode;
    uint8_t _pad_18[0x3];
    struct Tag* PowerOnEffectTag;
    uint8_t _pad_19[0x10];
    struct Tag* PowerOffEffectTag;
    uint8_t _pad_20[0x10];
    struct ShipRecallParams* ShipRecall;
    uint8_t _pad_21[0x8];
    struct SProjectedHudParams* hudParamsOverride;
    uint8_t _pad_22[0x10];
    struct SVehicleHudParams* vehicleHudParamsOverride;
    uint8_t _pad_23[0x10];
    struct VehicleCollisionParams* collisionDetection;
    uint8_t _pad_24[0x10];
};




struct ItemPortViewInformationByName {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct DamageResistanceEntry {
    uint8_t _pad_0[0x8];
    float Multiplier;
    float Threshold;
};




struct LightBoxComponentParams {
    uint8_t _pad_0[0x18];
};




struct AtmosphereStateRef {
    uint8_t _pad_0[0x8];
    struct AtmosphereStateTemplate* stateTemplate;
    uint8_t _pad_1[0x10];
};




struct SCharacterCustomizerHairRandomizationParams {
    uint8_t _pad_0[0x8];
    float noItemProbability;
    uint8_t _pad_1[0x4];
    struct Vec2* melaninLimits;
    uint8_t _pad_2[0x8];
    struct Vec2* rednessLimits;
    uint8_t _pad_3[0x8];
};




struct SInteractionLinkExecuteCreateInteractionLinkNode {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkedInteractionName;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* localInteraction;
    uint8_t _pad_2[0x8];
};




struct MineableElement {
    uint8_t _pad_0[0x8];
    struct ResourceType* resourceType;
    uint8_t _pad_1[0x10];
    float elementInstability;
    float elementResistance;
    float elementOptimalWindowMidpoint;
    float elementOptimalWindowMidpointRandomness;
    float elementOptimalWindowThinness;
    float elementExplosionMultiplier;
    float elementClusterFactor;
    uint8_t _pad_2[0x4];
};




struct PersonalThoughtInventoryMenu {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
};




struct ControlHintCondition_ActorAimStanceState {
    uint8_t _pad_0[0x8];
    enum ARDataType aimStanceState;
    uint8_t _pad_1[0x4];
};




struct SReputationAmountParams {
    uint8_t _pad_0[0x8];
    struct FactionReputation* factionReputation;
    uint8_t _pad_1[0x10];
    struct SReputationScopeParams* reputationScope;
    uint8_t _pad_2[0x10];
    struct SReputationRewardAmount* reward;
    uint8_t _pad_3[0x10];
};




struct AttentionTargetComponentParams {
    uint8_t _pad_0[0x18];
    float attackerScore;
    uint8_t _pad_1[0x4];
};




struct TimeValue_Base {
    uint8_t _pad_0[0x8];
};




struct SCItemTurretJointMovementAxisParams {
    uint8_t _pad_0[0x8];
    _Bool enableIKRotationalSpeed;
    uint8_t _pad_1[0x7];
    struct AudioRtpc* audioRtpcMoveToTarget;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* audioRtpcMoveToTargetDistance;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* audioRtpcRotationSpeedAveraged;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* startRotateAudioTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* stopRotateAudioTrigger;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* rotateStartedAudioOneShotTrigger;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* rotateStoppedAudioOneShotTrigger;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* rotationDirectionChangedAudioTrigger;
    uint8_t _pad_9[0x18];
    float rotateStartedAudioCooldown;
    float rotateStoppedAudioCooldown;
    float rotationDirectionChangedAudioCooldown;
    int32_t rotationSpeedAudioAveragingFrames;
    float minMovementAngleForAudio;
    float speed;
    float acceleration_timeToFullSpeed;
    float jerk_timeToFullAcceleration;
    float accelerationDecay;
    uint8_t _pad_10[0x4];
    struct SCItemTurretAngleLimitParams* angleLimits;
    uint8_t _pad_11[0x10];
};




struct PlayerTradeGlobalParams {
    uint8_t _pad_0[0x18];
    float taxRate;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* taxText;
    struct CLocIdentifier* currencyTextUEC;
    struct CLocIdentifier* currencyTextREC;
    struct CLocIdentifier* currencyTextMER;
    struct CLocIdentifier* searchWindowTitleText;
    struct CLocIdentifier* resultsListTitleText;
    struct CLocIdentifier* partyListTitleText;
    struct CLocIdentifier* contactsListTitleText;
    struct CLocIdentifier* basketWindowTitleText;
    struct CLocIdentifier* sendStatusWindowTitleText;
    int32_t searchDelayInMilliSeconds;
    int32_t searchResultListLimit;
    struct PlayerTradeNotification* notification;
    uint8_t _pad_2[0x70];
};




struct SWeaponProceduralAimRecoilConfigDef {
    uint8_t _pad_0[0x8];
    struct Vec2* max;
    uint8_t _pad_1[0x8];
    float pull_left_percentage;
    uint8_t _pad_2[0x4];
    struct Vec2* shot_kick_first;
    uint8_t _pad_3[0x8];
    struct Vec2* shot_kick;
    uint8_t _pad_4[0x8];
    float random_pitch;
    float random_yaw;
    float decay;
    float end_decay;
    float recoil_time;
    float delay;
    struct SWeaponProceduralAimRecoilCurveConfigDef* curveAimRecoil;
    uint8_t _pad_5[0xa0];
};




struct PersonalThoughtHologramParams {
    uint8_t _pad_0[0x8];
    struct RGBA* mainColour;
    uint8_t _pad_1[0x10];
    struct RGBA* selectedColour;
    uint8_t _pad_2[0x10];
    struct CryStringT* defaultHoloMaterialName;
    uint8_t _pad_3[0x8];
    struct CryStringT* selectedHoloMaterialName;
    uint8_t _pad_4[0x8];
    struct PersonalThoughtHologramAnimationParams* animationParams;
    uint8_t _pad_5[0x18];
};




struct AISpecialRangedAttackConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* attackName;
    uint8_t _pad_1[0x8];
    float maxElevationDeg;
    uint8_t _pad_2[0x4];
    struct CryStringT* verticalAttackFragmentTag;
    uint8_t _pad_3[0x8];
};




struct AttackCategoryParamsBase {
    uint8_t _pad_0[0x8];
    struct DamageInfo* damageInfo;
    uint8_t _pad_1[0x18];
};




struct SCRTTCameraParams {
    uint8_t _pad_0[0x18];
    struct Camera* onFootCameraView;
    uint8_t _pad_1[0x10];
    struct Camera* vehicleCameraView;
    uint8_t _pad_2[0x10];
    float defaultCamDistance;
    uint8_t _pad_3[0x4];
};




struct Vec2 {
    uint8_t _pad_0[0x8];
    float x;
    float y;
};




struct RestrictedAreaAutopilotParams {
    uint8_t _pad_0[0x8];
    float minimumSpeed;
    uint8_t _pad_1[0x4];
};




struct MissionModifier_IgnoreMissionPlayerCriminality {
    uint8_t _pad_0[0x8];
    struct CryStringT* modifierName;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x1f];
    struct MissionBrokerEntry* missionBrokerEntry;
    uint8_t _pad_3[0x10];
};




struct SEntityContextBase {
    uint8_t _pad_0[0x8];
};




struct SEntityBuoyancyParams {
    uint8_t _pad_0[0x8];
    _Bool buoyantInAir;
    uint8_t _pad_1[0x3];
    float waterDamping;
    float waterDensity;
    float waterResistance;
};




struct ElevatorPathNodeGatewayParams {
    uint8_t _pad_0[0x8];
    float timingInTransit;
    uint8_t _pad_1[0x4];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_2[0x20];
};




struct WeaponMisfireDef {
    uint8_t _pad_0[0x8];
    struct SWeaponMisfireEntry* minorMisfire;
    uint8_t _pad_1[0xb0];
    struct SWeaponMisfireEntry* majorMisfire;
    uint8_t _pad_2[0xb0];
    struct SWeaponMisfireEntry* criticalMisfire;
    uint8_t _pad_3[0xb0];
};




struct LightStateParams_Off {
    uint8_t _pad_0[0x8];
    struct CryStringT* presetTag;
    uint8_t _pad_1[0x8];
};




struct SBBDynamicPropertyBool {
    uint8_t _pad_0[0x8];
    _Bool value;
    uint8_t _pad_1[0x7];
};




struct JumpTunnelCameraEffects {
    uint8_t _pad_0[0x8];
    struct JumpTunnelCameraEffectParam* blur;
    uint8_t _pad_1[0x8];
    struct JumpTunnelCameraEffectParam* bloom;
    uint8_t _pad_2[0x8];
    struct JumpTunnelCameraEffectParam* chromaticAberation;
    uint8_t _pad_3[0x8];
    struct JumpTunnelCameraEffectParam* shutterSpeed;
    uint8_t _pad_4[0x8];
    struct JumpTunnelCameraEffectParam* fov;
    uint8_t _pad_5[0x8];
    struct JumpTunnelCameraEffectParam* fovScale;
    uint8_t _pad_6[0x8];
};




struct SReputationContextBBPropertyParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct SBBDynamicPropertyBase* dynamicProperty;
    uint8_t _pad_2[0x8];
};




struct SignatureTypeGlobalParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    _Bool allowDampening;
    _Bool allowGenerateUnknownContacts;
    _Bool allowVisibleContacts;
    _Bool allowGenerateBlobs;
    float nearbyAmbientMultiplier;
};




struct BuildingBlocks_BindingsLocalizedComponentParameter {
    uint8_t _pad_0[0x50];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType parameter;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* defaultValue;
    uint8_t _pad_3[0x8];
};




struct CraftingResearch_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct LegacyCraftingRecipe_Base {
    uint8_t _pad_0[0x8];
};




struct ExplosionParams {
    uint8_t _pad_0[0x8];
    enum ARDataType friendlyFire;
    float minRadius;
    float maxRadius;
    float soundRadius;
    float minPhysRadius;
    float maxPhysRadius;
    float angle;
    float angleVertical;
    struct Vec3* explosionFront;
    uint8_t _pad_1[0x10];
    struct Vec3* explosionUp;
    uint8_t _pad_2[0x10];
    float pressure;
    float holeSize;
    float terrainHoleSize;
    float maxblurdist;
    float effectScale;
    float effectScaleMin;
    float effectScaleMax;
    _Bool useRandomScale;
    uint8_t _pad_3[0x3];
    struct DamageBase* damage;
    uint8_t _pad_4[0x8];
    struct CryStringT* hitType;
    uint8_t _pad_5[0x8];
    struct GlobalResourceParticle* effect;
    uint8_t _pad_6[0x10];
    struct GlobalResourceParticle* failedEffect;
    uint8_t _pad_7[0x10];
    struct CryStringT* customMaterialEffect;
    uint8_t _pad_8[0x8];
    struct GlobalResourceAudio* sound;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* failedSound;
    uint8_t _pad_10[0x18];
    struct ExplosionFlashbangParams* flashbangParams;
    uint8_t _pad_11[0x8];
    struct ShockwaveParams* shockwaveParams;
    uint8_t _pad_12[0x8];
    struct MaterialEffectEntry* materialEffectEntry;
    uint8_t _pad_13[0x8];
    struct Vec3* Offset;
    uint8_t _pad_14[0x10];
    struct Vec3* Direction;
    uint8_t _pad_15[0x10];
    float particleStrength;
    uint8_t _pad_16[0x4];
    struct RadarContactTypeEntry* radarContactType;
    uint8_t _pad_17[0x38];
};




struct Marker_AbilityDistanceVisibility {
    uint8_t _pad_0[0x8];
};




struct ConstantDOFGrid {
    uint8_t _pad_0[0x8];
    int32_t verticalGridSize;
    int32_t horizontalGridSize;
    float verticalSpacing;
    float horizontalSpacing;
};




struct SItemDefinition {
    uint8_t _pad_0[0x8];
    enum ARDataType Type;
    enum ARDataType SubType;
    int32_t Size;
    int32_t Grade;
    struct SCItemManufacturer* Manufacturer;
    uint8_t _pad_1[0x10];
    _Bool inheritParentManufacturer;
    uint8_t _pad_2[0x7];
    struct CryStringT* Tags;
    uint8_t _pad_3[0x8];
    struct CryStringT* RequiredTags;
    uint8_t _pad_4[0x8];
    struct CryStringT* DisplayType;
    uint8_t _pad_5[0x8];
    struct SCItemLocalization* Localization;
    uint8_t _pad_6[0xa8];
    struct SCItemMannequinTags* mannequinTags;
    uint8_t _pad_7[0x40];
    struct SBaseCargoUnit* inventoryOccupancyVolume;
    uint8_t _pad_8[0x8];
    struct Vec3* inventoryOccupancyDimensions;
    uint8_t _pad_9[0x10];
    struct Vec3* inventoryOccupancyDimensionsUIOverride;
    uint8_t _pad_10[0x8];
    enum ARDataType ignoredAttachAxis;
    uint8_t _pad_11[0x2c];
};




struct SReputationStandingJournalEntryParams {
    uint8_t _pad_0[0x8];
    struct SReputationStandingParams* standing;
    uint8_t _pad_1[0x10];
    enum ARDataType changeDirection;
    uint8_t _pad_2[0x4];
    struct JournalEntry* journalEntry;
    uint8_t _pad_3[0x10];
};




struct SRemoteRigidEntityControllerOneHandedParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* boneToIgnore;
    uint8_t _pad_1[0x8];
    struct CryStringT* animationVariableToBlock;
    uint8_t _pad_2[0x8];
};




struct Texture3DFieldGeom {
    uint8_t _pad_0[0x8];
    struct CryStringT* texture3D;
    uint8_t _pad_1[0x8];
    struct Vec3* size;
    uint8_t _pad_2[0x10];
    struct Vec3* posOffset;
    uint8_t _pad_3[0x10];
    struct Ang3* rotOffset;
    uint8_t _pad_4[0x10];
};




struct CapacitorAssignmentInputOutputDef {
    uint8_t _pad_0[0x8];
    struct BezierCurve* inputOutputMapping;
    uint8_t _pad_1[0x88];
};




struct InteractionConditionPlayerNotInCombat {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct LadderJumpParams {
    uint8_t _pad_0[0x8];
    float yawCutoffAngle;
    float minForwardVelocity;
    float maxForwardVelocity;
    float pitchCutoffAngle;
    float minUpVelocity;
    float maxUpVelocity;
};




struct TurretInputDeflectionTimeParams {
    uint8_t _pad_0[0x8];
    struct SInputDeflectionTimeParams* angularMovement;
    uint8_t _pad_1[0x98];
};




struct ARMarkerTrackingParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* namespace_;
    uint8_t _pad_1[0x8];
    struct MarkerTrackingBoxoutParameters* boxout;
    uint8_t _pad_2[0x28];
    struct Vec2* clipBoundTopLeft;
    uint8_t _pad_3[0x8];
    struct Vec2* clipBoundTopLeftVehicle;
    uint8_t _pad_4[0x8];
    struct Vec2* clipBoundBottomRight;
    uint8_t _pad_5[0x8];
    struct Vec2* clipBoundBottomRightVehicle;
    uint8_t _pad_6[0x8];
    float aspectRatio;
    float aspectRatioVehicle;
    float clipRadius;
    float clipRadiusVehicle;
    struct MarkerDeclutteringCullingOrder* declutteringParams;
    uint8_t _pad_7[0x10];
};




struct StickyFilterMovementParams {
    uint8_t _pad_0[0x8];
    _Bool matchNPCSpeed;
    _Bool constantFOV;
    uint8_t _pad_1[0x2];
    float approachingOuterSpeed;
    float approachingInnerSpeed;
    float retreatOuterSpeed;
    float retreatIntermediateSpeed;
    float innerRadius;
    float intermediateRadius;
    float outerRadius;
    float breakRadius;
    float nudgeFraction;
    struct Vec3* offset;
    uint8_t _pad_2[0x10];
    _Bool lockOffsetRotation;
    uint8_t _pad_3[0x3];
    float lerpTimeToFullSpeedOnStop;
    float minMovementThreshold;
    uint8_t _pad_4[0x4];
};




struct SCuttableStateModifier {
    uint8_t _pad_0[0x8];
    struct SCuttableState* cuttableState;
    uint8_t _pad_1[0x28];
    _Bool detachOnCuttablesCompleted;
    uint8_t _pad_2[0x7];
};




struct SDebrisEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionSecurityClearanceToken {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct SecurityClearanceConditions* requiredConditions;
    uint8_t _pad_2[0x30];
    _Bool checkEntityTokens;
    uint8_t _pad_3[0x7];
};




struct SItemPortDefExtensionBase {
    uint8_t _pad_0[0x8];
};




struct SCLoadingPlatformLightGroupParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* lightGroupEntityReference;
    uint8_t _pad_1[0x8];
    enum ARDataType platformIdleClosedLightState;
    enum ARDataType platformInTransitLightState;
    enum ARDataType platformIdleOpenLightState;
    enum ARDataType platformObstructedLightState;
};




struct SSequencerTurretSetMovementTagTaskParams {
    uint8_t _pad_0[0x20];
    struct Tag* movementTag;
    uint8_t _pad_1[0x10];
};




struct FireHazardAfterglowProperties {
    uint8_t _pad_0[0x8];
    float maximumTemperature;
    float temperatureMultiplier;
    float burnMaskEdgesStart;
    float burnMaskEdgesEnd;
    float incandescenceStrength;
    float edgesGlowStrength;
    float edgesPerimeterStrength;
    float edgesEmbersStrength;
    float maximumLuminance;
    uint8_t _pad_1[0x4];
};




struct ControlHintCondition_VehicleSystems {
    uint8_t _pad_0[0x8];
    enum ARDataType systems;
    uint8_t _pad_1[0x6];
};




struct SWeaponConditionBase {
    uint8_t _pad_0[0x8];
};




struct SunLightComponentParams {
    uint8_t _pad_0[0x18];
    struct SRGB8* lightColor;
    uint8_t _pad_1[0x8];
    struct SRGB8* surfaceColor;
    uint8_t _pad_2[0x8];
    float surfaceIntensity;
    float radius;
    float dist1;
    float dist2;
    float dist3;
    float dist4;
    float distCull;
    float intensity1;
    float intensity2;
    float intensity3;
    float intensity4;
    uint8_t _pad_3[0x4];
};




struct GameRulesStateBaseParams {
    uint8_t _pad_0[0x18];
};




struct ItemResourceConversionModifierBase {
    uint8_t _pad_0[0x8];
};




struct GasCloudVDBLightingParams {
    uint8_t _pad_0[0x8];
    struct SRGB8* albedo;
    uint8_t _pad_1[0x8];
    struct SRGB8* lightLeakColor;
    uint8_t _pad_2[0x8];
    float lightLeakScale;
    float density;
    _Bool inheritParentDensity;
    uint8_t _pad_3[0x3];
    float rayStepMultiplier;
};




struct SItemPortDefExtensionTurret {
    uint8_t _pad_0[0x8];
    struct Vec2* YawLimit;
    uint8_t _pad_1[0x8];
    struct Vec2* PitchLimit;
    uint8_t _pad_2[0x8];
    struct Vec2* RollLimit;
    uint8_t _pad_3[0x8];
};




struct SCloseKioskInteractionGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct SQuantumDriveEffectBaseParams {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_StaticVariableArray {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_StaticArrayEntry* value;
    uint8_t _pad_2[0x30];
};




struct CraftingCost_RecordRef {
    uint8_t _pad_0[0x8];
    float multiplier;
    uint8_t _pad_1[0x4];
    struct CraftingCostRecord* costRecord;
    uint8_t _pad_2[0x10];
};




struct SWeaponActionFireTractorBeamVehicleBased {
    uint8_t _pad_0[0x8];
    _Bool aggregatedShields;
    uint8_t _pad_1[0x3];
    float shieldToForceRatio;
    float maxShield;
    float impactRadius;
    float thrusterPassModifierLinear;
    float thrusterPassModifierAngular;
};




struct PersonalThoughtInventoryActionsParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* dropItemActionThumbnail;
    uint8_t _pad_1[0x8];
    struct CryStringT* emptyBackpackActionThumbnail;
    uint8_t _pad_2[0x8];
};




struct LightStateParams {
    uint8_t _pad_0[0x8];
};




struct ElectricalState {
    uint8_t _pad_0[0x8];
    enum ARDataType chargeMod;
    float charge;
};




struct SINotificationsModule {
    uint8_t _pad_0[0x18];
};




struct ApplyStatusBuff {
    uint8_t _pad_0[0x8];
};




struct FPSReticle_Config {
    uint8_t _pad_0[0x8];
    uint8_t AimAveragePoints;
    uint8_t _pad_1[0x1];
    uint16_t FlashWidth;
    uint16_t FlashHeight;
    uint8_t _pad_2[0x2];
    float SpreadSize;
    float SpreadScaleMax;
    float SpreadScaleInterpNeg;
    float SpreadScaleInterpPos;
    float SpreadAlphaInterpNeg;
    float SpreadAlphaInterpPos;
    float HiddenAlphaInterpNeg;
    float MoveAlphaMinimum;
    float MoveAlphaRange;
    uint8_t _pad_3[0x4];
};




struct WeaponPoseInterpolationCurves {
    uint8_t _pad_0[0x8];
    struct WeaponPoseXYZCurvesMaxValues* positonCurves;
    uint8_t _pad_1[0x1c8];
    struct WeaponPoseXYZCurvesMaxValues* rotationCurves;
    uint8_t _pad_2[0x1c8];
    struct BezierCurve* cameraZoomCurve;
    uint8_t _pad_3[0x88];
};




struct NavigationLinkTagCost {
    uint8_t _pad_0[0x8];
    struct TagsDNF* conditionTags;
    uint8_t _pad_1[0x60];
    float costMultiplier;
    _Bool unavailableIfConditionIsMet;
    uint8_t _pad_2[0x3];
};




struct LandingUIParams {
    uint8_t _pad_0[0x18];
    _Bool hidden;
    uint8_t _pad_1[0x3];
    float timeToLoop;
    int32_t gridLayerCount;
    uint8_t _pad_2[0x4];
    struct Vec3* dimensions;
    uint8_t _pad_3[0x10];
    float drawFarDistance;
    float gridAreaHeightPerc;
    float baseLineWidthPerc;
    float basePaddingInnerPerc;
    float baseOffset;
    float gridLineWidthPerc;
    float gridHighlightFeatherPerc;
    float gridFalloffPerc;
    float gridPaddingInnerPerc;
    uint8_t _pad_4[0x4];
    struct CryStringT* baseLineMaterial;
    uint8_t _pad_5[0x8];
    struct CryStringT* beamMaterial;
    uint8_t _pad_6[0x8];
    struct CryStringT* gridLineMaterial;
    uint8_t _pad_7[0x8];
};




struct S42CommendationRequirementTriggerCondition {
    uint8_t _pad_0[0x8];
    struct TriggerConditionDataDef* triggerConditionRecord;
    uint8_t _pad_1[0x10];
};




struct SCItemAimableControllerParams {
    uint8_t _pad_0[0x18];
    struct SAimableControllerHudParams* hudParamsOverride;
    uint8_t _pad_1[0x10];
    float predictionAccelerationFactor;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_BindingsStringComponentParameter {
    uint8_t _pad_0[0x50];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType parameter;
    uint8_t _pad_2[0x4];
    struct CryStringT* defaultValue;
    uint8_t _pad_3[0x10];
};




struct LongTermPersistenceWhiteListEntry {
    uint8_t _pad_0[0x8];
    enum ARDataType ItemType;
    uint8_t _pad_1[0x4];
    struct LongTermPersistenceSubTypeListOption* SubTypeListOption;
    uint8_t _pad_2[0x8];
};




struct ScanCustomValue {
    uint8_t _pad_0[0x8];
};




struct CinematicConversationSettings {
    uint8_t _pad_0[0x8];
    float widthAspectRatio;
    float heightAspectRatio;
    float lerpInTime;
    float lerpOutTime;
};




struct SRangedWeaponStats {
    uint8_t _pad_0[0x8];
    struct Range* range;
    uint8_t _pad_1[0x8];
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    _Bool interpolate;
    uint8_t _pad_3[0x7];
    struct SWeaponStats* weaponStats;
    uint8_t _pad_4[0x3c0];
};




struct SEntityComponentPlanetAreaParams {
    uint8_t _pad_0[0x18];
    struct Vec3* size;
    uint8_t _pad_1[0x10];
    enum ARDataType areaType;
    enum ARDataType areaFitting;
    int32_t lodLevel;
    _Bool bOverride;
    uint8_t _pad_2[0x3];
};




struct ControlHints_Input {
    uint8_t _pad_0[0x8];
    enum ARDataType activationMode;
    uint8_t _pad_1[0x4];
};




struct ControlHintCondition_ActorHeldItemInteractionState {
    uint8_t _pad_0[0x8];
    struct CryStringT* heldItemPrimaryActionName;
    uint8_t _pad_1[0x8];
    struct CryStringT* heldItemSecondaryActionName;
    uint8_t _pad_2[0x38];
};




struct Burst {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x3];
    float minRateOfFire;
    float minBurstLength;
    float minShotCount;
    float gapLengthMultiplier;
    float burstVariationMultiplier;
};




struct GameRulesEAStatePreGameParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    int32_t requiredPlayers;
    _Bool enableIntro;
    _Bool movementEnabled;
    uint8_t _pad_2[0x2];
    float balanceTeamsCountdown;
    float gameStartCountdown;
    _Bool announceCountdown;
    _Bool restrictJoiningToPreGame;
    _Bool saturateScreen;
    uint8_t _pad_3[0x1];
    struct ReadySystemParams* readySystem;
    uint8_t _pad_4[0x10];
};




struct SActorForceReactionWeaponTwitchConfig {
    uint8_t _pad_0[0x8];
    float adsZoomScaleFactor;
    float offsetAtMinImpulse;
    float offsetAtMaxImpulse;
    float offsetRandomAtMaxImpulse;
    struct SActorForceReactionCurveConfig* curveConfig;
    uint8_t _pad_1[0x20];
};




struct SPowerTriangleVertices {
    uint8_t _pad_0[0x8];
    struct Vec2* ThrusterPoint;
    uint8_t _pad_1[0x8];
    struct Vec2* WeaponPoint;
    uint8_t _pad_2[0x8];
    struct Vec2* ShieldPoint;
    uint8_t _pad_3[0x8];
};




struct CollisionMFXEntityParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* customEffect;
    uint8_t _pad_1[0x8];
};




struct ControlHintCondition_VehicleMasterMode {
    uint8_t _pad_0[0x8];
    enum ARDataType masterMode;
    uint8_t _pad_1[0x7];
};




struct SExtinguisherVectorFieldParams {
    uint8_t _pad_0[0x8];
    struct SVectorFieldParams* main;
    uint8_t _pad_1[0x20];
    struct SVectorFieldParams* spray;
    uint8_t _pad_2[0x20];
};




struct DialogueContextEntry {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionAvailableSpaceInLinkedUsableItem {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct CryStringT* usablePortTag;
    uint8_t _pad_2[0x8];
    struct CryStringT* itemPortTag;
    uint8_t _pad_3[0x8];
    enum ARDataType itemType;
    enum ARDataType itemSubType;
};




struct InnerThought_CycleAnimRotateZ {
    uint8_t _pad_0[0x10];
    float length;
    float amount;
    float stagger;
    uint8_t _pad_1[0x4];
};




struct SSequencerInteractionTask {
    uint8_t _pad_0[0x20];
    struct CryStringT* interaction;
    uint8_t _pad_1[0x8];
    enum ARDataType triggerType;
    uint8_t _pad_2[0x4];
};




struct SInteractionLinkHighlightNode {
    uint8_t _pad_0[0x8];
};




struct ProjectileDetonationParams {
    uint8_t _pad_0[0x8];
    float armTime;
    float destructDelay;
    float safeDistance;
    _Bool explodeOnImpact;
    _Bool explodeOnFinalImpact;
    _Bool explodeOnExpire;
    _Bool explodeOnTargetRange;
    struct ExplosionParams* explosionParams;
    uint8_t _pad_1[0x1b8];
};




struct SSalvageStructuralAudioParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* sourcePlayResonanceFieldOneshot;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* sourcePlayResonanceField;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* sourceStopResonanceField;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* sourcePlayDisintegrationFieldOneshot;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* sourcePlayDisintegrationField;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* sourceStopDisintegrationField;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* sourcePlayVacuum;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* sourceStopVacuum;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* sourcePlayGrinding;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* sourceStopGrinding;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* targetPlayResonanceStress;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* targetStopResonanceStress;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* targetPlayDisintegrationStress;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* targetStopDisintegrationStress;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* targetPlayResonanceBreakOneshot;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* targetPlayDisintegrationBreakOneshot;
    uint8_t _pad_16[0x18];
    float targetAuxProxyLifetime;
    uint8_t _pad_17[0x4];
    struct AudioRtpc* sourceAverageResonanceStrengthRtpc;
    uint8_t _pad_18[0x18];
    struct AudioRtpc* targetResonanceStrengthRtpc;
    uint8_t _pad_19[0x18];
    struct AudioRtpc* sourceAverageDisintegrationStrengthRtpc;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* targetDisintegrationStrengthRtpc;
    uint8_t _pad_21[0x18];
    struct AudioRtpc* sourceIsGatheringMaterialRtpc;
    uint8_t _pad_22[0x18];
    float isGatheringMaterialHoldTime;
    uint8_t _pad_23[0x4];
    struct AudioRtpc* targetSizeRtpc;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* targetValueRtpc;
    uint8_t _pad_25[0x18];
    struct AudioRtpc* selectedFieldRtpc;
    uint8_t _pad_26[0x18];
};




struct LoadoutEditorComponentParams {
    uint8_t _pad_0[0x8];
    struct LoadoutEditorParams* editorParams;
    uint8_t _pad_1[0x278];
    struct UIWorldDisplay3DParams* displayParams;
    uint8_t _pad_2[0x138];
    struct RTTSunlightParams* sunlightParams;
    uint8_t _pad_3[0x40];
};




struct ScreenEffects_ParamValue_Float {
    uint8_t _pad_0[0x8];
    float value;
    _Bool limitStacking;
    uint8_t _pad_1[0x3];
};




struct ClothingTypeHeadWear {
    uint8_t _pad_0[0x8];
    enum ARDataType HairTag;
    _Bool maskFacialHair;
    uint8_t _pad_1[0x3];
};




struct AnimationJointBaseTranslation {
    uint8_t _pad_0[0x8];
    struct AnimationVariable* variable;
    uint8_t _pad_1[0x8];
};




struct AudioPassByComponentParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceAudio* loopStart;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* loopStop;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* oneShot;
    uint8_t _pad_3[0x18];
    float chargeMax;
    float dischargeTime;
    float chargeThreshold;
    float minChargeForPassByMusicEvent;
    float normalizedSpeed;
    float modifier;
    float minTimeBetweenOneShots;
    uint8_t _pad_4[0x4];
    struct AudioRtpc* timeSinceLastOneShotRtpc;
    uint8_t _pad_5[0x18];
    struct AudioPassByRtpcParams* shiftRtpc;
    uint8_t _pad_6[0x38];
    struct AudioPassByRtpcParams* shiftChargeRtpc;
    uint8_t _pad_7[0x38];
    struct AudioPassByRtpcParams* relativeVelocityRtpc;
    uint8_t _pad_8[0x38];
    struct AudioPassByRtpcParams* relativeVelocityAccelerationRtpc;
    uint8_t _pad_9[0x38];
};




struct BuildingBlocks_BindingsNumberEase {
    uint8_t _pad_0[0x50];
    float startValue;
    float endValue;
    enum ARDataType type_;
    uint8_t _pad_1[0x7];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x8];
};




struct SurfaceRaindrops_Acceleration {
    uint8_t _pad_0[0x8];
    float speedMultiplier;
    float maximumInfluenceSpeed;
    struct Range* rotationMultiplierSpeedRange;
    uint8_t _pad_1[0x8];
    struct Vec3* rotationMultiplierAxes;
    uint8_t _pad_2[0x10];
    float maximumAcceleration;
    uint8_t _pad_3[0x4];
    struct CryStringT* helper;
    uint8_t _pad_4[0x8];
    struct QuatT* offset;
    uint8_t _pad_5[0x50];
};




struct AtmosphereStateHumidityTemplate {
    uint8_t _pad_0[0x8];
    float humidity;
    uint8_t _pad_1[0x4];
};




struct SCItemControlPriorityTag {
    uint8_t _pad_0[0x20];
    struct CryStringT* tag;
    uint8_t _pad_1[0x8];
    struct SCItemControlPriorityValue* priorityValue;
    uint8_t _pad_2[0x18];
};




struct SDashboardWeaponInteractionParams {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* weaponIP;
    uint8_t _pad_1[0x8];
    struct SInteractionPointParams* turretIP;
    uint8_t _pad_2[0x8];
    struct SInteractionPointParams* remoteCameraIP;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeJointStyle {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct ControlHintCondition_ActorSkeleton {
    uint8_t _pad_0[0x8];
    enum ARDataType skeleton;
    uint8_t _pad_1[0x4];
};




struct SecurityNetworkPermissions {
    uint8_t _pad_0[0x8];
    enum ARDataType access;
    enum ARDataType trespass;
};




struct EAPickupBaseComponentParams {
    uint8_t _pad_0[0x8];
    int32_t duration;
    float acquireRadius;
    float spawnRadius;
    float initialScale;
    float beginScalingDistance;
    float rotationSpeed;
    _Bool alternativeRotationAxis;
    _Bool enableCurveOffset;
    uint8_t _pad_1[0x2];
    float curveOffsetSpeed;
    float curveOffsetAmplitude;
    float maxScale;
    float multiplierSuppression;
    uint8_t _pad_2[0x4];
    struct Vec3* assetRotation;
    uint8_t _pad_3[0x10];
};




struct EAUIMulticrewTypeOptionParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    enum ARDataType type_;
    uint8_t _pad_1[0x7];
};




struct BasicStatusEffectApplicationType {
    uint8_t _pad_0[0x8];
    enum ARDataType valueType;
    uint8_t _pad_1[0x4];
};




struct STrackViewOutfitInteractionSwapData {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_1[0x8];
    struct TagList* selectionTags;
    uint8_t _pad_2[0x30];
};




struct SWeaponAmmoRepoolParams {
    uint8_t _pad_0[0x8];
    int32_t bulletsPerSecond;
    float unstowMagDuration;
    float fullMagMergeDuration;
    uint8_t _pad_1[0x4];
};




struct SWeaponProceduralHeadRecoilConfigDef {
    uint8_t _pad_0[0x8];
    float frequency;
    float smoothFactor;
    float frequencyNoiseFactor;
    float maxDistance;
    float phase;
    uint8_t _pad_1[0x4];
    struct Vec3* translation;
    uint8_t _pad_2[0x10];
    float translationNoise;
    uint8_t _pad_3[0x4];
    struct Ang3* rotation;
    uint8_t _pad_4[0x10];
    float rotationNoise;
    _Bool usePerlinNoise;
    uint8_t _pad_5[0x3];
    float referenceSpeed;
    float minSpeed;
    float minScale;
    float maxSpeed;
    float maxScale;
    uint8_t _pad_6[0x4];
    struct SWeaponProceduralHeadRecoilCurveConfigDef* curveRecoil;
    uint8_t _pad_7[0xa0];
};




struct AreaEllipsoidComponentParams {
    uint8_t _pad_0[0x28];
};




struct ItemTypeInfo {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* typeName;
    _Bool showInPlayerAssetManager;
    uint8_t _pad_1[0x7];
    struct ItemTypeCategoryMap* categoryMap;
    uint8_t _pad_2[0x48];
};




struct UIGraph_ArenaCommanderVehicleLoadoutEditorContextComponent {
    uint8_t _pad_0[0x8];
};




struct InteriorMapSectionDefinition {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    _Bool restrictViewBounds;
    uint8_t _pad_1[0x7];
};




struct EntityComponentAttachableGadgetUIProviderParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* activationInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* deactivationInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* minigameStartInteraction;
    uint8_t _pad_3[0x8];
};




struct DockingDoorAnimatorComponentParams {
    uint8_t _pad_0[0x18];
    struct SDockingAnimatorBaseParams* DockingAnimatorParams;
    uint8_t _pad_1[0x38];
};




struct ControlHintCondition_ActorHeldItemType {
    uint8_t _pad_0[0x8];
    enum ARDataType heldItem;
    uint8_t _pad_1[0x4];
};




struct SThrusterMisfireParams {
    uint8_t _pad_0[0x8];
    float maxThrustRatio;
    float minThrustRatio;
    float misfireThrustToOffTimeRatio;
    uint8_t _pad_1[0x4];
};




struct EntityComponentRttAspectMFDShieldsParams {
    uint8_t _pad_0[0x18];
    enum ARDataType targetRttSlot;
    float aspectRatio;
    float labelRelativeProximityThreshold;
    uint8_t _pad_1[0x4];
};




struct TriggerSubConditionInteractionStateDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* entitySuperGUID;
    uint8_t _pad_1[0x8];
    struct CryStringT* siblingFailRule;
    uint8_t _pad_2[0x8];
    struct CryStringT* stateType;
    uint8_t _pad_3[0x8];
    struct CryStringT* requiredState;
    uint8_t _pad_4[0x8];
};




struct NavSplineAnchorPointComponentParams {
    uint8_t _pad_0[0x18];
};




struct ElectricalRoomExtension {
    uint8_t _pad_0[0x8];
    struct ElectricalStateBase* state;
    uint8_t _pad_1[0x8];
    struct ElectricalBehavior* behavior;
    uint8_t _pad_2[0x10];
};




struct AnimationJointLinearRotation {
    uint8_t _pad_0[0x8];
    struct AnimationVariable* variable;
    uint8_t _pad_1[0x8];
    float fromStartValus;
    float fromEndValus;
    float toStartAngle;
    float toEndAngle;
};




struct StatusMaskedRetriggerSetupBase {
    uint8_t _pad_0[0x8];
};




struct AudioGroupComponentParams {
    uint8_t _pad_0[0x18];
};




struct ItemFuelControllerParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* message;
};




struct SEntityDensityClassOverwritesBase {
    uint8_t _pad_0[0x8];
};




struct VehicleRole {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
};




struct LegacyCraftingOutput_Entity {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    uint32_t amount;
    _Bool fillAmmo;
    uint8_t _pad_2[0x3];
};




struct SWeaponStats {
    uint8_t _pad_0[0x8];
    int32_t fireRate;
    float fireRateMultiplier;
    float damageMultiplier;
    float damageOverTimeMultiplier;
    float projectileSpeedMultiplier;
    int32_t pellets;
    int32_t burstShots;
    int32_t ammoCost;
    float ammoCostMultiplier;
    float heatGenerationMultiplier;
    float soundRadiusMultiplier;
    float chargeTimeMultiplier;
    struct SRecoilModifier* recoilModifier;
    uint8_t _pad_1[0x310];
    struct SSpreadModifier* spreadModifier;
    uint8_t _pad_2[0x18];
    struct SAimModifier* aimModifier;
    uint8_t _pad_3[0x18];
    struct SRegenConsumerModifier* regenModifier;
    uint8_t _pad_4[0x10];
    struct SSalvageModifier* salvageModifier;
    uint8_t _pad_5[0x10];
    _Bool useAlternateProjectileVisuals;
    _Bool useAugmentedRealityProjectiles;
    uint8_t _pad_6[0x6];
};




struct TagToAudioRtpc {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct CryStringT* rtpcName;
    uint8_t _pad_2[0x8];
    float rtpcValue;
    uint8_t _pad_3[0x4];
};




struct ActorInteractionPointStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* normalState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* deadOrIncapacitatedState;
    uint8_t _pad_2[0x8];
};




struct BindingsOperations_WaveformShapeSquare {
    uint8_t _pad_0[0x8];
    float interval;
    uint8_t _pad_1[0x4];
};




struct AIActorLocomotionParams {
    uint8_t _pad_0[0x8];
    _Bool useSplineTransitions;
    uint8_t _pad_1[0x7];
};




struct FlightControllerStateModifier {
    uint8_t _pad_0[0x8];
    struct FlightControllerEnableStates* engineStates;
    uint8_t _pad_1[0x8];
    struct FlightControllerEnableStates* coupledModeStates;
    uint8_t _pad_2[0x8];
    struct FlightControllerEnableStates* gSafetyStates;
    uint8_t _pad_3[0x8];
    struct FlightControllerEnableStates* espStates;
    uint8_t _pad_4[0x8];
    struct FlightControllerEnableStates* cruiseControlStates;
    uint8_t _pad_5[0x8];
    struct FlightControllerEnableStates* vtolStates;
    uint8_t _pad_6[0x8];
    struct FlightControllerEnableStates* proximityAssistStates;
    uint8_t _pad_7[0x8];
    struct FlightControllerHydrogenFuelStates* hydrogenFuelStates;
    uint8_t _pad_8[0x8];
    struct FlightControllerQuantumFuelStates* quantumFuelStates;
    uint8_t _pad_9[0x8];
};




struct SViewDistanceRatioParams {
    uint8_t _pad_0[0x8];
    int32_t viewDistRatio;
    uint8_t _pad_1[0x4];
};




struct LinkedStatBase {
    uint8_t _pad_0[0x8];
    enum ARDataType linkedStat;
    uint8_t _pad_1[0x4];
};




struct LightFlickerWaveLinearParams {
    uint8_t _pad_0[0x8];
    float maxDistance;
    float speed;
    _Bool startFromEntity;
    uint8_t _pad_1[0x7];
};




struct UIWorldDisplayPathStateParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceMaterial* renderNodeMaterial;
    uint8_t _pad_1[0x10];
    struct RGBA* color;
    uint8_t _pad_2[0x10];
    float scrollUvSpeed;
    uint8_t _pad_3[0x4];
};




struct SHackingThreatLevelConditionNodeSwapped {
    uint8_t _pad_0[0x8];
    _Bool isIntruder;
    uint8_t _pad_1[0x3];
    int32_t pointsAdded;
};




struct SEffectInputParamsDC {
    uint8_t _pad_0[0x8];
    struct CryStringT* VarName;
    uint8_t _pad_1[0x8];
    struct CryStringT* ParamName;
    uint8_t _pad_2[0x8];
    float MinRange;
    float MaxRange;
    float Multiplier;
    float LerpTime;
    struct Vec3* VecGoal;
    uint8_t _pad_3[0x10];
    float DefaultValue;
    uint8_t _pad_4[0x4];
    struct Vec3* Axis;
    uint8_t _pad_5[0x10];
};




struct CameraBlendConfig {
    uint8_t _pad_0[0x8];
    _Bool allowBlendFrom;
    _Bool allowBlendTo;
    uint8_t _pad_1[0x2];
    float blendingToTime;
};




struct SInteractableEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct AudioOneShotManagerBudgetEntry {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    int32_t maxAudioObjects;
    float priorityFalloffPerSecond;
};




struct PlayerGroupManagerGlobalParams {
    uint8_t _pad_0[0x8];
    struct PlayerGroupManagerObjectsLocStringParams* objectLocStrings;
    uint8_t _pad_1[0x8];
    struct PlayerGroupManagerLocStringParams* localizationStringParams;
    uint8_t _pad_2[0x90];
    struct PlayerGroupManagerNotificationsParams* notificationsParams;
    uint8_t _pad_3[0x618];
};




struct MissionInitParamActivity {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* value;
    uint8_t _pad_2[0x8];
};




struct HarvestableClusterParams {
    uint8_t _pad_0[0x8];
    float relativeProbability;
    int32_t minSize;
    int32_t maxSize;
    float minProximity;
    float maxProximity;
    uint8_t _pad_1[0x4];
};




struct ControlHintAlwaysDisplayCondition {
    uint8_t _pad_0[0x8];
};




struct SEntityComponentNoisySmoothingModificationObjectParams {
    uint8_t _pad_0[0x18];
    struct SEntityComponentSmoothingModificationObjectParams* smoothingParams;
    uint8_t _pad_1[0x20];
    float noiseAmount;
    float noiseFrequency;
    int32_t seed;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_StyleSelectorConditionType {
    uint8_t _pad_0[0x10];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
};




struct LightFadeParams {
    uint8_t _pad_0[0x8];
    float minDistance;
    float minFade;
    float maxDistance;
    float maxFade;
};




struct SMisfireGenerationParams {
    uint8_t _pad_0[0x8];
    float maxWindowLength;
    float minWindowLength;
    struct SMisfireSeverityFactors* severityFactors;
    uint8_t _pad_1[0x10];
    struct SMisfireBandParams* minorBand;
    uint8_t _pad_2[0x10];
    struct SMisfireBandParams* majorBand;
    uint8_t _pad_3[0x10];
    struct SMisfireBandParams* criticalBand;
    uint8_t _pad_4[0x10];
};




struct PersonalThoughtFavoriteSlot {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
};




struct PersonalThoughtInventoryMissionFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayIconPath;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* name;
    _Bool disableForFPSKiosk;
    uint8_t _pad_2[0x7];
};




struct BuildingBlocks_TriggerModifyBool {
    uint8_t _pad_0[0x8];
    struct CryStringT* variableName;
    uint8_t _pad_1[0x8];
    _Bool value;
    uint8_t _pad_2[0x7];
};




struct ContractDifficulty {
    uint8_t _pad_0[0x8];
    struct ContractDifficultyProfile* difficultyProfile;
    uint8_t _pad_1[0x10];
    enum ARDataType mechanicalSkill;
    enum ARDataType mentalLoad;
    enum ARDataType riskOfLoss;
    enum ARDataType gameKnowledge;
};




struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitCaseModifier {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    enum ARDataType paramField;
};




struct SReputationStandingParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* perkDescription;
    struct CryStringT* icon;
    uint8_t _pad_3[0x8];
    int64_t minReputation;
    int64_t driftReputation;
    float driftTimeHours;
    _Bool gated;
    uint8_t _pad_4[0x3];
};




struct CodeDrivenChatProviderSettings {
    uint8_t _pad_0[0x8];
};




struct RadarDisplayProviderParams {
    uint8_t _pad_0[0x18];
    float displayRange;
    enum ARDataType overridePlaneAlignment;
    enum ARDataType overrideFollowOrientation;
    enum ARDataType overrideUseInputOrientation;
    struct WorldDisplayRadar* radarDisplaySettings;
    uint8_t _pad_1[0x10];
    struct WorldDisplayEnvironment* environmentSettings;
    uint8_t _pad_2[0x10];
    struct WorldDisplayEnvironment* collapsedEnvironmentSettings;
    uint8_t _pad_3[0x10];
};




struct AtmosphereStateTemperatureTemplate {
    uint8_t _pad_0[0x8];
    float temperature;
    uint8_t _pad_1[0x4];
};




struct SCPlayerPUSpawningComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_Border {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_BorderSide* top;
    uint8_t _pad_1[0x18];
    struct BuildingBlocks_BorderSide* right;
    uint8_t _pad_2[0x18];
    struct BuildingBlocks_BorderSide* bottom;
    uint8_t _pad_3[0x18];
    struct BuildingBlocks_BorderSide* left;
    uint8_t _pad_4[0x18];
    struct BuildingBlocks_BorderRadiusCorner* topLeftRadius;
    uint8_t _pad_5[0x18];
    struct BuildingBlocks_BorderRadiusCorner* topRightRadius;
    uint8_t _pad_6[0x18];
    struct BuildingBlocks_BorderRadiusCorner* bottomRightRadius;
    uint8_t _pad_7[0x18];
    struct BuildingBlocks_BorderRadiusCorner* bottomLeftRadius;
    uint8_t _pad_8[0x18];
};




struct ModifierInterpolator {
    uint8_t _pad_0[0x8];
    float startTime;
    float duration;
};




struct EAWinOrLossAwardParams {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x7];
    int32_t winAward;
    int32_t lossAward;
    _Bool isTeamAward;
    uint8_t _pad_2[0x7];
};




struct ItemTypeCategoryException {
    uint8_t _pad_0[0x8];
    enum ARDataType subType;
    uint8_t _pad_1[0x4];
    struct ItemTypeCategory* category;
    uint8_t _pad_2[0x8];
    _Bool showInElectronicAccess;
    uint8_t _pad_3[0x7];
};




struct RadarDeltaSignatureNotificationParams {
    uint8_t _pad_0[0x8];
    _Bool requireLockedTarget;
    uint8_t _pad_1[0x7];
    struct CLocIdentifier* message;
    struct CryStringT* iconPath;
    uint8_t _pad_2[0x8];
    float globalCooldown;
    float individualCooldown;
};




struct EntityEffectSystem_DisableSequencerTask {
    uint8_t _pad_0[0x20];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
};




struct ScanDisplayScanDataEntryVariableParams {
    uint8_t _pad_0[0x8];
    uint8_t truncateSize;
    _Bool displayIsHidden;
    _Bool displayInBrackets;
    _Bool suffixArrayIndex;
    _Bool suffixSemiColon;
    enum ARDataType auxiliaryFlag;
    uint8_t _pad_1[0x2];
    struct ScanDisplayVariableParams* fallback_;
    uint8_t _pad_2[0x8];
    enum ARDataType scanCategory;
    enum ARDataType scanInformation;
    uint8_t _pad_3[0x6];
};




struct ItemAwardBase {
    uint8_t _pad_0[0x8];
    int32_t amountToAward;
    uint8_t _pad_1[0x4];
};




struct SRenderToTextureViewBaseParams {
    uint8_t _pad_0[0x18];
};




struct BoidsCylindricalLimiterRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float minRadius;
    float maxRadius;
    float height;
    float effectDistance;
};




struct SEntityTraversalNodeContext {
    uint8_t _pad_0[0x8];
    struct SEntityTraversingNodeUniqueId* entityTraversalNode;
    uint8_t _pad_1[0x8];
};




struct MiningFilterItemModifierParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    struct MiningFilterParams* filterParams;
    uint8_t _pad_2[0x10];
};




struct JumpTunnelCubeMapParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceTextureDDS* entrySpecProbe;
    uint8_t _pad_1[0x10];
    struct GlobalResourceTextureDDS* entryDiffProbe;
    uint8_t _pad_2[0x10];
    struct GlobalResourceTextureDDS* exitSpecProbe;
    uint8_t _pad_3[0x10];
    struct GlobalResourceTextureDDS* exitDiffProbe;
    uint8_t _pad_4[0x10];
};




struct SAudioCapacitor {
    uint8_t _pad_0[0x8];
    float capacity;
    float chargeSpeed;
    float dischargeSpeed;
    float inputThreshold;
    struct SRtpcBehaviour* behavior;
    uint8_t _pad_1[0x8];
};




struct GlobalEngineTrailsSetting {
    uint8_t _pad_0[0x8];
    float pressureThreshold;
    float contrailPressureFadeRange;
    struct Range* contrailCloudDensityRange;
    uint8_t _pad_1[0x8];
};




struct ObjectiveRewardContribution_PercentOfMission {
    uint8_t _pad_0[0x8];
    float percentContribution;
    _Bool doPartialRewardPayout;
    uint8_t _pad_1[0x3];
};




struct InteractionConditionPlayerOwnsVehicle {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct LandingZoneInventoryRedirect {
    uint8_t _pad_0[0x8];
    struct StarMapObject* location;
    uint8_t _pad_1[0x10];
    struct StarMapObject* inventoryLocation;
    uint8_t _pad_2[0x10];
};




struct VendingMachineShopParams {
    uint8_t _pad_0[0x18];
};




struct RestrictedAreaHandlerParams {
    uint8_t _pad_0[0x18];
};




struct SInteractionPointEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct SShieldStunParams {
    uint8_t _pad_0[0x8];
    float minAlphaDamageRatio;
    float maxAlphaDamageRatio;
    float minStunTime;
    float maxStunTime;
};




struct GlobalMarkerConfigs {
    uint8_t _pad_0[0x8];
    struct Marker_Configuration* missionPointMarkerConfig;
    uint8_t _pad_1[0x10];
    struct Marker_Configuration* partyMemberMarkerConfig;
    uint8_t _pad_2[0x10];
    struct Marker_Configuration* landingAreaMarkerConfig;
    uint8_t _pad_3[0x10];
    struct Marker_Configuration* unattendedVehicleMarkerConfig;
    uint8_t _pad_4[0x10];
};




struct SQuantumBoostRotationParams {
    uint8_t _pad_0[0x8];
    struct Vec3* maxAngVelocity;
    uint8_t _pad_1[0x10];
    struct Vec3* timeToFullAngVelocity;
    uint8_t _pad_2[0x10];
    struct BezierCurve* vibrationBoostAngleOffset;
    uint8_t _pad_3[0x88];
    struct Vec3* driftKickMin;
    uint8_t _pad_4[0x10];
    struct Vec3* driftKickMax;
    uint8_t _pad_5[0x10];
    float driftKickExitScalar;
    float driftKickExitRollScalar;
    struct Vec3* turbulenceSpeeds;
    uint8_t _pad_6[0x10];
    float turbulenceSourceMaxAngle;
    float turbulenceMaxPitchYawSpeed;
    float turbulenceTimeToFullPitchYawSpeed;
    float turbulenceEffectiveYawPitchRange;
    float turbulenceMaxRollSpeed;
    float turbulenceTimeToFullRollSpeed;
    float turbulenceEffectiveRollRange;
    uint8_t _pad_7[0x4];
};




struct JumpTunnelCameraEffectParam {
    uint8_t _pad_0[0x8];
    float referenceValue;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_TimingFunctionCurveRecord {
    uint8_t _pad_0[0x8];
    struct SBezierCurveRecord* curveRecord;
    uint8_t _pad_1[0x10];
};




struct MissionLogEntry {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* title;
    struct CLocIdentifier* description;
    struct MissionType* type_;
    uint8_t _pad_1[0x10];
    _Bool silentUpdate;
    uint8_t _pad_2[0x7];
    struct S42MissionLogEntryParams* s42MissionParams;
    uint8_t _pad_3[0x10];
};




struct SCItemTurretGyroParams {
    uint8_t _pad_0[0x8];
    _Bool defaultGyroStabilize;
    uint8_t _pad_1[0x7];
    struct SSharedInteractionParams* toggleGyroStabilizeModeInteraction;
    uint8_t _pad_2[0x8];
};




struct SQuantumBoostBubbleIntegrityParams {
    uint8_t _pad_0[0x8];
    float referenceAngle;
    float alignmentCrossoverPointRatio;
    struct BezierCurve* increaseValueMapping;
    uint8_t _pad_1[0x88];
    struct BezierCurve* decreaseValueMapping;
    uint8_t _pad_2[0x88];
    float bestIntegrityIncreaseTime;
    float worstIntegrityDecreaseTime;
    float collapseTime;
    uint8_t _pad_3[0x4];
    struct BezierCurve* relativeCoastSpeedFactor;
    uint8_t _pad_4[0x88];
    struct BezierCurve* relativeCapacityCostFactor;
    uint8_t _pad_5[0x88];
    struct BezierCurve* vibrationBubbleIntegrity;
    uint8_t _pad_6[0x98];
};




struct PatrolGraphLinkComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_StaticVariableBoolean {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool value;
    uint8_t _pad_2[0x7];
};




struct CameraView2ShipsFrameParams {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
};




struct DataSetMatchCondition_ExcludeNearbyLocationsDef {
    uint8_t _pad_0[0x8];
    struct MissionProperty* locationProperty;
    uint8_t _pad_1[0x8];
    float exclusionRangeKm;
    uint8_t _pad_2[0x4];
};




struct BlockedCursorParams {
    uint8_t _pad_0[0x8];
    enum ARDataType blockedCursor;
    uint8_t _pad_1[0x4];
};




struct HintComponentParams {
    uint8_t _pad_0[0x18];
    struct HintTriggerData* trigger;
    uint8_t _pad_1[0x10];
    float radius;
    uint8_t _pad_2[0x4];
    struct Vec3* bounds;
    uint8_t _pad_3[0x10];
    _Bool showDebugInEditor;
    uint8_t _pad_4[0x7];
};




struct CommunicationName {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct ExponentialDamage {
    uint8_t _pad_0[0x8];
    float exponent;
    uint8_t _pad_1[0x4];
};




struct SChangeInteractionStateGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct SInteractionState* targetState;
    uint8_t _pad_1[0x8];
};




struct MedBedSurgeryNames {
    uint8_t _pad_0[0x18];
    struct MedBedSurgeryNamesInjurySeverity* headInjuries;
    uint8_t _pad_1[0x28];
    struct MedBedSurgeryNamesInjurySeverity* torsoInjuries;
    uint8_t _pad_2[0x28];
    struct MedBedSurgeryNamesInjurySeverity* leftArmInjuries;
    uint8_t _pad_3[0x28];
    struct MedBedSurgeryNamesInjurySeverity* rightArmInjuries;
    uint8_t _pad_4[0x28];
    struct MedBedSurgeryNamesInjurySeverity* leftLegInjuries;
    uint8_t _pad_5[0x28];
    struct MedBedSurgeryNamesInjurySeverity* rightLegInjuries;
    uint8_t _pad_6[0x28];
};




struct SCLocalPlayerSocialConnectionComponentParams {
    uint8_t _pad_0[0x18];
    int32_t maxSpeakersProximity;
    int32_t maxSpeakersPrimary;
    _Bool reverseSpeakersList;
    uint8_t _pad_1[0x7];
};




struct BuildingBlocks_BindingsIntegerBuiltInVariable {
    uint8_t _pad_0[0x50];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
};




struct ContractPrerequisite_CompletedContractTags {
    uint8_t _pad_0[0x8];
    struct TagList* requiredCompletedContractTags;
    uint8_t _pad_1[0x30];
    int32_t requiredCountValue;
    uint8_t _pad_2[0x4];
    struct TagList* excludedCompletedContractTags;
    uint8_t _pad_3[0x30];
    int32_t excludedCountValue;
    _Bool includePrerequisiteWhenSharing;
    uint8_t _pad_4[0x3];
};




struct SAttachableItemModifierStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* inUseState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* hasChargesState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* noChargesState;
    uint8_t _pad_3[0x8];
};




struct NpcBreathingParams {
    uint8_t _pad_0[0x8];
    struct BreathVolumeParams* breathVolumeParams;
    uint8_t _pad_1[0x8];
    float minStaminaVolumeRatio;
    float maxStaminaVolumeRatio;
    float minStaminaBreathDuration;
    float maxStaminaBreathDuration;
};




struct SJumpDriveFlightRotationParams {
    uint8_t _pad_0[0x8];
    enum ARDataType pitchYawLimiterType;
    uint8_t _pad_1[0x4];
    struct Vec3* maxAngularVelocity;
    uint8_t _pad_2[0x10];
    struct Vec3* maxAngularAccelerationPositive;
    uint8_t _pad_3[0x10];
    struct Vec3* maxAngularAccelerationNegative;
    uint8_t _pad_4[0x10];
    float angularAccelerationDecay;
    _Bool useAngularInputs;
    _Bool allowUsingBoost;
    uint8_t _pad_5[0x2a];
};




struct SFrontendGameModeButton {
    uint8_t _pad_0[0x8];
    enum ARDataType buttonEnum;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* buttonTitle;
    struct CLocIdentifier* buttonDescription;
    struct CryStringT* imagePath;
    uint8_t _pad_2[0x8];
    struct CryStringT* moviePath;
    uint8_t _pad_3[0x8];
    _Bool isActive;
    uint8_t _pad_4[0x7];
};




struct SCItemCoolerControllerParams {
    uint8_t _pad_0[0x18];
    float ThermalConductivity;
    float ThermalEmissivity;
    float SpecificHeatCapacity;
    float Mass;
    float SurfaceArea;
    uint8_t _pad_1[0x4];
};




struct ForceFeedbackEnvelope {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* samples;
    uint8_t _pad_2[0x8];
};




struct ActorCameraOffsetParams {
    uint8_t _pad_0[0x8];
    _Bool useSkeletonCenter;
    uint8_t _pad_1[0x7];
    struct Vec3* offset;
    uint8_t _pad_2[0x10];
    float smoothSpeed;
    uint8_t _pad_3[0x4];
};




struct SLoadoutRequirementNOT {
    uint8_t _pad_0[0x8];
    struct SLoadoutRequirementBase* RequirementToInvert;
    uint8_t _pad_1[0x8];
};




struct ScanOverrideDisplayBaseParams {
    uint8_t _pad_0[0x8];
    struct ScanDisplayInstanceParams* displayInstance;
    uint8_t _pad_1[0x10];
    enum ARDataType displaySection;
    uint8_t _pad_2[0x7];
};




struct CommunicationVariableBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool global;
    uint8_t _pad_2[0x7];
};




struct SHazardAreaShapeParams {
    uint8_t _pad_0[0x8];
};




struct S42CommendationRequirementBase {
    uint8_t _pad_0[0x8];
};




struct SCMeleeWeaponParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* helper;
    uint8_t _pad_1[0x8];
    struct CryStringT* audioTriggerName;
    uint8_t _pad_2[0x8];
    struct CryStringT* matFxTriggerName;
    uint8_t _pad_3[0x8];
    _Bool canBeUsedForTakeDown;
    uint8_t _pad_4[0x7];
    struct WeaponProceduralAnimation* proceduralAnimationRecord;
    uint8_t _pad_5[0x10];
    _Bool canBlock;
    _Bool canBeUsedInProne;
    _Bool canDodge;
    uint8_t _pad_6[0x1];
    float stanceTransitionMeleeDelay;
};




struct FlightHUDUIMessage {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* message;
    uint8_t priority;
    uint8_t _pad_1[0x7];
};




struct EntityAudioControllerTypeParams {
    uint8_t _pad_0[0x8];
    struct SEntityAudioControllerParams* audioControllerParams;
    uint8_t _pad_1[0x8];
};




struct SJumpTunnelMeshParams {
    uint8_t _pad_0[0x18];
    struct Range* widthRange;
    uint8_t _pad_1[0x8];
    struct Range* heightRange;
    uint8_t _pad_2[0x8];
    float entryExitRadius;
    float obstacleScale;
    int32_t numObstacles;
    _Bool matchFirstSpline;
    uint8_t _pad_3[0x3];
    struct SJumpTunnelVisualParams* visualParams;
    uint8_t _pad_4[0x28];
    struct JumpTunnelCubeMapParams* cubeMapParams;
    uint8_t _pad_5[0x60];
};




struct PersonalThoughtStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* InventoryOpenedState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* InventoryClosedState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* InventoryToLootingState;
    uint8_t _pad_3[0x8];
    struct SInteractionState* LootingToInventoryState;
    uint8_t _pad_4[0x8];
    struct SInteractionState* LootingOpenedState;
    uint8_t _pad_5[0x8];
    struct SInteractionState* LootingClosedState;
    uint8_t _pad_6[0x8];
};




struct DematerializeAnimation {
    uint8_t _pad_0[0x8];
    float dissolveStartTime;
    float dissolveDuration;
    struct GlobalResourceParticle* headEffect;
    uint8_t _pad_1[0x10];
    struct GlobalResourceParticle* armEffect;
    uint8_t _pad_2[0x10];
    struct GlobalResourceParticle* legEffect;
    uint8_t _pad_3[0x10];
    struct GlobalResourceParticle* torsoEffect;
    uint8_t _pad_4[0x10];
    struct GlobalResourceParticle* debugEffect;
    uint8_t _pad_5[0x10];
};




struct SBuildingBlocks_EntityEffects {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_EntityEffectBase* glow;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_EntityEffectBase* tint;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_EntityEffectSilhouette* silhouette;
    uint8_t _pad_3[0x8];
    float interferenceAmount;
    float dissolveOpacity;
};




struct GlobalAerodynamicTrailSettings {
    uint8_t _pad_0[0x8];
    float maximumAngleOfAttack;
    float maximumRollVelocity;
    float maximumDewPointDeviation;
    float speedInfluence;
    float engineTrailReduction;
    float heatingReduction;
    struct Range* cloudDensityRange;
    uint8_t _pad_1[0x8];
};




struct InventoryContainerParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct CryStringT* tags;
    uint8_t _pad_1[0x8];
    struct ItemCategory* itemCategory;
    uint8_t _pad_2[0x28];
};




struct InteractionConditionCanDropItemInCurrentZone {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SEntityComponentAttachmentClusterParams {
    uint8_t _pad_0[0x18];
};




struct BreathingHelperComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_ColorSolid {
    uint8_t _pad_0[0x8];
    struct SRGBA8* color;
    uint8_t _pad_1[0x8];
};




struct ControlHintCondition_ActorTags {
    uint8_t _pad_0[0x8];
    struct TagList* positiveTags;
    uint8_t _pad_1[0x30];
    struct TagList* negativeTags;
    uint8_t _pad_2[0x30];
};




struct LootArchetypeEntry_Secondary {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    float weight;
    uint8_t _pad_2[0x4];
};




struct LightningTargetMode_Vehicle {
    uint8_t _pad_0[0x8];
    _Bool localPlayerOnly;
    uint8_t _pad_1[0x7];
    struct LightningStrengthDriver* strength;
    uint8_t _pad_2[0x60];
};




struct BuildingBlocks_StaticVariableString {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* value;
    uint8_t _pad_2[0x8];
};




struct ControlHintCondition_ActorStatusType {
    uint8_t _pad_0[0x8];
    enum ARDataType actorStatusType;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_GeomEntityEffect {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_1[0x8];
    float amount;
    uint8_t _pad_2[0x4];
};




struct AnimationJointTransform {
    uint8_t _pad_0[0x8];
    struct AnimationVariable* variable;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_TransformerBase {
    uint8_t _pad_0[0x8];
};




struct BoidsOceanSurfaceRepelRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float effectDistance;
    _Bool belowOcean;
    uint8_t _pad_2[0x3];
};




struct SCharacterCustomizerMakeupSlotRandomizationParams {
    uint8_t _pad_0[0x8];
    float noMakeupProbability;
    uint8_t _pad_1[0x4];
    struct SCharacterCustomizerMakeupSlot* makeupSlot;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_BindingsOperationBase {
    uint8_t _pad_0[0x50];
};




struct SObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct UIElementSoundEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* SoundID;
    uint8_t _pad_1[0x8];
    struct CryStringT* SoundPath;
    uint8_t _pad_2[0x8];
};




struct SITeamsModule {
    uint8_t _pad_0[0x18];
};




struct SICamerasModule {
    uint8_t _pad_0[0x18];
};




struct ParticleEffectFixedTintingParams {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
};




struct BreakableEntityClassParams {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
};




struct ActorFootJointPairDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* leftFootJoint;
    uint8_t _pad_1[0x8];
    struct CryStringT* rightFootJoint;
    uint8_t _pad_2[0x10];
};




struct InteractionConditionHoverPowerStageEqual {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType powerStage;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_VirtualCursorPolicy {
    uint8_t _pad_0[0x8];
    _Bool hoverFrictionEnabled;
    _Bool hoverStateEnabled;
    uint8_t _pad_1[0x6];
};




struct ContractPrerequisite_CrimeStat {
    uint8_t _pad_0[0x8];
    struct Jurisdiction* crimeStatJurisdictionOverride;
    uint8_t _pad_1[0x10];
    float minCrimeStat;
    float maxCrimeStat;
    _Bool includePrerequisiteWhenSharing;
    uint8_t _pad_2[0x7];
};




struct BuildingBlocks_ScrollPolicyBase {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_Overflow {
    uint8_t _pad_0[0x8];
    enum ARDataType overflow;
    float widthFadeThreshold;
    float heightFadeThreshold;
    float depthFadeThreshold;
    _Bool fadeXAxis;
    _Bool fadeYAxis;
    _Bool fadeZAxis;
    uint8_t _pad_1[0x5];
};




struct SCItemSeatHeadTrackingPositionLimitParams {
    uint8_t _pad_0[0x8];
    float leftRight;
    float up;
    float down;
    float forward;
    float backward;
    uint8_t _pad_1[0x4];
};




struct CraftingGameplayPropertyImpl_Base_Float {
    uint8_t _pad_0[0x8];
};




struct SMovableLimits {
    uint8_t _pad_0[0x8];
    float veloctiyForwardClamp;
    float veloctiyBackwardClamp;
    float veloctiySideClamp;
    float maxYawSpeed;
    float maxLinearAcceleration;
    float maxAngularAcceleration;
    float linearAccelerationEasingPower;
    float linearAccelerationEasingMinSpeed;
    float linearAccelerationEasingMaxSpeed;
    float angularAccelerationEasingPower;
    float angularAccelerationEasingMinSpeed;
    float angularAccelerationEasingMaxSpeed;
    float rotLinModifier;
    float lateralDamping;
    float yawDamping;
    float leanMaxSlopeAngle;
    float leanMultiplier;
    _Bool allowSprint;
    uint8_t _pad_1[0x3];
    float velocitySprintClamp;
    uint8_t _pad_2[0x4];
};




struct SCuttableComponentParams {
    uint8_t _pad_0[0x18];
    struct SCuttableShapeObjectParams* cuttableShapeParams;
    uint8_t _pad_1[0x10];
};




struct DefaultActionsEntityState_InteractionStateMachineStateTag {
    uint8_t _pad_0[0x8];
    struct Tag* interactionStateMachineStateTag;
    uint8_t _pad_1[0x10];
};




struct SEAUIMessageComponentParams {
    uint8_t _pad_0[0x18];
    float lifetime;
    int32_t maxAmountOfMessages;
    struct CryStringT* messageQueueIdentifier;
    uint8_t _pad_1[0x8];
    float fadeoutTime;
    uint8_t _pad_2[0x4];
};




struct SIntNumberComparer {
    uint8_t _pad_0[0x8];
    int32_t value;
    enum ARDataType mode;
};




struct SCOptionalZeroGTraversalParams {
    uint8_t _pad_0[0x8];
    struct Tag* activationTag;
    uint8_t _pad_1[0x10];
    struct SCZeroGLaunchParams* zeroGLaunchParams;
    uint8_t _pad_2[0x8];
};




struct ObjectiveDisplayInfo {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* shortDescription;
    struct CLocIdentifier* longDescription;
    struct CLocIdentifier* objectiveMarkerLabel;
    enum ARDataType category;
    _Bool hideOnHUD;
    uint8_t _pad_1[0x3];
};




struct InventoryContainerGridCellSizeBase {
    uint8_t _pad_0[0x8];
};




struct DynamicInstancePropertiesParams {
    uint8_t _pad_0[0x18];
};




struct SCharacterCustomizerItemRandomizationParams {
    uint8_t _pad_0[0x8];
    float noItemProbability;
    uint8_t _pad_1[0x4];
};




struct EntityComponentSpawnClosetAreaParams {
    uint8_t _pad_0[0x18];
    float spawnBoxSize;
    float zMargin;
    float despawnTimeoutSeconds;
    uint8_t _pad_1[0x4];
};




struct AIBasicMeleeAttack {
    uint8_t _pad_0[0x8];
    enum ARDataType attackType;
    uint8_t _pad_1[0x4];
    struct CryStringT* globalFragmentTags;
    uint8_t _pad_2[0x8];
    float minDistanceToTarget2d;
    float maxDistanceToTarget2d;
    float minRelativeTargetHeight;
    float maxRelativeTargetHeight;
    float maxAngleToTarget;
    _Bool ignoreAttackObstructionClearance;
    uint8_t _pad_3[0x3];
    struct MeleeAttackCategoryInfo* meleeAttackCategoryInfo;
    uint8_t _pad_4[0x8];
    float animationSpeedBias;
    uint8_t _pad_5[0x4];
    struct CryStringT* targetDistanceFragmentTag;
    uint8_t _pad_6[0x8];
    float motionWarpTranslationExtension;
    float motionWarpRotationExtension;
    float attackSwipeLeftLimitAngle;
    float attackSwipeRightLimitAngle;
    float attackWeaponLength;
    uint8_t _pad_7[0x4];
};




struct PersonalThoughtAction {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
};




struct TrackWheeledVehicleAudioComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* engineSoundPosition;
    uint8_t _pad_1[0x8];
    struct GlobalResourceAudio* engineStartupOneShot;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* engineRunLoopStart;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* engineRunLoopStop;
    uint8_t _pad_4[0x18];
    struct CryStringT* hornSoundPosition;
    uint8_t _pad_5[0x8];
    struct GlobalResourceAudio* hornLoopStart;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* hornLoopStop;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* suspensionBumpSound;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* gearChangeSound;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* throttleOnSound;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* throttleOffSound;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* damagedSound;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* destroyedSound;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* boostStartTrigger;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* boostStopTrigger;
    uint8_t _pad_15[0x18];
    struct AudioRtpc* speedRtpc;
    uint8_t _pad_16[0x18];
    struct AudioRtpc* throttleRtpc;
    uint8_t _pad_17[0x18];
    struct AudioRtpc* throttleLoadRtpc;
    uint8_t _pad_18[0x18];
    struct AudioRtpc* throttleOnAtLoadRtpc;
    uint8_t _pad_19[0x18];
    struct AudioRtpc* throttleOffAtLoadRtpc;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* rpmRtpc;
    uint8_t _pad_21[0x18];
    struct AudioRtpc* rpmLoadRtpc;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* rpmAccelerationRtpc;
    uint8_t _pad_23[0x18];
    struct AudioRtpc* slipRtpc;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* slipForwardsRtpc;
    uint8_t _pad_25[0x18];
    struct AudioRtpc* slipLateralRtpc;
    uint8_t _pad_26[0x18];
    struct AudioRtpc* steerRtpc;
    uint8_t _pad_27[0x18];
    struct AudioRtpc* steerStrainRtpc;
    uint8_t _pad_28[0x18];
    struct AudioRtpc* groundContactsRtpc;
    uint8_t _pad_29[0x18];
    struct AudioRtpc* airTimeRtpc;
    uint8_t _pad_30[0x18];
    struct AudioRtpc* suspensionCompressionRtpc;
    uint8_t _pad_31[0x18];
    struct AudioRtpc* suspensionStrokeRtpc;
    uint8_t _pad_32[0x18];
    struct AudioRtpc* bumpCompressionRtpc;
    uint8_t _pad_33[0x18];
    struct AudioRtpc* surfaceRoughnessRtpc;
    uint8_t _pad_34[0x18];
    struct AudioRtpc* boostDurationRtpc;
    uint8_t _pad_35[0x18];
    struct AudioRtpc* remainingBoostRtpc;
    uint8_t _pad_36[0x18];
    float bumpMinSusp;
    float bumpMinSpeed;
    float bumpIntensityMult;
    float bumpMinTime;
    float throttleLoadLerpUpTime;
    float throttleLoadLerpDownTime;
    float skidLerpSpeed;
    float skidCentrifugalFactor;
    float skidBrakeFactor;
    float skidPowerLockFactor;
    float skidLateralFactor;
    float skidForwardFactor;
    struct AudioRtpc* treadCountRtpc;
    uint8_t _pad_37[0x18];
    struct AudioRtpc* treadIndexRtpc;
    uint8_t _pad_38[0x18];
    struct AudioRtpc* treadRotationSpeedRtpc;
    uint8_t _pad_39[0x18];
    struct AudioRtpc* treadGroundContactRtpc;
    uint8_t _pad_40[0x18];
    struct WheelAudioSurfaceMap* treadAudioSurfaceMap;
    uint8_t _pad_41[0x10];
};




struct EntityComponentAsteroidVolumeParams {
    uint8_t _pad_0[0x18];
    struct AsteroidStateBase* state;
    uint8_t _pad_1[0x8];
    struct AsteroidBehavior* behavior;
    uint8_t _pad_2[0x10];
};




struct SDashboardConsumableInteractionParams {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* consumableIP;
    uint8_t _pad_1[0x8];
};




struct ItemResourceControlConditionThrottle {
    uint8_t _pad_0[0x8];
    struct ItemResourceControlOutputBase* controlOutput;
    uint8_t _pad_1[0x8];
    struct ItemResourceControlParameterBase* controlParameter;
    uint8_t _pad_2[0x8];
};




struct SControlledEntityCameraParams {
    uint8_t _pad_0[0x8];
    struct Camera* cameraRecord;
    uint8_t _pad_1[0x10];
    struct EntityReferenceDef* groupCameraEntity;
    uint8_t _pad_2[0x10];
    int32_t uiLayerIndex;
    uint8_t _pad_3[0x4];
    struct CryStringT* uiLayerViewName;
    uint8_t _pad_4[0x8];
};




struct SDespawnRule {
    uint8_t _pad_0[0x8];
    float ruleDelaySeconds;
    uint8_t _pad_1[0x4];
};




struct DialogueBundleWeightedReference {
    uint8_t _pad_0[0x8];
    _Bool usePooling;
    uint8_t _pad_1[0x17];
    struct DialogueBundlePresetWeighted* dialoguePreset;
    uint8_t _pad_2[0x10];
};




struct LocalPlayerAudioEnvironmentParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceAudio* dynamicAmbienceStart;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* listenerUnderwaterRtpc;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* dynamicWallaFriendlyStart;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* dynamicWallaHostileStart;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* dynamicWallaFriendlyStop;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* dynamicWallaHostileStop;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* dynamicWallaBedFriendlyStart;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* dynamicWallaBedHostileStart;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* dynamicWallaBedFriendlyStop;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* dynamicWallaBedHostileStop;
    uint8_t _pad_10[0x18];
    struct AudioRtpc* dynamicWallaBedPropagationVolumeRTPC;
    uint8_t _pad_11[0x18];
    struct AudioRtpc* dynamicWallaNPCCountRtpc;
    uint8_t _pad_12[0x18];
    struct AudioRtpc* dynamicWallaFemalePercentageRtpc;
    uint8_t _pad_13[0x18];
    struct AudioRtpc* dynamicWallaRoomSizeRtpc;
    uint8_t _pad_14[0x18];
    struct AudioSwitch* dynamicWallaUnthreatenedAudioSwitch;
    uint8_t _pad_15[0x30];
    struct AudioSwitch* dynamicWallaThreatenedAudioSwitch;
    uint8_t _pad_16[0x30];
    int32_t minimumActorsForWalla;
    float wallaGroupCatchmentArea;
    struct GlobalResourceAudio* spaceAmbienceStartTrigger;
    uint8_t _pad_17[0x18];
    struct GlobalResourceAudio* spaceAmbienceStopTrigger;
    uint8_t _pad_18[0x18];
    struct GlobalResourceAudio* rainStartTrigger;
    uint8_t _pad_19[0x18];
    struct GlobalResourceAudio* rainStopTrigger;
    uint8_t _pad_20[0x18];
    struct GlobalResourceAudio* rainOnRoofStartTrigger;
    uint8_t _pad_21[0x18];
    struct GlobalResourceAudio* rainOnRoofStopTrigger;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* rainAmountRtpc;
    uint8_t _pad_23[0x18];
    struct AudioRtpc* distanceToOutsideRtpc;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* outsideDoorOpenAmountRtpc;
    uint8_t _pad_25[0x18];
    struct AudioRtpc* shipVelocityThroughRain;
    uint8_t _pad_26[0x18];
    struct GlobalResourceAudio* fireSpreadAudioTrigger;
    uint8_t _pad_27[0x18];
    struct GlobalResourceAudio* firePointAudioTrigger;
    uint8_t _pad_28[0x18];
    struct AudioRtpc* fireRadiusRtpc;
    uint8_t _pad_29[0x18];
    struct AudioRtpc* fireStrengthRtpc;
    uint8_t _pad_30[0x18];
    float fireMaxAudioRadius;
    float fireRoomConnectionRadius;
    int32_t maxFirePointsWithAudio;
    uint8_t _pad_31[0x4];
};




struct BuildingBlocks_PreviewScreenWorldOrigin {
    uint8_t _pad_0[0x10];
    enum ARDataType renderLayer;
    uint8_t _pad_1[0x7];
};




struct ObjectiveHandlerBase {
    uint8_t _pad_0[0x8];
};




struct DirectRTT_PixelGridParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* TexturePath;
    uint8_t _pad_1[0x8];
    float Intensity;
    float Tiling;
    float ScrollSpeed;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_FieldModifierPair {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_WidgetBase* target;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_FieldModifierBase* modifier;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_TriggerSubsumptionBroadcast {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float eventRange;
    uint8_t _pad_2[0xc];
};




struct SFlowGraphProxyParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* flowgraphPath;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_FieldTransitionBase {
    uint8_t _pad_0[0x8];
    float duration;
    float delay;
    float delayRandomRange;
    _Bool timescaleIndependent;
    uint8_t _pad_1[0x3];
    struct BuildingBlocks_TimingFunctionBase* timingFunction;
    uint8_t _pad_2[0x8];
};




struct SSignaturesCategoryEntry {
    uint8_t _pad_0[0x8];
    enum ARDataType signatureType;
    uint8_t _pad_1[0x4];
    struct RadarSignatureCategoryEntry* signatureCategory;
    uint8_t _pad_2[0x10];
    float signatureValue;
    uint8_t _pad_3[0x4];
};




struct InteriorMapWorldUIFocusPointPlanarGridParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* materialPath;
    uint8_t _pad_1[0x8];
    float numDivisions;
    float opacity;
};




struct SDragDropUsableUserConfig {
    uint8_t _pad_0[0x8];
    struct UseChannelArchetype* useChannelArchetype;
    uint8_t _pad_1[0x10];
    struct SSharedInteractionParams* interactionDragOut;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* interactionDropIn;
    uint8_t _pad_3[0x8];
};




struct SEAUISpawnScreenFPSEquipmentCategoryParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayNameLoc;
    enum ARDataType itemSlot;
    uint8_t _pad_1[0x7];
    struct TagsDNF* equipmentTags;
    uint8_t _pad_2[0x60];
};




struct SecurityLoginInput {
    uint8_t _pad_0[0x8];
    struct CryStringT* loginUsername;
    uint8_t _pad_1[0x8];
    struct CryStringT* loginPassword;
    uint8_t _pad_2[0x8];
};




struct DamageMapDamageTypes {
    uint8_t _pad_0[0x8];
    struct DamageMapChannels* physical;
    uint8_t _pad_1[0x10];
    struct DamageMapChannels* energy;
    uint8_t _pad_2[0x10];
};




struct HolographicVolumeParams {
    uint8_t _pad_0[0x18];
    enum ARDataType holoVolumeType;
    enum ARDataType holoRenderType;
    uint8_t _pad_1[0x3];
    float objectFadeDist;
    uint8_t _pad_2[0x4];
    struct HolographicVolumeSphereParams* sphereVolume;
    uint8_t _pad_3[0x8];
    struct HolographicVolumeCubeParams* cubeVolume;
    uint8_t _pad_4[0x10];
    _Bool controlledByComms;
    uint8_t _pad_5[0x7];
    struct VisualStateParams* visualState;
    uint8_t _pad_6[0x10];
    _Bool enableSSDO;
    _Bool enableSubsurfaceScattering;
    _Bool enableTAA;
    uint8_t _pad_7[0x5];
};




struct ItemResourceDynamicAmountThrusterFuel {
    uint8_t _pad_0[0x8];
};




struct SCItemBoatControllerParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* disableEngineInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* enableEngineInteraction;
    uint8_t _pad_2[0x8];
    struct SCBoatMovementParams* boatMovementParams;
    uint8_t _pad_3[0x10];
    struct IntoxicationBoatModifierParams* intoxicationModifierRef;
    uint8_t _pad_4[0x10];
    struct CryStringT* propellerHelper;
    uint8_t _pad_5[0x8];
};




struct ThrowParams {
    uint8_t _pad_0[0x8];
    float force;
    float minSpeed;
    float maxSpeed;
    uint8_t _pad_1[0x4];
};




struct SCItemLocalization {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* Name;
    struct CLocIdentifier* ShortName;
    struct CLocIdentifier* Description;
    struct SCExtendedLocalizationLevelParams* displayFeatures;
    uint8_t _pad_1[0x88];
};




struct BuildingBlocks_LocalizationDateFromIntegerTimeStamp {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_1[0x8];
};




struct CockpitRuleString {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float priority;
    uint8_t _pad_2[0x4];
    struct CryStringT* value;
    uint8_t _pad_3[0x8];
};




struct ItemResourceNetworkDefaultPowerDistributionParams {
    uint8_t _pad_0[0x8];
    _Bool powerDistPoolsFillMin;
    uint8_t _pad_1[0x3];
    float powerDistCoolerMin;
    float powerDistPoolsProportion;
    float poolDefaultWeapons;
    float poolDefaultEngines;
    float poolDefaultShields;
};




struct DegradationTemperatureMultiplier {
    uint8_t _pad_0[0x8];
    float minimumRatio;
    float heatMultiplier;
};




struct SEntityTraversingNodeExecuteLinkAllTaggedInteractions {
    uint8_t _pad_0[0x8];
};




struct ForceFeedbackPattern {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* samples;
    uint8_t _pad_2[0x8];
};




struct Aiming {
    uint8_t _pad_0[0x8];
    float accuracyConeAngle;
    float maxTargetAngle;
    float maxTargetAngleInfluence;
    float chanceOfHittingTarget;
    float missileCooldownMin;
    float missileCooldownMax;
    float countermeasureReactionDelayMin;
    float countermeasureReactionDelayMax;
    float countermeasureCooldownMin;
    float countermeasureCooldownMax;
    float countermeasureLaunchChanceMin;
    float countermeasureLaunchChanceIncreaseRatio;
    float flareBurstSizeMultiplierMin;
    float flareBurstSizeMultiplierMax;
    float defaultInAimAngleThreshold;
    float disciplinedInAimAngleThreshold;
    float unDisciplinedInAimAngleThreshold;
    uint8_t _pad_1[0x4];
};




struct HeadMotionShakeSettings {
    uint8_t _pad_0[0x8];
    _Bool enabledForChaseCamera;
    _Bool enabledForOrbitCamera;
    _Bool enabledForOrbitFixedCamera;
    uint8_t _pad_1[0x5];
    struct HeadMotionOffsetParams* translationSettings;
    uint8_t _pad_2[0x68];
    struct HeadMotionOffsetParams* rotationSettings;
    uint8_t _pad_3[0x68];
};




struct VoiceSingle {
    uint8_t _pad_0[0x8];
    struct CryStringT* mannequinTag;
    uint8_t _pad_1[0x8];
};




struct AudioValueOutputBehaviourMicrophone {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
};




struct SCSeatAccessGatewayInteractionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct SCSeatAccessInteractionConditionParams* conditions;
    uint8_t _pad_2[0x20];
    struct CryStringT* fragmentOverride;
    uint8_t _pad_3[0x8];
    struct SCSeatAccessGatewayInteractionStateParams* openState;
    uint8_t _pad_4[0x8];
    struct SCSeatAccessGatewayInteractionStateParams* closeState;
    uint8_t _pad_5[0x8];
    _Bool audioCanopyTreatment;
    uint8_t _pad_6[0x3];
    float openDuration;
    float closeDuration;
    float audioThreshold;
    struct AudioRtpc* isShipCanopyOpen;
    uint8_t _pad_7[0x18];
};




struct CameraLookBehindConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_4[0x20];
    float heightOverride;
    uint8_t _pad_5[0x4];
    struct CryStringT* screenOverlayTextureName;
    uint8_t _pad_6[0x8];
    struct CryStringT* introEffectLibrary;
    uint8_t _pad_7[0x8];
    struct CryStringT* introEffectName;
    uint8_t _pad_8[0x8];
    struct CryStringT* outroEffectLibrary;
    uint8_t _pad_9[0x8];
    struct CryStringT* outroEffectName;
    uint8_t _pad_10[0x8];
};




struct ProjectileProximityTriggerParams {
    uint8_t _pad_0[0x8];
    float armTime;
    float safeDistance;
    float radius;
    uint8_t _pad_1[0x4];
};




struct SEntityOnlineStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onEntityOnlineState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onEntityOfflineState;
    uint8_t _pad_2[0x8];
};




struct BoidsBehaviorRuleContainer {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct BoidsBehaviorRule* rule;
    uint8_t _pad_2[0x8];
};




struct DragCurveParams {
    uint8_t _pad_0[0x8];
    float multiplier;
    float dragForwardLevelFlight;
    float dragMaximum;
    float dragReverseFlight;
};




struct BuildingBlocks_ShapeCircle {
    uint8_t _pad_0[0x8];
    struct Vec2* center;
    uint8_t _pad_1[0x8];
    _Bool showBoundsDebug;
    uint8_t _pad_2[0x7];
    float outerRadius;
    float innerRadius;
};




struct ActorFrostedVisorParams {
    uint8_t _pad_0[0x8];
    float suitTemperatureMaxFrost;
    float suitTemperatureMinFrost;
    float visorWipeRemainingFrost;
    float visorWipeTime;
    float visorWipeFrostRegenDelayMin;
    float visorWipeFrostRegenDelayMax;
    float visorIsFrostedThreshold;
    uint8_t _pad_1[0x4];
};




struct ItemCategory {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    enum ARDataType subType;
    struct Tag* requiredTag;
    uint8_t _pad_1[0x10];
};




struct BoidTransition {
    uint8_t _pad_0[0x8];
    struct CryStringT* animationTag;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
    struct BoidState* transition;
    uint8_t _pad_3[0x8];
    _Bool instantTransition;
    _Bool allowWhileTransitioning;
    uint8_t _pad_4[0xe];
};




struct SMissileLauncher {
    uint8_t _pad_0[0x8];
    float soundRadius;
    float detachVelocityRight;
    float detachVelocityForward;
    float detachVelocityUp;
    float detachVelocityRoll;
    _Bool canFireWithoutLock;
    _Bool igniteOnPylon;
    _Bool showHitIndicator;
    uint8_t _pad_1[0x1];
};




struct ActorStateData_LadderValidationParams {
    uint8_t _pad_0[0x8];
    float stateTimeout;
    float divergeDistance;
};




struct SItemPortEntityOnlineStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onEntityOnlineState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onEntityOfflineState;
    uint8_t _pad_2[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_3[0x8];
};




struct EntityComponentFireArea {
    uint8_t _pad_0[0x18];
    float repairRate;
    float combustibility;
};




struct ScannableComponentParams {
    uint8_t _pad_0[0x18];
};




struct QuantumDriveNotifications {
    uint8_t _pad_0[0x8];
    struct QuantumDriveNotification* calibrationStarted;
    uint8_t _pad_1[0x20];
    struct QuantumDriveNotification* calibrationCompleted;
    uint8_t _pad_2[0x20];
    struct QuantumDriveNotification* calibrationFailed;
    uint8_t _pad_3[0x20];
    struct CryStringT* playerNameToken;
    uint8_t _pad_4[0x8];
    struct CryStringT* selectedDestinationToken;
    uint8_t _pad_5[0x8];
};




struct SJumpPointAccessParams {
    uint8_t _pad_0[0x18];
    float distanceForManualComms;
    float distanceAllowedToJumpPoint;
    float timeGivenForInitiatingJump;
    float timeBetweenJumps;
    float timeForCompletePartyJump;
    float timeGivenForCancellingJump;
    float timeShowingHUDMessages;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* greetingMessage;
    struct CLocIdentifier* approachingJumpZoneMessage;
    struct CLocIdentifier* inQueueMessage;
    struct CLocIdentifier* partyLeaderEnteredQueueMessage;
    struct CLocIdentifier* queuingOnlyForLeaderMessage;
    struct CLocIdentifier* partyAlreadyInQueueMessage;
    struct CLocIdentifier* startJumpMessage;
    struct CLocIdentifier* lingeringMessage;
    struct CLocIdentifier* removedPermissionMessage;
    struct CLocIdentifier* illegalJumpMessage;
    struct CLocIdentifier* partyInitiateJumpingMessage;
};




struct SJumpTunnelHostParams {
    uint8_t _pad_0[0x18];
};




struct ItemAwardTag {
    uint8_t _pad_0[0x8];
    int32_t amountToAward;
    uint8_t _pad_1[0x4];
    struct TagsDNFTerm* rewardSearchTags;
    uint8_t _pad_2[0x60];
};




struct FireVoxelSelectionShape_Sphere {
    uint8_t _pad_0[0x8];
    float radius;
    float falloffExponent;
};




struct ActorStateValidation {
    uint8_t _pad_0[0x8];
    struct ActorActionHandler_ValidationParams* actorActionHandlerValidationParams;
    uint8_t _pad_1[0x18];
    struct ActorStateData_ValidationParams* actorStateDataValidationParams;
    uint8_t _pad_2[0x58];
};




struct EAPlayableAreaMovementTypeParamsDef {
    uint8_t _pad_0[0x8];
    enum ARDataType onExit;
    float onExitDelay;
    float onExitDelayPhaseChange;
    float maxRedoutPercent;
    float timeToMaxRedout;
    float timeToMaxRedoutPhaseChange;
    _Bool ignoreAI;
    uint8_t _pad_1[0x7];
};




struct ScanCustomDataDirect {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    enum ARDataType displaySection;
    _Bool addToBoxoutDisplay;
    _Bool displayInSameRowAsHeader;
    uint8_t _pad_1[0x5];
    struct ScanCustomValue* value;
    uint8_t _pad_2[0x8];
};




struct BindingsOperations_AudioParameter {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x8];
    struct Tag* audioParameterTag;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_StaticArrayDataBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct UIAudioComponent_ManualOffset {
    uint8_t _pad_0[0x8];
    struct QuatT* offset;
    uint8_t _pad_1[0x50];
};




struct SCItemDoorUserAnimationParams {
    uint8_t _pad_0[0x8];
    _Bool useSyncedEnslavement;
    uint8_t _pad_1[0x7];
    struct CryStringT* userAnimationDatabase;
    uint8_t _pad_2[0x8];
    struct CryStringT* userScopeContext;
    uint8_t _pad_3[0x8];
};




struct AIDebugDrawComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCItemDoorEffectParams {
    uint8_t _pad_0[0x8];
    struct Tag* openTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* closeTrigger;
    uint8_t _pad_2[0x10];
    struct Tag* openedTrigger;
    uint8_t _pad_3[0x10];
    struct Tag* closedTrigger;
    uint8_t _pad_4[0x10];
    struct Tag* openingTag;
    uint8_t _pad_5[0x10];
    struct Tag* closingTag;
    uint8_t _pad_6[0x10];
    struct Tag* overrideOpenTrigger;
    uint8_t _pad_7[0x10];
    struct Tag* overrideCloseTrigger;
    uint8_t _pad_8[0x10];
    struct Tag* overrideOpenedTrigger;
    uint8_t _pad_9[0x10];
    struct Tag* overrideClosedTrigger;
    uint8_t _pad_10[0x10];
    struct Tag* overrideOpeningTag;
    uint8_t _pad_11[0x10];
    struct Tag* overrideClosingTag;
    uint8_t _pad_12[0x10];
    struct Tag* lockedTrigger;
    uint8_t _pad_13[0x10];
    struct Tag* unlockedTrigger;
    uint8_t _pad_14[0x10];
};




struct ExplosiveOrdnancePingVFX {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* pingSphereGeometry;
    uint8_t _pad_1[0x10];
    struct GlobalResourceMaterial* pingMaterial;
    uint8_t _pad_2[0x10];
    struct RGB* pingColor;
    uint8_t _pad_3[0x10];
    float pingBrightness;
    uint8_t _pad_4[0x4];
};




struct QuantumDriveSplineTraversalParams {
    uint8_t _pad_0[0x8];
    struct QuantumDriveSplineFXParams* splineFX;
    uint8_t _pad_1[0x50];
    float rollUnderFullRotationDistance;
    enum ARDataType rollUnderStartPhase;
    float arrivalRadiusScalar;
    float nearAlignmentThreshold;
    float nearTensionScalar;
    float midTensionScalar;
    float farTensionScalar;
    float originNearTensionScalar;
    float originMidTensionScalar;
    float originFarTensionScalar;
    float targetNearTensionScalar;
    float targetMidTensionScalar;
    float targetFarTensionScalar;
    float angleDerivedTensionExponent;
    float tensionModifiersExponent;
    float baseTensionMin;
    float baseTensionMax;
    float tangentPlanetScalar;
    float maxAlignmentToUseTangentDirection;
    float nearEndingTargetOrientationRatio;
    float midEndingTargetOrientationRatio;
    float farEndingTargetOrientationRatio;
    float nearArrivalOrientationThreshold;
    float midDerivedTargetPositionAlignment;
    float farDerivedTargetPositionAlignment;
    enum ARDataType rotationBehavior;
    struct QuantumDriveSplineRollbackParams* rollbackParams;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeBorderTopLeftRadiusBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SCExtendedLocalizationLevelParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* LogoSimplifiedWhite;
    uint8_t _pad_1[0x8];
    struct CryStringT* FrontendBackground;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* History;
    struct CLocIdentifier* Callout1;
    struct CLocIdentifier* Callout2;
    struct CLocIdentifier* Callout3;
    int32_t UIPriority;
    uint8_t _pad_3[0x4];
    struct GlobalResourceAudio* locationAudioPlayTrigger;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* locationAudioStopTrigger;
    uint8_t _pad_5[0x18];
};




struct EnvironmentLightFadeParams {
    uint8_t _pad_0[0x8];
    float minDistance;
    float minFade;
    float maxDistance;
    float maxFade;
};




struct SCItemCapacitorAssignmentControllerParams {
    uint8_t _pad_0[0x18];
    float minAssignment;
    float maxAssignment;
};




struct ContactHighlightMaterialParams {
    uint8_t _pad_0[0x8];
    struct RGBA* color;
    uint8_t _pad_1[0x10];
    struct GlobalResourceMaterial* material;
    uint8_t _pad_2[0x18];
};




struct UserRTPC {
    uint8_t _pad_0[0x8];
    struct CryStringT* userRTPCName;
    uint8_t _pad_1[0x8];
    float userRTPCValue;
    float userRTPCResetValue;
};




struct UnitTestSubRecord {
    uint8_t _pad_0[0x8];
};




struct HudColor_HoloMatTextures {
    uint8_t _pad_0[0x8];
    struct CryStringT* DiffuseName;
    uint8_t _pad_1[0x8];
};




struct SQuantumBoostEffectParams_LEGACY {
    uint8_t _pad_0[0x8];
    struct Tag* spoolEffectTag;
    uint8_t _pad_1[0x10];
    struct Tag* spoolStrengthTag;
    uint8_t _pad_2[0x10];
    struct BezierCurve* spoolStrengthCurve;
    uint8_t _pad_3[0x88];
    struct Tag* trailsEffectTag;
    uint8_t _pad_4[0x10];
    struct Tag* trailsEffectStrengthTag;
    uint8_t _pad_5[0x10];
    struct Tag* travelEffectTag;
    uint8_t _pad_6[0x10];
    struct Tag* enterFlashEffectTag;
    uint8_t _pad_7[0x10];
    struct Tag* exitFlashEffectTag;
    uint8_t _pad_8[0x10];
    struct Tag* forcedDropoutEffectTag;
    uint8_t _pad_9[0x10];
};




struct TransitDisplayPanelStationAnnouncements {
    uint8_t _pad_0[0x8];
    struct TransitStationAnnouncements* announcements;
    uint8_t _pad_1[0x10];
    _Bool postDepartureAnnouncement;
    uint8_t _pad_2[0x3];
    float postDepartureAlertTime;
    _Bool preArrivalAnnouncement;
    uint8_t _pad_3[0x3];
    float preArrivalAlertTime;
};




struct EnvironmentTemperatureParams {
    uint8_t _pad_0[0x8];
    float bodyDefaultMinTemperatureThreshold;
    float bodyDefaultMaxTemperatureThreshold;
    float suitTempLossRateModifier;
    float bodyTempIncreaseRateModifier;
    float bodyTempDecreaseRateModifier;
    float suitTempRegenRateModifier;
    float bodyTempRegenRateModifier;
    float minRegenRate;
    struct TemperatureUIParams* temperatureUIParams;
    uint8_t _pad_1[0x8];
};




struct SCriticalMalfunctionStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* safeState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* selfDestructState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* criticalMalfunctionState;
    uint8_t _pad_3[0x8];
};




struct ContractClass_PVPBounty {
    uint8_t _pad_0[0x8];
    struct PVPBountyBaseTemplateParams* params;
    uint8_t _pad_1[0x8];
};




struct CameraSpringConfig {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x3];
    float maxAtmosphericDensity;
    struct CameraSpringAxesConfig* positionalAxes;
    uint8_t _pad_2[0xe8];
    struct CameraSpringAxesConfig* rotationalAxes;
    uint8_t _pad_3[0xe8];
    struct CameraWheeledVehicleConfig* wheeledParams;
    uint8_t _pad_4[0x38];
};




struct OptimalPowerWindowScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct QuickAccessWheelAutoWingmanCommandsDef {
    uint8_t _pad_0[0x8];
    _Bool openContextMenuAsFolder;
    uint8_t _pad_1[0x7];
};




struct DefaultAction_CarryableInteractionDef {
    uint8_t _pad_0[0x8];
    enum ARDataType carryableInteraction;
    uint8_t _pad_1[0x4];
};




struct S42StatOperationBase {
    uint8_t _pad_0[0x8];
    enum ARDataType operationType;
    uint8_t _pad_1[0x4];
};




struct MissionLocationTemplate {
    uint8_t _pad_0[0x8];
    struct MissionLocationData* locationData;
    uint8_t _pad_1[0x250];
};




struct PlayerGroupManagerLocStringParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* partyNameFormat;
    struct CLocIdentifier* groupNameFormat;
    struct CLocIdentifier* channelNameFormat;
    struct CLocIdentifier* inviteSent;
    struct CLocIdentifier* inviteReceived;
    struct CLocIdentifier* memberJoined;
    struct CLocIdentifier* inviteDeclined;
    struct CLocIdentifier* localPlayerJoined;
    struct CLocIdentifier* localPlayerJoinedAuto;
    struct CLocIdentifier* localPlayerLeft;
    struct CLocIdentifier* localPlayerKicked;
    struct CLocIdentifier* groupDisbanded;
    struct CLocIdentifier* groupCreated;
    struct CLocIdentifier* leaderChanged;
    struct CLocIdentifier* memberLeft;
    struct CLocIdentifier* memberKicked;
    struct CLocIdentifier* inviteTimeout;
    struct CLocIdentifier* invitationFailed;
};




struct PatrolGraphComponentParams {
    uint8_t _pad_0[0x18];
};




struct SSequencerActorActionHandlerTask {
    uint8_t _pad_0[0x20];
    enum ARDataType actionType;
    uint8_t _pad_1[0x4];
};




struct ARModeSettings {
    uint8_t _pad_0[0x8];
    float playerLabelOffsetX;
    float playerLabelOffsetY;
    float playerLabelOffsetZ;
    uint8_t _pad_1[0x4];
    struct RadarDisplay3DPreset* starMapParams;
    uint8_t _pad_2[0x10];
};




struct SUsableIdlePoseOverride {
    uint8_t _pad_0[0x8];
    struct CryStringT* idlePoseTag;
    uint8_t _pad_1[0x8];
    float weight;
    _Bool overrideForPlayer;
    uint8_t _pad_2[0x3];
};




struct SEntityComponentPartyMarkerParams {
    uint8_t _pad_0[0x18];
};




struct ReviveParams {
    uint8_t _pad_0[0x18];
    enum ARDataType serviceBeaconType;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* serviceBeaconName;
    int32_t beaconTaxPercentage;
    int32_t beaconMaxPaymentAmount;
    struct MissionPropertyValue_AIName* npcRequesterNameDef;
    uint8_t _pad_2[0x40];
    struct SServiceBeaconCreatorParams* playerCreatorParams;
    uint8_t _pad_3[0x8];
    struct SServiceBeaconCreatorParamsBase* npcCreatorParams;
    uint8_t _pad_4[0x8];
    struct CLocIdentifier* objectiveTitle;
    struct CLocIdentifier* objectiveDescription;
};




struct InteractionConditionSeatUserRegistered {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct EntityComponentEffects_Test_ColorLink {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    struct Tag* parameter;
    uint8_t _pad_2[0x10];
};




struct QuantumDriveEffectParams {
    uint8_t _pad_0[0x8];
    struct Behavior_CustomQuantumDriveEffectsPreset* quantumParticleEffects;
    uint8_t _pad_1[0x8];
    struct Behavior_CustomQuantumDriveEffectsPreset* quantumTrailEffect;
    uint8_t _pad_2[0x8];
    float shieldProjectileRelativeTime;
    float boostChargeShieldPulseRelativeTime;
    float shipBoundsScale;
    float originOffsetDistance;
    float castingOffsetDistance;
    float interiorTransitExitOffsetDistance;
    float effectScaling;
    float shieldPulseEffectScale;
    float shieldPulseEmissionScale;
    uint8_t _pad_3[0x4];
    struct Range* chromaticShiftVelocityRange;
    uint8_t _pad_4[0x8];
};




struct SDecayCurveMaxValueParams {
    uint8_t _pad_0[0x8];
    float maxValue;
    float minScalingFactor;
    _Bool useDecayScaling;
    _Bool useWeaponOrientation;
    uint8_t _pad_1[0x6];
};




struct BuildingBlocks_FieldModifierRecordRefTypeBase {
    uint8_t _pad_0[0x8];
};




struct ItemAwardEntityClass {
    uint8_t _pad_0[0x8];
    int32_t amountToAward;
    uint8_t _pad_1[0x4];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
};




struct MobiglasDisplayCounter {
    uint8_t _pad_0[0x8];
    struct ObjectiveDisplayInfo* objectiveTitle;
    uint8_t _pad_1[0x20];
    struct ObjectiveDisplayInfo* collectAndDeliverObjective;
    uint8_t _pad_2[0x20];
};




struct FireHazardIgniteEvent {
    uint8_t _pad_0[0x8];
    float ignitionStrength;
    float ignitionRadius;
    float ignitionChance;
    uint8_t _pad_1[0x4];
    struct Vec3* offset;
    uint8_t _pad_2[0x10];
};




struct LightningRegionParams {
    uint8_t _pad_0[0x18];
    _Bool active;
    uint8_t _pad_1[0x7];
    struct LightningRegionLightningParams* lightning;
    uint8_t _pad_2[0xd8];
    struct InterferenceParams* interference;
    uint8_t _pad_3[0x8];
};




struct STargetSelectorColorHighlighting {
    uint8_t _pad_0[0x8];
    struct RGB* highlightColor;
    uint8_t _pad_1[0x10];
    float occludedAlpha;
    _Bool outlineOnly;
    uint8_t _pad_2[0x3];
    float outlineWidth;
    _Bool useHostilityColor;
    uint8_t _pad_3[0x13];
};




struct UIGraph_KioskMainComponent {
    uint8_t _pad_0[0x8];
    _Bool buyMode;
    uint8_t _pad_1[0x7];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    struct SItemPortDef* categoryItemPort;
    uint8_t _pad_3[0x5f8];
};




struct TransitDisplayPanelParams {
    uint8_t _pad_0[0x18];
    _Bool playAnnouncements;
    uint8_t _pad_1[0x7];
    struct TransitDisplayPanelGenericAnnouncements* genericAnnouncments;
    uint8_t _pad_2[0x48];
    struct TransitDisplayPanelStationAnnouncements* stationAnnouncements;
    uint8_t _pad_3[0x28];
};




struct GPUParticleAudio {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* emissionStartTriggerOneShot;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* emissionStopTriggerOneShot;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* emissionStartTriggerLoop;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* emissionStopTriggerLoop;
    uint8_t _pad_4[0x18];
    struct AudioRtpc* pulseDurationRtpc;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* normPulseTimeRtpc;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* strengthValRtpc;
    uint8_t _pad_7[0x18];
    struct AudioRtpc* scalingFactorRtpc;
    uint8_t _pad_8[0x18];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeDepthBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SParentEntityHighlightNode {
    uint8_t _pad_0[0x8];
};




struct SEAVehicleSpawnProperties {
    uint8_t _pad_0[0x8];
    _Bool enableVehicleSpawnLocations;
    _Bool spawnWithLandingOffset;
    _Bool explosionOnSelfDestruct;
    _Bool overrideSelfDestructTimer;
    _Bool allowVehicleSelectionScreen;
    uint8_t _pad_1[0x3];
    float selfDestructTimer;
    float rezOutDestructTime;
    struct EAEntityEntitlement* ownedEntitlement;
    uint8_t _pad_2[0x8];
    struct EAEntityEntitlement* communalEntitlement;
    uint8_t _pad_3[0x8];
};




struct STargetSelectorGlobalTargetingParams {
    uint8_t _pad_0[0x8];
    struct SCombatTargeting* combatTargetingMethodRecord;
    uint8_t _pad_1[0x18];
    struct SScanTargeting* scanningTargetingMethodRecord;
    uint8_t _pad_2[0x18];
    struct SMiningTargeting* miningTargetingMethodRecord;
    uint8_t _pad_3[0x18];
};




struct SMissionGiverStaticProperties {
    uint8_t _pad_0[0x8];
    struct MissionGiver* missionGiverProperties;
    uint8_t _pad_1[0x10];
};




struct CameraEffectsModifiers {
    uint8_t _pad_0[0x8];
    float smoothing;
    float chromaticAbberation;
    float fStopMin;
    float fStopMax;
    enum ARDataType suggestedFOVMode;
    uint8_t _pad_1[0x4];
    struct BezierCurve* fovMapping;
    uint8_t _pad_2[0x88];
    struct BezierCurve* cameraEffectsMapping;
    uint8_t _pad_3[0x88];
    struct CameraLensParams* opticsLensPreset;
    uint8_t _pad_4[0x10];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeProgressMeterState {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    enum ARDataType paramField;
};




struct BuildingBlocks_FieldModifierEnumeratedTypeTickBoxMode {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SurfaceParticleRTTParams {
    uint8_t _pad_0[0x8];
    float cameraFov;
    float aspectRatio;
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_1[0x10];
    struct CryStringT* sdfTexture;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeFillStyle {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    enum ARDataType paramField;
};




struct SStateLevel {
    uint8_t _pad_0[0x8];
    struct SInteractionState* state;
    uint8_t _pad_1[0x8];
};




struct ExtraLegalBounds {
    uint8_t _pad_0[0x8];
    float minX;
    float maxX;
    float minY;
    float maxY;
    float minZ;
    float maxZ;
};




struct AudioTriggerSpotParams {
    uint8_t _pad_0[0x18];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct GlobalResourceAudio* audioTriggerPlayTriggerName;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* audioTriggerStopTriggerName;
    uint8_t _pad_3[0x18];
    float attenuationScalingFactor;
    float volume;
    float pitch;
    float lowPassFilter;
    float highPassFilter;
    float pitchRandomRange;
    float volumeRandomRange;
    _Bool playRandom;
    uint8_t _pad_4[0x3];
    float minDelay;
    float maxDelay;
    _Bool delayIsFromEnd;
    uint8_t _pad_5[0x3];
    float radiusRandom;
    _Bool playOnX;
    _Bool playOnY;
    _Bool playOnZ;
    uint8_t _pad_6[0x5];
    struct AudioRtpc* audioRTPCUserRtpc1Name;
    uint8_t _pad_7[0x18];
    float userRtpc1Value;
    uint8_t _pad_8[0x4];
    struct AudioRtpc* audioRTPCUserRtpc2Name;
    uint8_t _pad_9[0x18];
    float userRtpc2Value;
    uint8_t _pad_10[0x4];
    struct AudioRtpc* audioRTPCUserRtpc3Name;
    uint8_t _pad_11[0x18];
    float userRtpc3Value;
    int32_t soundObstructionType;
    int32_t voiceStealingRule;
    int32_t voiceCount;
    int32_t multiPositionType;
    uint8_t _pad_12[0x4];
    struct AudioRtpc* audioRTPCAreaFadeRtpc;
    uint8_t _pad_13[0x18];
    _Bool enablePropagationAndSoundsim;
    uint8_t _pad_14[0x7];
    struct CommsChannelDef* commsChannel;
    uint8_t _pad_15[0x10];
};




struct RadarQuantumOverrideParams {
    uint8_t _pad_0[0x8];
    float arrivalRadius;
    uint8_t _pad_1[0x4];
};




struct SEASpawnRespawnIndividualSchedulerParams {
    uint8_t _pad_0[0x8];
    float forceRespawnTimer;
    float signalRespawnTimer;
};




struct BuildingBlocks_EntityEffectBase {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_1[0x8];
    float amount;
    uint8_t _pad_2[0x4];
};




struct SInternalResourceLink {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* port1;
    uint8_t _pad_1[0x8];
    struct SItemPortDef* port2;
    uint8_t _pad_2[0x8];
};




struct SpawnerPrerequisite_InteractionState {
    uint8_t _pad_0[0x8];
    struct SInteractionState* state;
    uint8_t _pad_1[0x8];
};




struct SActorForceReactionKnockdownRangeDef {
    uint8_t _pad_0[0x8];
    float effectRangeMin;
    float effectRangeMax;
    struct SActorForceReactionAimPunchConfig* aimPunch;
    uint8_t _pad_1[0x58];
    struct SActorForceReactionWeaponTwitchConfig* weaponTwitch;
    uint8_t _pad_2[0x38];
    struct SActorForceReactionHeadRecoilConfig* headRecoil;
    uint8_t _pad_3[0xa8];
    struct SActorForceReactionFOVScaleConfig* FOVScale;
    uint8_t _pad_4[0x28];
    struct SActorForceReactionMovementLaunchConfig* launch;
    uint8_t _pad_5[0x38];
    struct SActorForceReactionBlockADSConfig* blockADS;
    uint8_t _pad_6[0x10];
};




struct WorldDisplay_2DLocalEntityEnvironment {
    uint8_t _pad_0[0x8];
    enum ARDataType alignment;
    uint8_t _pad_1[0x4];
    struct WorldDisplayEnvironmentColor* environmentColor;
    uint8_t _pad_2[0x8];
    float size;
    uint8_t _pad_3[0x4];
    struct SimpleSpriteSlot* spriteSlot;
    uint8_t _pad_4[0x20];
};




struct SEntityComponentDefaultLoadoutParams {
    uint8_t _pad_0[0x18];
    struct SItemPortLoadoutBaseParams* loadout;
    uint8_t _pad_1[0x8];
};




struct GlobalJumpPointClosingParams {
    uint8_t _pad_0[0x8];
    float closingTime;
    float shrinkTime;
    float closingTriggerDelay;
    uint8_t _pad_1[0x4];
};




struct SShopUIProviderCategoryIcon {
    uint8_t _pad_0[0x8];
    enum ARDataType category;
    uint8_t _pad_1[0x4];
    struct CryStringT* icon;
    uint8_t _pad_2[0x8];
};




struct CIGAudioParams {
    uint8_t _pad_0[0x18];
    enum ARDataType namingStrategy;
    _Bool enableBones;
    _Bool enableAnimStart;
    uint8_t _pad_1[0x5];
};




struct PlayerChoiceMenuOptionItem {
    uint8_t _pad_0[0x8];
    struct PlayerChoiceMenuItem* item;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_IntegerNumberPair {
    uint8_t _pad_0[0x8];
    int64_t first;
    float second;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_BindingsNumberBase* secondOverride;
    uint8_t _pad_2[0x8];
};




struct ItemResourceControlOutputState {
    uint8_t _pad_0[0x8];
    struct ItemResourceState* outputState;
    uint8_t _pad_1[0x8];
};




struct FlightControllerEnableStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* enabled;
    uint8_t _pad_1[0x8];
    struct SInteractionState* disabled;
    uint8_t _pad_2[0x8];
};




struct ClosestOrientationHandholdAttachSpotChoiceParams {
    uint8_t _pad_0[0x8];
    struct Vec3* desiredUpDirection;
    uint8_t _pad_1[0x10];
    enum ARDataType space;
    uint8_t _pad_2[0x4];
};




struct SpawningManagerNotifierComponentParams {
    uint8_t _pad_0[0x18];
};




struct UIGraph_LauncherScreenComponent {
    uint8_t _pad_0[0x8];
};




struct UIStateDisplay_Threshold {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CryStringT* timelineLabel;
    uint8_t _pad_1[0x8];
    float minThresholdValue;
    enum ARDataType stateColor;
    uint8_t _pad_2[0x2];
};




struct ElectricalCalculationPropertyRange {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct Range* range;
    uint8_t _pad_2[0x8];
};




struct SCItemAirlockParams {
    uint8_t _pad_0[0x18];
    float MaxTimeToWaitForDoors;
    float MinTimeToWaitAfterDoorsClosed;
    float CycleTime;
    uint8_t _pad_1[0x4];
    struct AirlockAreaParams* AreaOverride;
    uint8_t _pad_2[0x8];
};




struct SAtmosphericCompositionBaseParams {
    uint8_t _pad_0[0x8];
};




struct EmotionDescription {
    uint8_t _pad_0[0x8];
    struct CryStringT* emotionName;
    uint8_t _pad_1[0x8];
    struct CryStringT* facialEmotionTag;
    uint8_t _pad_2[0x8];
};




struct EntityComponentFireFilter {
    uint8_t _pad_0[0x18];
    enum ARDataType mode;
    uint8_t _pad_1[0x4];
    struct FireVoxelSelectionShape* shape;
    uint8_t _pad_2[0x8];
};




struct StatusBuffTypeBase {
    uint8_t _pad_0[0x8];
};




struct DefaultEntitlementEntityParams {
    uint8_t _pad_0[0x8];
    struct DefaultEntitlementRecord* entitlementPolicy;
    uint8_t _pad_1[0x10];
    _Bool canEntitleThroughWebsite;
    uint8_t _pad_2[0x7];
};




struct HealthScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SCItemRestraintParams {
    uint8_t _pad_0[0x18];
    enum ARDataType restraintStyle;
    uint8_t _pad_1[0x4];
    struct EntityClassDefinition* cosmeticEntityClass;
    uint8_t _pad_2[0x10];
};




struct SSCLocalPlayerComponentParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceParticle* bloodEffect;
    uint8_t _pad_1[0x10];
};




struct FireHazardGlobalSmokeParams {
    uint8_t _pad_0[0x8];
    struct AtmosphericCompositionTemplate* defaultSmokeComposition;
    uint8_t _pad_1[0x10];
    float dynamicPart;
    uint8_t _pad_2[0x4];
    struct GasParams* particulateMatter;
    uint8_t _pad_3[0x10];
    struct GasParams* waterVapor;
    uint8_t _pad_4[0x10];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeFlexDirection {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_TwoVariablePicker {
    uint8_t _pad_0[0x8];
    struct CryStringT* variableXURL;
    uint8_t _pad_1[0x8];
    struct CryStringT* variableYURL;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_WidgetBase* markerNodeDef;
    uint8_t _pad_3[0x8];
};




struct SObservablePointDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* helperName;
    uint8_t _pad_1[0x8];
    struct Vec3* relativePositionOffset;
    uint8_t _pad_2[0x10];
};




struct Marker_AbilityIncapacitatedActor {
    uint8_t _pad_0[0x8];
};




struct SCItemPriorityTagParam {
    uint8_t _pad_0[0x20];
    uint8_t priority;
    uint8_t _pad_1[0x7];
    struct CryStringT* tag;
    uint8_t _pad_2[0x8];
};




struct GasCloudVDBGamePlayParams {
    uint8_t _pad_0[0x8];
    float densityMultiplier;
    float falloffStepDistance;
};




struct ItemResourceControlOutputControlBlock {
    uint8_t _pad_0[0x8];
    struct ItemResourceControlBlock* outputControlBlock;
    uint8_t _pad_1[0x8];
};




struct EAScoringVehicleComponentParamsDef {
    uint8_t _pad_0[0x18];
    struct EAScoringComponentParamsDef* baseComponent;
    uint8_t _pad_1[0x20];
    int32_t partDetachedBonus;
    int32_t componentDistortionScore;
    int32_t totalDistortionScoreAward;
    float distortionDisablePercentage;
};




struct SLoadingAreaParams {
    uint8_t _pad_0[0x18];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct Vec3* dimensions;
    uint8_t _pad_2[0x10];
    _Bool autoRegisterWithATC;
    uint8_t _pad_3[0x3];
    int32_t dockingClassOverride;
    _Bool allowGroundVehicles;
    _Bool allowSpaceships;
    uint8_t _pad_4[0x2];
    enum ARDataType canBeUsedBy;
    struct CLocIdentifier* HUDDisplayName;
    int32_t ATCPriority;
    _Bool autoGenerateUI;
    uint8_t _pad_5[0x3];
};




struct HandholdAttachSpotParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Vec3* offset;
    uint8_t _pad_2[0x10];
    struct AngYPR* orientation;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeContentBoxPosition {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    enum ARDataType paramField;
};




struct ActorCameraOffsetFiltered {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    enum ARDataType filterByLocomotionSet;
    uint8_t _pad_2[0x4];
    struct ActorCameraOffsetParams* offset;
    uint8_t _pad_3[0x28];
};




struct CtxGraph_Dependency {
    uint8_t _pad_0[0x8];
    enum ARDataType reason;
    uint8_t _pad_1[0x4];
    struct CtxGraph_Component* first;
    uint8_t _pad_2[0x8];
    struct CtxGraph_Component* second;
    uint8_t _pad_3[0x8];
};




struct SBBDynamicPropertyBase {
    uint8_t _pad_0[0x8];
};




struct FiringRangePenaltyDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    enum ARDataType penaltyType;
    float timePenalty;
};




struct SEntityTraversingNodeExecuteLinkUIVendor {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionCanAttachItemOnHanger {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct CraftingBlueprint_RecordRef {
    uint8_t _pad_0[0x8];
    struct CraftingBlueprintRecord* blueprintRecord;
    uint8_t _pad_1[0x10];
};




struct HazardAwarenessParams {
    uint8_t _pad_0[0x8];
    float windHazardMinSpeed;
    float handRaiseYawMin;
    float handRaiseYawMax;
    float handRaiseYawHysteresis;
    float handFollowYawMin;
    float handFollowYawMax;
    float handFollowYawSmoothing;
    float handPitchOffset;
    float handIKDistanceOffset;
    float handIKStrength;
    float handResumeDelay;
    float handRaiseDelay;
    float handSwitchDelay;
    float handLowerDelay;
    float handHazardStopDelay;
    uint8_t _pad_1[0x4];
};




struct SCItemUIViewOwnerParams {
    uint8_t _pad_0[0x18];
    struct SCItemUIView_DashboardCanvasDef* dashboardCanvasConfig;
    uint8_t _pad_1[0x10];
    struct UIElement* element;
    uint8_t _pad_2[0x10];
    float loadDistance;
    _Bool enableInS42;
    uint8_t _pad_3[0x3];
};




struct BuildingBlocks_Background {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_ColorBase* topLeftColor;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_ColorBase* topRightColor;
    uint8_t _pad_4[0x8];
    struct BuildingBlocks_ColorBase* bottomLeftColor;
    uint8_t _pad_5[0x8];
    struct BuildingBlocks_ColorBase* bottomRightCColor;
    uint8_t _pad_6[0x8];
};




struct AITargetingFormulaSettings {
    uint8_t _pad_0[0x8];
    float onFootRangeMultiplier;
    float inVehicleRangeMultiplier;
    float selfDefenceMaxHealthMultiplier;
    float protectedMaxHealthMultiplier;
    float recentDamageDecayFactorPerSecond;
    uint8_t _pad_1[0x4];
    struct AIFormulaScoreModifiers* attackerCapacityScore;
    uint8_t _pad_2[0x8];
    struct AIFormulaScoreModifiers* distanceScore;
    uint8_t _pad_3[0x8];
    struct AIFormulaScoreModifiers* selfDefenceScore;
    uint8_t _pad_4[0x8];
    struct AIFormulaScoreModifiers* protectionScore;
    uint8_t _pad_5[0x8];
};




struct InteractionConditionLimitNearbyCarryables {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    int32_t searchRadius;
    int32_t maxLimit;
};




struct BuildingBlocks_LookAtTransformer {
    uint8_t _pad_0[0x8];
    struct Vec3* position;
    uint8_t _pad_1[0x10];
};




struct BreakableComponentParams {
    uint8_t _pad_0[0x18];
    _Bool forceEntities;
    _Bool networkSynced;
    uint8_t _pad_1[0x2];
    float explodeImpulse;
    _Bool impulseRelativeToScale;
    uint8_t _pad_2[0x3];
    float particleLifetime;
    float pieceSpawnPlanetCheckRadius;
    int32_t numPiecesOverride;
    struct Vec3* localOffsetForAdditionalOverridenDebris;
    uint8_t _pad_3[0x10];
    struct BreakableEntityClassParams* entityClassOverride;
    uint8_t _pad_4[0x8];
};




struct FireAreaHazards {
    uint8_t _pad_0[0x8];
    struct TraversalCostConfig* overrideConfig;
    uint8_t _pad_1[0x10];
};




struct ItemCarryParams {
    uint8_t _pad_0[0x8];
    float maxCarryableMass;
    uint8_t _pad_1[0x4];
};




struct SUniqueEntityClass {
    uint8_t _pad_0[0x8];
    uint64_t fixed_geid;
};




struct EntityComponentSpawnClosetTransitManagerParams {
    uint8_t _pad_0[0x18];
    struct TagList* supportedTags;
    uint8_t _pad_1[0x30];
    float maxSpawnsPerMinute;
    float requestHoldSeconds;
    _Bool defaultDoorsOpen;
    uint8_t _pad_2[0x7];
};




struct EntityComponentCommLinkProviderParams {
    uint8_t _pad_0[0x18];
    int32_t accountSearchDelayInMilliSeconds;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* ableToJoinPartyServerPopUpMenuOptionText;
    struct CLocIdentifier* notAbleToJoinPartyServerPopUpMenuOptionText;
    struct CLocIdentifier* notAbleToJoinPartyStowedOnServerPopUpMenuOptionText;
    struct CLocIdentifier* leavePartyPopUpMenuOptionText;
    struct CLocIdentifier* disbandPartyPopUpMenuOptionText;
    struct CLocIdentifier* transferLeadershipToPartyMemberPopUpMenuOptionText;
    struct CLocIdentifier* kickPartyMemberPopUpMenuOptionText;
    struct CLocIdentifier* sendFriendRequestToPartyMemberPopUpMenuOptionText;
    struct CLocIdentifier* inviteToPartyPopUpMenuOptionText;
    struct CLocIdentifier* ableToJoinFriendServerPopUpMenuOptionText;
    struct CLocIdentifier* notAbleToJoinFriendServerPopUpMenuOptionText;
    struct CLocIdentifier* removeFriendPopUpMenuOptionText;
    struct CLocIdentifier* inviteToLobbyPopUpMenuOptionText;
};




struct SLayerEntitiesGroupManager {
    uint8_t _pad_0[0x18];
};




struct SEntityComponentConstraintPartnerComponentParams {
    uint8_t _pad_0[0x18];
};




struct SVehicleObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct SCBoostScaleParam {
    uint8_t _pad_0[0x8];
    float BoostScale;
    uint8_t _pad_1[0x4];
};




struct GlobalResourceParticle {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct CommunicationVariableBool {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool global;
    uint8_t _pad_2[0x7];
    _Bool value;
    uint8_t _pad_3[0x7];
};




struct RadiationState {
    uint8_t _pad_0[0x8];
    enum ARDataType distortionMod;
    float distortion;
    struct RadiationStatePropertyParams* IR;
    uint8_t _pad_1[0x8];
    struct RadiationStatePropertyParams* EM;
    uint8_t _pad_2[0x8];
    struct RadiationStatePropertyParams* CS;
    uint8_t _pad_3[0x8];
    enum ARDataType hazardousRadiationMod;
    float hazardousRadiationRate;
};




struct SMissionBrokerInterfaceComponentParams {
    uint8_t _pad_0[0x18];
};




struct SHudTapeParams {
    uint8_t _pad_0[0x8];
    float range;
    float mainTickIncrement;
    int32_t subTicks;
    uint8_t _pad_1[0x4];
};




struct SReputationMissionRequirementExpression_Or {
    uint8_t _pad_0[0x8];
};




struct SVehicleObjectContainerParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* fileName;
    uint8_t _pad_1[0x8];
    struct CryStringT* guid;
    uint8_t _pad_2[0x8];
    struct QuatT* Offset;
    uint8_t _pad_3[0x50];
    struct CryStringT* boneName;
    uint8_t _pad_4[0x8];
    _Bool shouldRequestNavMeshRegenerationOnLoad;
    uint8_t _pad_5[0x7];
    struct CryStringT* resourceNetworkItemportName;
    uint8_t _pad_6[0x8];
};




struct GroupEntityParams {
    uint8_t _pad_0[0x18];
    _Bool syncToClients;
    uint8_t _pad_1[0x7];
};




struct MedBedProviderParams {
    uint8_t _pad_0[0x18];
};




struct InnerThought_LayoutPIT {
    uint8_t _pad_0[0x10];
    struct InnerThought_ColorParams* selectedColor;
    uint8_t _pad_1[0x10];
    struct InnerThought_ColorParams* unselectedColor;
    uint8_t _pad_2[0x10];
    struct InnerThought_ColorParams* inactiveColor;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_StyleSelectorConditionBase {
    uint8_t _pad_0[0x10];
};




struct SDespawnRule_OnDestroyed {
    uint8_t _pad_0[0x8];
    float ruleDelaySeconds;
    uint8_t _pad_1[0x4];
};




struct ActorStatusStatModifier {
    uint8_t _pad_0[0x8];
    enum ARDataType affectedStatType;
    uint8_t _pad_1[0x4];
};




struct LadderAccessPointParams {
    uint8_t _pad_0[0x8];
    int32_t rungNumber;
    _Bool directionIncludesLeft;
    _Bool directionIncludesRight;
    _Bool directionIncludesFront;
    uint8_t _pad_1[0x1];
    struct LadderAccessClimbParams* leftEntryParams;
    uint8_t _pad_2[0x28];
    struct LadderAccessClimbParams* rightEntryParams;
    uint8_t _pad_3[0x28];
    struct LadderAccessClimbParams* frontEntryParams;
    uint8_t _pad_4[0x28];
};




struct ExtendedNameEntryTextRandomizedLocalizedSequence {
    uint8_t _pad_0[0x8];
    struct CryStringT* entryPrefix;
    uint8_t _pad_1[0x8];
    int32_t numEntries;
    uint8_t _pad_2[0x4];
};




struct SCIGTestAAA {
    uint8_t _pad_0[0x8];
    _Bool bBase;
    uint8_t _pad_1[0x7];
    _Bool bA;
    uint8_t _pad_2[0x7];
    _Bool bAA;
    uint8_t _pad_3[0x7];
    _Bool bAAA;
    uint8_t _pad_4[0x3];
    int32_t nAAA;
    struct SCIGTestBase* osAAATestBase;
    uint8_t _pad_5[0x8];
};




struct SJumpTunnelSectionControlPointGenerationParams {
    uint8_t _pad_0[0x8];
    struct Range* sectionOffset;
    uint8_t _pad_1[0x8];
    struct Range* sectionLength;
    uint8_t _pad_2[0x8];
    struct Range* angleOffset;
    uint8_t _pad_3[0x8];
};




struct LinkedStatRuleHasCrossedBelowThreshold {
    uint8_t _pad_0[0x8];
    float threshold;
    uint8_t _pad_1[0x4];
};




struct AITimeSinceTargetSeen {
    uint8_t _pad_0[0x8];
    float decayDelayTimeSeconds;
    float decayRate;
    float capTimeSeconds;
    uint8_t _pad_1[0x4];
    struct BezierCurve* accuracyOverTimeCurve;
    uint8_t _pad_2[0x88];
};




struct BuildingBlocks_FieldModifierBase {
    uint8_t _pad_0[0x8];
};




struct CraftingResult_Item {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    int32_t quantity;
    int32_t tier;
};




struct HackableScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct CLocIdentifier* displayForDisabled;
    struct CLocIdentifier* displayForHackable;
    struct CLocIdentifier* displayForHackInProgress;
    struct CLocIdentifier* displayForHacked;
    struct CLocIdentifier* displayForLockedDown;
};




struct MedBedSurgeryNamesInjurySeverity {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* injuryName;
    struct CLocIdentifier* majorInjuryName;
    struct CLocIdentifier* deadlyInjuryName;
};




struct SHandsRecoilCurveNoiseModifer {
    uint8_t _pad_0[0x8];
    float xNoiseModifier;
    float yNoiseModifier;
    float zNoiseModifier;
    uint8_t _pad_1[0x4];
};




struct SMisfireDamageRatio {
    uint8_t _pad_0[0x8];
    float health;
    uint8_t _pad_1[0x4];
};




struct MobiGlasAuthorizationEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* characterImage;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* characterName;
    struct CLocIdentifier* characterRank;
    struct CLocIdentifier* characterAssignment;
};




struct EVAReticle_Config {
    uint8_t _pad_0[0x8];
    _Bool EnableFixedReticle;
    _Bool EnableLookReticle;
    _Bool EnableVelocityVector;
    _Bool EnableControlFrameReticle;
    uint8_t _pad_1[0x4];
};




struct BreathableOxygenParams {
    uint8_t _pad_0[0x8];
    struct GasParams* gasToInhale;
    uint8_t _pad_1[0x10];
    struct GasParams* gasToExhale;
    uint8_t _pad_2[0x10];
    float gasMasRatio;
    float gasConversionRate;
    float gasPressureMaxEffect;
    enum ARDataType actorStatusToAffect;
    float gasLowQualityPercentage;
    uint8_t _pad_3[0x4];
};




struct SActorForceReactionAnimationFlinchConfig {
    uint8_t _pad_0[0x8];
    float blendspaceMin;
    uint8_t _pad_1[0x4];
};




struct TestAtomics {
    uint8_t _pad_0[0x8];
    struct CryStringT* myString;
    uint8_t _pad_1[0x8];
    enum ARDataType myEnum;
    int8_t myInt8;
    uint8_t _pad_2[0x1];
    int16_t myInt16;
    int32_t myInt32;
    uint8_t _pad_3[0x4];
    int64_t myInt64;
    uint8_t myUInt8;
    uint8_t _pad_4[0x1];
    uint16_t myUInt16;
    uint32_t myUInt32;
    uint64_t myUInt64;
    _Bool myBooleanTrue;
    uint8_t _pad_5[0x3];
    float myFloat;
    double myDouble;
};




struct ControlHintCondition_MobiglasMapState {
    uint8_t _pad_0[0x8];
    enum ARDataType mobiglasMapState;
    uint8_t _pad_1[0x6];
};




struct DefaultActionsEntityState_CanAttachToHeldWeapon {
    uint8_t _pad_0[0x8];
};




struct CommunicationAudioRTPC {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float value;
    uint8_t _pad_2[0x4];
};




struct AfterActionReportReputationImpact {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* orgOrNPC;
    uint8_t _pad_1[0x10];
    struct SReputationScopeParams* scope;
    uint8_t _pad_2[0x10];
    int32_t impactValue;
    _Bool replaceCurrentValue;
    uint8_t _pad_3[0x3];
};




struct GlobalJumpPointParams {
    uint8_t _pad_0[0x8];
    float alignmentAngle;
    float alignmentTolerance;
    float alignmentRange;
    float startClosingTime;
    float debrisPushOutAcceleration;
    float debrisPushOutMaximumSpeed;
    float shipPullInDelayTime;
    uint8_t _pad_1[0x4];
    struct GlobalJumpPointEffectParams* effectParams;
    uint8_t _pad_2[0xf0];
    struct JumpDriveUIConeParams* uiConeParams;
    uint8_t _pad_3[0x10];
};




struct ItemResourceControlParameterBase {
    uint8_t _pad_0[0x8];
};




struct EATransportBaseTransitionParams {
    uint8_t _pad_0[0x8];
};




struct DefaultActionsEntityEntryCondition_EntityTypes {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
};




struct SDashboardEffectParams {
    uint8_t _pad_0[0x8];
    struct Tag* usedEffectTag;
    uint8_t _pad_1[0x10];
};




struct ScanWaveDetectionParams {
    uint8_t _pad_0[0x8];
    _Bool requireFullChargeDetection;
    _Bool reflectScanWaveChargeLevel;
    uint8_t _pad_1[0x6];
};




struct PlanetEffectTestParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceParticle* planetEffect;
    uint8_t _pad_1[0x10];
    struct CryStringT* surfaceType;
    uint8_t _pad_2[0x8];
};




struct SHostExplosionEffect {
    uint8_t _pad_0[0x8];
    struct Tag* effectTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* effectTag;
    uint8_t _pad_2[0x10];
    float explosionChance;
    float explosionCountdown;
    float degradationAdditionalRollsFactor;
    uint8_t _pad_3[0x4];
    struct SCriticalMalfunctionStates* criticalMalfunctionStates;
    uint8_t _pad_4[0x30];
};




struct FoleySuitAmbienceDefinition {
    uint8_t _pad_0[0x8];
    struct CryStringT* playTrigger;
    uint8_t _pad_1[0x8];
    struct CryStringT* stopTrigger;
    uint8_t _pad_2[0x8];
};




struct EntityComponentSpawnClosetRoomParams {
    uint8_t _pad_0[0x18];
    struct TagList* supportedTags;
    uint8_t _pad_1[0x30];
    float maxSpawnsPerMinute;
    float requestHoldSeconds;
    _Bool defaultDoorsOpen;
    uint8_t _pad_2[0x7];
};




struct ActorEnvironmentalMovementModifiers {
    uint8_t _pad_0[0x8];
    struct ActorEnvironmentalModifierConfig* water;
    uint8_t _pad_1[0x10];
};




struct PingSFXSharedParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* invokePing;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* invokePingCharged;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* invokePingBlocked;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* invokePingCooldown;
    uint8_t _pad_4[0x18];
};




struct BulletDamageDropParams {
    uint8_t _pad_0[0x8];
    struct DamageBase* damageDropMinDistance;
    uint8_t _pad_1[0x8];
    struct DamageBase* damageDropPerMeter;
    uint8_t _pad_2[0x8];
    struct DamageBase* damageDropMinDamage;
    uint8_t _pad_3[0x8];
};




struct SLayerEntitiesGroupComponentParams {
    uint8_t _pad_0[0x18];
    _Bool allowPhysicsChange;
    _Bool allowStreaming;
    _Bool useLayerData;
    _Bool startStreamedOut;
    _Bool startHidden;
    uint8_t _pad_1[0x3];
};




struct SCentiResourceUnit {
    uint8_t _pad_0[0x8];
    int32_t centiResourceUnits;
    uint8_t _pad_1[0x4];
};




struct GameModule {
    uint8_t _pad_0[0x8];
    struct CryStringT* moduleCode;
    uint8_t _pad_1[0x8];
    struct CryStringT* rankTexturePrefix;
    uint8_t _pad_2[0x8];
};




struct MassScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SFrontendSpawning {
    uint8_t _pad_0[0x18];
    float respawnTimeKilled;
    _Bool pressXToRespawn;
    _Bool allowForceRespawnSuicide;
    uint8_t _pad_1[0x2];
    struct SCustomizableMaterialLookupTable* customizableMaterialsLookupTable;
    uint8_t _pad_2[0x10];
};




struct InteractionConditionIsAttachedToItemPort {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct CryStringT* itemPortTag;
    uint8_t _pad_2[0x8];
    struct CryStringT* itemPortName;
    uint8_t _pad_3[0x8];
};




struct SSCSignatureSystemAudioOffset {
    uint8_t _pad_0[0x8];
    float value;
    uint8_t _pad_1[0x4];
};




struct SCLegacyThrustParams {
    uint8_t _pad_0[0x8];
    float MaxLinearVelocity;
    uint8_t _pad_1[0x4];
    struct Vec3* MaxAngularVelocity;
    uint8_t _pad_2[0x10];
    struct Vec3* MaxLinearAccelerationPositive;
    uint8_t _pad_3[0x10];
    struct Vec3* MaxLinearAccelerationNegative;
    uint8_t _pad_4[0x10];
    float LinearAccelerationDecay;
    uint8_t _pad_5[0x4];
    struct Vec3* MaxAngularAccelerationPositive;
    uint8_t _pad_6[0x10];
    struct Vec3* MaxAngularAccelerationNegative;
    uint8_t _pad_7[0x10];
    float AngularAccelerationDecay;
    float BoostScale;
};




struct ActorJumpFallLandVariantConfigNode {
    uint8_t _pad_0[0x8];
    enum ARDataType variant;
    uint8_t _pad_1[0x4];
    struct ActorJumpNode* jump;
    uint8_t _pad_2[0x8];
    struct ActorFallNode* fall;
    uint8_t _pad_3[0x8];
    struct ActorLandingNode* land;
    uint8_t _pad_4[0x8];
};




struct BindingsOperation_BooleanFromStringIsEmpty {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsStringBase* input;
    uint8_t _pad_1[0x8];
};




struct SRangeStateLevel {
    uint8_t _pad_0[0x8];
    struct SInteractionState* state;
    uint8_t _pad_1[0x8];
    float min;
    float max;
};




struct PersonalThoughtActionDescription {
    uint8_t _pad_0[0x8];
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
    struct CLocIdentifier* description;
};




struct EntityComponentWaterDisturbanceParams {
    uint8_t _pad_0[0x18];
    enum ARDataType style;
    uint8_t _pad_1[0x4];
    struct Vec2* distributionArea;
    uint8_t _pad_2[0x8];
    float hitSize;
    float depth;
    float pressure;
    float foamAmount;
    struct Vec2* frequency;
    uint8_t _pad_3[0x8];
    struct EntityComponentWaterDisturbance_NoiseParams* noiseParams;
    uint8_t _pad_4[0x18];
};




struct SRadarSenseComponentParams {
    uint8_t _pad_0[0x18];
};




struct UIWorldDisplayHolographicSettings {
    uint8_t _pad_0[0x8];
    _Bool spawnHoloVolume;
    uint8_t _pad_1[0x3];
    enum ARDataType volumeShapeType;
    struct Vec3* cubeSizeMultiplier;
    uint8_t _pad_2[0x10];
    struct GlobalResourceMaterial* holographicVolumeMaterial;
    uint8_t _pad_3[0x10];
    float defaultGlow;
    float fadeRatio;
    float transparentListDepthBias;
    uint8_t _pad_4[0x4];
    struct QuatT* offsetFromAnchor;
    uint8_t _pad_5[0x50];
};




struct UIAudioComponent_Offset {
    uint8_t _pad_0[0x8];
    struct QuatT* offset;
    uint8_t _pad_1[0x50];
};




struct ContractDifficultyProfile {
    uint8_t _pad_0[0x8];
    float mechanicalSkillWeight;
    float mentalLoadWeight;
    float riskOfLossWeight;
    float gameKnowledgeWeight;
};




struct ControlInteractiveVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
};




struct SCItemControlCondition_Tag {
    uint8_t _pad_0[0x20];
    struct CryStringT* tag;
    uint8_t _pad_1[0x8];
};




struct InteractionConditionCanStoreInPersonalInventory {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct ScreenEffects_ParamValue_Vec4Base {
    uint8_t _pad_0[0x8];
};




struct QuatT {
    uint8_t _pad_0[0x28];
    struct Ang3* Rotation;
    uint8_t _pad_1[0x10];
    struct Vec3* Position;
    uint8_t _pad_2[0x10];
};




struct StarMapAmenityTypeEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    struct CryStringT* icon;
    uint8_t _pad_2[0x8];
};




struct HaulingOrderBase {
    uint8_t _pad_0[0x8];
    struct ObjectivePropertyBase* pickUpLocation;
    uint8_t _pad_1[0x8];
    struct ObjectivePropertyBase* dropOffLocation;
    uint8_t _pad_2[0x8];
};




struct SQedVisualGraphTransitionParams {
    uint8_t _pad_0[0x8];
    enum ARDataType state;
    uint8_t _pad_1[0x6];
    struct SQedVisualGraphTransitionTypeParams* animationTransitionType;
    uint8_t _pad_2[0x8];
    struct SQedVisualGraphTransitionTypeParams* effectTransitionType;
    uint8_t _pad_3[0x8];
};




struct ControlHintCondition_VehicleEnvironment {
    uint8_t _pad_0[0x8];
    enum ARDataType environment;
    uint8_t _pad_1[0x7];
};




struct CombatMarker {
    uint8_t _pad_0[0x8];
    struct CryStringT* objectName;
    uint8_t _pad_1[0x8];
    float minimumScale;
    float inverseScaleMultiplier;
    float hitAnimTotalTime;
    float hitAnimationOffsetSize;
    enum ARDataType easeType;
    uint8_t _pad_2[0x3];
    float textOffset;
    float introAnimTime;
    float introAnimPitchRotationFrequency;
    float introAnimYawRotationFrequency;
    float introAnimRollRotationFrequency;
    enum ARDataType introAnimEaseType;
    uint8_t _pad_3[0x3];
    float introStartingScale;
    float introStartingOffsetScale;
    float introAnimOffset;
    float transitionAnimLength;
    enum ARDataType transitionAnimEaseType;
    uint8_t _pad_4[0x3];
    float rotationalAnimationClamp;
    float rotationalAnimationIntegrationTime;
    float signalLostAnimationTime;
    float signalLostAnimationPulseFrequency;
    struct CryStringT* unfocusedObjectName;
    uint8_t _pad_5[0x8];
    float unfocusedMarkerScale;
    uint8_t _pad_6[0x4];
    struct RGB* hitAnimationColor;
    uint8_t _pad_7[0x10];
    float hitAnimationFlickerTime;
    float hitAnimOffsetFactor;
    struct BezierCurve* transitionScaleCurve;
    uint8_t _pad_8[0x88];
    float gainedFocusAnimTotalTime;
    float gainedFocusAnimFlickerTime;
    float unFocusedRotationFactor;
    uint8_t _pad_9[0x14];
};




struct LightningTargetMode {
    uint8_t _pad_0[0x8];
};




struct CameraViewFirstPersonSpectatorParams {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
};




struct SMusicEvent {
    uint8_t _pad_0[0x8];
    struct MusicLogicEvent* musicLogicEvent;
    uint8_t _pad_1[0x10];
    struct GlobalResourceAudio* musicWwiseEvent;
    uint8_t _pad_2[0x18];
};




struct SDoorCollisionReactionNoneParams {
    uint8_t _pad_0[0x8];
};




struct HitBehaviorDamageOverTime {
    uint8_t _pad_0[0x8];
    struct DamageBase* damagePerSecond;
    uint8_t _pad_1[0x8];
    float duration;
    float damagePeriod;
    _Bool ignoreShields;
    _Bool applyToHealthPool;
    uint8_t _pad_2[0x6];
};




struct SSalvageAudioParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* salvageCargoFilledAudioTrigger;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* switchSalvageModifierAudioTrigger;
    uint8_t _pad_2[0x18];
    struct SSalvageStructuralAudioParams* structuralAudio;
    uint8_t _pad_3[0x8];
};




struct SRootEntityHighlightNode {
    uint8_t _pad_0[0x8];
};




struct DialogueBundlePresetWeighted {
    uint8_t _pad_0[0x8];
    struct DialogueBundleWeightedEmbedded* weightedDialogueBundle;
    uint8_t _pad_1[0x48];
};




struct SLandingAreaObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct DamageResistanceMacro {
    uint8_t _pad_0[0x8];
    struct DamageResistance* damageResistance;
    uint8_t _pad_1[0x68];
    struct ImpactForceResistance* impactForceResistance;
    uint8_t _pad_2[0x8];
};




struct RelationMarkerParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* description;
    struct CryStringT* icon;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_StringTagPair {
    uint8_t _pad_0[0x8];
    struct CryStringT* first;
    uint8_t _pad_1[0x8];
    struct Tag* second;
    uint8_t _pad_2[0x10];
};




struct DefaultActionsEntityState_InTakedownRange {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionPlayerVehicleNotInLandingArea {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct PlanetDayNightTemperatureParams {
    uint8_t _pad_0[0x8];
    float DayNightCoolingBaseRate;
    float DayNightCoolingHumidityModifier;
    float DayNightCoolingHumidityMultiplier;
    uint8_t _pad_1[0x4];
};




struct UIGraph_MouseControlComponent {
    uint8_t _pad_0[0x8];
    _Bool autoHandleInput;
    uint8_t _pad_1[0x7];
};




struct AnimationMovement {
    uint8_t _pad_0[0x8];
    struct AnimationVariable* variable;
    uint8_t _pad_1[0x8];
    struct CryStringT* animationName;
    uint8_t _pad_2[0x8];
    int32_t layerId;
    uint8_t _pad_3[0x4];
};




struct SDisruptionGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct SDisruptionGameplayTriggerType* disruptionTriggerType;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeSegmentProgressBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct QueueingBehaviour {
    uint8_t _pad_0[0x8];
    _Bool canInterrupt;
    _Bool canBeInterrupted;
    _Bool canBeQueued;
    uint8_t _pad_1[0x5];
};




struct PlayerInteractionParams {
    uint8_t _pad_0[0x8];
    _Bool allowPITMenu;
    _Bool allowPITLootingScreen;
    _Bool allowPITInventory;
    _Bool allowPITSwapWheel;
    _Bool allowPISWheel;
    _Bool allowQuickInteractImprovements;
    _Bool allowDefaultActions;
    _Bool allowControlHints;
    _Bool allowInteractionPrompts;
    _Bool allowDistantInteractionIndicator;
    _Bool allowInteractionPromptsInCockpitWhileFreelook;
    _Bool allowPISAngularSelection;
    _Bool allowQSAngularSelection;
    _Bool allowPlayerAnimatedInteractions;
    _Bool allowPlayerAnimatedWeaponCustomization;
    _Bool allowItemDropsToSwapBackToWeapon;
    _Bool allowBuildingBlocksHints;
    _Bool allowRelaxedPoseInSeats;
    _Bool allowPersonalInventoryReload;
    _Bool allowAmmoRepool;
    _Bool allowDashboardActionInteractionOverrides;
    _Bool useV2WheelCanvases;
    _Bool allowAmmoHoover;
    _Bool allowInputPrompt;
    _Bool allowQTERequest;
    uint8_t _pad_1[0x7];
};




struct ExtendedNameEntryTextRaw {
    uint8_t _pad_0[0x8];
    struct CryStringT* text;
    uint8_t _pad_1[0x8];
};




struct CraftingResearchUnlock {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_TimelineTypeBase {
    uint8_t _pad_0[0x8];
};




struct DriftingDrunkConfig {
    uint8_t _pad_0[0x8];
    float stumbleForwardWeight;
    float stumbleBackwardWeight;
    float stumbleLeftWeight;
    float stumbleRightWeight;
    struct DriftingDrunkBDLEffects* minBDLEffects;
    uint8_t _pad_1[0x38];
    struct DriftingDrunkBDLEffects* maxBDLEffects;
    uint8_t _pad_2[0x38];
};




struct SBBDynamicPropertyString {
    uint8_t _pad_0[0x8];
    struct CryStringT* value;
    uint8_t _pad_1[0x8];
};




struct SSequencerPlayerUsableSwitchChannelTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* name;
    uint8_t _pad_1[0x10];
    struct CryStringT* useChannelName;
    uint8_t _pad_2[0x8];
    struct UseChannelArchetype* userOnChannel;
    uint8_t _pad_3[0x28];
};




struct BuildingBlocksView {
    uint8_t _pad_0[0x10];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct UIGraph_BuildingBlocksContextComponent* component;
    uint8_t _pad_2[0x20];
};




struct VehicleEditorItemData {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* item;
    uint8_t _pad_1[0x10];
};




struct CargoControllerParams {
    uint8_t _pad_0[0x18];
    struct SInteractionState* requiredStateForCargoOccupancy;
    uint8_t _pad_1[0x8];
    struct SInteractionState* StateAnimForCargoOccupancy;
    uint8_t _pad_2[0x8];
    _Bool cargoDeckLoaded;
    _Bool cargoRequiresDocking;
    uint8_t _pad_3[0x6];
    struct SBaseCargoUnit* loadBatchAmount;
    uint8_t _pad_4[0x8];
    struct SBaseCargoUnit* unloadBatchAmount;
    uint8_t _pad_5[0x8];
    struct CargoManifest* cargoManifestOverride;
    uint8_t _pad_6[0x10];
};




struct VisibilityConditionDef_EntryFlag {
    uint8_t _pad_0[0x8];
    enum ARDataType flag;
    _Bool invert;
    uint8_t _pad_1[0x3];
};




struct UIEntityServiceEntityComponentParams {
    uint8_t _pad_0[0x18];
    _Bool immediateTransforms;
    uint8_t _pad_1[0x7];
};




struct ActorLocomotionRotateParams {
    uint8_t _pad_0[0x8];
    float maxDeltaAngleRateNormal;
    float maxDeltaAngleRateCatchup;
    float maxDeltaAngleRateCombat;
    float maxDeltaAngleRateExactPositioning;
    struct SBezierCurveRecord* turnSpeedCurveDefault;
    uint8_t _pad_1[0x10];
};




struct InteriorMapWorldUIZoneHostPlanarGridParams {
    uint8_t _pad_0[0x8];
};




struct HarvestableAreaTypeManualOverride {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
};




struct WeatherEffects_Asteroid_PropertyValue {
    uint8_t _pad_0[0x8];
    enum ARDataType propertyType;
    uint8_t _pad_1[0x4];
    struct WeatherEffects_SpaceLoopEffect* spaceLoopEffect;
    uint8_t _pad_2[0x20];
    struct Range* interpolationRange;
    uint8_t _pad_3[0x8];
};




struct PlayerECGGraph_Config {
    uint8_t _pad_0[0x8];
    float idleAmpRangeMax;
    uint8_t spikeFrameDuration;
    uint8_t _pad_1[0x3];
    float spikeFrameDurationRandFactor;
    uint8_t waveFreq;
    uint8_t _pad_2[0x3];
    float pulseAmpMin;
    float pulseAmpMax;
    uint8_t updateRate;
    uint8_t _pad_3[0x7];
};




struct SS42GalactapediaSourceDataParams {
    uint8_t _pad_0[0x8];
    struct SGalactapediaData* sourceList;
    uint8_t _pad_1[0x10];
};




struct SCItemConditionalPriority {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t defaultPriority;
    uint8_t priorityWhenConditionMet;
    uint8_t _pad_1[0x2];
    struct SCItemControlCondition_Base* condition;
    uint8_t _pad_2[0x18];
};




struct SActorProceduralHeadRecoilModifiers {
    uint8_t _pad_0[0x8];
    float frequency;
    float smoothFactor;
    float frequencyNoiseFactor;
    float maxDistance;
    float phase;
    uint8_t _pad_1[0x4];
    struct Vec3* translation;
    uint8_t _pad_2[0x10];
    float translationNoise;
    uint8_t _pad_3[0x4];
    struct Ang3* rotation;
    uint8_t _pad_4[0x10];
    float rotationNoise;
    _Bool usePerlinNoise;
    uint8_t _pad_5[0x3];
    float referenceSpeed;
    float minSpeed;
    float minScale;
    float maxSpeed;
    float maxScale;
    uint8_t _pad_6[0x4];
    struct SWeaponProceduralHeadRecoilCurveModifierDef* curveRecoil;
    uint8_t _pad_7[0x80];
};




struct SecurityNotifications {
    uint8_t _pad_0[0x8];
};




struct JumpDriveStateAudioMap {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* enterStateLoop;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* enterStateOneShot;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* exitStateLoop;
    uint8_t _pad_3[0x18];
    enum ARDataType jumpDriveState;
    uint8_t _pad_4[0x4];
};




struct BuildingBlocks_UnidirectionalScroller {
    uint8_t _pad_0[0x8];
    enum ARDataType scrollBehavior;
    enum ARDataType scrollDirection;
    float scrollPixelIncrement;
    float scrollEasingTime;
    enum ARDataType scrollEasingType;
    _Bool autoScroll;
    uint8_t _pad_1[0x2];
    enum ARDataType autoScrollBehavior;
    float autoScrollSpeed;
    float autoScrollStartPause;
    float autoScrollEndPause;
    float autoScrollFadeSpeed;
};




struct SAddHealthValue {
    uint8_t _pad_0[0x8];
    float healthValue;
    uint8_t _pad_1[0x4];
};




struct WorldDisplayEnvironmentColor {
    uint8_t _pad_0[0x8];
};




struct LegacyCraftingCost_Base {
    uint8_t _pad_0[0x8];
};




struct SSensorMineProximityTrigger {
    uint8_t _pad_0[0x10];
    float Radius;
    float WarningRadius;
    int32_t MaxRaysPerMine;
    float AngleVertical;
    float AngleHorizontal;
    float GuideLaserLength;
    struct Vec3* Center;
    uint8_t _pad_1[0x10];
    struct Vec3* Front;
    uint8_t _pad_2[0x10];
    struct Vec3* Up;
    uint8_t _pad_3[0x10];
};




struct JumpThrusterPackConfig {
    uint8_t _pad_0[0x8];
    _Bool useJumpThrusters;
    uint8_t _pad_1[0x3];
    float jumpBoosterFuel;
    float jumpBoosterFuelConsumptionSpeed;
    float jumpBoosterFuelAirRestoreSpeed;
    float jumpBoosterFuelGroundRestoreSpeed;
    float jumpThrustersImpulseStrenght;
    _Bool useLandThrusters;
    uint8_t _pad_2[0x3];
    float landThrustersImpulseStrenght;
    float landThrustersMinThresholdDistance;
    float landThrustersMaxThresholdDistance;
    float landThrustersMinSpeed;
    float landThrustersMinTime;
};




struct ControlHintCondition_ActorLadderState {
    uint8_t _pad_0[0x8];
    enum ARDataType ladderState;
    uint8_t _pad_1[0x7];
};




struct SItemPortDefAttachmentImplementationFace {
    uint8_t _pad_0[0x8];
    struct SItemPortDefHelperNode* Helper;
    uint8_t _pad_1[0x160];
};




struct S42FieldManualCategory {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* categoryName;
};




struct SWeaponProceduralBodyRecoilConfigDef {
    uint8_t _pad_0[0x8];
    float hipsPushForce;
    float hipsDampStrength;
    float hipsDampStrengthEnd;
    float spinePushForceFirst;
    float spinePushForce;
    float spineDampStrength;
    float spineDampStrengthEnd;
    uint8_t _pad_1[0x4];
};




struct SLightFlickerVolumeComponentParams {
    uint8_t _pad_0[0x18];
    struct LightFlickerWaveParams* waveControlParams;
    uint8_t _pad_1[0x8];
    struct SLightFlickerAnimParams* animParams;
    uint8_t _pad_2[0x60];
    uint32_t randomSeed;
    float searchRadius;
    int32_t wavePasses;
    uint8_t _pad_3[0x4];
    struct SLightFlickerFilteringParams* filteringParams;
    uint8_t _pad_4[0x8];
};




struct EnvironmentLightGroupParams {
    uint8_t _pad_0[0x8];
    int32_t transitionDelayId;
    uint8_t _pad_1[0x4];
};




struct SSetInteractionStateOnParentItemportGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct CryStringT* stateTypeName;
    uint8_t _pad_1[0x8];
    struct CryStringT* stateName;
    uint8_t _pad_2[0x8];
};




struct SScenePlayerChoiceSettings {
    uint8_t _pad_0[0x8];
    struct SConversationIconParams* iconParams;
    uint8_t _pad_1[0x70];
};




struct CraftingRecipe_RecordRef {
    uint8_t _pad_0[0x8];
    struct CraftingRecipeRecord* recipeRecord;
    uint8_t _pad_1[0x10];
};




struct SJumpDriveFlightTurbulenceParams {
    uint8_t _pad_0[0x8];
    struct SJumpDriveFlightTurbulenceNoiseParams* noiseTurbulence;
    uint8_t _pad_1[0x28];
    struct SJumpDriveFlightTurbulenceNoiseParams* noiseGust;
    uint8_t _pad_2[0x28];
    struct BezierCurve* turbulenceByDistanceToSpline;
    uint8_t _pad_3[0x88];
    struct BezierCurve* gustByDistanceToSpline;
    uint8_t _pad_4[0x88];
    enum ARDataType pitchYawLimiterType;
    uint8_t _pad_5[0x4];
    struct Vec3* maxAngularVelocity;
    uint8_t _pad_6[0x10];
    struct Vec3* maxAngularAcceleration;
    uint8_t _pad_7[0x10];
    _Bool useTurbulenceParams;
    _Bool useGustParams;
    uint8_t _pad_8[0x1e];
};




struct ToxicGasDef {
    uint8_t _pad_0[0x8];
    struct GasParams* toxicGas;
    uint8_t _pad_1[0x10];
    float minPressureThreshold;
    float maxPressureThreshold;
    float minBDLBuildupRate;
    float maxBDLBuildupRate;
};




struct AudioHitTypeDefinition {
    uint8_t _pad_0[0x8];
    struct AudioHitListenerTrigger* triggerImpactHealth;
    uint8_t _pad_1[0xb8];
    struct AudioHitListenerTrigger* triggerImpactShield;
    uint8_t _pad_2[0xb8];
    struct AudioHitListenerTrigger* triggerShieldFail;
    uint8_t _pad_3[0xb8];
};




struct SWeaponMisfireEntry {
    uint8_t _pad_0[0x8];
    struct BezierCurve* misfireProbabilityCurve;
    uint8_t _pad_1[0x88];
    struct DamageBase* damage;
    uint8_t _pad_2[0x8];
    struct CryStringT* hitType;
    uint8_t _pad_3[0x8];
};




struct UIGraph_ChatComponent {
    uint8_t _pad_0[0x8];
};




struct TriggerSubConditionNumberOfInterruptsDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* sequenceSuperGUID;
    uint8_t _pad_1[0x8];
    int32_t numInterrupts;
    uint8_t _pad_2[0x4];
    struct CryStringT* comparisonType;
    uint8_t _pad_3[0x8];
};




struct DataSetMatchCondition_ExcludeDistantLocationsDef {
    uint8_t _pad_0[0x8];
    struct MissionProperty* locationProperty;
    uint8_t _pad_1[0x8];
    float exclusionRangeKm;
    uint8_t _pad_2[0x4];
};




struct SSequencerUsableAssignLoadoutTask {
    uint8_t _pad_0[0x28];
    struct CryStringT* loadoutId;
    uint8_t _pad_1[0x8];
    _Bool matchHierarchy;
    _Bool shouldDestroyAttachedEntitiesBeforeAssigningNewLoadout;
    uint8_t _pad_2[0x6];
};




struct AmmoPenetrationParams {
    uint8_t _pad_0[0x8];
    float basePenetrationDistance;
    float angle;
};




struct SXYZCurvesWithMaxValues {
    uint8_t _pad_0[0x8];
    float xMaxValue;
    float yMaxValue;
    float zMaxValue;
    uint8_t _pad_1[0x4];
    struct Vec3* minLimits;
    uint8_t _pad_2[0x10];
    struct Vec3* maxLimits;
    uint8_t _pad_3[0x10];
    struct SXYZCurvesArrays* curves;
    uint8_t _pad_4[0x8];
    struct SHandsRecoilCurveNoiseParams* noiseParams;
    uint8_t _pad_5[0x18];
};




struct AirlockAreaParams {
    uint8_t _pad_0[0x8];
    struct Vec3* AreaOffset;
    uint8_t _pad_1[0x10];
    struct Vec3* AreaSize;
    uint8_t _pad_2[0x10];
};




struct FireRepairerType_Raycast {
    uint8_t _pad_0[0x8];
    float maximumDistance;
    uint8_t _pad_1[0x4];
};




struct DefaultActionsEntityEntryCondition_AttachableItems {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    enum ARDataType subType;
};




struct DefaultActionsEntityState_CarryableState {
    uint8_t _pad_0[0x8];
    enum ARDataType state;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeFlexCrossAxisJustification {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct NavSplineComponentParams {
    uint8_t _pad_0[0x18];
};




struct SActorAnimationComponentParams {
    uint8_t _pad_0[0x18];
};




struct AreaSphereComponentParams {
    uint8_t _pad_0[0x28];
};




struct QuadGeometryEntityComponentParams {
    uint8_t _pad_0[0x18];
};




struct EAPickupFuelParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float percent;
    int32_t requiredScore;
    _Bool spawnOnKill;
    _Bool enabledForFPS;
    _Bool enabledForVehicles;
    _Bool allowSpawnOnSuicide;
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
};




struct CargoLoadingNotificationParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* message;
    float screenTimer;
    float hurryScreenTimer;
    _Bool disabled;
    uint8_t _pad_1[0x7];
    struct GameNotificationDockItemParams* dockNotificationParamsOverride;
    uint8_t _pad_2[0x10];
};




struct SAutoCraneParams {
    uint8_t _pad_0[0x8];
    _Bool autoCrane;
    uint8_t _pad_1[0x7];
    struct EntityReferenceDef* positionReference;
    uint8_t _pad_2[0x10];
    struct Vec3* aiCheckDirection;
    uint8_t _pad_3[0x10];
    float checkRadius;
    uint8_t _pad_4[0x4];
};




struct SRadarDisplayStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onRadarPoweredOff;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onSmallRadarEnabled;
    uint8_t _pad_2[0x8];
    struct SInteractionState* onFullScreenRadarEnabled;
    uint8_t _pad_3[0x8];
};




struct SLegacyShieldGeneratorMisfireParams {
    uint8_t _pad_0[0x8];
    float regenReductionRatio;
    float healthReductionRatio;
};




struct CraftingBlueprint_Base {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionIsInteractionShownAsPrompt {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* Interaction;
    uint8_t _pad_2[0x8];
};




struct BoidsBehaviorRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
};




struct SCItemQuantumInterdictionPulseParams {
    uint8_t _pad_0[0x8];
    float chargeTimeSecs;
    float dischargeTimeSecs;
    float cooldownTimeSecs;
    float radiusMeters;
    float decreaseChargeRateTimeSeconds;
    float increaseChargeRateTimeSeconds;
    float activationPhaseDuration_seconds;
    float disperseChargeTimeSeconds;
    float maxPowerDraw;
    float stopChargingPowerDrawFraction;
    float maxChargeRatePowerDrawFraction;
    float activePowerDrawFraction;
    float tetheringPowerDrawFraction;
    float greenZoneCheckRange;
    struct SSharedInteractionParams* startChargingIP;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* cancelChargingIP;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* disperseChargeIP;
    uint8_t _pad_3[0x8];
};




struct AttachableStateModifierContext_Immediate_Parent {
    uint8_t _pad_0[0x8];
};




struct SSCActorEffectsControllerParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* footstepMFXEntry;
    uint8_t _pad_1[0x8];
    struct VectorFieldParams* vectorFieldParams;
    uint8_t _pad_2[0x68];
    struct ActorUndergroundEffects* undergroundEffects;
    uint8_t _pad_3[0x38];
};




struct SGameCollisionClass {
    uint8_t _pad_0[0x8];
    enum ARDataType gameCollisionClass;
    uint8_t _pad_1[0x4];
};




struct SMisfireStatCondition {
    uint8_t _pad_0[0x8];
    float degradation;
    float damage;
    float heat;
    float distortion;
};




struct SActorForceReactionsVehicleForceDampeningDef {
    uint8_t _pad_0[0x8];
    float minMass;
    float gForceCutoff;
    float gForceScale;
    float externalImpulseCutoff;
    float externalImpulseScale;
    uint8_t _pad_1[0x4];
};




struct SCItemLandingGearParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* scopeContext;
    uint8_t _pad_1[0x8];
    struct CryStringT* vehicleScopeContext;
    uint8_t _pad_2[0x8];
    _Bool alwaysVisible;
    uint8_t _pad_3[0x7];
    struct VehicleLandingGearSpring* spring;
    uint8_t _pad_4[0x8];
};




struct SLootableItemPortRuleParams {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
    struct Ang3* maxOffsetRotation;
    uint8_t _pad_2[0x10];
    struct Vec3* maxOffsetTranslation;
    uint8_t _pad_3[0x10];
    struct CryStringT* extraFragTags;
    uint8_t _pad_4[0x8];
    struct SInteractionStateDef* itemState;
    uint8_t _pad_5[0x50];
};




struct ControlHintCondition_ActorToolState {
    uint8_t _pad_0[0x8];
    enum ARDataType toolState;
    uint8_t _pad_1[0x7];
};




struct MobiGlasEffectParams {
    uint8_t _pad_0[0x8];
    float projectionFadeInDuration;
    float projectionFadeOutDuration;
};




struct ItemDashboardScreenMFDParams {
    uint8_t _pad_0[0x18];
    _Bool isHolographic;
    uint8_t _pad_1[0x7];
};




struct AudioGameContext {
    uint8_t _pad_0[0x8];
    struct AudioBudgetDefinition* budgetDefinition;
    uint8_t _pad_1[0x10];
    struct AudioGameContextGlobals* globalRtpcsAndStates;
    uint8_t _pad_2[0x10];
};




struct GlobalJumpTunnelProbeParams {
    uint8_t _pad_0[0x8];
    float probeRadius;
    uint8_t _pad_1[0x4];
};




struct WeaponPortsParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* sidearmItemPortName;
    uint8_t _pad_1[0x8];
    struct CryStringT* primaryItemPortName;
    uint8_t _pad_2[0x8];
    struct CryStringT* secondaryItemPortName;
    uint8_t _pad_3[0x8];
    struct CryStringT* meleeItemPortName;
    uint8_t _pad_4[0x8];
    struct CryStringT* gadgetItemPortName;
    uint8_t _pad_5[0x8];
};




struct BuildingBlocks_ComponentParameterInputColor {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
    struct SRGBA8* color;
    uint8_t _pad_2[0x8];
};




struct RParticleFieldNodeDebugParams {
    uint8_t _pad_0[0x8];
    _Bool drawBoundingBox;
    _Bool drawAdvanced;
    _Bool densityPerMeter;
    uint8_t _pad_1[0x1];
    float density;
    float minMagnitude;
    float maxMagnitude;
    float arrowScale;
    float renderThreshold;
    float renderTolerance;
    _Bool renderInverted;
    uint8_t _pad_2[0x3];
};




struct STrackviewInterruptComponentParams {
    uint8_t _pad_0[0x18];
};




struct ItemResourceDynamicCompositionBase {
    uint8_t _pad_0[0x8];
};




struct SHostilityRules {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    _Bool useReputationHostility;
    _Bool usePersonalHostility;
    _Bool useFactionHostility;
    _Bool policesLawfulTrespass;
    _Bool hostileToCriminals;
    _Bool hostileToStolenVehicles;
    uint8_t _pad_2[0x2];
    struct Faction_LEGACY* factionOverride;
    uint8_t _pad_3[0x10];
    struct Faction* factionToOverride;
    uint8_t _pad_4[0x10];
};




struct EntityComponentWaterDisturbance_NoiseParams {
    uint8_t _pad_0[0x8];
    float lacunarity;
    float persistence;
    struct Vec2* amplitude;
    uint8_t _pad_1[0x8];
};




struct ProceduralPlanetAudioAlgorithmAveragePosition {
    uint8_t _pad_0[0x48];
    struct AudioRtpc* countRtpc;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* avgScaleRtpc;
    uint8_t _pad_2[0x18];
    struct ProceduralPlanetAudioTagAndEventsDef* definition;
    uint8_t _pad_3[0x10];
};




struct SCharacterCustomizerControlParams {
    uint8_t _pad_0[0x8];
    float zoomSpeed;
    float rotationRate;
    float keyboardRotationRate;
    uint8_t _pad_1[0x4];
    struct Vec2* tiltClamp;
    uint8_t _pad_2[0x8];
    _Bool enableTilt;
    uint8_t _pad_3[0x3];
    float dnaDragRate;
    float dnaKeyboardEditRate;
    float rotationLerpTime;
    float libraryHeadBBoxScale;
    float wholeHeadRegionBBoxScale;
    float libraryScrollSpeed;
    float dnaKeyControlSpeed;
    float bodyTypeSelectionLerpTime;
    float faceSculptingControlPointUIScaleFactor;
    _Bool enforceSymmetry;
    _Bool useAllDNAVertices;
    uint8_t _pad_4[0x2];
    float facesculptingUIRadius;
    float stepChangeDelayTime;
    float faceSculptingOcclusionOffset;
    _Bool rotateCamera;
    uint8_t _pad_5[0x3];
    float stepTransitionTime;
};




struct BuildingBlocks_WidgetLightSetting {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float pitchAngle;
    float yawAngle;
    uint8_t _pad_2[0x4];
};




struct TacticPlayerDistance {
    uint8_t _pad_0[0x8];
    float shortDistanceTreshold;
    float mediumDistanceTreshhold;
};




struct AsteroidStateRef {
    uint8_t _pad_0[0x8];
    struct AsteroidStateTemplate* stateTemplate;
    uint8_t _pad_1[0x10];
};




struct CraftingCost_Ref {
    uint8_t _pad_0[0x8];
    float multiplier;
    uint8_t _pad_1[0x4];
    struct CraftingCost_Base_NonRef* costReference;
    uint8_t _pad_2[0x8];
};




struct SAccumulatorParams {
    uint8_t _pad_0[0x8];
    float InitialAccumulationRatio;
    _Bool AccumulateWhenUnstreamed;
    _Bool AccumulateOnlyAfterTractorBeam;
    _Bool AccumulateOnlyWhenAttached;
    _Bool StopAccumulationWhenAttached;
    float AccumulationEventThreshold;
    uint8_t _pad_1[0x4];
    struct CryStringT* PortTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* RequiredPortTags;
    uint8_t _pad_3[0x8];
};




struct InteractionConditionLinkedUsableItemHasAttachment {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    _Bool searchOnSocketUsable;
    uint8_t _pad_2[0x7];
    struct CryStringT* usablePortTag;
    uint8_t _pad_3[0x8];
    struct CryStringT* itemPortTag;
    uint8_t _pad_4[0x8];
    enum ARDataType itemType;
    enum ARDataType itemSubType;
    struct TagsDNFTerm* itemTags;
    uint8_t _pad_5[0x60];
};




struct WeaponProceduralClipBase {
    uint8_t _pad_0[0x8];
    float blendTime;
    uint8_t _pad_1[0x4];
};




struct SSequencerUsableDelinkTask {
    uint8_t _pad_0[0x28];
};




struct ProjectileSpawnerParams {
    uint8_t _pad_0[0x18];
};




struct AtmosphericFlightDataParams {
    uint8_t _pad_0[0x18];
};




struct MiningShopProviderEntityComponentParams {
    uint8_t _pad_0[0x18];
};




struct LiteralStringUserVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* defaultValue;
    uint8_t _pad_2[0x8];
};




struct SSequencerFirstSelectCarryableTaskParams {
    uint8_t _pad_0[0x20];
};




struct SChargeDrainHighlightOutlineValues {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float occludedAlpha;
    float outlineWidth;
    _Bool outlineOnly;
    uint8_t _pad_2[0x7];
};




struct SSequencerPickupCarryableTaskParams {
    uint8_t _pad_0[0x20];
    struct SCarryableGrip* grip;
    uint8_t _pad_1[0x8];
};




struct HarvestablePreset {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    struct HarvestBehaviourParams* harvestBehaviour;
    uint8_t _pad_2[0x40];
    struct HarvestableTransformParams* transformParams;
    uint8_t _pad_3[0x40];
    struct SubHarvestableConfigBase* subConfigBase;
    uint8_t _pad_4[0x8];
    float respawnInSlotTime;
    uint8_t _pad_5[0x4];
    struct CryStringT* specialHarvestableString;
    uint8_t _pad_6[0x8];
};




struct JumpDriveApproachRingsParams {
    uint8_t _pad_0[0x8];
    float firstRingDistance;
    float lastRingDistance;
    float largestRingDiameter;
    uint8_t _pad_1[0x4];
};




struct MusicLogicTrigger {
    uint8_t _pad_0[0x8];
    struct CryStringT* trigger;
    uint8_t _pad_1[0x8];
};




struct AreaMapParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* groundMaterial;
    uint8_t _pad_1[0x8];
    struct CryStringT* wallMaterial;
    uint8_t _pad_2[0x8];
    struct CryStringT* groundMaterialFaded;
    uint8_t _pad_3[0x8];
    struct CryStringT* wallMaterialFaded;
    uint8_t _pad_4[0x8];
    struct CryStringT* doorMaterial;
    uint8_t _pad_5[0x8];
    struct CryStringT* markerMaterial;
    uint8_t _pad_6[0x8];
    struct CryStringT* markerGeomName;
    uint8_t _pad_7[0x8];
    struct CryStringT* doorGeomName;
    uint8_t _pad_8[0x8];
    struct CryStringT* rttGeomMaterial;
    uint8_t _pad_9[0x8];
    struct CryStringT* entityClipName;
    uint8_t _pad_10[0x8];
    struct CryStringT* rttoName;
    uint8_t _pad_11[0x8];
    struct CryStringT* outlineMaterial;
    uint8_t _pad_12[0x8];
    struct Tag* entityComponentRoomTag;
    uint8_t _pad_13[0x10];
    struct Tag* entityComponentRoomConnectorTag;
    uint8_t _pad_14[0x10];
    struct Tag* entityComponentRoomGroupTag;
    uint8_t _pad_15[0x10];
    struct AreaMapCameraParams* cameraParams;
    uint8_t _pad_16[0x148];
    struct UI3DDisplayInputParams* inputParams;
    uint8_t _pad_17[0x48];
    struct Vec2* rttGeomDimensions;
    uint8_t _pad_18[0x8];
};




struct SEntityBoxPhysicsGridParams {
    uint8_t _pad_0[0x8];
    _Bool inheritGravity;
    uint8_t _pad_1[0x7];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x6];
    struct Vec3* center;
    uint8_t _pad_4[0x10];
    struct Vec3* size;
    uint8_t _pad_5[0x10];
};




struct SReputationStateModifierParams {
    uint8_t _pad_0[0x8];
    struct SReputationStateParams* state;
    uint8_t _pad_1[0x10];
    struct SReputationStateModifierBase* modifier;
    uint8_t _pad_2[0x8];
};




struct SPerkDiscountItemCategory {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    struct ShopFranchise* franchise;
    uint8_t _pad_2[0x10];
    enum ARDataType type_;
    enum ARDataType subType;
    struct Tag* requiredTag;
    uint8_t _pad_3[0x10];
    float discountPercentage;
    uint8_t _pad_4[0x4];
};




struct SGeomCacheEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* GeomCacheFile;
    uint8_t _pad_1[0x8];
    _Bool PlayOnStart;
    _Bool Loop;
    _Bool Physicalize;
    uint8_t _pad_2[0x1];
    float StartTime;
    float StreamInDistance;
    float StandInDistance;
    struct CryStringT* StandInObject;
    uint8_t _pad_3[0x8];
    struct CryStringT* StandInMaterial;
    uint8_t _pad_4[0x8];
    struct CryStringT* FirstFrameStandInObject;
    uint8_t _pad_5[0x8];
    struct CryStringT* FirstFrameStandInMaterial;
    uint8_t _pad_6[0x8];
    struct CryStringT* LastFrameStandInObject;
    uint8_t _pad_7[0x8];
    struct CryStringT* LastFrameStandInMaterial;
    uint8_t _pad_8[0x8];
};




struct SCLoadingPlatformManagerParams {
    uint8_t _pad_0[0x18];
    struct SCLoadingPlatformEffectParams* effectParams;
    uint8_t _pad_1[0x120];
    struct SCLoadingPlatformLightGroupParams* lightGroupParams;
    uint8_t _pad_2[0x20];
    struct SCLoadingPlatformEntityReferences* loadingPlatformEntityReferences;
    uint8_t _pad_3[0x50];
    struct SCLoadingPlatformTrackviewParams* trackviewParams;
    uint8_t _pad_4[0x20];
    _Bool hasFrontGate;
    _Bool hasLoadingGate;
    _Bool hasCargoGrid;
    _Bool hasLandingArea;
    uint8_t _pad_5[0x4];
};




struct SQuantumBoostParams {
    uint8_t _pad_0[0x8];
    float maxBoostSpeed;
    float timeToMaxBoostSpeed;
    float boostUseTime;
    float boostRechargeTime;
    float minJumpDistance;
    float stopTime;
    struct BezierCurve* vibrationPreparing;
    uint8_t _pad_1[0x88];
    struct BezierCurve* vibrationSpeed;
    uint8_t _pad_2[0x88];
    struct BezierCurve* vibrationCancel;
    uint8_t _pad_3[0x88];
    float ifcsHandoverDownTime;
    float ifcsHandoverRespoolTime;
    struct SQuantumBoostAudioParams* audio;
    uint8_t _pad_4[0x120];
    struct SQuantumBoostEffectParams_LEGACY* effects_LEGACY;
    uint8_t _pad_5[0x150];
    struct SQuantumBoostRotationParams* rotation;
    uint8_t _pad_6[0x130];
    struct SQuantumBoostBubbleIntegrityParams* bubbleIntegrity;
    uint8_t _pad_7[0x2f8];
};




struct CargoOccupancyStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* cargoVacant;
    uint8_t _pad_1[0x8];
    struct SInteractionState* cargoStored;
    uint8_t _pad_2[0x8];
};




struct RTTSunlightParams {
    uint8_t _pad_0[0x8];
    _Bool applySunlight;
    uint8_t _pad_1[0x7];
    struct Vec3* sunPos;
    uint8_t _pad_2[0x10];
    struct SRGBA8* sunColor;
    uint8_t _pad_3[0x8];
    struct SRGBA8* ambientColor;
    uint8_t _pad_4[0x8];
};




struct SLandingAreaEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct LightFlareParams {
    uint8_t _pad_0[0x8];
    _Bool flareEnabled;
    uint8_t _pad_1[0x7];
    struct CryStringT* flare;
    uint8_t _pad_2[0x8];
    float flareFOV;
    float flareScale;
    _Bool attachToSun;
    uint8_t _pad_3[0x7];
};




struct InteractiveVariable_BackToDefaultParams {
    uint8_t _pad_0[0x8];
    float waitTime;
    uint8_t _pad_1[0x4];
};




struct SIDifficultyModule {
    uint8_t _pad_0[0x18];
};




struct BoidRandomTransition {
    uint8_t _pad_0[0x8];
    struct CryStringT* animationTag;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
    struct BoidState* transition;
    uint8_t _pad_3[0x8];
    _Bool instantTransition;
    _Bool allowWhileTransitioning;
    uint8_t _pad_4[0xe];
    float interval;
    float chance;
};




struct DamageMapChannels {
    uint8_t _pad_0[0x8];
    float thickness;
    float deformation;
    float burn;
    float temperature;
};




struct AngYPR {
    uint8_t _pad_0[0x8];
    float yaw;
    float pitch;
    float roll;
    uint8_t _pad_1[0x4];
};




struct ProcBreathingHoldBreathNoise {
    uint8_t _pad_0[0x8];
    float noiseAng;
    float noiseSpeed;
};




struct DefaultActionsEntityEntryCondition_Tags {
    uint8_t _pad_0[0x8];
    _Bool hasTags;
    uint8_t _pad_1[0x7];
    struct TagList* tags;
    uint8_t _pad_2[0x30];
};




struct DirectRTT_ChromaticAberrationParams {
    uint8_t _pad_0[0x8];
    struct Vec2* RedChannelOffset;
    uint8_t _pad_1[0x8];
    struct Vec2* GreenChannelOffset;
    uint8_t _pad_2[0x8];
    struct Vec2* BlueChannelOffset;
    uint8_t _pad_3[0x8];
};




struct CustomMaterialEntryParams {
    uint8_t _pad_0[0x8];
    float percentage;
    uint8_t _pad_1[0x4];
    struct CryStringT* surfaceType;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_IntegerTagPair {
    uint8_t _pad_0[0x8];
    int64_t first;
    struct Tag* second;
    uint8_t _pad_1[0x10];
};




struct CameraTimeCamConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    float radius;
    float movementSpeed;
    float sprintSpeed;
    float freeCamRotationScale;
    struct CameraDOFFocusDistanceConfig* DOFFocusDistanceConfig;
    uint8_t _pad_7[0x10];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_8[0x20];
};




struct TriggerSubConditionFocusDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* entitySuperGUID;
    uint8_t _pad_1[0x8];
    float time;
    float focusAmount;
    _Bool inverted;
    uint8_t _pad_2[0x7];
    struct CryStringT* siblingFailRule;
    uint8_t _pad_3[0x8];
};




struct STemperatureReadOutParams {
    uint8_t _pad_0[0x8];
    float updateIntervalTime;
    float smoothingFactor;
    int32_t smoothingSamples;
    uint8_t _pad_1[0x4];
};




struct EntityClusterId {
    uint8_t _pad_0[0x8];
};




struct SelfDestructStateModifier {
    uint8_t _pad_0[0x8];
    struct AttachableStateModifierContextBase* context;
    uint8_t _pad_1[0x8];
    struct SInteractionState* offlineState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* primedState;
    uint8_t _pad_3[0x8];
    struct SInteractionState* idleState;
    uint8_t _pad_4[0x8];
    struct SInteractionState* detonatedState;
    uint8_t _pad_5[0x8];
};




struct FactionScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SActivityThresholds {
    uint8_t _pad_0[0x8];
    float equipmentMass;
    float adsHitTimeWindow;
    float hungerThreshold;
    float thirstThreshold;
};




struct SAnimatedCharacterComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* actionController;
    uint8_t _pad_1[0x8];
    struct CryStringT* animDatabase3P;
    uint8_t _pad_2[0x8];
    struct CryStringT* soundDatabase;
    uint8_t _pad_3[0x8];
    enum ARDataType defaultColliderBehaviour;
    uint8_t _pad_4[0x4];
};




struct RaSTaRLibraryElement {
    uint8_t _pad_0[0x8];
    struct CryStringT* filePath;
    uint8_t _pad_1[0x8];
    struct CryStringT* displayName;
    uint8_t _pad_2[0x8];
    _Bool isMainModule;
    _Bool isIndependantModule;
    uint8_t _pad_3[0x6];
};




struct CounterMeasureBaseParams {
    uint8_t _pad_0[0x8];
};




struct MissionFlowActionBase {
    uint8_t _pad_0[0x8];
};




struct SAutoLoadingBoxSizeLoadingTime {
    uint8_t _pad_0[0x8];
    float one_eighthSCU;
    float one_quarterSCU;
    float one_halfSCU;
    float oneSCU;
    float twoSCU;
    float fourSCU;
    float eightSCU;
    float sixteenSCU;
    float twentyFourSCU;
    float thirtyTwoSCU;
};




struct OperatorModeStateModifier {
    uint8_t _pad_0[0x8];
    struct AttachableStateModifierContextBase* context;
    uint8_t _pad_1[0x8];
    struct SInteractionState* inactive;
    uint8_t _pad_2[0x8];
    struct SInteractionState* combat;
    uint8_t _pad_3[0x8];
    struct SInteractionState* turret;
    uint8_t _pad_4[0x8];
    struct SInteractionState* scanning;
    uint8_t _pad_5[0x8];
    struct SInteractionState* mining;
    uint8_t _pad_6[0x8];
    struct SInteractionState* quantumNavigation;
    uint8_t _pad_7[0x8];
    struct SInteractionState* refuel;
    uint8_t _pad_8[0x8];
};




struct TorusFieldGeom {
    uint8_t _pad_0[0x8];
    struct Vec3* center;
    uint8_t _pad_1[0x10];
    struct Vec3* axis;
    uint8_t _pad_2[0x10];
    float R;
    float r;
};




struct VehicleEditorStat {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    enum ARDataType unit;
    uint8_t decimalPlaces;
    uint8_t _pad_1[0x3];
    enum ARDataType compareMode;
    float minActualValue;
    float maxActualValue;
    _Bool interpolateToDisplayValues;
    uint8_t _pad_2[0x3];
    float minDisplayValue;
    float maxDisplayValue;
    _Bool clampValuesToMinMax;
    uint8_t _pad_3[0x7];
    enum ARDataType statType;
    uint8_t _pad_4[0x4];
};




struct SPhysicalScreen {
    uint8_t _pad_0[0x8];
    struct CryStringT* geometryName;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_2[0x10];
};




struct LinkedStatRuleBase {
    uint8_t _pad_0[0x8];
};




struct SCarryableGrip {
    uint8_t _pad_0[0x8];
    struct CryStringT* carryStyleID;
    uint8_t _pad_1[0x8];
    enum ARDataType canBeUsedBy;
    enum ARDataType handMode;
    enum ARDataType gripAction;
    uint8_t _pad_2[0x4];
    struct SGrip* handGrip;
    uint8_t _pad_3[0xa8];
    struct SGrip* offHandGrip;
    uint8_t _pad_4[0x8];
    struct SCarryAnimationParams* animationParameters;
    uint8_t _pad_5[0x20];
    struct SCarryParams* carryParameters;
    uint8_t _pad_6[0x10];
};




struct HandholdInteractionLink {
    uint8_t _pad_0[0x8];
    _Bool ignoreInteractionOnFail;
    uint8_t _pad_1[0x7];
    struct HandholdAttachmentTriggerParams* attachmentTrigger;
    uint8_t _pad_2[0x8];
};




struct LootConfig {
    uint8_t _pad_0[0x8];
    struct LootConstraints* lootConstraints;
    uint8_t _pad_1[0x30];
    struct LootTable* lootTable;
    uint8_t _pad_2[0x10];
};




struct SStopHackingGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool reset;
    _Bool changeState;
    uint8_t _pad_1[0x6];
};




struct ReverseTrailsSetting {
    uint8_t _pad_0[0x8];
    float disabledAngle;
    float disabledFadeAngle;
};




struct GlobalEnvironmentEffectSettings {
    uint8_t _pad_0[0x8];
    float cullDistance;
    float cullDistanceRange;
};




struct SCMountRotationAxisParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* jointName;
    uint8_t _pad_1[0x8];
    float minRot;
    float maxRot;
    float maxSpeedDelta;
    float rotSpeedDamping;
    float minRotADS;
    float maxRotADS;
    float maxSpeedDeltaADS;
    float rotSpeedDampingADS;
    float speed;
    uint8_t _pad_2[0x4];
};




struct NotificationDef {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Canvas* canvasOverride;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* title;
    struct CLocIdentifier* body;
    struct CLocIdentifier* buttonAcceptText;
    struct CLocIdentifier* buttonDeclineText;
    struct SMobiGlasAppLink* appLink;
    uint8_t _pad_2[0x40];
    enum ARDataType notificationType;
    uint8_t _pad_3[0x4];
    struct CryStringT* audioEvent;
    uint8_t _pad_4[0x8];
    struct CryStringT* iconPath;
    uint8_t _pad_5[0x8];
    int32_t displayValue;
    float screenTime;
    _Bool buttonAcceptDisplay;
    _Bool buttonDeclineDisplay;
    _Bool combineDisplayValue;
    _Bool displayAcceptDeclineControlHint;
    _Bool hideIcon;
    _Bool isTutorial;
    _Bool isObjective;
    _Bool isHostility;
    _Bool isLowPriorityNotification;
    _Bool removeThisUniqueID;
    uint8_t _pad_6[0x6];
};




struct AutoSubscribeChatProviderSettings {
    uint8_t _pad_0[0x8];
    struct SChatChannelFilterBase* autoSubscribeChannelTypes;
    uint8_t _pad_1[0x8];
};




struct EnvironmentLightStateParams {
    uint8_t _pad_0[0x8];
};




struct SBlobContactEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct SFrontendS42Settings {
    uint8_t _pad_0[0x8];
    struct SFrontendS42ActionSettings* newGame;
    uint8_t _pad_1[0x38];
    struct SFrontendS42ActionSettings* continue_;
    uint8_t _pad_2[0x38];
    struct SFrontendS42ActionSettings* loadGame;
    uint8_t _pad_3[0x38];
    struct SFrontendS42ActionSettings* quit;
    uint8_t _pad_4[0x38];
    struct SFrontendS42ActionSettings* options;
    uint8_t _pad_5[0x38];
    struct SFrontendS42ActionSettings* hallway;
    uint8_t _pad_6[0x38];
    struct SFrontendS42ActionSettings* room;
    uint8_t _pad_7[0x38];
    struct SFrontendS42ActionSettings* galactapedia;
    uint8_t _pad_8[0x38];
    struct SFrontendS42ActionSettings* changeCharacter;
    uint8_t _pad_9[0x38];
    struct SFrontendS42ActionSettings* debugLevelSelect;
    uint8_t _pad_10[0x38];
    struct SFrontendS42ActionSettings* missionSelect;
    uint8_t _pad_11[0x38];
};




struct VideoComms {
    uint8_t _pad_0[0x8];
    struct CryStringT* filename169;
    uint8_t _pad_1[0x8];
    struct CryStringT* filename43;
    uint8_t _pad_2[0x18];
};




struct SSquadChannel {
    uint8_t _pad_0[0x8];
};




struct LedgeGrabbingParams {
    uint8_t _pad_0[0x8];
    struct LedgeNearbyParams* ledgeNearbyParams;
    uint8_t _pad_1[0x40];
    struct LedgeTransitionParams* vaultTransitionParams;
    uint8_t _pad_2[0x38];
    struct LedgeTransitionParams* mantleTransitionParams;
    uint8_t _pad_3[0x38];
};




struct BuildingBlocks_BindingsLocalizationTimeFormat {
    uint8_t _pad_0[0x50];
    int32_t significantFigures;
    _Bool useClockFormatting;
    _Bool hideLeadingZeros;
    _Bool timeOfDay;
    _Bool years;
    _Bool months;
    _Bool weeks;
    _Bool days;
    _Bool hours;
    _Bool minutes;
    _Bool seconds;
    uint8_t _pad_1[0x2];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x8];
};




struct ItemResourceDeltaAmount {
    uint8_t _pad_0[0x8];
    enum ARDataType resource;
    uint8_t _pad_1[0x4];
    struct SBaseResourceUnit* resourceAmountPerSecond;
    uint8_t _pad_2[0x8];
};




struct EmissionsScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct LinkedStatPreset {
    uint8_t _pad_0[0x8];
    enum ARDataType linkedStat;
    uint8_t _pad_1[0x4];
    struct LinkedStatSetupPreset* preset;
    uint8_t _pad_2[0x8];
};




struct ShipInsuranceEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* selectionFilter;
    uint8_t _pad_1[0x8];
};




struct DeliveryItemPortComponentParams {
    uint8_t _pad_0[0x18];
};




struct FixedFloat {
    uint8_t _pad_0[0x8];
    float value;
    uint8_t _pad_1[0x4];
};




struct SEntityDensityClassOverwrites {
    uint8_t _pad_0[0x8];
    float densityMultiplier_clusterUpperObjectCountDGS;
    float densityMultiplier_clusterUpperObjectCountPersistence;
    float densityMultiplier_clusterPersistenceTimeout;
    float timeMultiplier_vehicleUnattendedCleanup;
};




struct SInternalHardpointLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* port1;
    uint8_t _pad_1[0x8];
    struct CryStringT* port2;
    uint8_t _pad_2[0x8];
};




struct TQSOption {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
};




struct GeometryAsteroidModelTag {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
};




struct SWeaponActionToggleAimStanceParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
};




struct SAuxiliaryWeaponActionParams {
    uint8_t _pad_0[0x8];
};




struct DialogueExternalSource {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* filename;
    uint8_t _pad_2[0x8];
    _Bool localized;
    uint8_t _pad_3[0x17];
};




struct EntityComponentPlayerEAUIProviderParams {
    uint8_t _pad_0[0x18];
    struct EAScoringMessageParams* scoringMessageParams;
    uint8_t _pad_1[0x40];
};




struct EAScenarioComponentParams {
    uint8_t _pad_0[0x18];
    float precachingRadius;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_FlexItem {
    uint8_t _pad_0[0x8];
    float growProportion;
    float shrinkProportion;
};




struct Vec4 {
    uint8_t _pad_0[0x8];
    float x;
    float y;
    float z;
    float w;
};




struct WorldDisplayEnvironmentColor_Custom {
    uint8_t _pad_0[0x8];
    struct SRGBA8* color;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_BorderRadiusCorner {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_FixedOrRelativeValue* radius;
    uint8_t _pad_1[0x8];
    _Bool chamfer;
    uint8_t _pad_2[0x7];
};




struct RttPreviewManagerEntityComponentParams {
    uint8_t _pad_0[0x18];
    float mipSelectionBias;
    uint8_t _pad_1[0x4];
};




struct ArmouryTerminalParams {
    uint8_t _pad_0[0x18];
    struct EntityReferenceDef* armouryManager;
    uint8_t _pad_1[0x10];
    struct SecurityClearanceToken* registrationCompleteToken;
    uint8_t _pad_2[0x10];
    struct SInteractionState* registerState;
    uint8_t _pad_3[0x8];
    struct SInteractionState* registrationCompleteState;
    uint8_t _pad_4[0x8];
    struct SInteractionState* useState;
    uint8_t _pad_5[0x8];
    struct SInteractionState* processingState;
    uint8_t _pad_6[0x8];
    struct SInteractionState* checkoutItemsState;
    uint8_t _pad_7[0x8];
    float armourerRequestTimeout;
    uint8_t _pad_8[0x4];
};




struct QuantumDriveSplineFXNode {
    uint8_t _pad_0[0x8];
    float normAge;
    _Bool splitSegment;
    _Bool cornerPoint;
    uint8_t _pad_1[0x2];
};




struct CraftingResearch {
    uint8_t _pad_0[0x8];
    struct CraftingResearchUnlock_Base* unlockRequirements;
    uint8_t _pad_1[0x8];
    struct CraftingRecipeCosts_Base* researchCosts;
    uint8_t _pad_2[0x8];
};




struct EntityComponentRttAspectMFDSelfStatusParams {
    uint8_t _pad_0[0x18];
    enum ARDataType targetRttSlot;
    float aspectRatio;
    float labelRelativeProximityThreshold;
    uint8_t _pad_1[0x4];
};




struct SQedVisualGraphEffectParams {
    uint8_t _pad_0[0x8];
    struct Tag* entityEffectTag;
    uint8_t _pad_1[0x10];
    struct Tag* entityEffectTrigger;
    uint8_t _pad_2[0x10];
    float strength;
    uint8_t _pad_3[0x4];
};




struct SPlayerUsableSearchRouteUsable {
    uint8_t _pad_0[0x8];
    struct TagList* searchUsableTags;
    uint8_t _pad_1[0x30];
    struct TagList* searchUsableItemProviderTags;
    uint8_t _pad_2[0x30];
    struct SUsableRoutingSettings* routingSettings;
    uint8_t _pad_3[0xf8];
};




struct SReputationMissionGiverRequirementParams {
    uint8_t _pad_0[0x8];
    struct FactionReputation* factionReputation;
    uint8_t _pad_1[0x10];
    struct SReputationScopeParams* reputationScope;
    uint8_t _pad_2[0x10];
    enum ARDataType comparison;
    uint8_t _pad_3[0x4];
    struct SReputationStandingParams* standing;
    uint8_t _pad_4[0x10];
};




struct VehicleSelfDestructScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct WeaponAIAimingMethod {
    uint8_t _pad_0[0x8];
};




struct BaseDataSetMatchCondition {
    uint8_t _pad_0[0x8];
};




struct PlayerNotificationBannerOptionsParams {
    uint8_t _pad_0[0x8];
    float autoExpireInSeconds;
    uint8_t _pad_1[0x4];
};




struct MissionPropertyValue_Reward {
    uint8_t _pad_0[0x8];
    struct MissionReward* rewardDef;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_BindingsColorBase {
    uint8_t _pad_0[0x50];
};




struct SStateModifier {
    uint8_t _pad_0[0x8];
};




struct ItemResourceDeltaConversion {
    uint8_t _pad_0[0x8];
    struct ItemResourceDeltaAmount* consumption;
    uint8_t _pad_1[0x18];
    struct ItemResourceDeltaAmount* generation;
    uint8_t _pad_2[0x18];
    struct ItemResourceComposition* generatedComposition;
    uint8_t _pad_3[0x50];
    struct ItemResourceComposition* consumptionComposition;
    uint8_t _pad_4[0x50];
    struct ItemResourceConversionModifierBase* dynamicConversionModifier;
    uint8_t _pad_5[0x8];
    struct ItemResourceDynamicAmountBase* dynamicAmountOverride;
    uint8_t _pad_6[0x8];
    _Bool noOverGeneration;
    uint8_t _pad_7[0x3];
    float minimumConsumptionFraction;
    struct FunctionalityModifiers* generationModifiers;
    uint8_t _pad_8[0x8];
};




struct SecurityNetworkVariableValue_Base {
    uint8_t _pad_0[0x8];
};




struct ItemMiningModifierParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    struct MiningLaserModifiers* MiningLaserModifier;
    uint8_t _pad_2[0x78];
};




struct SModelVoiceTagPair {
    uint8_t _pad_0[0x8];
    struct Tag* modelTag;
    uint8_t _pad_1[0x10];
    struct Tag* voiceTag;
    uint8_t _pad_2[0x10];
};




struct EntityUIDisplayParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* displayDescription;
    struct CryStringT* displayThumbnail;
    uint8_t _pad_1[0x8];
    struct CryStringT* displayImage;
    uint8_t _pad_2[0x8];
    struct CryStringT* displayIcon;
    uint8_t _pad_3[0x8];
    struct CryStringT* sortString;
    uint8_t _pad_4[0x8];
    struct SObjectDataBankEntryTrackerParams* trackerProperties;
    uint8_t _pad_5[0x8];
};




struct SCItemCommsComponentSetup {
    uint8_t _pad_0[0x8];
    _Bool showInContactsList;
    uint8_t _pad_1[0x3];
    float broadcastRange;
    struct GlobalResourceAudio* startIncomingCallSound;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* stopIncomingCallSound;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* startOutgoingCallSound;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* stopOutgoingCallSound;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* introTrigger;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* outroTrigger;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* joinTrigger;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* leaveTrigger;
    uint8_t _pad_9[0x18];
    _Bool renderParticles;
    uint8_t _pad_10[0x7];
};




struct AnimationGraph_Timer {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float timeStart;
    float timeEnd;
    uint32_t count;
    uint8_t _pad_2[0x4];
};




struct SecurityNetworkVariableValue_Bool {
    uint8_t _pad_0[0x8];
    _Bool value;
    uint8_t _pad_1[0x7];
};




struct ElectricalStateRef {
    uint8_t _pad_0[0x8];
    struct ElectricalStateTemplate* stateTemplate;
    uint8_t _pad_1[0x10];
};




struct SSCActorRotationComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCharacterCustomizerBaseMaterialSet {
    uint8_t _pad_0[0x8];
    struct CryStringT* headSkinBaseMaterial;
    uint8_t _pad_1[0x8];
    struct CryStringT* bodySkinBaseMaterial;
    uint8_t _pad_2[0x8];
};




struct SCItemSeatDashboardScreenStyle {
    uint8_t _pad_0[0x8];
    struct CryStringT* Template;
    uint8_t _pad_1[0x8];
    enum ARDataType Type;
    uint8_t _pad_2[0x4];
};




struct SpeedThrottleComponentParams {
    uint8_t _pad_0[0x18];
    struct LocalPlayerSpeedThrottleComponent* speedThrottleParamsRecord;
    uint8_t _pad_1[0x10];
};




struct MissionFlowAction_StateChange {
    uint8_t _pad_0[0x8];
    enum ARDataType toState;
    uint8_t _pad_1[0x4];
};




struct SStandardPlayerStats {
    uint8_t _pad_0[0x18];
    float secondsToMergeHits;
    int32_t deathScreenMaxItemsPerColumn;
    int32_t deathScreenMaxSecondsStatValid;
    uint8_t _pad_1[0x4];
    struct SEAFriendlyFireKickParams* friendlyFireKickParams;
    uint8_t _pad_2[0x58];
};




struct InteractionConditionEmptyUsableItemPort {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct CryStringT* itemPortTag;
    uint8_t _pad_2[0x8];
};




struct S42StatId {
    uint8_t _pad_0[0x8];
    enum ARDataType S42StatType;
    enum ARDataType S42StatPlayerState;
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    struct Tag* entityTag;
    uint8_t _pad_2[0x10];
};




struct LoadoutDummyComponentParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* playerTagPoint;
    uint8_t _pad_1[0x8];
    struct CryStringT* playerIdleAnim;
    uint8_t _pad_2[0x8];
    struct CryStringT* vehicleTagPoint;
    uint8_t _pad_3[0x8];
    struct Vec3* vehicleBoundingBox;
    uint8_t _pad_4[0x10];
    struct Ang3* vehicleAngle;
    uint8_t _pad_5[0x10];
    struct UIWorldDisplay3DParams* playerDisplayParams;
    uint8_t _pad_6[0x138];
    struct UIWorldDisplay3DParams* vehicleDisplayParams;
    uint8_t _pad_7[0x138];
};




struct ControlHintCondition_VehicleState {
    uint8_t _pad_0[0x8];
    enum ARDataType state;
    uint8_t _pad_1[0x7];
};




struct SCItemMobiGlasParams {
    uint8_t _pad_0[0x18];
    struct MobiGlasClientParams* clientParams;
    uint8_t _pad_1[0x78];
    struct MobiGlasRemoteParams* remoteParams;
    uint8_t _pad_2[0x98];
    struct MobiGlasEffectParams* effectSettings;
    uint8_t _pad_3[0x8];
};




struct DialogueContextReferenceEntry {
    uint8_t _pad_0[0x8];
    struct DialogueContext* dialogueContext;
    uint8_t _pad_1[0x10];
};




struct MonitoredZoneParams {
    uint8_t _pad_0[0x18];
    _Bool enabledByDefault;
    uint8_t _pad_1[0x3];
    float radiusKm;
    float strength;
    uint8_t _pad_2[0x4];
};




struct SCharacterCustomizerWildlineSubconditionBase {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeBase {
    uint8_t _pad_0[0x8];
};




struct VehicleLandingGearSpring {
    uint8_t _pad_0[0x8];
    float lengthTarget;
    float lengthMin;
    float lengthMax;
    float stiffness;
    float damping;
    uint8_t _pad_1[0x4];
    struct CryStringT* springBone;
    uint8_t _pad_2[0x8];
    struct Vec3* offset;
    uint8_t _pad_3[0x10];
    struct Vec3* rotationalOffset;
    uint8_t _pad_4[0x10];
};




struct SCSeatHeadPosAdjustSetup {
    uint8_t _pad_0[0x8];
    struct Vec3* fpDesiredHeadPosition;
    uint8_t _pad_1[0x10];
};




struct HarvestConditionDamageMap {
    uint8_t _pad_0[0x8];
    float damageRatio;
    uint8_t _pad_1[0x4];
};




struct SItemPortDefAttachmentImplementationLogical {
    uint8_t _pad_0[0x8];
};




struct SEntityBasePhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
};




struct TriggerSubConditionUsableDef {
    uint8_t _pad_0[0x8];
    _Bool usableUserIsPlayer;
    uint8_t _pad_1[0x7];
    struct CryStringT* usableUserSuperGUID;
    uint8_t _pad_2[0x8];
    struct CryStringT* usableSuperGUID;
    uint8_t _pad_3[0x8];
    struct CryStringT* stateName;
    uint8_t _pad_4[0x8];
};




struct InteractionConditionCanDropWearableItem {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct AudioAreaEntityComponentParams {
    uint8_t _pad_0[0x18];
    _Bool isEnabled;
    uint8_t _pad_1[0x7];
    struct CryStringT* audioEnvironment;
    uint8_t _pad_2[0x8];
    float environmentFadeDistance;
    float fadeDistance;
    int32_t soundObstructionType;
    uint8_t _pad_3[0x4];
};




struct CraftingGameplayPropertyImpl_Base_Int {
    uint8_t _pad_0[0x8];
};




struct SCIGTestC {
    uint8_t _pad_0[0x8];
    _Bool bBase;
    uint8_t _pad_1[0x7];
    _Bool bC;
    uint8_t _pad_2[0x7];
};




struct PlayerFormationParams {
    uint8_t _pad_0[0x8];
    float targetRadius;
    float innerRadius;
    float outerRadius;
    float breakRadius;
    float influenceAtInnerRadius;
    float influenceAtOuterRadius;
    _Bool abandonFormationAtBreakRadius;
    uint8_t _pad_1[0x3];
    enum ARDataType matchVelocityRadius;
    enum ARDataType matchRotationRadius;
    float targetVelocityTolerance;
};




struct ThrusterGimbal {
    uint8_t _pad_0[0x8];
    _Bool isFlex;
    uint8_t _pad_1[0x7];
    struct ThrusterGimbalAxis* pitchAxis;
    uint8_t _pad_2[0x30];
    struct ThrusterGimbalAxis* yawAxis;
    uint8_t _pad_3[0x30];
};




struct TriggerSubConditionDef {
    uint8_t _pad_0[0x8];
};




struct SHackingAbilitySlowdownParams {
    uint8_t _pad_0[0x8];
    float chargeUpTime;
    float duration;
    float cooldown;
    uint8_t _pad_1[0x4];
    float speedPenalty;
    uint8_t _pad_2[0x4];
};




struct ShadowRegionEntityComponentParams {
    uint8_t _pad_0[0x18];
    float sizeTrigger;
    uint8_t _pad_1[0x4];
    struct Vec3* regionSize;
    uint8_t _pad_2[0x10];
};




struct SDecalParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceMaterial* material;
    uint8_t _pad_1[0x10];
    uint8_t sortPriority;
    uint8_t viewDistanceRatio;
    _Bool affectsThisAreaOnly;
    uint8_t _pad_2[0x1];
    float alphaCutoff;
    struct Vec3* offset;
    uint8_t _pad_3[0x10];
    struct Ang3* rotationOffset;
    uint8_t _pad_4[0x10];
    struct Vec3* scale;
    uint8_t _pad_5[0x10];
};




struct HudColor_CustomEntry {
    uint8_t _pad_0[0x8];
    struct HudColor_HoloMatColors* HoloMatColors;
    uint8_t _pad_1[0x50];
    struct SRGBA8* FlashColor;
    uint8_t _pad_2[0x8];
    struct CryStringT* Name;
    uint8_t _pad_3[0x8];
};




struct SARTrailParams {
    uint8_t _pad_0[0x8];
    float quatLifetime;
    float quatDistance;
    float maxFadeDistance;
    float minFadeDistance;
    float startDistance;
    uint8_t _pad_1[0x4];
};




struct WeaponControllerStateModifier {
    uint8_t _pad_0[0x8];
    struct WeaponControllerArmMissileStates* armMissileStates;
    uint8_t _pad_1[0x8];
    struct WeaponControllerCycleMissileStates* cycleMissileStates;
    uint8_t _pad_2[0x8];
    struct WeaponControllerMissileEventStates* missileEventStates;
    uint8_t _pad_3[0x8];
};




struct SEntityEffectSystem_Attachment_BoneAttachment {
    uint8_t _pad_0[0x8];
    struct QuatT* offset;
    uint8_t _pad_1[0x50];
    struct Tag* offsetParameter;
    uint8_t _pad_2[0x10];
    enum ARDataType attachmentZone;
    uint8_t _pad_3[0x4];
    struct CryStringT* boneAttachment;
    uint8_t _pad_4[0x8];
};




struct HolographicVolumeSphereParams {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
};




struct DefaultAction_ActionDef {
    uint8_t _pad_0[0x8];
    struct InputAction* name;
    uint8_t _pad_1[0x28];
    _Bool trigger;
    uint8_t _pad_2[0x7];
};




struct BuildingBlocks_BindingsNumberClamp {
    uint8_t _pad_0[0x50];
    float minValue;
    float maxValue;
    struct BuildingBlocks_BindingsNumberBase* inputMinValue;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsNumberBase* inputMaxValue;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_3[0xf8];
};




struct SElevatorBaseCollisionParams {
    uint8_t _pad_0[0x10];
};




struct LegacyCraftingCost_ResourceAmountDerivedFromAmmoContainer {
    uint8_t _pad_0[0x8];
    struct ResourceType* resource;
    uint8_t _pad_1[0x10];
};




struct ServiceBeaconGlobalParams {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* quantumTravelPointClass;
    uint8_t _pad_1[0x10];
    struct MissionType* missionTypeRecord;
    uint8_t _pad_2[0x10];
    struct ServiceBeaconNotificationParams* personalTransportDetectedNotification;
    uint8_t _pad_3[0x30];
    struct ServiceBeaconNotificationParams* combatAssistanceDetectedNotification;
    uint8_t _pad_4[0x30];
    struct ServiceBeaconNotificationParams* escortDetectedNotification;
    uint8_t _pad_5[0x30];
    struct ServiceBeaconNotificationParams* refuelDetectedNotification;
    uint8_t _pad_6[0x30];
    struct ServiceBeaconNotificationParams* reviveDetectedNotification;
    uint8_t _pad_7[0x30];
    struct ServiceBeaconNotificationParams* healDetectedNotification;
    uint8_t _pad_8[0x30];
    struct ServiceBeaconNotificationParams* contractAcceptedNotification;
    uint8_t _pad_9[0x30];
    struct ServiceBeaconNotificationParams* contractCancelledNotification;
    uint8_t _pad_10[0x30];
    struct ServiceBeaconNotificationParams* contractNoLongerAvailableNotification;
    uint8_t _pad_11[0x30];
    struct ServiceBeaconNotificationParams* contractCompletedInitiatorNotification;
    uint8_t _pad_12[0x30];
    struct ServiceBeaconNotificationParams* contractCompletedProviderNotification;
    uint8_t _pad_13[0x30];
    struct ServiceBeaconNotificationParams* providerWithinRangeNotification;
    uint8_t _pad_14[0x30];
    struct ServiceBeaconNotificationParams* spoofedContractOfferedNotification;
    uint8_t _pad_15[0x30];
    struct CLocIdentifier* contractProviderName;
    struct CLocIdentifier* vehicleLocationChosenForPersonalTransport;
    struct CryStringT* providerNameToken;
    uint8_t _pad_16[0x8];
    struct CryStringT* initiatorNameToken;
    uint8_t _pad_17[0x8];
    struct CryStringT* selectedDestinationToken;
    uint8_t _pad_18[0x8];
    struct CryStringT* contractTypeToken;
    uint8_t _pad_19[0x8];
    struct CryStringT* distanceToInitiatorToken;
    uint8_t _pad_20[0x8];
    struct CryStringT* initiatorLocationToken;
    uint8_t _pad_21[0x8];
    struct CryStringT* paymentAmountToken;
    uint8_t _pad_22[0x8];
    struct CLocIdentifier* openSpaceLocationName;
    struct CLocIdentifier* allReputationsLabel;
    struct CLocIdentifier* oneStarReputationLabel;
    struct CLocIdentifier* twoStarReputationLabel;
    struct CLocIdentifier* threeStarReputationLabel;
    struct CLocIdentifier* fourStarReputationLabel;
    struct CLocIdentifier* fiveStarReputationLabel;
    struct CLocIdentifier* invalidTypeErrorMessage;
    struct CLocIdentifier* invalidReputationErrorMessage;
    struct CLocIdentifier* priceIsZeroErrorMessage;
    struct CLocIdentifier* insufficientFundsErrorMessage;
    struct CLocIdentifier* invalidLocationSelectedErrorMessage;
};




struct ObjectContainerModifierParams {
    uint8_t _pad_0[0x18];
    float ExternalWear;
    float ExternalDirt;
    float InternalWear;
    float InternalDirt;
    struct TintPaletteTree* TintPaletteOverride;
    uint8_t _pad_1[0x10];
};




struct SSensorMineLaserTrigger {
    uint8_t _pad_0[0x10];
    float LaserLength;
    float LaserHitOffset;
    struct Vec3* MineFront;
    uint8_t _pad_1[0x10];
    struct Vec3* LaserOffset;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeCapStyle {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct ControlHintCondition_NOT {
    uint8_t _pad_0[0x8];
    struct ControlHintCondition* condition;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_SpacerContainer {
    uint8_t _pad_0[0x8];
    float pushSpeed;
    float spacing;
    float boundsScale;
    float recoveryScale;
    _Bool useSphere;
    uint8_t _pad_1[0x7];
};




struct StatusMaskedRetriggerSetup {
    uint8_t _pad_0[0x8];
    enum ARDataType statusType;
    uint8_t _pad_1[0x4];
    struct StatusTriggerBase* statusTrigger;
    uint8_t _pad_2[0x8];
};




struct SGeometryResourceParams {
    uint8_t _pad_0[0x18];
    struct SGeometryModelTagBase* ModelTag;
    uint8_t _pad_1[0x8];
    _Bool cacheResources;
    uint8_t _pad_2[0x7];
    struct SGeometryNodeParams* Geometry;
    uint8_t _pad_3[0x158];
    struct SMaterialNodeParams* Material;
    uint8_t _pad_4[0x88];
    _Bool rootOverridePaint;
    _Bool inheritModelTagFromHost;
    uint8_t _pad_5[0x6];
};




struct SCLoadingPlatformTrackviewParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* openingLoadingPlatformTrack;
    uint8_t _pad_1[0x8];
    struct CryStringT* closingLoadingPlatformTrack;
    uint8_t _pad_2[0x8];
};




struct SJumpPointATCParams {
    uint8_t _pad_0[0x18];
};




struct SInteractableMenuTitleParams {
    uint8_t _pad_0[0x8];
    struct InnerThought_ColorParams* titleColor;
    uint8_t _pad_1[0x18];
};




struct SpeedThrottleConfiguration {
    uint8_t _pad_0[0x8];
    enum ARDataType activeMode;
    enum ARDataType defaultSpeed;
    enum ARDataType defaultSpeedWithWeapon;
    float mouseWheelSpeedStep;
    float holdTime;
    float durationAccelerateToFastRun;
    float durationBoostToSprint;
    float durationUnboostFromSprint;
    float durationDecelerateToDefault;
    float withWeaponDurationModifier;
    enum ARDataType defaultTutorialSpeed;
    uint8_t _pad_1[0x4];
};




struct SPrisonSentenceStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onFinishSentenceSuccess;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onFinishSentenceFail;
    uint8_t _pad_2[0x8];
};




struct SCharacterCustomizerRandomizationOverrideParams {
    uint8_t _pad_0[0x8];
    struct SCharacterCustomizerFeatureBase* feature;
    uint8_t _pad_1[0x8];
    struct SCharacterCustomizerRandomizationParams* randomizationParams;
    uint8_t _pad_2[0x8];
};




struct UsableStateModifier {
    uint8_t _pad_0[0x8];
    struct UsableUseChannelInstance* useChannel;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onStartUsing;
    uint8_t _pad_2[0x8];
    struct SInteractionState* onIdle;
    uint8_t _pad_3[0x8];
    struct SInteractionState* onStopUsing;
    uint8_t _pad_4[0x8];
    struct SInteractionState* onDormant;
    uint8_t _pad_5[0x8];
};




struct SCharacterCustomizerLoadoutItemReplacementMapping {
    uint8_t _pad_0[0x8];
    _Bool networkOnly;
    uint8_t _pad_1[0x7];
    struct CryStringT* oldItemGUID;
    uint8_t _pad_2[0x8];
    struct EntityClassDefinition* newItem;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_BindingsVariableInput {
    uint8_t _pad_0[0x8];
    struct CryStringT* binding;
    uint8_t _pad_1[0x8];
};




struct SChargeDrainRangeParams {
    uint8_t _pad_0[0x8];
    float maxBeamDistance;
    float maxSensorDistance;
    float maxVoltBoostDistance;
    uint8_t _pad_1[0x4];
};




struct SandboxInfractionBaseDef {
    uint8_t _pad_0[0x8];
};




struct EntityTemperatureResourceHeatGeneration {
    uint8_t _pad_0[0x8];
    struct ItemResourceState* state;
    uint8_t _pad_1[0x8];
    float baselineTemperatureChange;
    uint8_t _pad_2[0x4];
};




struct HaulingOrder_DropOff {
    uint8_t _pad_0[0x8];
    struct ObjectivePropertyBase* pickUpLocation;
    uint8_t _pad_1[0x8];
    struct ObjectivePropertyBase* dropOffLocation;
    uint8_t _pad_2[0x8];
    struct ObjectiveProperty_Input* collectedCargoInput;
    uint8_t _pad_3[0x8];
};




struct SReputationScopeParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* scopeName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* description;
    struct CryStringT* icon;
    uint8_t _pad_2[0x8];
    struct SReputationStandingMapParams* standingMap;
    uint8_t _pad_3[0x58];
};




struct InteractionConditionOR {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct InteractionConditionParams* firstCondition;
    uint8_t _pad_2[0x8];
    struct InteractionConditionParams* secondCondition;
    uint8_t _pad_3[0x8];
};




struct JournalEntryText {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* BodyText;
};




struct SecurityClearance_OutfitRequirementDef {
    uint8_t _pad_0[0x8];
};




struct STerminalLoginGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool login;
    uint8_t _pad_1[0x7];
};




struct SIObjectives {
    uint8_t _pad_0[0x18];
};




struct SProjectedHudParams {
    uint8_t _pad_0[0x8];
    struct SProjectedPitchLadderParams* pitchLadder;
    uint8_t _pad_1[0x38];
    struct SProjectedYawLineParams* yawLine;
    uint8_t _pad_2[0x38];
    struct SProjectedDisplayParams* display;
    uint8_t _pad_3[0x10];
    _Bool coilArrowShow;
    uint8_t _pad_4[0x3];
    float coilArrowOffsetAngle;
    _Bool coilArrowRotatesToTarget;
    uint8_t _pad_5[0x7];
};




struct SInteractionConditionMovableMover {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    _Bool requireMover;
    uint8_t _pad_2[0x7];
};




struct WorldDisplayRadar_Icon {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float size;
    struct SimpleSpriteSlot* spriteSlot;
    uint8_t _pad_2[0x20];
};




struct SendLandingGearObstructedEvent {
    uint8_t _pad_0[0x8];
    _Bool obstructed;
    uint8_t _pad_1[0x7];
};




struct SMannequinActionDef_PowerSuit {
    uint8_t _pad_0[0x8];
    float turnOnSpotTriggerAimYaw;
    uint8_t _pad_1[0x4];
};




struct AnimatedAction {
    uint8_t _pad_0[0x8];
    struct InputAction* name;
    uint8_t _pad_1[0x28];
    enum ARDataType playerActionAnimType;
    uint8_t _pad_2[0x4];
};




struct PlayerTradeInterfaceParams {
    uint8_t _pad_0[0x18];
};




struct JumpDriveTravelParams {
    uint8_t _pad_0[0x8];
    float interactionStartDistance;
    float reactionBurstTriggerDistance;
    struct Range* tunnelResponseDistanceAheadRange;
    uint8_t _pad_1[0x8];
};




struct SBindingTriggerGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct CryStringT* triggerName;
    uint8_t _pad_1[0x8];
};




struct SAccoladeRequirementWatchedStat {
    uint8_t _pad_0[0x8];
    enum ARDataType statsType;
    enum ARDataType playerState;
    struct EntityClassDefinition* entityClassGUID;
    uint8_t _pad_1[0x10];
};




struct ContractClass_ServiceBeacon {
    uint8_t _pad_0[0x8];
    struct ServiceBeaconBaseTemplateParams* params;
    uint8_t _pad_1[0x8];
};




struct VideoCommsShaderParams {
    uint8_t _pad_0[0x8];
    struct BezierCurve* fadeInSplineHighTech;
    uint8_t _pad_1[0x88];
    struct BezierCurve* fadeOutSplineHighTech;
    uint8_t _pad_2[0x88];
    struct BezierCurve* switchCommsSplineHighTech;
    uint8_t _pad_3[0x88];
    struct BezierCurve* fadeInSplineLowTech;
    uint8_t _pad_4[0x88];
    struct BezierCurve* fadeOutSplineLowTech;
    uint8_t _pad_5[0x88];
    struct BezierCurve* switchCommsSplineLowTech;
    uint8_t _pad_6[0x88];
    struct CryStringT* lowTechMaterial;
    uint8_t _pad_7[0x8];
    struct CryStringT* highTechMaterial;
    uint8_t _pad_8[0x8];
};




struct AnimationControlActorIK {
    uint8_t _pad_0[0x8];
    struct CryStringT* limb;
    uint8_t _pad_1[0x8];
    struct CryStringT* bone;
    uint8_t _pad_2[0x8];
    float blendTime;
    _Bool alignEndEffector;
    uint8_t _pad_3[0x3];
};




struct CaptureAreaUIParams {
    uint8_t _pad_0[0x18];
    _Bool hidden;
    _Bool outdoorAreaUI;
    uint8_t _pad_1[0x2];
    float timeToLoop;
    int32_t gridLayerCount;
    uint8_t _pad_2[0x4];
    struct Vec3* dimensions;
    uint8_t _pad_3[0x10];
    float drawFarDistance;
    float gridAreaHeightPerc;
    float baseLineWidthPerc;
    float basePaddingInnerPerc;
    float baseOffset;
    float baseAlpha;
    float baseNoisePower;
    float gridLineWidthPerc;
    float gridHighlightFeatherPerc;
    float gridFalloffPerc;
    float gridPaddingInnerPerc;
    uint8_t _pad_4[0x4];
    struct AreaOutdoorMaterialParams* indoorAreaParams;
    uint8_t _pad_5[0x10];
    struct AreaOutdoorMaterialParams* outdoorAreaParams;
    uint8_t _pad_6[0x10];
    struct CryStringT* baseLineMaterial;
    uint8_t _pad_7[0x8];
    struct CryStringT* beamMaterial;
    uint8_t _pad_8[0x8];
    struct CryStringT* gridLineMaterial;
    uint8_t _pad_9[0x8];
};




struct FireHazardGlobalPropagation {
    uint8_t _pad_0[0x8];
    float fireMassThreshold;
    float radiativeFactor;
    float minimumHeatIntensityOutput;
    float maximumRadiationRadius;
    float maximumConvectionDistance;
    float standardConvectionTemperature;
    struct Range* oxygenPressureRange;
    uint8_t _pad_1[0x8];
};




struct CommsNotification {
    uint8_t _pad_0[0x8];
    struct TagList* tags;
    uint8_t _pad_1[0x30];
    struct CommunicationName* communicationName;
    uint8_t _pad_2[0x10];
    struct EntityClassDefinition* fakeCommsAudioEntityClass;
    uint8_t _pad_3[0x10];
};




struct DataSetMatchCondition_ExcludeProperty {
    uint8_t _pad_0[0x8];
    struct MissionProperty* excludedProperty;
    uint8_t _pad_1[0x8];
};




struct SCItemControlPriorityCustomValue {
    uint8_t _pad_0[0x8];
    uint8_t priority;
    uint8_t _pad_1[0x7];
};




struct ControlHintCondition_ActorAbilityActive {
    uint8_t _pad_0[0x8];
    enum ARDataType ability;
    uint8_t _pad_1[0x4];
};




struct SSCMusicAreaTriggerComponentParams {
    uint8_t _pad_0[0x18];
};




struct EntityDefaultLoadoutParams {
    uint8_t _pad_0[0x8];
    struct SItemPortLoadoutBaseParams* loadout;
    uint8_t _pad_1[0x8];
};




struct ActorObservableExtender {
    uint8_t _pad_0[0x8];
};




struct SNodeSwapExpansionParams {
    uint8_t _pad_0[0x8];
    int32_t priority;
    float chance;
    float cooldown;
    _Bool cooldownOnFailure;
    uint8_t _pad_1[0x3];
};




struct AsteroidBehavior {
    uint8_t _pad_0[0x8];
    struct Behavior_VehicleEffectParams* vehicleEffects;
    uint8_t _pad_1[0x18];
    struct AsteroidBehavior_WeatherParams* weather;
    uint8_t _pad_2[0x8];
    struct Tag* asteroidEnvironmentTag;
    uint8_t _pad_3[0x10];
    struct AudioRtpc* asteroidDensityRtpc;
    uint8_t _pad_4[0x18];
};




struct SDamageCurveParams {
    uint8_t _pad_0[0x8];
    enum ARDataType curveStartPoint;
    enum ARDataType curveEndPoint;
    float startPointOffset;
    float endPointOffset;
};




struct CinematicFlythroughPoint {
    uint8_t _pad_0[0x8];
    struct Vec3* position;
    uint8_t _pad_1[0x10];
    struct Quat* rotation;
    uint8_t _pad_2[0x28];
    float duration;
    enum ARDataType relativeTo;
    struct CameraTransitionInterpolationCurveRecord* interpolationToPoint;
    uint8_t _pad_3[0x10];
};




struct VehicleAITargetingParams {
    uint8_t _pad_0[0x8];
    float shipAttackerScore;
    float turretAttackerScore;
};




struct TimeValue_Partitioned {
    uint8_t _pad_0[0x8];
    int32_t days;
    int32_t hours;
    int32_t minutes;
    float seconds;
};




struct InteractionConditionEntityTags {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct TagsDNFTerm* tags;
    uint8_t _pad_2[0x60];
    _Bool CheckParent;
    uint8_t _pad_3[0x7];
};




struct UnitTest_ClassA {
    uint8_t _pad_0[0x8];
    struct CryStringT* myBaseString;
    uint8_t _pad_1[0x8];
    struct CryStringT* myClassA;
    uint8_t _pad_2[0x8];
};




struct TQSInput {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
};




struct SSpawnProtectionBarrierParams {
    uint8_t _pad_0[0x18];
    struct Faction_LEGACY* team;
    uint8_t _pad_1[0x10];
    int32_t phase;
    int32_t deadZoneInactiveTime;
};




struct EAPickupModule {
    uint8_t _pad_0[0x18];
    _Bool ballisticPersistence;
    uint8_t _pad_1[0x7];
    struct EAPickupBallisticsParams* ballisticsPickupParams;
    uint8_t _pad_2[0x30];
    _Bool missilePersistence;
    uint8_t _pad_3[0x7];
    struct EAPickupMissilesParams* missilesPickupParams;
    uint8_t _pad_4[0x28];
    struct EAPickupFuelParams* fuelPickupParams;
    uint8_t _pad_5[0x28];
    struct EAPickupRepairParams* repairPickupParams;
    uint8_t _pad_6[0x28];
    struct EAPickupKillConfirmedParams* killConfirmedParams;
    uint8_t _pad_7[0x28];
};




struct IObservableExtender {
    uint8_t _pad_0[0x8];
};




struct SWeaponAIChargedParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType aiShootingMode;
    uint8_t _pad_2[0x7];
    struct Range* chargeDurationInterval;
    uint8_t _pad_3[0x8];
    _Bool fireOnFullyCharged;
    uint8_t _pad_4[0x3];
    float chargeDurationBeforeCoverAction;
};




struct ActorStatusPreset {
    uint8_t _pad_0[0x8];
    struct StatusEffectSetup* effectSetup;
    uint8_t _pad_1[0x30];
};




struct ActorGForceCameraEffects {
    uint8_t _pad_0[0x8];
    _Bool effectsOnlyAppliedForward;
    uint8_t _pad_1[0x3];
    float gForceBoostAngleOuter;
    float gForceBoostAngleInner;
    float gForceBoostMin;
    float gForceBoostMax;
    float gForceBoostFOV;
    float focusDistance;
    uint8_t _pad_2[0x4];
    struct CameraEffectsModifiers* genericModifiers;
    uint8_t _pad_3[0x150];
};




struct BuildingBlocks_ComponentParameterInputNumber {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
    float value;
    uint8_t _pad_2[0x4];
};




struct UIInteriorMapLabelParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* name;
    float textScale;
    float maxWidth;
};




struct AISeatDashboardControllerComponentParams {
    uint8_t _pad_0[0x18];
};




struct SRecoilModifier {
    uint8_t _pad_0[0x8];
    float decayMultiplier;
    float endDecayMultiplier;
    float fireRecoilTimeMultiplier;
    float fireRecoilStrengthFirstMultiplier;
    float fireRecoilStrengthMultiplier;
    float angleRecoilStrengthMultiplier;
    float randomnessMultiplier;
    float randomnessBackPushMultiplier;
    float frontalOscillationRotationMultiplier;
    float frontalOscillationStrengthMultiplier;
    float frontalOscillationDecayMultiplier;
    float frontalOscillationRandomnessMultiplier;
    float animatedRecoilMultiplier;
    uint8_t _pad_1[0x4];
    struct Vec3* headRotationMultiplier;
    uint8_t _pad_2[0x10];
    struct SAimRecoilModifier* aimRecoilModifier;
    uint8_t _pad_3[0xb8];
    struct SActorProceduralHandsRecoilCurveModifiersDef* curveRecoil;
    uint8_t _pad_4[0x170];
    struct SWeaponProceduralHeadRecoilCurveModifierDef* curveRecoilHead;
    uint8_t _pad_5[0x80];
};




struct ConsumableEffectResource {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* effectDescription;
    enum ARDataType consumableResourceType;
    float amount;
};




struct SLocomotionPersonalityStateFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    enum ARDataType filterByLocomotionSet;
    uint8_t _pad_2[0x4];
    struct CryStringT* filterByMannequinGlobalTags;
    uint8_t _pad_3[0x8];
};




struct ScanDisplayContactTypeVariableParams {
    uint8_t _pad_0[0x8];
    uint8_t truncateSize;
    _Bool displayIsHidden;
    _Bool displayInBrackets;
    _Bool suffixArrayIndex;
    _Bool suffixSemiColon;
    enum ARDataType auxiliaryFlag;
    uint8_t _pad_1[0x2];
    struct ScanDisplayVariableParams* fallback_;
    uint8_t _pad_2[0x8];
};




struct AISeatShieldControllerComponentParams {
    uint8_t _pad_0[0x18];
};




struct EAEntityMarkerComponentParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    struct CryStringT* iconPath;
    uint8_t _pad_1[0x8];
    enum ARDataType markerType;
    uint8_t _pad_2[0x4];
    struct Faction_LEGACY* factionTag;
    uint8_t _pad_3[0x10];
    float activeDistanceTreshold;
    float boxRadius;
    float fovModifier;
    uint8_t _pad_4[0x4];
    struct Vec3* offset;
    uint8_t _pad_5[0x10];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeLayoutPolicy {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SItemPortRule_TriggerSequenceDef {
    uint8_t _pad_0[0x8];
    struct SSequencerDefSequenceParams* triggerSequence;
    uint8_t _pad_1[0x8];
};




struct UIGraph_BuildingBlocksContextComponent {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_1[0x10];
    _Bool isSystemViewInstance;
    uint8_t _pad_2[0x7];
};




struct RadarDisplayEntryEffects_Config {
    uint8_t _pad_0[0x8];
    float activatePingDuration;
    float activatePingMaxSize;
    float activatePingRelativeColorChange;
    float fadeOutDuration;
    float fadeOutLineOutStart;
    uint8_t _pad_1[0x4];
};




struct CameraTransitionParams {
    uint8_t _pad_0[0x8];
    float transitionTime;
    _Bool isCinematic;
    uint8_t _pad_1[0x3];
    float nearFaceDistanceSq;
    uint8_t _pad_2[0x4];
    struct CameraTransitionInterpolationCurveRecord* interpolationToPoint;
    uint8_t _pad_3[0x10];
};




struct SSCActorPhysicsControllerComponentParams {
    uint8_t _pad_0[0x18];
    struct SEntityBasePhysicsControllerParams* physType;
    uint8_t _pad_1[0x8];
};




struct SEntityDensityClass {
    uint8_t _pad_0[0x8];
    float clusterDetectionRadius;
    uint32_t clusterUpperObjectCountDGS;
    uint32_t clusterUpperObjectCountPersistence;
    float clusterPersistenceTimeout;
    float entityMaxIdleLifeTime;
    _Bool entityIdleBuryOnly;
    uint8_t _pad_1[0x3];
    struct TimeValue_Base* vehicleUnattendedCleanupTime;
    uint8_t _pad_2[0x8];
};




struct ResourceTypeMolarMass {
    uint8_t _pad_0[0x8];
    float molarMass;
    uint8_t _pad_1[0x4];
};




struct Vec3 {
    uint8_t _pad_0[0x8];
    float x;
    float y;
    float z;
    uint8_t _pad_1[0x4];
};




struct EAUIMarkerBaseComponent {
    uint8_t _pad_0[0x18];
    struct MarkerAR_ConfigDef* ARMarkerConfig;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* distanceUnits;
    float ARMarkerAlpha;
    _Bool scaleMarkerByDistance;
    uint8_t _pad_2[0x3];
    float minScaleDistance;
    float maxScaleDistance;
    float minSize;
    float maxSize;
    _Bool allowClipping;
    uint8_t _pad_3[0x7];
};




struct ActorLookAheadPoint {
    uint8_t _pad_0[0x8];
    struct Vec2* limitYawMinMax;
    uint8_t _pad_1[0x8];
    struct Vec2* limitPitchMinMax;
    uint8_t _pad_2[0x8];
    struct Vec2* thresholdYawMinMax;
    uint8_t _pad_3[0x8];
    struct Vec2* thresholdPitchMinMax;
    uint8_t _pad_4[0x8];
    float multiplierYaw;
    float multiplierPitch;
    float defaultWeight;
    float statusSwapTime;
    _Bool respectsDampeningZone;
    uint8_t _pad_5[0x3];
    float dampeningZoneSize;
    _Bool enabled;
    uint8_t _pad_6[0x2f];
};




struct LegacyCraftingRecipeDefRecord {
    uint8_t _pad_0[0x8];
    struct LegacyCraftingRecipe_Base* recipe;
    uint8_t _pad_1[0x8];
};




struct EAPickupFPSParams {
    uint8_t _pad_0[0x8];
    int32_t duration;
    float acquireRadius;
    float spawnRadius;
    float initialScale;
    float beginScalingDistance;
    float rotationSpeed;
    _Bool alternativeRotationAxis;
    _Bool enableCurveOffset;
    uint8_t _pad_1[0x2];
    float curveOffsetSpeed;
    float curveOffsetAmplitude;
    float maxScale;
    float multiplierSuppression;
    uint8_t _pad_2[0x4];
    struct Vec3* assetRotation;
    uint8_t _pad_3[0x10];
};




struct RadarSharedParams {
    uint8_t _pad_0[0x8];
    float maxPassiveDistance;
    _Bool useRoomGraphForPassiveDetection;
    uint8_t _pad_1[0x3];
};




struct SJumpTunnelVisualParams {
    uint8_t _pad_0[0x8];
    _Bool quantumEffect;
    uint8_t _pad_1[0x3];
    float portalExternalViewDistRatio;
    float portalInternalViewDistRatio;
    float visAreaViewDistRatio;
    float probeIntensity;
    float internalDrawDistance;
    float externalDrawDistance;
    float openingHiddenTime;
    float closingHiddenTime;
    float exitPortalCullingDistance;
};




struct BuildingBlocks_StaticVariableInteger {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    int64_t value;
};




struct ExtendedNameEntryTextLocalized {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
};




struct DefaultActionsEntityState_HasAvailableCommsTap {
    uint8_t _pad_0[0x8];
};




struct SCarryableIKInteraction {
    uint8_t _pad_0[0x8];
    struct CryStringT* helperName;
    uint8_t _pad_1[0x8];
    struct CryStringT* cdikTargetName;
    uint8_t _pad_2[0x8];
    struct QuatT* targetOffset;
    uint8_t _pad_3[0x50];
};




struct DefaultPlayerLoadoutEntitlementParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    uint32_t LoadoutId;
    enum ARDataType Entitlement;
    struct SItemPortLoadoutBaseParams* Loadout;
    uint8_t _pad_2[0x8];
};




struct MusicLogicSwitchValue {
    uint8_t _pad_0[0x8];
    struct CryStringT* switchValue;
    uint8_t _pad_1[0x18];
};




struct ContactHighlightStateParams {
    uint8_t _pad_0[0x8];
    struct ContactHighlightStateBaseParams* defaultParams;
    uint8_t _pad_1[0x8];
    struct ContactHighlightStateBaseParams* occludedParams;
    uint8_t _pad_2[0x8];
};




struct ElevatorEffectParams {
    uint8_t _pad_0[0x8];
    struct Tag* startTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* stopTrigger;
    uint8_t _pad_2[0x10];
    struct Tag* rampUpTrigger;
    uint8_t _pad_3[0x10];
    struct Tag* fullSpeedTrigger;
    uint8_t _pad_4[0x10];
    struct Tag* rampDownTrigger;
    uint8_t _pad_5[0x10];
    struct Tag* inTransitTag;
    uint8_t _pad_6[0x10];
    struct Tag* powerUpTrigger;
    uint8_t _pad_7[0x10];
    struct Tag* powerDownTrigger;
    uint8_t _pad_8[0x10];
};




struct MissionModifier_SecurityClearance {
    uint8_t _pad_0[0x8];
    struct CryStringT* modifierName;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x1f];
    struct SecurityClearanceToken* clearanceToken;
    uint8_t _pad_3[0x10];
    struct MissionProperty* locationProperty;
    uint8_t _pad_4[0x8];
};




struct SPlayerObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct SMisfireCondition {
    uint8_t _pad_0[0x8];
};




struct SCLensAnimationParams {
    uint8_t _pad_0[0x18];
    float wakeUpDelayTime;
    float sleepDelayTime;
    float activateLensDelayTime;
    float deactivateLensDelayTime;
    float activateVisorDelayTime;
    float deactivateVisorDelayTime;
    float dashboardStartUseDelayTime;
    float dashboardStopUseDelayTime;
};




struct SMobiGlasAppDataPacketBase {
    uint8_t _pad_0[0x8];
};




struct BlockedHintParams {
    uint8_t _pad_0[0x8];
    struct HintTriggerData* hintTrigger;
    uint8_t _pad_1[0x10];
};




struct SWeaponReticleParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* defaultReticle;
    uint8_t _pad_1[0x8];
    struct CryStringT* adsReticle;
    uint8_t _pad_2[0x10];
};




struct LegacyCraftingOutput_Base {
    uint8_t _pad_0[0x8];
};




struct STargetingParams {
    uint8_t _pad_0[0x8];
    enum ARDataType trackingSignalType;
    float trackingSignalMin;
    float lockSignalAmplifier;
    float lockTime;
    float lockingAngle;
    float minRatioForLock;
    float lockIncreaseRate;
    float lockDecreaseRate;
    float lockRangeMin;
    float lockRangeMax;
    float lockResolutionRadius;
    float signalResilienceMin;
    float signalResilienceMax;
    _Bool allowDumbFiring;
    uint8_t _pad_1[0x3];
    int32_t maxTimesCanMiss;
    uint8_t _pad_2[0x4];
    struct SDynamicLaunchZoneDef* dynamicLaunchZoneRecord;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_EntityRendererPolicy {
    uint8_t _pad_0[0x8];
    _Bool sortViaPivot;
    _Bool includeInGroundingEffects;
    uint8_t _pad_1[0x6];
};




struct CraftingResearchUnlock_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct SBurstMisfireEffect {
    uint8_t _pad_0[0x8];
    struct Tag* effectTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* effectTag;
    uint8_t _pad_2[0x10];
    float forcedThrottle;
    float signatureModifier;
    float offlineTimeToFix;
    uint8_t _pad_3[0x4];
};




struct SOrdnanceEmissionsParams {
    uint8_t _pad_0[0x8];
    _Bool active;
    uint8_t _pad_1[0x3];
    float minValue;
    float maxValue;
    float riseRate;
    float decayRate;
    uint8_t _pad_2[0x4];
};




struct SWeaponActionFireTractorBeamTowingParams {
    uint8_t _pad_0[0x8];
    float towingForce;
    float towingMaxAcceleration;
    float towingMaxDistance;
    float towDeflectionPlayerCoef;
    float towDeflectionMaxForce;
    float towDeflectionAllPushAngle;
    float towDeflectionBlendFactor;
    float towDeflectionMaxAngleForce;
    float towPivotMaxForceCoef;
    float towPivotStaticDampForce;
    float towPivotBlendFactor;
    float towPivotAllPushAngle;
    float towPivotMaxAngleForce;
    float towPivotPushMaxAngularVelocity;
    float towForceRamp;
    float towForceTetherOverMax;
    float towForcePlaneDecel;
    float quantumTowMassLimit;
};




struct GlobalResourceSkin {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct SCItemControllableParams {
    uint8_t _pad_0[0x10];
};




struct GeomFont_LetterNode {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    uint16_t code;
    uint8_t _pad_2[0x6];
};




struct SInteractionPointCuboidPrimitiveParams {
    uint8_t _pad_0[0x8];
    struct Vec3* Center;
    uint8_t _pad_1[0x10];
    struct Vec3* Size;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_NumberTextFormatModifier {
    uint8_t _pad_0[0x8];
    enum ARDataType field;
    float value;
};




struct RestockService {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct CLocIdentifier* productName;
    struct CryStringT* icon;
    uint8_t _pad_1[0x8];
    float serviceDelayTime;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* hudMessage;
    uint8_t _pad_3[0x8];
    struct ResourceType* AmmoCommodity;
    uint8_t _pad_4[0x10];
};




struct SMovableGrip {
    uint8_t _pad_0[0x8];
    struct CryStringT* gripName;
    uint8_t _pad_1[0x8];
    enum ARDataType canBeUsedBy;
    enum ARDataType handMode;
    struct SGrip* handGrip;
    uint8_t _pad_2[0xa8];
    struct SGrip* offHandGrip;
    uint8_t _pad_3[0x8];
    struct QuatT* userOffset;
    uint8_t _pad_4[0x50];
    float width;
    _Bool AllowStrafe;
    _Bool AllowPush;
    _Bool AllowPull;
    uint8_t _pad_5[0x1];
    struct SInteractionPointParams* interactionPoint;
    uint8_t _pad_6[0x8];
};




struct SServiceBeaconCreatorParams {
    uint8_t _pad_0[0x8];
    struct MissionBrokerEntry* missionEntry;
    uint8_t _pad_1[0x10];
};




struct CargoInterfaceParams {
    uint8_t _pad_0[0x18];
};




struct HospitalCheckinScreenComponentParams {
    uint8_t _pad_0[0x18];
};




struct SSCActorInteractorComponentParams {
    uint8_t _pad_0[0x18];
};




struct HitConsistencyParams {
    uint8_t _pad_0[0x8];
    float hitHistoryWindow;
    float standardDeviationMultiplier;
    float timeExponent;
    float minDeviation;
    float extractionMagnitude;
    float maxEffectOnInstability;
};




struct SSCLocalPlayerAimControlComponentParams {
    uint8_t _pad_0[0x18];
};




struct SSequencerDefInteractionTaskParams {
    uint8_t _pad_0[0x20];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_BindingsColorFromIntegerRGBA {
    uint8_t _pad_0[0x50];
    int64_t defaultRedValue;
    int64_t defaultGreenValue;
    int64_t defaultBlueValue;
    int64_t defaultAlphaValue;
    struct BuildingBlocks_BindingsIntegerBase* inputRed;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsIntegerBase* inputGreen;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsIntegerBase* inputBlue;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_BindingsIntegerBase* inputAlpha;
    uint8_t _pad_4[0x148];
};




struct SExitInteractionGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct WeaponProceduralRecoilConfigDef {
    uint8_t _pad_0[0x8];
    struct SWeaponProceduralHandsRecoilConfigDef* weaponProceduralHandsRecoil;
    uint8_t _pad_1[0x2b8];
    struct SWeaponProceduralAimRecoilConfigDef* weaponProceduralAimRecoil;
    uint8_t _pad_2[0xf8];
    struct SWeaponProceduralBodyRecoilConfigDef* weaponProceduralBodyRecoil;
    uint8_t _pad_3[0x20];
    struct SWeaponProceduralHeadRecoilConfigDef* weaponProceduralHeadRecoil;
    uint8_t _pad_4[0x118];
};




struct ItemPreview_LightIntensities {
    uint8_t _pad_0[0x8];
    float keyLightTopIntensity;
    float fillLightTopIntensity;
    float rimLightTopIntensity;
    float keyLightBottomIntensity;
    float fillLightBottomIntensity;
    float rimLightBottomIntensity;
};




struct GameTokenContainerParams {
    uint8_t _pad_0[0x18];
};




struct BindingsOperations_WaveformShapeSine {
    uint8_t _pad_0[0x8];
};




struct LinkedStatSetupBase {
    uint8_t _pad_0[0x8];
};




struct ExtinguishType_Sphere {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
};




struct SCItemClothingTemperatureResistanceParams {
    uint8_t _pad_0[0x8];
    float MinResistance;
    float MaxResistance;
};




struct BuildingBlocks_FieldModifierNumber {
    uint8_t _pad_0[0x8];
    enum ARDataType field;
    float value;
};




struct SMobiGlasPersonalStatusSkillsEntry {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* description;
    enum ARDataType displayType;
    uint8_t _pad_1[0x4];
    struct CryStringT* displayImage;
    uint8_t _pad_2[0x8];
};




struct PlanetOceanDepthAssignment {
    uint8_t _pad_0[0x8];
    float waterDepth;
    uint8_t _pad_1[0x4];
    struct GlobalResourceAudio* assignmentStartTrigger;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* assignmentStopTrigger;
    uint8_t _pad_3[0x18];
    float recalculationDistance;
    uint8_t _pad_4[0x4];
};




struct FoleyBone {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct ControlHintCondition_ActorEnvironment {
    uint8_t _pad_0[0x8];
    enum ARDataType environmentState;
    uint8_t _pad_1[0x6];
};




struct SCItemDockingTubeParams {
    uint8_t _pad_0[0x18];
    _Bool IgnoreRootEntityGeometry;
    uint8_t _pad_1[0x3];
    float CaptureRadius;
    float MaximumPreDockingAutopilotOffset;
    _Bool AutoRegisterWithATC;
    _Bool PreventsQuantumTravel;
    uint8_t _pad_2[0x2];
    enum ARDataType CanBeUsedBy;
    uint8_t _pad_3[0x4];
    struct CLocIdentifier* HUDDisplayName;
    int32_t ATCPriority;
    _Bool ExtendDockeeLandingGear;
    uint8_t _pad_4[0x3];
    float AutodockTiltOffset;
    uint8_t _pad_5[0x4];
    struct GlobalResourceAudio* dockedPlayEvent;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* undockInitiatedPlayEvent;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* undockedPlayEvent;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* undockedAndShipFreePlayEvent;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* autoDockingEngaged;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* autoDockingDisengaged;
    uint8_t _pad_11[0x18];
    struct Tag* stateTagWhenAvailable;
    uint8_t _pad_12[0x10];
};




struct SSCDamageHandling {
    uint8_t _pad_0[0x18];
    _Bool damageDisabled;
    uint8_t _pad_1[0x7];
    _Bool bulletsInstaKillActors;
    uint8_t _pad_2[0x7];
};




struct SActorStanceHeadSphereDef {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
    struct Vec3* defaultOrigin;
    uint8_t _pad_2[0x10];
    _Bool keepOriginOffsetInZoneSpace;
    uint8_t _pad_3[0x7];
};




struct BaseService {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct CLocIdentifier* productName;
    struct CryStringT* icon;
    uint8_t _pad_1[0x8];
    float serviceDelayTime;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* hudMessage;
    uint8_t _pad_3[0x8];
};




struct SMeleeComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* helper;
    uint8_t _pad_1[0x8];
    struct CryStringT* audioTriggerName;
    uint8_t _pad_2[0x8];
    struct CryStringT* matFxTriggerName;
    uint8_t _pad_3[0x8];
    _Bool canBeUsedForTakeDown;
    uint8_t _pad_4[0x7];
    struct WeaponProceduralAnimation* proceduralAnimationRecord;
    uint8_t _pad_5[0x10];
    _Bool canBlock;
    _Bool canBeUsedInProne;
    _Bool canDodge;
    uint8_t _pad_6[0x1];
    float stanceTransitionMeleeDelay;
    struct MeleeCombatConfig* meleeCombatConfig;
    uint8_t _pad_7[0x10];
};




struct ActorSkeletonConfig {
    uint8_t _pad_0[0x8];
    struct LocomotionAnimSyncConfig* locomotionAnimSyncConfig;
    uint8_t _pad_1[0x50];
    struct RagdollRecoveryConfig* ragdollRecoveryConfig;
    uint8_t _pad_2[0x68];
    struct ActorFootJointPairDef* estimatedCyclePhaseFootConfig;
    uint8_t _pad_3[0x28];
    struct ActorFootJointPairDef* preciseCyclePhaseFootConfig;
    uint8_t _pad_4[0x28];
    struct ActorMeleeDef* meleeConfig;
    uint8_t _pad_5[0x18];
};




struct DrugEfficacyConfigForItemSubTypeBase {
    uint8_t _pad_0[0x8];
    enum ARDataType itemSubType;
    uint8_t _pad_1[0x4];
};




struct FloatFactorRange {
    uint8_t _pad_0[0x8];
    float min;
    float max;
};




struct ConversationNode_ConditionalGameToken {
    uint8_t _pad_0[0x8];
    struct ConversationNode_Base* next;
    uint8_t _pad_1[0x8];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
};




struct FoleyAxis {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct ResourceHealthHandlerParams {
    uint8_t _pad_0[0x18];
};




struct AttachableStateModifierContext_Self {
    uint8_t _pad_0[0x8];
};




struct SEntityTraversingTargetPath {
    uint8_t _pad_0[0x8];
    struct SEntityTraversingNodeBase* node;
    uint8_t _pad_1[0x8];
};




struct MedicalSkeletonUIProviderParams {
    uint8_t _pad_0[0x18];
};




struct CraftingCost_Base_Material {
    uint8_t _pad_0[0x8];
};




struct AtmosphereState {
    uint8_t _pad_0[0x8];
    enum ARDataType pressureMod;
    float pressure;
    enum ARDataType temperatureMod;
    float temperature;
    enum ARDataType humidityMod;
    float humidity;
};




struct BuildingBlocks_BindingsIntegerComponentParameter {
    uint8_t _pad_0[0x50];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType parameter;
    uint8_t _pad_2[0x4];
    int64_t defaultValue;
    uint8_t _pad_3[0x8];
};




struct RadiationStateBase {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionAccessReservedRoom {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct ProcAimBaseJointTypeConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* jointName;
    uint8_t _pad_1[0x8];
};




struct VisualStateParams {
    uint8_t _pad_0[0x8];
    float wear;
    float dirt;
    float interference;
    float damage;
};




struct BuildingBlocks_BindingsStringFromBooleanCanvas {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_Canvas* isTrue;
    uint8_t _pad_1[0x10];
    struct BuildingBlocks_Canvas* isFalse;
    uint8_t _pad_2[0x10];
    struct BuildingBlocks_BindingsStringBase* inputTrue;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_BindingsStringBase* inputFalse;
    uint8_t _pad_4[0x8];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_5[0xf8];
};




struct SSequencerEntityDragTaskParams {
    uint8_t _pad_0[0x20];
};




struct SubHarvestableMultiConfigManual {
    uint8_t _pad_0[0x8];
    struct SubHarvestableMultiConfig* multiConfigManual;
    uint8_t _pad_1[0x48];
};




struct SSequencerDespawnerTaskParams {
    uint8_t _pad_0[0x20];
};




struct SCActorDNAComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* DNA;
    uint8_t _pad_1[0x8];
    struct CryStringT* customizationFile;
    uint8_t _pad_2[0x8];
};




struct SHackingAIDecisionParams {
    uint8_t _pad_0[0x8];
    int32_t priority;
    float chance;
    float cooldown;
    _Bool cooldownOnFailure;
    uint8_t _pad_1[0x3];
};




struct VectorFieldParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
    float maxStrength;
    uint8_t _pad_2[0x4];
    struct Range* speedRange;
    uint8_t _pad_3[0x8];
    float maxMass;
    float speedBiasController;
    struct Vec3* posOffset;
    uint8_t _pad_4[0x10];
    struct Vec3* size;
    uint8_t _pad_5[0x10];
    _Bool respectAspectRatio;
    uint8_t _pad_6[0x7];
};




struct DynamicPowerPool {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
};




struct MarkerTrackingBoxoutParameters {
    uint8_t _pad_0[0x8];
    float maxLifetime;
    float maxTargetedLifetime;
    float outroTime;
    float edgeTransitionTime;
    float transitionCooldownTime;
    float edgeBounds;
    float fpsPreviewZoneSize;
    float vehiclePreviewZoneSize;
    uint8_t maxPreviews;
    uint8_t _pad_1[0x7];
};




struct SChargeDrainTargetStateOutlineParams {
    uint8_t _pad_0[0x8];
    struct SChargeDrainHighlightOutlineValues* inoperableOutlineValues;
    uint8_t _pad_1[0x28];
    struct SChargeDrainHighlightOutlineValues* jumpstartRequiredOutlineValues;
    uint8_t _pad_2[0x28];
    struct SChargeDrainHighlightOutlineValues* jumpstartPossibleOutlineValues;
    uint8_t _pad_3[0x28];
    struct SChargeDrainHighlightOutlineValues* validTargetOutlineValues;
    uint8_t _pad_4[0x28];
};




struct SecurityNetworkVariableValue_Int {
    uint8_t _pad_0[0x8];
    int32_t value;
    uint8_t _pad_1[0x4];
};




struct LandingGearStateModifier {
    uint8_t _pad_0[0x8];
    struct AttachableStateModifierContextBase* context;
    uint8_t _pad_1[0x8];
    struct SInteractionState* deploying;
    uint8_t _pad_2[0x8];
    struct SInteractionState* deployed;
    uint8_t _pad_3[0x8];
    struct SInteractionState* retracting;
    uint8_t _pad_4[0x8];
    struct SInteractionState* retracted;
    uint8_t _pad_5[0x8];
};




struct SAverageValue {
    uint8_t _pad_0[0x8];
    int32_t frameCount;
    uint8_t _pad_1[0x4];
};




struct CargoResourceAllocation {
    uint8_t _pad_0[0x8];
    struct CargoResource* resources;
    uint8_t _pad_1[0x20];
    float minResourceAllocationPercentage;
    float maxResourceAllocationPercentage;
};




struct STargetingMethodRecord {
    uint8_t _pad_0[0x8];
    struct STargetingMethodBase* targetingMethod;
    uint8_t _pad_1[0x8];
};




struct SWeaponVibrationParams {
    uint8_t _pad_0[0x8];
    float normalVibration;
    float playerVibration;
};




struct PowerConnectionStateModifier {
    uint8_t _pad_0[0x8];
    struct AttachableStateModifierContextBase* context;
    uint8_t _pad_1[0x8];
    struct SInteractionState* off;
    uint8_t _pad_2[0x8];
    struct SInteractionState* normal;
    uint8_t _pad_3[0x8];
    struct SInteractionState* warning;
    uint8_t _pad_4[0x8];
    struct SInteractionState* failed;
    uint8_t _pad_5[0x8];
};




struct GlobalResourceDBA {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct JumpSystemVibrationParams {
    uint8_t _pad_0[0x8];
    struct JumpPointVibrationParams* jumpPoint;
    uint8_t _pad_1[0x8];
    struct JumpDriveVibrationParams* jumpDrive;
    uint8_t _pad_2[0x380];
    struct JumpTunnelVibrationParams* jumpTunnel;
    uint8_t _pad_3[0x240];
};




struct LightStatusMultiplier {
    uint8_t _pad_0[0x8];
    enum ARDataType status;
    float multiplier;
};




struct SHackingAbilityParams {
    uint8_t _pad_0[0x8];
    float chargeUpTime;
    float duration;
    float cooldown;
    uint8_t _pad_1[0x4];
};




struct UIDataBankDisplay3DSpaceDustParams {
    uint8_t _pad_0[0x8];
    float sizeMultiplier;
    float minimumSize;
    float maximumSize;
    uint8_t _pad_1[0x4];
};




struct PurchasableVehicleProviderParams {
    uint8_t _pad_0[0x18];
    enum ARDataType vehicleUsageTypes;
    uint8_t _pad_1[0x4];
};




struct ConsumableContent {
    uint8_t _pad_0[0x8];
    struct ConsumableSubtype* consumableSubtype;
    uint8_t _pad_1[0x10];
    float ratio;
    uint8_t _pad_2[0x4];
};




struct SCItemVisorDisplayParams {
    uint8_t _pad_0[0x18];
    float globalConstraint;
    float topConstraintOffset;
    float rightConstraintOffset;
    float bottomConstraintOffset;
    float leftConstraintOffset;
    uint8_t _pad_1[0x4];
    struct SCItemVisorDashboardConfig* dashboardConfig;
    uint8_t _pad_2[0x10];
};




struct UsableSlottingAlignmentSlot {
    uint8_t _pad_0[0x8];
    struct AlignmentSlotBase* alignmentSlot;
    uint8_t _pad_1[0x8];
};




struct AerodynamicTrailCalculationDefault {
    uint8_t _pad_0[0x8];
};




struct SandboxInfractionDefinitionTrigger {
    uint8_t _pad_0[0x8];
    struct InfractionDefinition* sandboxInfractionDefinitionTrigger;
    uint8_t _pad_1[0x10];
};




struct LinkedStatPassValueBase {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeSvgScalingBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct RewardNotification {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool enablePrompt;
    uint8_t _pad_1[0x6];
    struct CLocIdentifier* awardNotification;
    struct CLocIdentifier* multiAwardNotification;
    struct CLocIdentifier* selectionPrompt;
    struct CLocIdentifier* shipKioskDestination;
    struct CLocIdentifier* freightElevatorDestination;
    struct CryStringT* rewardExtendedTextToken;
    uint8_t _pad_2[0x8];
    struct CryStringT* destinationLocationExtendedTextToken;
    uint8_t _pad_3[0x8];
    struct CryStringT* kioskDestinationExtendedTextToken;
    uint8_t _pad_4[0x8];
    struct CryStringT* rewardAmountExtendedTextToken;
    uint8_t _pad_5[0x8];
    struct GlobalResourceAudio* musicWwiseEvent;
    uint8_t _pad_6[0x18];
};




struct SShieldGeneratorMisfireParams {
    uint8_t _pad_0[0x8];
    float regenReductionRatio;
    float healthReductionRatio;
};




struct DirectRTT_InterferenceParams {
    uint8_t _pad_0[0x8];
    float Amount;
    float Speed;
    float Tiling;
    float Brightness;
};




struct ConversationNode_FlowGraphEvent {
    uint8_t _pad_0[0x8];
    struct ConversationNode_Base* next;
    uint8_t _pad_1[0x8];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    struct CryStringT* value;
    uint8_t _pad_3[0x8];
    _Bool waitForDone;
    uint8_t _pad_4[0x7];
};




struct SubsumptionMissionAudioComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCItemDoorSimpleOpenCloseParams {
    uint8_t _pad_0[0x8];
    float DefaultAnimationDurationScale;
    float SecondaryAnimationDurationScale;
    struct SCItemDoorUserAnimationParams* userAnimationParams;
    uint8_t _pad_1[0x8];
    struct CryStringT* OpenTag;
    uint8_t _pad_2[0x8];
    struct CryStringT* CloseTag;
    uint8_t _pad_3[0x8];
};




struct CraftingCost_Item {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    int32_t quantity;
    uint8_t _pad_2[0x4];
};




struct SSoftbodyGeometryParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* Geometry;
    uint8_t _pad_1[0x10];
    struct SEntitySoftExPhysicsControllerParams* SimulationParams;
    uint8_t _pad_2[0xb0];
};




struct JumpTunnelForcesParams {
    uint8_t _pad_0[0x8];
    float angularAccelerationLimit;
    float angularAccelerationDecay;
    float angularSpeedLimit;
    uint8_t _pad_1[0x4];
    struct BezierCurve* angularCorrectionForceCurve;
    uint8_t _pad_2[0x88];
    _Bool useAngularForces;
    uint8_t _pad_3[0x3];
    float linearAccelerationLimit;
    float linearAccelerationDecay;
    float linearSpeedLimit;
    _Bool useWallRepelForces;
    uint8_t _pad_4[0x7];
};




struct ToxiInputModifierDelay {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x3];
    float minSpeed;
    float maxSpeed;
    uint8_t _pad_2[0x4];
};




struct SSCLocalPlayerPersonalThoughtComponentParams {
    uint8_t _pad_0[0x18];
};




struct ItemModifierLifetime {
    uint8_t _pad_0[0x8];
};




struct ControlHintCondition_VehicleAutoLand {
    uint8_t _pad_0[0x8];
    enum ARDataType autoLandState;
    uint8_t _pad_1[0x7];
};




struct SDFSetParams {
    uint8_t _pad_0[0x8];
    enum ARDataType setType;
    float isoOverride;
    struct CryStringT* surfaceIdName;
    uint8_t _pad_1[0x8];
};




struct SSphereHazardAreaShapeParams {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
};




struct ScanDisplayVariableParams {
    uint8_t _pad_0[0x8];
    uint8_t truncateSize;
    _Bool displayIsHidden;
    _Bool displayInBrackets;
    _Bool suffixArrayIndex;
    _Bool suffixSemiColon;
    enum ARDataType auxiliaryFlag;
    uint8_t _pad_1[0x2];
    struct ScanDisplayVariableParams* fallback_;
    uint8_t _pad_2[0x8];
};




struct SQuantumBoostBubbleIntegrityParams_NEW {
    uint8_t _pad_0[0x8];
    float referenceAngle;
    float alignmentCrossoverPointRatio;
    struct BezierCurve* increaseValueMapping;
    uint8_t _pad_1[0x88];
    struct BezierCurve* decreaseValueMapping;
    uint8_t _pad_2[0x88];
    float bestIntegrityIncreaseTime;
    float worstIntegrityDecreaseTime;
    float collapseTime;
    uint8_t _pad_3[0x4];
    struct BezierCurve* relativeCoastSpeedFactor;
    uint8_t _pad_4[0x88];
    struct BezierCurve* relativeCapacityCostFactor;
    uint8_t _pad_5[0x88];
    struct BezierCurve* vibrationBubbleIntegrity;
    uint8_t _pad_6[0x98];
};




struct RoomExtension {
    uint8_t _pad_0[0x8];
};




struct SSCSpawningBase {
    uint8_t _pad_0[0x18];
    float respawnTimeKilled;
    _Bool pressXToRespawn;
    _Bool allowForceRespawnSuicide;
    uint8_t _pad_1[0x2];
    struct SCustomizableMaterialLookupTable* customizableMaterialsLookupTable;
    uint8_t _pad_2[0x10];
};




struct FireHazardGlobalDamageToHealthParams {
    uint8_t _pad_0[0x8];
    float minimumDamageTemperature;
    float baseDamage;
    float curveAngle;
    float curveOffset;
};




struct SubHarvestableConfigSingleManual {
    uint8_t _pad_0[0x8];
    struct SubHarvestableConfig* subConfigManual;
    uint8_t _pad_1[0x50];
};




struct SConditionalWeaponAction {
    uint8_t _pad_0[0x8];
    struct SWeaponConditionBase* condition;
    uint8_t _pad_1[0x8];
    struct SWeaponActionParams* weaponAction;
    uint8_t _pad_2[0x8];
};




struct PlacementValidator {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_PreviewSceneRttRoot {
    uint8_t _pad_0[0x10];
    enum ARDataType renderLayer;
    uint8_t _pad_1[0x7];
    float entityScale;
    uint8_t _pad_2[0x4];
    struct Deg3* entityOrientation;
    uint8_t _pad_3[0x18];
};




struct SEntityDensityClassOverwritesManual {
    uint8_t _pad_0[0x8];
    struct SEntityDensityClassOverwrites* densityOverwritesManual;
    uint8_t _pad_1[0x10];
};




struct InteractionConditionEntityIsHeldByOtherActor {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct TransitDynamicDestinationParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* Name;
    float radius;
    uint8_t _pad_1[0x4];
};




struct DockingAnimatorComponentParams {
    uint8_t _pad_0[0x18];
    struct SDockingAnimatorBaseParams* DockingAnimatorParams;
    uint8_t _pad_1[0x38];
    _Bool ProvidesExclusionArea;
    uint8_t _pad_2[0x7];
    struct Vec3* AreaExclusionDimensions;
    uint8_t _pad_3[0x10];
    _Bool OverridesDockingPoint;
    uint8_t _pad_4[0x7];
    struct CryStringT* fragment;
    uint8_t _pad_5[0x8];
    struct CryStringT* fragmentUnready;
    uint8_t _pad_6[0x8];
    struct CryStringT* fragmentUnreadying;
    uint8_t _pad_7[0x8];
    struct CryStringT* fragmentReadying;
    uint8_t _pad_8[0x8];
    struct CryStringT* fragmentReady;
    uint8_t _pad_9[0x8];
    float animationDuration;
    uint8_t _pad_10[0x4];
    struct GlobalResourceAudio* dockingArmExtendingLoopStart;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* dockingArmExtendingLoopStop;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* dockingArmRetractingLoopStart;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* dockingArmRetractingLoopStop;
    uint8_t _pad_14[0x18];
};




struct SMobiGlasSetShipRecallAllowed {
    uint8_t _pad_0[0x8];
    _Bool allowed;
    uint8_t _pad_1[0x7];
};




struct SWeaponRegenConsumerParams {
    uint8_t _pad_0[0x8];
    float initialRegenPerSec;
    float requestedAmmoLoad;
    float requestedRegenPerSec;
    float regenerationCooldown;
    float regenerationCostPerBullet;
    float maxAmmoLoad;
    float maxRegenPerSec;
    uint8_t _pad_1[0x4];
};




struct ItemPortTagsElement {
    uint8_t _pad_0[0x8];
    struct CryStringT* string;
    uint8_t _pad_1[0x8];
    struct Tag* tag;
    uint8_t _pad_2[0x10];
};




struct StatusMaskedRetriggerPreset {
    uint8_t _pad_0[0x8];
    struct StatusMaskedRetriggerSetup* retriggerSetup;
    uint8_t _pad_1[0x8];
};




struct BuffDurationOverride {
    uint8_t _pad_0[0x8];
    float durationOverride;
    uint8_t _pad_1[0x4];
};




struct FloatUserVariableSetValueTask {
    uint8_t _pad_0[0x20];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float value;
    uint8_t _pad_2[0x4];
};




struct WeaponFlickerParams {
    uint8_t _pad_0[0x8];
    float totalDuration;
    uint8_t _pad_1[0x4];
    struct Range* onRange;
    uint8_t _pad_2[0x8];
    struct Range* offRange;
    uint8_t _pad_3[0x8];
};




struct SApplicationFormRelationParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CryStringT* mannequinTag;
    uint8_t _pad_1[0x8];
};




struct BindingsOperations_WaveformShapeRandom {
    uint8_t _pad_0[0x8];
    float startInterpolation;
    uint8_t elementCount;
    uint8_t elementOffset;
    enum ARDataType interpolation;
    uint8_t _pad_1[0x1];
};




struct Matrix34 {
    uint8_t _pad_0[0x38];
    struct Ang3* Rotation;
    uint8_t _pad_1[0x10];
    struct Vec3* Position;
    uint8_t _pad_2[0x10];
};




struct SAnimationScopeContext {
    uint8_t _pad_0[0x8];
    struct CryStringT* scopeContext;
    uint8_t _pad_1[0x8];
    enum ARDataType type_;
    uint8_t _pad_2[0x4];
};




struct LoadoutEditorAdditionalParams {
    uint8_t _pad_0[0x8];
};




struct AtmosphereStatePressureTemplate {
    uint8_t _pad_0[0x8];
    float pressure;
    uint8_t _pad_1[0x4];
};




struct InteractionConditionInteractionStateMachineTag {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct TagList* stateTags;
    uint8_t _pad_2[0x30];
};




struct BuildingBlocks_LayoutPolicyBase {
    uint8_t _pad_0[0x8];
};




struct SControlledEntityStaticTransformParams {
    uint8_t _pad_0[0x8];
    struct EntityReferenceDef* targetTransform;
    uint8_t _pad_1[0x10];
    _Bool canLockPosition;
    _Bool canLockRotation;
    _Bool canLockScale;
    uint8_t _pad_2[0x1];
    float movementSnapThreshold;
    float rotationSnapThreshold;
    float scaleSnapThreshold;
    float uiMaxDistance;
    uint8_t _pad_3[0x4];
    struct CryStringT* uiIcon;
    uint8_t _pad_4[0x8];
};




struct SFPSMineableEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct MusicLogicSwitch {
    uint8_t _pad_0[0x8];
    struct CryStringT* switch_;
    uint8_t _pad_1[0x8];
    struct CryStringT* value;
    uint8_t _pad_2[0x8];
};




struct UvInset {
    uint8_t _pad_0[0x8];
    float top;
    float right;
    float bottom;
    float left;
};




struct ControlHintCondition_RemoteTurret {
    uint8_t _pad_0[0x8];
    enum ARDataType remoteTurret;
    uint8_t _pad_1[0x7];
};




struct ActorMotionStateFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    enum ARDataType filterByLocomotionSet;
    uint8_t _pad_2[0x4];
};




struct EATransportSplineTransitionParams {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    _Bool flyToStart;
    _Bool useAfterburner;
    uint8_t _pad_1[0x5];
};




struct SpecificHandholdAttachSpotChoiceParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* attachSpotName;
    uint8_t _pad_1[0x8];
    struct ClosestOrientationHandholdAttachSpotChoiceParams* fallbackParams;
    uint8_t _pad_2[0x20];
};




struct BuildingBlocks_PrimitiveRendererPolicy {
    uint8_t _pad_0[0x8];
    _Bool sortViaPivot;
    _Bool includeInGroundingEffects;
    uint8_t _pad_1[0x6];
};




struct SActorProceduralBodyRecoilModifiers {
    uint8_t _pad_0[0x8];
    float hipsPushForce;
    float hipsDampStrength;
    float hipsDampStrengthEnd;
    float spinePushForceFirst;
    float spinePushForce;
    float spineDampStrength;
    float spineDampStrengthEnd;
    uint8_t _pad_1[0x4];
};




struct PersonalThoughtPopWindowParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* message;
    struct CLocIdentifier* acceptButtonText;
    struct CLocIdentifier* cancelButtonText;
};




struct SEACriticalMessageDef {
    uint8_t _pad_0[0x8];
    int32_t messagePriority;
    float messageDuration;
    struct CLocIdentifier* message;
};




struct MusicAreaComponentParams {
    uint8_t _pad_0[0x18];
    float radius;
    uint8_t _pad_1[0x4];
    struct Vec3* bounds;
    uint8_t _pad_2[0x10];
    struct GlobalResourceAudio* onEnterWwiseEvent;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* onLeaveWwiseEvent;
    uint8_t _pad_4[0x18];
    struct MusicLogicSwitchValue* onEnterSecondarySwitch;
    uint8_t _pad_5[0x10];
    struct MusicLogicSwitchValue* onLeaveSecondarySwitch;
    uint8_t _pad_6[0x10];
    struct MusicLogicParameter* distToCentreParameter;
    uint8_t _pad_7[0x10];
    struct AudioRtpc* distToCentreRtpc;
    uint8_t _pad_8[0x18];
    struct MusicLogicSwitchValue* onEnterCueSwitch;
    uint8_t _pad_9[0x10];
    int32_t maxRetriggerCount;
    float retriggerDelaySecs;
    _Bool retriggerDelayOnlyOnEnter;
    _Bool stopMusicOnExit;
    uint8_t _pad_10[0x6];
};




struct MissionFlowAction_TokenStateChange {
    uint8_t _pad_0[0x8];
    struct ObjectiveToken* objectiveToken;
    uint8_t _pad_1[0x8];
    enum ARDataType toState;
    uint8_t _pad_2[0x4];
};




struct TriggeredWarningAdd {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    enum ARDataType messageState;
    uint8_t _pad_1[0x4];
    float duration;
    uint8_t _pad_2[0x4];
};




struct SItemPortInteractionsParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* detach;
    uint8_t _pad_1[0x8];
    _Bool allowPlaceInteractionFromInventory;
    uint8_t _pad_2[0x7];
    struct CLocIdentifier* placeInteractionBlockText;
};




struct MaelstromShatterDestroyEvent {
    uint8_t _pad_0[0x8];
    struct Tag* shatterTag;
    uint8_t _pad_1[0x10];
};




struct SAccolade {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    struct CryStringT* smallIconPath;
    uint8_t _pad_1[0x8];
    struct CryStringT* largeIconPath;
    uint8_t _pad_2[0x8];
    struct CryStringT* completedIconPath;
    uint8_t _pad_3[0x8];
    int32_t totalRequired;
    _Bool startLocked;
    uint8_t _pad_4[0x3];
    struct SAccoladeRequirement* accoladeRequirement;
    uint8_t _pad_5[0x8];
};




struct StarMapPartyMemberObject {
    uint8_t _pad_0[0x8];
    float minimumDisplaySize;
    float rotationSpeed;
    enum ARDataType facingMode;
    uint8_t _pad_1[0x4];
    struct GlobalResourceGeometry* geometry;
    uint8_t _pad_2[0x10];
    struct GlobalResourceMaterial* material;
    uint8_t _pad_3[0x10];
};




struct PersonalThoughtPlayerItem {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
    enum ARDataType type_;
    enum ARDataType subType;
};




struct ReputationProviderParams {
    uint8_t _pad_0[0x18];
};




struct PlayerUsableItemPort {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* useInteraction;
    uint8_t _pad_2[0x8];
};




struct BindingsOperations_WaveformShapeSawtooth {
    uint8_t _pad_0[0x8];
    _Bool isReversed;
    uint8_t _pad_1[0x7];
};




struct BuildingBlocks_FontReplacementPair {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_FontStyle* englishFont;
    uint8_t _pad_1[0x10];
    struct CryStringT* replacementFontName;
    uint8_t _pad_2[0x8];
};




struct WeightedLootArchetype {
    uint8_t _pad_0[0x8];
    struct LootArchetype* archetype;
    uint8_t _pad_1[0x10];
    float weight;
    uint8_t _pad_2[0x4];
    struct NumResultsConstraints* numberOfResultsConstraints;
    uint8_t _pad_3[0x8];
};




struct SDecayCurveMaxValues {
    uint8_t _pad_0[0x8];
    struct SDecayCurveMaxValueParams* xMaxValueParams;
    uint8_t _pad_1[0x10];
    struct SDecayCurveMaxValueParams* yMaxValueParams;
    uint8_t _pad_2[0x10];
    struct SDecayCurveMaxValueParams* zMaxValueParams;
    uint8_t _pad_3[0x10];
};




struct ScreenEffects_Param {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
    struct ScreenEffects_ParamValue* value;
    uint8_t _pad_2[0x8];
    struct ScreenEffects_ParamStrengthBehavior* strengthBehavior;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocks_BindingsColorComponentParameter {
    uint8_t _pad_0[0x50];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType parameter;
    uint8_t _pad_2[0x4];
    struct SRGBA8* defaultValue;
    uint8_t _pad_3[0x10];
};




struct PlayerUsableView {
    uint8_t _pad_0[0x8];
    _Bool focusOnUser;
    uint8_t _pad_1[0x7];
    struct Camera* cameraView;
    uint8_t _pad_2[0x10];
    struct CameraTransitionParams* transitionParams;
    uint8_t _pad_3[0x8];
};




struct ControlHintCondition_ActorWeaponState {
    uint8_t _pad_0[0x8];
    enum ARDataType weaponState;
    uint8_t _pad_1[0x6];
};




struct CommunicationRequest {
    uint8_t _pad_0[0x8];
    struct CommunicationName* communication;
    uint8_t _pad_1[0x10];
    struct CommunicationChannelName* channelName;
    uint8_t _pad_2[0x10];
};




struct SQuantumCameraEffectsDef {
    uint8_t _pad_0[0x8];
    float angleOuter;
    float angleInner;
    float fovChange;
    float focusDistance;
    struct CameraEffectsModifiers* genericModifiers;
    uint8_t _pad_1[0x150];
};




struct RewardScale {
    uint8_t _pad_0[0x8];
    float i;
    float k;
    float m;
    uint8_t _pad_1[0x4];
};




struct EntityClassCraftingData {
    uint8_t _pad_0[0x8];
    struct EntityClassRawMaterialCraftingData* rawMaterialData;
    uint8_t _pad_1[0x8];
    struct EntityClassGameplayPropertiesCraftingData* gameplayPropertiesData;
    uint8_t _pad_2[0x8];
};




struct LightningTargetMode_Actor {
    uint8_t _pad_0[0x8];
    _Bool localPlayerOnly;
    uint8_t _pad_1[0x7];
    struct LightningStrengthDriver* strength;
    uint8_t _pad_2[0x60];
};




struct ContractGeneration {
    uint8_t _pad_0[0x8];
    int32_t maxInstances;
    int32_t maxInstancesPerPlayer;
    _Bool tutorial;
    _Bool requestOnly;
    uint8_t _pad_1[0x2];
    float respawnTime;
    float respawnTimeVariation;
    uint8_t _pad_2[0x4];
};




struct CraftingRecipe_Base {
    uint8_t _pad_0[0x8];
};




struct SEntityTraversingNodeTypeItemPort {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPortName;
    uint8_t _pad_1[0x8];
};




struct SurfaceRaindrops_Occluder {
    uint8_t _pad_0[0x8];
    float distanceToVisor;
    int32_t numberOfWaveSamples;
};




struct SCombatTargeting {
    uint8_t _pad_0[0x8];
    struct STargetingMethodRecord* targetingMethodRecord;
    uint8_t _pad_1[0x10];
};




struct SWeaponConditionHeatLevel {
    uint8_t _pad_0[0x8];
    struct SFloatNumberComparer* comparer;
    uint8_t _pad_1[0x8];
};




struct SXYZCurvesWithMaxValuesModifer {
    uint8_t _pad_0[0x8];
    float xMaxValueModifier;
    float yMaxValueModifier;
    float zMaxValueModifier;
    uint8_t _pad_1[0x4];
    struct Vec3* minLimitsModifier;
    uint8_t _pad_2[0x10];
    struct Vec3* maxLimitsModifier;
    uint8_t _pad_3[0x10];
    struct SHandsRecoilCurveNoiseModifer* noiseModifier;
    uint8_t _pad_4[0x10];
};




struct QuickAccessWheelActionDef {
    uint8_t _pad_0[0x8];
    _Bool openContextMenuAsFolder;
    uint8_t _pad_1[0x7];
    struct InputAction* inputAction;
    uint8_t _pad_2[0x28];
    struct CryStringT* iconPathOverride;
    uint8_t _pad_3[0x8];
};




struct SCLedgeEntityParams {
    uint8_t _pad_0[0x8];
    _Bool excludeLeft;
    _Bool excludeRight;
    _Bool excludeBack;
    _Bool excludeFront;
    uint8_t _pad_1[0x4];
};




struct VolumeShape_Box {
    uint8_t _pad_0[0x8];
    struct Vec3* size;
    uint8_t _pad_1[0x10];
};




struct SpawnDescription_Entity {
    uint8_t _pad_0[0x8];
    struct TagList* tags;
    uint8_t _pad_1[0x30];
    struct TagList* negativeTags;
    uint8_t _pad_2[0x30];
    struct TagList* markupTags;
    uint8_t _pad_3[0x30];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    int32_t amount;
    float weight;
};




struct ContractIntParam {
    uint8_t _pad_0[0x8];
    enum ARDataType param;
    int32_t value;
};




struct SObjectDataBankParams {
    uint8_t _pad_0[0x18];
};




struct SElevatorCustomCollisionParams {
    uint8_t _pad_0[0x10];
    struct Vec3* Extent;
    uint8_t _pad_1[0x10];
    struct Vec3* Offset;
    uint8_t _pad_2[0x10];
};




struct ObjectiveHandler_EntityAttached {
    uint8_t _pad_0[0x8];
    struct CryStringT* module;
    uint8_t _pad_1[0x8];
    struct MissionModuleHierarchy* moduleHierarchy;
    uint8_t _pad_2[0x10];
    _Bool disableTravelObjectives;
    uint8_t _pad_3[0x3];
    float travelRadiusKM;
    struct ObjectiveDisplayInfo* travelObjectiveInfo;
    uint8_t _pad_4[0x20];
    struct ObjectiveDisplayInfo* returnObjectiveInfo;
    uint8_t _pad_5[0x20];
    struct NavPointSpawnInformation* navPointSpawnInfo;
    uint8_t _pad_6[0x10];
    struct ObjectivePropertyBase* targetObject;
    uint8_t _pad_7[0x8];
};




struct SActorForceReactionLeanBoneDef {
    uint8_t _pad_0[0x8];
    float leanWeightFB;
    float leanWeightLR;
};




struct SSecurityNetworkRoomExtensionParams {
    uint8_t _pad_0[0x18];
    struct SecurityNetworkRoomSettings* settings;
    uint8_t _pad_1[0x10];
};




struct BaseHoloDisplayProvider {
    uint8_t _pad_0[0x18];
};




struct SEntityTraversingNodeTypeZoneHostVehicle {
    uint8_t _pad_0[0x8];
    _Bool RootVehicle;
    uint8_t _pad_1[0x7];
};




struct ActorAimAndLookLimitsStateFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    struct ActorViewLimits* aimLimits;
    uint8_t _pad_2[0x20];
    struct ActorViewLimits* lookLimits;
    uint8_t _pad_3[0x20];
};




struct SCItemHydraulicLeverSwitchParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* PumpInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* FullChargeInteraction;
    uint8_t _pad_2[0x8];
    struct Tag* StartChargingEffectTag;
    uint8_t _pad_3[0x10];
    struct Tag* StartDecayingEffectTag;
    uint8_t _pad_4[0x10];
    struct Tag* FinishChargingEffectTag;
    uint8_t _pad_5[0x10];
};




struct LocationManagerParams {
    uint8_t _pad_0[0x18];
};




struct ShopInteractionData {
    uint8_t _pad_0[0x8];
    struct InteractionConditionList* quickBuyConditionList;
    uint8_t _pad_1[0x90];
    struct CLocIdentifier* quickBuyInteractionText;
    struct CryStringT* quickBuyPriceStringToken;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* moreInfoInteractionText;
};




struct UIRenderToTextureTarget {
    uint8_t _pad_0[0x18];
    float aspectRatio;
    _Bool usePrimaryTargetBounds;
    uint8_t _pad_1[0x3];
};




struct UsableSlottingReferenceItemPort {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_StaticVariableIntegerConstant {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType value;
    uint8_t _pad_2[0x4];
};




struct SpawnNotifierEntityComponentParams {
    uint8_t _pad_0[0x18];
};




struct SDoorCollisionReactionParams {
    uint8_t _pad_0[0x8];
    enum ARDataType CollisionReactionDirection;
    uint8_t _pad_1[0x4];
};




struct DirectRTT_DropShadowParams {
    uint8_t _pad_0[0x8];
    float SharpShadowIntensity;
    float SoftShadowIntensity;
    float Spread;
    uint8_t _pad_1[0x4];
    struct Vec2* Offset;
    uint8_t _pad_2[0x8];
    struct SRGB8* Color;
    uint8_t _pad_3[0x8];
    float OpacityInBrightScenes;
    float OpacityInDarkScenes;
};




struct ContractClassBase {
    uint8_t _pad_0[0x8];
};




struct FireRepairerType_Base {
    uint8_t _pad_0[0x8];
};




struct MissionFlowTrigger {
    uint8_t _pad_0[0x8];
    struct CryStringT* description;
    uint8_t _pad_1[0x8];
    struct MissionFlowConditionBase* condition;
    uint8_t _pad_2[0x8];
    struct MissionFlowActionBase* action;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocks_TriggerNavigation {
    uint8_t _pad_0[0x8];
    struct CryStringT* layerName;
    uint8_t _pad_1[0x8];
    enum ARDataType type_;
    uint8_t _pad_2[0xc];
};




struct BuildingBlocks_NumberCompareCondition {
    uint8_t _pad_0[0x8];
    float value;
    enum ARDataType comparison;
};




struct AnimationPlayerInputVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Range* range;
    uint8_t _pad_2[0x8];
    float defaultValue;
    uint8_t _pad_3[0x4];
    struct AnimationVariableInterpolation* defaultInterpolation;
    uint8_t _pad_4[0x8];
};




struct GrenadeMarkerProvider {
    uint8_t _pad_0[0x8];
    struct Marker_Configuration* markerConfig;
    uint8_t _pad_1[0x10];
};




struct STriggerableDevicesBlinking {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float minFrequency;
    float maxFrequency;
    uint8_t _pad_2[0x4];
    float rampUpTime;
    uint8_t _pad_3[0x4];
};




struct TriggerSubConditionDistanceDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* approachingNpcGUID;
    uint8_t _pad_1[0x8];
    struct CryStringT* npcGUID;
    uint8_t _pad_2[0x8];
    struct CryStringT* checkType;
    uint8_t _pad_3[0x8];
    float distance;
    float minLookAngleScale;
};




struct EntityComponentPointOfInterestProvider {
    uint8_t _pad_0[0x18];
    struct PointOfInterestList* pointsOfInterestList;
    uint8_t _pad_1[0x10];
};




struct SHackingAbilityPingParams {
    uint8_t _pad_0[0x8];
    float chargeUpTime;
    float duration;
    float cooldown;
    uint8_t _pad_1[0x4];
    float pingRadius;
    uint8_t _pad_2[0x4];
};




struct PlanetRoomParams {
    uint8_t _pad_0[0x8];
    float TemperatureRange;
    float HumidityRange;
    struct PlanetDayNightTemperatureBaseParams* dayNightTemperatureParams;
    uint8_t _pad_1[0x8];
};




struct SSimulationParamsBase {
    uint8_t _pad_0[0x8];
    _Bool UseRedirect;
    _Bool UseDebugSetup;
    _Bool UseDebugText;
    _Bool UseSimulation;
    uint8_t SimFPS;
    uint8_t _pad_1[0x3];
    struct Vec3* PivotOffset;
    uint8_t _pad_2[0x10];
};




struct MeshFieldGeom {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* geometry;
    uint8_t _pad_1[0x10];
};




struct FireHazardGlobalParams {
    uint8_t _pad_0[0x8];
    struct FireHazardGlobalUpdate* update;
    uint8_t _pad_1[0x8];
    struct FireHazardGlobalIgnition* ignition;
    uint8_t _pad_2[0xd0];
    struct FireHazardGlobalPropagation* propagation;
    uint8_t _pad_3[0x28];
    struct FireHazardGlobalSmokeParams* smoke;
    uint8_t _pad_4[0x50];
    struct FireHazardGlobalDamageToHealthParams* damageToHealth;
    uint8_t _pad_5[0x10];
    struct FireHazardGlobalExtinguishing* extinguishing;
    uint8_t _pad_6[0x30];
    struct FireHazardGlobalDefaultEffects* defaultEffects;
    uint8_t _pad_7[0x98];
    struct FireHazardGlobalLightParams* lightParams;
    uint8_t _pad_8[0x78];
    struct FireHazardGlobalRoomConnectorParams* roomConnector;
    uint8_t _pad_9[0x38];
    struct FireHazardSpawnParams* particleSpawning;
    uint8_t _pad_10[0x10];
    struct FireHazardFogParams* fog;
    uint8_t _pad_11[0x50];
    struct FireHazardPermanentEffects* permanentEffects;
    uint8_t _pad_12[0xa8];
};




struct PlayerMarkerProvider {
    uint8_t _pad_0[0x8];
    struct Marker_Configuration* fpsMarkerConfig;
    uint8_t _pad_1[0x10];
    struct Marker_Configuration* vehicleSeatMarkerConfig;
    uint8_t _pad_2[0x10];
};




struct SCItemDoorStatusLightsParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* PoweredAndIntactEffectGroup;
    uint8_t _pad_1[0x8];
    struct CryStringT* EmergencyPowerEffectGroup;
    uint8_t _pad_2[0x8];
    struct CryStringT* OfflineEffectGroup;
    uint8_t _pad_3[0x8];
};




struct SSCItemControllableManagerParams {
    uint8_t _pad_0[0x18];
    enum ARDataType defaultMasterMode;
    float masterModeSpoolTimeToNAV;
    float masterModeSpoolTimeToSCM;
    uint8_t _pad_1[0x4];
    struct SCItemControllableParams* controllerParams;
    uint8_t _pad_2[0x8];
};




struct EASerializedCarrier {
    uint8_t _pad_0[0x18];
};




struct SCItemMissileControllerParams {
    uint8_t _pad_0[0x18];
    float lockAngleAtMin;
    float lockAngleAtMax;
    int32_t maxArmedMissiles;
    float launchCooldownTime;
};




struct SDistortionParams {
    uint8_t _pad_0[0x18];
    float DecayDelay;
    float DecayRate;
    float Maximum;
    float WarningRatio;
    float RecoveryRatio;
    float PowerRatioAtMaxDistortion;
    _Bool PowerChangeOnlyAtMaxDistortion;
    uint8_t _pad_1[0x7];
};




struct SCEquipableParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPort;
    uint8_t _pad_1[0x8];
};




struct ProceduralLayoutNode_Base {
    uint8_t _pad_0[0x8];
};




struct PlanetDayNightTemperatureBaseParams {
    uint8_t _pad_0[0x8];
};




struct BoidActorProximityTransition {
    uint8_t _pad_0[0x8];
    struct CryStringT* animationTag;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
    struct BoidState* transition;
    uint8_t _pad_3[0x8];
    _Bool instantTransition;
    _Bool allowWhileTransitioning;
    uint8_t _pad_4[0xe];
    float distance;
    uint8_t _pad_5[0x4];
};




struct SHintGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct SHintActivator* hintTrigger;
    uint8_t _pad_1[0x8];
};




struct ControlHintGameModeRecords {
    uint8_t _pad_0[0x8];
    struct ControlHints_Preset* onFootControlHints;
    uint8_t _pad_1[0x10];
    struct ControlHints_Preset* vehicleControlHints;
    uint8_t _pad_2[0x10];
    struct ControlHints_Preset* groundVehicleControlHints;
    uint8_t _pad_3[0x10];
    struct ControlHints_Preset* turretControlHints;
    uint8_t _pad_4[0x10];
    struct ControlHints_Preset* boatVehicleControlHints;
    uint8_t _pad_5[0x10];
    struct ControlHints_Preset* mobiglasControlHints;
    uint8_t _pad_6[0x10];
    struct ControlHints_Preset* transportedControlHints;
    uint8_t _pad_7[0x10];
};




struct SRemoveCrimesGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool removeSelectedInfractionOnly;
    uint8_t _pad_1[0x7];
};




struct WeatherEffects_Asteroid {
    uint8_t _pad_0[0x8];
};




struct SWeaponAIShootingTimeAccuracyData {
    uint8_t _pad_0[0x8];
    float maxShootingTime;
    uint8_t _pad_1[0x4];
    struct BezierCurve* timePrecisionCurve;
    uint8_t _pad_2[0x88];
};




struct SEntityComponentUnattendedVehicleMarkerParams {
    uint8_t _pad_0[0x18];
    struct Marker_Configuration* markerConfig;
    uint8_t _pad_1[0x10];
};




struct SGreenZoneObedienceComponentParams {
    uint8_t _pad_0[0x18];
};




struct SEntityPhysicsControllerParams {
    uint8_t _pad_0[0x18];
    struct SEntityBasePhysicsControllerParams* PhysType;
    uint8_t _pad_1[0x8];
};




struct SJumpPointParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* jumpGateSuperGuid;
    uint8_t _pad_1[0x8];
    struct SJumpPointPushAreaParams* entrancePushAreaParams;
    uint8_t _pad_2[0x18];
    struct CryStringT* pushAreaRadarGeometryName;
    uint8_t _pad_3[0x8];
    struct LandingPadSize* largestShipSize;
    uint8_t _pad_4[0x10];
    struct JumpPointEffectParams* effectParams;
    uint8_t _pad_5[0xc8];
    float linkingRange;
    float requiredFuel;
};




struct SWeaponSimplifiedHeatParamsTemperatureCurveParams {
    uint8_t _pad_0[0x8];
    struct SBezierCurveRecord* temperatureCurve;
    uint8_t _pad_1[0x10];
    struct Vec2* xAxisMinMaxValues;
    uint8_t _pad_2[0x8];
    struct Vec2* yAxisMinMaxValues;
    uint8_t _pad_3[0x8];
};




struct SWeaponActionHighlightCuttablesParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
};




struct SRaceCheckpointEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct SCItemRemoteConnectionParams {
    uint8_t _pad_0[0x18];
    struct OperatorModeAvailabilityParams* availableOperatorModes;
    uint8_t _pad_1[0x10];
};




struct ItemResourceNetworkPowerModifier {
    uint8_t _pad_0[0x8];
    int32_t additiveModifier;
    uint8_t _pad_1[0x4];
};




struct NameScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct DoorLockStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* locked;
    uint8_t _pad_1[0x8];
    struct SInteractionState* unlocked;
    uint8_t _pad_2[0x8];
};




struct LightFlickerWaveParams {
    uint8_t _pad_0[0x8];
};




struct ItemModifierTimedLife {
    uint8_t _pad_0[0x8];
    float lifetime;
    uint8_t _pad_1[0x4];
};




struct CameraSourceComponentParams {
    uint8_t _pad_0[0x18];
    float FOV;
    float NearZ;
    float FarZ;
    float FStop;
    float FocalDistance;
    uint8_t _pad_1[0x4];
    struct Camera* DFCameraRecord;
    uint8_t _pad_2[0x10];
    struct CameraSourceShakeParams* ShakeParams;
    uint8_t _pad_3[0x98];
    _Bool CanUseAsViewOverride;
    _Bool CamOverrideExcludeFromLocalCapture;
    uint8_t _pad_4[0x6];
    struct CameraLensParams* OpticsLensPreset;
    uint8_t _pad_5[0x10];
};




struct SCharacterValidationParams {
    uint8_t _pad_0[0x8];
};




struct SEntityBoxGridProperty {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* gridGeometry;
    uint8_t _pad_1[0x10];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool inheritGravity;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x5];
    struct Vec3* center;
    uint8_t _pad_4[0x10];
    struct Vec3* size;
    uint8_t _pad_5[0x10];
};




struct CraftingRecipeResults_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct WaterInteractionEffectParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* effect;
    uint8_t _pad_1[0x10];
    float maxDuration;
    uint8_t _pad_2[0x4];
    struct Range* velocityRange;
    uint8_t _pad_3[0x8];
};




struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct AudioEnvironmentFeedbackZoneSetup* zone;
    uint8_t _pad_3[0x10];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_4[0x140];
    struct Tag* trigger;
    uint8_t _pad_5[0x10];
};




struct HudColor_HoloMatColors {
    uint8_t _pad_0[0x8];
    struct SRGB8* Diffuse;
    uint8_t _pad_1[0x8];
    struct SRGB8* Emissive;
    uint8_t _pad_2[0x8];
    struct SRGB8* RimColor;
    uint8_t _pad_3[0x8];
    struct SRGB8* SilhouetteColor;
    uint8_t _pad_4[0x8];
    struct HudColor_HoloMatTextures* Textures;
    uint8_t _pad_5[0x8];
};




struct SCItemTurretAngleLimitParams {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionCheckActorState {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType conditionResult;
    enum ARDataType targetActor;
    struct ActorStateFilter* actorState;
    uint8_t _pad_2[0x40];
};




struct SPowerSourceComponentParams {
    uint8_t _pad_0[0x18];
    enum ARDataType initialState;
    uint8_t _pad_1[0x3];
    int32_t requiredJumpstartVoltage;
    _Bool isInfinitePowerSource;
    uint8_t _pad_2[0x7];
    struct GlobalResourceAudio* objectJumpstartAudioOneShot;
    uint8_t _pad_3[0x18];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeHorizontalAlignment {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct LegalOwnerScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SUsableExitTransitionParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* transitionAudioTrigger;
    uint8_t _pad_1[0x18];
    struct CryStringT* aiSignal;
    uint8_t _pad_2[0x8];
    struct CryStringT* additionalTags;
    uint8_t _pad_3[0x8];
    enum ARDataType eventTriggerMask;
    uint8_t _pad_4[0x4];
    _Bool inputExit;
    _Bool exitOnMovement;
    _Bool exitOnJump;
    _Bool exitOnDamageTaken;
    uint8_t _pad_5[0x4];
    struct SSharedInteractionParams* exitInteraction;
    uint8_t _pad_6[0x8];
    struct SSequencerDefSequenceParams* exitSequence;
    uint8_t _pad_7[0x8];
};




struct ProceduralPlanetAudioComponentParams {
    uint8_t _pad_0[0x18];
    struct ProceduralPlanetAudioData* planetAudioData;
    uint8_t _pad_1[0x10];
    struct ProceduralPlanetAudioRiverData* riverAudioData;
    uint8_t _pad_2[0x10];
};




struct SSpreadModifier {
    uint8_t _pad_0[0x8];
    float minMultiplier;
    float maxMultiplier;
    float firstAttackMultiplier;
    float attackMultiplier;
    float decayMultiplier;
    float additiveModifier;
};




struct DoorNavigationLinkController {
    uint8_t _pad_0[0x8];
};




struct CharacterAccuracyModifiers {
    uint8_t _pad_0[0x8];
    struct AITimeSinceTargetSeen* timeSinceTargetSeen;
    uint8_t _pad_1[0xa0];
    float targetStanceModifier;
    uint8_t _pad_2[0x4];
};




struct CinematicTriggerParams {
    uint8_t _pad_0[0x18];
    struct Vec3* dimensions;
    uint8_t _pad_1[0x10];
    _Bool enabled;
    _Bool triggerOnce;
    uint8_t _pad_2[0x2];
    float minDistance;
    float maxDistance;
    float minVisibleTime;
    float delay;
    float checkTimer;
    float minZoom;
    _Bool mustBeFullyVisibleToTrigger;
    uint8_t _pad_3[0x3];
    float scaledFovUsedToTrigger;
    _Bool mustBeFullyVisibleToMaintain;
    uint8_t _pad_4[0x3];
    float originalFovFactorUsedToMaintain;
    _Bool inVehicleOnly;
    _Bool requiresDirectLineOfSight;
    _Bool checkTransparentMaterials;
    uint8_t _pad_5[0x1];
    struct SRGB8* debugColorActive;
    uint8_t _pad_6[0x8];
    struct SRGB8* debugColorInactive;
    uint8_t _pad_7[0x8];
    struct CinematicTriggerMPOptions* multiplayerOptions;
    uint8_t _pad_8[0x8];
};




struct UIAudioEvent {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct GlobalResourceAudio* audioTrigger;
    uint8_t _pad_2[0x18];
};




struct UIGraph_SkyLineWDComponent {
    uint8_t _pad_0[0x8];
};




struct GreenZoneFlagsDef {
    uint8_t _pad_0[0x8];
    _Bool noFPSWeapons;
    _Bool noShipWeapons;
    _Bool noMelee;
    _Bool noTakedown;
    _Bool walkOnly;
    _Bool softLockFPSWeapons;
    _Bool noShipSelfDestruct;
    _Bool unlawfulZone;
    _Bool noTractorBeam;
    uint8_t _pad_1[0x7];
};




struct ItemResourceDynamicCompositionExample {
    uint8_t _pad_0[0x8];
    struct ResourceType* resource1;
    uint8_t _pad_1[0x10];
    struct ResourceType* resource2;
    uint8_t _pad_2[0x10];
};




struct SEntityInteractableParams {
    uint8_t _pad_0[0x18];
    struct SInteractableParams* Interactable;
    uint8_t _pad_1[0x100];
};




struct SAttachableComponentParams {
    uint8_t _pad_0[0x18];
    struct SItemDefinition* AttachDef;
    uint8_t _pad_1[0x1c0];
    enum ARDataType attachToTileItemPort;
    uint8_t _pad_2[0x4];
    struct SEntityAttachParams* entityAttachParams;
    uint8_t _pad_3[0x8];
};




struct HarvestConditionMovement {
    uint8_t _pad_0[0x8];
    float distance;
    uint8_t _pad_1[0x4];
};




struct InnerThought_AnimBase {
    uint8_t _pad_0[0x8];
    float glyphStagger;
    float length;
    _Bool randomStagger;
    enum ARDataType interpolationMode;
    uint8_t _pad_1[0x6];
};




struct ParticleEffectNoneTintingParams {
    uint8_t _pad_0[0x8];
};




struct ImpactForceResistance {
    uint8_t _pad_0[0x8];
    float impactForceResistance;
    uint8_t _pad_1[0x4];
};




struct GlobalFogVolume {
    uint8_t _pad_0[0x8];
    struct Vec3* fogSize;
    uint8_t _pad_1[0x10];
    float noiseLifeTime;
    float softEdge;
    float hideFarLodThreshold;
    float fadeFarLodThreshold;
    float maxDistance;
    uint8_t _pad_2[0x4];
};




struct ScreenEffects_ParamValue {
    uint8_t _pad_0[0x8];
};




struct EntityEffectSystem_ToggleSequencerTask {
    uint8_t _pad_0[0x20];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
};




struct SEntityComponentNavPointParams {
    uint8_t _pad_0[0x18];
};




struct CraftingGameplayProperty_Base {
    uint8_t _pad_0[0x8];
};




struct AtmosphereLifeSupportParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* maintainingResourceState;
    uint8_t _pad_1[0x8];
    struct CryStringT* storingResourceState;
    uint8_t _pad_2[0x8];
    struct CryStringT* purgingResourceState;
    uint8_t _pad_3[0x50];
};




struct RadiationBehavior_SurfaceRadiationParams {
    uint8_t _pad_0[0x8];
    float scaleOnLargestAsteroid;
    uint8_t _pad_1[0x4];
};




struct HarvestableTransformParams {
    uint8_t _pad_0[0x8];
    float minScale;
    float maxScale;
    float terrainNormalAlignment;
    uint8_t _pad_1[0x4];
    struct Vec3* rotationRange;
    uint8_t _pad_2[0x10];
    float minZOffset;
    float maxZOffset;
    float minSlope;
    float maxSlope;
    float minElevation;
    float maxElevation;
};




struct SSetParticleEnabledStateGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool Enable;
    uint8_t _pad_1[0x7];
};




struct SHandsRecoilTimeModifier {
    uint8_t _pad_0[0x8];
    float recoilModifierTime;
    uint8_t _pad_1[0x4];
    struct SXYZCurves* positionMaxValueCurves;
    uint8_t _pad_2[0x1b0];
    struct SXYZCurves* rotationMaxValueCurves;
    uint8_t _pad_3[0x1b0];
};




struct SWeaponProceduralAimRecoilCurveConfigDef {
    uint8_t _pad_0[0x8];
    float yawMaxDegrees;
    float pitchMaxDegrees;
    float rollMaxDegrees;
    float maxFireTime;
    float recoilSmoothTime;
    uint8_t _pad_1[0x4];
    struct Vec3* minLimits;
    uint8_t _pad_2[0x10];
    struct Vec3* maxLimits;
    uint8_t _pad_3[0x10];
    struct SYawPitchRollCurves* yawPitchRollCurves;
    uint8_t _pad_4[0x8];
    float decayStartTime;
    float minDecayTime;
    float maxDecayTime;
    uint8_t _pad_5[0x4];
    struct SYawPitchRollCurves* yawPitchRollDecayCurves;
    uint8_t _pad_6[0x8];
    struct SAimRecoilNoiseCurves* noiseCurves;
    uint8_t _pad_7[0x20];
};




struct SuspensionSprings {
    uint8_t _pad_0[0x8];
    float undampedFrequency;
    float dampingRatio;
    float forceBlendOutDelay;
    float forceBlendInRate;
    float forceBlendOutRate;
    float bumpStop;
    struct BezierCurve* compressionForceCurve;
    uint8_t _pad_1[0x88];
};




struct SRegenConsumerModifier {
    uint8_t _pad_0[0x8];
    float powerRatioMultiplier;
    float maxAmmoLoadMultiplier;
    float maxRegenPerSecMultiplier;
    uint8_t _pad_1[0x4];
};




struct SCharacterCustomizerComplexionRandomizationParams {
    uint8_t _pad_0[0x8];
    struct Vec2* frecklesOpacityLimits;
    uint8_t _pad_1[0x8];
    struct Vec2* frecklesAmountLimits;
    uint8_t _pad_2[0x8];
    struct Vec2* sunspotsOpacityLimits;
    uint8_t _pad_3[0x8];
    struct Vec2* sunspotsAmountLimits;
    uint8_t _pad_4[0x8];
};




struct SEntityEffectSystem_Effect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
};




struct SWeaponAudioReportEnvironment {
    uint8_t _pad_0[0x8];
    struct CryStringT* wwiseEnvironmentName;
    uint8_t _pad_1[0x8];
    struct GlobalResourceAudio* reportAudioTrigger;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* reportAudioTriggerStopLoop;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* reportLoopMixAmountRTPC;
    uint8_t _pad_4[0x20];
};




struct EntityComponentExtinguisher {
    uint8_t _pad_0[0x18];
    _Bool enable;
    uint8_t _pad_1[0x3];
    float strength;
    struct ExtinguishType_Base* type_;
    uint8_t _pad_2[0x8];
    struct GlobalResourceParticle* extinguishingEffectOverride;
    uint8_t _pad_3[0x10];
    float vectorFieldRadius;
    float vectorFieldWidth;
    float vectorFieldFalloff;
    float vectorFieldMaxStrength;
};




struct SEntityEffectSystem_Category {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool allowMultipleTags;
    uint8_t _pad_1[0x6];
};




struct SFitnessXPGains {
    uint8_t _pad_0[0x8];
    float timeRunning;
    float timeSprinting;
    float timeGForce;
    uint8_t _pad_1[0x4];
};




struct PersonalThoughtOption {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
};




struct SItemPortDefAttachmentImplementationSkin {
    uint8_t _pad_0[0x8];
    struct SItemPortDefHelperNode* Helper;
    uint8_t _pad_1[0x160];
};




struct SReputationStandingRewardBonusParams {
    uint8_t _pad_0[0x8];
    struct SReputationStandingParams* standing;
    uint8_t _pad_1[0x10];
    float bonusFraction;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_IntegerLocalizedPair {
    uint8_t _pad_0[0x8];
    int64_t first;
    struct CLocIdentifier* second;
    struct BuildingBlocks_BindingsLocalizedBase* secondOverride;
    uint8_t _pad_1[0x8];
};




struct SCItemCommsComponentParams {
    uint8_t _pad_0[0x18];
    struct SCItemCommsComponentSetup* setup;
    uint8_t _pad_1[0x10];
};




struct BlueprintCategoryAvailability_Base {
    uint8_t _pad_0[0x8];
};




struct SCItemWeaponControllerStaggeredFiring {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* ToggleWeaponFireModeInteraction;
    uint8_t _pad_1[0x8];
    _Bool DefaultStaggerFire;
    uint8_t _pad_2[0x7];
};




struct Developer {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DevOwner* team;
    uint8_t _pad_2[0x10];
};




struct PurchasableDisplayClothing {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* FashionType;
    struct CLocIdentifier* FabricMaterial;
    struct CLocIdentifier* Style;
    struct CryStringT* Gender;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* Color;
};




struct EntityComponentNetworkParams {
    uint8_t _pad_0[0x18];
};




struct SVehicleAfterburnerParams {
    uint8_t _pad_0[0x8];
    float preDelayTime;
    float rampUpTime;
    float rampDownTime;
    float thresholdRatio;
    float capacity;
    float costPerSec;
    struct BezierCurve* assignmentCostModifier;
    uint8_t _pad_1[0x88];
    float regenPerSec;
    uint8_t _pad_2[0x4];
    struct BezierCurve* assignmentRegenModifier;
    uint8_t _pad_3[0x88];
    float regenDelayAfterUse;
    uint8_t _pad_4[0x4];
    struct Vec3* linearAccelMultiplierPositive;
    uint8_t _pad_5[0x10];
    struct Vec3* linearAccelMultiplierNegative;
    uint8_t _pad_6[0x10];
    struct BezierCurve* assignmentModifierLin;
    uint8_t _pad_7[0x88];
    struct Vec3* angularAccelMultiplier;
    uint8_t _pad_8[0x10];
    struct BezierCurve* assignmentModifierAng;
    uint8_t _pad_9[0x88];
    _Bool allowTriggerDuringRampdown;
    _Bool enableAntiSpam;
    _Bool startAtFullCapacity;
    uint8_t _pad_10[0xd];
};




struct SSubsumptionMissionComponentParams {
    uint8_t _pad_0[0x18];
};




struct CommunicationVariation {
    uint8_t _pad_0[0x8];
    struct CryStringT* animationFragmentId;
    uint8_t _pad_1[0x8];
    struct CryStringT* animationFragmentTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* soundName;
    uint8_t _pad_3[0x8];
    float overrideMinSilence;
    float overrideMinSpeakerSilence;
    struct DialogueContext* dialogueContext;
    uint8_t _pad_4[0x10];
    struct DialogueExternalSource* dialogueExternalSource;
    uint8_t _pad_5[0x10];
    struct CommunicationVariationRules* rules;
    uint8_t _pad_6[0x10];
    struct CommunicationVariationCondition* conditions;
    uint8_t _pad_7[0x78];
};




struct PingSharedParams {
    uint8_t _pad_0[0x8];
    struct PingBlobLifeTime* blobLifeTime;
    uint8_t _pad_1[0x8];
    float blobOffsetScalar;
    float blobSizeScalar;
    float blobScaleMinPixels;
    float blobScaleMaxPixels;
    float blobScaleFixedResolution;
    float blobScaleFov;
    struct PingContactLifeTime* contactLifeTime;
    uint8_t _pad_2[0x8];
    float pingWaveAcceleration;
    float pingWaveJerk;
    float pingWaveJerkDistance;
    _Bool useADSMode;
    uint8_t _pad_3[0x3];
    float ADSFovFocusAngleMultiplier;
    uint8_t _pad_4[0x4];
    struct BlobVFXSharedParams* blobVFXParams;
    uint8_t _pad_5[0x8];
    struct PingSFXSharedParams* pingSFXParams;
    uint8_t _pad_6[0x8];
    struct PingVFXSharedParams* pingVFXParams;
    uint8_t _pad_7[0x8];
    struct PingTypeParams* pingTypeParams;
    uint8_t _pad_8[0x8];
};




struct VolumeShape {
    uint8_t _pad_0[0x8];
};




struct AbilityBreathAction {
    uint8_t _pad_0[0x8];
    struct AudioBreathInterrupt* audioBreathInterrupt;
    uint8_t _pad_1[0x10];
    float interruptParam;
    _Bool resumeBreathingWhenAudioEnds;
    _Bool forceInhaleAfterResume;
    _Bool forceExhaleAfterResume;
    uint8_t _pad_2[0x1];
};




struct ResourceLinkedInteractionState {
    uint8_t _pad_0[0x8];
    struct SInteractionState* linkedInteractionState;
    uint8_t _pad_1[0x8];
    _Bool changeInteractionState;
    uint8_t _pad_2[0x7];
};




struct SISpawning {
    uint8_t _pad_0[0x18];
};




struct SUnknownEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct AttachableStateModifierBase {
    uint8_t _pad_0[0x8];
    struct AttachableStateModifierContextBase* context;
    uint8_t _pad_1[0x8];
};




struct ResourceContainerDefaultCompositionEntry {
    uint8_t _pad_0[0x8];
    struct ResourceType* entry;
    uint8_t _pad_1[0x10];
    float weight;
    uint8_t _pad_2[0x4];
};




struct SObjectiveMarkerComponentParams {
    uint8_t _pad_0[0x18];
};




struct RestrictedAreaSplineParams {
    uint8_t _pad_0[0x18];
    float captureRadius;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* autopilotMessage;
};




struct ObjectiveProperty_Output {
    uint8_t _pad_0[0x8];
    struct MissionProperty* property;
    uint8_t _pad_1[0x30];
};




struct BuildingBlocks_BindingsLocalizedFromBoolean {
    uint8_t _pad_0[0x50];
    struct CLocIdentifier* isTrue;
    struct CLocIdentifier* isFalse;
    struct BuildingBlocks_BindingsLocalizedBase* inputTrue;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsLocalizedBase* inputFalse;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_3[0xf8];
};




struct CockpitRuleBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float priority;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalScrollDirection {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct TriggeredHealthRatio {
    uint8_t _pad_0[0x8];
    float healthRatio;
    uint8_t _pad_1[0x4];
};




struct DebugLoadoutKit {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    struct LoadoutKit* loadoutKit;
    uint8_t _pad_2[0x10];
};




struct SSequencerPlayerUsableScoochTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* name;
    uint8_t _pad_1[0x10];
    struct SPlayerUsableSearchRouteUsable* searchUsableRoute;
    uint8_t _pad_2[0x170];
};




struct SEntityHoverPhysicsControllerParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* interactionActivate;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* interactionDeactivate;
    uint8_t _pad_2[0x8];
    _Bool activateHoverByDefault;
    _Bool activateHoverOnGripAttached;
    _Bool deactivateHoverOnGripDetached;
    uint8_t _pad_3[0x1];
    float blendInDuration;
    float blendOutDuration;
    float powerOffDesiredHoverHeight;
    float maxHoverMass;
    float maxRotationalAdjustmentTorque;
    float basePlaneHalfWidth;
    float basePlaneHalfLength;
    struct Vec3* basePlaneOriginOffset;
    uint8_t _pad_4[0x10];
    struct SEntityHoverPhysicsPartialParams* hoverPhysicsIdle;
    uint8_t _pad_5[0x50];
    struct SEntityHoverPhysicsPartialParams* hoverPhysicsGripAttached;
    uint8_t _pad_6[0x50];
};




struct SVendingMachineSpawnGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_BindingsIntegerFromNumber {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_1[0x8];
};




struct LadderNavigationLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkValidForAgentType;
    uint8_t _pad_1[0x8];
    struct NavigationLinkCostCustomization* costMultiplierSetup;
    uint8_t _pad_2[0x30];
    enum ARDataType linkingType;
    uint8_t _pad_3[0x4];
    struct UsableUseChannelInstance* useChannel;
    uint8_t _pad_4[0x8];
};




struct VehicleCollisionParams {
    uint8_t _pad_0[0x8];
    float collisionWarnSpeed;
    float collisionWarnTime;
    float collisionDangerCloseWarnTime;
    uint8_t _pad_1[0x4];
};




struct SCharacterCustomizerMakeupChannelParams {
    uint8_t _pad_0[0x8];
    struct SRGBA8* color;
    uint8_t _pad_1[0x8];
    float smooth;
    float metal;
};




struct StarMapMissionObject {
    uint8_t _pad_0[0x8];
    float minimumDisplaySize;
    float rotationSpeed;
    enum ARDataType facingMode;
    uint8_t _pad_1[0x4];
    struct GlobalResourceGeometry* geometry;
    uint8_t _pad_2[0x10];
    struct GlobalResourceMaterial* material;
    uint8_t _pad_3[0x10];
};




struct ArmorMoveViewRestrictions {
    uint8_t _pad_0[0x8];
    struct MoveViewRestrictionWeighting* ViewRestriction;
    uint8_t _pad_1[0x10];
    struct MoveViewRestrictionWeighting* MoveRestriction;
    uint8_t _pad_2[0x10];
};




struct TransitCarriageParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceObjectContainer* defaultInteriorOC;
    uint8_t _pad_1[0x10];
    struct TransitCarriageAudio* audio;
    uint8_t _pad_2[0x120];
    struct TransitCarriageEffects* effects;
    uint8_t _pad_3[0x18];
    _Bool hasExternalAnimations;
    uint8_t _pad_4[0x3];
    float animationLength;
    struct CryStringT* fragment;
    uint8_t _pad_5[0x8];
    struct CryStringT* fragmentArrived;
    uint8_t _pad_6[0x8];
    struct CryStringT* fragmentArriving;
    uint8_t _pad_7[0x8];
    struct CryStringT* fragmentDeparting;
    uint8_t _pad_8[0x8];
    struct CryStringT* fragmentDeparted;
    uint8_t _pad_9[0x8];
    _Bool causesCertainDeath;
    uint8_t _pad_10[0x3];
    float collisionDamage;
    _Bool matchSplineOrientation;
    uint8_t _pad_11[0x7];
};




struct RepairService {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct CLocIdentifier* productName;
    struct CryStringT* icon;
    uint8_t _pad_1[0x8];
    float serviceDelayTime;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* hudMessage;
    uint8_t _pad_3[0x8];
    int32_t commodityToHitPoints;
    int32_t commodityToDegradationLifetime;
    struct ResourceType* repairCommodity;
    uint8_t _pad_4[0x10];
};




struct SPhysicalProxyComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_ComponentCaptionProperties {
    uint8_t _pad_0[0x8];
    _Bool show;
    uint8_t _pad_1[0x7];
    struct CLocIdentifier* caption;
    enum ARDataType style;
    enum ARDataType caseModifier;
};




struct HeadMotionConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    struct HeadMotionShakeSettings* settings;
    uint8_t _pad_2[0xe8];
};




struct TriggerSubConditionSubsumptionEventDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* npcGUID;
    uint8_t _pad_1[0x8];
    struct CryStringT* eventNameHash;
    uint8_t _pad_2[0x8];
};




struct SItemPipeSystemParams {
    uint8_t _pad_0[0x18];
};




struct ConstraintParams {
    uint8_t _pad_0[0x18];
    _Bool broken;
    uint8_t _pad_1[0x3];
    float damping;
    _Bool noSelfCollisions;
    _Bool useEntityFrame;
    uint8_t _pad_2[0x2];
    float maxPullForce;
    float maxBendTorque;
    _Bool constrainToLine;
    _Bool constrainToPlane;
    _Bool constrainFully;
    _Bool noRotation;
    float xMin;
    float xMax;
    float yzMax;
    float xTranslationalCompliance;
    float yzTranslationalCompliance;
    float xTranslationalDampingRate;
    float yzTranslationalDampingRate;
    float xRotationalCompliance;
    float yzRotationalCompliance;
    float xRotationalDampingRate;
    float yzRotationalDampingRate;
    uint8_t _pad_3[0x4];
    struct Vec3* targetRelativePosition;
    uint8_t _pad_4[0x10];
    struct Ang3* targetRelativeRotation;
    uint8_t _pad_5[0x10];
    struct Vec3* targetRelativeLinearVelocity;
    uint8_t _pad_6[0x10];
    float maxMotorForceLin;
    uint8_t _pad_7[0x4];
    struct Vec3* linearMotorInviscosityCoefficient;
    uint8_t _pad_8[0x10];
    struct Vec3* targetRelativeAngularVelocity;
    uint8_t _pad_9[0x10];
    float maxMotorForceAng;
    uint8_t _pad_10[0x4];
    struct Vec3* angularMotorInviscosityCoefficient;
    uint8_t _pad_11[0x10];
};




struct SEntityEffectSystem_UIOwnerTagEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0xcf];
    struct EntityEffectSystem_UIOwnerEvent_Goto* uiOwnerStartEvent;
    uint8_t _pad_3[0x8];
    struct EntityEffectSystem_UIOwnerEvent_Goto* uiOwnerStopEvent;
    uint8_t _pad_4[0x8];
    struct Tag* tag;
    uint8_t _pad_5[0x10];
};




struct SHelmetLinkedState {
    uint8_t _pad_0[0x8];
    enum ARDataType stateMachine;
    enum ARDataType stateToEnter;
};




struct PopupDef {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* title;
    struct CLocIdentifier* message1;
    struct CLocIdentifier* message2;
    struct CLocIdentifier* message3;
    _Bool hasCancelButton;
    _Bool hasConfirmButton;
    uint8_t _pad_1[0x6];
    struct CLocIdentifier* cancelOverrideString;
    struct CLocIdentifier* confirmOverrideString;
    struct CryStringT* popupFrame;
    uint8_t _pad_2[0x8];
    struct CryStringT* popupHeaderFrame;
    uint8_t _pad_3[0x8];
};




struct SLightFlickerFilteringParams {
    uint8_t _pad_0[0x8];
    _Bool ignoreOnlyFogLights;
    _Bool filterByVisArea;
    _Bool ignoreEnvironmentProbes;
    uint8_t _pad_1[0x5];
};




struct SActorForceReactionStaggerTagConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* mannequinTag;
    uint8_t _pad_1[0x8];
    float minDistance;
    uint8_t _pad_2[0x4];
};




struct SCItemProximitySensorParams {
    uint8_t _pad_0[0x18];
    _Bool considerActorVelocity;
    uint8_t _pad_1[0x3];
    float exitDelay;
    struct Tag* activeOnEnterTag;
    uint8_t _pad_2[0x10];
    struct SSharedInteractionParams* EnteredInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* ExitedInteraction;
    uint8_t _pad_4[0x8];
    struct SCItemProximitySensorShapeParams* SensorShape;
    uint8_t _pad_5[0x8];
    _Bool allowCloseWithStationaryActors;
    uint8_t _pad_6[0x3];
    float stationaryActorCloseMinDist;
    _Bool isHelper;
    uint8_t _pad_7[0x7];
};




struct DefaultActionDescriptionOverride {
    uint8_t _pad_0[0x8];
    struct CryStringT* action;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* actionsDescription;
};




struct CameraLensGhostInstance {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    float Position;
    float Intensity;
    struct RGB* Tint;
    uint8_t _pad_2[0x10];
};




struct HandholdAttachmentTriggerParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* entityLinkName;
    uint8_t _pad_2[0x8];
    struct CryStringT* handholdName;
    uint8_t _pad_3[0x8];
    struct HandholdAttachPointChoiceParams* attachPointChoiceParams;
    uint8_t _pad_4[0x50];
};




struct SLockCameraViewAreaParams {
    uint8_t _pad_0[0x18];
    _Bool lockFirstPerson;
    _Bool lockThirdPerson;
    _Bool lockToDefaultView;
    _Bool lockToEnterExitView;
    float cameraEnterToggleSecondsDelay;
    float cameraExitToggleSecondsDelay;
    uint8_t _pad_1[0x4];
    struct Tag* exitAreaTag;
    uint8_t _pad_2[0x10];
};




struct CameraGForceShakeConfig {
    uint8_t _pad_0[0x8];
    struct Ang3* offsetAngle;
    uint8_t _pad_1[0x10];
    struct Vec3* offsetPosition;
    uint8_t _pad_2[0x10];
    float timePeriod;
    _Bool enabled;
    uint8_t _pad_3[0x3];
    float frequencyNoiseFactor;
    float translationNoise;
    float rotationNoise;
    uint8_t _pad_4[0x4];
    float minimumGForce;
    float maximumGForce;
};




struct BuildingBlocks_BindingsBooleanComponentParameter {
    uint8_t _pad_0[0x50];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType parameter;
    _Bool defaultValue;
    uint8_t _pad_2[0xb];
};




struct SWeaponAimableAnglesParams {
    uint8_t _pad_0[0x8];
    float assistInnerAngle;
    float assistOuterAngle;
    float maxNudgeAngle;
    float distanceAssistFarRange;
    float distanceAssistCloseRange;
    float distanceAssistOuterAngle;
    float distanceAssistInnerAngle;
    uint8_t _pad_1[0x4];
};




struct GravityBoxParams {
    uint8_t _pad_0[0x18];
    _Bool active;
    _Bool uniform;
    uint8_t _pad_1[0x2];
    float fallOffInner;
    float gravityMagnitude;
    uint8_t _pad_2[0x4];
    struct Vec3* gravityDirection;
    uint8_t _pad_3[0x10];
    _Bool filled;
    uint8_t _pad_4[0x7];
    struct Vec3* size;
    uint8_t _pad_5[0x10];
};




struct ActorLocomotionAvoidanceParams {
    uint8_t _pad_0[0x8];
    _Bool enableForceStrafe;
    _Bool enableAvoidanceTwist;
    uint8_t _pad_1[0x2];
    float twistAllowedHalfFOV;
    float minTwistDistance;
    float maxTwistDistance;
    float blendWeightAtMinTwist;
    float blendWeightAtMaxTwist;
    float twistBlendTime;
    float twistBlendOutTime;
    float maxDistanceFromPath;
    uint8_t _pad_2[0x4];
};




struct SCItemFlashlightParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceMaterial* lightCookie;
    uint8_t _pad_1[0x10];
    struct SRGB8* color;
    uint8_t _pad_2[0x8];
    float diffuseMult;
    float attenuationBulbSize;
    float distance;
    float fov;
    uint8_t viewDistRatio;
    uint8_t _pad_3[0x3];
    int32_t style;
    float animspeed;
    _Bool focusedBeam;
    _Bool bounceLight;
    uint8_t _pad_4[0x2];
    float bounceProjectorRadius;
    float fogMultiplier;
    float glowMultiplier;
    uint8_t _pad_5[0x4];
    struct Tag* activationTag;
    uint8_t _pad_6[0x10];
    struct CryStringT* helperName;
    uint8_t _pad_7[0x8];
    _Bool useDirectionAsXYZRotation;
    uint8_t _pad_8[0x7];
    struct Vec3* helperDirection;
    uint8_t _pad_9[0x10];
    struct Vec3* helperOffset;
    uint8_t _pad_10[0x10];
    struct GlobalResourceAudio* Light_On_SFX;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* Light_Off_SFX;
    uint8_t _pad_12[0x18];
    float EM_Signature_On;
    float IR_Signature_On;
};




struct EnvironmentLightStateParams_Default {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float intensity;
    uint8_t _pad_2[0x4];
    struct CryStringT* presetTag;
    uint8_t _pad_3[0x8];
};




struct SLauncherBase {
    uint8_t _pad_0[0x8];
};




struct SEALoadoutAttachment {
    uint8_t _pad_0[0x8];
    enum ARDataType attachmentSlot;
    uint8_t _pad_1[0x7];
    struct EntityClassDefinition* attachementClass;
    uint8_t _pad_2[0x10];
};




struct CargoResource {
    uint8_t _pad_0[0x8];
    struct ResourceType* resource;
    uint8_t _pad_1[0x10];
    float probability;
    uint8_t _pad_2[0x4];
};




struct BlobVFXDistanceParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* effect;
    uint8_t _pad_1[0x10];
    double distance;
};




struct MantleNavigationLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkValidForAgentType;
    uint8_t _pad_1[0x8];
    struct NavigationLinkCostCustomization* costMultiplierSetup;
    uint8_t _pad_2[0x30];
    enum ARDataType linkingType;
    uint8_t _pad_3[0x4];
    struct UsableUseChannelInstance* useChannel;
    uint8_t _pad_4[0x8];
    struct NavLinkLocation* topAnchor;
    uint8_t _pad_5[0x8];
    struct CryStringT* mannequinTags;
    uint8_t _pad_6[0x8];
    float motionWarpSearchDistance;
    uint8_t _pad_7[0x4];
};




struct TakeDownParams {
    uint8_t _pad_0[0x8];
    struct ActorStateSkeletonFilter* attackerSkeletonFilter;
    uint8_t _pad_1[0x8];
    struct TakeDownMaxDistances* maxDistances;
    uint8_t _pad_2[0x10];
    float angleRange;
    float surpriseDelay;
    float maxHeightDiffUp;
    float maxHeightDiffDown;
    enum ARDataType victimStance;
    enum ARDataType attackerQuadrant;
    _Bool isTakeDownAlwaysLethal;
    _Bool interruptOnHitReaction;
    _Bool isDodgeable;
    uint8_t _pad_3[0x1];
    float animSpeedupOnDodge;
    float maxSpeedForRangeBoost;
    float minSpeedForRangeBoost;
    float RangeBoostForSpeed;
    uint8_t _pad_4[0x4];
};




struct PingBlobLifeTime {
    uint8_t _pad_0[0x8];
    float lifeTimeMin;
    float lifeTimeMax;
};




struct TransportAlignmentPointParams {
    uint8_t _pad_0[0x18];
};




struct EASimpodStateParams {
    uint8_t _pad_0[0x18];
    struct GameRulesEAStatePreGameParams* pregame;
    uint8_t _pad_1[0x30];
    struct GameRulesEAStatePostGameParams* postgame;
    uint8_t _pad_2[0x38];
};




struct SInputDeflectionTimeParams {
    uint8_t _pad_0[0x8];
    float minDeflectionTime;
    float maxDeflectionTime;
    struct BezierCurve* penaltyMapping;
    uint8_t _pad_1[0x88];
};




struct ActorLookAheadRoll {
    uint8_t _pad_0[0x8];
    float inputThreshold;
    float outputMaxRollAngle;
    struct BezierCurve* angleMap;
    uint8_t _pad_1[0x88];
    _Bool enabled;
    uint8_t _pad_2[0x7];
};




struct DegYPR {
    uint8_t _pad_0[0x14];
    float yaw;
    float pitch;
    float roll;
};




struct StatusEffectMultipleTrigger {
    uint8_t _pad_0[0x8];
    enum ARDataType statusEffectType;
    float triggerMinThreshold;
    float triggerMaxThreshold;
    uint8_t _pad_1[0x4];
    struct StatusEffectValue* value;
    uint8_t _pad_2[0x8];
    struct LinkedStatusEffectTrigger* linkedStatTrigger;
    uint8_t _pad_3[0x10];
};




struct ItemWeaponModifiersParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    int32_t fireActionIndex;
    _Bool setFireActionOnEnable;
    uint8_t _pad_2[0x3];
    struct SWeaponModifierParams* weaponModifier;
    uint8_t _pad_3[0x3c8];
    _Bool showInUI;
    uint8_t _pad_4[0x7];
};




struct UIGraph_ControllerComponent {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct EABettingModuleParams {
    uint8_t _pad_0[0x18];
    enum ARDataType bettingFormat;
    enum ARDataType bettingCurrency;
    _Bool disconnectionProtection;
    _Bool alsoProtectDisconnecter;
    uint8_t _pad_1[0x4];
};




struct ShipWideAudioObject {
    uint8_t _pad_0[0x8];
    struct CryStringT* boneName;
    uint8_t _pad_1[0x8];
    struct Vec3* attachOffset;
    uint8_t _pad_2[0x10];
    struct Ang3* attachOffsetRotation;
    uint8_t _pad_3[0x10];
    struct GlobalResourceAudio* loopStart;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* loopStop;
    uint8_t _pad_5[0x18];
    _Bool updatePosition;
    uint8_t _pad_6[0x7];
};




struct SInteractionConditionPlayerVehicleNotInArmisticeZone {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct InteractionConditionEntityIsHeldByInteractor {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct ArenaCommanderPlanetOverrideParams {
    uint8_t _pad_0[0x8];
    struct StarMapObject* location;
    uint8_t _pad_1[0x10];
    float fixedRotation;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomRightRadiusBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct ActorSignatureMultiplierGlobalParams {
    uint8_t _pad_0[0x8];
    float bodyTemperatureToIRMultiplier;
    float staminaToIRMultiplier;
    float staminaToIRDecayDelay;
    float staminaToIRDecayRate;
};




struct ActorStateData_JumpFallValidationParams {
    uint8_t _pad_0[0x8];
    float stateTimeout;
    uint8_t _pad_1[0x4];
};




struct UseChannelArchetype {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
    struct CryStringT* onItemPortOccupiedFragmentTag;
    uint8_t _pad_3[0x8];
    struct Tag* tag;
    uint8_t _pad_4[0x28];
};




struct FrontendS42Actions {
    uint8_t _pad_0[0x8];
    struct FrontendS42ActionData* newGame;
    uint8_t _pad_1[0xd0];
    struct FrontendS42ActionData* continue_;
    uint8_t _pad_2[0xd0];
    struct FrontendS42ActionData* loadGame;
    uint8_t _pad_3[0xd0];
    struct FrontendS42ActionData* quit;
    uint8_t _pad_4[0xd0];
    struct FrontendS42ActionData* options;
    uint8_t _pad_5[0xd0];
    struct FrontendS42ActionData* hallway;
    uint8_t _pad_6[0xd0];
    struct FrontendS42ActionData* room;
    uint8_t _pad_7[0xd0];
    struct FrontendS42ActionData* galactapedia;
    uint8_t _pad_8[0xd0];
    struct FrontendS42ActionData* changeCharacter;
    uint8_t _pad_9[0xd0];
    struct FrontendS42ActionData* debugLevelSelect;
    uint8_t _pad_10[0xd0];
    struct FrontendS42ActionData* missionSelect;
    uint8_t _pad_11[0xd0];
};




struct AtmosphereStateMultiRef {
    uint8_t _pad_0[0x8];
    struct AtmosphereStatePressureTemplate* pressureTemplate;
    uint8_t _pad_1[0x10];
    struct AtmosphereStateTemperatureTemplate* temperatureTemplate;
    uint8_t _pad_2[0x10];
    struct AtmosphereStateHumidityTemplate* humidityTemplate;
    uint8_t _pad_3[0x10];
};




struct SChangeFactionTrigger {
    uint8_t _pad_0[0x8];
    struct Faction_LEGACY* faction;
    uint8_t _pad_1[0x10];
};




struct SCItemControlUsableParams {
    uint8_t _pad_0[0x8];
    struct SCItemControllableParams* usableControl;
    uint8_t _pad_1[0x8];
};




struct ThrusterGimbalState {
    uint8_t _pad_0[0x8];
    struct SInteractionState* interactionState;
    uint8_t _pad_1[0x8];
    struct ThrusterGimbal* gimbalParams;
    uint8_t _pad_2[0x78];
};




struct PlayerHostilityParams {
    uint8_t _pad_0[0x8];
    _Bool enableFriendlyFactionsHostility;
    uint8_t _pad_1[0x7];
    struct PlayerHostilityAccidentalFireParams* accidentalFireAIActorParams;
    uint8_t _pad_2[0x10];
    struct PlayerHostilityAccidentalFireParams* accidentalFirePlayerActorParams;
    uint8_t _pad_3[0x10];
    struct PlayerHostilityAccidentalFireParams* accidentalFireAIShipParams;
    uint8_t _pad_4[0x10];
    struct PlayerHostilityAccidentalFireParams* accidentalFirePlayerShipParams;
    uint8_t _pad_5[0x10];
    float enemyRepHostilityThresholdMultiplier;
    float allyRepHostilityThresholdMultiplier;
    float nonTargetedHostilityThresholdMultiplier;
    float criminalHostilityThresholdMultiplier;
    int32_t criminalWantedLevelThreshold;
    _Bool changeHostilityOnFriendlyFire;
    uint8_t _pad_6[0x3];
    float hostilityTimerMinSeconds;
    float hostilityTimerMaxSeconds;
    float hostilityTimerIncreaseStep;
    float neutralZoneExclusionTime;
};




struct WeaponProceduralClipHandsOverlay {
    uint8_t _pad_0[0x8];
    float blendTime;
    uint8_t _pad_1[0x4];
    float amplitude;
    float amplitudeNoiseFactor;
    float frequency;
    float frequencyNoiseFactor;
    float maxDistance;
    float maxDistanceNoiseFactor;
    float smoothFactor;
    float phase;
    struct Ang3* rotation;
    uint8_t _pad_2[0x10];
    float rotationNoise;
    uint8_t _pad_3[0x4];
    struct Ang3* vDisplacementRotation;
    uint8_t _pad_4[0x10];
    float vDisplacementRotationNoise;
    float minSpeed;
    float maxSpeed;
    float minTimeModifier;
};




struct AINavigationObstacleParams {
    uint8_t _pad_0[0x18];
};




struct ControlHintCondition_VehicleJumpDriveState {
    uint8_t _pad_0[0x8];
    enum ARDataType vehicleJumpDriveState;
    uint8_t _pad_1[0x7];
};




struct AIProfile {
    uint8_t _pad_0[0x8];
    struct CharacterSkills* character;
    uint8_t _pad_1[0x108];
    struct SeatOperatorSkills* seatOperator;
    uint8_t _pad_2[0x70];
    struct TacticScoringProfile* tacticSelectionScores;
    uint8_t _pad_3[0x30];
    struct SharedTacticParams* sharedTacticParams;
    uint8_t _pad_4[0x10];
    struct ShootingParams* shootingParams;
    uint8_t _pad_5[0x10];
};




struct SIParamsModule {
    uint8_t _pad_0[0x18];
};




struct SEASpawningLocalization {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* locTimeToRespawn;
    struct CLocIdentifier* locPressOpenSpawnScreen;
    struct CLocIdentifier* locHoldToRespawn;
    struct CLocIdentifier* locPressToRespawn;
    struct CLocIdentifier* locRespawning;
};




struct GlobalGasCloudVDB_GameplayParams {
    uint8_t _pad_0[0x8];
    struct Range* opticalDensityRange;
    uint8_t _pad_1[0x8];
    struct BezierCurve* gameplayDensityCurve;
    uint8_t _pad_2[0x88];
};




struct InteractionConditionListRecord {
    uint8_t _pad_0[0x8];
    struct InteractionConditionList* conditionList;
    uint8_t _pad_1[0x90];
};




struct ActionAreaAudioNoiseExtension {
    uint8_t _pad_0[0x8];
    float defaultAudioNoiseLevel;
    uint8_t _pad_1[0x4];
};




struct SEntityComponentPersistentEntityEntitlementSpawnerParams {
    uint8_t _pad_0[0x18];
};




struct SCItemRadarAIProperties {
    uint8_t _pad_0[0x8];
    _Bool forceActiveWhenAIControlled;
    _Bool allowPingWave;
    uint8_t _pad_1[0x6];
};




struct PersonalTransportBeaconParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* objectiveTitle;
    struct CLocIdentifier* objectiveDescription;
    _Bool canBeCreatedInMobiglas;
    uint8_t _pad_1[0x3];
    enum ARDataType serviceBeaconType;
    struct CLocIdentifier* serviceBeaconName;
    int32_t beaconTaxPercentage;
    int32_t beaconMaxPaymentAmount;
    struct MissionPropertyValue_AIName* npcRequesterNameDef;
    uint8_t _pad_2[0x40];
    struct SServiceBeaconCreatorParamsBase* npcCreatorParams;
    uint8_t _pad_3[0x8];
    struct CLocIdentifier* pickUpObjectiveTitle;
    struct CLocIdentifier* pickUpObjectiveDescription;
    struct CLocIdentifier* deliveryObjectiveTitle;
    struct CLocIdentifier* deliveryObjectiveDescription;
};




struct SUsableMovementAlignmentData {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
};




struct SChangeHoloEntityStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* holoEntityState;
    uint8_t _pad_1[0x8];
};




struct InstancedInteriorManagerComponentParams {
    uint8_t _pad_0[0x18];
    float doorTimeoutSeconds;
    uint8_t _pad_1[0x4];
};




struct ConsumableFoodAttachment {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* geometry;
    uint8_t _pad_1[0x10];
    struct GlobalResourceMaterial* materialOverride;
    uint8_t _pad_2[0x10];
    struct CryStringT* attachmentBone;
    uint8_t _pad_3[0x8];
    _Bool attachToUtensil;
    uint8_t _pad_4[0x7];
};




struct SUsableGroupParams {
    uint8_t _pad_0[0x18];
    enum ARDataType selectionMethod;
    enum ARDataType condition;
    _Bool resetOnCoordinator;
    uint8_t _pad_1[0x3];
    int32_t maxNPCs;
    int32_t numberOfUses;
    uint8_t _pad_2[0x4];
};




struct CraftingBlueprintTier_Base {
    uint8_t _pad_0[0x8];
};




struct ActorSomaticShakeConfig {
    uint8_t _pad_0[0x8];
    struct ActorStateFilter* filter;
    uint8_t _pad_1[0x40];
    float weaponOffsetCm;
    float weaponRotationAngle;
    float armRotationAngle;
    float handRotationAngle;
};




struct SAILedgeParams {
    uint8_t _pad_0[0x8];
    float navigationLinksSpacing;
    uint8_t _pad_1[0x4];
};




struct EntityComponentAudioEnvironmentFeedbackPointParams {
    uint8_t _pad_0[0x18];
    struct AudioEnvironmentFeedbackPointDef* feedbackPointDef;
    uint8_t _pad_1[0x10];
};




struct HarvestDespawnTimerParams {
    uint8_t _pad_0[0x8];
    int32_t despawnTimeSeconds;
    int32_t additionalWaitForNearbyPlayersSeconds;
};




struct GlobalResourceCharacter {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct DoorOpenStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* opened;
    uint8_t _pad_1[0x8];
    struct SInteractionState* closed;
    uint8_t _pad_2[0x8];
    struct SInteractionState* opening;
    uint8_t _pad_3[0x8];
    struct SInteractionState* closing;
    uint8_t _pad_4[0x8];
};




struct EntityComponentVibrationVehicleParams {
    uint8_t _pad_0[0x18];
    struct SVibrationDef* vibrationRecord;
    uint8_t _pad_1[0x10];
    struct SVibrationVehicleDef* vibrationVehicleRecord;
    uint8_t _pad_2[0x10];
};




struct CraftingRecipeResults_RecordRef {
    uint8_t _pad_0[0x8];
    struct CraftingRecipeResultsRecord* resultsRecord;
    uint8_t _pad_1[0x10];
};




struct ItemResourceControlConditionLimitParameter {
    uint8_t _pad_0[0x8];
    struct ItemResourceControlOutputBase* controlOutput;
    uint8_t _pad_1[0x8];
    struct ItemResourceControlParameterBase* controlParameter;
    uint8_t _pad_2[0x8];
    struct ItemResourceControlParameterBase* limitParameter;
    uint8_t _pad_3[0x8];
    _Bool min;
    uint8_t _pad_4[0x7];
};




struct LadderAccessClimbParams {
    uint8_t _pad_0[0x8];
    float approachAngle;
    float facingAngle;
    float autoMountRadiusOffset;
    float autoMountRadius;
    _Bool enterAnimWillGoUnderneath;
    uint8_t _pad_1[0x7];
    struct ExitCollisionCheckOverrideParams* exitCollisionCheckOverride;
    uint8_t _pad_2[0x8];
};




struct ReputationPrerequisites {
    uint8_t _pad_0[0x8];
    struct Jurisdiction* wantedLevelJurisdictionOverride;
    uint8_t _pad_1[0x10];
    struct ReputationPrerequisiteRange* wantedLevel;
    uint8_t _pad_2[0x8];
};




struct SSalvageRepairRangeParams {
    uint8_t _pad_0[0x8];
    float maxBeamDistance;
    float maxSensorDistance;
    float aimPointSensorRadius;
    float aimPointIntegritySmoothTime;
};




struct PlayerToPlayerCommsCallGlobalParams {
    uint8_t _pad_0[0x8];
    struct WebRTCCommsCallProjectorLightParams* faceLight;
    uint8_t _pad_1[0x38];
    struct WebRTCCommsCallProjectorLightParams* environmentLight;
    uint8_t _pad_2[0x38];
};




struct InventoryLocation {
    uint8_t _pad_0[0x8];
    struct StarMapObject* location;
    uint8_t _pad_1[0x10];
    _Bool visibleToPlayer;
    uint8_t _pad_2[0x7];
};




struct VehicleItemInteriorController {
    uint8_t _pad_0[0x8];
    struct GameTokens* GameTokenList;
    uint8_t _pad_1[0x60];
};




struct LightComponentParams {
    uint8_t _pad_0[0x18];
    _Bool active;
    uint8_t _pad_1[0x3];
    enum ARDataType lightType;
    enum ARDataType importance;
    _Bool affectsThisAreaOnly;
    _Bool affectsFog;
    _Bool affectsObjects;
    _Bool useTemperature;
    _Bool distantImposter;
    _Bool ignoreLightFlickerEntities;
    uint8_t _pad_2[0x2];
    enum ARDataType affectGI;
    enum ARDataType enabledWithGI;
    uint8_t _pad_3[0x4];
    struct LightSizeParams* sizeParams;
    uint8_t _pad_4[0x10];
    struct LightStateParams_Off* offState;
    uint8_t _pad_5[0x10];
    struct LightStateParams_Default* defaultState;
    uint8_t _pad_6[0x38];
    struct LightStateParams_Aux* auxiliaryState;
    uint8_t _pad_7[0x38];
    struct LightStateParams_Emergency* emergencyState;
    uint8_t _pad_8[0x38];
    struct LightStateParams_Cinematic* cinematicState;
    uint8_t _pad_9[0x38];
    struct LightProjectorParams* projectorParams;
    uint8_t _pad_10[0x18];
    struct LightShadowParams* shadowParams;
    uint8_t _pad_11[0x20];
    struct LightStyleParams* styleParams;
    uint8_t _pad_12[0x28];
    struct LightGroupParams* groupParams;
    uint8_t _pad_13[0x10];
    struct LightClipBoxParams* clipBoxParams;
    uint8_t _pad_14[0x8];
    struct LightFadeParams* fadeParams;
    uint8_t _pad_15[0x10];
    struct LightMiscParams* miscParams;
    uint8_t _pad_16[0x20];
    struct LightFlareParams* flareParams;
    uint8_t _pad_17[0x28];
};




struct QuantumParams {
    uint8_t _pad_0[0x8];
    _Bool enableLeaderDependence;
    _Bool enableBlindBoost;
    _Bool useQBoostDataDuringRampup;
    _Bool enforceGroupQT;
    uint8_t _pad_1[0x4];
};




struct ObjectiveHandler_WithModule {
    uint8_t _pad_0[0x8];
    struct CryStringT* module;
    uint8_t _pad_1[0x8];
    struct MissionModuleHierarchy* moduleHierarchy;
    uint8_t _pad_2[0x10];
    _Bool disableTravelObjectives;
    uint8_t _pad_3[0x3];
    float travelRadiusKM;
    struct ObjectiveDisplayInfo* travelObjectiveInfo;
    uint8_t _pad_4[0x20];
    struct ObjectiveDisplayInfo* returnObjectiveInfo;
    uint8_t _pad_5[0x20];
    struct NavPointSpawnInformation* navPointSpawnInfo;
    uint8_t _pad_6[0x10];
};




struct SCItemControlPriorityValue {
    uint8_t _pad_0[0x8];
};




struct SEntityTraversingNodeTypeItemType {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
};




struct CockpitRuleInt {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float priority;
    uint8_t _pad_2[0x4];
    int32_t value;
    uint8_t _pad_3[0x4];
};




struct GlobalAtmosphericHeatingSettings {
    uint8_t _pad_0[0x8];
    float flareStartTemperature;
    float gravityDirectionBias;
    struct Range* relativeAltitudeRange;
    uint8_t _pad_1[0x8];
    float relativeAltitudePeakStrength;
    float minimumSpeed;
    float maximumNonVehicleSpeed;
    uint8_t _pad_2[0x4];
    struct Vec3* maximumNonVehicleAngularVelocity;
    uint8_t _pad_3[0x10];
    struct Range* fadeAngleRange;
    uint8_t _pad_4[0x8];
};




struct SWeaponAttachmentItemPort {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Vec2* listAnchorOverride;
    uint8_t _pad_2[0x8];
    struct Vec3* portButtonOffset;
    uint8_t _pad_3[0x10];
    struct Vec2* inspectAnimationBlend;
    uint8_t _pad_4[0x8];
};




struct WeaponProceduralClipPose {
    uint8_t _pad_0[0x8];
    float blendTime;
    uint8_t _pad_1[0x4];
    enum ARDataType poseType;
    float zoomTransitionAngle;
    struct Vec3* position;
    uint8_t _pad_2[0x10];
    struct Ang3* rotation;
    uint8_t _pad_3[0x10];
    float zoomTransitionTimeMultiplier;
    uint8_t _pad_4[0x4];
    struct WeaponPoseInterpolationCurves* interpolationCurves;
    uint8_t _pad_5[0x430];
    _Bool useAimHelperOffset;
    uint8_t _pad_6[0x7];
};




struct SQedVisualGraphAnimationParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* fragmentName;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
    float playbackBias;
    _Bool loop;
    uint8_t _pad_3[0x3];
};




struct MineableCompositionPart {
    uint8_t _pad_0[0x8];
    struct MineableElement* mineableElement;
    uint8_t _pad_1[0x10];
    float minPercentage;
    float maxPercentage;
    float probability;
    float curveExponent;
};




struct BuildingBlocks_BindingsBooleanField {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType field;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_3[0x8];
};




struct SEntityFireMisfireEffect {
    uint8_t _pad_0[0x8];
    struct Tag* effectTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* effectTag;
    uint8_t _pad_2[0x10];
    float strength;
    float flashStrength;
};




struct AIPerceptionMeterThresholds {
    uint8_t _pad_0[0x8];
    float low;
    float medium;
    float high;
    float combat;
};




struct SpecialEventManufacturer {
    uint8_t _pad_0[0x8];
};




struct WorldDisplayRadar {
    uint8_t _pad_0[0x8];
    float hoverSizeMultiplier;
    uint8_t _pad_1[0x4];
    struct WorldDisplayRadar_Icon* unknown;
    uint8_t _pad_2[0x30];
    struct WorldDisplayRadar_Icon* defaultUp;
    uint8_t _pad_3[0x30];
    struct WorldDisplayRadar_Icon* defaultDown;
    uint8_t _pad_4[0x30];
    struct WorldDisplayRadar_Icon* missile;
    uint8_t _pad_5[0x30];
    struct WorldDisplayRadar_Line* horizontalLine;
    uint8_t _pad_6[0x30];
    struct WorldDisplayRadar_Line* verticalLine;
    uint8_t _pad_7[0x30];
};




struct SandboxTriggerBaseDef {
    uint8_t _pad_0[0x8];
};




struct InterferenceParams_Continuous {
    uint8_t _pad_0[0x8];
    float fallOffDistance;
    uint8_t _pad_1[0x4];
    float energyPerSecond;
    float increaseDuration;
};




struct BuildingBlocks_FieldModifierBoolean {
    uint8_t _pad_0[0x8];
    enum ARDataType field;
    _Bool value;
    uint8_t _pad_1[0x3];
};




struct BuildingBlocks_ColorPicker {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_WidgetBase* markerNodeDef;
    uint8_t _pad_1[0x8];
    struct CryStringT* anchorXVariableURL;
    uint8_t _pad_2[0x8];
    struct CryStringT* anchorYVariableURL;
    uint8_t _pad_3[0x8];
    struct CryStringT* outputColorVariableURL;
    uint8_t _pad_4[0x8];
};




struct SGlobalElectronParams {
    uint8_t _pad_0[0x8];
    float time;
    float damagePerCharge;
    float metersPerCharge;
    float damageScalePerJump;
    float cooldownBetweenJumps;
    float residualChargeMultiplier;
    float residualChargeInterference;
    uint8_t _pad_1[0x4];
    struct ExplosionParams* explosionParams;
    uint8_t _pad_2[0x1b8];
    struct Tag* chargedTag;
    uint8_t _pad_3[0x10];
    struct GlobalResourceParticle* chainLightningParticleEffect;
    uint8_t _pad_4[0x10];
    float chainLightningEffectDuration;
    uint8_t _pad_5[0x4];
    struct CryStringT* chainLightningJoint;
    uint8_t _pad_6[0x8];
    struct CryStringT* explosionJoint;
    uint8_t _pad_7[0x8];
    struct GlobalResourceAudio* residualChargeAudioStartTrigger;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* residualChargeAudioStopTrigger;
    uint8_t _pad_9[0x18];
    struct AudioRtpc* residualChargeTimeRemainingRtpc;
    uint8_t _pad_10[0x18];
    struct AudioRtpc* residualChargeDamageRtpc;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* chainLightningSourceAudioStartTrigger;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* chainLightningSourceAudioStopTrigger;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* chainLightningTargetAudioStartTrigger;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* chainLightningTargetAudioStopTrigger;
    uint8_t _pad_15[0x18];
    struct AudioRtpc* chainLightningTimeRemainingRtpc;
    uint8_t _pad_16[0x18];
    struct AudioRtpc* chainLightningParticleStrengthRtpc;
    uint8_t _pad_17[0x18];
    struct CryStringT* audioBoneName;
    uint8_t _pad_18[0x18];
};




struct AtmosphereBehavior {
    uint8_t _pad_0[0x8];
    struct Behavior_AtmosphereVehicleEffectParams* vehicleEffects;
    uint8_t _pad_1[0x28];
    struct AtmosphereBehavior_TurbulenceParams* turbulence;
    uint8_t _pad_2[0x8];
    struct AtmosphereBehavior_WeatherParams* weather;
    uint8_t _pad_3[0x8];
    _Bool enableAtmosphericHeating;
    _Bool enableActorVectorFields;
    uint8_t _pad_4[0x6];
    struct Tag* atmosphereEnvironmentTag;
    uint8_t _pad_5[0x10];
    struct AudioRtpc* atmospherePressureRtpc;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* atmosphereTemperatureRtpc;
    uint8_t _pad_7[0x18];
    struct AudioRtpc* atmosphereHumidityRtpc;
    uint8_t _pad_8[0x18];
};




struct IntUserVariableTask {
    uint8_t _pad_0[0x20];
};




struct EntityComponentEffects_Test_Tag {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct Tag* tag;
    uint8_t _pad_2[0x10];
    _Bool forceStop;
    uint8_t _pad_3[0x7];
};




struct CameraRotationConfig {
    uint8_t _pad_0[0x8];
    struct Ang3* rotationInitial;
    uint8_t _pad_1[0x10];
    _Bool randomRotationInitX;
    _Bool randomRotationInitZ;
    uint8_t _pad_2[0x6];
    struct Ang3* rotationMin;
    uint8_t _pad_3[0x10];
    struct Ang3* rotationMax;
    uint8_t _pad_4[0x10];
    struct Ang3* additionalRotation;
    uint8_t _pad_5[0x10];
    _Bool canRotate;
    uint8_t _pad_6[0x3];
    float rotationSpeed;
    float maxManualRotationSpeed;
    float rotationSmoothTime;
    struct Ang3* automaticRotationSpeed;
    uint8_t _pad_7[0x10];
    float timeBeforeAutomaticRotation;
    _Bool followPlanetaryFrame;
    _Bool followInitialEntityYDirection;
    uint8_t _pad_8[0x2];
};




struct HintUIData {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* TitleText;
    struct CLocIdentifier* BodyText;
    struct CLocIdentifier* BodyTextGamePad;
    struct CLocIdentifier* BodyTextJoystick;
    struct CryStringT* TitleImagePath;
    uint8_t _pad_1[0x8];
    struct CryStringT* BodyImagePath;
    uint8_t _pad_2[0x8];
};




struct SScoreboardStat {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    enum ARDataType statType;
    _Bool greaterValueBetter;
    _Bool visible;
    uint8_t _pad_1[0x5];
};




struct SS42PlayerStats {
    uint8_t _pad_0[0x18];
    float secondsToMergeHits;
    int32_t deathScreenMaxItemsPerColumn;
    int32_t deathScreenMaxSecondsStatValid;
    uint8_t _pad_1[0x4];
    struct SEAFriendlyFireKickParams* friendlyFireKickParams;
    uint8_t _pad_2[0x58];
};




struct AudioEnvironment {
    uint8_t _pad_0[0x8];
    struct CryStringT* wwiseEnvironmentName;
    uint8_t _pad_1[0x8];
    float interiorityMinimum;
    float interiorityMaximum;
    float sizeMinimum;
    float sizeMaximum;
    struct CryStringT* primarySurfaceType;
    uint8_t _pad_2[0x8];
    struct CryStringT* secondarySurfaceType;
    uint8_t _pad_3[0x8];
};




struct CommunicationChannelName {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct SSetHealthGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct TriggeredHealth* Health;
    uint8_t _pad_1[0x8];
};




struct SurfaceRaindropsTargetComponentParams {
    uint8_t _pad_0[0x18];
};




struct ActorSpeedCameraEffects {
    uint8_t _pad_0[0x8];
    float speedBoostMin;
    float speedBoostMax;
    float speedBoostFOV;
    float focusDistance;
    struct CameraEffectsModifiers* genericModifiers;
    uint8_t _pad_1[0x150];
};




struct SCItemUserParams {
    uint8_t _pad_0[0x18];
};




struct SubHarvestableConfigRef {
    uint8_t _pad_0[0x8];
    struct SubHarvestableConfigRecord* subConfigRef;
    uint8_t _pad_1[0x10];
};




struct MineableCommoditiesScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct PercentageStatusTrigger {
    uint8_t _pad_0[0x8];
    struct SStatusFortitudeLevelModifier* fortitudeLevelModifier;
    uint8_t _pad_1[0x8];
    float triggerMinPercentage;
    float triggerMaxPercentage;
};




struct SSpawnOnTimer {
    uint8_t _pad_0[0x8];
    float timeBetweenSpawns;
    int32_t maxEntities;
    int32_t maxLifetimeEntities;
    _Bool dontOverlap;
    _Bool startTimerOnDone;
    uint8_t _pad_1[0x2];
};




struct MiningLaserGlobalParams {
    uint8_t _pad_0[0x8];
    _Bool blockThrottleChangeWhenNotFiring;
    _Bool throttleResetOnStopFire;
    uint8_t _pad_1[0x2];
    float throttleChangePerAction;
    float throttleAccPeriod;
    float throttleAccFactor;
    float throttleHoldAccFactor;
    uint8_t _pad_2[0x4];
    struct AudioRtpc* throttleRTPC;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* mineableGlowStrengthRTPC;
    uint8_t _pad_4[0x18];
    struct AudioRtpc* mineableOptimalBreakZoneRTPC;
    uint8_t _pad_5[0x18];
};




struct ProceduralLandingFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    enum ARDataType filterByLandingStrength;
    uint8_t _pad_2[0x4];
    struct ProceduralAnimation* animationRecord;
    uint8_t _pad_3[0x10];
};




struct ControlHintCondition_VehicleLandingArea {
    uint8_t _pad_0[0x8];
    enum ARDataType landingArea;
    uint8_t _pad_1[0x7];
};




struct RaceRingComponentParams {
    uint8_t _pad_0[0x18];
    float radius;
    float openSpeed;
    float closeSpeed;
    float openAmount;
    float closeAmount;
    uint8_t _pad_1[0x4];
    struct CryStringT* innerRingModel;
    uint8_t _pad_2[0x8];
    struct CryStringT* outerRingModel;
    uint8_t _pad_3[0x8];
    struct CryStringT* irisModel;
    uint8_t _pad_4[0x8];
    struct CryStringT* openAnimName;
    uint8_t _pad_5[0x8];
};




struct ElectricalStateTemplate {
    uint8_t _pad_0[0x8];
    struct ElectricalStateTemplateInternal* state;
    uint8_t _pad_1[0x8];
};




struct GlobalResourceGeometry {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct WaterEffectsGlobalParams {
    uint8_t _pad_0[0x8];
    struct WaterInteractionEffectParams* exitWaterEffect;
    uint8_t _pad_1[0x30];
    struct WaterInteractionEffectParams* enterWaterEffect;
    uint8_t _pad_2[0x30];
};




struct QTERequestConfig {
    uint8_t _pad_0[0x8];
    _Bool blockActions;
    uint8_t _pad_1[0x7];
    struct InputAction* actionName;
    uint8_t _pad_2[0x28];
    int32_t totalPressNum;
    float maxQTETime;
    struct InputPromptConfig* inputPromptConfig;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_BindingsPathArrayIndexNumber {
    uint8_t _pad_0[0x8];
    uint16_t index;
    uint8_t _pad_1[0xe];
};




struct BuildingBlocks_FontStyle {
    uint8_t _pad_0[0x8];
    struct CryStringT* font;
    uint8_t _pad_1[0x8];
    _Bool isBold;
    uint8_t _pad_2[0x3];
    float imageSizePercent;
    float scaleModifier;
    float leadingModifier;
    float topMarginModifier;
    float leftMarginModifier;
    int32_t numImageReplacementSpaces;
    uint8_t _pad_3[0xc];
};




struct DeltaSignatureSpikeParams {
    uint8_t _pad_0[0x8];
    enum ARDataType operationType;
    uint8_t _pad_1[0x3];
    float spikeValue;
};




struct SFloatNumberComparer {
    uint8_t _pad_0[0x8];
    float value;
    enum ARDataType mode;
};




struct SJumpTunnelObstacleGenerationParams {
    uint8_t _pad_0[0x8];
    struct Range* size;
    uint8_t _pad_1[0x8];
    struct Range* offset;
    uint8_t _pad_2[0x8];
    struct Range* angle;
    uint8_t _pad_3[0x8];
};




struct SUsableTransitionParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* transitionAudioTrigger;
    uint8_t _pad_1[0x18];
    struct CryStringT* aiSignal;
    uint8_t _pad_2[0x8];
    struct CryStringT* additionalTags;
    uint8_t _pad_3[0x8];
    enum ARDataType eventTriggerMask;
    uint8_t _pad_4[0x4];
};




struct ParticleEffectRandomTintingParams {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float random;
    _Bool randomHue;
    uint8_t _pad_2[0x3];
};




struct SUsableRoutingSettings {
    uint8_t _pad_0[0x8];
    struct CryStringT* useChannelName;
    uint8_t _pad_1[0x8];
    struct TagList* slotGameTags;
    uint8_t _pad_2[0x30];
    enum ARDataType selectionType;
    _Bool skipEntry;
    _Bool verifyNavMesh;
    uint8_t _pad_3[0x2];
    struct Tag* interactionTag;
    uint8_t _pad_4[0x40];
};




struct EntityComponentRttAspectBoxoutParams {
    uint8_t _pad_0[0x18];
    enum ARDataType targetRttSlot;
    float aspectRatio;
    float maximumScreenSizeRatio;
    float noShieldScaleAdjustment;
};




struct EAPickupBaseParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float percent;
    int32_t requiredScore;
    _Bool spawnOnKill;
    _Bool enabledForFPS;
    _Bool enabledForVehicles;
    _Bool allowSpawnOnSuicide;
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
};




struct SActorForceReactionFlinchRangeDef {
    uint8_t _pad_0[0x8];
    float effectRangeMin;
    float effectRangeMax;
    struct SActorForceReactionAimPunchConfig* aimPunch;
    uint8_t _pad_1[0x58];
    struct SActorForceReactionWeaponTwitchConfig* weaponTwitch;
    uint8_t _pad_2[0x38];
    struct SActorForceReactionHeadRecoilConfig* headRecoil;
    uint8_t _pad_3[0xa8];
    struct SActorForceReactionFOVScaleConfig* FOVScale;
    uint8_t _pad_4[0x28];
    struct SActorForceReactionAnimationFlinchConfig* animationFlinch;
    uint8_t _pad_5[0x8];
    struct SActorForceReactionBlockADSConfig* blockADS;
    uint8_t _pad_6[0x10];
};




struct SEntityComponentATCSpawnableParams {
    uint8_t _pad_0[0x18];
};




struct SDespawnRule_OnPartsDetached {
    uint8_t _pad_0[0x8];
    float ruleDelaySeconds;
    uint8_t _pad_1[0x4];
};




struct SMiningDamageMapParams {
    uint8_t _pad_0[0x8];
    struct Vec4* damageStrength;
    uint8_t _pad_1[0x10];
    struct Vec4* innerRadii;
    uint8_t _pad_2[0x10];
    struct Vec4* outerRadii;
    uint8_t _pad_3[0x10];
    _Bool isActive;
    uint8_t _pad_4[0x3];
    float hitTime;
    float laserDamageFullValue;
    float damageStrengthPowerCurveBaseValue;
    float damageStrengthPowerCurve;
    uint8_t _pad_5[0x4];
    struct SDamageCurveParams* damageStrengthPowerCurvePoints;
    uint8_t _pad_6[0x10];
    float innerRadiusPowerCurveBaseValue;
    float innerRadiusPowerCurve;
    struct SDamageCurveParams* innerRadiusPowerCurvePoints;
    uint8_t _pad_7[0x10];
    float outerRadiusPowerCurveBaseValue;
    float outerRadiusPowerCurve;
    struct SDamageCurveParams* outerRadiusPowerCurvePoints;
    uint8_t _pad_8[0x10];
    _Bool strengthAffectedByLaserThrottle;
    _Bool strengthAffectedByRockEnergyAmount;
    _Bool strengthAffectedByLaserDamage;
    _Bool radiusAffectedByLaserThrottle;
    _Bool radiusAffectedByRockEnergyAmount;
    _Bool radiusAffectedByLaserDamage;
    uint8_t _pad_9[0x2];
};




struct ProceduralConnectionLinkController {
    uint8_t _pad_0[0x8];
    float zOffsetForRaycastCheck;
    uint8_t _pad_1[0x4];
};




struct SAttachmentConstraintParams {
    uint8_t _pad_0[0x8];
    float damping;
    _Bool noSelfCollisions;
    uint8_t _pad_1[0x3];
    float maxPullForce;
    float maxBendTorque;
    _Bool constrainToLine;
    _Bool constrainToPlane;
    _Bool constrainFully;
    _Bool noRotation;
    _Bool useWorldConstraintPosition;
    uint8_t _pad_2[0x3];
    float xMin;
    float xMax;
    float yzMax;
    uint8_t _pad_3[0x4];
    struct CryStringT* constraintHelper;
    uint8_t _pad_4[0x8];
    _Bool constraintMaintainOrientation;
    uint8_t _pad_5[0x7];
};




struct TimeValue_LongSeconds {
    uint8_t _pad_0[0x8];
    double seconds;
};




struct SReflexXPGains {
    uint8_t _pad_0[0x8];
    float timeStealth;
    float adsHit;
    float takeDown;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_BindingsNumberFromBoolean {
    uint8_t _pad_0[0x50];
    float isTrue;
    float isFalse;
    struct BuildingBlocks_BindingsNumberBase* inputTrue;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsNumberBase* inputFalse;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_3[0xf8];
};




struct BoneCounterRotateConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* boneName;
    uint8_t _pad_1[0x8];
    int32_t smoothingChainLength;
    uint8_t _pad_2[0x4];
};




struct GlobalResourceADB {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct SARDataGenericComponentParams {
    uint8_t _pad_0[0x18];
};




struct EntityComponentVibrationParams {
    uint8_t _pad_0[0x18];
    struct SVibrationDef* vibrationRecord;
    uint8_t _pad_1[0x10];
};




struct RestrictedAreaParams {
    uint8_t _pad_0[0x18];
    struct RestrictedAreaRedoutParams* redoutParams;
    uint8_t _pad_1[0x10];
    struct RestrictedAreaAutopilotParams* autopilotParams;
    uint8_t _pad_2[0x8];
    struct RestrictedAreaKillParams* killParams;
    uint8_t _pad_3[0x38];
    struct RestrictedAreaHUDMessageParams* hudMessageParams;
    uint8_t _pad_4[0x60];
};




struct EAScoringComponentParamsDef {
    uint8_t _pad_0[0x18];
    int32_t totalScore;
    float timeSinceLastHitForAssist;
    int32_t awardKill;
    int32_t awardKillAssist;
};




struct SEntityComponentManagedEntityRegionParams {
    uint8_t _pad_0[0x18];
};




struct DamageMacro {
    uint8_t _pad_0[0x8];
    struct DamageInfo* damageInfo;
    uint8_t _pad_1[0x18];
};




struct SCItemSeatDashboardScreenPos {
    uint8_t _pad_0[0x8];
    struct CryStringT* Helper;
    uint8_t _pad_1[0x8];
    float Scale;
    uint8_t _pad_2[0x4];
    struct QuatT* Offset;
    uint8_t _pad_3[0x50];
};




struct CargoGridOccupantProperties {
    uint8_t _pad_0[0x8];
    struct CargoGridOccupantFace* Top;
    uint8_t _pad_1[0x8];
    struct CargoGridOccupantFace* Bottom;
    uint8_t _pad_2[0x8];
    struct CargoGridOccupantFace* Front;
    uint8_t _pad_3[0x8];
    struct CargoGridOccupantFace* Back;
    uint8_t _pad_4[0x8];
    struct CargoGridOccupantFace* Right;
    uint8_t _pad_5[0x8];
    struct CargoGridOccupantFace* Left;
    uint8_t _pad_6[0x8];
};




struct BuildingBlocks_BindingsIntegerFunction {
    uint8_t _pad_0[0x50];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_2[0x8];
};




struct ContractStringParam {
    uint8_t _pad_0[0x8];
    enum ARDataType param;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* value;
};




struct ArmorScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SubHarvestableConfigBase {
    uint8_t _pad_0[0x8];
};




struct LegacyCraftingRecipeDef_Direct {
    uint8_t _pad_0[0x8];
    struct LegacyCraftingRecipe_Base* recipe;
    uint8_t _pad_1[0x8];
};




struct SMobiGlasAppLink {
    uint8_t _pad_0[0x8];
    struct mobiGlasApp* targetApp;
    uint8_t _pad_1[0x10];
    struct MobiGlasAppData* targetDataEntry;
    uint8_t _pad_2[0x10];
    struct CryStringT* displayIcon;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocks_BindingsFieldBase {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
};




struct SCharacterCustomizerRandomColorDef {
    uint8_t _pad_0[0x8];
    float probability;
    uint8_t _pad_1[0x4];
    struct RGB* color;
    uint8_t _pad_2[0x10];
};




struct SAccoladeRequirement {
    uint8_t _pad_0[0x8];
};




struct SDamageMisfireEffect {
    uint8_t _pad_0[0x8];
    struct Tag* effectTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* effectTag;
    uint8_t _pad_2[0x10];
    struct SMisfireDamage* damageValue;
    uint8_t _pad_3[0x8];
};




struct ItemTypeCategory {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
};




struct Range {
    uint8_t _pad_0[0x8];
    float minimum;
    float maximum;
};




struct UIWorldDisplay3DParams {
    uint8_t _pad_0[0x8];
    struct QuatT* offset;
    uint8_t _pad_1[0x50];
    double renderRadius;
    struct GlobalResourceMaterial* renderNodeMaterial;
    uint8_t _pad_2[0x10];
    struct UI3DDisplayInputParams* inputParams;
    uint8_t _pad_3[0x48];
    struct UIWorldDisplayHolographicSettings* holographicSettings;
    uint8_t _pad_4[0x8];
    struct UIWorldDisplayRotationModeParams* rotationModeSettings;
    uint8_t _pad_5[0x18];
    _Bool centerToSelf;
    uint8_t _pad_6[0x3];
    float focusChangeDuration;
    float extraZoomScale;
    float childlessExtraZoomScale;
    float youAreHereZoomDiameter;
    float maxZoomScalingPerUpdate;
    struct UIWorldDisplayAutoRotationParams* autoRotationSettings;
    uint8_t _pad_7[0x8];
    struct UIWorldDisplaySoundParams* soundSettings;
    uint8_t _pad_8[0x8];
    float loadoutDummyCameraOffset;
    uint8_t _pad_9[0x4];
};




struct EntityComponentRttAspectMFDIFCSParams {
    uint8_t _pad_0[0x18];
    enum ARDataType targetRttSlot;
    float aspectRatio;
};




struct LandingSplineVisualParams {
    uint8_t _pad_0[0x18];
    float distanceBetweenNodes;
    uint8_t _pad_1[0x4];
    struct Vec2* borderDimensions;
    uint8_t _pad_2[0x8];
    float markerDistanceFromEnds;
    float markerRadius;
    float markerMoveRadius;
    float distanceMinimum;
    float distanceMaximum;
    float scaleMaximum;
};




struct FireHazardGlobalLightParams {
    uint8_t _pad_0[0x8];
    struct RGB* lightColor;
    uint8_t _pad_1[0x10];
    int32_t maxLights;
    float selectionRadius;
    float teleportCooldown;
    float animMoveSpeed;
    float animGrowSpeed;
    float radius;
    struct Range* bulbRadiusRange;
    uint8_t _pad_2[0x8];
    struct Range* lightIntensityRange;
    uint8_t _pad_3[0x8];
    float fogMultiplier;
    float fogOcclusionFalloff;
    float specularMultiplier;
    uint8_t lightAnimStyle;
    uint8_t _pad_4[0x3];
    float lightAnimSpeed;
    float softness;
    float maxHeatReleaseRate;
    float lightTemperature;
    _Bool useTemperature;
    _Bool affectsFog;
    _Bool shadowMap;
    uint8_t _pad_5[0x5];
};




struct SurfaceRaindrops_Override {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool useFlatVisor;
    uint8_t _pad_1[0x2];
    float density;
    _Bool rainEnabled;
    _Bool snowEnabled;
    uint8_t _pad_2[0x6];
};




struct QuantumTravelPreparationStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* idle;
    uint8_t _pad_1[0x8];
    struct SInteractionState* inProgress;
    uint8_t _pad_2[0x8];
    struct SInteractionState* complete;
    uint8_t _pad_3[0x8];
};




struct SGeometryDataParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* Geometry;
    uint8_t _pad_1[0x10];
    enum ARDataType Slot;
    uint8_t _pad_2[0x4];
    struct CryStringT* MaterialAttachments;
    uint8_t _pad_3[0x8];
    struct GlobalResourceMaterial* Material;
    uint8_t _pad_4[0x10];
    struct SSoftbodyGeometryParams* SimulationGeometry;
    uint8_t _pad_5[0x8];
    struct TintPaletteRef* Palette;
    uint8_t _pad_6[0x28];
    struct SViewDistanceRatioParams* viewDistRatio;
    uint8_t _pad_7[0x10];
    struct CryStringT* ProxyCDFPath;
    uint8_t _pad_8[0x8];
    struct CryStringT* ModifiersPath;
    uint8_t _pad_9[0x8];
    uint32_t AttachFlags;
    enum ARDataType DeformerType;
    uint16_t ProtosBShapeExclude;
    _Bool VisTP;
    _Bool VisFP;
    _Bool VisShadow;
    _Bool VisSecondaryViews;
    _Bool WrinkleMap;
    _Bool EnableDecalProjection;
    struct CryStringT* BBoxJoint;
    uint8_t _pad_10[0x8];
    float BBoxRadius;
    float Wear;
    float Dirt;
    float Interference;
    float Damage;
    enum ARDataType RenderLayer;
    uint8_t _pad_11[0x3];
    enum ARDataType VisAreaMode;
    enum ARDataType SunShadowMode;
    uint8_t LodRatio;
    uint8_t _pad_12[0x7];
};




struct BuildingBlocks_StringStringPair {
    uint8_t _pad_0[0x8];
    struct CryStringT* first;
    uint8_t _pad_1[0x8];
    struct CryStringT* second;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsStringBase* secondOverride;
    uint8_t _pad_3[0x8];
};




struct SGlobalCrosshairParams {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    float lerpSpeed;
    float positionSmoothFactor;
    float distanceSmoothFactor;
    float range;
    float hitmarkerTimeForHit;
    float hitmarkerTimeForKill;
    _Bool killInterruptsPreviousHit;
    uint8_t _pad_2[0x3];
    enum ARDataType hitmarkerPositionMethod;
    float crosshairInCombatTime;
    uint8_t _pad_3[0x4];
    struct GlobalResourceAudio* hitMarkerSoundHead;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* hitMarkerSoundBody;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* timeSinceLastHitmarkerRTPC;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* killHitmarkerRTPC;
    uint8_t _pad_7[0x18];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeWidthBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct BreathingHelperParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* attachBone;
    uint8_t _pad_1[0x8];
    struct Vec3* attachOffset;
    uint8_t _pad_2[0x10];
};




struct SMusicTagBehaviour {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct SMusicEvent* onAdded;
    uint8_t _pad_2[0x38];
    struct SMusicEvent* onRemoved;
    uint8_t _pad_3[0x38];
    struct SMusicValue* stateValue;
    uint8_t _pad_4[0x38];
};




struct ControlHintCondition_VehicleAutoSelectedContact {
    uint8_t _pad_0[0x8];
    enum ARDataType autoSelectedContact;
    uint8_t _pad_1[0x7];
};




struct BlockedColorParams {
    uint8_t _pad_0[0x8];
    struct InnerThought_ColorParams* selectedColor;
    uint8_t _pad_1[0x10];
    struct InnerThought_ColorParams* unselectedColor;
    uint8_t _pad_2[0x10];
    _Bool applyImmediately;
    uint8_t _pad_3[0x7];
};




struct SActorProceduralAimRecoilModifiers {
    uint8_t _pad_0[0x8];
    struct Vec2* max;
    uint8_t _pad_1[0x8];
    float pull_left_percentage;
    uint8_t _pad_2[0x4];
    struct Vec2* shot_kick_first;
    uint8_t _pad_3[0x8];
    struct Vec2* shot_kick;
    uint8_t _pad_4[0x8];
    float random_pitch;
    float random_yaw;
    float decay;
    float end_decay;
    float recoil_time;
    float delay;
    struct SActorProceduralAimRecoilCurveModifiersDef* curveRecoil;
    uint8_t _pad_5[0x70];
};




struct MissionFailConditionParams {
    uint8_t _pad_0[0x8];
    struct TriggerConditionDataDef* triggerCondition;
    uint8_t _pad_1[0x10];
    int32_t warningLevel;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* displayText;
    _Bool useAutomaticFailureScreen;
    uint8_t _pad_3[0x7];
};




struct Marker_AbilityComms {
    uint8_t _pad_0[0x8];
};




struct SMineableHealthComponentParams {
    uint8_t _pad_0[0x18];
    struct SMiningDamageMapParams* damageMapParamsCenter;
    uint8_t _pad_1[0xc0];
    struct SMiningDamageMapParams* damageMapParamsOuter;
    uint8_t _pad_2[0xc0];
};




struct SUsableGroupCoordinatorParams {
    uint8_t _pad_0[0x18];
    _Bool loopCoordinator;
    uint8_t _pad_1[0x7];
};




struct ContractGenerationParams_Legacy {
    uint8_t _pad_0[0x8];
    int32_t maxInstances;
    int32_t maxInstancesPerPlayer;
    float respawnTime;
    float respawnTimeVariation;
};




struct InteractionConditionDraggedActorNotDead {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SSCPlayerGameRulesNetworkComponentParams {
    uint8_t _pad_0[0x18];
};




struct SSequencerSetInteractionStateCarryableTaskParams {
    uint8_t _pad_0[0x20];
    struct SInteractionState* state;
    uint8_t _pad_1[0x8];
};




struct CraftingOptionEffect_MaterialStats {
    uint8_t _pad_0[0x8];
};




struct WearMovementMultipliers {
    uint8_t _pad_0[0x8];
    float walkMultiplier;
    float runMultiplier;
    float sprintMultiplier;
    uint8_t _pad_1[0x4];
};




struct HoloDisplayBackgroundEffects {
    uint8_t _pad_0[0x8];
    _Bool darkenBackgroundWhenFocussed;
    _Bool darkenBackgroundWhenCentered;
    uint8_t _pad_1[0x2];
    float centerDarkenScreenSizeRatio;
    float centerDarkenScreenCenterDistance;
    uint8_t _pad_2[0x4];
};




struct DefaultActionsEntityState_CanActorBeLooted {
    uint8_t _pad_0[0x8];
};




struct IntoxicationWheeledModifierParams {
    uint8_t _pad_0[0x8];
    struct ToxiInputModifierDistortion* distortion;
    uint8_t _pad_1[0x138];
    struct ToxiInputModifierDelay* delay;
    uint8_t _pad_2[0x10];
    struct ToxiInputModifierAxis* yaw;
    uint8_t _pad_3[0x20];
};




struct EnvironmentLightComponentParams {
    uint8_t _pad_0[0x18];
    _Bool active;
    _Bool affectsThisAreaOnly;
    _Bool useGBuffer;
    uint8_t _pad_1[0x1];
    int32_t sortPriority;
    struct EnvironmentLightRuntimeParams* runtimeParams;
    uint8_t _pad_2[0x10];
    struct EnvironmentLightSizeParams* sizeParams;
    uint8_t _pad_3[0x10];
    struct EnvironmentLightStateParams_Default* defaultState;
    uint8_t _pad_4[0x30];
    struct EnvironmentLightStateParams_Aux* auxiliaryState;
    uint8_t _pad_5[0x30];
    struct EnvironmentLightStateParams_Emergency* emergencyState;
    uint8_t _pad_6[0x30];
    struct EnvironmentLightStateParams_Cinematic* cinematicState;
    uint8_t _pad_7[0x30];
    struct EnvironmentLightGroupParams* groupParams;
    uint8_t _pad_8[0x8];
    struct EnvironmentLightProjectionParams* projectionParams;
    uint8_t _pad_9[0x10];
    struct EnvironmentLightFadeParams* fadeParams;
    uint8_t _pad_10[0x10];
    struct EnvironmentLightMiscParams* miscParams;
    uint8_t _pad_11[0x20];
};




struct DifficultyModifierRange {
    uint8_t _pad_0[0x8];
    float min;
    float max;
};




struct ProceduralPlanetAudioRiverData {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* riverLoopStart;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* riverFlowSpeedRtpc;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* riverWidthRtpc;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* distanceFromRiverEdgeRtpc;
    uint8_t _pad_4[0x18];
};




struct SActorForceReactionStateConfig {
    uint8_t _pad_0[0x8];
    _Bool delayStaggersWhileInState;
    uint8_t _pad_1[0x3];
    float staggerDelayTimeout;
};




struct ContextualCommunicationCondition {
    uint8_t _pad_0[0x8];
    enum ARDataType criteriaType;
    uint8_t _pad_1[0x4];
    struct CryStringT* customCriteria;
    uint8_t _pad_2[0x8];
    float numberValue;
    uint8_t _pad_3[0x4];
    struct CryStringT* stringValue;
    uint8_t _pad_4[0x8];
    enum ARDataType operation;
    uint8_t _pad_5[0x4];
};




struct ScreenEffects_ParamValue_Bool {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
};




struct QuantumEffectMusic {
    uint8_t _pad_0[0x8];
    struct QuantumMusicEventBase* spoolStart;
    uint8_t _pad_1[0x38];
    struct QuantumMusicEventBase* pinch;
    uint8_t _pad_2[0x38];
    struct QuantumMusicEventBase* entryFlash;
    uint8_t _pad_3[0x38];
    struct QuantumMusicEventBase* trailStart;
    uint8_t _pad_4[0x38];
    struct QuantumMusicEventBase* travelStart;
    uint8_t _pad_5[0x38];
    struct QuantumMusicEventBase* travelEnd;
    uint8_t _pad_6[0x38];
    struct QuantumMusicEventBase* exitTrigger;
    uint8_t _pad_7[0x38];
};




struct ActionRuleNotAllowedInContext {
    uint8_t _pad_0[0x8];
    struct ActionRuleDisplayParams* ruleDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType context;
    uint8_t _pad_2[0x4];
};




struct OptionalProbability {
    uint8_t _pad_0[0x8];
    float probability;
    uint8_t _pad_1[0x4];
};




struct SCItemRadarDisplayHoloVolumeParams {
    uint8_t _pad_0[0x18];
    float fullScreenFOVScale;
    float fullScreenLerpSpeed;
    float finalForceLookAtLerpTime;
    uint8_t _pad_1[0x4];
    struct ProcBreathingSetup* fullScreenRadarProcBreathingSetup;
    uint8_t _pad_2[0x10];
};




struct BindingsOperations_WaveformShapeTriangle {
    uint8_t _pad_0[0x8];
};




struct ArenaCommanderScenarioParams {
    uint8_t _pad_0[0x8];
    struct ArenaCommanderLocationObjectContainersParams* locationObjectContainersParams;
    uint8_t _pad_1[0x8];
    struct ArenaCommanderPlanetOverrideParams* planetOverrideParams;
    uint8_t _pad_2[0x8];
};




struct SCItemSuitHelmetParams {
    uint8_t _pad_0[0x18];
    float dofActive;
    float dofMinZ;
    float dofBlurAmount;
    float dofMinZScale;
    float dofFocusMin;
    float dofFocusMax;
    float minFOV;
    float maxFOV;
    float motionModifier;
    float atmosphereCapacity;
    double punctureMaxArea;
    int32_t punctureMaxNumber;
    uint8_t _pad_1[0x4];
    struct CryStringT* punctureVFX;
    uint8_t _pad_2[0x8];
    float fStop;
    float focalDistance;
    float transparencyPostEffectsExclusionRegion;
    _Bool enableMFDCasts;
    uint8_t _pad_3[0x3];
    struct ActorLookLimits* actorLookLimits;
    uint8_t _pad_4[0x10];
    struct MoveViewRestrictionPenalty* restrictedMoveViewPenalty;
    uint8_t _pad_5[0x10];
    struct AnimatedHelmetParams* animationParams;
    uint8_t _pad_6[0x10];
    struct InteractableHelmetParams* interactableParams;
    uint8_t _pad_7[0x8];
};




struct AsteroidStateBase {
    uint8_t _pad_0[0x8];
};




struct DialogueBundleReference {
    uint8_t _pad_0[0x8];
    _Bool usePooling;
    uint8_t _pad_1[0x17];
    struct DialogueBundlePreset* dialoguePreset;
    uint8_t _pad_2[0x10];
};




struct TransitDisplayPanelGenericAnnouncements {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* preDepartureTriggerID;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* preArrivalTriggerID;
    uint8_t _pad_2[0x18];
    float preArrivalAlertTime;
    float preDepartureAlertTime;
};




struct BaseDifficultyParams {
    uint8_t _pad_0[0x18];
    enum ARDataType defaultDifficulty;
    _Bool enableDynamicScaling;
    uint8_t _pad_1[0x3];
    struct SDynamicDifficultyParams* fpsDynamicScaling;
    uint8_t _pad_2[0x70];
    struct SDynamicDifficultyParams* shipDynamicScaling;
    uint8_t _pad_3[0x70];
    struct GameDifficultyModifiers* difficultyModifiers;
    uint8_t _pad_4[0x10];
};




struct PlacedSurfaceEffects_EmitterEntry {
    uint8_t _pad_0[0x8];
    float emitterStrength;
    uint8_t _pad_1[0x4];
    struct PlacedSurfaceEffects_Emitter* emitterReference;
    uint8_t _pad_2[0x10];
};




struct SCActorRestrainableParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* restrainInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* unrestrainInteraction;
    uint8_t _pad_2[0x8];
    struct ActorRestrainConfig* restrainConfig;
    uint8_t _pad_3[0x10];
};




struct SCInteractionJournalEntryParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* Interaction;
    uint8_t _pad_1[0x8];
    struct JournalEntry* Journal;
    uint8_t _pad_2[0x10];
};




struct VehicleItem {
    uint8_t _pad_0[0x8];
};




struct VoiceChatRxParams {
    uint8_t _pad_0[0x18];
};




struct MissionModifier_LawLicense {
    uint8_t _pad_0[0x8];
    struct CryStringT* modifierName;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x1f];
    enum ARDataType licenseType;
    uint8_t _pad_3[0x4];
};




struct HealthIconStatusEffect {
    uint8_t _pad_0[0x8];
    enum ARDataType statusEffectType;
    int32_t index;
};




struct SMisfireEventParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* warningLocId;
    float duration;
    float ageRatioInflicted;
    float healthRatioInflicted;
    uint8_t _pad_1[0x4];
    struct SItemMisfireParams* ItemParams;
    uint8_t _pad_2[0x8];
};




struct GasCloudOverrideVolumeParams {
    uint8_t _pad_0[0x18];
    enum ARDataType volumeType;
    uint8_t _pad_1[0x4];
    struct GasCloudOverrideSphereVolumeParams* sphereVolume;
    uint8_t _pad_2[0x8];
    struct GasCloudOverrideCubeVolumeParams* cubeVolume;
    uint8_t _pad_3[0x18];
    _Bool overrideAlbedo;
    _Bool overrideLightLeak;
    _Bool overrideDensity;
    uint8_t _pad_4[0x5];
    struct RGB* albedo;
    uint8_t _pad_5[0x10];
    struct RGB* lightLeakColor;
    uint8_t _pad_6[0x10];
    float lightLeakScale;
    float density;
};




struct TimeTrialSplit {
    uint8_t _pad_0[0x8];
    float targetSplit;
    uint8_t _pad_1[0x4];
};




struct EntityComponentRttAspectOwnVehicleParams {
    uint8_t _pad_0[0x18];
};




struct STransferCreditGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
};




struct GlobalJumpDriveEffectParams {
    uint8_t _pad_0[0x8];
    float failureBuildUpTime;
    float failureDissipationTime;
    struct GlobalJumpDriveTuningEffectParams* tuningParams;
    uint8_t _pad_1[0x8];
    struct GlobalJumpDriveEntryEffectParams* entryParams;
    uint8_t _pad_2[0x8];
    struct GlobalJumpDriveExitEffectParams* exitParams;
    uint8_t _pad_3[0x8];
};




struct ConsumableHelpers {
    uint8_t _pad_0[0x8];
    int32_t gripIndex;
    uint8_t _pad_1[0x4];
    struct CryStringT* lipHelperName;
    uint8_t _pad_2[0x8];
    struct CryStringT* lidHelperName;
    uint8_t _pad_3[0x8];
};




struct SRGB8 {
    uint8_t _pad_0[0x8];
    uint8_t r;
    uint8_t g;
    uint8_t b;
    uint8_t _pad_1[0x5];
};




struct ScanDisplayHeaderOnlySetupParams {
    uint8_t _pad_0[0x8];
    enum ARDataType scanTable;
    uint8_t _pad_1[0x7];
    _Bool failIfNoBody;
    _Bool checkDisplaySection;
    uint8_t _pad_2[0x6];
    struct ScanDisplayVariableParams* headerVariable;
    uint8_t _pad_3[0x8];
    struct ScanDisplayVariableParams* bodyVariable;
    uint8_t _pad_4[0x8];
    struct ScanDisplayVariableParams* capacityVariable;
    uint8_t _pad_5[0x8];
    struct ScanDisplayVariableParams* extensionVariable;
    uint8_t _pad_6[0x8];
};




struct AudioEnvironmentFeedbackZoneProcess {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct BezierCurve* radius;
    uint8_t _pad_2[0x88];
    float maxRadius;
    uint8_t _pad_3[0x4];
    struct BezierCurve* environmentValue;
    uint8_t _pad_4[0x88];
    float maxEnvironmentValue;
    float lifeTime;
    struct AudioRtpc* effectRtpc;
    uint8_t _pad_5[0x18];
};




struct SEntityComponentAtmosphereContainerParams {
    uint8_t _pad_0[0x18];
    enum ARDataType atmosphereType;
    uint8_t _pad_1[0x4];
    struct AtmosphereStateBase* state;
    uint8_t _pad_2[0x8];
    struct SAtmosphericCompositionBaseParams* atmosphericComposition;
    uint8_t _pad_3[0x8];
    struct AtmosphereBehavior* behavior;
    uint8_t _pad_4[0x10];
    struct AtmosphereLifeSupportParams* lifeSupport;
    uint8_t _pad_5[0x8];
};




struct SCItemVehicleDebrisParams {
    uint8_t _pad_0[0x18];
};




struct EntryOptionalData_StackSize {
    uint8_t _pad_0[0x8];
    int32_t min;
    int32_t max;
};




struct SToolArmDeployCondition_Base {
    uint8_t _pad_0[0x8];
};




struct DeliveryMissionHelperComponentParams {
    uint8_t _pad_0[0x18];
};




struct SClipVolumeProxyParams {
    uint8_t _pad_0[0x18];
};




struct SEffectParams {
    uint8_t _pad_0[0x28];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct CryStringT* tag;
    uint8_t _pad_2[0x8];
    struct CryStringT* Helper;
    uint8_t _pad_3[0x8];
    struct QuatT* Offset;
    uint8_t _pad_4[0x50];
    _Bool IsLooped;
    _Bool Enabled;
    _Bool Prime;
    _Bool Kill;
    float Timer;
    int32_t RenderSlot;
    uint32_t ContextFlags;
    _Bool MultiPosition;
    uint8_t _pad_5[0x7];
    struct Vec3* Axis;
    uint8_t _pad_6[0x10];
};




struct UsableChannelInputAction {
    uint8_t _pad_0[0x8];
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
    struct SSharedInteractionParams* interactionOnAction;
    uint8_t _pad_2[0x8];
};




struct WeatherEffects_Atmosphere_WaterDepth {
    uint8_t _pad_0[0x8];
    struct WeatherEffects_SpaceLoopEffect* spaceLoopEffect;
    uint8_t _pad_1[0x20];
    struct Range* interpolationRange;
    uint8_t _pad_2[0x8];
};




struct ResourceTypeProperties {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct LookAtType {
    uint8_t _pad_0[0x8];
    float blendIn;
    float blendInVariation;
    float blendOut;
    float blendOutVariation;
    float duration;
    float durationVariation;
};




struct SDespawnRule_OnMoved {
    uint8_t _pad_0[0x8];
    float ruleDelaySeconds;
    uint8_t _pad_1[0x4];
    float distance;
    uint8_t _pad_2[0x4];
};




struct SCItemRadarSensitivityModifierType {
    uint8_t _pad_0[0x8];
};




struct ControlHintCondition_ActorSuitState {
    uint8_t _pad_0[0x8];
    enum ARDataType suitState;
    uint8_t _pad_1[0x7];
};




struct ItemResourceSignatureParams {
    uint8_t _pad_0[0x8];
    struct ItemResourceSignatureEntry* EMSignature;
    uint8_t _pad_1[0x18];
    struct ItemResourceSignatureEntry* IRSignature;
    uint8_t _pad_2[0x18];
};




struct ArmorPenetrationResistanceParams {
    uint8_t _pad_0[0x8];
    float basePenetrationReduction;
    uint8_t _pad_1[0x4];
};




struct StatusEffectSetupBase {
    uint8_t _pad_0[0x8];
};




struct LinkedStatPassExcessBelowThreshold {
    uint8_t _pad_0[0x8];
    float threshold;
    float multiplier;
    enum ARDataType reverseSignFlag;
    uint8_t _pad_1[0x4];
};




struct SSequencerMoveToAnimateCarryableTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* fragmentId;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragTag;
    uint8_t _pad_2[0x8];
};




struct ScanCustomDataTagEntry {
    uint8_t _pad_0[0x8];
    struct TagsDNFTerm* tagsToMatch;
    uint8_t _pad_1[0x60];
    struct ScanCustomValue* value;
    uint8_t _pad_2[0x8];
};




struct ContractPrerequisite_AreaTags {
    uint8_t _pad_0[0x8];
    struct TagList* requiredAreaTags;
    uint8_t _pad_1[0x30];
    struct TagList* excludedAreaTags;
    uint8_t _pad_2[0x30];
};




struct FireHazardGlobalExtinguishing {
    uint8_t _pad_0[0x8];
    float oxygenReduction;
    float heatTransferMultiplier;
    float radiationAbsorption;
    uint8_t _pad_1[0x4];
    struct CryStringT* vectorFieldPathSpray;
    uint8_t _pad_2[0x8];
    struct CryStringT* vectorFieldPathSphere;
    uint8_t _pad_3[0x8];
};




struct SEffectInputParamsParticle {
    uint8_t _pad_0[0x8];
    struct CryStringT* VarName;
    uint8_t _pad_1[0x8];
    struct CryStringT* ParamName;
    uint8_t _pad_2[0x8];
    float MinRange;
    float MaxRange;
    float Multiplier;
    float LerpTime;
    struct Vec3* VecGoal;
    uint8_t _pad_3[0x10];
    float DefaultValue;
    uint8_t _pad_4[0x4];
    struct Vec3* Axis;
    uint8_t _pad_5[0x10];
    enum ARDataType Type;
    uint8_t _pad_6[0x4];
};




struct BoidsTerrainSurfaceRepelRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float effectDistance;
    uint8_t _pad_2[0x4];
};




struct SSequencerAnimationTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* fragmentId;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragTag;
    uint8_t _pad_2[0x8];
    _Bool looping;
    uint8_t _pad_3[0x7];
};




struct LadderAnimationOffset {
    uint8_t _pad_0[0x8];
    float stopClimbDistanceFromTopBack;
    float stopClimbDistanceFromTopLeft;
    float stopClimbDistanceFromTopRight;
    float stopClimbDistanceFromBottom;
    float mountClimbDistanceFromBottom;
    float animationTravelDistance;
};




struct InnerThought_LayoutChoiceBase {
    uint8_t _pad_0[0x10];
    struct InnerThought_ColorParams* selectedColor;
    uint8_t _pad_1[0x10];
    struct InnerThought_ColorParams* unselectedColor;
    uint8_t _pad_2[0x10];
    struct InnerThought_ColorParams* secondaryColor;
    uint8_t _pad_3[0x10];
    struct Vec3* selectedOffset;
    uint8_t _pad_4[0x10];
    struct Vec3* unselectedOffset;
    uint8_t _pad_5[0x10];
    struct Vec3* secondaryOffset;
    uint8_t _pad_6[0x10];
};




struct SChargeDrainPrimeParams {
    uint8_t _pad_0[0x8];
    _Bool allowPriming;
    uint8_t _pad_1[0x3];
    int32_t minPrimeAmount;
    int32_t maxPrimeAmount;
    float minToMaxChargeTime;
    float resourceRatePrimeScalar;
    float unstablePrimingModifier;
    float baseStorageTime;
    float additionalStorageTimePerVolt;
    float minigameRadius;
    float secondsToFail;
    float recoilInterval;
    uint8_t _pad_2[0x4];
    struct WeaponProceduralRecoilConfigDef* boostingRecoil;
    uint8_t _pad_3[0x10];
    struct WeaponProceduralRecoilConfigDef* voltBoostStateRecoil;
    uint8_t _pad_4[0x10];
    struct WeaponProceduralRecoilConfigDef* voltBoostUnleashRecoil;
    uint8_t _pad_5[0x10];
    struct WeaponProceduralRecoilConfigDef* voltBoostDumpRecoil;
    uint8_t _pad_6[0x10];
    struct DamageBase* damage;
    uint8_t _pad_7[0x8];
    float hitRadius;
    uint8_t _pad_8[0x4];
    struct CryStringT* hitType;
    uint8_t _pad_9[0x8];
    float minChargeLossPercentage;
    float maxChargeLossPercentage;
    float lowerRandomLossLimitPercentage;
    float upperRandomLossLimitPercentage;
    struct Tag* chargeFireActionTag;
    uint8_t _pad_10[0x10];
};




struct FireHazardGlobalRoomConnectorParams {
    uint8_t _pad_0[0x8];
    float igniteThreshold;
    float maxVolumeRadius;
    struct CryStringT* vectorFieldPath;
    uint8_t _pad_1[0x8];
    float vectorFieldRotation;
    float vectorFieldRadius;
    float vectorFieldFalloff;
    float vectorFieldThreshold;
    float vectorFieldMaxHeatReleaseRateDiff;
    float vectorFieldMaxStrength;
    float vectorFieldDepth;
    uint8_t _pad_2[0x4];
};




struct CollectibleStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* originState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* stateIfCollected;
    uint8_t _pad_2[0x8];
    struct SInteractionState* stateIfUncollected;
    uint8_t _pad_3[0x8];
};




struct SubsumptionAssignmentComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCoverSystemComponentParams {
    uint8_t _pad_0[0x18];
    float distanceToCover;
    float agentRadius;
    float inCoverRadius;
    float effectiveCoverHeight;
    float effectiveHighCoverHeight;
    uint8_t _pad_1[0x4];
    struct PostureDatabase* postureData;
    uint8_t _pad_2[0x10];
};




struct EntityComponentFuelConnection {
    uint8_t _pad_0[0x18];
};




struct SActorForceReactionStaggerRangeDef {
    uint8_t _pad_0[0x8];
    float effectRangeMin;
    float effectRangeMax;
    struct SActorForceReactionAimPunchConfig* aimPunch;
    uint8_t _pad_1[0x58];
    struct SActorForceReactionWeaponTwitchConfig* weaponTwitch;
    uint8_t _pad_2[0x38];
    struct SActorForceReactionHeadRecoilConfig* headRecoil;
    uint8_t _pad_3[0xa8];
    struct SActorForceReactionFOVScaleConfig* FOVScale;
    uint8_t _pad_4[0x28];
    struct SActorForceReactionAnimationStaggerConfig* animationStagger;
    uint8_t _pad_5[0x18];
    struct SActorForceReactionBlockADSConfig* blockADS;
    uint8_t _pad_6[0x10];
};




struct UIGraph_JournalEntryDockComponent {
    uint8_t _pad_0[0x8];
};




struct ExplosionFlashbangParams {
    uint8_t _pad_0[0x8];
    float blindAmount;
    float flashbangBaseTime;
};




struct SQuantumDriveEffectTemplateRef {
    uint8_t _pad_0[0x8];
    struct SQuantumDriveEffectTemplate* tagRecord;
    uint8_t _pad_1[0x10];
};




struct InteractionConditionCanBeBodyDragged {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct CharacterSkills {
    uint8_t _pad_0[0x8];
    struct Aiming* aiming;
    uint8_t _pad_1[0x48];
    struct CharacterAccuracyModifiers* modifiers;
    uint8_t _pad_2[0xb0];
};




struct SWeaponActionFireTractorBeamMultitractorParams {
    uint8_t _pad_0[0x8];
    float leadBeamDeadzoneBlendStart;
    float leadBeamDeadzoneEnd;
    float followBeamDeadzoneBlendStart;
    float followBeamDeadzoneEnd;
    float followBeamDeadzoneAlignment;
    float followBeamDeadzoneMisalignment;
    float enterLeadForceThresholdModifier;
    float beamAlignmentSlopeCoefficient;
};




struct Marker_AbilityClosure {
    uint8_t _pad_0[0x8];
    _Bool onlyWhenLocked;
    uint8_t _pad_1[0x7];
};




struct PostGameScoreboardParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float scoreboardTime;
    float postScoreboardLogoTime;
    uint8_t _pad_2[0x4];
};




struct BaseItem {
    uint8_t _pad_0[0x8];
};




struct AudioValueOutputBehaviour {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
};




struct CargoGridOccupantFace {
    uint8_t _pad_0[0x8];
    _Bool faceUpwardAllowed;
    uint8_t _pad_1[0x3];
    enum ARDataType stackingSupport;
};




struct SLegacyMisfireEventParams {
    uint8_t _pad_0[0x8];
    struct Tag* effectTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* effectTag;
    uint8_t _pad_2[0x10];
    struct CLocIdentifier* warningLocId;
    float duration;
    enum ARDataType uiSeverity;
    struct SLegacyItemMisfireParams* itemParams;
    uint8_t _pad_3[0x8];
};




struct EntityComponentVibrationAudioPointParams {
    uint8_t _pad_0[0x18];
    struct VibrationAudioPointDef* pointDefinition;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_LayoutPolicyItemBase {
    uint8_t _pad_0[0x8];
};




struct SHackingThreatLevelConditionParams {
    uint8_t _pad_0[0x8];
    _Bool isIntruder;
    uint8_t _pad_1[0x3];
    int32_t pointsAdded;
};




struct AuxiliaryVehicleScreenEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct SCItemSeatDashboardScreen* dashboardScreen;
    uint8_t _pad_1[0xc8];
};




struct RGB {
    uint8_t _pad_0[0x8];
    float r;
    float g;
    float b;
    uint8_t _pad_1[0x4];
};




struct VisibilityCondition {
    uint8_t _pad_0[0x8];
    struct VisibilityConditionDef* condition;
    uint8_t _pad_1[0x8];
    _Bool show;
    uint8_t _pad_2[0x7];
};




struct InteractionConditionPlayerVehicleContainsNoUnownedVehicles {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SGlobalShopErrors {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* confirmation_success;
    struct CLocIdentifier* confirmation_fail;
    struct CLocIdentifier* confirmation_fail_AuthorityError;
    struct CLocIdentifier* confirmation_fail_TransactionServiceError;
    struct CLocIdentifier* confirmation_fail_InvalidLocation;
    struct CLocIdentifier* confirmation_fail_InvalidPlayerInventoryId;
    struct CLocIdentifier* confirmation_fail_InventoryContainerRequestFail;
    struct CLocIdentifier* confirmation_fail_InventoryItemFail;
    struct CLocIdentifier* confirmation_fail_InventoryItemContentFail;
    struct CLocIdentifier* confirmation_fail_InvalidQuantityError;
    struct CLocIdentifier* confirmation_fail_QuickBuyRestockingError;
    struct CLocIdentifier* confirmation_fail_InvalidTransactionFlow;
    struct CLocIdentifier* confirmation_fail_InvalidLocationSource;
    struct CLocIdentifier* confirmation_fail_InvalidShop;
    struct CLocIdentifier* confirmation_fail_InvalidShopType;
    struct CLocIdentifier* confirmation_fail_InternalError;
    struct CLocIdentifier* confirmation_fail_InvalidRentalOption;
    struct CLocIdentifier* confirmation_fail_ShipNotInValidLocation;
    struct CLocIdentifier* confirmation_fail_NoItemsInSaleError;
    struct CLocIdentifier* confirmation_fail_WaitingForPendingResult;
    struct CLocIdentifier* confirmation_fail_ActorDoesNotOwnSaleItem;
    struct CLocIdentifier* confirmation_fail_TransactionCostMismatch;
    struct CLocIdentifier* confirmation_fail_ItemMaxStockError;
    struct CLocIdentifier* confirmation_fail_ItemNotSellable;
    struct CLocIdentifier* confirmation_fail_ItemNotBuyable;
    struct CLocIdentifier* confirmation_fail_TimedOut;
    struct CLocIdentifier* confirmation_fail_InsuffientStock;
    struct CLocIdentifier* confirmation_fail_ServiceError;
    struct CLocIdentifier* confirmation_fail_DatabaseError;
    struct CLocIdentifier* confirmation_fail_InvalidBuyer;
    struct CLocIdentifier* confirmation_fail_InvalidItem;
    struct CLocIdentifier* confirmation_fail_InvalidRequest;
    struct CLocIdentifier* confirmation_fail_InsufficentFunds;
    struct CLocIdentifier* confirmation_fail_InvalidEntityClassGUID;
    struct CLocIdentifier* confirmation_fail_InvalidResourceTypeGUID;
    struct CLocIdentifier* confirmation_fail_InvalidKioskId;
    struct CLocIdentifier* confirmation_fail_InvalidSellPrice;
    struct CLocIdentifier* confirmation_fail_InvalidMineableEntry;
    struct CLocIdentifier* confirmation_fail_InvalidParentState;
    struct CLocIdentifier* confirmation_fail_PlayerIdMismatch;
    struct CLocIdentifier* confirmation_fail_CargoCreationFailed;
    struct CLocIdentifier* confirmation_fail_CargoRemovalFailed;
    struct CLocIdentifier* confirmation_fail_WalletNotFound;
    struct CLocIdentifier* confirmation_fail_WalletUpdateFailed;
    struct CLocIdentifier* confirmation_fail_ResourceContainerQueryFailed;
    struct CLocIdentifier* confirmation_fail_MissingResourceDataType;
    struct CLocIdentifier* confirmation_fail_PricePerUnitMismatch;
    struct CLocIdentifier* confirmation_fail_InvalidContainer;
    struct CLocIdentifier* confirmation_fail_EntityQueryFailed;
    struct CLocIdentifier* confirmation_fail_PlayerInVehicleDuringCargoTransaction;
    struct CLocIdentifier* confirmation_fail_MissingSnapshot;
    struct CLocIdentifier* confirmation_fail_MissingSnapshotData;
    struct CLocIdentifier* confirmation_fail_SnapshotGetFail;
    struct CLocIdentifier* confirmation_fail_ExceededBuyLimit;
    struct CLocIdentifier* confirmation_fail_LicenseError;
    struct CLocIdentifier* confirmation_fail_InvalidPlayerState;
    struct CLocIdentifier* confirmation_fail_InvalidBoxSize;
    struct CLocIdentifier* confirmation_fail_InvalidBoxClass;
    struct CLocIdentifier* confirmation_fail_MissingAutoLoadRate;
    struct CLocIdentifier* confirmation_fail_AutoLoadPriceMismatch;
    struct CLocIdentifier* confirmation_fail_AutoLoadTimeMismatch;
    struct CLocIdentifier* confirmation_fail_AutoLoadStartFailed;
};




struct SCItemVehicleLandingGearSystemParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* deployInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* retractInteraction;
    uint8_t _pad_2[0x8];
    float hideSelectorRatio;
    uint8_t _pad_3[0x4];
    struct DockingHUDMessagesParams* hudMessagesParams;
    uint8_t _pad_4[0x98];
    struct DockingAutodockingParams* dockingAutodockingParams;
    uint8_t _pad_5[0x20];
};




struct SPowerSourceStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onOnlineState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onOfflineState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* onInoperableState;
    uint8_t _pad_3[0x8];
};




struct NavLinkLocation {
    uint8_t _pad_0[0x8];
};




struct SQedVisualGraphTransitionTypeParams_ValueBased {
    uint8_t _pad_0[0x8];
    enum ARDataType variable;
    enum ARDataType context;
    uint8_t _pad_1[0x6];
};




struct EntityComponentEffects_Test_Trigger {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct Tag* trigger;
    uint8_t _pad_2[0x10];
    _Bool forceStop;
    uint8_t _pad_3[0x7];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeHeightBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct DateTimeSchedule {
    uint8_t _pad_0[0x8];
    struct DateTime* start;
    uint8_t _pad_1[0x30];
    struct DateTime* end;
    uint8_t _pad_2[0x30];
    enum ARDataType repeatType;
    uint8_t _pad_3[0x4];
    struct Date* repeatEnd;
    uint8_t _pad_4[0x10];
};




struct BuildingBlocks_StyleSelectorConditionCount {
    uint8_t _pad_0[0x10];
    enum ARDataType type_;
    uint8_t count;
    uint8_t offset;
    uint8_t _pad_1[0x2];
};




struct SEntityStaticPhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
    enum ARDataType aiNavigationType;
    uint8_t _pad_4[0x4];
};




struct SWeaponAIRapidParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType aiShootingMode;
    uint8_t _pad_2[0x7];
    struct Range* duration;
    uint8_t _pad_3[0x8];
    struct Range* cooldown;
    uint8_t _pad_4[0x8];
    int32_t minBullets;
    uint8_t _pad_5[0x4];
};




struct MotionFootPinningParams {
    uint8_t _pad_0[0x8];
    float footShiftDuration;
    float animationDuration;
    float animationWeight;
    float animationBlendInDuration;
    float animationBlendOutDuration;
    float autoRepositionDistance;
};




struct GravlevParams {
    uint8_t _pad_0[0x18];
    struct HoverPlane* hoverPlane;
    uint8_t _pad_1[0x20];
    struct SuspensionSprings* springs;
    uint8_t _pad_2[0xa8];
    struct HoverHeight* height;
    uint8_t _pad_3[0x38];
    struct HoverTilting* tilting;
    uint8_t _pad_4[0xa0];
    struct HoverCollisions* collisions;
    uint8_t _pad_5[0x10];
    struct HoverHandling* handling;
    uint8_t _pad_6[0x138];
    struct AudioRtpc* hoverHeightRtpc;
    uint8_t _pad_7[0x18];
    struct AudioRtpc* hoverHeightDifferentialRtpc;
    uint8_t _pad_8[0x18];
};




struct CameraStaticFixedSpectatorConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_4[0x50];
    struct CryStringT* focusTargetAttachmentName;
    uint8_t _pad_5[0x8];
    struct Vec3* targetAttachmentPositionOffset;
    uint8_t _pad_6[0x10];
    float targetAttachmentLerpFactor;
    uint8_t _pad_7[0x4];
};




struct BuildingBlocks_ComponentTextureProperties {
    uint8_t _pad_0[0x8];
    float alpha;
    _Bool flipH;
    _Bool flipV;
    uint8_t _pad_1[0x2];
    enum ARDataType orientation;
    uint8_t _pad_2[0x4];
};




struct CameraAlternativeViewsConfig {
    uint8_t _pad_0[0x8];
    struct Camera* alternativeView;
    uint8_t _pad_1[0x10];
    struct Camera* defaultView;
    uint8_t _pad_2[0x10];
};




struct SActorForceReactionProceduralLeanPose {
    uint8_t _pad_0[0x8];
    float hipOffsetScaleFB;
    float hipOffsetScaleLR;
    float footOffsetScale;
    float firstPersonLeanPitchScale;
    float firstPersonLeanRollScale;
    uint8_t _pad_1[0x4];
};




struct PlayerDockingHubControllerParams {
    uint8_t _pad_0[0x18];
};




struct SDashboardPowerInteractionParams {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* powerIP;
    uint8_t _pad_1[0x8];
};




struct SNodeSwapUnstuckParams {
    uint8_t _pad_0[0x8];
    int32_t priority;
    float chance;
    float cooldown;
    _Bool cooldownOnFailure;
    uint8_t _pad_1[0x3];
};




struct SInitialDamageSpecifierFraction {
    uint8_t _pad_0[0x8];
    struct DamageMacro* damageMacro;
    uint8_t _pad_1[0x10];
    float HealthFraction;
    uint8_t _pad_2[0x4];
};




struct SInfractionGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct InfractionDefinition* infractionDefinition;
    uint8_t _pad_1[0x10];
};




struct SReputationStateModifierDecrement {
    uint8_t _pad_0[0x8];
    int32_t value;
    uint8_t _pad_1[0x4];
};




struct InteractionConditionIsUserAI {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct ScanEvaluationInfractionSettings {
    uint8_t _pad_0[0x8];
    struct InfractionDefinition* infraction;
    uint8_t _pad_1[0x10];
    struct TagList* taskOutputTags;
    uint8_t _pad_2[0x30];
};




struct UsableGroupCoordinatorDataParams {
    uint8_t _pad_0[0x8];
    struct EntityReferenceDef* usableGroupCoordinator;
    uint8_t _pad_1[0x10];
    struct EntityReferenceDef* actionAreaTrigger;
    uint8_t _pad_2[0x10];
};




struct SSensorMineTriggerType {
    uint8_t _pad_0[0x10];
};




struct MissionFlowCondition_PropertyIsSet {
    uint8_t _pad_0[0x8];
    struct ObjectivePropertyBase* property;
    uint8_t _pad_1[0x8];
};




struct SWeaponActionFireTractorBeamCargoModeOverrideParams {
    uint8_t _pad_0[0x8];
    float minForceOverride;
    float maxForceOverride;
    float minAccelerationOverride;
    float maxAccelerationOverride;
    float minSpeedOverride;
    float maxSpeedOverride;
    float accelerationFactorOverride;
    float degreesPerActionOverride;
    float maxAngularAccelerationOverride;
    float maxAngularVelocityOverride;
    float degreesPerActionScrollWheelOverride;
    float forceFractionRotationOverride;
    float minDistanceOverride;
    float maxDistanceOverride;
    float fullStrengthDistanceOverride;
    uint8_t _pad_1[0x4];
};




struct UsableChannelInputAction_TriggerSequence {
    uint8_t _pad_0[0x8];
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
    struct SSharedInteractionParams* interactionOnAction;
    uint8_t _pad_2[0x8];
    struct SSequencerDefSequenceParams* playSequence;
    uint8_t _pad_3[0x8];
};




struct SCharacterCustomizerTattooRandomizationParams {
    uint8_t _pad_0[0x8];
    float noTattooProbability;
    uint8_t _pad_1[0x4];
    struct Vec2* tattooAgeLimits;
    uint8_t _pad_2[0x8];
    struct SCharacterCustomizerFeatureTextureSelect* tattooFeatureParams;
    uint8_t _pad_3[0x8];
};




struct ActorStanceSpeeds {
    uint8_t _pad_0[0x8];
    float defaultSpeed;
    float walkSlowSpeed;
    float walkMidSpeed;
    float walkFastSpeed;
    float runSlowSpeed;
    float runFastSpeed;
    float sprintSpeed;
    float greenZoneWalkSpeed;
    float greenZoneSprintSpeed;
    float aimDownSightSpeed;
    float leanSpeed;
    float conversationSpeed;
    float defaultLinearAcceleration;
    float defaultRotationSpeed;
    float defaultRotationSmoothDuration;
    uint8_t _pad_1[0x4];
};




struct MissionFlowCondition_AnyTokensState {
    uint8_t _pad_0[0x8];
    enum ARDataType tokenState;
    uint8_t _pad_1[0x4];
};




struct SSequencerPlayerUsableUseChannelTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* name;
    uint8_t _pad_1[0x10];
    struct PlayerUsableItemPort* playerUsablePort;
    uint8_t _pad_2[0x8];
};




struct SWeaponModifierBeamEffectParams {
    uint8_t _pad_0[0x8];
    float beamRange;
    uint8_t _pad_1[0x4];
    struct CryStringT* fireHelper;
    uint8_t _pad_2[0x8];
    struct SBeamGroupParams* beamGroup;
    uint8_t _pad_3[0x1c8];
};




struct SSendSeatReadyPoseLockedEvent {
    uint8_t _pad_0[0x8];
    _Bool locked;
    uint8_t _pad_1[0x7];
};




struct STurnOnItemGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct UsableSlottingReferenceLoadoutEntry {
    uint8_t _pad_0[0x8];
    struct SItemPortLoadoutEntryParams* loadoutEntry;
    uint8_t _pad_1[0x8];
};




struct SSalvageRepairHighlightOutlineValues {
    uint8_t _pad_0[0x8];
    float occludedAlpha;
    float outlineWidth;
    _Bool outlineOnly;
    uint8_t _pad_1[0x7];
};




struct BuildingBlocks_GrabControlsPolicy {
    uint8_t _pad_0[0x8];
    enum ARDataType grabBounds;
    float grabRotationSpeed;
    float grabRotationSlowdown;
    float grabResponsiveness;
    struct BuildingBlocks_Range* pitchRestrictions;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_Range* yawRestrictions;
    uint8_t _pad_2[0x8];
    enum ARDataType grabRotationMode;
    uint8_t _pad_3[0x4];
};




struct UIGraph_BlockingMessagePopUpComponent {
    uint8_t _pad_0[0x8];
    struct CryStringT* errorFormat;
    uint8_t _pad_1[0x8];
    enum ARDataType provider;
    uint8_t _pad_2[0x4];
};




struct SWeaponSimplifiedHeatGlowParams {
    uint8_t _pad_0[0x8];
    struct SBezierCurveRecord* glowCurve;
    uint8_t _pad_1[0x10];
    struct RGB* glowColor;
    uint8_t _pad_2[0x10];
    float maxGlowValue;
    float fadeoutTime;
};




struct SItemShopARItemPortParams {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
    struct SItemShopARParams* arParams;
    uint8_t _pad_2[0x90];
};




struct ProceduralPlanetAudioTagAndEvent {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct AudioRtpc* movementRtpc;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* loopStart;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* loopStop;
    uint8_t _pad_4[0x18];
};




struct SeatOperatorSkills {
    uint8_t _pad_0[0x8];
    struct Aiming* aiming;
    uint8_t _pad_1[0x48];
    struct Burst* burst;
    uint8_t _pad_2[0x18];
};




struct WeaponProceduralClipRaise {
    uint8_t _pad_0[0x8];
    float blendTime;
    uint8_t _pad_1[0x4];
    struct Ang3* weaponRaise;
    uint8_t _pad_2[0x10];
    struct Vec3* weaponShift;
    uint8_t _pad_3[0x10];
    float raiseTime;
    uint8_t _pad_4[0x4];
};




struct HarvestableAreaTypeBase {
    uint8_t _pad_0[0x8];
};




struct SAimModifier {
    uint8_t _pad_0[0x8];
    float zoomScale;
    float secondZoomScale;
    float zoomTimeScale;
    _Bool hideWeaponInADS;
    uint8_t _pad_1[0x3];
    float fstopMultiplier;
    uint8_t _pad_2[0x4];
};




struct DialogueBundleEntry {
    uint8_t _pad_0[0x8];
    struct DialogueContextEntry* dialogue;
    uint8_t _pad_1[0x8];
};




struct SInteractableMenuSetTitle {
    uint8_t _pad_0[0x8];
    struct InnerThought_ColorParams* titleColor;
    uint8_t _pad_1[0x18];
    struct CLocIdentifier* title;
};




struct SSpawnEntity {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entity;
    uint8_t _pad_1[0x10];
    struct Vec3* spawnOffset;
    uint8_t _pad_2[0x10];
    _Bool attachToItemPort;
    uint8_t _pad_3[0x7];
    struct CryStringT* itemPortName;
    uint8_t _pad_4[0x8];
    _Bool vehicleSpawnFlightReady;
    _Bool vehicleSpawnDeployLandingGears;
    _Bool infiniteMissiles;
    _Bool triggerAreas;
    uint8_t _pad_5[0x4];
};




struct SCItemQuantumInterdictionGeneratorParams {
    uint8_t _pad_0[0x18];
    struct SCItemQuantumJammerParams* jammerSettings;
    uint8_t _pad_1[0x8];
    struct SCItemQuantumInterdictionPulseParams* quantumInterdictionPulseSettings;
    uint8_t _pad_2[0x8];
    float basePowerDrawFraction;
    float pulsePowerFraction;
    float jammerPowerFraction;
    uint8_t _pad_3[0x4];
    struct SQedVisualGraphParams* visualGraphParams;
    uint8_t _pad_4[0x48];
    struct SSharedInteractionParams* mainDeviceSwitchOn;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* mainDeviceSwitchOff;
    uint8_t _pad_6[0x8];
};




struct LocalPlayerTargetTrackingAutoZoomComponentParams {
    uint8_t _pad_0[0x18];
    struct TargetTrackingAutoZoomDef* zoomDef;
    uint8_t _pad_1[0x10];
};




struct InteractionPointTemplate {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* interactionPoint;
    uint8_t _pad_1[0x278];
};




struct InteractionConditionCheckItemWeight {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SMannequinActionDefRecord {
    uint8_t _pad_0[0x8];
    struct IMannequinActionDef* actionDef;
    uint8_t _pad_1[0x8];
};




struct BoidAgentComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* deathMannequinTag;
    uint8_t _pad_1[0x8];
    struct CryStringT* deathMannequinFragment;
    uint8_t _pad_2[0x8];
};




struct EntityComponentEffects_Test_Link {
    uint8_t _pad_0[0x8];
    float value;
    uint8_t _pad_1[0x4];
    struct Tag* parameter;
    uint8_t _pad_2[0x10];
};




struct RadarContactTypeEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    struct Tag* tag;
    uint8_t _pad_2[0x10];
    struct ScanInformationDef* scanDef;
    uint8_t _pad_3[0x10];
    struct RadarContactGamePlayProperties* gameplayProperties;
    uint8_t _pad_4[0x8];
    struct Marker_Configuration* markerConfig;
    uint8_t _pad_5[0x10];
    enum ARDataType trackerType;
    float contactHoloMinScreenSize;
    enum ARDataType contactHighlightCategory;
    enum ARDataType contactTaggingCategory;
    _Bool isObjectOfInterest;
    uint8_t _pad_6[0xd];
};




struct SEntityParticlePhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
    float radius;
    float thickness;
    float accThrust;
    float airResistance;
    uint32_t pierceability;
    float length;
    struct ResourceType* resourceType;
    uint8_t _pad_4[0x10];
    _Bool rayCollision;
    _Bool traceable;
    _Bool singleContact;
    _Bool constantOrientation;
    _Bool noRoll;
    _Bool noSpin;
    _Bool noPathAlignment;
    _Bool noSelfCollision;
    _Bool noImpulse;
    _Bool decoupleHeading;
    _Bool disableGravity;
    uint8_t _pad_5[0x1];
    enum ARDataType aiNavigationType;
    struct CryStringT* surfaceIdName;
    uint8_t _pad_6[0x18];
};




struct Marker_AbilityBase {
    uint8_t _pad_0[0x8];
};




struct SReputationRewardAmount {
    uint8_t _pad_0[0x8];
    struct CryStringT* editorName;
    uint8_t _pad_1[0x8];
    int32_t reputationAmount;
    uint8_t _pad_2[0x4];
};




struct SDynamicDifficultyPointsPerEvent {
    uint8_t _pad_0[0x8];
    int32_t eventCount;
    int32_t points;
};




struct BuildingBlocks_PreviewSceneRttWindow {
    uint8_t _pad_0[0x10];
    enum ARDataType renderLayer;
    uint8_t _pad_1[0x7];
};




struct BaseBuildingParams {
    uint8_t _pad_0[0x18];
};




struct EAVotingModule {
    uint8_t _pad_0[0x18];
    struct VoteGenericLocParams* genericLocParams;
    uint8_t _pad_1[0x30];
    struct VoteNextLevelParams* nextLevelParams;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_TimelineTypeReference {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Timeline* timelineRecord;
    uint8_t _pad_1[0x10];
};




struct ItemResourceDynamicAmountExample {
    uint8_t _pad_0[0x8];
    float frequency;
    uint8_t _pad_1[0x4];
};




struct BaseDensityUnit {
    uint8_t _pad_0[0x8];
};




struct LinkedStatSetup {
    uint8_t _pad_0[0x8];
    struct LinkedStatRuleBase* ruleForPassingValue;
    uint8_t _pad_1[0x8];
    struct LinkedStatPassValueBase* valueToPass;
    uint8_t _pad_2[0x8];
};




struct ActorStatusUIWarningEntry {
    uint8_t _pad_0[0x8];
    float statValue;
    float cooldownValue;
    struct CLocIdentifier* warningString;
};




struct SCItemEMPParams {
    uint8_t _pad_0[0x18];
    float chargeTime;
    float distortionDamage;
    float empRadius;
    float minEmpRadius;
    float physRadius;
    float minPhysRadius;
    float pressure;
    float unleashTime;
    float cooldownTime;
    uint8_t _pad_1[0x4];
    struct GlobalResourceParticle* ChargingParticle;
    uint8_t _pad_2[0x10];
    struct GlobalResourceParticle* ChargedParticle;
    uint8_t _pad_3[0x10];
    struct Tag* ChargingTag;
    uint8_t _pad_4[0x10];
    struct Tag* ChargedTag;
    uint8_t _pad_5[0x10];
    struct Tag* StartChargingTrigger;
    uint8_t _pad_6[0x10];
    struct Tag* StopChargingTrigger;
    uint8_t _pad_7[0x10];
    struct Tag* StartChargedTrigger;
    uint8_t _pad_8[0x10];
    struct Tag* StopChargedTrigger;
    uint8_t _pad_9[0x10];
    struct Tag* StartUnleashTrigger;
    uint8_t _pad_10[0x10];
    struct Tag* StopUnleashTrigger;
    uint8_t _pad_11[0x10];
    struct ItemResourceState* idleState;
    uint8_t _pad_12[0x8];
    struct ItemResourceState* chargingState;
    uint8_t _pad_13[0x8];
    struct ItemResourceState* chargedState;
    uint8_t _pad_14[0x8];
    struct ItemResourceState* releasingState;
    uint8_t _pad_15[0x8];
};




struct SAuxiliaryWeaponActionFlashlightParams {
    uint8_t _pad_0[0x8];
    float EM_Signature_On;
    float IR_Signature_On;
};




struct SActorComponentParams {
    uint8_t _pad_0[0x18];
    struct Character* character;
    uint8_t _pad_1[0x10];
    _Bool isAIControlled;
    _Bool flyInGroundState;
    uint8_t _pad_2[0x2];
    float aimFOV;
    float maxLookAimAngle;
    float maxDeltaAngleRateNormal;
    int32_t aimIKLayer;
    int32_t lookIKLayer;
    struct CharacterNameData* characterNameData;
    uint8_t _pad_3[0x10];
    struct ActorSkeletonConfig* skeletonConfig;
    uint8_t _pad_4[0x10];
    struct JumpFallLandParams* jumpFallLandParams;
    uint8_t _pad_5[0x10];
    struct LedgeGrabbingParams* ledgeGrabbingParams;
    uint8_t _pad_6[0x10];
    struct JumpFallLandConfig* jumpFallLandConfig;
    uint8_t _pad_7[0x10];
    struct CarryConfig* carryConfig;
    uint8_t _pad_8[0x10];
    struct LadderConfig* ladderConfig;
    uint8_t _pad_9[0x10];
    struct LadderConfig* ladderConfigV2;
    uint8_t _pad_10[0x10];
    struct WeaponProceduralAnimation* proceduralAnimationRecord;
    uint8_t _pad_11[0x10];
    struct ActorMovementModifiers* movementModifiersRecord;
    uint8_t _pad_12[0x10];
    struct ActorMovementSetsConfig* movementSetsRecord;
    uint8_t _pad_13[0x10];
    struct PlayerAnimatedInteractionConfig* playerAnimatedInteractionConfig;
    uint8_t _pad_14[0x10];
    _Bool isMinimal;
    uint8_t _pad_15[0x3];
    enum ARDataType aiDefaultStance;
    enum ARDataType actorType;
    uint8_t _pad_16[0x4];
    struct ActorStanceConfig* stancesDataRecord;
    uint8_t _pad_17[0x10];
    struct ActorStatusComponent* actorStatusRecord;
    uint8_t _pad_18[0x10];
    struct ActorStatusComponent* actorStatusRecordEA;
    uint8_t _pad_19[0x10];
    struct ActorStatusComponent* actorStatusRecordSQ42;
    uint8_t _pad_20[0x10];
    struct TakeDownConfig* takeDownConfig;
    uint8_t _pad_21[0x10];
    struct WeaponMisfireFixConfig* misfireFixConfig;
    uint8_t _pad_22[0x10];
    struct SActorHitReactionsDef* hitReactionsDefRecord;
    uint8_t _pad_23[0x10];
    struct SActorForceReactionsDef* forceReactionsDefRecord;
    uint8_t _pad_24[0x10];
    struct SActorExternalForceResponseCameraShakeDef* shakeRecordFirstPerson;
    uint8_t _pad_25[0x10];
    struct SActorExternalForceResponseCameraShakeDef* shakeRecordThirdPerson;
    uint8_t _pad_26[0x10];
    struct ActorAimLimits* actorAimLimits;
    uint8_t _pad_27[0x10];
    struct ActorLookLimits* actorLookLimits;
    uint8_t _pad_28[0x10];
    struct ActorTurnAngles* turnAngles;
    uint8_t _pad_29[0x10];
    struct HazardAwarenessParams* hazardParams;
    uint8_t _pad_30[0x10];
    struct ActorDuckingParams* duckingParams;
    uint8_t _pad_31[0x10];
    struct ActorGForceComponent* gforceParamsRecord;
    uint8_t _pad_32[0x10];
    struct ActorGForceComponent* gforceParamsRecordMasterModes;
    uint8_t _pad_33[0x10];
    struct ActorGForceHeadBob* gforceHeadBobRecord;
    uint8_t _pad_34[0x10];
    struct ActorGForceCameraEffects* gforceCameraEffectsRecord;
    uint8_t _pad_35[0x10];
    struct AdsCameraParams* adsCameraDefaultParams;
    uint8_t _pad_36[0x8];
    struct ActorAbilityComponent* abilityParamsRecord;
    uint8_t _pad_37[0x10];
    struct AudioBreathDefinition* breathingParamsRecord;
    uint8_t _pad_38[0x10];
    struct ActorStaminaComponent* staminaParamsRecord;
    uint8_t _pad_39[0x10];
    struct ActorEnvironmentComponent* actorEnvironmentRecord;
    uint8_t _pad_40[0x10];
    struct ActorLookAheadVehicle* defaultLookAheadRecord;
    uint8_t _pad_41[0x10];
    struct ActorLocomotionPersonality* locomotionPersonalityRecord;
    uint8_t _pad_42[0x10];
    struct CLocIdentifier* actorSpecies;
    struct WeaponPortsParams* weaponPortsParams;
    uint8_t _pad_43[0x50];
    struct SSharedInteractionParams* swapOutfitInteraction;
    uint8_t _pad_44[0x8];
    struct WingmanOrderList* wingmanOrders;
    uint8_t _pad_45[0x10];
    struct ActorTargetedParams* actorTargetedParams;
    uint8_t _pad_46[0x10];
    struct ActorSlidingParams* actorSlidingParams;
    uint8_t _pad_47[0x10];
    struct ActorZeroGTraversalParams* actorZeroGTraversalParams;
    uint8_t _pad_48[0x10];
    struct FoleyDefinition* baseFoleyDef;
    uint8_t _pad_49[0x10];
    struct FoleyFootstepDefinition* baseFootstepDef;
    uint8_t _pad_50[0x10];
    struct SActorDeathBehaviour* deathBehaviour;
    uint8_t _pad_51[0x8];
};




struct SConversationIconParams {
    uint8_t _pad_0[0x8];
    _Bool useConversationIcon;
    uint8_t _pad_1[0x7];
    struct CryStringT* entitySuperGUID;
    uint8_t _pad_2[0x8];
    struct CryStringT* iconVisibleGUID;
    uint8_t _pad_3[0x8];
    float distanceToSwitchToText;
    uint8_t _pad_4[0x4];
    struct Vec3* positionOffset;
    uint8_t _pad_5[0x10];
    struct Vec3* rotationOffset;
    uint8_t _pad_6[0x10];
    float iconScale;
    float textScale;
    _Bool alwaysFacePlayer;
    _Bool maintainPosition;
    _Bool usePlayerAsReferenceEntity;
    uint8_t _pad_7[0x5];
};




struct DeliveryLockerComponentParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* placeInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* pickupInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* dropOffInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* pickUpApprovedInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* failedPickUpInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* pickedUpItemInteraction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* dropOffApprovedInteraction;
    uint8_t _pad_7[0x8];
    struct SSharedInteractionParams* droppedOffItemInteraction;
    uint8_t _pad_8[0x8];
    struct SSharedInteractionParams* correctItemInteraction;
    uint8_t _pad_9[0x8];
    struct SSharedInteractionParams* wrongItemInteraction;
    uint8_t _pad_10[0x8];
    struct SSharedInteractionParams* wrongItemPickUpInteraction;
    uint8_t _pad_11[0x8];
    struct SSharedInteractionParams* failedDropOffInteraction;
    uint8_t _pad_12[0x8];
    struct SInteractionState* failedRequestState;
    uint8_t _pad_13[0x8];
    float spawnTimeOutSeconds;
    float requestProcessSeconds;
    float waitForPickupSeconds;
    float finishedPickupSeconds;
    float despawnFailedPickupSeconds;
    float waitForDropOffSeconds;
    float dropOffShutterDelaySeconds;
    uint8_t _pad_14[0x4];
};




struct SQuantumTravelEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct JumpTravelCameraParams {
    uint8_t _pad_0[0x8];
    struct CameraEffectsModifiers* genericModifiers;
    uint8_t _pad_1[0x150];
    struct GlobalJumpTunnelCameraEffectParams* cameraEffectParams;
    uint8_t _pad_2[0x280];
};




struct STurnOffItemGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct OrganizationRelationshipParams {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* organization;
    uint8_t _pad_1[0x10];
    struct SReputationScopeParams* scope;
    uint8_t _pad_2[0x10];
    struct SReputationStandingParams* standing;
    uint8_t _pad_3[0x10];
};




struct GasCloudVDBParams {
    uint8_t _pad_0[0x18];
    _Bool isChild;
    uint8_t _pad_1[0x7];
    struct GasCloudVDBDataParams* data;
    uint8_t _pad_2[0x10];
    struct GasCloudVDBLightingParams* lighting;
    uint8_t _pad_3[0x30];
    struct GasCloudSunShadowParams* shadow;
    uint8_t _pad_4[0x10];
    struct GasCloudVDBGamePlayParams* gamePlay;
    uint8_t _pad_5[0x8];
};




struct EntityEffectSystem_EnableSequencerTask {
    uint8_t _pad_0[0x20];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
};




struct DefaultSphereGeom {
    uint8_t _pad_0[0x8];
    _Bool disable;
    uint8_t _pad_1[0x3];
    float radiusInflation;
};




struct UIGraph_KioskBackgroundComponent {
    uint8_t _pad_0[0x8];
    enum ARDataType itemKioskMode;
    uint8_t _pad_1[0x4];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
};




struct SHeadRecoilNoiseParams {
    uint8_t _pad_0[0x8];
    float xNoise;
    _Bool canXInvert;
    uint8_t _pad_1[0x3];
    float yNoise;
    _Bool canYInvert;
    uint8_t _pad_2[0x3];
    float zNoise;
    _Bool canZInvert;
    uint8_t _pad_3[0x3];
};




struct ItemResourceDynamicAmountBase {
    uint8_t _pad_0[0x8];
};




struct SDirtAccumulatorParams {
    uint8_t _pad_0[0x8];
    float InitialAccumulationRatio;
    _Bool AccumulateWhenUnstreamed;
    _Bool AccumulateOnlyAfterTractorBeam;
    _Bool AccumulateOnlyWhenAttached;
    _Bool StopAccumulationWhenAttached;
    float AccumulationEventThreshold;
    uint8_t _pad_1[0x4];
    struct CryStringT* PortTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* RequiredPortTags;
    uint8_t _pad_3[0x8];
    float InitialDirtRatio;
    uint8_t _pad_4[0x4];
};




struct BoidsAlertPointRepelRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float decayCoefficient;
    float maxAcceleration;
};




struct StatusCost {
    uint8_t _pad_0[0x8];
    enum ARDataType statType;
    float cost;
};




struct LegacyCrafterContainerPort {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* port;
    uint8_t _pad_1[0x8];
    enum ARDataType mode;
    uint8_t _pad_2[0x4];
};




struct EAEntityMarkerTracker {
    uint8_t _pad_0[0x8];
    struct MarkerAR_ConfigDef* ARMarkerConfig;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* distanceUnits;
    float ARMarkerAlpha;
    _Bool scaleMarkerByDistance;
    uint8_t _pad_2[0x3];
    float minScaleDistance;
    float maxScaleDistance;
    float minSize;
    float maxSize;
    _Bool allowClipping;
    uint8_t _pad_3[0x7];
};




struct RadarPlate_Config {
    uint8_t _pad_0[0x8];
    enum ARDataType Color;
    uint8_t _pad_1[0x6];
    struct SimpleSpriteSlot* MainPlateSprite;
    uint8_t _pad_2[0x20];
    struct SimpleSpriteSlot* CenterIconSprite;
    uint8_t _pad_3[0x20];
    struct Vec2* InnerRingUV_Start;
    uint8_t _pad_4[0x8];
    struct Vec2* InnerRingUV_Size;
    uint8_t _pad_5[0x8];
    struct Vec2* TopRingUV_Start;
    uint8_t _pad_6[0x8];
    struct Vec2* TopRingUV_Size;
    uint8_t _pad_7[0x8];
    struct Vec2* BottomARingUV_Start;
    uint8_t _pad_8[0x8];
    struct Vec2* BottomARingUV_Size;
    uint8_t _pad_9[0x8];
    struct Vec2* BottomBRingUV_Start;
    uint8_t _pad_10[0x8];
    struct Vec2* BottomBRingUV_Size;
    uint8_t _pad_11[0x8];
    float Rotation;
    float InnerRingThickness;
    float CenterIconScale;
    float TopRingElevation;
    float TopRingThickness;
    float BottomARingElevation;
    float BottomARingSizeMultiplier;
    float BottomARingGapAngle;
    float BottomARingThickness;
    float BottomBRingElevation;
    float BottomBRingSizeMultiplier;
    float BottomBRingGapAngle;
    float BottomBRingThickness;
    int32_t Segments;
    int32_t MainPlateInnerRings;
    uint8_t _pad_12[0x4];
};




struct BuildingBlocks_StaticVariableBase {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct SCharacterCustomizerMakeupParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* texturePath;
    uint8_t _pad_1[0x8];
    int32_t numTilesU;
    int32_t numTilesV;
    int32_t offsetU;
    int32_t offsetV;
    _Bool supportsHueRotation;
    uint8_t _pad_2[0x7];
    struct SCharacterCustomizerMakeupDefaultParams* defaultParams;
    uint8_t _pad_3[0x68];
    struct SCharacterCustomizerClampedValueParams* smoothLimits;
    uint8_t _pad_4[0x10];
    struct SCharacterCustomizerClampedValueParams* metalLimits;
    uint8_t _pad_5[0x10];
    struct SCharacterCustomizerClampedValueParams* opacityLimits;
    uint8_t _pad_6[0x10];
};




struct SJumpTunnelEllipticalParams {
    uint8_t _pad_0[0x8];
    float minRadius;
    float maxRadius;
    struct BezierCurve* radiusMultiplier;
    uint8_t _pad_1[0x88];
    float minAspectRatio;
    float maxAspectRatio;
    struct BezierCurve* aspectRatioMultiplier;
    uint8_t _pad_2[0x88];
    float chanceToFollowCurvature;
    uint8_t _pad_3[0x4];
};




struct SInitialDamage {
    uint8_t _pad_0[0x8];
    int32_t RandomSeed;
    uint8_t _pad_1[0x4];
    struct SInitialDamageSpecifierBase* Damage;
    uint8_t _pad_2[0x8];
    struct Vec3* BoundingBoxScale;
    uint8_t _pad_3[0x10];
    float MaxDamageRatio;
    int32_t MinHitCount;
    int32_t MaxHitCount;
    float MinHitRadiusFraction;
    float MaxHitRadiusFraction;
    float HitDamageVariationFactor;
    float DamageMapDamageScale;
    uint8_t _pad_4[0x4];
    struct DamageMapChannels* DamageMapNoiseStrength;
    uint8_t _pad_5[0x10];
};




struct SCItemExplosiveParams {
    uint8_t _pad_0[0x18];
    struct BlinkingLightParams* blinkingLightParams;
    uint8_t _pad_1[0x10];
    struct ExplosionParams* explosionParams;
    uint8_t _pad_2[0x1b8];
    float maxLifeTime;
    _Bool detonateOnImpact;
    uint8_t _pad_3[0x3];
    struct GlobalResourceAudio* startCookAudioTrigger;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* stopCookAudioTrigger;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* cookingProgressRtpc;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* grenadeLightIntensityRtpc;
    uint8_t _pad_7[0x18];
    struct CryStringT* markerShapePath;
    uint8_t _pad_8[0x8];
    struct CryStringT* markerModelPath;
    uint8_t _pad_9[0x8];
};




struct ActorMovementModifiers {
    uint8_t _pad_0[0x8];
    struct ActorBaseMovementModifiers* baseModifiers;
    uint8_t _pad_1[0xa0];
    struct ActorExternalForceMovementModifiers* externalForceModifiers;
    uint8_t _pad_2[0x50];
    struct ActorEnvironmentalMovementModifiers* environmentalModifiers;
    uint8_t _pad_3[0x18];
};




struct SSCSignatureSystemAudioModifier {
    uint8_t _pad_0[0x8];
};




struct SSubsumptionActionAreaTrackerParams {
    uint8_t _pad_0[0x18];
};




struct DriftingDrunkBDLEffects {
    uint8_t _pad_0[0x8];
    float stumbleMinCooldown;
    float stumbleMaxCooldown;
    float stumbleMinDuration;
    float stumbleMaxDuration;
    float stumbleFrequency;
    float stumbleMinMagnitude;
    float stumbleMaxMagnitude;
    float minValue;
    float maxValue;
    float fadeSpeedMin;
    float fadeSpeedMax;
    float fadeFrequency;
    float fovScaleAdjust;
    float breathingAmplifier;
};




struct SActorForceReactionHeadRecoilConfig {
    uint8_t _pad_0[0x8];
    float planarADSZoomScaleFactor;
    float rollADSZoomScaleFactor;
    float planarDirConeAngle;
    uint8_t _pad_1[0x4];
    struct Range* horizontalRecoilRange;
    uint8_t _pad_2[0x8];
    float horizontalRandomRecoilAtMaxImpulse;
    uint8_t _pad_3[0x4];
    struct Range* verticalRecoilRange;
    uint8_t _pad_4[0x8];
    float verticalRandomRecoilAtMaxImpulse;
    uint8_t _pad_5[0x4];
    struct Range* rollRecoilRange;
    uint8_t _pad_6[0x8];
    float rollRandomRecoilAtMaxImpulse;
    float rollAxisInfluencePct;
    struct SActorForceReactionCurveConfig* planarCurveConfig;
    uint8_t _pad_7[0x20];
    struct SActorForceReactionCurveConfig* rollCurveConfig;
    uint8_t _pad_8[0x20];
};




struct SendAttemptWirelessLinkEvent {
    uint8_t _pad_0[0x8];
};




struct StatusEffectValueAbsolute {
    uint8_t _pad_0[0x8];
    float value;
    uint8_t _pad_1[0x4];
};




struct GlobalJumpTunnelFogParams {
    uint8_t _pad_0[0x8];
    float fogStartOffset;
    float fogEndOffset;
    struct Range* fogEndIntensityDistanceRange;
    uint8_t _pad_1[0x8];
    struct Range* fogAnimatedIntensityScaleRange;
    uint8_t _pad_2[0x8];
};




struct CommunicationVariationCondition {
    uint8_t _pad_0[0x8];
    struct CryStringT* expression;
    uint8_t _pad_1[0x8];
    struct TagsDNF* conditionTags;
    uint8_t _pad_2[0x60];
};




struct ControlHintCondition_ActorMotionSpeed {
    uint8_t _pad_0[0x8];
    enum ARDataType motionSpeed;
    uint8_t _pad_1[0x4];
};




struct WeaponProceduralClipLean {
    uint8_t _pad_0[0x8];
    float blendTime;
    uint8_t _pad_1[0x4];
    struct Ang3* weaponLean;
    uint8_t _pad_2[0x10];
    struct Vec3* weaponLeanAxisOffset;
    uint8_t _pad_3[0x10];
    struct Vec3* weaponShift;
    uint8_t _pad_4[0x10];
};




struct ScreenEffects_Pattern {
    uint8_t _pad_0[0x8];
    float duration;
    uint8_t _pad_1[0x4];
};




struct ItemResourceDynamicAmountJumpTravelFuel {
    uint8_t _pad_0[0x8];
};




struct EntityAudioControllerTypeManagementParams {
    uint8_t _pad_0[0x8];
    enum ARDataType audioControllerEntityType;
    int32_t maxFullLODs;
    int32_t maxLowLODs;
    uint8_t _pad_1[0x4];
};




struct SSequencerMoveToAnimateItemDoorTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* fragmentId;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragTag;
    uint8_t _pad_2[0x8];
};




struct InteriorMapWorldUISectionLabelsParams {
    uint8_t _pad_0[0x8];
};




struct LocationMusicConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* wwiseEventPrefix;
    uint8_t _pad_1[0x8];
    struct CryStringT* musicEventPrefix;
    uint8_t _pad_2[0x8];
    struct CryStringT* wwiseEventPrefixStarSystem;
    uint8_t _pad_3[0x8];
    struct CryStringT* musicEventPrefixStarSystem;
    uint8_t _pad_4[0x8];
};




struct EAPatchNoteParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* note;
    _Bool bold;
    _Bool underlined;
    _Bool italic;
    uint8_t _pad_1[0x5];
};




struct SCItemTurretMovementTagName {
    uint8_t _pad_0[0x8];
    struct Tag* movementTag;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* movementName;
};




struct InnerThought_InteractionSystemConfig {
    uint8_t _pad_0[0x8];
    float minDistance;
    float maxDistance;
    float rotationRate;
    uint8_t _pad_1[0x4];
    struct InnerThought_Params* innerThought;
    uint8_t _pad_2[0x10];
};




struct PersonalThoughtActionsMenu {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
};




struct SSequencerStowHeldEntityCarryableTaskParams {
    uint8_t _pad_0[0x20];
};




struct JumpFallLandParams {
    uint8_t _pad_0[0x8];
    _Bool useJump;
    uint8_t _pad_1[0x3];
    float jumpHeight;
    float jumpDistance;
    uint8_t _pad_2[0x4];
};




struct SCTurretSeatRotationParams {
    uint8_t _pad_0[0x8];
    float preEnterAngle;
    float postEnterAngle;
    float preExitAngle;
    float postExitAngle;
};




struct Item {
    uint8_t _pad_0[0x8];
    struct BaseItem* type_;
    uint8_t _pad_1[0x8];
};




struct SEntityTraversingNodeTypeUserControl {
    uint8_t _pad_0[0x8];
    struct Tag* listenedForItemComponent;
    uint8_t _pad_1[0x10];
};




struct PlanetKillVolumeComponentParams {
    uint8_t _pad_0[0x18];
    float planetRadius;
    float killRadius;
    float warningRadius;
    float shakeRadius;
    float shadowPenumbraWidth;
    float shadowMaxRange;
};




struct HealParams {
    uint8_t _pad_0[0x18];
    enum ARDataType serviceBeaconType;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* serviceBeaconName;
    int32_t beaconTaxPercentage;
    int32_t beaconMaxPaymentAmount;
    struct MissionPropertyValue_AIName* npcRequesterNameDef;
    uint8_t _pad_2[0x40];
    struct SServiceBeaconCreatorParams* playerCreatorParams;
    uint8_t _pad_3[0x8];
    struct SServiceBeaconCreatorParamsBase* npcCreatorParams;
    uint8_t _pad_4[0x8];
    struct CLocIdentifier* objectiveTitle;
    struct CLocIdentifier* objectiveDescription;
};




struct SStandardPlayerSetup {
    uint8_t _pad_0[0x18];
};




struct EASpawnRezParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_FieldModifierLocalization {
    uint8_t _pad_0[0x8];
    enum ARDataType field;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* value;
};




struct ActorEnvironmentalModifierConfig {
    uint8_t _pad_0[0x8];
    float minAffectedRatioForSlowdown;
    float environmentalSlowdownSpeedMultiplier;
    float minAffectedRatioToDisableSprint;
    uint8_t _pad_1[0x4];
};




struct SPUHostility {
    uint8_t _pad_0[0x18];
    _Bool enableReputationHostility;
    uint8_t _pad_1[0x7];
    struct PlayerHostilityParams* playerHostilityParams;
    uint8_t _pad_2[0x90];
    struct RammingTrackerParams* rammingParams;
    uint8_t _pad_3[0x18];
    struct BountyParams* bountyParams;
    uint8_t _pad_4[0x98];
    struct LawSystemGlobalSettings* lawSystemSettings;
    uint8_t _pad_5[0x408];
};




struct EnvironmentLightProjectionParams {
    uint8_t _pad_0[0x8];
    _Bool boxProject;
    uint8_t _pad_1[0x3];
    float boxSizeZ;
    float boxSizeX;
    float boxSizeY;
};




struct EnvironmentLightStateParams_Emergency {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float intensity;
    uint8_t _pad_2[0x4];
    struct CryStringT* presetTag;
    uint8_t _pad_3[0x8];
};




struct StaminaCost {
    uint8_t _pad_0[0x8];
    float flatCost;
    uint8_t _pad_1[0x4];
};




struct MatchCycleParams {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x3];
    float matchCycleTimeout;
};




struct SCItemControlCondition_Base {
    uint8_t _pad_0[0x8];
};




struct SLootableInventoryParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* lootOpenInventoryViewInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* lootOpenLootingViewInteraction;
    uint8_t _pad_2[0x8];
    _Bool allowStorageInteractions;
    uint8_t _pad_3[0x7];
};




struct MagLaunchParams {
    uint8_t _pad_0[0x18];
    float liftHeight;
    float liftAcceleration;
    float maxTimeWaitAfterLift;
    float launchAcceleration;
    float launchLength;
    _Bool automateLandingGear;
    uint8_t _pad_1[0x3];
    struct MagLaunchNoiseParams* noiseParams;
    uint8_t _pad_2[0x10];
};




struct GlobalJumpPointTuningParams {
    uint8_t _pad_0[0x8];
    float requiredTuningAmount;
    uint8_t _pad_1[0x4];
};




struct SCItemTurretSensitivityParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* increaseSensitivityInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* decreaseSensitivityInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* resetSensitivityInteraction;
    uint8_t _pad_3[0x8];
    float sensitivityDelta;
    uint8_t _pad_4[0x4];
};




struct WheelAudioSurfaceMapping {
    uint8_t _pad_0[0x8];
    struct CryStringT* surfaceName;
    uint8_t _pad_1[0x8];
    struct WheelAudioParams* audio;
    uint8_t _pad_2[0x40];
};




struct SecurityNetworkProtocolOverride {
    uint8_t _pad_0[0x8];
    struct TagList* roomIdentifiers;
    uint8_t _pad_1[0x30];
    struct SecurityNetworkProtocol* protocol;
    uint8_t _pad_2[0x70];
};




struct AttackDetectionConfig {
    uint8_t _pad_0[0x8];
    int32_t numHitsToClassAsAnAttack;
    float attackDetectionTimeWindow;
    float attackDetectionTimeout;
    uint8_t _pad_1[0x4];
};




struct DefaultActionsEntityState_NOT {
    uint8_t _pad_0[0x8];
    struct DefaultActionsEntityState* state;
    uint8_t _pad_1[0x8];
};




struct CameraFOVConfig {
    uint8_t _pad_0[0x8];
    float lensSizeTransitionTime;
    enum ARDataType defaultLensSizePreset;
    float fStopTransitionTime;
    enum ARDataType defaultFStop;
    float nearPlane;
    float farPlane;
    float focalDistance;
    uint8_t _pad_1[0x4];
};




struct ContractResult_CompletionTag {
    uint8_t _pad_0[0x8];
    int32_t count;
    uint8_t _pad_1[0x4];
    struct Tag* tag;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_ColorFromBooleanToggle {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_ColorBase* colorIfTrue;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_ColorBase* colorIfFalse;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_3[0x8];
};




struct SItemPortDefHelper {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct QuatT* Offset;
    uint8_t _pad_2[0x50];
    struct CryStringT* ItemOffsetHelperName;
    uint8_t _pad_3[0x8];
    struct SSimulationParamsBase* SimulationParams;
    uint8_t _pad_4[0x98];
};




struct AtmosphereStateTemplateInternal {
    uint8_t _pad_0[0x8];
    enum ARDataType pressureMod;
    float pressure;
    enum ARDataType temperatureMod;
    float temperature;
    enum ARDataType humidityMod;
    float humidity;
};




struct SDynamicLaunchZoneDef {
    uint8_t _pad_0[0x8];
    float width;
    float length;
    float cutoutAngle;
    float ellipsoidOffsetY;
    float coneOffsetY;
    uint8_t _pad_1[0x4];
};




struct EATransportQTravelTransitionParams {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x3];
    float spoolUpTime;
};




struct ControlHintCondition_GameOptionState {
    uint8_t _pad_0[0x8];
    struct CryStringT* gameOptionAttributeName;
    uint8_t _pad_1[0x8];
};




struct SEntityEffectSystem_PropertyModifier {
    uint8_t _pad_0[0x8];
};




struct ActorActionHandler_LadderValidationParams {
    uint8_t _pad_0[0x8];
    float nearDistance;
    float mountTimeout;
    float slideTimeout;
    float dismountTimeout;
};




struct SResourceTypeDefaultCargoContainers {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* one_eighthSCU;
    uint8_t _pad_1[0x10];
    struct EntityClassDefinition* one_quarterSCU;
    uint8_t _pad_2[0x10];
    struct EntityClassDefinition* one_halfSCU;
    uint8_t _pad_3[0x10];
    struct EntityClassDefinition* oneSCU;
    uint8_t _pad_4[0x10];
    struct EntityClassDefinition* twoSCU;
    uint8_t _pad_5[0x10];
    struct EntityClassDefinition* fourSCU;
    uint8_t _pad_6[0x10];
    struct EntityClassDefinition* eightSCU;
    uint8_t _pad_7[0x10];
    struct EntityClassDefinition* sixteenSCU;
    uint8_t _pad_8[0x10];
    struct EntityClassDefinition* twentyFourSCU;
    uint8_t _pad_9[0x10];
    struct EntityClassDefinition* thirtyTwoSCU;
    uint8_t _pad_10[0x10];
};




struct BaseJournalEntry {
    uint8_t _pad_0[0x8];
};




struct SS42SubsumptionMissionComponentParams {
    uint8_t _pad_0[0x18];
};




struct ApparentTemperatureParams {
    uint8_t _pad_0[0x8];
    double heatIndexBlendThreshold;
    double heatIndexHardThreshold;
    double windChillBlendThreshold;
    double windChillHardThreshold;
    double maxPressureForScaling;
    double defaultTemperatureForPressureScaling;
};




struct PersonalThoughtCameraEffectsParams {
    uint8_t _pad_0[0x8];
    float openingDelay;
    float closingDelay;
    float backgroundExposure;
    uint8_t _pad_1[0x4];
    struct DynamicCameraEffects* dynamicCameraEffectsRecord;
    uint8_t _pad_2[0x10];
};




struct StanceCheckConfig {
    uint8_t _pad_0[0x8];
    _Bool standCheckEnabled;
    _Bool crouchCheckEnabled;
    _Bool proneCheckEnabled;
    _Bool ragdollEnabled;
    uint8_t _pad_1[0x4];
};




struct STeamHostility {
    uint8_t _pad_0[0x18];
};




struct FloatModifierMultiplicative {
    uint8_t _pad_0[0x8];
    _Bool showInUI;
    uint8_t _pad_1[0x7];
    float value;
    uint8_t _pad_2[0x4];
};




struct StatusEffectValueLinear {
    uint8_t _pad_0[0x8];
    float effectMax;
    float effectMin;
    float valueAtMin;
    float valueAtMax;
};




struct MinCompletionTags {
    uint8_t _pad_0[0x8];
    struct Tag* requiredTag;
    uint8_t _pad_1[0x10];
    int32_t minRequired;
    uint8_t _pad_2[0x4];
};




struct MissionFlowCondition_TokenState {
    uint8_t _pad_0[0x8];
    struct ObjectiveToken* objectiveToken;
    uint8_t _pad_1[0x8];
    enum ARDataType tokenState;
    uint8_t _pad_2[0x4];
};




struct ItemPreview_LightingSettings {
    uint8_t _pad_0[0x8];
    struct ItemPreview_LightIntensities* lightIntensities;
    uint8_t _pad_1[0x18];
    float topAngle;
    float bottomAngle;
    float leftRightAngle;
    float rimOffsetAngle;
    _Bool useEnvProbe;
    uint8_t _pad_2[0x7];
    struct CryStringT* envProbeTexture;
    uint8_t _pad_3[0x8];
    float envProbeMultiplier;
    float envProbeRadiusMultiplier;
};




struct MissionObjective {
    uint8_t _pad_0[0x8];
    struct MissionLogEntry* missionLogEntry;
    uint8_t _pad_1[0x10];
    struct MissionObjective* parentObjective;
    uint8_t _pad_2[0x10];
    struct CLocIdentifier* shortDescription;
    struct CLocIdentifier* longDescription;
    enum ARDataType category;
    int32_t group;
    _Bool silentUpdate;
    _Bool showInLog;
    uint8_t _pad_3[0x6];
    struct Tag* objectiveType;
    uint8_t _pad_4[0x10];
    _Bool showInteriorMapWaypoint;
    uint8_t _pad_5[0x7];
};




struct GasCloudLightFadeParams {
    uint8_t _pad_0[0x8];
    float minDistance;
    float minFade;
    float maxDistance;
    float maxFade;
};




struct SVehiclePhysicsGridParams {
    uint8_t _pad_0[0x8];
    _Bool inheritGravity;
    uint8_t _pad_1[0x7];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x6];
    struct CryStringT* voxelDataFile;
    uint8_t _pad_4[0x8];
    struct GlobalResourceCGF* physicsProxy;
    uint8_t _pad_5[0x10];
};




struct DynamicCameraEffectsRendererParams {
    uint8_t _pad_0[0x8];
    float bloomIntensity;
    float chromaticAberration;
    float filmGrainSize;
    float filmGrainStrength;
    float shutterSpeed;
    float vignetting;
};




struct EntityComponentHeatConnection {
    uint8_t _pad_0[0x18];
    float TemperatureToIR;
    float StartIRTemperature;
    float OverpowerHeat;
    float OverclockThresholdMinHeat;
    float OverclockThresholdMaxHeat;
    float ThermalEnergyBase;
    float ThermalEnergyDraw;
    float ThermalConductivity;
    float SpecificHeatCapacity;
    float Mass;
    float SurfaceArea;
    float StartCoolingTemperature;
    float MaxCoolingRate;
    float MaxTemperature;
    float OverheatTemperature;
    float RecoveryTemperature;
    float MinTemperature;
    float MisfireMinTemperature;
    float MisfireMaxTemperature;
    uint8_t _pad_1[0x4];
};




struct CraftingNameInfo {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
};




struct UIOwnerContextTransitionPair {
    uint8_t _pad_0[0x8];
    struct CryStringT* layerName;
    uint8_t _pad_1[0x8];
    struct CryStringT* viewName;
    uint8_t _pad_2[0x8];
};




struct SHintActivator {
    uint8_t _pad_0[0x8];
    enum ARDataType hint;
    uint8_t _pad_1[0x4];
};




struct SContextualTakedownFragmentTag {
    uint8_t _pad_0[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_1[0x8];
};




struct InteractionConditionEntityTag {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct Tag* requiredTag;
    uint8_t _pad_2[0x10];
};




struct Quat {
    uint8_t _pad_0[0x18];
    struct Ang3* Rotation;
    uint8_t _pad_1[0x10];
};




struct SubHarvestableConfigSingleRef {
    uint8_t _pad_0[0x8];
    struct SubHarvestableConfigRecord* subConfigRef;
    uint8_t _pad_1[0x10];
};




struct SNavPointEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct LegalRegistrationComponentParams {
    uint8_t _pad_0[0x18];
    _Bool doNotTriggerCrimesAgainstThis;
    uint8_t _pad_1[0x7];
    struct CryStringT* nameplateOverride;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* nameplateLocalizedOverride;
    _Bool displayNameplateOverPilotName;
    uint8_t _pad_3[0x7];
    struct CryStringT* serialOverride;
    uint8_t _pad_4[0x8];
    struct CLocIdentifier* serialLocalizedOverride;
    struct VehicleSerialNumberFormat* serialNumberFormat;
    uint8_t _pad_5[0x10];
    struct SecurityNetworkManifest* securityNetworkManifest;
    uint8_t _pad_6[0x10];
};




struct DoorStateModifier {
    uint8_t _pad_0[0x8];
    struct DoorOpenStates* openStates;
    uint8_t _pad_1[0x8];
    struct DoorLockStates* lockStates;
    uint8_t _pad_2[0x8];
};




struct SCharacterCustomizerClippingVolumeParams {
    uint8_t _pad_0[0x8];
    struct EntityReferenceDef* area;
    uint8_t _pad_1[0x10];
    float transitionTime;
    float fadeDistance;
};




struct TransitLimboNodeParams {
    uint8_t _pad_0[0x18];
};




struct RestrictedAreaBoundaryMeshParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_ComponentIconProperties {
    uint8_t _pad_0[0x8];
    _Bool show;
    uint8_t _pad_1[0x3];
    enum ARDataType iconPreset;
    struct CryStringT* customIcon;
    uint8_t _pad_2[0x8];
};




struct AtmosphereStateTemplate {
    uint8_t _pad_0[0x8];
    struct AtmosphereStateTemplateInternal* state;
    uint8_t _pad_1[0x18];
};




struct BiomeAccumulationParams {
    uint8_t _pad_0[0x18];
};




struct TriggeredVisorMessage {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    float duration;
    uint8_t _pad_1[0x4];
};




struct S42StatOperationValue {
    uint8_t _pad_0[0x8];
    enum ARDataType operationType;
    uint8_t _pad_1[0x4];
    float valueRight;
    uint8_t _pad_2[0x4];
};




struct ProceduralPlanetAudioTagAndRtpc {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct AudioRtpc* rtpc;
    uint8_t _pad_2[0x18];
};




struct BuildingBlocks_AspectRatioOption {
    uint8_t _pad_0[0x8];
    float aspectRatio;
    uint8_t _pad_1[0x4];
    struct Tag* tag;
    uint8_t _pad_2[0x10];
};




struct SVehicleEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionInteractableEntityOwnerHasArmorAttached {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SReputationStateModifierSet {
    uint8_t _pad_0[0x8];
    int32_t value;
    uint8_t _pad_1[0x4];
};




struct SSalvageRepairAudioParams {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* salvageCargoOccupancyFactorRTPC;
    uint8_t _pad_1[0x18];
    float friendlyFireMessageCooldownScale;
    uint8_t _pad_2[0x4];
};




struct ActorFOVViewParams {
    uint8_t _pad_0[0x8];
    struct Vec2* globalVerticalFOVLimit;
    uint8_t _pad_1[0x8];
    float globalFOVLerpSpeed;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_BindingsNumberBase {
    uint8_t _pad_0[0x50];
};




struct AttachableStateModifierContext_Parent {
    uint8_t _pad_0[0x8];
};




struct ScanDisplaySortInfoParams {
    uint8_t _pad_0[0x8];
    enum ARDataType sortVariable;
    enum ARDataType sortType;
    uint8_t _pad_1[0x6];
};




struct StatusPriorityBase {
    uint8_t _pad_0[0x8];
    enum ARDataType associatedWidget;
    uint8_t _pad_1[0x4];
};




struct SReputationMissionRequirementExpressionElement {
    uint8_t _pad_0[0x8];
};




struct TakeDownMaxDistances {
    uint8_t _pad_0[0x8];
    float maxDistanceFront;
    float maxDistanceBack;
    float maxDistanceRight;
    float maxDistanceLeft;
};




struct SEntityEffectSystem_UIOwnerTriggerEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0xcf];
    float duration;
    uint8_t _pad_3[0x4];
    struct EntityEffectSystem_UIOwnerEvent_Goto* uiOwnerStartEvent;
    uint8_t _pad_4[0x8];
    struct Tag* trigger;
    uint8_t _pad_5[0x10];
};




struct SCLocalPlayerGroupVideoCallComponentParams {
    uint8_t _pad_0[0x18];
};




struct InteractionConditionCanBeBodyDragDropped {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SAddHealthRatio {
    uint8_t _pad_0[0x8];
    float healthRatio;
    uint8_t _pad_1[0x4];
};




struct IntoxicationBoatModifierParams {
    uint8_t _pad_0[0x188];
    struct ToxiInputModifierDistortion* distortion;
    uint8_t _pad_1[0x138];
    struct ToxiInputModifierDelay* delay;
    uint8_t _pad_2[0x10];
    struct ToxiInputModifierAxis* yaw;
    uint8_t _pad_3[0x20];
};




struct ItemResourceDynamicAmountLifeSupport {
    uint8_t _pad_0[0x8];
};




struct SCarryableStatesParams {
    uint8_t _pad_0[0x18];
    struct SInteractionState* settledState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* carriedState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* equippedToSuitState;
    uint8_t _pad_3[0x8];
    struct SInteractionState* inspectingState;
    uint8_t _pad_4[0x8];
    struct SInteractionState* droppedState;
    uint8_t _pad_5[0x8];
    struct SInteractionState* offeredState;
    uint8_t _pad_6[0x8];
    struct SInteractionState* heldReadyState;
    uint8_t _pad_7[0x8];
    struct SInteractionState* equippedWornState;
    uint8_t _pad_8[0x8];
    struct SInteractionState* storedState;
    uint8_t _pad_9[0x8];
    struct SInteractionState* hangingOnOutfitHangerState;
    uint8_t _pad_10[0x8];
};




struct SBBDynamicPropertyLocString {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* value;
};




struct DockingSensitivity {
    uint8_t _pad_0[0x8];
    float DockingUIRotationalSensitivity;
    float DockingUILinearSensitivity;
};




struct SCItemShipComputerParams {
    uint8_t _pad_0[0x18];
    struct ShipComputerDefinition* definition;
    uint8_t _pad_1[0x10];
};




struct RadiationStateTemplate {
    uint8_t _pad_0[0x8];
    struct RadiationStateTemplateInternal* state;
    uint8_t _pad_1[0x40];
};




struct SResourceNetworItemType {
    uint8_t _pad_0[0x8];
    enum ARDataType resourceNetworkItemType;
    uint8_t _pad_1[0x4];
};




struct EntityEventCallbackComponentParams {
    uint8_t _pad_0[0x18];
};




struct ScanOverrideDisplayInjectParams {
    uint8_t _pad_0[0x8];
    struct ScanDisplayInstanceParams* displayInstance;
    uint8_t _pad_1[0x10];
    enum ARDataType displaySection;
    uint8_t _pad_2[0x7];
    _Bool addToBoxoutDisplay;
    uint8_t _pad_3[0x3];
    int32_t displayPriority;
};




struct SOrdnanceClusterParams {
    uint8_t _pad_0[0x8];
    float launchDetachTime;
    float impactDetachTime;
    _Bool detachAngleRelativeToGravity;
    uint8_t _pad_1[0x3];
    float detachAngleInitial;
    float detachAngleIncrement;
    int32_t detachAngleResetCount;
    float detachDelay;
    float detachSpeed;
};




struct BuildingBlocks_FieldModifierEnumerated {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_FieldModifierEnumeratedTypeBase* field;
    uint8_t _pad_1[0x8];
};




struct CraftingCost_Base {
    uint8_t _pad_0[0x8];
};




struct StickyFilterRotationParams {
    uint8_t _pad_0[0x8];
    float outerRotationSpeed;
    float innerRotationSpeed;
    float minRadiusAngle;
    float maxRadiusAngle;
    float breakRadiusAngle;
    float deadZoneRadiusAngle;
};




struct SecurityClearanceTokenData_Reputation {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
    struct FactionReputation* factionReputation;
    uint8_t _pad_2[0x10];
    struct SReputationScopeParams* scope;
    uint8_t _pad_3[0x10];
    struct SReputationStandingParams* standing;
    uint8_t _pad_4[0x10];
};




struct DevTeam {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct StatusEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* bindingsPrefix;
    uint8_t _pad_1[0x8];
};




struct UIGraph_MovieClipTransformationInterpolatorComponent {
    uint8_t _pad_0[0x8];
    struct MovieClipTransformationInterpolator* movieClipTransformationInterpolator;
    uint8_t _pad_1[0x10];
};




struct ExtendedNameEntry {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct ExtendedNameEntryTextBase* text;
    uint8_t _pad_2[0x8];
};




struct SPlayerSkillsTechniques {
    uint8_t _pad_0[0x8];
    struct SVaultingTechnique* vaultingTechnique;
    uint8_t _pad_1[0x40];
    struct STakedownTechnique* takedownTechnique;
    uint8_t _pad_2[0x40];
};




struct BuildingBlocks_BindingsNumberAtan2 {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsNumberBase* inputY;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsNumberBase* inputX;
    uint8_t _pad_2[0xa8];
};




struct ItemResourceDynamicAmountFunctionalityRatio {
    uint8_t _pad_0[0x8];
    float threshold;
    enum ARDataType resource;
};




struct SMineableResourceObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct FactionRelationship {
    uint8_t _pad_0[0x8];
    struct Faction_LEGACY* faction;
    uint8_t _pad_1[0x10];
    enum ARDataType reactionType;
    uint8_t _pad_2[0x4];
};




struct EntityComponentConsumableLiquidSourceParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* fillSourceHelper;
    uint8_t _pad_1[0x8];
    struct CryStringT* fillVFXPath;
    uint8_t _pad_2[0x8];
    struct RGB* fillVFXTintOverride;
    uint8_t _pad_3[0x8];
};




struct MiningLaserModifiers {
    uint8_t _pad_0[0x8];
    struct FloatModifier* laserInstability;
    uint8_t _pad_1[0x8];
    struct FloatModifier* optimalChargeWindowSizeModifier;
    uint8_t _pad_2[0x8];
    struct FloatModifier* resistanceModifier;
    uint8_t _pad_3[0x8];
    struct FloatModifier* shatterdamageModifier;
    uint8_t _pad_4[0x8];
    struct FloatModifier* clusterFactorModifier;
    uint8_t _pad_5[0x8];
    struct FloatModifier* optimalChargeWindowRateModifier;
    uint8_t _pad_6[0x8];
    _Bool isOptimalRateGood;
    uint8_t _pad_7[0x7];
    struct FloatModifier* catastrophicChargeWindowRateModifier;
    uint8_t _pad_8[0x8];
};




struct LightClipBoxParams {
    uint8_t _pad_0[0x8];
    _Bool useClipBox;
    _Bool autoDetectClipBox;
    uint8_t _pad_1[0x6];
};




struct BuildingBlocks_BorderSide {
    uint8_t _pad_0[0x8];
    float width;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_2[0x8];
};




struct CameraKillerDeathCamParams {
    uint8_t _pad_0[0x8];
    int32_t angleToApplyVerticalOffset;
    float verticalOffset;
    float smoothTime;
    float smoothTimeVehicleFast;
    float smoothTimeVehicleSlow;
    float smoothTimeVehicleMaxDistanceSquared;
    float innerRadius;
    float outerRadius;
    float collisionRadius;
    _Bool collisionsEnabled;
    _Bool followsKiller;
    _Bool inVehicle;
    uint8_t _pad_1[0x1];
    int32_t vehicleTopDownAngle;
    float vehicleTopDownDistance;
    float footTopDownDistance;
    float swapTimeBodyToVehicle;
};




struct SControlledEntityAutoCraneCurve {
    uint8_t _pad_0[0x8];
    struct SBezierCurveRecord* autoStartupCurve;
    uint8_t _pad_1[0x10];
    float fullStartupDistance;
    uint8_t _pad_2[0x4];
    struct SBezierCurveRecord* autoSlowdownCurve;
    uint8_t _pad_3[0x10];
    float fullSlowdownDistance;
    uint8_t _pad_4[0x4];
};




struct SInitialDamageSpecifierBase {
    uint8_t _pad_0[0x8];
};




struct WorldDisplay_PlaneEnvironment_Ring {
    uint8_t _pad_0[0x8];
    float relativeRadius;
    float width;
    float elevation;
    uint8_t _pad_1[0x4];
    struct SimpleSpriteSlot* spriteSlot;
    uint8_t _pad_2[0x20];
    struct UvInset* uvInset;
    uint8_t _pad_3[0x10];
    uint8_t innerRings;
    uint8_t _pad_4[0x3];
    float gapAngle;
    float rotation;
    uint8_t _pad_5[0x4];
};




struct SReputationStateModifierSetBool {
    uint8_t _pad_0[0x8];
    _Bool value;
    uint8_t _pad_1[0x7];
};




struct EAPlayableAreaControllerComponentParamsDef {
    uint8_t _pad_0[0x18];
    struct EAPlayableAreaMovementTypeParamsDef* paramsOnFoot;
    uint8_t _pad_1[0x8];
    struct EAPlayableAreaMovementTypeParamsDef* paramsGroundVehicle;
    uint8_t _pad_2[0x8];
    struct EAPlayableAreaMovementTypeParamsDef* paramsSpaceship;
    uint8_t _pad_3[0x8];
    float despawnDelay;
    uint8_t _pad_4[0x4];
    struct CLocIdentifier* OOBAttackingTeamMessage;
    struct CLocIdentifier* OOBDefendingTeamMessage;
    struct CLocIdentifier* OOBGeneralMessage;
    struct GlobalResourceAudio* audiotriggerOutOfBounds;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* dangerLevelRtpc;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* outOfBoundsTimeRemainingRtpc;
    uint8_t _pad_7[0x18];
};




struct ActorExternalForceMovementModifiers {
    uint8_t _pad_0[0x8];
    struct ActorForceMovementModifierConfig* gForce;
    uint8_t _pad_1[0x20];
    struct ActorForceMovementModifierConfig* wind;
    uint8_t _pad_2[0x20];
};




struct SShakeParams {
    uint8_t _pad_0[0x8];
    struct Ang3* offsetAngle;
    uint8_t _pad_1[0x10];
    struct Vec3* offsetPosition;
    uint8_t _pad_2[0x10];
    float randomness;
    float range;
    float duration;
    float frequency;
};




struct SCollectible {
    uint8_t _pad_0[0x8];
    struct SCollectibleCategory* category;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    struct CLocIdentifier* foundInLocationName;
    struct CryStringT* collectibleGeometryPath;
    uint8_t _pad_2[0x8];
    struct CryStringT* collectibleIcon;
    uint8_t _pad_3[0x28];
};




struct UsableChannelInputAction_ControlInteractive {
    uint8_t _pad_0[0x8];
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
    struct SSharedInteractionParams* interactionOnAction;
    uint8_t _pad_2[0x8];
    struct ControlInteractiveVariable* controlVariable;
    uint8_t _pad_3[0x8];
};




struct SVendingMachineItem {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityToSpawn;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* name;
    struct CryStringT* imagePath;
    uint8_t _pad_2[0x8];
    float detachTimeSeconds;
    float despawnTimeSeconds;
    float cooldownSeconds;
    uint8_t _pad_3[0x4];
};




struct ActorViewLimits {
    uint8_t _pad_0[0x8];
    float minYaw;
    float maxYaw;
    float minPitch;
    float maxPitch;
    float minRoll;
    float maxRoll;
    _Bool useEllipse;
    uint8_t _pad_1[0x7];
};




struct ItemMiningBoosterParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    float powerLevelChange;
    _Bool showInUI;
    _Bool isGood;
    uint8_t _pad_2[0x2];
};




struct ItemKioskBrand {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* logoPath;
    uint8_t _pad_2[0x8];
    struct SRGBA8* color;
    uint8_t _pad_3[0x8];
};




struct VoteBaseParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* bodyLocId;
};




struct NavLinkHelperLocation {
    uint8_t _pad_0[0x8];
    struct CryStringT* helperName;
    uint8_t _pad_1[0x8];
    struct QuatT* relativeTransformToHelper;
    uint8_t _pad_2[0x50];
};




struct SCThrustParams {
    uint8_t _pad_0[0x8];
    struct SCMaxLinearVelocityParams* MaxLinearVelocityParams;
    uint8_t _pad_1[0x8];
    struct SCLinearMovementParams* LinearMovementParams;
    uint8_t _pad_2[0x68];
    struct SCAngularMovementParams* AngularMovementParams;
    uint8_t _pad_3[0x68];
    struct SCBoostScaleParam* BoostScaleParam;
    uint8_t _pad_4[0x8];
};




struct InventoryContainerGridCellSizeCentimeters {
    uint8_t _pad_0[0x8];
    int32_t centimeters;
    uint8_t _pad_1[0x4];
};




struct ControlHintCondition_VehicleEjectorSeat {
    uint8_t _pad_0[0x8];
    enum ARDataType ejectorSeat;
    uint8_t _pad_1[0x7];
};




struct RGBA8 {
    uint8_t _pad_0[0x8];
    uint8_t r;
    uint8_t g;
    uint8_t b;
    uint8_t a;
    uint8_t _pad_1[0x4];
};




struct SubHarvestableConfigSingleBase {
    uint8_t _pad_0[0x8];
};




struct SLocalPlayerShoppingNotificationConfiguration {
    uint8_t _pad_0[0x8];
    float screenTime;
    uint8_t _pad_1[0x4];
    struct CryStringT* audioEvent;
    uint8_t _pad_2[0x8];
    struct CryStringT* iconPath;
    uint8_t _pad_3[0x8];
    _Bool showIcon;
    _Bool isLowPriority;
    uint8_t _pad_4[0x6];
};




struct STurretESP {
    uint8_t _pad_0[0x8];
    struct BezierCurve* triggerZoneRampInCurve;
    uint8_t _pad_1[0x88];
    float maxTrackingStrength;
    float distanceFalloffStart;
    float distanceFalloffEnd;
    float outerZoneDeg;
    float innerZoneRatio;
    float adsZoneMinSizeDeg;
    float inputScalerMin;
    float inputScalerMax;
    _Bool allowWithRelativeMouseModes;
    uint8_t _pad_2[0x7];
};




struct SPerkEnabledItemCategory {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    struct ShopFranchise* franchise;
    uint8_t _pad_2[0x10];
    enum ARDataType type_;
    enum ARDataType subType;
    struct Tag* requiredTag;
    uint8_t _pad_3[0x10];
};




struct SSafeTeleportPointParams {
    uint8_t _pad_0[0x18];
    float obstructionSize;
    uint8_t _pad_1[0x4];
    struct Vec3* boxSize;
    uint8_t _pad_2[0x10];
    _Bool supportsPlayers;
    _Bool supportsNPCs;
    uint8_t _pad_3[0x6];
};




struct HospitalEmergencyScreenComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* openDoorsInteraction;
    uint8_t _pad_1[0x8];
    struct CryStringT* closeDoorsInteraction;
    uint8_t _pad_2[0x8];
};




struct S42StateParams {
    uint8_t _pad_0[0x18];
};




struct LegacyCraftingRecipeList_Base {
    uint8_t _pad_0[0x8];
};




struct AIPerceptionProfile {
    uint8_t _pad_0[0x8];
    struct AIPerceptionMeterThresholds* perceptionMeterThresholds;
    uint8_t _pad_1[0x10];
    struct AIPerceptionMeterThresholds* perceptionMeterThresholdsforThreatened;
    uint8_t _pad_2[0x10];
    struct BezierCurve* hostileTargetDistanceCurve;
    uint8_t _pad_3[0x88];
    struct BezierCurve* neutralTargetDistanceCurve;
    uint8_t _pad_4[0x88];
    struct BezierCurve* bulletHitAudioIntensityCurve;
    uint8_t _pad_5[0x88];
    struct BezierCurve* bulletWhizAudioIntensityCurve;
    uint8_t _pad_6[0x88];
    struct BezierCurve* weaponAudioIntensityCurve;
    uint8_t _pad_7[0x88];
    struct BezierCurve* movementAudioIntensityCurve;
    uint8_t _pad_8[0x88];
    struct BezierCurve* explosionAudioIntensityCurve;
    uint8_t _pad_9[0x88];
    struct BezierCurve* collisionAudioIntensityCurve;
    uint8_t _pad_10[0x88];
    struct BezierCurve* grenadeAudioIntensityCurve;
    uint8_t _pad_11[0x88];
    struct BezierCurve* ragdollAudioIntensityCurve;
    uint8_t _pad_12[0x88];
    struct BezierCurve* takedownAudioIntensityCurve;
    uint8_t _pad_13[0x88];
    struct BezierCurve* vehicleAudioIntensityCurve;
    uint8_t _pad_14[0x88];
    struct BezierCurve* lightIntensityCurve;
    uint8_t _pad_15[0x88];
    struct BezierCurve* customAudioIntensityCurve;
    uint8_t _pad_16[0x88];
    float vehicleMeterCap;
    float bulletHitMeterCap;
    float bulletWhizMeterCap;
    float weaponMeterCap;
    float movementMeterCap;
    float explosionMeterCap;
    float collisionMeterCap;
    float grenadeMeterCap;
    float ragdollMeterCap;
    float takedownMeterCap;
    float customMeterCap;
    float audioFillMeterThreshold;
    float angleToTargetScale;
    float lowStanceScale;
    float sixthSenseScale;
    uint8_t _pad_17[0x4];
    struct BezierCurve* disguisedScaleCurve;
    uint8_t _pad_18[0x88];
    float decreaseRatePerSecond;
    int32_t disruptionReactionTriggerThreshold;
};




struct SBaseCargoUnit {
    uint8_t _pad_0[0x8];
};




struct Primitive_Ring {
    uint8_t _pad_0[0x8];
    struct Vec3* Position;
    uint8_t _pad_1[0x10];
    struct Vec3* Rotation;
    uint8_t _pad_2[0x10];
    struct Vec2* UV_Start;
    uint8_t _pad_3[0x8];
    struct Vec2* UV_Size;
    uint8_t _pad_4[0x8];
    uint32_t Segments;
    float InnerRadius;
    float OuterRadius;
    float StartAngle;
    float EndAngle;
    uint8_t _pad_5[0x4];
};




struct SEntityTraversingExecuteNodeBase {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionDraggedActorIsPlayer {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct InteractionConditionPlayerVehicleInAnotherVehicle {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct HandholdGripType {
    uint8_t _pad_0[0x8];
    struct CryStringT* mannequinTag;
    uint8_t _pad_1[0x8];
    enum ARDataType handholdType;
    uint8_t _pad_2[0x4];
};




struct PlayerAnimatedInteractionTemplateRef {
    uint8_t _pad_0[0x8];
    struct PlayerAnimatedInteractionTemplate* playerAnimatedInteractionTemplate;
    uint8_t _pad_1[0x10];
};




struct AIPathComponentParams {
    uint8_t _pad_0[0x18];
};




struct SAudioProxyParams {
    uint8_t _pad_0[0x18];
};




struct LightFlickerWaveRandomParams {
    uint8_t _pad_0[0x8];
    float minDelay;
    float maxDelay;
    int32_t minLightsPerActivation;
    int32_t maxLightsPerActivation;
    float maxDuration;
    uint8_t _pad_1[0x4];
};




struct MissionModifier_RequestRentShip {
    uint8_t _pad_0[0x8];
    struct CryStringT* modifierName;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x1f];
    struct EntityClassDefinition* itemRecordGUID;
    uint8_t _pad_3[0x10];
    int32_t durationSeconds;
    _Bool clearRentalOnFail;
    uint8_t _pad_4[0x3];
};




struct BuildingBlocks_TriggerBase {
    uint8_t _pad_0[0x8];
};




struct SEnergyPipeDefinition {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    enum ARDataType Klass;
    uint8_t _pad_2[0x4];
};




struct UIWorldDisplayPathParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct UIWorldDisplayPathStateParams* validStateSettings;
    uint8_t _pad_2[0x38];
    struct UIWorldDisplayPathStateParams* invalidStateSettings;
    uint8_t _pad_3[0x38];
    struct UIWorldDisplayPathLineParams* pathLineSettings;
    uint8_t _pad_4[0x30];
};




struct SCItemATCCommsComponentParams {
    uint8_t _pad_0[0x18];
    struct SCItemCommsComponentSetup* setup;
    uint8_t _pad_1[0x10];
    struct CommsChannelDef* landingCommsChannel;
    uint8_t _pad_2[0x10];
    struct CommsChannelDef* cargoCommsChannel;
    uint8_t _pad_3[0x10];
};




struct SCItemProximitySensorShapeParams {
    uint8_t _pad_0[0x10];
};




struct SSequencerActorAnimationTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* fragmentName;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragTag;
    uint8_t _pad_2[0x8];
};




struct TQSWeightInput {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct CryStringT* condition;
    uint8_t _pad_2[0x8];
    float weight;
    uint8_t _pad_3[0x4];
};




struct SecurityNetworkProtocol {
    uint8_t _pad_0[0x8];
    struct SecurityNetworkPermissions* permissionsWithClearance;
    uint8_t _pad_1[0x8];
    struct SecurityNetworkPermissions* permissionsWithoutClearance;
    uint8_t _pad_2[0x8];
    struct SecurityClearanceConditions* acceptedClearance;
    uint8_t _pad_3[0x30];
    struct Faction* ownerFaction;
    uint8_t _pad_4[0x10];
};




struct SLegacyThrusterMisfireParams {
    uint8_t _pad_0[0x8];
    float maxThrustRatio;
    float minThrustRatio;
    float misfireThrustToOffTimeRatio;
    uint8_t _pad_1[0x4];
};




struct SCharacterCustomizerWildlineSubconditionFlowStep {
    uint8_t _pad_0[0x8];
    int32_t flowStep;
    uint8_t _pad_1[0x4];
};




struct AnimationGraph_KeyFrame {
    uint8_t _pad_0[0x8];
    enum ARDataType timeModifier;
    enum ARDataType easeType;
    uint8_t _pad_1[0x3];
    uint32_t frame;
    float value;
};




struct EntityComponentRadiationVolumeParams {
    uint8_t _pad_0[0x18];
    struct RadiationStateBase* state;
    uint8_t _pad_1[0x8];
    struct RadiationBehavior* behavior;
    uint8_t _pad_2[0x10];
};




struct SCItemDisplayScreenPreset {
    uint8_t _pad_0[0x8];
    struct CryStringT* material;
    uint8_t _pad_1[0x8];
    struct CryStringT* geometryPath;
    uint8_t _pad_2[0x8];
};




struct WheeledVehicleAudioComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* engineSoundPosition;
    uint8_t _pad_1[0x8];
    struct GlobalResourceAudio* engineStartupOneShot;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* engineRunLoopStart;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* engineRunLoopStop;
    uint8_t _pad_4[0x18];
    struct CryStringT* hornSoundPosition;
    uint8_t _pad_5[0x8];
    struct GlobalResourceAudio* hornLoopStart;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* hornLoopStop;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* suspensionBumpSound;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* gearChangeSound;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* throttleOnSound;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* throttleOffSound;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* damagedSound;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* destroyedSound;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* boostStartTrigger;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* boostStopTrigger;
    uint8_t _pad_15[0x18];
    struct AudioRtpc* speedRtpc;
    uint8_t _pad_16[0x18];
    struct AudioRtpc* throttleRtpc;
    uint8_t _pad_17[0x18];
    struct AudioRtpc* throttleLoadRtpc;
    uint8_t _pad_18[0x18];
    struct AudioRtpc* throttleOnAtLoadRtpc;
    uint8_t _pad_19[0x18];
    struct AudioRtpc* throttleOffAtLoadRtpc;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* rpmRtpc;
    uint8_t _pad_21[0x18];
    struct AudioRtpc* rpmLoadRtpc;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* rpmAccelerationRtpc;
    uint8_t _pad_23[0x18];
    struct AudioRtpc* slipRtpc;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* slipForwardsRtpc;
    uint8_t _pad_25[0x18];
    struct AudioRtpc* slipLateralRtpc;
    uint8_t _pad_26[0x18];
    struct AudioRtpc* steerRtpc;
    uint8_t _pad_27[0x18];
    struct AudioRtpc* steerStrainRtpc;
    uint8_t _pad_28[0x18];
    struct AudioRtpc* groundContactsRtpc;
    uint8_t _pad_29[0x18];
    struct AudioRtpc* airTimeRtpc;
    uint8_t _pad_30[0x18];
    struct AudioRtpc* suspensionCompressionRtpc;
    uint8_t _pad_31[0x18];
    struct AudioRtpc* suspensionStrokeRtpc;
    uint8_t _pad_32[0x18];
    struct AudioRtpc* bumpCompressionRtpc;
    uint8_t _pad_33[0x18];
    struct AudioRtpc* surfaceRoughnessRtpc;
    uint8_t _pad_34[0x18];
    struct AudioRtpc* boostDurationRtpc;
    uint8_t _pad_35[0x18];
    struct AudioRtpc* remainingBoostRtpc;
    uint8_t _pad_36[0x18];
    float bumpMinSusp;
    float bumpMinSpeed;
    float bumpIntensityMult;
    float bumpMinTime;
    float throttleLoadLerpUpTime;
    float throttleLoadLerpDownTime;
    float skidLerpSpeed;
    float skidCentrifugalFactor;
    float skidBrakeFactor;
    float skidPowerLockFactor;
    float skidLateralFactor;
    float skidForwardFactor;
    struct AudioRtpc* wheelRotationSpeedRtpc;
    uint8_t _pad_37[0x18];
    struct AudioRtpc* wheelFrictionRtpc;
    uint8_t _pad_38[0x18];
    struct AudioRtpc* wheelInlineTractionRtpc;
    uint8_t _pad_39[0x18];
    struct AudioRtpc* wheelLateralTractionRtpc;
    uint8_t _pad_40[0x18];
    struct AudioRtpc* wheelCurrentSuspensionSpringLengthRtpc;
    uint8_t _pad_41[0x18];
    struct AudioRtpc* wheelRelaxedSuspensionSpringLengthRtpc;
    uint8_t _pad_42[0x18];
    struct AudioRtpc* wheelInitialSuspensionSpringLengthRtpc;
    uint8_t _pad_43[0x18];
    struct AudioRtpc* wheelRadiusRtpc;
    uint8_t _pad_44[0x18];
    struct AudioRtpc* wheelDrivingTorqueRtpc;
    uint8_t _pad_45[0x18];
    struct AudioRtpc* wheelSteerRtpc;
    uint8_t _pad_46[0x18];
    struct AudioRtpc* wheelSlipVelocityRtpc;
    uint8_t _pad_47[0x18];
    struct AudioRtpc* wheelSlipVelocityLateralRtpc;
    uint8_t _pad_48[0x18];
    struct AudioRtpc* wheelSuspensionRtpc;
    uint8_t _pad_49[0x18];
    struct AudioRtpc* wheelCompressionRtpc;
    uint8_t _pad_50[0x18];
    struct AudioRtpc* wheelGroundContactRtpc;
    uint8_t _pad_51[0x18];
    struct AudioRtpc* wheelMassRtpc;
    uint8_t _pad_52[0x18];
    struct AudioRtpc* wheelCountRtpc;
    uint8_t _pad_53[0x18];
    struct AudioRtpc* wheelIndexRtpc;
    uint8_t _pad_54[0x18];
    float wheelMaxAudibleDistance;
    int32_t wheelAudioStopDelay;
    struct WheelAudioSurfaceMap* wheelAudioSurfaceMap;
    uint8_t _pad_55[0x10];
};




struct SCJukeboxParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceAudio* startTrigger;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* stopTrigger;
    uint8_t _pad_2[0x18];
};




struct SEntityEffectSystem_MinMaxModifier {
    uint8_t _pad_0[0x8];
    float minimum;
    float maximum;
};




struct HeatDegradation {
    uint8_t _pad_0[0x8];
    float NormalTemperatureMultiplier;
    float OverheatTemperatureMultiplier;
};




struct IntUserVariableSetValueTask {
    uint8_t _pad_0[0x20];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    int64_t value;
};




struct AIFireDisciplineSettings {
    uint8_t _pad_0[0x8];
    float fireConeMinAngle;
    float fireConeMaxAngle;
};




struct LandingAreaServicesParams {
    uint8_t _pad_0[0x18];
};




struct SWearAccumulatorParams {
    uint8_t _pad_0[0x8];
    float InitialAccumulationRatio;
    _Bool AccumulateWhenUnstreamed;
    _Bool AccumulateOnlyAfterTractorBeam;
    _Bool AccumulateOnlyWhenAttached;
    _Bool StopAccumulationWhenAttached;
    float AccumulationEventThreshold;
    uint8_t _pad_1[0x4];
    struct CryStringT* PortTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* RequiredPortTags;
    uint8_t _pad_3[0x8];
    float MaxLifetimeHours;
    _Bool UseAsTimer;
    uint8_t _pad_4[0x3];
    float InitialAgeRatio;
    float InitialUsageRatio;
    float BasePowerMultiplier;
    float DrawPowerMultiplier;
    float AtmosphereMultiplier;
    uint8_t _pad_5[0x4];
    struct HeatDegradation* HeatMultipliers;
    uint8_t _pad_6[0x8];
    float DamageConversionRate;
    uint8_t _pad_7[0x4];
    struct BezierCurve* EffectCurve;
    uint8_t _pad_8[0x88];
    uint8_t degradeFromParentParams[0x10];
    struct AudioRtpc* DegradationPercentageRTPC;
    uint8_t _pad_9[0x18];
};




struct TraversalCostShapeConfig {
    uint8_t _pad_0[0x8];
};




struct BlueprintCategoryAvailability_Ref {
    uint8_t _pad_0[0x8];
    struct BlueprintCategoryAvailabilityRecord* availabilityRecord;
    uint8_t _pad_1[0x10];
};




struct TemperatureUIParams {
    uint8_t _pad_0[0x8];
    float minTemperatureDisplay;
    float maxTemperatureDisplay;
};




struct ProcBreathingGraph {
    uint8_t _pad_0[0x8];
    float magnitude;
    float magnitudeADS;
    struct ProcBreathingCurve* curveX;
    uint8_t _pad_1[0x10];
    struct ProcBreathingCurve* curveY;
    uint8_t _pad_2[0x10];
    struct ProcBreathingCurve* curveZ;
    uint8_t _pad_3[0x10];
};




struct SInteractionStateTransition {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* Interaction;
    uint8_t _pad_1[0x8];
    struct SInteractionState* NextState;
    uint8_t _pad_2[0x8];
};




struct SWeaponProceduralHandsRecoilCurveConfigDef {
    uint8_t _pad_0[0x8];
    float totalRecoilTime;
    uint8_t _pad_1[0x4];
    struct Vec3* positionRecoilTimeModifiers;
    uint8_t _pad_2[0x10];
    struct Vec3* rotationRecoilTimeModifiers;
    uint8_t _pad_3[0x10];
    float limitTransitionTime;
    uint8_t _pad_4[0x4];
    struct SXYZCurvesWithMaxValues* positionCurves;
    uint8_t _pad_5[0x70];
    struct SXYZCurvesWithMaxValues* rotationCurves;
    uint8_t _pad_6[0x70];
    float minDecayTime;
    float maxDecayTime;
    struct SDecayTimesAndCurves* positionDecay;
    uint8_t _pad_7[0x78];
    struct SDecayTimesAndCurves* rotationDecay;
    uint8_t _pad_8[0x78];
    struct Vec3* rotationOffset;
    uint8_t _pad_9[0x10];
    struct SHandsRecoilTimeModifier* timeModifier;
    uint8_t _pad_10[0x8];
};




struct WeatherEffects_Atmosphere_VolumetricCloudDensity {
    uint8_t _pad_0[0x8];
    struct WeatherEffects_SpaceLoopEffect* spaceLoopEffect;
    uint8_t _pad_1[0x20];
    struct Range* interpolationRange;
    uint8_t _pad_2[0x8];
};




struct SecurityNetworkVariableEffect_SetInteractionState {
    uint8_t _pad_0[0x8];
    struct SInteractionState* state;
    uint8_t _pad_1[0x8];
};




struct CraftingOptionalEntry {
    uint8_t _pad_0[0x8];
    struct CraftingCost_Base* optionalCost;
    uint8_t _pad_1[0x8];
    struct CraftingOptionalEffect_Base* effect;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_BindingsNumberInterpolate {
    uint8_t _pad_0[0x50];
    float startValue;
    float endValue;
    struct BuildingBlocks_BindingsNumberBase* inputStartValue;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsNumberBase* inputEndValue;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_3[0xf8];
};




struct LinkedStatRulePassBelowThreshold {
    uint8_t _pad_0[0x8];
    float threshold;
    uint8_t _pad_1[0x4];
};




struct SIBettingModule {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_TimingFunctionCustomCurve {
    uint8_t _pad_0[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_1[0x88];
};




struct SCItemPowerPlantParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* turnOnInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* turnOffInteraction;
    uint8_t _pad_2[0x8];
};




struct Investigation_Clue_JournalEntry {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* objectiveLongDescription;
    struct CLocIdentifier* objectiveShortDescription;
    struct JournalEntry* journalEntry;
    uint8_t _pad_1[0x10];
};




struct EAObjectiveMarkerTracker {
    uint8_t _pad_0[0x8];
    struct MarkerAR_ConfigDef* ARMarkerConfig;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* distanceUnits;
    float ARMarkerAlpha;
    _Bool scaleMarkerByDistance;
    uint8_t _pad_2[0x3];
    float minScaleDistance;
    float maxScaleDistance;
    float minSize;
    float maxSize;
    _Bool allowClipping;
    uint8_t _pad_3[0x7];
    float activeHUDAlpha;
    float inactiveHUDAlpha;
    float hudMarkerSize;
    uint8_t _pad_4[0x4];
    struct CLocIdentifier* contestedObjectiveString;
    struct CLocIdentifier* multipleContestedObjectivesString;
    struct CLocIdentifier* objectiveSeparatorString;
};




struct MovieClipTransformationInterpolatorParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* movieClipName;
    uint8_t _pad_1[0x8];
    struct TransformationInterpolatorParams* transformationInterpolatorParams;
    uint8_t _pad_2[0xd0];
};




struct SStatusTriggerThresholdLevelModifier {
    uint8_t _pad_0[0x8];
    float minThresholdModifier;
    float interpMinThresholdModifier;
    float interpMaxThresholdModifier;
    float guranteedThresholdModifier;
    float maxThresholdModifier;
    uint8_t _pad_1[0x4];
};




struct ActorMarkerTrackerParams {
    uint8_t _pad_0[0x18];
    struct GrenadeMarkerProvider* Grenades;
    uint8_t _pad_1[0x8];
    struct LocationPinMarkerProvider* LocationPins;
    uint8_t _pad_2[0x8];
    struct NavigationWaypointMarkerProvider* NavigationWaypoints;
    uint8_t _pad_3[0x8];
    struct ObjectDataBankMarkerProvider* ObjectDataBank;
    uint8_t _pad_4[0x8];
    struct PlayerMarkerProvider* Player;
    uint8_t _pad_5[0x8];
    struct VehicleEntranceMarkerProvider* VehicleEntrances;
    uint8_t _pad_6[0x8];
};




struct SHackingCodeErrorEntry {
    uint8_t _pad_0[0x8];
    _Bool isDisabled;
    uint8_t _pad_1[0x7];
    struct CryStringT* errorCode;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* errorText;
};




struct SecurityClearanceTokenData_OutfitRequirementDef {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
    struct SecurityClearance_OutfitRequirementDef* outfitRequirement;
    uint8_t _pad_2[0x8];
};




struct PingVFXSharedParams {
    uint8_t _pad_0[0x8];
    struct PingWaveVFXParams* quickPingWaveVFXParams;
    uint8_t _pad_1[0x8];
    struct PingWaveVFXParams* chargedPingWaveVFXParams;
    uint8_t _pad_2[0x8];
    struct PingWaveVFXParams* blockedPingWaveVFXParams;
    uint8_t _pad_3[0x8];
};




struct SMiningTargeting {
    uint8_t _pad_0[0x8];
    struct STargetingMethodRecord* targetingMethodRecord;
    uint8_t _pad_1[0x10];
};




struct LoudspeakerComponentParams {
    uint8_t _pad_0[0x18];
    float minRadius;
    float maxRadius;
};




struct EntityComponentChatProviderParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* allChannelText;
    struct ChatProviderSettingsBase* settings;
    uint8_t _pad_1[0x8];
};




struct PlayerAnimatedInteractionWalkingRequestParams {
    uint8_t _pad_0[0x8];
    struct Vec3* offset;
    uint8_t _pad_1[0x10];
    float speed;
    uint8_t _pad_2[0x4];
};




struct SActorLocomotionFidgetSeverityParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* fragmentTags;
    uint8_t _pad_1[0x8];
    float severityWeight;
    uint8_t _pad_2[0x4];
};




struct SWeaponMountGrip {
    uint8_t _pad_0[0x8];
    struct CryStringT* gripName;
    uint8_t _pad_1[0x8];
    enum ARDataType canBeUsedBy;
    enum ARDataType handMode;
    struct SGrip* handGrip;
    uint8_t _pad_2[0xa8];
    struct SGrip* offHandGrip;
    uint8_t _pad_3[0x8];
    struct QuatT* userOffset;
    uint8_t _pad_4[0x50];
    float width;
    uint8_t _pad_5[0x4];
    struct SInteractionPointParams* interactionPoint;
    uint8_t _pad_6[0x8];
};




struct BuildingBlocks_ExternalColorReference {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_1[0x8];
};




struct SInverseInteractionLinkParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* targetInteractionName;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* interactionEntry;
    uint8_t _pad_2[0x120];
};




struct Investigation_Clue {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* objectiveLongDescription;
    struct CLocIdentifier* objectiveShortDescription;
};




struct ConsumableEffectHealth {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* effectDescription;
    float healthChange;
    uint8_t _pad_1[0x4];
};




struct ProcBreathingCurve {
    uint8_t _pad_0[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_1[0x88];
};




struct SSalvageRepairCardParams {
    uint8_t _pad_0[0x8];
    float cardLerpSpeed;
    float attachPointLerpSpeed;
    float closingTransitionTime;
    float nearDistance;
    struct Vec2* defaultScreenPos;
    uint8_t _pad_1[0x8];
    float maxDistScreenPosScale;
    uint8_t _pad_2[0x4];
};




struct CraftingBlueprint_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct BoidsAreaLimiterRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float effectDistance;
    uint8_t _pad_2[0x4];
};




struct SignatureUIGlobalParams {
    uint8_t _pad_0[0x8];
    float warningUnderStateTime;
    float signatureDisplayTime;
    float signatureFadeTime;
    float emissionDisplayIncrease;
    float emissionMemoryTime;
    uint8_t _pad_1[0x4];
};




struct WeaponMisfireFixConfig {
    uint8_t _pad_0[0x8];
    struct InputPromptConfig* misfireInputPromptConfig;
    uint8_t _pad_1[0x10];
    struct QTERequestConfig* misfireFixQTEConfig;
    uint8_t _pad_2[0x10];
    float transitionToIdleTime;
    uint8_t _pad_3[0x4];
};




struct SolarSystemComponentParams {
    uint8_t _pad_0[0x18];
};




struct SEntityComponentVehicleSeaterParams {
    uint8_t _pad_0[0x18];
};




struct RevivalFadeInParams {
    uint8_t _pad_0[0x8];
    float fadeinTime;
    float fadeinBlur;
};




struct SCInteractionGeometryMapEntryParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* Interaction;
    uint8_t _pad_1[0x8];
    struct CryStringT* GeometryTag;
    uint8_t _pad_2[0x8];
};




struct LegacyCraftingCost_ResourceAmount {
    uint8_t _pad_0[0x8];
    struct ResourceType* resource;
    uint8_t _pad_1[0x10];
    struct SBaseCargoUnit* amount;
    uint8_t _pad_2[0x8];
};




struct AIMercyTimerSettings {
    uint8_t _pad_0[0x8];
    float activationThreshold;
    float coolDownTimeSeconds;
    float durationSeconds;
    uint8_t _pad_1[0x4];
};




struct EntityEffectSystem_UIOwnerEvent_Goto {
    uint8_t _pad_0[0x8];
    struct CryStringT* timelineName;
    uint8_t _pad_1[0x8];
};




struct AnimationVariableInterpolation {
    uint8_t _pad_0[0x8];
    float timeRange;
    enum ARDataType type_;
};




struct EntityCaptureParams {
    uint8_t _pad_0[0x8];
    float attackerCaptureTime;
    float defenderCaptureTime;
    float propCaptureTime;
    float spawnLocationCaptureTime;
};




struct PlayerScoresUIProviderParams {
    uint8_t _pad_0[0x18];
};




struct SCommodityUIProviderParams {
    uint8_t _pad_0[0x18];
};




struct SScoreEvent {
    uint8_t _pad_0[0x8];
    int32_t points;
    enum ARDataType type_;
};




struct InterferenceParams_OneShot {
    uint8_t _pad_0[0x8];
    float fallOffDistance;
    uint8_t _pad_1[0x4];
    float energy;
    uint8_t _pad_2[0x4];
};




struct ItemResourceDynamicAmountQuantumTravelFuel {
    uint8_t _pad_0[0x8];
};




struct ResistanceWeightParams {
    uint8_t _pad_0[0x8];
    float headWeighting;
    float bodyWeighting;
    float armsWeighting;
    float handsWeighting;
    float legsWeighting;
    float feetWeighting;
};




struct SEntityComponentLocationDataParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* DisplayMesh;
    uint8_t _pad_1[0x8];
};




struct RemovableChipValue {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float value;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_TimingFunctionSteps {
    uint8_t _pad_0[0x8];
    uint8_t numSteps;
    uint8_t _pad_1[0x3];
    enum ARDataType jumpTerm;
};




struct CraftingGameplayProperty_RecordRef {
    uint8_t _pad_0[0x8];
    struct CraftingGameplayPropertyRecord* gameplayPropertyRecord;
    uint8_t _pad_1[0x10];
};




struct ESPParams {
    uint8_t _pad_0[0x8];
    struct BezierCurve* triggerZoneRampInCurve;
    uint8_t _pad_1[0x88];
    float trackingStrength;
    float distanceFalloffStart;
    float distanceFalloffEnd;
    float outerZoneDeg;
    float innerZoneRatio;
    float adsZoneMinSizeDeg;
    float inputDisengageCurve;
    float directionSimilaritySmoothSpeed;
    float assistRelaxSpeed;
    float alignmentAngleCurve;
    float dampeningMin;
    float dampeningMax;
    _Bool allowPulling;
    _Bool allowWithRelativeMouseModes;
    uint8_t _pad_2[0x6];
};




struct FireHazardFogNoiseParams {
    uint8_t _pad_0[0x8];
    struct Vec3* noiseFrequency;
    uint8_t _pad_1[0x10];
    float noiseScale;
    float noiseSpeed;
    enum ARDataType noiseTexture;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeScrollEasingType {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x7];
};




struct FireVoxelSelectionShape_Box {
    uint8_t _pad_0[0x8];
    struct Vec3* size;
    uint8_t _pad_1[0x10];
};




struct SEntityEffectSystem_Attachment_EntitySlot {
    uint8_t _pad_0[0x8];
    struct QuatT* offset;
    uint8_t _pad_1[0x50];
    struct Tag* offsetParameter;
    uint8_t _pad_2[0x10];
};




struct SWeaponActionFireBeamChainParams {
    uint8_t _pad_0[0x8];
    float jumpDistance;
    int32_t maximumJumps;
    struct DamageBase* damagePerSecond;
    uint8_t _pad_1[0x8];
};




struct SBBDynamicPropertyInt {
    uint8_t _pad_0[0x8];
    int32_t value;
    uint8_t _pad_1[0x4];
};




struct ControlHintCondition_VehicleTurretEquippedComponents {
    uint8_t _pad_0[0x8];
    enum ARDataType equippedComponents;
    uint8_t _pad_1[0x6];
};




struct SAsteroidGasCloudComponentParams {
    uint8_t _pad_0[0x18];
    int32_t rngSeed;
    uint8_t viewDistRatio;
    uint8_t lodRatio;
    uint8_t _pad_1[0x2];
    struct CryStringT* composition;
    uint8_t _pad_2[0x8];
    float noiseAmplitude;
    float noiseGranularity;
    float noiseRoughness;
    uint8_t _pad_3[0xc];
    float densityScale;
    float densityExponent;
    float densityMinimum;
    float densityMaximum;
};




struct UISimpleRenderNodeEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* materialName;
    uint8_t _pad_1[0x8];
    float minimumBounds;
    float sortDistance;
    float fixedScaleMin;
    float fixedScaleMax;
    float cardStageRadius;
    enum ARDataType flattenBehavior;
    uint8_t _pad_2[0x3];
    float interference;
    uint8_t _pad_3[0x4];
};




struct LoadoutProviderEntityComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeBorderTopRightRadiusBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct CameraBaseConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
};




struct SObjectDataBankEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct CameraStaticConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_4[0x50];
    struct CryStringT* focusTargetAttachmentName;
    uint8_t _pad_5[0x8];
    struct Vec3* targetAttachmentPositionOffset;
    uint8_t _pad_6[0x10];
    float targetAttachmentLerpFactor;
    uint8_t _pad_7[0x4];
};




struct FrontendControllerProviderParams {
    uint8_t _pad_0[0x18];
};




struct GlobalJumpDriveExitEffectParams {
    uint8_t _pad_0[0x8];
    float trailStrengthDelay;
    uint8_t _pad_1[0x4];
};




struct LightningStrengthDriver {
    uint8_t _pad_0[0x8];
    enum ARDataType property;
    uint8_t _pad_1[0x4];
    struct Range* propertyRange;
    uint8_t _pad_2[0x8];
    _Bool disableOverMaximum;
    _Bool disableUnderMinimum;
    uint8_t _pad_3[0x6];
    struct Range* strikeDensity;
    uint8_t _pad_4[0x8];
    struct Range* strength;
    uint8_t _pad_5[0x8];
    struct Range* scaleMultiplier;
    uint8_t _pad_6[0x8];
    struct Range* intensity;
    uint8_t _pad_7[0x8];
};




struct ExtinguishType_Spray {
    uint8_t _pad_0[0x8];
    float maximumDistance;
    float coneAngle;
};




struct GrabCameraControlParams {
    uint8_t _pad_0[0x8];
    float responsiveness;
    float rotationSpeed;
    float rotationSlowdown;
    float zoomSpeed;
    float zoomSlowdown;
    float minimumZoomDistance;
    float maximumZoomDistance;
    float maximumZoomSpeed;
    _Bool isGrabbableOutOfBounds;
    uint8_t _pad_1[0x3];
    enum ARDataType grabRotationMode;
    float panResponsiveness;
    float panSpeed;
    float panSlowdown;
    uint8_t _pad_2[0x4];
};




struct MapDisplayParamsInteriorMap {
    uint8_t _pad_0[0x8];
    _Bool showExterior;
    _Bool immediateZoneHostOnly;
    _Bool loadUnstreamedZoneHostAssets;
    uint8_t _pad_1[0x1];
    float displayScaleMultiplier;
    float markerRelativeScale;
    uint8_t _pad_2[0x4];
    struct Vec3* displayPositionOffset;
    uint8_t _pad_3[0x10];
    struct InteriorMapWorldUIConfig* worldUIConfig;
    uint8_t _pad_4[0x70];
    struct BuildingBlocks_Canvas* visibleMarkersCanvas;
    uint8_t _pad_5[0x10];
    struct BuildingBlocks_Canvas* edgeMarkerCanvas;
    uint8_t _pad_6[0x10];
    struct DegYPR* fixedOrientation;
    uint8_t _pad_7[0x8];
    struct MapDisplayControlLimits* controlLimits;
    uint8_t _pad_8[0x8];
    struct MapDisplayRenderLayerParams* floorRenderLayerParams;
    uint8_t _pad_9[0x18];
    struct MapDisplayRenderLayerParams* wallRenderLayerParams;
    uint8_t _pad_10[0x18];
    struct MapDisplayRenderLayerParams* bulkheadRenderLayerParams;
    uint8_t _pad_11[0x18];
    struct MapDisplayRenderLayerParams* unlockedDoorRenderLayerParams;
    uint8_t _pad_12[0x18];
    struct MapDisplayRenderLayerParams* lockedDoorRenderLayerParams;
    uint8_t _pad_13[0x18];
    struct MapDisplayRenderLayerParams* exteriorRenderLayerParams;
    uint8_t _pad_14[0x18];
    struct MapDisplayRenderLayerParams* nonplayableRenderLayerParams;
    uint8_t _pad_15[0x18];
    struct MapDisplayRenderLayerParams* nominalRenderLayerParams;
    uint8_t _pad_16[0x18];
    struct MapDisplayRenderLayerParams* moderateRenderLayerParams;
    uint8_t _pad_17[0x18];
    struct MapDisplayRenderLayerParams* criticalRenderLayerParams;
    uint8_t _pad_18[0x18];
    struct MapDisplayRenderLayerParams* disabledRenderLayerParams;
    uint8_t _pad_19[0x18];
};




struct CameraSimple3PConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
};




struct BezierModifierInterpolator {
    uint8_t _pad_0[0x8];
    float startTime;
    float duration;
    struct BezierCurve* curve;
    uint8_t _pad_1[0x88];
};




struct SMovableObjectContainerParams {
    uint8_t _pad_0[0x8];
};




struct TransitInteractionPanelParams {
    uint8_t _pad_0[0x18];
};




struct SEnemyKnowledgeComponentParams {
    uint8_t _pad_0[0x18];
};




struct SFPSPlayerStats {
    uint8_t _pad_0[0x18];
    float secondsToMergeHits;
    int32_t deathScreenMaxItemsPerColumn;
    int32_t deathScreenMaxSecondsStatValid;
    uint8_t _pad_1[0x4];
    struct SEAFriendlyFireKickParams* friendlyFireKickParams;
    uint8_t _pad_2[0x58];
};




struct VolumeShape_Ellipsoid {
    uint8_t _pad_0[0x8];
    struct Vec3* radii;
    uint8_t _pad_1[0x10];
};




struct EntityComponentFireIgniter {
    uint8_t _pad_0[0x18];
    _Bool igniteOnLoad;
    uint8_t _pad_1[0x3];
    float strength;
    struct FireVoxelSelectionShape* shape;
    uint8_t _pad_2[0x8];
};




struct DefaultActionsEntityState_EntityIsAttachedToLootableActor {
    uint8_t _pad_0[0x8];
};




struct OpenInventoryOccupantItemTypeProperties {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct CargoGridOccupantProperties* defaultProperties;
    uint8_t _pad_2[0x60];
};




struct MineableInstabilityParams {
    uint8_t _pad_0[0x8];
    float instabilityWavePeriod;
    float instabilityWaveVariance;
    float instabilityCurveFactor;
    uint8_t _pad_1[0x4];
};




struct SUIEntityGeometryResourceParams {
    uint8_t _pad_0[0x18];
    struct SGeometryModelTagBase* ModelTag;
    uint8_t _pad_1[0x8];
    _Bool cacheResources;
    uint8_t _pad_2[0x7];
    struct SGeometryNodeParams* Geometry;
    uint8_t _pad_3[0x158];
    struct SMaterialNodeParams* Material;
    uint8_t _pad_4[0x88];
    _Bool rootOverridePaint;
    _Bool inheritModelTagFromHost;
    uint8_t _pad_5[0x6];
};




struct CommodityType {
    uint8_t _pad_0[0x8];
    struct CryStringT* typeName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    struct CryStringT* defaultThumbnailPath;
    uint8_t _pad_2[0x8];
};




struct SEntityComponentPushPullModificationObjectParams {
    uint8_t _pad_0[0x18];
    float size;
    float strength;
    _Bool pull;
    uint8_t _pad_1[0x3];
    float steepness;
    _Bool elliptical;
    uint8_t _pad_2[0x3];
    float rimRadius;
    int32_t sortOrder;
    uint8_t _pad_3[0x4];
};




struct SWeaponSimplifiedHeatParams {
    uint8_t _pad_0[0x8];
    float minTemperature;
    float overheatTemperature;
    float coolingPerSecond;
    float temperatureAfterOverheatFix;
    float timeTillCoolingStarts;
    float overheatFixTime;
    struct SWeaponSimplifiedHeatParamsTemperatureCurveParams* temperatureCurveParams;
    uint8_t _pad_1[0x8];
    struct SWeaponSimplifiedHeatGlowParams* glowParams;
    uint8_t _pad_2[0x38];
    _Bool whitelistFPSOverheat;
    uint8_t _pad_3[0x7];
};




struct ScreenEffects_ParamValue_Color {
    uint8_t _pad_0[0x8];
    struct RGBA* value;
    uint8_t _pad_1[0x10];
};




struct NavigationWaypointMarkerProvider {
    uint8_t _pad_0[0x8];
    struct Marker_Configuration* markerConfig;
    uint8_t _pad_1[0x10];
};




struct TraversalCostConditionTags {
    uint8_t _pad_0[0x8];
    struct TagsDNF* tags;
    uint8_t _pad_1[0x60];
    float costMultiplier;
    _Bool blocksTraversability;
    uint8_t _pad_2[0x3];
};




struct ChatSystemOptions {
    uint8_t _pad_0[0x18];
    struct ChatChannelFilterRecord* chatChannelFilterRecord;
    uint8_t _pad_1[0x10];
    struct VoiceChannelSettingsRecord* voiceChannelSettingsRecord;
    uint8_t _pad_2[0x10];
};




struct IfcsInputDeflectionTimeParams {
    uint8_t _pad_0[0x8];
    struct SInputDeflectionTimeParams* linearMovement;
    uint8_t _pad_1[0x98];
    struct SInputDeflectionTimeParams* angularMovement;
    uint8_t _pad_2[0x98];
};




struct SurfaceMFXEntityParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* customEffect;
    uint8_t _pad_1[0x8];
};




struct LinkedStatusEffectTrigger {
    uint8_t _pad_0[0x8];
    enum ARDataType statType;
    float triggerMinThreshold;
    float triggerMaxThreshold;
    uint8_t _pad_1[0x4];
};




struct Marker_AbilityJumpPoint {
    uint8_t _pad_0[0x8];
    float iconSwitchDistance;
    float textDisableDistance;
};




struct ItemResourceControlRNParameterExternalPort {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    struct CryStringT* portName;
    uint8_t _pad_3[0x8];
};




struct SIStateModule {
    uint8_t _pad_0[0x18];
};




struct ClassificationScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SEAGameFeedEventParams {
    uint8_t _pad_0[0x8];
    _Bool isImageEvent;
    uint8_t _pad_1[0x7];
    struct CryStringT* image;
    uint8_t _pad_2[0x8];
    _Bool isExtraEvent;
    uint8_t _pad_3[0x7];
    struct CryStringT* extraImage;
    uint8_t _pad_4[0x8];
    struct CryStringT* backgroundImage;
    uint8_t _pad_5[0x8];
};




struct SActorForceReactionTwitchRangeDef {
    uint8_t _pad_0[0x8];
    float effectRangeMin;
    float effectRangeMax;
    struct SActorForceReactionAimPunchConfig* aimPunch;
    uint8_t _pad_1[0x58];
    struct SActorForceReactionWeaponTwitchConfig* weaponTwitch;
    uint8_t _pad_2[0x38];
    struct SActorForceReactionHeadRecoilConfig* headRecoil;
    uint8_t _pad_3[0xa8];
    struct SActorForceReactionFOVScaleConfig* FOVScale;
    uint8_t _pad_4[0x28];
    struct SActorForceReactionAnimationTwitchConfig* animationTwitch;
    uint8_t _pad_5[0x8];
    struct SActorForceReactionBlockADSConfig* blockADS;
    uint8_t _pad_6[0x10];
};




struct SActorProceduralHandsRecoilCurveModifiersDef {
    uint8_t _pad_0[0x8];
    float recoilTimeModifier;
    uint8_t _pad_1[0x4];
    struct SXYZCurvesWithMaxValuesModifer* positionModifiers;
    uint8_t _pad_2[0x58];
    struct SXYZCurvesWithMaxValuesModifer* rotationModifiers;
    uint8_t _pad_3[0x58];
    float minDecayTimeModifier;
    float maxDecayTimeModifier;
    struct SActorProceduralHandsRecoilCurveDecayModifiersDef* positionDecayModifiers;
    uint8_t _pad_4[0x48];
    struct SActorProceduralHandsRecoilCurveDecayModifiersDef* rotationDecayModifiers;
    uint8_t _pad_5[0x48];
};




struct SDummyLauncher {
    uint8_t _pad_0[0x8];
};




struct SWeaponModifierParams {
    uint8_t _pad_0[0x8];
    struct SWeaponStats* weaponStats;
    uint8_t _pad_1[0x3c0];
};




struct VoteNextLevelParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* bodyLocId;
};




struct SCMaxLinearVelocityParams {
    uint8_t _pad_0[0x8];
    float MaxLinearVelocity;
    float MaxLinearVelocityWithBoost;
};




struct SEASpawning {
    uint8_t _pad_0[0x18];
    float spawnScreenForceSpawnTime;
    float respawnInvulnerableTime;
    _Bool swapSpawnsOnNewRound;
    _Bool hideRespawnPrompt;
    _Bool playerCanSuicide;
    _Bool ejectingIsDeath;
    _Bool autoEnterRemoteTurret;
    enum ARDataType spawnScreenMode;
    _Bool forceSpawnOnGameStart;
    _Bool forceRespawnOnGameStart;
    struct SEASpawningLocalization* localization;
    uint8_t _pad_1[0x28];
    struct SEASpawnRespawnSchedulerParams* respawnScheduler;
    uint8_t _pad_2[0x8];
    struct SEASpawnLivesGovernor* livesGovernor;
    uint8_t _pad_3[0x8];
    struct SEAPlayerSpawnProperties* playerSpawnProperties;
    uint8_t _pad_4[0xa8];
    struct SEAVehicleSpawnProperties* vehicleSpawnProperties;
    uint8_t _pad_5[0x30];
};




struct SWeaponActionFireTractorBeamInputParams {
    uint8_t _pad_0[0x8];
    float distanceChangePerAction;
    float distanceAccelerationTimePeriod;
    float distanceAccelerationFactor;
    uint8_t _pad_1[0x4];
};




struct SSpawnOnDestroy {
    uint8_t _pad_0[0x8];
    float timeAfterDestroy;
    _Bool spawnOnDone;
    uint8_t _pad_1[0x3];
};




struct BindingsOperations_LocalizationCombine {
    uint8_t _pad_0[0x50];
    _Bool withSpace;
    uint8_t _pad_1[0x7];
    struct CLocIdentifier* value;
    struct BuildingBlocks_BindingsLocalizedBase* inputL;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsLocalizedBase* inputR;
    uint8_t _pad_3[0xa8];
};




struct BuildingBlocks_GeomEntityAnimationParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float time;
    _Bool wrapTime;
    _Bool normalizeTime;
    uint8_t _pad_2[0x2];
};




struct DiminishingReturnsStatusEffectApplicationType {
    uint8_t _pad_0[0x8];
    enum ARDataType valueType;
    uint8_t _pad_1[0x4];
    float scalar;
    uint8_t _pad_2[0x4];
};




struct SActorForceReactionLeanFilterDef {
    uint8_t _pad_0[0x8];
    struct ActorMotionStateFilter* filter;
    uint8_t _pad_1[0x48];
    struct SActorForceReactionLeanAngleLimitsDef* leanAngleLimits;
    uint8_t _pad_2[0x10];
    float hipVOffset;
    uint8_t _pad_3[0x4];
};




struct ControlHintAlwaysDisplay_WhenConditionsPass {
    uint8_t _pad_0[0x8];
};




struct LoadoutItemPreviewTransformParams {
    uint8_t _pad_0[0x8];
    struct Vec3* lightPosition;
    uint8_t _pad_1[0x10];
    struct Ang3* initialRotation;
    uint8_t _pad_2[0x10];
    struct Vec3* rotationChange;
    uint8_t _pad_3[0x10];
    struct Vec3* offsetPosition;
    uint8_t _pad_4[0x10];
    float offsetScale;
    uint8_t _pad_5[0x4];
};




struct ShootingParams {
    uint8_t _pad_0[0x8];
    float shortCombatDistanceShootingThreshold;
    float dogfightCloseCombatDistanceThreshold;
    float undisciplinedTriggerFingerMultiplier;
    float triggerDisciplinedMultiplier;
};




struct QuantumDriveSplineRollbackParams {
    uint8_t _pad_0[0x8];
    float targetAlignmentToBeginRollBack;
    float fullRotationDistance;
};




struct GasCloudLightParams {
    uint8_t _pad_0[0x18];
    _Bool active;
    uint8_t _pad_1[0x7];
    struct RGB* color;
    uint8_t _pad_2[0x10];
    float intensity;
    float innerRadius;
    float outerRadius;
    _Bool affectsFog;
    _Bool affectsObjects;
    _Bool affectsGI;
    _Bool specular;
    struct GasCloudLightShadowParams* shadow;
    uint8_t _pad_3[0x10];
    struct GasCloudLightFadeParams* fade;
    uint8_t _pad_4[0x10];
    struct GasCloudLightNoiseParams* noise;
    uint8_t _pad_5[0x10];
    struct GasCloudLightAudioParams* audio;
    uint8_t _pad_6[0x40];
};




struct ProjectileTestParams {
    uint8_t _pad_0[0x18];
    _Bool enabled;
    _Bool showBB;
    uint8_t _pad_1[0x6];
    struct AmmoParams* ammoType;
    uint8_t _pad_2[0x10];
};




struct ConsumableEffectGas {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* effectDescription;
    struct SGasMass* gasMass;
    uint8_t _pad_1[0x20];
};




struct SSpawnRules {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeMaxHeightBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct ItemDashboardScreenPhysicalParams {
    uint8_t _pad_0[0x18];
    _Bool isHolographic;
    uint8_t _pad_1[0x7];
};




struct InteractionConditionAND {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct InteractionConditionParams* firstCondition;
    uint8_t _pad_2[0x8];
    struct InteractionConditionParams* secondCondition;
    uint8_t _pad_3[0x8];
};




struct SubsumptionMissionLinkComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCItemQuantumJammerParams {
    uint8_t _pad_0[0x8];
    float jammerRange;
    float maxPowerDraw;
    float greenZoneCheckRange;
    uint8_t _pad_1[0x4];
    struct SSharedInteractionParams* setJammerSwitchOn;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* setJammerSwitchOff;
    uint8_t _pad_3[0x8];
};




struct SEntityEffectSystem_MultiplierModifier {
    uint8_t _pad_0[0x8];
    float multiplier;
    uint8_t _pad_1[0x4];
};




struct SAtmosphericCompositionInherit {
    uint8_t _pad_0[0x8];
};




struct SQuantumResourceNetworkParams {
    uint8_t _pad_0[0x8];
    struct ItemResourceState* idleState;
    uint8_t _pad_1[0x8];
    struct ItemResourceState* spoolingState;
    uint8_t _pad_2[0x8];
    struct ItemResourceState* travellingState;
    uint8_t _pad_3[0x8];
};




struct SCItemJumpDriveParams {
    uint8_t _pad_0[0x18];
    float alignmentRate;
    float alignmentDecayRate;
    float tuningRate;
    float tuningDecayRate;
    float fuelUsageEfficiencyMultiplier;
    uint8_t _pad_1[0x4];
    struct ItemResourceState* idleState;
    uint8_t _pad_2[0x8];
    struct ItemResourceState* transitingState;
    uint8_t _pad_3[0x8];
    struct JumpDriveEffectParams* jumpDriveEffectParams;
    uint8_t _pad_4[0xa0];
    struct JumpDriveFlightParams* flightTuning;
    uint8_t _pad_5[0x10];
    struct JumpTunnelForcesParams* tunnelForces;
    uint8_t _pad_6[0x10];
};




struct ControlHintCondition_ActorState {
    uint8_t _pad_0[0x8];
    enum ARDataType state;
    uint8_t _pad_1[0x4];
};




struct SItemMisfireParams {
    uint8_t _pad_0[0x8];
};




struct BindingsOperations_WaveformShapeBase {
    uint8_t _pad_0[0x8];
};




struct UIAudioManufacturer {
    uint8_t _pad_0[0x8];
    struct Tag* AudioManufacturerTag;
    uint8_t _pad_1[0x10];
    struct UIAudioDefinition* AudioDef;
    uint8_t _pad_2[0x10];
};




struct LadderConfig {
    uint8_t _pad_0[0x8];
    struct LadderAnimationParams* animationParams;
    uint8_t _pad_1[0x68];
    struct LadderMovementParams* movementParams;
    uint8_t _pad_2[0x30];
    float horizontalViewLimit;
    float verticalUpViewLimit;
    struct ActorViewLimits* leaningViewLimits;
    uint8_t _pad_3[0x20];
    struct LadderJumpParams* jumpParams;
    uint8_t _pad_4[0x18];
    struct LadderLookAroundParams* lookAroundParams;
    uint8_t _pad_5[0x8];
};




struct ContractPrerequisite_Location {
    uint8_t _pad_0[0x8];
    struct StarMapObject* locationAvailable;
    uint8_t _pad_1[0x10];
};




struct SEntityEffectSystem_PatternModifier {
    uint8_t _pad_0[0x8];
    float startDelay;
    float maximumValue;
    float duration;
    uint8_t _pad_1[0x4];
    struct BezierCurve* patternCurve;
    uint8_t _pad_2[0x88];
};




struct SCamerasBaseModule {
    uint8_t _pad_0[0x18];
    struct Camera* gameEndCameraRecord;
    uint8_t _pad_1[0x10];
    struct Camera* onFootDeathCameraRecord;
    uint8_t _pad_2[0x10];
    struct Camera* vehicleDeathCameraRecord;
    uint8_t _pad_3[0x10];
    float deathCameraDuration;
    _Bool useFadeOut;
    uint8_t _pad_4[0x3];
    float fadeOutTriggerTime;
    _Bool allowConstantDOF;
    uint8_t _pad_5[0x3];
};




struct TriggeredMessage {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
};




struct MissionBeaconProviderEntityComponentParams {
    uint8_t _pad_0[0x18];
};




struct AbstractMissionInitParam {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct LightningRegionLightningParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* lightningEffect;
    uint8_t _pad_1[0x10];
    uint32_t targetingSeed;
    int32_t appearanceSeed;
    float strength;
    _Bool strikeArea;
    uint8_t _pad_2[0x3];
    struct EntityLinkTargetingParams* strikeLinks;
    uint8_t _pad_3[0x8];
    _Bool strikeSurfaces;
    uint8_t _pad_4[0x3];
    float conductiveSurfaceSpawnProbability;
    float internalStrikeProbability;
    float minimumInterval;
    float maximumInterval;
    float spawnRadius;
    float targetRadius;
    float minimumLength;
    float maximumLength;
    float minimumCameraDistance;
    _Bool isCascadeTrigger;
    uint8_t _pad_5[0x3];
    float cascadeRadius;
    float cascadeBuildUpScale;
    float cascadeMinimumInterval;
    float cascadeTriggerMinimumInterval;
    uint8_t _pad_6[0x4];
    struct Vec3* localScale;
    uint8_t _pad_7[0x10];
    float scaleMultiplier;
    uint8_t _pad_8[0x4];
    struct GlobalResourceAudio* audioEmitterTrigger;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* audioTargetTrigger;
    uint8_t _pad_10[0x18];
};




struct InventoryContainerGridCellSizeMeters {
    uint8_t _pad_0[0x8];
    int32_t meters;
    uint8_t _pad_1[0x4];
};




struct ActorMovementSetTransition {
    uint8_t _pad_0[0x8];
    enum ARDataType movementSet;
    uint8_t _pad_1[0x3];
    enum ARDataType condition;
    float startDelay;
    float endDelay;
};




struct TintEntry {
    uint8_t _pad_0[0x8];
    struct SRGB8* tintColor;
    uint8_t _pad_1[0x8];
    struct SRGB8* specColor;
    uint8_t _pad_2[0x8];
    uint8_t glossiness;
    uint8_t _pad_3[0x7];
};




struct SActorForceReactionCurve {
    uint8_t _pad_0[0x8];
    struct CryStringT* curveName;
    uint8_t _pad_1[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_2[0x88];
};




struct QuantumDriveGlobalParams {
    uint8_t _pad_0[0x8];
    struct QuantumDriveSplineTraversalParams* splineTraversalParams;
    uint8_t _pad_1[0xd0];
    struct QuantumDriveNotifications* notifications;
    uint8_t _pad_2[0x98];
    struct QuantumDriveAudioParams* audioParams;
    uint8_t _pad_3[0x5d8];
    struct QuantumMusicParams* musicParams;
    uint8_t _pad_4[0x338];
    float maxRaycastDist;
    float maxLinkingRange;
    float maxIconScaleRange;
    float minimumAltitudeForQuantum;
    float maximumAtmosphericPressureForQuantum;
    uint8_t _pad_5[0x4];
    struct EntityClassDefinition* interdictionNavPointClass;
    uint8_t _pad_6[0x10];
    float scatterScale;
    float inputDelay;
};




struct AudioSignalRtpc {
    uint8_t _pad_0[0x8];
    struct CryStringT* rtpc;
    uint8_t _pad_1[0x10];
    float defaultValue;
    uint8_t _pad_2[0x4];
    _Bool global;
    uint8_t _pad_3[0x7];
};




struct VehicleEditorPortsWithItemData {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* item;
    uint8_t _pad_1[0x10];
    struct VehicleEditorPortsData* itemPorts;
    uint8_t _pad_2[0x60];
};




struct ProbabilisticStatusEffect {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    float value;
    float duration;
    uint8_t _pad_1[0x4];
    float probability;
    uint8_t _pad_2[0x4];
};




struct AnimationJointLinearTranslation {
    uint8_t _pad_0[0x8];
    struct AnimationVariable* variable;
    uint8_t _pad_1[0x8];
    float fromStartValus;
    float fromEndValus;
    float toStartOffset;
    float toEndOffset;
};




struct JumpDriveAudioMovementParams {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* shipLinearAccelerationRL;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* shipLinearAccelerationFB;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* shipLinearAccelerationUD;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* shipAngularAccelerationPitch;
    uint8_t _pad_4[0x18];
    struct AudioRtpc* shipAngularAccelerationRoll;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* shipAngularAccelerationYaw;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* shipAngularTurbulencePitch;
    uint8_t _pad_7[0x18];
    struct AudioRtpc* shipAngularTurbulenceRoll;
    uint8_t _pad_8[0x18];
    struct AudioRtpc* shipAngularTurbulenceYaw;
    uint8_t _pad_9[0x18];
    struct AudioRtpc* shipLinearVelocityRL;
    uint8_t _pad_10[0x18];
    struct AudioRtpc* shipLinearVelocityFB;
    uint8_t _pad_11[0x18];
    struct AudioRtpc* shipLinearVelocityUD;
    uint8_t _pad_12[0x18];
    struct AudioRtpc* tunnelLinearAccelerationRL;
    uint8_t _pad_13[0x18];
    struct AudioRtpc* tunnelLinearAccelerationFB;
    uint8_t _pad_14[0x18];
    struct AudioRtpc* tunnelLinearAccelerationUD;
    uint8_t _pad_15[0x18];
    struct AudioRtpc* tunnelAngularAccelerationPitch;
    uint8_t _pad_16[0x18];
    struct AudioRtpc* tunnelAngularAccelerationRoll;
    uint8_t _pad_17[0x18];
    struct AudioRtpc* tunnelAngularAccelerationYaw;
    uint8_t _pad_18[0x18];
    struct AudioRtpc* playerInputPitch;
    uint8_t _pad_19[0x18];
    struct AudioRtpc* playerInputYaw;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* playerInputRoll;
    uint8_t _pad_21[0x18];
    struct AudioRtpc* playerInputStrafeRL;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* playerInputStrafeFB;
    uint8_t _pad_23[0x18];
    struct AudioRtpc* playerInputStrafeUD;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* afterburnerRequestedRtpc;
    uint8_t _pad_25[0x18];
};




struct SHackingVisualParamsPreset {
    uint8_t _pad_0[0x8];
    float wallEffectInnerRadius;
    float wallEffectOuterRadius;
    float nodeTransitionOutDuration;
    float introDuration;
    float outroDuration;
    float boardSpawnDelay;
    float boardSpawnWaveDelay;
    uint8_t _pad_1[0x4];
    struct SHackingEntitySpawnParams* nodeSpawnParams;
    uint8_t _pad_2[0x18];
    struct SHackingEntitySpawnParams* agentSpawnParams;
    uint8_t _pad_3[0x18];
    struct SHackingEntitySpawnParams* linkPointSpawnParams;
    uint8_t _pad_4[0x18];
    struct SHackingEntitySpawnParams* pickupSpawnParams;
    uint8_t _pad_5[0x18];
    float agentSpawnInterval;
    float linkPointSpawnInterval;
    float pingWaveMaxAmplitude;
    float pingWaveMinInnerAmplitude;
    float pingWaveOuterAmplitude;
    float pingWaveOscillationSpeed;
    int32_t passwordSegmentLength;
    int32_t commandLogSize;
    struct SHackingCameraParams* cameraParams;
    uint8_t _pad_6[0x58];
    struct SHackingCodeWindowParams* codeWindowParams;
    uint8_t _pad_7[0x40];
};




struct LightningTargetParams {
    uint8_t _pad_0[0x18];
    _Bool overrideSurfaceTypeConductivity;
    uint8_t _pad_1[0x3];
    float conductivityOverride;
    float conductivityMultiplier;
    float resistance;
    float targetRadiusOverride;
    uint8_t _pad_2[0x4];
};




struct SCItemTurretStandardAngleLimitTagOverwriteParams {
    uint8_t _pad_0[0x8];
    struct Tag* limiterTag;
    uint8_t _pad_1[0x10];
    float LowestAngle;
    float HighestAngle;
};




struct JumpPointEffectParams {
    uint8_t _pad_0[0x8];
    struct JumpTunnelEffectTintingParams* tunnelEffectTinting;
    uint8_t _pad_1[0x58];
    struct JumpTunnelCubeMapParams* cubeMapParams;
    uint8_t _pad_2[0x60];
};




struct SHandsRecoilCurveNoiseParams {
    uint8_t _pad_0[0x8];
    float xNoise;
    _Bool canInvertXCurve;
    uint8_t _pad_1[0x3];
    float yNoise;
    _Bool canInvertYCurve;
    uint8_t _pad_2[0x3];
    float zNoise;
    _Bool canInvertZCurve;
    uint8_t _pad_3[0x3];
};




struct SObjectContainerComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* objectContainer;
    uint8_t _pad_1[0x8];
};




struct ActorLookLimitsStateFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    struct ActorViewLimits* lookLimits;
    uint8_t _pad_2[0x20];
};




struct ClothingType {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_BindingsLocalizationFromTemperature {
    uint8_t _pad_0[0x50];
    uint8_t numDecimalPlaces;
    _Bool inputAsKelvin;
    uint8_t _pad_1[0x6];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x8];
};




struct MarkerAR_ConfigDef {
    uint8_t _pad_0[0x8];
    float maxVisibleDistance;
    float minFocusAngle;
    float clipRadius;
    float clipAspect;
    struct Vec2* clipScreenMin;
    uint8_t _pad_1[0x8];
    struct Vec2* clipScreenMax;
    uint8_t _pad_2[0x8];
};




struct Date {
    uint8_t _pad_0[0x8];
    int32_t day;
    enum ARDataType month;
    int32_t year;
    uint8_t _pad_1[0x4];
};




struct STransponderEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_PrimitiveVisualState {
    uint8_t _pad_0[0x8];
    float interference;
    uint8_t _pad_1[0x4];
};




struct RestrictedAreaRedoutParams {
    uint8_t _pad_0[0x8];
    _Bool redoutInShip;
    _Bool redoutInGroundVehicle;
    uint8_t _pad_1[0x2];
    float timeToMaxRedout;
    float maxRedout;
    uint8_t _pad_2[0x4];
};




struct AIVisualFieldParams {
    uint8_t _pad_0[0x8];
    float sightRange;
    float sixthSenseRange;
    float clampDistanceForHorizontalFOV;
    float clampDistanceForVerticalFOV;
    float FOVHorizontal;
    float FOVVertical;
    float PrimaryFOVHorizontal;
    float PrimaryFOVVertical;
    uint8_t _pad_1[0x20];
};




struct BuildingBlocks_ShapeBase {
    uint8_t _pad_0[0x8];
    struct Vec2* center;
    uint8_t _pad_1[0x8];
    _Bool showBoundsDebug;
    uint8_t _pad_2[0x7];
};




struct SChatChannelTypeBase {
    uint8_t _pad_0[0x8];
};




struct UsableChannelInputAction_ConsumeWithUsable {
    uint8_t _pad_0[0x8];
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
    struct SSharedInteractionParams* interactionOnAction;
    uint8_t _pad_2[0x8];
    struct CryStringT* consumableItemPortTag;
    uint8_t _pad_3[0x8];
    struct CryStringT* cutleryItemPortTag;
    uint8_t _pad_4[0x8];
    _Bool searchOnSocketUsable;
    uint8_t _pad_5[0x7];
    struct CryStringT* usableItemPortTag;
    uint8_t _pad_6[0x8];
    enum ARDataType usableItemType;
    enum ARDataType usableItemSubType;
    struct TagsDNFTerm* usableItemTags;
    uint8_t _pad_7[0x60];
};




struct HackingControllerParams {
    uint8_t _pad_0[0x18];
    _Bool disabledOnStart;
    _Bool failHackOnAbort;
    uint8_t _pad_1[0x6];
    struct SHackingGeneralSettingsPreset* generalSettingsPreset;
    uint8_t _pad_2[0x10];
    struct SHackingDifficultyPreset* difficultyPreset;
    uint8_t _pad_3[0x10];
    struct SHackingDifficultyPresetOverride* difficultyPresetOverride;
    uint8_t _pad_4[0xa0];
    struct SSharedInteractionParams* startHackingInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* debugBypassHackSucceedInteraction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* debugBypassHackFailInteraction;
    uint8_t _pad_7[0x8];
    struct SSharedInteractionParams* debugResetHackInteraction;
    uint8_t _pad_8[0x8];
    struct SSharedInteractionParams* onHackSucceededInteraction;
    uint8_t _pad_9[0x8];
    struct SSharedInteractionParams* onHackFailedInteraction;
    uint8_t _pad_10[0x8];
    struct SSharedInteractionParams* onHackResetInteraction;
    uint8_t _pad_11[0x8];
};




struct FloatModifier {
    uint8_t _pad_0[0x8];
    _Bool showInUI;
    uint8_t _pad_1[0x7];
};




struct SCItemDoorFiveWayProceduralParams {
    uint8_t _pad_0[0x8];
    float DefaultAnimationDurationScale;
    float SecondaryAnimationDurationScale;
    struct SCItemDoorUserAnimationParams* userAnimationParams;
    uint8_t _pad_1[0x8];
    struct CryStringT* OpenIntroTag;
    uint8_t _pad_2[0x8];
    struct CryStringT* OpenOutroTag;
    uint8_t _pad_3[0x8];
    struct CryStringT* TransitionTag;
    uint8_t _pad_4[0x8];
    struct CryStringT* CloseIntroTag;
    uint8_t _pad_5[0x8];
    struct CryStringT* CloseOutroTag;
    uint8_t _pad_6[0x8];
};




struct AudioAllegianceParams {
    uint8_t _pad_0[0x18];
};




struct SCItemFuelIntakeParams {
    uint8_t _pad_0[0x18];
    float fuelPushRate;
    float minimumRate;
};




struct MiningFilterParams {
    uint8_t _pad_0[0x8];
    struct FloatModifier* filterModifier;
    uint8_t _pad_1[0x8];
};




struct JumpPointVibrationParams {
    uint8_t _pad_0[0x8];
    float openStrength;
    float closeStrength;
};




struct FactionPalette {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool tintingActive;
    uint8_t _pad_2[0x7];
    struct GlobalResourceMaterial* ExteriorMaterialOverride;
    uint8_t _pad_3[0x10];
    struct GlobalResourceMaterial* InteriorMaterialOverride;
    uint8_t _pad_4[0x10];
    struct GlobalResourceMaterial* BrandingMaterialOverride;
    uint8_t _pad_5[0x10];
    struct SRGB8* ExteriorPrimaryColor;
    uint8_t _pad_6[0x8];
    struct SRGB8* ExteriorSecondaryColor;
    uint8_t _pad_7[0x8];
    struct SRGB8* ExteriorTertiaryColor;
    uint8_t _pad_8[0x8];
    struct SRGB8* ExteriorGraphicsColor;
    uint8_t _pad_9[0x8];
    struct SRGB8* InteriorPrimaryColor;
    uint8_t _pad_10[0x8];
    struct SRGB8* InteriorSecondaryColor;
    uint8_t _pad_11[0x8];
    struct SRGB8* InteriorTertiaryColor;
    uint8_t _pad_12[0x8];
    struct SRGB8* InteriorGraphicsColor;
    uint8_t _pad_13[0x8];
};




struct SInteractionPointPrimitiveParams {
    uint8_t _pad_0[0x8];
};




struct STintParamsDef {
    uint8_t _pad_0[0x8];
    struct RGB* Colour;
    uint8_t _pad_1[0x10];
    float Strength;
    uint8_t _pad_2[0x4];
};




struct RadarSignatureCategoryEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    uint8_t _pad_2[0x8];
};




struct SEntityEffectSystem_SmoothnessModifier {
    uint8_t _pad_0[0x8];
    float smoothnessSpeed;
    uint8_t _pad_1[0x4];
};




struct ActorLocomotionPersonality {
    uint8_t _pad_0[0x8];
    struct CryStringT* locomotionStyleMannequinTag;
    uint8_t _pad_1[0x8];
    struct SMannequinActionDefRecord* basePlayerMovementMannequinAction;
    uint8_t _pad_2[0x10];
    struct ActorLocomotionRotateParams* rotation;
    uint8_t _pad_3[0x28];
    struct ActorLocomotionTurnOnSpotParams* turnOnSpotNormal;
    uint8_t _pad_4[0x10];
    struct ActorLocomotionTurnOnSpotParams* turnOnSpotCombat;
    uint8_t _pad_5[0x10];
    struct ActorLocomotionSharpTurnParams* sharpTurns;
    uint8_t _pad_6[0x10];
    struct ActorLocomotionAvoidanceParams* avoidance;
    uint8_t _pad_7[0x28];
    struct SActorLocomotionFidgetDef* fidget;
    uint8_t _pad_8[0x10];
    struct SActorLocomotionFeatureDef_Slope* slope;
    uint8_t _pad_9[0x8];
};




struct HolographicVolumeCubeParams {
    uint8_t _pad_0[0x8];
    float sizeX;
    float sizeY;
    float sizeZ;
    uint8_t _pad_1[0x4];
};




struct InteractionConditionParams {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct EAMessageTriggerComponentParams {
    uint8_t _pad_0[0x18];
    enum ARDataType triggerFrequency;
    uint8_t _pad_1[0x3];
    int32_t phase;
    struct Faction* faction;
    uint8_t _pad_2[0x10];
    enum ARDataType triggerMarkerType;
    uint8_t _pad_3[0x4];
    struct SEACriticalMessageDef* triggerNotification;
    uint8_t _pad_4[0x10];
};




struct CraterModifierComponentParams {
    uint8_t _pad_0[0x18];
};




struct SWeaponActionToggleParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct SWeaponActionParams* weaponAction;
    uint8_t _pad_10[0x8];
};




struct Marker_AbilityHostility {
    uint8_t _pad_0[0x8];
};




struct ItemResourceDynamicAmountWeaponRegen {
    uint8_t _pad_0[0x8];
};




struct TagTrigger {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct GlobalResourceAudio* startTrigger;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* stopTrigger;
    uint8_t _pad_3[0x18];
    struct CryStringT* boneName;
    uint8_t _pad_4[0x8];
};




struct SCItemDoorSingleProceduralParams {
    uint8_t _pad_0[0x8];
    float DefaultAnimationDurationScale;
    float SecondaryAnimationDurationScale;
    struct SCItemDoorUserAnimationParams* userAnimationParams;
    uint8_t _pad_1[0x8];
    struct CryStringT* TransitionTag;
    uint8_t _pad_2[0x8];
};




struct SCItemQuantumDriveParams_NEW {
    uint8_t _pad_0[0x18];
    struct SQuantumMovementParams* linearParams;
    uint8_t _pad_1[0x7d0];
    struct SQuantumMovementParams* boostParams;
    uint8_t _pad_2[0x7d0];
    struct SQuantumMovementParams* splineParams;
    uint8_t _pad_3[0x7d0];
    struct QuantumDriveHeatParams* heatParams;
    uint8_t _pad_4[0x18];
    struct QuantumDriveEffectParams* effectParams;
    uint8_t _pad_5[0x58];
    struct SQuantumDriveEffectBaseParams* effectTags;
    uint8_t _pad_6[0x8];
    struct SQuantumResourceNetworkParams* resourceNetworkParams;
    uint8_t _pad_7[0x30];
    struct CryStringT* tracePoint;
    uint8_t _pad_8[0x8];
    float spoolUpTime;
    float quantumFuelRequirement;
    float disableCharge;
    float jumpRange;
    float disconnectRange;
    uint8_t _pad_9[0x4];
    struct EntityClassDefinition* trailEntityClass;
    uint8_t _pad_10[0x10];
    struct CLocIdentifier* blindBoostDisabledMessage;
};




struct SIVotingModule {
    uint8_t _pad_0[0x18];
};




struct SCharacterCustomizerHairLengthEntry {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* hairClass;
    uint8_t _pad_1[0x10];
    float hairLength;
    uint8_t _pad_2[0x4];
};




struct LightAudioComponentParams {
    uint8_t _pad_0[0x18];
    _Bool enableAudio;
    uint8_t _pad_1[0x7];
    struct GlobalResourceAudio* playTrigger;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* stopTrigger;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* lightGroupStateDefaultPlayTrigger;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* lightGroupStateDefaultStopTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* lightGroupStateAuxiliaryPlayTrigger;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* lightGroupStateAuxiliaryStopTrigger;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* lightGroupStateEmergencyPlayTrigger;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* lightGroupStateEmergencyStopTrigger;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* lightGroupStateCinematicPlayTrigger;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* lightGroupStateCinematicStopTrigger;
    uint8_t _pad_11[0x18];
    struct AudioRtpc* luminanceRtpc;
    uint8_t _pad_12[0x18];
    float attenuationScale;
    float volume_db;
};




struct TargetSelectorSubTargetingStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* noTarget;
    uint8_t _pad_1[0x8];
    struct SInteractionState* validTarget;
    uint8_t _pad_2[0x8];
    struct SInteractionState* enginesTargeted;
    uint8_t _pad_3[0x8];
    struct SInteractionState* turretTargeted;
    uint8_t _pad_4[0x8];
};




struct ConditionDisplayParams {
    uint8_t _pad_0[0x8];
    _Bool exclusiveDisplay;
    uint8_t _pad_1[0x7];
    struct BlockedTextParams* blockedText;
    uint8_t _pad_2[0x8];
    struct BlockedCursorParams* blockedCursor;
    uint8_t _pad_3[0x8];
    struct BlockedColorParams* blockedColor;
    uint8_t _pad_4[0x8];
    struct BlockedHintParams* blockedHint;
    uint8_t _pad_5[0x8];
    struct ConditionProhibitedItemsDisplayParams* autoStoreOption;
    uint8_t _pad_6[0x8];
    struct DialogueBundle* blockedInteractionAttemptMonologue;
    uint8_t _pad_7[0x8];
};




struct SVaultingTechniqueGains {
    uint8_t _pad_0[0x8];
    float vaulting;
    uint8_t _pad_1[0x4];
};




struct PooledLightData {
    uint8_t _pad_0[0x8];
    struct CryStringT* flareName;
    uint8_t _pad_1[0x8];
    struct RGB* diffuseColor;
    uint8_t _pad_2[0x10];
    float radius;
    float diffuseMultiplier;
    float specularMultiplier;
    float attenuationBulbSize;
    float animSpeed;
    float flareScale;
    float rampTime;
    _Bool fake;
    _Bool autoClip;
    uint8_t style;
    uint8_t animPhase;
    uint8_t flareLensOpticsFrustumAngle;
    uint8_t _pad_3[0x7];
};




struct DamageMapDamageForm {
    uint8_t _pad_0[0x8];
    struct DamageMapDamageTypes* damageStrengthMultipliers;
    uint8_t _pad_1[0x30];
    struct DamageMapChannels* innerRadiusMultipliers;
    uint8_t _pad_2[0x10];
    struct DamageMapChannels* outerRadiusMultipliers;
    uint8_t _pad_3[0x10];
    struct DamageMapChannels* noiseStrength;
    uint8_t _pad_4[0x10];
};




struct ProceduralIdleToMoveParams {
    uint8_t _pad_0[0x8];
    float maxMovementSpeed;
    float maxHipTilt;
    float maxHipVerticalOffset;
    float maxHipHorizontalOffset;
    float maxSpineBend;
    float tiltDuration;
    float tiltRestorationDuration;
    uint8_t _pad_1[0x4];
};




struct AudioThrusterProperties {
    uint8_t _pad_0[0x8];
    float audioSize;
    float techLevel;
    float civilianLow;
    float civilianMed;
    float civilianHigh;
    float industrial;
    float military;
    float racing;
    float stealth;
    uint8_t _pad_1[0x4];
    struct Tag* groupTag;
    uint8_t _pad_2[0x10];
    struct AudioRtpc* groupRTPC;
    uint8_t _pad_3[0x18];
};




struct MotionJukeParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float jukeTriggerAngle;
    float jukeDetectionDuration;
    uint8_t _pad_2[0x4];
};




struct SItemPortRuleDef {
    uint8_t _pad_0[0x8];
};




struct SDoorCollisionReactionToggleParams {
    uint8_t _pad_0[0x8];
    enum ARDataType CollisionReactionDirection;
    uint8_t _pad_1[0x4];
};




struct SEntityHighlightNode {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_DropTarget {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_BindingsVariableInput* IdVariable;
    uint8_t _pad_1[0x10];
    struct BuildingBlocks_WidgetBase* dragStamp;
    uint8_t _pad_2[0x8];
};




struct SStandardCargoUnit {
    uint8_t _pad_0[0x8];
    float standardCargoUnits;
    uint8_t _pad_1[0x4];
};




struct SGasMass {
    uint8_t _pad_0[0x8];
    struct GasParams* Gas;
    uint8_t _pad_1[0x10];
    float Mass;
    uint8_t _pad_2[0x4];
};




struct AISyncedMeleeAttack {
    uint8_t _pad_0[0x8];
    enum ARDataType attackType;
    uint8_t _pad_1[0x4];
    struct CryStringT* globalFragmentTags;
    uint8_t _pad_2[0x8];
    float minDistanceToTarget2d;
    float maxDistanceToTarget2d;
    float minRelativeTargetHeight;
    float maxRelativeTargetHeight;
    float maxAngleToTarget;
    _Bool ignoreAttackObstructionClearance;
    uint8_t _pad_3[0x3];
    float maxAngleTargetToAttacker;
    uint8_t _pad_4[0x4];
    struct SyncedAttackCategoryParams* meleeAttackParams;
    uint8_t _pad_5[0x8];
};




struct SCItemMannequinTags {
    uint8_t _pad_0[0x8];
    struct CryStringT* mannequinClassTag;
    uint8_t _pad_1[0x8];
    struct CryStringT* mannequinTypeTag;
    uint8_t _pad_2[0x8];
    struct CryStringT* mannequinBaseTag;
    uint8_t _pad_3[0x18];
};




struct AudioObservableExtender {
    uint8_t _pad_0[0x8];
    float hearingRadiusAtFullStrength;
    uint8_t _pad_1[0x4];
};




struct LoadoutItemHighlightParams {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct SRGBA8* baseColor;
    uint8_t _pad_2[0x8];
    struct SRGBA8* highlightColor;
    uint8_t _pad_3[0x8];
};




struct SRenderToTextureRenderLayerParams {
    uint8_t _pad_0[0x8];
    enum ARDataType RenderLayer;
    _Bool Visible;
    uint8_t _pad_1[0x6];
    struct CryStringT* OverrideMaterial;
    uint8_t _pad_2[0x8];
    struct STintParamsDef* OverrideTintParams;
    uint8_t _pad_3[0x20];
    struct SObjectSilhouetteParamsDef* OverrideSilhouetteParams;
    uint8_t _pad_4[0x40];
    _Bool DrawInGeneralPass;
    uint8_t _pad_5[0x7];
};




struct HearingDisruptionGameplayTrigger {
    uint8_t _pad_0[0x8];
    int32_t severity;
    float range;
};




struct MotionSmoothingParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float maxJitterRating;
    float jitterSensitivity;
    float jitterDetectionThreshold;
    float jitterDecayDuration;
    float speedSmoothingDuration;
};




struct Marker_ShowRule {
    uint8_t _pad_0[0x8];
};




struct SCommunicationUserComponentParams {
    uint8_t _pad_0[0x18];
    struct CommunicationConfig* communicationConfig;
    uint8_t _pad_1[0x10];
    struct VoiceBundle* voiceBundle;
    uint8_t _pad_2[0x10];
    struct VoiceSingle* voiceSingle;
    uint8_t _pad_3[0x10];
    struct CryStringT* contextualDialog;
    uint8_t _pad_4[0x8];
};




struct EntityComponentWaterVolumeParams {
    uint8_t _pad_0[0x18];
};




struct LedgeObjectComponentParams {
    uint8_t _pad_0[0x18];
    _Bool isEnabled;
    _Bool isVault;
    _Bool isDoubleSided;
    _Bool isFlipped;
    _Bool autoTransition;
    _Bool followTerrain;
    uint8_t _pad_1[0x2];
    float ledgeMaxDepth;
    float ledgeMaxExitAngle;
    float cornerMaxAngle;
    float cornerEndAdjustAmount;
    struct SAILedgeParams* aiParams;
    uint8_t _pad_2[0x8];
    struct SCLedgeEntityParams* pEnityParams;
    uint8_t _pad_3[0x8];
};




struct AdvancedLootConstraints {
    uint8_t _pad_0[0x8];
    enum ARDataType pruningLevel;
    enum ARDataType fullnessMode;
    uint8_t _pad_1[0x6];
};




struct AIAimingComponentParams {
    uint8_t _pad_0[0x18];
};




struct LinkedStatPassFullValue {
    uint8_t _pad_0[0x8];
    float multiplier;
    enum ARDataType reverseSignFlag;
};




struct STrackViewOutfitExternalSwapData {
    uint8_t _pad_0[0x8];
    struct TagList* selectionTags;
    uint8_t _pad_1[0x30];
};




struct InteriorMapWorldUIRoomLabelsParams {
    uint8_t _pad_0[0x8];
};




struct RammingTrackerParams {
    uint8_t _pad_0[0x8];
    float minimumHitSpeedHostilityThreshold;
    float minimumHitSpeedCrimeThreshold;
    float singleBlameThreshold;
    float sharedResponsibilityThreshold;
    float collisionGracePeriodSeconds;
    float vehicleActorCollisionSpeedThreshold;
};




struct SCItemTurretMovementParams {
    uint8_t _pad_0[0x8];
    struct Tag* movementTag;
    uint8_t _pad_1[0x10];
};




struct MoveViewRestrictionPenalty {
    uint8_t _pad_0[0x8];
    float restrictedMotionPenalty;
    float restrictedViewPenalty;
};




struct InnerThought_Config {
    uint8_t _pad_0[0x8];
    struct GeomFont_Config* geomFont;
    uint8_t _pad_1[0x10];
    float tracking;
    enum ARDataType forceCase;
};




struct SEntityComponentProceduralOCModifierParams {
    uint8_t _pad_0[0x18];
    float ExteriorWearFactor;
    float ExteriorDirtFactor;
    float InteriorWearFactor;
    float InteriorDirtFactor;
    struct FactionPalette* OCFactionPalette;
    uint8_t _pad_1[0x10];
    struct TintPaletteTree* OverrideTintPalette;
    uint8_t _pad_2[0x10];
};




struct LandingAreaComponentParams {
    uint8_t _pad_0[0x18];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct Vec3* dimensions;
    uint8_t _pad_2[0x10];
    struct ExtraLegalBounds* extraLegalBounds;
    uint8_t _pad_3[0x18];
    float HUDOffset;
    _Bool alignDirection;
    _Bool autopilotEnabled;
    uint8_t _pad_4[0x2];
    float approachDistance;
    float touchdownHoverAltitude;
    int32_t dockingClassOverride;
    _Bool allowGroundVehicles;
    _Bool allowSpaceships;
    _Bool autoRegisterWithATC;
    uint8_t _pad_5[0x1];
    enum ARDataType canBeUsedBy;
    uint8_t _pad_6[0x4];
    struct CLocIdentifier* HUDDisplayName;
    int32_t ATCPriority;
    _Bool autoGenerateUI;
    uint8_t _pad_7[0x3];
    float baseUIScale;
    _Bool skipObstructionCheck;
    _Bool alwaysLowerPlatformBeforeSpawn;
    uint8_t _pad_8[0x2];
};




struct BlockedTextParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* blockedText;
};




struct EntityComponentFireRepairer {
    uint8_t _pad_0[0x18];
    _Bool enable;
    uint8_t _pad_1[0x3];
    float repairRate;
    float radius;
    uint8_t _pad_2[0x4];
    struct FireRepairerType_Base* type_;
    uint8_t _pad_3[0x8];
};




struct SDisruptionGameplayTriggerType {
    uint8_t _pad_0[0x8];
};




struct SCItemHoloDisplayParams {
    uint8_t _pad_0[0x18];
    enum ARDataType activation;
    uint8_t _pad_1[0x4];
    struct BaseHoloDisplayProvider* startUpMainProvider;
    uint8_t _pad_2[0x8];
    struct HoloDisplayBackgroundEffects* backgroundEffectSettings;
    uint8_t _pad_3[0x10];
    struct RadarDisplay3DPreset* displayPreset;
    uint8_t _pad_4[0x10];
    struct WorldDisplayEnvironment* environmentSettings;
    uint8_t _pad_5[0x10];
};




struct SIScoringModule {
    uint8_t _pad_0[0x18];
    _Bool countScoreDown;
    uint8_t _pad_1[0x7];
    struct SPlayerScoring* playerScoring;
    uint8_t _pad_2[0x8];
    struct STeamScoring* teamScoring;
    uint8_t _pad_3[0x8];
    struct EAGameCompletionAwardBaseParams* gameCompletionAward;
    uint8_t _pad_4[0x8];
    float RECMultiplier;
    enum ARDataType mvpType;
};




struct QuantumDriveHeatParams {
    uint8_t _pad_0[0x8];
    float preRampUpThermalEnergyDraw;
    float rampUpThermalEnergyDraw;
    float inFlightThermalEnergyDraw;
    float rampDownThermalEnergyDraw;
    float postRampDownThermalEnergyDraw;
    uint8_t _pad_1[0x4];
};




struct SIFCSAuthoredMotionLimits {
    uint8_t _pad_0[0x8];
    struct Vec3* rotationMaxAcceleration;
    uint8_t _pad_1[0x10];
    float linearMaxAcceleration;
    uint8_t _pad_2[0x4];
};




struct SEntityHoverPhysicsControllerComponentParams {
    uint8_t _pad_0[0x18];
    struct SEntityBasePhysicsControllerParams* PhysType;
    uint8_t _pad_1[0x8];
    struct SEntityHoverPhysicsControllerParams* hover;
    uint8_t _pad_2[0x108];
};




struct GlobalJumpPointEffectParams {
    uint8_t _pad_0[0x8];
    struct GlobalJumpPointTuningParams* tuningParams;
    uint8_t _pad_1[0x8];
    struct GlobalJumpPointOpeningParams* openingParams;
    uint8_t _pad_2[0xc0];
    struct GlobalJumpPointClosingParams* closingParams;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_BindingsColorField {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType field;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsColorBase* input;
    uint8_t _pad_3[0x8];
};




struct Marker_AbilityVehicleData {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_GhostPrimitiveSettings {
    uint8_t _pad_0[0x8];
    float alphaFactor;
    float alphaClamp;
    float scaleFactor;
    uint8_t count;
    _Bool rearOffset;
    uint8_t _pad_1[0x2];
};




struct SActorForceReactionsStunDef {
    uint8_t _pad_0[0x8];
    float stunToImpulseRate;
    float minImpulse;
    float maxImpulseScale;
    _Bool affectsProjectiles;
    _Bool affectsMelee;
    _Bool affectsPhysics;
    _Bool affectsIndirect;
    _Bool affectsSustainedDelta;
    uint8_t _pad_1[0x7];
};




struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct AudioEnvironmentFeedbackZoneSetup* zone;
    uint8_t _pad_3[0x10];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_4[0x140];
    struct Tag* tag;
    uint8_t _pad_5[0x10];
};




struct InteractionConditionPlayerVehicleLandedOrZeroG {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SFragmentParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* fragment;
    uint8_t _pad_1[0x8];
    _Bool forceWeaponController;
    uint8_t _pad_2[0x7];
};




struct BindingsOperations_IntegerStringCanvasPair {
    uint8_t _pad_0[0x8];
    int64_t first;
    struct BuildingBlocks_Canvas* second;
    uint8_t _pad_1[0x10];
};




struct FunctionalityModifierBase {
    uint8_t _pad_0[0x8];
};




struct WorldDisplay_MeshEnvironment {
    uint8_t _pad_0[0x8];
    enum ARDataType alignment;
    uint8_t _pad_1[0x4];
    struct WorldDisplayEnvironmentColor* environmentColor;
    uint8_t _pad_2[0x8];
    float size;
    uint8_t _pad_3[0x4];
    struct QuatT* offset;
    uint8_t _pad_4[0x50];
    struct GlobalResourceGeometry* geometry;
    uint8_t _pad_5[0x10];
    struct GlobalResourceMaterial* material;
    uint8_t _pad_6[0x10];
};




struct DamageResistanceReference {
    uint8_t _pad_0[0x8];
    struct DamageResistanceMacro* damageResistanceRecord;
    uint8_t _pad_1[0x10];
};




struct SurfaceRaindrops_Emitter {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_1[0x10];
    _Bool linkedToSdf;
    uint8_t _pad_2[0x7];
    struct Range* humidityRange;
    uint8_t _pad_3[0x8];
    struct Range* temperatureRange;
    uint8_t _pad_4[0x8];
    float fadeOutDuration;
    _Bool enableCloudCondensation;
    uint8_t _pad_5[0x3];
};




struct SubsumptionConversationLinkComponentParams {
    uint8_t _pad_0[0x18];
};




struct UIDataBankDisplay3DInterpolateParams {
    uint8_t _pad_0[0x8];
    float openDuration;
    uint8_t _pad_1[0x4];
    struct BezierCurve* openCurve;
    uint8_t _pad_2[0x88];
    float staggeredDelay;
    uint8_t _pad_3[0x4];
};




struct AudioPropagationParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* audioEnvironment;
    uint8_t _pad_1[0x8];
    float physicalOcclusionValueWhenClosed;
    float physicalEncapsulationValue;
};




struct SCItemWheeledControllerParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* engineOnInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* engineOffInteraction;
    uint8_t _pad_2[0x8];
    float MinimumPowerAmount;
    uint8_t _pad_3[0x4];
    struct IntoxicationWheeledModifierParams* intoxicationModifierRef;
    uint8_t _pad_4[0x10];
};




struct ActionRuleNotAllowedInGreenZone {
    uint8_t _pad_0[0x8];
    struct ActionRuleDisplayParams* ruleDisplay;
    uint8_t _pad_1[0x8];
};




struct ControlHintCondition_AnyHintTrigger {
    uint8_t _pad_0[0x8];
};




struct UIGraph_ItemPreviewContextComponentDef {
    uint8_t _pad_0[0x8];
    struct LoadoutEditorComponentParams* loadoutEditorComponentParams;
    uint8_t _pad_1[0x10];
    int32_t maxPreviewsLoaded;
    uint8_t _pad_2[0x4];
};




struct MobiGlasRemoteParams {
    uint8_t _pad_0[0x8];
    struct MobiGlasPositionParams* armPositionParams;
    uint8_t _pad_1[0x28];
    struct MobiGlasPositionParams* headPositionParams;
    uint8_t _pad_2[0x28];
    struct ProcBreathingSetup* procBreathingSetup;
    uint8_t _pad_3[0x10];
    float materialGlow;
    uint8_t _pad_4[0x4];
    struct GlobalResourceGeometry* objModel;
    uint8_t _pad_5[0x10];
};




struct ChatSystemOptionsModule {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_LayoutItemCommon {
    uint8_t _pad_0[0x8];
    int64_t order;
    float transitionDuration;
    float transitionDelay;
    struct BuildingBlocks_TimingFunctionBase* timingFunction;
    uint8_t _pad_1[0x8];
};




struct EnvironmentLightSizeParams {
    uint8_t _pad_0[0x8];
    float sizeX;
    float sizeY;
    float sizeZ;
    _Bool global;
    uint8_t _pad_1[0x3];
};




struct SAutoLoadingBoxSizePrices {
    uint8_t _pad_0[0x8];
    int32_t one_eighthSCU;
    int32_t one_quarterSCU;
    int32_t one_halfSCU;
    int32_t oneSCU;
    int32_t twoSCU;
    int32_t fourSCU;
    int32_t eightSCU;
    int32_t sixteenSCU;
    int32_t twentyFourSCU;
    int32_t thirtyTwoSCU;
};




struct EAStaticLoadoutDummy {
    uint8_t _pad_0[0x8];
    struct LoadoutDummyComponentParams* params;
    uint8_t _pad_1[0x10];
};




struct PowerScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct CLocIdentifier* displayUnknown;
    struct CLocIdentifier* displayForTurnedOn;
    struct CLocIdentifier* displayForTurnedOff;
    struct CLocIdentifier* displayForUnpowered;
    struct CLocIdentifier* displayForPowered;
};




struct DefaultActionsEntityState_InRestrainRange {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_ContainerModeBase {
    uint8_t _pad_0[0x8];
};




struct DeliveryItemPortPickupComponentParams {
    uint8_t _pad_0[0x18];
};




struct ActorGForceHeadBob {
    uint8_t _pad_0[0x8];
    struct Vec3* maxGforce;
    uint8_t _pad_1[0x10];
    struct Vec3* undampedFrequencyTranslation;
    uint8_t _pad_2[0x10];
    struct Vec3* dampingRatioTranslation;
    uint8_t _pad_3[0x10];
    struct Vec3* maxHeadTranslation;
    uint8_t _pad_4[0x10];
    float translationSmoothing;
    uint8_t _pad_5[0x4];
    struct Vec3* undampedFrequencyRotation;
    uint8_t _pad_6[0x10];
    struct Vec3* dampingRatioRotation;
    uint8_t _pad_7[0x10];
    struct Ang3* maxHeadRotation;
    uint8_t _pad_8[0x10];
    struct Ang3* maxHeadRotationMagLaunch;
    uint8_t _pad_9[0x10];
    float rotationSmoothing;
    uint8_t _pad_10[0x4];
    struct Vec3* headTranslationLimitsPositive;
    uint8_t _pad_11[0x10];
    struct Vec3* headTranslationLimitsNegative;
    uint8_t _pad_12[0x10];
    float rotationalAccelerationInputModifier;
    float boostZoomAngleOuter;
    float boostZoomAngleInner;
    float boostZoomMaxG;
    struct BezierCurve* boostZoomGMapping;
    uint8_t _pad_13[0x88];
    float jumpDriveFlightModifierTranslation;
    float jumpDriveFlightModifierRotation;
};




struct ReputationPrerequisiteRange {
    uint8_t _pad_0[0x8];
    float minValue;
    float maxValue;
};




struct SLoadoutInventoryItem {
    uint8_t _pad_0[0x8];
    struct CryStringT* entityClassName;
    uint8_t _pad_1[0x8];
    struct EntityClassDefinition* entityClassReference;
    uint8_t _pad_2[0x10];
    int32_t amount;
    uint8_t _pad_3[0x4];
};




struct BuildingBlocks_TriggerHyperLink {
    uint8_t _pad_0[0x8];
};




struct ResourceRangeParams {
    uint8_t _pad_0[0x8];
    float start;
    float modifier;
};




struct WantedLevelOwnerScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct BoidsSphericalLimiterRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float radius;
    float effectDistance;
};




struct ControlHintCondition_ActorStanceState {
    uint8_t _pad_0[0x8];
    enum ARDataType stanceState;
    uint8_t _pad_1[0x4];
};




struct LifetimeDebugParams {
    uint8_t _pad_0[0x18];
};




struct PlayerNotificationBannerParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* title;
    struct CLocIdentifier* desc;
    struct CLocIdentifier* prompt;
    struct PlayerNotificationBannerOptionsParams* options;
    uint8_t _pad_1[0x8];
};




struct InteractionConditionAccountBadge {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType badgeRequired;
    uint8_t _pad_2[0x4];
};




struct VehicleInteriorObjectContainer {
    uint8_t _pad_0[0x18];
};




struct EAGameCompletionAwardBaseParams {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x7];
};




struct ItemResourceConversionPair {
    uint8_t _pad_0[0x8];
    struct ResourceType* toScrub;
    uint8_t _pad_1[0x10];
    struct ResourceType* toAdd;
    uint8_t _pad_2[0x10];
};




struct FloatUserVariableTask {
    uint8_t _pad_0[0x20];
};




struct RandomFloat {
    uint8_t _pad_0[0x8];
    float minimum;
    float maximum;
};




struct RadarSystemGlobalParams {
    uint8_t _pad_0[0x8];
    uint32_t paramsVersion;
    uint8_t _pad_1[0x4];
    struct SignatureSystemGlobalParams* signatureSystemParams;
    uint8_t _pad_2[0xf0];
};




struct EATransportTransitionGroupParams {
    uint8_t _pad_0[0x8];
    struct EATransportBaseTransitionParams* transitionTypeParams;
    uint8_t _pad_1[0x8];
    enum ARDataType onFinished;
    uint8_t _pad_2[0x3];
    int32_t nextTransitionOverride;
    float landingWaitTime;
    float landingWaitTimeForTransfer;
    float timeToDisableSpawnSelection;
    uint8_t _pad_3[0x4];
};




struct ActorLocomotionSharpTurnParams {
    uint8_t _pad_0[0x8];
    _Bool enable;
    _Bool enableForWalking;
    _Bool enableForRunning;
    _Bool enableForSprinting;
    _Bool enableForWeapon;
    _Bool enableForWeaponWalking;
    _Bool enableForWeaponRunning;
    _Bool enableForWeaponSprinting;
    _Bool enableForNW;
    _Bool enableForNoWeaponWalking;
    _Bool enableForNoWeaponRunning;
    _Bool enableForNoWeaponSprinting;
    uint8_t _pad_1[0x4];
};




struct DistressCommsSignalComponentParams {
    uint8_t _pad_0[0x18];
    float signalRadius;
    float detectionRadius;
    float stopBroadcastRadius;
    uint8_t _pad_1[0x4];
    struct Vec3* detectionOffset;
    uint8_t _pad_2[0x10];
    struct BezierCurve* distanceStrengthCurve;
    uint8_t _pad_3[0x88];
    struct BezierCurve* directionStrengthCurve;
    uint8_t _pad_4[0x88];
    float maxDirectionScale;
    int32_t commsCallPriority;
    struct GlobalResourceAudio* startLoopingSound;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* stopLoopingSound;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* loopingSoundSignalStrengthRTPC;
    uint8_t _pad_7[0x18];
    _Bool useCommsSignatureStrength;
    _Bool applyDistanceScaleToStrength;
    _Bool applyDirectionScaleToStrength;
    uint8_t _pad_8[0x5];
};




struct EAPickupRepairParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float percent;
    int32_t requiredScore;
    _Bool spawnOnKill;
    _Bool enabledForFPS;
    _Bool enabledForVehicles;
    _Bool allowSpawnOnSuicide;
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_NumberTagPair {
    uint8_t _pad_0[0x8];
    float first;
    uint8_t _pad_1[0x4];
    struct Tag* second;
    uint8_t _pad_2[0x10];
};




struct SSCSignatureDummyParams {
    uint8_t _pad_0[0x18];
    _Bool enable;
    uint8_t _pad_1[0x3];
    enum ARDataType type_;
    float value;
    uint8_t _pad_2[0x4];
};




struct SEASpawnLocationVehicleSeatSlot {
    uint8_t _pad_0[0x8];
    struct TagsDNF* tagsDNF;
    uint8_t _pad_1[0x60];
    struct CryStringT* icon;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* name;
};




struct EntityComponentSpawnClosetParams {
    uint8_t _pad_0[0x18];
    struct TagList* supportedTags;
    uint8_t _pad_1[0x30];
    float maxSpawnsPerMinute;
    float requestHoldSeconds;
    _Bool defaultDoorsOpen;
    uint8_t _pad_2[0x7];
};




struct StatusEffectTrigger {
    uint8_t _pad_0[0x8];
    enum ARDataType statusEffectType;
    float triggerMinThreshold;
    float triggerMaxThreshold;
    uint8_t _pad_1[0x4];
    struct StatusEffectValue* value;
    uint8_t _pad_2[0x8];
};




struct JumpDownNavigationLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkValidForAgentType;
    uint8_t _pad_1[0x8];
    struct NavigationLinkCostCustomization* costMultiplierSetup;
    uint8_t _pad_2[0x30];
    enum ARDataType linkingType;
    uint8_t _pad_3[0x4];
    struct UsableUseChannelInstance* useChannel;
    uint8_t _pad_4[0x8];
    struct NavLinkLocation* topAnchor;
    uint8_t _pad_5[0x8];
    struct CryStringT* mannequinTags;
    uint8_t _pad_6[0x8];
    float motionWarpSearchDistance;
    uint8_t _pad_7[0x4];
};




struct ConversationNode_Base {
    uint8_t _pad_0[0x8];
};




struct EventDispatcher {
    uint8_t _pad_0[0x8];
};




struct HandholdSharedInteractionLink {
    uint8_t _pad_0[0x8];
    _Bool ignoreInteractionOnFail;
    uint8_t _pad_1[0x7];
    struct HandholdAttachmentTriggerParams* attachmentTrigger;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* sourceSharedInteraction;
    uint8_t _pad_3[0x20];
};




struct SSCSignatureSystemAudioRtpcSubRule {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* Rtpc;
    uint8_t _pad_1[0x18];
    float RTPCValue1;
    float SignatureMultiplier1;
    float RTPCValue2;
    float SignatureMultiplier2;
};




struct MapDisplayOverrideParams {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
    struct Deg3* orientation;
    uint8_t _pad_2[0x18];
    struct Vec3* position;
    uint8_t _pad_3[0x10];
};




struct PhysicalAudioCollisionTrigger {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* trigger;
    uint8_t _pad_1[0x18];
    float oneShotMinPlayTime;
    _Bool attachToObject;
    uint8_t _pad_2[0x3];
};




struct InnerThought_CycleAnimBase {
    uint8_t _pad_0[0x10];
    float length;
    float amount;
    float stagger;
    uint8_t _pad_1[0x4];
};




struct LoadoutInfo {
    uint8_t _pad_0[0x8];
    int32_t loadoutId;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* loadoutName;
    struct CryStringT* removeTags;
    uint8_t _pad_2[0x8];
};




struct ObjectivePropertyBase {
    uint8_t _pad_0[0x8];
};




struct InstabilityScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SActorAnimationPoseDeathBehaviour {
    uint8_t _pad_0[0x8];
};




struct ScoreMessage {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* message;
    enum ARDataType type_;
    _Bool allowInPostGame;
    _Bool shouldIncrement;
    uint8_t _pad_1[0x5];
};




struct SActorForceReactionSustainedImpulseDef {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct Range* sustainedToImpulseRange;
    uint8_t _pad_2[0x8];
    float forceSmoothingDuration;
    float minForceToTriggerImpulse;
    float predictionUncertaintyPercent;
    uint8_t _pad_3[0x4];
};




struct AutopilotParams {
    uint8_t _pad_0[0x18];
};




struct SEntityComponentRoomGroupParams {
    uint8_t _pad_0[0x18];
};




struct InteractionConditionActorStatusEffect {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType conditionResult;
    enum ARDataType statusEffectType;
};




struct PlayerAnimatedInteractionHandParams {
    uint8_t _pad_0[0x8];
    enum ARDataType handMode;
    uint8_t _pad_1[0x4];
};




struct PlayerChoice_SoftwareCursorEntry {
    uint8_t _pad_0[0x8];
    enum ARDataType cursor;
    uint8_t _pad_1[0x4];
    struct CryStringT* imagePath;
    uint8_t _pad_2[0x8];
    struct Vec2* pivot;
    uint8_t _pad_3[0x8];
};




struct SCSeatAccessLinkedGatewaySequenceParams {
    uint8_t _pad_0[0x8];
    enum ARDataType dependencyType;
    float enterSequenceDelay;
    float exitSequenceDelay;
    uint8_t _pad_1[0x4];
};




struct SReputationMissionRequirementExpression_And {
    uint8_t _pad_0[0x8];
};




struct SMatchNetworkTypeParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    enum ARDataType matchNetworkType;
    uint8_t _pad_1[0x7];
};




struct SDialogueComponentParams {
    uint8_t _pad_0[0x18];
};




struct LongTermPersistenceWhiteListSubTypeEntry {
    uint8_t _pad_0[0x8];
    enum ARDataType ItemSubType;
    _Bool NotRemove;
    uint8_t _pad_1[0x3];
};




struct SActorForceReactionEffectDefaults {
    uint8_t _pad_0[0x8];
    float yieldMagnitudeMinScale;
    float returnYieldDelay;
    float returnYieldMagnitude;
    uint8_t _pad_1[0x4];
};




struct DialogueBundleWeighted {
    uint8_t _pad_0[0x8];
    _Bool usePooling;
    uint8_t _pad_1[0x17];
};




struct Behavior_AtmosphereVehicleEffectParams {
    uint8_t _pad_0[0x8];
    _Bool enableEngineTrails;
    _Bool enableEngineContrails;
    uint8_t _pad_1[0x6];
    struct Behavior_CustomVehicleEffectsPreset* customVehicleEffects;
    uint8_t _pad_2[0x8];
    struct AerodynamicTrailCalculation* aerodynamicTrailCalculation;
    uint8_t _pad_3[0x8];
};




struct SInitialDamageSpecifierFixed {
    uint8_t _pad_0[0x8];
    struct DamageBase* Damage;
    uint8_t _pad_1[0x8];
};




struct PlanetDayNightTemperatureTemplateRef {
    uint8_t _pad_0[0x8];
    struct PlanetDayNightTemperatureTemplate* dayNightTemperatureParamsRecord;
    uint8_t _pad_1[0x10];
};




struct LongTermPersistenceSubTypeListOption {
    uint8_t _pad_0[0x8];
};




struct PlayerChoice_InteractionModifier {
    uint8_t _pad_0[0x8];
    float highlightFactor;
    float rangeFactor;
};




struct DefaultActionsEntityEntryCondition_CanActorBeLooted {
    uint8_t _pad_0[0x8];
};




struct SubHarvestableMultiConfigRef {
    uint8_t _pad_0[0x8];
    struct SubHarvestableMultiConfigRecord* multiConfigRef;
    uint8_t _pad_1[0x10];
};




struct ConstantDOFGlobalData {
    uint8_t _pad_0[0x8];
    float movementThresholdToIgnorePlayer;
    float rotationThresholdToDisable;
    int32_t pierceability;
    float nonEntityDistanceScale;
    int32_t LODBiasOnTarget;
    float maxRangeScale;
    float circleOfConfusion;
    uint8_t _pad_1[0x4];
    struct ConstantDOFGrid* gridParams;
    uint8_t _pad_2[0x10];
    struct ConstantDOFWeights* weights;
    uint8_t _pad_3[0x48];
};




struct SInspectAnimationParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentId;
    uint8_t _pad_2[0x8];
    struct CryStringT* tagId;
    uint8_t _pad_3[0x8];
};




struct VehicleLandingGear {
    uint8_t _pad_0[0x8];
    struct CryStringT* scopeContext;
    uint8_t _pad_1[0x8];
    struct CryStringT* vehicleScopeContext;
    uint8_t _pad_2[0x8];
    struct CryStringT* bone;
    uint8_t _pad_3[0x8];
    float mass;
    _Bool alwaysVisible;
    uint8_t _pad_4[0x3];
    struct GlobalResourceGeometry* geometry;
    uint8_t _pad_5[0x10];
    struct VehicleLandingGearSpring* spring;
    uint8_t _pad_6[0x8];
};




struct InitialDamageOverride {
    uint8_t _pad_0[0x8];
    struct SInitialDamage* initialDmgOverride;
    uint8_t _pad_1[0x68];
};




struct InteractionConditionCanOpenExternalInventory {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct AudioRtpcWithBehaviour {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* rtpc;
    uint8_t _pad_1[0x18];
    struct SRtpcBehaviour* behavior;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_FieldModifierRecordRefTypeCanvasReferenceRecord {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Canvas* value;
    uint8_t _pad_1[0x10];
};




struct SIHostilityModule {
    uint8_t _pad_0[0x18];
};




struct DevOwner {
    uint8_t _pad_0[0x8];
    struct DevOwnerType_Base* type_;
    uint8_t _pad_1[0x8];
};




struct SItemShopReference {
    uint8_t _pad_0[0x8];
    enum ARDataType reference;
    enum ARDataType adjustmentMode;
    struct Vec3* adjustmentValue;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_ComponentBadgeProperties {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* badgeLabel;
    enum ARDataType style;
    enum ARDataType caseModifier;
    enum ARDataType fillStyle;
    uint8_t _pad_1[0x4];
};




struct ItemResourceDeltaNetworkReflection {
    uint8_t _pad_0[0x8];
    enum ARDataType resource;
    _Bool binaryEvaluation;
    uint8_t _pad_1[0x3];
};




struct SWeaponParticleEffectParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* firstPerson;
    uint8_t _pad_1[0x10];
    struct GlobalResourceParticle* thirdPerson;
    uint8_t _pad_2[0x10];
    struct Tag* triggerTag;
    uint8_t _pad_3[0x10];
    struct CryStringT* helper;
    uint8_t _pad_4[0x8];
    enum ARDataType modifierSource;
    float delay;
    float scale;
    _Bool retriggerOnViewModeChange;
    _Bool isMuzzleFlash;
    uint8_t _pad_5[0x2];
};




struct GlobalCargoLoadingParams {
    uint8_t _pad_0[0x8];
    float vehicleVelocityEpsilon;
    float vehicleMovementTimeLimit;
    float uiDisplayTimeLimit;
    float revokeTimeDelay;
    float uiTimeRemainingForTimeOutWarning;
    float forfeitTimeBuffer;
    float initialMovementHintTimeBuffer;
    float cargoDeckLoadingTimePerSCU;
    float autoLoadingBaseLoadingTime;
    float autoLoadingBaseUnloadingTime;
    struct SAutoLoadingBoxSizeLoadingTime* autoLoadingBoxSizeLoadingTime;
    uint8_t _pad_1[0x28];
    struct SAutoLoadingBoxSizeLoadingTime* autoLoadingBoxSizeUnloadingTime;
    uint8_t _pad_2[0x28];
    struct CargoLoadingNotificationParams* warningCargoRemovalNotification;
    uint8_t _pad_3[0x30];
    struct CargoLoadingNotificationParams* notifyCargoRemovalNotification;
    uint8_t _pad_4[0x30];
    struct CargoLoadingNotificationParams* reminderRetrieveCargoFromLoadingAreaNotification;
    uint8_t _pad_5[0x30];
    struct CargoLoadingNotificationParams* notifyCargoTransferredNotification;
    uint8_t _pad_6[0x30];
    struct CargoLoadingNotificationParams* notifyCargoTransferInterruptedObstructionNotification;
    uint8_t _pad_7[0x30];
    struct CargoLoadingNotificationParams* notifyCargoTransferInterruptedShipMovingNotification;
    uint8_t _pad_8[0x30];
    struct CargoLoadingNotificationParams* notifyCargoTransferInterruptedGenericNotification;
    uint8_t _pad_9[0x30];
    struct CargoLoadingNotificationParams* initialMovementHintTimeBufferNotification;
    uint8_t _pad_10[0x30];
    struct CargoLoadingNotificationParams* notifyLoadingAreaRevokedTimeoutNotification;
    uint8_t _pad_11[0x30];
    struct CargoLoadingNotificationParams* notifyLoadingAreaRevokedGenericNotification;
    uint8_t _pad_12[0x30];
};




struct DeliveryLockerItemComponentParams {
    uint8_t _pad_0[0x18];
};




struct MusicLogicConfig {
    uint8_t _pad_0[0x8];
    struct CinematicConfig* cinematicConfig;
    uint8_t _pad_1[0x10];
    struct AttackDetectionConfig* shipAttackDetectionConfig;
    uint8_t _pad_2[0x10];
    struct AttackDetectionConfig* fpsAttackDetectionConfig;
    uint8_t _pad_3[0x10];
    struct PlaylistRNGConfig* playlistRNGConfig;
    uint8_t _pad_4[0x38];
    struct LocationMusicConfig* locationMusicConfig;
    uint8_t _pad_5[0x40];
    struct EnemyAwarenessConfig* enemyAwarenessConfig;
    uint8_t _pad_6[0x30];
    _Bool triggerParentMusicAreaOnLeave;
    uint8_t _pad_7[0x7];
};




struct BuildingBlocks_TriggerURL {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct TriggeredWarning {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    enum ARDataType messageState;
    uint8_t _pad_1[0x4];
};




struct ControlHintCondition_ActorInteractionState {
    uint8_t _pad_0[0x8];
    enum ARDataType interactionState;
    uint8_t _pad_1[0x4];
};




struct PlayerAnimatedInteractionBase {
    uint8_t _pad_0[0x8];
};




struct CraftingGameplayProperty_Base_Float {
    uint8_t _pad_0[0x8];
    struct CraftingGameplayPropertyImpl_Base_Float* implementation;
    uint8_t _pad_1[0x8];
};




struct Marker_AbilityNearestFace {
    uint8_t _pad_0[0x8];
    enum ARDataType easeType;
    uint8_t _pad_1[0x3];
    float flipAngle;
    float flipTime;
    uint8_t _pad_2[0x4];
};




struct SSCElectronicAccessPlayerComponentParams {
    uint8_t _pad_0[0x18];
    _Bool enableRespawnEffect;
    uint8_t _pad_1[0x3];
    float startSaturation;
    float endSaturation;
    float saturationSpeed;
};




struct SAngleConstraint {
    uint8_t _pad_0[0x8];
    struct Vec3* forwardDirOffset;
    uint8_t _pad_1[0x10];
    float angleRange;
    float viewAngleLimit;
};




struct SCItemLandingDockControllerParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* fragment;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentDeploy;
    uint8_t _pad_2[0x8];
    struct CryStringT* fragmentRetract;
    uint8_t _pad_3[0x8];
    struct CryStringT* fragmentCompress;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* deployInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* retractInteraction;
    uint8_t _pad_6[0x8];
    float hideSelectorRatio;
    uint8_t _pad_7[0x4];
    struct DockingHUDMessagesParams* hudMessagesParams;
    uint8_t _pad_8[0x98];
    struct DockingAutodockingParams* dockingAutodockingParams;
    uint8_t _pad_9[0x20];
};




struct ItemResourceControlConditionLimit {
    uint8_t _pad_0[0x8];
    struct ItemResourceControlOutputBase* controlOutput;
    uint8_t _pad_1[0x8];
    struct ItemResourceControlParameterBase* controlParameter;
    uint8_t _pad_2[0x8];
    float limitMax;
    float limitMin;
};




struct InventoryStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* OpenedState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* ClosedState;
    uint8_t _pad_2[0x8];
};




struct TriggeredHealthValue {
    uint8_t _pad_0[0x8];
    float healthValue;
    uint8_t _pad_1[0x4];
};




struct SEntityEffectSystem_UIOwnerEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0xcf];
};




struct AudioBreathInterrupt {
    uint8_t _pad_0[0x8];
    struct CryStringT* description;
    uint8_t _pad_1[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_2[0x88];
    enum ARDataType breathEvent;
    uint8_t _pad_3[0x4];
    struct GlobalResourceAudio* customEvent;
    uint8_t _pad_4[0x18];
    _Bool triggerCustomEventOnly;
    uint8_t _pad_5[0x7];
};




struct DoorNavigationTriggerAdapter {
    uint8_t _pad_0[0x8];
};




struct SVehicleHudParams {
    uint8_t _pad_0[0x8];
    struct SHudTapeParams* altitudeTape;
    uint8_t _pad_1[0x10];
    struct SHudTapeParams* compassTape;
    uint8_t _pad_2[0x10];
};




struct SElevatorBBoxCollisionParams {
    uint8_t _pad_0[0x10];
    float Scale;
    uint8_t _pad_1[0x4];
};




struct SExplosionComponentParams {
    uint8_t _pad_0[0x18];
    float damage;
    enum ARDataType damageType;
    float minRadius;
    float maxRadius;
    struct ExplosionParams* explosion;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_TriggerSubsumptionCallback {
    uint8_t _pad_0[0x8];
    struct CryStringT* interactionName;
    uint8_t _pad_1[0x8];
};




struct StarMapDisplayProviderParams {
    uint8_t _pad_0[0x18];
};




struct SAsteroidFieldComponentParams {
    uint8_t _pad_0[0x18];
    int32_t rngSeed;
    uint8_t viewDistRatio;
    uint8_t lodRatio;
    uint8_t _pad_1[0x2];
    struct CryStringT* composition;
    uint8_t _pad_2[0x8];
    float noiseAmplitude;
    float noiseGranularity;
    float noiseRoughness;
    uint8_t _pad_3[0xc];
};




struct SecurityClearanceTokenData_WeaponDrawn {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_NumberStringPair {
    uint8_t _pad_0[0x8];
    float first;
    uint8_t _pad_1[0x4];
    struct CryStringT* second;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsStringBase* secondOverride;
    uint8_t _pad_3[0x8];
};




struct OrbitEntityCinematicEvent {
    uint8_t _pad_0[0x8];
    float triggerTime;
    int32_t loadViewIndex;
};




struct EASpawnCameraControllerParamsDef {
    uint8_t _pad_0[0x18];
};




struct SCItemControlAIModuleParams {
    uint8_t _pad_0[0x8];
    struct SCItemObservableParams* aiModuleObserve;
    uint8_t _pad_1[0x8];
    struct SCItemControllableParams* aiModuleControl;
    uint8_t _pad_2[0x8];
};




struct MaterialEffectEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* libraryName;
    uint8_t _pad_1[0x8];
    struct CryStringT* effectName;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_AutoTypeParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* startVariableName;
    uint8_t _pad_1[0x8];
    struct CryStringT* finishVariableName;
    uint8_t _pad_2[0x8];
    struct CryStringT* textProgressVariableName;
    uint8_t _pad_3[0x8];
    float startDelayTime;
    float charactersPerSecond;
    _Bool timescaleIndependent;
    uint8_t _pad_4[0x7];
};




struct ConsumableEffectAddBuffEffect {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* effectDescription;
    enum ARDataType buffType;
    uint8_t _pad_1[0x4];
    struct BuffDurationBase* buffDurationOverride;
    uint8_t _pad_2[0x8];
    struct BuffValueOverride* buffValueOverride;
    uint8_t _pad_3[0x8];
};




struct SCurve {
    uint8_t _pad_0[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_1[0x88];
};




struct HealthDamageState {
    uint8_t _pad_0[0x8];
    struct CryStringT* geometryTag;
    uint8_t _pad_1[0x8];
    struct Tag* effectTrigger;
    uint8_t _pad_2[0x10];
    struct Tag* effectTag;
    uint8_t _pad_3[0x10];
};




struct SSequencerItemActionTask {
    uint8_t _pad_0[0x20];
    enum ARDataType itemActionType;
    uint8_t _pad_1[0x4];
};




struct RadiationStateTemplateInternal {
    uint8_t _pad_0[0x8];
    enum ARDataType distortionMod;
    float distortion;
    struct RadiationStatePropertyParams* IR;
    uint8_t _pad_1[0x8];
    struct RadiationStatePropertyParams* EM;
    uint8_t _pad_2[0x8];
    struct RadiationStatePropertyParams* CS;
    uint8_t _pad_3[0x8];
    enum ARDataType hazardousRadiationMod;
    float hazardousRadiationRate;
};




struct InputAction {
    uint8_t _pad_0[0x8];
    struct CryStringT* actionName;
    uint8_t _pad_1[0x20];
};




struct ShockwaveParams {
    uint8_t _pad_0[0x8];
    enum ARDataType primitiveType;
    uint8_t _pad_1[0x4];
    struct Vec3* axis;
    uint8_t _pad_2[0x10];
    float halfHeight;
    float detonationSpeed;
    float peakPressure;
    float duration;
    float durationScale;
    float density;
    float resistance;
    uint8_t _pad_3[0x4];
};




struct BindingsOperation_BooleanFromStringComparison {
    uint8_t _pad_0[0x50];
    struct CryStringT* leftString;
    uint8_t _pad_1[0x8];
    struct CryStringT* rightString;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsStringBase* inputLeft;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_BindingsStringBase* inputRight;
    uint8_t _pad_4[0xa8];
};




struct SEASpawnRespawnSchedulerParams {
    uint8_t _pad_0[0x8];
};




struct VehicleSalvageGlobalParams {
    uint8_t _pad_0[0x8];
    float vehicleFractureForceScale;
    uint8_t _pad_1[0x4];
    struct SSalvageGlobalStructuralVFXParams* structuralVFX;
    uint8_t _pad_2[0xf8];
    struct SSalvageGlobalStructuralHighlightParams* structuralHighlights;
    uint8_t _pad_3[0x88];
};




struct SSalvageTractorParams {
    uint8_t _pad_0[0x8];
    _Bool towingController;
    uint8_t _pad_1[0x7];
};




struct QuantumGridComponentParams {
    uint8_t _pad_0[0x18];
};




struct SSpawner_SpawnedEntityParams {
    uint8_t _pad_0[0x18];
};




struct SStandardResourceUnit {
    uint8_t _pad_0[0x8];
    float standardResourceUnits;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_GridPackContainer {
    uint8_t _pad_0[0x8];
    enum ARDataType direction;
    float gutter;
};




struct SubsumptionDataComponentParams {
    uint8_t _pad_0[0x18];
    struct UsableGroupCoordinatorDataParams* usableGroupCoordinatorData;
    uint8_t _pad_1[0x8];
};




struct ItemResourceDynamicAmountWeaponAmmo {
    uint8_t _pad_0[0x8];
};




struct CommonTargetingSameTargetScore {
    uint8_t _pad_0[0x8];
    float targetedByOneNPC;
    float targetedByTwoNPC;
    float targetedByThreeNPC;
    float targetedByFourNPC;
    float targetedByFiveNPC;
    uint8_t _pad_1[0x4];
};




struct ActorMeleeDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* headJoint;
    uint8_t _pad_1[0x10];
};




struct SDashboardSeatInteractionParams {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* closeIP;
    uint8_t _pad_1[0x8];
    struct SInteractionPointParams* openIP;
    uint8_t _pad_2[0x8];
    struct SInteractionPointParams* exitIP;
    uint8_t _pad_3[0x8];
    struct SInteractionPointParams* ejectionIP;
    uint8_t _pad_4[0x8];
    struct SInteractionPointParams* cycleHUDIP;
    uint8_t _pad_5[0x8];
};




struct BoidsAlignmentRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
};




struct UIModeVisibilitySettings {
    uint8_t _pad_0[0x8];
    _Bool itemPortTrackers;
    _Bool grenadeTrackers;
    _Bool missionObjectiveTrackers;
    _Bool unattendedVehicleTrackers;
    _Bool radarObjectTrackers;
    uint8_t _pad_1[0xb];
};




struct TileParams {
    uint8_t _pad_0[0x18];
};




struct ActorStateData_AnimationValidationParams {
    uint8_t _pad_0[0x8];
    float stateTimeout;
    uint8_t _pad_1[0x4];
};




struct SMisfireBandParams {
    uint8_t _pad_0[0x8];
    float threshold;
    float minorProbability;
    float majorProbability;
    float criticalProbability;
};




struct CameraBaseSettingsConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* attachmentName;
    uint8_t _pad_1[0x8];
    _Bool defaultCamera;
    _Bool enterExitCamera;
    _Bool unregisterAfterEnter;
    _Bool backgroundUpdate;
    uint8_t _pad_2[0x4];
};




struct CounterMeasureChaffParams {
    uint8_t _pad_0[0x8];
    float volumeSpawnDelay;
    float volumeLifetime;
    struct GlobalResourceParticle* explosionParticles;
    uint8_t _pad_1[0x10];
    struct GlobalResourceParticle* childExplosionParticles;
    uint8_t _pad_2[0x10];
    struct GlobalResourceParticle* volumeParticles;
    uint8_t _pad_3[0x10];
    struct Range* radiusRange;
    uint8_t _pad_4[0x8];
    float StartInfrared;
    float StartElectromagnetic;
    float StartCrossSection;
    float StartDecibel;
    float EndInfrared;
    float EndElectromagnetic;
    float EndCrossSection;
    float EndDecibel;
};




struct BuildingBlocks_Size {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_FixedOrRelativeValue* width;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_FixedOrRelativeValue* height;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_FixedOrRelativeValue* depth;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_FixedOrRelativeValue* minWidth;
    uint8_t _pad_4[0x8];
    struct BuildingBlocks_FixedOrRelativeValue* minHeight;
    uint8_t _pad_5[0x8];
    struct BuildingBlocks_FixedOrRelativeValue* maxWidth;
    uint8_t _pad_6[0x8];
    struct BuildingBlocks_FixedOrRelativeValue* maxHeight;
    uint8_t _pad_7[0x8];
    _Bool enableMinWidth;
    _Bool enableMinHeight;
    _Bool enableMaxWidth;
    _Bool enableMaxHeight;
    uint8_t _pad_8[0x4];
};




struct SecurityClearanceToken {
    uint8_t _pad_0[0x8];
    struct SecurityClearanceTokenData* customCondition;
    uint8_t _pad_1[0x8];
    struct SecurityManualInput* manualInput;
    uint8_t _pad_2[0x8];
    struct MobiGlasMissionNote* missionNote;
    uint8_t _pad_3[0x8];
    struct SecurityNotifications* notifications;
    uint8_t _pad_4[0x8];
};




struct ResourceTypeDensity {
    uint8_t _pad_0[0x8];
    struct BaseDensityUnit* densityUnit;
    uint8_t _pad_1[0x8];
};




struct SCAngularMovementParams {
    uint8_t _pad_0[0x8];
    struct Vec3* MaxAngularVelocityIdle;
    uint8_t _pad_1[0x10];
    struct Vec3* MaxAngularVelocityMove;
    uint8_t _pad_2[0x10];
    struct Vec3* MaxAngularAccelerationPositive;
    uint8_t _pad_3[0x10];
    struct Vec3* MaxAngularAccelerationNegative;
    uint8_t _pad_4[0x10];
    float AngularAccelerationDecay;
    uint8_t _pad_5[0x4];
};




struct AttackCategoryParams {
    uint8_t _pad_0[0x8];
    struct DamageInfo* damageInfo;
    uint8_t _pad_1[0x18];
    enum ARDataType actionCategory;
    uint8_t _pad_2[0x4];
    struct ProceduralAnimation* cameraShakeParams;
    uint8_t _pad_3[0x10];
    float stunRecoveryModifier;
    float blockStunReductionModifier;
    float blockStunStaminaModifier;
    float attackImpulse;
    _Bool ignoreBodyPartImpulseScale;
    _Bool fullbodyAnimation;
    uint8_t _pad_4[0x2];
    enum ARDataType forceKnockdown;
};




struct WeaponProceduralClipRecoil {
    uint8_t _pad_0[0x8];
    float blendTime;
    uint8_t _pad_1[0x4];
    float dampStrength;
    float fireRecoilTime;
    float fireRecoilStrengthFirst;
    float fireRecoilStrength;
    float angleRecoilStrength;
    _Bool useRandomRotation;
    uint8_t _pad_2[0x3];
    struct Ang3* rotation;
    uint8_t _pad_3[0x10];
    float randomness;
    float randomnessBackPush;
    float frontalOscillationRotation;
    float frontalOscillationStrength;
    float frontalOscillationDampStrength;
    uint8_t _pad_4[0x4];
    struct Vec2* max;
    uint8_t _pad_5[0x8];
    float pull_left_percentage;
    float shot_kick_first;
    float shot_kick;
    float random;
    float random_z;
    float decay;
    float end_decay;
    float recoil_time;
    float delay;
    float hipsPushForce;
};




struct STurbulenceParams {
    uint8_t _pad_0[0x8];
    float groundTurbulenceAmplitude;
    float groundTurbulenceAltitudeMin;
    float groundTurbulenceAltitudeMax;
    float groundTurbulenceSpeedMin;
    float groundTurbulenceSpeedMax;
    _Bool groundTurbulenceEnabled;
    uint8_t _pad_1[0x3];
    float windTurbulenceAmplitude;
    float windTurbulenceSpeedMin;
    float windTurbulenceSpeedMax;
    float windTurbulenceCloudDensityModifier;
    _Bool windTurbulenceEnabled;
    uint8_t _pad_2[0x7];
};




struct SecurityClearance_OutfitRequirement_RequiredPieceDef {
    uint8_t _pad_0[0x8];
    enum ARDataType requiredPiece;
    uint8_t _pad_1[0x4];
};




struct PostureData {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    float Priority;
    enum ARDataType BodyDirection;
    _Bool IsLean;
    uint8_t _pad_2[0x7];
    struct CryStringT* AnimationTag;
    uint8_t _pad_3[0x8];
};




struct SEAObjectiveMarkerStateSettings {
    uint8_t _pad_0[0x8];
    enum ARDataType state;
    float markerFillProgress;
};




struct SSalvageGlobalStructuralHighlightParams {
    uint8_t _pad_0[0x8];
    float highlightOccludedAlpha;
    float highlightOutlineWidth;
    _Bool highlightOutlineOnly;
    uint8_t _pad_1[0x7];
    struct RGB* fractureValidHighlightColor;
    uint8_t _pad_2[0x10];
    struct RGB* fractureErrorHighlightColor;
    uint8_t _pad_3[0x10];
    struct RGB* disintegrationValidHighlightColor;
    uint8_t _pad_4[0x10];
    struct RGB* disintegrationWarningHighlightColor;
    uint8_t _pad_5[0x10];
    struct RGB* disintegrationErrorHighlightColor;
    uint8_t _pad_6[0x10];
};




struct LandingAnimationSetup {
    uint8_t _pad_0[0x8];
    enum ARDataType landingStrength;
    float minVelocity;
    enum ARDataType condition;
    uint8_t _pad_1[0x4];
    struct FragmentInfo* fragment;
    uint8_t _pad_2[0x40];
    _Bool playProceduralLanding;
    _Bool lockMovement;
    uint8_t _pad_3[0x2];
    enum ARDataType exitStance;
};




struct RadarJammerComponentParams {
    uint8_t _pad_0[0x18];
    _Bool activateOnSpawn;
    uint8_t _pad_1[0x3];
    float jammingRadius;
    struct SSharedInteractionParams* turnOnInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* turnOffInteraction;
    uint8_t _pad_3[0x8];
};




struct SMissionLocationObjectMetadataParams {
    uint8_t _pad_0[0x8];
    struct MissionLocationTemplate* template_;
    uint8_t _pad_1[0x10];
    struct CryStringT* actionArea;
    uint8_t _pad_2[0x8];
    struct EntityClusterId* entityClusterId;
    uint8_t _pad_3[0x10];
};




struct SCharacterSkinValidationParams {
    uint8_t _pad_0[0x8];
    float minHue;
    float maxHue;
};




struct LinearDamage {
    uint8_t _pad_0[0x8];
    float slope;
    float yIntercept;
};




struct SBezierCurveRecord {
    uint8_t _pad_0[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_1[0x88];
};




struct ActionRuleDisplayParams {
    uint8_t _pad_0[0x8];
    _Bool exclusiveDisplay;
    uint8_t _pad_1[0x7];
    struct BlockedTextParams* blockedText;
    uint8_t _pad_2[0x8];
};




struct SFrontendS42ActionSettings {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct Vec3* textOffset;
    uint8_t _pad_1[0x10];
    struct Ang3* textRotation;
    uint8_t _pad_2[0x10];
};




struct UIStateColor_Threshold {
    uint8_t _pad_0[0x8];
    float minThresholdValue;
    enum ARDataType stateColor;
    uint8_t _pad_1[0x2];
};




struct DeliveryItemPortManagerComponentParams {
    uint8_t _pad_0[0x18];
};




struct SQuantumMovementParams {
    uint8_t _pad_0[0x8];
    float maxSpeed;
    float timeToMaxSpeed;
    float useTime;
    float rechargeTime;
    float minJumpDistance;
    float approachSpeed;
    float stopTime;
    float phasePoint;
    float gasCloudSpeed;
    float gasCloudCutoff;
    struct BezierCurve* vibrationPreparing;
    uint8_t _pad_1[0x88];
    struct BezierCurve* vibrationSpeed;
    uint8_t _pad_2[0x88];
    struct BezierCurve* vibrationCancel;
    uint8_t _pad_3[0x88];
    struct BezierCurve* vibrationCooldown;
    uint8_t _pad_4[0x88];
    float ifcsHandoverDownTime;
    float ifcsHandoverRespoolTime;
    struct SQuantumBoostAudioParams* audio;
    uint8_t _pad_5[0x120];
    struct SQuantumBoostRotationParams* rotation;
    uint8_t _pad_6[0x130];
    struct SQuantumBoostBubbleIntegrityParams_NEW* bubbleIntegrity;
    uint8_t _pad_7[0x2f8];
};




struct PartialContractRewardRepAdjustment {
    uint8_t _pad_0[0x8];
    struct SReputationScopeParams* reputationScope;
    uint8_t _pad_1[0x10];
    float reputationRewardMultiplier;
    uint8_t _pad_2[0x4];
};




struct MiningCameraShakeConfig {
    uint8_t _pad_0[0x8];
    struct Ang3* offsetAngle;
    uint8_t _pad_1[0x10];
    struct Vec3* offsetPosition;
    uint8_t _pad_2[0x10];
    float timePeriod;
    _Bool enabled;
    uint8_t _pad_3[0x3];
    float frequencyNoiseFactor;
    float translationNoise;
    float rotationNoise;
    uint8_t _pad_4[0x4];
    float maxShakeWhenUnderOptimalWindow;
    float shakeInOptimalWindow;
    float minShakeInDangerWindow;
    float shakeChangeLerpSpeed;
};




struct SCItemJumpThrusterPackParams {
    uint8_t _pad_0[0x18];
    struct JumpThrusterPackConfig* jumpThrusterPackConfig;
    uint8_t _pad_1[0x10];
};




struct SReputationContextBBEntityListParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* entityTabName;
    enum ARDataType entityType;
    uint8_t _pad_1[0x4];
};




struct MarkerTrackingLabelParameters {
    uint8_t _pad_0[0x8];
    float headerTextScale;
    float subTextScale;
    float minimumHeaderTextSize;
    float maximumHeaderTextSize;
    float minimumSize;
    float maximumSize;
    float minimumFadeOffset;
    float maximumFadeOffset;
    float positionOffsetMultiplier;
    uint8_t _pad_1[0x4];
};




struct FriendManagerGlobalParams {
    uint8_t _pad_0[0x8];
    struct FriendManagerNotificationsParams* notificationsParams;
    uint8_t _pad_1[0x90];
};




struct ActorRestrainPerAttackerConfig {
    uint8_t _pad_0[0x8];
    struct ActorStateSkeletonFilter* attackerSkeleton;
    uint8_t _pad_1[0x8];
    float frontalQuadrantAngle;
    _Bool immuneToRestrain;
    _Bool interruptOnHitReaction;
    uint8_t _pad_2[0x2];
};




struct SCBoatMovementParams {
    uint8_t _pad_0[0x8];
    struct SCBoatMovementInputParams* inputParams;
    uint8_t _pad_1[0x8];
    struct SCBoatMovementBuoyancyParams* buoyancyParams;
    uint8_t _pad_2[0x10];
    float minimumSubmersionDepth;
    float maxSpeed;
    float maxSpeedBoost;
    float maxSpeedReverse;
    float propellerAcceleration;
    float propellerAccelerationBoost;
    float propellerAccelerationReverse;
    float brakeAccelerationMultiplier;
    struct Vec3* propellerPivot;
    uint8_t _pad_3[0x10];
    float propellerAccelerationAngle;
    float propellerTurningModifierAngleMax;
    float propellerTurningModifier;
    uint8_t _pad_4[0x4];
    struct Vec3* rudderPivot;
    uint8_t _pad_5[0x10];
    float maxRudderAngle;
    float maxRudderAngleBoost;
    float rudderTurnRate;
    float rudderForceMultiplier;
    float minTurningPower;
    float rudderForceRollDamping;
    float counterSteeringMultiplier;
    uint8_t _pad_6[0x4];
    struct BezierCurve* rudderForceBySpeedRatio;
    uint8_t _pad_7[0x88];
    float hydroDynamicScalar;
    float hydroDynamicAngle;
    float hydroDynamicRollDamping;
    uint8_t _pad_8[0x4];
    struct Vec3* hydroDynamicPivot;
    uint8_t _pad_9[0x10];
    float maxDriftAngle;
    uint8_t _pad_10[0x4];
    struct BezierCurve* hydroDynamicMomentByDriftAngle;
    uint8_t _pad_11[0x88];
    struct BezierCurve* hydroDynamicMomentBySpeedRatio;
    uint8_t _pad_12[0x88];
};




struct LadderMovementParams {
    uint8_t _pad_0[0x8];
    float movementAcceleration;
    float movementSpeedUpwards;
    float movementSpeedDownwards;
    float movementSprintUpSpeedScale;
    float movementSprintDownSpeedScale;
    float movementQuickSettleSpeedScale;
    float movementSlideSpeedMaxVel;
    float movementSlideFriction;
    float movementSlideMinGravity;
    float movementSettleSpeed;
    float movementInertiaDecayRate;
    uint8_t _pad_1[0x4];
};




struct SAuthoritativeStatsRecording {
    uint8_t _pad_0[0x18];
};




struct CameraLensStreak {
    uint8_t _pad_0[0x8];
    float Intensity;
    float Width;
    struct RGB* Tint;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_DropTargetPolicyBase {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_BindingsVariableInput* IdVariable;
    uint8_t _pad_1[0x10];
};




struct SCItemTutorialParams {
    uint8_t _pad_0[0x8];
    _Bool tutorialExclusive;
    uint8_t _pad_1[0x7];
    double tutorialPricePercent;
};




struct GlobalResourceObjectContainer {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_Animation {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_TimelineTypeBase* animationTimeline;
    uint8_t _pad_1[0x8];
    struct CryStringT* dynamicStartTimeVariableName;
    uint8_t _pad_2[0x8];
    float duration;
    float delay;
    float delayRandomRange;
    enum ARDataType direction;
    enum ARDataType fillMode;
    uint8_t iterationCount;
    _Bool loopIndefinitely;
    _Bool timeSync;
    _Bool additive;
    _Bool timescaleIndependent;
    uint8_t _pad_3[0x7];
};




struct SActorProceduralAimRecoilCurveNoiseModifiersDef {
    uint8_t _pad_0[0x8];
    float yawNoiseMaxValueModifier;
    float pitchNoiseMaxValueModifier;
    float rollNoiseMaxValueModifier;
    uint8_t _pad_1[0x4];
};




struct SUsableEnterTransitionParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* transitionAudioTrigger;
    uint8_t _pad_1[0x18];
    struct CryStringT* aiSignal;
    uint8_t _pad_2[0x8];
    struct CryStringT* additionalTags;
    uint8_t _pad_3[0x8];
    enum ARDataType eventTriggerMask;
    uint8_t _pad_4[0x4];
    _Bool holsterWeapon;
    uint8_t _pad_5[0x7];
    struct SSharedInteractionParams* enterInteraction;
    uint8_t _pad_6[0x8];
};




struct SEntityHoverPhysicsPartialParams {
    uint8_t _pad_0[0x8];
    float desiredHoverHeight;
    float desiredHoverMinHeight;
    float alignToSurface;
    float alignToSurfaceMaxAngle;
    float alignToSurfaceEasingStartAngle;
    float alignToSurfaceEasingEndAngle;
    float maxGroundSearchDepth;
    float maxClimbHeight;
    float desiredMaxFallSpeed;
    float desiredFallSpeedEasingStartDepth;
    float desiredFallSpeedEasingPower;
    float desiredMaxRaiseSpeed;
    float desiredRaiseSpeedEasingStartHeight;
    float desiredRaiseSpeedEasingPower;
    float desiredMaxRotationalAdjustmentSpeed;
    float desiredAngularSpeedEasingStartAngle;
    float desiredAngularSpeedEasingPower;
    float lateralMoveStopMaxSpeed;
    float yawStopMaxSpeed;
    uint8_t _pad_1[0x4];
};




struct ActionStaminaCosts {
    uint8_t _pad_0[0x8];
    enum ARDataType actionCategory;
    uint8_t _pad_1[0x4];
    struct StaminaCost* instantStaminaCost;
    uint8_t _pad_2[0x8];
    struct StaminaCost* blockedStaminaCost;
    uint8_t _pad_3[0x8];
    float staminaToStart;
    uint8_t _pad_4[0x4];
};




struct ItemResourceNetworkTypeUIData {
    uint8_t _pad_0[0x8];
    struct CryStringT* typeIcon;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* toolTip;
};




struct PlayerNotificationBannerManagerGlobalParams {
    uint8_t _pad_0[0x8];
    float notificationAutoExpirationUpdaterIntervalSeconds;
    uint8_t _pad_1[0x4];
};




struct SEntityVisAreaPhysicsGridParams {
    uint8_t _pad_0[0x8];
    _Bool inheritGravity;
    uint8_t _pad_1[0x7];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x6];
    _Bool mergeMeshes;
    uint8_t _pad_4[0x7];
};




struct SEntityAttachStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onAttachState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onDetachState;
    uint8_t _pad_2[0x8];
};




struct EntitlementItemType {
    uint8_t _pad_0[0x8];
    enum ARDataType Type;
    uint8_t _pad_1[0x4];
};




struct ArmouryItemStat {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* statName;
    struct CryStringT* debugStatName;
    uint8_t _pad_1[0x8];
    float value;
    uint8_t _pad_2[0x4];
};




struct SEntityComponentOrbitalNavPointParams {
    uint8_t _pad_0[0x18];
};




struct SCharacterCustomizerClampedValueParams {
    uint8_t _pad_0[0x8];
    _Bool clampValue;
    uint8_t _pad_1[0x3];
    float minValue;
    float maxValue;
    uint8_t _pad_2[0x4];
};




struct SSalvageCargoParams {
    uint8_t _pad_0[0x8];
    struct Tag* conveyorRetractedStateTag;
    uint8_t _pad_1[0x10];
    struct Tag* conveyorDeployedStateTag;
    uint8_t _pad_2[0x10];
    struct CryStringT* ejectCargoBoxInteration;
    uint8_t _pad_3[0x8];
    struct CryStringT* conveyorResetInteration;
    uint8_t _pad_4[0x8];
    struct SSalvageAreaBoxParams* obstructionArea;
    uint8_t _pad_5[0x30];
    struct CLocIdentifier* cargoTabLocString;
    struct CLocIdentifier* createTabLocString;
    float extractionRateUpdateInterval;
    float extractionRateAveragingInterval;
    float minCargoBoxSize;
    float maxCargoBoxSize;
    float boxFillingTimePerSCU;
    uint8_t _pad_6[0x4];
};




struct DescriptionScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SWeaponProceduralHeadRecoilCurveModifierDef {
    uint8_t _pad_0[0x8];
    struct SHeadRecoilNoiseModifier* positionModifier;
    uint8_t _pad_1[0x30];
    struct SHeadRecoilNoiseModifier* rotationModifier;
    uint8_t _pad_2[0x30];
    float headRecoilTimeModifier;
    float frequencyModifier;
    float smoothingSpeedModifier;
    uint8_t _pad_3[0x4];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitVerticalAlignment {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    enum ARDataType paramField;
};




struct DuckPose {
    uint8_t _pad_0[0x8];
    float spineMaxBendAngle;
    float spineToHipRatio;
    struct Vec2* hipHorOffsetScale;
    uint8_t _pad_1[0x8];
};




struct MonitoredZoneControllerParams {
    uint8_t _pad_0[0x18];
    struct SInteractionState* stateToEnable;
    uint8_t _pad_1[0x8];
    struct SInteractionState* stateToDisable;
    uint8_t _pad_2[0x8];
};




struct SResetKeypadInputGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_BindingsBooleanFromNumber {
    uint8_t _pad_0[0x50];
    float number;
    enum ARDataType type_;
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsNumberBase* inputB;
    uint8_t _pad_2[0xa8];
};




struct SActorForceReactionFOVScaleConfig {
    uint8_t _pad_0[0x8];
    float adsZoomScaleFactor;
    float FOVScaleAtMinImpulse;
    float FOVScaleAtMaxImpulse;
    uint8_t _pad_1[0x4];
    struct SActorForceReactionEnvelope* envelope;
    uint8_t _pad_2[0x10];
};




struct EAScoringParams {
    uint8_t _pad_0[0x18];
    _Bool countScoreDown;
    uint8_t _pad_1[0x7];
    struct SPlayerScoring* playerScoring;
    uint8_t _pad_2[0x8];
    struct STeamScoring* teamScoring;
    uint8_t _pad_3[0x8];
    struct EAGameCompletionAwardBaseParams* gameCompletionAward;
    uint8_t _pad_4[0x8];
    float RECMultiplier;
    enum ARDataType mvpType;
    int32_t killsForAceKill;
    int32_t aceBonusCap;
    int32_t killsForKillingSpree;
    int32_t killingSpreeBonusCap;
    int32_t killsForNemesisKill;
    int32_t deathCountForResurgentKill;
    float underdogBonusScalar;
    float saviorTime;
    float teamRevengeKillTime;
    float itemDamageFactor;
    _Bool enableScoreBalancing;
    uint8_t _pad_5[0x3];
    float scoreBalancingMirrorScore;
    struct EAScoringAssistParams* assistParams;
    uint8_t _pad_6[0x40];
    _Bool useCompetitiveScoring;
    uint8_t _pad_7[0x3];
    float positiveCurveHeight;
    float negativeCurveHeight;
    enum ARDataType ratingScoreMultiplier;
};




struct RadarJammerSharedParams {
    uint8_t _pad_0[0x8];
    float generalHUDDistortionStrength;
    float minimapDistortionStrength;
    float jammedActiveDetectionRange;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* jammedPingNotificationText;
    struct CryStringT* jammedPingNotificationAudioTag;
    uint8_t _pad_2[0x8];
};




struct ItemAwardWeightingsBase {
    uint8_t _pad_0[0x8];
};




struct AreaDisruptionGameplayTrigger {
    uint8_t _pad_0[0x8];
    int32_t severity;
    uint8_t _pad_1[0x4];
};




struct SSalvageRepairItemTypeLocalizationPair {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* typeLoc;
};




struct EnvironmentLightMiscParams {
    uint8_t _pad_0[0x8];
    _Bool useClipBox;
    uint8_t _pad_1[0x3];
    float specularMultiplier;
    float attenuationFalloffMax;
    uint8_t _pad_2[0x4];
    struct CryStringT* cubemapTexture;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocks_BindingsStringFromBoolean {
    uint8_t _pad_0[0x50];
    struct CryStringT* isTrue;
    uint8_t _pad_1[0x8];
    struct CryStringT* isFalse;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsStringBase* inputTrue;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_BindingsStringBase* inputFalse;
    uint8_t _pad_4[0x8];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_5[0xf8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeVerticalAlignment {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SShieldResistance {
    uint8_t _pad_0[0x8];
    float Max;
    float Min;
};




struct EntityComponentAudioHitListenerParams {
    uint8_t _pad_0[0x18];
    _Bool calculateOnlyWhenPlayerContained;
    uint8_t _pad_1[0x7];
    struct AudioHitListenerDefinition* hitListenerDefinition;
    uint8_t _pad_2[0x10];
};




struct SMissileObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct GameNotificationDockItemParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* notificationPositivePrompt;
    struct CLocIdentifier* notificationNegativePrompt;
    struct CLocIdentifier* notificationDismissPrompt;
};




struct SecurityClearanceTokenData_PrisonInmate {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
};




struct SIStatsRecordingModule {
    uint8_t _pad_0[0x18];
};




struct LandingAreaParamOverrideParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* landingAreaOverride;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* HUDDisplayName;
};




struct ItemResourceModifier {
    uint8_t _pad_0[0x8];
    struct ItemResourceDeltaInject* delta;
    uint8_t _pad_1[0x8];
};




struct ItemAwardWeightingsParams {
    uint8_t _pad_0[0x8];
    struct ItemAwardWeightingsRecord* awardsRecord;
    uint8_t _pad_1[0x10];
};




struct RadiationStatePropertyParams {
    uint8_t _pad_0[0x8];
    enum ARDataType modifierType;
    float signatureValue;
};




struct AnimationFloatVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Range* range;
    uint8_t _pad_2[0x8];
    float defaultValue;
    uint8_t _pad_3[0x4];
    struct AnimationVariableInterpolation* defaultInterpolation;
    uint8_t _pad_4[0x8];
};




struct SSecondaryAmmoContainerParams {
    uint8_t _pad_0[0x8];
    struct SWeaponConditionBase* condition;
    uint8_t _pad_1[0x8];
    struct EntityClassDefinition* ammoContainerRecord;
    uint8_t _pad_2[0x10];
};




struct LocationMissionLimit {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    float cooldown;
    _Bool autoConsumeIfPlayerAtLocation;
    uint8_t _pad_2[0x3];
    float playerAtLocationCooldown;
    int32_t maxMissionInstances;
    struct TagList* dependentParentTags;
    uint8_t _pad_3[0x30];
    struct TagList* dependentChildTags;
    uint8_t _pad_4[0x30];
};




struct SEAPlayerLoadoutSnapshotEntry {
    uint8_t _pad_0[0x8];
    struct SItemPortLoadoutBaseParams* loadout;
    uint8_t _pad_1[0x8];
};




struct SCItemTurretRemoteParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_1[0x8];
    struct Camera* remoteCamera;
    uint8_t _pad_2[0x10];
    _Bool turretOnlyUsableInRemoteCamera;
    uint8_t _pad_3[0x7];
};




struct ActorFallOverlayNode {
    uint8_t _pad_0[0x8];
    enum ARDataType configVariant;
    uint8_t _pad_1[0x4];
    struct FragmentInfo* arc;
    uint8_t _pad_2[0x40];
    struct FragmentRequiredInfo* loop;
    uint8_t _pad_3[0x40];
    struct FragmentInfo* outro;
    uint8_t _pad_4[0x40];
    float transitionFromInterruptDelay;
    float transitionFromInterruptDuration;
};




struct EntryOptionalData_SpawnWith {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct TagsDNFTerm* tagsToMatch;
    uint8_t _pad_2[0x60];
    enum ARDataType mode;
    int32_t min;
    int32_t max;
    uint8_t _pad_3[0x4];
};




struct AnnunciatorProviderParams {
    uint8_t _pad_0[0x18];
    float shotAlertTime;
    uint8_t _pad_1[0x4];
};




struct AsteroidState {
    uint8_t _pad_0[0x8];
    enum ARDataType debrisDensityMod;
    float debrisDensity;
};




struct ActorSomaticShakingParams {
    uint8_t _pad_0[0x8];
    struct ActorSomaticShakeParams* shiveringParams;
    uint8_t _pad_1[0x78];
    struct ActorSomaticShakeParams* armsLockShakeParams;
    uint8_t _pad_2[0x78];
};




struct SecurityNetworkVariableEffect_SetHostilityRules {
    uint8_t _pad_0[0x8];
    struct SHostilityRules* rules;
    uint8_t _pad_1[0x50];
};




struct SActorForceReactionLimitDef {
    uint8_t _pad_0[0x8];
    float weaponTwitchMaxOffset;
    float aimPunchMaxAngle;
    float headRecoilMaxAngleHor;
    float headRecoilMaxAngleVert;
    float headRecoilMaxAngleRoll;
    uint8_t _pad_1[0x4];
};




struct SWeaponAttachmentIconPair {
    uint8_t _pad_0[0x10];
    struct EntityClassDefinition* attachmentEntity;
    uint8_t _pad_1[0x10];
    struct GlobalResourceTexture* iconPath;
    uint8_t _pad_2[0x10];
};




struct PersonalThoughtInventoryOtherFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayIconPath;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* name;
    _Bool disableForFPSKiosk;
    uint8_t _pad_2[0x7];
};




struct SActorForceReactionBlockConfig {
    uint8_t _pad_0[0x8];
    float directTwitchDisableDuration;
    float directStaggerDisableDuration;
    float directKnockdownDisableDuration;
    float indirectFlinchDisableDuration;
    float indirectStaggerDisableDuration;
    float indirectKnockdownDisableDuration;
    float sustainedDeltaFlinchDisableDuration;
    float sustainedDeltaStaggerDisableDuration;
    float sustainedDeltaKnockdownDisableDuration;
    float sustainedKnockdownDisableDuration;
    _Bool useEffortSetWhileDisablingReactions;
    uint8_t _pad_1[0x7];
};




struct SRopeProxyParams {
    uint8_t _pad_0[0x18];
};




struct MissionType {
    uint8_t _pad_0[0x8];
    struct CryStringT* IconName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* LocalisedTypeName;
    float DisplayTime;
    uint8_t _pad_2[0x4];
    struct CryStringT* svgIconPath;
    uint8_t _pad_3[0x8];
};




struct FireHazardSurfaceProperties {
    uint8_t _pad_0[0x8];
    struct SRGBA8* albedoTintStart;
    uint8_t _pad_1[0x8];
    struct SRGBA8* albedoTintEnd;
    uint8_t _pad_2[0x8];
    struct SRGBA8* specularTint;
    uint8_t _pad_3[0x8];
    struct SRGBA8* smoothnessTint;
    uint8_t _pad_4[0x8];
    float edgesIntensity;
    float embersIntensity;
    float burnSharpness;
    uint8_t _pad_5[0x4];
};




struct ContractClass_Contract {
    uint8_t _pad_0[0x8];
    struct ActiveContractSettings* additionalParams;
    uint8_t _pad_1[0x8];
    struct ContractAutoFinishSettings* autoFinishSettings;
    uint8_t _pad_2[0x28];
};




struct SGlobalCuttableShapeParams {
    uint8_t _pad_0[0x8];
    float heatRequiredPerSegment;
    float heatDissipationPerSecond;
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_1[0x10];
    struct GlobalResourceParticle* finishedEffect;
    uint8_t _pad_2[0x10];
    float hitRadiusMin;
    float hitRadiusMax;
    float damageMultiplier;
    float impactParticleLifeTime;
    struct RGB* highlightColor;
    uint8_t _pad_3[0x10];
    float highlightOccludedAlpha;
    float highlightOutlineWidth;
    _Bool highlightOutlineOnly;
    uint8_t _pad_4[0x7];
};




struct ShipInsuranceParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* shipEntityClassName;
    uint8_t _pad_1[0x8];
    float baseWaitTimeMinutes;
    float mandatoryWaitTimeMinutes;
    uint32_t baseExpeditingFee;
    uint8_t _pad_2[0x4];
};




struct SBreakablePhysicsParams {
    uint8_t _pad_0[0x8];
    int32_t maxSimultaneousCracks;
    float maxPushForce;
    float maxPullForce;
    float maxShiftForce;
    float maxTwistTorque;
    float maxBendTorque;
    float crackWeaken;
    uint8_t _pad_1[0x4];
};




struct InteractionConditionCanAffordItem {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct TriggerSubConditionInteractionDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* interactableSuperGUID;
    uint8_t _pad_1[0x8];
    struct CryStringT* siblingFailRule;
    uint8_t _pad_2[0x8];
    uint32_t interaction;
    uint8_t _pad_3[0x4];
    struct CryStringT* successOrFailRule;
    uint8_t _pad_4[0x8];
    struct CryStringT* interactorSuperGUID;
    uint8_t _pad_5[0x8];
};




struct PlanetSpawnedEntityParams {
    uint8_t _pad_0[0x18];
};




struct RastarUIParams {
    uint8_t _pad_0[0x18];
};




struct BlinkingLightParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float minFrequency;
    float maxFrequency;
    uint8_t _pad_2[0x4];
};




struct SItemPortDefAttachmentImplementationBase {
    uint8_t _pad_0[0x8];
};




struct Primitive_Quad {
    uint8_t _pad_0[0x8];
    struct Vec3* Centre;
    uint8_t _pad_1[0x10];
    struct Vec2* Size;
    uint8_t _pad_2[0x8];
    struct Vec3* Rotation;
    uint8_t _pad_3[0x10];
    struct Vec2* UV_Start;
    uint8_t _pad_4[0x8];
    struct Vec2* UV_Size;
    uint8_t _pad_5[0x8];
};




struct SReputationStateModifierIncrement {
    uint8_t _pad_0[0x8];
    int32_t value;
    uint8_t _pad_1[0x4];
};




struct CraftingMaterialStatTypeRecord {
    uint8_t _pad_0[0x8];
    struct CryStringT* statName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
};




struct ScanDisplayDeltaSignatureVariableParams {
    uint8_t _pad_0[0x8];
    uint8_t truncateSize;
    _Bool displayIsHidden;
    _Bool displayInBrackets;
    _Bool suffixArrayIndex;
    _Bool suffixSemiColon;
    enum ARDataType auxiliaryFlag;
    uint8_t _pad_1[0x2];
    struct ScanDisplayVariableParams* fallback_;
    uint8_t _pad_2[0x8];
};




struct ServiceBeaconNotificationParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* message;
    float screenTimer;
    float hurryScreenTimer;
    _Bool blocking;
    uint8_t _pad_1[0x7];
    struct GameNotificationDockItemParams* dockNotificationParamsOverride;
    uint8_t _pad_2[0x10];
};




struct SSuperGUIDComponentParams {
    uint8_t _pad_0[0x18];
};




struct IntoxicationTurretModifierParams {
    uint8_t _pad_0[0x8];
    struct ToxiInputModifierDistortion* distortion;
    uint8_t _pad_1[0x138];
    struct ToxiInputModifierDelay* delay;
    uint8_t _pad_2[0x10];
    struct ToxiInputModifierAxis* yaw;
    uint8_t _pad_3[0x20];
    struct ToxiInputModifierAxis* pitch;
    uint8_t _pad_4[0x20];
};




struct ContractLifeTime {
    uint8_t _pad_0[0x8];
    float instanceLifeTime;
    float instanceLifeTimeVariation;
};




struct SCItemRadarSignatureDetection {
    uint8_t _pad_0[0x8];
    float sensitivity;
    float deltaSignatureSensitivity;
    float piercing;
    float deltaSignaturePierce;
    _Bool permitPassiveDetection;
    _Bool permitActiveDetection;
    uint8_t _pad_1[0x6];
};




struct ScanSFXSharedParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* startScan;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* stopScan;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* infoPopulate;
    uint8_t _pad_3[0x18];
};




struct SCItemTurretJointMovementParams {
    uint8_t _pad_0[0x8];
    struct Tag* movementTag;
    uint8_t _pad_1[0x10];
    struct CryStringT* jointName;
    uint8_t _pad_2[0x8];
    _Bool slavedOnly;
    _Bool restrictTargetAngles;
    uint8_t _pad_3[0x6];
    struct SCItemTurretJointMovementAxisParams* pitchAxis;
    uint8_t _pad_4[0x8];
    struct SCItemTurretJointMovementAxisParams* rollAxis;
    uint8_t _pad_5[0x8];
    struct SCItemTurretJointMovementAxisParams* yawAxis;
    uint8_t _pad_6[0x8];
};




struct QuantumDriveStateModifier {
    uint8_t _pad_0[0x8];
    struct QuantumTravelPreparationStates* calibrationStates;
    uint8_t _pad_1[0x8];
    struct QuantumTravelPreparationStates* spoolStates;
    uint8_t _pad_2[0x8];
    struct QuantumTravelStates* travelStates;
    uint8_t _pad_3[0x8];
};




struct SCommonDamageHandling {
    uint8_t _pad_0[0x18];
    _Bool damageDisabled;
    uint8_t _pad_1[0x7];
};




struct MissionFlowCondition_AllTokensState {
    uint8_t _pad_0[0x8];
    enum ARDataType tokenState;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_ComponentParameterInputString {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
    struct CryStringT* value;
    uint8_t _pad_2[0x8];
};




struct LinkedStatRuleHasCrossedAboveThreshold {
    uint8_t _pad_0[0x8];
    float threshold;
    uint8_t _pad_1[0x4];
};




struct PlayerChoice_Option {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    int32_t id;
    _Bool isPrimary;
    uint8_t _pad_1[0x3];
};




struct CapsuleFieldGeom {
    uint8_t _pad_0[0x8];
    struct Vec3* center;
    uint8_t _pad_1[0x10];
    struct Vec3* axis;
    uint8_t _pad_2[0x10];
    float radius;
    float hh;
};




struct EnvironmentLightStateParams_Cinematic {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float intensity;
    uint8_t _pad_2[0x4];
    struct CryStringT* presetTag;
    uint8_t _pad_3[0x8];
};




struct SIPlayerStats {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_FieldModifierRecordRef {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_FieldModifierRecordRefTypeBase* field;
    uint8_t _pad_1[0x8];
};




struct SAtmosphericHeatingParams {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct Tag* controlTag;
    uint8_t _pad_2[0x10];
    struct Tag* exitTag;
    uint8_t _pad_3[0x10];
    struct Tag* strengthParameter;
    uint8_t _pad_4[0x10];
    struct Tag* exitStrengthParameter;
    uint8_t _pad_5[0x10];
};




struct SXYZCurves {
    uint8_t _pad_0[0x8];
    struct BezierCurve* xCurve;
    uint8_t _pad_1[0x88];
    struct BezierCurve* yCurve;
    uint8_t _pad_2[0x88];
    struct BezierCurve* zCurve;
    uint8_t _pad_3[0x88];
};




struct SSequencerPlayerUsableTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* name;
    uint8_t _pad_1[0x10];
};




struct SBoxHazardAreaShapeParams {
    uint8_t _pad_0[0x8];
    struct Vec3* dimensions;
    uint8_t _pad_1[0x10];
};




struct SWeaponProceduralHeadRecoilCurveConfigDef {
    uint8_t _pad_0[0x8];
    struct SVecWithNoiseParams* position;
    uint8_t _pad_1[0x38];
    struct SVecWithNoiseParams* rotation;
    uint8_t _pad_2[0x38];
    struct SAmplitudeFreqencyDecayCurves* curves;
    uint8_t _pad_3[0x8];
    float headRecoilTime;
    float frequency;
    float smoothingSpeed;
    uint8_t _pad_4[0x4];
};




struct InnerThought_Anim {
    uint8_t _pad_0[0x8];
    struct InnerThought_AnimBase* type_;
    uint8_t _pad_1[0x8];
};




struct SEAActionItemMessageDef {
    uint8_t _pad_0[0x8];
    int32_t messagePriority;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* message;
};




struct HoverHeight {
    uint8_t _pad_0[0x8];
    float desiredHoverHeight;
    uint8_t _pad_1[0x4];
    struct Range* hoverHeightOffsetRange;
    uint8_t _pad_2[0x8];
    float hoverHeightOffsetAcceleration;
    float hoverHeightOffsetMaxSpeed;
    struct Range* speedRangeForExtraHeight;
    uint8_t _pad_3[0x8];
    float maxExtraHoverHeight;
    uint8_t _pad_4[0x4];
};




struct DriverScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct InteractionConditionUsableNotInMotion {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    float maxSpeed;
    uint8_t _pad_2[0x4];
};




struct SQuantumTracePointParams {
    uint8_t _pad_0[0x18];
    struct Marker_Configuration* markerConfig;
    uint8_t _pad_1[0x10];
    float lifeTime;
    uint8_t _pad_2[0x4];
};




struct CraftingRecipeResultsRecord {
    uint8_t _pad_0[0x8];
    struct CraftingRecipeResults_Base_NonRef* results;
    uint8_t _pad_1[0x8];
};




struct CraftingBlueprintTier {
    uint8_t _pad_0[0x8];
    struct CraftingRecipe_Base* recipe;
    uint8_t _pad_1[0x8];
    struct CraftingResearch_Base* research;
    uint8_t _pad_2[0x8];
};




struct DeathScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct EAExperimentalModeResetTimeParams {
    uint8_t _pad_0[0x8];
    enum ARDataType weekday;
    uint8_t _pad_1[0x3];
    int32_t hour;
    int32_t minute;
    _Bool showSecondsInTimer;
    uint8_t _pad_2[0x3];
    struct CLocIdentifier* locRestartRequired;
};




struct InteractionConditionSwapOnly {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SimpleSpriteSlotDouble {
    uint8_t _pad_0[0x8];
    struct SimpleSpriteSheet* sheet;
    uint8_t _pad_1[0x10];
    _Bool flipU;
    _Bool flipV;
    uint8_t row;
    uint8_t column;
    uint8_t _pad_2[0x4];
    uint8_t rowAlt;
    uint8_t columnAlt;
    uint8_t _pad_3[0x6];
};




struct SCItemSalvageControllerParams {
    uint8_t _pad_0[0x18];
    struct SSalvageArmParams* armParams;
    uint8_t _pad_1[0x8];
    struct SSalvageScrapingParams* scrapingParams;
    uint8_t _pad_2[0x8];
    struct SSalvageStructuralParams* structuralParams;
    uint8_t _pad_3[0x8];
    struct SSalvageCargoParams* cargoParams;
    uint8_t _pad_4[0x8];
    struct SSalvageTractorParams* tractorParams;
    uint8_t _pad_5[0x8];
    float sensorRaycastArmingDistance;
    int32_t numSupportedSalvageHeads;
    struct SSalvageAudioParams* salvageAudioParams;
    uint8_t _pad_6[0x50];
    _Bool useControllerToInitalizeControlComponent;
    _Bool usesCargoGrid;
    _Bool autoEjectRequireManualStart;
    uint8_t _pad_7[0x5];
};




struct Behavior_VehicleEffectParams {
    uint8_t _pad_0[0x8];
    _Bool enableEngineTrails;
    _Bool enableEngineContrails;
    uint8_t _pad_1[0x6];
    struct Behavior_CustomVehicleEffectsPreset* customVehicleEffects;
    uint8_t _pad_2[0x8];
};




struct PrisonDepositKioskParams {
    uint8_t _pad_0[0x18];
};




struct EAPlayableAreaMarkerTracker {
    uint8_t _pad_0[0x8];
    struct MarkerAR_ConfigDef* ARMarkerConfig;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* distanceUnits;
    float ARMarkerAlpha;
    _Bool scaleMarkerByDistance;
    uint8_t _pad_2[0x3];
    float minScaleDistance;
    float maxScaleDistance;
    float minSize;
    float maxSize;
    _Bool allowClipping;
    uint8_t _pad_3[0x7];
    struct CLocIdentifier* helperText;
    int32_t maxDistance;
    uint8_t _pad_4[0x4];
};




struct CinematicCameraControllerSetup {
    uint8_t _pad_0[0x8];
    float actionHoldTime;
    float expiryLingerTime;
};




struct MapDisplayRenderLayerParams {
    uint8_t _pad_0[0x8];
    _Bool visible;
    uint8_t _pad_1[0x7];
    struct CryStringT* materialPath;
    uint8_t _pad_2[0x8];
};




struct SurfaceAudioProperties {
    uint8_t _pad_0[0x8];
    struct CryStringT* surfaceType;
    uint8_t _pad_1[0x8];
    float damping;
    uint8_t _pad_2[0x4];
    struct GlobalResourceAudio* collisionTrigger;
    uint8_t _pad_3[0x18];
    float collisionTriggerMinPlayTime;
    uint8_t _pad_4[0x4];
    struct GlobalResourceAudio* slideStartTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* rollStartTrigger;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* slideStopTrigger;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* rollStopTrigger;
    uint8_t _pad_8[0x18];
    struct AudioRtpc* rtpcSlideVelocity;
    uint8_t _pad_9[0x18];
    struct AudioRtpc* rtpcRollVelocity;
    uint8_t _pad_10[0x18];
    struct AudioRtpc* rtpcMassOther;
    uint8_t _pad_11[0x18];
    struct AudioRtpc* rtpcTimeSinceLastOneshot;
    uint8_t _pad_12[0x18];
    struct AudioRtpc* rtpcMomentum;
    uint8_t _pad_13[0x18];
    struct AudioSwitch* surfaceSwitchAndState;
    uint8_t _pad_14[0x30];
};




struct DamageBase {
    uint8_t _pad_0[0x8];
};




struct ScanDisplayConditionCompareParams {
    uint8_t _pad_0[0x8];
    enum ARDataType scanCategory;
    enum ARDataType scanInformation;
    uint8_t _pad_1[0x2];
    float thresholdValue;
    enum ARDataType comparison;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* displayValue;
};




struct SBaseHealthComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_RendererPolicyBase {
    uint8_t _pad_0[0x8];
};




struct InputPromptConfig {
    uint8_t _pad_0[0x8];
    struct InputAction* actionName;
    uint8_t _pad_1[0x28];
    struct CLocIdentifier* displayName;
    _Bool showLabel;
    uint8_t _pad_2[0x3];
    enum ARDataType inputPromptMode;
    enum ARDataType inputPromptBoundTo;
    uint8_t _pad_3[0x4];
    struct CryStringT* helperName;
    uint8_t _pad_4[0x8];
    int32_t objectSlot;
    uint8_t _pad_5[0x4];
    struct QuatT* offset;
    uint8_t _pad_6[0x50];
    _Bool isAngleConstrained;
    _Bool shouldShowOnSuccessEffect;
    uint8_t _pad_7[0x6];
};




struct SWeaponActionMiningParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    _Bool scanningAlwaysActive;
    uint8_t _pad_10[0x7];
};




struct ChatEmoteAnimData {
    uint8_t _pad_0[0x8];
    struct CryStringT* fragmentID;
    uint8_t _pad_1[0x8];
    struct CryStringT* tagID;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* textToDisplay;
    enum ARDataType type_;
    uint8_t _pad_3[0x4];
};




struct BoidsVehicleRepelRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float effectDistance;
    uint8_t _pad_2[0x4];
};




struct ScreenEffects_ParamStrengthBehavior {
    uint8_t _pad_0[0x8];
    struct Tag* strengthTag;
    uint8_t _pad_1[0x10];
};




struct LightStateParams_Cinematic {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float intensity;
    uint8_t _pad_2[0x4];
    struct CryStringT* presetTag;
    uint8_t _pad_3[0x8];
    int32_t lightStyle;
    float temperature;
};




struct VehicleAIPropertiesParams {
    uint8_t _pad_0[0x8];
    struct VehicleAITargetingParams* aiTargetingParams;
    uint8_t _pad_1[0x8];
};




struct EntityReferenceDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* superGUID;
    uint8_t _pad_1[0x8];
};




struct STargetByLineIntersection {
    uint8_t _pad_0[0x8];
    float angle;
    uint8_t _pad_1[0x4];
};




struct ActorStateFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
};




struct SSCActorExternalForceResponseComponentParams {
    uint8_t _pad_0[0x18];
};




struct SScanTargeting {
    uint8_t _pad_0[0x8];
    struct STargetingMethodRecord* targetingMethodRecord;
    uint8_t _pad_1[0x10];
};




struct AllPortRefillData {
    uint8_t _pad_0[0x8];
    float Delay;
    uint8_t _pad_1[0x4];
};




struct StarMapAsteroidRing {
    uint8_t _pad_0[0x8];
    float densityScale;
    float sizeScale;
    double innerRadius;
    double outerRadius;
    float depth;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_BindingsTransformField {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType field;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsTransformBase* input;
    uint8_t _pad_3[0x8];
};




struct UIBindingsConsumerEntityComponentParams {
    uint8_t _pad_0[0x18];
    _Bool linkToPort;
    uint8_t _pad_1[0x7];
};




struct ForceFeedbackMotor {
    uint8_t _pad_0[0x8];
    float frequency;
    uint8_t _pad_1[0x4];
    struct CryStringT* pattern;
    uint8_t _pad_2[0x8];
    struct CryStringT* envelope;
    uint8_t _pad_3[0x8];
};




struct SEntityEffectSystem_AudioEnvironmentFeedbackZone {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct AudioEnvironmentFeedbackZoneSetup* zone;
    uint8_t _pad_3[0x10];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_4[0x140];
};




struct AttachableStateModifierContext_Sibling {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
};




struct SShopDebugHelperComponentParams {
    uint8_t _pad_0[0x18];
};




struct LoadoutKit {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    struct SItemPortLoadoutBaseParams* loadout;
    uint8_t _pad_1[0x8];
};




struct LightStyleParams {
    uint8_t _pad_0[0x8];
    float animationSpeed;
    int32_t animationPhase;
    _Bool randomAnimationPhase;
    uint8_t _pad_1[0x7];
    struct CryStringT* lightanimation;
    uint8_t _pad_2[0x8];
    float angularSpeed;
    uint8_t _pad_3[0x4];
};




struct SSequencerTurretSetLimiterTagTaskParams {
    uint8_t _pad_0[0x20];
    struct Tag* limiterTag;
    uint8_t _pad_1[0x10];
};




struct LandingAreaGroupParams {
    uint8_t _pad_0[0x18];
    struct Vec3* dimensions;
    uint8_t _pad_1[0x10];
};




struct SControlledEntityAutoCraneData {
    uint8_t _pad_0[0x8];
    struct Vec3* autoCraneDirectionPerUnitToGround;
    uint8_t _pad_1[0x10];
    struct Vec3* autoCraneDropOffset;
    uint8_t _pad_2[0x10];
    struct Vec3* autoCraneGrabOffset;
    uint8_t _pad_3[0x10];
    float autoCraneSpeed;
    float autoCranePullLockTolerance;
    struct SControlledEntityAutoCraneCurve* loweringCurves;
    uint8_t _pad_4[0x40];
    struct SControlledEntityAutoCraneCurve* raisingCurves;
    uint8_t _pad_5[0x40];
    float secondsDelayBeforeRaise;
    uint8_t _pad_6[0x4];
};




struct SAttachableEntityParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* sourcePort;
    uint8_t _pad_1[0x8];
    struct CryStringT* targetPort;
    uint8_t _pad_2[0x8];
    struct CryStringT* entityClassName;
    uint8_t _pad_3[0x10];
};




struct AudioFootstepSurfaceMapping {
    uint8_t _pad_0[0x8];
    struct CryStringT* surfaceType;
    uint8_t _pad_1[0x8];
    struct CryStringT* heelLandAudioTrigger;
    uint8_t _pad_2[0x8];
    struct CryStringT* toeLandAudioTrigger;
    uint8_t _pad_3[0x8];
    struct CryStringT* footLiftAudioTrigger;
    uint8_t _pad_4[0x8];
    struct CryStringT* turnPlayAudioTrigger;
    uint8_t _pad_5[0x8];
    struct CryStringT* turnStopAudioTrigger;
    uint8_t _pad_6[0x8];
    int32_t fadeSteps;
    uint8_t _pad_7[0x4];
};




struct CameraLensChromaticAberration {
    uint8_t _pad_0[0x8];
    float Transverse;
    float Axial;
};




struct GasCloudOverrideSphereVolumeParams {
    uint8_t _pad_0[0x8];
    float radius;
    float fade;
};




struct WeaponControllerMissileEventStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* armMissile;
    uint8_t _pad_1[0x8];
    struct SInteractionState* fireMissile;
    uint8_t _pad_2[0x8];
};




struct AudioValueOutputBehaviourCamera {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    _Bool enableShake;
    uint8_t _pad_2[0x3];
    float localModifier;
    struct Ang3* offsetAngle;
    uint8_t _pad_3[0x10];
    enum ARDataType offsetAngleInput;
    uint8_t _pad_4[0x4];
    struct BezierCurve* offsetAngleModifier;
    uint8_t _pad_5[0x88];
    _Bool offsetAngleModifierUse;
    uint8_t _pad_6[0x7];
    struct Vec3* offsetPosition;
    uint8_t _pad_7[0x10];
    enum ARDataType offsetPositionInput;
    uint8_t _pad_8[0x4];
    struct BezierCurve* offsetPositionModifier;
    uint8_t _pad_9[0x88];
    _Bool offsetPositionModifierUse;
    uint8_t _pad_10[0x3];
    float shakesPerSecond;
    float translationNoise;
    float rotationNoise;
    float smoothFactor;
    uint8_t _pad_11[0x4];
};




struct SOverrideControlledEntityCameraParams {
    uint8_t _pad_0[0x8];
    _Bool shouldOverride;
    uint8_t _pad_1[0x7];
    struct SControlledEntityCameraParams* cameraData;
    uint8_t _pad_2[0x48];
};




struct BreathingComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCentiCargoUnit {
    uint8_t _pad_0[0x8];
    int32_t centiSCU;
    uint8_t _pad_1[0x4];
};




struct AerodynamicTrailCalculationGasCloudOpticalDensityRange {
    uint8_t _pad_0[0x8];
    struct Range* range;
    uint8_t _pad_1[0x8];
};




struct SPartyMemberEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct SReputationStateModifierBase {
    uint8_t _pad_0[0x8];
};




struct ChatManagerColor {
    uint8_t _pad_0[0x8];
    enum ARDataType colorType;
    uint8_t _pad_1[0x4];
    struct SRGB8* color;
    uint8_t _pad_2[0x8];
};




struct SandboxTrigger {
    uint8_t _pad_0[0x8];
    enum ARDataType sandboxTrigger;
    uint8_t _pad_1[0x4];
};




struct SubsumptionEventReceiverComponentParams {
    uint8_t _pad_0[0x18];
};




struct SpawnPointComponentParams {
    uint8_t _pad_0[0x18];
    struct Faction_LEGACY* faction;
    uint8_t _pad_1[0x10];
    int32_t groupIndex;
    uint8_t _pad_2[0x4];
    struct CryStringT* interactionPoint;
    uint8_t _pad_3[0x8];
    struct CryStringT* interactionName;
    uint8_t _pad_4[0x8];
    _Bool initialSpawn;
    _Bool allowChildActors;
    _Bool registerWithGameRules;
    uint8_t _pad_5[0x5];
};




struct ChatChannelFilterRecord {
    uint8_t _pad_0[0x8];
    struct SChatChannelFilterBase* chatChannelFilter;
    uint8_t _pad_1[0x8];
};




struct SObjectSilhouetteParamsDef {
    uint8_t _pad_0[0x8];
    uint8_t SilhouettePriority;
    uint8_t _pad_1[0x7];
    struct RGB* SilhouetteColour;
    uint8_t _pad_2[0x10];
    float SilhouetteAlpha;
    float OccludedAlpha;
    _Bool OutlineOnly;
    uint8_t _pad_3[0x3];
    float OutlineWidth;
    float InterferenceAmount;
    float InterferenceSpeed;
    float InterferenceTiling;
    float InterferenceBrightness;
};




struct BuildingBlocks_FieldModifierEnumeratedTypeMinWidthBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct GlobalResourceCGF {
    uint8_t _pad_0[0x8];
    struct CryStringT* path;
    uint8_t _pad_1[0x8];
};




struct InnerThought_LegacyUseSystemConfig {
    uint8_t _pad_0[0x8];
    float targetDistance;
    float minDistance;
    float maxDistance;
    float rotationRate;
    float translationRate;
    uint8_t _pad_1[0x4];
    struct InnerThought_Params* innerThought;
    uint8_t _pad_2[0x10];
};




struct SReputationMissionRequirementExpression_LeftParenthesis {
    uint8_t _pad_0[0x8];
};




struct SEntitiesGroupComponentParams {
    uint8_t _pad_0[0x18];
};




struct RadarContactGamePlayProperties {
    uint8_t _pad_0[0x8];
    _Bool perceivedByAISense;
    uint8_t _pad_1[0x7];
};




struct LinkedStatRulePassCrossingBelowThreshold {
    uint8_t _pad_0[0x8];
    float threshold;
    uint8_t _pad_1[0x4];
};




struct EnvironmentalMissionComponentParams {
    uint8_t _pad_0[0x18];
};




struct MissionVariableInteger {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    int32_t value;
    uint8_t _pad_3[0x4];
};




struct UIBindingsVendorEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* namespace_;
    uint8_t _pad_1[0x8];
};




struct SHideAmmoAttachmentParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* attachmentName;
    uint8_t _pad_1[0x8];
    int32_t ammoThreshold;
    _Bool visible;
    uint8_t _pad_2[0xb];
};




struct SIPlayerSetupModule {
    uint8_t _pad_0[0x18];
};




struct FrontendStateParams {
    uint8_t _pad_0[0x18];
};




struct CameraFreeCamConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    float radius;
    float movementSpeed;
    float sprintSpeed;
    float freeCamRotationScale;
    struct CameraDOFFocusDistanceConfig* DOFFocusDistanceConfig;
    uint8_t _pad_7[0x10];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_8[0x20];
};




struct GreenZoneFlagAdditionalSettingsDef {
    uint8_t _pad_0[0x8];
    _Bool applyInVacuum;
    _Bool applyInVehicles;
    uint8_t _pad_1[0x6];
};




struct FireHazardFogParams {
    uint8_t _pad_0[0x8];
    float softEdges;
    float densityOffset;
    float densityMultiplier;
    float maximumDistance;
    float saturationDensity;
    float falloffSharpness;
    float noiseVolumeOffset;
    uint8_t _pad_1[0x4];
    struct FireHazardFogNoiseParams* noise;
    uint8_t _pad_2[0x28];
};




struct ScanOverrideDisplayRemoveParams {
    uint8_t _pad_0[0x8];
    struct ScanDisplayInstanceParams* displayInstance;
    uint8_t _pad_1[0x10];
    enum ARDataType displaySection;
    uint8_t _pad_2[0x7];
};




struct VehicleNavigationTriggerAdapter {
    uint8_t _pad_0[0x8];
    float minSpeedToBeIgnored;
    uint8_t _pad_1[0x4];
};




struct SThrowableLauncher {
    uint8_t _pad_0[0x8];
    float soundRadius;
    enum ARDataType throwMode;
};




struct SSequencerUsableFillConsumableTaskParams {
    uint8_t _pad_0[0x28];
    struct CryStringT* itemPortTag;
    uint8_t _pad_1[0x8];
    _Bool useReservedContents;
    uint8_t _pad_2[0x7];
    struct CryStringT* contentType;
    uint8_t _pad_3[0x8];
    float duration;
    float amountToAdd;
};




struct CameraLensDistortion {
    uint8_t _pad_0[0x8];
    float Radial;
    float Spherical;
    float Coma;
    float Curvature;
};




struct ThrusterGimbalAxis {
    uint8_t _pad_0[0x8];
    struct CryStringT* jointName;
    uint8_t _pad_1[0x8];
    struct CryStringT* animation;
    uint8_t _pad_2[0x8];
    float angleMin;
    float angleMax;
    float speed;
    float accel;
};




struct MotionConnection {
    uint8_t _pad_0[0x8];
    _Bool waitUntillFinished;
    uint8_t _pad_1[0x3];
    float delaySeconds;
    struct CryStringT* waitForEvent;
    uint8_t _pad_2[0x8];
    struct MotionState* nextState;
    uint8_t _pad_3[0x8];
};




struct SEntityComponentHostilityParams {
    uint8_t _pad_0[0x18];
    struct Faction* factionSC;
    uint8_t _pad_1[0x10];
    struct Faction_LEGACY* faction;
    uint8_t _pad_2[0x10];
    struct SHostilityWantedLevelParams* wantedLevelHostility;
    uint8_t _pad_3[0x8];
};




struct MobiGlasClientParams {
    uint8_t _pad_0[0x8];
    struct MobiGlasPositionParams* armPositionParams;
    uint8_t _pad_1[0x28];
    struct MobiGlasPositionParams* headPositionParams;
    uint8_t _pad_2[0x28];
    struct ProcBreathingSetup* procBreathingSetup;
    uint8_t _pad_3[0x10];
};




struct SActorForceReactionEnvelope {
    uint8_t _pad_0[0x8];
    float attackDuration;
    float sustainDuration;
    float releaseDuration;
    uint8_t _pad_1[0x4];
};




struct MissionInitParamFloat {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float value;
    uint8_t _pad_2[0x4];
};




struct EntityEffectSystem_OverrideColorModifier {
    uint8_t _pad_0[0x8];
    struct RGB* overrideColor;
    uint8_t _pad_1[0x10];
};




struct SEntityTraversingNodeTypeEntityLink {
    uint8_t _pad_0[0x8];
    struct Tag* entityTag;
    uint8_t _pad_1[0x10];
};




struct ScreenEffects_ParamStrengthBehavior_RangeEnable {
    uint8_t _pad_0[0x8];
    struct Tag* strengthTag;
    uint8_t _pad_1[0x10];
    float rangeStart;
    float rangeEnd;
};




struct BuildingBlocks_BindingsLocalizedFromNumber {
    uint8_t _pad_0[0x50];
    uint8_t nPlaces;
    uint8_t nZeros;
    _Bool withSeparators;
    _Bool trailingZeros;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x18];
};




struct SUsableAttachFlagParams {
    uint8_t _pad_0[0x8];
    _Bool exteriorOnly;
    _Bool interiorOnly;
    uint8_t _pad_1[0x6];
};




struct NavigationShapeComponentParams {
    uint8_t _pad_0[0x18];
};




struct TriggerSubConditionTimerDef {
    uint8_t _pad_0[0x8];
    float duration;
    uint8_t _pad_1[0x4];
    struct CryStringT* siblingFailRule;
    uint8_t _pad_2[0x8];
};




struct CrafterComponentParams {
    uint8_t _pad_0[0x18];
    struct BlueprintCategoryAvailability_Base* blueprintCategoryAvailability;
    uint8_t _pad_1[0x8];
};




struct RadarDeltaSignatureEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    enum ARDataType priority;
    float expireTime;
    struct RadarDeltaSignatureNotificationParams* notificationParams;
    uint8_t _pad_2[0x30];
};




struct AIWeaponComponentParams {
    uint8_t _pad_0[0x18];
    enum ARDataType magazineRules;
    uint8_t _pad_1[0x7];
};




struct SCItemShieldEmitterParams {
    uint8_t _pad_0[0x18];
    enum ARDataType FaceType;
    float MaxReallocation;
    struct CapacitorAssignmentInputOutputDef* capacitorAssignmentInputOutputRegen;
    uint8_t _pad_1[0x10];
    struct CapacitorAssignmentInputOutputDef* capacitorAssignmentInputOutputRegenNavMode;
    uint8_t _pad_2[0x10];
    struct CapacitorAssignmentInputOutputDef* capacitorAssignmentInputOutputResistance;
    uint8_t _pad_3[0x10];
    float ReconfigurationCooldown;
    float MaxElectricalChargeDamageRate;
    struct GlobalResourceMaterial* ShieldMaterial;
    uint8_t _pad_4[0x10];
    struct Tag* regenerateEffectTag;
    uint8_t _pad_5[0x10];
    struct CryStringT* shieldMeshDeprecated;
    uint8_t _pad_6[0x8];
    struct ShieldTypeParams* shieldEffectType;
    uint8_t _pad_7[0x10];
};




struct SSCSignatureParamsBase {
    uint8_t _pad_0[0x8];
};




struct SCharacterCustomizerDNAHeadParams {
    uint8_t _pad_0[0x8];
    int32_t headId;
    uint8_t _pad_1[0x4];
    struct CryStringT* customMaterial;
    uint8_t _pad_2[0x8];
};




struct ObjectiveHandler_NearLocation {
    uint8_t _pad_0[0x8];
    struct CryStringT* module;
    uint8_t _pad_1[0x8];
    struct MissionModuleHierarchy* moduleHierarchy;
    uint8_t _pad_2[0x10];
    _Bool disableTravelObjectives;
    uint8_t _pad_3[0x3];
    float travelRadiusKM;
    struct ObjectiveDisplayInfo* travelObjectiveInfo;
    uint8_t _pad_4[0x20];
    struct ObjectiveDisplayInfo* returnObjectiveInfo;
    uint8_t _pad_5[0x20];
    struct NavPointSpawnInformation* navPointSpawnInfo;
    uint8_t _pad_6[0x10];
    struct ObjectivePropertyBase* location;
    uint8_t _pad_7[0x8];
    float maxDistance;
    float minDistance;
};




struct BuildingBlocks_FieldModifierEnumeratedTypeMaxWidthBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct InteractionConditionEligibleForPrisonRelease {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct GameRulesEAStatePostGameParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool enableOutro;
    uint8_t _pad_1[0x2];
    float outroDuration;
    float shutdownDelay;
    float awardsDisplayTime;
    struct PostGameScoreboardParams* scoreboard;
    uint8_t _pad_2[0x10];
    struct MatchCycleParams* matchCycle;
    uint8_t _pad_3[0x8];
};




struct Weapon {
    uint8_t _pad_0[0x8];
};




struct ControlHints_QuickSelectWheelInput {
    uint8_t _pad_0[0x8];
    enum ARDataType activationMode;
    uint8_t _pad_1[0x4];
};




struct SubHarvestableMultiConfigRecord {
    uint8_t _pad_0[0x8];
    struct SubHarvestableMultiConfig* multiConfig;
    uint8_t _pad_1[0x48];
};




struct ShipAudioTrackviewParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* startShipTrackviewMovement;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* stopShipTrackviewMovement;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* shipTrackviewVelRtpc;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* shipTrackviewAccelRtpc;
    uint8_t _pad_4[0x18];
    struct AudioRtpc* shipDistanceFromCameraRtpc;
    uint8_t _pad_5[0x18];
};




struct SBBDynamicPropertyFloat {
    uint8_t _pad_0[0x8];
    float value;
    uint8_t _pad_1[0x4];
};




struct SerializedComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCItemShopPedestalParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* entityLinkName;
    uint8_t _pad_1[0x8];
    struct CryStringT* itemPortName;
    uint8_t _pad_2[0x8];
    int32_t itemPortIndex;
    uint8_t _pad_3[0x4];
    struct SItemShopARParams* arParams;
    uint8_t _pad_4[0x8];
};




struct SAudioBreathParameters {
    uint8_t _pad_0[0x8];
    float BreathHeldExhaleMax;
    uint8_t _pad_1[0x4];
};




struct SStandardNotifications {
    uint8_t _pad_0[0x18];
    _Bool showNotifications;
    uint8_t _pad_1[0x7];
};




struct StaminaComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCPlayer {
    uint8_t _pad_0[0x18];
    struct PlayerInventory* playerInventory;
    uint8_t _pad_1[0x18];
    struct SPlayerSkillsParams* playerSkillsParams;
    uint8_t _pad_2[0x1e0];
    struct PlayerMarkerSubscription* playerMarkerSubscriptionParams;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_BindingsStringField {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType field;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsStringBase* input;
    uint8_t _pad_3[0x8];
};




struct RadarDeltaSignatureDetectionParams {
    uint8_t _pad_0[0x8];
    struct RadarDeltaSignatureEntry* deltaSignatureDetection;
    uint8_t _pad_1[0x10];
    _Bool alwaysDetect;
    _Bool markActiveDetection;
    enum ARDataType detectionChargeLevel;
    uint8_t _pad_2[0x1];
    float emissionModifier;
    struct ScanWaveDetectionParams* scanWaveDetectionParams;
    uint8_t _pad_3[0x8];
};




struct SendSetAmmoRegenRateEvent {
    uint8_t _pad_0[0x8];
    float regenRate;
    uint8_t _pad_1[0x4];
    struct SItemPortDef* itemPort;
    uint8_t _pad_2[0x8];
};




struct S42FieldManualContentPiece {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* contentPieceHeading;
    struct CLocIdentifier* contentPieceParagraph;
    struct CryStringT* contentPieceImagePath;
    uint8_t _pad_1[0x8];
};




struct TargetSelectorStateModifier {
    uint8_t _pad_0[0x8];
    struct TargetSelectorRootTargetingStates* rootTargetingStates;
    uint8_t _pad_1[0x8];
    struct TargetSelectorSubTargetingStates* subTargetingStates;
    uint8_t _pad_2[0x8];
    struct TargetSelectorCycleTargetStates* cycleTargetStates;
    uint8_t _pad_3[0x8];
};




struct ProceduralLayoutGlobalOptions {
    uint8_t _pad_0[0x8];
    struct Tag* StraightRoutingElementsTag;
    uint8_t _pad_1[0x10];
    struct Tag* RightAngledRoutingElementsTag;
    uint8_t _pad_2[0x10];
    struct Tag* LeftAngledRoutingElementsTag;
    uint8_t _pad_3[0x10];
    struct Tag* TJunctionRoutingElementsTag;
    uint8_t _pad_4[0x10];
    struct Tag* CrossSectionRoutingElementsTag;
    uint8_t _pad_5[0x10];
    struct Tag* PaddingRoutingElementsTag;
    uint8_t _pad_6[0x10];
    struct Tag* EntryRoutingElementsTag;
    uint8_t _pad_7[0x10];
    struct Tag* HalfConnectorsTag;
    uint8_t _pad_8[0x10];
    struct Tag* FullConnectorsTag;
    uint8_t _pad_9[0x10];
    struct Tag* PortalsTag;
    uint8_t _pad_10[0x10];
    struct Tag* GatesTag;
    uint8_t _pad_11[0x10];
    struct Tag* CapsTag;
    uint8_t _pad_12[0x10];
    struct Tag* DefaultPurposeTag;
    uint8_t _pad_13[0x10];
    struct Tag* DefaultThemeTag;
    uint8_t _pad_14[0x10];
};




struct HandholdAttachPointChoiceParams {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionPlayerVehicleNotInQuantum {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SCommentEntityParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* text;
    uint8_t _pad_1[0x8];
    float size;
    float minScale;
    _Bool hidden;
    uint8_t _pad_2[0x3];
    float maxDistance;
    int32_t charsPerLine;
    _Bool fixed;
    uint8_t _pad_3[0x3];
    struct SRGB8* color;
    uint8_t _pad_4[0x8];
};




struct SandboxTriggerRecordParams {
    uint8_t _pad_0[0x8];
    struct SandboxTriggerRecord* triggerRecord;
    uint8_t _pad_1[0x10];
};




struct SQuantumTrailParams {
    uint8_t _pad_0[0x18];
    float destructionTime;
    float trailLength;
    float viewableDistance;
    float maxVisibleLength;
};




struct SSubstitutionProxyParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_ContextMenuItem {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* locString;
    struct CryStringT* triggerURL;
    uint8_t _pad_1[0x8];
};




struct MobiGlasPersonalMessage_ShipChatScheduleEntry {
    uint8_t _pad_0[0x8];
    float delayTime;
    uint8_t _pad_1[0x4];
    struct MobiGlasPersonalMessage_ShipChat* chatParams;
    uint8_t _pad_2[0x48];
};




struct SEntityTargetingProperties {
    uint8_t _pad_0[0x8];
    struct Vec3* positionOffset;
    uint8_t _pad_1[0x10];
};




struct VoiceChatRxAggregatorParams {
    uint8_t _pad_0[0x18];
};




struct EAScoringAssistThreshold {
    uint8_t _pad_0[0x8];
    int32_t damagePercentage;
    int32_t score;
};




struct BuildingBlocks_PreviewSceneEnhancedRealityRtt {
    uint8_t _pad_0[0x10];
    enum ARDataType renderLayer;
    uint8_t _pad_1[0x7];
    _Bool cardsUseStageRadius;
    uint8_t _pad_2[0x7];
};




struct BuildingBlocks_PrimitiveSettings {
    uint8_t _pad_0[0x8];
    struct CryStringT* primitiveMaterialPath;
    uint8_t _pad_1[0x8];
    struct Vec2* UVStart;
    uint8_t _pad_2[0x8];
    struct Vec2* UVSize;
    uint8_t _pad_3[0x8];
    _Bool isUValuePerPixel;
    _Bool isVValuePerPixel;
    _Bool isGrouped;
    uint8_t _pad_4[0x5];
    struct BuildingBlocks_PrimitiveVisualState* visualState;
    uint8_t _pad_5[0x8];
};




struct BoidsSeparationRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float decayCoefficient;
    float maxAcceleration;
};




struct DialogueBundle {
    uint8_t _pad_0[0x8];
    _Bool usePooling;
    uint8_t _pad_1[0x17];
};




struct SCItemDisplayScreenStateParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* statename;
    uint8_t _pad_1[0x8];
    struct SInteractionState* state;
    uint8_t _pad_2[0x8];
    float stateWear;
    uint8_t _pad_3[0x4];
    struct SCItemDisplayScreenStateLightParams* stateLightParams;
    uint8_t _pad_4[0x20];
    _Bool linkToProvider;
    _Bool operational;
    _Bool transitionEffectOn;
    uint8_t _pad_5[0x5];
};




struct MiningControllerAudioParams {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* scanningProgressRtpc;
    uint8_t _pad_1[0x18];
};




struct ColorGradientComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* texturePath;
    uint8_t _pad_1[0x8];
    float fadeInTime;
    int32_t priority;
    float radius;
    uint8_t _pad_2[0x4];
};




struct CraftingRecipeRecord {
    uint8_t _pad_0[0x8];
    struct CraftingRecipe_Base_NonRef* recipe;
    uint8_t _pad_1[0x8];
};




struct NavigationCostShapeComponentParams {
    uint8_t _pad_0[0x18];
};




struct ProceduralAnimationBone {
    uint8_t _pad_0[0x8];
    enum ARDataType bone;
    int32_t chainLength;
    int32_t layer;
    enum ARDataType operation;
    enum ARDataType relativeTo;
    uint8_t _pad_1[0x4];
    struct Vec3* values;
    uint8_t _pad_2[0x10];
    float delay;
    uint8_t _pad_3[0x4];
};




struct MissionModifier_FactionHostility {
    uint8_t _pad_0[0x8];
    struct CryStringT* modifierName;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x1f];
    struct Faction_LEGACY* faction;
    uint8_t _pad_3[0x10];
    enum ARDataType myReaction;
    enum ARDataType theirReaction;
    _Bool ignoreCriminalHostility;
    uint8_t _pad_4[0x7];
};




struct TinyMachineGraphInstanceComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* GraphFilePath;
    uint8_t _pad_1[0x8];
};




struct PlanetOceanAudioCheckpoint {
    uint8_t _pad_0[0x8];
    int32_t beamCount;
    float range;
    _Bool useDepthAssignment;
    uint8_t _pad_1[0x7];
};




struct SSolarSystem {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct LandingZoneInventory* landingZoneInventory;
    uint8_t _pad_2[0x10];
    struct StarMapObject* DefaultLocation;
    uint8_t _pad_3[0x10];
    struct StarMapObject* SolarSystemRecord;
    uint8_t _pad_4[0x10];
    struct Vec3* galacticPosition;
    uint8_t _pad_5[0x10];
};




struct SCItemElevatorPathNodeParams {
    uint8_t _pad_0[0x18];
    enum ARDataType Type;
    float TeleportTimeScale;
    struct SSharedInteractionParams* doorOpenInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* doorCloseInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* ascentRequestInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* descentRequestInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* cancelStopInteraction;
    uint8_t _pad_5[0x8];
    struct ElevatorPathNodeGatewayParams* gatewayParams;
    uint8_t _pad_6[0x8];
    struct AccessibilityBaseParams* accessibilityParams;
    uint8_t _pad_7[0x8];
};




struct CraftingGameplayPropertyImplValueRange_Int {
    uint8_t _pad_0[0x8];
    int32_t statThreshold;
    int32_t defaultValue;
    int32_t limitValue;
    uint8_t _pad_1[0x4];
};




struct SEntityTraversingNodeTypeChildTag {
    uint8_t _pad_0[0x8];
    struct Tag* filterTag;
    uint8_t _pad_1[0x10];
    _Bool recursive;
    uint8_t _pad_2[0x7];
};




struct UIBindingsInteractionsComponentParams {
    uint8_t _pad_0[0x18];
    float interactionDistance;
    uint8_t _pad_1[0x4];
};




struct SRGBA8 {
    uint8_t _pad_0[0x8];
    uint8_t r;
    uint8_t g;
    uint8_t b;
    uint8_t a;
    uint8_t _pad_1[0x4];
};




struct SISubsumptionMissionModule {
    uint8_t _pad_0[0x18];
};




struct GasCloudLightAudioParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* gasCloudLoop;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* gasCloudNormIntensityRtpc;
    uint8_t _pad_2[0x18];
};




struct SSequencerAnimationTaskParamsBase {
    uint8_t _pad_0[0x20];
};




struct SCItemClothingRadiationResistanceParams {
    uint8_t _pad_0[0x8];
    float MaximumRadiationCapacity;
    float RadiationDissipationRate;
};




struct SEntitySpherePhysicsGridParams {
    uint8_t _pad_0[0x8];
    _Bool inheritGravity;
    uint8_t _pad_1[0x7];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x6];
    float radius;
    uint8_t _pad_4[0x4];
};




struct EntityComponentSpawnClosetNPCParams {
    uint8_t _pad_0[0x18];
};




struct StringUserVariableSetValueTask {
    uint8_t _pad_0[0x20];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* value;
    uint8_t _pad_2[0x8];
};




struct DeliveryTarget {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct TagList* requiredLocationEntityTags;
    uint8_t _pad_2[0x30];
    struct Tag* locationSearchTag;
    uint8_t _pad_3[0x10];
};




struct JournalEntryVideo {
    uint8_t _pad_0[0x8];
    struct VideoComms* videoDef;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* description;
};




struct InteriorMapWorldUIDustParticlesParams {
    uint8_t _pad_0[0x8];
};




struct DockingHUDMessagesParams {
    uint8_t _pad_0[0x8];
    float DockingMessageTimer;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* WaitingPermission;
    struct CLocIdentifier* PermissionDenied;
    struct CLocIdentifier* NoMatching;
    struct CLocIdentifier* OutOfRange;
    struct CLocIdentifier* DockeeLanded;
    struct CLocIdentifier* NoAvailable;
    struct CLocIdentifier* InMotion;
    struct CLocIdentifier* NoQTUndock;
    struct CLocIdentifier* Undocking;
    struct CLocIdentifier* EngagingClamps;
    struct CLocIdentifier* Complete;
    struct CLocIdentifier* DockerExcessiveLinearMotion;
    struct CLocIdentifier* DockerExcessiveLinearOffset;
    struct CLocIdentifier* DockerExcessiveAngularMotion;
    struct CLocIdentifier* DockerExcessiveAngularOffset;
    struct CLocIdentifier* DockerAlignedMessage;
    struct CLocIdentifier* DockerUndockingStartedMessage;
    struct CLocIdentifier* DockerPathBlocked;
};




struct AmmoParams {
    uint8_t _pad_0[0x8];
    enum ARDataType spawnType;
    uint8_t size;
    uint8_t _pad_1[0x3];
    enum ARDataType ammoCategory;
    uint8_t _pad_2[0x4];
    struct CryStringT* UIIconType;
    uint8_t _pad_3[0x8];
    float hitPoints;
    float lifetime;
    float showtime;
    float inheritVelocity;
    int32_t bulletType;
    float speed;
    float impulseScale;
    _Bool noBulletHits;
    _Bool quietRemoval;
    uint8_t _pad_4[0x2];
    struct GlobalResourceAudio* whizSound;
    uint8_t _pad_5[0x18];
    float whizSoundDistance;
    uint8_t _pad_6[0x4];
    struct GlobalResourceAudio* ricochetSound;
    uint8_t _pad_7[0x18];
    _Bool useInConvergence;
    uint8_t _pad_8[0x7];
    struct GlobalResourceParticle* trailParticles;
    uint8_t _pad_9[0x10];
    struct SGeometryResourceParams* geometryResourceParams;
    uint8_t _pad_10[0x8];
    struct SEntityPhysicsControllerParams* physicsControllerParams;
    uint8_t _pad_11[0x8];
    struct PooledLightData* lightPoolParams;
    uint8_t _pad_12[0x8];
    struct ProjectileParams* projectileParams;
    uint8_t _pad_13[0x8];
    struct SSCSignatureSystemParams* radarObjectParams;
    uint8_t _pad_14[0x8];
    struct GlobalResourceAudio* projectileLoopStart;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* projectileLoopStop;
    uint8_t _pad_16[0x18];
    uint32_t shotsPerAudioLoop;
    uint8_t _pad_17[0x4];
    struct CLocIdentifier* displayName;
    uint8_t _pad_18[0x8];
};




struct DefaultAction_LootingInteractionDef {
    uint8_t _pad_0[0x8];
    enum ARDataType lootingInteraction;
    uint8_t _pad_1[0x4];
};




struct ProcAimBallJointTypeConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* jointName;
    uint8_t _pad_1[0x8];
    float rotationRange;
    uint8_t _pad_2[0x4];
    struct AngYPR* rotationRangeOffset;
    uint8_t _pad_3[0x10];
};




struct LegacyCraftingRecipeDef_Base {
    uint8_t _pad_0[0x8];
};




struct MissionDataComponentParams {
    uint8_t _pad_0[0x18];
};




struct FloatModifierAdditive {
    uint8_t _pad_0[0x8];
    _Bool showInUI;
    uint8_t _pad_1[0x7];
    float value;
    uint8_t _pad_2[0x4];
};




struct ActorStatusIncapacitatedUIData {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* unconsciousStateWarning;
    struct CLocIdentifier* downedStateWarning;
    struct CLocIdentifier* overdosedStateWarning;
    struct CLocIdentifier* timeToRevivalString;
    struct CLocIdentifier* timeToDeathString;
    struct CLocIdentifier* downedRevivalBeaconInsufficientFunds;
    struct CLocIdentifier* downedRevivalBeaconAvailable;
    struct CLocIdentifier* downedRevivalBeaconRequested;
    struct CLocIdentifier* downedRevivalBeaconAccepted;
    struct CLocIdentifier* downedRevivalBeaconAbandoned;
};




struct SCItemFishParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* species;
    uint8_t _pad_1[0x8];
    int32_t count;
    uint8_t _pad_2[0x4];
};




struct InteractiveVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_StaticVariableCanvas {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_Canvas* value;
    uint8_t _pad_2[0x10];
};




struct SEASpawnLivesGovernor {
    uint8_t _pad_0[0x8];
    int32_t numLives;
    _Bool teamShareLives;
    _Bool resetEachRound;
    uint8_t _pad_1[0x2];
};




struct DriftingConsciousnessConfig {
    uint8_t _pad_0[0x8];
    float minValue;
    float maxValue;
    float fadeInSpeed;
    float fadeOutSpeed;
    float fadeInDelay;
    float fadeOutDelay;
};




struct CommoditySubtype {
    uint8_t _pad_0[0x8];
    struct CryStringT* typeName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    struct CryStringT* symbol;
    uint8_t _pad_2[0x8];
    struct SRGBA8* color;
    uint8_t _pad_3[0x8];
    float volatility;
    float gForceTolerance;
    float gForceDeltaToDamage;
    float HealthDecayOverTime;
    struct CommodityTemperatureTolerance* temperatureTolerance;
    uint8_t _pad_4[0x20];
    struct DamageResistanceBase* damageResistance;
    uint8_t _pad_5[0x8];
    struct CommoditySubtype* refineOutput;
    uint8_t _pad_6[0x10];
    struct Commodity* commodity;
    uint8_t _pad_7[0x10];
};




struct EAEntityInclusionParams {
    uint8_t _pad_0[0x8];
    struct TagList* tags;
    uint8_t _pad_1[0x30];
};




struct GlobalJumpDriveParams {
    uint8_t _pad_0[0x8];
    struct JumpDriveAudioParams* audioParams;
    uint8_t _pad_1[0x548];
    struct JumpDriveMusicParams* musicParams;
    uint8_t _pad_2[0x98];
    struct GlobalJumpDriveEffectParams* effectParams;
    uint8_t _pad_3[0x38];
    struct SMisfireEffect* malfunction;
    uint8_t _pad_4[0x8];
    struct JumpDriveApproachRingsParams* approachRingParams;
    uint8_t _pad_5[0x10];
    float checksPassedDelay;
    float obstructionPaddingSize;
    float wallRepelBounceVelocity;
    uint8_t _pad_6[0x4];
};




struct RTTNameTagParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* bindingName;
    uint8_t _pad_1[0x8];
};




struct SCOperatorATCParams {
    uint8_t _pad_0[0x18];
    _Bool handlePlayers;
    _Bool handleNPCs;
    uint8_t _pad_1[0x6];
};




struct ReputationComparisonRange {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float min;
    float max;
};




struct SSCActorShoppingAssistanceParams {
    uint8_t _pad_0[0x18];
};




struct SEntityComponentRttLiveCameraPreviewParams {
    uint8_t _pad_0[0x18];
    int32_t width;
    int32_t height;
    int32_t fov;
    float near_;
    float far_;
    uint8_t _pad_1[0x4];
};




struct ExplosiveOrdnancePingGlobalParams {
    uint8_t _pad_0[0x8];
    struct ExplosiveOrdnancePingVFX* vfxGhostPingParams;
    uint8_t _pad_1[0x50];
    struct ExplosiveOrdnancePingVFX* vfxDesiredPingParams;
    uint8_t _pad_2[0x50];
    struct ExplosiveOrdnancePingVFX* vfxPredictedPingParams;
    uint8_t _pad_3[0x50];
};




struct ObjectiveProperty_Input {
    uint8_t _pad_0[0x8];
    struct MissionProperty* property;
    uint8_t _pad_1[0x30];
    struct ObjectiveProperty_Output* linkedOutput;
    uint8_t _pad_2[0x8];
};




struct HydrogenRefuelService {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct CLocIdentifier* productName;
    struct CryStringT* icon;
    uint8_t _pad_1[0x8];
    float serviceDelayTime;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* hudMessage;
    uint8_t _pad_3[0x8];
    _Bool instantRefuel;
    uint8_t _pad_4[0x3];
    int32_t refuelUnitPerSecond;
    struct ResourceType* fuelCommodity;
    uint8_t _pad_5[0x18];
};




struct AsteroidProcedural {
    uint8_t _pad_0[0x8];
    float minScale;
    float maxScale;
    float minRotationSpeed;
    float maxRotationSpeed;
    float distributionA;
    float distributionB;
    struct RGB* tint;
    uint8_t _pad_1[0x10];
    struct GlobalResourceCGF* mesh;
    uint8_t _pad_2[0x10];
    struct GlobalResourceMaterial* material;
    uint8_t _pad_3[0x10];
};




struct SPrimeableAnimationState {
    uint8_t _pad_0[0x8];
    struct SInteractionState* animatedState;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentId;
    uint8_t _pad_2[0x8];
    struct CryStringT* fragTag;
    uint8_t _pad_3[0x10];
};




struct InnerThought_LayoutList {
    uint8_t _pad_0[0x10];
    struct InnerThought_ColorParams* selectedColor;
    uint8_t _pad_1[0x10];
    struct InnerThought_ColorParams* unselectedColor;
    uint8_t _pad_2[0x10];
    struct InnerThought_ColorParams* secondaryColor;
    uint8_t _pad_3[0x10];
    struct Vec3* selectedOffset;
    uint8_t _pad_4[0x10];
    struct Vec3* unselectedOffset;
    uint8_t _pad_5[0x10];
    struct Vec3* secondaryOffset;
    uint8_t _pad_6[0x10];
    struct Vec3* elementIncrement;
    uint8_t _pad_7[0x10];
    struct Vec3* elementCurve;
    uint8_t _pad_8[0x10];
    _Bool focusOnSelection;
    uint8_t _pad_9[0x3];
    enum ARDataType justification;
};




struct SBaseObjectContainerComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* objectContainer;
    uint8_t _pad_1[0x8];
};




struct SWeaponActionFireSalvageRepairBeamStrengthValueParams {
    uint8_t _pad_0[0x8];
    float stable;
    float inactive;
};




struct SStateModifierMovableMover {
    uint8_t _pad_0[0x8];
    struct SInteractionState* hasMoverState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* noMoverState;
    uint8_t _pad_2[0x8];
};




struct ShoppingProviderEntityComponentParams {
    uint8_t _pad_0[0x18];
    enum ARDataType variant;
    enum ARDataType shopType;
    struct ItemKioskBrand* brand;
    uint8_t _pad_1[0x10];
    struct SItemPortDef* globalInventoryPersistentQueryDef;
    uint8_t _pad_2[0x8];
};




struct SHackingCodeCommandParam {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType type_;
    _Bool isOptional;
    uint8_t _pad_2[0x3];
};




struct DefaultActionsEntityState_EntityIsAttachedToDraggableBody {
    uint8_t _pad_0[0x8];
};




struct EntityComponentRefineryParams {
    uint8_t _pad_0[0x18];
};




struct SHackingThreatLevelConditionAbilityStarted {
    uint8_t _pad_0[0x8];
    _Bool isIntruder;
    uint8_t _pad_1[0x3];
    int32_t pointsAdded;
    enum ARDataType abilityType;
    uint8_t _pad_2[0x4];
};




struct CameraSourceShakeParams {
    uint8_t _pad_0[0x8];
    struct Vec3* AmplitudeA;
    uint8_t _pad_1[0x10];
    float AmplitudeAMult;
    uint8_t _pad_2[0x4];
    struct Vec3* FrequencyA;
    uint8_t _pad_3[0x10];
    float FrequencyAMult;
    float NoiseAAmpMult;
    float NoiseAFreqMult;
    float TimeOffsetA;
    struct Vec3* AmplitudeB;
    uint8_t _pad_4[0x10];
    float AmplitudeBMult;
    uint8_t _pad_5[0x4];
    struct Vec3* FrequencyB;
    uint8_t _pad_6[0x10];
    float FrequencyBMult;
    float NoiseBAmpMult;
    float NoiseBFreqMult;
    float TimeOffsetB;
    int32_t CameraShakeSeed;
    uint8_t _pad_7[0x4];
};




struct StatusPriorityOxygen {
    uint8_t _pad_0[0x8];
    enum ARDataType associatedWidget;
    uint8_t _pad_1[0x4];
    float thresholdValue;
    enum ARDataType comparison;
};




struct InteractionConditionEntityIsAttachedToOtherActor {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct ItemResourceControlConditionGravity {
    uint8_t _pad_0[0x8];
    float gravModifier;
    uint8_t _pad_1[0x4];
    struct ItemResourceControlParameterBase* funcionality;
    uint8_t _pad_2[0x8];
};




struct SJumpTunnelDistortionParams {
    uint8_t _pad_0[0x8];
    float safeAreaRatio;
    float distortionDamageRate;
};




struct SShipStatusAppParams {
    uint8_t _pad_0[0x8];
    struct mobiGlasApp* linkedStarMap;
    uint8_t _pad_1[0x10];
    float shipHoloRotationSpeed;
    float shipHoloRotationSmoothTime;
    float lowAmmoThreshold;
    float lowOrdnanceThreshold;
    float lowHydrogenFuelThreshold;
    float lowQuantumFuelThreshold;
    float shipRecallRetryTime;
    _Bool requirePermissionForShipRecall;
    uint8_t _pad_2[0x3];
};




struct ImpoundingDefinition {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    enum ARDataType trigger;
    float impoundingTimeSeconds;
    int32_t impoundingFineUEC;
    _Bool ignoreIfAgainstPartyMember;
    uint8_t _pad_1[0x3];
};




struct DirectRTT_BloomParams {
    uint8_t _pad_0[0x8];
    float Cutoff;
    float BloomAdditiveBlendFactor;
    float SaturationFactor;
    float OpacityInBrightScenes;
    float OpacityInDarkScenes;
    uint8_t _pad_1[0x4];
};




struct SSequencerMoveToAnimateEntityDragTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* fragmentId;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragTag;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_BindingsVectorField {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType field;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsVectorBase* input;
    uint8_t _pad_3[0x8];
};




struct SHoloFieldComponentParams {
    uint8_t _pad_0[0x18];
    enum ARDataType shape;
    uint8_t _pad_1[0x4];
    struct CryStringT* model;
    uint8_t _pad_2[0x8];
    struct CryStringT* material;
    uint8_t _pad_3[0x8];
    float audioMessageDistance;
    float audioMessageDistanceNoVehicle;
    float audioMessageDelay;
    float vehicleDestroyDistance;
    float hitRadius;
    float hitDuration;
    float repeatHitTime;
    float repeatHitDistance;
    float damageMultiplier;
    float maxDamage;
    float particleHitScale;
    uint8_t _pad_4[0x4];
};




struct EntityEffectSystem_LightType_AreaLight {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
    float fovAngle;
    float planeHeight;
    float planeWidth;
    float softness;
};




struct UIConfig {
    uint8_t _pad_0[0x8];
    struct Flash_Palette* DamageColours;
    uint8_t _pad_1[0x8];
    struct UIStateColor* ColorStates;
    uint8_t _pad_2[0x8];
    struct InnerThought_Config* InnerThought;
    uint8_t _pad_3[0x8];
    struct FPSReticle_Config* FPSReticleConfig;
    uint8_t _pad_4[0x8];
    struct EVAReticle_Config* EVAReticleConfig;
    uint8_t _pad_5[0x8];
    struct PlayerChoice_IMConfig* playerChoiceIMConfig;
    uint8_t _pad_6[0x10];
    struct VisorHUD_Config* visorHUDConfig;
    uint8_t _pad_7[0x10];
    struct PlayerChoice_PITConfig* playerChoicePITConfig;
    uint8_t _pad_8[0x10];
    struct FlightHUDUIView_Config* flightHUDUIViewConfig;
    uint8_t _pad_9[0x10];
};




struct SVecWithNoiseParams {
    uint8_t _pad_0[0x8];
    struct Vec3* offset;
    uint8_t _pad_1[0x10];
    struct SHeadRecoilNoiseParams* noise;
    uint8_t _pad_2[0x18];
};




struct SCItemFoleyParams {
    uint8_t _pad_0[0x18];
    struct FoleyDefinition* FoleyDef;
    uint8_t _pad_1[0x10];
};




struct ToxiInputModifierDistortion {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct BezierCurve* amplitudeInterpolant;
    uint8_t _pad_2[0x88];
    struct BezierCurve* axesInputScale;
    uint8_t _pad_3[0x88];
    float minAmplitude;
    float maxAmplitude;
    float frequency;
    uint8_t _pad_4[0x4];
};




struct ContractGeneratorHandlerBase {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct ContractAvailability* defaultAvailability;
    uint8_t _pad_3[0x50];
    struct ContractParamOverrides* contractParams;
    uint8_t _pad_4[0x138];
};




struct GasParams {
    uint8_t _pad_0[0x8];
    struct RGB* debugColor;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* chemicalSymbol;
    float fogDensity;
    uint8_t _pad_2[0x4];
    struct RGB* fogColor;
    uint8_t _pad_3[0x18];
};




struct ContractPrerequisite_LocationProperty {
    uint8_t _pad_0[0x8];
    struct CryStringT* propertyVariableName;
    uint8_t _pad_1[0x8];
    struct CryStringT* propertyExtendedTextToken;
    uint8_t _pad_2[0x8];
    enum ARDataType locationLevelType;
    uint8_t _pad_3[0x4];
};




struct SCriminalRecordStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onInfractionSelectedState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onInfractionAddedState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* onInfractionRemovedState;
    uint8_t _pad_3[0x8];
    struct SInteractionState* onInfractionPaidState;
    uint8_t _pad_4[0x8];
    struct SInteractionState* onInfractionRemoveTimeEndState;
    uint8_t _pad_5[0x8];
};




struct SCItemControlSeatParams {
    uint8_t _pad_0[0x8];
    struct SCItemObservableParams* observables;
    uint8_t _pad_1[0x8];
    struct SCItemControllableParams* usableControl;
    uint8_t _pad_2[0x8];
    struct SCItemControllableParams* userControl;
    uint8_t _pad_3[0x8];
};




struct MobiGlasPersonalMessage_ShipChat {
    uint8_t _pad_0[0x8];
    struct DateTime* dateTime;
    uint8_t _pad_1[0x30];
    struct CLocIdentifier* senderName;
    struct CLocIdentifier* content;
};




struct FireHazardGlobalUpdate {
    uint8_t _pad_0[0x8];
    int32_t fixedFPS;
    uint8_t _pad_1[0x4];
};




struct HudColor_Entry {
    uint8_t _pad_0[0x8];
    struct HudColor_HoloMatColors* HoloMatColors;
    uint8_t _pad_1[0x50];
    struct SRGBA8* FlashColor;
    uint8_t _pad_2[0x8];
};




struct CameraTrackviewConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
};




struct EntityFireHazard {
    uint8_t _pad_0[0x8];
    _Bool enable;
    _Bool dissolveOnBurn;
    uint8_t _pad_1[0x6];
    struct Range* dissolvePercentageRange;
    uint8_t _pad_2[0x8];
};




struct FunctionalityModifiers {
    uint8_t _pad_0[0x8];
    struct FunctionalityModifierBase* damageFunctionalityModifierParams;
    uint8_t _pad_1[0x8];
    struct FunctionalityModifierBase* degradationFunctionalityModifierParams;
    uint8_t _pad_2[0x8];
};




struct CargoGridSpawnedComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCItemWeaponControllerParams {
    uint8_t _pad_0[0x18];
    struct SCItemInputAutoAimParams* AutoAim;
    uint8_t _pad_1[0x20];
    struct SCItemWeaponControllerStaggeredFiring* StaggeredMode;
    uint8_t _pad_2[0x8];
    _Bool allowAllGunsGroup;
    uint8_t _pad_3[0x3];
    int32_t numberOfCustomizablePresets;
    struct SSharedInteractionParams* enableWeaponsInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* disableWeaponsInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* fireWeaponGroupOneInteraction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* fireWeaponGroupTwoInteraction;
    uint8_t _pad_7[0x8];
    struct SSharedInteractionParams* setLagPipsInteraction;
    uint8_t _pad_8[0x8];
    struct SSharedInteractionParams* setLeadPipsInteraction;
    uint8_t _pad_9[0x8];
    struct SSharedInteractionParams* setFixedGimbalInteraction;
    uint8_t _pad_10[0x8];
    struct SSharedInteractionParams* setFreeGimbalInteraction;
    uint8_t _pad_11[0x8];
    struct SSharedInteractionParams* setAutoGimbalInteraction;
    uint8_t _pad_12[0x8];
    struct SSharedInteractionParams* setSynchronousFireInteraction;
    uint8_t _pad_13[0x8];
};




struct ProcAimHingeJointTypeConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* jointName;
    uint8_t _pad_1[0x8];
    float rotationRange;
    float rotationRangeOffset;
    struct Vec3* rotationAxis;
    uint8_t _pad_2[0x10];
};




struct SISpectatorModule {
    uint8_t _pad_0[0x18];
};




struct GlobalJumpTunnelLightParams {
    uint8_t _pad_0[0x8];
    float distanceAhead;
    float intensity;
    float radius;
    float bulbRadius;
    float animSpeed;
    uint8_t lightStyle;
    uint8_t _pad_1[0x3];
};




struct SGeometryActorModelTag {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
};




struct SGuidanceAndControlParams {
    uint8_t _pad_0[0x8];
    _Bool isDumbMissile;
    uint8_t _pad_1[0x3];
    float dumbfireRotationScale;
    float linearSpeed;
    float boostPhaseDuration;
    float terminalPhaseEngagementTime;
    float terminalPhaseEngagementAngle;
    float fuelTankSize;
    float pidIntegralTerm;
    float pidDerivativeTerm;
    float pidProportionalTerm;
    struct SGuidanceAndControlPhaseParams* boostPhase;
    uint8_t _pad_2[0x40];
    struct SGuidanceAndControlPhaseParams* interceptPhase;
    uint8_t _pad_3[0x40];
    struct SGuidanceAndControlPhaseParams* terminalPhase;
    uint8_t _pad_4[0x40];
};




struct SObjectContainerPhysicsControllerParams {
    uint8_t _pad_0[0x18];
    struct SEntityBasePhysicsControllerParams* PhysType;
    uint8_t _pad_1[0x8];
};




struct RadiationBehavior_AsteroidDesignCurveSurfaceRadiationParams {
    uint8_t _pad_0[0x8];
    float scaleOnLargestAsteroid;
    uint8_t _pad_1[0x4];
    struct Range* radiusRange;
    uint8_t _pad_2[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_3[0x88];
};




struct SSalvageModifier {
    uint8_t _pad_0[0x8];
    float salvageSpeedMultiplier;
    float radiusMultiplier;
    float extractionEfficiency;
    uint8_t _pad_1[0x4];
};




struct ActorStateData_UsableValidationParams {
    uint8_t _pad_0[0x8];
    float stateTimeout;
    uint8_t _pad_1[0x4];
};




struct AbilityComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCItemDisplayScreenGlobalLightParams {
    uint8_t _pad_0[0x8];
    enum ARDataType lightType;
    float radius;
    float bulbRadius;
    float fov;
    float maxDistance;
    float maxFade;
    struct CryStringT* projectorTexture;
    uint8_t _pad_1[0x8];
    struct Vec3* rotationOffset;
    uint8_t _pad_2[0x10];
    struct Vec3* translationOffset;
    uint8_t _pad_3[0x10];
};




struct EntityTemperature {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x3];
    float initialTemperature;
    float coolingEqualizationMultiplier;
    uint8_t _pad_2[0x4];
    struct EntityTemperatureSignature* signatureParams;
    uint8_t _pad_3[0x10];
    struct EntityTemperatureItemResource* itemResourceParams;
    uint8_t _pad_4[0x78];
    struct Range* misfireTemperatureRange;
    uint8_t _pad_5[0x8];
    float internalTemperatureGeneration;
    uint8_t _pad_6[0x4];
    struct EntityFireHazard* fireHazard;
    uint8_t _pad_7[0x18];
};




struct SUnifiedShakeParamsDef {
    uint8_t _pad_0[0x8];
    struct Vec3* positionAmplitude;
    uint8_t _pad_1[0x10];
    struct Vec3* rotationAmplitude;
    uint8_t _pad_2[0x10];
    float firstPersonScale;
    float thirdPersonScale;
    float oneShotTimer;
    _Bool rttShake;
    _Bool fadeOutShake;
    _Bool playerGroundOnly;
    _Bool shipLandedOnly;
    float frequency;
    float frequencyNoiseFactor;
    float phase;
    float translationNoise;
    float rotationNoise;
    uint8_t _pad_3[0x4];
};




struct GeometryInstancerComponentParams {
    uint8_t _pad_0[0x18];
    struct GeometryInstancer_Serialized* Serialized;
    uint8_t _pad_1[0x80];
};




struct CinematicConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* globalState;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_BindingsVectorBase {
    uint8_t _pad_0[0x50];
};




struct MusicLogicReset {
    uint8_t _pad_0[0x8];
};




struct SAtmosphericCompositionTemplateRef {
    uint8_t _pad_0[0x8];
    struct AtmosphericCompositionTemplate* compositionRecord;
    uint8_t _pad_1[0x10];
};




struct SItemShopARParams {
    uint8_t _pad_0[0x8];
    _Bool showOnCenter;
    uint8_t _pad_1[0x3];
    float distancePositionUpdate;
    _Bool updateOrientationEveryFrame;
    _Bool silhouetteWithRack;
    uint8_t _pad_2[0x6];
    struct SItemShopReference* bounds;
    uint8_t _pad_3[0x20];
    struct SItemShopReference* position;
    uint8_t _pad_4[0x20];
    struct SItemShopReference* orientation;
    uint8_t _pad_5[0x20];
    _Bool faceMinX;
    _Bool faceMaxX;
    _Bool faceMinY;
    _Bool faceMaxY;
    _Bool faceMinZ;
    _Bool faceMaxZ;
    uint8_t _pad_6[0x2];
};




struct MarkerTrackingViewModeParameters {
    uint8_t _pad_0[0x8];
    _Bool isFullScreen;
    _Bool rotateVertical;
    _Bool rotateHorizontal;
    _Bool pan;
    _Bool zoom;
    uint8_t _pad_1[0x3];
    struct MarkerTrackingActionParameters* markerActions;
    uint8_t _pad_2[0x8];
    struct MarkerTrackingDisplayParameters* displaySettings;
    uint8_t _pad_3[0x28];
};




struct BuildingBlocks_PreviewSceneEntityRoot {
    uint8_t _pad_0[0x10];
    enum ARDataType renderLayer;
    uint8_t _pad_1[0x7];
};




struct UIWorldDisplayPathLineParams {
    uint8_t _pad_0[0x8];
    float lineWidth;
    uint8_t _pad_1[0x4];
    struct Vec2* uvStart;
    uint8_t _pad_2[0x8];
    struct Vec2* uvSize;
    uint8_t _pad_3[0x8];
    int32_t cutOffExtraLengthDivision;
    uint8_t _pad_4[0x4];
};




struct WeatherEffects_Atmosphere_GasCloudOpticalDensity {
    uint8_t _pad_0[0x8];
    struct WeatherEffects_SpaceLoopEffect* spaceLoopEffect;
    uint8_t _pad_1[0x20];
    struct Range* interpolationRange;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_BindingsIntegerFromBoolean {
    uint8_t _pad_0[0x50];
    int64_t isTrue;
    int64_t isFalse;
    struct BuildingBlocks_BindingsIntegerBase* inputTrue;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsIntegerBase* inputFalse;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_3[0xf8];
};




struct StayTimeMinOverrideByDockingClass {
    uint8_t _pad_0[0x8];
    struct LandingPadSize* dockingClass;
    uint8_t _pad_1[0x10];
    float stayTimeMin;
    uint8_t _pad_2[0x4];
};




struct SecurityClearanceTokenData_NOT {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
    struct SecurityClearanceTokenData* condition;
    uint8_t _pad_2[0x8];
};




struct VehicleLandingUIParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeScrollBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct ControlHintCondition_VehicleSeatTypeState {
    uint8_t _pad_0[0x8];
    enum ARDataType vehicleSeatTypeState;
    uint8_t _pad_1[0x7];
};




struct SubsumptionMissionMusicComponentParams {
    uint8_t _pad_0[0x18];
};




struct ItemKioskLoadoutEditorAdditionalParams {
    uint8_t _pad_0[0x8];
    _Bool selectFirstVehicle;
    uint8_t _pad_1[0x7];
};




struct SEntityComponentMiningLaserParams {
    uint8_t _pad_0[0x18];
    struct MiningLaserGlobalParams* globalParams;
    uint8_t _pad_1[0x10];
    float throttleLerpSpeed;
    float throttleMinimum;
    struct MiningLaserModifiers* miningLaserModifiers;
    uint8_t _pad_2[0x78];
    struct MiningFilterParams* filterParams;
    uint8_t _pad_3[0x10];
    _Bool usesPowerThrottle;
    uint8_t _pad_4[0x7];
};




struct SpawnDescriptionEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* description;
    uint8_t _pad_1[0x8];
    struct BaseMissionPropertyValue* spawnGroup;
    uint8_t _pad_2[0x8];
};




struct SStreamingDependencyComponentParams {
    uint8_t _pad_0[0x18];
};




struct LegacyCraftingRecipeList_Record {
    uint8_t _pad_0[0x8];
    struct LegacyCraftingRecipeListRecord* recipesRecord;
    uint8_t _pad_1[0x10];
};




struct ObjectDataBankMarkerProvider {
    uint8_t _pad_0[0x8];
};




struct InteractionConditionLinkedUsableHasTag {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct TagsDNFTerm* usableTags;
    uint8_t _pad_2[0x60];
};




struct GroundVehicleAudioComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* engineSoundPosition;
    uint8_t _pad_1[0x8];
    struct GlobalResourceAudio* engineStartupOneShot;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* engineRunLoopStart;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* engineRunLoopStop;
    uint8_t _pad_4[0x18];
    struct CryStringT* hornSoundPosition;
    uint8_t _pad_5[0x8];
    struct GlobalResourceAudio* hornLoopStart;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* hornLoopStop;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* suspensionBumpSound;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* gearChangeSound;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* throttleOnSound;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* throttleOffSound;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* damagedSound;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* destroyedSound;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* boostStartTrigger;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* boostStopTrigger;
    uint8_t _pad_15[0x18];
    struct AudioRtpc* speedRtpc;
    uint8_t _pad_16[0x18];
    struct AudioRtpc* throttleRtpc;
    uint8_t _pad_17[0x18];
    struct AudioRtpc* throttleLoadRtpc;
    uint8_t _pad_18[0x18];
    struct AudioRtpc* throttleOnAtLoadRtpc;
    uint8_t _pad_19[0x18];
    struct AudioRtpc* throttleOffAtLoadRtpc;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* rpmRtpc;
    uint8_t _pad_21[0x18];
    struct AudioRtpc* rpmLoadRtpc;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* rpmAccelerationRtpc;
    uint8_t _pad_23[0x18];
    struct AudioRtpc* slipRtpc;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* slipForwardsRtpc;
    uint8_t _pad_25[0x18];
    struct AudioRtpc* slipLateralRtpc;
    uint8_t _pad_26[0x18];
    struct AudioRtpc* steerRtpc;
    uint8_t _pad_27[0x18];
    struct AudioRtpc* steerStrainRtpc;
    uint8_t _pad_28[0x18];
    struct AudioRtpc* groundContactsRtpc;
    uint8_t _pad_29[0x18];
    struct AudioRtpc* airTimeRtpc;
    uint8_t _pad_30[0x18];
    struct AudioRtpc* suspensionCompressionRtpc;
    uint8_t _pad_31[0x18];
    struct AudioRtpc* suspensionStrokeRtpc;
    uint8_t _pad_32[0x18];
    struct AudioRtpc* bumpCompressionRtpc;
    uint8_t _pad_33[0x18];
    struct AudioRtpc* surfaceRoughnessRtpc;
    uint8_t _pad_34[0x18];
    struct AudioRtpc* boostDurationRtpc;
    uint8_t _pad_35[0x18];
    struct AudioRtpc* remainingBoostRtpc;
    uint8_t _pad_36[0x18];
    float bumpMinSusp;
    float bumpMinSpeed;
    float bumpIntensityMult;
    float bumpMinTime;
    float throttleLoadLerpUpTime;
    float throttleLoadLerpDownTime;
    float skidLerpSpeed;
    float skidCentrifugalFactor;
    float skidBrakeFactor;
    float skidPowerLockFactor;
    float skidLateralFactor;
    float skidForwardFactor;
};




struct SubItemScanStatusMappings {
    uint8_t _pad_0[0x8];
    enum ARDataType status;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* displayForStatus;
};




struct CraftingOptionalEffect_Base {
    uint8_t _pad_0[0x8];
};




struct TrespassAreaComponentParams {
    uint8_t _pad_0[0x18];
    struct SecurityClearanceConditions* securityClearanceConditions;
    uint8_t _pad_1[0x30];
    _Bool isFelony;
    _Bool filterOnFootOrEVA;
    _Bool filterInShip;
    _Bool filterInDockedShip;
    _Bool filterInGroundVehicle;
    uint8_t _pad_2[0x3];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeGridPackDirection {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SSpawnOnDropped {
    uint8_t _pad_0[0x8];
    float timeAfterDrop;
    uint8_t _pad_1[0x4];
};




struct CraftingMaterialStatEntry {
    uint8_t _pad_0[0x8];
    struct CraftingMaterialStatTypeRecord* statType;
    uint8_t _pad_1[0x10];
    int32_t min;
    int32_t max;
};




struct SWeaponActionMeleeParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
};




struct ConsumableAttachment {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* geometry;
    uint8_t _pad_1[0x10];
    struct GlobalResourceMaterial* materialOverride;
    uint8_t _pad_2[0x10];
    struct CryStringT* attachmentBone;
    uint8_t _pad_3[0x8];
};




struct SSequencerUsableTask {
    uint8_t _pad_0[0x28];
};




struct LargeObservableExtender {
    uint8_t _pad_0[0x8];
    float degreesOfVisualAngleToBeVisible;
    uint8_t _pad_1[0x4];
};




struct SCItemEnergyControllerParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* pipe;
    uint8_t _pad_1[0x8];
};




struct TriggerSubConditionMobiGlasDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* entitySuperGUID;
    uint8_t _pad_1[0x8];
    struct CryGUID* appGUID;
    uint8_t _pad_2[0x8];
    struct CryGUID* appDataGUID;
    uint8_t _pad_3[0x8];
};




struct AdditionalProjectilesParams {
    uint8_t _pad_0[0x8];
    struct AmmoParams* ammoRecord;
    uint8_t _pad_1[0x10];
    int32_t amount;
    float spreadDegrees;
    struct Range* lifetimeRange;
    uint8_t _pad_2[0x8];
};




struct SSetScreenShakeAreaEnabledStateGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool Enable;
    uint8_t _pad_1[0x7];
};




struct BuildingBlocks_LightParams {
    uint8_t _pad_0[0x8];
    float lightRadius;
    float bulbRadius;
    float FOV;
    float intensity;
    _Bool visibleShadows;
    uint8_t _pad_1[0x3];
    enum ARDataType importance;
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_2[0x8];
    struct CryStringT* image;
    uint8_t _pad_3[0x8];
};




struct BoidAlertedTransition {
    uint8_t _pad_0[0x8];
    struct CryStringT* animationTag;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
    struct BoidState* transition;
    uint8_t _pad_3[0x8];
    _Bool instantTransition;
    _Bool allowWhileTransitioning;
    uint8_t _pad_4[0xe];
};




struct ContractPropertyTagReplacement {
    uint8_t _pad_0[0x8];
    struct Tag* templateTag;
    uint8_t _pad_1[0x10];
    struct Tag* replacementTag;
    uint8_t _pad_2[0x10];
};




struct DataForgeComponentParams {
    uint8_t _pad_0[0x18];
};




struct WeaponARModifier {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* arMuzzleFlashEffect;
    uint8_t _pad_1[0x10];
    struct CryStringT* arMFXImpact;
    uint8_t _pad_2[0x8];
    struct Tag* arTriggerTag;
    uint8_t _pad_3[0x10];
    struct SWeaponModifierParams* weaponModifier;
    uint8_t _pad_4[0x3c8];
};




struct AuxiliaryWeaponActionMisfireParams {
    uint8_t _pad_0[0x8];
    struct WeaponMisfireDef* misfireProbabilities;
    uint8_t _pad_1[0x10];
    struct WeaponFlickerParams* flickerParams;
    uint8_t _pad_2[0x28];
    float misfireEvaluationPeriod;
    uint8_t _pad_3[0x4];
};




struct ConversationNode_Wait {
    uint8_t _pad_0[0x8];
    struct ConversationNode_Base* next;
    uint8_t _pad_1[0x8];
    float waitTime;
    uint8_t _pad_2[0x4];
};




struct SCItemDoorPortalModeParams {
    uint8_t _pad_0[0x8];
};




struct RelationStandingParams {
    uint8_t _pad_0[0x8];
    struct SReputationScopeParams* scope;
    uint8_t _pad_1[0x10];
    struct SReputationStandingParams* standing;
    uint8_t _pad_2[0x10];
    struct RelationMarkerParams* markerParams;
    uint8_t _pad_3[0x18];
};




struct GameModeParams {
    uint8_t _pad_0[0x18];
};




struct ServiceBeaconBaseParams {
    uint8_t _pad_0[0x18];
    enum ARDataType serviceBeaconType;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* serviceBeaconName;
    int32_t beaconTaxPercentage;
    int32_t beaconMaxPaymentAmount;
    struct MissionPropertyValue_AIName* npcRequesterNameDef;
    uint8_t _pad_2[0x40];
    struct SServiceBeaconCreatorParams* playerCreatorParams;
    uint8_t _pad_3[0x8];
    struct SServiceBeaconCreatorParamsBase* npcCreatorParams;
    uint8_t _pad_4[0x8];
};




struct DrugEfficacyConfigForItemSubType {
    uint8_t _pad_0[0x8];
    enum ARDataType itemSubType;
    uint8_t _pad_1[0x4];
    struct DrugEfficacyForItemSubType* drugEfficacyForItemSubType;
    uint8_t _pad_2[0x30];
};




struct AICoverSurfaceComponentParams {
    uint8_t _pad_0[0x18];
};




struct AISeatFlightControllerComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCItemObservableScreenViewParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool isDefault;
    _Bool isPrimaryCommsView;
    uint8_t _pad_2[0x6];
};




struct SWeaponGeometryTagsParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* tags;
    uint8_t _pad_1[0x8];
    float startDelay;
    float stopDelay;
    _Bool firstPerson;
    _Bool thirdPerson;
    uint8_t _pad_2[0x6];
};




struct EnvironmentLightRuntimeParams {
    uint8_t _pad_0[0x8];
    _Bool enable;
    _Bool enableShadows;
    uint8_t _pad_1[0x2];
    int32_t sunShadowCascadeSize;
    int32_t numDiffuseBounce;
    _Bool runtimeGBuffer;
    uint8_t _pad_2[0x3];
};




struct ResourceTypeDensityType {
    uint8_t _pad_0[0x8];
};




struct SIRoundsModule {
    uint8_t _pad_0[0x18];
};




struct WakeMFXEntityParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* customEffect;
    uint8_t _pad_1[0x8];
    float emissionSizeScaleToShipRatio;
    float distanceOffSurface;
    float raycastLengthMultiplier;
    float sizeScaleMultiplier;
    float strengthDistanceFalloffThreshold;
    uint8_t _pad_2[0x4];
};




struct ScanCustomValueLocString {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* value;
};




struct SControlledEntityIFCSParams {
    uint8_t _pad_0[0x8];
    _Bool enableIFCSControl;
    uint8_t _pad_1[0x3];
    float boundContainmentForce;
    float alignmentSpeed;
    float alignmentRange;
};




struct JumpDriveStateMusicMap {
    uint8_t _pad_0[0x8];
    struct JumpDriveMusicEvent* musicEvent;
    uint8_t _pad_1[0x38];
    enum ARDataType jumpDriveState;
    uint8_t _pad_2[0x4];
};




struct StatusEffectValue {
    uint8_t _pad_0[0x8];
};




struct SUsableViewParams {
    uint8_t _pad_0[0x8];
    float viewLimitYawMin;
    float viewLimitYawMax;
    float viewLimitPitchMin;
    float viewLimitPitchMax;
};




struct SCItemMiningControllerParams {
    uint8_t _pad_0[0x18];
    struct MiningControllerAudioParams* audioParams;
    uint8_t _pad_1[0x20];
    struct MiningControllerGlobalParams* globalParams;
    uint8_t _pad_2[0x10];
    _Bool forceCrosshairOnline;
    uint8_t _pad_3[0x7];
    struct CryStringT* modifierPortTag;
    uint8_t _pad_4[0x8];
    _Bool applyModifierPortTagOnStart;
    uint8_t _pad_5[0x7];
};




struct SCItemAimableComponentParams {
    uint8_t _pad_0[0x18];
};




struct SplashDamageInfractionSettings {
    uint8_t _pad_0[0x8];
    float explosionTimeFrame;
    float friendlyHitValue;
    float friendlyKillValue;
    float enemyHitValue;
    float enemyKillValue;
    uint8_t _pad_1[0x4];
};




struct LinkedStatPassExcessAboveThreshold {
    uint8_t _pad_0[0x8];
    float threshold;
    float multiplier;
    enum ARDataType reverseSignFlag;
    uint8_t _pad_1[0x4];
};




struct Marker_ShowRuleMapDisplayMode {
    uint8_t _pad_0[0x8];
    enum ARDataType displayModeMap;
    uint8_t _pad_1[0x4];
};




struct STurretEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct SCOptionalThrustParams {
    uint8_t _pad_0[0x8];
    struct Tag* activationTag;
    uint8_t _pad_1[0x10];
    struct SCMaxLinearVelocityParams* MaxLinearVelocityParams;
    uint8_t _pad_2[0x8];
    struct SCLinearMovementParams* LinearMovementParams;
    uint8_t _pad_3[0x8];
    struct SCAngularMovementParams* AngularMovementParams;
    uint8_t _pad_4[0x8];
    struct SCBoostScaleParam* BoostScaleParam;
    uint8_t _pad_5[0x8];
};




struct SMinigameAppParams {
    uint8_t _pad_0[0x8];
    struct MiniGameRecordDef* miniGameRecordDef;
    uint8_t _pad_1[0x10];
};




struct SSequencerCarryableTaskParams {
    uint8_t _pad_0[0x20];
};




struct LocomotionNavigationLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkValidForAgentType;
    uint8_t _pad_1[0x8];
    struct NavigationLinkCostCustomization* costMultiplierSetup;
    uint8_t _pad_2[0x30];
    enum ARDataType linkingType;
    uint8_t _pad_3[0x4];
    struct UsableUseChannelInstance* useChannel;
    uint8_t _pad_4[0x8];
    struct NavLinkLocation* startLocation;
    uint8_t _pad_5[0x8];
    struct NavLinkLocation* endLocation;
    uint8_t _pad_6[0x8];
    float navlinkWidth;
    int32_t maxAllowedLinks;
    int32_t maxAllowedCrossLinks;
    uint8_t _pad_7[0x4];
};




struct SSubsumptionMission {
    uint8_t _pad_0[0x18];
    _Bool useNewMissionSystem;
    _Bool startOnIntialCountdown;
    uint8_t _pad_1[0x6];
    struct TagList* spawningTagFilter;
    uint8_t _pad_2[0x30];
    struct SkillDefinitions* defaultNPCSkillDefinition;
    uint8_t _pad_3[0x10];
    struct RewardScale* uecCurve;
    uint8_t _pad_4[0x10];
    struct RewardScale* repCurve;
    uint8_t _pad_5[0x10];
};




struct MeleeFragInfo {
    uint8_t _pad_0[0x8];
    enum ARDataType attackType;
    uint8_t _pad_1[0x4];
    struct MeleeAttackCategoryInfo* meleeAttackCategoryInfo;
    uint8_t _pad_2[0x8];
};




struct BoidsCohesionRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
};




struct InnerThought_ConversationSystemConfig {
    uint8_t _pad_0[0x8];
    float translationRate;
    float rotationRate;
    float minDistance;
    float maxDistance;
    float maxHorizontalAngle;
    float maxVerticalAngle;
    enum ARDataType bone;
    uint8_t _pad_1[0x4];
    struct Vec3* boneOffset;
    uint8_t _pad_2[0x10];
    struct Deg3* rotation;
    uint8_t _pad_3[0x18];
    struct InnerThought_Params* innerThought;
    uint8_t _pad_4[0x10];
};




struct SCSeatAccessBaseInteractionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct SCSeatAccessInteractionConditionParams* conditions;
    uint8_t _pad_2[0x20];
};




struct SpectatorPointParams {
    uint8_t _pad_0[0x18];
    struct Faction_LEGACY* faction;
    uint8_t _pad_1[0x10];
};




struct SCItemDoorPortalModeAutomaticParams {
    uint8_t _pad_0[0x8];
};




struct GramsPerCubicCentimeter {
    uint8_t _pad_0[0x8];
    float gramsPerCubicCentimeter;
    uint8_t _pad_1[0x4];
};




struct ItemControllerComponentParams {
    uint8_t _pad_0[0x18];
    _Bool allowTogglePowerObservedItems;
    uint8_t _pad_1[0x7];
    struct OperatorModeDefinitionParams* operatorModeDefinitionsOverride;
    uint8_t _pad_2[0x10];
    struct SCItemControlPriorities* additionalItemControlPriorities;
    uint8_t _pad_3[0x8];
};




struct SEntityTraversalTargetPathContext {
    uint8_t _pad_0[0x8];
    struct SEntityTraversingTarget* targetPath;
    uint8_t _pad_1[0x8];
};




struct GameShapeComponentParams {
    uint8_t _pad_0[0x18];
};




struct PointOfInterestData {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* displayInfoText;
    struct CryStringT* imagePath;
    uint8_t _pad_1[0x8];
    struct Vec2* position;
    uint8_t _pad_2[0x8];
    float radius;
    uint8_t _pad_3[0x4];
};




struct JumpDriveMusicEvent {
    uint8_t _pad_0[0x8];
    struct MusicLogicEvent* musicLogicEvent;
    uint8_t _pad_1[0x10];
    struct GlobalResourceAudio* musicWwiseEvent;
    uint8_t _pad_2[0x18];
};




struct FriendlyFireReactionOverride {
    uint8_t _pad_0[0x8];
    enum ARDataType reactionType;
    _Bool shouldAllowFriendlyFire;
    uint8_t _pad_1[0x3];
};




struct SSCPlayerUINetworkComponentParams {
    uint8_t _pad_0[0x18];
};




struct ScanCustomValueFloat {
    uint8_t _pad_0[0x8];
    float value;
    uint8_t _pad_1[0x4];
};




struct ItemSignatureModifierParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    float signatureSizeMultiplier;
    uint8_t _pad_2[0x4];
};




struct TransitGatewayParams {
    uint8_t _pad_0[0x18];
    float radius;
    uint8_t _pad_1[0x4];
    struct Vec3* safeTeleportOffset;
    uint8_t _pad_2[0x10];
};




struct HandholdInteractionPointLink {
    uint8_t _pad_0[0x8];
    _Bool ignoreInteractionOnFail;
    uint8_t _pad_1[0x7];
    struct HandholdAttachmentTriggerParams* attachmentTrigger;
    uint8_t _pad_2[0x8];
    struct SInteractionPointParams* sourceInteractionPoint;
    uint8_t _pad_3[0x20];
};




struct BuildingBlocks_CalloutSettings {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_1[0x10];
    struct CryStringT* activationVariableURL;
    uint8_t _pad_2[0x8];
};




struct CargoResourceDistribution {
    uint8_t _pad_0[0x8];
    struct ResourceType* resource;
    uint8_t _pad_1[0x10];
    float meanAverage;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_SegmentedFill {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct BuildingBlocks_FixedOrRelativeValue* segmentSize;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_FixedOrRelativeValue* spaceSize;
    uint8_t _pad_3[0x8];
    float angle;
    float xOffset;
    struct BuildingBlocks_ColorBase* segmentColor;
    uint8_t _pad_4[0x8];
    _Bool barFill;
    uint8_t _pad_5[0x7];
};




struct DynamicCameraEffectsList {
    uint8_t _pad_0[0x8];
    struct DynamicCameraEffects* conversation;
    uint8_t _pad_1[0x10];
    struct DynamicCameraEffects* interactionModeFocus;
    uint8_t _pad_2[0x10];
    struct DynamicCameraEffects* mobiglas;
    uint8_t _pad_3[0x10];
    struct DynamicCameraEffects* personalInnerThought;
    uint8_t _pad_4[0x10];
    struct DynamicCameraEffects* externalInventory;
    uint8_t _pad_5[0x10];
    struct DynamicCameraEffects* personalInventory;
    uint8_t _pad_6[0x10];
    struct DynamicCameraEffects* lootInventory;
    uint8_t _pad_7[0x10];
    struct DynamicCameraEffects* onFoot;
    uint8_t _pad_8[0x10];
    struct DynamicCameraEffects* vehicleSeat;
    uint8_t _pad_9[0x10];
    struct DynamicCameraEffects* hacking;
    uint8_t _pad_10[0x10];
    struct DynamicCameraEffects* inspectMode;
    uint8_t _pad_11[0x10];
    struct DynamicCameraEffects* prototypeMobiGlas;
    uint8_t _pad_12[0x10];
    struct DynamicCameraEffects* simpod;
    uint8_t _pad_13[0x10];
    struct DynamicCameraEffects* jumpTravel;
    uint8_t _pad_14[0x10];
};




struct HUDSilhouetteParams {
    uint8_t _pad_0[0x8];
    struct RGBA* color;
    uint8_t _pad_1[0x10];
    float occludedAlpha;
    float outlineWidth;
    _Bool outlineOnly;
    _Bool tintObject;
    uint8_t _pad_2[0x6];
};




struct ControlHintCondition_VehicleOperatorMode {
    uint8_t _pad_0[0x8];
    enum ARDataType operatorMode;
    uint8_t _pad_1[0x4];
};




struct ActorStanceSpeedsInfo {
    uint8_t _pad_0[0x8];
    struct ActorMotionStateFilter* stateFilter;
    uint8_t _pad_1[0x48];
    struct ActorStanceSpeeds* speeds;
    uint8_t _pad_2[0x40];
};




struct UnitTest_BaseTest {
    uint8_t _pad_0[0x8];
    struct CryStringT* myBaseString;
    uint8_t _pad_1[0x8];
};




struct SHintEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct SEntityCGFPhysicsGridParams {
    uint8_t _pad_0[0x8];
    _Bool inheritGravity;
    uint8_t _pad_1[0x7];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x6];
    struct CryStringT* cgfDataFile;
    uint8_t _pad_4[0x8];
    _Bool includeVisareas;
    uint8_t _pad_5[0x7];
};




struct Behavior_CustomQuantumDriveEffectsPreset {
    uint8_t _pad_0[0x8];
    struct SEntityEffectSystem_ParticleCategory* particleEffects;
    uint8_t _pad_1[0x68];
};




struct TelevisionScreenParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* nextInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* previousInteraction;
    uint8_t _pad_2[0x8];
    struct TVMovieList* movieList;
    uint8_t _pad_3[0x10];
};




struct DefaultActionsEntityEntryCondition_Primed {
    uint8_t _pad_0[0x8];
    _Bool isPrimed;
    uint8_t _pad_1[0x7];
};




struct MissionDeadline {
    uint8_t _pad_0[0x8];
    float missionCompletionTime;
    _Bool missionAutoEnd;
    uint8_t _pad_1[0x3];
    enum ARDataType missionResultAfterTimerEnd;
    float remainingTimeToShowTimer;
    struct CLocIdentifier* missionEndReason;
};




struct SServiceBeaconCreatorParamsBase {
    uint8_t _pad_0[0x8];
};




struct ChatProviderSettingsBase {
    uint8_t _pad_0[0x8];
};




struct SDestroySelfGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct CameraFOVChangeData {
    uint8_t _pad_0[0x8];
    float fovLerpSpeed;
    float resetFOVLerpSpeed;
};




struct ScanDisplayConditionBaseParams {
    uint8_t _pad_0[0x8];
};




struct ShipListEntityComponentParams {
    uint8_t _pad_0[0x18];
    _Bool allowSpaceships;
    _Bool allowGroundVehicles;
    _Bool allowGravLevVehicles;
    _Bool allowREC_RentedShips;
    _Bool allowUEC_RentedShips;
    _Bool setPlayerProfile;
    _Bool filterByLocation;
    uint8_t _pad_1[0x1];
};




struct ItemResourceSignatureEntry {
    uint8_t _pad_0[0x8];
    float nominalSignature;
    float decayRate;
    struct BezierCurve* functionalityCurve;
    uint8_t _pad_1[0x8];
};




struct SInteractionPointSpherePrimitiveParams {
    uint8_t _pad_0[0x8];
    struct Vec3* Center;
    uint8_t _pad_1[0x10];
    float Radius;
    uint8_t _pad_2[0x4];
};




struct ItemThrottleParamsBase {
    uint8_t _pad_0[0x8];
};




struct PowerTransferResistanceScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct ActorStatusEffect {
    uint8_t _pad_0[0x8];
    struct BasicStatusEffectApplicationType* statusEffectValueType;
    uint8_t _pad_1[0x8];
    struct ActorStatusStatModifier* affectedStat;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* display;
};




struct ReputationRewardBaseDef {
    uint8_t _pad_0[0x8];
    struct SReputationScopeParams* scope;
    uint8_t _pad_1[0x10];
    struct SReputationRewardAmount* reward;
    uint8_t _pad_2[0x10];
};




struct UIAudioParameter {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct AudioRtpc* rtpc;
    uint8_t _pad_2[0x18];
};




struct UIGraph_ActorLoadoutEditorContextComponent {
    uint8_t _pad_0[0x8];
};




struct TriggerSubConditionAngleDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* approachingNpcGUID;
    uint8_t _pad_1[0x8];
    struct CryStringT* npcGUID;
    uint8_t _pad_2[0x8];
    float amplitude;
    float offset;
};




struct EntityComponentRoomOccupantParams {
    uint8_t _pad_0[0x18];
};




struct BreathVolumeParams {
    uint8_t _pad_0[0x8];
    float defaultVolume;
    float volumeModifier;
};




struct HazardComponentParams {
    uint8_t _pad_0[0x18];
    struct DamageBase* damagePerHit;
    uint8_t _pad_1[0x8];
    struct DamageBase* damageInShipScalar;
    uint8_t _pad_2[0x8];
    float damagePeriod;
    _Bool ignoreShields;
    _Bool useRadialFalloff;
    uint8_t _pad_3[0x2];
    float falloffStartRadius;
    _Bool ignoreVerticalFalloff;
    uint8_t _pad_4[0x3];
    struct SHazardAreaShapeParams* hazardAreaShape;
    uint8_t _pad_5[0x8];
};




struct InnerThought_CycleAnimRotateX {
    uint8_t _pad_0[0x10];
    float length;
    float amount;
    float stagger;
    uint8_t _pad_1[0x4];
};




struct ActorLocomotionTurnOnSpotParams {
    uint8_t _pad_0[0x8];
    float minAngle;
    float minAngleForTurnWithoutDelay;
    float maxDelayTime;
    float requeueNormTime;
};




struct InteractionConditionHackingControllerEnabled {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct SHardPointHighlightNode {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPortName;
    uint8_t _pad_1[0x8];
};




struct SDecayTimesAndCurves {
    uint8_t _pad_0[0x8];
    struct Vec3* decayTimeMultipliers;
    uint8_t _pad_1[0x10];
    struct SDecayCurveMaxValues* decayCurveMaxValues;
    uint8_t _pad_2[0x48];
    struct SXYZCurves* decayCurves;
    uint8_t _pad_3[0x8];
};




struct HoverTilting {
    uint8_t _pad_0[0x8];
    float strafeBankFactor;
    float forwardBackTiltFactor;
    float turnBankFactor;
    uint8_t _pad_1[0x4];
    struct BezierCurve* bankPerSpeedCurve;
    uint8_t _pad_2[0x88];
};




struct CameraKillerDeathCamConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraKillerDeathCamParams* killerDeathCamParams;
    uint8_t _pad_7[0x38];
};




struct SWalletParams {
    uint8_t _pad_0[0x18];
};




struct JournalEntryShopAlertsText {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* BodyText;
};




struct RadiationStateRef {
    uint8_t _pad_0[0x8];
    struct RadiationStateTemplate* stateTemplate;
    uint8_t _pad_1[0x10];
};




struct PlayerForceReactionParams {
    uint8_t _pad_0[0x8];
    _Bool enableSustainedForces;
    _Bool enableSustainedImpulses;
    uint8_t _pad_1[0x6];
};




struct SSCItemSelfDestructComponentParams {
    uint8_t _pad_0[0x18];
    float damage;
    float minRadius;
    float radius;
    float minPhysRadius;
    float physRadius;
    float time;
    struct SSharedInteractionParams* engageSelfDestructInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* disengageSelfDestructInteraction;
    uint8_t _pad_2[0x8];
};




struct SCargoGridSpawnedStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* defaultStateOverride;
    uint8_t _pad_1[0x8];
};




struct ScanDisplaySetupParams {
    uint8_t _pad_0[0x8];
    enum ARDataType scanTable;
    uint8_t _pad_1[0x7];
};




struct DefaultActionsEntityEntryConditionDef_InventoryContainerCapacity {
    uint8_t _pad_0[0x8];
    struct SBaseCargoUnit* minCapacity;
    uint8_t _pad_1[0x8];
    struct SBaseCargoUnit* maxCapacity;
    uint8_t _pad_2[0x8];
};




struct SQedVisualGraphTransitionTypeParams_TimeBased {
    uint8_t _pad_0[0x8];
    float seconds;
    uint8_t _pad_1[0x4];
};




struct Marker_AbilityVisibility {
    uint8_t _pad_0[0x8];
    struct VisibleElement* icon;
    uint8_t _pad_1[0x38];
    struct VisibleElement* distanceText;
    uint8_t _pad_2[0x38];
    struct VisibleElement* nameText;
    uint8_t _pad_3[0x38];
    struct VisibleElement* objectiveText;
    uint8_t _pad_4[0x38];
    struct VisibleElement* offscreenIcon;
    uint8_t _pad_5[0x38];
};




struct SMFD {
    uint8_t _pad_0[0x8];
    struct CryStringT* geometryName;
    uint8_t _pad_1[0x8];
    _Bool backgroundEnabled;
    uint8_t _pad_2[0x7];
    struct SMFD* upControlLink;
    uint8_t _pad_3[0x8];
    struct SMFD* downControlLink;
    uint8_t _pad_4[0x8];
    struct SMFD* leftControlLink;
    uint8_t _pad_5[0x8];
    struct SMFD* rightControlLink;
    uint8_t _pad_6[0x8];
};




struct InteractionConditionCanReachMovable {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct ScanSharedParams {
    uint8_t _pad_0[0x8];
    _Bool enableNewBindings;
    _Bool requireLockedTarget;
    _Bool enableManualFocusScan;
    _Bool enableAutoFocusScan;
    _Bool enablePassiveScan;
    _Bool enablePingWaveScan;
    _Bool allowPassiveUnlockContactType;
    uint8_t _pad_1[0x1];
    struct ScanSFXSharedParams* sfxParams;
    uint8_t _pad_2[0x60];
};




struct InteractionConditionInteractorNotInZeroG {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct InteriorMapEntityVisiblityEntityComponentParams {
    uint8_t _pad_0[0x18];
    _Bool show;
    uint8_t _pad_1[0x7];
};




struct StarMapQuantumTravelDataParams {
    uint8_t _pad_0[0x8];
    float obstructionRadius;
    float arrivalRadius;
    float arrivalPointDetectionOffset;
    float adoptionRadius;
    float subPointRadiusMultiplier;
    uint8_t _pad_1[0x4];
};




struct LegacyUIOptionsParams {
    uint8_t _pad_0[0x8];
    _Bool updateProgressBar;
    _Bool showFrameProgressBar;
    _Bool requiresScoreboard;
    _Bool requiresGameDetails;
    uint8_t _pad_1[0x4];
};




struct SEntityDensityClassOverwritesRecord {
    uint8_t _pad_0[0x8];
    struct SEntityDensityClassOverwrites* densityOverWrites;
    uint8_t _pad_1[0x10];
};




struct OcclusionBindingsParams {
    uint8_t _pad_0[0x8];
    float supportRayPushInAmount;
    float increasedPrecisionAngularSizeLimit;
    float maximumRayLength;
    uint8_t _pad_1[0x4];
};




struct HarvestableGeometry {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
};




struct ExplosionRecord {
    uint8_t _pad_0[0x8];
    struct ExplosionParams* explosionParams;
    uint8_t _pad_1[0x1b8];
};




struct AudioBreathStyleCondition {
    uint8_t _pad_0[0x8];
    enum ARDataType whenBreathParameter;
    float isAbove;
    float andBelow;
    float andJumpsUpBy;
    float orDropsBy;
    uint8_t _pad_1[0x4];
};




struct SActorForceReactionSustainedForceDef {
    uint8_t _pad_0[0x8];
    float leanForceSmoothing;
    uint8_t _pad_1[0x4];
    struct Range* GForceToLeanForceRange;
    uint8_t _pad_2[0x8];
    struct Range* windToLeanForceRange;
    uint8_t _pad_3[0x8];
    float impulseTriggerDelay;
    float impulseUpdateDelay;
    struct SActorForceReactionSustainedImpulseDef* GForceImpulseConfig;
    uint8_t _pad_4[0x28];
    struct SActorForceReactionSustainedImpulseDef* windImpulseConfig;
    uint8_t _pad_5[0x28];
    float sustainedForceSmoothing;
    uint8_t _pad_6[0x4];
    struct Range* GForceToSustainedForceRange;
    uint8_t _pad_7[0x8];
    struct Range* windToSustainedForceRange;
    uint8_t _pad_8[0x8];
};




struct SEntityVoxelPhysicsGridParams {
    uint8_t _pad_0[0x8];
    _Bool inheritGravity;
    uint8_t _pad_1[0x7];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x6];
    struct CryStringT* voxelDataFile;
    uint8_t _pad_4[0x8];
};




struct HarvestableParams {
    uint8_t _pad_0[0x18];
    struct SubHarvestableConfigBase* looseSubConfigBase;
    uint8_t _pad_1[0x8];
};




struct InteractionConditionHeldItem {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType itemType;
    uint8_t _pad_2[0x4];
    struct CryStringT* itemTag;
    uint8_t _pad_3[0x8];
};




struct SCItemDoorAnimationParams {
    uint8_t _pad_0[0x8];
    float DefaultAnimationDurationScale;
    float SecondaryAnimationDurationScale;
    struct SCItemDoorUserAnimationParams* userAnimationParams;
    uint8_t _pad_1[0x8];
};




struct SCBoatMovementBuoyancyParams {
    uint8_t _pad_0[0x8];
    float waterDensity;
    float kWaterDensity;
    float waterResistance;
    float kWaterResistance;
};




struct DirectRTT_AfterTonemappingParams {
    uint8_t _pad_0[0x8];
    float BlurRadius;
    float OpacityInBrightScenes;
    float OpacityInDarkScenes;
    float AdditiveBlendFactor;
    struct DirectRTT_ChromaticAberrationParams* ChromaticAberrationParams;
    uint8_t _pad_1[0x30];
    struct DirectRTT_DropShadowParams* DropShadowParams;
    uint8_t _pad_2[0x38];
    struct DirectRTT_BloomParams* BloomParams;
    uint8_t _pad_3[0x18];
    struct DirectRTT_PixelGridParams* PixelGridParams;
    uint8_t _pad_4[0x20];
    struct DirectRTT_InterferenceParams* ScreenInterferenceParams;
    uint8_t _pad_5[0x10];
};




struct SGiveClearanceTokenGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct SecurityClearanceToken* securityToken;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeImageScalingBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct ItemResourceDeltaBase {
    uint8_t _pad_0[0x8];
};




struct SubHarvestableConfigManual {
    uint8_t _pad_0[0x8];
    struct SubHarvestableConfig* subConfigManual;
    uint8_t _pad_1[0x50];
};




struct ControlHintCondition {
    uint8_t _pad_0[0x8];
};




struct ContractGenerationParamsBase {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_BindingsIntegerBase {
    uint8_t _pad_0[0x50];
};




struct CommunicationSubtitleSettings {
    uint8_t _pad_0[0x8];
    _Bool allow;
    uint8_t _pad_1[0x7];
    struct CryStringT* variableName;
    uint8_t _pad_2[0x8];
};




struct SCameraViewStateOrbit {
    uint8_t _pad_0[0x10];
    struct Ang3* cameraRotationAngle;
    uint8_t _pad_1[0x10];
    float distance;
    enum ARDataType lensSizePreset;
    uint8_t _pad_2[0x40];
};




struct AudioListenerParams {
    uint8_t _pad_0[0x18];
    _Bool primaryListener;
    uint8_t _pad_1[0x3];
    float inputRadius;
    float outputRadius;
    _Bool enabled;
    _Bool entityExclusive;
    uint8_t _pad_2[0x2];
    struct CryStringT* bus;
    uint8_t _pad_3[0x8];
};




struct SSCSignatureSystemActorCrossSectionParams {
    uint8_t _pad_0[0x8];
};




struct JournalEntryType {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* DisplayName;
    struct CLocIdentifier* NotificationName;
    struct CryStringT* IconName;
    uint8_t _pad_1[0x8];
};




struct CommunicationVariableFloat {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool global;
    uint8_t _pad_2[0x7];
    float value;
    uint8_t _pad_3[0x4];
};




struct BuildingBlocks_RadialTransformChild {
    uint8_t _pad_0[0x8];
    _Bool inheritRotation;
    _Bool inheritShapeWarp;
    _Bool maintainGapLength;
    uint8_t _pad_1[0x5];
};




struct SModifierSignaturesEntry {
    uint8_t _pad_0[0x8];
    enum ARDataType modifierType;
    float value;
};




struct InteractionConditionItem {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType itemType;
    uint8_t _pad_2[0x4];
    struct CryStringT* portTag;
    uint8_t _pad_3[0x8];
};




struct AudioHitListenerTrigger {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* trigger;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* rtpcTimeSinceLastTrigger;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* rtpcDamage;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* rtpcRatioAfterHit;
    uint8_t _pad_4[0x18];
    float oneShotMinPlayTime;
    float cooldown;
    struct Tag* oneshotTag;
    uint8_t _pad_5[0x10];
    struct Tag* oneshotTagPlayer;
    uint8_t _pad_6[0x10];
};




struct LegacyCraftingRecipeDef_Record {
    uint8_t _pad_0[0x8];
    struct LegacyCraftingRecipeDefRecord* recipeRecord;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_TagStringPair {
    uint8_t _pad_0[0x8];
    struct Tag* first;
    uint8_t _pad_1[0x10];
    struct CryStringT* second;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsStringBase* secondOverride;
    uint8_t _pad_3[0x8];
};




struct EACapturableEntityComponentDef {
    uint8_t _pad_0[0x18];
    enum ARDataType capturableType;
    _Bool skipNeutral;
    _Bool instantReset;
    _Bool allowOwnerChange;
    _Bool enableOnCompleteCapture;
    _Bool allowTeamAssistBoost;
    _Bool defendersAffectInfluence;
    uint8_t _pad_1[0x6];
    struct GlobalResourceAudio* audioTriggerAmbienceLoop;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* audioTriggerHackingStarted;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* audioTriggerHackingStopped;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* audioTriggerHackingInterrupted;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* audioTriggerHackingStartReversal;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* audioTriggerHackingComplete;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* audioTriggerAttackerEnter;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* audioTriggerAttackerExit;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* audioTriggerDefenderEnter;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* audioTriggerDefenderExit;
    uint8_t _pad_11[0x18];
    struct AudioRtpc* audioRtpcControl;
    uint8_t _pad_12[0x18];
    struct AudioRtpc* audioRtpcCaptureProcess;
    uint8_t _pad_13[0x18];
    struct AudioRtpc* audioRtpcCaptureRate;
    uint8_t _pad_14[0x18];
    struct AudioRtpc* audioRtpcAttackerCount;
    uint8_t _pad_15[0x18];
    struct AudioRtpc* audioRtpcDefenderCount;
    uint8_t _pad_16[0x18];
};




struct ChatManagerDefaultChannelColor {
    uint8_t _pad_0[0x8];
    enum ARDataType global;
    enum ARDataType party;
    enum ARDataType gameEntity;
    enum ARDataType whisper;
    enum ARDataType team;
    enum ARDataType squad;
};




struct CloneLocationMedicalTier {
    uint8_t _pad_0[0x8];
};




struct ItemResourceDynamicAmountCoolant {
    uint8_t _pad_0[0x8];
};




struct ObjectiveMarkerLocation {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool attachMarker;
    uint8_t _pad_2[0x7];
    struct CryStringT* boneName;
    uint8_t _pad_3[0x8];
    _Bool useBoundingBoxCenter;
    uint8_t _pad_4[0x7];
    struct Vec3* offset;
    uint8_t _pad_5[0x10];
};




struct AttachableStateModifierContextBase {
    uint8_t _pad_0[0x8];
};




struct SCustomizableMaterialEntry {
    uint8_t _pad_0[0x8];
    struct CryGUID* guid;
    uint8_t _pad_1[0x8];
    struct CryStringT* filePath;
    uint8_t _pad_2[0x8];
};




struct SMobiGlasLauncherApp {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* appName;
    struct CryStringT* iconPath;
    uint8_t _pad_1[0x8];
    struct CryStringT* appTriggerName;
    uint8_t _pad_2[0x8];
    struct CryStringT* notificationURLPath;
    uint8_t _pad_3[0x8];
};




struct SAudioGroupControllerComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* powerLevelRtpc;
    uint8_t _pad_1[0x8];
    struct CryStringT* powerOnDefaultSwitchState;
    uint8_t _pad_2[0x8];
    struct CryStringT* powerOnAuxiliarySwitchState;
    uint8_t _pad_3[0x8];
    struct CryStringT* powerOnEmergencySwitchState;
    uint8_t _pad_4[0x8];
    struct CryStringT* powerOffSwitchState;
    uint8_t _pad_5[0x8];
};




struct MissionPropertyValue_StarMapLocation {
    uint8_t _pad_0[0x8];
};




struct SSpecialEventInteractionsParams {
    uint8_t _pad_0[0x18];
    _Bool active;
    uint8_t _pad_1[0x7];
};




struct SCItemCargoGridParams {
    uint8_t _pad_0[0x18];
    struct Vec3* dimensions;
    uint8_t _pad_1[0x10];
    float crateGenPercentageOnDestroy;
    int32_t crateMaxOnDestroy;
    _Bool invisible;
    _Bool miningOnly;
    _Bool transformDependant;
    uint8_t _pad_2[0x1];
    float minVolatilePowerToExplode;
    struct CommodityDamageConfiguration* damageConfiguration;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomLeftRadiusBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SGameRulesS42ReputationParamsDef {
    uint8_t _pad_0[0x18];
};




struct SecurityClearanceTokenData_UnarmedDef {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
};




struct HaulingOrder_EntityClass {
    uint8_t _pad_0[0x8];
    struct ObjectivePropertyBase* pickUpLocation;
    uint8_t _pad_1[0x8];
    struct ObjectivePropertyBase* dropOffLocation;
    uint8_t _pad_2[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_3[0x10];
    int32_t minAmount;
    int32_t maxAmount;
};




struct FoleyCollision {
    uint8_t _pad_0[0x8];
    struct CryStringT* trigger;
    uint8_t _pad_1[0x8];
    float minImpactSpeed;
    float retriggerTimeout;
    _Bool applyToClient;
    _Bool applyToNLPC;
    uint8_t _pad_2[0x6];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeMinHeightBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SGalactapediaEntry {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* indexName;
    struct CLocIdentifier* name;
    struct CLocIdentifier* dataSummary;
    struct CLocIdentifier* contentText;
    struct CryStringT* imagePath;
    uint8_t _pad_1[0x8];
    struct GlobalResourceAudio* audioTrigger;
    uint8_t _pad_2[0x18];
    _Bool defaultUnlocked;
    uint8_t _pad_3[0x7];
    struct SGalactapediaEntry* tierBase;
    uint8_t _pad_4[0x10];
    int32_t tierIndex;
    uint8_t _pad_5[0x4];
};




struct EAPickupVehicleParams {
    uint8_t _pad_0[0x8];
    int32_t duration;
    float acquireRadius;
    float spawnRadius;
    float initialScale;
    float beginScalingDistance;
    float rotationSpeed;
    _Bool alternativeRotationAxis;
    _Bool enableCurveOffset;
    uint8_t _pad_1[0x2];
    float curveOffsetSpeed;
    float curveOffsetAmplitude;
    float maxScale;
    float multiplierSuppression;
    uint8_t _pad_2[0x4];
    struct Vec3* assetRotation;
    uint8_t _pad_3[0x10];
};




struct FireHazardGlobalDefaultEffects {
    uint8_t _pad_0[0x8];
    struct CryStringT* voxelFireEffect;
    uint8_t _pad_1[0x8];
    struct GlobalResourceParticle* voxelFlashIgnitionEffect;
    uint8_t _pad_2[0x10];
    struct GlobalResourceParticle* entityFireEffect;
    uint8_t _pad_3[0x10];
    struct GlobalResourceParticle* entitySmokeEffect;
    uint8_t _pad_4[0x10];
    struct GlobalResourceParticle* defaultSprayExtinguishingEffect;
    uint8_t _pad_5[0x10];
    struct GlobalResourceParticle* defaultSphereExtinguishingEffect;
    uint8_t _pad_6[0x10];
    float maximumSmokeEmission;
    float entityReferenceSize;
    float entityMinimumSize;
    uint8_t _pad_7[0x4];
};




struct AudioAllegianceSwitches {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* allegianceRTPC;
    uint8_t _pad_1[0x18];
    float neutralRtpcValue;
    float friendlyRtpcValue;
    float hostileRtpcValue;
    uint8_t _pad_2[0x4];
};




struct SCollectibleCategory {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* categoryName;
    uint8_t _pad_1[0x8];
};




struct FlashVariableObject {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkName;
    uint8_t _pad_1[0x8];
    enum ARDataType modeX;
    enum ARDataType modeY;
    enum ARDataType modeZ;
    enum ARDataType modeRotationX;
    enum ARDataType modeRotationY;
    enum ARDataType modeRotationZ;
    uint32_t currentFrame;
    float alpha;
    float x;
    float y;
    float z;
    float attachX;
    float attachY;
    float rotationX;
    float rotationY;
    float rotationZ;
    float scaleX;
    float scaleY;
    float scaleZ;
    float perspFOV;
    _Bool visible;
    _Bool setAlpha;
    _Bool setCurrentFrame;
    _Bool setScaleX;
    _Bool setScaleY;
    _Bool setScaleZ;
    _Bool setVisible;
    _Bool setPerspFOV;
    _Bool fix2dCoordinates;
    uint8_t _pad_2[0x7];
};




struct ItemMineableRockModifierParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    struct MiningLaserModifiers* MiningLaserModifier;
    uint8_t _pad_2[0x78];
};




struct LootConstraints {
    uint8_t _pad_0[0x8];
    struct FloatFactorRange* fullnessFactorRange;
    uint8_t _pad_1[0x8];
    int32_t totalResultsLimit;
    float chanceToGenerate;
    float chanceToGenerateAdditionalAttachedInventories;
    uint8_t _pad_2[0x4];
    struct AdvancedLootConstraints* advanced;
    uint8_t _pad_3[0x8];
};




struct SHackingCodeInputModifiersParams {
    uint8_t _pad_0[0x8];
    float abilityChargeUpModifier;
    float abilityDurationModifier;
    float abilityCooldownModifier;
    float threatPointsDiscount;
};




struct ZeroGTraversalConnection {
    uint8_t _pad_0[0x8];
    _Bool waitUntillFinished;
    uint8_t _pad_1[0x3];
    float delaySeconds;
    struct CryStringT* waitForEvent;
    uint8_t _pad_2[0x8];
    _Bool resetViewOnTransition;
    _Bool playExitAnimation;
    _Bool allowExitYield;
    uint8_t _pad_3[0x5];
    struct ZeroGTraversalState* nextState;
    uint8_t _pad_4[0x8];
};




struct BuildingBlocks_BindingsTransformInvert {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsTransformBase* input;
    uint8_t _pad_1[0x8];
};




struct SMicroCargoUnit {
    uint8_t _pad_0[0x8];
    int32_t microSCU;
    uint8_t _pad_1[0x4];
};




struct AudioCommsSignalComponentParams {
    uint8_t _pad_0[0x18];
    float radius;
    uint8_t _pad_1[0x4];
};




struct SDockingAnimatorStageTriggerParams {
    uint8_t _pad_0[0x8];
    enum ARDataType dockingAnimationStageTrigger;
    _Bool triggerVal;
    uint8_t _pad_1[0x3];
};




struct DelayedModifierTriggerParams {
    uint8_t _pad_0[0x8];
    float delay;
    uint8_t _pad_1[0x4];
    struct BaseItemModifierParams* modifier;
    uint8_t _pad_2[0x8];
};




struct EnvironmentFeedbackAudioObject {
    uint8_t _pad_0[0x8];
    struct CryStringT* boneName;
    uint8_t _pad_1[0x8];
    struct Vec3* attachOffset;
    uint8_t _pad_2[0x10];
    _Bool updatePosition;
    uint8_t _pad_3[0x7];
    struct AudioEnvironmentFeedbackPointDef* feedbackPointDef;
    uint8_t _pad_4[0x10];
};




struct SEAObjectiveMarkerStatusMessages {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* captureMessage;
    struct CLocIdentifier* defendMessage;
    struct CLocIdentifier* capturedMessage;
    struct CLocIdentifier* lostMessage;
    struct CLocIdentifier* capturingMessage;
    struct CLocIdentifier* boostCapturingMessage;
    struct CLocIdentifier* contestedMessage;
    struct CLocIdentifier* resettingMessage;
    struct CLocIdentifier* offlineMessage;
};




struct MapDisplayControlLimits {
    uint8_t _pad_0[0x8];
    float pitchMin;
    float pitchMax;
    float yawMin;
    float yawMax;
};




struct CameraComponentOverrideControllerSpawnNotifierComponentParams {
    uint8_t _pad_0[0x18];
};




struct EAScoringActorComponentParamsDef {
    uint8_t _pad_0[0x18];
    struct EAScoringComponentParamsDef* baseComponent;
    uint8_t _pad_1[0x20];
};




struct SecurityNetworkVariable {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct SecurityNetworkVariableValue_Base* value;
    uint8_t _pad_2[0x8];
};




struct MiningTransactionParams {
    uint8_t _pad_0[0x18];
};




struct SGameRulesReputationBaseParamsDef {
    uint8_t _pad_0[0x18];
};




struct MovementSystemComponentParams {
    uint8_t _pad_0[0x18];
    enum ARDataType movementProcessor;
    float navmeshPointOffsetDistance;
};




struct HackableParams {
    uint8_t _pad_0[0x18];
    float baseDuration;
    float baseErrorChance;
    uint32_t numErrorChecks;
    float maxPauseDuration;
    float updateProgressDeltaTime;
    _Bool resetAfterHackSuccess;
    uint8_t _pad_1[0x3];
    struct GlobalResourceAudio* audioTriggerProgressLoopStart;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* audioTriggerProgressLoopStop;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* audioTriggerStart;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* audioTriggerPause;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* audioTriggerResume;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* audioTriggerError;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* audioTriggerPartSuccess;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* audioTriggerSuccess;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* audioTriggerReset;
    uint8_t _pad_10[0x18];
    struct AudioRtpc* audioRtpcOverallProgress;
    uint8_t _pad_11[0x18];
    struct AudioRtpc* audioRtpcPartProgress;
    uint8_t _pad_12[0x18];
    struct AudioRtpc* audioRtpcTotalDuration;
    uint8_t _pad_13[0x18];
    struct AudioRtpc* audioRtpcRemainingDuration;
    uint8_t _pad_14[0x18];
};




struct SEntityComponentCrewManifestParams {
    uint8_t _pad_0[0x18];
    struct CrewManifest* crewManifest;
    uint8_t _pad_1[0x10];
};




struct ActorStanceDimensionsInfo {
    uint8_t _pad_0[0x8];
    struct ActorMotionStateFilter* stateFilter;
    uint8_t _pad_1[0x48];
    struct ActorStanceDimensions* dimensions;
    uint8_t _pad_2[0xe0];
};




struct DamageResistanceBase {
    uint8_t _pad_0[0x8];
};




struct SFirstSelect {
    uint8_t _pad_0[0x8];
    enum ARDataType firstSelectMode;
    uint8_t _pad_1[0x4];
    struct Tag* itemTag;
    uint8_t _pad_2[0x10];
};




struct EntityComponentRttAspectMFDDiagnosticsParams {
    uint8_t _pad_0[0x18];
    enum ARDataType targetRttSlot;
    float aspectRatio;
};




struct CraftingBlueprintTier_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct SecurityClearance_OutfitRequirement_NotDef {
    uint8_t _pad_0[0x8];
    struct SecurityClearance_OutfitRequirementDef* requirementToInvert;
    uint8_t _pad_1[0x8];
};




struct JumpDriveEffectParams {
    uint8_t _pad_0[0x8];
    struct Behavior_JumpDriveEffectsPreset* jumpDriveParticles;
    uint8_t _pad_1[0x8];
    struct GlobalResourceParticle* projectileEffect;
    uint8_t _pad_2[0x10];
    struct GlobalResourceParticle* tunnelResponseEffect;
    uint8_t _pad_3[0x10];
    struct JumpDriveWakeParams* wakeParams;
    uint8_t _pad_4[0x8];
    struct JumpDriveOpeningParams* openingParams;
    uint8_t _pad_5[0x8];
    struct JumpDriveTravelParams* travelParams;
    uint8_t _pad_6[0x18];
    struct JumpDriveExitParams* exitParams;
    uint8_t _pad_7[0x18];
};




struct SActorForceReactionFilterItemDef {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float minImpulse;
    float maxImpulse;
    uint8_t _pad_2[0x4];
};




struct ItemPowerSegmentThrottleParams {
    uint8_t _pad_0[0x8];
    int32_t default_;
    uint8_t _pad_1[0x4];
};




struct SActorEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct SSCSignatureSystemScanBounds {
    uint8_t _pad_0[0x8];
    struct Deg3* localRotation;
    uint8_t _pad_1[0x18];
    struct Vec3* min;
    uint8_t _pad_2[0x10];
    struct Vec3* max;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_EntityEffectSilhouette {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_1[0x8];
    float width;
    _Bool enabled;
    uint8_t _pad_2[0x3];
};




struct CommonCurrentTargetDistanceScore {
    uint8_t _pad_0[0x8];
    float lowDistToTarget;
    float mediumDistToTarget;
    float highDistToTarget;
    uint8_t _pad_1[0x4];
};




struct EAEntityDataParams {
    uint8_t _pad_0[0x8];
    enum ARDataType inclusionMode;
    uint8_t _pad_1[0x7];
    struct EAEntityInclusionParams* inclusionParams;
    uint8_t _pad_2[0x38];
};




struct MarkerTrackingLayoutParameters {
    uint8_t _pad_0[0x8];
    struct Vec3* position;
    uint8_t _pad_1[0x10];
    struct Vec3* orientation;
    uint8_t _pad_2[0x10];
    struct Vec3* size;
    uint8_t _pad_3[0x10];
};




struct ControlHintCondition_VehicleWeaponState {
    uint8_t _pad_0[0x8];
    enum ARDataType vehicleWeaponState;
    uint8_t _pad_1[0x7];
};




struct ParticleEffectAudioParams {
    uint8_t _pad_0[0x8];
    _Bool enableAudio;
    _Bool isManagedAudioObject;
    uint8_t _pad_1[0x6];
    struct AudioRtpc* audioRTPC;
    uint8_t _pad_2[0x18];
    float attenuationScale;
    float volume;
};




struct SGlobalChargeDrainBeamParams {
    uint8_t _pad_0[0x8];
    struct SChargeDrainTargetStateOutlineParams* targetStateOutlineParams;
    uint8_t _pad_1[0xc0];
    struct SChargeDrainCardParams* targetCardParams;
    uint8_t _pad_2[0x30];
    struct SChargeDrainCardParams* chargeCardParams;
    uint8_t _pad_3[0x30];
};




struct StarMapObjectType {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* classification;
    enum ARDataType facingMode;
    float minimumDisplaySize;
    float rotationSpeed;
    _Bool selectable;
    _Bool fadeBehindParent;
    _Bool onParentSurface;
    _Bool spawnNavPoints;
    _Bool showAsNeighbor;
    _Bool validQuantumTravelDestination;
    _Bool innerCulling;
    _Bool showInMapSelectList;
    uint8_t _pad_2[0x4];
    struct Marker_Configuration* markerConfig;
    uint8_t _pad_3[0x10];
    struct GlobalResourceGeometry* geometry;
    uint8_t _pad_4[0x10];
    struct GlobalResourceMaterial* material;
    uint8_t _pad_5[0x18];
};




struct QuickAccessWheelElement {
    uint8_t _pad_0[0x8];
    _Bool openContextMenuAsFolder;
    uint8_t _pad_1[0x7];
};




struct LeanConnection {
    uint8_t _pad_0[0x8];
    _Bool waitUntilFinished;
    uint8_t _pad_1[0x3];
    float delaySeconds;
    struct CryStringT* waitForEvent;
    uint8_t _pad_2[0x8];
    struct LeanState* nextState;
    uint8_t _pad_3[0x8];
};




struct SHackingThreatLevelConditionLinkPointActivated {
    uint8_t _pad_0[0x8];
    _Bool isIntruder;
    uint8_t _pad_1[0x3];
    int32_t pointsAdded;
};




struct STakedownTechniqueGains {
    uint8_t _pad_0[0x8];
    float takedown;
    uint8_t _pad_1[0x4];
};




struct SSmoothingWithLerp {
    uint8_t _pad_0[0x8];
    float lerpingFactor;
    float clampedBelow;
};




struct LandingSystemStateModifierBase {
    uint8_t _pad_0[0x8];
    struct AttachableStateModifierContextBase* context;
    uint8_t _pad_1[0x8];
};




struct AfterburnerParams {
    uint8_t _pad_0[0x8];
    struct Vec3* afterburnAccelMultiplier;
    uint8_t _pad_1[0x10];
    struct Vec3* afterburnAccelMultiplierPositive;
    uint8_t _pad_2[0x10];
    struct Vec3* afterburnAccelMultiplierNegative;
    uint8_t _pad_3[0x10];
    _Bool usePerDirectionModifiers;
    uint8_t _pad_4[0x7];
    struct Vec3* afterburnAngVelocityMultiplier;
    uint8_t _pad_5[0x10];
    struct Vec3* afterburnAngAccelMultiplier;
    uint8_t _pad_6[0x10];
    _Bool afterburnerAngCapacitorScaling;
    uint8_t _pad_7[0x7];
    struct BezierCurve* afterburnerAngCapacitorScalingCurve;
    uint8_t _pad_8[0x88];
    float afterburnAccelMultiplierControlSurface;
    float afterburnerPreDelayTime;
    float afterburnerRampUpTime;
    float afterburnerRampDownTime;
    float afterburnerCapacitorThresholdRatio;
    float capacitorMax;
    float capacitorAfterburnerIdleCost;
    float capacitorAfterburnerLinearCost;
    float capacitorAfterburnerAngularCost;
    float capacitorRegenDelayAfterUse;
    float capacitorRegenPerSec;
    uint8_t _pad_9[0x4];
    struct CapacitorAssignmentInputOutputDef* capacitorAssignmentInputOutputRegen;
    uint8_t _pad_10[0x10];
    struct CapacitorAssignmentInputOutputDef* capacitorAssignmentInputOutputRegenNavMode;
    uint8_t _pad_11[0x10];
    struct CapacitorAssignmentInputOutputDef* capacitorAssignmentInputOutputUsage;
    uint8_t _pad_12[0x10];
};




struct TrailFadingSettings {
    uint8_t _pad_0[0x8];
    float minimumVisibleSpeed;
    float speedFadeRatio;
    float lowIdleBound;
    float idleThrustBound;
    float thrustAfterburnBound;
    uint8_t _pad_1[0x4];
};




struct SReputationStateParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
};




struct ControlHintCondition_VehicleWeaponSystems {
    uint8_t _pad_0[0x8];
    enum ARDataType systems;
    uint8_t _pad_1[0x7];
};




struct LogoutInteractionParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* logoutInteraction;
    uint8_t _pad_1[0x8];
    struct SInteractionPointParams* logoutInteractionPoint;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* respawnInteraction;
    uint8_t _pad_3[0x8];
    struct SInteractionPointParams* respawnInteractionPoint;
    uint8_t _pad_4[0x8];
};




struct TransportDoorParams {
    uint8_t _pad_0[0x18];
};




struct SActorForceReactionAnimationStaggerConfig {
    uint8_t _pad_0[0x8];
    float blendspaceMin;
    uint8_t _pad_1[0x4];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
};




struct STileSocketParams {
    uint8_t _pad_0[0x18];
};




struct SCItemLightGroupParams {
    uint8_t _pad_0[0x18];
    _Bool attachToTile;
    _Bool controllable;
    uint8_t _pad_1[0x2];
    float powerRequirement;
    _Bool reactToVehicleEmergency;
    uint8_t _pad_2[0x7];
};




struct RangeEventDispatcherComponentParams {
    uint8_t _pad_0[0x18];
};




struct EAPickupSpecialEventOverrideParams {
    uint8_t _pad_0[0x8];
    float assetScaleMultiplier;
    uint8_t _pad_1[0x4];
    struct Vec3* overrideAssetRotation;
    uint8_t _pad_2[0x10];
    _Bool overrideAlternativeRotationAxis;
    uint8_t _pad_3[0x3];
    uint32_t badgeId;
    struct CryStringT* overrideGeometryTag;
    uint8_t _pad_4[0x8];
    enum ARDataType pickupAwardType;
    uint8_t _pad_5[0x4];
};




struct EntityComponentShipCommsChannelParams {
    uint8_t _pad_0[0x18];
};




struct RefiningProcess {
    uint8_t _pad_0[0x8];
    enum ARDataType refiningSpeed;
    enum ARDataType refiningQuality;
    struct CLocIdentifier* processName;
};




struct SGameVolumeComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCuttableShapeDefinition {
    uint8_t _pad_0[0x10];
    struct CryStringT* shapeNamePrefix;
    uint8_t _pad_1[0x8];
};




struct ControlHintCondition_ActorLeanState {
    uint8_t _pad_0[0x8];
    enum ARDataType leanState;
    uint8_t _pad_1[0x4];
};




struct ProceduralLayoutNode_Start {
    uint8_t _pad_0[0x8];
    struct ProceduralLayoutNode_Base* next;
    uint8_t _pad_1[0x8];
};




struct EAObjectiveInteractionDef {
    uint8_t _pad_0[0x8];
    struct Faction_LEGACY* faction;
    uint8_t _pad_1[0x10];
    enum ARDataType interactionType;
    uint8_t _pad_2[0x4];
    struct CryStringT* objectiveLinkName;
    uint8_t _pad_3[0x8];
    int32_t onInteractDamageToObjective;
    float onInteractDamageRadius;
    _Bool sendDamageDirectly;
    uint8_t _pad_4[0x7];
};




struct ConversationStickyFilter {
    uint8_t _pad_0[0x8];
    struct StickyFilterMovementParams* movementParams;
    uint8_t _pad_1[0x50];
    struct StickyFilterRotationParams* rotationParams;
    uint8_t _pad_2[0x18];
    struct StickyFilterAutocenterParams* autoCenterParams;
    uint8_t _pad_3[0x48];
    struct DynamicCameraEffects* dynamicCameraEffectsParams;
    uint8_t _pad_4[0x10];
};




struct QuantumStateMusicMap {
    uint8_t _pad_0[0x8];
    struct MusicLogicEvent* musicLogicEvent;
    uint8_t _pad_1[0x10];
    struct GlobalResourceAudio* musicWwiseEvent;
    uint8_t _pad_2[0x18];
    enum ARDataType state;
    uint8_t _pad_3[0x4];
};




struct SItemPortBreakable {
    uint8_t _pad_0[0x8];
    double YoungsModulus;
    float BreakStrain;
    float YieldStrain;
    _Bool Breakable;
    uint8_t _pad_1[0x7];
};




struct CraftingGameplayProperty_Crafter_Speed {
    uint8_t _pad_0[0x8];
    struct CraftingGameplayPropertyImpl_Base_Float* implementation;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_BooleanTextFormatModifier {
    uint8_t _pad_0[0x8];
    enum ARDataType field;
    _Bool value;
    uint8_t _pad_1[0x3];
};




struct SWeaponSpinAnimationParams {
    uint8_t _pad_0[0x8];
    enum ARDataType activationMode;
    uint8_t _pad_1[0x4];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    struct CryStringT* fragment;
    uint8_t _pad_3[0x8];
    struct CryStringT* spinParam;
    uint8_t _pad_4[0x8];
    float spinUpTime;
    float spinDownTime;
    float maxActiveTime;
    uint8_t _pad_5[0x4];
    struct SWeaponConditionBase* activationCondition;
    uint8_t _pad_6[0x18];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeFlexItemAlignment {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SMineableEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct AITargetableSettings {
    uint8_t _pad_0[0x8];
    float suggestedAttackerCapacity;
    int32_t maxIndividualIncomingMissileSize;
    int32_t maxTotalIncomingMissileSize;
    int32_t maxAttackerShootingTokens;
};




struct BuildingBlocks_FieldModifierEnumeratedTypeFlexAxisJustification {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SUIGeometryResourceComponentParams {
    uint8_t _pad_0[0x18];
};




struct LinkedCloneLocationMedicalTier {
    uint8_t _pad_0[0x8];
};




struct SIPickupModule {
    uint8_t _pad_0[0x18];
};




struct Infraction {
    uint8_t _pad_0[0x8];
    struct InfractionDefinition* definition;
    uint8_t _pad_1[0x10];
    struct InfractionParameters* parameterOverrides;
    uint8_t _pad_2[0x78];
};




struct VehicleModelScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SSCSignatureSystemAudioMultiplier {
    uint8_t _pad_0[0x8];
    float value;
    uint8_t _pad_1[0x4];
};




struct SWeaponZeroingParams {
    uint8_t _pad_0[0x8];
    float defaultRange;
    float maxRange;
    float rangeIncrement;
    float autoZeroingTime;
};




struct SItemUserHintActivator {
    uint8_t _pad_0[0x8];
    enum ARDataType hint;
    uint8_t _pad_1[0x4];
};




struct BreathingTriggerDef {
    uint8_t _pad_0[0x8];
    struct AudioBreathInterrupt* audioBreathInterrupt;
    uint8_t _pad_1[0x10];
    float interruptParam;
    _Bool resumeBreathingWhenAudioEnds;
    _Bool forceInhaleAfterResume;
    _Bool forceExhaleAfterResume;
    uint8_t _pad_2[0x1];
};




struct FriendManagerNotificationsParams {
    uint8_t _pad_0[0x8];
    struct PlayerNotificationBannerParams* friendAdded;
    uint8_t _pad_1[0x28];
    struct PlayerNotificationBannerParams* friendRequestReceived;
    uint8_t _pad_2[0x28];
    struct PlayerNotificationBannerParams* friendRequestDeclined;
    uint8_t _pad_3[0x28];
};




struct SEntityComponentCorpseMarkerParams {
    uint8_t _pad_0[0x18];
    struct Marker_Configuration* markerConfig;
    uint8_t _pad_1[0x10];
};




struct SCItemManufacturer {
    uint8_t _pad_0[0x8];
    struct SCItemLocalization* Localization;
    uint8_t _pad_1[0xa8];
    struct CryStringT* Logo;
    uint8_t _pad_2[0x8];
    struct CryStringT* LogoFullColor;
    uint8_t _pad_3[0x8];
    struct CryStringT* LogoSimplifiedWhite;
    uint8_t _pad_4[0x8];
    struct CryStringT* Code;
    uint8_t _pad_5[0x8];
    struct SCItemUIView_DashboardCanvasDef* DashboardCanvasConfig;
    uint8_t _pad_6[0x10];
    struct BuildingBlocks_Style* BuildingBlocksStyle;
    uint8_t _pad_7[0x10];
    struct Tag* AudioManufacturerTag;
    uint8_t _pad_8[0x10];
};




struct ItemSuitArmorSignatureParams {
    uint8_t _pad_0[0x8];
    enum ARDataType signatureType;
    float signatureEmission;
    float signatureReductionWeighted;
    float signatureReductionAbsolute;
};




struct LegacyCrafterInteractions {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* goToIdleInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* goToBusyInteraction;
    uint8_t _pad_2[0x8];
    struct Tag* idleStateTag;
    uint8_t _pad_3[0x10];
    struct Tag* busyStateTag;
    uint8_t _pad_4[0x10];
};




struct TransportGatewayTimerPanelParams {
    uint8_t _pad_0[0x18];
};




struct FireRepairerType_EntityPos {
    uint8_t _pad_0[0x8];
};




struct EntityEffectSystem_LightType_ProjectorLight {
    uint8_t _pad_0[0x8];
    float radius;
    uint8_t _pad_1[0x4];
    float fovAngle;
    float attenuationBulbSize;
    float attenuationTweak;
    uint8_t _pad_2[0x4];
    struct CryStringT* texturePath;
    uint8_t _pad_3[0x8];
    _Bool focusedBeam;
    uint8_t _pad_4[0x7];
};




struct SStartRemoveInfractionTimerGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct SMobiGlasSetUniqueShip {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* shipClass;
    uint8_t _pad_1[0x10];
};




struct CraftingRecipeCosts_RecordRef {
    uint8_t _pad_0[0x8];
    struct CraftingRecipeCostsRecord* costsRecord;
    uint8_t _pad_1[0x10];
};




struct ActorStatusScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct ActorStatusPrioritySet* prioritySet;
    uint8_t _pad_3[0x38];
};




struct CtxGraph_Component {
    uint8_t _pad_0[0x8];
};




struct MissionStringVariant {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* string;
};




struct UIGraph_SimpleComponent {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_IntegerStringPair {
    uint8_t _pad_0[0x8];
    int64_t first;
    struct CryStringT* second;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsStringBase* secondOverride;
    uint8_t _pad_2[0x8];
};




struct UsableItemPort {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
    struct CryStringT* itemPortFragmentTag;
    uint8_t _pad_2[0x8];
    struct TagsDNF* conditionTags;
    uint8_t _pad_3[0x60];
    _Bool recurseThroughInventoryWhenFindingItemProvider;
    uint8_t _pad_4[0x7];
};




struct SHackingAIAlertedStateModifiersParams {
    uint8_t _pad_0[0x8];
    float movementSpeedModifier;
    float chargeUpModifier;
    float cooldownModifier;
    uint8_t _pad_1[0x4];
};




struct HoverCollisions {
    uint8_t _pad_0[0x8];
    float antiSpinThreshold;
    float linearCollisionDamp;
    float angularCollisionDamp;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_SteppedLine {
    uint8_t _pad_0[0x8];
    float angle;
    float midPoint;
};




struct OnFootTacticScores {
    uint8_t _pad_0[0x8];
    struct CryStringT* tacticName;
    uint8_t _pad_1[0x8];
    struct CommonTargetingSameTargetScore* amountOfEntitiesTargetingSameTargetScore;
    uint8_t _pad_2[0x18];
    struct CommonTargetVisibilityScore* isCurrentTargetVisibleScore;
    uint8_t _pad_3[0x8];
    struct CommonCurrentTargetDistanceScore* currentDistanceToTargetScore;
    uint8_t _pad_4[0x28];
    struct OnFootWeaponRangeCategoryScore* idealWeaponCombatRangeScore;
    uint8_t _pad_5[0x10];
};




struct RadarDisplay_Config {
    uint8_t _pad_0[0x8];
    struct SimpleSpriteSlot* LocalEntity;
    uint8_t _pad_1[0x20];
    struct SimpleSpriteSlot* Line;
    uint8_t _pad_2[0x20];
    struct SimpleSpriteSlot* Number;
    uint8_t _pad_3[0x20];
    struct SimpleSpriteSlot* Missile;
    uint8_t _pad_4[0x20];
    struct SimpleSpriteSlot* Core;
    uint8_t _pad_5[0x20];
    struct SimpleSpriteSlot* Beacon;
    uint8_t _pad_6[0x20];
    struct SimpleSpriteSlot* Blob;
    uint8_t _pad_7[0x20];
    struct SimpleSpriteSlot* ArrowUp;
    uint8_t _pad_8[0x20];
    struct SimpleSpriteSlot* ArrowDown;
    uint8_t _pad_9[0x20];
    struct SimpleSpriteSlot* FocusedArrowUp;
    uint8_t _pad_10[0x20];
    struct SimpleSpriteSlot* FocusedArrowDown;
    uint8_t _pad_11[0x20];
    float LineThickness;
    float QuadSize;
    struct Vec2* ActivePingUV_Start;
    uint8_t _pad_12[0x8];
    struct Vec2* ActivePingUV_Size;
    uint8_t _pad_13[0x8];
    enum ARDataType ActivePingColor;
    uint8_t _pad_14[0x6];
    struct RadarDisplayEntryEffects_Config* radarEntryEffects;
    uint8_t _pad_15[0x18];
    struct RadarPlate_Config* radarPlateSettings;
    uint8_t _pad_16[0x118];
};




struct DefaultActionsEntityEntryCondition {
    uint8_t _pad_0[0x8];
};




struct SJumpTunnelExitParams {
    uint8_t _pad_0[0x8];
    struct Range* defaultDistanceRange;
    uint8_t _pad_1[0x8];
    float defaultMaxHeight;
    uint8_t _pad_2[0x4];
    struct SJumpPointPushAreaParams* exitPushArea;
    uint8_t _pad_3[0x18];
};




struct TractorBeamTarget {
    uint8_t _pad_0[0x18];
};




struct ScanDisplayStandardSetupParams {
    uint8_t _pad_0[0x8];
    enum ARDataType scanTable;
    uint8_t _pad_1[0x7];
    _Bool failIfNoBody;
    _Bool checkDisplaySection;
    uint8_t _pad_2[0x6];
    struct ScanDisplayVariableParams* headerVariable;
    uint8_t _pad_3[0x8];
    struct ScanDisplayVariableParams* bodyVariable;
    uint8_t _pad_4[0x8];
    struct ScanDisplayVariableParams* capacityVariable;
    uint8_t _pad_5[0x8];
    struct ScanDisplayVariableParams* extensionVariable;
    uint8_t _pad_6[0x8];
};




struct SLootableMainInteractionsTarget {
    uint8_t _pad_0[0x8];
    struct CryStringT* helperName;
    uint8_t _pad_1[0x8];
    struct QuatT* offset;
    uint8_t _pad_2[0x58];
};




struct BuildingBlocks_FieldTransitionNumber {
    uint8_t _pad_0[0x8];
    float duration;
    float delay;
    float delayRandomRange;
    _Bool timescaleIndependent;
    uint8_t _pad_1[0x3];
    struct BuildingBlocks_TimingFunctionBase* timingFunction;
    uint8_t _pad_2[0x8];
    enum ARDataType field;
    uint8_t _pad_3[0x4];
};




struct EntityEffectSystem_LightLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* subMeshName;
    uint8_t _pad_1[0x8];
    _Bool linkIgnoresColor;
    uint8_t _pad_2[0x7];
};




struct CommodityTemperatureTolerance {
    uint8_t _pad_0[0x8];
    float optimalTempMin;
    float optimalTempMax;
    float OptimalTempFallOff;
    uint8_t _pad_1[0x4];
    struct TemperatureDamageControl* damageCurveControl;
    uint8_t _pad_2[0x8];
};




struct MissionVariableFloat {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    float value;
    uint8_t _pad_3[0x4];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalAutoScrollBehavior {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SMannequinTagParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* tag;
    uint8_t _pad_1[0x10];
};




struct ControlHintCondition_ActorCommsState {
    uint8_t _pad_0[0x8];
    enum ARDataType commsState;
    uint8_t _pad_1[0x7];
};




struct ActorBaseStanceMovementModifiers {
    uint8_t _pad_0[0x8];
    float strafeSpeedScale;
    float strafeForwardSpeedScale;
    float turnSpeedScale;
    float backwardSpeedScale;
    float turnMaxAngleVelocity;
    float groundSlopeSpeedScale;
};




struct MedBedComponentParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* healInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* setRespawnInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* cancelRespawnInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* cancelAllRespawnsInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* respawnInteraction;
    uint8_t _pad_5[0x8];
    struct SInteractionPointParams* respawnInteractionPoint;
    uint8_t _pad_6[0x8];
    struct UsableUseChannelInstance* useChannelToHealActor;
    uint8_t _pad_7[0x8];
    struct SInteractionState* surgerySequenceState;
    uint8_t _pad_8[0x8];
    float respawnRange;
    float timeToHeal;
    float delayBeforeHeal;
    enum ARDataType medBedTier;
    struct MedBedSurgeryNames* surgeryNames;
    uint8_t _pad_9[0x130];
    struct MedicalItemTierConfig* medicalItemTierConfig;
    uint8_t _pad_10[0x10];
};




struct BuildingBlocks_SVGContainerMode {
    uint8_t _pad_0[0x8];
    struct CryStringT* svgPath;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_TRBL* nineSliceRect;
    uint8_t _pad_2[0x18];
};




struct SActorStanceDimensionsExtraDef {
    uint8_t _pad_0[0x8];
};




struct BuffDurationOverrideIndefiniteS42 {
    uint8_t _pad_0[0x8];
};




struct mobiGlasAppRef {
    uint8_t _pad_0[0x8];
    struct CryStringT* mobiGlasAppName;
    uint8_t _pad_1[0x8];
    struct mobiGlasApp* appRef;
    uint8_t _pad_2[0x10];
};




struct InteractionConditionCanAttachItem {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct StatInfluence {
    uint8_t _pad_0[0x8];
    struct Tag* skillTag;
    uint8_t _pad_1[0x10];
    int32_t percentage;
    uint8_t _pad_2[0x4];
};




struct HangarAreaComponentParams {
    uint8_t _pad_0[0x18];
    float xDimension;
    float yDimension;
    float zDimension;
    uint8_t _pad_1[0x4];
};




struct MissionLocationParams {
    uint8_t _pad_0[0x8];
    struct MissionLocationTemplate* template_;
    uint8_t _pad_1[0x10];
    struct MissionLocationData* additionalData;
    uint8_t _pad_2[0x250];
    struct CryStringT* actionArea;
    uint8_t _pad_3[0x8];
};




struct ActorTargetedParams {
    uint8_t _pad_0[0x8];
    float frustumScaleW;
    float frustumScaleH;
    float lookFovAngle;
    float frustumFar;
};




struct AsteroidStateTemplateInternal {
    uint8_t _pad_0[0x8];
    enum ARDataType debrisDensityMod;
    float debrisDensity;
};




struct SEntityEffectSystem_OverrideVectorValueModifier {
    uint8_t _pad_0[0x8];
    struct Vec3* overrideValues;
    uint8_t _pad_1[0x10];
};




struct SCItemDisplayScreenPowerParams {
    uint8_t _pad_0[0x8];
    _Bool ignorePowerRequirements;
    uint8_t _pad_1[0x7];
};




struct SCharacterCustomizerTextureParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* texturePath;
    uint8_t _pad_1[0x8];
    int32_t numTilesU;
    int32_t numTilesV;
    int32_t offsetU;
    int32_t offsetV;
    _Bool supportsHueRotation;
    uint8_t _pad_2[0x7];
};




struct SCItemWeaponRegenPoolComponentParams {
    uint8_t _pad_0[0x18];
    float regenFillRate;
    float ammoLoad;
    _Bool respectsCapacitorAssignments;
    uint8_t _pad_1[0x7];
    struct CapacitorAssignmentInputOutputDef* capacitorAssignmentInputOutputRegen;
    uint8_t _pad_2[0x10];
    struct CapacitorAssignmentInputOutputDef* capacitorAssignmentInputOutputRegenNavMode;
    uint8_t _pad_3[0x10];
    struct CapacitorAssignmentInputOutputDef* capacitorAssignmentInputOutputAmmoLoad;
    uint8_t _pad_4[0x10];
};




struct STargetSelectorHudParams {
    uint8_t _pad_0[0x8];
    _Bool calculateLockedTargetBracket;
    _Bool calculateSelectedTargetBracket;
    uint8_t _pad_1[0x2];
    float hudTargetPointerAngleOffset;
    float hudTargetPointerHeadFollowAngleInner;
    float hudTargetPointerHeadFollowAngleOuter;
    float hudTargetPointerHeadFollowSwapTime;
    float relativeAttitudePointerPosition;
    struct BezierCurve* targetPointerAlpha;
    uint8_t _pad_2[0x88];
    struct STargetSelectorColorHighlighting* outlineSubtargetsLocked;
    uint8_t _pad_3[0x38];
    struct STargetSelectorColorHighlighting* outlineSubtargetsAvailable;
    uint8_t _pad_4[0x40];
};




struct Camera {
    uint8_t _pad_0[0x8];
    struct CameraBaseConfig* baseConfig;
    uint8_t _pad_1[0x8];
};




struct NavigationLinkController {
    uint8_t _pad_0[0x8];
};




struct ActorShudderConfig {
    uint8_t _pad_0[0x8];
    _Bool shuddersEnabled;
    uint8_t _pad_1[0x3];
    float frequencyMin;
    float frequencyMax;
    float amplitudeMin;
    float amplitudeMax;
    float durationMin;
    float durationMax;
    float delayMin;
    float delayMax;
    uint8_t _pad_2[0x4];
};




struct GlobalJumpPointOpeningParams {
    uint8_t _pad_0[0x8];
    float projectileTime;
    float tuningCollapseTime;
    float openEffectStartDelay;
    float revealTime;
    struct BezierCurve* revealAnimCurve;
    uint8_t _pad_1[0x88];
    float revealFadeDelay;
    float openingTime;
    float openingEndDelay;
    uint8_t _pad_2[0x4];
    struct Range* apertureTimeScaleRange;
    uint8_t _pad_3[0x8];
};




struct UIGraph_MarkerARDockComponent {
    uint8_t _pad_0[0x8];
};




struct PortRefillData {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* Port;
    uint8_t _pad_1[0x8];
    float Delay;
    uint8_t _pad_2[0x4];
};




struct HarvestableProviderParams {
    uint8_t _pad_0[0x18];
    struct HarvestableProviderPreset* preset;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_ColorRecordReference {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_ExternalColorReference* color;
    uint8_t _pad_1[0x10];
    float alpha;
    uint8_t _pad_2[0x4];
};




struct SAimRecoilNoiseCurves {
    uint8_t _pad_0[0x8];
    float yawNoiseMaxValue;
    float pitchNoiseMaxValue;
    float rollNoiseMaxValue;
    uint8_t _pad_1[0x4];
    struct SYawPitchRollCurves* yawPitchRollNoiseCurves;
    uint8_t _pad_2[0x8];
};




struct ControlHintAlwaysDisplay_WhenBaseAndAdditionalConditionsPass {
    uint8_t _pad_0[0x8];
    struct ControlHintCondition* additionalCondition;
    uint8_t _pad_1[0x8];
};




struct SPlayerLoadoutOverride {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct EntityClassDefinition* standinRecord;
    uint8_t _pad_2[0x10];
};




struct SHackingCameraParams {
    uint8_t _pad_0[0x8];
    struct Vec2* initialAngles;
    uint8_t _pad_1[0x8];
    struct Vec2* angleLimits;
    uint8_t _pad_2[0x8];
    struct Vec2* angleLimitRotationOffsets;
    uint8_t _pad_3[0x8];
    struct Vec2* angleToMouseInputRatios;
    uint8_t _pad_4[0x8];
    struct Vec2* rubbernessRatios;
    uint8_t _pad_5[0x8];
    int32_t minZoomBoardSize;
    int32_t maxZoomBoardSize;
};




struct SActorForceReactionExternalImpulseDef {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct Range* externalCollisionToImpulseRange;
    uint8_t _pad_2[0x8];
};




struct SProjectedDisplayParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float pitchOffset;
    float yawOffset;
    enum ARDataType alignmentType;
};




struct SIReputationModule {
    uint8_t _pad_0[0x18];
};




struct EngineeringStateMessages {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* message;
};




struct SVibrationVehicleDef {
    uint8_t _pad_0[0x8];
    _Bool listensToVehicleHitEvents;
    uint8_t _pad_1[0x3];
    float vehicleHitDamageMaxRatio;
    float vehicleHitSuppressionDecayTime;
    uint8_t _pad_2[0x4];
    struct BezierCurve* vehicleHitSuppressionCurve;
    uint8_t _pad_3[0x88];
    struct BezierCurve* vehicleHitDamageVibrationMapping;
    uint8_t _pad_4[0x88];
    float dragModifier;
    float liftModifier;
    float masterModeDragModifier;
    float thrusterModifier;
    float thrusterNormalSuppressionIncreaseTime;
    float thrusterNormalSuppressionDecayTime;
    struct BezierCurve* thrusterNormalSuppressionCurve;
    uint8_t _pad_5[0x88];
    float thrusterBoostRumbleStrength;
    float thrusterBoostSuppressionIncreaseTime;
    float thrusterBoostSuppressionDecayTime;
    uint8_t _pad_6[0x4];
    struct BezierCurve* thrusterBoostSuppressionCurve;
    uint8_t _pad_7[0x88];
    float electricalChargeModifier;
    _Bool deactivateWindCheckOnPlanets;
    uint8_t _pad_8[0x3];
    float magLaunchInputModifier;
    uint8_t _pad_9[0x4];
    struct JumpSystemVibrationParams* jumpSystemVibrations;
    uint8_t _pad_10[0x5e0];
};




struct SAsteroidRingComponentParams {
    uint8_t _pad_0[0x18];
    int32_t rngSeed;
    uint8_t viewDistRatio;
    uint8_t lodRatio;
    uint8_t _pad_1[0x2];
    struct CryStringT* composition;
    uint8_t _pad_2[0x8];
    float noiseAmplitude;
    float noiseGranularity;
    float noiseRoughness;
    uint8_t _pad_3[0xc];
    float densityScale;
    uint8_t _pad_4[0x4];
    double innerRadiusKm;
    double outerRadiusKm;
    double depthKm;
    float noiseFrequencyRadial;
    uint8_t _pad_5[0x4];
};




struct Marker_ShowRuleDisplayMode {
    uint8_t _pad_0[0x8];
    enum ARDataType displayMode;
    uint8_t _pad_1[0x4];
};




struct EntityComponentRttAspectMFDTargetStatusParams {
    uint8_t _pad_0[0x18];
    enum ARDataType targetRttSlot;
    float aspectRatio;
};




struct EntranceDisplayComponentParams {
    uint8_t _pad_0[0x18];
    struct SEntrancesDef* entrancesRecord;
    uint8_t _pad_1[0x10];
};




struct VoiceChatInputParams {
    uint8_t _pad_0[0x18];
    struct Tag* connectionEstablishedTag;
    uint8_t _pad_1[0x10];
    struct Tag* connectionLostTag;
    uint8_t _pad_2[0x10];
    struct Tag* pushToTalkEngagedTag;
    uint8_t _pad_3[0x10];
    struct Tag* pushToTalkDisengagedTag;
    uint8_t _pad_4[0x10];
};




struct SEASimpodSpawning {
    uint8_t _pad_0[0x18];
    float spawnScreenForceSpawnTime;
    float respawnInvulnerableTime;
    _Bool swapSpawnsOnNewRound;
    _Bool hideRespawnPrompt;
    _Bool playerCanSuicide;
    _Bool ejectingIsDeath;
    _Bool autoEnterRemoteTurret;
    enum ARDataType spawnScreenMode;
    _Bool forceSpawnOnGameStart;
    _Bool forceRespawnOnGameStart;
    struct SEASpawningLocalization* localization;
    uint8_t _pad_1[0x28];
    struct SEASpawnRespawnSchedulerParams* respawnScheduler;
    uint8_t _pad_2[0x8];
    struct SEASpawnLivesGovernor* livesGovernor;
    uint8_t _pad_3[0x8];
    struct SEAPlayerSpawnProperties* playerSpawnProperties;
    uint8_t _pad_4[0xa8];
    struct SEAVehicleSpawnProperties* vehicleSpawnProperties;
    uint8_t _pad_5[0x30];
};




struct BuildingBlocks_TooltipPolicy {
    uint8_t _pad_0[0x8];
    float startDelay;
    float duration;
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* text;
    struct Vec2* positionOffset;
    uint8_t _pad_2[0x8];
    _Bool shouldUseParentOffsets;
    _Bool isLocal;
    uint8_t _pad_3[0x6];
};




struct SProjectedYawLineParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float startAngle;
    float endAngle;
    _Bool ticksEnabled;
    uint8_t _pad_2[0x3];
    float tickForwardFadeStartAngle;
    float tickForwardFadeEndAngle;
    float tickBorderFadeAngle;
    float tickIncrementAngle;
    float tickIncrementVisualAngleRatio;
    enum ARDataType tickAlignmentType;
    _Bool ticksAddCorners;
    _Bool ticksAsFullCircle;
    _Bool fixYawLineToAngle;
    uint8_t _pad_3[0x1];
    float fixedAngle;
    enum ARDataType anchorType;
    uint8_t _pad_4[0x4];
};




struct SActorForceReactionLeanAngleLimitsDef {
    uint8_t _pad_0[0x8];
    float forward;
    float backward;
    float left;
    float right;
};




struct ArmouryCertificationParams {
    uint8_t _pad_0[0x8];
    struct Tag* certificationUnlockTag;
    uint8_t _pad_1[0x10];
    struct EntityClassDefinition* weaponProvided;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_ColorTextFormatModifier {
    uint8_t _pad_0[0x8];
    enum ARDataType field;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_ColorSolid* value;
    uint8_t _pad_2[0x8];
};




struct Time {
    uint8_t _pad_0[0x8];
    int32_t hour;
    int32_t minute;
    int32_t second;
    uint8_t _pad_1[0x4];
};




struct GlobalResourceBase {
    uint8_t _pad_0[0x8];
};




struct FiringRangeTimeEntry {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* entryName;
    float entryTime;
    uint8_t _pad_1[0x4];
};




struct BulletPierceabilityParams {
    uint8_t _pad_0[0x8];
    float damageFalloffLevel1;
    float damageFalloffLevel2;
    float damageFalloffLevel3;
    float maxPenetrationThickness;
};




struct ControlHintCondition_VehicleLockedTarget {
    uint8_t _pad_0[0x8];
    enum ARDataType lockedTarget;
    uint8_t _pad_1[0x7];
};




struct SCuttableState {
    uint8_t _pad_0[0x8];
    struct SInteractionState* state;
    uint8_t _pad_1[0x8];
    struct SCuttableShapeDefinition* cuttableShape;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_CaseModifierTextFormatModifier {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct PathingComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* navigationType;
    uint8_t _pad_1[0x8];
};




struct SIDamageHandlingModule {
    uint8_t _pad_0[0x18];
};




struct SActorForceReactionFlightDurationConfig {
    uint8_t _pad_0[0x8];
    float forcePercent;
    float flightDuration;
};




struct SYawPitchRollCurves {
    uint8_t _pad_0[0x8];
    struct BezierCurve* yawCurve;
    uint8_t _pad_1[0x88];
    struct BezierCurve* pitchCurve;
    uint8_t _pad_2[0x88];
    struct BezierCurve* rollCurve;
    uint8_t _pad_3[0x88];
};




struct EntityComponentSpawnClosetManagerParams {
    uint8_t _pad_0[0x18];
};




struct ObjectiveRewardContributionBase {
    uint8_t _pad_0[0x8];
};




struct SCharacterCustomizerRandomizationParams {
    uint8_t _pad_0[0x8];
};




struct SCPlayerMissionLogComponentParams {
    uint8_t _pad_0[0x18];
};




struct SNonAuthoritativeClientStatsRecording {
    uint8_t _pad_0[0x18];
};




struct ScreenEffects_ParamStrengthBehavior_RangeFade {
    uint8_t _pad_0[0x8];
    struct Tag* strengthTag;
    uint8_t _pad_1[0x10];
    float rangeStart;
    float rangeEnd;
    _Bool useSharedPattern;
    uint8_t _pad_2[0x7];
};




struct SThrowAudioParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* onThrownAudioTrigger;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* collisionSpeedAudioRTPC;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* onCollisionAudioTrigger;
    uint8_t _pad_3[0x18];
    enum ARDataType onCollisionAudioPerceptionInfo;
    float onCollisionAudioPerceptionRadius;
};




struct BuildingBlocks_TriggerModifyNumber {
    uint8_t _pad_0[0x8];
    struct CryStringT* variableName;
    uint8_t _pad_1[0x8];
    float value;
    uint8_t _pad_2[0x4];
};




struct CraftingRecipe_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct AreaBoxComponentParams {
    uint8_t _pad_0[0x28];
};




struct SCSeatAccessEntranceInteractionStateParams {
    uint8_t _pad_0[0x20];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* deployRetractFragmentTags;
    uint8_t _pad_3[0x8];
    struct SCSeatActorAttachmentParams* attachment;
    uint8_t _pad_4[0x8];
    enum ARDataType skipState;
    _Bool interiorEntrance;
    uint8_t _pad_5[0x3];
};




struct BuildingBlocks_BindingsLocalizedBase {
    uint8_t _pad_0[0x50];
};




struct SLinkedInteractionStateTags {
    uint8_t _pad_0[0x8];
    struct TagList* stateTags;
    uint8_t _pad_1[0x30];
    struct SInteractionState* state;
    uint8_t _pad_2[0x8];
};




struct ActiveContractSettings {
    uint8_t _pad_0[0x8];
    _Bool hasCompleteButton;
    _Bool handlesAbandonRequest;
    _Bool canBeShared;
    _Bool displayAlliedMarkers;
    _Bool onlyOwnerCanComplete;
    uint8_t _pad_1[0x3];
};




struct ControlHintCondition_VehicleScanWaveAvailability {
    uint8_t _pad_0[0x8];
    enum ARDataType scanWaveAvailable;
    uint8_t _pad_1[0x7];
};




struct PlayerScoresManagerParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* eliminatedEventString;
    float eventDurationSeconds;
    float updateTimeSeconds;
};




struct ControlHintCondition_VehicleCounterMeasureState {
    uint8_t _pad_0[0x8];
    enum ARDataType vehicleCounterMeasureState;
    uint8_t _pad_1[0x7];
};




struct LegacyCraftingOutput_ResourceAmount {
    uint8_t _pad_0[0x8];
    struct ResourceType* resource;
    uint8_t _pad_1[0x10];
    struct SBaseCargoUnit* amount;
    uint8_t _pad_2[0x8];
};




struct AdsCameraParams {
    uint8_t _pad_0[0x8];
    struct Camera* adsCamera;
    uint8_t _pad_1[0x10];
    struct Vec3* adsCameraOffset;
    uint8_t _pad_2[0x10];
};




struct VehicleEntranceMarkerProvider {
    uint8_t _pad_0[0x8];
    struct Marker_Configuration* markerConfig;
    uint8_t _pad_1[0x10];
};




struct ItemResourceControlParameterUIParameter {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float limitMin;
    float limitMax;
    float initValue;
    uint8_t _pad_2[0x4];
};




struct NavigationTriggerAdapter {
    uint8_t _pad_0[0x8];
};




struct EAPlayerHUDParams {
    uint8_t _pad_0[0x8];
    _Bool scoreVScoreActive;
    enum ARDataType scoreDisplayType;
    _Bool scoreVScoreFillableActive;
    _Bool timeElapsedActive;
    _Bool timeRemainingActive;
    _Bool lapTimeActive;
    _Bool lapsActive;
    _Bool racePlacementActive;
    _Bool roundsActive;
    _Bool livesActive;
    _Bool wavesActive;
    uint8_t _pad_1[0x1];
    int32_t numScoresToDisplayClient;
    int32_t numScoresToDisplayLeader;
    uint8_t _pad_2[0x4];
};




struct SMisfireDamageValue {
    uint8_t _pad_0[0x8];
    float health;
    uint8_t _pad_1[0x4];
};




struct Flash_PaletteEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct SRGBA8* FlashColor;
    uint8_t _pad_2[0x8];
};




struct EAStateParams {
    uint8_t _pad_0[0x18];
    struct GameRulesEAStatePreGameParams* pregame;
    uint8_t _pad_1[0x30];
    struct GameRulesEAStatePostGameParams* postgame;
    uint8_t _pad_2[0x38];
};




struct ContractGenerationParams_RequestOnly {
    uint8_t _pad_0[0x8];
};




struct PingContactLifeTime {
    uint8_t _pad_0[0x8];
    float lifeTimeMin;
    float lifeTimeMax;
};




struct PlayerChoice_HeadLookParams {
    uint8_t _pad_0[0x8];
    float innerZoneSize;
    float innerZoneFactor;
    float outerZoneFactor;
    _Bool smoothZones;
    uint8_t _pad_1[0x3];
};




struct MobiGlasAppDataBase {
    uint8_t _pad_0[0x8];
};




struct SecurityClearanceTokenData_Ownership {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_StaticVariableNumber {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float value;
    uint8_t _pad_2[0x4];
};




struct MarkerTrackingViewMode {
    uint8_t _pad_0[0x8];
    struct MarkerTrackingViewModeParameters* viewModeConfig;
    uint8_t _pad_1[0x10];
    struct SInteractionState* state;
    uint8_t _pad_2[0x8];
};




struct ContractBoolParam {
    uint8_t _pad_0[0x8];
    enum ARDataType param;
    _Bool value;
    uint8_t _pad_1[0x3];
};




struct CounterMeasureProjectileParams {
    uint8_t _pad_0[0x8];
    struct ProjectileDetonationParams* detonationParams;
    uint8_t _pad_1[0x8];
    struct ProjectileProximityTriggerParams* proximityTriggerParams;
    uint8_t _pad_2[0x8];
    struct CounterMeasureBaseParams* typeParams;
    uint8_t _pad_3[0x8];
    struct GlobalResourceAudio* trailStartAudioTrigger;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* trailStopAudioTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* explosionStartAudioTrigger;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* explosionStopAudioTrigger;
    uint8_t _pad_7[0x18];
};




struct InteractionConditionEmptyItemPort {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct CryStringT* itemPortTag;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_BindingsLocalizedRandomFromInteger {
    uint8_t _pad_0[0x50];
    int32_t length;
    _Bool withConsonants;
    _Bool withConsonantsUppercase;
    _Bool withVowels;
    _Bool withVowelsUppercase;
    _Bool withSymbols;
    _Bool withNumbers;
    uint8_t numberBase;
    uint8_t _pad_1[0x1];
    int32_t seedOffset;
    struct CLocIdentifier* prefix;
    struct CLocIdentifier* suffix;
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_2[0x18];
};




struct SActorForceReactionImpulseAccumulationConfig {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float decay;
    float accumulationFraction;
    float cooldown;
};




struct SHighlightBehaviorNodeParams {
    uint8_t _pad_0[0x8];
};




struct SWeaponProceduralHandsRecoilConfigDef {
    uint8_t _pad_0[0x8];
    float decay;
    float endDecay;
    float fireRecoilTime;
    float fireRecoilStrengthFirst;
    float fireRecoilStrength;
    float angleRecoilStrength;
    _Bool useRandomRotation;
    uint8_t _pad_1[0x7];
    struct Ang3* rotation;
    uint8_t _pad_2[0x10];
    float randomness;
    float randomnessBackPush;
    float frontalOscillationRotation;
    float frontalOscillationStrength;
    float frontalOscillationDecay;
    float frontalOscillationRandomness;
    struct SWeaponProceduralHandsRecoilCurveConfigDef* curveRecoil;
    uint8_t _pad_3[0x260];
};




struct SecurityClearanceTokenData_NeutralZone {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
};




struct SMobiGlasAppDataPacket {
    uint8_t _pad_0[0x8];
    struct SMobiGlasAppDataPacketBase* dataPacket;
    uint8_t _pad_1[0x8];
};




struct GasCloudSunShadowParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float resScaleXY;
    float resScaleZ;
    float shadowDistanceScale;
};




struct SMobiGlasAppParamsBase {
    uint8_t _pad_0[0x8];
};




struct MotionTurnParams {
    uint8_t _pad_0[0x8];
    float rightYawTrigger;
    float leftYawTrigger;
    float turnTriggerOffset;
    float targetOffset;
    float snapOffset;
    float maxTurnSpeed;
    float delayIdleSeconds;
    uint8_t _pad_1[0x4];
};




struct HudColor_HoloParam {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    float Opacity;
    float Glow;
    float DiffuseOpacity;
    float RimOpacity;
    float SilhouetteOpacity;
    uint8_t _pad_2[0x4];
};




struct LedgeNearbyParams {
    uint8_t _pad_0[0x8];
    float maxDistanceIdle;
    float maxDistanceMovement;
    float maxDistanceInAirIdle;
    float maxDistanceInAirMovement;
    float minHeight;
    float maxHeightFromGround;
    float maxHeightInAir;
    float maxSearchAngleDeg;
    float inAirInvalidUpperSearchEdgeHeight;
    float inAirInvalidUpperSearchEdgeDepth;
    struct Vec3* searchDir;
    uint8_t _pad_1[0x10];
};




struct SCObjectDataBankEntryMarkerConfig {
    uint8_t _pad_0[0x8];
    float managedLandingZoneMinimumDist;
    float managedLandingZoneMaximumDist;
    float unmanagedLandingZoneMinimumDist;
    float unmanagedLandingZoneMaximumDist;
};




struct SPerkParamsItem {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* displayDescription;
    struct CryStringT* icon;
    uint8_t _pad_3[0x8];
    struct EntityClassDefinition* rewardItem;
    uint8_t _pad_4[0x10];
};




struct SMisfireEffect {
    uint8_t _pad_0[0x8];
    struct Tag* effectTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* effectTag;
    uint8_t _pad_2[0x10];
};




struct GeometryBaseHierarchicalData {
    uint8_t _pad_0[0x10];
    float ExternalWear;
    float ExternalDirt;
    float InternalWear;
    float InternalDirt;
    struct TintPaletteTree* TintPaletteOverride;
    uint8_t _pad_1[0x10];
};




struct Behavior_CustomVehicleEffectsPreset {
    uint8_t _pad_0[0x8];
    struct SEntityEffectSystem_ParticleCategory* particleEffects;
    uint8_t _pad_1[0x68];
};




struct SActorCarryConfigTagSwitch {
    uint8_t _pad_0[0x8];
    struct Tag* existingTag;
    uint8_t _pad_1[0x10];
    struct Tag* replaceWithTag;
    uint8_t _pad_2[0x10];
    enum ARDataType onState;
    uint8_t _pad_3[0x4];
};




struct WorldDisplayEnvironmentColor_Manufacturer {
    uint8_t _pad_0[0x8];
    enum ARDataType color;
    uint8_t _pad_1[0x2];
    int32_t alpha;
};




struct CounterMeasureFlareParams {
    uint8_t _pad_0[0x8];
    float StartInfrared;
    float EndInfrared;
    float StartElectromagnetic;
    float EndElectromagnetic;
    float StartCrossSection;
    float EndCrossSection;
    float StartDecibel;
    float EndDecibel;
};




struct DefaultStatusTrigger {
    uint8_t _pad_0[0x8];
    struct SStatusFortitudeLevelModifier* fortitudeLevelModifier;
    uint8_t _pad_1[0x8];
    float triggerMinThreshold;
    float triggerMaxThreshold;
};




struct BuildingBlocks_BindingsNumberField {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType field;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_3[0x8];
};




struct STargetingMethodBase {
    uint8_t _pad_0[0x8];
};




struct PlayerTradeProviderParams {
    uint8_t _pad_0[0x18];
};




struct MobiGlasMissionManagerSummaryUpdate {
    uint8_t _pad_0[0x8];
    struct MissionLogEntry* missionLogEntry;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* additionalText;
};




struct Primitive_Line {
    uint8_t _pad_0[0x8];
    struct Vec3* LineStart;
    uint8_t _pad_1[0x10];
    struct Vec3* LineEnd;
    uint8_t _pad_2[0x10];
    struct Vec2* ScreenOffset;
    uint8_t _pad_3[0x8];
    struct Vec2* UV_Start;
    uint8_t _pad_4[0x8];
    struct Vec2* UV_Size;
    uint8_t _pad_5[0x8];
    float LineThickness;
    _Bool InScreenSpace;
    uint8_t _pad_6[0x3];
};




struct SStandardHostility {
    uint8_t _pad_0[0x18];
};




struct SObjectiveAnnouncerSettingsDef {
    uint8_t _pad_0[0x8];
    struct SEAAnnouncerParamsDef* beginCapturingObjective;
    uint8_t _pad_1[0x8];
    struct SEAAnnouncerParamsDef* objectiveGainedLocal;
    uint8_t _pad_2[0x8];
    struct SEAAnnouncerParamsDef* objectiveGainedRemote;
    uint8_t _pad_3[0x8];
    struct SEAAnnouncerParamsDef* objectiveLost;
    uint8_t _pad_4[0x8];
    struct SEAAnnouncerParamsDef* objectiveLostNeutral;
    uint8_t _pad_5[0x8];
    struct SEAAnnouncerParamsDef* objectiveContested;
    uint8_t _pad_6[0x8];
    struct SEAAnnouncerParamsDef* finalObjective;
    uint8_t _pad_7[0x8];
};




struct SEntityDensityClassOverwritesRef {
    uint8_t _pad_0[0x8];
    struct SEntityDensityClassOverwritesRecord* densityOverwritesRef;
    uint8_t _pad_1[0x10];
};




struct PowerPool {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
};




struct SSalvageScrapingParams {
    uint8_t _pad_0[0x8];
    struct ResourceType* scrapingResourceType;
    uint8_t _pad_1[0x10];
};




struct PrisonSentenceUIProviderParams {
    uint8_t _pad_0[0x18];
    float updateTimeSeconds;
    uint8_t _pad_1[0x4];
};




struct SAtmosphericEffectsComponentParams {
    uint8_t _pad_0[0x18];
    struct SAtmosphericHeatingParams* atmosphericHeatingSettings;
    uint8_t _pad_1[0x68];
    struct SAtmosphericEffectTestsParams* atmosphericEffectTestSettings;
    uint8_t _pad_2[0x10];
};




struct FormationOffset {
    uint8_t _pad_0[0x8];
    struct Vec3* offset;
    uint8_t _pad_1[0x10];
    struct Tag* offsetTag;
    uint8_t _pad_2[0x10];
};




struct SWeaponActionFireTractorBeamStrengthValueParams {
    uint8_t _pad_0[0x8];
    float noTarget;
    float stable;
    float unstable;
    float breaking;
    float impactInvalidTarget;
    float impactControllingTarget;
    float impactGrapple;
    float impactSizeScale;
    _Bool scaleImpactToObject;
    uint8_t _pad_1[0x3];
    float beamEffectBlendRange;
    float beamEffectBlendCoeff;
    uint8_t _pad_2[0x4];
};




struct AreaEventCallbackComponentParams {
    uint8_t _pad_0[0x18];
};




struct SCItemSeatEjectParams {
    uint8_t _pad_0[0x8];
    float maxLinearVelocity;
    float maxLinearAcceleration;
    float maxAngularVelocity;
    float maxAngularAcceleration;
    float ejectionLoopTime;
    uint8_t _pad_1[0x4];
    struct SSharedInteractionParams* ejectionInteraction;
    uint8_t _pad_2[0x8];
    struct Deg3* offsetAngles;
    uint8_t _pad_3[0x18];
};




struct MissionFlowConditionBase {
    uint8_t _pad_0[0x8];
};




struct Marker_AbilityScan {
    uint8_t _pad_0[0x8];
};




struct SSCSignatureSystemCrossSectionParams {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_StyleSelectorConditionTag {
    uint8_t _pad_0[0x10];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
};




struct SFortitudeXPGains {
    uint8_t _pad_0[0x8];
    float damageTaken;
    float timeStarving;
    float timeThirsty;
    float decreaseBDL;
    float fitnessXP;
    float strengthXP;
};




struct ActorForceMovementModifierConfig {
    uint8_t _pad_0[0x8];
    float forceSmoothDuration;
    float minAngleForSlowdown;
    float maxAngleForSlowdown;
    float minMagnitudeForSlowdown;
    float maxMagnitudeForSlowdown;
    float forceSlowdownSpeedMultiplier;
    float minMagnitudeToDisableSprint;
    float maxAngleToDisableSprint;
};




struct ItemResourceTypeData {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* resourceTypeName;
    struct CryStringT* resourceTypeDevName;
    uint8_t _pad_1[0x8];
    enum ARDataType resourceType;
    uint8_t _pad_2[0x4];
};




struct DefaultActionsEntityState {
    uint8_t _pad_0[0x8];
};




struct CargoDebugHelperParams {
    uint8_t _pad_0[0x18];
};




struct SEntityComponentRoomConnectorParams {
    uint8_t _pad_0[0x18];
    struct Vec3* defaultAreaBounds;
    uint8_t _pad_1[0x10];
    struct Vec3* boundsOffset;
    uint8_t _pad_2[0x10];
    enum ARDataType orientationMode;
    _Bool enableConnectorBridging;
    uint8_t _pad_3[0x3];
    struct SEntityDensityClassOverwritesBase* densityClassOverwrites;
    uint8_t _pad_4[0x8];
    float apertureAnimateTime;
    float audioSoundProofing;
};




struct SSequencerBespokeEntityDragTaskParams {
    uint8_t _pad_0[0x20];
    struct CryStringT* fragmentId;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragTag;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_WindowCamera {
    uint8_t _pad_0[0x8];
    float fieldOfView;
    uint8_t _pad_1[0x4];
};




struct SItemPortAttachmentPoints {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct CryStringT* Bone;
    uint8_t _pad_2[0x8];
};




struct SQuantumDriveParams {
    uint8_t _pad_0[0x8];
    float driveSpeed;
    float cooldownTime;
    float stageOneAccelRate;
    float stageTwoAccelRate;
    float engageSpeed;
    float VFXSpoolEndVelocity;
    float VFXPinchEffectTime;
    float VFXPinchMaxVelocity;
    float VFXEntryFlashVelocity;
    float VFXTrailStartVelocity;
    float VFXTravelEffectStartVelocity;
    float VFXTravelEffectEndVelocity;
    float VFXExitEffectVelocity;
    float ShaderNodeEngageVelocity;
    float ShaderNodeShutdownVelocity;
    float ShaderNodeMaxStrengthVelocity;
    float interdictionEffectTime;
    uint8_t _pad_1[0x4];
    struct SQuantumDriveEffectBaseParams* effectTags;
    uint8_t _pad_2[0x8];
    float calibrationRate;
    float minCalibrationRequirement;
    float maxCalibrationRequirement;
    float calibrationProcessAngleLimit;
    float calibrationWarningAngleLimit;
    float calibrationDelayInSeconds;
    float spoolUpTime;
    uint8_t _pad_3[0x4];
    struct SSharedInteractionParams* beginQuantumTravelInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* abortQuantumTravelInteraction;
    uint8_t _pad_5[0x8];
    struct ItemResourceState* idleState;
    uint8_t _pad_6[0x8];
    struct ItemResourceState* travellingState;
    uint8_t _pad_7[0x8];
};




struct SSmoothingTimeBased {
    uint8_t _pad_0[0x8];
    float attackSlew;
    float releaseSlew;
    float clampedBelow;
    uint8_t _pad_1[0x4];
};




struct RefuelParams {
    uint8_t _pad_0[0x18];
    enum ARDataType serviceBeaconType;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* serviceBeaconName;
    int32_t beaconTaxPercentage;
    int32_t beaconMaxPaymentAmount;
    struct MissionPropertyValue_AIName* npcRequesterNameDef;
    uint8_t _pad_2[0x40];
    struct SServiceBeaconCreatorParams* playerCreatorParams;
    uint8_t _pad_3[0x8];
    struct SServiceBeaconCreatorParamsBase* npcCreatorParams;
    uint8_t _pad_4[0x8];
    struct CLocIdentifier* objectiveTitle;
    struct CLocIdentifier* objectiveDescription;
};




struct CommunicationVariationRules {
    uint8_t _pad_0[0x8];
    float timeout;
    _Bool lookAtTarget;
    _Bool finishAnimation;
    _Bool finishSound;
    _Bool finishVoice;
    _Bool finishTimeout;
    _Bool blockMovement;
    _Bool blockFire;
    uint8_t _pad_1[0x5];
};




struct ControlFloatInteractiveVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
    struct FloatInteractiveVariable* variable;
    uint8_t _pad_3[0x8];
    _Bool useAnimationEffectiveSection;
    uint8_t _pad_4[0x3];
    float amountToChange;
    float animationCycle;
    uint8_t _pad_5[0x4];
};




struct MeleeAttackCategoryInfo {
    uint8_t _pad_0[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_1[0x8];
    struct AttackCategoryParams* attackCategoryParams;
    uint8_t _pad_2[0x8];
};




struct SJumpTunnelSectionProbabilityParams {
    uint8_t _pad_0[0x8];
    struct SJumpTunnelSectionGenerationParams* section;
    uint8_t _pad_1[0x8];
    float probability;
    uint8_t _pad_2[0x4];
};




struct EntityClassStaticDataParams {
    uint8_t _pad_0[0x8];
};




struct WeightedDialogueBundleEntry {
    uint8_t _pad_0[0x8];
    struct DialogueContextEntry* dialogue;
    uint8_t _pad_1[0x8];
    float weight;
    uint8_t _pad_2[0x4];
};




struct SJumpDriveFlightSteeringParams {
    uint8_t _pad_0[0x8];
    float maxAcceleration;
    uint8_t _pad_1[0x4];
    struct BezierCurve* modifierCurve;
    uint8_t _pad_2[0x88];
    float maxAccelerationBoost;
    uint8_t _pad_3[0x4];
    struct BezierCurve* modifierCurveBoost;
    uint8_t _pad_4[0x88];
    _Bool allowUsingBoost;
    _Bool useSteeringParams;
    uint8_t _pad_5[0x6];
};




struct SS42PersonalStatusDrugBuffEffectString {
    uint8_t _pad_0[0x8];
    enum ARDataType statusEffectType;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* buffEffectString;
};




struct SRenderProxyParams {
    uint8_t _pad_0[0x18];
};




struct NumResultsConstraints {
    uint8_t _pad_0[0x8];
    int32_t minResults;
    int32_t maxResults;
};




struct SCEntranceItem {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* entranceName;
    struct CryStringT* jointName;
    uint8_t _pad_1[0x8];
    struct Vec3* positionOffset;
    uint8_t _pad_2[0x10];
    enum ARDataType shipState;
    uint8_t _pad_3[0x4];
};




struct SVehicleItemportInteractionLink {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* sourceInteraction;
    uint8_t _pad_1[0x8];
    struct CryStringT* itemPort;
    uint8_t _pad_2[0x8];
    struct CryStringT* targetInteraction;
    uint8_t _pad_3[0x8];
};




struct ReputationRewardFaction {
    uint8_t _pad_0[0x8];
    struct SReputationScopeParams* scope;
    uint8_t _pad_1[0x10];
    struct SReputationRewardAmount* reward;
    uint8_t _pad_2[0x10];
    struct FactionReputation* factionReputation;
    uint8_t _pad_3[0x10];
};




struct StolenScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct CLocIdentifier* strolenString;
};




struct KilogramsPerCubicMeter {
    uint8_t _pad_0[0x8];
    float kilogramsPerCubicMeter;
    uint8_t _pad_1[0x4];
};




struct SeatReticleArchetype {
    uint8_t _pad_0[0x8];
    _Bool fixed;
    _Bool look;
    _Bool velocity;
    _Bool control;
    _Bool atmospheric;
    uint8_t _pad_1[0x3];
};




struct Commodity {
    uint8_t _pad_0[0x8];
    struct CommodityType* type_;
    uint8_t _pad_1[0x10];
    struct CommoditySubtype* subtype;
    uint8_t _pad_2[0x10];
    float volatility;
    float gForceTolerance;
    float gForceDeltaToDamage;
    float HealthDecayOverTime;
    struct CommodityTemperatureTolerance* temperatureTolerance;
    uint8_t _pad_3[0x20];
    struct DamageResistanceBase* damageResistance;
    uint8_t _pad_4[0x8];
    struct Commodity* refineOutput;
    uint8_t _pad_5[0x10];
};




struct MissionInitParamTag {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct TagSearchTerm* value;
    uint8_t _pad_2[0x60];
};




struct SecurityNetworkRoomSettings {
    uint8_t _pad_0[0x8];
    struct SecurityNetworkProtocol* defaultProtocol;
    uint8_t _pad_1[0x70];
    struct Tag* roomIdentifier;
    uint8_t _pad_2[0x10];
    float trespassWarningSeconds;
    float trespassRevokeWarningSeconds;
};




struct BuildingBlocks_PreviewScreenBase {
    uint8_t _pad_0[0x10];
    enum ARDataType renderLayer;
    uint8_t _pad_1[0x7];
};




struct VehicleDifficultyParams {
    uint8_t _pad_0[0x8];
    float damageModifierFromAiVehicles;
    float damageModifierToAiVehicles;
};




struct SItemPortRule_HideAllInteractionsDef {
    uint8_t _pad_0[0x8];
};




struct PlayerAssetManagerProviderParams {
    uint8_t _pad_0[0x18];
    uint32_t inventoryItemsPerPage;
    uint8_t _pad_1[0x4];
    struct CryStringT* inventoryPaintGeoTag;
    uint8_t _pad_2[0x8];
};




struct SVendingMachineStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onCooldownEnd;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onItemSpawned;
    uint8_t _pad_2[0x8];
    struct SInteractionState* onItemDespawned;
    uint8_t _pad_3[0x8];
    struct SInteractionState* onItemDetached;
    uint8_t _pad_4[0x8];
    struct SInteractionState* onItemInteracted;
    uint8_t _pad_5[0x8];
    struct SInteractionState* onTransactionComplete;
    uint8_t _pad_6[0x8];
    struct SInteractionState* onHatchShouldOpen;
    uint8_t _pad_7[0x8];
    struct SInteractionState* onHatchShouldClose;
    uint8_t _pad_8[0x8];
    struct SInteractionState* onTransactionShouldClose;
    uint8_t _pad_9[0x8];
};




struct PingTypeParams {
    uint8_t _pad_0[0x8];
    float pingChargeUIShowTime;
    float pingChargeUIJammedTime;
    float pingChargeUIHideTime;
    float pingChargeUIUnavailableTime;
};




struct BuildingBlocks_ShapeTriangle {
    uint8_t _pad_0[0x8];
    struct Vec2* center;
    uint8_t _pad_1[0x8];
    _Bool showBoundsDebug;
    uint8_t _pad_2[0x7];
    struct Vec2* vertex0;
    uint8_t _pad_3[0x8];
    struct Vec2* vertex1;
    uint8_t _pad_4[0x8];
    struct Vec2* vertex2;
    uint8_t _pad_5[0x10];
};




struct SDashboardEngineInteractionParams {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* engineIP;
    uint8_t _pad_1[0x8];
};




struct SReputationMissionRequirementExpression_Not {
    uint8_t _pad_0[0x8];
};




struct SSequencerDefTaskParams {
    uint8_t _pad_0[0x20];
};




struct CameraSpeedShakeConfig {
    uint8_t _pad_0[0x8];
    struct Ang3* offsetAngle;
    uint8_t _pad_1[0x10];
    struct Vec3* offsetPosition;
    uint8_t _pad_2[0x10];
    float timePeriod;
    _Bool enabled;
    uint8_t _pad_3[0x3];
    float frequencyNoiseFactor;
    float translationNoise;
    float rotationNoise;
    uint8_t _pad_4[0x4];
    float minimumSpeed;
    float maximumSpeed;
    float QDriveScaleFactor;
    float afterburnerScaleFactor;
};




struct SMusicValueTagMap {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct SMusicValue* value;
    uint8_t _pad_2[0x38];
};




struct RParticleFieldNodeComponentParams {
    uint8_t _pad_0[0x18];
    _Bool enableField;
    uint8_t _pad_1[0x7];
    struct CryStringT* texture3D;
    uint8_t _pad_2[0x8];
    struct Vec3* size;
    uint8_t _pad_3[0x10];
    float outerRadius;
    float falloff;
    float strengthMult;
    uint8_t _pad_4[0x4];
    struct Vec3* posOffset;
    uint8_t _pad_5[0x10];
    struct Ang3* rotOffset;
    uint8_t _pad_6[0x10];
    _Bool useTransformHelperFile;
    _Bool matchSizeFromTexture;
    _Bool mergeSDFs;
    uint8_t _pad_7[0x1];
    float mergedVoxelCountScaleFrac;
    struct Vec3* mergedPaddingFrac;
    uint8_t _pad_8[0x10];
    struct RParticleFieldNodeDebugParams* debugDraw;
    uint8_t _pad_9[0x20];
};




struct ControlHints_UsableLinkedInteractiveAction {
    uint8_t _pad_0[0x8];
    enum ARDataType activationMode;
    uint8_t _pad_1[0x4];
    struct Tag* tag;
    uint8_t _pad_2[0x10];
};




struct SHackingThreatLevelConditionTime {
    uint8_t _pad_0[0x8];
    _Bool isIntruder;
    uint8_t _pad_1[0x3];
    int32_t pointsAdded;
    float timePeriod;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_BindingsRotationField {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType field;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsRotationBase* input;
    uint8_t _pad_3[0x8];
};




struct SStarGalaWaveParams {
    uint8_t _pad_0[0x8];
    enum ARDataType enemyType;
    int32_t enemyCount;
    enum ARDataType waveNum;
    enum ARDataType thePath;
    int32_t delayStart;
    int32_t delayModifier;
    float speedAdjustment;
    float pathOffset;
    int32_t group;
    uint8_t _pad_1[0x4];
};




struct ActionRuleParams {
    uint8_t _pad_0[0x8];
    struct ActionRuleDisplayParams* ruleDisplay;
    uint8_t _pad_1[0x8];
};




struct QuantumTravelStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* idle;
    uint8_t _pad_1[0x8];
    struct SInteractionState* inProgress;
    uint8_t _pad_2[0x8];
    struct SInteractionState* complete;
    uint8_t _pad_3[0x8];
    struct SInteractionState* interrupted;
    uint8_t _pad_4[0x8];
    struct SInteractionState* cooldown;
    uint8_t _pad_5[0x8];
    struct SInteractionState* blocked;
    uint8_t _pad_6[0x8];
};




struct Bindings_SubsumptionBroadcastEvent {
    uint8_t _pad_0[0x8];
    struct CryStringT* eventName;
    uint8_t _pad_1[0x8];
    float eventRange;
    uint8_t _pad_2[0x4];
};




struct SEntitySphereGridProperty {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* gridGeometry;
    uint8_t _pad_1[0x10];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool inheritGravity;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x5];
    float radius;
    uint8_t _pad_4[0x4];
};




struct SSalvageStructuralParams {
    uint8_t _pad_0[0x8];
    int32_t numFieldSupportersRequired;
    uint8_t _pad_1[0x4];
    struct SSalvageAreaBoxParams* fieldEmitterArea;
    uint8_t _pad_2[0x30];
    struct SSalvageAreaBoxParams* vectorFieldAreaVFX;
    uint8_t _pad_3[0x30];
    float fractureTimePerRadiusMetre;
    float minFracturableRadius;
    float maxFracturableRadius;
    float minDisintegratableRadius;
    float maxDisintegratableRadius;
    float disintegrationTimePerRadiusMetre;
    float disintegrationSCUPerCubicMetre;
    uint8_t _pad_4[0x4];
    struct ResourceType* disintegrationResourceType;
    uint8_t _pad_5[0x10];
    struct CryStringT* startGrinderInteraction;
    uint8_t _pad_6[0x8];
    struct CryStringT* stopGrinderInteraction;
    uint8_t _pad_7[0x8];
    _Bool fieldAlignmentSpeedMultiplierEnabledFracture;
    _Bool fieldAlignmentSpeedMultiplierEnabledDisintegration;
    _Bool fieldAlignmentYieldMultiplierEnabledDisintegration;
    uint8_t _pad_8[0x1];
    float fieldAlignmentFalloffDistanceForward;
    float fieldAlignmentFalloffDistanceRadial;
    float fieldAlignmentSweetSpotForwardFactor;
    float fieldAlignmentMaxSpeedMultiplier;
    float fieldAlignmentMaxYieldMultiplier;
    float fieldAlignmentBaselineFactor;
    uint8_t _pad_9[0x4];
};




struct WeaponAIAimingMethodHighLowArc {
    uint8_t _pad_0[0x8];
    _Bool useLowArc;
    uint8_t _pad_1[0x7];
};




struct WingmanOrderInfo {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* LocalisationString;
    struct CryStringT* EventName;
    uint8_t _pad_1[0x8];
    enum ARDataType TargetType;
    uint8_t _pad_2[0x4];
};




struct EntityComponentPowerConnection {
    uint8_t _pad_0[0x18];
    float PowerBase;
    float PowerDraw;
    float TimeToReachDrawRequest;
    int32_t SafeguardPriority;
    _Bool DisplayedInPoweredItemList;
    _Bool IsThrottleable;
    _Bool IsOverclockable;
    uint8_t _pad_1[0x1];
    float OverclockThresholdMin;
    float OverclockThresholdMax;
    float OverpowerPerformance;
    float OverclockPerformance;
    float PowerToEM;
    float DecayRateOfEM;
    float WarningDelayTime;
    float WarningDisplayTime;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* MisfireItemTypeLocID;
    struct SMisfireGenerationParams* MisfireGenerationParams;
    uint8_t _pad_3[0x8];
    struct SMisfireEvents* MisfireEvents;
    uint8_t _pad_4[0x90];
};




struct SCItemDoorPortalModeManualParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* PortalName;
    uint8_t _pad_1[0x8];
};




struct SEntityInsuranceProperties {
    uint8_t _pad_0[0x8];
    _Bool restoreOnClaim;
    uint8_t _pad_1[0x7];
    struct ShipInsuranceParams* shipInsuranceParams;
    uint8_t _pad_2[0x20];
    struct SEntityInsuranceDisplayParams* displayParams;
    uint8_t _pad_3[0x38];
};




struct SStreamingObjectContainerComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* objectContainer;
    uint8_t _pad_1[0x8];
};




struct SReputationMissionRequirementExpression_RightParenthesis {
    uint8_t _pad_0[0x8];
};




struct ShipStateMonitorComponentParams {
    uint8_t _pad_0[0x18];
};




struct SPowerUserState {
    uint8_t _pad_0[0x8];
    struct SInteractionState* state;
    uint8_t _pad_1[0x8];
    _Bool isFailing;
    uint8_t _pad_2[0x7];
};




struct SMusicValue {
    uint8_t _pad_0[0x8];
    struct MusicLogicParameter* parameter;
    uint8_t _pad_1[0x10];
    struct AudioRtpc* rtpc;
    uint8_t _pad_2[0x18];
};




struct ScreenEffects_ParamValue_Int {
    uint8_t _pad_0[0x8];
    int32_t value;
    _Bool limitStacking;
    uint8_t _pad_1[0x3];
};




struct SBaseInteractionGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct PlayerMissionDataBankManagementComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_BindingsBooleanFromInteger {
    uint8_t _pad_0[0x50];
    int64_t value;
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_BindingsIntegerBase* inputL;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsIntegerBase* inputR;
    uint8_t _pad_3[0xa8];
};




struct SSpawnOnStreamIn {
    uint8_t _pad_0[0x8];
};




struct SendItemResourceNetworkedStateEvent {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
};




struct InteractionConditionActorAbility {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType abilityType;
    uint8_t _pad_2[0x4];
};




struct ControlHintCondition_HintTrigger {
    uint8_t _pad_0[0x8];
    struct HintTriggerData* hintTrigger;
    uint8_t _pad_1[0x10];
};




struct SCoolerMisfireParams {
    uint8_t _pad_0[0x8];
    float coolingRateReduction;
    float minCoolingRateReduction;
    _Bool hasVariableCoolingRateReduction;
    uint8_t _pad_1[0x7];
};




struct TransitNodeDialogueContext {
    uint8_t _pad_0[0x8];
    struct CryStringT* triggerName;
    uint8_t _pad_1[0x8];
    struct DialogueContext* dialogueContext;
    uint8_t _pad_2[0x10];
};




struct PlayerMarkerSubscription {
    uint8_t _pad_0[0x8];
    int32_t maxOwnedUnattendedVehicle_AR;
    int32_t maxOwnedUnattendedVehicles_StarMap;
    int32_t maxNonOwnedUnattendedVehicle;
    int32_t maxQuantumTracepoints;
};




struct SecurityNetworkVariableEffect_Base {
    uint8_t _pad_0[0x8];
};




struct BezierDamage {
    uint8_t _pad_0[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_1[0x88];
};




struct SphereFieldGeom {
    uint8_t _pad_0[0x8];
    struct Vec3* center;
    uint8_t _pad_1[0x10];
    float R;
    uint8_t _pad_2[0x4];
};




struct ARMarkerGlobalParams {
    uint8_t _pad_0[0x8];
    struct ARMarkerPlayerOffsetParams* ARMarkerPlayerOffset;
    uint8_t _pad_1[0x30];
};




struct SEntityEffectSystem_Attachment {
    uint8_t _pad_0[0x8];
    struct QuatT* offset;
    uint8_t _pad_1[0x50];
    struct Tag* offsetParameter;
    uint8_t _pad_2[0x10];
};




struct ItemResourceControlOutputBase {
    uint8_t _pad_0[0x8];
};




struct BulletImpulseFalloffParams {
    uint8_t _pad_0[0x8];
    float minDistance;
    float dropFalloff;
    float maxFalloff;
    uint8_t _pad_1[0x4];
};




struct DialogueContextEmbeddedEntry {
    uint8_t _pad_0[0x8];
    struct DialogueContext* dialogueContext;
    uint8_t _pad_1[0x10];
};




struct RestrictedAreaSphereParams {
    uint8_t _pad_0[0x18];
};




struct MobiGlasAppContent {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* textContent;
    struct CryStringT* imageContent;
    uint8_t _pad_1[0x8];
    struct SMobiGlasAppLink* appLink;
    uint8_t _pad_2[0x40];
};




struct SCBoatMovementInputParams {
    uint8_t _pad_0[0x8];
    float speedLimiterStep;
    float accelerationLimiterStep;
};




struct SLegacyItemMisfireParams {
    uint8_t _pad_0[0x8];
};




struct SDashboardQuantumInterdictionParams {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* quantumInterdictionIP;
    uint8_t _pad_1[0x8];
    struct SInteractionPointParams* toggleJammingIP;
    uint8_t _pad_2[0x8];
};




struct PlayerGroupMemberComponentParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* inviteToPartyInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* AddToContactsInteraction;
    uint8_t _pad_2[0x8];
};




struct BasicPingTypeParams {
    uint8_t _pad_0[0x8];
    float pingChargeUIShowTime;
    float pingChargeUIJammedTime;
    float pingChargeUIHideTime;
    float pingChargeUIUnavailableTime;
    struct PingSettingsParams* pingSettingsParams;
    uint8_t _pad_1[0x38];
};




struct BuildingBlocks_Timeline {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_TimelineTypeEmbedded* timeline;
    uint8_t _pad_1[0x30];
};




struct SSCLocalPlayerAudioComponentParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceAudio* buffEarRingingStart;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* buffEarRingingStop;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* buffTempAudioLossStart;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* buffTempAudioLossStop;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* buffMuffledAudioStart;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* buffMuffledAudioStop;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* shiveringStart;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* shiveringStop;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* headacheAudioStart;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* headacheAudioStop;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* stomachGroanAudioStart;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* stomachGroanAudioStop;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* heartPulse;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* vacuumStart;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* vacuumStop;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* wantedLevelUp;
    uint8_t _pad_16[0x18];
    struct GlobalResourceAudio* wantedLevelDown;
    uint8_t _pad_17[0x18];
    struct GlobalResourceAudio* wantedLevelMax;
    uint8_t _pad_18[0x18];
    struct GlobalResourceAudio* remoteTurretOn;
    uint8_t _pad_19[0x18];
    struct GlobalResourceAudio* remoteTurretOff;
    uint8_t _pad_20[0x18];
    struct GlobalResourceAudio* remoteTurretLoopStart;
    uint8_t _pad_21[0x18];
    struct GlobalResourceAudio* remoteTurretLoopStop;
    uint8_t _pad_22[0x18];
    struct GlobalResourceAudio* geigerCounterAudioStart;
    uint8_t _pad_23[0x18];
    struct GlobalResourceAudio* geigerCounterAudioStop;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* helmetRtpc;
    uint8_t _pad_25[0x18];
    struct AudioRtpc* buffEarRingRtpc;
    uint8_t _pad_26[0x18];
    struct AudioRtpc* tempAudioLossRtpc;
    uint8_t _pad_27[0x18];
    struct AudioRtpc* muffledAudioRtpc;
    uint8_t _pad_28[0x18];
    struct AudioRtpc* shiveringRtpc;
    uint8_t _pad_29[0x18];
    struct AudioRtpc* headacheAudioRtpc;
    uint8_t _pad_30[0x18];
    struct AudioRtpc* stomachGroanAudioRtpc;
    uint8_t _pad_31[0x18];
    struct AudioRtpc* heartPulseDurationRtpc;
    uint8_t _pad_32[0x18];
    struct AudioRtpc* heartPulseBpmRtpc;
    uint8_t _pad_33[0x18];
    struct AudioRtpc* bodyTempRtpc;
    uint8_t _pad_34[0x18];
    struct AudioRtpc* suitTempRtpc;
    uint8_t _pad_35[0x18];
    struct AudioRtpc* weaponAdsLocalPlayerRtpc;
    uint8_t _pad_36[0x18];
    struct AudioRtpc* localPerspectiveRtpc;
    uint8_t _pad_37[0x18];
    struct AudioRtpc* playerActorContainedRtpc;
    uint8_t _pad_38[0x18];
    struct AudioRtpc* targetedByPlayerRtpc;
    uint8_t _pad_39[0x18];
    struct AudioRtpc* isAttackingPlayerShipRtpc;
    uint8_t _pad_40[0x18];
    struct AudioRtpc* localPlayerInThisOCRtpc;
    uint8_t _pad_41[0x18];
    struct AudioRtpc* globalSoundSimEnabledRtpc;
    uint8_t _pad_42[0x18];
    struct AudioRtpc* globalAdsLocalPlayerRtpc;
    uint8_t _pad_43[0x18];
    struct AudioRtpc* globalPlayerActorInActiveVehicleSeatRtpc;
    uint8_t _pad_44[0x18];
    struct AudioRtpc* globalTimeOfDayRtpc;
    uint8_t _pad_45[0x18];
    struct AudioRtpc* globalEMRtpc;
    uint8_t _pad_46[0x18];
    struct AudioRtpc* globalIRRtpc;
    uint8_t _pad_47[0x18];
    struct AudioRtpc* globalDistortionRtpc;
    uint8_t _pad_48[0x18];
    struct AudioRtpc* armsLockRtpc;
    uint8_t _pad_49[0x18];
    struct AudioRtpc* heldItemWeightRtpc;
    uint8_t _pad_50[0x18];
    struct AudioRtpc* heldItemTooHeavyRtpc;
    uint8_t _pad_51[0x18];
    struct AudioRtpc* shakeRtpc;
    uint8_t _pad_52[0x18];
    struct AudioRtpc* torsoWearRtpc;
    uint8_t _pad_53[0x18];
    struct AudioRtpc* geigerCounterFrequencyRtpc;
    uint8_t _pad_54[0x18];
    struct AudioRtpc* globalAmbienceRoomSizeRtpc;
    uint8_t _pad_55[0x18];
    struct AudioRtpc* globalShipRoomSizeRtpc;
    uint8_t _pad_56[0x18];
    struct AudioRtpc* globalRoomUniformityRtpc;
    uint8_t _pad_57[0x18];
    struct AudioRtpc* globalRealisticModeRtpc;
    uint8_t _pad_58[0x18];
    struct AudioRtpc* globalIsInNonShipRoomRtpc;
    uint8_t _pad_59[0x18];
};




struct QuantumDriveAudioParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* spoolStartAudioTrigger;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* spoolStopAudioTrigger;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* spoolCancelAudioTrigger;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* spoolFailAudioTrigger;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* alignStartAudioTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* alignStopAudioTrigger;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* preRampUpStartAudioTrigger;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* preRampUpStopAudioTrigger;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* rampUpStartAudioTrigger;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* rampUpStopAudioTrigger;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* flightInProgressStartAudioTrigger;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* flightInProgressStopAudioTrigger;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* rampDownStartAudioTrigger;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* rampDownStopAudioTrigger;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* postRampDownStartAudioTrigger;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* postRampDownStopAudioTrigger;
    uint8_t _pad_16[0x18];
    struct GlobalResourceAudio* coolDownStartAudioTrigger;
    uint8_t _pad_17[0x18];
    struct GlobalResourceAudio* coolDownStopAudioTrigger;
    uint8_t _pad_18[0x18];
    struct AudioRtpc* spoolTimeRTPC;
    uint8_t _pad_19[0x18];
    struct AudioRtpc* fuelExpendedRTPC;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* timeSpentTravellingRTPC;
    uint8_t _pad_21[0x18];
    struct AudioRtpc* shortRangeRTPC;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* totalTravelTimeRTPC;
    uint8_t _pad_23[0x18];
    struct AudioRtpc* speedNormalizedCurTripRTPC;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* speedNormalizedOverallRTPC;
    uint8_t _pad_25[0x18];
    struct GlobalResourceAudio* uiStartAudioTrigger;
    uint8_t _pad_26[0x18];
    struct GlobalResourceAudio* uiStopAudioTrigger;
    uint8_t _pad_27[0x18];
    struct GlobalResourceAudio* uiSpoolStartAudioTrigger;
    uint8_t _pad_28[0x18];
    struct GlobalResourceAudio* uiSpoolCancelAudioTrigger;
    uint8_t _pad_29[0x18];
    struct GlobalResourceAudio* uiSpoolDoneAudioTrigger;
    uint8_t _pad_30[0x18];
    struct GlobalResourceAudio* uiSpoolStartAudioTriggerLoop;
    uint8_t _pad_31[0x18];
    struct GlobalResourceAudio* uiSpoolStopAudioTriggerLoop;
    uint8_t _pad_32[0x18];
    struct GlobalResourceAudio* uiCalibrationRunStartAudioTrigger;
    uint8_t _pad_33[0x18];
    struct GlobalResourceAudio* uiCalibrationRunStopAudioTrigger;
    uint8_t _pad_34[0x18];
    struct GlobalResourceAudio* uiCalibrationWarningStartAudioTrigger;
    uint8_t _pad_35[0x18];
    struct GlobalResourceAudio* uiCalibrationWarningStopAudioTrigger;
    uint8_t _pad_36[0x18];
    struct GlobalResourceAudio* uiCalibrationInterruptAudioTrigger;
    uint8_t _pad_37[0x18];
    struct GlobalResourceAudio* uiCalibrationBeginAudioTrigger;
    uint8_t _pad_38[0x18];
    struct GlobalResourceAudio* uiCalibrationFailAudioTrigger;
    uint8_t _pad_39[0x18];
    struct GlobalResourceAudio* uiCalibrationDoneAudioTrigger;
    uint8_t _pad_40[0x18];
    struct GlobalResourceAudio* uiPartyAllReady;
    uint8_t _pad_41[0x18];
    struct GlobalResourceAudio* uiPartyMemberAligned;
    uint8_t _pad_42[0x18];
    struct GlobalResourceAudio* uiPartyMemberAlignmentLost;
    uint8_t _pad_43[0x18];
    struct GlobalResourceAudio* uiPartyMemberDrop;
    uint8_t _pad_44[0x18];
    struct GlobalResourceAudio* uiPartyMemberReady;
    uint8_t _pad_45[0x18];
    struct GlobalResourceAudio* uiPartyMemberSpooledUp;
    uint8_t _pad_46[0x18];
    struct Tag* activateQTAudioSpline;
    uint8_t _pad_47[0x10];
};




struct CommodityDamageConfiguration {
    uint8_t _pad_0[0x8];
    float minimumSpeed;
    float speedSquaredToDamage;
    struct ExplosionParams* defaultExplosionParams;
    uint8_t _pad_1[0x1b8];
    struct AudioRtpc* volatilePowerRtpc;
    uint8_t _pad_2[0x18];
    float volatilityRadiusFactor;
    float volatilityDamageFactor;
    float volatilityForceFactor;
    float volatilityCommodityDamageFactor;
    float volatilityParticleStrengthFactor;
    float gracePeriod;
};




struct InterferenceParams {
    uint8_t _pad_0[0x8];
    float fallOffDistance;
    uint8_t _pad_1[0x4];
};




struct JumpDriveUIConeParams {
    uint8_t _pad_0[0x8];
    float range;
    float angle;
    float lookAtAngle;
    uint8_t _pad_1[0x4];
};




struct BoxAreaAlignmentSlotTypeParams {
    uint8_t _pad_0[0x8];
    struct Vec3* min;
    uint8_t _pad_1[0x10];
    struct Vec3* max;
    uint8_t _pad_2[0x10];
};




struct SWeaponConditionIsHeldEntity {
    uint8_t _pad_0[0x8];
};




struct SCItemVehicleArmorParams {
    uint8_t _pad_0[0x18];
    float signalInfrared;
    float signalElectromagnetic;
    float signalCrossSection;
    uint8_t _pad_1[0x4];
    struct DamageBase* damageMultiplier;
    uint8_t _pad_2[0x8];
    struct ArmorPenetrationResistanceParams* armorPenetrationResistance;
    uint8_t _pad_3[0x8];
};




struct SHackableStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onHackingSuccessState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onHackingErrorState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* onHackingResetState;
    uint8_t _pad_3[0x8];
};




struct AISeatOperatorComponentParams {
    uint8_t _pad_0[0x18];
};




struct TileManagerParams {
    uint8_t _pad_0[0x18];
};




struct RecordRefUserVariableTypeBase {
    uint8_t _pad_0[0x8];
};




struct SGameRulesAnnouncerParams {
    uint8_t _pad_0[0x8];
    struct Announcer* announcer;
    uint8_t _pad_1[0x10];
    struct CryStringT* announcerGameModeTokenName;
    uint8_t _pad_2[0x8];
};




struct ComponentMigration {
    uint8_t _pad_0[0x8];
    struct DataForgeComponentParams* Source;
    uint8_t _pad_1[0x8];
    struct DataForgeComponentParams* Target;
    uint8_t _pad_2[0x8];
};




struct ItemPortHostComponentParams {
    uint8_t _pad_0[0x18];
};




struct CameraShakeConfig {
    uint8_t _pad_0[0x8];
    struct Ang3* offsetAngle;
    uint8_t _pad_1[0x10];
    struct Vec3* offsetPosition;
    uint8_t _pad_2[0x10];
    float timePeriod;
    _Bool enabled;
    uint8_t _pad_3[0x3];
    float frequencyNoiseFactor;
    float translationNoise;
    float rotationNoise;
    uint8_t _pad_4[0x4];
};




struct HaulingOrder_Resource {
    uint8_t _pad_0[0x8];
    struct ObjectivePropertyBase* pickUpLocation;
    uint8_t _pad_1[0x8];
    struct ObjectivePropertyBase* dropOffLocation;
    uint8_t _pad_2[0x8];
    struct ResourceType* resource;
    uint8_t _pad_3[0x10];
    float minSCU;
    float maxSCU;
    float maxContainerSize;
    uint8_t _pad_4[0x4];
};




struct MissionPropertyValue_Object {
    uint8_t _pad_0[0x8];
};




struct ActorLookAheadComponentParams {
    uint8_t _pad_0[0x18];
    struct ActorLookAheadVehicle* defaultLookAheadRecord;
    uint8_t _pad_1[0x10];
};




struct MissionScenarioScheduleConstraint {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    int32_t epoch;
};




struct AerodynamicTrailCalculationPropertyRange {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct Range* range;
    uint8_t _pad_2[0x8];
};




struct SAISkillsComponentParams {
    uint8_t _pad_0[0x18];
    struct SkillDefinitions* skills;
    uint8_t _pad_1[0x10];
    struct AIProfile* profile;
    uint8_t _pad_2[0x10];
};




struct ActorAimLimitsStateFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    struct ActorViewLimits* aimLimits;
    uint8_t _pad_2[0x20];
};




struct UIWorldDisplayAutoRotationParams {
    uint8_t _pad_0[0x8];
    float autoRotationRate;
    float autoRotateDelay;
    float autoRotateRampUpDuration;
    float autoRotateRampDownDuration;
};




struct BuildingBlocks_BindingsTransformBase {
    uint8_t _pad_0[0x50];
};




struct ItemPreview_TurntableSettings {
    uint8_t _pad_0[0x8];
    struct Ang3* initialRotation;
    uint8_t _pad_1[0x10];
    struct Vec3* rotationChange;
    uint8_t _pad_2[0x10];
};




struct ChatCommandName {
    uint8_t _pad_0[0x8];
    struct CryStringT* commandName;
    uint8_t _pad_1[0x8];
};




struct ObjectiveHandler_PlayerAttached {
    uint8_t _pad_0[0x8];
    struct CryStringT* module;
    uint8_t _pad_1[0x8];
    struct MissionModuleHierarchy* moduleHierarchy;
    uint8_t _pad_2[0x10];
    _Bool disableTravelObjectives;
    uint8_t _pad_3[0x3];
    float travelRadiusKM;
    struct ObjectiveDisplayInfo* travelObjectiveInfo;
    uint8_t _pad_4[0x20];
    struct ObjectiveDisplayInfo* returnObjectiveInfo;
    uint8_t _pad_5[0x20];
    struct NavPointSpawnInformation* navPointSpawnInfo;
    uint8_t _pad_6[0x10];
};




struct GlobalAudioSettings {
    uint8_t _pad_0[0x8];
    _Bool enablePropagationPathing;
    _Bool enablePropagationPathingActorOnly;
    uint8_t _pad_1[0x6];
};




struct GlobalJumpTunnelEffectParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceParticle* failEffect;
    uint8_t _pad_1[0x10];
    struct GlobalResourceParticle* interiorExitEffect;
    uint8_t _pad_2[0x10];
    struct GlobalResourceParticle* spaceloopEffect;
    uint8_t _pad_3[0x10];
    struct GlobalResourceParticle* centralSplineEffect;
    uint8_t _pad_4[0x10];
    struct GlobalResourceParticle* spaceFillingSplineEffect;
    uint8_t _pad_5[0x10];
    struct GlobalResourceParticle* sunFlareEffect;
    uint8_t _pad_6[0x10];
    struct GlobalJumpTunnelLightParams* sunLightParams;
    uint8_t _pad_7[0x18];
    struct GlobalJumpTunnelProbeParams* probeParams;
    uint8_t _pad_8[0x8];
    struct GlobalJumpTunnelFogParams* fogParams;
    uint8_t _pad_9[0x28];
    struct GlobalJumpTunnelPassByLightParams* passByLightParams;
    uint8_t _pad_10[0x80];
    float splineLength;
    uint8_t _pad_11[0x4];
};




struct JumpDriveVibrationParams {
    uint8_t _pad_0[0x8];
    struct BezierCurve* tuningCurve;
    uint8_t _pad_1[0x88];
    struct BezierCurve* distortionCurve;
    uint8_t _pad_2[0x88];
    struct BezierCurve* turbulenceCurve;
    uint8_t _pad_3[0x88];
    struct BezierCurve* gustCurve;
    uint8_t _pad_4[0x88];
    struct BezierCurve* boostCurve;
    uint8_t _pad_5[0x88];
    float postExitStrength;
    float postFailStrength;
    float onStartedEnteringTunnelStrength;
    float enteredTunnelStrength;
    _Bool enablePostTunedVibrations;
    uint8_t _pad_6[0x3];
    float jumpDriveNormalSuppressionIncreaseTime;
    float jumpDriveNormalSuppressionDecayTime;
    uint8_t _pad_7[0x4];
    struct BezierCurve* jumpDriveNormalSuppressionCurve;
    uint8_t _pad_8[0x88];
};




struct LocalPlayerSpeedThrottleComponent {
    uint8_t _pad_0[0x8];
    struct SpeedThrottleConfiguration* params;
    uint8_t _pad_1[0x30];
};




struct InteractionConditionNAND {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct InteractionConditionParams* firstCondition;
    uint8_t _pad_2[0x8];
    struct InteractionConditionParams* secondCondition;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocks_BindingsRotationBase {
    uint8_t _pad_0[0x50];
};




struct TintPaletteRef {
    uint8_t _pad_0[0x8];
    struct TintPaletteTree* RootRecord;
    uint8_t _pad_1[0x10];
    struct CryStringT* ChildPath;
    uint8_t _pad_2[0x8];
};




struct AnimationJointBaseRotation {
    uint8_t _pad_0[0x8];
    struct AnimationVariable* variable;
    uint8_t _pad_1[0x8];
};




struct SInteractionParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* Interaction;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* DisplayName;
    _Bool IsPrimary;
    uint8_t _pad_2[0x7];
};




struct SItemPortDefAttachmentImplementationEntity {
    uint8_t _pad_0[0x8];
    _Bool usePhysicalAttachment;
    _Bool useEntityAttachment;
    _Bool useExteriorAttachment;
    _Bool usePhysicalParent;
    _Bool useLogicalAttachment;
    uint8_t _pad_1[0x3];
    struct SAttachmentConstraintParams* constraintParams;
    uint8_t _pad_2[0x40];
    _Bool hangarPort;
    uint8_t _pad_3[0x7];
    struct SItemPortDefHelperNode* Helper;
    uint8_t _pad_4[0x160];
};




struct MeleeComboChainLink {
    uint8_t _pad_0[0x8];
    enum ARDataType attackType;
    enum ARDataType classType;
    uint8_t _pad_1[0x3];
};




struct SBeamParticleAudioParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* subParticlePath;
    uint8_t _pad_1[0x8];
    struct GPUParticleAudio* gpuParticleAudio;
    uint8_t _pad_2[0x10];
};




struct SStartFillingGasTankGameplayTrigger {
    uint8_t _pad_0[0x8];
};




struct ControlHintCondition_TryOnState {
    uint8_t _pad_0[0x8];
    enum ARDataType tryOnState;
    uint8_t _pad_1[0x7];
};




struct WindAreaParams {
    uint8_t _pad_0[0x18];
    _Bool defaultActive;
    uint8_t _pad_1[0x7];
    struct Vec3* size;
    uint8_t _pad_2[0x10];
    _Bool ellipsoidal;
    uint8_t _pad_3[0x3];
    float falloffInner;
    struct Vec3* direction;
    uint8_t _pad_4[0x10];
    float speed;
    float airResistance;
    float airDensity;
    uint8_t _pad_5[0x4];
};




struct SLightStateOverride {
    uint8_t _pad_0[0x8];
    struct SInteractionState* interactionState;
    uint8_t _pad_1[0x8];
    enum ARDataType lightState;
    uint8_t _pad_2[0x4];
};




struct ScanDisplayHeaderWithBodySetupParams {
    uint8_t _pad_0[0x8];
    enum ARDataType scanTable;
    uint8_t _pad_1[0x7];
    _Bool failIfNoBody;
    _Bool checkDisplaySection;
    uint8_t _pad_2[0x6];
    struct ScanDisplayVariableParams* headerVariable;
    uint8_t _pad_3[0x8];
    struct ScanDisplayVariableParams* bodyVariable;
    uint8_t _pad_4[0x8];
    struct ScanDisplayVariableParams* capacityVariable;
    uint8_t _pad_5[0x8];
    struct ScanDisplayVariableParams* extensionVariable;
    uint8_t _pad_6[0x8];
};




struct CommunicationATLConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* playTriggerPrefix;
    uint8_t _pad_1[0x8];
    struct CryStringT* stopTriggerPrefix;
    uint8_t _pad_2[0x8];
    struct CryStringT* speakerVoiceSwitch;
    uint8_t _pad_3[0x8];
    struct CryStringT* speakerTypeSwitch;
    uint8_t _pad_4[0x8];
};




struct SMisfireDamage {
    uint8_t _pad_0[0x8];
};




struct SSCSignatureSystemSDFCrossSectionParams {
    uint8_t _pad_0[0x8];
};




struct SDoorCollisionReactionBaseParams {
    uint8_t _pad_0[0x8];
};




struct InnerThought_LayoutStates {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct InnerThought_LayoutBase* layout;
    uint8_t _pad_2[0x8];
};




struct JumpDriveFlightParams {
    uint8_t _pad_0[0x8];
    struct SJumpDriveFlightRotationParams* rotation;
    uint8_t _pad_1[0x80];
    struct SJumpDriveFlightLinearParams* linear;
    uint8_t _pad_2[0x50];
    struct SJumpDriveFlightSteeringParams* steering;
    uint8_t _pad_3[0x138];
    struct SVehicleAfterburnerParams* afterburner;
    uint8_t _pad_4[0x2c0];
    struct SJumpDriveFlightTurbulenceParams* turbulence;
    uint8_t _pad_5[0x1d8];
    float respoolTime;
    float exitRecoverySpeed;
};




struct BlueprintCategoryRecord {
    uint8_t _pad_0[0x8];
    struct CryStringT* categoryName;
    uint8_t _pad_1[0x8];
};




struct SHydraulicPumpableComponentParams {
    uint8_t _pad_0[0x18];
    float PumpPercentagePerSecondPerLever;
    float DecayPercentagePerSecond;
    struct SSharedInteractionParams* EnabledInteractionWhenFullyCharged;
    uint8_t _pad_1[0x8];
    struct Tag* StartChargingEffectTag;
    uint8_t _pad_2[0x10];
    struct Tag* StartDecayingEffectTag;
    uint8_t _pad_3[0x10];
    struct Tag* FinishChargingEffectTag;
    uint8_t _pad_4[0x10];
    struct AudioRtpc* CurrentChargeRTPC;
    uint8_t _pad_5[0x18];
};




struct SARMarkersParams {
    uint8_t _pad_0[0x8];
    float lockedRatioClose;
    uint8_t _pad_1[0x4];
};




struct PlayerShipRespawnShipInfo {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    int32_t RespawnWaitTime;
    int32_t InstantRespawnCost;
};




struct GravityBaseParams {
    uint8_t _pad_0[0x18];
    _Bool active;
    _Bool uniform;
    uint8_t _pad_1[0x2];
    float fallOffInner;
    float gravityMagnitude;
    uint8_t _pad_2[0x4];
    struct Vec3* gravityDirection;
    uint8_t _pad_3[0x10];
};




struct STransponderObjectMetadataParams {
    uint8_t _pad_0[0x8];
};




struct SHealingBeamConsumableType {
    uint8_t _pad_0[0x8];
    struct ConsumableSubtype* consumableSubtype;
    uint8_t _pad_1[0x10];
    enum ARDataType valueType;
    uint8_t _pad_2[0x4];
};




struct RearmRefuelTerminalParams {
    uint8_t _pad_0[0x18];
};




struct GlobalJumpDriveEntryEffectParams {
    uint8_t _pad_0[0x8];
    float trailStrengthMaxDistance;
    uint8_t _pad_1[0x4];
};




struct CraftingCostRecord {
    uint8_t _pad_0[0x8];
    struct CraftingCost_Base_NonRef* cost;
    uint8_t _pad_1[0x8];
};




struct ContactTypeScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SetTriggerableDeviceActiveEvent {
    uint8_t _pad_0[0x8];
    _Bool active;
    uint8_t _pad_1[0x7];
};




struct CameraCollisionConfig {
    uint8_t _pad_0[0x8];
    _Bool enableCollisionCheck;
    uint8_t _pad_1[0x3];
    float collisionSweepRadius;
    float entityObstructionDistance;
    float collisionPullbackTime;
    _Bool enableSelfCollisionCheck;
    uint8_t _pad_2[0x3];
    float selfCollisionSweepRadius;
    _Bool disableShakeOnCollision;
    uint8_t _pad_3[0x7];
};




struct PVPBountyBaseTemplateParams {
    uint8_t _pad_0[0x8];
    _Bool canBeCreatedInMobiglas;
    uint8_t _pad_1[0x7];
};




struct QuantumDriveEffectSettings {
    uint8_t _pad_0[0x8];
    float spoolingEffectFadeInDuration;
    float spoolingEffectFadeOutDuration;
    float spoolingEffectMultiplier;
    float spoolingEffectSpeedInput;
};




struct AreaOutdoorMaterialParams {
    uint8_t _pad_0[0x8];
    float gridOpacity;
    float gridOuterNoisePower;
    float beamOuterAlpha;
    float beamGlowAmount;
};




struct SInteractorHintActivator {
    uint8_t _pad_0[0x8];
    enum ARDataType hint;
    uint8_t _pad_1[0x4];
};




struct SJumpDriveFlightTurbulenceNoiseParams {
    uint8_t _pad_0[0x8];
    struct Vec3* frequencies;
    uint8_t _pad_1[0x10];
    float multiplier;
    float hurstIndex;
    float threshold;
    uint8_t _pad_2[0x4];
};




struct SChargeDrainCardParams {
    uint8_t _pad_0[0x8];
    float cardLerpSpeed;
    float attachPointLerpSpeed;
    float closingDelay;
    float closingTransitionTime;
    float nearDistance;
    uint8_t _pad_1[0x4];
    struct Vec2* defaultScreenPos;
    uint8_t _pad_2[0x8];
    float maxDistScreenPosScale;
    uint8_t _pad_3[0x4];
};




struct SSCSignatureEmissionBaseModifier {
    uint8_t _pad_0[0x8];
};




struct InteractiveVariable_BackToDefaultIntParams {
    uint8_t _pad_0[0x8];
    float waitTime;
    uint8_t _pad_1[0x4];
};




struct SOrbitComponentParams {
    uint8_t _pad_0[0x18];
    double OrbitalRadius;
    double OrbitalSpeed;
    double OrbitalAngle;
    struct CryStringT* parentGUID;
    uint8_t _pad_1[0x18];
};




struct SHackingCodeSystemLogEntry {
    uint8_t _pad_0[0x8];
    _Bool isDisabled;
    uint8_t _pad_1[0x7];
    struct CLocIdentifier* logEntryText;
};




struct SRemoteRigidEntityControllerParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* animStartInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* oneHandedAnimStartInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* animStopInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* startUsingInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* action1Interaction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* action2Interaction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* grabInteraction;
    uint8_t _pad_7[0x8];
    struct SSharedInteractionParams* releaseInteraction;
    uint8_t _pad_8[0x8];
    struct SSharedInteractionParams* exitInteraction;
    uint8_t _pad_9[0x8];
    struct SInteractionState* functionalState;
    uint8_t _pad_10[0x8];
    struct SInteractionState* brokenState;
    uint8_t _pad_11[0x8];
    struct SInteractionState* preventGrabbingState;
    uint8_t _pad_12[0x8];
    struct SInteractionState* preventDroppingState;
    uint8_t _pad_13[0x8];
    struct SRemoteRigidEntityControllerControlledGroupParams* controlledGroups;
    uint8_t _pad_14[0x30];
    struct SControlledEntityCameraParams* cameraData;
    uint8_t _pad_15[0x48];
    float movementLerpSpeed;
    float rotationLerpSpeed;
    float scaleLerpSpeed;
    uint8_t _pad_16[0x4];
    struct SRemoteRigidEntityControllerOneHandedParams* oneHandedParams;
    uint8_t _pad_17[0x20];
    struct Vec3* forwardBackwardMovement;
    uint8_t _pad_18[0x10];
    struct Vec3* sideToSideMovement;
    uint8_t _pad_19[0x10];
    struct Vec3* upDownMovement;
    uint8_t _pad_20[0x10];
    struct Vec3* keyboardRotation;
    uint8_t _pad_21[0x10];
    struct Vec3* mouseLeftRightRotation;
    uint8_t _pad_22[0x10];
    struct Vec3* mouseUpDownRotation;
    uint8_t _pad_23[0x10];
    float rotationDeadzone;
    uint8_t _pad_24[0x4];
    struct SControlledEntityRopeAttachmentPairs* relevantRopeAttachments;
    uint8_t _pad_25[0x30];
    float objectSearchRange;
    uint8_t _pad_26[0x4];
};




struct ConsumableEffectModifyActorStatus {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* effectDescription;
    enum ARDataType statType;
    float statPointChange;
    float statCooldownChange;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_SvgFill {
    uint8_t _pad_0[0x8];
    struct CryStringT* svgPath;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_TRBL* nineSliceRect;
    uint8_t _pad_2[0x18];
    _Bool renderShape;
    _Bool flipHorizontal;
    _Bool flipVertical;
    _Bool enableColorOverlay;
    uint8_t _pad_3[0x4];
    struct BuildingBlocks_ColorBase* color;
    uint8_t _pad_4[0x8];
    enum ARDataType scalingBehavior;
    float containPositionX;
    float containPositionY;
    _Bool enableNineSliceRect;
    uint8_t _pad_5[0x3];
    float nineSliceScale;
    float strokeExtent;
    float playhead;
    uint8_t _pad_6[0x4];
};




struct ActorActionHandler_ValidationParams {
    uint8_t _pad_0[0x8];
    struct ActorActionHandler_LadderValidationParams* ladderValidationParams;
    uint8_t _pad_1[0x10];
};




struct SGasPressureRangeParams {
    uint8_t _pad_0[0x8];
    float minRange;
    float maxRange;
};




struct CameraDistanceConfig {
    uint8_t _pad_0[0x8];
    _Bool includeBounds;
    uint8_t _pad_1[0x3];
    float initialDistance;
    float minDistance;
    float maxDistance;
    float dollySpeed;
    float automaticDollySpeed;
    float timeBeforeAutomaticDolly;
    float smoothTime;
};




struct AudioRtpc {
    uint8_t _pad_0[0x8];
    struct CryStringT* rtpc;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_TriggerCloseContextMenu {
    uint8_t _pad_0[0x8];
};




struct InnerThought_LayoutBase {
    uint8_t _pad_0[0x10];
};




struct SGasAtmosphereEntryParams {
    uint8_t _pad_0[0x8];
    struct GasParams* gasParams;
    uint8_t _pad_1[0x10];
    float parts;
    uint8_t _pad_2[0x4];
};




struct LinkedStatRulePassCrossingAboveThreshold {
    uint8_t _pad_0[0x8];
    float threshold;
    uint8_t _pad_1[0x4];
};




struct SProjectileLauncher {
    uint8_t _pad_0[0x8];
    struct CryStringT* fireHelper;
    uint8_t _pad_1[0x8];
    struct CryStringT* muzzleHelper;
    uint8_t _pad_2[0x8];
    int32_t ammoCost;
    int32_t pelletCount;
    float damageMultiplier;
    float soundRadius;
    struct SSpreadParams* spreadParams;
    uint8_t _pad_3[0x18];
    enum ARDataType projectileType;
    uint8_t _pad_4[0x4];
};




struct SILayerEntitiesGroupManager {
    uint8_t _pad_0[0x18];
};




struct BoidsActorRepelRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float effectDistance;
    uint8_t _pad_2[0x4];
};




struct SEntityComponentHostilityCompositeParams {
    uint8_t _pad_0[0x18];
    struct Faction* emptyFactionSC;
    uint8_t _pad_1[0x10];
    struct Faction_LEGACY* emptyFaction;
    uint8_t _pad_2[0x10];
    struct SHostilityWantedLevelParams* wantedLevelHostility;
    uint8_t _pad_3[0x8];
    _Bool useOnlyPrimaryChildForHostility;
    uint8_t _pad_4[0x7];
};




struct BlueprintCategoryAvailability_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct RaceCheckpointComponentParams {
    uint8_t _pad_0[0x18];
    int32_t checkpointNumber;
    float radius;
    struct Vec3* bounds;
    uint8_t _pad_1[0x10];
};




struct SCItemAIModuleParams {
    uint8_t _pad_0[0x18];
    struct OperatorModeAvailabilityParams* availableOperatorModes;
    uint8_t _pad_1[0x10];
    struct CryStringT* communicationConfigName;
    uint8_t _pad_2[0x8];
    _Bool automaticallyEnableItems;
    _Bool useGameRulesActivation;
    _Bool isHostilityPrimaryChild;
    uint8_t _pad_3[0x5];
};




struct AccessibilityBaseParams {
    uint8_t _pad_0[0x8];
};




struct MiniGameRecordDef {
    uint8_t _pad_0[0x8];
    struct SMiniGameData* MiniGameData;
    uint8_t _pad_1[0x8];
};




struct ShipRecallParams {
    uint8_t _pad_0[0x8];
    float HoverHeightAtDestination;
    float ForwardOffset;
    float ObstructionDetectionRange;
    float DefaultPlatformDetectionRange;
    float MinimumRecallDistance;
    float BrakingDistanceOffset;
    struct Tag* AIModuleTag;
    uint8_t _pad_1[0x10];
};




struct PlanetNavigationVolumeParams {
    uint8_t _pad_0[0x18];
};




struct AudioWaterInteractions {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* waterCollisionOneShot;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* waterBulletOneShot;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* waterHitLoopStart;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* waterHitLoopStop;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* waterForceLoopStart;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* waterForceLoopStop;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* waterNPCLoopStart;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* waterNPCLoopStop;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* waterPlayerLoopStart;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* waterPlayerLoopStop;
    uint8_t _pad_10[0x18];
    struct AudioRtpc* splashSimSizeRtpc;
    uint8_t _pad_11[0x18];
    struct AudioRtpc* splashRadiusRtpc;
    uint8_t _pad_12[0x18];
    struct AudioRtpc* splashDisplacementRtpc;
    uint8_t _pad_13[0x18];
    struct AudioRtpc* splashVolumeRtpc;
    uint8_t _pad_14[0x18];
    struct AudioRtpc* smallestSplashDimensionRtpc;
    uint8_t _pad_15[0x18];
    struct AudioRtpc* impactSpeedRtpc;
    uint8_t _pad_16[0x18];
    struct AudioRtpc* waterDepthRtpc;
    uint8_t _pad_17[0x18];
    int32_t framesBeforeLoopStop;
    uint8_t _pad_18[0x4];
};




struct BuildingBlocks_PreviewSceneHoloVolume {
    uint8_t _pad_0[0x10];
    enum ARDataType renderLayer;
    uint8_t _pad_1[0x7];
};




struct SCItemDoorCodeProceduralParams {
    uint8_t _pad_0[0x8];
    float DefaultAnimationDurationScale;
    float SecondaryAnimationDurationScale;
    struct SCItemDoorUserAnimationParams* userAnimationParams;
    uint8_t _pad_1[0x8];
    struct Vec3* OpenedOffset;
    uint8_t _pad_2[0x10];
    float OpenCloseTime;
    float OpenCloseEasing;
};




struct SecurityClearanceTokenData_OtherToken {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
    struct SecurityClearanceToken* token;
    uint8_t _pad_2[0x10];
};




struct HoverHandling {
    uint8_t _pad_0[0x8];
    float turnFriction;
    float selfRightingAccelBoost;
    float hoverMaxSpeed;
    float airControlMultiplier;
    float antiFallMultiplier;
    float lateralStrafeMultiplier;
    struct BezierCurve* maxSpeedMultiplierByHeight;
    uint8_t _pad_1[0x88];
    struct BezierCurve* turnFrictionMultiplierByHeight;
    uint8_t _pad_2[0x88];
};




struct ConstantDOFPosWeights {
    uint8_t _pad_0[0x8];
    int32_t gridDistance;
    float weight;
};




struct InteractionConditionLootableNotBeingViewedByAnyOtherInventory {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct CraftingCost_Resource {
    uint8_t _pad_0[0x8];
    struct ResourceType* resource;
    uint8_t _pad_1[0x10];
    struct SBaseCargoUnit* quantity;
    uint8_t _pad_2[0x8];
};




struct SProjectedPitchLadderParams {
    uint8_t _pad_0[0x8];
    float visibleSizeAngle;
    float visibleFadeRatio;
    float incrementAngle;
    _Bool centersEnabled;
    uint8_t _pad_1[0x3];
    enum ARDataType centersAlignmentType;
    _Bool sidesEnabled;
    uint8_t _pad_2[0x3];
    float sidesHorizontalOffsetAngle;
    enum ARDataType sidesPositionType;
    enum ARDataType sidesAlignmentType;
    _Bool labelsEnabled;
    uint8_t _pad_3[0x3];
    float labelsHorizontalOffsetAngle;
    enum ARDataType labelsPositionType;
    enum ARDataType labelsAlignmentType;
    _Bool enableZeroPitchElements;
    uint8_t _pad_4[0x3];
};




struct SDashboardSystemInteractionParams {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* doorsIP;
    uint8_t _pad_1[0x8];
    struct SInteractionPointParams* landingIP;
    uint8_t _pad_2[0x8];
    struct SInteractionPointParams* cargoIP;
    uint8_t _pad_3[0x8];
};




struct UsableSlottingReferenceElementBase {
    uint8_t _pad_0[0x8];
};




struct ObjectiveProperty_Referenced {
    uint8_t _pad_0[0x8];
    struct CryStringT* missionVariableName;
    uint8_t _pad_1[0x8];
    struct CryStringT* extendedTextToken;
    uint8_t _pad_2[0x8];
    struct MissionProperty* property;
    uint8_t _pad_3[0x8];
};




struct TargetSelectorRootTargetingStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* noTarget;
    uint8_t _pad_1[0x8];
    struct SInteractionState* friendlyTarget;
    uint8_t _pad_2[0x8];
    struct SInteractionState* hostileTarget;
    uint8_t _pad_3[0x8];
    struct SInteractionState* neutralTarget;
    uint8_t _pad_4[0x8];
};




struct Marker_AbilityOverrideDisplayName {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* defaultName;
};




struct DigitalSignageContent {
    uint8_t _pad_0[0x8];
    struct Tag* contentAspectRatio;
    uint8_t _pad_1[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_2[0x10];
};




struct LightSizeParams {
    uint8_t _pad_0[0x8];
    float lightRadius;
    float bulbRadius;
    float planeWidth;
    float planeHeight;
};




struct JournalEntryLawText {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* BodyText;
    struct Jurisdiction* jurisdiction;
    uint8_t _pad_1[0x10];
};




struct SSCSignatureSystemAudioOverride {
    uint8_t _pad_0[0x8];
    float value;
    uint8_t _pad_1[0x4];
};




struct SimpleSpriteSlot {
    uint8_t _pad_0[0x8];
    struct SimpleSpriteSheet* sheet;
    uint8_t _pad_1[0x10];
    _Bool flipU;
    _Bool flipV;
    uint8_t row;
    uint8_t column;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_StaticVariableLocalization {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* value;
};




struct UIWorldDisplayInputSoundParams {
    uint8_t _pad_0[0x8];
    struct UIWorldDisplayInputSoundRtpcParam* rtpcParamX;
    uint8_t _pad_1[0x28];
    struct UIWorldDisplayInputSoundRtpcParam* rtpcParamY;
    uint8_t _pad_2[0x28];
    struct Tag* eventTag;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_FlexContainer {
    uint8_t _pad_0[0x8];
    enum ARDataType direction;
    enum ARDataType wrap;
    enum ARDataType axisJustification;
    enum ARDataType crossAxisJustification;
    enum ARDataType itemAlignment;
    float columnSpacing;
    float rowSpacing;
    uint8_t _pad_1[0x4];
};




struct SWeaponProceduralClipSwayOvershoot {
    uint8_t _pad_0[0x8];
    float velocityInterpolationMultiplier;
    float velocityLowPassFilter;
    float accelerationSmoothing;
    float accelerationFrontAugmentation;
    struct Vec3* overshootOffset;
    uint8_t _pad_1[0x10];
    struct Ang3* sideOvershootRot;
    uint8_t _pad_2[0x10];
    struct Ang3* frontOvershootRot;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_FieldTransitionColor {
    uint8_t _pad_0[0x8];
    float duration;
    float delay;
    float delayRandomRange;
    _Bool timescaleIndependent;
    uint8_t _pad_1[0x3];
    struct BuildingBlocks_TimingFunctionBase* timingFunction;
    uint8_t _pad_2[0x8];
    enum ARDataType field;
    uint8_t _pad_3[0x4];
};




struct SEntityEffectSystem_OverrideValueModifier {
    uint8_t _pad_0[0x8];
    float overrideValue;
    uint8_t _pad_1[0x4];
};




struct HoverPlane {
    uint8_t _pad_0[0x8];
    float width;
    float length;
    struct Vec3* offset;
    uint8_t _pad_1[0x10];
};




struct ExitCollisionCheckOverrideParams {
    uint8_t _pad_0[0x8];
    struct Vec3* offset;
    uint8_t _pad_1[0x10];
    float scale;
    uint8_t _pad_2[0x4];
};




struct CommsChannelDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* channelId;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    _Bool canHaveMultipleInstances;
    _Bool useAreaOfEffect;
    uint8_t _pad_2[0x6];
};




struct SJumpPointPushAreaParams {
    uint8_t _pad_0[0x8];
    float areaRadius;
    float softPushAreaDistance;
    float strength;
    float damping;
    float falloffRatio;
    uint8_t _pad_1[0x4];
};




struct EntityComponentRoomFadeVolumeParams {
    uint8_t _pad_0[0x18];
    struct VolumeShape* areaVolume;
    uint8_t _pad_1[0x8];
    float fadeZone;
    uint8_t _pad_2[0x4];
};




struct MarkerTrackingDisplayParameters {
    uint8_t _pad_0[0x8];
    _Bool showPanels;
    _Bool showEdgeMarkers;
    _Bool showSmallIconOnly;
    _Bool enableDynamicRadar;
    enum ARDataType planeAlignmentMode;
    float minimumRadarRangeInMeters;
    float defaultRadarRangeInMeters;
    float radarPaddingInMeters;
    float playerZoomOffset;
    float iconOverrideThreshold;
    float standardIconThreshold;
    float modelThreshold;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeDustParticleMovementRestriction {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct EAPickupMissilesParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float percent;
    int32_t requiredScore;
    _Bool spawnOnKill;
    _Bool enabledForFPS;
    _Bool enabledForVehicles;
    _Bool allowSpawnOnSuicide;
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
};




struct SInstancedInteriorGatewayParams {
    uint8_t _pad_0[0x18];
    int32_t gatewaySize;
    uint8_t _pad_1[0x4];
    struct EntityClassDefinition* instance;
    uint8_t _pad_2[0x10];
};




struct JumpTunnelEffectTintingParams {
    uint8_t _pad_0[0x8];
    struct RGB* startColor;
    uint8_t _pad_1[0x10];
    struct RGB* midColor;
    uint8_t _pad_2[0x10];
    struct RGB* endColor;
    uint8_t _pad_3[0x10];
    float startGlow;
    float endGlow;
    float distanceBeforeMidPoint;
    float distanceAfterMidPoint;
};




struct SThrowMode {
    uint8_t _pad_0[0x8];
    struct Vec3* offset;
    uint8_t _pad_1[0x10];
    struct Vec3* angularVelocity;
    uint8_t _pad_2[0x10];
    enum ARDataType mode;
    uint8_t _pad_3[0x4];
};




struct SSCItemTargetSelectorComponentParams {
    uint8_t _pad_0[0x18];
    struct STargetSelectorGlobalTargetingParams* globalTargetingParams;
    uint8_t _pad_1[0x10];
    int32_t maxPinnedTargets;
    float outerAngle;
    float innerAngle;
    float autoSelectionTimer;
    struct STargetableItemTypesRecord* targetableItemTypesRecord;
    uint8_t _pad_2[0x10];
    struct SSharedInteractionParams* cycleFriendlyTargetInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* cycleHostileTargetInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* cycleAllTargetsInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* cyclePinnedTargetInteraction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* cycleSubTargetInteraction;
    uint8_t _pad_7[0x8];
    struct SSharedInteractionParams* beginSubTargetingInteraction;
    uint8_t _pad_8[0x8];
    struct SSharedInteractionParams* endSubTargetingInteraction;
    uint8_t _pad_9[0x8];
    struct SSharedInteractionParams* pinTargetInteraction;
    uint8_t _pad_10[0x8];
    struct SSharedInteractionParams* unpinTargetInteraction;
    uint8_t _pad_11[0x8];
    struct SARMarkersParams* arMarkersParams;
    uint8_t _pad_12[0x8];
    struct SARTrailParams* arTrailParams;
    uint8_t _pad_13[0x18];
    struct OcclusionBindingsParams* occlusionParams;
    uint8_t _pad_14[0x10];
    struct STargetSelectorHudParams* hudParamsOverride;
    uint8_t _pad_15[0x10];
};




struct StatusTriggerBase {
    uint8_t _pad_0[0x8];
    struct SStatusFortitudeLevelModifier* fortitudeLevelModifier;
    uint8_t _pad_1[0x8];
};




struct WeaponAIAimingMethodDirect {
    uint8_t _pad_0[0x8];
    _Bool enableSpread;
    uint8_t _pad_1[0x7];
};




struct CraftingRecipe_Ref {
    uint8_t _pad_0[0x8];
    struct CraftingRecipe_Base_NonRef* recipeReference;
    uint8_t _pad_1[0x8];
};




struct MissionPropertyValue_AIName {
    uint8_t _pad_0[0x8];
    _Bool randomName;
    _Bool randomLastName;
    _Bool randomNickName;
    uint8_t _pad_1[0x5];
    struct CLocIdentifier* characterGivenName;
    struct CLocIdentifier* characterGivenLastName;
    struct CLocIdentifier* characterGivenNickName;
    struct CharacterNameData* characterNameData;
    uint8_t _pad_2[0x10];
    float chanceOfNickName;
    uint8_t _pad_3[0x4];
};




struct PlayerChoice_RemoteCommsConfig {
    uint8_t _pad_0[0x8];
    struct InnerThought_ConversationSystemConfig* mobiglasConfig;
    uint8_t _pad_1[0x10];
    struct InnerThought_ConversationSystemConfig* MFDConfig;
    uint8_t _pad_2[0x10];
    struct InnerThought_ConversationSystemConfig* visorConfig;
    uint8_t _pad_3[0x10];
    struct InnerThought_ConversationSystemConfig* hologramConfig;
    uint8_t _pad_4[0x10];
};




struct BaseSpawnerPrerequisite {
    uint8_t _pad_0[0x8];
};




struct SEntityCgfGridProperty {
    uint8_t _pad_0[0x8];
    struct GlobalResourceGeometry* gridGeometry;
    uint8_t _pad_1[0x10];
    struct Vec3* gravity;
    uint8_t _pad_2[0x10];
    enum ARDataType gridType;
    float cellSize;
    _Bool inheritGravity;
    _Bool gridPartsOnly;
    _Bool portalExclusiveMode;
    uint8_t _pad_3[0x5];
};




struct HaulingMissionHelperComponentParams {
    uint8_t _pad_0[0x18];
};




struct SDetachItemGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
    struct Vec3* impulseDirection;
    uint8_t _pad_2[0x10];
    float impulseStrength;
    uint8_t _pad_3[0x4];
};




struct GlobalJumpTunnelHostParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceMaterial* material;
    uint8_t _pad_1[0x10];
    struct SJumpTunnelGenerationParams* tunnelGenerationParams;
    uint8_t _pad_2[0x2f8];
    struct SJumpTunnelFailureParams* tunnelFailureParams;
    uint8_t _pad_3[0x40];
    struct SJumpTunnelDistortionParams* tunnelDistortionParams;
    uint8_t _pad_4[0x8];
    struct SJumpTunnelExitParams* tunnelExitParams;
    uint8_t _pad_5[0x38];
    struct SJumpTunnelVisualParams* visualParams;
    uint8_t _pad_6[0x28];
    struct GlobalJumpTunnelEffectParams* effectParams;
    uint8_t _pad_7[0x180];
    float entityPullInAcceleration;
    uint8_t _pad_8[0x4];
};




struct ProceduralEntityAudioParams {
    uint8_t _pad_0[0x8];
    struct AudioSwitch* biomeSwitch;
    uint8_t _pad_1[0x30];
};




struct ObjectiveHandler_Local {
    uint8_t _pad_0[0x8];
    struct CryStringT* module;
    uint8_t _pad_1[0x8];
    struct MissionModuleHierarchy* moduleHierarchy;
    uint8_t _pad_2[0x10];
    _Bool disableTravelObjectives;
    uint8_t _pad_3[0x3];
    float travelRadiusKM;
    struct ObjectiveDisplayInfo* travelObjectiveInfo;
    uint8_t _pad_4[0x20];
    struct ObjectiveDisplayInfo* returnObjectiveInfo;
    uint8_t _pad_5[0x20];
    struct NavPointSpawnInformation* navPointSpawnInfo;
    uint8_t _pad_6[0x10];
    _Bool travelRadiusOverridesActionArea;
    uint8_t _pad_7[0x7];
    struct ObjectivePropertyBase* location;
    uint8_t _pad_8[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeFlexWrap {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct CommsTapScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct CLocIdentifier* displayForEncrypted;
    struct CLocIdentifier* displayForListening;
};




struct ControlHints_ActionInput {
    uint8_t _pad_0[0x8];
    enum ARDataType activationMode;
    uint8_t _pad_1[0x4];
    struct CryStringT* actionName;
    uint8_t _pad_2[0x18];
};




struct UIWorldDisplayInputSoundRtpcParam {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* id;
    uint8_t _pad_1[0x18];
    float threshold;
    uint8_t _pad_2[0x4];
};




struct SSetSecurityNetworkVariableTrigger {
    uint8_t _pad_0[0x8];
    struct SecurityNetworkVariable* variable;
    uint8_t _pad_1[0x28];
};




struct SMatchChannel {
    uint8_t _pad_0[0x8];
};




struct HintManagerParams {
    uint8_t _pad_0[0x18];
};




struct JournalEntry {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* Title;
    struct CLocIdentifier* ShortTitle;
    struct CLocIdentifier* SubHeading;
    _Bool autoOpenMobiGlas;
    _Bool showNotification;
    _Bool missionSpecificContent;
    _Bool removeOnMissionEnd;
    uint8_t _pad_1[0x4];
    struct JournalEntryType* Style;
    uint8_t _pad_2[0x10];
    struct BaseJournalEntry* type_;
    uint8_t _pad_3[0x8];
    _Bool tutorialEntry;
    uint8_t _pad_4[0x7];
};




struct SSpawnOnlyOnRequest {
    uint8_t _pad_0[0x8];
    int32_t maxEntities;
    uint8_t _pad_1[0x4];
};




struct CustomLookAtBB {
    uint8_t _pad_0[0x8];
    struct Vec3* min;
    uint8_t _pad_1[0x10];
    struct Vec3* max;
    uint8_t _pad_2[0x10];
};




struct SEntityComponentSmoothingModificationObjectParams {
    uint8_t _pad_0[0x18];
    float size;
    float rollOff;
    float strength;
    int32_t sortOrder;
};




struct MissionInitParamBoolean {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool value;
    uint8_t _pad_2[0x7];
};




struct ScreenEffects_ParamValue_Vec4 {
    uint8_t _pad_0[0x8];
    struct Vec4* value;
    uint8_t _pad_1[0x10];
};




struct SSequencerItemDoorTaskParams {
    uint8_t _pad_0[0x20];
};




struct EntityComponentLocalPlayerVisorAudioParams {
    uint8_t _pad_0[0x18];
    struct AudioRtpc* visorRtpc;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* visorPriorityRtpc;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* soundSimOnRtpc;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* weaponHasActiveVisorAudioRtpc;
    uint8_t _pad_4[0x18];
    float fireRateThresholdForPrioritySwap;
    uint8_t _pad_5[0x4];
};




struct SEntityObjectCharacterComponentParams {
    uint8_t _pad_0[0x18];
};




struct LinkedStatRulePassAlwaysNegative {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_StaticVariableFontStyle {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_FontStyle* value;
    uint8_t _pad_2[0x10];
};




struct TurretModifiersParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    float movmementSpeedMultiplier;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_BindingsLocalizedModifyCase {
    uint8_t _pad_0[0x50];
    enum ARDataType caseModifier;
    uint8_t _pad_1[0x4];
    struct BuildingBlocks_BindingsLocalizedBase* input;
    uint8_t _pad_2[0x8];
};




struct QuickAccessWheelAutoOperatorModeDef {
    uint8_t _pad_0[0x8];
    _Bool openContextMenuAsFolder;
    uint8_t _pad_1[0x7];
};




struct InteractionConditionPlayerAloneInVehicle {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct ControlHintCondition_ActorSightZeroMode {
    uint8_t _pad_0[0x8];
    enum ARDataType sightZeroMode;
    uint8_t _pad_1[0x7];
};




struct EntityTemperatureSignature {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x3];
    float minimumTemperatureForIR;
    float temperatureToIR;
    uint8_t _pad_2[0x4];
};




struct SQuantumBoostAudioParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* bubbleStart;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* bubbleStop;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* bubbleRtpc;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* boostStart;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* boostStop;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* boostRtpc;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* enterBoost;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* exitBoost;
    uint8_t _pad_8[0x18];
    struct AudioRtpc* angleOffsetRtpc;
    uint8_t _pad_9[0x18];
};




struct SActorDeathPoseVariant {
    uint8_t _pad_0[0x8];
    struct CryStringT* variantName;
    uint8_t _pad_1[0x8];
    struct CryStringT* mannequinTag;
    uint8_t _pad_2[0x8];
    struct CryStringT* geometryTags;
    uint8_t _pad_3[0x10];
};




struct FireHazardSpawnParams {
    uint8_t _pad_0[0x8];
    float floorMaxAngle;
    float wallsMaxAngle;
    float ceilingMaxAngle;
    float lodTransitionDistance;
};




struct ControlHintCondition_VehicleMainThrustersState {
    uint8_t _pad_0[0x8];
    enum ARDataType mainThrustersState;
    uint8_t _pad_1[0x7];
};




struct ControlHintCondition_VehicleDestroyedState {
    uint8_t _pad_0[0x8];
    enum ARDataType destroyedState;
    uint8_t _pad_1[0x7];
};




struct ControlHint_DisplayInfoSet {
    uint8_t _pad_0[0x8];
    struct ControlHints_HintDisplayInfoAction* overrideHint;
    uint8_t _pad_1[0x60];
    struct ControlHints_HintDisplayInfoAction* gamepadHint;
    uint8_t _pad_2[0x8];
    struct ControlHints_HintDisplayInfoAction* joystickHint;
    uint8_t _pad_3[0x8];
    _Bool alwaysShowIfBound;
    uint8_t _pad_4[0x7];
};




struct TriggerSubConditionActionAreaDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* approachingNpcGUID;
    uint8_t _pad_1[0x8];
    struct CryStringT* actionAreaSuperGUID;
    uint8_t _pad_2[0x8];
    struct CryStringT* locationName;
    uint8_t _pad_3[0x8];
};




struct CraftingResult_Resource {
    uint8_t _pad_0[0x8];
    struct ResourceType* resource;
    uint8_t _pad_1[0x10];
    struct SBaseCargoUnit* quantity;
    uint8_t _pad_2[0x8];
};




struct ExtendedNameEntryTextBase {
    uint8_t _pad_0[0x8];
};




struct BulletElectronParams {
    uint8_t _pad_0[0x8];
    float residualChargeMultiplier;
    int32_t maximumJumps;
    float jumpRange;
    uint8_t _pad_1[0x4];
};




struct DeltaSignatureSensitivityParams {
    uint8_t _pad_0[0x8];
    float sensitivity;
    float pierce;
};




struct MissionScenarioSchedule {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct MissionScenarioScheduleConstraint* start_constraint;
    uint8_t _pad_2[0x8];
    struct MissionScenarioScheduleConstraint* end_constraint;
    uint8_t _pad_3[0x8];
    struct MissionScenarioScheduleRecurrence* recurrence;
    uint8_t _pad_4[0x8];
};




struct SDFMRaceObjectives {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* lapCompletedTime;
    float lapMessageDisplayTime;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* onDeathPenaltyMessage;
    float onDeathPenaltyTime;
    uint8_t _pad_2[0x4];
};




struct WaterShapeComponentParams {
    uint8_t _pad_0[0x18];
};




struct SEntitySoftExPhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
    float damping;
    float stretchStiffness;
    float compressStiffness;
    float bendingStiffness;
    float cosseratShearXStiffness;
    float cosseratShearYStiffness;
    float cosseratStretchStiffness;
    float cosseratBendXStiffness;
    float cosseratBendYStiffness;
    float cosseratTwistingStiffness;
    float attachmentInfluence;
    float maxDisplacementInfluence;
    float maxStretchAttach;
    float tetraVolStiffness;
    float collisionGap;
    float collisionThicknessFactor;
    float staticFriction;
    float dynamicFriction;
    float fixedStep;
    float totalMass;
    float relativeDeltaScale;
    float bindingOffset;
    _Bool enforceLength;
    _Bool enforceBending;
    _Bool enforceAttachment;
    _Bool enforceCosseratStrechShear;
    _Bool enforceCosseratBendTwist;
    _Bool enforceMaxDisplacement;
    _Bool enforceTetraVol;
    _Bool enableCollisions;
    _Bool enableFriction;
    _Bool enableSelfCollision;
    _Bool normalizeParticleSize;
    _Bool maxDisplacementRestrictToPositiveHemisphere;
    int32_t iterations;
    int32_t gridDim;
    float lift;
    float drag;
    float windVariance;
    float airResistance;
    float waterResistance;
    enum ARDataType substepMode;
    enum ARDataType visualBindingMode;
};




struct SCZeroGLaunchParams {
    uint8_t _pad_0[0x8];
    float maxLaunchSpeed;
    float launchRotationDuration;
    float launchEdgeCheckRadius;
    float launchEdgeCheckDistance;
    float launchEdgeSurfaceHoverCheckRadius;
    float launchEdgeSurfaceHoverCheckDistance;
};




struct EnvironmentLightStateParams_Aux {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float intensity;
    uint8_t _pad_2[0x4];
    struct CryStringT* presetTag;
    uint8_t _pad_3[0x8];
};




struct AutoMountRadiusParams {
    uint8_t _pad_0[0x8];
    float radiusWhenWalking;
    float radiusWhenRunning;
    float radiusWhenSprinting;
    float radiusOffset;
};




struct MobiglasDisplayLocation {
    uint8_t _pad_0[0x8];
    struct ObjectiveDisplayInfo* objectiveTitle;
    uint8_t _pad_1[0x20];
    struct ObjectiveDisplayInfo* collectObjective;
    uint8_t _pad_2[0x20];
    struct ObjectiveDisplayInfo* deliveryObjective;
    uint8_t _pad_3[0x20];
};




struct StringUserVariableTask {
    uint8_t _pad_0[0x20];
};




struct BindingsOperations_IntegerStringFontStylePair {
    uint8_t _pad_0[0x8];
    int64_t first;
    struct BuildingBlocks_FontStyle* second;
    uint8_t _pad_1[0x10];
};




struct SWeaponAimDofSettings {
    uint8_t _pad_0[0x8];
    float fstop;
    float focalDistance;
    float focalRange;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_StandardContainerMode {
    uint8_t _pad_0[0x8];
    _Bool borderLeft;
    _Bool borderTop;
    _Bool borderRight;
    _Bool borderBottom;
    _Bool enableBackground;
    uint8_t _pad_1[0x3];
};




struct MissionScenarioScheduleRecurrence {
    uint8_t _pad_0[0x8];
    struct CryStringT* cron;
    uint8_t _pad_1[0x8];
    uint32_t duration_seconds;
    uint8_t _pad_2[0x4];
};




struct MusicLogicNode {
    uint8_t _pad_0[0x8];
};




struct SVisionComponentParams {
    uint8_t _pad_0[0x18];
    struct AIVisualFieldProfile* visualFieldProfile;
    uint8_t _pad_1[0x10];
    struct AIObservableFiltersProfile* filterProfile;
    uint8_t _pad_2[0x18];
};




struct CraftingCost_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct CameraShopItemOffset {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct Vec3* positionOffset;
    uint8_t _pad_2[0x10];
};




struct SCIGTestBase {
    uint8_t _pad_0[0x8];
    _Bool bBase;
    uint8_t _pad_1[0x7];
};




struct SFireMisfireEffect {
    uint8_t _pad_0[0x8];
    struct Tag* effectTrigger;
    uint8_t _pad_1[0x10];
    struct Tag* effectTag;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitHorizontalAlignment {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    enum ARDataType paramField;
};




struct PlacementValidatorPlacingOnMineable {
    uint8_t _pad_0[0x8];
};




struct ProceduralEntityParams {
    uint8_t _pad_0[0x18];
    struct PlanetWeatherParams* Weather;
    uint8_t _pad_1[0x30];
    struct PlanetRoomParams* Room;
    uint8_t _pad_2[0x18];
    struct ProceduralEntityAudioParams* AudioParams;
    uint8_t _pad_3[0x38];
};




struct MissionInitParamInteger {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    int32_t value;
    uint8_t _pad_2[0x4];
};




struct BuildingBlocks_StaticArrayDataIntegerRange {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    int32_t numElements;
    int32_t rangeStart;
    int32_t rangeEnd;
    uint8_t _pad_2[0x4];
};




struct MissionReward {
    uint8_t _pad_0[0x8];
    int32_t reward;
    int32_t max;
    _Bool plusBonuses;
    enum ARDataType currencyType;
    uint8_t _pad_1[0x6];
    struct SReputationMissionRewardBonusParams* reputationBonus;
    uint8_t _pad_2[0x10];
};




struct DateTime {
    uint8_t _pad_0[0x8];
    struct Date* date;
    uint8_t _pad_1[0x10];
    struct Time* time;
    uint8_t _pad_2[0x10];
};




struct TransformationInterpolator {
    uint8_t _pad_0[0x8];
    float interpolationTime;
    uint8_t _pad_1[0x4];
    struct TransformationInterpolatorParams* transformationInterpolatorParams;
    uint8_t _pad_2[0xd0];
};




struct SUsableMovementAlignmentParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* EnterTag;
    uint8_t _pad_1[0x8];
    struct CryStringT* ExitTag;
    uint8_t _pad_2[0x8];
    struct SUsableMovementAlignmentData* AlignmentSlot;
    uint8_t _pad_3[0x8];
};




struct WeaponControllerCycleMissileStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* cycleForward;
    uint8_t _pad_1[0x8];
    struct SInteractionState* cycleBackward;
    uint8_t _pad_2[0x8];
};




struct ScanDisplayLocStringVariableParams {
    uint8_t _pad_0[0x8];
    uint8_t truncateSize;
    _Bool displayIsHidden;
    _Bool displayInBrackets;
    _Bool suffixArrayIndex;
    _Bool suffixSemiColon;
    enum ARDataType auxiliaryFlag;
    uint8_t _pad_1[0x2];
    struct ScanDisplayVariableParams* fallback_;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* locString;
};




struct PlayerDockContextComponentGlobalParams {
    uint8_t _pad_0[0x8];
    struct GameNotificationDockItemParams* gameNotificationDockItemParams;
    uint8_t _pad_1[0x10];
};




struct TriggerSubConditionPlayerActionDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* action;
    uint8_t _pad_1[0x8];
    _Bool isInverted;
    uint8_t _pad_2[0x7];
    struct CryStringT* siblingFailRule;
    uint8_t _pad_3[0x8];
};




struct ControlHintCondition_VehicleSalvage {
    uint8_t _pad_0[0x8];
    enum ARDataType state;
    uint8_t _pad_1[0x7];
};




struct MaelstromShatterBaseEvent {
    uint8_t _pad_0[0x8];
    struct Tag* shatterTag;
    uint8_t _pad_1[0x10];
};




struct SendDockingEnableEvent {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
};




struct UIGraph_SMLoadoutContextComponent {
    uint8_t _pad_0[0x8];
    struct LoadoutEditorComponentParams* loadoutEditorComponentParams;
    uint8_t _pad_1[0x10];
};




struct LongTermPersistenceSubTypeAll {
    uint8_t _pad_0[0x8];
    _Bool NotRemove;
    uint8_t _pad_1[0x7];
};




struct DaylightParticleGroupComponentParams {
    uint8_t _pad_0[0x18];
    enum ARDataType activationBehavior;
    uint8_t _pad_1[0x4];
};




struct LoadoutDummyTransformParams {
    uint8_t _pad_0[0x8];
    struct Vec3* position;
    uint8_t _pad_1[0x10];
    struct Ang3* rotation;
    uint8_t _pad_2[0x10];
    struct Vec3* lightPosition;
    uint8_t _pad_3[0x10];
    _Bool boundToBox;
    uint8_t _pad_4[0x3];
    float scale;
    struct Vec3* boundingBox;
    uint8_t _pad_5[0x10];
    _Bool pivotAboutCenter;
    uint8_t _pad_6[0x7];
};




struct RestrictedAreaATCComponentParams {
    uint8_t _pad_0[0x18];
};




struct PopupParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* locTitle;
    struct CLocIdentifier* locBody;
    struct CLocIdentifier* locConfirm;
    struct CLocIdentifier* locDecline;
};




struct AreaShapeComponentParams {
    uint8_t _pad_0[0x18];
};




struct ControlHintCondition_ActorPoseState {
    uint8_t _pad_0[0x8];
    enum ARDataType poseState;
    uint8_t _pad_1[0x4];
};




struct CraftingRecipe {
    uint8_t _pad_0[0x8];
    struct CraftingRecipeCosts_Base* costs;
    uint8_t _pad_1[0x8];
    struct CraftingRecipeResults_Base* results;
    uint8_t _pad_2[0x8];
};




struct FireVoxelSelectionShape {
    uint8_t _pad_0[0x8];
};




struct SActorForceReactionFilterDef {
    uint8_t _pad_0[0x8];
    struct SActorForceReactionStateConfig* stateConfig;
    uint8_t _pad_1[0x8];
    struct SActorForceReactionFilterItemDef* twitches;
    uint8_t _pad_2[0x10];
    struct SActorForceReactionFilterItemDef* directStaggers;
    uint8_t _pad_3[0x10];
    struct SActorForceReactionFilterItemDef* directKnockdowns;
    uint8_t _pad_4[0x10];
    struct SActorForceReactionFilterItemDef* flinches;
    uint8_t _pad_5[0x10];
    struct SActorForceReactionFilterItemDef* indirectStaggers;
    uint8_t _pad_6[0x10];
    struct SActorForceReactionFilterItemDef* indirectKnockdowns;
    uint8_t _pad_7[0x10];
    struct SActorForceReactionFilterItemDef* sustainedDeltaFlinches;
    uint8_t _pad_8[0x10];
    struct SActorForceReactionFilterItemDef* sustainedDeltaStaggers;
    uint8_t _pad_9[0x10];
    struct SActorForceReactionFilterItemDef* sustainedDeltaKnockdowns;
    uint8_t _pad_10[0x10];
    struct SActorForceReactionFilterItemDef* sustainedStumble;
    uint8_t _pad_11[0x10];
    struct SActorForceReactionFilterItemDef* sustainedKnockdowns;
    uint8_t _pad_12[0x10];
    struct SActorForceReactionLeanFilterItemDef* lean;
    uint8_t _pad_13[0x18];
};




struct ScreenEffects_ParamValue_Texture {
    uint8_t _pad_0[0x8];
    struct GlobalResourceTexture* value;
    uint8_t _pad_1[0x10];
};




struct SCIGTestA {
    uint8_t _pad_0[0x8];
    _Bool bBase;
    uint8_t _pad_1[0x7];
    _Bool bA;
    uint8_t _pad_2[0x7];
};




struct SSetHazardEnabledStateGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool Enable;
    uint8_t _pad_1[0x7];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeIconWidgetPreset {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    enum ARDataType paramField;
};




struct BuidlingBlocks_FieldModifierAnimation {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Animation* value;
    uint8_t _pad_1[0x40];
};




struct SpawnerPrerequisite_NOT {
    uint8_t _pad_0[0x8];
    struct BaseSpawnerPrerequisite* prerequisite;
    uint8_t _pad_1[0x8];
};




struct UIGraph_VehicleLoadoutEditorContextComponent {
    uint8_t _pad_0[0x8];
};




struct SCharacterEyeValidationParams {
    uint8_t _pad_0[0x8];
    float minHue;
    float maxHue;
    struct BezierCurve* sMaxCurve;
    uint8_t _pad_1[0x88];
    struct BezierCurve* sMinCurve;
    uint8_t _pad_2[0x88];
    struct BezierCurve* vMaxCurve;
    uint8_t _pad_3[0x88];
    struct BezierCurve* vMinCurve;
    uint8_t _pad_4[0x88];
};




struct ItemResourceRoomModifierParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    struct ItemResourceModifier* resourceModifiers;
    uint8_t _pad_2[0x10];
};




struct SManufacturerMFDView {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Style* manufacturerStyle;
    uint8_t _pad_1[0x10];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_2[0x10];
};




struct SignatureParams {
    uint8_t _pad_0[0x8];
    float defaultBodyTemperature;
    float distressIdentitySignature;
};




struct CameraSpringAxesConfig {
    uint8_t _pad_0[0x8];
    struct Vec3* spaceUndampedFrequency;
    uint8_t _pad_1[0x10];
    struct Vec3* spaceDampingRatio;
    uint8_t _pad_2[0x10];
    float spaceSmoothingTime;
    uint8_t _pad_3[0x4];
    struct Vec3* atmosUndampedFrequency;
    uint8_t _pad_4[0x10];
    struct Vec3* atmosDampingRatio;
    uint8_t _pad_5[0x10];
    float atmosSmoothingTime;
    uint8_t _pad_6[0x4];
    struct Vec3* minSoftLimits;
    uint8_t _pad_7[0x10];
    struct Vec3* maxSoftLimits;
    uint8_t _pad_8[0x10];
    struct Vec3* minHardLimits;
    uint8_t _pad_9[0x10];
    struct Vec3* maxHardLimits;
    uint8_t _pad_10[0x10];
    float softRotationAngle;
    float hardRotationAngle;
    float rotationMultiplier;
    float softUserTargetOffsetDistance;
    float hardUserTargetOffsetDistance;
    float userTargetOffsetMultiplier;
};




struct SetDoorAutoCloseGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool useAutoCloseDelay;
    uint8_t _pad_1[0x7];
};




struct MiningControllerGlobalParams {
    uint8_t _pad_0[0x8];
    struct RGBA* highlightColor;
    uint8_t _pad_1[0x10];
    struct RGBA* highlightColorAbsorbable;
    uint8_t _pad_2[0x10];
    struct RGBA* highlightColorDistant;
    uint8_t _pad_3[0x10];
    struct RGBA* highlightColorDistantScanned;
    uint8_t _pad_4[0x10];
    float highlightOccludedAlpha;
    float highlightOutlineWidth;
    float highlightDistantMineablesRange;
    uint8_t _pad_5[0x4];
    struct MiningCameraShakeConfig* cameraShakeConfig;
    uint8_t _pad_6[0x58];
    _Bool showChildRockRadarIcon;
    _Bool scalePowerGraphMin;
    uint8_t _pad_7[0x2];
    float noProgressHintTime;
    float noProgressHintPower;
    float fractureDoneFeedbackDuration;
    float maxScanRaycastDistance;
    uint8_t _pad_8[0x4];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeAlignment {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct BaseItemModifierParams {
    uint8_t _pad_0[0x8];
};




struct ControlIntInteractiveVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_2[0x8];
    struct IntInteractiveVariable* variable;
    uint8_t _pad_3[0x8];
    int32_t amountToChange;
    uint8_t _pad_4[0x4];
};




struct SAimRecoilModifier {
    uint8_t _pad_0[0x8];
    struct Vec2* maxMultiplier;
    uint8_t _pad_1[0x8];
    struct Vec2* shotKickFirstMultiplier;
    uint8_t _pad_2[0x8];
    struct Vec2* shotKickMultiplier;
    uint8_t _pad_3[0x8];
    float randomPitchMultiplier;
    float randomYawMultiplier;
    float decayMultiplier;
    float endDecayMultiplier;
    struct SActorProceduralAimRecoilCurveModifiersDef* curveRecoil;
    uint8_t _pad_4[0x70];
};




struct GravityShapeComponentParams {
    uint8_t _pad_0[0x18];
};




struct JumpDriveWakeParams {
    uint8_t _pad_0[0x8];
    float maxPenetration;
    uint8_t _pad_1[0x4];
};




struct MotionTurnSetupFiltered {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    enum ARDataType filterByLocomotionSet;
    uint8_t _pad_2[0x4];
    struct MotionTurnParams* params;
    uint8_t _pad_3[0x20];
};




struct SItemPortConnectionParam {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    enum ARDataType Klass;
    uint8_t _pad_2[0x4];
};




struct ActorStateData_StateValidationParams {
    uint8_t _pad_0[0x8];
    float stateTimeout;
    uint8_t _pad_1[0x4];
};




struct DefaultAction_InteractionDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* interactionName;
    uint8_t _pad_1[0x8];
};




struct LinkedStatRulePassAboveThreshold {
    uint8_t _pad_0[0x8];
    float threshold;
    uint8_t _pad_1[0x4];
};




struct Investigation_Clue_CorpseScanInfo {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* objectiveLongDescription;
    struct CLocIdentifier* objectiveShortDescription;
    struct MissionPropertyValue_AIName* name;
    uint8_t _pad_1[0x40];
    struct CLocIdentifier* causeOfDeath;
};




struct SDummyPlayerComponentParams {
    uint8_t _pad_0[0x18];
    struct Character* character;
    uint8_t _pad_1[0x10];
    _Bool isAIControlled;
    _Bool flyInGroundState;
    uint8_t _pad_2[0x2];
    float aimFOV;
    float maxLookAimAngle;
    float maxDeltaAngleRateNormal;
    int32_t aimIKLayer;
    int32_t lookIKLayer;
    struct CharacterNameData* characterNameData;
    uint8_t _pad_3[0x10];
    struct ActorSkeletonConfig* skeletonConfig;
    uint8_t _pad_4[0x10];
    struct JumpFallLandParams* jumpFallLandParams;
    uint8_t _pad_5[0x10];
    struct LedgeGrabbingParams* ledgeGrabbingParams;
    uint8_t _pad_6[0x10];
    struct JumpFallLandConfig* jumpFallLandConfig;
    uint8_t _pad_7[0x10];
    struct CarryConfig* carryConfig;
    uint8_t _pad_8[0x10];
    struct LadderConfig* ladderConfig;
    uint8_t _pad_9[0x10];
    struct LadderConfig* ladderConfigV2;
    uint8_t _pad_10[0x10];
    struct WeaponProceduralAnimation* proceduralAnimationRecord;
    uint8_t _pad_11[0x10];
    struct ActorMovementModifiers* movementModifiersRecord;
    uint8_t _pad_12[0x10];
    struct ActorMovementSetsConfig* movementSetsRecord;
    uint8_t _pad_13[0x10];
    struct PlayerAnimatedInteractionConfig* playerAnimatedInteractionConfig;
    uint8_t _pad_14[0x10];
    _Bool isMinimal;
    uint8_t _pad_15[0x3];
    enum ARDataType aiDefaultStance;
    enum ARDataType actorType;
    uint8_t _pad_16[0x4];
    struct ActorStanceConfig* stancesDataRecord;
    uint8_t _pad_17[0x10];
    struct ActorStatusComponent* actorStatusRecord;
    uint8_t _pad_18[0x10];
    struct ActorStatusComponent* actorStatusRecordEA;
    uint8_t _pad_19[0x10];
    struct ActorStatusComponent* actorStatusRecordSQ42;
    uint8_t _pad_20[0x10];
    struct TakeDownConfig* takeDownConfig;
    uint8_t _pad_21[0x10];
    struct WeaponMisfireFixConfig* misfireFixConfig;
    uint8_t _pad_22[0x10];
    struct SActorHitReactionsDef* hitReactionsDefRecord;
    uint8_t _pad_23[0x10];
    struct SActorForceReactionsDef* forceReactionsDefRecord;
    uint8_t _pad_24[0x10];
    struct SActorExternalForceResponseCameraShakeDef* shakeRecordFirstPerson;
    uint8_t _pad_25[0x10];
    struct SActorExternalForceResponseCameraShakeDef* shakeRecordThirdPerson;
    uint8_t _pad_26[0x10];
    struct ActorAimLimits* actorAimLimits;
    uint8_t _pad_27[0x10];
    struct ActorLookLimits* actorLookLimits;
    uint8_t _pad_28[0x10];
    struct ActorTurnAngles* turnAngles;
    uint8_t _pad_29[0x10];
    struct HazardAwarenessParams* hazardParams;
    uint8_t _pad_30[0x10];
    struct ActorDuckingParams* duckingParams;
    uint8_t _pad_31[0x10];
    struct ActorGForceComponent* gforceParamsRecord;
    uint8_t _pad_32[0x10];
    struct ActorGForceComponent* gforceParamsRecordMasterModes;
    uint8_t _pad_33[0x10];
    struct ActorGForceHeadBob* gforceHeadBobRecord;
    uint8_t _pad_34[0x10];
    struct ActorGForceCameraEffects* gforceCameraEffectsRecord;
    uint8_t _pad_35[0x10];
    struct AdsCameraParams* adsCameraDefaultParams;
    uint8_t _pad_36[0x8];
    struct ActorAbilityComponent* abilityParamsRecord;
    uint8_t _pad_37[0x10];
    struct AudioBreathDefinition* breathingParamsRecord;
    uint8_t _pad_38[0x10];
    struct ActorStaminaComponent* staminaParamsRecord;
    uint8_t _pad_39[0x10];
    struct ActorEnvironmentComponent* actorEnvironmentRecord;
    uint8_t _pad_40[0x10];
    struct ActorLookAheadVehicle* defaultLookAheadRecord;
    uint8_t _pad_41[0x10];
    struct ActorLocomotionPersonality* locomotionPersonalityRecord;
    uint8_t _pad_42[0x10];
    struct CLocIdentifier* actorSpecies;
    struct WeaponPortsParams* weaponPortsParams;
    uint8_t _pad_43[0x50];
    struct SSharedInteractionParams* swapOutfitInteraction;
    uint8_t _pad_44[0x8];
    struct WingmanOrderList* wingmanOrders;
    uint8_t _pad_45[0x10];
    struct ActorTargetedParams* actorTargetedParams;
    uint8_t _pad_46[0x10];
    struct ActorSlidingParams* actorSlidingParams;
    uint8_t _pad_47[0x10];
    struct ActorZeroGTraversalParams* actorZeroGTraversalParams;
    uint8_t _pad_48[0x10];
    struct FoleyDefinition* baseFoleyDef;
    uint8_t _pad_49[0x10];
    struct FoleyFootstepDefinition* baseFootstepDef;
    uint8_t _pad_50[0x10];
    struct SActorDeathBehaviour* deathBehaviour;
    uint8_t _pad_51[0x8];
};




struct SItemPortDefAttachmentImplementationBone {
    uint8_t _pad_0[0x8];
    struct SItemPortDefHelperNode* Helper;
    uint8_t _pad_1[0x160];
};




struct ShipServicesProviderParams {
    uint8_t _pad_0[0x18];
    _Bool repairAvailable;
    uint8_t _pad_1[0x7];
    struct CryStringT* servicesClass;
    uint8_t _pad_2[0x8];
};




struct SAreaComponentParams {
    uint8_t _pad_0[0x18];
    struct SEntityDensityClassOverwritesBase* densityClassOverwrites;
    uint8_t _pad_1[0x8];
};




struct SPayFinesGameplayTrigger {
    uint8_t _pad_0[0x8];
    _Bool paySelectedInfractionOnly;
    uint8_t _pad_1[0x7];
};




struct BaseCargoFillCapacityValue {
    uint8_t _pad_0[0x8];
};




struct SEASpawnRespawnWaveSchedulerParams {
    uint8_t _pad_0[0x8];
    int32_t forceRespawnTimer;
    uint8_t _pad_1[0x4];
};




struct ControlHintCondition_ActorAbilityAvailable {
    uint8_t _pad_0[0x8];
    enum ARDataType ability;
    uint8_t _pad_1[0x4];
};




struct GeometryInstancer_Serialized {
    uint8_t _pad_0[0x8];
    int32_t Version;
    int32_t Flags;
    struct GlobalResourceCGF* Geometry;
    uint8_t _pad_1[0x10];
    struct GlobalResourceMaterial* Material;
    uint8_t _pad_2[0x10];
    struct Vec3* MinAABB;
    uint8_t _pad_3[0x10];
    struct Vec3* MaxAABB;
    uint8_t _pad_4[0x10];
    int32_t EncodedSize;
    uint8_t _pad_5[0x4];
    struct CryStringT* EncodedBase64;
    uint8_t _pad_6[0x8];
};




struct VehicleEditorValueData {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    enum ARDataType unit;
    uint8_t decimalPlaces;
    uint8_t _pad_1[0x3];
    enum ARDataType compareMode;
    float minActualValue;
    float maxActualValue;
    _Bool interpolateToDisplayValues;
    uint8_t _pad_2[0x3];
    float minDisplayValue;
    float maxDisplayValue;
    _Bool clampValuesToMinMax;
    uint8_t _pad_3[0x7];
};




struct GasCloudLightNoiseParams {
    uint8_t _pad_0[0x8];
    float frequency;
    float octaves;
    float exponent;
    float effect;
};




struct SGasTankFillerStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onGasTankFullState;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onGasTankFillerEmptyState;
    uint8_t _pad_2[0x8];
};




struct ControlHintCondition_VehicleEquippedComponents {
    uint8_t _pad_0[0x8];
    enum ARDataType equippedComponents;
    uint8_t _pad_1[0x6];
};




struct BindingsOperations_StringCombine {
    uint8_t _pad_0[0x50];
    _Bool withSpace;
    uint8_t _pad_1[0x7];
    struct CryStringT* value;
    uint8_t _pad_2[0x8];
    struct BuildingBlocks_BindingsStringBase* inputL;
    uint8_t _pad_3[0x8];
    struct BuildingBlocks_BindingsStringBase* inputR;
    uint8_t _pad_4[0xa8];
};




struct GasCloudVDBDataParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* file;
    uint8_t _pad_1[0x8];
};




struct SPersistentComponentParams {
    uint8_t _pad_0[0x18];
};




struct LocStringUserVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* defaultValue;
};




struct BuildingBlocks_PreviewScreenWorldRoot {
    uint8_t _pad_0[0x10];
    enum ARDataType renderLayer;
    uint8_t _pad_1[0x7];
    _Bool cardsUseStageRadius;
    uint8_t _pad_2[0x7];
};




struct VehicleRoleScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SActorForceReactionEffectRangeDef {
    uint8_t _pad_0[0x8];
    float effectRangeMin;
    float effectRangeMax;
};




struct IMannequinActionDef {
    uint8_t _pad_0[0x8];
};




struct CraftingRecipeCostsRecord {
    uint8_t _pad_0[0x8];
    struct CraftingRecipeCosts_Base_NonRef* costs;
    uint8_t _pad_1[0x8];
};




struct SEntityComponentPhysicsGridParams {
    uint8_t _pad_0[0x18];
    struct SEntityBasePhysicsGridParams* PhysGridType;
    uint8_t _pad_1[0x8];
};




struct ConsumableParams {
    uint8_t _pad_0[0x8];
    float liquidOneShotConsumptionRate;
    float liquidOneShotVisualConsumptionTime;
    float liquidContinuousConsumptionRate;
    uint8_t _pad_1[0x4];
};




struct SCItemDeployableShieldParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* shield;
    uint8_t _pad_1[0x8];
    struct CryStringT* startupVFX;
    uint8_t _pad_2[0x8];
    struct CryStringT* destroyedVFX;
    uint8_t _pad_3[0x8];
    struct CryStringT* openAnim;
    uint8_t _pad_4[0x8];
    struct CryStringT* closedAnim;
    uint8_t _pad_5[0x8];
    struct Vec3* size;
    uint8_t _pad_6[0x10];
};




struct SCarryParams {
    uint8_t _pad_0[0x8];
    float width;
    float height;
    float depth;
    uint8_t _pad_1[0x4];
};




struct SEntitityEffectSystem_SystemBase {
    uint8_t _pad_0[0x8];
};




struct LocationPinMarkerProvider {
    uint8_t _pad_0[0x8];
    struct Marker_Configuration* markerConfig;
    uint8_t _pad_1[0x10];
};




struct DrugEfficacyForConsumableType {
    uint8_t _pad_0[0x8];
    struct ConsumableSubtype* consumableSubtype;
    uint8_t _pad_1[0x10];
    struct DrugEfficacy* drugEfficacyForConsumableType;
    uint8_t _pad_2[0x10];
};




struct BlockingHelperComponentParams {
    uint8_t _pad_0[0x18];
    struct Vec3* offsetL;
    uint8_t _pad_1[0x10];
    struct Ang3* orientationL;
    uint8_t _pad_2[0x10];
    struct Vec3* scaleL;
    uint8_t _pad_3[0x10];
    struct Vec3* offsetR;
    uint8_t _pad_4[0x10];
    struct Ang3* orientationR;
    uint8_t _pad_5[0x10];
    struct Vec3* scaleR;
    uint8_t _pad_6[0x10];
};




struct BuildingBlocks_BindingsNumberCurve {
    uint8_t _pad_0[0x50];
    struct BezierCurve* curve;
    uint8_t _pad_1[0x88];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x8];
};




struct InventoryScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
};




struct SSequencerTurretRecenterTaskParams {
    uint8_t _pad_0[0x20];
};




struct AsteroidStateTemplate {
    uint8_t _pad_0[0x8];
    struct AsteroidStateTemplateInternal* state;
    uint8_t _pad_1[0x8];
};




struct BindingsOperations_AudioEvent {
    uint8_t _pad_0[0x30];
    struct BuildingBlocks_WidgetBase* widget;
    uint8_t _pad_1[0x8];
    enum ARDataType triggerEvent;
    uint8_t _pad_2[0x4];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_3[0x8];
    struct Tag* soundTag;
    uint8_t _pad_4[0x10];
    _Bool triggerOnInitialValue;
    uint8_t _pad_5[0x7];
};




struct SSalvageRepairGlowParams {
    uint8_t _pad_0[0x8];
    float stableGlow;
    float unstableGlow;
    float idleGlow;
    float inactiveGlow;
    struct Tag* glowTag;
    uint8_t _pad_1[0x10];
};




struct UIGraph_PMAContextComponent {
    uint8_t _pad_0[0x8];
};




struct SVehicleHintActivator {
    uint8_t _pad_0[0x8];
    enum ARDataType hint;
    uint8_t _pad_1[0x4];
    _Bool onlyPilot;
    uint8_t _pad_2[0x7];
};




struct CriminalRecordUIProviderParams {
    uint8_t _pad_0[0x18];
    _Bool displayFelonies;
    _Bool displayMisdemeanors;
    uint8_t _pad_1[0x2];
    float warningTime;
    _Bool autoStartRemoveTime;
    uint8_t _pad_2[0x3];
    float removeTimeUpdateSeconds;
};




struct SCollectibleComponentParams {
    uint8_t _pad_0[0x18];
    struct SCollectible* associatedCollectibleRecord;
    uint8_t _pad_1[0x10];
    _Bool hideWhenCollected;
    uint8_t _pad_2[0x7];
};




struct SActorProceduralHandsRecoilCurveDecayModifiersDef {
    uint8_t _pad_0[0x8];
    struct Vec3* decayTimeMultiplierModifier;
    uint8_t _pad_1[0x10];
    struct Vec3* decayMaxValueModifier;
    uint8_t _pad_2[0x10];
    struct Vec3* decayMinScalingFactorModifier;
    uint8_t _pad_3[0x10];
};




struct ChatFilter {
    uint8_t _pad_0[0x8];
    int32_t tagId;
    uint8_t _pad_1[0x4];
    struct CryStringT* localizedString;
    uint8_t _pad_2[0x8];
};




struct WorldDisplayEnvironmentBase {
    uint8_t _pad_0[0x8];
    enum ARDataType alignment;
    uint8_t _pad_1[0x4];
    struct WorldDisplayEnvironmentColor* environmentColor;
    uint8_t _pad_2[0x8];
};




struct ActorStateData_ValidationParams {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct ActorStateData_StateValidationParams* stateValidationParams;
    uint8_t _pad_2[0x8];
    struct ActorStateData_AnimationValidationParams* animationValidationParams;
    uint8_t _pad_3[0x8];
    struct ActorStateData_JumpFallValidationParams* jumpFallValidationParams;
    uint8_t _pad_4[0x8];
    struct ActorStateData_LadderValidationParams* ladderValidationParams;
    uint8_t _pad_5[0x8];
    struct ActorStateData_UsableValidationParams* usableValidationParams;
    uint8_t _pad_6[0x8];
};




struct SRtpcBehaviour {
    uint8_t _pad_0[0x8];
};




struct TransitPeripheralParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_ComponentParameterInputLocalization {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* value;
};




struct TransportResponsiveGatewayControlPanelParams {
    uint8_t _pad_0[0x18];
};




struct SCItemRadarDisplayScreenParams {
    uint8_t _pad_0[0x18];
    float fullScreenLerpSpeed;
    uint8_t _pad_1[0x4];
};




struct SGlobalSalvageRepairBeamParams {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct SSalvageRepairCardParams* cardParams;
    uint8_t _pad_2[0x28];
    struct SSalvageRepairHighlightParams* highlightParams;
    uint8_t _pad_3[0xa8];
    struct SSalvageRepairLocalizationParams* localizationParams;
    uint8_t _pad_4[0x40];
    struct SSalvageRepairMaterialParams* materialParams;
    uint8_t _pad_5[0x20];
    struct SSalvageRepairAudioParams* globalSalvageAudioParams;
    uint8_t _pad_6[0x28];
    float hitsPerSecond;
    float hitDuration;
};




struct MovementRecordingParams {
    uint8_t _pad_0[0x18];
};




struct SActorDeathBehaviour {
    uint8_t _pad_0[0x8];
};




struct SGrip {
    uint8_t _pad_0[0x8];
    struct CryStringT* gripID;
    uint8_t _pad_1[0x8];
    struct CryStringT* optionalHelper;
    uint8_t _pad_2[0x8];
    struct SGripShapeParams* gripShapeParameters;
    uint8_t _pad_3[0x20];
    struct QuatT* offset;
    uint8_t _pad_4[0x58];
};




struct CraftingResearchUnlock_Base {
    uint8_t _pad_0[0x8];
};




struct LicensedItemModifier {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* LicensedItem;
    uint8_t _pad_1[0x10];
    enum ARDataType Type;
    float PercentageModifier;
    _Bool DisableDuplicateBadgeCheck;
    uint8_t _pad_2[0x7];
};




struct STurretHealthModifierDef {
    uint8_t _pad_0[0x8];
    struct BezierCurve* damageMovementModifier;
    uint8_t _pad_1[0x88];
};




struct FoIPConfigurationProviderParams {
    uint8_t _pad_0[0x18];
};




struct ControlHintCondition_ActorMissionOfferReceived {
    uint8_t _pad_0[0x8];
    enum ARDataType state;
    uint8_t _pad_1[0x7];
};




struct BuildingBlocks_TriggerModifyString {
    uint8_t _pad_0[0x8];
    struct CryStringT* variableName;
    uint8_t _pad_1[0x8];
    struct CryStringT* value;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_StaticArrayDataNumberRangeRandom {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    int32_t numElements;
    float rangeStart;
    float rangeEnd;
    int32_t randomSeed;
    float randomVariance;
    float falloff;
    _Bool allowOverlap;
    _Bool allowOutsideRange;
    uint8_t _pad_2[0x6];
};




struct Looping_Quad {
    uint8_t _pad_0[0x8];
    struct Vec3* Start;
    uint8_t _pad_1[0x10];
    struct Vec2* Repeats;
    uint8_t _pad_2[0x8];
    struct Vec2* Size;
    uint8_t _pad_3[0x8];
    struct Vec3* Rotation;
    uint8_t _pad_4[0x10];
    struct Vec2* UV_Start;
    uint8_t _pad_5[0x8];
    struct Vec2* UV_Size;
    uint8_t _pad_6[0x8];
};




struct InteractionConditionPlayerVehicleNotDestroyed {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct LightProjectorParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* texture;
    uint8_t _pad_1[0x8];
    float FOV;
    _Bool focusedBeam;
    uint8_t _pad_2[0x3];
};




struct SActorProceduralHandsRecoilModifiers {
    uint8_t _pad_0[0x8];
    float decay;
    float endDecay;
    float fireRecoilTime;
    float fireRecoilStrengthFirst;
    float fireRecoilStrength;
    float angleRecoilStrength;
    _Bool useRandomRotation;
    uint8_t _pad_1[0x7];
    struct Ang3* rotation;
    uint8_t _pad_2[0x10];
    float randomness;
    float randomnessBackPush;
    float frontalOscillationRotation;
    float frontalOscillationStrength;
    float frontalOscillationDecay;
    float frontalOscillationRandomness;
    _Bool resetCurveRecoilWhenApplying;
    uint8_t _pad_3[0x7];
    struct SActorProceduralHandsRecoilCurveModifiersDef* curveRecoil;
    uint8_t _pad_4[0x170];
};




struct ContractPrerequisiteBase {
    uint8_t _pad_0[0x8];
};




struct ProceduralLayoutNode_AlternateSubGraphProperties {
    uint8_t _pad_0[0x8];
    struct ProceduralLayoutGraph* SubGraphReference;
    uint8_t _pad_1[0x10];
    int32_t Seed;
    uint8_t _pad_2[0x4];
};




struct ActorStatusBuff {
    uint8_t _pad_0[0x8];
    enum ARDataType statusEffectType;
    uint8_t _pad_1[0x4];
    struct StatusBuffTypeBase* buffApplication;
    uint8_t _pad_2[0x8];
    float buffValue;
    float buffDuration;
    float buffDurationCap;
    uint8_t _pad_3[0x4];
};




struct DefaultActionsEntityEntryCondition_NOT {
    uint8_t _pad_0[0x8];
    struct DefaultActionsEntityEntryCondition* condition;
    uint8_t _pad_1[0x8];
};




struct Deg3 {
    uint8_t _pad_0[0x14];
    float x;
    float y;
    float z;
};




struct ContractAutoFinishSettings {
    uint8_t _pad_0[0x8];
    struct MissionDeadline* contractDeadline;
    uint8_t _pad_1[0x18];
    _Bool failIfSentToPrison;
    _Bool failIfBecameCriminal;
    _Bool failIfLeavePrison;
    uint8_t _pad_2[0x5];
};




struct TargetSelectorCycleTargetStates {
    uint8_t _pad_0[0x8];
    struct SInteractionState* cycleForward;
    uint8_t _pad_1[0x8];
    struct SInteractionState* cycleBackward;
    uint8_t _pad_2[0x8];
};




struct StatusEffectSetupPreset {
    uint8_t _pad_0[0x8];
    struct ActorStatusPreset* preset;
    uint8_t _pad_1[0x8];
};




struct AreaBaseComponentParams {
    uint8_t _pad_0[0x28];
};




struct ShopFranchise {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* localizedName;
};




struct SMissionEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct SCItemClothingHiddenPartsParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* PortName;
    uint8_t _pad_1[0x8];
};




struct InteractableHelmetParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* openInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* closeInteraction;
    uint8_t _pad_2[0x8];
};




struct UICanvasDecalDescriptorEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_1[0x10];
};




struct TransportDestinationParams {
    uint8_t _pad_0[0x18];
    struct TagsDNFTerm* tagFilter;
    uint8_t _pad_1[0x60];
};




struct BuildingBlocks_BindingsColorFromNumberInterpolate {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_ColorBase* defaultColorA;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_ColorBase* defaultColorB;
    uint8_t _pad_2[0x8];
    float amount;
    uint8_t _pad_3[0x4];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_4[0x8];
    struct BuildingBlocks_BindingsColorBase* inputColorA;
    uint8_t _pad_5[0x8];
    struct BuildingBlocks_BindingsColorBase* inputColorB;
    uint8_t _pad_6[0x8];
    _Bool hsvMode;
    _Bool threeChannels;
    uint8_t _pad_7[0xf6];
};




struct RecordRefUserVariableTypeCanvasRecord {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Canvas* value;
    uint8_t _pad_1[0x10];
};




struct SecurityManualInput {
    uint8_t _pad_0[0x8];
};




struct GreenZoneComponentParams {
    uint8_t _pad_0[0x18];
    int32_t priority;
    _Bool noFPSWeapons;
    uint8_t _pad_1[0x3];
    struct GreenZoneFlagAdditionalSettingsDef* noFPSWeaponsSettings;
    uint8_t _pad_2[0x8];
    _Bool noShipWeapons;
    uint8_t _pad_3[0x7];
    struct GreenZoneFlagAdditionalSettingsDef* noShipWeaponsSettings;
    uint8_t _pad_4[0x8];
    _Bool noMelee;
    uint8_t _pad_5[0x7];
    struct GreenZoneFlagAdditionalSettingsDef* noMeleeSettings;
    uint8_t _pad_6[0x8];
    _Bool noTakedown;
    uint8_t _pad_7[0x7];
    struct GreenZoneFlagAdditionalSettingsDef* noTakedownSettings;
    uint8_t _pad_8[0x8];
    _Bool walkOnly;
    uint8_t _pad_9[0x7];
    struct GreenZoneFlagAdditionalSettingsDef* walkOnlySettings;
    uint8_t _pad_10[0x8];
    _Bool softLockFPSWeapons;
    uint8_t _pad_11[0x7];
    struct GreenZoneFlagAdditionalSettingsDef* softLockFPSWeaponsSettings;
    uint8_t _pad_12[0x8];
    _Bool noShipSelfDestruct;
    uint8_t _pad_13[0x7];
    struct GreenZoneFlagAdditionalSettingsDef* noShipSelfDestructSettings;
    uint8_t _pad_14[0x8];
    _Bool unlawfulZone;
    uint8_t _pad_15[0x7];
    struct GreenZoneFlagAdditionalSettingsDef* unlawfulZoneSettings;
    uint8_t _pad_16[0x8];
    _Bool noTractorBeam;
    uint8_t _pad_17[0x7];
    struct GreenZoneFlagAdditionalSettingsDef* noTractorBeamSettings;
    uint8_t _pad_18[0x8];
    struct GreenZoneFlagsDef* flagsToInherit;
    uint8_t _pad_19[0x10];
    _Bool enabledByDefault;
    uint8_t _pad_20[0x3];
    float radius;
    struct SInteractionState* stateToEnable;
    uint8_t _pad_21[0x8];
    struct SInteractionState* stateToDisable;
    uint8_t _pad_22[0x8];
};




struct ProceduralAimRigComponent {
    uint8_t _pad_0[0x18];
    struct ProceduralAimRigRecord* record;
    uint8_t _pad_1[0x10];
};




struct GPUParticleAudioStruct {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* emissionStartTriggerOneShot;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* emissionStopTriggerOneShot;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* emissionStartTriggerLoop;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* emissionStopTriggerLoop;
    uint8_t _pad_4[0x18];
    struct AudioRtpc* pulseDurationRtpc;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* normPulseTimeRtpc;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* strengthValRtpc;
    uint8_t _pad_7[0x18];
    struct AudioRtpc* scalingFactorRtpc;
    uint8_t _pad_8[0x18];
};




struct SWeightedRewardEntry {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* rewardEntityRecord;
    uint8_t _pad_1[0x10];
    float weight;
    uint8_t _pad_2[0x4];
};




struct CraftingBlueprintRecord {
    uint8_t _pad_0[0x8];
    struct CraftingBlueprint_Base_NonRef* blueprint;
    uint8_t _pad_1[0x8];
};




struct HologramParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* ValidMaterial;
    uint8_t _pad_1[0x8];
    struct CryStringT* InvalidMaterial;
    uint8_t _pad_2[0x8];
};




struct SExplosiveEntryTrackerParams {
    uint8_t _pad_0[0x8];
};




struct SAttachableStateModifier {
    uint8_t _pad_0[0x8];
    struct CryStringT* portTag;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onSetItemPortState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* onClearItemPortState;
    uint8_t _pad_3[0x8];
};




struct Investigation_Suspect {
    uint8_t _pad_0[0x8];
    struct MissionPropertyValue_AIName* name;
    uint8_t _pad_1[0x40];
    _Bool initialSuspect;
    _Bool isGuilty;
    uint8_t _pad_2[0x6];
};




struct IntInteractiveVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    int32_t defaultValue;
    int32_t minValue;
    int32_t maxValue;
    enum ARDataType loopType;
    struct InteractiveVariable_BackToDefaultIntParams* backToDefaultParams;
    uint8_t _pad_2[0x8];
};




struct SEntityandAttachmentsHighlightNode {
    uint8_t _pad_0[0x8];
};




struct DevOwnerType_Base {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
};




struct EntityEffectSystem_BaseSequencerTask {
    uint8_t _pad_0[0x20];
};




struct MarkerTrackingCommonMapParameters {
    uint8_t _pad_0[0x8];
    float minimumDistanceMultiplierCosmeticScaling;
    float maximumDistanceMultiplierCosmeticScaling;
    float cosmeticScalingSmoothingDistanceMultiplier;
    float framingRatioOfScreenSize;
    float focusZoomDistanceMultiplier;
    float childlessMarkerRadiusMultiplier;
    float lightScaleModifier;
    float zoomIncrement;
    float cameraBlendTimeInSeconds;
    uint8_t _pad_1[0x4];
    struct MarkerTrackingLabelParameters* labelParams;
    uint8_t _pad_2[0x28];
};




struct ControlHintCondition_ActorStatusEffectAcive {
    uint8_t _pad_0[0x8];
    enum ARDataType statusEffect;
    uint8_t _pad_1[0x4];
};




struct SWeaponActionFireTractorBeamRotationParams {
    uint8_t _pad_0[0x8];
    float degreesPerAction;
    float maxAngularAcceleration;
    float maxAngularVelocity;
    float degreesPerActionScrollWheel;
    float forceFractionRotation;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_BindingsNumberFromInteger {
    uint8_t _pad_0[0x50];
    _Bool asSeconds;
    uint8_t _pad_1[0x7];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeScrollPolicy {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct SServiceBeaconDifficultyEntry {
    uint8_t _pad_0[0x8];
    int32_t difficulty;
    uint8_t _pad_1[0x4];
    struct MissionBrokerEntry* missionEntry;
    uint8_t _pad_2[0x10];
    struct SServiceBeaconNotificationOverride* beaconDetectedNotificationOverride;
    uint8_t _pad_3[0x8];
};




struct EntityLinkTargetingParams {
    uint8_t _pad_0[0x8];
    _Bool useAsSurfaceTargetEllipsoid;
    uint8_t _pad_1[0x7];
    struct Vec3* surfaceTargetEllipsoidScale;
    uint8_t _pad_2[0x10];
    _Bool defaultToArea;
    uint8_t _pad_3[0x7];
};




struct TransitManagerParams {
    uint8_t _pad_0[0x18];
    struct EntityClassDefinition* carriageType;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* carriageDisplayTypeId;
    struct GlobalResourceObjectContainer* carriageInterior;
    uint8_t _pad_2[0x10];
    struct TagsDNFTerm* tagFilter;
    uint8_t _pad_3[0x60];
    float carriageWaitTime;
    float carriageDoorTimeout;
    float carriageAcceleration;
    float idealTimeBetweenArrivals;
    float pauseDistance;
    _Bool forceStreamableTransit;
    _Bool forceCarriageAttachToParent;
    _Bool onByDefault;
    _Bool enabledForAI;
    _Bool sortDestinationsByName;
    _Bool sortDestinationsByPriority;
    _Bool reverseDisplayIndexOrder;
    _Bool ignoreDoorProximity;
    _Bool carriageDoorOpenByDefault;
    uint8_t _pad_4[0x3];
    float doorFindDistance;
    _Bool automateTransit;
    _Bool updateDestinationsForDistantTrains;
    _Bool persistDestinationEnabledState;
    _Bool allowOneDestination;
    struct CryStringT* turnOnInteractionName;
    uint8_t _pad_5[0x8];
    struct CryStringT* turnOffInteractionName;
    uint8_t _pad_6[0x8];
    int8_t displayIndexOffset;
    uint8_t _pad_7[0x7];
    struct SCItemManufacturer* manufacturer;
    uint8_t _pad_8[0x10];
};




struct AIFormulaScoreModifiers {
    uint8_t _pad_0[0x8];
    float exponent;
    float weight;
};




struct ItemResourceDynamicResourceFuelTank {
    uint8_t _pad_0[0x8];
};




struct SUnifiedShakeParamsRecord {
    uint8_t _pad_0[0x8];
    struct SUnifiedShakeParamsDef* shakeParams;
    uint8_t _pad_1[0x58];
};




struct LinkedStatSetupPreset {
    uint8_t _pad_0[0x8];
    struct LinkedStatSetup* setup;
    uint8_t _pad_1[0x20];
};




struct SCItemAttachableObjectContainerParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceObjectContainer* objectContainer;
    uint8_t _pad_1[0x10];
};




struct SShopComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* offlineInventoryJSON;
    uint8_t _pad_1[0x8];
    float eventSignalRadius;
    uint8_t _pad_2[0x4];
    struct SpecialEventManufacturer* specialEventManufacturer;
    uint8_t _pad_3[0x10];
    struct ShopFranchise* franchise;
    uint8_t _pad_4[0x10];
    enum ARDataType acceptedCurrency;
    enum ARDataType shopInventoryType;
    _Bool allowTransactionsForPlayerInventory;
    _Bool allowTransactionsForLocationInventory;
    _Bool allowTransactionsForVehicleInventory;
    uint8_t _pad_5[0x3];
};




struct UIInteriorMapSectionParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* name;
    struct Vec3* size;
    uint8_t _pad_1[0x10];
    _Bool restrictViewBounds;
    uint8_t _pad_2[0x7];
};




struct SSubstractHealthRatio {
    uint8_t _pad_0[0x8];
    float healthRatio;
    uint8_t _pad_1[0x4];
};




struct ProximityAssistModifierParams {
    uint8_t _pad_0[0x18];
    float strengthModifier;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_BindingsBooleanInvert {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsBooleanBase* input;
    uint8_t _pad_1[0x8];
};




struct SCDynamicRigLightParams {
    uint8_t _pad_0[0x8];
    float lightRadius;
    float bulbRadius;
    float FOV;
    enum ARDataType importance;
    _Bool shadowCast;
    uint8_t _pad_1[0x3];
    float maxVisDistance;
    float distanceFadeRange;
    float maxShadowCastDistance;
    struct Vec3* focusOffset;
    uint8_t _pad_2[0x10];
    struct SCDynamicRigIntensityParams* intensity;
    uint8_t _pad_3[0x18];
};




struct SActorForceReactionLeanFilterItemDef {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float minImpulse;
    float maxImpulse;
    uint8_t _pad_2[0x4];
    enum ARDataType defaultLeanPose;
    uint8_t _pad_3[0x4];
};




struct SCItemLightGroupControllerParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_StringIntegerPair {
    uint8_t _pad_0[0x8];
    struct CryStringT* first;
    uint8_t _pad_1[0x8];
    int64_t second;
};




struct NavigationLinkType {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkValidForAgentType;
    uint8_t _pad_1[0x8];
    struct NavigationLinkCostCustomization* costMultiplierSetup;
    uint8_t _pad_2[0x30];
    enum ARDataType linkingType;
    uint8_t _pad_3[0x4];
    struct UsableUseChannelInstance* useChannel;
    uint8_t _pad_4[0x8];
};




struct AudioSplineParams {
    uint8_t _pad_0[0x18];
    _Bool activatedRoute;
    uint8_t _pad_1[0x3];
    float traversalDuration;
    struct AudioRtpc* audioRTPCDistanceTravelled;
    uint8_t _pad_2[0x18];
    struct Tag* activationTag;
    uint8_t _pad_3[0x10];
};




struct CraftingRecipeCosts_Ref {
    uint8_t _pad_0[0x8];
    struct CraftingRecipeCosts_Base_NonRef* costsReference;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_FixedOrRelativeValue {
    uint8_t _pad_0[0x8];
    float value;
    enum ARDataType behavior;
};




struct LightStateParams_Emergency {
    uint8_t _pad_0[0x8];
    struct RGB* color;
    uint8_t _pad_1[0x10];
    float intensity;
    uint8_t _pad_2[0x4];
    struct CryStringT* presetTag;
    uint8_t _pad_3[0x8];
    int32_t lightStyle;
    float temperature;
};




struct IneractionConditionUserNotInUsable {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct TriggerSubConditionS42StatsDef {
    uint8_t _pad_0[0x8];
    enum ARDataType statType;
    enum ARDataType playerState;
    struct CryStringT* comparisonType;
    uint8_t _pad_1[0x8];
    float statValue;
    _Bool useRelativeOffset;
    _Bool useCooldown;
    uint8_t _pad_2[0x2];
    float cooldownTime;
    uint8_t _pad_3[0x4];
    struct CryStringT* uniqueEntityClassGUID;
    uint8_t _pad_4[0x8];
    struct Tag* tag;
    uint8_t _pad_5[0x10];
};




struct SSpawningBase {
    uint8_t _pad_0[0x18];
    _Bool team1AlwaysUsesInitialSpawns;
    _Bool team2AlwaysUsesInitialSpawns;
    _Bool groupSpawners;
    uint8_t _pad_1[0x5];
};




struct GlobalGasCloudVDBParams {
    uint8_t _pad_0[0x8];
    struct GlobalGasCloudVDB_GameplayParams* gameplay;
    uint8_t _pad_1[0xa0];
};




struct AtmosphericCompositionTemplate {
    uint8_t _pad_0[0x8];
    struct SAtmosphericCompositionParams* composition;
    uint8_t _pad_1[0x30];
};




struct LandingSelection {
    uint8_t _pad_0[0x8];
    struct CryStringT* animEventName;
    uint8_t _pad_1[0x8];
    struct ActorLandingNode* landing;
    uint8_t _pad_2[0x8];
};




struct ScanCustomDataDef {
    uint8_t _pad_0[0x8];
    struct ScanCustomDataInfo* info;
    uint8_t _pad_1[0x30];
};




struct UI3DDisplayInput {
    uint8_t _pad_0[0x8];
    float sensitivity;
    float deceleration;
    _Bool hasInertia;
    uint8_t _pad_1[0x3];
    float speedCap;
};




struct SGeometryModelTagBase {
    uint8_t _pad_0[0x8];
};




struct CommunicationVariableString {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool global;
    uint8_t _pad_2[0x7];
    struct CryStringT* value;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocks_IntegerWidgetPairDef {
    uint8_t _pad_0[0x8];
    int64_t first;
    struct BuildingBlocks_WidgetBase* second;
    uint8_t _pad_1[0x8];
};




struct SCLinearMovementParams {
    uint8_t _pad_0[0x8];
    struct Vec3* MaxLinearAccelerationPositive;
    uint8_t _pad_1[0x10];
    struct Vec3* MaxLinearAccelerationNegative;
    uint8_t _pad_2[0x10];
    struct Vec3* MaxLinearDecelerationPositive;
    uint8_t _pad_3[0x10];
    struct Vec3* MaxLinearDecelerationNegative;
    uint8_t _pad_4[0x10];
    float LinearAccelerationDecay;
    uint8_t _pad_5[0x4];
};




struct ToxiInputModifierAxis {
    uint8_t _pad_0[0x8];
    float strength;
    uint8_t _pad_1[0x4];
    struct Vec3* triggerAxes;
    uint8_t _pad_2[0x10];
};




struct ScanDisplaySignatureSetupParams {
    uint8_t _pad_0[0x8];
    enum ARDataType scanTable;
    uint8_t _pad_1[0x7];
    struct ScanDisplayVariableParams* headerVariable;
    uint8_t _pad_2[0x8];
};




struct CraftingResearch_Base {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_Range {
    uint8_t _pad_0[0x8];
    float min;
    float max;
};




struct WorldDisplayRadar_Line {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x3];
    float width;
    struct SimpleSpriteSlot* spriteSlot;
    uint8_t _pad_2[0x20];
};




struct SNavPointObjectMetadataParams {
    uint8_t _pad_0[0x8];
    struct StarMapObject* starmapRecord;
    uint8_t _pad_1[0x10];
    struct CryStringT* locationActionArea;
    uint8_t _pad_2[0x8];
    _Bool permanent;
    _Bool showInAllZones;
    _Bool allowHierarchyDuplicates;
    _Bool saveToLocalPlayerObjectDataBank;
    _Bool moveable;
    uint8_t _pad_3[0x3];
};




struct ShockDiamondParams {
    uint8_t _pad_0[0x8];
    float alphaMultiplier;
    float splineOffset;
    struct Range* splineLengthRange;
    uint8_t _pad_1[0x8];
    float afterburnAlphaMultiplier;
    float afterburnSplineOffset;
    struct Range* afterburnSplineLengthRange;
    uint8_t _pad_2[0x8];
};




struct QuantumMusicEventBase {
    uint8_t _pad_0[0x8];
    struct MusicLogicEvent* musicLogicEvent;
    uint8_t _pad_1[0x10];
    struct GlobalResourceAudio* musicWwiseEvent;
    uint8_t _pad_2[0x18];
};




struct InnerThought_CycleAnimRotateY {
    uint8_t _pad_0[0x10];
    float length;
    float amount;
    float stagger;
    uint8_t _pad_1[0x4];
};




struct WeatherEffects_Atmosphere {
    uint8_t _pad_0[0x8];
};




struct TemperatureDamageControl {
    uint8_t _pad_0[0x8];
};




struct JumpDriveVelocityStrengthParams {
    uint8_t _pad_0[0x8];
    float maxStrengthAngle;
    float minStrengthAngle;
};




struct Hauling_ObjectiveSettings {
    uint8_t _pad_0[0x8];
    struct ObjectiveDisplayInfo* collectObjective;
    uint8_t _pad_1[0x20];
    struct ObjectiveDisplayInfo* resourceDeliverObjective;
    uint8_t _pad_2[0x20];
    struct ObjectiveDisplayInfo* collectAndDeliverObjective;
    uint8_t _pad_3[0x20];
    struct ObjectiveDisplayInfo* itemDeliverObjective;
    uint8_t _pad_4[0x20];
    struct CryStringT* itemExtendedTextToken;
    uint8_t _pad_5[0x8];
    struct CryStringT* pickupLocationExtendedTextToken;
    uint8_t _pad_6[0x8];
    struct CryStringT* amountExtendedTextToken;
    uint8_t _pad_7[0x8];
    struct CryStringT* totalExtendedTextToken;
    uint8_t _pad_8[0x8];
    struct CryStringT* dropOffLocationExtendedTextToken;
    uint8_t _pad_9[0x8];
    struct MobiglasDisplayLayoutBase* mobiglasDisplayLayout;
    uint8_t _pad_10[0x8];
};




struct AnimationVariableLink {
    uint8_t _pad_0[0x8];
    _Bool invertValue;
    uint8_t _pad_1[0x7];
    struct AnimationScalarVariable* variable;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_SlicerBase {
    uint8_t _pad_0[0x8];
};




struct SWeaponActionFireTractorBeamMovementParams {
    uint8_t _pad_0[0x8];
    float minAcceleration;
    float maxAcceleration;
    float accelerationFactor;
    float minSpeed;
    float maxSpeed;
    float enterPushPullThreshold;
    float exitPushPullThreshold;
    int32_t rotationSingleAxisDeadzone;
};




struct SCDefaultZeroGTraversalParams {
    uint8_t _pad_0[0x8];
    struct SCZeroGLaunchParams* zeroGLaunchParams;
    uint8_t _pad_1[0x18];
};




struct STargetByRaycast {
    uint8_t _pad_0[0x8];
    float rayLength;
    uint8_t _pad_1[0x4];
};




struct ContactTaggingSharedParams {
    uint8_t _pad_0[0x8];
    float viewAngle;
    float maxTaggingDistance;
};




struct SSCSignatureEmitterParams {
    uint8_t _pad_0[0x8];
    float activeSignature;
    float fullDecayTime;
};




struct SCItemDisplayScreenStateLightParams {
    uint8_t _pad_0[0x8];
    struct SRGBA8* color;
    uint8_t _pad_1[0x8];
    float intensity;
    _Bool lightOn;
    uint8_t _pad_2[0x3];
    int32_t lightStyle;
    float animationSpeed;
};




struct WeaponProceduralClipSway {
    uint8_t _pad_0[0x8];
    float blendTime;
    uint8_t _pad_1[0x4];
    float easeFactorInc;
    float easeFactorDec;
    float strafeScopeFactor;
    float rotateScopeFactor;
    float velocityInterpolationMultiplier;
    float velocityLowPassFilter;
    float accelerationSmoothing;
    float accelerationFrontAugmentation;
    float verticalVelocityScale;
    float sprintCameraAnimation;
    _Bool lockStrafeRot;
    uint8_t _pad_2[0x7];
    struct Vec2* lookOffset;
    uint8_t _pad_3[0x8];
    struct Vec3* horizLookRot;
    uint8_t _pad_4[0x10];
    struct Vec3* vertLookRot;
    uint8_t _pad_5[0x10];
    struct Vec3* strafeOffset;
    uint8_t _pad_6[0x10];
    struct Vec3* sideStrafeRot;
    uint8_t _pad_7[0x10];
    struct Vec3* frontStrafeRot;
    uint8_t _pad_8[0x10];
    struct SWeaponProceduralClipSwayOvershoot* overshootParams;
    uint8_t _pad_9[0x58];
};




struct ReputationValueSetting {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float value;
    uint8_t _pad_2[0x4];
};




struct INavigationCostVolumeExtender {
    uint8_t _pad_0[0x8];
};




struct GravityAreaParams {
    uint8_t _pad_0[0x18];
    _Bool active;
    _Bool uniform;
    uint8_t _pad_1[0x2];
    float fallOffInner;
    float gravityMagnitude;
    uint8_t _pad_2[0x4];
    struct Vec3* gravityDirection;
    uint8_t _pad_3[0x10];
    _Bool roomBased;
    uint8_t _pad_4[0x7];
};




struct EntityComponentRttAspectMFDScanningParams {
    uint8_t _pad_0[0x18];
    enum ARDataType targetRttSlot;
    float aspectRatio;
};




struct LinkedStatPassCustomValue {
    uint8_t _pad_0[0x8];
    float customValue;
    uint8_t _pad_1[0x4];
};




struct SCarryAnimationParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* motionBase;
    uint8_t _pad_1[0x8];
    struct CryStringT* handTag;
    uint8_t _pad_2[0x8];
};




struct Marker_AbilityProximityVisibility {
    uint8_t _pad_0[0x8];
    float visibilityDistance;
    uint8_t _pad_1[0x4];
};




struct TransportGatewayParams {
    uint8_t _pad_0[0x18];
    struct TagsDNFTerm* tagFilter;
    uint8_t _pad_1[0x60];
};




struct LegacyMobiGlasParams {
    uint8_t _pad_0[0x18];
    float baseXOffset;
    float baseXOffsetMultiplier;
    float baseYOffset;
    float baseYOffsetMultiplier;
    float baseXAngleMultiplier;
    float baseYAngleMultiplier;
};




struct QuatTS {
    uint8_t _pad_0[0x28];
    struct Ang3* Rotation;
    uint8_t _pad_1[0x10];
    struct Vec3* Position;
    uint8_t _pad_2[0x10];
    float Scale;
    uint8_t _pad_3[0x4];
};




struct SEntityInsuranceDisplayParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct CLocIdentifier* role;
    int32_t crewSize;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* career;
    struct SCItemManufacturer* manufacturer;
    uint8_t _pad_2[0x10];
};




struct SReputationStateModifierSetToState {
    uint8_t _pad_0[0x8];
    struct SReputationStateParams* modifierState;
    uint8_t _pad_1[0x10];
};




struct BuildingBlocks_StackContainer {
    uint8_t _pad_0[0x8];
    enum ARDataType direction;
    float spacing;
};




struct SWeaponActionFireTractorBeamGrappleParams {
    uint8_t _pad_0[0x8];
    float positiveAccelerationLimit;
    float negativeAccelerationLimit;
    float maxSpeed;
    float coastSpeed;
    float lookOrientationInfluenceFactor;
    uint8_t _pad_1[0x4];
};




struct SCriminalRecordHackingStateModifier {
    uint8_t _pad_0[0x8];
    int32_t maxUnchallengedRemovals;
    float detectionChance;
    struct SInteractionState* onCrimeHackingDetectedState;
    uint8_t _pad_1[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_2[0x8];
    struct CryStringT* detectionChanceMultiplierName;
    uint8_t _pad_3[0x8];
};




struct HarvestableOverrideAreaParams {
    uint8_t _pad_0[0x18];
    enum ARDataType type_;
    float radius;
};




struct HarvestableTagListString {
    uint8_t _pad_0[0x8];
    struct CryStringT* tags;
    uint8_t _pad_1[0x8];
};




struct BuildingBlocks_ComponentParameterInputInteger {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
    int64_t value;
};




struct SEntityEffectSystem_BlinkingModifier {
    uint8_t _pad_0[0x8];
    float startDelay;
    float minimumValue;
    float minimumDuration;
    float maximumValue;
    float maximumDuration;
    uint8_t _pad_1[0x4];
};




struct InnerThought_ColorParams {
    uint8_t _pad_0[0x8];
    struct RGB* diffuseColor;
    uint8_t _pad_1[0x10];
    struct RGB* emissiveColor;
    uint8_t _pad_2[0x10];
    struct RGB* rimColor;
    uint8_t _pad_3[0x10];
    struct RGB* silhouetteColor;
    uint8_t _pad_4[0x10];
    float opacity;
    float glow;
    float diffuseOpacity;
    float rimOpacity;
    float silhouetteOpacity;
    float silhouetteThickness;
};




struct PersonalTransportParams {
    uint8_t _pad_0[0x18];
    enum ARDataType serviceBeaconType;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* serviceBeaconName;
    int32_t beaconTaxPercentage;
    int32_t beaconMaxPaymentAmount;
    struct MissionPropertyValue_AIName* npcRequesterNameDef;
    uint8_t _pad_2[0x40];
    struct SServiceBeaconCreatorParams* playerCreatorParams;
    uint8_t _pad_3[0x8];
    struct SServiceBeaconCreatorParamsBase* npcCreatorParams;
    uint8_t _pad_4[0x8];
    struct CLocIdentifier* pickUpObjectiveTitle;
    struct CLocIdentifier* pickUpObjectiveDescription;
    struct CLocIdentifier* deliveryObjectiveTitle;
    struct CLocIdentifier* deliveryObjectiveDescription;
};




struct PlayerHostilityAccidentalFireParams {
    uint8_t _pad_0[0x8];
    float damagePercentageThreshold;
    float cooldownDamageHalflife;
    int32_t sustainedFireThreshold;
    float cooldownSustainedFireHalflife;
};




struct HarvestConditionHealth {
    uint8_t _pad_0[0x8];
    float healthRatio;
    uint8_t _pad_1[0x4];
};




struct AerodynamicCurveParams {
    uint8_t _pad_0[0x8];
    float multiplier;
    _Bool flatPlateSurface;
    uint8_t _pad_1[0x3];
    float liftLevelFlight;
    float peakLift;
    float minLift;
    float negativeAoAMultiplier;
    float flatPlateMultiplier;
    float criticalAngle;
    float fullyStalledAngle;
    uint8_t _pad_2[0x4];
};




struct ItemResourceDynamicAmountFuelNozzleFuel {
    uint8_t _pad_0[0x8];
};




struct ControlHintCondition_VehicleDocking {
    uint8_t _pad_0[0x8];
    enum ARDataType docking;
    uint8_t _pad_1[0x7];
};




struct MissionLocationValidation_EntityTags {
    uint8_t _pad_0[0x8];
    struct Tag* generalTag;
    uint8_t _pad_1[0x10];
    struct TagList* requiredEntityTags;
    uint8_t _pad_2[0x30];
};




struct HackingChipParams {
    uint8_t _pad_0[0x18];
    int32_t maxCharges;
    uint8_t _pad_1[0x4];
};




struct SCItemDisplayScreenUISourceParams {
    uint8_t _pad_0[0x8];
    enum ARDataType UIModel;
    uint8_t _pad_1[0x4];
    struct EntityReferenceDef* sourceProvider;
    uint8_t _pad_2[0x10];
    enum ARDataType overrideState;
    uint8_t _pad_3[0x4];
    struct BezierCurve* switchStateSpline;
    uint8_t _pad_4[0x88];
    struct SCItemDisplayScreenPreset* screenPreset;
    uint8_t _pad_5[0x10];
};




struct SEntityTraversingNodeTypeParentEntity {
    uint8_t _pad_0[0x8];
};




struct SOrdnanceAudioParams {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* trailAudioTrigger;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* trailStopAudioTrigger;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* engineIgniteAudioTrigger;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* releaseAudioTrigger;
    uint8_t _pad_4[0x18];
};




struct BuildingBlocks_BindingsLocalizedSIUnitFromNumber {
    uint8_t _pad_0[0x50];
    uint8_t nPlaces;
    uint8_t _pad_1[0x7];
    struct BuildingBlocks_BindingsIntegerBase* nPlacesBinding;
    uint8_t _pad_2[0x8];
    _Bool withSeparators;
    uint8_t _pad_3[0x3];
    enum ARDataType unitSuffix;
    struct BuildingBlocks_BindingsIntegerBase* unitSuffixBinding;
    uint8_t _pad_4[0x8];
    enum ARDataType forcedSIPrefix;
    uint8_t _pad_5[0x4];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_6[0xf8];
};




struct BuildingBlocks_TargetSlicer {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_WidgetBase* target;
    uint8_t _pad_1[0x8];
    enum ARDataType coordinateMethod;
    uint8_t _pad_2[0x4];
};




struct EntryOptionalData_Base {
    uint8_t _pad_0[0x8];
};




struct CraftingRecipeResults_Ref {
    uint8_t _pad_0[0x8];
    struct CraftingRecipeCosts_Base_NonRef* resultsReference;
    uint8_t _pad_1[0x8];
};




struct SEAAnnouncerParamsDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* audioSignalName;
    uint8_t _pad_1[0x8];
    struct CryStringT* globalAnnouncementVO;
    uint8_t _pad_2[0x8];
    struct CryStringT* teamAnnouncementVO;
    uint8_t _pad_3[0x8];
};




struct SSCShipStatusAppParams {
    uint8_t _pad_0[0x8];
    struct mobiGlasApp* linkedStarMap;
    uint8_t _pad_1[0x10];
    float shipHoloRotationSpeed;
    float shipHoloRotationSmoothTime;
    float lowAmmoThreshold;
    float lowOrdnanceThreshold;
    float lowHydrogenFuelThreshold;
    float lowQuantumFuelThreshold;
    float shipRecallRetryTime;
    _Bool requirePermissionForShipRecall;
    uint8_t _pad_2[0x3];
    _Bool ignoreUnspawnedShips;
    uint8_t _pad_3[0x7];
};




struct SActorForceReactionAimPunchConfig {
    uint8_t _pad_0[0x8];
    float adsZoomScaleFactor;
    float aimPunchDirConeAngle;
    struct Range* horizontalAimPunchRange;
    uint8_t _pad_1[0x8];
    struct Range* verticalAimPunchRange;
    uint8_t _pad_2[0x8];
    float horizontalRandomAimPunchAtMaxImpulse;
    float verticalRandomAimPunchAtMaxImpulse;
    struct SActorForceReactionCurveConfig* curveConfig;
    uint8_t _pad_3[0x20];
};




struct ControlHintCondition_ActorZeroGEVAState {
    uint8_t _pad_0[0x8];
    enum ARDataType zeroGEVAState;
    uint8_t _pad_1[0x7];
};




struct SCSeatConnectionParams {
    uint8_t _pad_0[0x8];
    struct SCSeatItemPort* seatItemPort;
    uint8_t _pad_1[0x8];
    struct Tag* seatTag;
    uint8_t _pad_2[0x10];
};




struct SAsteroidClusterComponentParams {
    uint8_t _pad_0[0x18];
    int32_t rngSeed;
    uint8_t viewDistRatio;
    uint8_t lodRatio;
    uint8_t _pad_1[0x2];
    struct CryStringT* composition;
    uint8_t _pad_2[0x8];
    float noiseAmplitude;
    float noiseGranularity;
    float noiseRoughness;
    uint8_t _pad_3[0xc];
    float densityScale;
    uint8_t _pad_4[0x4];
    double widthKm;
    double lengthKm;
    double heightKm;
    float noiseFrequencyX;
    float noiseFrequencyY;
    float noiseFrequencyZ;
    uint8_t _pad_5[0x4];
};




struct InteractionConditionShippingBuild {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
};




struct CraftingGameplayProperty_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct SetDoorPowerStateEvent {
    uint8_t _pad_0[0x8];
    enum ARDataType newDoorPowerState;
    uint8_t _pad_1[0x4];
};




struct SHostilityWantedLevelParams {
    uint8_t _pad_0[0x8];
    int32_t wantedLevel;
    enum ARDataType comparison;
};




struct DeadBodyParams {
    uint8_t _pad_0[0x18];
    _Bool awake;
    _Bool kinematic;
    uint8_t _pad_1[0x6];
};




struct CraftingOptionEffect_Time {
    uint8_t _pad_0[0x8];
    float timeMultiplier;
    uint8_t _pad_1[0x4];
};




struct SToolArmDeployCondition_LandingGear {
    uint8_t _pad_0[0x8];
    _Bool gearUp;
    uint8_t _pad_1[0x7];
};




struct InteriorMapWorldUIRoutePathLineParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* materialPath;
    uint8_t _pad_1[0x8];
    float lineWidthRatio;
    uint8_t _pad_2[0x4];
};




struct VisorHUD_Config {
    uint8_t _pad_0[0x8];
    struct Visor_ControlHintsConfig* controlHintsDef;
    uint8_t _pad_1[0x10];
};




struct UIGraph_JournalComponent {
    uint8_t _pad_0[0x8];
};




struct QuantumRefuelService {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct CLocIdentifier* productName;
    struct CryStringT* icon;
    uint8_t _pad_1[0x8];
    float serviceDelayTime;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* hudMessage;
    uint8_t _pad_3[0x8];
    _Bool instantRefuel;
    uint8_t _pad_4[0x3];
    int32_t refuelUnitPerSecond;
    struct ResourceType* fuelCommodity;
    uint8_t _pad_5[0x18];
};




struct BuildingBlocks_BindingsLocalizationFromDistance {
    uint8_t _pad_0[0x50];
    uint8_t numDecimalPlaces;
    _Bool displayBelowKilometer;
    uint8_t _pad_1[0x2];
    float displayKmThreshold;
    _Bool withSpace;
    uint8_t _pad_2[0x3];
    int32_t maxCharacters;
    _Bool displayNegative;
    uint8_t _pad_3[0x7];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_4[0x8];
};




struct SharedTacticParams {
    uint8_t _pad_0[0x8];
    struct TacticPlayerDistance* distanceToTargetThreshold;
    uint8_t _pad_1[0x8];
};




struct TypeSubtypeParams {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    enum ARDataType itemSubType;
};




struct ElectricalStateBase {
    uint8_t _pad_0[0x8];
};




struct SBaseResourceUnit {
    uint8_t _pad_0[0x8];
};




struct GlobalResourceAudio {
    uint8_t _pad_0[0x8];
    struct CryStringT* audioTrigger;
    uint8_t _pad_1[0x10];
};




struct CraftingRecipeCosts_Base_NonRef {
    uint8_t _pad_0[0x8];
};




struct CameraTransitionInterpolationCurveRecord {
    uint8_t _pad_0[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_1[0x88];
};




struct BoundingBoxTraversalCostShapeConfig {
    uint8_t _pad_0[0x8];
};




struct CommodityComponentParams {
    uint8_t _pad_0[0x18];
    struct CommodityType* type_;
    uint8_t _pad_1[0x10];
    struct CommoditySubtype* subtype;
    uint8_t _pad_2[0x10];
    struct SBaseCargoUnit* occupancy;
    uint8_t _pad_3[0x8];
    struct Vec3* ContainerDimension;
    uint8_t _pad_4[0x10];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    _Bool IsUnrefinedElement;
    _Bool boxable;
    uint8_t _pad_5[0x6];
};




struct DefaultActionDef {
    uint8_t _pad_0[0x8];
};




struct InstancedInteriorComponentParams {
    uint8_t _pad_0[0x18];
    int32_t sizeId;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* name;
    struct QuatT* spawnTransform;
    uint8_t _pad_2[0x50];
};




struct ActorBaseMovementModifiers {
    uint8_t _pad_0[0x8];
    struct ActorBaseStanceMovementModifiers* standing;
    uint8_t _pad_1[0x18];
    struct ActorBaseStanceMovementModifiers* crouched;
    uint8_t _pad_2[0x18];
    struct ActorBaseStanceMovementModifiers* prone;
    uint8_t _pad_3[0x18];
    struct ActorBaseStanceMovementModifiers* swimming;
    uint8_t _pad_4[0x18];
    struct ActorBaseStanceMovementModifiers* other;
    uint8_t _pad_5[0x18];
};




struct MissionVariableString {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    struct CryStringT* value;
    uint8_t _pad_3[0x8];
};




struct SCItemDoorControllerParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* OpenAllInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* HalfOpenAllInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* CloseAllInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* LockAllInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* UnlockAllInteraction;
    uint8_t _pad_5[0x8];
};




struct ForceFeedbackEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float time;
    uint8_t _pad_2[0x4];
    struct ForceFeedbackMotor* MotorAB;
    uint8_t _pad_3[0x8];
    struct ForceFeedbackMotor* MotorA;
    uint8_t _pad_4[0x8];
    struct ForceFeedbackMotor* MotorB;
    uint8_t _pad_5[0x8];
};




struct PUStateParams {
    uint8_t _pad_0[0x18];
};




struct HarvestConditionBase {
    uint8_t _pad_0[0x8];
};




struct BuildingBlocks_FieldModifierString {
    uint8_t _pad_0[0x8];
    enum ARDataType field;
    uint8_t _pad_1[0x4];
    struct CryStringT* value;
    uint8_t _pad_2[0x8];
};




struct BuildingBlocks_BindingsColorFromIntegerPacked {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_1[0x8];
};




struct TintPaletteTree {
    uint8_t _pad_0[0x8];
    struct TintPalette* root;
    uint8_t _pad_1[0x128];
    struct TintPaletteTree* templateTree;
    uint8_t _pad_2[0x10];
};




struct MissionDataBankManagementComponentParams {
    uint8_t _pad_0[0x18];
};




struct SRefuelAtmosphereComponentParams {
    uint8_t _pad_0[0x18];
    float boostRefuelMultiplier;
    uint8_t _pad_1[0x4];
};




struct ElectricalBehavior {
    uint8_t _pad_0[0x8];
    struct LightningBehavior* lightning;
    uint8_t _pad_1[0x30];
    struct Behavior_ElectricalVehicleEffectParams* vehicleEffects;
    uint8_t _pad_2[0x38];
};




struct CharacterNameData {
    uint8_t _pad_0[0x8];
    struct CryStringT* firstNameString;
    uint8_t _pad_1[0x8];
    struct CryStringT* nickNameString;
    uint8_t _pad_2[0x8];
    struct CryStringT* lastNameString;
    uint8_t _pad_3[0x8];
    int32_t firstNames;
    int32_t nickNames;
    int32_t lastNames;
    uint8_t _pad_4[0x4];
};




struct SGameRulesComponentParams {
    uint8_t _pad_0[0x18];
};




struct BuildingBlocks_TriggerBindingsHyperLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* url;
    uint8_t _pad_1[0x8];
};




struct SEntityTraversingNodeUniqueId {
    uint8_t _pad_0[0x8];
    struct SEntityTraversingNodeId* id;
    uint8_t _pad_1[0x10];
};




struct MissionProperty {
    uint8_t _pad_0[0x8];
    struct CryStringT* missionVariableName;
    uint8_t _pad_1[0x8];
    struct CryStringT* extendedTextToken;
    uint8_t _pad_2[0x8];
    struct BaseMissionPropertyValue* value;
    uint8_t _pad_3[0x8];
};




struct LootGenerationSpecialEventArchetype {
    uint8_t _pad_0[0x8];
    struct CryStringT* eventString;
    uint8_t _pad_1[0x8];
    float probabilityPerContainer;
    int32_t minEntriesPerContainer;
    int32_t maxEntriesPerContainer;
    uint8_t _pad_2[0x4];
    struct LootArchetype* archetype;
    uint8_t _pad_3[0x10];
};




struct SGripShapeParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* gripShape;
    uint8_t _pad_1[0x8];
    float dimension;
    float wristRotation;
    uint8_t _pad_2[0x8];
};




struct RadarOptionParams {
    uint8_t _pad_0[0x8];
    _Bool useFPSTagging;
    _Bool useFPSScanMode;
    _Bool enableScanMode;
    _Bool useExperimentalFeatures;
    _Bool allowDeltaSignature;
    uint8_t _pad_1[0x3];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeCanvasWidgetSizingMethod {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct ConsumableEffect {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* effectDescription;
};




struct RGBA {
    uint8_t _pad_0[0x8];
    float r;
    float g;
    float b;
    float a;
};




struct SEntitySoftDeprecatedPhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
    float damping;
    float maxTimeStep;
    int32_t maxIters;
    float windVariance;
    float accuracy;
    float impulseScale;
    float explosionScale;
    float sleepSpeed;
    float thickness;
    float friction;
    float hardness;
    float airResistance;
    float waterResistance;
    float massDecay;
    _Bool collideWithTerrain;
    _Bool collideWithStatics;
    _Bool collideWithRigid;
    _Bool collideWithActors;
    uint8_t _pad_4[0x4];
};




struct SCoreInventoryItem {
    uint8_t _pad_0[0x8];
    struct CryStringT* entityClassName;
    uint8_t _pad_1[0x8];
    int32_t amount;
    uint8_t _pad_2[0x4];
};




struct ActorProceduralRecoilSetup {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    struct ActorProceduralRecoilModifiers* actorProceduralRecoilModifiers;
    uint8_t _pad_2[0x10];
};




struct LightShadowParams {
    uint8_t _pad_0[0x8];
    _Bool shadowCasting;
    uint8_t _pad_1[0x3];
    float projectorNearPlane;
    float constantBias;
    float slopeBiasMultiplier;
    float resolutionScale;
    float maxShadowCastDist;
    _Bool disableScreenSpaceShadow;
    uint8_t _pad_2[0x7];
};




struct ResourceTypeVolatility {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float volatility;
    float healthDecayPerSecond;
};




struct ItemResourceControlOutputChangeInteractionState {
    uint8_t _pad_0[0x8];
    struct SInteractionState* outputInteractionState;
    uint8_t _pad_1[0x8];
};




struct TeamPhaseSettingsDef {
    uint8_t _pad_0[0x8];
    int32_t phaseIncrement;
    int32_t points;
    struct CLocIdentifier* phaseObjective;
    struct SEACriticalMessageDef* playerSpawnMessage;
    uint8_t _pad_1[0x10];
};




struct SItemPortDefAttachmentImplementationStatObj {
    uint8_t _pad_0[0x8];
    struct SItemPortDefHelperNode* Helper;
    uint8_t _pad_1[0x160];
};




struct SubsumptionConversationComponentParams {
    uint8_t _pad_0[0x18];
};




struct SSensorMineComponentParams {
    uint8_t _pad_0[0x18];
    _Bool FriendlyFire;
    uint8_t _pad_1[0x7];
    struct SSensorMineTriggerType* TriggerType;
    uint8_t _pad_2[0x8];
    struct GlobalResourceParticle* LaserVFX;
    uint8_t _pad_3[0x10];
};




struct AudioRtpcWithDefault {
    uint8_t _pad_0[0x8];
    struct CryStringT* rtpc;
    uint8_t _pad_1[0x10];
    float defaultValue;
    uint8_t _pad_2[0x4];
};




struct GasCloudLightShadowParams {
    uint8_t _pad_0[0x8];
    _Bool active;
    uint8_t _pad_1[0x3];
    uint32_t resolution;
    _Bool opaqueShadows;
    uint8_t _pad_2[0x7];
};




struct SCuttableShapeObjectParams {
    uint8_t _pad_0[0x8];
    float cutMargin;
    float autoCompleteThreshold;
    float meleeCompleteThreshold;
    int32_t segmentsPerLine;
};




struct MiningGlobalParams {
    uint8_t _pad_0[0x8];
    float powerCapacityPerMass;
    float decayPerMass;
    float optimalWindowSize;
    float optimalWindowFactor;
    float resistanceCurveFactor;
    float optimalWindowThinnessCurveFactor;
    float optimalWindowMaxSize;
    float controlledBreakingFillRate;
    float controlledBreakingFillRateDanger;
    float controlledBreakingDecayRate;
    float dangerBreakingFillRate;
    float dangerBreakingFillRateExponent;
    float dangerBreakingDecayRate;
    float absorbableVolumeThreshold;
    struct MineableInstabilityParams* mineableInstabilityParams;
    uint8_t _pad_1[0x10];
    struct MineableExplosionParams* mineableExplosionParams;
    uint8_t _pad_2[0x1c8];
    float childRockInvulnerabilityTime;
    float cSCUPerVolume;
    float defaultMass;
    uint8_t _pad_3[0x4];
    struct GlobalResourceParticle* fractureParticleEffect;
    uint8_t _pad_4[0x10];
    struct GlobalResourceParticle* explosionParticleEffect;
    uint8_t _pad_5[0x10];
    struct GlobalResourceParticle* centerRockDestroyParticleEffect;
    uint8_t _pad_6[0x10];
    struct GlobalResourceParticle* fullyExtractedRockParticleEffect;
    uint8_t _pad_7[0x10];
    struct HitConsistencyParams* hitConsistencyParams;
    uint8_t _pad_8[0x18];
    float modifierPersistenceTime;
    float childRockLifeTimer;
    float childRockZeroGDamping;
    float terrainFactorStaticThreshold;
    _Bool showExplosionFXForSurplusChild;
    uint8_t _pad_9[0x3];
    float childRockInactivityLifetime;
    float gadgetDetachThreshold;
    float gadgetDestroyThreshold;
    float dangerToGadgetDamage;
    uint8_t _pad_10[0x4];
    struct ResourceType* wasteResourceType;
    uint8_t _pad_11[0x10];
};




struct DockingAutodockingParams {
    uint8_t _pad_0[0x8];
    float DockingMaximumSpeedRequirement;
    float DockingMaximumAngularSpeedRequirement;
    float DockingMinimumAngularAlignmentAngle;
    float DockingHoldForCompletionTime;
    float DockingMaximumAngleFromDockingPoint;
    float DockingAngularTiltForShipGeometry;
    float DockingMinimumDistance;
    uint8_t _pad_1[0x4];
};




struct EASpawnModifierParams {
    uint8_t _pad_0[0x18];
};




struct FunctionalityModifierLinear {
    uint8_t _pad_0[0x8];
    float minFunctionalityMultiplier;
    float maxFunctionalityMultiplier;
};




struct QuickAccessWheelActionStateDef {
    uint8_t _pad_0[0x8];
    _Bool openContextMenuAsFolder;
    uint8_t _pad_1[0x7];
    struct InputAction* inputAction;
    uint8_t _pad_2[0x28];
    struct CryStringT* actionStateName;
    uint8_t _pad_3[0x8];
    struct CryStringT* iconPathOverride;
    uint8_t _pad_4[0x10];
};




struct RadiationBehavior {
    uint8_t _pad_0[0x8];
    struct RadiationBehavior_SurfaceRadiationParams* surfaceRadiation;
    uint8_t _pad_1[0x8];
};




struct DamageMapGlobalParams {
    uint8_t _pad_0[0x8];
    struct DamageMapDamageForm* impact;
    uint8_t _pad_1[0x80];
    struct DamageMapDamageForm* squib;
    uint8_t _pad_2[0x80];
    struct DamageMapExplosionParams* explosions;
    uint8_t _pad_3[0x8];
    float impactSizeExponent;
    uint8_t _pad_4[0x4];
};




struct ProceduralPlanetAudioDisturbanceDef {
    uint8_t _pad_0[0x8];
    _Bool byActor;
    _Bool byWheeledVehicle;
    _Bool bySpaceship;
    _Bool byOther;
    float idleTimeThreshold;
    struct GlobalResourceAudio* enterSound;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* disturbedLoopStart;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* disturbedLoopStop;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* redisturbSound;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* exitSound;
    uint8_t _pad_5[0x18];
};




struct InteractionConditionNOT {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct InteractionConditionParams* condition;
    uint8_t _pad_2[0x8];
};




struct SOrganizationRelationships {
    uint8_t _pad_0[0x8];
    struct OrganizationRelationshipParams* primaryOrganization;
    uint8_t _pad_1[0x48];
};




struct SCItemTurretCustomAngleLimit {
    uint8_t _pad_0[0x8];
    float TurretRotation;
    float LowestAngle;
    float HighestAngle;
    uint8_t _pad_1[0x4];
};




struct BindingsOperation_BooleanFromLocalizationIsEmpty {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsLocalizedBase* input;
    uint8_t _pad_1[0x8];
};




struct RefineryNotificationConfiguration {
    uint8_t _pad_0[0x8];
    float duration;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* text;
    struct CLocIdentifier* textMultiple;
    struct CLocIdentifier* refineryServiceError;
    struct CLocIdentifier* refineryDeliveryFailed;
    struct CLocIdentifier* refineryJobCreationFailed;
    struct CLocIdentifier* refinerySetupError;
};




struct SEntityActorPhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
    float stiffnessScale;
    float airResistance;
    float airControl;
    float inertia;
    float inertiaAccel;
    float maxVelGround;
    float minSlideAngle;
    float maxClimbAngle;
    float minFallAngle;
    float timeImpulseRecover;
    struct CryStringT* colliderMat;
    uint8_t _pad_4[0x8];
    float minColSpeedForExternalForceEvent;
    float minSpeedForChargeCollisionDamage;
    float chargeAttackDamage;
    enum ARDataType initialPhysicalizationProfile;
    struct Vec3* pivot;
    uint8_t _pad_5[0x10];
    struct Vec3* sizeCollider;
    uint8_t _pad_6[0x10];
    float heightCollider;
    uint8_t _pad_7[0x4];
    struct Vec3* dirUnproj;
    uint8_t _pad_8[0x10];
    float maxUnproj;
    int32_t bSkipUnproj;
    float groundContactEps;
    uint8_t _pad_9[0x4];
    struct Vec3* groundTraceSpreadSizes;
    uint8_t _pad_10[0x10];
    float geomScale;
    uint8_t _pad_11[0x4];
    struct Vec3* capsuleAxis;
    uint8_t _pad_12[0x10];
    uint32_t upAlignMode;
    uint8_t _pad_13[0x4];
};




struct SAISpecialActionsParams {
    uint8_t _pad_0[0x18];
    struct AIMeleeCombatConfig* aiMeleeCombatConfig;
    uint8_t _pad_1[0x10];
    struct AIHealthThresholdsConfig* aiHealthThresholdsConfig;
    uint8_t _pad_2[0x10];
    struct AIAvailableSpecialRangedAttacksConfig* aiAvailableSpecialRangedAttacksConfig;
    uint8_t _pad_3[0x10];
};




struct ItemResourceDynamicResourceBase {
    uint8_t _pad_0[0x8];
};




struct ItemResourceControlParameterRNParameter {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
};




struct BuildingBlocks_FieldModifierEnumeratedTypeCaseModifier {
    uint8_t _pad_0[0x8];
    enum ARDataType value;
    uint8_t _pad_1[0x4];
};




struct BaseMissionPropertyValue {
    uint8_t _pad_0[0x8];
};




struct SEntityTraversingNodeTypeZoneHostEntity {
    uint8_t _pad_0[0x8];
};




struct AnimationSetVariable {
    uint8_t _pad_0[0x8];
    struct AnimationFloatVariable* variable;
    uint8_t _pad_1[0x8];
    float value;
    uint8_t _pad_2[0x4];
    struct AnimationVariableInterpolation* overrideInterpolation;
    uint8_t _pad_3[0x8];
};




struct SKioskInteractionStateModifier {
    uint8_t _pad_0[0x8];
    struct SInteractionState* onKioskInteractionOpen;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onKioskInteractionClose;
    uint8_t _pad_2[0x8];
};




struct DamageInfo {
    uint8_t _pad_0[0x8];
    float DamagePhysical;
    float DamageEnergy;
    float DamageDistortion;
    float DamageThermal;
    float DamageBiochemical;
    float DamageStun;
};




struct SCItemSeatDashboardParams {
    uint8_t _pad_0[0x18];
    int32_t PowerOnline;
    uint8_t _pad_1[0x4];
    struct SDashboardInteractionParams* dashboardInteractions;
    uint8_t _pad_2[0x78];
    struct SDashboardSeatInteractionParams* seatInteractions;
    uint8_t _pad_3[0x50];
    struct SDashboardPowerInteractionParams* powerInteractions;
    uint8_t _pad_4[0x10];
    struct SDashboardEngineInteractionParams* engineInteractions;
    uint8_t _pad_5[0x10];
    struct SDashboardSystemInteractionParams* systemInteractions;
    uint8_t _pad_6[0x30];
    struct SDashboardWeaponInteractionParams* weaponInteractions;
    uint8_t _pad_7[0x30];
    struct SDashboardConsumableInteractionParams* consumableInteractions;
    uint8_t _pad_8[0x10];
    struct SDashboardQuantumInterdictionParams* quantumInterdictionInteractions;
    uint8_t _pad_9[0x20];
    struct SDashboardEffectParams* effects;
    uint8_t _pad_10[0x18];
    struct SCItemSeatDashboardUIDesc* uiDescription;
    uint8_t _pad_11[0x8];
    struct SCItemSeatDashboardMFDParams* MFDParams;
    uint8_t _pad_12[0x98];
    struct SCItemSeatDashboardPhysicalScreenParams* PhysicalScreenParams;
    uint8_t _pad_13[0x30];
    _Bool canTogglePowerForObservedItems;
    uint8_t _pad_14[0x7];
};




struct MasterModeSwitchDeltaSignatureTypes {
    uint8_t _pad_0[0x8];
    struct RadarDeltaSignatureEntry* navToScm;
    uint8_t _pad_1[0x10];
    struct RadarDeltaSignatureEntry* scmToNav;
    uint8_t _pad_2[0x10];
};




struct SEntityTraversingNodeTypeParams {
    uint8_t _pad_0[0x8];
};




struct QuantumDriveNotification {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* title;
    struct CLocIdentifier* message;
    float screenTimer;
    float hurryScreenTimer;
    _Bool blocking;
    uint8_t _pad_1[0x7];
};




struct UIGraph_MissionMgrComponent {
    uint8_t _pad_0[0x8];
};




struct SEntityDummyPhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
    enum ARDataType aiNavigationType;
    uint8_t _pad_4[0x4];
};




struct AnimationNavigationLink {
    uint8_t _pad_0[0x8];
    struct CryStringT* linkValidForAgentType;
    uint8_t _pad_1[0x8];
    struct NavigationLinkCostCustomization* costMultiplierSetup;
    uint8_t _pad_2[0x30];
    enum ARDataType linkingType;
    uint8_t _pad_3[0x4];
    struct UsableUseChannelInstance* useChannel;
    uint8_t _pad_4[0x8];
    struct NavLinkLocation* anchor;
    uint8_t _pad_5[0x8];
    struct CryStringT* mannequinTags;
    uint8_t _pad_6[0x8];
    _Bool animationEndsAtAnchor;
    uint8_t _pad_7[0x7];
};




struct DialogueBundlePreset {
    uint8_t _pad_0[0x8];
    struct DialogueBundleEmbedded* dialogueBundle;
    uint8_t _pad_1[0x48];
};




struct BuildingBlocks_OrbitTransformer {
    uint8_t _pad_0[0x8];
    float distance;
    uint8_t _pad_1[0x4];
};




struct LinearModifierInterpolator {
    uint8_t _pad_0[0x8];
    float startTime;
    float duration;
};




struct AreaTriggerParams {
    uint8_t _pad_0[0x18];
    _Bool enabled;
    _Bool triggerOnce;
    _Bool onlyPlayers;
    _Bool onlyLocalPlayer;
    _Bool onlyAI;
    _Bool inVehicleOnly;
    _Bool removeEntityOnTrigger;
    _Bool perPlayer;
    float enterDelay;
    float exitDelay;
};




struct AISeatWeaponControllerComponentParams {
    uint8_t _pad_0[0x18];
};




struct LightningTargetMode_RoomOccupants {
    uint8_t _pad_0[0x8];
    struct LightningStrengthDriver* strength;
    uint8_t _pad_1[0x60];
};




struct BuildingBlocks_BindingsVectorFromNumber {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_1[0x8];
};




struct SEntityComponentRectangleModificationObjectParams {
    uint8_t _pad_0[0x18];
    struct Vec3* size;
    uint8_t _pad_1[0x10];
    float rollOff;
    float strength;
    float dishEffect;
    int32_t sortOrder;
};




struct SEntityTraversingNodeTypeInteractionLink {
    uint8_t _pad_0[0x8];
    struct Tag* entityTag;
    uint8_t _pad_1[0x10];
};




struct SEARounds {
    uint8_t _pad_0[0x18];
    uint8_t numberOfRounds;
    uint8_t _pad_1[0x3];
    float timeBetweenRounds;
    float scoreboardDisplayDelay;
    _Bool midRoundJoining;
    uint8_t _pad_2[0x3];
};




struct StatusEffect {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    float value;
    float duration;
    uint8_t _pad_1[0x4];
};




struct SpawnDescription_NPCOption {
    uint8_t _pad_0[0x8];
    struct AutoSpawnSettings* autoSpawnSettings;
    uint8_t _pad_1[0x288];
    struct TagList* identifierTags;
    uint8_t _pad_2[0x30];
    int32_t priority;
    _Bool includeLocationAISpawnTags;
    uint8_t _pad_3[0x3];
    struct MissionProperty* nameProperty;
    uint8_t _pad_4[0x8];
    struct MissionPropertyValue_AIName* embeddedName;
    uint8_t _pad_5[0x8];
    float weight;
    uint8_t _pad_6[0x4];
};




struct CraftingGameplayPropertyImplValueRange_Float {
    uint8_t _pad_0[0x8];
    int32_t statThreshold;
    float defaultValue;
    float limitValue;
    uint8_t _pad_1[0x4];
};




struct SCItemControlTerminalParamsDef {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* captureInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* stopCaptureInteraction;
    uint8_t _pad_2[0x8];
};




struct WeaponAIAimingMethodPreferredHeightArc {
    uint8_t _pad_0[0x8];
    float minProjectileSpeed;
    float maxProjectileSpeed;
    float preferredHeight;
    float minHeight;
    float maxHeight;
    float angleIncrement;
    float minAngleDegrees;
    float maxAngleDegrees;
    int32_t searchDepth;
    uint8_t _pad_1[0x4];
};




struct SpeedThreshold {
    uint8_t _pad_0[0x8];
    float inventoryWeight;
    float speedFactor;
};




struct BuildingBlocks_ComponentParameterInputBase {
    uint8_t _pad_0[0x8];
    enum ARDataType parameter;
    uint8_t _pad_1[0x4];
};




struct SEntityTraversingNodeTypeRootEntity {
    uint8_t _pad_0[0x8];
};




struct SMiniGameData {
    uint8_t _pad_0[0x8];
    struct Vec2* textureSize;
    uint8_t _pad_1[0x8];
};




struct CommonTacticScores {
    uint8_t _pad_0[0x8];
    struct CryStringT* tacticName;
    uint8_t _pad_1[0x8];
    struct CommonTargetingSameTargetScore* amountOfEntitiesTargetingSameTargetScore;
    uint8_t _pad_2[0x18];
    struct CommonTargetVisibilityScore* isCurrentTargetVisibleScore;
    uint8_t _pad_3[0x8];
    struct CommonCurrentTargetDistanceScore* currentDistanceToTargetScore;
    uint8_t _pad_4[0x28];
};




struct InventoryContainerTypeBase {
    uint8_t _pad_0[0x8];
};




struct FixedPowerPool {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    int32_t poolSize;
    uint8_t _pad_2[0x4];
};




struct SMultiMissionCompleteRewardParams {
    uint8_t _pad_0[0x8];
    struct SMultiMissionCompleteRewardRecord* multiMissionCompleteRewardRecord;
    uint8_t _pad_1[0x10];
};




struct GlobalJumpTunnelCameraEffectParams {
    uint8_t _pad_0[0x8];
    struct JumpTunnelCameraEffects* alignmentToSpline;
    uint8_t _pad_1[0x60];
    struct JumpTunnelCameraEffects* distortionRatio;
    uint8_t _pad_2[0x60];
    struct JumpTunnelCameraEffects* openingProximity;
    uint8_t _pad_3[0x60];
    struct JumpTunnelCameraEffects* wallProximity;
    uint8_t _pad_4[0x60];
    struct JumpTunnelCameraEffects* failureState;
    uint8_t _pad_5[0x60];
    struct JumpTunnelCameraEffects* velocityStrength;
    uint8_t _pad_6[0x60];
    struct JumpDriveVelocityStrengthParams* velocityStrengthParams;
    uint8_t _pad_7[0x8];
};




struct BoidsNavmeshEdgeRepelRule {
    uint8_t _pad_0[0x8];
    float velocityScale;
    uint8_t _pad_1[0x4];
    float effectDistance;
    float decayCoefficient;
    float maxAcceleration;
    uint8_t _pad_2[0x4];
};




struct GasTankFillerParams {
    uint8_t _pad_0[0x18];
    float updateSeconds;
    float selfRefillSpeed;
    float maxCapacity;
    float maxUnitCapacity;
    float transferSpeed;
    uint8_t _pad_1[0x4];
    struct GasParams* gasType;
    uint8_t _pad_2[0x10];
};




struct UIGraph_ShopKioskVehicleLoadoutEditorContextComponent {
    uint8_t _pad_0[0x8];
};




struct SKeypadStateModifier {
    uint8_t _pad_0[0x8];
    int32_t keycode;
    uint8_t _pad_1[0x4];
    struct SInteractionState* onKeycodeSuccessState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* onKeycodeFailState;
    uint8_t _pad_3[0x8];
};




struct ItemResourceDeltaGeneration {
    uint8_t _pad_0[0x8];
    struct ItemResourceDeltaAmount* generation;
    uint8_t _pad_1[0x18];
    struct ItemResourceComposition* composition;
    uint8_t _pad_2[0x50];
    struct ItemResourceDynamicAmountBase* dynamicAmountOverride;
    uint8_t _pad_3[0x8];
    struct ItemResourceDynamicCompositionBase* dynamicCompositionOverride;
    uint8_t _pad_4[0x8];
    struct FunctionalityModifiers* generationModifiers;
    uint8_t _pad_5[0x8];
    _Bool noOverGeneration;
    uint8_t _pad_6[0x7];
};




struct SActorForceReactionProceduralLeanPoseList {
    uint8_t _pad_0[0x8];
};




struct MobiGlasAppData {
    uint8_t _pad_0[0x8];
    struct MobiGlasAppDataBase* appData;
    uint8_t _pad_1[0x8];
};




struct SSubstractHealthValue {
    uint8_t _pad_0[0x8];
    float healthValue;
    uint8_t _pad_1[0x4];
};




struct AnimationVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Range* range;
    uint8_t _pad_2[0x8];
    float defaultValue;
    uint8_t _pad_3[0x4];
    struct AnimationVariableInterpolation* defaultInterpolation;
    uint8_t _pad_4[0x8];
};




struct NavLinkTransformLocation {
    uint8_t _pad_0[0x8];
    struct QuatT* relativeTransform;
    uint8_t _pad_1[0x50];
};




struct SHealthInteractionLockParams {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* Interaction;
    uint8_t _pad_1[0x8];
    float MinHealthRatio;
    float MaxHealthRatio;
};




struct SAmplitudeFreqencyDecayCurves {
    uint8_t _pad_0[0x8];
    struct BezierCurve* frequencyDecayCurve;
    uint8_t _pad_1[0x88];
    struct BezierCurve* amplitudeDecayCurve;
    uint8_t _pad_2[0x88];
};




struct LoadoutResponseParams {
    uint8_t _pad_0[0x18];
};




struct SMastergraphStateOverride {
    uint8_t _pad_0[0x8];
    struct CryStringT* mastergraphStateName;
    uint8_t _pad_1[0x8];
    struct CryStringT* subsumptionActivityName;
    uint8_t _pad_2[0x8];
};




struct Marker_AbilityEntityGeometry {
    uint8_t _pad_0[0x8];
    _Bool showWhenOffScreen;
    uint8_t _pad_1[0x7];
};




struct BuildingBlocks_RawSlicer {
    uint8_t _pad_0[0x8];
    struct Vec2* start;
    uint8_t _pad_1[0x8];
    struct Vec2* size;
    uint8_t _pad_2[0x8];
};




struct SEAGameFeedParams {
    uint8_t _pad_0[0x18];
    float lifetime;
    int32_t maxAmountOfMessages;
    struct CryStringT* messageQueueIdentifier;
    uint8_t _pad_1[0x8];
    float fadeoutTime;
    uint8_t _pad_2[0x4];
    struct SEAGameFeedEventParams* genericEvent;
    uint8_t _pad_3[0x40];
    struct SEAGameFeedEventParams* suicideEvent;
    uint8_t _pad_4[0x40];
    struct SEAGameFeedEventParams* collisionEvent;
    uint8_t _pad_5[0x40];
    struct SEAGameFeedEventParams* vehicleExplosionEvent;
    uint8_t _pad_6[0x40];
    struct SEAGameFeedEventParams* vehicleWeaponKillEvent;
    uint8_t _pad_7[0x40];
    struct SEAGameFeedEventParams* weaponKillEvent;
    uint8_t _pad_8[0x40];
    struct SEAGameFeedEventParams* headshotKillEvent;
    uint8_t _pad_9[0x40];
    struct SEAGameFeedEventParams* grenadeKillEvent;
    uint8_t _pad_10[0x40];
    struct SEAGameFeedEventParams* meleeEvent;
    uint8_t _pad_11[0x40];
    struct SEAGameFeedEventParams* crashEvent;
    uint8_t _pad_12[0x40];
    struct SEAGameFeedEventParams* takeDownEvent;
    uint8_t _pad_13[0x40];
    struct SEAGameFeedEventParams* punishEvent;
    uint8_t _pad_14[0x40];
    struct SEAGameFeedEventParams* normalEvent;
    uint8_t _pad_15[0x40];
    struct SEAGameFeedEventParams* fireEvent;
    uint8_t _pad_16[0x40];
    struct SEAGameFeedEventParams* damageEvent;
    uint8_t _pad_17[0x40];
    struct SEAGameFeedEventParams* bleedOutEvent;
    uint8_t _pad_18[0x40];
    struct SEAGameFeedEventParams* electricEvent;
    uint8_t _pad_19[0x40];
    struct SEAGameFeedEventParams* repairEvent;
    uint8_t _pad_20[0x40];
    struct SEAGameFeedEventParams* suffocateEvent;
    uint8_t _pad_21[0x40];
    struct SEAGameFeedEventParams* boundaryViolationEvent;
    uint8_t _pad_22[0x40];
    struct SEAGameFeedEventParams* drownEvent;
    uint8_t _pad_23[0x40];
    struct SEAGameFeedEventParams* damageOverTimeEvent;
    uint8_t _pad_24[0x40];
    struct SEAGameFeedEventParams* hazardEvent;
    uint8_t _pad_25[0x40];
    struct SEAGameFeedEventParams* extractionEvent;
    uint8_t _pad_26[0x40];
};




struct SEntityTraversalNodeReferenceContext {
    uint8_t _pad_0[0x8];
    struct SEntityTraversingNodeBase* traversingNode;
    uint8_t _pad_1[0x8];
};




struct ActorSlidingParams {
    uint8_t _pad_0[0x8];
    float maxSlideTime;
    float minSlideStartSpeed;
    float minDistanceToObstacleForSlide;
    float slideDeceleration;
    float minSlideStopSpeed;
    float yawBreakAngle;
    float slideInertia;
    float slideDropDuration;
    _Bool useCurveForSlideSpeed;
    uint8_t _pad_1[0x7];
    struct BezierCurve* slideSpeedCurve;
    uint8_t _pad_2[0x88];
    struct ActorSpeedCameraEffects* speedCameraEffectsRecord;
    uint8_t _pad_3[0x10];
};




struct SMissionMarkerObjectMetadataParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* label;
    _Bool showDistance;
    uint8_t _pad_1[0x7];
};




struct UIGraph_SkyLineComponent {
    uint8_t _pad_0[0x8];
};




struct EAEntityEntitlement {
    uint8_t _pad_0[0x8];
    struct TagsDNF* tagsToMatch;
    uint8_t _pad_1[0x60];
};




struct RGB8 {
    uint8_t _pad_0[0x8];
    uint8_t r;
    uint8_t g;
    uint8_t b;
    uint8_t _pad_1[0x5];
};




struct MusicLogicParameterMultiply {
    uint8_t _pad_0[0x8];
    struct MusicLogicParameter* parameter;
    uint8_t _pad_1[0x10];
};




struct SModifyHealthGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct SModHealth* Health;
    uint8_t _pad_1[0x8];
};




struct SDamageMapShaderValueDetails {
    uint8_t _pad_0[0x8];
    float damage;
    float innerRadius;
    float outerRadius;
    uint8_t _pad_1[0x4];
};




struct PlanetWeatherParams {
    uint8_t _pad_0[0x8];
    float maximumWindSpeed;
    float airDensity;
    struct CryStringT* windMapOverride;
    uint8_t _pad_1[0x8];
    float windMapOffset;
    float windMapRotationSpeed;
    float windGustStrengthRange;
    float windGustSpeedMultiplier;
    uint16_t windGustRepetitionAmount;
    _Bool enablePlanetaryGroundEffects;
    uint8_t _pad_2[0x5];
};




struct EntityComponentResourceNetworkUIProviderParams {
    uint8_t _pad_0[0x18];
};




struct SQuantumDriveEffectParams_LEGACY {
    uint8_t _pad_0[0x8];
    struct Tag* alignEffectTag;
    uint8_t _pad_1[0x10];
    struct Tag* pinchEffectTag;
    uint8_t _pad_2[0x10];
    struct Tag* travelEffectTag;
    uint8_t _pad_3[0x10];
    struct Tag* enterFlashEffectTag;
    uint8_t _pad_4[0x10];
    struct Tag* exitFlashEffectTag;
    uint8_t _pad_5[0x10];
    struct Tag* spoolEffectTag;
    uint8_t _pad_6[0x10];
    struct Tag* pinchStrengthTag;
    uint8_t _pad_7[0x10];
    struct Tag* spoolStrengthTag;
    uint8_t _pad_8[0x10];
    struct Tag* trailsTag;
    uint8_t _pad_9[0x10];
    struct Tag* trailsStrTag;
    uint8_t _pad_10[0x10];
    struct Tag* interdictionEffectTag;
    uint8_t _pad_11[0x10];
    struct Tag* interdictionExitFlashTag;
    uint8_t _pad_12[0x10];
};




struct DynArray_float {
    float* m_data;
};




struct DynArray_bool {
    _Bool* m_data;
};




struct DynArray_ARDataType {
    enum ARDataType* m_data;
};




struct DynArray_CryStringT {
    struct CryStringT** m_data;
};




struct DynArray_CLocIdentifier {
    struct CLocIdentifier** m_data;
};




struct DynArray_int64_t {
    int64_t* m_data;
};




struct DynArray_int32_t {
    int32_t* m_data;
};




struct DynArray_uint32_t {
    uint32_t* m_data;
};




struct DynArray_int8_t {
    int8_t* m_data;
};




struct DynArray_int16_t {
    int16_t* m_data;
};




struct DynArray_uint8_t {
    uint8_t* m_data;
};




struct DynArray_uint16_t {
    uint16_t* m_data;
};




struct DynArray_uint64_t {
    uint64_t* m_data;
};




struct DynArray_double {
    double* m_data;
};




struct DynArray_CraftingResult_Base {
    struct CraftingResult_Base** m_data;
};




struct DynArray_ItemRoomResourcePair {
    struct ItemRoomResourcePair** m_data;
};




struct DynArray_SShieldAbsorption {
    struct SShieldAbsorption** m_data;
};




struct DynArray_SpectatorModeParams {
    struct SpectatorModeParams** m_data;
};




struct DynArray_SApplicationFormHead {
    struct SApplicationFormHead** m_data;
};




struct DynArray_InnerThought_LayoutGridSetThought {
    struct InnerThought_LayoutGridSetThought** m_data;
};




struct DynArray_SCItemRadarSensitivityModifier {
    struct SCItemRadarSensitivityModifier** m_data;
};




struct DynArray_QuantumDriveLocTypeMusicMap {
    struct QuantumDriveLocTypeMusicMap** m_data;
};




struct DynArray_AeroSurface {
    struct AeroSurface** m_data;
};




struct DynArray_BuildingBlocks_BindingsPathBase {
    struct BuildingBlocks_BindingsPathBase** m_data;
};




struct DynArray_BreathableGasParams {
    struct BreathableGasParams** m_data;
};




struct DynArray_ActorStatusAddBuff {
    struct ActorStatusAddBuff** m_data;
};




struct DynArray_AbilityStaminaStates {
    struct AbilityStaminaStates** m_data;
};




struct DynArray_SMFDOperatorModeConfig {
    struct SMFDOperatorModeConfig** m_data;
};




struct DynArray_StanceBreathModifier {
    struct StanceBreathModifier** m_data;
};




struct DynArray_VehicleEditorCapability {
    struct VehicleEditorCapability** m_data;
};




struct DynArray_SEntityPhysicsWheel {
    struct SEntityPhysicsWheel** m_data;
};




struct DynArray_CameraActorVibrationShakeConfig {
    struct CameraActorVibrationShakeConfig** m_data;
};




struct DynArray_FireHazardFireProperties {
    struct FireHazardFireProperties** m_data;
};




struct DynArray_ControlHints_KeyInput {
    struct ControlHints_KeyInput** m_data;
};




struct DynArray_SSCSignatureSystemAudioSubRule {
    struct SSCSignatureSystemAudioSubRule** m_data;
};




struct DynArray_SEffectParamsNodeBase {
    struct SEffectParamsNodeBase** m_data;
};




struct DynArray_EVAConnection {
    struct EVAConnection** m_data;
};




struct DynArray_MovementSpeedOverride {
    struct MovementSpeedOverride** m_data;
};




struct DynArray_SCDynamicRigLightEnabledParams {
    struct SCDynamicRigLightEnabledParams** m_data;
};




struct DynArray_ScanDisplayInstanceParams {
    struct ScanDisplayInstanceParams** m_data;
};




struct DynArray_ActorViewLimitPreset {
    struct ActorViewLimitPreset** m_data;
};




struct DynArray_CommsNotificationSelector {
    struct CommsNotificationSelector** m_data;
};




struct DynArray_ItemResourceControlConditionBase {
    struct ItemResourceControlConditionBase** m_data;
};




struct DynArray_SCItemSuitAtmosphereFuelConversionParams {
    struct SCItemSuitAtmosphereFuelConversionParams** m_data;
};




struct DynArray_FloatInteractiveVariable {
    struct FloatInteractiveVariable** m_data;
};




struct DynArray_SEALoadoutExplicit {
    struct SEALoadoutExplicit** m_data;
};




struct DynArray_SeatUserActorCDIKConfig {
    struct SeatUserActorCDIKConfig** m_data;
};




struct DynArray_BoolUserVariableTask {
    struct BoolUserVariableTask** m_data;
};




struct DynArray_PlayerAnimatedInteractionFiltered {
    struct PlayerAnimatedInteractionFiltered** m_data;
};




struct DynArray_VehicleSerialNumberCharacterType {
    struct VehicleSerialNumberCharacterType** m_data;
};




struct DynArray_CylinderFieldGeom {
    struct CylinderFieldGeom** m_data;
};




struct DynArray_SCharacterCustomizerBlemishMapParams {
    struct SCharacterCustomizerBlemishMapParams** m_data;
};




struct DynArray_EntitityEffectSystem_StaticColor {
    struct EntitityEffectSystem_StaticColor** m_data;
};




struct DynArray_SecurityClearanceTokenData {
    struct SecurityClearanceTokenData** m_data;
};




struct DynArray_S42ShipStatusAllowedShipParams {
    struct S42ShipStatusAllowedShipParams** m_data;
};




struct DynArray_BuildingBlocks_TextFormatModifierBase {
    struct BuildingBlocks_TextFormatModifierBase** m_data;
};




struct DynArray_SWeaponActionParams {
    struct SWeaponActionParams** m_data;
};




struct DynArray_BuildingBlocks_ColorIntegerPairDef {
    struct BuildingBlocks_ColorIntegerPairDef** m_data;
};




struct DynArray_TransitStationAnnouncement {
    struct TransitStationAnnouncement** m_data;
};




struct DynArray_SArmouryItemFilter {
    struct SArmouryItemFilter** m_data;
};




struct DynArray_SPerkReputationParams {
    struct SPerkReputationParams** m_data;
};




struct DynArray_EntitityEffectSystem_StaticFloat {
    struct EntitityEffectSystem_StaticFloat** m_data;
};




struct DynArray_TaggedSubHarvestableConfig {
    struct TaggedSubHarvestableConfig** m_data;
};




struct DynArray_OutfitParams {
    struct OutfitParams** m_data;
};




struct DynArray_ScanCustomData {
    struct ScanCustomData** m_data;
};




struct DynArray_SWeaponActionAIParams {
    struct SWeaponActionAIParams** m_data;
};




struct DynArray_GameModeFilter {
    struct GameModeFilter** m_data;
};




struct DynArray_SEffectInputParamsSound {
    struct SEffectInputParamsSound** m_data;
};




struct DynArray_ActionAreaExtensionType {
    struct ActionAreaExtensionType** m_data;
};




struct DynArray_PlayerChoiceMenuItem {
    struct PlayerChoiceMenuItem** m_data;
};




struct DynArray_AnnouncementGameToken {
    struct AnnouncementGameToken** m_data;
};




struct DynArray_VisibilityConditionDef {
    struct VisibilityConditionDef** m_data;
};




struct DynArray_SCSeatAccessLinkedGatewayParams {
    struct SCSeatAccessLinkedGatewayParams** m_data;
};




struct DynArray_SHealingBeamBodyPartParams {
    struct SHealingBeamBodyPartParams** m_data;
};




struct DynArray_TimeToTakeOffMinOverrideByDockingClass {
    struct TimeToTakeOffMinOverrideByDockingClass** m_data;
};




struct DynArray_PlanetEffectLODDistance {
    struct PlanetEffectLODDistance** m_data;
};




struct DynArray_BuildingBlocks_IntegerIntegerPair {
    struct BuildingBlocks_IntegerIntegerPair** m_data;
};




struct DynArray_EntityComponentHealth_SBaseSequencerTask {
    struct EntityComponentHealth_SBaseSequencerTask** m_data;
};




struct DynArray_SLoadoutRequirementBase {
    struct SLoadoutRequirementBase** m_data;
};




struct DynArray_DrugTypeToApply {
    struct DrugTypeToApply** m_data;
};




struct DynArray_SpawnDescription_Ship {
    struct SpawnDescription_Ship** m_data;
};




struct DynArray_GlobalResourceTexture {
    struct GlobalResourceTexture** m_data;
};




struct DynArray_SCItemSeatDashboardScreen {
    struct SCItemSeatDashboardScreen** m_data;
};




struct DynArray_MusicLogicEvent {
    struct MusicLogicEvent** m_data;
};




struct DynArray_EAFactionTeamParams {
    struct EAFactionTeamParams** m_data;
};




struct DynArray_BuildingBlocks_BindingsBooleanBase {
    struct BuildingBlocks_BindingsBooleanBase** m_data;
};




struct DynArray_MissionVariableBase {
    struct MissionVariableBase** m_data;
};




struct DynArray_SGasProducerConsumerEntryParams {
    struct SGasProducerConsumerEntryParams** m_data;
};




struct DynArray_ContextMenuOption {
    struct ContextMenuOption** m_data;
};




struct DynArray_HoldExhaleDuration {
    struct HoldExhaleDuration** m_data;
};




struct DynArray_ItemPortViewInformation {
    struct ItemPortViewInformation** m_data;
};




struct DynArray_BuildingBlocks_KeyframeModifierData {
    struct BuildingBlocks_KeyframeModifierData** m_data;
};




struct DynArray_BoxFieldGeom {
    struct BoxFieldGeom** m_data;
};




struct DynArray_PlayerUsableInteractionPoint {
    struct PlayerUsableInteractionPoint** m_data;
};




struct DynArray_SActorForceReactionsProceduralLeanOverride {
    struct SActorForceReactionsProceduralLeanOverride** m_data;
};




struct DynArray_BodyJoint {
    struct BodyJoint** m_data;
};




struct DynArray_SAttachableObjectContainerData {
    struct SAttachableObjectContainerData** m_data;
};




struct DynArray_EAMarkerTrackerBase {
    struct EAMarkerTrackerBase** m_data;
};




struct DynArray_VibrationTypeData {
    struct VibrationTypeData** m_data;
};




struct DynArray_CtxGraph_Node {
    struct CtxGraph_Node** m_data;
};




struct DynArray_SEAFPSGunGameArmorLevel {
    struct SEAFPSGunGameArmorLevel** m_data;
};




struct DynArray_SMusicEventTagMap {
    struct SMusicEventTagMap** m_data;
};




struct DynArray_ItemResourceCompositionValue {
    struct ItemResourceCompositionValue** m_data;
};




struct DynArray_BaseMissionModifier {
    struct BaseMissionModifier** m_data;
};




struct DynArray_QuantumMusicTripCategory {
    struct QuantumMusicTripCategory** m_data;
};




struct DynArray_ScanProcedureParams {
    struct ScanProcedureParams** m_data;
};




struct DynArray_SelectionTab {
    struct SelectionTab** m_data;
};




struct DynArray_WeaponProceduralClip {
    struct WeaponProceduralClip** m_data;
};




struct DynArray_PlayerChoiceMenuOption {
    struct PlayerChoiceMenuOption** m_data;
};




struct DynArray_DisplayState {
    struct DisplayState** m_data;
};




struct DynArray_BuildingBlocks_Node {
    struct BuildingBlocks_Node** m_data;
};




struct DynArray_SOutfitPlacingRule {
    struct SOutfitPlacingRule** m_data;
};




struct DynArray_BuildingBlocks_TagIntegerPair {
    struct BuildingBlocks_TagIntegerPair** m_data;
};




struct DynArray_SWeaponSequenceEntryParams {
    struct SWeaponSequenceEntryParams** m_data;
};




struct DynArray_MissionLocationValidation {
    struct MissionLocationValidation** m_data;
};




struct DynArray_PersonalThoughtInventoryFilter {
    struct PersonalThoughtInventoryFilter** m_data;
};




struct DynArray_MissionModuleHierarchySubMission {
    struct MissionModuleHierarchySubMission** m_data;
};




struct DynArray_BuildingBlocks_ColorBase {
    struct BuildingBlocks_ColorBase** m_data;
};




struct DynArray_SSalvageRepairHighlightColorParams {
    struct SSalvageRepairHighlightColorParams** m_data;
};




struct DynArray_SPerkShopItemCategoryBase {
    struct SPerkShopItemCategoryBase** m_data;
};




struct DynArray_SCIGTestB {
    struct SCIGTestB** m_data;
};




struct DynArray_SControlledEntityRopeAttachmentPair {
    struct SControlledEntityRopeAttachmentPair** m_data;
};




struct DynArray_MissionScenarioCyclePhase {
    struct MissionScenarioCyclePhase** m_data;
};




struct DynArray_GameModeValidMap {
    struct GameModeValidMap** m_data;
};




struct DynArray_ProcBreathingGraphEntry {
    struct ProcBreathingGraphEntry** m_data;
};




struct DynArray_SControlledEntityParams {
    struct SControlledEntityParams** m_data;
};




struct DynArray_ScreenEffects_DebugParam {
    struct ScreenEffects_DebugParam** m_data;
};




struct DynArray_AIMeleeAttack {
    struct AIMeleeAttack** m_data;
};




struct DynArray_BodyPart {
    struct BodyPart** m_data;
};




struct DynArray_AudioBreathStyleBaseNode {
    struct AudioBreathStyleBaseNode** m_data;
};




struct DynArray_SpawnSettingsInventoryItem {
    struct SpawnSettingsInventoryItem** m_data;
};




struct DynArray_SSpecializedDataEntry {
    struct SSpecializedDataEntry** m_data;
};




struct DynArray_AudioSwitch {
    struct AudioSwitch** m_data;
};




struct DynArray_QuantumDriveStateMusicMap {
    struct QuantumDriveStateMusicMap** m_data;
};




struct DynArray_ItemTypeModifier {
    struct ItemTypeModifier** m_data;
};




struct DynArray_SItemPortLoadoutEntryParams {
    struct SItemPortLoadoutEntryParams** m_data;
};




struct DynArray_SReputationAmountParams {
    struct SReputationAmountParams** m_data;
};




struct DynArray_AISpecialRangedAttackConfig {
    struct AISpecialRangedAttackConfig** m_data;
};




struct DynArray_AttackCategoryParamsBase {
    struct AttackCategoryParamsBase** m_data;
};




struct DynArray_Vec2 {
    struct Vec2** m_data;
};




struct DynArray_SReputationContextBBPropertyParams {
    struct SReputationContextBBPropertyParams** m_data;
};




struct DynArray_SignatureTypeGlobalParams {
    struct SignatureTypeGlobalParams** m_data;
};




struct DynArray_SReputationStandingJournalEntryParams {
    struct SReputationStandingJournalEntryParams** m_data;
};




struct DynArray_Texture3DFieldGeom {
    struct Texture3DFieldGeom** m_data;
};




struct DynArray_SSequencerTurretSetMovementTagTaskParams {
    struct SSequencerTurretSetMovementTagTaskParams** m_data;
};




struct DynArray_SWeaponConditionBase {
    struct SWeaponConditionBase** m_data;
};




struct DynArray_BuildingBlocks_StaticVariableArray {
    struct BuildingBlocks_StaticVariableArray** m_data;
};




struct DynArray_NavigationLinkTagCost {
    struct NavigationLinkTagCost** m_data;
};




struct DynArray_LongTermPersistenceWhiteListEntry {
    struct LongTermPersistenceWhiteListEntry** m_data;
};




struct DynArray_ScanCustomValue {
    struct ScanCustomValue** m_data;
};




struct DynArray_SRangedWeaponStats {
    struct SRangedWeaponStats** m_data;
};




struct DynArray_ControlHints_Input {
    struct ControlHints_Input** m_data;
};




struct DynArray_SSequencerInteractionTask {
    struct SSequencerInteractionTask** m_data;
};




struct DynArray_AnimationJointBaseTranslation {
    struct AnimationJointBaseTranslation** m_data;
};




struct DynArray_SCItemControlPriorityTag {
    struct SCItemControlPriorityTag** m_data;
};




struct DynArray_EAUIMulticrewTypeOptionParams {
    struct EAUIMulticrewTypeOptionParams** m_data;
};




struct DynArray_ItemTypeInfo {
    struct ItemTypeInfo** m_data;
};




struct DynArray_VehicleRole {
    struct VehicleRole** m_data;
};




struct DynArray_TagToAudioRtpc {
    struct TagToAudioRtpc** m_data;
};




struct DynArray_SViewDistanceRatioParams {
    struct SViewDistanceRatioParams** m_data;
};




struct DynArray_LinkedStatBase {
    struct LinkedStatBase** m_data;
};




struct DynArray_AudioOneShotManagerBudgetEntry {
    struct AudioOneShotManagerBudgetEntry** m_data;
};




struct DynArray_HarvestableClusterParams {
    struct HarvestableClusterParams** m_data;
};




struct DynArray_SReputationStandingParams {
    struct SReputationStandingParams** m_data;
};




struct DynArray_ModifierInterpolator {
    struct ModifierInterpolator** m_data;
};




struct DynArray_ItemTypeCategoryException {
    struct ItemTypeCategoryException** m_data;
};




struct DynArray_ItemAwardBase {
    struct ItemAwardBase** m_data;
};




struct DynArray_LandingZoneInventoryRedirect {
    struct LandingZoneInventoryRedirect** m_data;
};




struct DynArray_MissionLogEntry {
    struct MissionLogEntry** m_data;
};




struct DynArray_SFrontendGameModeButton {
    struct SFrontendGameModeButton** m_data;
};




struct DynArray_ForceFeedbackEnvelope {
    struct ForceFeedbackEnvelope** m_data;
};




struct DynArray_ScanOverrideDisplayBaseParams {
    struct ScanOverrideDisplayBaseParams** m_data;
};




struct DynArray_CommunicationVariableBase {
    struct CommunicationVariableBase** m_data;
};




struct DynArray_S42CommendationRequirementBase {
    struct S42CommendationRequirementBase** m_data;
};




struct DynArray_FlightHUDUIMessage {
    struct FlightHUDUIMessage** m_data;
};




struct DynArray_InventoryContainerParams {
    struct InventoryContainerParams** m_data;
};




struct DynArray_LootArchetypeEntry_Secondary {
    struct LootArchetypeEntry_Secondary** m_data;
};




struct DynArray_SObjectMetadataParams {
    struct SObjectMetadataParams** m_data;
};




struct DynArray_UIElementSoundEntry {
    struct UIElementSoundEntry** m_data;
};




struct DynArray_SCOptionalZeroGTraversalParams {
    struct SCOptionalZeroGTraversalParams** m_data;
};




struct DynArray_SDespawnRule {
    struct SDespawnRule** m_data;
};




struct DynArray_BuildingBlocks_FieldModifierPair {
    struct BuildingBlocks_FieldModifierPair** m_data;
};




struct DynArray_BuildingBlocks_FieldTransitionBase {
    struct BuildingBlocks_FieldTransitionBase** m_data;
};




struct DynArray_SSignaturesCategoryEntry {
    struct SSignaturesCategoryEntry** m_data;
};




struct DynArray_SDragDropUsableUserConfig {
    struct SDragDropUsableUserConfig** m_data;
};




struct DynArray_SEAUISpawnScreenFPSEquipmentCategoryParams {
    struct SEAUISpawnScreenFPSEquipmentCategoryParams** m_data;
};




struct DynArray_DegradationTemperatureMultiplier {
    struct DegradationTemperatureMultiplier** m_data;
};




struct DynArray_ForceFeedbackPattern {
    struct ForceFeedbackPattern** m_data;
};




struct DynArray_VoiceSingle {
    struct VoiceSingle** m_data;
};




struct DynArray_SCSeatAccessGatewayInteractionParams {
    struct SCSeatAccessGatewayInteractionParams** m_data;
};




struct DynArray_BoidsBehaviorRuleContainer {
    struct BoidsBehaviorRuleContainer** m_data;
};




struct DynArray_ItemCategory {
    struct ItemCategory** m_data;
};




struct DynArray_BoidTransition {
    struct BoidTransition** m_data;
};




struct DynArray_BuildingBlocks_StaticArrayDataBase {
    struct BuildingBlocks_StaticArrayDataBase** m_data;
};




struct DynArray_UserRTPC {
    struct UserRTPC** m_data;
};




struct DynArray_UnitTestSubRecord {
    struct UnitTestSubRecord** m_data;
};




struct DynArray_S42StatOperationBase {
    struct S42StatOperationBase** m_data;
};




struct DynArray_SSequencerActorActionHandlerTask {
    struct SSequencerActorActionHandlerTask** m_data;
};




struct DynArray_SUsableIdlePoseOverride {
    struct SUsableIdlePoseOverride** m_data;
};




struct DynArray_EntityComponentEffects_Test_ColorLink {
    struct EntityComponentEffects_Test_ColorLink** m_data;
};




struct DynArray_GPUParticleAudio {
    struct GPUParticleAudio** m_data;
};




struct DynArray_SInternalResourceLink {
    struct SInternalResourceLink** m_data;
};




struct DynArray_SActorForceReactionKnockdownRangeDef {
    struct SActorForceReactionKnockdownRangeDef** m_data;
};




struct DynArray_SShopUIProviderCategoryIcon {
    struct SShopUIProviderCategoryIcon** m_data;
};




struct DynArray_BuildingBlocks_IntegerNumberPair {
    struct BuildingBlocks_IntegerNumberPair** m_data;
};




struct DynArray_UIStateDisplay_Threshold {
    struct UIStateDisplay_Threshold** m_data;
};




struct DynArray_EmotionDescription {
    struct EmotionDescription** m_data;
};




struct DynArray_SObservablePointDef {
    struct SObservablePointDef** m_data;
};




struct DynArray_SCItemPriorityTagParam {
    struct SCItemPriorityTagParam** m_data;
};




struct DynArray_HandholdAttachSpotParams {
    struct HandholdAttachSpotParams** m_data;
};




struct DynArray_ActorCameraOffsetFiltered {
    struct ActorCameraOffsetFiltered** m_data;
};




struct DynArray_CtxGraph_Dependency {
    struct CtxGraph_Dependency** m_data;
};




struct DynArray_GlobalResourceParticle {
    struct GlobalResourceParticle** m_data;
};




struct DynArray_CommunicationVariableBool {
    struct CommunicationVariableBool** m_data;
};




struct DynArray_SVehicleObjectContainerParams {
    struct SVehicleObjectContainerParams** m_data;
};




struct DynArray_BuildingBlocks_StyleSelectorConditionBase {
    struct BuildingBlocks_StyleSelectorConditionBase** m_data;
};




struct DynArray_LadderAccessPointParams {
    struct LadderAccessPointParams** m_data;
};




struct DynArray_SJumpTunnelSectionControlPointGenerationParams {
    struct SJumpTunnelSectionControlPointGenerationParams** m_data;
};




struct DynArray_BuildingBlocks_FieldModifierBase {
    struct BuildingBlocks_FieldModifierBase** m_data;
};




struct DynArray_MobiGlasAuthorizationEntry {
    struct MobiGlasAuthorizationEntry** m_data;
};




struct DynArray_TestAtomics {
    struct TestAtomics** m_data;
};




struct DynArray_AfterActionReportReputationImpact {
    struct AfterActionReportReputationImpact** m_data;
};




struct DynArray_ItemResourceControlParameterBase {
    struct ItemResourceControlParameterBase** m_data;
};




struct DynArray_ActorJumpFallLandVariantConfigNode {
    struct ActorJumpFallLandVariantConfigNode** m_data;
};




struct DynArray_SRangeStateLevel {
    struct SRangeStateLevel** m_data;
};




struct DynArray_PersonalThoughtActionDescription {
    struct PersonalThoughtActionDescription** m_data;
};




struct DynArray_QuatT {
    struct QuatT** m_data;
};




struct DynArray_StarMapAmenityTypeEntry {
    struct StarMapAmenityTypeEntry** m_data;
};




struct DynArray_HaulingOrderBase {
    struct HaulingOrderBase** m_data;
};




struct DynArray_SQedVisualGraphTransitionParams {
    struct SQedVisualGraphTransitionParams** m_data;
};




struct DynArray_LightningTargetMode {
    struct LightningTargetMode** m_data;
};




struct DynArray_BuildingBlocks_StringTagPair {
    struct BuildingBlocks_StringTagPair** m_data;
};




struct DynArray_AnimationMovement {
    struct AnimationMovement** m_data;
};




struct DynArray_BuildingBlocksView {
    struct BuildingBlocksView** m_data;
};




struct DynArray_VehicleEditorItemData {
    struct VehicleEditorItemData** m_data;
};




struct DynArray_SCItemConditionalPriority {
    struct SCItemConditionalPriority** m_data;
};




struct DynArray_JumpDriveStateAudioMap {
    struct JumpDriveStateAudioMap** m_data;
};




struct DynArray_LegacyCraftingCost_Base {
    struct LegacyCraftingCost_Base** m_data;
};




struct DynArray_ToxicGasDef {
    struct ToxicGasDef** m_data;
};




struct DynArray_SActorForceReactionsVehicleForceDampeningDef {
    struct SActorForceReactionsVehicleForceDampeningDef** m_data;
};




struct DynArray_SLootableItemPortRuleParams {
    struct SLootableItemPortRuleParams** m_data;
};




struct DynArray_AudioGameContext {
    struct AudioGameContext** m_data;
};




struct DynArray_SHostilityRules {
    struct SHostilityRules** m_data;
};




struct DynArray_SAccumulatorParams {
    struct SAccumulatorParams** m_data;
};




struct DynArray_LiteralStringUserVariable {
    struct LiteralStringUserVariable** m_data;
};




struct DynArray_SReputationStateModifierParams {
    struct SReputationStateModifierParams** m_data;
};




struct DynArray_CustomMaterialEntryParams {
    struct CustomMaterialEntryParams** m_data;
};




struct DynArray_BuildingBlocks_IntegerTagPair {
    struct BuildingBlocks_IntegerTagPair** m_data;
};




struct DynArray_RaSTaRLibraryElement {
    struct RaSTaRLibraryElement** m_data;
};




struct DynArray_TorusFieldGeom {
    struct TorusFieldGeom** m_data;
};




struct DynArray_VehicleEditorStat {
    struct VehicleEditorStat** m_data;
};




struct DynArray_SPhysicalScreen {
    struct SPhysicalScreen** m_data;
};




struct DynArray_SCarryableGrip {
    struct SCarryableGrip** m_data;
};




struct DynArray_NotificationDef {
    struct NotificationDef** m_data;
};




struct DynArray_VideoComms {
    struct VideoComms** m_data;
};




struct DynArray_SInternalHardpointLink {
    struct SInternalHardpointLink** m_data;
};




struct DynArray_TQSOption {
    struct TQSOption** m_data;
};




struct DynArray_DialogueExternalSource {
    struct DialogueExternalSource** m_data;
};




struct DynArray_BaseDataSetMatchCondition {
    struct BaseDataSetMatchCondition** m_data;
};




struct DynArray_SStateModifier {
    struct SStateModifier** m_data;
};




struct DynArray_SModelVoiceTagPair {
    struct SModelVoiceTagPair** m_data;
};




struct DynArray_AnimationGraph_Timer {
    struct AnimationGraph_Timer** m_data;
};




struct DynArray_SCharacterCustomizerBaseMaterialSet {
    struct SCharacterCustomizerBaseMaterialSet** m_data;
};




struct DynArray_SCharacterCustomizerWildlineSubconditionBase {
    struct SCharacterCustomizerWildlineSubconditionBase** m_data;
};




struct DynArray_TriggerSubConditionDef {
    struct TriggerSubConditionDef** m_data;
};




struct DynArray_SDecalParams {
    struct SDecalParams** m_data;
};




struct DynArray_HudColor_CustomEntry {
    struct HudColor_CustomEntry** m_data;
};




struct DynArray_SCharacterCustomizerRandomizationOverrideParams {
    struct SCharacterCustomizerRandomizationOverrideParams** m_data;
};




struct DynArray_SCharacterCustomizerLoadoutItemReplacementMapping {
    struct SCharacterCustomizerLoadoutItemReplacementMapping** m_data;
};




struct DynArray_EntityTemperatureResourceHeatGeneration {
    struct EntityTemperatureResourceHeatGeneration** m_data;
};




struct DynArray_SecurityClearance_OutfitRequirementDef {
    struct SecurityClearance_OutfitRequirementDef** m_data;
};




struct DynArray_AnimatedAction {
    struct AnimatedAction** m_data;
};




struct DynArray_AnimationControlActorIK {
    struct AnimationControlActorIK** m_data;
};




struct DynArray_CinematicFlythroughPoint {
    struct CinematicFlythroughPoint** m_data;
};




struct DynArray_TQSInput {
    struct TQSInput** m_data;
};




struct DynArray_IObservableExtender {
    struct IObservableExtender** m_data;
};




struct DynArray_ActorStatusPreset {
    struct ActorStatusPreset** m_data;
};




struct DynArray_Vec3 {
    struct Vec3** m_data;
};




struct DynArray_ActorLookAheadPoint {
    struct ActorLookAheadPoint** m_data;
};




struct DynArray_SCarryableIKInteraction {
    struct SCarryableIKInteraction** m_data;
};




struct DynArray_DefaultPlayerLoadoutEntitlementParams {
    struct DefaultPlayerLoadoutEntitlementParams** m_data;
};




struct DynArray_ContactHighlightStateParams {
    struct ContactHighlightStateParams** m_data;
};




struct DynArray_SMisfireCondition {
    struct SMisfireCondition** m_data;
};




struct DynArray_LegacyCraftingOutput_Base {
    struct LegacyCraftingOutput_Base** m_data;
};




struct DynArray_SOrdnanceEmissionsParams {
    struct SOrdnanceEmissionsParams** m_data;
};




struct DynArray_GeomFont_LetterNode {
    struct GeomFont_LetterNode** m_data;
};




struct DynArray_SMovableGrip {
    struct SMovableGrip** m_data;
};




struct DynArray_SMobiGlasPersonalStatusSkillsEntry {
    struct SMobiGlasPersonalStatusSkillsEntry** m_data;
};




struct DynArray_PlanetOceanDepthAssignment {
    struct PlanetOceanDepthAssignment** m_data;
};




struct DynArray_FoleyBone {
    struct FoleyBone** m_data;
};




struct DynArray_BaseService {
    struct BaseService** m_data;
};




struct DynArray_DrugEfficacyConfigForItemSubTypeBase {
    struct DrugEfficacyConfigForItemSubTypeBase** m_data;
};




struct DynArray_SEntityTraversingTargetPath {
    struct SEntityTraversingTargetPath** m_data;
};




struct DynArray_ProcAimBaseJointTypeConfig {
    struct ProcAimBaseJointTypeConfig** m_data;
};




struct DynArray_SSequencerEntityDragTaskParams {
    struct SSequencerEntityDragTaskParams** m_data;
};




struct DynArray_SSequencerDespawnerTaskParams {
    struct SSequencerDespawnerTaskParams** m_data;
};




struct DynArray_SHackingAIDecisionParams {
    struct SHackingAIDecisionParams** m_data;
};




struct DynArray_CargoResourceAllocation {
    struct CargoResourceAllocation** m_data;
};




struct DynArray_LightStatusMultiplier {
    struct LightStatusMultiplier** m_data;
};




struct DynArray_ConsumableContent {
    struct ConsumableContent** m_data;
};




struct DynArray_RoomExtension {
    struct RoomExtension** m_data;
};




struct DynArray_SConditionalWeaponAction {
    struct SConditionalWeaponAction** m_data;
};




struct DynArray_PlacementValidator {
    struct PlacementValidator** m_data;
};




struct DynArray_ItemPortTagsElement {
    struct ItemPortTagsElement** m_data;
};




struct DynArray_StatusMaskedRetriggerPreset {
    struct StatusMaskedRetriggerPreset** m_data;
};




struct DynArray_SApplicationFormRelationParams {
    struct SApplicationFormRelationParams** m_data;
};




struct DynArray_SAnimationScopeContext {
    struct SAnimationScopeContext** m_data;
};




struct DynArray_LoadoutEditorAdditionalParams {
    struct LoadoutEditorAdditionalParams** m_data;
};




struct DynArray_SControlledEntityStaticTransformParams {
    struct SControlledEntityStaticTransformParams** m_data;
};




struct DynArray_SEACriticalMessageDef {
    struct SEACriticalMessageDef** m_data;
};




struct DynArray_PlayerUsableItemPort {
    struct PlayerUsableItemPort** m_data;
};




struct DynArray_BuildingBlocks_FontReplacementPair {
    struct BuildingBlocks_FontReplacementPair** m_data;
};




struct DynArray_WeightedLootArchetype {
    struct WeightedLootArchetype** m_data;
};




struct DynArray_ScreenEffects_Param {
    struct ScreenEffects_Param** m_data;
};




struct DynArray_PlayerUsableView {
    struct PlayerUsableView** m_data;
};




struct DynArray_SpawnDescription_Entity {
    struct SpawnDescription_Entity** m_data;
};




struct DynArray_ContractIntParam {
    struct ContractIntParam** m_data;
};




struct DynArray_SActorForceReactionLeanBoneDef {
    struct SActorForceReactionLeanBoneDef** m_data;
};




struct DynArray_MissionFlowTrigger {
    struct MissionFlowTrigger** m_data;
};




struct DynArray_BuildingBlocks_NumberCompareCondition {
    struct BuildingBlocks_NumberCompareCondition** m_data;
};




struct DynArray_MeshFieldGeom {
    struct MeshFieldGeom** m_data;
};




struct DynArray_ProceduralLayoutNode_Base {
    struct ProceduralLayoutNode_Base** m_data;
};




struct DynArray_WeatherEffects_Asteroid {
    struct WeatherEffects_Asteroid** m_data;
};




struct DynArray_ItemResourceNetworkPowerModifier {
    struct ItemResourceNetworkPowerModifier** m_data;
};




struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect {
    struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect** m_data;
};




struct DynArray_UIAudioEvent {
    struct UIAudioEvent** m_data;
};




struct DynArray_CraftingGameplayProperty_Base {
    struct CraftingGameplayProperty_Base** m_data;
};




struct DynArray_SWeaponAudioReportEnvironment {
    struct SWeaponAudioReportEnvironment** m_data;
};




struct DynArray_PersonalThoughtOption {
    struct PersonalThoughtOption** m_data;
};




struct DynArray_SReputationStandingRewardBonusParams {
    struct SReputationStandingRewardBonusParams** m_data;
};




struct DynArray_BuildingBlocks_IntegerLocalizedPair {
    struct BuildingBlocks_IntegerLocalizedPair** m_data;
};




struct DynArray_CommunicationVariation {
    struct CommunicationVariation** m_data;
};




struct DynArray_AbilityBreathAction {
    struct AbilityBreathAction** m_data;
};




struct DynArray_ResourceLinkedInteractionState {
    struct ResourceLinkedInteractionState** m_data;
};




struct DynArray_ResourceContainerDefaultCompositionEntry {
    struct ResourceContainerDefaultCompositionEntry** m_data;
};




struct DynArray_CockpitRuleBase {
    struct CockpitRuleBase** m_data;
};




struct DynArray_DebugLoadoutKit {
    struct DebugLoadoutKit** m_data;
};




struct DynArray_HeadMotionConfig {
    struct HeadMotionConfig** m_data;
};




struct DynArray_SEntityEffectSystem_UIOwnerTagEffect {
    struct SEntityEffectSystem_UIOwnerTagEffect** m_data;
};




struct DynArray_SHelmetLinkedState {
    struct SHelmetLinkedState** m_data;
};




struct DynArray_SActorForceReactionStaggerTagConfig {
    struct SActorForceReactionStaggerTagConfig** m_data;
};




struct DynArray_DefaultActionDescriptionOverride {
    struct DefaultActionDescriptionOverride** m_data;
};




struct DynArray_CameraLensGhostInstance {
    struct CameraLensGhostInstance** m_data;
};




struct DynArray_HandholdAttachmentTriggerParams {
    struct HandholdAttachmentTriggerParams** m_data;
};




struct DynArray_SWeaponAimableAnglesParams {
    struct SWeaponAimableAnglesParams** m_data;
};




struct DynArray_SEALoadoutAttachment {
    struct SEALoadoutAttachment** m_data;
};




struct DynArray_CargoResource {
    struct CargoResource** m_data;
};




struct DynArray_BlobVFXDistanceParams {
    struct BlobVFXDistanceParams** m_data;
};




struct DynArray_TakeDownParams {
    struct TakeDownParams** m_data;
};




struct DynArray_ActorLookAheadRoll {
    struct ActorLookAheadRoll** m_data;
};




struct DynArray_ShipWideAudioObject {
    struct ShipWideAudioObject** m_data;
};




struct DynArray_UseChannelArchetype {
    struct UseChannelArchetype** m_data;
};




struct DynArray_ThrusterGimbalState {
    struct ThrusterGimbalState** m_data;
};




struct DynArray_CraftingBlueprintTier_Base {
    struct CraftingBlueprintTier_Base** m_data;
};




struct DynArray_ActorSomaticShakeConfig {
    struct ActorSomaticShakeConfig** m_data;
};




struct DynArray_InventoryLocation {
    struct InventoryLocation** m_data;
};




struct DynArray_SWeaponAttachmentItemPort {
    struct SWeaponAttachmentItemPort** m_data;
};




struct DynArray_MineableCompositionPart {
    struct MineableCompositionPart** m_data;
};




struct DynArray_SpecialEventManufacturer {
    struct SpecialEventManufacturer** m_data;
};




struct DynArray_SandboxTriggerBaseDef {
    struct SandboxTriggerBaseDef** m_data;
};




struct DynArray_BuildingBlocks_ColorPicker {
    struct BuildingBlocks_ColorPicker** m_data;
};




struct DynArray_IntUserVariableTask {
    struct IntUserVariableTask** m_data;
};




struct DynArray_EntityComponentEffects_Test_Tag {
    struct EntityComponentEffects_Test_Tag** m_data;
};




struct DynArray_SScoreboardStat {
    struct SScoreboardStat** m_data;
};




struct DynArray_ProceduralLandingFilter {
    struct ProceduralLandingFilter** m_data;
};




struct DynArray_DeltaSignatureSpikeParams {
    struct DeltaSignatureSpikeParams** m_data;
};




struct DynArray_SActorForceReactionFlinchRangeDef {
    struct SActorForceReactionFlinchRangeDef** m_data;
};




struct DynArray_BoneCounterRotateConfig {
    struct BoneCounterRotateConfig** m_data;
};




struct DynArray_ContractStringParam {
    struct ContractStringParam** m_data;
};




struct DynArray_SCharacterCustomizerRandomColorDef {
    struct SCharacterCustomizerRandomColorDef** m_data;
};




struct DynArray_SAccoladeRequirement {
    struct SAccoladeRequirement** m_data;
};




struct DynArray_ItemTypeCategory {
    struct ItemTypeCategory** m_data;
};




struct DynArray_Range {
    struct Range** m_data;
};




struct DynArray_BuildingBlocks_StringStringPair {
    struct BuildingBlocks_StringStringPair** m_data;
};




struct DynArray_SMusicTagBehaviour {
    struct SMusicTagBehaviour** m_data;
};




struct DynArray_MissionFailConditionParams {
    struct MissionFailConditionParams** m_data;
};




struct DynArray_DifficultyModifierRange {
    struct DifficultyModifierRange** m_data;
};




struct DynArray_ContextualCommunicationCondition {
    struct ContextualCommunicationCondition** m_data;
};




struct DynArray_PlacedSurfaceEffects_EmitterEntry {
    struct PlacedSurfaceEffects_EmitterEntry** m_data;
};




struct DynArray_SCInteractionJournalEntryParams {
    struct SCInteractionJournalEntryParams** m_data;
};




struct DynArray_HealthIconStatusEffect {
    struct HealthIconStatusEffect** m_data;
};




struct DynArray_SMisfireEventParams {
    struct SMisfireEventParams** m_data;
};




struct DynArray_TimeTrialSplit {
    struct TimeTrialSplit** m_data;
};




struct DynArray_ConsumableHelpers {
    struct ConsumableHelpers** m_data;
};




struct DynArray_SRGB8 {
    struct SRGB8** m_data;
};




struct DynArray_AudioEnvironmentFeedbackZoneProcess {
    struct AudioEnvironmentFeedbackZoneProcess** m_data;
};




struct DynArray_SToolArmDeployCondition_Base {
    struct SToolArmDeployCondition_Base** m_data;
};




struct DynArray_UsableChannelInputAction {
    struct UsableChannelInputAction** m_data;
};




struct DynArray_ResourceTypeProperties {
    struct ResourceTypeProperties** m_data;
};




struct DynArray_LookAtType {
    struct LookAtType** m_data;
};




struct DynArray_ScanCustomDataTagEntry {
    struct ScanCustomDataTagEntry** m_data;
};




struct DynArray_SEffectInputParamsParticle {
    struct SEffectInputParamsParticle** m_data;
};




struct DynArray_LadderAnimationOffset {
    struct LadderAnimationOffset** m_data;
};




struct DynArray_SActorForceReactionStaggerRangeDef {
    struct SActorForceReactionStaggerRangeDef** m_data;
};




struct DynArray_AudioValueOutputBehaviour {
    struct AudioValueOutputBehaviour** m_data;
};




struct DynArray_SHackingThreatLevelConditionParams {
    struct SHackingThreatLevelConditionParams** m_data;
};




struct DynArray_RGB {
    struct RGB** m_data;
};




struct DynArray_VisibilityCondition {
    struct VisibilityCondition** m_data;
};




struct DynArray_EntityComponentEffects_Test_Trigger {
    struct EntityComponentEffects_Test_Trigger** m_data;
};




struct DynArray_DateTimeSchedule {
    struct DateTimeSchedule** m_data;
};




struct DynArray_ScanEvaluationInfractionSettings {
    struct ScanEvaluationInfractionSettings** m_data;
};




struct DynArray_SItemShopARItemPortParams {
    struct SItemShopARItemPortParams** m_data;
};




struct DynArray_ProceduralPlanetAudioTagAndEvent {
    struct ProceduralPlanetAudioTagAndEvent** m_data;
};




struct DynArray_DialogueBundleEntry {
    struct DialogueBundleEntry** m_data;
};




struct DynArray_SSpawnEntity {
    struct SSpawnEntity** m_data;
};




struct DynArray_EntityComponentEffects_Test_Link {
    struct EntityComponentEffects_Test_Link** m_data;
};




struct DynArray_RadarContactTypeEntry {
    struct RadarContactTypeEntry** m_data;
};




struct DynArray_Marker_AbilityBase {
    struct Marker_AbilityBase** m_data;
};




struct DynArray_SDynamicDifficultyPointsPerEvent {
    struct SDynamicDifficultyPointsPerEvent** m_data;
};




struct DynArray_ActorStatusUIWarningEntry {
    struct ActorStatusUIWarningEntry** m_data;
};




struct DynArray_OrganizationRelationshipParams {
    struct OrganizationRelationshipParams** m_data;
};




struct DynArray_StatusCost {
    struct StatusCost** m_data;
};




struct DynArray_LegacyCrafterContainerPort {
    struct LegacyCrafterContainerPort** m_data;
};




struct DynArray_BuildingBlocks_StaticVariableBase {
    struct BuildingBlocks_StaticVariableBase** m_data;
};




struct DynArray_EntityAudioControllerTypeManagementParams {
    struct EntityAudioControllerTypeManagementParams** m_data;
};




struct DynArray_EAPatchNoteParams {
    struct EAPatchNoteParams** m_data;
};




struct DynArray_SCItemTurretMovementTagName {
    struct SCItemTurretMovementTagName** m_data;
};




struct DynArray_SCItemControlCondition_Base {
    struct SCItemControlCondition_Base** m_data;
};




struct DynArray_WheelAudioSurfaceMapping {
    struct WheelAudioSurfaceMapping** m_data;
};




struct DynArray_SecurityNetworkProtocolOverride {
    struct SecurityNetworkProtocolOverride** m_data;
};




struct DynArray_ContractResult_CompletionTag {
    struct ContractResult_CompletionTag** m_data;
};




struct DynArray_SEntityEffectSystem_PropertyModifier {
    struct SEntityEffectSystem_PropertyModifier** m_data;
};




struct DynArray_PersonalThoughtCameraEffectsParams {
    struct PersonalThoughtCameraEffectsParams** m_data;
};




struct DynArray_MinCompletionTags {
    struct MinCompletionTags** m_data;
};




struct DynArray_MissionObjective {
    struct MissionObjective** m_data;
};




struct DynArray_UIOwnerContextTransitionPair {
    struct UIOwnerContextTransitionPair** m_data;
};




struct DynArray_ProceduralPlanetAudioTagAndRtpc {
    struct ProceduralPlanetAudioTagAndRtpc** m_data;
};




struct DynArray_BuildingBlocks_AspectRatioOption {
    struct BuildingBlocks_AspectRatioOption** m_data;
};




struct DynArray_BuildingBlocks_BindingsNumberBase {
    struct BuildingBlocks_BindingsNumberBase** m_data;
};




struct DynArray_ScanDisplaySortInfoParams {
    struct ScanDisplaySortInfoParams** m_data;
};




struct DynArray_StatusPriorityBase {
    struct StatusPriorityBase** m_data;
};




struct DynArray_SReputationMissionRequirementExpressionElement {
    struct SReputationMissionRequirementExpressionElement** m_data;
};




struct DynArray_SEntityEffectSystem_UIOwnerTriggerEffect {
    struct SEntityEffectSystem_UIOwnerTriggerEffect** m_data;
};




struct DynArray_CraftingCost_Base {
    struct CraftingCost_Base** m_data;
};




struct DynArray_ExtendedNameEntry {
    struct ExtendedNameEntry** m_data;
};




struct DynArray_FactionRelationship {
    struct FactionRelationship** m_data;
};




struct DynArray_WorldDisplay_PlaneEnvironment_Ring {
    struct WorldDisplay_PlaneEnvironment_Ring** m_data;
};




struct DynArray_SVendingMachineItem {
    struct SVendingMachineItem** m_data;
};




struct DynArray_RGBA8 {
    struct RGBA8** m_data;
};




struct DynArray_SEntityTraversingExecuteNodeBase {
    struct SEntityTraversingExecuteNodeBase** m_data;
};




struct DynArray_HandholdGripType {
    struct HandholdGripType** m_data;
};




struct DynArray_BuildingBlocks_TriggerBase {
    struct BuildingBlocks_TriggerBase** m_data;
};




struct DynArray_SEnergyPipeDefinition {
    struct SEnergyPipeDefinition** m_data;
};




struct DynArray_UIWorldDisplayPathParams {
    struct UIWorldDisplayPathParams** m_data;
};




struct DynArray_TQSWeightInput {
    struct TQSWeightInput** m_data;
};




struct DynArray_AnimationGraph_KeyFrame {
    struct AnimationGraph_KeyFrame** m_data;
};




struct DynArray_SInteractionStateTransition {
    struct SInteractionStateTransition** m_data;
};




struct DynArray_CraftingOptionalEntry {
    struct CraftingOptionalEntry** m_data;
};




struct DynArray_MovieClipTransformationInterpolatorParams {
    struct MovieClipTransformationInterpolatorParams** m_data;
};




struct DynArray_SStatusTriggerThresholdLevelModifier {
    struct SStatusTriggerThresholdLevelModifier** m_data;
};




struct DynArray_SHackingCodeErrorEntry {
    struct SHackingCodeErrorEntry** m_data;
};




struct DynArray_SActorLocomotionFidgetSeverityParams {
    struct SActorLocomotionFidgetSeverityParams** m_data;
};




struct DynArray_SWeaponMountGrip {
    struct SWeaponMountGrip** m_data;
};




struct DynArray_SInverseInteractionLinkParams {
    struct SInverseInteractionLinkParams** m_data;
};




struct DynArray_Investigation_Clue {
    struct Investigation_Clue** m_data;
};




struct DynArray_ProcBreathingCurve {
    struct ProcBreathingCurve** m_data;
};




struct DynArray_SCInteractionGeometryMapEntryParams {
    struct SCInteractionGeometryMapEntryParams** m_data;
};




struct DynArray_SScoreEvent {
    struct SScoreEvent** m_data;
};




struct DynArray_RemovableChipValue {
    struct RemovableChipValue** m_data;
};




struct DynArray_OpenInventoryOccupantItemTypeProperties {
    struct OpenInventoryOccupantItemTypeProperties** m_data;
};




struct DynArray_CommodityType {
    struct CommodityType** m_data;
};




struct DynArray_TraversalCostConditionTags {
    struct TraversalCostConditionTags** m_data;
};




struct DynArray_SActorForceReactionTwitchRangeDef {
    struct SActorForceReactionTwitchRangeDef** m_data;
};




struct DynArray_SWeaponModifierParams {
    struct SWeaponModifierParams** m_data;
};




struct DynArray_SActorForceReactionLeanFilterDef {
    struct SActorForceReactionLeanFilterDef** m_data;
};




struct DynArray_UIAudioManufacturer {
    struct UIAudioManufacturer** m_data;
};




struct DynArray_AbstractMissionInitParam {
    struct AbstractMissionInitParam** m_data;
};




struct DynArray_ActorMovementSetTransition {
    struct ActorMovementSetTransition** m_data;
};




struct DynArray_SActorForceReactionCurve {
    struct SActorForceReactionCurve** m_data;
};




struct DynArray_AudioSignalRtpc {
    struct AudioSignalRtpc** m_data;
};




struct DynArray_VehicleEditorPortsWithItemData {
    struct VehicleEditorPortsWithItemData** m_data;
};




struct DynArray_SCItemTurretStandardAngleLimitTagOverwriteParams {
    struct SCItemTurretStandardAngleLimitTagOverwriteParams** m_data;
};




struct DynArray_ActorLookLimitsStateFilter {
    struct ActorLookLimitsStateFilter** m_data;
};




struct DynArray_AIVisualFieldParams {
    struct AIVisualFieldParams** m_data;
};




struct DynArray_SChatChannelTypeBase {
    struct SChatChannelTypeBase** m_data;
};




struct DynArray_FactionPalette {
    struct FactionPalette** m_data;
};




struct DynArray_RadarSignatureCategoryEntry {
    struct RadarSignatureCategoryEntry** m_data;
};




struct DynArray_InteractionConditionParams {
    struct InteractionConditionParams** m_data;
};




struct DynArray_TagTrigger {
    struct TagTrigger** m_data;
};




struct DynArray_SCharacterCustomizerHairLengthEntry {
    struct SCharacterCustomizerHairLengthEntry** m_data;
};




struct DynArray_SItemPortRuleDef {
    struct SItemPortRuleDef** m_data;
};




struct DynArray_SGasMass {
    struct SGasMass** m_data;
};




struct DynArray_SRenderToTextureRenderLayerParams {
    struct SRenderToTextureRenderLayerParams** m_data;
};




struct DynArray_Marker_ShowRule {
    struct Marker_ShowRule** m_data;
};




struct DynArray_SCItemTurretMovementParams {
    struct SCItemTurretMovementParams** m_data;
};




struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect {
    struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect** m_data;
};




struct DynArray_BindingsOperations_IntegerStringCanvasPair {
    struct BindingsOperations_IntegerStringCanvasPair** m_data;
};




struct DynArray_SurfaceRaindrops_Emitter {
    struct SurfaceRaindrops_Emitter** m_data;
};




struct DynArray_SLoadoutInventoryItem {
    struct SLoadoutInventoryItem** m_data;
};




struct DynArray_ResourceRangeParams {
    struct ResourceRangeParams** m_data;
};




struct DynArray_ItemResourceConversionPair {
    struct ItemResourceConversionPair** m_data;
};




struct DynArray_FloatUserVariableTask {
    struct FloatUserVariableTask** m_data;
};




struct DynArray_EATransportTransitionGroupParams {
    struct EATransportTransitionGroupParams** m_data;
};




struct DynArray_BuildingBlocks_NumberTagPair {
    struct BuildingBlocks_NumberTagPair** m_data;
};




struct DynArray_SEASpawnLocationVehicleSeatSlot {
    struct SEASpawnLocationVehicleSeatSlot** m_data;
};




struct DynArray_StatusEffectTrigger {
    struct StatusEffectTrigger** m_data;
};




struct DynArray_ConversationNode_Base {
    struct ConversationNode_Base** m_data;
};




struct DynArray_EventDispatcher {
    struct EventDispatcher** m_data;
};




struct DynArray_HandholdSharedInteractionLink {
    struct HandholdSharedInteractionLink** m_data;
};




struct DynArray_PhysicalAudioCollisionTrigger {
    struct PhysicalAudioCollisionTrigger** m_data;
};




struct DynArray_InnerThought_CycleAnimBase {
    struct InnerThought_CycleAnimBase** m_data;
};




struct DynArray_LoadoutInfo {
    struct LoadoutInfo** m_data;
};




struct DynArray_ObjectivePropertyBase {
    struct ObjectivePropertyBase** m_data;
};




struct DynArray_ScoreMessage {
    struct ScoreMessage** m_data;
};




struct DynArray_PlayerChoice_SoftwareCursorEntry {
    struct PlayerChoice_SoftwareCursorEntry** m_data;
};




struct DynArray_SMatchNetworkTypeParams {
    struct SMatchNetworkTypeParams** m_data;
};




struct DynArray_LongTermPersistenceWhiteListSubTypeEntry {
    struct LongTermPersistenceWhiteListSubTypeEntry** m_data;
};




struct DynArray_PlayerChoice_InteractionModifier {
    struct PlayerChoice_InteractionModifier** m_data;
};




struct DynArray_SInspectAnimationParams {
    struct SInspectAnimationParams** m_data;
};




struct DynArray_VehicleLandingGear {
    struct VehicleLandingGear** m_data;
};




struct DynArray_AudioRtpcWithBehaviour {
    struct AudioRtpcWithBehaviour** m_data;
};




struct DynArray_SWeaponParticleEffectParams {
    struct SWeaponParticleEffectParams** m_data;
};




struct DynArray_BuildingBlocks_NumberStringPair {
    struct BuildingBlocks_NumberStringPair** m_data;
};




struct DynArray_OrbitEntityCinematicEvent {
    struct OrbitEntityCinematicEvent** m_data;
};




struct DynArray_SCurve {
    struct SCurve** m_data;
};




struct DynArray_HealthDamageState {
    struct HealthDamageState** m_data;
};




struct DynArray_SSequencerItemActionTask {
    struct SSequencerItemActionTask** m_data;
};




struct DynArray_InputAction {
    struct InputAction** m_data;
};




struct DynArray_SecurityClearanceToken {
    struct SecurityClearanceToken** m_data;
};




struct DynArray_AttackCategoryParams {
    struct AttackCategoryParams** m_data;
};




struct DynArray_PostureData {
    struct PostureData** m_data;
};




struct DynArray_SEAObjectiveMarkerStateSettings {
    struct SEAObjectiveMarkerStateSettings** m_data;
};




struct DynArray_LandingAnimationSetup {
    struct LandingAnimationSetup** m_data;
};




struct DynArray_UIStateColor_Threshold {
    struct UIStateColor_Threshold** m_data;
};




struct DynArray_PartialContractRewardRepAdjustment {
    struct PartialContractRewardRepAdjustment** m_data;
};




struct DynArray_SReputationContextBBEntityListParams {
    struct SReputationContextBBEntityListParams** m_data;
};




struct DynArray_ActorRestrainPerAttackerConfig {
    struct ActorRestrainPerAttackerConfig** m_data;
};




struct DynArray_ActionStaminaCosts {
    struct ActionStaminaCosts** m_data;
};




struct DynArray_ItemResourceNetworkTypeUIData {
    struct ItemResourceNetworkTypeUIData** m_data;
};




struct DynArray_EntitlementItemType {
    struct EntitlementItemType** m_data;
};




struct DynArray_ArmouryItemStat {
    struct ArmouryItemStat** m_data;
};




struct DynArray_ItemAwardWeightingsBase {
    struct ItemAwardWeightingsBase** m_data;
};




struct DynArray_SSalvageRepairItemTypeLocalizationPair {
    struct SSalvageRepairItemTypeLocalizationPair** m_data;
};




struct DynArray_SShieldResistance {
    struct SShieldResistance** m_data;
};




struct DynArray_SSecondaryAmmoContainerParams {
    struct SSecondaryAmmoContainerParams** m_data;
};




struct DynArray_LocationMissionLimit {
    struct LocationMissionLimit** m_data;
};




struct DynArray_SEAPlayerLoadoutSnapshotEntry {
    struct SEAPlayerLoadoutSnapshotEntry** m_data;
};




struct DynArray_ActorFallOverlayNode {
    struct ActorFallOverlayNode** m_data;
};




struct DynArray_SWeaponAttachmentIconPair {
    struct SWeaponAttachmentIconPair** m_data;
};




struct DynArray_FireHazardSurfaceProperties {
    struct FireHazardSurfaceProperties** m_data;
};




struct DynArray_CraftingMaterialStatTypeRecord {
    struct CraftingMaterialStatTypeRecord** m_data;
};




struct DynArray_SCItemRadarSignatureDetection {
    struct SCItemRadarSignatureDetection** m_data;
};




struct DynArray_PlayerChoice_Option {
    struct PlayerChoice_Option** m_data;
};




struct DynArray_CapsuleFieldGeom {
    struct CapsuleFieldGeom** m_data;
};




struct DynArray_SSequencerPlayerUsableTaskParams {
    struct SSequencerPlayerUsableTaskParams** m_data;
};




struct DynArray_SEAActionItemMessageDef {
    struct SEAActionItemMessageDef** m_data;
};




struct DynArray_SurfaceAudioProperties {
    struct SurfaceAudioProperties** m_data;
};




struct DynArray_EntityReferenceDef {
    struct EntityReferenceDef** m_data;
};




struct DynArray_StarMapAsteroidRing {
    struct StarMapAsteroidRing** m_data;
};




struct DynArray_LoadoutKit {
    struct LoadoutKit** m_data;
};




struct DynArray_SSequencerTurretSetLimiterTagTaskParams {
    struct SSequencerTurretSetLimiterTagTaskParams** m_data;
};




struct DynArray_SAttachableEntityParams {
    struct SAttachableEntityParams** m_data;
};




struct DynArray_AudioFootstepSurfaceMapping {
    struct AudioFootstepSurfaceMapping** m_data;
};




struct DynArray_ChatManagerColor {
    struct ChatManagerColor** m_data;
};




struct DynArray_SHideAmmoAttachmentParams {
    struct SHideAmmoAttachmentParams** m_data;
};




struct DynArray_MotionConnection {
    struct MotionConnection** m_data;
};




struct DynArray_RadarDeltaSignatureEntry {
    struct RadarDeltaSignatureEntry** m_data;
};




struct DynArray_SCharacterCustomizerDNAHeadParams {
    struct SCharacterCustomizerDNAHeadParams** m_data;
};




struct DynArray_RadarDeltaSignatureDetectionParams {
    struct RadarDeltaSignatureDetectionParams** m_data;
};




struct DynArray_S42FieldManualContentPiece {
    struct S42FieldManualContentPiece** m_data;
};




struct DynArray_BuildingBlocks_ContextMenuItem {
    struct BuildingBlocks_ContextMenuItem** m_data;
};




struct DynArray_MobiGlasPersonalMessage_ShipChatScheduleEntry {
    struct MobiGlasPersonalMessage_ShipChatScheduleEntry** m_data;
};




struct DynArray_EAScoringAssistThreshold {
    struct EAScoringAssistThreshold** m_data;
};




struct DynArray_SCItemDisplayScreenStateParams {
    struct SCItemDisplayScreenStateParams** m_data;
};




struct DynArray_ProceduralAnimationBone {
    struct ProceduralAnimationBone** m_data;
};




struct DynArray_PlanetOceanAudioCheckpoint {
    struct PlanetOceanAudioCheckpoint** m_data;
};




struct DynArray_CraftingGameplayPropertyImplValueRange_Int {
    struct CraftingGameplayPropertyImplValueRange_Int** m_data;
};




struct DynArray_SRGBA8 {
    struct SRGBA8** m_data;
};




struct DynArray_SSequencerAnimationTaskParamsBase {
    struct SSequencerAnimationTaskParamsBase** m_data;
};




struct DynArray_DeliveryTarget {
    struct DeliveryTarget** m_data;
};




struct DynArray_LegacyCraftingRecipeDef_Base {
    struct LegacyCraftingRecipeDef_Base** m_data;
};




struct DynArray_CommoditySubtype {
    struct CommoditySubtype** m_data;
};




struct DynArray_ReputationComparisonRange {
    struct ReputationComparisonRange** m_data;
};




struct DynArray_AsteroidProcedural {
    struct AsteroidProcedural** m_data;
};




struct DynArray_SPrimeableAnimationState {
    struct SPrimeableAnimationState** m_data;
};




struct DynArray_SHackingCodeCommandParam {
    struct SHackingCodeCommandParam** m_data;
};




struct DynArray_ImpoundingDefinition {
    struct ImpoundingDefinition** m_data;
};




struct DynArray_ContractGeneratorHandlerBase {
    struct ContractGeneratorHandlerBase** m_data;
};




struct DynArray_HudColor_Entry {
    struct HudColor_Entry** m_data;
};




struct DynArray_StayTimeMinOverrideByDockingClass {
    struct StayTimeMinOverrideByDockingClass** m_data;
};




struct DynArray_SpawnDescriptionEntry {
    struct SpawnDescriptionEntry** m_data;
};




struct DynArray_SubItemScanStatusMappings {
    struct SubItemScanStatusMappings** m_data;
};




struct DynArray_CraftingMaterialStatEntry {
    struct CraftingMaterialStatEntry** m_data;
};




struct DynArray_SSequencerUsableTask {
    struct SSequencerUsableTask** m_data;
};




struct DynArray_ContractPropertyTagReplacement {
    struct ContractPropertyTagReplacement** m_data;
};




struct DynArray_DataForgeComponentParams {
    struct DataForgeComponentParams** m_data;
};




struct DynArray_SCItemObservableScreenViewParams {
    struct SCItemObservableScreenViewParams** m_data;
};




struct DynArray_JumpDriveStateMusicMap {
    struct JumpDriveStateMusicMap** m_data;
};




struct DynArray_Marker_ShowRuleMapDisplayMode {
    struct Marker_ShowRuleMapDisplayMode** m_data;
};




struct DynArray_SCOptionalThrustParams {
    struct SCOptionalThrustParams** m_data;
};




struct DynArray_SSequencerCarryableTaskParams {
    struct SSequencerCarryableTaskParams** m_data;
};




struct DynArray_MeleeFragInfo {
    struct MeleeFragInfo** m_data;
};




struct DynArray_PointOfInterestData {
    struct PointOfInterestData** m_data;
};




struct DynArray_FriendlyFireReactionOverride {
    struct FriendlyFireReactionOverride** m_data;
};




struct DynArray_HandholdInteractionPointLink {
    struct HandholdInteractionPointLink** m_data;
};




struct DynArray_CargoResourceDistribution {
    struct CargoResourceDistribution** m_data;
};




struct DynArray_ActorStanceSpeedsInfo {
    struct ActorStanceSpeedsInfo** m_data;
};




struct DynArray_UnitTest_BaseTest {
    struct UnitTest_BaseTest** m_data;
};




struct DynArray_ScanDisplayConditionBaseParams {
    struct ScanDisplayConditionBaseParams** m_data;
};




struct DynArray_ItemThrottleParamsBase {
    struct ItemThrottleParamsBase** m_data;
};




struct DynArray_ActorStatusEffect {
    struct ActorStatusEffect** m_data;
};




struct DynArray_ReputationRewardBaseDef {
    struct ReputationRewardBaseDef** m_data;
};




struct DynArray_UIAudioParameter {
    struct UIAudioParameter** m_data;
};




struct DynArray_SMFD {
    struct SMFD** m_data;
};




struct DynArray_HarvestableGeometry {
    struct HarvestableGeometry** m_data;
};




struct DynArray_AudioBreathStyleCondition {
    struct AudioBreathStyleCondition** m_data;
};




struct DynArray_ItemResourceDeltaBase {
    struct ItemResourceDeltaBase** m_data;
};




struct DynArray_ControlHintCondition {
    struct ControlHintCondition** m_data;
};




struct DynArray_BuildingBlocks_BindingsIntegerBase {
    struct BuildingBlocks_BindingsIntegerBase** m_data;
};




struct DynArray_SCameraViewStateOrbit {
    struct SCameraViewStateOrbit** m_data;
};




struct DynArray_SModifierSignaturesEntry {
    struct SModifierSignaturesEntry** m_data;
};




struct DynArray_BuildingBlocks_TagStringPair {
    struct BuildingBlocks_TagStringPair** m_data;
};




struct DynArray_ObjectiveMarkerLocation {
    struct ObjectiveMarkerLocation** m_data;
};




struct DynArray_SCustomizableMaterialEntry {
    struct SCustomizableMaterialEntry** m_data;
};




struct DynArray_SMobiGlasLauncherApp {
    struct SMobiGlasLauncherApp** m_data;
};




struct DynArray_FoleyCollision {
    struct FoleyCollision** m_data;
};




struct DynArray_SGalactapediaEntry {
    struct SGalactapediaEntry** m_data;
};




struct DynArray_FlashVariableObject {
    struct FlashVariableObject** m_data;
};




struct DynArray_ZeroGTraversalConnection {
    struct ZeroGTraversalConnection** m_data;
};




struct DynArray_SDockingAnimatorStageTriggerParams {
    struct SDockingAnimatorStageTriggerParams** m_data;
};




struct DynArray_EnvironmentFeedbackAudioObject {
    struct EnvironmentFeedbackAudioObject** m_data;
};




struct DynArray_SecurityNetworkVariable {
    struct SecurityNetworkVariable** m_data;
};




struct DynArray_ActorStanceDimensionsInfo {
    struct ActorStanceDimensionsInfo** m_data;
};




struct DynArray_StarMapObjectType {
    struct StarMapObjectType** m_data;
};




struct DynArray_QuickAccessWheelElement {
    struct QuickAccessWheelElement** m_data;
};




struct DynArray_LeanConnection {
    struct LeanConnection** m_data;
};




struct DynArray_LogoutInteractionParams {
    struct LogoutInteractionParams** m_data;
};




struct DynArray_EAPickupSpecialEventOverrideParams {
    struct EAPickupSpecialEventOverrideParams** m_data;
};




struct DynArray_EAObjectiveInteractionDef {
    struct EAObjectiveInteractionDef** m_data;
};




struct DynArray_QuantumStateMusicMap {
    struct QuantumStateMusicMap** m_data;
};




struct DynArray_Infraction {
    struct Infraction** m_data;
};




struct DynArray_ItemSuitArmorSignatureParams {
    struct ItemSuitArmorSignatureParams** m_data;
};




struct DynArray_CtxGraph_Component {
    struct CtxGraph_Component** m_data;
};




struct DynArray_MissionStringVariant {
    struct MissionStringVariant** m_data;
};




struct DynArray_BuildingBlocks_IntegerStringPair {
    struct BuildingBlocks_IntegerStringPair** m_data;
};




struct DynArray_UsableItemPort {
    struct UsableItemPort** m_data;
};




struct DynArray_DefaultActionsEntityEntryCondition {
    struct DefaultActionsEntityEntryCondition** m_data;
};




struct DynArray_SMannequinTagParams {
    struct SMannequinTagParams** m_data;
};




struct DynArray_SActorStanceDimensionsExtraDef {
    struct SActorStanceDimensionsExtraDef** m_data;
};




struct DynArray_mobiGlasAppRef {
    struct mobiGlasAppRef** m_data;
};




struct DynArray_StatInfluence {
    struct StatInfluence** m_data;
};




struct DynArray_MissionLocationParams {
    struct MissionLocationParams** m_data;
};




struct DynArray_SCharacterCustomizerTextureParams {
    struct SCharacterCustomizerTextureParams** m_data;
};




struct DynArray_Camera {
    struct Camera** m_data;
};




struct DynArray_PortRefillData {
    struct PortRefillData** m_data;
};




struct DynArray_SPlayerLoadoutOverride {
    struct SPlayerLoadoutOverride** m_data;
};




struct DynArray_EngineeringStateMessages {
    struct EngineeringStateMessages** m_data;
};




struct DynArray_ArmouryCertificationParams {
    struct ArmouryCertificationParams** m_data;
};




struct DynArray_FiringRangeTimeEntry {
    struct FiringRangeTimeEntry** m_data;
};




struct DynArray_SActorForceReactionFlightDurationConfig {
    struct SActorForceReactionFlightDurationConfig** m_data;
};




struct DynArray_SLinkedInteractionStateTags {
    struct SLinkedInteractionStateTags** m_data;
};




struct DynArray_NavigationTriggerAdapter {
    struct NavigationTriggerAdapter** m_data;
};




struct DynArray_Flash_PaletteEntry {
    struct Flash_PaletteEntry** m_data;
};




struct DynArray_MobiGlasAppDataBase {
    struct MobiGlasAppDataBase** m_data;
};




struct DynArray_MarkerTrackingViewMode {
    struct MarkerTrackingViewMode** m_data;
};




struct DynArray_ContractBoolParam {
    struct ContractBoolParam** m_data;
};




struct DynArray_HudColor_HoloParam {
    struct HudColor_HoloParam** m_data;
};




struct DynArray_SMisfireEffect {
    struct SMisfireEffect** m_data;
};




struct DynArray_SActorCarryConfigTagSwitch {
    struct SActorCarryConfigTagSwitch** m_data;
};




struct DynArray_PowerPool {
    struct PowerPool** m_data;
};




struct DynArray_FormationOffset {
    struct FormationOffset** m_data;
};




struct DynArray_MissionFlowConditionBase {
    struct MissionFlowConditionBase** m_data;
};




struct DynArray_ItemResourceTypeData {
    struct ItemResourceTypeData** m_data;
};




struct DynArray_DefaultActionsEntityState {
    struct DefaultActionsEntityState** m_data;
};




struct DynArray_SItemPortAttachmentPoints {
    struct SItemPortAttachmentPoints** m_data;
};




struct DynArray_ControlFloatInteractiveVariable {
    struct ControlFloatInteractiveVariable** m_data;
};




struct DynArray_MeleeAttackCategoryInfo {
    struct MeleeAttackCategoryInfo** m_data;
};




struct DynArray_SJumpTunnelSectionProbabilityParams {
    struct SJumpTunnelSectionProbabilityParams** m_data;
};




struct DynArray_EntityClassStaticDataParams {
    struct EntityClassStaticDataParams** m_data;
};




struct DynArray_WeightedDialogueBundleEntry {
    struct WeightedDialogueBundleEntry** m_data;
};




struct DynArray_SS42PersonalStatusDrugBuffEffectString {
    struct SS42PersonalStatusDrugBuffEffectString** m_data;
};




struct DynArray_SCEntranceItem {
    struct SCEntranceItem** m_data;
};




struct DynArray_SVehicleItemportInteractionLink {
    struct SVehicleItemportInteractionLink** m_data;
};




struct DynArray_BuildingBlocks_PreviewScreenBase {
    struct BuildingBlocks_PreviewScreenBase** m_data;
};




struct DynArray_SSequencerDefTaskParams {
    struct SSequencerDefTaskParams** m_data;
};




struct DynArray_SMusicValueTagMap {
    struct SMusicValueTagMap** m_data;
};




struct DynArray_SStarGalaWaveParams {
    struct SStarGalaWaveParams** m_data;
};




struct DynArray_ActionRuleParams {
    struct ActionRuleParams** m_data;
};




struct DynArray_Bindings_SubsumptionBroadcastEvent {
    struct Bindings_SubsumptionBroadcastEvent** m_data;
};




struct DynArray_WingmanOrderInfo {
    struct WingmanOrderInfo** m_data;
};




struct DynArray_SPowerUserState {
    struct SPowerUserState** m_data;
};




struct DynArray_SBaseInteractionGameplayTrigger {
    struct SBaseInteractionGameplayTrigger** m_data;
};




struct DynArray_TransitNodeDialogueContext {
    struct TransitNodeDialogueContext** m_data;
};




struct DynArray_SecurityNetworkVariableEffect_Base {
    struct SecurityNetworkVariableEffect_Base** m_data;
};




struct DynArray_SphereFieldGeom {
    struct SphereFieldGeom** m_data;
};




struct DynArray_ItemResourceControlOutputBase {
    struct ItemResourceControlOutputBase** m_data;
};




struct DynArray_MobiGlasAppContent {
    struct MobiGlasAppContent** m_data;
};




struct DynArray_ComponentMigration {
    struct ComponentMigration** m_data;
};




struct DynArray_ActorAimLimitsStateFilter {
    struct ActorAimLimitsStateFilter** m_data;
};




struct DynArray_ChatCommandName {
    struct ChatCommandName** m_data;
};




struct DynArray_AnimationJointBaseRotation {
    struct AnimationJointBaseRotation** m_data;
};




struct DynArray_SInteractionParams {
    struct SInteractionParams** m_data;
};




struct DynArray_MeleeComboChainLink {
    struct MeleeComboChainLink** m_data;
};




struct DynArray_SBeamParticleAudioParams {
    struct SBeamParticleAudioParams** m_data;
};




struct DynArray_SLightStateOverride {
    struct SLightStateOverride** m_data;
};




struct DynArray_InnerThought_LayoutStates {
    struct InnerThought_LayoutStates** m_data;
};




struct DynArray_BlueprintCategoryRecord {
    struct BlueprintCategoryRecord** m_data;
};




struct DynArray_PlayerShipRespawnShipInfo {
    struct PlayerShipRespawnShipInfo** m_data;
};




struct DynArray_SHealingBeamConsumableType {
    struct SHealingBeamConsumableType** m_data;
};




struct DynArray_SHackingCodeSystemLogEntry {
    struct SHackingCodeSystemLogEntry** m_data;
};




struct DynArray_AudioRtpc {
    struct AudioRtpc** m_data;
};




struct DynArray_SGasAtmosphereEntryParams {
    struct SGasAtmosphereEntryParams** m_data;
};




struct DynArray_ConstantDOFPosWeights {
    struct ConstantDOFPosWeights** m_data;
};




struct DynArray_DigitalSignageContent {
    struct DigitalSignageContent** m_data;
};




struct DynArray_UIWorldDisplayInputSoundParams {
    struct UIWorldDisplayInputSoundParams** m_data;
};




struct DynArray_CommsChannelDef {
    struct CommsChannelDef** m_data;
};




struct DynArray_SThrowMode {
    struct SThrowMode** m_data;
};




struct DynArray_BaseSpawnerPrerequisite {
    struct BaseSpawnerPrerequisite** m_data;
};




struct DynArray_JournalEntry {
    struct JournalEntry** m_data;
};




struct DynArray_CustomLookAtBB {
    struct CustomLookAtBB** m_data;
};




struct DynArray_SSequencerItemDoorTaskParams {
    struct SSequencerItemDoorTaskParams** m_data;
};




struct DynArray_SActorDeathPoseVariant {
    struct SActorDeathPoseVariant** m_data;
};




struct DynArray_ControlHint_DisplayInfoSet {
    struct ControlHint_DisplayInfoSet** m_data;
};




struct DynArray_ExtendedNameEntryTextBase {
    struct ExtendedNameEntryTextBase** m_data;
};




struct DynArray_DeltaSignatureSensitivityParams {
    struct DeltaSignatureSensitivityParams** m_data;
};




struct DynArray_StringUserVariableTask {
    struct StringUserVariableTask** m_data;
};




struct DynArray_BindingsOperations_IntegerStringFontStylePair {
    struct BindingsOperations_IntegerStringFontStylePair** m_data;
};




struct DynArray_MusicLogicNode {
    struct MusicLogicNode** m_data;
};




struct DynArray_CameraShopItemOffset {
    struct CameraShopItemOffset** m_data;
};




struct DynArray_SCIGTestBase {
    struct SCIGTestBase** m_data;
};




struct DynArray_SUsableMovementAlignmentParams {
    struct SUsableMovementAlignmentParams** m_data;
};




struct DynArray_PopupParams {
    struct PopupParams** m_data;
};




struct DynArray_SActorForceReactionFilterDef {
    struct SActorForceReactionFilterDef** m_data;
};




struct DynArray_SCIGTestA {
    struct SCIGTestA** m_data;
};




struct DynArray_SManufacturerMFDView {
    struct SManufacturerMFDView** m_data;
};




struct DynArray_BaseItemModifierParams {
    struct BaseItemModifierParams** m_data;
};




struct DynArray_ControlIntInteractiveVariable {
    struct ControlIntInteractiveVariable** m_data;
};




struct DynArray_MotionTurnSetupFiltered {
    struct MotionTurnSetupFiltered** m_data;
};




struct DynArray_SItemPortConnectionParam {
    struct SItemPortConnectionParam** m_data;
};




struct DynArray_LocStringUserVariable {
    struct LocStringUserVariable** m_data;
};




struct DynArray_DrugEfficacyForConsumableType {
    struct DrugEfficacyForConsumableType** m_data;
};




struct DynArray_ChatFilter {
    struct ChatFilter** m_data;
};




struct DynArray_WorldDisplayEnvironmentBase {
    struct WorldDisplayEnvironmentBase** m_data;
};




struct DynArray_LicensedItemModifier {
    struct LicensedItemModifier** m_data;
};




struct DynArray_ContractPrerequisiteBase {
    struct ContractPrerequisiteBase** m_data;
};




struct DynArray_ProceduralLayoutNode_AlternateSubGraphProperties {
    struct ProceduralLayoutNode_AlternateSubGraphProperties** m_data;
};




struct DynArray_ActorStatusBuff {
    struct ActorStatusBuff** m_data;
};




struct DynArray_SCItemClothingHiddenPartsParams {
    struct SCItemClothingHiddenPartsParams** m_data;
};




struct DynArray_SWeightedRewardEntry {
    struct SWeightedRewardEntry** m_data;
};




struct DynArray_Investigation_Suspect {
    struct Investigation_Suspect** m_data;
};




struct DynArray_IntInteractiveVariable {
    struct IntInteractiveVariable** m_data;
};




struct DynArray_EntityEffectSystem_BaseSequencerTask {
    struct EntityEffectSystem_BaseSequencerTask** m_data;
};




struct DynArray_SServiceBeaconDifficultyEntry {
    struct SServiceBeaconDifficultyEntry** m_data;
};




struct DynArray_LinkedStatSetupPreset {
    struct LinkedStatSetupPreset** m_data;
};




struct DynArray_SCDynamicRigLightParams {
    struct SCDynamicRigLightParams** m_data;
};




struct DynArray_BuildingBlocks_StringIntegerPair {
    struct BuildingBlocks_StringIntegerPair** m_data;
};




struct DynArray_NavigationLinkType {
    struct NavigationLinkType** m_data;
};




struct DynArray_LandingSelection {
    struct LandingSelection** m_data;
};




struct DynArray_UI3DDisplayInput {
    struct UI3DDisplayInput** m_data;
};




struct DynArray_BuildingBlocks_IntegerWidgetPairDef {
    struct BuildingBlocks_IntegerWidgetPairDef** m_data;
};




struct DynArray_WeatherEffects_Atmosphere {
    struct WeatherEffects_Atmosphere** m_data;
};




struct DynArray_AnimationVariableLink {
    struct AnimationVariableLink** m_data;
};




struct DynArray_ReputationValueSetting {
    struct ReputationValueSetting** m_data;
};




struct DynArray_INavigationCostVolumeExtender {
    struct INavigationCostVolumeExtender** m_data;
};




struct DynArray_EntryOptionalData_Base {
    struct EntryOptionalData_Base** m_data;
};




struct DynArray_TypeSubtypeParams {
    struct TypeSubtypeParams** m_data;
};




struct DynArray_GlobalResourceAudio {
    struct GlobalResourceAudio** m_data;
};




struct DynArray_DefaultActionDef {
    struct DefaultActionDef** m_data;
};




struct DynArray_ForceFeedbackEffect {
    struct ForceFeedbackEffect** m_data;
};




struct DynArray_HarvestConditionBase {
    struct HarvestConditionBase** m_data;
};




struct DynArray_MissionProperty {
    struct MissionProperty** m_data;
};




struct DynArray_LootGenerationSpecialEventArchetype {
    struct LootGenerationSpecialEventArchetype** m_data;
};




struct DynArray_ConsumableEffect {
    struct ConsumableEffect** m_data;
};




struct DynArray_RGBA {
    struct RGBA** m_data;
};




struct DynArray_SCoreInventoryItem {
    struct SCoreInventoryItem** m_data;
};




struct DynArray_ActorProceduralRecoilSetup {
    struct ActorProceduralRecoilSetup** m_data;
};




struct DynArray_TeamPhaseSettingsDef {
    struct TeamPhaseSettingsDef** m_data;
};




struct DynArray_AudioRtpcWithDefault {
    struct AudioRtpcWithDefault** m_data;
};




struct DynArray_ProceduralPlanetAudioDisturbanceDef {
    struct ProceduralPlanetAudioDisturbanceDef** m_data;
};




struct DynArray_SCItemTurretCustomAngleLimit {
    struct SCItemTurretCustomAngleLimit** m_data;
};




struct DynArray_SpawnDescription_NPCOption {
    struct SpawnDescription_NPCOption** m_data;
};




struct DynArray_CraftingGameplayPropertyImplValueRange_Float {
    struct CraftingGameplayPropertyImplValueRange_Float** m_data;
};




struct DynArray_SpeedThreshold {
    struct SpeedThreshold** m_data;
};




struct DynArray_BuildingBlocks_ComponentParameterInputBase {
    struct BuildingBlocks_ComponentParameterInputBase** m_data;
};




struct DynArray_CommonTacticScores {
    struct CommonTacticScores** m_data;
};




struct DynArray_MobiGlasAppData {
    struct MobiGlasAppData** m_data;
};




struct DynArray_AnimationVariable {
    struct AnimationVariable** m_data;
};




struct DynArray_SHealthInteractionLockParams {
    struct SHealthInteractionLockParams** m_data;
};




struct DynArray_SMastergraphStateOverride {
    struct SMastergraphStateOverride** m_data;
};




struct DynArray_RGB8 {
    struct RGB8** m_data;
};




struct SFortitudeLevelStats {
    uint8_t _pad_0[0x8];
    float xpValue;
    uint8_t _pad_1[0x4];
    struct DynArray_float* modifiers;
    uint8_t _pad_2[0x28];
};




struct STakedownTechniqueLevelStats {
    uint8_t _pad_0[0x8];
    float xpValue;
    uint8_t _pad_1[0x4];
    struct DynArray_float* modifiers;
    uint8_t _pad_2[0x28];
};




struct SReflexLevelStats {
    uint8_t _pad_0[0x8];
    float xpValue;
    uint8_t _pad_1[0x4];
    struct DynArray_float* modifiers;
    uint8_t _pad_2[0x28];
};




struct SPlayerRoleShakeMultipliers {
    uint8_t _pad_0[0x8];
    struct DynArray_float* multipliers;
    uint8_t _pad_1[0x28];
};




struct SStrengthLevelStats {
    uint8_t _pad_0[0x8];
    float xpValue;
    uint8_t _pad_1[0x4];
    struct DynArray_float* modifiers;
    uint8_t _pad_2[0x28];
};




struct SLightStatePreset {
    uint8_t _pad_0[0x8];
    struct CryStringT* tag;
    uint8_t _pad_1[0x8];
    struct DynArray_float* transitionDelays;
    uint8_t _pad_2[0x28];
    float transitionLength;
    _Bool transitionReverse;
    uint8_t transitionStyle;
    _Bool fadeFromBlack;
    uint8_t _pad_3[0x1];
    float delayWhileBlack;
    uint8_t _pad_4[0x4];
};




struct BuildingBlocks_StaticArrayDataNumber {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_float* values;
    uint8_t _pad_2[0x28];
};




struct PingDetectionLevelParams {
    uint8_t _pad_0[0x8];
    struct DynArray_float* contactSensitivityFactors;
    uint8_t _pad_1[0x28];
    struct DynArray_float* blobSensitivityFactors;
    uint8_t _pad_2[0x28];
    struct DynArray_float* pierceFactors;
    uint8_t _pad_3[0x28];
};




struct SVaultingTechniqueLevelStats {
    uint8_t _pad_0[0x8];
    float xpValue;
    uint8_t _pad_1[0x4];
    struct DynArray_float* modifiers;
    uint8_t _pad_2[0x28];
};




struct SFitnessLevelStats {
    uint8_t _pad_0[0x8];
    float xpValue;
    uint8_t _pad_1[0x4];
    struct DynArray_float* modifiers;
    uint8_t _pad_2[0x28];
};




struct FireHazardGlobalIgnition {
    uint8_t _pad_0[0x8];
    float globalIgnitionChanceMultiplier;
    uint8_t _pad_1[0x4];
    struct DynArray_float* explosionChanceMultiplier;
    uint8_t _pad_2[0x28];
    struct DynArray_float* projectileChanceMultiplier;
    uint8_t _pad_3[0x28];
    struct DynArray_float* collisionChanceMultiplier;
    uint8_t _pad_4[0x28];
    float globalFlashIgnitionThresholdMultiplier;
    uint8_t _pad_5[0x4];
    struct DynArray_float* damageTypeIgnitionModifiers;
    uint8_t _pad_6[0x28];
};




struct SVehicleAiDamageModifiers {
    uint8_t _pad_0[0x8];
    struct DynArray_float* modifiers;
    uint8_t _pad_1[0x28];
};




struct HudFeedbackParams {
    uint8_t _pad_0[0x8];
    struct DynArray_float* staminaWarning;
    uint8_t _pad_1[0x28];
    struct DynArray_float* atmosphereQualityWarning;
    uint8_t _pad_2[0x28];
    struct DynArray_float* atmospherePressureWarning;
    uint8_t _pad_3[0x28];
};




struct AIHealthThresholdsConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_float* healthThresholds;
    uint8_t _pad_1[0x28];
};




struct ContractResult_RefundBuyIn {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
    float refundMultiplier;
    uint8_t _pad_2[0x4];
};




struct OcclusionCheckSharedParams {
    uint8_t _pad_0[0x8];
    _Bool enablePassiveDetectionOcclusion;
    uint8_t _pad_1[0x7];
    struct DynArray_bool* enableActiveDetectionOcclusion;
    uint8_t _pad_2[0x28];
};




struct ContractResult_LegacyReputation {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
    struct SReputationAmountParams* contractResultReputationAmounts;
    uint8_t _pad_2[0x48];
};




struct UIV2Markers {
    uint8_t _pad_0[0x8];
    _Bool useNewMarkers;
    _Bool showBoxouts;
    _Bool showBoxoutRTT;
    _Bool useOnlyStandaloneObjectiveMarkers;
    _Bool navpointsIgnoreShowInAllZones;
    _Bool usePUObjectiveLinking;
    uint8_t _pad_1[0x2];
    struct DynArray_bool* useV2Provider;
    uint8_t _pad_2[0x28];
    struct DynArray_bool* useV2TrackerType;
    uint8_t _pad_3[0x28];
};




struct SAimableGameModeRoleParams {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* gimbalModeVariants;
    uint8_t _pad_1[0x28];
    float autoGimbalTrackingAngle;
    _Bool autoGimbalsActAsManualWithoutTrack;
    uint8_t _pad_2[0x3];
    float assistMinTrackingAngle;
    float assistTrackingAngleBuffer;
    _Bool adsDisableAimAssistForFixedMountedWeapons;
    _Bool adsTriggersAdsModes;
    _Bool manualGimbalsAllowAimAssist;
    _Bool preferAssistedModesOnStart;
    _Bool preferManualModesOnStart;
    _Bool preferAutoGimbalIfAvailable;
    uint8_t _pad_3[0x2];
};




struct ContractResult_CalculatedReward {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
};




struct OperatorModeAvailability {
    uint8_t _pad_0[0x8];
    enum ARDataType defaultMode;
    uint8_t _pad_1[0x4];
    struct DynArray_bool* availableModes;
    uint8_t _pad_2[0x28];
};




struct RelayFilterParams {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* allowedResources;
    uint8_t _pad_1[0x28];
};




struct ContractResult_Reward {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
    struct MissionReward* contractReward;
    uint8_t _pad_2[0x28];
};




struct ContractResult_Item {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_2[0x10];
    int32_t amount;
    uint8_t _pad_3[0x4];
    struct MissionProperty* targetLocation;
    uint8_t _pad_4[0x8];
    struct RewardNotification* notification;
    uint8_t _pad_5[0x90];
};




struct FireParams {
    uint8_t _pad_0[0x8];
    enum ARDataType enabledMode;
    uint8_t _pad_1[0x4];
    struct DynArray_bool* behaviors;
    uint8_t _pad_2[0x28];
};




struct ContractResultBase {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
};




struct ContractResult_CalculatedReputation {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
    struct FactionReputation* factionReputation;
    uint8_t _pad_2[0x10];
    struct SReputationScopeParams* reputationScope;
    uint8_t _pad_3[0x10];
};




struct BuildingBlocks_StaticArrayDataBoolean {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_bool* values;
    uint8_t _pad_2[0x28];
};




struct SeatAdsDef {
    uint8_t _pad_0[0x8];
    float zoomSpeed;
    float minFovWithTarget;
    float minFovWithoutTarget;
    float minFovStableZoom;
    float crosshairAngle;
    float maxPitch;
    float maxYaw;
    float timeToKeepZoomAfterTargetLoss;
    _Bool trackSubtargets;
    _Bool useScalingOutsideAds;
    uint8_t _pad_1[0x6];
    struct DynArray_bool* allowedForOperatorMode;
    uint8_t _pad_2[0x28];
};




struct PlayerChoice_IMConfig {
    uint8_t _pad_0[0x8];
    int32_t cursorScreenPercentage;
    int32_t interactionScreenPercentage;
    struct PlayerChoice_SignalConfig* signalConfig;
    uint8_t _pad_1[0x10];
    struct InnerThought_InteractionSystemConfig* interactionConfig;
    uint8_t _pad_2[0x10];
    struct InnerThought_ConversationSystemConfig* conversationConfig;
    uint8_t _pad_3[0x10];
    struct PlayerChoice_RemoteCommsConfig* remoteConfig;
    uint8_t _pad_4[0x60];
    float IMFOVFactor;
    float FOVLerpSpeed;
    float focusModeLerpSpeed;
    float focusModeFOVFactor;
    _Bool useFocusModeDOF;
    uint8_t _pad_5[0x3];
    float maxMouseDistanceToThought;
    float mouseDistanceToDriveSelection;
    _Bool showItemInnerThoughtsInNormalMode;
    uint8_t _pad_6[0x3];
    float interactionPointStickinessFactor;
    float maxSelectableIPAngle;
    float maxAlwaysSelectRadius;
    _Bool quickInteractUseScoreSystem;
    uint8_t _pad_7[0x3];
    float quickInteractOnScreenPoints;
    float quickInteractAnglePoints;
    float quickInteractDistancePoints;
    float thoughtPosClampFactor;
    float throwPercentageIncreaseFactor;
    float quickPlaceThrowPercentage;
    float quickPlaceDropTime;
    float throwMaxImpulse;
    float throwMaxEpsilon;
    uint8_t _pad_8[0x4];
    struct RGBA* loosePlacementColor;
    uint8_t _pad_9[0x10];
    struct RGBA* snapPlacementColor;
    uint8_t _pad_10[0x10];
    struct RGBA* placementAttacherValidColor;
    uint8_t _pad_11[0x10];
    struct UIElementSoundsRecord* soundsRecord;
    uint8_t _pad_12[0x10];
    struct CryStringT* holoSnapAudioID;
    uint8_t _pad_13[0x8];
    float screenSpaceHoloSnapDistance;
    float cursorSpeedMouseFactorIM;
    float cursorSpeedMouseFactorFM;
    float cursorSpeedPadFactorIM;
    float cursorSpeedPadFactorFM;
    float cursorSpeedAimingVehicleFactor;
    struct DynArray_ARDataType* allowedCameraViewsForIM;
    uint8_t _pad_14[0x28];
    _Bool snapToFirstPerson;
    uint8_t _pad_15[0x7];
    struct ProcBreathingSetup* procBreathingSetup;
    uint8_t _pad_16[0x10];
    float xDirTowardsCenterFactor;
    float xDirAwayFromCenterFactor;
    float yDirTowardsCenterFactor;
    float yDirAwayFromCenterFactor;
    float zoomChangePerInput;
    float zoomAccPeriod;
    float zoomAccFactor;
    float IMFOVFactorMin;
    struct PlayerChoice_HeadLookParams* focusModeDeadzone;
    uint8_t _pad_17[0x10];
    struct PlayerChoice_HeadLookParams* IMDefaultZoomDeadzone;
    uint8_t _pad_18[0x10];
    struct PlayerChoice_HeadLookParams* IMFullZoomDeadzone;
    uint8_t _pad_19[0x10];
    struct PlayerChoice_HeadLookParams* IMDefaultVehicleSeatZoomDeadzone;
    uint8_t _pad_20[0x10];
    struct PlayerChoice_HeadLookParams* IMFullVehicleSeatZoomDeadzone;
    uint8_t _pad_21[0x10];
    struct PlayerChoice_HeadLookParams* conversationDeadzone;
    uint8_t _pad_22[0x10];
    struct PlayerChoice_HeadLookParams* PITDeadzone;
    uint8_t _pad_23[0x10];
    struct PlayerChoice_HeadLookParams* worldDisplayDeadzone;
    uint8_t _pad_24[0x10];
    struct PlayerChoice_HeadLookParams* screenFocusDeadzone;
    uint8_t _pad_25[0x10];
    float screenFocusLerpSpeed;
    float screenFocusCancelDistance;
    float screenFocusSelectionAngleRange;
    float blockedConditionCheckTimer;
    float cursorEdgeRotationSpeed;
    _Bool includeOriginalTextInBlockedText;
    uint8_t _pad_26[0x3];
    float quickSelectTimer;
    float heldEntityMaxCursorDistance;
    float promptDisplayFullRadius;
    float promptDisplayCentreRadius;
    float IMSelectionScoreCutoff;
    float interactionPromptPreviousUpdateTime;
};




struct GlobalShopTerminalParams {
    uint8_t _pad_0[0x8];
    int32_t displayedItemsPerPage;
    float confirmationAutoCloseTime;
    int32_t maxBuyingMultiplier;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* inventoryQueryItemsType;
    uint8_t _pad_2[0x28];
    struct CLocIdentifier* all_items_category;
    struct SGlobalShopErrors* shopErrors;
    uint8_t _pad_3[0x1f0];
};




struct SDFMVictoryConditionsLives {
    uint8_t _pad_0[0x18];
    float timeLimit;
    float timeRemainingNoNewPlayers;
    int32_t scoreLimit;
    _Bool checkScore;
    _Bool checkTime;
    _Bool checkScoreAsTime;
    _Bool decideRoundWinnerUsingRoundPoints;
    _Bool decideGameWinnerWithTeamScore;
    _Bool playHalfwaySound;
    _Bool playHalfwaySoundAfterUpdatingTimeLimit;
    _Bool playTimeAnnouncements;
    _Bool canPlayMusicMoods;
    _Bool doOpponentDisconnectedCheck;
    uint8_t _pad_1[0x2];
    float narrowMatchWinRatio;
    float bigRoundWinRatio;
    float narrowMatchDefeatRatio;
    float bigRoundDefeatRatio;
    _Bool endOnKill;
    _Bool endOnAllOthersRanOutOfLives;
    _Bool winAwardToTeamTopScorersOnly;
    uint8_t _pad_2[0x1];
    int32_t winAwardPlayerCount;
    struct DynArray_ARDataType* winAwardIds;
    uint8_t _pad_3[0x28];
    struct EAPlayerHUDParams* playerHUDParams;
    uint8_t _pad_4[0x18];
    enum ARDataType scoringType;
    _Bool nextKillWins;
    uint8_t _pad_5[0x3];
};




struct SDFMVictoryConditionsTeam {
    uint8_t _pad_0[0x18];
    float timeLimit;
    float timeRemainingNoNewPlayers;
    int32_t scoreLimit;
    _Bool checkScore;
    _Bool checkTime;
    _Bool checkScoreAsTime;
    _Bool decideRoundWinnerUsingRoundPoints;
    _Bool decideGameWinnerWithTeamScore;
    _Bool playHalfwaySound;
    _Bool playHalfwaySoundAfterUpdatingTimeLimit;
    _Bool playTimeAnnouncements;
    _Bool canPlayMusicMoods;
    _Bool doOpponentDisconnectedCheck;
    uint8_t _pad_1[0x2];
    float narrowMatchWinRatio;
    float bigRoundWinRatio;
    float narrowMatchDefeatRatio;
    float bigRoundDefeatRatio;
    _Bool endOnKill;
    _Bool endOnAllOthersRanOutOfLives;
    _Bool winAwardToTeamTopScorersOnly;
    uint8_t _pad_2[0x1];
    int32_t winAwardPlayerCount;
    struct DynArray_ARDataType* winAwardIds;
    uint8_t _pad_3[0x28];
    struct EAPlayerHUDParams* playerHUDParams;
    uint8_t _pad_4[0x18];
    enum ARDataType scoringType;
    _Bool nextKillWins;
    uint8_t _pad_5[0x3];
};




struct SSimulationParamsTranslationalProjection {
    uint8_t _pad_0[0x8];
    _Bool UseRedirect;
    _Bool UseDebugSetup;
    _Bool UseDebugText;
    _Bool UseSimulation;
    uint8_t SimFPS;
    uint8_t _pad_1[0x3];
    struct Vec3* PivotOffset;
    uint8_t _pad_2[0x10];
    enum ARDataType ProjectionType;
    float Radius;
    struct Vec3* TranslationAxis;
    uint8_t _pad_3[0x10];
    struct Vec2* Capsule;
    uint8_t _pad_4[0x8];
    struct DynArray_ARDataType* AvailableCollisionProxies;
    uint8_t _pad_5[0x28];
};




struct WebCustomizationItemTypeName {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct DynArray_ARDataType* itemTypes;
    uint8_t _pad_1[0x28];
};




struct ItemPreview_CameraSettings {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* bones;
    uint8_t _pad_1[0x28];
    struct Vec3* offset;
    uint8_t _pad_2[0x10];
    float distanceScaler;
    float fieldOfView;
    float pitch;
    uint8_t _pad_3[0x4];
};




struct EASpecialEventInformationParams {
    uint8_t _pad_0[0x8];
    uint32_t badgeId;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* eventTitle;
    struct CLocIdentifier* eventDescription;
    struct CryStringT* bannerImage;
    uint8_t _pad_2[0x8];
    struct CryStringT* loadscreenOverride;
    uint8_t _pad_3[0x8];
    struct CryStringT* backgroundVideoOverride;
    uint8_t _pad_4[0x8];
    struct DynArray_ARDataType* modesActiveWithEvent;
    uint8_t _pad_5[0x28];
    struct BuildingBlocks_Style* style;
    uint8_t _pad_6[0x10];
};




struct MaskStatusBuff {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* maskIfCausedByStatus;
    uint8_t _pad_1[0x30];
};




struct SHealingBeamBodyPartHighlightingParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* characterAttachmentName;
    uint8_t _pad_1[0x8];
    struct DynArray_ARDataType* zonesToShow;
    uint8_t _pad_2[0x38];
};




struct SGroupChannel {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* groupType;
    uint8_t _pad_1[0x30];
};




struct AudioWhitelist {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* triggerTypes;
    uint8_t _pad_1[0x28];
};




struct GameModeCustomSetting {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType type_;
    uint8_t _pad_2[0x7];
    struct DynArray_ARDataType* controlledTypes;
    uint8_t _pad_3[0x28];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* description;
    float min;
    float max;
    float step;
    float defaultValueOverride;
};




struct ItemPreview_SkinnedLoadoutOverride {
    uint8_t _pad_0[0x8];
    struct CryStringT* skinnedLoadout;
    uint8_t _pad_1[0x8];
    struct DynArray_ARDataType* itemTypes;
    uint8_t _pad_2[0x28];
};




struct STargetableItemType {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* subItemTypes;
    uint8_t _pad_1[0x28];
    enum ARDataType type_;
    uint8_t _pad_2[0x4];
};




struct MasterModeExclusion {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* masterModeExclusions;
    uint8_t _pad_2[0x28];
};




struct SyncedAttackCategoryParams {
    uint8_t _pad_0[0x8];
    struct DamageInfo* damageInfo;
    uint8_t _pad_1[0x18];
    struct DynArray_ARDataType* comboBrokenSuccess;
    uint8_t _pad_2[0x28];
    struct DynArray_ARDataType* comboBrokenFailure;
    uint8_t _pad_3[0x28];
};




struct ItemPreview_CameraSettingsOverride {
    uint8_t _pad_0[0x8];
    struct ItemPreview_CameraSettings* settings;
    uint8_t _pad_1[0x58];
    struct DynArray_ARDataType* itemTypes;
    uint8_t _pad_2[0x28];
};




struct ItemThrottleParams {
    uint8_t _pad_0[0x8];
    float min;
    float max;
    float default_;
    _Bool scalingMinimum;
    uint8_t _pad_1[0x3];
    struct DynArray_ARDataType* affectedResources;
    uint8_t _pad_2[0x28];
};




struct InventoryContainer {
    uint8_t _pad_0[0x8];
    struct Vec3* interiorDimensions;
    uint8_t _pad_1[0x10];
    struct InventoryContainerTypeBase* inventoryType;
    uint8_t _pad_2[0x8];
    struct DynArray_ARDataType* excludedItemTypes;
    uint8_t _pad_3[0x30];
};




struct InventoryContainerItemTypeFilter {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* itemSubTypes;
    uint8_t _pad_2[0x28];
};




struct StatusEffectAbilityLock {
    uint8_t _pad_0[0x8];
    enum ARDataType statusEffectType;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* abilitiesToLock;
    uint8_t _pad_2[0x28];
};




struct ConsumableEffectClearBuffEffect {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* effectDescription;
    struct DynArray_ARDataType* buffTypes;
    uint8_t _pad_1[0x28];
};




struct SItemTypeFilter {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* itemSubTypes;
    uint8_t _pad_2[0x28];
};




struct OrificeBloodParams {
    uint8_t _pad_0[0x8];
    enum ARDataType bloodStatTriggerType;
    _Bool probabilistic;
    uint8_t _pad_1[0x3];
    float bloodChance;
    uint8_t _pad_2[0x4];
    struct DynArray_ARDataType* orifices;
    uint8_t _pad_3[0x28];
};




struct InfractionDefinition {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct CLocIdentifier* description;
    struct DynArray_ARDataType* triggers;
    uint8_t _pad_1[0x28];
    struct InfractionParameters* defaultParameters;
    uint8_t _pad_2[0x78];
};




struct SEntitySpaceShipPhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
    struct DynArray_ARDataType* PhysFlagsOverride;
    uint8_t _pad_4[0x28];
    struct DynArray_ARDataType* PhysFlagsColliderOverride;
    uint8_t _pad_5[0x28];
    int32_t maxLoggedCollisions;
    float Damping;
    float DampingFreefall;
    _Bool PushableByPlayers;
    _Bool NeverAffectTriggers;
    _Bool UseManualGridTransition;
    uint8_t _pad_6[0x1];
    struct SEntityGridProperty* grid;
    uint8_t _pad_7[0x8];
    struct SDFSetParams* shieldSDFParams;
    uint8_t _pad_8[0x8];
    enum ARDataType aiNavigationType;
    _Bool Kinematic;
    _Bool EnableCrossGridChecks;
    _Bool Resting;
    _Bool physicalizeAllSlots;
    _Bool enableExteriorShadow;
    uint8_t _pad_9[0x7];
    struct SEntityBuoyancyParams* buoyancyParams;
    uint8_t _pad_10[0x8];
    struct EntityTemperature* temperature;
    uint8_t _pad_11[0xe0];
};




struct SocialTab {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct DynArray_ARDataType* activeNetworkTypes;
    uint8_t _pad_1[0x28];
};




struct SSimulationParamsSpringEllipsoid {
    uint8_t _pad_0[0x8];
    _Bool UseRedirect;
    _Bool UseDebugSetup;
    _Bool UseDebugText;
    _Bool UseSimulation;
    uint8_t SimFPS;
    uint8_t _pad_1[0x3];
    struct Vec3* PivotOffset;
    uint8_t _pad_2[0x10];
    float Mass;
    float Gravity;
    float Damping;
    float Stiffness;
    struct Vec3* StiffnessTarget;
    uint8_t _pad_3[0x10];
    float DiskRadius;
    uint8_t _pad_4[0x4];
    struct Vec2* SphereScale;
    uint8_t _pad_5[0x8];
    struct Vec2* DiskRotation;
    uint8_t _pad_6[0x8];
    enum ARDataType ProjectionType;
    float Radius;
    struct DynArray_ARDataType* AvailableCollisionProxies;
    uint8_t _pad_7[0x28];
};




struct SDFMVictoryConditionsPlayer {
    uint8_t _pad_0[0x18];
    float timeLimit;
    float timeRemainingNoNewPlayers;
    int32_t scoreLimit;
    _Bool checkScore;
    _Bool checkTime;
    _Bool checkScoreAsTime;
    _Bool decideRoundWinnerUsingRoundPoints;
    _Bool decideGameWinnerWithTeamScore;
    _Bool playHalfwaySound;
    _Bool playHalfwaySoundAfterUpdatingTimeLimit;
    _Bool playTimeAnnouncements;
    _Bool canPlayMusicMoods;
    _Bool doOpponentDisconnectedCheck;
    uint8_t _pad_1[0x2];
    float narrowMatchWinRatio;
    float bigRoundWinRatio;
    float narrowMatchDefeatRatio;
    float bigRoundDefeatRatio;
    _Bool endOnKill;
    _Bool endOnAllOthersRanOutOfLives;
    _Bool winAwardToTeamTopScorersOnly;
    uint8_t _pad_2[0x1];
    int32_t winAwardPlayerCount;
    struct DynArray_ARDataType* winAwardIds;
    uint8_t _pad_3[0x28];
    struct EAPlayerHUDParams* playerHUDParams;
    uint8_t _pad_4[0x18];
    enum ARDataType scoringType;
    _Bool nextKillWins;
    uint8_t _pad_5[0x3];
};




struct MasterModeExclusionsOverride {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* masterModeExclusions;
    uint8_t _pad_1[0x28];
};




struct MarkerDeclutteringCullingOrder {
    uint8_t _pad_0[0x8];
    int32_t systemLimit;
    int32_t standardLimit;
    int32_t revealedLimit;
    float revealDuration;
    float referenceDistance;
    float distanceWeight;
    float screenDistanceWeight;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* categories;
    uint8_t _pad_2[0x28];
};




struct TransformationInterpolatorParams {
    uint8_t _pad_0[0x8];
    struct Vec3* startOffsetValues;
    uint8_t _pad_1[0x10];
    struct Vec3* endOffsetValues;
    uint8_t _pad_2[0x10];
    struct DynArray_ARDataType* offsetInterpolationModes;
    uint8_t _pad_3[0x28];
    struct Ang3* startRotationValues;
    uint8_t _pad_4[0x10];
    struct Ang3* endRotationValues;
    uint8_t _pad_5[0x10];
    struct DynArray_ARDataType* rotationInterpolationModes;
    uint8_t _pad_6[0x28];
    float startScaleValue;
    float endScaleValue;
    enum ARDataType scaleInterpolationMode;
    uint8_t _pad_7[0x7];
};




struct AbilityDefinition {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* abilitiesToLock;
    uint8_t _pad_1[0x28];
    struct DynArray_ARDataType* abilitiesToInterrupt;
    uint8_t _pad_2[0x28];
    struct AbilityBreathingParams* breathingParams;
    uint8_t _pad_3[0x8];
};




struct SEntityRigidPhysicsControllerParams {
    uint8_t _pad_0[0x8];
    float Mass;
    _Bool compoundingAllowed;
    uint8_t _pad_1[0x3];
    struct SBreakablePhysicsParams* breakableParams;
    uint8_t _pad_2[0x8];
    struct SGameCollisionClass* gameCollisionClass;
    uint8_t _pad_3[0x8];
    struct DynArray_ARDataType* PhysFlagsOverride;
    uint8_t _pad_4[0x28];
    struct DynArray_ARDataType* PhysFlagsColliderOverride;
    uint8_t _pad_5[0x28];
    int32_t maxLoggedCollisions;
    float Damping;
    float DampingFreefall;
    _Bool PushableByPlayers;
    _Bool NeverAffectTriggers;
    _Bool UseManualGridTransition;
    uint8_t _pad_6[0x1];
    struct SEntityGridProperty* grid;
    uint8_t _pad_7[0x8];
    struct SDFSetParams* shieldSDFParams;
    uint8_t _pad_8[0x8];
    enum ARDataType aiNavigationType;
    _Bool Kinematic;
    _Bool EnableCrossGridChecks;
    _Bool Resting;
    _Bool physicalizeAllSlots;
    _Bool enableExteriorShadow;
    uint8_t _pad_9[0x7];
    struct SEntityBuoyancyParams* buoyancyParams;
    uint8_t _pad_10[0x8];
    struct EntityTemperature* temperature;
    uint8_t _pad_11[0xe0];
};




struct PlayerLimitationsProfile {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* abilitiesToBlock;
    uint8_t _pad_1[0x28];
};




struct SUninsuredItem {
    uint8_t _pad_0[0x8];
    enum ARDataType Type;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* SubTypes;
    uint8_t _pad_2[0x28];
};




struct ItemPreview_TurntableOverride {
    uint8_t _pad_0[0x8];
    struct ItemPreview_TurntableSettings* settings;
    uint8_t _pad_1[0x30];
    struct DynArray_ARDataType* itemTypes;
    uint8_t _pad_2[0x28];
};




struct DefaultEntitlementRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* Entitlements;
    uint8_t _pad_1[0x28];
    _Bool subscribersOnly;
    uint8_t _pad_2[0x7];
};




struct SStandardVictoryConditionsTeam {
    uint8_t _pad_0[0x18];
    float timeLimit;
    float timeRemainingNoNewPlayers;
    int32_t scoreLimit;
    _Bool checkScore;
    _Bool checkTime;
    _Bool checkScoreAsTime;
    _Bool decideRoundWinnerUsingRoundPoints;
    _Bool decideGameWinnerWithTeamScore;
    _Bool playHalfwaySound;
    _Bool playHalfwaySoundAfterUpdatingTimeLimit;
    _Bool playTimeAnnouncements;
    _Bool canPlayMusicMoods;
    _Bool doOpponentDisconnectedCheck;
    uint8_t _pad_1[0x2];
    float narrowMatchWinRatio;
    float bigRoundWinRatio;
    float narrowMatchDefeatRatio;
    float bigRoundDefeatRatio;
    _Bool endOnKill;
    _Bool endOnAllOthersRanOutOfLives;
    _Bool winAwardToTeamTopScorersOnly;
    uint8_t _pad_2[0x1];
    int32_t winAwardPlayerCount;
    struct DynArray_ARDataType* winAwardIds;
    uint8_t _pad_3[0x28];
    struct EAPlayerHUDParams* playerHUDParams;
    uint8_t _pad_4[0x18];
};




struct SFPSVictoryConditionsTeamLives {
    uint8_t _pad_0[0x18];
    float timeLimit;
    float timeRemainingNoNewPlayers;
    int32_t scoreLimit;
    _Bool checkScore;
    _Bool checkTime;
    _Bool checkScoreAsTime;
    _Bool decideRoundWinnerUsingRoundPoints;
    _Bool decideGameWinnerWithTeamScore;
    _Bool playHalfwaySound;
    _Bool playHalfwaySoundAfterUpdatingTimeLimit;
    _Bool playTimeAnnouncements;
    _Bool canPlayMusicMoods;
    _Bool doOpponentDisconnectedCheck;
    uint8_t _pad_1[0x2];
    float narrowMatchWinRatio;
    float bigRoundWinRatio;
    float narrowMatchDefeatRatio;
    float bigRoundDefeatRatio;
    _Bool endOnKill;
    _Bool endOnAllOthersRanOutOfLives;
    _Bool winAwardToTeamTopScorersOnly;
    uint8_t _pad_2[0x1];
    int32_t winAwardPlayerCount;
    struct DynArray_ARDataType* winAwardIds;
    uint8_t _pad_3[0x28];
    struct EAPlayerHUDParams* playerHUDParams;
    uint8_t _pad_4[0x18];
};




struct ItemResourceNetworkMapTriggerEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* key;
    uint8_t _pad_1[0x8];
    struct DynArray_ARDataType* affectedLayers;
    uint8_t _pad_2[0x28];
};




struct SecurityClearance_OutfitRequirement_TagRequirementDef {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* outfitPiecesToCheck;
    uint8_t _pad_1[0x28];
    struct Tag* requiredTag;
    uint8_t _pad_2[0x10];
    _Bool allowMissingOutfitPieces;
    uint8_t _pad_3[0x7];
};




struct SDestroyAttachedItemGameplayTrigger {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
    struct DynArray_ARDataType* itemTypes;
    uint8_t _pad_2[0x28];
    struct DynArray_ARDataType* itemSubTypes;
    uint8_t _pad_3[0x28];
    _Bool damageAttachedItem;
    uint8_t _pad_4[0x7];
};




struct SCItemSuitThrusterParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* HelperName;
    uint8_t _pad_1[0x8];
    struct DynArray_ARDataType* ActivationInputs;
    uint8_t _pad_2[0x30];
};




struct SItemPortDefTypes {
    uint8_t _pad_0[0x8];
    enum ARDataType Type;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* SubTypes;
    uint8_t _pad_2[0x28];
};




struct SDFMVictoryConditionsRace {
    uint8_t _pad_0[0x18];
    float timeLimit;
    float timeRemainingNoNewPlayers;
    int32_t scoreLimit;
    _Bool checkScore;
    _Bool checkTime;
    _Bool checkScoreAsTime;
    _Bool decideRoundWinnerUsingRoundPoints;
    _Bool decideGameWinnerWithTeamScore;
    _Bool playHalfwaySound;
    _Bool playHalfwaySoundAfterUpdatingTimeLimit;
    _Bool playTimeAnnouncements;
    _Bool canPlayMusicMoods;
    _Bool doOpponentDisconnectedCheck;
    uint8_t _pad_1[0x2];
    float narrowMatchWinRatio;
    float bigRoundWinRatio;
    float narrowMatchDefeatRatio;
    float bigRoundDefeatRatio;
    _Bool endOnKill;
    _Bool endOnAllOthersRanOutOfLives;
    _Bool winAwardToTeamTopScorersOnly;
    uint8_t _pad_2[0x1];
    int32_t winAwardPlayerCount;
    struct DynArray_ARDataType* winAwardIds;
    uint8_t _pad_3[0x28];
    struct EAPlayerHUDParams* playerHUDParams;
    uint8_t _pad_4[0x18];
    enum ARDataType scoringType;
    _Bool nextKillWins;
    uint8_t _pad_5[0x3];
};




struct InteractionConditionGameMode {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct DynArray_ARDataType* gameModes;
    uint8_t _pad_2[0x28];
};




struct LoadoutCandidateRootParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* candidateRootTypes;
    uint8_t _pad_1[0x28];
};




struct AIObservableFilterFlags {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* typeFlags;
    uint8_t _pad_1[0x28];
};




struct PlayerGroupManagerNotificationParams {
    uint8_t _pad_0[0x8];
    struct PlayerNotificationBannerParams* notificationParams;
    uint8_t _pad_1[0x28];
    struct DynArray_ARDataType* groupSubscriptionTypes;
    uint8_t _pad_2[0x28];
};




struct SItemPortStateModifier {
    uint8_t _pad_0[0x8];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
    struct SInteractionState* onEntityAttachedState;
    uint8_t _pad_2[0x8];
    struct SInteractionState* onEntityDetachedState;
    uint8_t _pad_3[0x8];
    struct SInteractionState* onPortDestroyedState;
    uint8_t _pad_4[0x8];
    struct DynArray_ARDataType* itemTypes;
    uint8_t _pad_5[0x28];
    struct DynArray_ARDataType* itemSubTypes;
    uint8_t _pad_6[0x28];
};




struct SBadgeCompleteReward {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* badgesToAward;
    uint8_t _pad_1[0x28];
};




struct SSimulationParamsPendulumHingePlane {
    uint8_t _pad_0[0x8];
    _Bool UseRedirect;
    _Bool UseDebugSetup;
    _Bool UseDebugText;
    _Bool UseSimulation;
    uint8_t SimFPS;
    uint8_t _pad_1[0x3];
    struct Vec3* PivotOffset;
    uint8_t _pad_2[0x10];
    struct Vec3* SimulationAxis;
    uint8_t _pad_3[0x10];
    float Mass;
    float Gravity;
    float Damping;
    float JointSpring;
    struct Vec2* SpringTarget;
    uint8_t _pad_4[0x8];
    float ConeAngle;
    float HingeRotation;
    struct Vec2* Capsule;
    uint8_t _pad_5[0x8];
    enum ARDataType ProjectionType;
    uint8_t _pad_6[0x4];
    struct DynArray_ARDataType* AvailableCollisionProxies;
    uint8_t _pad_7[0x28];
};




struct SEAFriendlyFireKickParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* kickableOffences;
    uint8_t _pad_1[0x28];
    int32_t scoreKickThreshold;
    int32_t shieldScore;
    float infractionPercentage;
    float infractionCooldownTime;
    float teamDamageCautionPercentage;
    float teamDamageWarningPercentage;
    struct CLocIdentifier* teamDamageCaution;
    struct CLocIdentifier* teamDamageWarning;
};




struct SSimulationParamsPendulumHalfCone {
    uint8_t _pad_0[0x8];
    _Bool UseRedirect;
    _Bool UseDebugSetup;
    _Bool UseDebugText;
    _Bool UseSimulation;
    uint8_t SimFPS;
    uint8_t _pad_1[0x3];
    struct Vec3* PivotOffset;
    uint8_t _pad_2[0x10];
    struct Vec3* SimulationAxis;
    uint8_t _pad_3[0x10];
    float Mass;
    float Gravity;
    float Damping;
    float JointSpring;
    struct Vec2* SpringTarget;
    uint8_t _pad_4[0x8];
    float ConeAngle;
    float HingeRotation;
    struct Vec2* Capsule;
    uint8_t _pad_5[0x8];
    enum ARDataType ProjectionType;
    uint8_t _pad_6[0x4];
    struct DynArray_ARDataType* AvailableCollisionProxies;
    uint8_t _pad_7[0x28];
};




struct SSimulationParamsPendulumCone {
    uint8_t _pad_0[0x8];
    _Bool UseRedirect;
    _Bool UseDebugSetup;
    _Bool UseDebugText;
    _Bool UseSimulation;
    uint8_t SimFPS;
    uint8_t _pad_1[0x3];
    struct Vec3* PivotOffset;
    uint8_t _pad_2[0x10];
    struct Vec3* SimulationAxis;
    uint8_t _pad_3[0x10];
    float Mass;
    float Gravity;
    float Damping;
    float JointSpring;
    struct Vec2* SpringTarget;
    uint8_t _pad_4[0x8];
    float ConeAngle;
    float HingeRotation;
    struct Vec2* Capsule;
    uint8_t _pad_5[0x8];
    enum ARDataType ProjectionType;
    uint8_t _pad_6[0x4];
    struct DynArray_ARDataType* AvailableCollisionProxies;
    uint8_t _pad_7[0x28];
};




struct ArmsLockSingleAbility {
    uint8_t _pad_0[0x8];
    enum ARDataType ability;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* exclusions;
    uint8_t _pad_2[0x28];
};




struct SFPSVictoryConditionsTeam {
    uint8_t _pad_0[0x18];
    float timeLimit;
    float timeRemainingNoNewPlayers;
    int32_t scoreLimit;
    _Bool checkScore;
    _Bool checkTime;
    _Bool checkScoreAsTime;
    _Bool decideRoundWinnerUsingRoundPoints;
    _Bool decideGameWinnerWithTeamScore;
    _Bool playHalfwaySound;
    _Bool playHalfwaySoundAfterUpdatingTimeLimit;
    _Bool playTimeAnnouncements;
    _Bool canPlayMusicMoods;
    _Bool doOpponentDisconnectedCheck;
    uint8_t _pad_1[0x2];
    float narrowMatchWinRatio;
    float bigRoundWinRatio;
    float narrowMatchDefeatRatio;
    float bigRoundDefeatRatio;
    _Bool endOnKill;
    _Bool endOnAllOthersRanOutOfLives;
    _Bool winAwardToTeamTopScorersOnly;
    uint8_t _pad_2[0x1];
    int32_t winAwardPlayerCount;
    struct DynArray_ARDataType* winAwardIds;
    uint8_t _pad_3[0x28];
    struct EAPlayerHUDParams* playerHUDParams;
    uint8_t _pad_4[0x18];
};




struct OperatorModeDefinitions {
    uint8_t _pad_0[0x8];
    enum ARDataType modeName;
    enum ARDataType parentModeName;
    struct DynArray_ARDataType* controllerTypes;
    uint8_t _pad_1[0x28];
};




struct SHearingComponentParams {
    uint8_t _pad_0[0x18];
    struct AIObservableFilterFlags* movementSoundOriginFilter;
    uint8_t _pad_1[0x10];
    struct DynArray_ARDataType* soundTypeFilter;
    uint8_t _pad_2[0x38];
};




struct PassengerScanStatusMappings {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* statuses;
    uint8_t _pad_1[0x28];
    float healthThreshold;
    uint8_t _pad_2[0x4];
    struct CLocIdentifier* displayForCondition;
};




struct SObjectiveVictoryConditionsTeam {
    uint8_t _pad_0[0x18];
    float timeLimit;
    float timeRemainingNoNewPlayers;
    int32_t scoreLimit;
    _Bool checkScore;
    _Bool checkTime;
    _Bool checkScoreAsTime;
    _Bool decideRoundWinnerUsingRoundPoints;
    _Bool decideGameWinnerWithTeamScore;
    _Bool playHalfwaySound;
    _Bool playHalfwaySoundAfterUpdatingTimeLimit;
    _Bool playTimeAnnouncements;
    _Bool canPlayMusicMoods;
    _Bool doOpponentDisconnectedCheck;
    uint8_t _pad_1[0x2];
    float narrowMatchWinRatio;
    float bigRoundWinRatio;
    float narrowMatchDefeatRatio;
    float bigRoundDefeatRatio;
    _Bool endOnKill;
    _Bool endOnAllOthersRanOutOfLives;
    _Bool winAwardToTeamTopScorersOnly;
    uint8_t _pad_2[0x1];
    int32_t winAwardPlayerCount;
    struct DynArray_ARDataType* winAwardIds;
    uint8_t _pad_3[0x28];
    struct EAPlayerHUDParams* playerHUDParams;
    uint8_t _pad_4[0x18];
};




struct UIHoloVehicle_Config {
    uint8_t _pad_0[0x8];
    float hitEffectTime;
    float highlightEffectTime;
    float flickerTime;
    float shieldDistance;
    float cameraFOV;
    float ownCameraDistanceScaler;
    float ownAngularOffsetRange;
    float ownDefaultViewAngle;
    float ownTranslationSmoothingTime;
    float ownTranslationOffsetRadiusRatio;
    float hitMaterialDarkenFactor;
    float hitIndicatorAnimTime;
    float targetCameraDistanceScaler;
    float cameraIntroTime;
    float cameraIntroDistanceScaler;
    enum ARDataType cameraIntroInterpolationMode;
    uint8_t _pad_1[0x3];
    float cameraViewsTransitionTime;
    enum ARDataType cameraViewTransitionMode;
    struct CryStringT* unknownMarkerProxyModel;
    uint8_t _pad_2[0x8];
    struct CryStringT* shieldProxyModel;
    uint8_t _pad_3[0x8];
    struct CryStringT* turretViewProxyModel;
    uint8_t _pad_4[0x8];
    float turretViewLengthRatio;
    float turretViewWidthRatio;
    float turretViewPitch;
    float turretViewRoll;
    float turretViewYaw;
    uint8_t _pad_5[0x4];
    struct CryStringT* turretAimProxyModel;
    uint8_t _pad_6[0x8];
    float turretAimWidthRatio;
    uint8_t _pad_7[0x4];
    struct CryStringT* vehicleMaterial;
    uint8_t _pad_8[0x8];
    struct CryStringT* itemHighlightMaterial;
    uint8_t _pad_9[0x8];
    struct CryStringT* shieldMaterial;
    uint8_t _pad_10[0x8];
    struct CryStringT* turretViewStandbyMaterial;
    uint8_t _pad_11[0x8];
    struct CryStringT* turretViewFireMaterial;
    uint8_t _pad_12[0x8];
    struct CryStringT* turretAimMaterial;
    uint8_t _pad_13[0x8];
    struct CryStringT* vehicleHitMaterial;
    uint8_t _pad_14[0x8];
    struct CryStringT* shieldHitMaterial;
    uint8_t _pad_15[0x8];
    struct DynArray_ARDataType* itemTypeWhitelist;
    uint8_t _pad_16[0x28];
    struct SSilhouetteParamsDef* silhouetteParams;
    uint8_t _pad_17[0x40];
    struct CryStringT* directionArrowGeomName;
    uint8_t _pad_18[0x8];
    struct CryStringT* directionArrowTipGeomName;
    uint8_t _pad_19[0x8];
    float directionArrowScale;
    float directionArrowForwardOffset;
    float directionArrowUpOffset;
    float directionArrowRightOffset;
};




struct ActionAreaAudioFilter {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* ignoredAudioTypes;
    uint8_t _pad_1[0x28];
};




struct HarvestableAreaTypeObjectPreset {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* objectPresetPaths;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_StaticArrayDataString {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_CryStringT* values;
    uint8_t _pad_2[0x28];
};




struct InteractionConditionActorHasAttachedEntityTypes {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType conditionResult;
    uint8_t _pad_2[0x4];
    struct DynArray_ARDataType* itemTypes;
    uint8_t _pad_3[0x28];
    struct DynArray_ARDataType* itemSubTypes;
    uint8_t _pad_4[0x28];
    struct DynArray_CryStringT* ignoreItemPorts;
    uint8_t _pad_5[0x28];
};




struct NavPointSpawnInformation {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClassDefinition;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* name;
    struct DynArray_CryStringT* extendedTextTokens;
    uint8_t _pad_2[0x28];
};




struct ArenaCommanderLocationObjectContainersParams {
    uint8_t _pad_0[0x8];
    struct StarMapObject* location;
    uint8_t _pad_1[0x10];
    _Bool overrideRootOC;
    uint8_t _pad_2[0x7];
    struct DynArray_CryStringT* objectContainers;
    uint8_t _pad_3[0x28];
};




struct InteractionConditionActorHasAttachedEntityWithTag {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType conditionResult;
    uint8_t _pad_2[0x4];
    struct DynArray_CryStringT* attachableTag;
    uint8_t _pad_3[0x28];
};




struct SBonesHighlightNode {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* boneNames;
    uint8_t _pad_1[0x28];
};




struct LocomotionAnimSyncConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* footJoints;
    uint8_t _pad_1[0x28];
    enum ARDataType syncMethod;
    uint8_t _pad_2[0x1f];
};




struct LoadoutRequiredAttachmentsParams {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* requiredAttachments;
    uint8_t _pad_1[0x28];
};




struct PersonalThoughtForceCloseActionList {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* actions;
    uint8_t _pad_1[0x40];
};




struct RagdollRecoveryConfig {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct AngYPR* physRootAdjust;
    uint8_t _pad_2[0x10];
    struct DynArray_CryStringT* defaultRecoveryAnims;
    uint8_t _pad_3[0x40];
};




struct InteractionConditionActorInventoryContainerEntityHasTag {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    enum ARDataType conditionResult;
    uint8_t _pad_2[0x4];
    struct DynArray_CryStringT* attachableTag;
    uint8_t _pad_3[0x28];
};




struct FragmentRequiredInfo {
    uint8_t _pad_0[0x8];
    struct CryStringT* fragment;
    uint8_t _pad_1[0x8];
    struct DynArray_CryStringT* additionalTags;
    uint8_t _pad_2[0x28];
};




struct DockingSlotVisibilityTagSet {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* tags;
    uint8_t _pad_1[0x28];
};




struct SCItemMissileRackParams {
    uint8_t _pad_0[0x18];
    float launchDelay;
    float detachVelocityRight;
    float detachVelocityForward;
    float detachVelocityUp;
    enum ARDataType relativeDetachType;
    uint8_t _pad_1[0x4];
    struct Tag* detachTrigger;
    uint8_t _pad_2[0x10];
    struct CryStringT* rackTag;
    uint8_t _pad_3[0x8];
    struct DynArray_CryStringT* slotTags;
    uint8_t _pad_4[0x28];
    struct CryStringT* fragReadyUp;
    uint8_t _pad_5[0x8];
    struct CryStringT* fragStowAway;
    uint8_t _pad_6[0x8];
    _Bool igniteOnPylon;
    uint8_t _pad_7[0x7];
};




struct SEntityEffectSystem_Attachment_BoneListAttachment {
    uint8_t _pad_0[0x8];
    struct QuatT* offset;
    uint8_t _pad_1[0x50];
    struct Tag* offsetParameter;
    uint8_t _pad_2[0x10];
    enum ARDataType attachmentZone;
    uint8_t _pad_3[0x4];
    struct DynArray_CryStringT* boneAttachments;
    uint8_t _pad_4[0x28];
};




struct FragmentInfo {
    uint8_t _pad_0[0x8];
    struct CryStringT* fragment;
    uint8_t _pad_1[0x8];
    struct DynArray_CryStringT* additionalTags;
    uint8_t _pad_2[0x28];
};




struct AsteroidFieldShapeLinkParams {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* shapeLinkName;
    uint8_t _pad_1[0x28];
    int32_t rngSeed;
    uint8_t viewDistRatio;
    uint8_t lodRatio;
    uint8_t _pad_2[0x2];
    struct AsteroidFieldComposition* composition;
    uint8_t _pad_3[0x10];
    float noiseAmplitude;
    float noiseGranularity;
    float densityScale;
    float noiseRoughness;
    float falloffCeiling;
    float shapeStrength;
    float noiseFrequencyX;
    float noiseFrequencyY;
    float noiseFrequencyZ;
    uint8_t _pad_4[0x4];
};




struct SetItemportActiveEvent {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct DynArray_CryStringT* itemPorts;
    uint8_t _pad_2[0x28];
};




struct InteractionConditionHasSupportingItemport {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct DynArray_CryStringT* itemPortTags;
    uint8_t _pad_2[0x28];
    struct DynArray_CryStringT* itemPortNames;
    uint8_t _pad_3[0x28];
};




struct ActorUndergroundEffects {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct DynArray_CryStringT* helpersToDisableUnderground;
    uint8_t _pad_2[0x28];
};




struct UndergroundCreatureHelpersComponent {
    uint8_t _pad_0[0x18];
    struct DynArray_CryStringT* spineJoints;
    uint8_t _pad_1[0x28];
    struct DynArray_CryStringT* tailJoints;
    uint8_t _pad_2[0x28];
    struct CryStringT* surfaceVFXJoint;
    uint8_t _pad_3[0x8];
    struct CryStringT* groundExitVFXJoint;
    uint8_t _pad_4[0x8];
    struct CryStringT* groundEntryVFXJoint;
    uint8_t _pad_5[0x8];
};




struct GameTokens {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* GameTokenLibraries;
    uint8_t _pad_1[0x28];
    struct DynArray_CryStringT* FlowGraphs;
    uint8_t _pad_2[0x28];
};




struct InteractionConditionEntityIsAttachedToInteractor {
    uint8_t _pad_0[0x8];
    struct ConditionDisplayParams* conditionDisplay;
    uint8_t _pad_1[0x8];
    struct DynArray_CryStringT* ignoreItemPorts;
    uint8_t _pad_2[0x28];
};




struct SWeaponOnAttachParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* itemPort;
    uint8_t _pad_1[0x8];
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct DynArray_CryStringT* attachmentsToHide;
    uint8_t _pad_3[0x48];
};




struct SStandardParams {
    uint8_t _pad_0[0x18];
    struct MusicLogicSuite* musicSuite;
    uint8_t _pad_1[0x10];
    struct ARModeSettings* arModeSettings;
    uint8_t _pad_2[0x10];
    struct DynArray_CryStringT* audioSwitchStates;
    uint8_t _pad_3[0x28];
    enum ARDataType moduleType;
    uint8_t _pad_4[0x4];
    struct GameModule* gameModule;
    uint8_t _pad_5[0x10];
    struct MegaMap* fallbackMegamap;
    uint8_t _pad_6[0x10];
    enum ARDataType persistentDataPolicy;
    uint8_t _pad_7[0x4];
    struct CLocIdentifier* locDisclaimer;
    struct CryStringT* feedbackHyperlink;
    uint8_t _pad_8[0x8];
    _Bool ignoreHighlight;
    uint8_t _pad_9[0x3];
    int32_t maxSquadSize;
    int32_t maxTeamSize;
    int32_t maxTotalPlayerSize;
    _Bool newGameMode;
    uint8_t _pad_10[0x3];
    float audioOcclusionMaxDist;
    uint8_t maxUnattendedVehicleMarkers;
    _Bool spawnInSpaceship;
    _Bool enableQuantumTravel;
    _Bool enableMasterModes;
    _Bool enableQuantumBoost;
    _Bool enableWingmanCommands;
    uint8_t _pad_11[0x2];
    enum ARDataType controlSurfaceEnabledMode;
    uint8_t _pad_12[0x4];
    struct SAimableGameModeParams* aimableParams;
    uint8_t _pad_13[0x10];
    _Bool enableVehicleAds;
    _Bool enableVehicleWeaponPresetSystem;
    _Bool enableTargeting2;
    _Bool enableAutoTargetingOnlyOnTrackedTargets;
    _Bool enablePlayerTargetingOnlyOnTrackedTargets;
    _Bool enableAutoTargetingOnContactLoss;
    _Bool enableTurretHud;
    _Bool enableNewHudAR;
    _Bool enableNewSpaceshipThrottleBehaviour;
    _Bool enableShipRecall;
    _Bool disableOrbitalMarkers;
    _Bool isSurvivalMode;
    _Bool useSelfDestructPenalty;
    _Bool selfDestructOnEject;
    uint8_t _pad_14[0x2];
    float recentHitTime;
    _Bool allowVehicleExit;
    _Bool allowEditLoadoutWhenDead;
    uint8_t _pad_15[0x2];
    struct LegacyUIOptionsParams* legacyUIOptions;
    uint8_t _pad_16[0x8];
    _Bool requiresBuildingBlocksRoundTimer;
    _Bool allowIngameMenu;
    _Bool allShipsModifiable;
    _Bool canJoinLobbies;
    _Bool canAccessMobiGlass;
    uint8_t _pad_17[0x3];
    int32_t planetMaxPatchesOverride;
    int32_t planetPatchTimeoutOverride;
    struct SGameRulesAnnouncerParams* announcerParams;
    uint8_t _pad_18[0x28];
    struct SPlayerCameraTypeAllowedParams* playerCamerasAllowed;
    uint8_t _pad_19[0x8];
    _Bool restrictGasExchanges;
    _Bool showGreenZoneWeaponsOnlineOffline;
    _Bool allowPartyInvite;
    _Bool joinOpenChannelOnStartup;
    float commsMaxValidRange;
    enum ARDataType shipComputerMode;
    _Bool canHaveTakeDownLethalOption;
    _Bool canTakeDownsFail;
    _Bool canRestrain;
    _Bool canPlayerUnrestrain;
    _Bool canRestrainFriendly;
    _Bool canTakedownFriendly;
    _Bool canApplyForcesToFriendly;
    _Bool showDeathInfo;
    _Bool hasPlanetaryEffects;
    _Bool missionsWaitForSpawn;
    _Bool persistSubsumptionVariables;
    _Bool showNonPlayerJoinFeed;
    _Bool allowQuickFromInventory;
    _Bool enableRigidGForceApplication;
    _Bool enableRigidTimeout;
    _Bool enableMaelstrom;
    uint8_t _pad_20[0x4];
    struct SReputationJournalEntryHandlerParams* reputationJournalEntryParams;
    uint8_t _pad_21[0x10];
    struct JournalEntry* shopInventoryAlertsJournalEntry;
    uint8_t _pad_22[0x10];
    struct FireParams* fireParams;
    uint8_t _pad_23[0x38];
    struct ActorMechanicsParams* actorMechanics;
    uint8_t _pad_24[0x50];
    struct AIActorLocomotionParams* AIActorLocomotion;
    uint8_t _pad_25[0x8];
    struct PlayerInteractionParams* playerInteractionParams;
    uint8_t _pad_26[0x20];
    struct PlayerForceReactionParams* playerForceReactionParams;
    uint8_t _pad_27[0x8];
    struct UIV2Markers* uiV2MarkerParams;
    uint8_t _pad_28[0x68];
    struct RadarOptionParams* radarOptionParams;
    uint8_t _pad_29[0x8];
    struct QuantumParams* quantumParams;
    uint8_t _pad_30[0x8];
    struct ResourceNetworkParams* resourceNetworkParams;
    uint8_t _pad_31[0x8];
    struct QuantumDriveGlobalParams* quantumDriveGlobalParams;
    uint8_t _pad_32[0x10];
    _Bool allowQuickPlayerChoiceSelection;
    _Bool showQuickPlayerChoiceShortcuts;
    _Bool allowSwapOutfit;
    _Bool usePrototypeMobiGlas;
    _Bool allowDensityManagement;
    _Bool allowFullscreenTutorials;
    _Bool allowFPSCrosshair;
    _Bool allowFPSHitmarker;
    _Bool allowPlayerSkills;
    _Bool enableDegradationThroughUsage;
    _Bool enableDegradationArmorMitigationLoss;
    _Bool enableWeaponMisfires;
    _Bool ignoreDisplayPriorityForObjectives;
    _Bool useShortStringForHUDObjectives;
    _Bool useNewNotificationSystem;
    _Bool useNewEVAMarker;
    _Bool useEVAAttachMarker;
    _Bool disableOldMFDs;
    _Bool disableUIViewForAllUsers;
    _Bool enableMFDCast;
    _Bool allowHarvestables;
    _Bool useNewVisorLens;
    _Bool useNewChat;
    _Bool useNewHudAR;
    _Bool enableMobiGlasForRemoteActors;
    _Bool enableMobiGlasForNPCs;
    _Bool restrictedAreaOnlyDespawn;
    uint8_t _pad_33[0x1];
    int32_t multicrewOverride;
    struct mobiGlasAppTable* mobiGlasAppTableRecord;
    uint8_t _pad_34[0x10];
};




struct SItemPortRule_HideInteractionsDef {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* interactionNames;
    uint8_t _pad_1[0x28];
};




struct SSCActorInteractionHelperParams {
    uint8_t _pad_0[0x18];
    struct DynArray_CryStringT* initiallyLockedInteractions;
    uint8_t _pad_1[0x28];
};




struct DisabledLoadoutInteraction {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct DynArray_CryStringT* lockedInteractionNames;
    uint8_t _pad_2[0x28];
};




struct SCItemControlCondition_AllowedByRemoteTurretView {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* turretTags;
    uint8_t _pad_1[0x40];
};




struct DurationTags {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* tags;
    uint8_t _pad_1[0x28];
    float minDuration;
    uint8_t _pad_2[0x4];
};




struct Fidget {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* FragmentTags;
    uint8_t _pad_1[0x28];
    float IntervalMin;
    float IntervalMax;
};




struct SMegaMapSolarSystem {
    uint8_t _pad_0[0x8];
    struct SSolarSystem* Record;
    uint8_t _pad_1[0x10];
    struct DynArray_CryStringT* ObjectContainers;
    uint8_t _pad_2[0x28];
};




struct PlayerAnimatedInteraction {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct DynArray_CryStringT* fragTags;
    uint8_t _pad_2[0x28];
    _Bool supportWalkToAlign;
    uint8_t _pad_3[0x7];
    struct CryStringT* CDIKTargetName;
    uint8_t _pad_4[0x8];
    struct PlayerAnimatedInteractionHandParams* handModeParams;
    uint8_t _pad_5[0x8];
};




struct PersonalThoughtContextualActionsMenu {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* enabledActionMaps;
    uint8_t _pad_1[0x28];
};




struct EntityComponentFrontendPUUIProviderParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* introTitleLocId;
    struct CLocIdentifier* introDescriptionLocId;
    struct CLocIdentifier* hangarLocId;
    struct CLocIdentifier* hangarDescriptionLocId;
    struct CryStringT* hangarSystemImagePath;
    uint8_t _pad_1[0x8];
    struct DynArray_CLocIdentifier* regionLocalizationIdentifiers;
    uint8_t _pad_2[0x28];
    struct CLocIdentifier* soloplayWarningLocId;
    struct CLocIdentifier* soloplayWarningConfirmLocId;
    struct CLocIdentifier* soloplayWarningCancelLocId;
    struct CLocIdentifier* firstSpawnWarningLocId;
    struct CLocIdentifier* firstSpawnWarningConfirmLocId;
    struct CLocIdentifier* firstSpawnWarningCancelLocId;
};




struct ActorStatusLocalisation {
    uint8_t _pad_0[0x8];
    struct DynArray_CLocIdentifier* hospitalisationReasonNames;
    uint8_t _pad_1[0x28];
    struct DynArray_CLocIdentifier* deathReasonNames;
    uint8_t _pad_2[0x28];
    struct DynArray_CLocIdentifier* damageTypeNames;
    uint8_t _pad_3[0x28];
};




struct SMasterModeLabels {
    uint8_t _pad_0[0x8];
    struct DynArray_CLocIdentifier* fullNames;
    uint8_t _pad_1[0x28];
    struct DynArray_CLocIdentifier* shortNames;
    uint8_t _pad_2[0x28];
};




struct VoteGenericLocParams {
    uint8_t _pad_0[0x8];
    struct DynArray_CLocIdentifier* locIds;
    uint8_t _pad_1[0x28];
};




struct SLoadingScreenInformationDef {
    uint8_t _pad_0[0x8];
    enum ARDataType loadingScreenType;
    uint8_t _pad_1[0x4];
    struct CryStringT* imagePath;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* primaryTitle;
    struct CLocIdentifier* secondaryTitle;
    struct CLocIdentifier* subtitle;
    struct CLocIdentifier* description;
    struct DynArray_CLocIdentifier* tips;
    uint8_t _pad_3[0x28];
};




struct ContractDisplayInfo {
    uint8_t _pad_0[0x8];
    struct DynArray_CLocIdentifier* displayString;
    uint8_t _pad_1[0x28];
    struct MissionType* type_;
    uint8_t _pad_2[0x10];
    _Bool illegal;
    _Bool showLifeTimeInMobiGlas;
    _Bool preShowObjectives;
    uint8_t _pad_3[0x5];
};




struct GlobalTutorialParams {
    uint8_t _pad_0[0x8];
    struct DynArray_CLocIdentifier* validStartingAreas;
    uint8_t _pad_1[0x28];
};




struct SOperatorModeLabels {
    uint8_t _pad_0[0x8];
    struct DynArray_CLocIdentifier* fullNames;
    uint8_t _pad_1[0x28];
    struct DynArray_CLocIdentifier* shortNames;
    uint8_t _pad_2[0x28];
};




struct ChatEmoteData {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* emoteType;
    struct DynArray_CLocIdentifier* alternateEmoteTypes;
    uint8_t _pad_1[0x28];
    _Bool enabled;
    _Bool isInterruptable;
    uint8_t _pad_2[0x6];
    struct ChatEmoteAnimData* animData;
    uint8_t _pad_3[0x30];
};




struct InfractionParameters {
    uint8_t _pad_0[0x8];
    int32_t isFelony;
    int32_t graceAllowance;
    float graceAllowanceCooldown;
    float gracePeriod;
    float graceCooloffScale;
    uint8_t _pad_1[0x4];
    struct DynArray_CLocIdentifier* graceWarnings;
    uint8_t _pad_2[0x28];
    int32_t displayGraceTime;
    float earlyPaymentPeriod;
    float escalatedPaymentFineMultiplier;
    float lifetime;
    float coolOffTime;
    float pressChargesNotificationTime;
    float removeTimeSeconds;
    int32_t felonyMerits;
    int32_t ignoreIfAgainstPartyMember;
    int32_t hideCrimeNotification;
    int32_t hideCrimeInJournal;
    uint8_t _pad_3[0x4];
};




struct BuildingBlocks_StaticArrayDataLocalization {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_CLocIdentifier* values;
    uint8_t _pad_2[0x28];
};




struct SSimpodSimulation {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* programCategory;
    struct CLocIdentifier* simulationTitle;
    struct CLocIdentifier* simulationDescription;
    struct DynArray_CLocIdentifier* rankDescriptions;
    uint8_t _pad_1[0x28];
    struct Tag* scenarioTag;
    uint8_t _pad_2[0x10];
    struct CryStringT* gameMode;
    uint8_t _pad_3[0x8];
    struct CryStringT* megaMap;
    uint8_t _pad_4[0x8];
};




struct MobiGlasMissionBriefing {
    uint8_t _pad_0[0x8];
    struct MissionLogEntry* briefingMissionLogEntry;
    uint8_t _pad_1[0x10];
    struct CryStringT* missionImage;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* missionSummary;
    struct MobiGlasMissionAuthorization* authorization;
    uint8_t _pad_3[0x10];
    struct CLocIdentifier* areaOfOperation;
    struct DynArray_CLocIdentifier* targets;
    uint8_t _pad_4[0x28];
    struct DynArray_CLocIdentifier* hazards;
    uint8_t _pad_5[0x28];
    struct DynArray_CLocIdentifier* pointsOfInterest;
    uint8_t _pad_6[0x28];
    struct DynArray_CLocIdentifier* enemyForces;
    uint8_t _pad_7[0x28];
    struct DynArray_CLocIdentifier* friendlyForces;
    uint8_t _pad_8[0x28];
    struct DynArray_CLocIdentifier* civilianConsiderations;
    uint8_t _pad_9[0x28];
    struct DynArray_CLocIdentifier* rulesOfEngagement;
    uint8_t _pad_10[0x28];
    struct DynArray_CLocIdentifier* tasks;
    uint8_t _pad_11[0x28];
    struct DynArray_CLocIdentifier* logistics;
    uint8_t _pad_12[0x28];
    struct CLocIdentifier* commandAndSignal;
    struct CLocIdentifier* supplementaryIntel;
};




struct SHackingCodeWindowParams {
    uint8_t _pad_0[0x8];
    int32_t maxLogSize;
    int32_t maxCommandHistorySize;
    struct CLocIdentifier* errorPrefixText;
    struct DynArray_CLocIdentifier* paramTypeNames;
    uint8_t _pad_1[0x28];
};




struct MobiGlasMissionNote {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* noteTitle;
    struct DynArray_CLocIdentifier* noteContent;
    uint8_t _pad_1[0x28];
    struct SMobiGlasAppLink* appLink;
    uint8_t _pad_2[0x40];
};




struct SAimableGimbalModeLabels {
    uint8_t _pad_0[0x8];
    struct DynArray_CLocIdentifier* fullNames;
    uint8_t _pad_1[0x28];
    struct DynArray_CLocIdentifier* shortNames;
    uint8_t _pad_2[0x28];
};




struct RestrictedAreaHUDMessageParams {
    uint8_t _pad_0[0x8];
    float proximityWarningMinDistance;
    float proximityWarningMaxTime;
    float proximityWarningDetectionConeAngle;
    uint8_t _pad_1[0x4];
    struct DynArray_CLocIdentifier* proximityWarningMessages;
    uint8_t _pad_2[0x28];
    struct CLocIdentifier* autopilotMessage;
    float proximityMessageTimer;
    uint8_t _pad_3[0x4];
    struct CLocIdentifier* nearWarningMessage;
    struct CLocIdentifier* leaveWarningMessage;
};




struct BuildingBlocks_StaticArrayDataInteger {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_int64_t* values;
    uint8_t _pad_2[0x28];
};




struct BuildingBlocks_BindingsBooleanFromIntegerSwitch {
    uint8_t _pad_0[0x50];
    struct DynArray_int64_t* exceptions;
    uint8_t _pad_1[0x28];
    _Bool defaultValue;
    uint8_t _pad_2[0x7];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_3[0x8];
};




struct SAimableControllerHudParams {
    uint8_t _pad_0[0x8];
    float hudAutoGimbalTrackingMarkerAnimationTime;
    _Bool showAutoGimbalCombinedAllPIP;
    uint8_t _pad_1[0x3];
    float leadPipFadingAngle;
    uint8_t _pad_2[0x4];
    struct BezierCurve* leadPipFadingCurve;
    uint8_t _pad_3[0x88];
    float lagPipFadingAngle;
    uint8_t _pad_4[0x4];
    struct BezierCurve* lagPipFadingCurve;
    uint8_t _pad_5[0x88];
    float borderOffsetAngleMin;
    float borderOffsetAngleMax;
    struct DynArray_int32_t* crosshairShapes;
    uint8_t _pad_6[0x28];
    float gimbalAlignmentAngle;
    _Bool gimbalAlignmentExcludeOutOfAngle;
    uint8_t _pad_7[0xb];
};




struct KeypadParams {
    uint8_t _pad_0[0x18];
    int32_t codeLength;
    _Bool repeatKey;
    _Bool repeatKeyInCode;
    _Bool randomCode;
    uint8_t _pad_1[0x1];
    struct DynArray_int32_t* validCodes;
    uint8_t _pad_2[0x28];
    int32_t attemptsUntilCodeReset;
    _Bool resetCodeOnSuccess;
    _Bool autoSuccessOnEnterKey;
    _Bool autoFailOnInputLength;
    uint8_t _pad_3[0x1];
    struct KeypadInteractionParams* interactionSetup;
    uint8_t _pad_4[0x8];
};




struct SLightFlickerAnimParams {
    uint8_t _pad_0[0x8];
    float minAnimTime;
    float maxAnimTime;
    float minSpeedMultiplier;
    float maxSpeedMultiplier;
    struct DynArray_int32_t* lightStyles;
    uint8_t _pad_1[0x28];
    struct SRGB8* endColor;
    uint8_t _pad_2[0x8];
    float restoreOriginalAfterTime;
    _Bool keepActiveAfterWaveFinished;
    uint8_t _pad_3[0x3];
    float trackviewTime;
    uint8_t _pad_4[0x4];
};




struct EAScoreboardPlacementAwardParams {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x7];
    struct DynArray_int32_t* placementAwards;
    uint8_t _pad_2[0x28];
    int32_t participationAward;
    _Bool isLosingTeamEligible;
    uint8_t _pad_3[0x3];
};




struct CrimeStatThresholds {
    uint8_t _pad_0[0x8];
    struct DynArray_int32_t* meritThresholds;
    uint8_t _pad_1[0x28];
};




struct AwardService_Award {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    uint8_t _pad_1[0x7];
    struct CryStringT* triggerId;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* displayTitle;
    struct CLocIdentifier* displayMessage;
    uint32_t badgeId;
    uint8_t _pad_3[0x4];
    struct DynArray_uint32_t* prerequisiteBadgeIds;
    uint8_t _pad_4[0x28];
    _Bool pushCommLinkNotification;
    uint8_t _pad_5[0x7];
};




struct SHackingDifficultyPreset {
    uint8_t _pad_0[0x8];
    int32_t boardWidth;
    int32_t boardHeight;
    float timelimit;
    uint8_t _pad_1[0x4];
    struct DynArray_uint32_t* linkGroups;
    uint8_t _pad_2[0x28];
    int32_t minSpawnPointsCount;
    int32_t maxSpawnPointsCount;
    float defenseAlertDuration;
    _Bool codeOnlyInput;
    uint8_t _pad_3[0x3];
    struct SHackingCodeInputModifiersParams* codeInputModifiersParams;
    uint8_t _pad_4[0x10];
    struct SHackingThreatLevelsPreset* threatLevelsPreset;
    uint8_t _pad_5[0x10];
};




struct CraftingRecipeResults {
    uint8_t _pad_0[0x8];
    struct DynArray_CraftingResult_Base* results;
    uint8_t _pad_1[0x28];
};




struct SPUSpectator {
    uint8_t _pad_0[0x18];
    struct DynArray_SpectatorModeParams* modes;
    uint8_t _pad_1[0x28];
    enum ARDataType defaultSpectatorCamera;
    uint8_t _pad_2[0x4];
};




struct SFPSSpectator {
    uint8_t _pad_0[0x18];
    struct DynArray_SpectatorModeParams* modes;
    uint8_t _pad_1[0x28];
    enum ARDataType defaultSpectatorCamera;
    uint8_t _pad_2[0x4];
};




struct SISpectatorBase {
    uint8_t _pad_0[0x18];
    struct DynArray_SpectatorModeParams* modes;
    uint8_t _pad_1[0x28];
    enum ARDataType defaultSpectatorCamera;
    uint8_t _pad_2[0x4];
};




struct SDFMSpectator {
    uint8_t _pad_0[0x18];
    struct DynArray_SpectatorModeParams* modes;
    uint8_t _pad_1[0x28];
    enum ARDataType defaultSpectatorCamera;
    uint8_t _pad_2[0x4];
    float minDistanceForSecondaryTarget;
    uint8_t _pad_3[0x4];
};




struct SApplicationFormBodyTypeOption {
    uint8_t _pad_0[0x8];
    struct DynArray_SApplicationFormHead* availableHeads;
    uint8_t _pad_1[0x28];
};




struct InnerThought_LayoutGridSet {
    uint8_t _pad_0[0x8];
    struct DynArray_InnerThought_LayoutGridSetThought* thoughts;
    uint8_t _pad_1[0x28];
};




struct IFCSParams {
    uint8_t _pad_0[0x18];
    float scmSpeed;
    float boostSpeedForward;
    float boostSpeedBackward;
    float maxSpeed;
    float maxSpeedPrecisionModeFullProximityAssist;
    float maxSpeedPrecisionModeZeroProximityAssist;
    struct Vec3* maxAngularVelocity;
    uint8_t _pad_1[0x10];
    enum ARDataType linearLimiterType;
    enum ARDataType pitchYawLimiterType;
    struct AfterburnerParams* afterburner;
    uint8_t _pad_2[0x190];
    float torqueDistanceThreshold;
    float torqueImbalanceMultiplier;
    struct DynArray_bool* thrusterTypesForAngularControl;
    uint8_t _pad_3[0x28];
    _Bool refreshCachesOnLandingMode;
    uint8_t _pad_4[0x7];
    struct DynArray_AeroSurface* aeroSurfaces;
    uint8_t _pad_5[0x28];
    float liftMultiplier;
    float dragMultiplier;
    float turbulenceAmplitude;
    float groundTurbulenceAmplitude;
    float precisionMinDistance;
    float precisionMaxDistance;
    float precisionLandingMultiplier;
    uint8_t _pad_6[0x4];
    struct BezierCurve* precisionAccelCurve;
    uint8_t _pad_7[0x88];
    float linearAccelDecay;
    float angularAccelDecay;
    float scmMaxDragMultiplier;
    uint8_t _pad_8[0x4];
    struct CLocIdentifier* thrusterImbalanceMessage;
    struct Vec3* positiveLinearScale;
    uint8_t _pad_9[0x10];
    struct Vec3* negativeLinearScale;
    uint8_t _pad_10[0x10];
    struct Vec3* positiveAngularScale;
    uint8_t _pad_11[0x10];
    struct Vec3* negativeAngularScale;
    uint8_t _pad_12[0x10];
    struct IntoxicationIFCSModifierParams* intoxicationModifierRef;
    uint8_t _pad_13[0x10];
    struct AeroParams* aeroParams;
    uint8_t _pad_14[0x228];
    struct BezierCurve* selfPowerToThrusterPowerCurve;
    uint8_t _pad_15[0x88];
    struct SIFCSAuthoredMotionLimits* authoredMotionLimits;
    uint8_t _pad_16[0x20];
};




struct BuildingBlocks_BindingsIntegerVariable {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsPathBase* path;
    uint8_t _pad_1[0x28];
    struct CryStringT* binding;
    uint8_t _pad_2[0x8];
    _Bool inheritsNamespace;
    _Bool isPulled;
    _Bool isWatched;
    uint8_t _pad_3[0x15];
};




struct BuildingBlocks_BindingsBooleanVariable {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsPathBase* path;
    uint8_t _pad_1[0x28];
    struct CryStringT* binding;
    uint8_t _pad_2[0x8];
    _Bool inheritsNamespace;
    _Bool isPulled;
    _Bool isWatched;
    uint8_t _pad_3[0x15];
};




struct BuildingBlocks_BindingsVectorVariable {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsPathBase* path;
    uint8_t _pad_1[0x28];
    struct CryStringT* binding;
    uint8_t _pad_2[0x8];
    _Bool inheritsNamespace;
    _Bool isPulled;
    _Bool isWatched;
    uint8_t _pad_3[0x15];
};




struct BuildingBlocks_BindingsTransformVariable {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsPathBase* path;
    uint8_t _pad_1[0x28];
    struct CryStringT* binding;
    uint8_t _pad_2[0x8];
    _Bool inheritsNamespace;
    _Bool isPulled;
    _Bool isWatched;
    uint8_t _pad_3[0x15];
};




struct BuildingBlocks_BindingsRotationVariable {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsPathBase* path;
    uint8_t _pad_1[0x28];
    struct CryStringT* binding;
    uint8_t _pad_2[0x8];
    _Bool inheritsNamespace;
    _Bool isPulled;
    _Bool isWatched;
    uint8_t _pad_3[0x15];
};




struct BuildingBlocks_BindingsNumberVariable {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsPathBase* path;
    uint8_t _pad_1[0x28];
    struct CryStringT* binding;
    uint8_t _pad_2[0x8];
    _Bool inheritsNamespace;
    _Bool isPulled;
    _Bool isWatched;
    uint8_t _pad_3[0x15];
};




struct BuildingBlocks_BindingsLocalizedVariable {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsPathBase* path;
    uint8_t _pad_1[0x28];
    struct CryStringT* binding;
    uint8_t _pad_2[0x8];
    _Bool inheritsNamespace;
    _Bool isPulled;
    _Bool isWatched;
    uint8_t _pad_3[0x15];
};




struct BuildingBlocks_BindingsIntegerTimestamp {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsPathBase* path;
    uint8_t _pad_1[0x28];
    struct CryStringT* binding;
    uint8_t _pad_2[0x8];
    _Bool inheritsNamespace;
    _Bool isPulled;
    _Bool isWatched;
    uint8_t _pad_3[0x15];
};




struct BuildingBlocks_BindingsStringVariable {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsPathBase* path;
    uint8_t _pad_1[0x28];
    struct CryStringT* binding;
    uint8_t _pad_2[0x8];
    _Bool inheritsNamespace;
    _Bool isPulled;
    _Bool isWatched;
    uint8_t _pad_3[0x15];
};




struct ActorStaminaComponent {
    uint8_t _pad_0[0x8];
    struct BreathableOxygenParams* oxygenGasParams;
    uint8_t _pad_1[0x48];
    struct DynArray_BreathableGasParams* breathableGasesParams;
    uint8_t _pad_2[0x28];
    struct StaminaCostParams* staminaCostParams;
    uint8_t _pad_3[0x80];
    struct HudFeedbackParams* hudFeedbackParams;
    uint8_t _pad_4[0x90];
    struct BreathingHelperParams* breathingHelper;
    uint8_t _pad_5[0x28];
    struct NpcBreathingParams* npcBreathingParams;
    uint8_t _pad_6[0x8];
};




struct StatusEffectBuffMacro {
    uint8_t _pad_0[0x8];
    float threshold;
    uint8_t _pad_1[0x4];
    struct DynArray_ActorStatusAddBuff* buffEffects;
    uint8_t _pad_2[0x28];
};




struct SMFDModeConfig {
    uint8_t _pad_0[0x8];
    struct SMFDOperatorModeConfig* defaultConfiguration;
    uint8_t _pad_1[0x20];
    struct DynArray_SMFDOperatorModeConfig* operatorModeViewConfigurations;
    uint8_t _pad_2[0x28];
    struct DynArray_SMFDOperatorModeConfig* operatorModeViewConfigurationsNoCasts;
    uint8_t _pad_3[0x28];
};




struct VehicleEditorCapabilities {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    enum ARDataType unit;
    uint8_t decimalPlaces;
    uint8_t _pad_1[0x3];
    enum ARDataType compareMode;
    float minActualValue;
    float maxActualValue;
    _Bool interpolateToDisplayValues;
    uint8_t _pad_2[0x3];
    float minDisplayValue;
    float maxDisplayValue;
    _Bool clampValuesToMinMax;
    uint8_t _pad_3[0x7];
    struct DynArray_VehicleEditorCapability* stats;
    uint8_t _pad_4[0x28];
};




struct SEntityWheeledPhysicsComponentParams {
    uint8_t _pad_0[0x18];
    struct SEntityBasePhysicsControllerParams* PhysType;
    uint8_t _pad_1[0x8];
    struct DynArray_SEntityPhysicsWheel* wheels;
    uint8_t _pad_2[0x28];
};




struct ControlHints_LocalizedKeyInput {
    uint8_t _pad_0[0x8];
    enum ARDataType activationMode;
    uint8_t _pad_1[0x4];
    struct DynArray_ControlHints_KeyInput* keynames;
    uint8_t _pad_2[0x48];
};




struct SSCSignatureSystemAudioTriggerTypeRule {
    uint8_t _pad_0[0x8];
    struct DynArray_SSCSignatureSystemAudioSubRule* subRules;
    uint8_t _pad_1[0x28];
    struct SSCSignatureSystemAudioModifier* modifier;
    uint8_t _pad_2[0x8];
    enum ARDataType triggerType;
    uint8_t _pad_3[0x4];
};




struct SSCSignatureSystemAudioRule {
    uint8_t _pad_0[0x8];
    struct DynArray_SSCSignatureSystemAudioSubRule* subRules;
    uint8_t _pad_1[0x28];
    struct SSCSignatureSystemAudioModifier* modifier;
    uint8_t _pad_2[0x8];
};




struct SSCSignatureSystemAudioTriggerTagRule {
    uint8_t _pad_0[0x8];
    struct DynArray_SSCSignatureSystemAudioSubRule* subRules;
    uint8_t _pad_1[0x28];
    struct SSCSignatureSystemAudioModifier* modifier;
    uint8_t _pad_2[0x8];
    struct Tag* triggerTag;
    uint8_t _pad_3[0x10];
};




struct SSCSignatureSystemAudioRuleAlways {
    uint8_t _pad_0[0x8];
    struct DynArray_SSCSignatureSystemAudioSubRule* subRules;
    uint8_t _pad_1[0x28];
    struct SSCSignatureSystemAudioModifier* modifier;
    uint8_t _pad_2[0x8];
};




struct SEntityEffectCoreParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SEffectParamsNodeBase* EffectParams;
    uint8_t _pad_1[0x28];
};




struct EVAState {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct CryStringT* mannequinTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* mannequinFragment;
    uint8_t _pad_3[0x8];
    struct DynArray_EVAConnection* connections;
    uint8_t _pad_4[0x28];
};




struct Character {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float nicknameChance;
    uint8_t _pad_2[0x4];
    struct CryStringT* audioSwitchStateName;
    uint8_t _pad_3[0x8];
    struct DynArray_CryStringT* aliases;
    uint8_t _pad_4[0x28];
    struct CryStringT* animationRemapAlias;
    uint8_t _pad_5[0x8];
    struct CryStringT* characterMannequinTag;
    uint8_t _pad_6[0x8];
    struct CryStringT* styleMannequinTag;
    uint8_t _pad_7[0x8];
    enum ARDataType combatStyle;
    enum ARDataType gender;
    struct DynArray_MovementSpeedOverride* characterSpeedOverrides;
    uint8_t _pad_8[0x28];
};




struct SCDynamicLightingRigComponentParams {
    uint8_t _pad_0[0x18];
    struct SCDynamicLightingRigGlobalParams* settings;
    uint8_t _pad_1[0x10];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct DynArray_SCDynamicRigLightEnabledParams* enabledLights;
    uint8_t _pad_3[0x28];
};




struct ScanDisplaySectionParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ScanDisplayInstanceParams* displayInstances;
    uint8_t _pad_1[0x28];
};




struct ActorViewLimitPresetDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorViewLimitPreset* presets;
    uint8_t _pad_1[0x38];
};




struct SCItemSuitFuelParams {
    uint8_t _pad_0[0x8];
    struct ResourceType* fuelResourcePrimary;
    uint8_t _pad_1[0x10];
    struct ResourceType* fuelResourceSecondary;
    uint8_t _pad_2[0x10];
    struct SBaseCargoUnit* primaryFuelBurnRateMicroSCU;
    uint8_t _pad_3[0x8];
    float secondaryFuelBurnRateGrams;
    uint8_t _pad_4[0x4];
    struct SBaseCargoUnit* fuelRefillRateFromTankMicroSCU;
    uint8_t _pad_5[0x8];
    struct SBaseCargoUnit* fuelRefillRateFromAtmosphereMicroSCU;
    uint8_t _pad_6[0x8];
    struct SBaseCargoUnit* fuelRefillRateFromInjectionMicroSCU;
    uint8_t _pad_7[0x8];
    struct DynArray_SCItemSuitAtmosphereFuelConversionParams* gasConversionRatios;
    uint8_t _pad_8[0x28];
    struct CLocIdentifier* usingSecondaryFuelMessage;
};




struct SeatUserActorCDIKMapping {
    uint8_t _pad_0[0x8];
    struct ActorSkeletonConfig* userSkeleton;
    uint8_t _pad_1[0x10];
    struct DynArray_SeatUserActorCDIKConfig* defaultCDIKTargets;
    uint8_t _pad_2[0x28];
};




struct BoolUserVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool defaultValue;
    uint8_t _pad_2[0x7];
    struct DynArray_BoolUserVariableTask* tasks;
    uint8_t _pad_3[0x28];
};




struct VehicleSerialNumberFormat {
    uint8_t _pad_0[0x8];
    struct DynArray_VehicleSerialNumberCharacterType* characterTypes;
    uint8_t _pad_1[0x28];
    struct DynArray_VehicleSerialNumberCharacterType* format;
    uint8_t _pad_2[0x28];
};




struct SecurityClearanceTokenData_OR {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
    struct DynArray_SecurityClearanceTokenData* conditions;
    uint8_t _pad_2[0x28];
};




struct SecurityClearanceTokenData_AND {
    uint8_t _pad_0[0x8];
    struct Tag* conditionFailedTag;
    uint8_t _pad_1[0x10];
    struct DynArray_SecurityClearanceTokenData* conditions;
    uint8_t _pad_2[0x28];
};




struct S42ShipStatusAppParams {
    uint8_t _pad_0[0x8];
    struct mobiGlasApp* linkedStarMap;
    uint8_t _pad_1[0x10];
    float shipHoloRotationSpeed;
    float shipHoloRotationSmoothTime;
    float lowAmmoThreshold;
    float lowOrdnanceThreshold;
    float lowHydrogenFuelThreshold;
    float lowQuantumFuelThreshold;
    float shipRecallRetryTime;
    _Bool requirePermissionForShipRecall;
    uint8_t _pad_2[0x3];
    struct DynArray_S42ShipStatusAllowedShipParams* playerShips;
    uint8_t _pad_3[0x28];
};




struct BuildingBlocks_TextEmphasisModifierList {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_TextFormatModifierBase* textEmphasis;
    uint8_t _pad_1[0x28];
};




struct SWeaponActionParallelParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct DynArray_SWeaponActionParams* weaponActions;
    uint8_t _pad_10[0x28];
};




struct BuildingBlocks_BindingsColorFromIntegerSwitch {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_ColorBase* defaultValue;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_2[0x8];
    struct DynArray_BuildingBlocks_ColorIntegerPairDef* pairs;
    uint8_t _pad_3[0x28];
};




struct TransitStationAnnouncements {
    uint8_t _pad_0[0x8];
    struct DynArray_TransitStationAnnouncement* announcements;
    uint8_t _pad_1[0x28];
};




struct SPerkReputationListParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SPerkReputationParams* perks;
    uint8_t _pad_1[0x28];
};




struct SubHarvestableMultiConfig {
    uint8_t _pad_0[0x8];
    struct SubHarvestableConfigSingleBase* defaultConfig;
    uint8_t _pad_1[0x8];
    _Bool ignoreAttachableTagsForTaggedConfigs;
    uint8_t _pad_2[0x7];
    struct DynArray_TaggedSubHarvestableConfig* taggedConfigs;
    uint8_t _pad_3[0x28];
};




struct ActorMechanicsParams {
    uint8_t _pad_0[0x8];
    _Bool allowZeroGTraversal;
    _Bool allowEVAIronman;
    _Bool allowSwimming;
    _Bool allowSliding;
    _Bool allowInAirLedgeGrab;
    _Bool allowLadderV2;
    _Bool allowKioskWalkToAlign;
    _Bool allowKioskV2;
    _Bool allowProneV2;
    _Bool allowFirstSelects;
    uint8_t _pad_1[0x6];
    struct DynArray_OutfitParams* outfitParams;
    uint8_t _pad_2[0x28];
    _Bool allowUnlimitedEVAFuel;
    _Bool allowEVARefuelFromAtmosphere;
    _Bool allowNPCInfiniteAmmo;
    _Bool allowLooting;
    _Bool allowRestockOnNPCLootingAmmo;
    _Bool allowRestockOnNPCLootingWeapons;
    _Bool allowInfiniteRestraints;
    _Bool allowLowerOnFriendlyEntities;
    _Bool allowLowerOnFriendlyActors;
    _Bool allowScriptedVisorFrost;
    _Bool allowRadiationStats;
    uint8_t _pad_3[0x5];
};




struct CustomScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct DynArray_ScanCustomData* customDatas;
    uint8_t _pad_3[0x28];
};




struct SWeaponAIDataParams {
    uint8_t _pad_0[0x8];
    struct Range* accuracyRange;
    uint8_t _pad_1[0x8];
    struct BezierCurve* accuracyRangeCurve;
    uint8_t _pad_2[0x88];
    struct SWeaponAIShootingTimeAccuracyData* shootingTimeAccuracyData;
    uint8_t _pad_3[0x98];
    float idealCombatRange;
    enum ARDataType CombatRangeCategory;
    float baseAccuracy;
    float impactRadiusForFriendlyFire;
    float firingValidationAngleTolerance;
    float bulletBendingAngleLimit;
    _Bool canShootWhenObstructed;
    uint8_t _pad_4[0x7];
    struct WeaponAIAimingMethod* weaponAimingMethod;
    uint8_t _pad_5[0x8];
    struct DynArray_SWeaponActionAIParams* aiFiringActionParams;
    uint8_t _pad_6[0x28];
};




struct SEffectParamSound {
    uint8_t _pad_0[0x28];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct CryStringT* tag;
    uint8_t _pad_2[0x8];
    struct CryStringT* Helper;
    uint8_t _pad_3[0x8];
    struct QuatT* Offset;
    uint8_t _pad_4[0x50];
    _Bool IsLooped;
    _Bool Enabled;
    _Bool Prime;
    _Bool Kill;
    float Timer;
    int32_t RenderSlot;
    uint32_t ContextFlags;
    _Bool MultiPosition;
    uint8_t _pad_5[0x7];
    struct Vec3* Axis;
    uint8_t _pad_6[0x10];
    struct DynArray_SEffectInputParamsSound* InputVariables;
    uint8_t _pad_7[0x28];
};




struct PlayerChoiceMenuItems {
    uint8_t _pad_0[0x8];
    struct DynArray_PlayerChoiceMenuItem* allAvailableItems;
    uint8_t _pad_1[0x28];
};




struct Announcement {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Conversation* conversation;
    uint8_t _pad_2[0x10];
    struct CryStringT* gameToken;
    uint8_t _pad_3[0x8];
    enum ARDataType gameTokenType;
    uint8_t _pad_4[0x4];
    struct DynArray_AnnouncementGameToken* gameTokens;
    uint8_t _pad_5[0x28];
    enum ARDataType priority;
    float retriggerDelay;
    float playProbability;
    _Bool playWhenDead;
    _Bool playWhenSpectating;
    uint8_t _pad_6[0x2];
};




struct VisibilityConditionDef_AND {
    uint8_t _pad_0[0x8];
    struct DynArray_VisibilityConditionDef* conditions;
    uint8_t _pad_1[0x28];
};




struct SCSeatAccessEntranceInteractionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct SCSeatAccessInteractionConditionParams* conditions;
    uint8_t _pad_2[0x20];
    struct SCSeatConnectionParams* seatConnection;
    uint8_t _pad_3[0x28];
    struct SCDashboardConnectionParams* dashboardConnection;
    uint8_t _pad_4[0x10];
    struct SCTurretSeatRotationParams* seatEnterExitAngleParams;
    uint8_t _pad_5[0x8];
    struct SCSeatAccessEntranceInteractionStateParams* enterState;
    uint8_t _pad_6[0x8];
    struct SCSeatAccessEntranceInteractionStateParams* exitState;
    uint8_t _pad_7[0x8];
    struct DynArray_SCSeatAccessLinkedGatewayParams* linkedGateways;
    uint8_t _pad_8[0x28];
};




struct SCSeatAccessPassageInteractionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct SCSeatAccessInteractionConditionParams* conditions;
    uint8_t _pad_2[0x20];
    struct CryStringT* fragmentOverride;
    uint8_t _pad_3[0x8];
    struct SCSeatAccessPassageInteractionStateParams* enterState;
    uint8_t _pad_4[0x8];
    struct SCSeatAccessPassageInteractionStateParams* exitState;
    uint8_t _pad_5[0x8];
    struct DynArray_SCSeatAccessLinkedGatewayParams* linkedGateways;
    uint8_t _pad_6[0x28];
};




struct PlanetEffectLOD {
    uint8_t _pad_0[0x8];
    struct DynArray_PlanetEffectLODDistance* LODList;
    uint8_t _pad_1[0x28];
    struct GlobalFogVolume* globalFogVolume;
    uint8_t _pad_2[0x30];
    uint32_t tintColorSampleCells;
    _Bool sortByViewDistance;
    uint8_t _pad_3[0x3];
    float overrideHalfResInsertDepth;
    uint8_t _pad_4[0x4];
};




struct BuildingBlocks_BindingsIntegerFromIntegerSwitch {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsIntegerBase* defaultOverride;
    uint8_t _pad_1[0x8];
    int64_t defaultValue;
    struct DynArray_BuildingBlocks_IntegerIntegerPair* values;
    uint8_t _pad_2[0x28];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_3[0x8];
};




struct SLoadoutRequirementAND {
    uint8_t _pad_0[0x8];
    struct DynArray_SLoadoutRequirementBase* Requirements;
    uint8_t _pad_1[0x28];
};




struct SLoadoutRequirementOR {
    uint8_t _pad_0[0x8];
    struct DynArray_SLoadoutRequirementBase* Requirements;
    uint8_t _pad_1[0x28];
};




struct SpawnDescription_ShipOptions {
    uint8_t _pad_0[0x8];
    struct DynArray_SpawnDescription_Ship* options;
    uint8_t _pad_1[0x28];
};




struct CameraRemoteTurretConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_4[0x50];
    struct DynArray_GlobalResourceTexture* postFlashUI;
    uint8_t _pad_5[0x28];
    float fovScale;
    float focusSpeed;
    struct DynArray_float* zoomStages;
    uint8_t _pad_6[0x28];
};




struct SCItemSeatDashboardUIDesc {
    uint8_t _pad_0[0x8];
    struct DynArray_SCItemSeatDashboardScreen* Screens;
    uint8_t _pad_1[0x28];
    struct MarkerAR_ConfigDef* markerConfig;
    uint8_t _pad_2[0x10];
    _Bool playCommsOnLens;
    _Bool showTargetOnLens;
    uint8_t _pad_3[0x6];
};




struct SCItemVisorDashboardConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_SCItemSeatDashboardScreen* screens;
    uint8_t _pad_1[0x28];
};




struct MusicLogicEventList {
    uint8_t _pad_0[0x8];
    struct DynArray_MusicLogicEvent* events;
    uint8_t _pad_1[0x28];
};




struct EATeamsModuleParams {
    uint8_t _pad_0[0x18];
    _Bool allowSwitch;
    _Bool allowFriendlyFire;
    _Bool replaceTeamNamesWithPlayerNames;
    enum ARDataType autoFillType;
    int32_t maxTeamDiff;
    struct DynArray_EAFactionTeamParams* teams;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_BindingsBooleanEvaluateOr {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsBooleanBase* inputs;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_IntegerFromBitFlagDef {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsBooleanBase* inputs;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_BindingsBooleanEvaluateAnd {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_BindingsBooleanBase* inputs;
    uint8_t _pad_1[0x28];
};




struct EntityClusterMember {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionVariableBase* variables;
    uint8_t _pad_1[0x28];
};




struct SCItemGasProducerConsumerParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SGasProducerConsumerEntryParams* producerConsumerParams;
    uint8_t _pad_1[0x28];
    _Bool autoAssignToRoom;
    uint8_t _pad_2[0x3];
    float duration;
    struct SGasPressureRangeParams* atmosphericPressureRange;
    uint8_t _pad_3[0x8];
};




struct ContextMenu {
    uint8_t _pad_0[0x8];
    struct DynArray_ContextMenuOption* options;
    uint8_t _pad_1[0x28];
};




struct BreathDurationParams {
    uint8_t _pad_0[0x8];
    float defaultDuration;
    float durationModifier;
    float holdBreathInhaleTime;
    uint8_t _pad_1[0x4];
    struct DynArray_HoldExhaleDuration* holdBreathExhaleTimes;
    uint8_t _pad_2[0x28];
};




struct LoadoutItemPortViewParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ItemPortViewInformation* list;
    uint8_t _pad_1[0x28];
    _Bool enableSelectingModelItemPort;
    uint8_t _pad_2[0x7];
};




struct BuildingBlocks_Keyframe {
    uint8_t _pad_0[0x8];
    float percent;
    uint8_t _pad_1[0x4];
    struct DynArray_BuildingBlocks_KeyframeModifierData* modifiers;
    uint8_t _pad_2[0x28];
};




struct SActorForceReactionsPresetRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_SActorForceReactionsProceduralLeanOverride* procLeanOverrides;
    uint8_t _pad_1[0x38];
};




struct BodyMapping {
    uint8_t _pad_0[0x8];
    struct CryStringT* vehicleCollisionJointName;
    uint8_t _pad_1[0x8];
    struct DynArray_BodyJoint* joints;
    uint8_t _pad_2[0x68];
};




struct SAttachableObjectContainerSpawnerParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SAttachableObjectContainerData* ObjectContainers;
    uint8_t _pad_1[0x28];
};




struct SSCLocalPlayerMarkerTrackerComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_EAMarkerTrackerBase* eaTrackersParams;
    uint8_t _pad_1[0x28];
    struct IncapacitatedPlayerMarkerParams* incapacitatedPlayerMarkerParams;
    uint8_t _pad_2[0x28];
};




struct SVibrationDef {
    uint8_t _pad_0[0x8];
    struct DynArray_VibrationTypeData* vibrationTypes;
    uint8_t _pad_1[0x28];
    _Bool listensToPhysics;
    _Bool listensToDamage;
    _Bool listensToHits;
    uint8_t _pad_2[0x5];
};




struct SEAFPSGunGameArmorSet {
    uint8_t _pad_0[0x8];
    struct DynArray_SEAFPSGunGameArmorLevel* armorLevels;
    uint8_t _pad_1[0x28];
};




struct ItemResourceComposition {
    uint8_t _pad_0[0x8];
    struct DynArray_ItemResourceCompositionValue* values;
    uint8_t _pad_1[0x48];
};




struct ScanInformationDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct ScanDisplayLayoutParams* scanDisplayLayout;
    uint8_t _pad_2[0x10];
    struct DynArray_ScanProcedureParams* scanProcedures;
    uint8_t _pad_3[0x28];
};




struct WeaponProceduralClipsSetUp {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    struct DynArray_WeaponProceduralClip* weaponProceduralClips;
    uint8_t _pad_2[0x28];
};




struct PlayerChoiceMenuOptionSubMenu {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct DynArray_PlayerChoiceMenuOption* options;
    uint8_t _pad_1[0x28];
};




struct StatusWidgetDisplayPreset {
    uint8_t _pad_0[0x8];
    struct DynArray_DisplayState* ranges;
    uint8_t _pad_1[0x28];
    float incrementDisplayDuration;
    float incrementStep;
    float maximumChangePerSecond;
    int32_t historySeconds;
    int32_t historySamplesPerSecond;
    _Bool shownOnLens;
    _Bool shownOnVisor;
    uint8_t _pad_2[0x2];
};




struct BuildingBlocks_BindingsIntegerFromTagSwitch {
    uint8_t _pad_0[0x50];
    int64_t defaultValue;
    struct DynArray_BuildingBlocks_TagIntegerPair* values;
    uint8_t _pad_1[0x28];
    struct BuildingBlocks_BindingsStringBase* input;
    uint8_t _pad_2[0x8];
};




struct MissionModuleHierarchy {
    uint8_t _pad_0[0x8];
    struct CryStringT* missionModule;
    uint8_t _pad_1[0x8];
    struct DynArray_MissionModuleHierarchySubMission* subMissionModules;
    uint8_t _pad_2[0x28];
};




struct SItemPerkListParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* displayDescription;
    struct CryStringT* icon;
    uint8_t _pad_3[0x8];
    struct DynArray_SPerkShopItemCategoryBase* discountedItems;
    uint8_t _pad_4[0x28];
};




struct MissionModifier_ShopItemPerksDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* modifierName;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x1f];
    struct DynArray_SPerkShopItemCategoryBase* itemCategory;
    uint8_t _pad_3[0x28];
};




struct SControlledEntityRopeAttachmentPairs {
    uint8_t _pad_0[0x8];
    struct DynArray_SControlledEntityRopeAttachmentPair* attachmentPairs;
    uint8_t _pad_1[0x28];
};




struct MissionScenarioCycle {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    struct DynArray_MissionScenarioCyclePhase* phases;
    uint8_t _pad_3[0x28];
};




struct ProcBreathingExertion {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float maxStamina;
    float maxFullness;
    struct DynArray_ProcBreathingGraphEntry* entries;
    uint8_t _pad_2[0x28];
};




struct SRemoteRigidEntityControlledEntitiesParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SControlledEntityParams* entities;
    uint8_t _pad_1[0x28];
    struct SAutoCraneParams* autoCraneData;
    uint8_t _pad_2[0x40];
    struct SOverrideControlledEntityCameraParams* cameraOverrideData;
    uint8_t _pad_3[0x58];
    struct SControlledEntityGroupCondition* accessCondition;
    uint8_t _pad_4[0x20];
};




struct ScreenEffects_DebugEffect {
    uint8_t _pad_0[0x8];
    struct Tag* name;
    uint8_t _pad_1[0x10];
    _Bool enable;
    uint8_t _pad_2[0x7];
    struct DynArray_ScreenEffects_DebugParam* parameters;
    uint8_t _pad_3[0x28];
};




struct StatusEffectDamageOverTime {
    uint8_t _pad_0[0x8];
    float effectMax;
    float effectMin;
    _Bool ignoresMultiplier;
    uint8_t _pad_1[0x7];
    struct DynArray_BodyPart* damagedParts;
    uint8_t _pad_2[0x28];
    float damageAtMin;
    float damageAtMax;
};




struct BodyPartConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_BodyPart* bodyParts;
    uint8_t _pad_1[0x28];
    float damageMultiplier;
    float nakedDamageMultiplier;
    float stunMultiplier;
    float impactForceMultiplier;
    _Bool isHeadShot;
    _Bool isFallDamageTarget;
    _Bool isFPViewOccluder;
    uint8_t _pad_2[0x5];
};




struct StatusEffectDamageToDeathOverTime {
    uint8_t _pad_0[0x8];
    float effectMax;
    float effectMin;
    _Bool ignoresMultiplier;
    uint8_t _pad_1[0x7];
    struct DynArray_BodyPart* damagedParts;
    uint8_t _pad_2[0x28];
    float damageCurveMultiplier;
    uint8_t _pad_3[0x4];
};




struct StatusEffectDamage {
    uint8_t _pad_0[0x8];
    float effectMax;
    float effectMin;
    _Bool ignoresMultiplier;
    uint8_t _pad_1[0x7];
    struct DynArray_BodyPart* damagedParts;
    uint8_t _pad_2[0x28];
};




struct StatusEffectDamageNonLinear {
    uint8_t _pad_0[0x8];
    float effectMax;
    float effectMin;
    _Bool ignoresMultiplier;
    uint8_t _pad_1[0x7];
    struct DynArray_BodyPart* damagedParts;
    uint8_t _pad_2[0x28];
    float baseDamage;
    float minDamage;
    float damageFalloff;
    uint8_t _pad_3[0x4];
};




struct AudioBreathStyleSuite {
    uint8_t _pad_0[0x8];
    struct AudioBreathStyleNode* initialStyle;
    uint8_t _pad_1[0x8];
    struct DynArray_AudioBreathStyleBaseNode* nodes;
    uint8_t _pad_2[0x28];
};




struct AutoSpawnSettings {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* initialActivity;
    uint8_t _pad_2[0x8];
    struct TagList* positiveCharacterTags;
    uint8_t _pad_3[0x30];
    struct TagList* negativeCharacterTags;
    uint8_t _pad_4[0x30];
    _Bool excludeShipCrew;
    uint8_t _pad_5[0x3];
    enum ARDataType excludeSpawnGender;
    int32_t minGroupSize;
    int32_t maxGroupSize;
    int32_t maxConcurrentSpawns;
    int32_t maxSpawns;
    float minSpawnDelay;
    float maxSpawnDelay;
    struct DynArray_SpawnSettingsInventoryItem* inventoryItems;
    uint8_t _pad_6[0x28];
    struct TagList* closetPositiveTags;
    uint8_t _pad_7[0x30];
    struct TagList* closetNegativeTags;
    uint8_t _pad_8[0x30];
    struct TagList* roomPositiveTags;
    uint8_t _pad_9[0x30];
    struct TagList* roomNegativeTags;
    uint8_t _pad_10[0x30];
    struct TagList* defendAreaPositiveTags;
    uint8_t _pad_11[0x30];
    struct TagList* defendAreaNegativeTags;
    uint8_t _pad_12[0x30];
    struct TagList* entityTags;
    uint8_t _pad_13[0x30];
    struct Faction* factionOverride;
    uint8_t _pad_14[0x10];
    _Bool missionAlliedMarker;
    _Bool isCritical;
    uint8_t _pad_15[0x6];
};




struct SSpecializedData {
    uint8_t _pad_0[0x8];
    struct DynArray_SSpecializedDataEntry* specializedDataEntry;
    uint8_t _pad_1[0x28];
};




struct GlobalShopSellingParams {
    uint8_t _pad_0[0x8];
    float matchPercentage;
    float noMatchPercentage;
    float missionItemSellPriceReductionPercentage;
    uint8_t _pad_1[0x4];
    struct DynArray_float* maxInventoryCurve;
    uint8_t _pad_2[0x28];
    struct DynArray_float* wearCurve;
    uint8_t _pad_3[0x28];
    struct DynArray_ItemTypeModifier* itemTypeModifiers;
    uint8_t _pad_4[0x28];
};




struct SReputationAmountListParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SReputationAmountParams* reputationAmounts;
    uint8_t _pad_1[0x28];
};




struct AIAvailableSpecialRangedAttacksConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_AISpecialRangedAttackConfig* availableSpecialRangedAttacks;
    uint8_t _pad_1[0x28];
};




struct SMiniGameSpriteParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* spriteName;
    uint8_t _pad_1[0x8];
    struct DynArray_Vec2* uvStart;
    uint8_t _pad_2[0x28];
    struct Vec2* uvSize;
    uint8_t _pad_3[0x8];
    struct Vec2* size;
    uint8_t _pad_4[0x8];
};




struct BezierCurve {
    uint8_t _pad_0[0x8];
    struct DynArray_Vec2* points;
    uint8_t _pad_1[0x28];
    _Bool useLUT;
    uint8_t _pad_2[0x57];
};




struct SReputationScopeContextUI {
    uint8_t _pad_0[0x8];
    struct SReputationScopeParams* scope;
    uint8_t _pad_1[0x10];
    struct DynArray_SReputationContextBBPropertyParams* propertiesBB;
    uint8_t _pad_2[0x28];
};




struct MissionGiver {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    struct FactionReputation* reputation;
    uint8_t _pad_2[0x10];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* description;
    struct CLocIdentifier* headquarters;
    float invitationTimeout;
    float visitTimeout;
    float shortCooldown;
    float mediumCooldown;
    float longCooldown;
    uint8_t _pad_3[0x4];
    struct DynArray_CLocIdentifier* Allies;
    uint8_t _pad_4[0x28];
    struct DynArray_CLocIdentifier* Enemies;
    uint8_t _pad_5[0x28];
    struct DynArray_SReputationContextBBPropertyParams* propertiesBB;
    uint8_t _pad_6[0x28];
};




struct SignatureSystemGlobalParams {
    uint8_t _pad_0[0x8];
    float globalDBFactor;
    float globalAmbientIRFactor;
    float nearbyInfluenceThresholdFactor;
    uint8_t _pad_1[0x4];
    struct SignatureUIGlobalParams* signatureUIParams;
    uint8_t _pad_2[0x18];
    struct ActorSignatureMultiplierGlobalParams* actorMultiplierParams;
    uint8_t _pad_3[0x10];
    struct CrossSectionGlobalParams* crossSectionParams;
    uint8_t _pad_4[0x20];
    struct DynArray_SignatureTypeGlobalParams* signatureTypeParams;
    uint8_t _pad_5[0x28];
    struct MasterModeSwitchDeltaSignatureTypes* masterModeDeltaSignatureType;
    uint8_t _pad_6[0x30];
    struct RadarDeltaSignatureEntry* scanWaveTriggeredDeltaSignatureType;
    uint8_t _pad_7[0x10];
};




struct SReputationJournalGroupParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SReputationStandingJournalEntryParams* standingEntries;
    uint8_t _pad_1[0x28];
};




struct SWeaponConditionAll {
    uint8_t _pad_0[0x8];
    struct DynArray_SWeaponConditionBase* conditions;
    uint8_t _pad_1[0x28];
};




struct SWeaponConditionAny {
    uint8_t _pad_0[0x8];
    struct DynArray_SWeaponConditionBase* conditions;
    uint8_t _pad_1[0x28];
};




struct NavigationLinkCostCustomization {
    uint8_t _pad_0[0x8];
    struct DynArray_NavigationLinkTagCost* tagCosts;
    uint8_t _pad_1[0x28];
};




struct LongTermPersistenceGlobalParams {
    uint8_t _pad_0[0x8];
    struct DynArray_LongTermPersistenceWhiteListEntry* LongTermPersistenceWhiteList;
    uint8_t _pad_1[0x28];
};




struct ScanCustomValueArray {
    uint8_t _pad_0[0x8];
    struct DynArray_ScanCustomValue* value;
    uint8_t _pad_1[0x28];
};




struct ControlHints_HintDisplayInfoAction {
    uint8_t _pad_0[0x8];
    _Bool overrideName;
    uint8_t _pad_1[0x7];
    struct CLocIdentifier* name;
    _Bool includeSeparator;
    uint8_t _pad_2[0x7];
    struct CLocIdentifier* separatorInputName;
    struct CryStringT* separatorIconPath;
    uint8_t _pad_3[0x8];
    struct DynArray_ControlHints_Input* actions;
    uint8_t _pad_4[0x28];
};




struct SCItemControlPriorityTable {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct SCItemControlPriorityValue* defaultPriority;
    uint8_t _pad_2[0x8];
    struct DynArray_SCItemControlPriorityTag* tagPrioritiesTable;
    uint8_t _pad_3[0x50];
};




struct SEAUISpawnScreenComponentParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* vehicleSlotLocString;
    struct CryStringT* onFootSpawnIcon;
    uint8_t _pad_1[0x8];
    struct CryStringT* defaultVehicleIcon;
    uint8_t _pad_2[0x8];
    _Bool generalSeating;
    _Bool allSeatsSelectable;
    uint8_t maxDisplayedSquadmates;
    uint8_t _pad_3[0x1];
    float locationIconRadius;
    float spawnDoubleClickTime;
    uint8_t _pad_4[0x4];
    struct SEAUISpawnScreenFPSEquipmentParams* FPSEquipmentParams;
    uint8_t _pad_5[0x30];
    struct DynArray_EAUIMulticrewTypeOptionParams* multicrewTypeOption;
    uint8_t _pad_6[0x28];
    struct DynArray_SelectionTab* selectionTabs;
    uint8_t _pad_7[0x28];
};




struct VehicleCareer {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct DynArray_VehicleRole* roleList;
    uint8_t _pad_1[0x28];
};




struct TagToAudioRtpcList {
    uint8_t _pad_0[0x8];
    struct DynArray_TagToAudioRtpc* TagsToRtpcs;
    uint8_t _pad_1[0x28];
};




struct SGeometryViewDistanceRatioCategories {
    uint8_t _pad_0[0x8];
    struct DynArray_SViewDistanceRatioParams* categories;
    uint8_t _pad_1[0x28];
};




struct ActorStatData {
    uint8_t _pad_0[0x8];
    enum ARDataType statType;
    float initialValue;
    float minimumStatValue;
    float maximumStatValue;
    float decayRate;
    float baseDecayCooldown;
    float initialCooldown;
    enum ARDataType cooldownType;
    _Bool decayToCurrentStatus;
    _Bool mutuallyExclusiveStatuses;
    _Bool remoteClientPredicted;
    _Bool useIdealStatValue;
    uint8_t _pad_1[0x4];
    struct DynArray_LinkedStatBase* linkedStats;
    uint8_t _pad_2[0x28];
    struct StatusEffectSetupBase* effectSetup;
    uint8_t _pad_3[0x8];
    struct StatusMaskedRetriggerSetupBase* maskedRetriggerSetup;
    uint8_t _pad_4[0x8];
};




struct AudioBudgetDefinition {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioOneShotManagerBudgetEntry* oneshotBudget;
    uint8_t _pad_1[0x28];
    int32_t shipAudioLimit;
    int32_t shipThrusterLimit;
    int32_t actorFoleyLimit;
    uint8_t _pad_2[0x4];
};




struct HarvestableClusterPreset {
    uint8_t _pad_0[0x8];
    float probabilityOfClustering;
    uint8_t _pad_1[0x4];
    struct DynArray_HarvestableClusterParams* clusterParamsArray;
    uint8_t _pad_2[0x28];
};




struct SReputationStandingMapParams {
    uint8_t _pad_0[0x8];
    int64_t reputationCeiling;
    int64_t initialReputation;
    struct DynArray_SReputationStandingParams* standings;
    uint8_t _pad_1[0x28];
};




struct ItemWeaponBeamVFXStrengthOverrideParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ModifierInterpolator* interpolators;
    uint8_t _pad_1[0x28];
    float strength;
    float alpha;
};




struct ItemTypeCategoryMap {
    uint8_t _pad_0[0x8];
    struct ItemTypeCategory* defaultCategory;
    uint8_t _pad_1[0x8];
    struct DynArray_ItemTypeCategoryException* exceptions;
    uint8_t _pad_2[0x28];
    _Bool showInElectronicAccess;
    uint8_t _pad_3[0x7];
};




struct ItemAwardWeightings {
    uint8_t _pad_0[0x8];
    float weighting;
    uint8_t _pad_1[0x4];
    struct DynArray_ItemAwardBase* awards;
    uint8_t _pad_2[0x28];
};




struct MissionLogEntryList {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionLogEntry* missions;
    uint8_t _pad_1[0x28];
};




struct EntityComponentFrontendUIProviderParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SFrontendGameModeButton* frontendGameModeButtons;
    uint8_t _pad_1[0x28];
    struct FrontendOverrideParams* overrideFrontendParam;
    uint8_t _pad_2[0x10];
};




struct ScanOverrideParams {
    uint8_t _pad_0[0x8];
    struct ScanCustomDataDef* scanCustomData;
    uint8_t _pad_1[0x10];
    struct ScanDisplayLayoutParams* scanDisplayLayout;
    uint8_t _pad_2[0x10];
    struct DynArray_ScanOverrideDisplayBaseParams* scanDisplayOverrides;
    uint8_t _pad_3[0x28];
};




struct S42CommendationRulesEntry {
    uint8_t _pad_0[0x8];
    struct S42Commendation* commendation;
    uint8_t _pad_1[0x10];
    struct DynArray_S42CommendationRequirementBase* requirements;
    uint8_t _pad_2[0x28];
};




struct FlightHUDUIView_Config {
    uint8_t _pad_0[0x8];
    struct DynArray_FlightHUDUIMessage* messages;
    uint8_t _pad_1[0x28];
};




struct PersonalThoughtInventoryGridParams {
    uint8_t _pad_0[0x8];
    float panelWidth;
    float panelPadding;
    int32_t numberOfGrids;
    float itemPadding;
    float paddingWidth;
    float paddingHeight;
    float tabsNavHeight;
    float containerTitleHeight;
    float spaceBetweenContainers;
    float sizeMultiplicatorForPit;
    float sizeMultiplicatorForKiosk;
    uint8_t _pad_1[0x4];
    struct SBaseCargoUnit* bigContainerCapacity;
    uint8_t _pad_2[0x8];
    struct DynArray_InventoryContainerParams* inventoryContainers;
    uint8_t _pad_3[0x28];
};




struct LootArchetypeOrGroup_Secondary {
    uint8_t _pad_0[0x8];
    struct CryStringT* groupName;
    uint8_t _pad_1[0x8];
    struct DynArray_LootArchetypeEntry_Secondary* entries;
    uint8_t _pad_2[0x28];
};




struct SEntityComponentObjectMetadataParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* name;
    struct DynArray_SObjectMetadataParams* metadata;
    uint8_t _pad_1[0x28];
    _Bool hasLocalBounds;
    _Bool isDynamic;
    uint8_t _pad_2[0x6];
};




struct UIElementSoundsRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_UIElementSoundEntry* SoundDBs;
    uint8_t _pad_1[0x28];
};




struct ActorZeroGTraversalParams {
    uint8_t _pad_0[0x8];
    struct SCDefaultZeroGTraversalParams* defaultZeroGTraversalParams;
    uint8_t _pad_1[0x20];
    struct DynArray_SCOptionalZeroGTraversalParams* optionalZeroGTraversalParams;
    uint8_t _pad_2[0x28];
};




struct SDespawnRules {
    uint8_t _pad_0[0x8];
    struct DynArray_SDespawnRule* rules;
    uint8_t _pad_1[0x28];
    float despawnDelaySeconds;
    uint8_t _pad_2[0x4];
};




struct STaggedSignaturesEntry {
    uint8_t _pad_0[0x8];
    struct Tag* tagToMatch;
    uint8_t _pad_1[0x10];
    struct DynArray_SSignaturesCategoryEntry* signatureCategories;
    uint8_t _pad_2[0x28];
    struct DynArray_float* signatures;
    uint8_t _pad_3[0x28];
};




struct SCEntityComponentDragDropUsableUserParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SDragDropUsableUserConfig* dragDropUserConfigs;
    uint8_t _pad_1[0x28];
};




struct SEAUISpawnScreenFPSEquipmentSlotParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* slotName;
    struct CLocIdentifier* slotSelectionText;
    struct CryStringT* icon;
    uint8_t _pad_1[0x8];
    struct DynArray_SEAUISpawnScreenFPSEquipmentCategoryParams* categories;
    uint8_t _pad_2[0x28];
};




struct VoiceBundle {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_VoiceSingle* voices;
    uint8_t _pad_2[0x28];
};




struct PersonalThoughtInventorySingleFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayIconPath;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* name;
    _Bool disableForFPSKiosk;
    uint8_t _pad_2[0x7];
    struct DynArray_ItemCategory* categories;
    uint8_t _pad_3[0x28];
};




struct PersonalThoughtInventoryItemOrientationOffset {
    uint8_t _pad_0[0x8];
    struct Vec3* orientationOffset;
    uint8_t _pad_1[0x10];
    struct DynArray_ItemCategory* itemCategories;
    uint8_t _pad_2[0x28];
};




struct InventoryDropDetachRules {
    uint8_t _pad_0[0x8];
    struct ItemCategory* category;
    uint8_t _pad_1[0x20];
    struct DynArray_ItemCategory* dropDetachTypes;
    uint8_t _pad_2[0x28];
};




struct QuickAccessWheelInventoryItemDef {
    uint8_t _pad_0[0x8];
    _Bool openContextMenuAsFolder;
    uint8_t _pad_1[0x7];
    struct DynArray_ItemCategory* itemCategories;
    uint8_t _pad_2[0x28];
    _Bool clenchPreviousItem;
    uint8_t _pad_3[0x3];
    enum ARDataType postUnstowAction;
};




struct InventoryInteractionBlockingAttachedEntities {
    uint8_t _pad_0[0x8];
    struct ItemCategory* category;
    uint8_t _pad_1[0x20];
    struct DynArray_ItemCategory* blockingAttachedTypes;
    uint8_t _pad_2[0x28];
};




struct LootingTabParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* iconPath;
    uint8_t _pad_1[0x8];
    struct DynArray_ItemCategory* itemCategories;
    uint8_t _pad_2[0x28];
};




struct QuickAccessWheelAttachableSlotsDef {
    uint8_t _pad_0[0x8];
    _Bool openContextMenuAsFolder;
    uint8_t _pad_1[0x7];
    struct DynArray_CryStringT* itemPortNames;
    uint8_t _pad_2[0x28];
    struct DynArray_ItemCategory* itemCategories;
    uint8_t _pad_3[0x28];
    _Bool clenchPreviousItem;
    uint8_t _pad_4[0x3];
    enum ARDataType postUnstowAction;
};




struct BoidState {
    uint8_t _pad_0[0x8];
    struct CryStringT* stateName;
    uint8_t _pad_1[0x8];
    struct DynArray_BoidsBehaviorRuleContainer* rules;
    uint8_t _pad_2[0x28];
    _Bool shouldBeOnNavmesh;
    _Bool deterministic;
    uint8_t _pad_3[0x6];
    struct DynArray_BoidTransition* boidTransitions;
    uint8_t _pad_4[0x28];
    struct CryStringT* animationTag;
    uint8_t _pad_5[0x8];
    struct CryStringT* fragmentTag;
    uint8_t _pad_6[0x8];
    float maxLinearSpeed;
    uint8_t _pad_7[0x24];
};




struct BuildingBlocks_StaticArrayEntry {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_StaticArrayDataBase* structureVariables;
    uint8_t _pad_1[0x28];
};




struct FoleyLoop {
    uint8_t _pad_0[0x8];
    struct CryStringT* playTrigger;
    uint8_t _pad_1[0x8];
    struct CryStringT* stopTrigger;
    uint8_t _pad_2[0x8];
    float threshold;
    _Bool applyToClient;
    _Bool applyToNLPC;
    uint8_t _pad_3[0x2];
    struct DynArray_UserRTPC* userRTPCs;
    uint8_t _pad_4[0x28];
};




struct FoleyOneShot {
    uint8_t _pad_0[0x8];
    struct CryStringT* trigger;
    uint8_t _pad_1[0x8];
    float threshold;
    float actorSpeedThreshold;
    _Bool playOnRising;
    uint8_t _pad_2[0x7];
    struct FoleyAxis* axis;
    uint8_t _pad_3[0x10];
    _Bool applyToClient;
    _Bool applyToNLPC;
    uint8_t _pad_4[0x6];
    struct DynArray_UserRTPC* userRTPCs;
    uint8_t _pad_5[0x28];
};




struct UnitTest {
    uint8_t _pad_0[0x8];
    struct TestAtomics* atomics;
    uint8_t _pad_1[0x48];
    struct TestArrays* arrays;
    uint8_t _pad_2[0x360];
    struct UnitTest* reference;
    uint8_t _pad_3[0x10];
    struct TestAtomics* weakptr;
    uint8_t _pad_4[0x8];
    struct TestAtomics* weakptrnull;
    uint8_t _pad_5[0x8];
    struct TestAtomics* strongptr;
    uint8_t _pad_6[0x8];
    struct TestAtomics* strongptrnull;
    uint8_t _pad_7[0x8];
    struct UnitTest_Inheritance* inheritance;
    uint8_t _pad_8[0x40];
    struct CLocIdentifier* locale;
    struct RGB8* colour;
    uint8_t _pad_9[0x8];
    struct BezierCurve* curve;
    uint8_t _pad_10[0x88];
    uint8_t baseOverrideDefault[0x10];
    struct UnitTestSubRecord* recordReference;
    uint8_t _pad_11[0x10];
    struct DynArray_UnitTestSubRecord* embeddedRecordArray;
    uint8_t _pad_12[0x30];
};




struct MobiGlasAfterActionReportStat {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct S42StatId* statIdentifier;
    uint8_t _pad_2[0x38];
    struct DynArray_S42StatOperationBase* operations;
    uint8_t _pad_3[0x28];
    struct CLocIdentifier* suffix;
    int32_t decimalPlaces;
    uint8_t _pad_4[0x4];
};




struct S42CommendationRequirementStat {
    uint8_t _pad_0[0x8];
    struct S42StatId* statIdentifier;
    uint8_t _pad_1[0x38];
    struct DynArray_S42StatOperationBase* operations;
    uint8_t _pad_2[0x28];
    enum ARDataType comparison;
    float value;
};




struct SUsableIdleParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SUsableIdlePoseOverride* idlePoseOverrides;
    uint8_t _pad_1[0x28];
};




struct GPUParticleAudioList {
    uint8_t _pad_0[0x8];
    struct DynArray_GPUParticleAudio* particleAudioList;
    uint8_t _pad_1[0x28];
};




struct SActorForceReactionKnockdownConfigDef {
    uint8_t _pad_0[0x8];
    struct SActorForceReactionBlockConfig* reactionBlock;
    uint8_t _pad_1[0x30];
    struct DynArray_SActorForceReactionKnockdownRangeDef* knockdownRanges;
    uint8_t _pad_2[0x28];
};




struct SShopUIProviderParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SShopUIProviderCategoryIcon* categoryIcons;
    uint8_t _pad_1[0x28];
    _Bool defaultModeBuying;
    uint8_t _pad_2[0x7];
    struct CryStringT* degradationIcon;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocks_BindingsNumberFromIntegerSwitch {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsNumberBase* defaultOverride;
    uint8_t _pad_1[0x8];
    float defaultValue;
    uint8_t _pad_2[0x4];
    struct DynArray_BuildingBlocks_IntegerNumberPair* values;
    uint8_t _pad_3[0x28];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_4[0x8];
};




struct UIStateDisplay {
    uint8_t _pad_0[0x8];
    struct DynArray_UIStateDisplay_Threshold* thresholds;
    uint8_t _pad_1[0x28];
};




struct EmotionList {
    uint8_t _pad_0[0x8];
    struct DynArray_EmotionDescription* emotions;
    uint8_t _pad_1[0x28];
};




struct SCItemPriorityGroupParam {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t defaultPriority;
    uint8_t _pad_1[0x3];
    struct DynArray_SCItemPriorityTagParam* tags;
    uint8_t _pad_2[0x40];
};




struct HandholdParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool startEnabled;
    uint8_t _pad_2[0x7];
    struct QuatT* transform;
    uint8_t _pad_3[0x50];
    struct HandholdGripType* gripType;
    uint8_t _pad_4[0x10];
    struct AngYPR* gripOrientation;
    uint8_t _pad_5[0x10];
    float gripSizeCm;
    float gripLengthCm;
    struct DynArray_HandholdAttachSpotParams* attachSpots;
    uint8_t _pad_6[0x28];
};




struct PingWaveVFXParams {
    uint8_t _pad_0[0x8];
    struct DynArray_GlobalResourceParticle* waveParticle;
    uint8_t _pad_1[0x28];
    struct GlobalResourceGeometry* pulseSphereGeometry;
    uint8_t _pad_2[0x10];
    struct GlobalResourceGeometry* pulseHalfSphereGeometry;
    uint8_t _pad_3[0x10];
    struct GlobalResourceGeometry* pulseConeGeometry;
    uint8_t _pad_4[0x10];
    struct GlobalResourceMaterial* pulseMaterial;
    uint8_t _pad_5[0x10];
    struct GlobalResourceMaterial* conePulseMaterial;
    uint8_t _pad_6[0x10];
    float visualMaxDistance;
    float visualAcceleration;
    _Bool snapWaveTimescaleToLifetime;
    _Bool use360PingwaveEffectForAllLevels;
    _Bool attachPingwaveEffectToHost;
    uint8_t _pad_7[0x5];
};




struct CommunicationVariableConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_CommunicationVariableBool* variables;
    uint8_t _pad_1[0x28];
};




struct VehicleComponentParams {
    uint8_t _pad_0[0x18];
    _Bool maelstromVehicle;
    uint8_t _pad_1[0x7];
    struct CryStringT* vehicleDefinition;
    uint8_t _pad_2[0x8];
    struct CryStringT* modification;
    uint8_t _pad_3[0x8];
    enum ARDataType movementClass;
    _Bool dogfightEnabled;
    _Bool allowSoftDestruction;
    _Bool ignoreHostility;
    _Bool unmoveable;
    _Bool isGravlevVehicle;
    uint8_t _pad_4[0x3];
    float vehicleHullDamageNormalizationValue;
    _Bool isAugmentedRealityVehicle;
    uint8_t _pad_5[0x7];
    struct GlobalResourceMaterial* augmentedRealityMaterial;
    uint8_t _pad_6[0x10];
    struct SVehicleAiDamageModifiers* aiDamageModifiers;
    uint8_t _pad_7[0x10];
    float emergencyStatusDamageThreshold;
    float emergencyStatusChargeThreshold;
    struct Vec3* maxBoundingBoxSize;
    uint8_t _pad_8[0x10];
    struct Vec2* cargoEntrySize;
    uint8_t _pad_9[0x8];
    struct VehicleAIPropertiesParams* aiProperties;
    uint8_t _pad_10[0x8];
    struct SCItemManufacturer* manufacturer;
    uint8_t _pad_11[0x10];
    int32_t crewSize;
    uint8_t _pad_12[0x4];
    struct CLocIdentifier* vehicleRole;
    struct VehicleRole* vehicleRoleRef;
    uint8_t _pad_13[0x10];
    struct CLocIdentifier* vehicleCareer;
    struct VehicleCareer* vehicleCareerRef;
    uint8_t _pad_14[0x10];
    struct CLocIdentifier* vehicleName;
    struct CLocIdentifier* vehicleDescription;
    struct CryStringT* vehicleImagePath;
    uint8_t _pad_15[0x8];
    struct VehicleLandingGearSystem* landingSystem;
    uint8_t _pad_16[0x10];
    struct DynArray_SVehicleObjectContainerParams* objectContainers;
    uint8_t _pad_17[0x28];
    struct SVehiclePhysicsGridParams* physicsGrid;
    uint8_t _pad_18[0x58];
    struct SDFSetParams* shieldSDFParams;
    uint8_t _pad_19[0x8];
    struct SCItemUIView_DashboardCanvasDef* DashboardCanvasConfig;
    uint8_t _pad_20[0x10];
    struct InventoryContainer* inventoryContainerParams;
    uint8_t _pad_21[0x18];
};




struct BuildingBlocks_StyleSelectorConditionAnyOfCondition {
    uint8_t _pad_0[0x10];
    struct DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_StyleSelectorConditionAllOfCondition {
    uint8_t _pad_0[0x10];
    struct DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_StyleSelectorConditionParent {
    uint8_t _pad_0[0x10];
    struct DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_StyleSelectorConditionChild {
    uint8_t _pad_0[0x10];
    struct DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_StyleConditionList {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions;
    uint8_t _pad_2[0x30];
};




struct BuildingBlocks_StyleSelectorConditionAncestor {
    uint8_t _pad_0[0x10];
    struct DynArray_BuildingBlocks_StyleSelectorConditionBase* breakConditions;
    uint8_t _pad_1[0x28];
    struct DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions;
    uint8_t _pad_2[0x28];
};




struct LadderComponentParams {
    uint8_t _pad_0[0x18];
    float height;
    _Bool userIgnoreStaticCollisions;
    _Bool slideable;
    _Bool autoMountable;
    uint8_t _pad_1[0x1];
    struct AutoMountRadiusParams* autoMountableRadiusParametersAtBottom;
    uint8_t _pad_2[0x10];
    float approachAngleAtBottom;
    float facingAngleAtBottom;
    float remountDelayAtBottom;
    uint8_t _pad_3[0x4];
    struct AutoMountRadiusParams* autoMountableRadiusParametersAtTop;
    uint8_t _pad_4[0x10];
    float approachAngleAtTop;
    float facingAngleAtTop;
    float remountDelayAtTop;
    _Bool directionAtTopIncludesBack;
    uint8_t _pad_5[0x3];
    struct ExitCollisionCheckOverrideParams* topBackExitCollisionCheckOverride;
    uint8_t _pad_6[0x8];
    _Bool directionAtTopIncludesLeft;
    uint8_t _pad_7[0x7];
    struct ExitCollisionCheckOverrideParams* topLeftExitCollisionCheckOverride;
    uint8_t _pad_8[0x8];
    _Bool directionAtTopIncludesRight;
    uint8_t _pad_9[0x7];
    struct ExitCollisionCheckOverrideParams* topRightExitCollisionCheckOverride;
    uint8_t _pad_10[0x8];
    _Bool autoDismountOnHighestMidPointWhenNoTopAvailable;
    uint8_t _pad_11[0x7];
    struct DynArray_LadderAccessPointParams* midAccessPoints;
    uint8_t _pad_12[0x28];
    _Bool HACKUseParentZoneExitingLadderTopHACK;
    uint8_t _pad_13[0x7];
};




struct MobiGlasMissionAuthorization {
    uint8_t _pad_0[0x8];
    struct DynArray_MobiGlasAuthorizationEntry* authorizationEntries;
    uint8_t _pad_1[0x28];
};




struct SItemResourceContainerStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SRangeStateLevel* stateRanges;
    uint8_t _pad_1[0x28];
    struct ResourceType* containerResource;
    uint8_t _pad_2[0x10];
    _Bool useActualOccupancyValue;
    uint8_t _pad_3[0x7];
};




struct SRangeStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SRangeStateLevel* stateRanges;
    uint8_t _pad_1[0x28];
};




struct SDegradationStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SRangeStateLevel* stateRanges;
    uint8_t _pad_1[0x28];
    enum ARDataType accumulator;
    uint8_t _pad_2[0x7];
    struct SInteractionState* expiredState;
    uint8_t _pad_3[0x8];
};




struct SVolatileCargoHealthStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SRangeStateLevel* stateRanges;
    uint8_t _pad_1[0x28];
};




struct SDamageMapStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SRangeStateLevel* stateRanges;
    uint8_t _pad_1[0x28];
};




struct EntityTemperatureStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SRangeStateLevel* stateRanges;
    uint8_t _pad_1[0x28];
};




struct SHealthStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SRangeStateLevel* stateRanges;
    uint8_t _pad_1[0x28];
    _Bool useHealthRatio;
    uint8_t _pad_2[0x7];
};




struct SResourceContainerStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SRangeStateLevel* stateRanges;
    uint8_t _pad_1[0x28];
    struct ResourceType* containerResource;
    uint8_t _pad_2[0x10];
    _Bool useActualOccupancyValue;
    uint8_t _pad_3[0x7];
};




struct PersonalThoughtActionDescriptionsList {
    uint8_t _pad_0[0x8];
    struct DynArray_PersonalThoughtActionDescription* actionDescriptions;
    uint8_t _pad_1[0x28];
};




struct StarMapAmenityTypes {
    uint8_t _pad_0[0x8];
    struct DynArray_StarMapAmenityTypeEntry* amenityTypes;
    uint8_t _pad_1[0x28];
};




struct ObjectiveHandler_Hauling {
    uint8_t _pad_0[0x8];
    struct ObjectivePropertyBase* organization;
    uint8_t _pad_1[0x8];
    struct ObjectiveProperty_Output* collectedCargoOutput;
    uint8_t _pad_2[0x8];
    struct Hauling_ObjectiveSettings* objectiveSettings;
    uint8_t _pad_3[0x100];
    struct DynArray_HaulingOrderBase* haulingOrders;
    uint8_t _pad_4[0x28];
    struct ObjectivePropertyBase* haulingLimitProperty;
    uint8_t _pad_5[0x8];
};




struct SQedVisualGraphStateParams {
    uint8_t _pad_0[0x8];
    struct SQedVisualGraphAnimationParams* animationParams;
    uint8_t _pad_1[0x28];
    struct SQedVisualGraphEffectParams* effectParams;
    uint8_t _pad_2[0x38];
    struct DynArray_SQedVisualGraphTransitionParams* transitions;
    uint8_t _pad_3[0x28];
};




struct LightningBehavior_Effect {
    uint8_t _pad_0[0x8];
    struct CryStringT* lightningEffect;
    uint8_t _pad_1[0x8];
    struct DynArray_LightningTargetMode* targetModes;
    uint8_t _pad_2[0x28];
};




struct BuildingBlocks_BindingsTagFromStringSwitch {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_StringTagPair* values;
    uint8_t _pad_1[0x28];
    struct Tag* defaultValue;
    uint8_t _pad_2[0x10];
    struct BuildingBlocks_BindingsStringBase* input;
    uint8_t _pad_3[0x8];
};




struct BuildingBlocksLayer {
    uint8_t _pad_0[0x8];
    struct CryStringT* layerName;
    uint8_t _pad_1[0x8];
    struct BuildingBlocksView* defaultView;
    uint8_t _pad_2[0x8];
    struct DynArray_BuildingBlocksView* views;
    uint8_t _pad_3[0x28];
    enum ARDataType renderTarget;
    uint8_t _pad_4[0x7];
};




struct VehicleEditorAvailableItemsData {
    uint8_t _pad_0[0x8];
    struct DynArray_VehicleEditorItemData* items;
    uint8_t _pad_1[0x28];
};




struct SCItemConditionalControllableGroupParams {
    uint8_t _pad_0[0x10];
    struct DynArray_SCItemConditionalPriority* conditionalPriorities;
    uint8_t _pad_1[0x40];
};




struct JumpDriveAudioParams {
    uint8_t _pad_0[0x8];
    struct DynArray_JumpDriveStateAudioMap* stateMap;
    uint8_t _pad_1[0x28];
    struct AudioRtpc* tunnelProgressRtpc;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* inJumpTunnelRtpc;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* distanceFromSplineRtpc;
    uint8_t _pad_4[0x18];
    float wallImpactSpeedThreshold;
    float wallImpactDistanceThreshold;
    struct AudioRtpc* tunnelWallImpactSpeedRtpc;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* tunnelWallImpactOneShot;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* startTunnelWallContactLoop;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* stopTunnelWallContactLoop;
    uint8_t _pad_8[0x18];
    struct AudioRtpc* splineVelRtpc;
    uint8_t _pad_9[0x18];
    struct AudioRtpc* distortionRtpc;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* startSplineCenterLoop;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* stopSplineCenterLoop;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* startShipTunnelMidpointLoop;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* stopShipTunnelMidpointLoop;
    uint8_t _pad_14[0x18];
    float passByLightDistanceThreshold;
    uint8_t _pad_15[0x4];
    struct AudioRtpc* passByLightDistanceNormRtpc;
    uint8_t _pad_16[0x18];
    struct AudioRtpc* passByLightDotRtpc;
    uint8_t _pad_17[0x18];
    struct JumpDriveAudioMovementParams* movementParams;
    uint8_t _pad_18[0x320];
};




struct ActorToxicGasParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ToxicGasDef* toxicGases;
    uint8_t _pad_1[0x28];
};




struct AudioGameContextSetup {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioGameContext* gameContexts;
    uint8_t _pad_1[0x28];
};




struct SDegradationParams {
    uint8_t _pad_0[0x18];
    _Bool StopDegradingIfDestroyed;
    uint8_t _pad_1[0x7];
    struct DynArray_SAccumulatorParams* accumulators;
    uint8_t _pad_2[0x28];
};




struct LiteralStringProviderComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_LiteralStringUserVariable* strings;
    uint8_t _pad_1[0x28];
};




struct SReputationStateMissionResultModifierListParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SReputationStateModifierParams* stateModifiers;
    uint8_t _pad_1[0x28];
};




struct CustomMaterialsEntityParams {
    uint8_t _pad_0[0x8];
    struct DynArray_CustomMaterialEntryParams* customMaterials;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_BindingsTagFromIntegerSwitch {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_IntegerTagPair* values;
    uint8_t _pad_1[0x28];
    struct Tag* defaultValue;
    uint8_t _pad_2[0x10];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_3[0x8];
};




struct RaSTaRLibraryCategory {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_RaSTaRLibraryElement* elements;
    uint8_t _pad_2[0x28];
};




struct SCItemSeatDashboardPhysicalScreenParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SPhysicalScreen* Screens;
    uint8_t _pad_1[0x28];
};




struct SGripContainer {
    uint8_t _pad_0[0x8];
    _Bool gripOverrideUsingLOS;
    uint8_t _pad_1[0x7];
    struct DynArray_SCarryableGrip* grips;
    uint8_t _pad_2[0x28];
};




struct SecurityTokenNotificationRecordReference {
    uint8_t _pad_0[0x8];
    struct DynArray_NotificationDef* notifications;
    uint8_t _pad_1[0x28];
};




struct TVMovieList {
    uint8_t _pad_0[0x8];
    struct DynArray_VideoComms* movies;
    uint8_t _pad_1[0x28];
};




struct TQSOptionReference {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct TQSOptionContentRecord* content;
    uint8_t _pad_2[0x10];
    struct DynArray_TQSOption* optionOverrides;
    uint8_t _pad_3[0x28];
};




struct TacticalQuery {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType type_;
    uint8_t _pad_2[0x7];
    struct DynArray_TQSOption* options;
    uint8_t _pad_3[0x28];
};




struct TQSEmbeddedOption {
    uint8_t _pad_0[0x8];
    struct TagsDNF* requirements;
    uint8_t _pad_1[0x60];
    struct TQSOptionContent* content;
    uint8_t _pad_2[0xc0];
    struct DynArray_TQSOption* optionOverrides;
    uint8_t _pad_3[0x28];
};




struct DialogueContent {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* localizedSubtitleText;
    struct CryStringT* tempText;
    uint8_t _pad_1[0x8];
    struct DynArray_DialogueExternalSource* externalSources;
    uint8_t _pad_2[0x28];
};




struct MissionPropertyValue_MissionItem {
    uint8_t _pad_0[0x8];
    int32_t minItemsToFind;
    int32_t maxItemsToFind;
    struct DynArray_BaseDataSetMatchCondition* matchConditions;
    uint8_t _pad_1[0x28];
    struct MissionItem* debugForceChosenItem;
    uint8_t _pad_2[0x10];
};




struct MissionPropertyValue_Organization {
    uint8_t _pad_0[0x8];
    struct DynArray_BaseDataSetMatchCondition* matchConditions;
    uint8_t _pad_1[0x28];
    struct MissionOrganization* debugForceChosenOrganization;
    uint8_t _pad_2[0x10];
};




struct SCharacterCustomizerVoiceParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct DynArray_SModelVoiceTagPair* modelVoiceTagPairs;
    uint8_t _pad_2[0x28];
};




struct SCharacterCustomizerSkinBaseMaterialList {
    uint8_t _pad_0[0x8];
    struct SGeometryModelTagBase* modelTag;
    uint8_t _pad_1[0x8];
    struct DynArray_SCharacterCustomizerBaseMaterialSet* skinBaseMaterials;
    uint8_t _pad_2[0x28];
};




struct SCharacterCustomizerWildlineCondition {
    uint8_t _pad_0[0x8];
    struct DynArray_SCharacterCustomizerWildlineSubconditionBase* subconditions;
    uint8_t _pad_1[0x28];
};




struct TriggerConditionDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    _Bool enabled;
    _Bool inverted;
    uint8_t _pad_3[0x6];
    struct Tag* tag;
    uint8_t _pad_4[0x10];
    struct DynArray_TriggerSubConditionDef* subconditions;
    uint8_t _pad_5[0x28];
    struct SConversationIconParams* iconParams;
    uint8_t _pad_6[0x70];
};




struct SEntityComponentDecalParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SDecalParams* decalParams;
    uint8_t _pad_1[0x28];
};




struct SCharacterCustomizerBodyTypeParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayNameLocId;
    struct EntityClassDefinition* bodyTypeDummyClass;
    uint8_t _pad_2[0x10];
    struct EntityReferenceDef* bodyTypeTagPoint;
    uint8_t _pad_3[0x10];
    struct SGeometryModelTagBase* overrideModelTag;
    uint8_t _pad_4[0x8];
    struct Vec3* bodyTypeOffset;
    uint8_t _pad_5[0x10];
    struct DynArray_SCharacterCustomizerRandomizationOverrideParams* randomizationOverrideParams;
    uint8_t _pad_6[0x28];
};




struct EntityTemperatureItemResource {
    uint8_t _pad_0[0x8];
    float minOperatingTemperature;
    float minCoolingTemperature;
    _Bool enableOverheat;
    uint8_t _pad_1[0x3];
    float overheatTemperature;
    float overheatWarningTemperature;
    float overheatRecoveryTemperature;
    struct DynArray_EntityTemperatureResourceHeatGeneration* stateHeatGenerationValues;
    uint8_t _pad_2[0x28];
    struct DynArray_DegradationTemperatureMultiplier* degradationTemperatureMultipliers;
    uint8_t _pad_3[0x28];
};




struct SecurityClearance_OutfitRequirement_OrDef {
    uint8_t _pad_0[0x8];
    struct DynArray_SecurityClearance_OutfitRequirementDef* requirementsToOr;
    uint8_t _pad_1[0x28];
};




struct SecurityClearance_OutfitRequirement_AndDef {
    uint8_t _pad_0[0x8];
    struct DynArray_SecurityClearance_OutfitRequirementDef* requirementsToAnd;
    uint8_t _pad_1[0x28];
};




struct PlayerAnimatedInteractionConfig {
    uint8_t _pad_0[0x8];
    struct WalkToAlignParams* walkToAlignParams;
    uint8_t _pad_1[0x18];
    struct DynArray_PlayerAnimatedInteractionFiltered* PlayerAnimatedInteractionStanceConfigs;
    uint8_t _pad_2[0x28];
    struct DynArray_AnimatedAction* AnimActionList;
    uint8_t _pad_3[0x28];
};




struct CinematicFlightPointsRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_CinematicFlythroughPoint* flightPoints;
    uint8_t _pad_1[0x28];
};




struct SObservableComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_ARDataType* perceptionTypes;
    uint8_t _pad_1[0x28];
    struct DynArray_ARDataType* excludedSenses;
    uint8_t _pad_2[0x28];
    struct DynArray_SObservablePointDef* observablePoints;
    uint8_t _pad_3[0x28];
    struct SObservablePointDef* defaultEntityObservablePoint;
    uint8_t _pad_4[0x8];
    struct SObservablePointDef* defaultAimingObservablePoint;
    uint8_t _pad_5[0x8];
    struct DynArray_IObservableExtender* observableExtensions;
    uint8_t _pad_6[0x28];
};




struct UIGroundingEffectsEntityComponentParams {
    uint8_t _pad_0[0x18];
    _Bool manualEnable;
    uint8_t _pad_1[0x7];
    struct CryStringT* materialName;
    uint8_t _pad_2[0x8];
    float rayGradientToTextureRatio;
    float rayExtensionFactor;
    float rayBaseOpacity;
    float rayFlickerOpacity;
    float rayPulseOpacity;
    float rayPulseTime;
    float rayMinSaturation;
    float rayMaxDistance;
    struct DynArray_Vec3* rayOriginPoints;
    uint8_t _pad_3[0x28];
};




struct SCarryableIKInteractionList {
    uint8_t _pad_0[0x8];
    struct DynArray_SCarryableIKInteraction* ikInteractions;
    uint8_t _pad_1[0x28];
};




struct DefaultPlayerLoadoutEntitlementRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_DefaultPlayerLoadoutEntitlementParams* Loadouts;
    uint8_t _pad_1[0x28];
};




struct LegacyCraftingRecipe_Default {
    uint8_t _pad_0[0x8];
    float timeSeconds;
    uint8_t _pad_1[0x4];
    struct DynArray_LegacyCraftingOutput_Base* outputs;
    uint8_t _pad_2[0x28];
    struct DynArray_LegacyCraftingCost_Base* costs;
    uint8_t _pad_3[0x28];
    struct CryStringT* iconImagePath;
    uint8_t _pad_4[0x8];
    struct CLocIdentifier* recipeName;
};




struct SExplosiveOrdnanceParams {
    uint8_t _pad_0[0x18];
    struct SOrdnanceAudioParams* audioParams;
    uint8_t _pad_1[0x80];
    _Bool requiresLauncher;
    _Bool enableLifetime;
    uint8_t _pad_2[0x2];
    float maxLifetime;
    float armTime;
    int32_t maxArmableOverride;
    float igniteTime;
    float collisionDelayTime;
    float explosionSafetyDistance;
    float projectileProximity;
    struct ExplosionParams* explosionParams;
    uint8_t _pad_3[0x1b8];
    struct SOrdnanceClusterParams* clusterParams;
    uint8_t _pad_4[0x8];
    struct DynArray_SOrdnanceEmissionsParams* emissionsParams;
    uint8_t _pad_5[0x28];
};




struct SCItemMissileParams {
    uint8_t _pad_0[0x18];
    struct SOrdnanceAudioParams* audioParams;
    uint8_t _pad_1[0x80];
    _Bool requiresLauncher;
    _Bool enableLifetime;
    uint8_t _pad_2[0x2];
    float maxLifetime;
    float armTime;
    int32_t maxArmableOverride;
    float igniteTime;
    float collisionDelayTime;
    float explosionSafetyDistance;
    float projectileProximity;
    struct ExplosionParams* explosionParams;
    uint8_t _pad_3[0x1b8];
    struct SOrdnanceClusterParams* clusterParams;
    uint8_t _pad_4[0x8];
    struct DynArray_SOrdnanceEmissionsParams* emissionsParams;
    uint8_t _pad_5[0x28];
    struct SGuidanceAndControlParams* GCSParams;
    uint8_t _pad_6[0x100];
    struct STargetingParams* targetingParams;
    uint8_t _pad_7[0x58];
    struct SShakeParams* shakeParams;
    uint8_t _pad_8[0x8];
};




struct SCItemSpaceMineParams {
    uint8_t _pad_0[0x18];
    struct SOrdnanceAudioParams* audioParams;
    uint8_t _pad_1[0x80];
    _Bool requiresLauncher;
    _Bool enableLifetime;
    uint8_t _pad_2[0x2];
    float maxLifetime;
    float armTime;
    int32_t maxArmableOverride;
    float igniteTime;
    float collisionDelayTime;
    float explosionSafetyDistance;
    float projectileProximity;
    struct ExplosionParams* explosionParams;
    uint8_t _pad_3[0x1b8];
    struct SOrdnanceClusterParams* clusterParams;
    uint8_t _pad_4[0x8];
    struct DynArray_SOrdnanceEmissionsParams* emissionsParams;
    uint8_t _pad_5[0x28];
};




struct SCItemBombParams {
    uint8_t _pad_0[0x18];
    struct SOrdnanceAudioParams* audioParams;
    uint8_t _pad_1[0x80];
    _Bool requiresLauncher;
    _Bool enableLifetime;
    uint8_t _pad_2[0x2];
    float maxLifetime;
    float armTime;
    int32_t maxArmableOverride;
    float igniteTime;
    float collisionDelayTime;
    float explosionSafetyDistance;
    float projectileProximity;
    struct ExplosionParams* explosionParams;
    uint8_t _pad_3[0x1b8];
    struct SOrdnanceClusterParams* clusterParams;
    uint8_t _pad_4[0x8];
    struct DynArray_SOrdnanceEmissionsParams* emissionsParams;
    uint8_t _pad_5[0x28];
    float dragAreaRadius;
    float centreOfPressureOffsetY;
    float maximumDropAngleFromFlatFlight;
    uint8_t _pad_6[0x4];
    struct AudioRtpc* altitudeRtpc;
    uint8_t _pad_7[0x18];
    float maxAltitudeForAudioRtpc;
    uint8_t _pad_8[0x4];
};




struct GeomFont_Config {
    uint8_t _pad_0[0x8];
    struct CryStringT* geometryFile;
    uint8_t _pad_1[0x8];
    struct CryStringT* metricsFile;
    uint8_t _pad_2[0x8];
    struct CryStringT* rootNode;
    uint8_t _pad_3[0x8];
    struct DynArray_GeomFont_LetterNode* letterNodes;
    uint8_t _pad_4[0x38];
};




struct SCEntityActorMovableParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* moveInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* exitInteraction;
    uint8_t _pad_2[0x8];
    struct DynArray_SMovableGrip* grips;
    uint8_t _pad_3[0x28];
    struct SMovableLimits* limits;
    uint8_t _pad_4[0x10];
    struct CryStringT* IntroFragmentId;
    uint8_t _pad_5[0x8];
    struct CryStringT* IntroFragTag;
    uint8_t _pad_6[0x8];
    struct CryStringT* OutroFragmentId;
    uint8_t _pad_7[0x8];
    struct CryStringT* OutroFragTag;
    uint8_t _pad_8[0x8];
};




struct FoleyFootstepDefinition {
    uint8_t _pad_0[0x8];
    int32_t priority;
    uint8_t _pad_1[0x4];
    struct CryStringT* heelLandAudioTrigger;
    uint8_t _pad_2[0x8];
    struct CryStringT* toeLandAudioTrigger;
    uint8_t _pad_3[0x8];
    struct CryStringT* footLiftAudioTrigger;
    uint8_t _pad_4[0x8];
    struct CryStringT* velocityRTPCName;
    uint8_t _pad_5[0x8];
    struct CryStringT* playerViewRotationRTPCName;
    uint8_t _pad_6[0x8];
    struct CryStringT* equipmentMassRTPCName;
    uint8_t _pad_7[0x8];
    struct CryStringT* playerSkillModifierRTPCName;
    uint8_t _pad_8[0x8];
    float velocityRTPCMinimum;
    float velocityRTPCMaximum;
    float footMovementThreshold;
    float footRotationThreshold;
    float relativeSpeedThreshold;
    float heightThreshold;
    struct DynArray_UserRTPC* userRTPCs;
    uint8_t _pad_9[0x28];
    struct AudioFootstepSurfacesDefinition* surfaceMap;
    uint8_t _pad_10[0x30];
    struct DynArray_FoleyBone* footBones;
    uint8_t _pad_11[0x28];
};




struct AreaServices {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_BaseService* service;
    uint8_t _pad_2[0x28];
    float lingeringTimeout;
    uint8_t _pad_3[0x4];
};




struct DrugEfficacyForItemType {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct DynArray_DrugEfficacyConfigForItemSubTypeBase* drugEfficacyForItemSubType;
    uint8_t _pad_2[0x28];
};




struct SEntityTraversingTarget {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_SEntityTraversingTargetPath* paths;
    uint8_t _pad_2[0x28];
};




struct ProcAimRigConfig {
    uint8_t _pad_0[0x8];
    struct CryStringT* rigName;
    uint8_t _pad_1[0x8];
    struct CryStringT* aimJointName;
    uint8_t _pad_2[0x8];
    struct Vec3* aimJointDirection;
    uint8_t _pad_3[0x10];
    float aimTargetSmoothDuration;
    float aimTargetClampAngleDeg;
    struct Range* aimAngleBlendRange;
    uint8_t _pad_4[0x8];
    struct DynArray_ProcAimBaseJointTypeConfig* rotationJoints;
    uint8_t _pad_5[0x28];
};




struct SHackingAIParams {
    uint8_t _pad_0[0x8];
    float rethinkTime;
    uint8_t _pad_1[0x4];
    struct SHackingAIAlertedStateModifiersParams* alertedStateModifiers;
    uint8_t _pad_2[0x10];
    struct DynArray_SHackingAIDecisionParams* decisionParams;
    uint8_t _pad_3[0x28];
};




struct CargoFillCapacityValue_Custom {
    uint8_t _pad_0[0x8];
    struct DynArray_CargoResourceAllocation* resources;
    uint8_t _pad_1[0x28];
};




struct ActionAreaLightExtension {
    uint8_t _pad_0[0x8];
    struct DynArray_LightStatusMultiplier* lightStatusMultipliers;
    uint8_t _pad_1[0x28];
};




struct SEntityComponentRoomParams {
    uint8_t _pad_0[0x18];
    enum ARDataType roomType;
    float minimumVolumeStrength;
    struct CLocIdentifier* roomName;
    struct InteriorMapSectionDefinition* interiorMapSection;
    uint8_t _pad_1[0x10];
    struct SEntityDensityClassOverwritesBase* densityClassOverwrites;
    uint8_t _pad_2[0x8];
    struct DynArray_RoomExtension* roomExtensions;
    uint8_t _pad_3[0x28];
    _Bool isPhysical;
    uint8_t _pad_4[0x7];
};




struct SWeaponActionConditionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct DynArray_SConditionalWeaponAction* conditionalWeaponActions;
    uint8_t _pad_10[0x28];
    struct SWeaponActionParams* defaultWeaponAction;
    uint8_t _pad_11[0x8];
};




struct SEntityAttachParams {
    uint8_t _pad_0[0x8];
    struct DynArray_PlacementValidator* validators;
    uint8_t _pad_1[0x28];
};




struct ItemPortTagsDictionary {
    uint8_t _pad_0[0x8];
    struct DynArray_ItemPortTagsElement* elements;
    uint8_t _pad_1[0x28];
};




struct LoadoutEditorParams {
    uint8_t _pad_0[0x8];
    struct LoadoutDummyTransformParams* dummyTransformParams;
    uint8_t _pad_1[0x70];
    struct LoadoutItemPreviewTransformParams* itemPreviewTransformParams;
    uint8_t _pad_2[0x68];
    struct LoadoutItemPortViewParams* itemPortViewParams;
    uint8_t _pad_3[0x38];
    struct LoadoutItemHighlightParams* highlightParams;
    uint8_t _pad_4[0x28];
    struct LoadoutRequiredAttachmentsParams* requiredAttachmentsParams;
    uint8_t _pad_5[0x30];
    struct LoadoutCandidateRootParams* candidateRootParams;
    uint8_t _pad_6[0x30];
    struct DynArray_LoadoutEditorAdditionalParams* additionalParams;
    uint8_t _pad_7[0x28];
    struct EntityClassDefinition* dummyEntityClass;
    uint8_t _pad_8[0x10];
    float loadoutChangeHideDuration;
    _Bool alphabeticalSort;
    _Bool selfHosting;
    _Bool applyAfterSave;
    _Bool allowRentalItems;
    _Bool allowDuplicateItems;
    uint8_t _pad_9[0x7];
    struct DynArray_ARDataType* persistentItemGameModeFlag;
    uint8_t _pad_10[0x28];
    struct CryStringT* idleAnim;
    uint8_t _pad_11[0x8];
    struct CryStringT* previewClip;
    uint8_t _pad_12[0x8];
    _Bool vehicleSelectDisplay;
    _Bool showRECWallet;
    uint8_t _pad_13[0x6];
};




struct SControlledEntityTransformParams {
    uint8_t _pad_0[0x8];
    struct Vec3* axisMovementSpeed;
    uint8_t _pad_1[0x10];
    float axisRotationSpeed;
    float scaleSpeed;
    float minScale;
    float maxScale;
    struct DynArray_SControlledEntityStaticTransformParams* staticTargets;
    uint8_t _pad_2[0x28];
    struct SControlledEntityDynamicTransformParams* dynamicTargetParams;
    uint8_t _pad_3[0x220];
};




struct SEACriticalMessageParams {
    uint8_t _pad_0[0x18];
    float lifetime;
    int32_t maxAmountOfMessages;
    struct CryStringT* messageQueueIdentifier;
    uint8_t _pad_1[0x8];
    float fadeoutTime;
    uint8_t _pad_2[0x4];
    struct DynArray_SEACriticalMessageDef* messages;
    uint8_t _pad_3[0x28];
};




struct PlayerUsableSlot {
    uint8_t _pad_0[0x8];
    struct UsableUseSlot* useSlot;
    uint8_t _pad_1[0x8];
    struct DynArray_PlayerUsableInteractionPoint* playerUsableInteractionPoints;
    uint8_t _pad_2[0x28];
    struct DynArray_PlayerUsableItemPort* playerUsableItemPorts;
    uint8_t _pad_3[0x28];
};




struct BuildingBlocks_LanguageSpecificFontReplacement {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_FontReplacementPair* fontReplacementList;
    uint8_t _pad_1[0x28];
};




struct LootTable {
    uint8_t _pad_0[0x8];
    struct DynArray_WeightedLootArchetype* lootArchetypes;
    uint8_t _pad_1[0x28];
};




struct ScreenEffects_Effect {
    uint8_t _pad_0[0x8];
    struct Tag* name;
    uint8_t _pad_1[0x10];
    _Bool disableInThirdPerson;
    uint8_t _pad_2[0x7];
    struct ScreenEffects_Pattern* sharedPattern;
    uint8_t _pad_3[0x8];
    struct DynArray_ScreenEffects_Param* parameters;
    uint8_t _pad_4[0x28];
};




struct SpawnDescription_EntityOptions {
    uint8_t _pad_0[0x8];
    struct DynArray_SpawnDescription_Entity* options;
    uint8_t _pad_1[0x28];
};




struct SActorForceReactionProceduralVanduulLeanPose {
    uint8_t _pad_0[0x8];
    float hipOffsetScaleFB;
    float hipOffsetScaleLR;
    float footOffsetScale;
    float firstPersonLeanPitchScale;
    float firstPersonLeanRollScale;
    uint8_t _pad_1[0x4];
    struct DynArray_SActorForceReactionLeanBoneDef* spineBones;
    uint8_t _pad_2[0x28];
};




struct SActorForceReactionProceduralXianLeanPose {
    uint8_t _pad_0[0x8];
    float hipOffsetScaleFB;
    float hipOffsetScaleLR;
    float footOffsetScale;
    float firstPersonLeanPitchScale;
    float firstPersonLeanRollScale;
    uint8_t _pad_1[0x4];
    struct DynArray_SActorForceReactionLeanBoneDef* spineBones;
    uint8_t _pad_2[0x28];
};




struct SActorForceReactionProceduralHumanLeanPose {
    uint8_t _pad_0[0x8];
    float hipOffsetScaleFB;
    float hipOffsetScaleLR;
    float footOffsetScale;
    float firstPersonLeanPitchScale;
    float firstPersonLeanRollScale;
    uint8_t _pad_1[0x4];
    struct DynArray_SActorForceReactionLeanBoneDef* spineBones;
    uint8_t _pad_2[0x28];
};




struct MissionFlow {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionFlowTrigger* triggers;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_NumberCompareStatement {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_NumberCompareCondition* conditions;
    uint8_t _pad_1[0x28];
    int64_t result;
};




struct AsteroidBehavior_WeatherParams {
    uint8_t _pad_0[0x8];
    _Bool defaultDustFade;
    uint8_t _pad_1[0x7];
    struct Range* defaultDustFadeRange;
    uint8_t _pad_2[0x8];
    struct DynArray_WeatherEffects_Asteroid* effects;
    uint8_t _pad_3[0x28];
};




struct ItemResourceNetworkPowerParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ItemResourceNetworkPowerModifier* modifiers;
    uint8_t _pad_1[0x28];
};




struct EntityClassGameplayPropertiesCraftingData {
    uint8_t _pad_0[0x8];
    struct DynArray_CraftingGameplayProperty_Base* properties;
    uint8_t _pad_1[0x28];
};




struct SWeaponAudioReportEnvironmentParams {
    uint8_t _pad_0[0x8];
    int32_t maxTriggers;
    uint8_t _pad_1[0x4];
    struct DynArray_SWeaponAudioReportEnvironment* reportEnvironments;
    uint8_t _pad_2[0x28];
};




struct PersonalThoughtCategory {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct DynArray_PersonalThoughtOption* optionArray;
    uint8_t _pad_1[0x28];
};




struct PersonalThoughtCategoryAction {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* text;
    struct CLocIdentifier* description;
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
    struct DynArray_PersonalThoughtOption* optionArray;
    uint8_t _pad_2[0x28];
};




struct SReputationMissionGiverRewardBonusParams {
    uint8_t _pad_0[0x8];
    struct FactionReputation* factionReputation;
    uint8_t _pad_1[0x10];
    struct SReputationScopeParams* reputationScope;
    uint8_t _pad_2[0x10];
    struct DynArray_SReputationStandingRewardBonusParams* rewardBonuses;
    uint8_t _pad_3[0x28];
};




struct BuildingBlocks_BindingsLocalizationFromIntegerSwitch {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsLocalizedBase* defaultOverride;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* defaultValue;
    struct DynArray_BuildingBlocks_IntegerLocalizedPair* values;
    uint8_t _pad_2[0x28];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_3[0x8];
};




struct CommunicationEntry {
    uint8_t _pad_0[0x8];
    struct CommunicationName* name;
    uint8_t _pad_1[0x10];
    struct CommunicationChannelName* channelName;
    uint8_t _pad_2[0x10];
    enum ARDataType method;
    _Bool forceAnimation;
    uint8_t _pad_3[0x3];
    struct DynArray_CommunicationVariation* variations;
    uint8_t _pad_4[0x28];
    float entityRetriggerDelay;
    float channelRetriggerDelay;
};




struct AbilityBreathingParams {
    uint8_t _pad_0[0x8];
    struct DynArray_AbilityBreathAction* breathActions;
    uint8_t _pad_1[0x28];
};




struct CockpitResponseVariation {
    uint8_t _pad_0[0x8];
    float initialDelay;
    _Bool hasSfx;
    uint8_t _pad_1[0x3];
    float refireDelaySfx;
    _Bool hasDialogue;
    uint8_t _pad_2[0x3];
    float refireDelayDialogue;
    float timeout;
    struct QueueingBehaviour* queuingBehaviour;
    uint8_t _pad_3[0x8];
    struct CommunicationName* communicationName;
    uint8_t _pad_4[0x10];
    struct DynArray_CockpitRuleBase* rules;
    uint8_t _pad_5[0x28];
};




struct WebCustomizationDebug {
    uint8_t _pad_0[0x8];
    struct DynArray_DebugLoadoutKit* debugLoadoutKits;
    uint8_t _pad_1[0x28];
};




struct CameraSeatCockpitConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct DynArray_HeadMotionConfig* headMotionConfig;
    uint8_t _pad_4[0x28];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_5[0x20];
    float fovScale;
    float focusSpeed;
};




struct CameraFirstPersonBaseConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct DynArray_HeadMotionConfig* headMotionConfig;
    uint8_t _pad_4[0x28];
};




struct SHelmetStateBaseParams {
    uint8_t _pad_0[0x8];
    enum ARDataType state;
    enum ARDataType nextState;
    struct CryStringT* animationName;
    uint8_t _pad_1[0x8];
    struct CryStringT* modelTag;
    uint8_t _pad_2[0x8];
    float playbackSpeed;
    uint8_t _pad_3[0x4];
    struct DynArray_SHelmetLinkedState* linkedStates;
    uint8_t _pad_4[0x28];
};




struct SActorForceReactionGlobalStaggerConfig {
    uint8_t _pad_0[0x8];
    struct Range* movementReferenceVelocity;
    uint8_t _pad_1[0x8];
    struct Range* staggerDistance;
    uint8_t _pad_2[0x8];
    struct DynArray_SActorForceReactionStaggerTagConfig* distanceTags;
    uint8_t _pad_3[0x28];
    float viewPitchRangeDeg;
    float viewYawRangeDeg;
};




struct CameraLensGhostSet {
    uint8_t _pad_0[0x8];
    struct CryStringT* SetName;
    uint8_t _pad_1[0x8];
    float Radius;
    uint8_t _pad_2[0x4];
    struct CameraLensDistortion* Distortion;
    uint8_t _pad_3[0x8];
    struct CameraLensChromaticAberration* ChromaticAberration;
    uint8_t _pad_4[0x8];
    struct DynArray_CameraLensGhostInstance* Instances;
    uint8_t _pad_5[0x28];
};




struct WeaponAimableAnglesDef {
    uint8_t _pad_0[0x8];
    struct DynArray_SWeaponAimableAnglesParams* aimAngles;
    uint8_t _pad_1[0x28];
};




struct SEALoadoutItem {
    uint8_t _pad_0[0x8];
    enum ARDataType itemSlot;
    uint8_t _pad_1[0x7];
    struct EntityClassDefinition* itemClass;
    uint8_t _pad_2[0x10];
    struct DynArray_SEALoadoutAttachment* itemAttachements;
    uint8_t _pad_3[0x28];
    struct DynArray_SEALoadoutExplicit* itemExplicit;
    uint8_t _pad_4[0x28];
};




struct CargoFillCapacityValue_Random {
    uint8_t _pad_0[0x8];
    struct DynArray_CargoResource* resources;
    uint8_t _pad_1[0x28];
    float minCapacityRange;
    float maxCapacityRange;
};




struct CargoFillCapacityValue_Even {
    uint8_t _pad_0[0x8];
    struct DynArray_CargoResource* resources;
    uint8_t _pad_1[0x28];
    float minCapacityRange;
    float maxCapacityRange;
};




struct BlobVFXSharedParams {
    uint8_t _pad_0[0x8];
    _Bool snapBlobTimescaleToLifeTime;
    uint8_t _pad_1[0x7];
    struct DynArray_BlobVFXDistanceParams* blobVFXs;
    uint8_t _pad_2[0x28];
};




struct TakeDownConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_TakeDownParams* takeDownParams;
    uint8_t _pad_1[0x28];
    _Bool isTakedownImmune;
    uint8_t _pad_2[0x3];
    float takedownStimulusRange;
    struct QTERequestConfig* QTEConfig;
    uint8_t _pad_3[0x10];
};




struct ActorLookAheadVehicle {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorLookAheadPoint* lookAheadPoints;
    uint8_t _pad_1[0x28];
    struct DynArray_ActorLookAheadRoll* lookAheadRolls;
    uint8_t _pad_2[0x28];
    struct Vec3* undampedFrequency;
    uint8_t _pad_3[0x10];
    struct Vec3* dampingRatio;
    uint8_t _pad_4[0x10];
    float vehicleVelocityTranslationLengthMax;
    uint8_t _pad_5[0x4];
    struct BezierCurve* vehicleVelocityTranslationWeightModifier;
    uint8_t _pad_6[0x88];
    float horizonAlignRollDampeningMaxAngle;
    uint8_t _pad_7[0x4];
    struct BezierCurve* horizonAlignRollDampening;
    uint8_t _pad_8[0x88];
    float yawPitchInputDivergenceThreshold;
    float jumpPointSplineLookAheadDistance;
    struct ActorLookAheadTargetTracking* targetTracking;
    uint8_t _pad_9[0x10];
    struct BezierCurve* dampeningZoneCurve;
    uint8_t _pad_10[0x88];
    float customPointWeight;
    uint8_t _pad_11[0x4];
};




struct UsableArchetype {
    uint8_t _pad_0[0x8];
    struct DynArray_UseChannelArchetype* useChannels;
    uint8_t _pad_1[0x28];
    struct CryStringT* name;
    uint8_t _pad_2[0x8];
    struct Tag* tag;
    uint8_t _pad_3[0x10];
};




struct SCItemThrusterParams {
    uint8_t _pad_0[0x18];
    struct ThrusterGimbal* gimbal;
    uint8_t _pad_1[0x78];
    struct DynArray_ThrusterGimbalState* gimbalInteractionStateOverrides;
    uint8_t _pad_2[0x28];
    float thrustCapacity;
    uint8_t _pad_3[0x4];
    struct BezierCurve* atmosphericEfficiencyCurve;
    uint8_t _pad_4[0x88];
    float minHealthThrustMultiplier;
    float fuelBurnRatePer10KNewton;
    struct SBaseResourceUnit* fuelBurnRatePer10KNewtonRN;
    uint8_t _pad_5[0x8];
    enum ARDataType thrusterType;
    _Bool onlyActiveInVTOL;
    uint8_t _pad_6[0x3];
    struct CryStringT* nozzleAnimation;
    uint8_t _pad_7[0x8];
    enum ARDataType thrusterAnimDriver;
    float thrusterStrengthSmooth;
    _Bool toggleThrusterBackwash;
    _Bool automateBackwashSize;
    uint8_t _pad_8[0x6];
    struct Vec3* thrusterBackwashSize;
    uint8_t _pad_9[0x10];
    float thrusterBackwashMaxSpeed;
    float thrusterBackwashMaxDensity;
    float thrusterBackwashMaxResistance;
    float thrusterBackwashAfterburnerMultiplier;
    struct SSCSignatureEmitterParams* signatureEmitterParams;
    uint8_t _pad_10[0x8];
};




struct CraftingBlueprint {
    uint8_t _pad_0[0x8];
    struct BlueprintCategoryRecord* category;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* blueprintName;
    struct DynArray_CraftingBlueprintTier_Base* tiers;
    uint8_t _pad_2[0x28];
};




struct ActorSomaticShakeParams {
    uint8_t _pad_0[0x8];
    float frequencyStart;
    float frequencyEnd;
    float amplitudeStart;
    float amplitudeEnd;
    float blendDuration;
    float breathingInfluence;
    struct ActorShudderConfig* shudder;
    uint8_t _pad_1[0x28];
    struct DynArray_ActorSomaticShakeConfig* somaticShakeConfigs;
    uint8_t _pad_2[0x28];
};




struct LandingZoneInventory {
    uint8_t _pad_0[0x8];
    struct InventoryContainer* containerParams;
    uint8_t _pad_1[0x10];
    struct DynArray_InventoryLocation* locations;
    uint8_t _pad_2[0x28];
    struct DynArray_LandingZoneInventoryRedirect* locationRedirects;
    uint8_t _pad_3[0x28];
};




struct MineableComposition {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* depositName;
    int32_t minimumDistinctElements;
    uint8_t _pad_1[0x4];
    struct DynArray_MineableCompositionPart* compositionArray;
    uint8_t _pad_2[0x28];
};




struct SpecialEventDay {
    uint8_t _pad_0[0x8];
    struct DynArray_SpecialEventManufacturer* manufacturers;
    uint8_t _pad_1[0x28];
    struct DynArray_CLocIdentifier* displayNames;
    uint8_t _pad_2[0x28];
};




struct TransitDestinationParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* Name;
    float radius;
    uint8_t _pad_1[0x4];
    struct DynArray_SpecialEventManufacturer* unlockedManufacturers;
    uint8_t _pad_2[0x28];
    _Bool importantLocation;
    _Bool enabledByDefault;
    uint8_t _pad_3[0x2];
    int32_t priority;
};




struct IntUserVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    int64_t defaultValue;
    struct DynArray_IntUserVariableTask* tasks;
    uint8_t _pad_2[0x28];
};




struct SScoreboard {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct DynArray_ARDataType* validGameModes;
    uint8_t _pad_2[0x28];
    struct DynArray_SScoreboardStat* stats;
    uint8_t _pad_3[0x28];
};




struct ProceduralLandingSetup {
    uint8_t _pad_0[0x8];
    struct DynArray_ProceduralLandingFilter* landingAnimations;
    uint8_t _pad_1[0x28];
    struct DynArray_ProceduralLandingFilter* firstPersonLandingAnimations;
    uint8_t _pad_2[0x28];
};




struct SActorForceReactionFlinchConfigDef {
    uint8_t _pad_0[0x8];
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByState;
    struct DynArray_SActorForceReactionFlinchRangeDef* flinchRanges;
    uint8_t _pad_1[0x28];
};




struct SpineBone {
    uint8_t _pad_0[0x8];
    struct CryStringT* boneName;
    uint8_t _pad_1[0x8];
    float weight;
    uint8_t _pad_2[0x4];
    struct DynArray_BoneCounterRotateConfig* bonesToCounterRotate;
    uint8_t _pad_3[0x28];
};




struct SCharacterCustomizerEyeRandomizationParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SCharacterCustomizerRandomColorDef* irisColors;
    uint8_t _pad_1[0x28];
};




struct SAccoladeRequirementOR {
    uint8_t _pad_0[0x8];
    struct DynArray_SAccoladeRequirement* requirementsToOr;
    uint8_t _pad_1[0x28];
};




struct SAccoladeRequirementAND {
    uint8_t _pad_0[0x8];
    struct DynArray_SAccoladeRequirement* requirementsToAnd;
    uint8_t _pad_1[0x28];
};




struct ItemTypeDefinition {
    uint8_t _pad_0[0x8];
    struct ItemTypeCategory* defaultCategory;
    uint8_t _pad_1[0x8];
    struct DynArray_ItemTypeCategory* categories;
    uint8_t _pad_2[0x28];
    struct DynArray_ItemTypeInfo* typeInfo;
    uint8_t _pad_3[0x28];
    struct CLocIdentifier* allCategoriesLabel;
    struct CLocIdentifier* allTypesLabel;
};




struct BuildingBlocks_BindingsStringFromStringSwitch {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsStringBase* defaultOverride;
    uint8_t _pad_1[0x8];
    struct CryStringT* defaultValue;
    uint8_t _pad_2[0x8];
    struct DynArray_BuildingBlocks_StringStringPair* values;
    uint8_t _pad_3[0x28];
    struct BuildingBlocks_BindingsStringBase* input;
    uint8_t _pad_4[0x8];
};




struct MissionFailConditionsList {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionFailConditionParams* failureConditions;
    uint8_t _pad_1[0x28];
};




struct DifficultyLevelParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct VehicleDifficultyParams* vehicleParams;
    uint8_t _pad_1[0x8];
    struct DynArray_DifficultyModifierRange* modifiers;
    uint8_t _pad_2[0x28];
};




struct ContextualCommunicationResponse {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    enum ARDataType concept_;
    uint8_t _pad_2[0x4];
    struct CryStringT* customConcept;
    uint8_t _pad_3[0x8];
    float refireDelay;
    uint8_t _pad_4[0x4];
    struct DynArray_ContextualCommunicationCondition* rules;
    uint8_t _pad_5[0x28];
    struct CommunicationRequest* response;
    uint8_t _pad_6[0x30];
    struct DynArray_CommunicationVariableBase* memoryVariables;
    uint8_t _pad_7[0x28];
};




struct PlacedSurfaceEffectsComponentParams {
    uint8_t _pad_0[0x18];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct SurfaceParticleRTTParams* surfaceParticleRtt;
    uint8_t _pad_2[0x30];
    float lodDistanceScale;
    float inactiveDuration;
    float staticWetnessAmount;
    uint8_t _pad_3[0x4];
    struct DynArray_PlacedSurfaceEffects_EmitterEntry* placedEmitters;
    uint8_t _pad_4[0x28];
};




struct SCItemInteractionJournalParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SCInteractionJournalEntryParams* Entries;
    uint8_t _pad_1[0x28];
};




struct HealthIconData {
    uint8_t _pad_0[0x8];
    struct DynArray_HealthIconStatusEffect* healthIconStatusEffect;
    uint8_t _pad_1[0x28];
    _Bool checkPlasmaDamage;
    uint8_t _pad_2[0x3];
    int32_t plasmaDamageIconIndex;
};




struct SMisfireEvents {
    uint8_t _pad_0[0x8];
    struct DynArray_SMisfireEventParams* MinorMisfires;
    uint8_t _pad_1[0x28];
    struct DynArray_SMisfireEventParams* MajorMisfires;
    uint8_t _pad_2[0x28];
    struct DynArray_SMisfireEventParams* CriticalMisfires;
    uint8_t _pad_3[0x28];
};




struct MissionPropertyValue_TimeTrialRace {
    uint8_t _pad_0[0x8];
    struct DynArray_TimeTrialSplit* targetSplits;
    uint8_t _pad_1[0x28];
};




struct AudioEnvironmentFeedbackZoneSetup {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioEnvironmentFeedbackZoneProcess* processes;
    uint8_t _pad_1[0x28];
};




struct SCItemToolArmParams {
    uint8_t _pad_0[0x18];
    _Bool ignoreWarmupAndCooldown;
    uint8_t _pad_1[0x7];
    struct CryStringT* fragment;
    uint8_t _pad_2[0x8];
    struct CryStringT* fragmentDeploy;
    uint8_t _pad_3[0x8];
    struct CryStringT* fragmentRetract;
    uint8_t _pad_4[0x8];
    struct CryStringT* fragmentIdle;
    uint8_t _pad_5[0x8];
    struct CryStringT* fragmentStartup;
    uint8_t _pad_6[0x8];
    struct CryStringT* fragmentRun;
    uint8_t _pad_7[0x8];
    struct CryStringT* fragmentDeactivate;
    uint8_t _pad_8[0x8];
    struct DynArray_SToolArmDeployCondition_Base* deployConditions;
    uint8_t _pad_9[0x28];
};




struct UsableChannelInputActionGroup {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* hintDescription;
    enum ARDataType activationMode;
    uint8_t _pad_2[0x4];
    struct DynArray_UsableChannelInputAction* actions;
    uint8_t _pad_3[0x28];
};




struct ResourceType {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* description;
    struct ResourceTypeDensityType* densityType;
    uint8_t _pad_1[0x8];
    struct CryStringT* defaultThumbnailPath;
    uint8_t _pad_2[0x8];
    struct DynArray_ResourceTypeProperties* properties;
    uint8_t _pad_3[0x28];
    struct ResourceType* refinedVersion;
    uint8_t _pad_4[0x10];
    _Bool validateDefaultCargoBox;
    uint8_t _pad_5[0x7];
    struct SResourceTypeDefaultCargoContainers* defaultCargoContainers;
    uint8_t _pad_6[0x8];
};




struct LookAtTypes {
    uint8_t _pad_0[0x8];
    struct DynArray_LookAtType* types;
    uint8_t _pad_1[0x28];
};




struct ScanCustomDataTagToggle {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    enum ARDataType displaySection;
    _Bool addToBoxoutDisplay;
    _Bool displayInSameRowAsHeader;
    uint8_t _pad_1[0x5];
    struct ScanCustomValue* defaultValue;
    uint8_t _pad_2[0x8];
    struct DynArray_ScanCustomDataTagEntry* tagEntries;
    uint8_t _pad_3[0x28];
};




struct SEffectParamParticle {
    uint8_t _pad_0[0x28];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct CryStringT* tag;
    uint8_t _pad_2[0x8];
    struct CryStringT* Helper;
    uint8_t _pad_3[0x8];
    struct QuatT* Offset;
    uint8_t _pad_4[0x50];
    _Bool IsLooped;
    _Bool Enabled;
    _Bool Prime;
    _Bool Kill;
    float Timer;
    int32_t RenderSlot;
    uint32_t ContextFlags;
    _Bool MultiPosition;
    uint8_t _pad_5[0x7];
    struct Vec3* Axis;
    uint8_t _pad_6[0x10];
    struct DynArray_SEffectInputParamsParticle* InputVariables;
    uint8_t _pad_7[0x28];
};




struct LadderAnimationParams {
    uint8_t _pad_0[0x8];
    struct DynArray_LadderAnimationOffset* animationOffsets;
    uint8_t _pad_1[0x28];
    float animationTravelDistanceTransWalkToRun;
    float animationTravelDistanceTransRunToWalk;
    float animationTravelDistanceTransRunToSprint;
    float animationTravelDistanceTransSprintToRun;
    float playerHorizontalOffset;
    float getOnDistanceAwayTop;
    float getOnDistanceAwayTopSide;
    float getOnDistanceAwayTopSideWalk;
    float getOnDistanceAwayTopSideRun;
    float getOnDistanceAwayTopSideSprint;
    float getOnDistanceAwayVerticalTopSide;
    float getOnDistanceAwayBottom;
    float getOnForwardDistanceAwayMiddle;
    float getOnDistanceAwayMiddleSide;
};




struct SActorForceReactionFilteredStaggerRangeDef {
    uint8_t _pad_0[0x8];
    enum ARDataType filterByForceType;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByState;
    uint8_t _pad_1[0x4];
    struct DynArray_SActorForceReactionStaggerRangeDef* staggerRanges;
    uint8_t _pad_2[0x28];
};




struct SActorForceReactionUnfilteredStaggerConfigDef {
    uint8_t _pad_0[0x8];
    struct SActorForceReactionBlockConfig* reactionBlock;
    uint8_t _pad_1[0x30];
    struct DynArray_SActorForceReactionStaggerRangeDef* staggerRanges;
    uint8_t _pad_2[0x28];
};




struct AudioValueOutput {
    uint8_t _pad_0[0x8];
    int32_t pluginInstanceID;
    uint8_t _pad_1[0x4];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct DynArray_AudioValueOutputBehaviour* behaviours;
    uint8_t _pad_3[0x28];
};




struct SHackingThreatLevelParams {
    uint8_t _pad_0[0x8];
    int32_t increaseThreshold;
    int32_t spawnedDefendersCount;
    struct DynArray_SHackingThreatLevelConditionParams* threatLevelConditions;
    uint8_t _pad_1[0x28];
};




struct GlobalRoomStateParams {
    uint8_t _pad_0[0x8];
    struct DynArray_Range* typeRanges;
    uint8_t _pad_1[0x28];
    struct DynArray_RGB* typeDebugColors;
    uint8_t _pad_2[0x28];
    struct GlobalResourceParticle* debugParticles;
    uint8_t _pad_3[0x10];
    struct WeatherEffects_SpaceLoopEffect* defaultSpaceDust;
    uint8_t _pad_4[0x20];
};




struct SGlobalHealingBeamParams {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct Tag* medgunTag;
    uint8_t _pad_2[0x10];
    struct DynArray_SHealingBeamBodyPartParams* bodyParts;
    uint8_t _pad_3[0x28];
    float cardDisplayTimeout;
    float limbSwitchTime;
    float cardPosLerpSpeed;
    float cardClosingLerpSpeedScalar;
    struct SHealingBeamBoneEntryParams* targetModeActorCardBoneEntry;
    uint8_t _pad_4[0x40];
    struct SHealingBeamBoneEntryParams* selfHealModeActorCardBoneEntry;
    uint8_t _pad_5[0x40];
    struct SHealingBeamBoneEntryParams* selfHealModeLimbCardBoneEntry;
    uint8_t _pad_6[0x40];
    struct GlobalResourceMaterial* transparentMaterial;
    uint8_t _pad_7[0x10];
    struct DynArray_RGB* injuryHighlightColors;
    uint8_t _pad_8[0x28];
    float highlightOccludedAlpha;
    float highlightOutlineWidth;
    _Bool highlightOutlineOnly;
    uint8_t _pad_9[0x7];
};




struct VisibleElement {
    uint8_t _pad_0[0x8];
    struct DynArray_VisibilityCondition* conditions;
    uint8_t _pad_1[0x28];
    _Bool visibleByDefault;
    uint8_t _pad_2[0x7];
};




struct ContractPrerequisite_DateSchedule {
    uint8_t _pad_0[0x8];
    struct DynArray_DateTimeSchedule* availableDateSchedule;
    uint8_t _pad_1[0x28];
};




struct LawSystemGlobalSettings {
    uint8_t _pad_0[0x8];
    struct CrimeStatThresholds* crimeStatThresholds;
    uint8_t _pad_1[0x30];
    _Bool autoPayInfractionFines;
    uint8_t _pad_2[0x3];
    float earlyFineMultiplier;
    float meritsToCredit;
    float meritsToSentenceMinute;
    int32_t meritSentenceLimit;
    int32_t meritSentenceCurveStart;
    int32_t maxMeritsValue;
    float removalTimeMaxSeconds;
    float removalTimeMinSeconds;
    float meritsToRemovalTimeSeconds;
    float defaultPressChargesNotificationTime;
    float arrestTimeMinSeconds;
    float arrestTimeMaxSeconds;
    float arrestTimeIncreaseStep;
    float arrestSearchAreaInVehicle;
    float arrestSearchAreaOnFoot;
    float trespassWarningSeconds;
    float trespassWarningSecondsInPrivateProperty;
    float trespassRevokeWarningSeconds;
    float trespassGoodRevokeBeforeShowingInSeconds;
    struct JournalEntry* criminalRecordJournalEntry;
    uint8_t _pad_3[0x10];
    struct JournalEntry* firstCrimeStatJournalEntry;
    uint8_t _pad_4[0x10];
    struct ScanEvaluationInfractionSettings* foundInOwnStolenShipInfraction;
    uint8_t _pad_5[0x50];
    struct ScanEvaluationInfractionSettings* harboringAFelonInfraction;
    uint8_t _pad_6[0x50];
    struct ScanEvaluationInfractionSettings* stolenGoodsPossessionInfraction;
    uint8_t _pad_7[0x50];
    struct ScanEvaluationInfractionSettings* stolenGoodsDistributionInfraction;
    uint8_t _pad_8[0x50];
    struct ScanEvaluationInfractionSettings* prohibitedGoodsInfraction;
    uint8_t _pad_9[0x50];
    struct ScanEvaluationInfractionSettings* arrestedInfraction;
    uint8_t _pad_10[0x50];
    struct ScanEvaluationInfractionSettings* trespassingInfraction;
    uint8_t _pad_11[0x50];
    struct InfractionDefinition* resistArrestInfraction;
    uint8_t _pad_12[0x10];
    struct InfractionDefinition* evadeArrestInfraction;
    uint8_t _pad_13[0x10];
    struct DynArray_ScanEvaluationInfractionSettings* controlledSubstancePossessionInfractions;
    uint8_t _pad_14[0x28];
    struct DynArray_ScanEvaluationInfractionSettings* controlledSubstanceDistributionInfractions;
    uint8_t _pad_15[0x28];
    struct SplashDamageInfractionSettings* splashDamageSettings;
    uint8_t _pad_16[0x18];
    float gracePeriodAfterUndocking;
    uint8_t _pad_17[0x4];
    struct SecurityNetworkManifest* privateShipSecurityManifest;
    uint8_t _pad_18[0x10];
    struct SecurityNetworkManifest* privateLocationSecurityManifest;
    uint8_t _pad_19[0x10];
};




struct SCItemShopRackParams {
    uint8_t _pad_0[0x18];
    _Bool bundle;
    uint8_t _pad_1[0x7];
    struct SItemShopARParams* arParams;
    uint8_t _pad_2[0x8];
    struct DynArray_SItemShopARItemPortParams* itemPortOverrides;
    uint8_t _pad_3[0x28];
};




struct ProceduralPlanetAudioTagAndEventsDef {
    uint8_t _pad_0[0x8];
    struct DynArray_ProceduralPlanetAudioTagAndEvent* tagAndEvents;
    uint8_t _pad_1[0x28];
};




struct DialogueBundleEmbedded {
    uint8_t _pad_0[0x8];
    _Bool usePooling;
    uint8_t _pad_1[0x17];
    struct DynArray_DialogueBundleEntry* dialogueEntries;
    uint8_t _pad_2[0x28];
};




struct SEntityComponentEffects_Test {
    uint8_t _pad_0[0x18];
    struct DynArray_EntityComponentEffects_Test_Tag* tags;
    uint8_t _pad_1[0x28];
    struct DynArray_EntityComponentEffects_Test_Trigger* triggers;
    uint8_t _pad_2[0x28];
    struct DynArray_EntityComponentEffects_Test_Link* parameters;
    uint8_t _pad_3[0x28];
    struct DynArray_EntityComponentEffects_Test_ColorLink* colorParameters;
    uint8_t _pad_4[0x28];
};




struct SCItemRadarSensitivityModifierTypeContacts {
    uint8_t _pad_0[0x8];
    struct DynArray_RadarContactTypeEntry* contactTypes;
    uint8_t _pad_1[0x28];
};




struct RadarContactTypeDefinition {
    uint8_t _pad_0[0x8];
    struct RadarContactTypeEntry* unknownType;
    uint8_t _pad_1[0x10];
    struct RadarContactTypeEntry* defaultAudioType;
    uint8_t _pad_2[0x10];
    struct DynArray_RadarContactTypeEntry* types;
    uint8_t _pad_3[0x28];
};




struct RadarContactSubGroupEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_RadarContactTypeEntry* types;
    uint8_t _pad_2[0x28];
};




struct SDynamicDifficultyParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SDynamicDifficultyPointsPerEvent* failPointsData;
    uint8_t _pad_1[0x28];
    struct DynArray_SDynamicDifficultyPointsPerEvent* killPointsData;
    uint8_t _pad_2[0x28];
    float failureResetTime;
    int32_t minDifficultyPoints;
    int32_t maxDifficultyPoints;
    uint8_t _pad_3[0x4];
};




struct ActorStatusUIWarning {
    uint8_t _pad_0[0x8];
    enum ARDataType statType;
    float warningDuration;
    struct DynArray_ActorStatusUIWarningEntry* warningEntries;
    uint8_t _pad_1[0x28];
};




struct ActionStatusCosts {
    uint8_t _pad_0[0x8];
    enum ARDataType actionCategory;
    uint8_t _pad_1[0x4];
    struct DynArray_StatusCost* instantStatusCost;
    uint8_t _pad_2[0x28];
};




struct AbilityStatusCosts {
    uint8_t _pad_0[0x8];
    struct CryStringT* filterName;
    uint8_t _pad_1[0x8];
    enum ARDataType filterByState;
    enum ARDataType filterByMotionSpeed;
    enum ARDataType filterByPoseState;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByLeanState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterBySkeleton;
    enum ARDataType filterByCharacterType;
    enum ARDataType filterByRestrainedState;
    enum ARDataType filterByPlayerCamera;
    enum ARDataType filterByAimingRestriction;
    enum ARDataType ability;
    uint8_t _pad_2[0x4];
    struct DynArray_StatusCost* lastingStatusCost;
    uint8_t _pad_3[0x28];
    struct DynArray_StatusCost* instantStatusCost;
    uint8_t _pad_4[0x28];
};




struct EntityAudioControllerManagerParams {
    uint8_t _pad_0[0x8];
    struct DynArray_EntityAudioControllerTypeManagementParams* params;
    uint8_t _pad_1[0x28];
};




struct EAPatchNoteCategoryParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct DynArray_EAPatchNoteParams* notes;
    uint8_t _pad_1[0x28];
};




struct SCItemControlCondition_And {
    uint8_t _pad_0[0x8];
    struct DynArray_SCItemControlCondition_Base* subConditions;
    uint8_t _pad_1[0x40];
};




struct WheelAudioSurfaceMap {
    uint8_t _pad_0[0x8];
    struct WheelAudioParams* generic;
    uint8_t _pad_1[0x40];
    struct WheelAudioParams* default_;
    uint8_t _pad_2[0x40];
    struct WheelAudioParams* invalidSurface;
    uint8_t _pad_3[0x40];
    struct DynArray_WheelAudioSurfaceMapping* surfaceMappings;
    uint8_t _pad_4[0x28];
};




struct ContractResult_CompletionTags {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
    struct DynArray_ContractResult_CompletionTag* completionTags;
    uint8_t _pad_2[0x28];
};




struct EntityEffectSystem_MaterialPropertyLink {
    uint8_t _pad_0[0x8];
    struct DynArray_SEntityEffectSystem_PropertyModifier* modifiers;
    uint8_t _pad_1[0x28];
    struct Tag* parameterName;
    uint8_t _pad_2[0x18];
    enum ARDataType materialProperty;
    uint8_t _pad_3[0x4];
    struct CryStringT* subMeshName;
    uint8_t _pad_4[0x8];
};




struct EntityEffectSystem_LightPropertyLink {
    uint8_t _pad_0[0x8];
    struct DynArray_SEntityEffectSystem_PropertyModifier* modifiers;
    uint8_t _pad_1[0x28];
    struct Tag* parameterName;
    uint8_t _pad_2[0x18];
    enum ARDataType lightProperty;
    uint8_t _pad_3[0x4];
};




struct SEntityEffectSystem_SoundPropertyLink {
    uint8_t _pad_0[0x8];
    struct DynArray_SEntityEffectSystem_PropertyModifier* modifiers;
    uint8_t _pad_1[0x28];
    struct Tag* parameterName;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* rtpc;
    uint8_t _pad_3[0x18];
};




struct SEntityEffectSystem_PropertyLink {
    uint8_t _pad_0[0x8];
    struct DynArray_SEntityEffectSystem_PropertyModifier* modifiers;
    uint8_t _pad_1[0x28];
    struct Tag* parameterName;
    uint8_t _pad_2[0x18];
};




struct SEntityEffectSystem_ParticlePropertyLink {
    uint8_t _pad_0[0x8];
    struct DynArray_SEntityEffectSystem_PropertyModifier* modifiers;
    uint8_t _pad_1[0x28];
    struct Tag* parameterName;
    uint8_t _pad_2[0x18];
    enum ARDataType particleProperty;
    uint8_t _pad_3[0x4];
};




struct ContractResult_BadgeAward {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
    struct DynArray_MinCompletionTags* requiredCompletionTags;
    uint8_t _pad_2[0x28];
    enum ARDataType badgeToAward;
    uint8_t _pad_3[0x4];
};




struct MobiGlasAfterActionReportRankRules {
    uint8_t _pad_0[0x8];
    struct Time* maxTime;
    uint8_t _pad_1[0x10];
    int32_t maxMedpens;
    float maxShipDamage;
    struct DynArray_MissionObjective* requiredObjectives;
    uint8_t _pad_2[0x28];
    struct CLocIdentifier* coDebrief;
    struct CLocIdentifier* oldManDebrief;
    struct DynArray_AfterActionReportReputationImpact* reputationImpacts;
    uint8_t _pad_3[0x28];
};




struct KioskInteractionEntityComponentParams {
    uint8_t _pad_0[0x18];
    _Bool onlyShowCursorWhenLockedByKiosk;
    uint8_t _pad_1[0x3];
    float initialForceLookAtLerpTime;
    float defaultForceLookAtLerpTime;
    float forceLookAtDecayFactor;
    float forceLookAtIncreaseFactor;
    float forceLookAtThreshold;
    float FOVSpeedFactor;
    float FOVHaltDistanceMax;
    float FOVHaltDistanceMin;
    float FOVMax;
    float FOVMin;
    float lookInputFactor;
    float inActivityTimer;
    float autoCloseRadiusInNonFoucseMode;
    _Bool blockLookInputs;
    _Bool supportWalkToAlign;
    uint8_t _pad_2[0x6];
    struct SSharedInteractionParams* openInteraction;
    uint8_t _pad_3[0x8];
    struct DynArray_UIOwnerContextTransitionPair* attractTransitions;
    uint8_t _pad_4[0x28];
    struct DynArray_UIOwnerContextTransitionPair* openTransitions;
    uint8_t _pad_5[0x28];
    struct DynArray_UIOwnerContextTransitionPair* powerOffTransitions;
    uint8_t _pad_6[0x28];
    struct DynArray_ARDataType* abilityLocks;
    uint8_t _pad_7[0x28];
    _Bool isAccessedFromVehicleSeat;
    uint8_t _pad_8[0x7];
    struct Vec3* lookAtOffset;
    uint8_t _pad_9[0x10];
};




struct BuildingBlocks_AspectRatioLibrary {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_AspectRatioOption* aspectRatioOptions;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_BindingsNumberArithmeticMulti {
    uint8_t _pad_0[0x50];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct DynArray_BuildingBlocks_BindingsNumberBase* inputs;
    uint8_t _pad_2[0x28];
};




struct ScanDisplayCustomDataArraySetupParams {
    uint8_t _pad_0[0x8];
    enum ARDataType scanTable;
    uint8_t _pad_1[0x7];
    _Bool failIfNoBody;
    _Bool checkDisplaySection;
    uint8_t _pad_2[0x6];
    struct ScanDisplayVariableParams* headerVariable;
    uint8_t _pad_3[0x8];
    struct ScanDisplayVariableParams* bodyVariable;
    uint8_t _pad_4[0x8];
    struct ScanDisplayVariableParams* capacityVariable;
    uint8_t _pad_5[0x8];
    struct ScanDisplayVariableParams* extensionVariable;
    uint8_t _pad_6[0x8];
    struct DynArray_ScanDisplaySortInfoParams* sortInfoArray;
    uint8_t _pad_7[0x28];
};




struct ScanDisplayStandardArraySetupParams {
    uint8_t _pad_0[0x8];
    enum ARDataType scanTable;
    uint8_t _pad_1[0x7];
    _Bool failIfNoBody;
    _Bool checkDisplaySection;
    uint8_t _pad_2[0x6];
    struct ScanDisplayVariableParams* headerVariable;
    uint8_t _pad_3[0x8];
    struct ScanDisplayVariableParams* bodyVariable;
    uint8_t _pad_4[0x8];
    struct ScanDisplayVariableParams* capacityVariable;
    uint8_t _pad_5[0x8];
    struct ScanDisplayVariableParams* extensionVariable;
    uint8_t _pad_6[0x8];
    struct DynArray_ScanDisplaySortInfoParams* sortInfoArray;
    uint8_t _pad_7[0x28];
};




struct ActorStatusPrioritySet {
    uint8_t _pad_0[0x8];
    struct DynArray_StatusPriorityBase* actorStatusPriorities;
    uint8_t _pad_1[0x28];
    int32_t actorStatusWidgetsMax;
    uint8_t _pad_2[0x4];
};




struct SReputationMissionRequirementsParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SReputationMissionRequirementExpressionElement* expression;
    uint8_t _pad_1[0x28];
};




struct SEntityEffectSystem_UIOwnerCategory {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool allowMultipleTags;
    uint8_t _pad_1[0x6];
    struct DynArray_SEntityEffectSystem_UIOwnerTagEffect* tagEffects;
    uint8_t _pad_2[0x28];
    struct DynArray_SEntityEffectSystem_UIOwnerTriggerEffect* triggerEffects;
    uint8_t _pad_3[0x28];
};




struct CraftingCost_Select {
    uint8_t _pad_0[0x8];
    struct CraftingNameInfo* nameInfo;
    uint8_t _pad_1[0x18];
    int32_t count;
    uint8_t _pad_2[0x4];
    struct DynArray_CraftingCost_Base* options;
    uint8_t _pad_3[0x28];
};




struct ExtendedNameData {
    uint8_t _pad_0[0x8];
    struct DynArray_ExtendedNameEntry* entries;
    uint8_t _pad_1[0x28];
};




struct WorldDisplay_PlaneEnvironment {
    uint8_t _pad_0[0x8];
    enum ARDataType alignment;
    uint8_t _pad_1[0x4];
    struct WorldDisplayEnvironmentColor* environmentColor;
    uint8_t _pad_2[0x8];
    uint8_t segments;
    uint8_t _pad_3[0x7];
    struct DynArray_WorldDisplay_PlaneEnvironment_Ring* rings;
    uint8_t _pad_4[0x28];
};




struct VendingMachineParams {
    uint8_t _pad_0[0x18];
    struct SItemPortDef* itemPort;
    uint8_t _pad_1[0x8];
    float updateTimeSeconds;
    float detachTimeSeconds;
    float despawnTimeSeconds;
    float cooldownSeconds;
    float defaultItemLifetimeSeconds;
    uint8_t _pad_2[0x4];
    struct DynArray_SVendingMachineItem* items;
    uint8_t _pad_3[0x28];
};




struct HandholdGripDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_HandholdGripType* gripTypes;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_DraggablePolicyBase {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_TriggerBase* onDragStart;
    uint8_t _pad_1[0x28];
    struct DynArray_BuildingBlocks_TriggerBase* onDragEnd;
    uint8_t _pad_2[0x28];
    struct Tag* dragStartSoundTag;
    uint8_t _pad_3[0x10];
    struct Tag* dragEndSoundTag;
    uint8_t _pad_4[0x10];
    struct Tag* cursorSpeedSoundTag;
    uint8_t _pad_5[0x10];
    struct CryStringT* dragXPosURL;
    uint8_t _pad_6[0x8];
    struct CryStringT* dragYPosURL;
    uint8_t _pad_7[0x8];
};




struct BuildingBlocks_Interactions {
    uint8_t _pad_0[0x8];
    _Bool canInteract;
    _Bool disabled;
    _Bool selected;
    _Bool collideLeftClick;
    _Bool collideRightClick;
    _Bool collideMouseWheel;
    uint8_t _pad_1[0x2];
    float hitDetectionOffset;
    _Bool propagateInteractionStates;
    _Bool inheritHoverState;
    _Bool inheritDownState;
    _Bool inheritSelectedState;
    _Bool inheritDisabledState;
    _Bool blocksCursor;
    uint8_t _pad_2[0x6];
    struct DynArray_BuildingBlocks_TriggerBase* onLeftClick;
    uint8_t _pad_3[0x28];
    struct DynArray_BuildingBlocks_TriggerBase* onRightClick;
    uint8_t _pad_4[0x28];
    struct DynArray_BuildingBlocks_TriggerBase* onLeftDoubleClick;
    uint8_t _pad_5[0x28];
    struct DynArray_BuildingBlocks_TriggerBase* onRollOver;
    uint8_t _pad_6[0x28];
    struct DynArray_BuildingBlocks_TriggerBase* onRollOff;
    uint8_t _pad_7[0x28];
    struct BuildingBlocks_ShapeBase* boundRestrictionShape;
    uint8_t _pad_8[0x8];
    struct BuildingBlocks_TwoVariablePicker* twoVariablePicker;
    uint8_t _pad_9[0x8];
    struct Tag* buttonDownSoundTag;
    uint8_t _pad_10[0x10];
    struct Tag* rightButtonDownSoundTag;
    uint8_t _pad_11[0x10];
    struct Tag* leftClickSoundTag;
    uint8_t _pad_12[0x10];
    struct Tag* rightClickSoundTag;
    uint8_t _pad_13[0x10];
    struct Tag* leftDoubleClickSoundTag;
    uint8_t _pad_14[0x10];
    struct Tag* rollOverSoundTag;
    uint8_t _pad_15[0x10];
    struct Tag* rollOffSoundTag;
    uint8_t _pad_16[0x10];
    struct Tag* movementStartSoundTag;
    uint8_t _pad_17[0x10];
    struct Tag* movementStopSoundTag;
    uint8_t _pad_18[0x10];
    float movementStopDelayMs;
    uint8_t _pad_19[0x4];
};




struct BuildingBlocks_DropTargetItem {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_TriggerBase* onDragStart;
    uint8_t _pad_1[0x28];
    struct DynArray_BuildingBlocks_TriggerBase* onDragEnd;
    uint8_t _pad_2[0x28];
    struct Tag* dragStartSoundTag;
    uint8_t _pad_3[0x10];
    struct Tag* dragEndSoundTag;
    uint8_t _pad_4[0x10];
    struct Tag* cursorSpeedSoundTag;
    uint8_t _pad_5[0x10];
    struct CryStringT* dragXPosURL;
    uint8_t _pad_6[0x8];
    struct CryStringT* dragYPosURL;
    uint8_t _pad_7[0x8];
    struct BuildingBlocks_BindingsVariableInput* currentDropTargetIdVariable;
    uint8_t _pad_8[0x10];
    struct BuildingBlocks_BindingsVariableInput* orderIndexVariable;
    uint8_t _pad_9[0x10];
    struct Tag* reorderSoundTag;
    uint8_t _pad_10[0x10];
    struct BuildingBlocks_WidgetBase* dragProxy;
    uint8_t _pad_11[0x8];
    _Bool centerOnCursor;
    _Bool transformIsRelative;
    uint8_t _pad_12[0x6];
};




struct SItemPortMasterControllerParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SEnergyPipeDefinition* Pipes;
    uint8_t _pad_1[0x28];
};




struct RadarDisplay3DPreset {
    uint8_t _pad_0[0x8];
    struct UIDataBankDisplay3DParams* displayParams;
    uint8_t _pad_1[0x2f0];
    struct DynArray_UIWorldDisplayPathParams* quantumPathDisplaySettings;
    uint8_t _pad_2[0x28];
};




struct TQSOptionContent {
    uint8_t _pad_0[0x8];
    struct DynArray_TQSInput* parameters;
    uint8_t _pad_1[0x28];
    struct DynArray_TQSInput* generation;
    uint8_t _pad_2[0x28];
    struct DynArray_TQSInput* conditions;
    uint8_t _pad_3[0x28];
    struct DynArray_TQSWeightInput* weights;
    uint8_t _pad_4[0x28];
};




struct AnimationGraph_Track {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct CryStringT* trackName;
    uint8_t _pad_2[0x8];
    struct DynArray_AnimationGraph_KeyFrame* keyFrames;
    uint8_t _pad_3[0x28];
};




struct CraftingRecipeCosts {
    uint8_t _pad_0[0x8];
    struct TimeValue_Base* craftTime;
    uint8_t _pad_1[0x8];
    struct CraftingCost_Base* mandatoryCost;
    uint8_t _pad_2[0x8];
    struct DynArray_CraftingOptionalEntry* optionalCosts;
    uint8_t _pad_3[0x28];
};




struct MovieClipTransformationInterpolator {
    uint8_t _pad_0[0x8];
    float interpolationTime;
    uint8_t _pad_1[0x4];
    struct DynArray_MovieClipTransformationInterpolatorParams* movieClipTransformationInterpolatorParams;
    uint8_t _pad_2[0x28];
};




struct SStatusFortitudeLevelModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SStatusTriggerThresholdLevelModifier* triggerThresholdLevelModifier;
    uint8_t _pad_1[0x28];
};




struct SActorLocomotionFidgetStateFilteredDef {
    uint8_t _pad_0[0x8];
    struct SLocomotionPersonalityStateFilter* stateFilter;
    uint8_t _pad_1[0x58];
    _Bool enable;
    uint8_t _pad_2[0x3];
    float cooldownMin;
    float cooldownMax;
    uint8_t _pad_3[0x4];
    struct DynArray_SActorLocomotionFidgetSeverityParams* severities;
    uint8_t _pad_4[0x28];
};




struct SCEntityWeaponMountParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* useInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* exitInteraction;
    uint8_t _pad_2[0x8];
    struct DynArray_SWeaponMountGrip* grips;
    uint8_t _pad_3[0x28];
    struct SCMountRotationAxisParams* pitchAxis;
    uint8_t _pad_4[0x8];
    struct SCMountRotationAxisParams* yawAxis;
    uint8_t _pad_5[0x8];
    struct SItemPortDef* WeaponItemPort;
    uint8_t _pad_6[0x8];
    _Bool FreeRotateYaw;
    uint8_t _pad_7[0x7];
    struct CryStringT* IntroFragmentId;
    uint8_t _pad_8[0x8];
    struct CryStringT* IntroFragTag;
    uint8_t _pad_9[0x8];
    struct CryStringT* OutroFragmentId;
    uint8_t _pad_10[0x8];
    struct CryStringT* OutroFragTag;
    uint8_t _pad_11[0x8];
    struct CryStringT* enslavementAnimationDatabase;
    uint8_t _pad_12[0x8];
    struct AudioRtpc* pitchAxisRtpc;
    uint8_t _pad_13[0x18];
    struct AudioRtpc* yawAxisRtpc;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* useStartTrigger;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* useStopTrigger;
    uint8_t _pad_16[0x18];
};




struct SInverseInteractionLinkExecuteCreateInteractionLinkNode {
    uint8_t _pad_0[0x8];
    struct SInteractionPointParams* interactionPointParams;
    uint8_t _pad_1[0x278];
    struct DynArray_SInverseInteractionLinkParams* inverseInteractionEntries;
    uint8_t _pad_2[0x28];
};




struct Investigation_ClueItem_Corpse {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    struct TagList* spawnTags;
    uint8_t _pad_2[0x30];
    struct DynArray_Investigation_Clue* clues;
    uint8_t _pad_3[0x28];
    struct Investigation_Suspect* suspectRepresented;
    uint8_t _pad_4[0x8];
};




struct Investigation_ClueItem_Datapad {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    struct TagList* spawnTags;
    uint8_t _pad_2[0x30];
    struct DynArray_Investigation_Clue* clues;
    uint8_t _pad_3[0x28];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_4[0x10];
};




struct Investigation_ClueItem {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    struct TagList* spawnTags;
    uint8_t _pad_2[0x30];
    struct DynArray_Investigation_Clue* clues;
    uint8_t _pad_3[0x28];
};




struct ProcBreathingCurveDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_ProcBreathingCurve* breathAnimationCurves;
    uint8_t _pad_1[0x28];
};




struct SCItemInteractionGeometryMapParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SCInteractionGeometryMapEntryParams* Entries;
    uint8_t _pad_1[0x28];
};




struct STeamScoring {
    uint8_t _pad_0[0x8];
    int32_t startTeamScore;
    _Bool useScoreAsTime;
    uint8_t _pad_1[0x3];
    int32_t teamScoreValue;
    uint8_t _pad_2[0x4];
    struct DynArray_ARDataType* playerToTeamScoring;
    uint8_t _pad_3[0x28];
    struct DynArray_SScoreEvent* teamScoreEvents;
    uint8_t _pad_4[0x28];
};




struct SPlayerScoring {
    uint8_t _pad_0[0x8];
    struct DynArray_SScoreEvent* playerScoreEvents;
    uint8_t _pad_1[0x28];
};




struct RemovableChipParams {
    uint8_t _pad_0[0x18];
    struct DynArray_RemovableChipValue* values;
    uint8_t _pad_1[0x28];
};




struct CostModifierPerAgentType {
    uint8_t _pad_0[0x8];
    enum ARDataType agentType;
    uint8_t _pad_1[0x4];
    struct DynArray_TraversalCostConditionTags* traversalCostVariants;
    uint8_t _pad_2[0x28];
    float defaultCostMultiplier;
    _Bool blocksTraversability;
    uint8_t _pad_3[0x3];
};




struct SActorForceReactionTwitchConfigDef {
    uint8_t _pad_0[0x8];
    enum ARDataType filterByForceType;
    enum ARDataType filterByAimStanceState;
    enum ARDataType filterByHeldItemType;
    enum ARDataType filterByStanceState;
    enum ARDataType filterByState;
    uint8_t _pad_1[0x4];
    struct DynArray_SActorForceReactionTwitchRangeDef* twitchRanges;
    uint8_t _pad_2[0x28];
};




struct WeaponGimbalModeModifierDef {
    uint8_t _pad_0[0x8];
    struct DynArray_SWeaponModifierParams* weaponGimbalModeModifiers;
    uint8_t _pad_1[0x28];
};




struct SActorForceReactionLeanConfigDef {
    uint8_t _pad_0[0x8];
    float forceSmoothDuration;
    float minLeanForceForEffort;
    struct DynArray_SActorForceReactionLeanFilterDef* leanFilters;
    uint8_t _pad_1[0x28];
    struct SActorForceReactionProceduralLeanPoseList* procLeanPoseDef;
    uint8_t _pad_2[0x8];
};




struct UIAudioComponentEntityComponentParams {
    uint8_t _pad_0[0x18];
    struct UIAudioDefinition* UIAudioDef;
    uint8_t _pad_1[0x10];
    struct DynArray_UIAudioManufacturer* UIAudioManufacturers;
    uint8_t _pad_2[0x28];
    struct EntityClassDefinition* useEntityClass;
    uint8_t _pad_3[0x10];
    struct UIAudioComponent_Offset* offset;
    uint8_t _pad_4[0x8];
    struct GlobalResourceAudio* videoAudioPlayTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* videoAudioStopTrigger;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* videoAudioPauseTrigger;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* videoAudioResumeTrigger;
    uint8_t _pad_8[0x18];
    struct DialogueContext* dialogueContext;
    uint8_t _pad_9[0x10];
};




struct ActorMovementSetsConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorMovementSetTransition* transitions;
    uint8_t _pad_1[0x28];
};




struct SActorForceReactionGlobalEffectConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_SActorForceReactionCurve* effectCurves;
    uint8_t _pad_1[0x28];
    struct SActorForceReactionEffectDefaults* aimPunchDefaults;
    uint8_t _pad_2[0x10];
    struct SActorForceReactionEffectDefaults* weaponTwitchDefaults;
    uint8_t _pad_3[0x10];
    struct SActorForceReactionEffectDefaults* headRecoilPlanarDefaults;
    uint8_t _pad_4[0x10];
    struct SActorForceReactionEffectDefaults* headRecoilRollDefaults;
    uint8_t _pad_5[0x10];
    float aimPunchFrontMaxAngle;
    float aimPunchBackMaxAngle;
    float headRecoilFrontMaxAngle;
    float headRecoilBackMaxAngle;
    struct Vec3* headRecoilRollAxis;
    uint8_t _pad_6[0x10];
};




struct VehicleEditorGroupData {
    uint8_t _pad_0[0x8];
    struct VehicleEditorPortsWithItemData* mainItem;
    uint8_t _pad_1[0x80];
    struct DynArray_VehicleEditorPortsWithItemData* groupedItems;
    uint8_t _pad_2[0x28];
};




struct SCItemTurretStandardAngleLimitParams {
    uint8_t _pad_0[0x8];
    float LowestAngle;
    float HighestAngle;
    struct DynArray_SCItemTurretStandardAngleLimitTagOverwriteParams* limitOverwrites;
    uint8_t _pad_1[0x28];
};




struct ActorLookLimits {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorLookLimitsStateFilter* lookLimitsStateFilters;
    uint8_t _pad_1[0x28];
};




struct AIContextualVisualFieldProfile {
    uint8_t _pad_0[0x8];
    struct AIVisualFieldParams* defaultProfile;
    uint8_t _pad_1[0x10];
    struct DynArray_AIVisualFieldParams* alertnessLevelOverrides;
    uint8_t _pad_2[0x28];
};




struct VoiceChannelSettingsRecord {
    uint8_t _pad_0[0x8];
    struct SChatChannelTypeBase* autoConnectProximityChannelType;
    uint8_t _pad_1[0x8];
    struct DynArray_SChatChannelTypeBase* autoConnectPrimaryChannelType;
    uint8_t _pad_2[0x28];
    struct CyclingChannelOption* cyclingChannelOption;
    uint8_t _pad_3[0x38];
};




struct CyclingChannelOption {
    uint8_t _pad_0[0x8];
    uint32_t cyclingChannelCount;
    float cycleChannelConnectionWaitSecond;
    struct DynArray_SChatChannelTypeBase* autoRegisterCyclingChannelTypes;
    uint8_t _pad_1[0x28];
};




struct SChatChannelFilterBase {
    uint8_t _pad_0[0x8];
    struct DynArray_SChatChannelTypeBase* chatChannelType;
    uint8_t _pad_1[0x30];
};




struct SChatChannelWhiteList {
    uint8_t _pad_0[0x8];
    struct DynArray_SChatChannelTypeBase* chatChannelType;
    uint8_t _pad_1[0x30];
};




struct SChatChannelBlackList {
    uint8_t _pad_0[0x8];
    struct DynArray_SChatChannelTypeBase* chatChannelType;
    uint8_t _pad_1[0x30];
};




struct FactionPalettes {
    uint8_t _pad_0[0x8];
    struct DynArray_FactionPalette* Palettes;
    uint8_t _pad_1[0x28];
};




struct SCItemRadarSensitivityModifierTypeSignatureCategory {
    uint8_t _pad_0[0x8];
    struct DynArray_RadarSignatureCategoryEntry* signatureCategories;
    uint8_t _pad_1[0x28];
};




struct RadarSignatureCategoryDefinition {
    uint8_t _pad_0[0x8];
    struct RadarSignatureCategoryEntry* default_;
    uint8_t _pad_1[0x10];
    struct DynArray_RadarSignatureCategoryEntry* types;
    uint8_t _pad_2[0x28];
};




struct SInteractionPointModifierApplyActorOffsetByGravity {
    uint8_t _pad_0[0x8];
    struct DynArray_InteractionConditionParams* conditionParams;
    uint8_t _pad_1[0x28];
    struct DynArray_float* directionalOffsets;
    uint8_t _pad_2[0x28];
};




struct InteractionConditionPreset {
    uint8_t _pad_0[0x8];
    struct DynArray_InteractionConditionParams* conditions;
    uint8_t _pad_1[0x28];
    struct DynArray_InteractionConditionParams* conditionToHideParams;
    uint8_t _pad_2[0x28];
};




struct SInteractionPointModifierReplaceByBoneTransform {
    uint8_t _pad_0[0x8];
    struct DynArray_InteractionConditionParams* conditionParams;
    uint8_t _pad_1[0x28];
    struct CryStringT* boneName;
    uint8_t _pad_2[0x8];
};




struct SInteractionPointModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_InteractionConditionParams* conditionParams;
    uint8_t _pad_1[0x28];
};




struct SEntityAudioControllerParams {
    uint8_t _pad_0[0x18];
    enum ARDataType audioControllerEntityType;
    int32_t randomSeedCount;
    float offLODDistance;
    float fullLODDistance;
    float offToLowLODDistance;
    float fullToLowLODDistance;
    float occlusionAttenuationScaler;
    uint8_t _pad_1[0x4];
    struct TagList* tags;
    uint8_t _pad_2[0x30];
    struct DynArray_TagTrigger* tagTriggers;
    uint8_t _pad_3[0x28];
};




struct SCItemGasTankParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SGasMass* tankComposition;
    uint8_t _pad_1[0x28];
    double recipientIdealPressure;
    double recipientTransferRate;
    double selfRefillRate;
};




struct SRenderToTextureViewParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* FlashString;
    uint8_t _pad_1[0x8];
    _Bool EnableFlashColourCorrection;
    uint8_t _pad_2[0x7];
    struct CryStringT* OverrideMaterial;
    uint8_t _pad_3[0x8];
    float AspectRatio;
    float MipSelectionBias;
    _Bool Active;
    _Bool EnableExposureControl;
    _Bool IsStaticContent;
    _Bool EnableSSDO;
    _Bool EnableSubsurfaceScattering;
    _Bool EnableTAA;
    enum ARDataType AcceptedRenderType;
    uint8_t _pad_4[0x1];
    struct Vec3* LightDirection;
    uint8_t _pad_5[0x10];
    struct RGB* SunColour;
    uint8_t _pad_6[0x10];
    struct RGB* AmbientColour;
    uint8_t _pad_7[0x10];
    struct SSilhouetteParamsDef* SilhouetteParams;
    uint8_t _pad_8[0x40];
    _Bool enableSunLight;
    _Bool EnableCubemapBackdrop;
    _Bool EnableSkyboxRendering;
    _Bool EnableLightWeightNodesRendering;
    _Bool DisablePortalCulling;
    _Bool DisableVisareaCulling;
    _Bool DisableLODCulling;
    _Bool DisableTransparencySorting;
    _Bool DisableRecursiveRTTs;
    uint8_t _pad_9[0x3];
    float ObjectFadeDistance;
    enum ARDataType imageSource;
    enum ARDataType OutputType;
    uint8_t _pad_10[0x3];
    struct DynArray_SRenderToTextureRenderLayerParams* RenderLayers;
    uint8_t _pad_11[0x28];
};




struct SEntityEffectSystem_AudioEnvironmentCategory {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool allowMultipleTags;
    uint8_t _pad_1[0x6];
    struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect* tagEffects;
    uint8_t _pad_2[0x28];
    struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect* triggerEffects;
    uint8_t _pad_3[0x28];
};




struct BindingsOperations_StringFromIntegerSwitchCanvas {
    uint8_t _pad_0[0x50];
    struct DynArray_BindingsOperations_IntegerStringCanvasPair* values;
    uint8_t _pad_1[0x28];
    struct BuildingBlocks_Canvas* defaultValue;
    uint8_t _pad_2[0x10];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_3[0x8];
};




struct SurfaceRaindropsComponentParams {
    uint8_t _pad_0[0x18];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct SurfaceParticleRTTParams* surfaceParticleRtt;
    uint8_t _pad_2[0x30];
    struct DynArray_SurfaceRaindrops_Emitter* customEmitters;
    uint8_t _pad_3[0x28];
    struct GlobalResourceParticle* wipeEffect;
    uint8_t _pad_4[0x10];
    float inactiveDuration;
    float maximumSpeed;
    struct Range* waterSprayHeightRange;
    uint8_t _pad_5[0x8];
    float waterSprayBaseDensity;
    uint8_t _pad_6[0x4];
    struct SurfaceRaindrops_Acceleration* acceleration;
    uint8_t _pad_7[0xa0];
    struct SurfaceRaindrops_Occluder* occluderSettings;
    uint8_t _pad_8[0x8];
    struct SurfaceRaindrops_Override* overrideControls;
    uint8_t _pad_9[0x10];
    struct DynArray_SItemPortLoadoutEntryParams* renderNodeLoadoutEntries;
    uint8_t _pad_10[0x28];
};




struct SItemPortLoadoutXMLParams {
    uint8_t _pad_0[0x8];
    struct Range* WearRange;
    uint8_t _pad_1[0x8];
    struct Range* DirtRange;
    uint8_t _pad_2[0x8];
    struct DynArray_SLoadoutInventoryItem* InventoryItems;
    uint8_t _pad_3[0x28];
    struct CryStringT* loadoutPath;
    uint8_t _pad_4[0x8];
};




struct SItemPortLoadoutBaseParams {
    uint8_t _pad_0[0x8];
    struct Range* WearRange;
    uint8_t _pad_1[0x8];
    struct Range* DirtRange;
    uint8_t _pad_2[0x8];
    struct DynArray_SLoadoutInventoryItem* InventoryItems;
    uint8_t _pad_3[0x28];
};




struct SLoadoutInventoryContainer {
    uint8_t _pad_0[0x8];
    struct DynArray_SLoadoutInventoryItem* inventoryItems;
    uint8_t _pad_1[0x28];
};




struct SEAPlayerSpawnProperties {
    uint8_t _pad_0[0x8];
    _Bool autoEquipDefaultWeapon;
    _Bool enableAllCarrableInteractions;
    _Bool enableAllGrenadePickups;
    _Bool importingPlayerCustomization;
    float rezOutLoadoutTime;
    struct DynArray_SLoadoutInventoryItem* inventoryItems;
    uint8_t _pad_1[0x28];
    struct SEALoadoutSetup* loadoutSetup;
    uint8_t _pad_2[0x8];
    struct DynArray_ARDataType* abilityLocks;
    uint8_t _pad_3[0x28];
    struct SEAGlobalEventLoadouts* eventLoadouts;
    uint8_t _pad_4[0x10];
    struct SCustomizableMaterialLookupTable* customizableMaterialsLookupTable;
    uint8_t _pad_5[0x10];
};




struct SItemPortLoadoutManualParams {
    uint8_t _pad_0[0x8];
    struct Range* WearRange;
    uint8_t _pad_1[0x8];
    struct Range* DirtRange;
    uint8_t _pad_2[0x8];
    struct DynArray_SLoadoutInventoryItem* InventoryItems;
    uint8_t _pad_3[0x28];
    struct DynArray_SItemPortLoadoutEntryParams* entries;
    uint8_t _pad_4[0x28];
};




struct SItemPortLoadoutRecordParams {
    uint8_t _pad_0[0x8];
    struct Range* WearRange;
    uint8_t _pad_1[0x8];
    struct Range* DirtRange;
    uint8_t _pad_2[0x8];
    struct DynArray_SLoadoutInventoryItem* InventoryItems;
    uint8_t _pad_3[0x28];
    struct EntityDefaultLoadoutParams* loadoutRecord;
    uint8_t _pad_4[0x10];
};




struct ItemResourceConversionModifierScrub {
    uint8_t _pad_0[0x8];
    struct DynArray_ItemResourceConversionPair* conversionPair;
    uint8_t _pad_1[0x28];
};




struct FloatUserVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    float defaultValue;
    uint8_t _pad_2[0x4];
    struct DynArray_FloatUserVariableTask* tasks;
    uint8_t _pad_3[0x28];
};




struct EATransportControllerComponentParams {
    uint8_t _pad_0[0x18];
    int32_t activePhase;
    float spawnDelay;
    _Bool onlyTransferActiveSpawns;
    _Bool replaceSpawningTransport;
    uint8_t _pad_1[0x6];
    struct DynArray_EATransportTransitionGroupParams* transitionGroups;
    uint8_t _pad_2[0x28];
};




struct BuildingBlocks_BindingsTagFromNumberCompare {
    uint8_t _pad_0[0x50];
    struct DynArray_BuildingBlocks_NumberTagPair* values;
    uint8_t _pad_1[0x28];
    struct Tag* defaultValue;
    uint8_t _pad_2[0x10];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_3[0x8];
};




struct SEASpawnLocationParamsDef {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* locationName;
    struct CLocIdentifier* locationTextIcon;
    struct CryStringT* locationImageIcon;
    uint8_t _pad_1[0x8];
    struct Faction_LEGACY* team;
    uint8_t _pad_2[0x10];
    struct DynArray_SEASpawnLocationVehicleSeatSlot* vehicleSeatSlots;
    uint8_t _pad_3[0x28];
    struct EAEntityEntitlement* vehicleEntitlementFilter;
    uint8_t _pad_4[0x8];
    int32_t phase;
    _Bool defaultLocation;
    _Bool autoActivate;
    _Bool abandonedVehicleCheck;
    uint8_t _pad_5[0x1];
    float abandonedRange;
    float abandonedTime;
    float delaySpawnsTime;
    _Bool invisibleLocation;
    uint8_t _pad_6[0x3];
    float unlockReminderTime;
    _Bool allowUserRequestSpawn;
    _Bool allowOnFoot;
    uint8_t _pad_7[0x2];
};




struct ActorStatusData {
    uint8_t _pad_0[0x8];
    enum ARDataType actorStatusType;
    uint8_t _pad_1[0x4];
    struct StatusTriggerBase* statusTrigger;
    uint8_t _pad_2[0x8];
    struct DynArray_StatusEffectTrigger* statusEffectTriggers;
    uint8_t _pad_3[0x28];
};




struct ConversationNode_Hub {
    uint8_t _pad_0[0x8];
    enum ARDataType linkType;
    uint8_t _pad_1[0x4];
    struct DynArray_ConversationNode_Base* outputLinks;
    uint8_t _pad_2[0x28];
};




struct Conversation {
    uint8_t _pad_0[0x8];
    struct DynArray_ConversationNode_Base* fragments;
    uint8_t _pad_1[0x28];
};




struct EntityPhysicalAudioParams {
    uint8_t _pad_0[0x18];
    struct DynArray_PhysicalAudioCollisionTrigger* collisionTriggers;
    uint8_t _pad_1[0x28];
    struct GlobalResourceAudio* slideStartTrigger;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* slideStopTrigger;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* rollStartTrigger;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* rollStopTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* movementStartTrigger;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* movementStopTrigger;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* pickupTrigger;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* pickFromOwnerTrigger;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* dropTrigger;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* placeTrigger;
    uint8_t _pad_11[0x18];
    struct AudioRtpc* rtpcSlideVelocity;
    uint8_t _pad_12[0x18];
    struct AudioRtpc* rtpcMassSelf;
    uint8_t _pad_13[0x18];
    struct AudioRtpc* rtpcMassOther;
    uint8_t _pad_14[0x18];
    struct AudioRtpc* rtpcDampening;
    uint8_t _pad_15[0x18];
    struct AudioRtpc* rtpcRollVelocity;
    uint8_t _pad_16[0x18];
    struct AudioRtpc* rtpcHealth;
    uint8_t _pad_17[0x18];
    struct AudioRtpc* rtpcMovement;
    uint8_t _pad_18[0x18];
    struct AudioRtpc* rtpcRotation;
    uint8_t _pad_19[0x18];
    struct AudioRtpc* rtpcTimeSinceLastOneshot;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* rtpcMomentum;
    uint8_t _pad_21[0x18];
    struct AudioRtpc* rtpcCarried;
    uint8_t _pad_22[0x18];
    float minimumImpulseContinuous;
    float minimumImpulseTransient;
    float minimumVelocityNoImpulse;
    float slideThreshold;
    float rollThreshold;
    float momentumScale;
    _Bool useAABBCentre;
    uint8_t _pad_23[0x7];
    struct Tag* oneShotTag;
    uint8_t _pad_24[0x10];
    float oneShotCooldown;
    _Bool dragOnly;
    uint8_t _pad_25[0x3];
};




struct InnerThought_LayoutCurve {
    uint8_t _pad_0[0x10];
    _Bool shuffleSelectedToBottom;
    uint8_t _pad_1[0x3];
    float radius;
    float angle;
    uint8_t _pad_2[0x4];
    struct Quat* radiusOrientation;
    uint8_t _pad_3[0x28];
    struct Vec3* selectedOffset;
    uint8_t _pad_4[0x10];
    struct Vec3* unselectedOffset;
    uint8_t _pad_5[0x10];
    struct Deg3* selectedRotation;
    uint8_t _pad_6[0x18];
    struct Deg3* unselectedRotation;
    uint8_t _pad_7[0x18];
    struct InnerThought_ColorParams* selectedColor;
    uint8_t _pad_8[0x10];
    struct InnerThought_ColorParams* unselectedColorStart;
    uint8_t _pad_9[0x10];
    struct InnerThought_ColorParams* unselectedColorEnd;
    uint8_t _pad_10[0x10];
    struct DynArray_InnerThought_CycleAnimBase* cycles;
    uint8_t _pad_11[0x28];
};




struct StarMarineLoadoutEditorAdditionalParams {
    uint8_t _pad_0[0x8];
    struct DynArray_LoadoutInfo* loadouts;
    uint8_t _pad_1[0x28];
};




struct ObjectiveHandler_EventModule {
    uint8_t _pad_0[0x8];
    struct CryStringT* module;
    uint8_t _pad_1[0x8];
    struct MissionModuleHierarchy* moduleHierarchy;
    uint8_t _pad_2[0x10];
    _Bool disableTravelObjectives;
    uint8_t _pad_3[0x3];
    float travelRadiusKM;
    struct ObjectiveDisplayInfo* travelObjectiveInfo;
    uint8_t _pad_4[0x20];
    struct ObjectiveDisplayInfo* returnObjectiveInfo;
    uint8_t _pad_5[0x20];
    struct NavPointSpawnInformation* navPointSpawnInfo;
    uint8_t _pad_6[0x10];
    struct DynArray_ObjectivePropertyBase* locations;
    uint8_t _pad_7[0x28];
};




struct EAScoringMessageParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ScoreMessage* scoreMessages;
    uint8_t _pad_1[0x28];
    float scoreDisplayTime;
    int32_t maxPrimaryMessages;
    int32_t maxSecondaryMessages;
    uint8_t _pad_2[0x4];
};




struct SSCLocalPlayerChoiceComponentParams {
    uint8_t _pad_0[0x18];
    struct PlayerChoice_MarkerNearestFace* markerNearestFace;
    uint8_t _pad_1[0x10];
    struct DynArray_PlayerChoice_SoftwareCursorEntry* softwareCursors;
    uint8_t _pad_2[0x28];
};




struct LongTermPersistenceSubTypeList {
    uint8_t _pad_0[0x8];
    struct DynArray_LongTermPersistenceWhiteListSubTypeEntry* ItemSubTypeEntries;
    uint8_t _pad_1[0x28];
};




struct PlayerChoice_SignalConfig {
    uint8_t _pad_0[0x8];
    float zoneQueryFrequency;
    float distantIndicatorZoneQueryFrequency;
    struct RGBA* baseColor;
    uint8_t _pad_1[0x10];
    float baseEffectWidth;
    float viewMaxDistance;
    float viewMaxDistanceIM;
    float viewMaxDistantIndicatorDist;
    float viewFadeDistance;
    float viewFadeDistanceIM;
    uint8_t maxVisibilityTraces;
    uint8_t minVisibilityWait;
    _Bool useTwoColors;
    uint8_t _pad_2[0x5];
    struct RGBA* secondaryColor;
    uint8_t _pad_3[0x10];
    float secondaryEffectWidth;
    float maxDistanceFromCursorHighlight;
    float maxDistanceFromCursorHighlightIM;
    _Bool showSignalForInspectedItems;
    _Bool useHipDistance;
    uint8_t _pad_4[0x2];
    struct DynArray_PlayerChoice_InteractionModifier* interactionModifiers;
    uint8_t _pad_5[0x28];
    float dashboardSwitchHighlightRadius;
    float dashboardSwitchHighlightCentreSize;
    enum ARDataType dashboardSwitchItemType;
    uint8_t _pad_6[0x4];
};




struct SCItemInspectableParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* inspectInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* stopInspectInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* flipInteraction;
    uint8_t _pad_3[0x8];
    struct DynArray_SInspectAnimationParams* inspectAnimations;
    uint8_t _pad_4[0x28];
    float inspectRotateScaleX;
    float inspectRotateScaleY;
    struct Vec2* inspectRotateLimitsX;
    uint8_t _pad_5[0x8];
    struct Vec2* inspectRotateLimitsY;
    uint8_t _pad_6[0x8];
    struct SFirstSelect* firstSelect;
    uint8_t _pad_7[0x20];
};




struct VehicleLandingGearSystem {
    uint8_t _pad_0[0x8];
    struct CryStringT* fragment;
    uint8_t _pad_1[0x8];
    struct CryStringT* fragmentDeploy;
    uint8_t _pad_2[0x8];
    struct CryStringT* fragmentRetract;
    uint8_t _pad_3[0x8];
    struct CryStringT* fragmentCompress;
    uint8_t _pad_4[0x8];
    float altitudeToExtraGears;
    uint8_t _pad_5[0x4];
    struct DynArray_VehicleLandingGear* gears;
    uint8_t _pad_6[0x28];
};




struct VibrationAudioEntry {
    uint8_t _pad_0[0x18];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct DynArray_AudioRtpcWithBehaviour* vibrationRtpcs;
    uint8_t _pad_2[0x28];
    struct GlobalResourceAudio* loopStart;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* loopStop;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* jostleEvent;
    uint8_t _pad_5[0x18];
    float jostleCooldown;
    float jostleThreshold;
    struct AudioRtpc* jostleRtpc;
    uint8_t _pad_6[0x18];
    struct DynArray_ARDataType* usedVibrationTypes;
    uint8_t _pad_7[0x28];
    struct DynArray_float* vibrationInputModifiers;
    uint8_t _pad_8[0x28];
    enum ARDataType calculationType;
    uint8_t _pad_9[0x4];
};




struct AudioEnvironmentMovementRtpcBehavior {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioRtpcWithBehaviour* rtpcs;
    uint8_t _pad_1[0x28];
};




struct ThrusterOutputToRtpcList {
    uint8_t _pad_0[0x8];
    enum ARDataType thrusterOutput;
    _Bool calculateOnlyOnPlayerVehicle;
    uint8_t _pad_1[0x3];
    struct DynArray_AudioRtpcWithBehaviour* RTPCs;
    uint8_t _pad_2[0x28];
};




struct IFCSOutputToRtpcList {
    uint8_t _pad_0[0x8];
    enum ARDataType ifcsOutput;
    float defaultValue;
    _Bool calculateOnlyOnPlayerVehicle;
    _Bool sendToChildEmitters;
    uint8_t _pad_1[0x6];
    struct DynArray_AudioRtpcWithBehaviour* RTPCs;
    uint8_t _pad_2[0x28];
};




struct AudioPassByRtpcParams {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioRtpcWithBehaviour* RTPCs;
    uint8_t _pad_1[0x28];
    _Bool setToAllProxies;
    uint8_t _pad_2[0x7];
};




struct SWeaponActionFireChargeDrainParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct CLocIdentifier* localisedFunctionalityName;
    struct Tag* functionalityTag;
    uint8_t _pad_10[0x10];
    struct CryStringT* fireHelper;
    uint8_t _pad_11[0x8];
    _Bool toggle;
    uint8_t _pad_12[0x7];
    struct SChargeDrainRangeParams* rangeParams;
    uint8_t _pad_13[0x10];
    float maxAimRadius;
    float resourceRate;
    enum ARDataType chargeDrainMode;
    enum ARDataType ammoType;
    float wearPerSecond;
    float recoilInterval;
    struct WeaponProceduralRecoilConfigDef* recoil;
    uint8_t _pad_14[0x10];
    struct SChargeDrainPrimeParams* primeParams;
    uint8_t _pad_15[0xe0];
    float overloadDuration;
    uint8_t _pad_16[0x4];
    struct ResourceType* targetResource;
    uint8_t _pad_17[0x10];
    _Bool shouldDryFireInGreenZones;
    uint8_t _pad_18[0x7];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_19[0x18];
    struct SFragmentParams* stopFireFragment;
    uint8_t _pad_20[0x18];
    struct SFragmentParams* primingFragment;
    uint8_t _pad_21[0x18];
    struct SFragmentParams* primedFragment;
    uint8_t _pad_22[0x18];
    struct SFragmentParams* overloadFragment;
    uint8_t _pad_23[0x18];
    struct GlobalResourceAudio* startFireOneShotAudioTrigger;
    uint8_t _pad_24[0x18];
    struct GlobalResourceAudio* startFireLoopAudioTrigger;
    uint8_t _pad_25[0x18];
    struct GlobalResourceAudio* stopFireAudioTrigger;
    uint8_t _pad_26[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_27[0x18];
    struct GlobalResourceAudio* startOverloadAudioTrigger;
    uint8_t _pad_28[0x18];
    struct GlobalResourceAudio* stopOverloadAudioTrigger;
    uint8_t _pad_29[0x18];
    struct GlobalResourceAudio* overloadFireAttemptAudioTrigger;
    uint8_t _pad_30[0x18];
    struct GlobalResourceAudio* startPrimingLoopAudioTrigger;
    uint8_t _pad_31[0x18];
    struct GlobalResourceAudio* stopPrimingLoopAudioTrigger;
    uint8_t _pad_32[0x18];
    struct GlobalResourceAudio* startPrimingUnstableLoopAudioTrigger;
    uint8_t _pad_33[0x18];
    struct GlobalResourceAudio* stopPrimingUnstableLoopAudioTrigger;
    uint8_t _pad_34[0x18];
    struct GlobalResourceAudio* primingUnstableAudioTrigger;
    uint8_t _pad_35[0x18];
    float primeUnstableAudioRetriggerTime;
    uint8_t _pad_36[0x4];
    struct GlobalResourceAudio* startPrimedLoopAudioTrigger;
    uint8_t _pad_37[0x18];
    struct GlobalResourceAudio* stopPrimedLoopAudioTrigger;
    uint8_t _pad_38[0x18];
    struct GlobalResourceAudio* onJumpstartAudioTrigger;
    uint8_t _pad_39[0x18];
    struct GlobalResourceAudio* postJumpstartAudioTrigger;
    uint8_t _pad_40[0x18];
    struct GlobalResourceAudio* dumpPrimedChargeAudioTrigger;
    uint8_t _pad_41[0x18];
    struct AudioRtpc* weaponBatteryLevelRTPC;
    uint8_t _pad_42[0x18];
    struct AudioRtpc* weaponPrimedPercentageRTPC;
    uint8_t _pad_43[0x18];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_44[0x28];
    struct DynArray_SWeaponParticleEffectParams* overloadEffects;
    uint8_t _pad_45[0x28];
    struct DynArray_SWeaponParticleEffectParams* overloadFireAttemptEffects;
    uint8_t _pad_46[0x28];
    struct DynArray_SWeaponParticleEffectParams* primedEffects;
    uint8_t _pad_47[0x28];
    struct DynArray_SWeaponParticleEffectParams* postJumpstartEffects;
    uint8_t _pad_48[0x28];
    struct DynArray_SWeaponParticleEffectParams* dumpPrimedChargeEffects;
    uint8_t _pad_49[0x28];
    struct SBeamGroupParams* beamGroup;
    uint8_t _pad_50[0x8];
    struct SBeamGroupParams* jumpstartBeamGroup;
    uint8_t _pad_51[0x8];
    struct SWeaponConditionBase* updateCondition;
    uint8_t _pad_52[0x8];
    struct SSCSignatureEmitterParams* signatureEmitterParams;
    uint8_t _pad_53[0x8];
};




struct SWeaponActionFireExtinguisherParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    _Bool toggle;
    uint8_t _pad_10[0x7];
    struct CryStringT* fireHelper;
    uint8_t _pad_11[0x8];
    float extinguishingRange;
    float sensorRange;
    float fireDetectionRange;
    float fireDetectionIntervalTime;
    float extinguishStrengthFalloffDistance;
    float coneAngle;
    float maxRadius;
    float minRadius;
    float extinguishStrength;
    float maxRangeExtinguishStrength;
    float ammoPerSecond;
    float wearPerSecond;
    struct STemperatureReadOutParams* temperatureReadOutParams;
    uint8_t _pad_12[0x10];
    struct EntityClassDefinition* roomHelperClass;
    uint8_t _pad_13[0x10];
    struct SExtinguisherVectorFieldParams* vectorFieldParams;
    uint8_t _pad_14[0x50];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_15[0x28];
    struct SExtinguisherImpactParams* impactEffect;
    uint8_t _pad_16[0x20];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_17[0x18];
    struct SFragmentParams* stopFireFragment;
    uint8_t _pad_18[0x18];
    struct GlobalResourceAudio* startFireOneShotAudioTrigger;
    uint8_t _pad_19[0x18];
    struct GlobalResourceAudio* startFireLoopAudioTrigger;
    uint8_t _pad_20[0x18];
    struct GlobalResourceAudio* stopFireAudioTrigger;
    uint8_t _pad_21[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_22[0x18];
    struct SWeaponConditionBase* updateCondition;
    uint8_t _pad_23[0x8];
    enum ARDataType aimFireDetectionMode;
    float aimFireDetectionTemperature;
    float aimFireDetectionRadius;
    uint8_t _pad_24[0x4];
};




struct SWeaponParticleEffectParamsArray {
    uint8_t _pad_0[0x8];
    struct DynArray_SWeaponParticleEffectParams* effects;
    uint8_t _pad_1[0x28];
};




struct SWeaponActionFireBeamParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct CryStringT* fireHelper;
    uint8_t _pad_10[0x8];
    _Bool toggle;
    uint8_t _pad_11[0x3];
    enum ARDataType ammoType;
    float minEnergyDraw;
    float maxEnergyDraw;
    struct DamageBase* damagePerSecond;
    uint8_t _pad_12[0x8];
    float fullDamageRange;
    float zeroDamageRange;
    float heatPerSecond;
    float wearPerSecond;
    struct WeaponProceduralRecoilConfigDef* recoil;
    uint8_t _pad_13[0x10];
    float recoilInterval;
    float soundRadius;
    float soundEmittingInterval;
    uint8_t _pad_14[0x4];
    struct WeaponMisfireDef* misfire;
    uint8_t _pad_15[0x10];
    float minorMisfireDuration;
    float hitRadius;
    struct CryStringT* hitType;
    uint8_t _pad_16[0x8];
    _Bool ignoreSkiplist;
    _Bool shouldDryFireInGreenZones;
    uint8_t _pad_17[0x6];
    struct SSpreadParams* spreadParams;
    uint8_t _pad_18[0x8];
    _Bool fireDuringChargeUp;
    uint8_t _pad_19[0x3];
    float chargeUpTime;
    float chargeDownTime;
    uint8_t _pad_20[0x4];
    struct SWeaponActionFireBeamChainParams* chainParams;
    uint8_t _pad_21[0x8];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_22[0x18];
    struct SFragmentParams* stopFireFragment;
    uint8_t _pad_23[0x18];
    struct GlobalResourceAudio* startFireOneShotAudioTrigger;
    uint8_t _pad_24[0x18];
    struct GlobalResourceAudio* startFireLoopAudioTrigger;
    uint8_t _pad_25[0x18];
    struct GlobalResourceAudio* stopFireAudioTrigger;
    uint8_t _pad_26[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_27[0x18];
    struct AudioRtpc* timeSinceLastFireRTPC;
    uint8_t _pad_28[0x18];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_29[0x28];
    struct SBeamGroupParams* beamGroup;
    uint8_t _pad_30[0x8];
    struct SSCSignatureEmitterParams* signatureEmitterParams;
    uint8_t _pad_31[0x8];
};




struct SWeaponActionFireSalvageRepairParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct CLocIdentifier* localisedFunctionalityName;
    struct Tag* functionalityTag;
    uint8_t _pad_10[0x10];
    enum ARDataType salvageRepairMode;
    uint8_t _pad_11[0x4];
    struct CryStringT* fireHelper;
    uint8_t _pad_12[0x8];
    _Bool toggle;
    _Bool salvageCanFireOnFull;
    uint8_t _pad_13[0x2];
    enum ARDataType salvageRepairAmmoType;
    enum ARDataType batteryAmmoType;
    float minEnergyDraw;
    float maxEnergyDraw;
    float materialEfficiency;
    float maxVehicleDamageRatio;
    uint8_t _pad_14[0x4];
    struct Vec4* maxRepairRatio;
    uint8_t _pad_15[0x10];
    struct Vec4* minRepairRatio;
    uint8_t _pad_16[0x10];
    float repairedMaterialRatio;
    float maxHealthRepairRate;
    float healthToAmmoRatio;
    uint8_t _pad_17[0x4];
    struct SSalvageRepairRangeParams* rangeParams;
    uint8_t _pad_18[0x10];
    float heatPerSecond;
    float wearPerSecond;
    float hitRadius;
    float materialGatheringGracePeriod;
    float aimPointThicknessDamageThreshold;
    uint8_t _pad_19[0x4];
    struct Vec4* startDamageScales;
    uint8_t _pad_20[0x10];
    struct Vec4* endDamageScales;
    uint8_t _pad_21[0x10];
    float rampUpTime;
    float rampDownTime;
    float damageThreshold;
    uint8_t _pad_22[0x4];
    struct SDamageMapShaderValues* damageMapValues;
    uint8_t _pad_23[0x68];
    struct SSalvageRepairGlowParams* glowParams;
    uint8_t _pad_24[0x28];
    struct CryStringT* hitType;
    uint8_t _pad_25[0x8];
    _Bool ignoreSkiplist;
    _Bool shouldDryFireInGreenZones;
    uint8_t _pad_26[0x6];
    struct WeaponProceduralRecoilConfigDef* recoil;
    uint8_t _pad_27[0x10];
    float recoilInterval;
    uint8_t _pad_28[0x4];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_29[0x18];
    struct SFragmentParams* stopFireFragment;
    uint8_t _pad_30[0x18];
    struct GlobalResourceAudio* startFireOneShotAudioTrigger;
    uint8_t _pad_31[0x18];
    struct GlobalResourceAudio* startFireLoopAudioTrigger;
    uint8_t _pad_32[0x18];
    struct GlobalResourceAudio* stopFireAudioTrigger;
    uint8_t _pad_33[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_34[0x18];
    struct GlobalResourceAudio* startBeamImpactAudioTrigger;
    uint8_t _pad_35[0x18];
    struct GlobalResourceAudio* stopBeamImpactAudioTrigger;
    uint8_t _pad_36[0x18];
    struct AudioRtpc* timeSinceLastFireRTPC;
    uint8_t _pad_37[0x18];
    struct AudioRtpc* salvageRadiusRTPC;
    uint8_t _pad_38[0x18];
    struct AudioRtpc* salvageStateRTPC;
    uint8_t _pad_39[0x18];
    struct AudioRtpc* salvageExtractionIntensityRTPC;
    uint8_t _pad_40[0x18];
    struct AudioRtpc* salvageRemainingMaterialRTPC;
    uint8_t _pad_41[0x18];
    struct AudioRtpc* targetShieldedRTPC;
    uint8_t _pad_42[0x18];
    struct AudioRtpc* beamActiveRTPC;
    uint8_t _pad_43[0x18];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_44[0x28];
    struct SBeamGroupParams* beamGroup;
    uint8_t _pad_45[0x8];
    struct SWeaponConditionBase* updateCondition;
    uint8_t _pad_46[0x8];
    struct SWeaponActionFireSalvageRepairBeamStrengthValueParams* beamStrengthValueParams;
    uint8_t _pad_47[0x8];
    _Bool highlightTargetPart;
    _Bool enableProximityCheck;
    uint8_t _pad_48[0x6];
    struct SSCSignatureEmitterParams* signatureEmitterParams;
    uint8_t _pad_49[0x8];
};




struct SAuxiliaryWeaponActionComponentParams {
    uint8_t _pad_0[0x18];
    _Bool pausable;
    uint8_t _pad_1[0x7];
    struct DynArray_SWeaponParticleEffectParams* particleEffects;
    uint8_t _pad_2[0x28];
    struct GlobalResourceAudio* startAudioTriggerOneshot;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* startAudioTriggerLoop;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* stopAudioTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* endOfUseAudioTrigger;
    uint8_t _pad_6[0x18];
    struct SAuxiliaryWeaponActionParams* auxiliaryWeaponAction;
    uint8_t _pad_7[0x8];
    struct SFragmentParams* idleAnimation;
    uint8_t _pad_8[0x18];
    struct SFragmentParams* supplementaryFireAnimation;
    uint8_t _pad_9[0x18];
    float supplementaryFireTime;
    uint8_t _pad_10[0x4];
    struct SWeaponSpinAnimationParams* fireSpinAnimationParams;
    uint8_t _pad_11[0x8];
    struct AuxiliaryWeaponActionMisfireParams* misfireParams;
    uint8_t _pad_12[0x8];
};




struct SWeaponMisfireParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SWeaponParticleEffectParams* majorMisfireEffects;
    uint8_t _pad_1[0x28];
    struct DynArray_SWeaponParticleEffectParams* criticalMisfireEffects;
    uint8_t _pad_2[0x28];
};




struct SWeaponActionDynamicConditionParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct DynArray_SConditionalWeaponAction* conditionalWeaponActions;
    uint8_t _pad_10[0x28];
    struct SWeaponActionParams* defaultWeaponAction;
    uint8_t _pad_11[0x8];
    struct SFragmentParams* startFragment;
    uint8_t _pad_12[0x18];
    struct SFragmentParams* loopingFragment;
    uint8_t _pad_13[0x18];
    struct SFragmentParams* stopFragment;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* startAudioTrigger;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* stopAudioTrigger;
    uint8_t _pad_16[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_17[0x18];
    struct DynArray_SWeaponParticleEffectParams* effects;
    uint8_t _pad_18[0x28];
};




struct SWeaponActionGatheringBeamParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    enum ARDataType inventoryType;
    uint8_t _pad_10[0x4];
    struct Tag* queryTag;
    uint8_t _pad_11[0x10];
    double minimumDistance;
    double maximumDistance;
    double beamRadius;
    float energyDraw;
    uint8_t _pad_12[0x4];
    struct Tag* miningExtractorTag;
    uint8_t _pad_13[0x10];
    float collectionRate;
    uint8_t _pad_14[0x4];
    struct CryStringT* fireHelper;
    uint8_t _pad_15[0x8];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_16[0x18];
    struct SFragmentParams* stopFireFragment;
    uint8_t _pad_17[0x18];
    struct GlobalResourceAudio* startFireOneShotTrigger;
    uint8_t _pad_18[0x18];
    struct GlobalResourceAudio* startFireLoopTrigger;
    uint8_t _pad_19[0x18];
    struct GlobalResourceAudio* stopFireTrigger;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* timeSinceLastFireRTPC;
    uint8_t _pad_21[0x18];
    struct DynArray_SWeaponParticleEffectParams* particleEffects;
    uint8_t _pad_22[0x28];
    struct SBeamGroupParams* beamGroups;
    uint8_t _pad_23[0x8];
};




struct SWeaponModifierComponentParams {
    uint8_t _pad_0[0x18];
    struct SWeaponModifierParams* modifier;
    uint8_t _pad_1[0x3c8];
    struct Tag* tag;
    uint8_t _pad_2[0x10];
    int32_t uiReticleIndex;
    uint8_t _pad_3[0x4];
    struct SWeaponZeroingParams* zeroingParams;
    uint8_t _pad_4[0x8];
    struct SWeaponReticleParams* reticleParams;
    uint8_t _pad_5[0x8];
    struct Vec3* adsCameraOffset;
    uint8_t _pad_6[0x8];
    float aimHelperYOffset;
    float adsNearClipPlaneMultiplier;
    float barrelEffectsStrength;
    uint8_t _pad_7[0x4];
    struct DynArray_UserRTPC* userRTPCs;
    uint8_t _pad_8[0x28];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_9[0x28];
    struct SWeaponModifierBeamEffectParams* beamEffect;
    uint8_t _pad_10[0x8];
    struct SScopeAttachmentParams* scopeAttachmentParams;
    uint8_t _pad_11[0x8];
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_12[0x18];
    _Bool activateOnAttach;
    _Bool ignoreWear;
    uint8_t _pad_13[0x6];
};




struct ItemWeaponBeamVFXParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    int32_t fireActionIndex;
    uint8_t _pad_2[0x4];
    struct ItemWeaponBeamVFXStrengthOverrideParams* strengthOverride;
    uint8_t _pad_3[0x8];
    struct CryStringT* helperName;
    uint8_t _pad_4[0x8];
    float range;
    uint8_t _pad_5[0x4];
    struct SBeamGroupParams* beamEffects;
    uint8_t _pad_6[0x1c8];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_7[0x28];
};




struct SWeaponActionLockOnParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct STargetingParams* targetingParams;
    uint8_t _pad_10[0x58];
    struct SFragmentParams* lockingFragment;
    uint8_t _pad_11[0x18];
    struct SFragmentParams* lockedFragment;
    uint8_t _pad_12[0x18];
    struct SFragmentParams* lostLockFragment;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* startLockAudioTrigger;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* stopLockAudioTrigger;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* lockedAudioTrigger;
    uint8_t _pad_16[0x18];
    struct GlobalResourceAudio* lostLockAudioTrigger;
    uint8_t _pad_17[0x18];
    struct AudioRtpc* lockLevelRTPC;
    uint8_t _pad_18[0x18];
    struct DynArray_SWeaponParticleEffectParams* lockingEffects;
    uint8_t _pad_19[0x28];
    struct DynArray_SWeaponParticleEffectParams* lockedEffects;
    uint8_t _pad_20[0x28];
};




struct SWeaponActionFireChargedParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    float chargeTime;
    float overchargeTime;
    float overchargedTime;
    float cooldownTime;
    float maxGlow;
    uint8_t _pad_10[0x4];
    struct ActorStatusAddBuff* chargingBuff;
    uint8_t _pad_11[0x8];
    _Bool interpolateChargeBonus;
    _Bool fireAutomaticallyOnFullCharge;
    _Bool fireOnlyOnFullCharge;
    _Bool chargeAutomatically;
    uint8_t _pad_12[0x4];
    struct SWeaponStats* maxChargeModifier;
    uint8_t _pad_13[0x3c0];
    struct SWeaponActionParams* weaponAction;
    uint8_t _pad_14[0x8];
    struct SFragmentParams* chargeFragment;
    uint8_t _pad_15[0x18];
    struct SFragmentParams* overchargedFragment;
    uint8_t _pad_16[0x18];
    struct Tag* glowTag;
    uint8_t _pad_17[0x10];
    struct GlobalResourceAudio* startChargeAudioTrigger;
    uint8_t _pad_18[0x18];
    struct GlobalResourceAudio* stopChargeAudioTrigger;
    uint8_t _pad_19[0x18];
    struct GlobalResourceAudio* fullyChargedAudioTrigger;
    uint8_t _pad_20[0x18];
    struct GlobalResourceAudio* overChargedAudioTrigger;
    uint8_t _pad_21[0x18];
    struct GlobalResourceAudio* overChargeEndedAudioTrigger;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* chargeLevelRTPC;
    uint8_t _pad_23[0x18];
    struct DynArray_SWeaponParticleEffectParams* chargingEffects;
    uint8_t _pad_24[0x28];
    struct DynArray_SWeaponParticleEffectParams* chargedEffects;
    uint8_t _pad_25[0x28];
    struct DynArray_SWeaponParticleEffectParams* overchargedEffects;
    uint8_t _pad_26[0x28];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_27[0x28];
    struct DynArray_SWeaponParticleEffectParams* maxChargeFireEffects;
    uint8_t _pad_28[0x28];
};




struct SWeaponConnectionParams {
    uint8_t _pad_0[0x8];
    float powerActiveCooldown;
    float heatRateOnline;
    float maxGlow;
    _Bool lockOnOnverheat;
    uint8_t _pad_1[0x3];
    struct SWeaponSimplifiedHeatParams* simplifiedHeatParams;
    uint8_t _pad_2[0x8];
    struct SWeaponStats* noPowerStats;
    uint8_t _pad_3[0x3c0];
    struct SWeaponStats* underpowerStats;
    uint8_t _pad_4[0x3c0];
    struct SWeaponStats* overpowerStats;
    uint8_t _pad_5[0x3c0];
    struct SWeaponStats* overclockStats;
    uint8_t _pad_6[0x3c0];
    struct SWeaponStats* heatStats;
    uint8_t _pad_7[0x3c0];
    struct DynArray_SRangedWeaponStats* rangedHeatStats;
    uint8_t _pad_8[0x28];
    struct SWeaponStats* overheatLockedStats;
    uint8_t _pad_9[0x8];
    struct SMannequinTagParams* overheatTag;
    uint8_t _pad_10[0x18];
    struct DynArray_SWeaponParticleEffectParams* overheatEffects;
    uint8_t _pad_11[0x28];
    struct Tag* glowTag;
    uint8_t _pad_12[0x10];
    float heatReduceWhenOverheatIsFixed;
    uint8_t _pad_13[0x4];
};




struct SWeaponActionFireRapidParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct SLauncherBase* launchParams;
    uint8_t _pad_10[0x8];
    int32_t fireRate;
    float heatPerShot;
    float wearPerShot;
    float spinUpTime;
    float spinDownTime;
    _Bool fireDuringSpinUp;
    uint8_t _pad_11[0x3];
    struct WeaponProceduralRecoilConfigDef* recoil;
    uint8_t _pad_12[0x10];
    struct WeaponMisfireDef* misfire;
    uint8_t _pad_13[0x10];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_14[0x18];
    struct SFragmentParams* stopFireFragment;
    uint8_t _pad_15[0x18];
    struct SFragmentParams* oneShotFireFragment;
    uint8_t _pad_16[0x18];
    struct SFragmentParams* spinFragment;
    uint8_t _pad_17[0x18];
    struct CryStringT* spinParam;
    uint8_t _pad_18[0x8];
    float audioLoopTimeBetweenFirstShots;
    uint8_t _pad_19[0x4];
    struct GlobalResourceAudio* startFireAudioTrigger;
    uint8_t _pad_20[0x18];
    struct GlobalResourceAudio* startFireAudioTriggerOneShot;
    uint8_t _pad_21[0x18];
    struct GlobalResourceAudio* stopFireAudioTrigger;
    uint8_t _pad_22[0x18];
    struct GlobalResourceAudio* startRotationAudioTrigger;
    uint8_t _pad_23[0x18];
    struct GlobalResourceAudio* stopRotationAudioTrigger;
    uint8_t _pad_24[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_25[0x18];
    struct AudioRtpc* spinRTPC;
    uint8_t _pad_26[0x18];
    struct AudioRtpc* loadRTPC;
    uint8_t _pad_27[0x18];
    struct AudioRtpc* fireRateRTPC;
    uint8_t _pad_28[0x18];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_29[0x28];
    struct DynArray_SWeaponParticleEffectParams* stopFireEffects;
    uint8_t _pad_30[0x28];
    struct SWeaponVibrationParams* vibrationParams;
    uint8_t _pad_31[0x8];
    struct SSCSignatureEmitterParams* signatureEmitterParams;
    uint8_t _pad_32[0x10];
};




struct SWeaponActionSequenceParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    enum ARDataType mode;
    uint8_t _pad_10[0x4];
    struct DynArray_SWeaponSequenceEntryParams* sequenceEntries;
    uint8_t _pad_11[0x28];
    struct SFragmentParams* startFragment;
    uint8_t _pad_12[0x18];
    struct SFragmentParams* loopingFragment;
    uint8_t _pad_13[0x18];
    struct SFragmentParams* stopFragment;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* startAudioTrigger;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* stopAudioTrigger;
    uint8_t _pad_16[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_17[0x18];
    struct AudioRtpc* fireRateRTPC;
    uint8_t _pad_18[0x18];
    struct DynArray_SWeaponParticleEffectParams* effects;
    uint8_t _pad_19[0x28];
};




struct SWeaponActionGrappleParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct CryStringT* firePosHelper;
    uint8_t _pad_10[0x8];
    float maxGrappleRange;
    float minGrappleRange;
    float grappleStrength;
    float maxGrappleStrength;
    int32_t energyRate;
    float cooldownTime;
    float maxGrappleTime;
    uint8_t _pad_11[0x4];
    struct WeaponProceduralRecoilConfigDef* recoil;
    uint8_t _pad_12[0x10];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* fireAudioTrigger;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_15[0x18];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_16[0x28];
};




struct SWeaponActionFireSingleParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct SLauncherBase* launchParams;
    uint8_t _pad_10[0x8];
    int32_t fireRate;
    float heatPerShot;
    float wearPerShot;
    uint8_t _pad_11[0x4];
    struct WeaponProceduralRecoilConfigDef* recoil;
    uint8_t _pad_12[0x10];
    struct WeaponMisfireDef* misfire;
    uint8_t _pad_13[0x10];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* fireAudioTrigger;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_16[0x18];
    struct GlobalResourceAudio* cooldownStartTrigger;
    uint8_t _pad_17[0x18];
    struct GlobalResourceAudio* cooldownStopTrigger;
    uint8_t _pad_18[0x18];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_19[0x28];
    struct SWeaponVibrationParams* vibrationParams;
    uint8_t _pad_20[0x8];
    struct ExplosionParams* explosionParams;
    uint8_t _pad_21[0x8];
    struct SSCSignatureEmitterParams* signatureEmitterParams;
    uint8_t _pad_22[0x8];
};




struct SWeaponActionFireBurstParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    struct SLauncherBase* launchParams;
    uint8_t _pad_10[0x8];
    uint8_t shotCount;
    uint8_t _pad_11[0x3];
    int32_t fireRate;
    float heatPerShot;
    float wearPerShot;
    float cooldownTime;
    uint8_t _pad_12[0x4];
    struct WeaponProceduralRecoilConfigDef* recoil;
    uint8_t _pad_13[0x10];
    struct WeaponMisfireDef* misfire;
    uint8_t _pad_14[0x10];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* startFireAudioTrigger;
    uint8_t _pad_16[0x18];
    struct GlobalResourceAudio* startFireOneShotAudioTrigger;
    uint8_t _pad_17[0x18];
    struct GlobalResourceAudio* stopFireAudioTrigger;
    uint8_t _pad_18[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_19[0x18];
    struct AudioRtpc* burstSizeRTPC;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* fireRateRTPC;
    uint8_t _pad_21[0x18];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_22[0x28];
    struct DynArray_SWeaponParticleEffectParams* stopFireEffects;
    uint8_t _pad_23[0x28];
    struct SWeaponVibrationParams* vibrationParams;
    uint8_t _pad_24[0x8];
    struct SSCSignatureEmitterParams* signatureEmitterParams;
    uint8_t _pad_25[0x8];
};




struct BuildingBlocks_BindingsStringFromNumberCompare {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsStringBase* defaultOverride;
    uint8_t _pad_1[0x8];
    struct CryStringT* defaultValue;
    uint8_t _pad_2[0x8];
    struct DynArray_BuildingBlocks_NumberStringPair* values;
    uint8_t _pad_3[0x28];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_4[0x8];
};




struct SXYZCurvesArrays {
    uint8_t _pad_0[0x8];
    struct DynArray_SCurve* xCurves;
    uint8_t _pad_1[0x28];
    struct DynArray_SCurve* yCurves;
    uint8_t _pad_2[0x28];
    struct DynArray_SCurve* zCurves;
    uint8_t _pad_3[0x28];
};




struct PersonalThoughtGameModeDef {
    uint8_t _pad_0[0x8];
    struct DynArray_InputAction* disabledActions;
    uint8_t _pad_1[0x28];
};




struct PersonalThoughtHologramActionsList {
    uint8_t _pad_0[0x8];
    struct DynArray_InputAction* hologramActions;
    uint8_t _pad_1[0x28];
};




struct SecurityClearanceConditions {
    uint8_t _pad_0[0x8];
    struct DynArray_SecurityClearanceToken* tokens;
    uint8_t _pad_1[0x28];
};




struct SecurityClearanceGiverComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SecurityClearanceToken* securityTokens;
    uint8_t _pad_1[0x28];
    _Bool grantWhenInsideHostedZone;
    _Bool grantWhenInsideLinkedArea;
    uint8_t _pad_2[0x6];
};




struct FiringRangeWeaponItem {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* weaponName;
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct FiringRangeScenarioDef* basicScenario;
    uint8_t _pad_2[0x10];
    struct FiringRangeScenarioDef* advancedScenario;
    uint8_t _pad_3[0x10];
    struct DynArray_SecurityClearanceToken* tokensToBecomeVisible;
    uint8_t _pad_4[0x28];
    struct DynArray_SecurityClearanceToken* tokensToBecomeUnlocked;
    uint8_t _pad_5[0x28];
    struct EntityClassDefinition* defaultDisplayEntity;
    uint8_t _pad_6[0x10];
    struct CLocIdentifier* equipText;
};




struct SMobiGlasPersonalStatusWeaponItem {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* weaponTypeName;
    struct DynArray_SecurityClearanceToken* tokensToBecomeUnlocked;
    uint8_t _pad_1[0x28];
    struct FiringRangeScenarioDef* basicScenario;
    uint8_t _pad_2[0x10];
    struct FiringRangeScenarioDef* advancedScenario;
    uint8_t _pad_3[0x10];
    struct CLocIdentifier* description;
    struct EntityClassDefinition* displayClass;
    uint8_t _pad_4[0x10];
};




struct StateTokenRequirements {
    uint8_t _pad_0[0x8];
    struct SInteractionState* state;
    uint8_t _pad_1[0x8];
    struct DynArray_SecurityClearanceToken* requiredTokens;
    uint8_t _pad_2[0x28];
};




struct SLawComponentParams {
    uint8_t _pad_0[0x18];
    _Bool lightweight;
    uint8_t _pad_1[0x3];
    int32_t minCrimeStat;
    int32_t maxCrimeStat;
    float warningUpdateTime;
    struct DynArray_SecurityClearanceToken* defaultSecurityTokens;
    uint8_t _pad_2[0x28];
    struct SSharedInteractionParams* copyTokenInteraction;
    uint8_t _pad_3[0x8];
};




struct PostureGroup {
    uint8_t _pad_0[0x8];
    enum ARDataType Type;
    enum ARDataType Stance;
    uint8_t _pad_1[0x6];
    struct DynArray_PostureData* Postures;
    uint8_t _pad_2[0x28];
};




struct EAPhaseActivePropComponentDef {
    uint8_t _pad_0[0x18];
    int32_t sortingPosition;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* name;
    int32_t phase;
    uint8_t _pad_2[0x4];
    struct Faction_LEGACY* defaultTeam;
    uint8_t _pad_3[0x10];
    _Bool scaleMarkerByDistance;
    _Bool availableToDefaultTeam;
    _Bool removeMarkerOnCapture;
    _Bool showMarker;
    _Bool canTriggerOvertime;
    uint8_t _pad_4[0x3];
    struct CLocIdentifier* percentageString;
    struct SEACriticalMessageDef* capturedNotification;
    uint8_t _pad_5[0x10];
    struct SEACriticalMessageDef* lostNotification;
    uint8_t _pad_6[0x10];
    struct SEACriticalMessageDef* neutralizedNotification;
    uint8_t _pad_7[0x10];
    struct SEAObjectiveMarkerStatusMessages* objectiveMarkerMessages;
    uint8_t _pad_8[0x48];
    struct DynArray_SEAObjectiveMarkerStateSettings* objectiveMarkerSettings;
    uint8_t _pad_9[0x28];
    int32_t onInteractDamageToObjective;
    float onInteractDamageRadius;
    float cooldownTime;
    _Bool ignorePhases;
    _Bool remainActive;
    uint8_t _pad_10[0x2];
};




struct EAPhaseObjectiveComponentDef {
    uint8_t _pad_0[0x18];
    int32_t sortingPosition;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* name;
    int32_t phase;
    uint8_t _pad_2[0x4];
    struct Faction_LEGACY* defaultTeam;
    uint8_t _pad_3[0x10];
    _Bool scaleMarkerByDistance;
    _Bool availableToDefaultTeam;
    _Bool removeMarkerOnCapture;
    _Bool showMarker;
    _Bool canTriggerOvertime;
    uint8_t _pad_4[0x3];
    struct CLocIdentifier* percentageString;
    struct SEACriticalMessageDef* capturedNotification;
    uint8_t _pad_5[0x10];
    struct SEACriticalMessageDef* lostNotification;
    uint8_t _pad_6[0x10];
    struct SEACriticalMessageDef* neutralizedNotification;
    uint8_t _pad_7[0x10];
    struct SEAObjectiveMarkerStatusMessages* objectiveMarkerMessages;
    uint8_t _pad_8[0x48];
    struct DynArray_SEAObjectiveMarkerStateSettings* objectiveMarkerSettings;
    uint8_t _pad_9[0x28];
    int32_t onInteractDamageToObjective;
    float onInteractDamageRadius;
    struct SEACriticalMessageDef* captureStartedNotification;
    uint8_t _pad_10[0x10];
    struct CLocIdentifier* gamefeedNeutralizedStatus;
    struct CLocIdentifier* gamefeedCapturedStatus;
    struct CryStringT* gameTokenName;
    uint8_t _pad_11[0x8];
    struct CryStringT* gameTokenValue;
    uint8_t _pad_12[0x8];
    _Bool affectsPhaseProgress;
    uint8_t _pad_13[0x7];
    struct SObjectiveAnnouncerSettingsDef* objectiveAnnouncerParams;
    uint8_t _pad_14[0x8];
};




struct EAPhaseBaseComponentDef {
    uint8_t _pad_0[0x18];
    int32_t sortingPosition;
    uint8_t _pad_1[0x4];
    struct CLocIdentifier* name;
    int32_t phase;
    uint8_t _pad_2[0x4];
    struct Faction_LEGACY* defaultTeam;
    uint8_t _pad_3[0x10];
    _Bool scaleMarkerByDistance;
    _Bool availableToDefaultTeam;
    _Bool removeMarkerOnCapture;
    _Bool showMarker;
    _Bool canTriggerOvertime;
    uint8_t _pad_4[0x3];
    struct CLocIdentifier* percentageString;
    struct SEACriticalMessageDef* capturedNotification;
    uint8_t _pad_5[0x10];
    struct SEACriticalMessageDef* lostNotification;
    uint8_t _pad_6[0x10];
    struct SEACriticalMessageDef* neutralizedNotification;
    uint8_t _pad_7[0x10];
    struct SEAObjectiveMarkerStatusMessages* objectiveMarkerMessages;
    uint8_t _pad_8[0x48];
    struct DynArray_SEAObjectiveMarkerStateSettings* objectiveMarkerSettings;
    uint8_t _pad_9[0x28];
    int32_t onInteractDamageToObjective;
    float onInteractDamageRadius;
};




struct ActorLandingNode {
    uint8_t _pad_0[0x8];
    enum ARDataType configVariant;
    uint8_t _pad_1[0x4];
    struct DynArray_LandingAnimationSetup* landingAnimations;
    uint8_t _pad_2[0x28];
    struct ProceduralLandingSetup* proceduralLandingSetup;
    uint8_t _pad_3[0x10];
};




struct UIStateColor {
    uint8_t _pad_0[0x8];
    struct DynArray_UIStateColor_Threshold* thresholds;
    uint8_t _pad_1[0x28];
};




struct PartialContractRewardRange {
    uint8_t _pad_0[0x8];
    int32_t minPercentage;
    int32_t maxPercentage;
    float currencyRewardMultiplier;
    uint8_t _pad_1[0x4];
    struct DynArray_PartialContractRewardRepAdjustment* reputationMultipliers;
    uint8_t _pad_2[0x28];
};




struct SReputationGlobalContextBBParams {
    uint8_t _pad_0[0x8];
    struct DynArray_CLocIdentifier* infoTabNames;
    uint8_t _pad_1[0x28];
    struct DynArray_SReputationContextBBEntityListParams* entityTabs;
    uint8_t _pad_2[0x28];
    enum ARDataType entitySortOrder;
    uint8_t _pad_3[0x4];
};




struct ActorRestrainConfig {
    uint8_t _pad_0[0x8];
    _Bool immuneToRestrain;
    uint8_t _pad_1[0x7];
    struct DynArray_ActorRestrainPerAttackerConfig* perAttackerConfigs;
    uint8_t _pad_2[0x28];
    struct DynArray_CryStringT* restrainVisibilityCheckJoints;
    uint8_t _pad_3[0x40];
};




struct StaminaCostParams {
    uint8_t _pad_0[0x8];
    float staminaRegenerationBase;
    float staminaRegenerationBonus;
    float staminaForMaxRegenBonus;
    float staminaCostScale;
    float staminaRegenScale;
    float staminaSlopeCostScale;
    float costPerWeight;
    uint8_t _pad_1[0x4];
    struct DynArray_AbilityStaminaStates* abilityStaminaStates;
    uint8_t _pad_2[0x28];
    struct DynArray_ActionStaminaCosts* actionStaminaCosts;
    uint8_t _pad_3[0x28];
};




struct EntitlementAccountItemGlobalParams {
    uint8_t _pad_0[0x8];
    struct DynArray_EntitlementItemType* accountItemTypes;
    uint8_t _pad_1[0x28];
};




struct EntitlementNonInventoryStorableItemGlobalParams {
    uint8_t _pad_0[0x8];
    struct DynArray_EntitlementItemType* itemTypes;
    uint8_t _pad_1[0x28];
};




struct ArmouryItem {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* entityClass;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* descriptionOverride;
    struct DynArray_SecurityClearanceToken* tokensToUnlock;
    uint8_t _pad_2[0x28];
    struct DynArray_SecurityClearanceToken* tokensToBeVisible;
    uint8_t _pad_3[0x28];
    struct DynArray_ArmouryItemStat* itemStats;
    uint8_t _pad_4[0x28];
    _Bool allowMultipleCheckouts;
    uint8_t _pad_5[0x7];
    struct EntityClassDefinition* displayEntity;
    uint8_t _pad_6[0x10];
};




struct ContractResult_ItemsWeighting {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
    struct MissionProperty* targetLocation;
    uint8_t _pad_2[0x8];
    struct DynArray_ItemAwardWeightingsBase* itemAwardStructure;
    uint8_t _pad_3[0x28];
    struct RewardNotification* notification;
    uint8_t _pad_4[0x90];
};




struct SSalvageRepairLocalizationParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* hullLoc;
    struct DynArray_SSalvageRepairItemTypeLocalizationPair* itemTypeLocalizationPairs;
    uint8_t _pad_1[0x28];
    struct CLocIdentifier* itemTypeNotFoundLoc;
};




struct SCItemShieldGeneratorParams {
    uint8_t _pad_0[0x18];
    float MaxShieldHealth;
    float MaxShieldRegen;
    float DecayRatio;
    float ReservePoolInitialHealthRatio;
    float ReservePoolMaxHealthRatio;
    float ReservePoolRegenRateRatio;
    float ReservePoolDrainRateRatio;
    float DownedRegenDelay;
    float DamagedRegenDelay;
    float ElectricalChargeDamageResistance;
    struct SShieldStunParams* stunParams;
    uint8_t _pad_1[0x10];
    struct DynArray_SShieldResistance* ShieldResistance;
    uint8_t _pad_2[0x28];
    struct DynArray_SShieldAbsorption* ShieldAbsorption;
    uint8_t _pad_3[0x28];
};




struct SEAPlayerLoadoutSnapshots {
    uint8_t _pad_0[0x8];
    struct DynArray_SEAPlayerLoadoutSnapshotEntry* entries;
    uint8_t _pad_1[0x28];
};




struct SWeaponAttachmentUIComponentParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* removeAttachmentName;
    struct GlobalResourceTexture* removeAttachmentIconPath;
    uint8_t _pad_1[0x10];
    struct CLocIdentifier* dropAttachmentPromptCaption;
    int32_t pageSize;
    uint8_t _pad_2[0x4];
    struct GlobalResourceMaterial* previewMaterial;
    uint8_t _pad_3[0x10];
    struct DynArray_CryStringT* modelAttachmentsToIgnoreForPreview;
    uint8_t _pad_4[0x28];
    float inspectAnimationBlendTime;
    float inspectDampenAmmount;
    float fovScale;
    float dofDistanceOffset;
    float dofFStop;
    float dofFocalRange;
    struct Vec3* panelRotation;
    uint8_t _pad_5[0x10];
    struct DynArray_SWeaponAttachmentItemPort* portsToShow;
    uint8_t _pad_6[0x28];
    struct DynArray_SWeaponAttachmentIconPair* iconPairList;
    uint8_t _pad_7[0x28];
};




struct FireHazardPermanentEffects {
    uint8_t _pad_0[0x8];
    float burnSize;
    float heightmapSize;
    float fireSize;
    float triplanarDitherRepeat;
    float triplanarDitherMaxAngle;
    float breakupSize;
    struct DynArray_FireHazardFireProperties* fire;
    uint8_t _pad_1[0x28];
    struct FireHazardAfterglowProperties* afterglow;
    uint8_t _pad_2[0x28];
    struct DynArray_FireHazardSurfaceProperties* surfaces;
    uint8_t _pad_3[0x28];
};




struct CraftingMaterialStatDatabaseRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_CraftingMaterialStatTypeRecord* statTypes;
    uint8_t _pad_1[0x28];
};




struct SCItemRadarComponentParams {
    uint8_t _pad_0[0x18];
    struct TagList* scanTags;
    uint8_t _pad_1[0x30];
    struct RadarContactGroupArray* contactGroups;
    uint8_t _pad_2[0x30];
    struct DynArray_SCItemRadarSignatureDetection* signatureDetection;
    uint8_t _pad_3[0x28];
    struct DynArray_SCItemRadarSensitivityModifier* sensitivityModifiers;
    uint8_t _pad_4[0x28];
    struct SCItemRadarPingProperties* pingProperties;
    uint8_t _pad_5[0x8];
    struct SCItemRadarAIProperties* aiProperties;
    uint8_t _pad_6[0x8];
    struct DynArray_DeltaSignatureSpikeParams* deltaSignatureSpike;
    uint8_t _pad_7[0x28];
    struct RadarSystemSharedParams* sharedParams;
    uint8_t _pad_8[0x10];
    struct RadarSystemSharedParams* sharedExperimentalParams;
    uint8_t _pad_9[0x10];
    _Bool forceActiveAIControlled;
    uint8_t _pad_10[0x7];
};




struct PlayerChoice_OptionList {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_PlayerChoice_Option* options;
    uint8_t _pad_2[0x30];
};




struct SEAActionItemMessageParams {
    uint8_t _pad_0[0x18];
    float lifetime;
    int32_t maxAmountOfMessages;
    struct CryStringT* messageQueueIdentifier;
    uint8_t _pad_1[0x8];
    float fadeoutTime;
    uint8_t _pad_2[0x4];
    struct DynArray_SEAActionItemMessageDef* messages;
    uint8_t _pad_3[0x28];
};




struct SurfaceAudioPropertiesDefinition {
    uint8_t _pad_0[0x8];
    struct DynArray_SurfaceAudioProperties* surfaceAudioProps;
    uint8_t _pad_1[0x28];
};




struct SArmouryManagerParams {
    uint8_t _pad_0[0x18];
    struct ArmouryData* armouryData;
    uint8_t _pad_1[0x10];
    struct EntityReferenceDef* armourer;
    uint8_t _pad_2[0x10];
    struct DynArray_EntityReferenceDef* weaponRacks;
    uint8_t _pad_3[0x28];
    struct DynArray_EntityReferenceDef* inventories;
    uint8_t _pad_4[0x28];
    struct EntityReferenceDef* locker;
    uint8_t _pad_5[0x10];
    struct DynArray_EntityReferenceDef* spawnerLocations;
    uint8_t _pad_6[0x28];
    float requestInteractionRadius;
    uint8_t _pad_7[0x4];
};




struct FrontendS42ActionData {
    uint8_t _pad_0[0x8];
    struct EntityReferenceDef* positionEntity;
    uint8_t _pad_1[0x10];
    struct EntityReferenceDef* modelPositionEntity;
    uint8_t _pad_2[0x10];
    struct CryStringT* model;
    uint8_t _pad_3[0x8];
    struct EntityReferenceDef* optionSelectedTrackview;
    uint8_t _pad_4[0x10];
    struct EntityReferenceDef* idleTrackview;
    uint8_t _pad_5[0x10];
    struct EntityReferenceDef* backToRoomTrackview;
    uint8_t _pad_6[0x10];
    struct DynArray_EntityReferenceDef* externalBindingsConsumerEntities;
    uint8_t _pad_7[0x28];
    struct EntityReferenceDef* externalAudioController;
    uint8_t _pad_8[0x10];
};




struct FrontendS42Scenario {
    uint8_t _pad_0[0x8];
    struct Tag* scenarioTag;
    uint8_t _pad_1[0x10];
    struct FrontendS42Actions* actionsData;
    uint8_t _pad_2[0x948];
    struct EntityReferenceDef* introToEngageTrackview;
    uint8_t _pad_3[0x10];
    struct EntityReferenceDef* engageScreenTrackview;
    uint8_t _pad_4[0x10];
    struct EntityReferenceDef* engageScreenToRoomTrackview;
    uint8_t _pad_5[0x10];
    struct EntityReferenceDef* roomTrackview;
    uint8_t _pad_6[0x10];
    struct EntityReferenceDef* hallwayTrackview;
    uint8_t _pad_7[0x10];
    struct EntityReferenceDef* roomToHallwayTrackview;
    uint8_t _pad_8[0x10];
    struct EntityReferenceDef* hallwayToRoomTrackview;
    uint8_t _pad_9[0x10];
    struct DynArray_EntityReferenceDef* backgroundLoopingTrackviews;
    uint8_t _pad_10[0x28];
};




struct SCharacterCustomizerHeadLibraryParams {
    uint8_t _pad_0[0x8];
    struct EntityReferenceDef* libraryRoot;
    uint8_t _pad_1[0x10];
    int32_t columns;
    float columnSpacing;
    float rowSpacing;
    float libraryScrollingIncrement;
    float libraryTrimAmount;
    uint8_t _pad_2[0x4];
    struct EntityClassDefinition* sourceHeadClass;
    uint8_t _pad_3[0x10];
    struct DynArray_EntityReferenceDef* additionalEntities;
    uint8_t _pad_4[0x28];
};




struct StarMapObject {
    uint8_t _pad_0[0x8];
    struct StarMapObjectType* type_;
    uint8_t _pad_1[0x10];
    struct SSCRadarContactProperites* radarProperties;
    uint8_t _pad_2[0x8];
    enum ARDataType navIcon;
    uint8_t _pad_3[0x4];
    struct StarMapObject* parent;
    uint8_t _pad_4[0x10];
    _Bool isScannable;
    uint8_t _pad_5[0x7];
    double size;
    _Bool hideInStarmap;
    _Bool hideInWorld;
    _Bool hideWhenInAdoptionRadius;
    _Bool blockTravel;
    _Bool onlyShowWhenParentSelected;
    uint8_t _pad_6[0x3];
    enum ARDataType overrideShowInAllZones;
    enum ARDataType overridePermanent;
    float minimumDisplaySize;
    _Bool overrideRotationSpeed;
    uint8_t _pad_7[0x3];
    float overrideRotationSpeedValue;
    _Bool showOrbitLine;
    _Bool useHoloMaterial;
    _Bool noAutoBodyRecovery;
    uint8_t _pad_8[0x1];
    struct CryStringT* starMapGeomPath;
    uint8_t _pad_9[0x8];
    struct CryStringT* starMapMaterialPath;
    uint8_t _pad_10[0x8];
    struct CryStringT* starMapShapePath;
    uint8_t _pad_11[0x8];
    struct StarMapAssetManagerLocationParams* assetManagerLocationParams;
    uint8_t _pad_12[0x20];
    struct CLocIdentifier* name;
    struct Faction_LEGACY* affiliation;
    uint8_t _pad_13[0x10];
    struct CLocIdentifier* description;
    struct CLocIdentifier* callout1;
    struct CLocIdentifier* callout2;
    struct CLocIdentifier* callout3;
    enum ARDataType respawnLocationType;
    uint8_t _pad_14[0x4];
    struct Jurisdiction* jurisdiction;
    uint8_t _pad_15[0x10];
    struct Tag* locationHierarchyTag;
    uint8_t _pad_16[0x10];
    struct DynArray_StarMapAsteroidRing* asteroidRings;
    uint8_t _pad_17[0x28];
    struct StarMapQuantumTravelDataParams* quantumTravelData;
    uint8_t _pad_18[0x8];
    struct StarMapObjectLocationParams* locationParams;
    uint8_t _pad_19[0x8];
    struct CryStringT* locationImagePath;
    uint8_t _pad_20[0x8];
    struct CryStringT* locationMedicalImagePath;
    uint8_t _pad_21[0x8];
    struct GlobalResourceAudio* locationAudioPlayTrigger;
    uint8_t _pad_22[0x18];
    struct GlobalResourceAudio* locationAudioStopTrigger;
    uint8_t _pad_23[0x18];
    struct DynArray_StarMapAmenityTypeEntry* amenities;
    uint8_t _pad_24[0x28];
};




struct WebCustomizationStaticParams {
    uint8_t _pad_0[0x8];
    struct SItemPortLoadoutBaseParams* defaultLoadoutKit;
    uint8_t _pad_1[0x8];
    struct DynArray_LoadoutKit* loadoutKits;
    uint8_t _pad_2[0x28];
};




struct SCItemTurretParams {
    uint8_t _pad_0[0x18];
    enum ARDataType rotationStyle;
    uint8_t _pad_1[0x4];
    struct SSequencerTurretRecenterTaskParams* recenterTask;
    uint8_t _pad_2[0x8];
    struct SSequencerTurretResumeControlTaskParams* resumeControlTask;
    uint8_t _pad_3[0x8];
    struct DynArray_SSequencerTurretSetMovementTagTaskParams* setMovementTagTasks;
    uint8_t _pad_4[0x28];
    struct DynArray_SSequencerTurretSetLimiterTagTaskParams* setLimiterTagTasks;
    uint8_t _pad_5[0x28];
    struct DynArray_float* maxSpeedPerGimbalMode;
    uint8_t _pad_6[0x28];
    struct DynArray_float* weaponModifierInterpolationFactor;
    uint8_t _pad_7[0x28];
    struct DynArray_bool* disableTrackingPerGimbalMode;
    uint8_t _pad_8[0x28];
    _Bool recenterIfUnused;
    uint8_t _pad_9[0x7];
    struct SSharedInteractionParams* toggleTurretPositionInteraction;
    uint8_t _pad_10[0x8];
    struct Tag* defaultMovementTag;
    uint8_t _pad_11[0x10];
    struct DynArray_SCItemTurretMovementTagName* movementTagNames;
    uint8_t _pad_12[0x28];
    struct DynArray_SCItemTurretMovementParams* movementList;
    uint8_t _pad_13[0x28];
    struct SCItemTurretGyroParams* gyroStabilize;
    uint8_t _pad_14[0x8];
    struct SCItemTurretRemoteParams* remoteTurret;
    uint8_t _pad_15[0x8];
    struct STurretHealthModifierDef* healthModifierRecord;
    uint8_t _pad_16[0x10];
    struct SCItemTurretSensitivityParams* turretSensitivity;
    uint8_t _pad_17[0x38];
    float powerRequirement;
    _Bool switchToCachedOperatorModeOnExit;
    uint8_t _pad_18[0x3];
    enum ARDataType operatorModeOnEnter;
    uint8_t _pad_19[0x4];
    struct CryStringT* jointConvergence;
    uint8_t _pad_20[0x8];
    float fixedAssistRadiusInner;
    float fixedAssistRadiusOuter;
    struct AudioRtpc* audioRtpcHealthRatio;
    uint8_t _pad_21[0x18];
    struct IntoxicationTurretModifierParams* intoxicationModifierRef;
    uint8_t _pad_22[0x10];
    struct SProjectedHudParams* hudParamsOverride;
    uint8_t _pad_23[0x10];
    _Bool autoDeployHelmetTargetingMode;
    _Bool runsSafetyChecks;
    uint8_t _pad_24[0x6];
};




struct AudioFootstepSurfacesDefinition {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioFootstepSurfaceMapping* audioSurfaces;
    uint8_t _pad_1[0x28];
};




struct ChatManagerGlobalParams {
    uint8_t _pad_0[0x8];
    struct ChatManagerDefaultChannelColor* defaultChannelColor;
    uint8_t _pad_1[0x18];
    struct DynArray_ChatManagerColor* colorOptions;
    uint8_t _pad_2[0x28];
};




struct SAmmoContainerComponentParams {
    uint8_t _pad_0[0x18];
    int32_t initialAmmoCount;
    int32_t maxAmmoCount;
    uint32_t maxRestockCount;
    float lowAmmoWarningPercentage;
    struct AmmoParams* ammoParamsRecord;
    uint8_t _pad_1[0x10];
    struct AmmoParams* secondaryAmmoParamsRecord;
    uint8_t _pad_2[0x10];
    enum ARDataType ammoContainerType;
    _Bool despawnEmptyAmmoContainer;
    _Bool allowAmmoRepool;
    uint8_t _pad_3[0x2];
    struct CryStringT* emptyGeometryTag;
    uint8_t _pad_4[0x8];
    struct SFragmentParams* ammoCountFragment;
    uint8_t _pad_5[0x18];
    float ammoCountAnimationBlendTime;
    uint8_t _pad_6[0x4];
    struct DynArray_SHideAmmoAttachmentParams* hideAttachments;
    uint8_t _pad_7[0x28];
    struct DynArray_SAttachableEntityParams* attachableEntities;
    uint8_t _pad_8[0x28];
};




struct MotionState {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct CryStringT* mannequinTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* mannequinFragment;
    uint8_t _pad_3[0x8];
    enum ARDataType motionTypeFP;
    enum ARDataType motionTypeTP;
    enum ARDataType motionTypeRemote;
    uint8_t _pad_4[0x4];
    struct DynArray_MotionConnection* connections;
    uint8_t _pad_5[0x28];
};




struct RadarDeltaSignatureDefinition {
    uint8_t _pad_0[0x8];
    struct DynArray_RadarDeltaSignatureEntry* types;
    uint8_t _pad_1[0x28];
};




struct SCharacterCustomizerDNAHeadPool {
    uint8_t _pad_0[0x8];
    struct SGeometryModelTagBase* tag;
    uint8_t _pad_1[0x8];
    struct DynArray_CryStringT* defaultMaterialPaths;
    uint8_t _pad_2[0x28];
    struct DynArray_SCharacterCustomizerDNAHeadParams* heads;
    uint8_t _pad_3[0x28];
};




struct S42FieldManual {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* manualTitle;
    struct DynArray_S42FieldManualContentPiece* contentPieces;
    uint8_t _pad_1[0x28];
    struct S42FieldManualCategory* manualCategory;
    uint8_t _pad_2[0x10];
};




struct BuildingBlocks_ContextMenuPolicy {
    uint8_t _pad_0[0x8];
    struct CryStringT* namespace_;
    uint8_t _pad_1[0x8];
    struct BuildingBlocks_Canvas* canvas;
    uint8_t _pad_2[0x10];
    struct DynArray_BuildingBlocks_ContextMenuItem* menuItems;
    uint8_t _pad_3[0x28];
    float closeDistance;
    _Bool isLocal;
    uint8_t _pad_4[0xb];
};




struct MobiGlasPersonalMessage_ShipChatSchedule {
    uint8_t _pad_0[0x8];
    struct DateTime* startDateTime;
    uint8_t _pad_1[0x30];
    struct DynArray_MobiGlasPersonalMessage_ShipChatScheduleEntry* chatEntries;
    uint8_t _pad_2[0x28];
    float minDelayTime;
    float maxDelayTime;
};




struct EAScoringAssistParams {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool teamSpecificScoring;
    uint8_t _pad_1[0x2];
    int32_t timeout;
    int32_t maxAssistScore;
    float assistScoreMultiplier;
    struct DynArray_EAScoringAssistThreshold* assistThresholds;
    uint8_t _pad_2[0x28];
};




struct SCItemDisplayScreenComponentParams {
    uint8_t _pad_0[0x18];
    struct SCItemDisplayScreenPowerParams* powerParams;
    uint8_t _pad_1[0x8];
    struct SCItemDisplayScreenUISourceParams* uiSourceParams;
    uint8_t _pad_2[0xd0];
    struct SCItemDisplayScreenGlobalLightParams* lightParams;
    uint8_t _pad_3[0x58];
    struct DynArray_SCItemDisplayScreenStateParams* screenStates;
    uint8_t _pad_4[0x28];
};




struct ProceduralAnimationSequence {
    uint8_t _pad_0[0x8];
    float duration;
    uint8_t _pad_1[0x4];
    struct BezierCurve* animationCurve;
    uint8_t _pad_2[0x88];
    struct DynArray_ProceduralAnimationBone* boneAnimations;
    uint8_t _pad_3[0x28];
};




struct PlanetOceanAudioData {
    uint8_t _pad_0[0x8];
    struct DynArray_PlanetOceanAudioCheckpoint* checkpoints;
    uint8_t _pad_1[0x28];
    struct DynArray_PlanetOceanDepthAssignment* assignments;
    uint8_t _pad_2[0x28];
    struct GlobalResourceAudio* waterStartTrigger;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* waterStopTrigger;
    uint8_t _pad_4[0x18];
    struct AudioRtpc* oceanOffsetRtpc;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* windRTPC;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* waveHeightRTPC;
    uint8_t _pad_7[0x18];
    struct Tag* atmosphereTag;
    uint8_t _pad_8[0x10];
    int32_t terrainChecksPerFrame;
    _Bool checkOnListenerPosition;
    _Bool listenerPositionUsesAssignment;
    uint8_t _pad_9[0x2];
};




struct CraftingGameplayPropertyImplSingleStatTier_Int {
    uint8_t _pad_0[0x8];
    struct DynArray_CraftingGameplayPropertyImplValueRange_Int* valueRanges;
    uint8_t _pad_1[0x28];
};




struct SAnimationControllerParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* AnimationDatabase;
    uint8_t _pad_1[0x8];
    struct CryStringT* AnimationController;
    uint8_t _pad_2[0x8];
    struct DynArray_CryStringT* Tags;
    uint8_t _pad_3[0x28];
    struct DynArray_SAnimationScopeContext* ScopeContexts;
    uint8_t _pad_4[0x28];
    struct AnimationJointControl* AnimationJointControls;
    uint8_t _pad_5[0x8];
    struct DynArray_AnimationControlActorIK* AnimationControlActorIKs;
    uint8_t _pad_6[0x28];
    struct DynArray_SSequencerAnimationTaskParamsBase* AnimationTasks;
    uint8_t _pad_7[0x28];
    struct SSequencerAnimationTaskParamsBase* defaultAnimation;
    uint8_t _pad_8[0x38];
};




struct HaulingOrder_MissionItemDropOff {
    uint8_t _pad_0[0x8];
    struct ObjectivePropertyBase* pickUpLocation;
    uint8_t _pad_1[0x8];
    struct ObjectivePropertyBase* dropOffLocation;
    uint8_t _pad_2[0x8];
    struct ObjectiveProperty_Input* deliveryOrderInput;
    uint8_t _pad_3[0x8];
    struct DynArray_DeliveryTarget* dropOffTargetTypes;
    uint8_t _pad_4[0x28];
};




struct ObjectiveHandler_Deliveries {
    uint8_t _pad_0[0x8];
    struct DynArray_DeliveryTarget* pickUpTargetTypes;
    uint8_t _pad_1[0x28];
    struct DynArray_DeliveryTarget* dropOffTargetTypes;
    uint8_t _pad_2[0x28];
    struct ObjectivePropertyBase* pickUpLocations;
    uint8_t _pad_3[0x8];
    struct ObjectivePropertyBase* dropOffLocations;
    uint8_t _pad_4[0x8];
    struct ObjectivePropertyBase* deliveryItems;
    uint8_t _pad_5[0x8];
};




struct HaulingOrder_MissionItem {
    uint8_t _pad_0[0x8];
    struct ObjectivePropertyBase* pickUpLocation;
    uint8_t _pad_1[0x8];
    struct ObjectivePropertyBase* dropOffLocation;
    uint8_t _pad_2[0x8];
    struct ObjectivePropertyBase* item;
    uint8_t _pad_3[0x8];
    int32_t minAmount;
    int32_t maxAmount;
    struct DynArray_DeliveryTarget* pickUpTargetTypes;
    uint8_t _pad_4[0x28];
    struct DynArray_DeliveryTarget* dropOffTargetTypes;
    uint8_t _pad_5[0x28];
};




struct LegacyCraftingRecipeListRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_LegacyCraftingRecipeDef_Base* recipes;
    uint8_t _pad_1[0x28];
};




struct LegacyCraftingRecipeList_Direct {
    uint8_t _pad_0[0x8];
    struct DynArray_LegacyCraftingRecipeDef_Base* recipes;
    uint8_t _pad_1[0x28];
};




struct CommodityTypeDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_CommodityType* types;
    uint8_t _pad_1[0x28];
    struct DynArray_CommoditySubtype* subtypes;
    uint8_t _pad_2[0x28];
};




struct AsteroidFieldComposition {
    uint8_t _pad_0[0x8];
    float fogDensity;
    float fogNoiseScale;
    struct RGB* fogAlbedo;
    uint8_t _pad_1[0x10];
    struct DynArray_AsteroidProcedural* asteroids;
    uint8_t _pad_2[0x28];
};




struct SPrimeableComponentParams {
    uint8_t _pad_0[0x18];
    struct SPrimeableAnimationState* primedState;
    uint8_t _pad_1[0x8];
    struct SPrimeableAnimationState* unprimedState;
    uint8_t _pad_2[0x8];
    struct SPrimeableAnimationState* settledState;
    uint8_t _pad_3[0x8];
    struct SPrimeableAnimationState* pickedUpState;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* onPrimeInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* onUnprimeInteraction;
    uint8_t _pad_6[0x8];
    struct DynArray_SPrimeableAnimationState* primeableAnimatedStates;
    uint8_t _pad_7[0x28];
    _Bool unprimeOnTake;
    _Bool primeOnTake;
    _Bool primeOnPlace;
    _Bool primeOnPlaceAttach;
    _Bool primeOnThrow;
    _Bool primeOnAttach;
    uint8_t _pad_8[0x32];
};




struct SHackingCodeCommandEntry {
    uint8_t _pad_0[0x8];
    _Bool isDisabled;
    _Bool isAsync;
    uint8_t _pad_1[0x6];
    struct DynArray_CryStringT* commandAliases;
    uint8_t _pad_2[0x28];
    struct DynArray_SHackingCodeCommandParam* params;
    uint8_t _pad_3[0x28];
};




struct HudColor_Palette {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct DynArray_HudColor_Entry* StandardEntries;
    uint8_t _pad_2[0x28];
    struct DynArray_HudColor_CustomEntry* CustomEntries;
    uint8_t _pad_3[0x28];
};




struct SCAirTrafficControllerDataManagerParams {
    uint8_t _pad_0[0x18];
    _Bool isVehicleATC;
    uint8_t _pad_1[0x3];
    float timeToLand;
    float timeToTakeOff;
    float timeToUndock;
    float distanceForManualComms;
    float timeReservedToCancelDock;
    float timeToTakeOffMin;
    float stayTime;
    float stayTimeMin;
    float timeToRemoveIllegal;
    float timeToNotifyQueue;
    float timeToRepeatWaitingMessage;
    float reservationTime;
    float warningTimeBeforeDespawn;
    float timeToDespawn;
    float timeObstructionAllowed;
    float timeToConsiderVehicleLeft;
    float occupancyLimit;
    _Bool controlDoorsAutomatically;
    uint8_t _pad_2[0x7];
    struct CLocIdentifier* greetingMessage;
    float greetingTime;
    float timeToForgiveObstruction;
    float timeAllowedToChangeShips;
    _Bool disableObstructionDespawn;
    uint8_t _pad_3[0x3];
    int32_t maxCrimeStatAllowed;
    _Bool canDespawnShips;
    uint8_t _pad_4[0x3];
    struct DynArray_TimeToTakeOffMinOverrideByDockingClass* timeToTakeOffMinOverrideByDockingClass;
    uint8_t _pad_5[0x28];
    struct DynArray_StayTimeMinOverrideByDockingClass* stayTimeMinOverrideByDockingClass;
    uint8_t _pad_6[0x28];
    struct TagList* noStoreItemTags;
    uint8_t _pad_7[0x30];
};




struct SpawnDescriptions {
    uint8_t _pad_0[0x8];
    struct DynArray_SpawnDescriptionEntry* spawnDescriptions;
    uint8_t _pad_1[0x28];
};




struct SubItemsScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct CLocIdentifier* displayForMissingItem;
    struct DynArray_SubItemScanStatusMappings* statusMappings;
    uint8_t _pad_3[0x28];
};




struct EntityClassRawMaterialCraftingData {
    uint8_t _pad_0[0x8];
    struct DynArray_CraftingMaterialStatEntry* rawMaterialStats;
    uint8_t _pad_1[0x28];
};




struct ResourceTypeCraftingData {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_CraftingMaterialStatEntry* stats;
    uint8_t _pad_2[0x28];
};




struct SCItemObservableScreenParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_SCItemObservableScreenViewParams* views;
    uint8_t _pad_2[0x28];
};




struct JumpDriveMusicParams {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* tunnelProgressRtpc;
    uint8_t _pad_1[0x18];
    struct DynArray_JumpDriveStateMusicMap* stateMap;
    uint8_t _pad_2[0x28];
    float preArrivalDurationSecs;
    uint8_t _pad_3[0x4];
    struct JumpDriveMusicEvent* preArrivalMusicEvent;
    uint8_t _pad_4[0x38];
};




struct Marker_Configuration {
    uint8_t _pad_0[0x8];
    struct CryStringT* defaultMaterial;
    uint8_t _pad_1[0x8];
    struct CryStringT* defaultModel;
    uint8_t _pad_2[0x8];
    struct CryStringT* offScreenModel;
    uint8_t _pad_3[0x8];
    struct CryStringT* objectiveStyleModel;
    uint8_t _pad_4[0x8];
    _Bool alwaysShowOffScreenModel;
    uint8_t _pad_5[0x3];
    enum ARDataType ARcullingCategory;
    _Bool useARIcon;
    _Bool useSmallIcon;
    _Bool useStandardIcon;
    _Bool useModel;
    int32_t smallIconIndex;
    int32_t standardIconIndex;
    uint8_t _pad_6[0x4];
    struct CryStringT* smallIcon;
    uint8_t _pad_7[0x8];
    struct CryStringT* standardIcon;
    uint8_t _pad_8[0x8];
    enum ARDataType mapLabelDisplayType;
    uint8_t _pad_9[0x4];
    struct BuildingBlocks_Canvas* layoutCanvas;
    uint8_t _pad_10[0x10];
    struct DynArray_Marker_AbilityBase* abilities;
    uint8_t _pad_11[0x28];
    struct DynArray_Marker_ShowRule* showRules;
    uint8_t _pad_12[0x28];
    struct DynArray_Marker_ShowRuleMapDisplayMode* mapShowRules;
    uint8_t _pad_13[0x28];
    enum ARDataType stackPositionAlignment;
    uint8_t _pad_14[0x4];
    struct DynArray_ARDataType* mapBoxoutSectionTypes;
    uint8_t _pad_15[0x28];
    struct Vec3* markerOffset;
    uint8_t _pad_16[0x10];
};




struct MeleeAttackInfo {
    uint8_t _pad_0[0x8];
    struct DynArray_MeleeFragInfo* meleeAttacks;
    uint8_t _pad_1[0x28];
};




struct PointOfInterestList {
    uint8_t _pad_0[0x8];
    struct DynArray_PointOfInterestData* pointsOfInterest;
    uint8_t _pad_1[0x28];
};




struct Faction_LEGACY {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* description;
    struct CryStringT* factionIcon;
    uint8_t _pad_1[0x8];
    struct CryStringT* gameToken;
    uint8_t _pad_2[0x8];
    enum ARDataType defaultReaction;
    uint8_t _pad_3[0x4];
    struct DynArray_FriendlyFireReactionOverride* friendlyFireBehaviorOverrides;
    uint8_t _pad_4[0x28];
    struct DynArray_FactionRelationship* factionRelationships;
    uint8_t _pad_5[0x28];
    struct TagsDNF* disguiseManufacturerTags;
    uint8_t _pad_6[0x60];
};




struct HandholdLinkComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_HandholdAttachmentTriggerParams* attachmentTriggers;
    uint8_t _pad_1[0x28];
    struct DynArray_HandholdSharedInteractionLink* sharedInteractionLinks;
    uint8_t _pad_2[0x28];
    struct DynArray_HandholdInteractionPointLink* interactionPointLinks;
    uint8_t _pad_3[0x60];
};




struct CargoFillCapacityValue_RandomBeta {
    uint8_t _pad_0[0x8];
    struct DynArray_CargoResourceDistribution* resources;
    uint8_t _pad_1[0x28];
    float minCapacityRange;
    float maxCapacityRange;
};




struct UnitTest_Inheritance {
    uint8_t _pad_0[0x8];
    struct DynArray_UnitTest_BaseTest* baseArray;
    uint8_t _pad_1[0x28];
    struct UnitTest_BaseTest* weakPtrBase;
    uint8_t _pad_2[0x8];
};




struct ScanDisplayConditionVariableParams {
    uint8_t _pad_0[0x8];
    uint8_t truncateSize;
    _Bool displayIsHidden;
    _Bool displayInBrackets;
    _Bool suffixArrayIndex;
    _Bool suffixSemiColon;
    enum ARDataType auxiliaryFlag;
    uint8_t _pad_1[0x2];
    struct ScanDisplayVariableParams* fallback_;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* defaultValue;
    struct DynArray_ScanDisplayConditionBaseParams* conditionValues;
    uint8_t _pad_3[0x28];
};




struct ItemControlComponentParams {
    uint8_t _pad_0[0x18];
    _Bool forceOn;
    _Bool turnedOnByDefault;
    uint8_t _pad_1[0x2];
    enum ARDataType asopSpawnState;
    struct DynArray_ItemThrottleParamsBase* throttleParams;
    uint8_t _pad_2[0x28];
    struct MasterModeExclusionsOverride* masterModeExclusionsOverride;
    uint8_t _pad_3[0x8];
};




struct SandboxTriggerManualParams {
    uint8_t _pad_0[0x8];
    struct SandboxInfractionBaseDef* infractionTrigger;
    uint8_t _pad_1[0x8];
    _Bool triggerOnInnocentsOnly;
    uint8_t _pad_2[0x7];
    struct DynArray_ReputationRewardBaseDef* outcomes;
    uint8_t _pad_3[0x28];
};




struct UIAudioDefinition {
    uint8_t _pad_0[0x8];
    struct DynArray_UIAudioEvent* events;
    uint8_t _pad_1[0x28];
    struct DynArray_UIAudioParameter* parameters;
    uint8_t _pad_2[0x28];
    uint8_t* dialogueEvents;
    uint8_t _pad_3[0x88];
};




struct SCItemSeatDashboardMFDParams {
    uint8_t _pad_0[0x8];
    _Bool setupEnabled;
    uint8_t _pad_1[0x7];
    struct CryStringT* innerThoughtGeometryName;
    uint8_t _pad_2[0x8];
    struct SMFD* defaultCommsCallMFD;
    uint8_t _pad_3[0x8];
    struct SMFD* primaryMFD;
    uint8_t _pad_4[0x8];
    struct SMFDViewList* availableViews;
    uint8_t _pad_5[0x10];
    struct SMFDModeConfig* modeConfiguration;
    uint8_t _pad_6[0x10];
    struct DynArray_SMFD* MFDs;
    uint8_t _pad_7[0x28];
};




struct HarvestableElementModifier {
    uint8_t _pad_0[0x8];
    struct HarvestableElement* harvestableElement;
    uint8_t _pad_1[0x8];
    float harvestableModifier;
    uint8_t _pad_2[0x4];
    struct DynArray_HarvestableGeometry* geometries;
    uint8_t _pad_3[0x28];
};




struct SubHarvestableSlot {
    uint8_t _pad_0[0x8];
    struct HarvestablePreset* harvestable;
    uint8_t _pad_1[0x10];
    float relativeProbability;
    uint8_t _pad_2[0x4];
    struct OptionalProbability* relativeProbabilityDeepest;
    uint8_t _pad_3[0x8];
    float harvestableRespawnTimeMultiplier;
    uint8_t _pad_4[0x4];
    struct DynArray_HarvestableGeometry* geometries;
    uint8_t _pad_5[0x28];
    struct LootConfig* lootConfig;
    uint8_t _pad_6[0x8];
};




struct HarvestableElement {
    uint8_t _pad_0[0x8];
    struct HarvestablePreset* harvestable;
    uint8_t _pad_1[0x10];
    float relativeProbability;
    uint8_t _pad_2[0x4];
    struct HarvestableClusterPreset* clustering;
    uint8_t _pad_3[0x10];
    struct DynArray_HarvestableGeometry* geometries;
    uint8_t _pad_4[0x28];
};




struct AudioBreathStyleConditionList {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioBreathStyleCondition* list;
    uint8_t _pad_1[0x28];
};




struct AudioBreathStyleTransitionNode {
    uint8_t _pad_0[0x8];
    struct CryStringT* description;
    uint8_t _pad_1[0x8];
    float whenConditionsAreTrueFor;
    _Bool onNextInhale;
    _Bool onNextExhale;
    _Bool immediately;
    uint8_t _pad_2[0x1];
    struct DynArray_AudioBreathStyleCondition* conditions;
    uint8_t _pad_3[0x28];
    struct AudioBreathStyleNode* style;
    uint8_t _pad_4[0x8];
};




struct ActorBreathingStyleStartup {
    uint8_t _pad_0[0x8];
    _Bool forceInhaleFirst;
    _Bool forceExhaleFirst;
    uint8_t _pad_1[0x6];
    struct GlobalResourceAudio* overrideFirstInhale;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* overrideFirstExhale;
    uint8_t _pad_3[0x18];
    _Bool firstBreathDurationFromOverride;
    uint8_t _pad_4[0x3];
    float firstBreathDurationCompensation;
    struct DynArray_AudioBreathStyleCondition* conditions;
    uint8_t _pad_5[0x28];
};




struct ItemResourceState {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_ItemResourceDeltaBase* deltas;
    uint8_t _pad_2[0x28];
    struct DynArray_ResourceLinkedInteractionState* linkedInteractionStates;
    uint8_t _pad_3[0x28];
    struct ItemResourceSignatureParams* signatureParams;
    uint8_t _pad_4[0x40];
    struct DynArray_ResourceRangeParams* rangeParams;
    uint8_t _pad_5[0x28];
};




struct ControlHintCondition_AND {
    uint8_t _pad_0[0x8];
    struct DynArray_ControlHintCondition* conditions;
    uint8_t _pad_1[0x28];
};




struct ControlHintCondition_OR {
    uint8_t _pad_0[0x8];
    struct DynArray_ControlHintCondition* conditions;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_BindingsIntegerArithmeticMulti {
    uint8_t _pad_0[0x50];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct DynArray_BuildingBlocks_BindingsIntegerBase* inputs;
    uint8_t _pad_2[0x28];
};




struct CameraOrbitEntityConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
    struct DynArray_ActorCameraOffsetFiltered* actorOffsetConfig;
    uint8_t _pad_14[0x28];
};




struct CameraOrbitPointConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
};




struct CameraOrbitSpectatorFollowConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
    struct DynArray_ActorCameraOffsetFiltered* actorOffsetConfig;
    uint8_t _pad_14[0x28];
};




struct CameraOrbitSpectatorFollowVehicleConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
    struct DynArray_ActorCameraOffsetFiltered* actorOffsetConfig;
    uint8_t _pad_14[0x28];
};




struct CameraOrbitFPSDeathCamConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
    struct DynArray_ActorCameraOffsetFiltered* actorOffsetConfig;
    uint8_t _pad_14[0x28];
};




struct CameraOrbitSCItemSeatConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
    struct DynArray_ActorCameraOffsetFiltered* actorOffsetConfig;
    uint8_t _pad_14[0x28];
};




struct CameraPlayerInventoryConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
    struct DynArray_ActorCameraOffsetFiltered* actorOffsetConfig;
    uint8_t _pad_14[0x28];
    struct InventoryConfig* inventoryConfig;
    uint8_t _pad_15[0x1e8];
};




struct CameraOrbitPassengerSCItemSeatConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
    struct DynArray_ActorCameraOffsetFiltered* actorOffsetConfig;
    uint8_t _pad_14[0x28];
};




struct CameraOrbitConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
};




struct CameraOrbitEntityCinematicConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
    struct DynArray_ActorCameraOffsetFiltered* actorOffsetConfig;
    uint8_t _pad_14[0x28];
    struct DynArray_OrbitEntityCinematicEvent* cinematicEvents;
    uint8_t _pad_15[0x28];
    int32_t expiryViewIndex;
    float expiryAutomaticDollySpeed;
};




struct CameraPlayerHeadConfig {
    uint8_t _pad_0[0x8];
    struct CameraBaseSettingsConfig* baseSettings;
    uint8_t _pad_1[0x18];
    struct CameraBlendConfig* blendConfig;
    uint8_t _pad_2[0x8];
    struct CameraFOVConfig* FOVConfig;
    uint8_t _pad_3[0x20];
    struct CameraShakeConfig* operatorShake;
    uint8_t _pad_4[0x48];
    struct CameraSpeedShakeConfig* speedShake;
    uint8_t _pad_5[0x58];
    struct CameraGForceShakeConfig* gforceShake;
    uint8_t _pad_6[0x50];
    struct CameraTargetOffsetConfig* targetOffsetConfig;
    uint8_t _pad_7[0x50];
    struct CameraDistanceConfig* distanceConfig;
    uint8_t _pad_8[0x20];
    struct CameraRotationConfig* rotationConfig;
    uint8_t _pad_9[0x98];
    struct CameraSpringConfig* springConfig;
    uint8_t _pad_10[0x228];
    struct CameraCollisionConfig* collisionConfig;
    uint8_t _pad_11[0x20];
    struct DynArray_SCameraViewStateOrbit* defaultViews;
    uint8_t _pad_12[0x28];
    struct CameraAlternativeViewsConfig* alternativeViewsConfig;
    uint8_t _pad_13[0x30];
    struct DynArray_ActorCameraOffsetFiltered* actorOffsetConfig;
    uint8_t _pad_14[0x28];
    struct DynArray_HeadMotionConfig* headMotionConfig;
    uint8_t _pad_15[0x28];
};




struct SSCSignatureEmissionModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SModifierSignaturesEntry* modifierEntries;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_BindingsStringFromTagSwitch {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsStringBase* defaultOverride;
    uint8_t _pad_1[0x8];
    struct CryStringT* defaultValue;
    uint8_t _pad_2[0x8];
    struct DynArray_BuildingBlocks_TagStringPair* values;
    uint8_t _pad_3[0x28];
    struct BuildingBlocks_BindingsStringBase* input;
    uint8_t _pad_4[0x8];
};




struct SObjectiveMarkerLocationParams {
    uint8_t _pad_0[0x18];
    struct DynArray_ObjectiveMarkerLocation* locations;
    uint8_t _pad_1[0x28];
};




struct SCustomizableMaterialLookupTable {
    uint8_t _pad_0[0x8];
    struct DynArray_SCustomizableMaterialEntry* materials;
    uint8_t _pad_1[0x28];
    struct DynArray_SCustomizableMaterialEntry* textures;
    uint8_t _pad_2[0x28];
};




struct EntityComponentMobiglasLauncherProviderParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SMobiGlasLauncherApp* launcherApps;
    uint8_t _pad_1[0x28];
};




struct SGalactapediaUnlockableComponentParams {
    uint8_t _pad_0[0x18];
    _Bool unlockedByScan;
    _Bool unlockedByInteraction;
    _Bool unlockedByPickingUp;
    uint8_t _pad_1[0x5];
    struct DynArray_SGalactapediaEntry* entriesToUnlock;
    uint8_t _pad_2[0x28];
};




struct SGalactapediaCategory {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* indexName;
    struct CLocIdentifier* name;
    struct DynArray_SGalactapediaEntry* entries;
    uint8_t _pad_1[0x28];
};




struct FlashObjectBindingGroup {
    uint8_t _pad_0[0x8];
    struct DynArray_FlashVariableObject* variableObjects;
    uint8_t _pad_1[0x38];
};




struct ZeroGTraversalState {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct CryStringT* mannequinTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* mannequinFragment;
    uint8_t _pad_3[0x8];
    _Bool playEnterAnimation;
    _Bool canTurnInState;
    _Bool useAnimMotionControl;
    uint8_t _pad_4[0x5];
    struct DynArray_ZeroGTraversalConnection* connections;
    uint8_t _pad_5[0x28];
};




struct SDockingAnimatorBaseParams {
    uint8_t _pad_0[0x8];
    float OverrideTime;
    _Bool IgnoreGeometryOnDocking;
    uint8_t _pad_1[0x3];
    struct DynArray_SDockingAnimatorStageTriggerParams* TriggerEntries;
    uint8_t _pad_2[0x28];
};




struct EntityComponentAudioEnvironmentFeedbackParams {
    uint8_t _pad_0[0x18];
    struct DynArray_EnvironmentFeedbackAudioObject* audioObjects;
    uint8_t _pad_1[0x28];
};




struct ActorStanceConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorStanceSpeedsInfo* stanceSpeeds;
    uint8_t _pad_1[0x28];
    struct DynArray_ActorStanceDimensionsInfo* stanceDimensions;
    uint8_t _pad_2[0x28];
};




struct StarMapObjectTypes {
    uint8_t _pad_0[0x8];
    struct DynArray_StarMapObjectType* types;
    uint8_t _pad_1[0x28];
};




struct QuickAccessWheelMenuDef {
    uint8_t _pad_0[0x8];
    _Bool openContextMenuAsFolder;
    uint8_t _pad_1[0x7];
    struct CLocIdentifier* menuName;
    struct DynArray_QuickAccessWheelElement* menuElements;
    uint8_t _pad_2[0x28];
};




struct PersonalThoughtQuickAccessWheel {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_InputAction* triggerInputActions;
    uint8_t _pad_2[0x28];
    struct CryStringT* triggerEventHash;
    uint8_t _pad_3[0x8];
    struct DynArray_QuickAccessWheelElement* elements;
    uint8_t _pad_4[0x28];
    _Bool saveSelection;
    uint8_t _pad_5[0x37];
};




struct LeanState {
    uint8_t _pad_0[0x8];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct CryStringT* mannequinTags;
    uint8_t _pad_2[0x8];
    struct CryStringT* mannequinFragment;
    uint8_t _pad_3[0x8];
    struct DynArray_LeanConnection* connections;
    uint8_t _pad_4[0x28];
};




struct LogoutComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_LogoutInteractionParams* logoutInteractions;
    uint8_t _pad_1[0x28];
};




struct EAObjectiveInteractableComponentDef {
    uint8_t _pad_0[0x18];
    struct DynArray_EAObjectiveInteractionDef* interactions;
    uint8_t _pad_1[0x28];
    float cooldownTime;
    int32_t phase;
    _Bool onInitDefaultActive;
    uint8_t _pad_2[0x7];
    struct CLocIdentifier* name;
};




struct QuantumMusicParams {
    uint8_t _pad_0[0x8];
    struct DynArray_QuantumDriveStateMusicMap* stateMap;
    uint8_t _pad_1[0x28];
    struct DynArray_QuantumStateMusicMap* stateMapNew;
    uint8_t _pad_2[0x28];
    struct QuantumEffectMusic* effectMusic;
    uint8_t _pad_3[0x1c0];
    struct DynArray_QuantumMusicTripCategory* tripCategory;
    uint8_t _pad_4[0x28];
    float preArrivalDurationSecs;
    uint8_t _pad_5[0x4];
    struct QuantumMusicEventBase* preArrivalMusicEvent;
    uint8_t _pad_6[0x38];
    struct AudioRtpc* journeyProgressRTPC;
    uint8_t _pad_7[0x18];
    struct QuantumMusicEventBase* onStopUseMusicEvent;
    uint8_t _pad_8[0x38];
    _Bool enableMusic;
    uint8_t _pad_9[0x7];
    struct DynArray_QuantumDriveLocTypeMusicMap* locationTypeMap;
    uint8_t _pad_10[0x28];
};




struct InfractionSet {
    uint8_t _pad_0[0x8];
    struct DynArray_Infraction* infractions;
    uint8_t _pad_1[0x28];
};




struct SCItemSuitArmorParams {
    uint8_t _pad_0[0x18];
    struct DamageResistanceMacro* damageResistance;
    uint8_t _pad_1[0x10];
    struct DynArray_BodyPart* protectedBodyParts;
    uint8_t _pad_2[0x28];
    struct WearMovementMultipliers* wearMovementMultipliers;
    uint8_t _pad_3[0x10];
    struct FoleyFootstepDefinition* automaticFootstepDef;
    uint8_t _pad_4[0x10];
    struct FoleyFootstepDefinition* automaticFootstepDefNLPC;
    uint8_t _pad_5[0x10];
    struct FoleyFootstepDefinition* foleyDef;
    uint8_t _pad_6[0x10];
    struct FoleyFootstepDefinition* foleyDefNLPC;
    uint8_t _pad_7[0x10];
    struct FoleySuitAmbienceDefinition* suitAmbienceDef;
    uint8_t _pad_8[0x10];
    struct CryStringT* hitEffectLibName;
    uint8_t _pad_9[0x8];
    struct CryStringT* remoteHitEffectLibName;
    uint8_t _pad_10[0x8];
    struct ActorAimLimits* actorAimLimits;
    uint8_t _pad_11[0x10];
    struct DynArray_ItemSuitArmorSignatureParams* signatureParams;
    uint8_t _pad_12[0x28];
    struct MoveViewRestrictionPenalty* restrictedMoveViewPenalty;
    uint8_t _pad_13[0x10];
};




struct CtxGraph_Context {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_CtxGraph_Component* components;
    uint8_t _pad_2[0x28];
    struct DynArray_CtxGraph_Dependency* dependencies;
    uint8_t _pad_3[0x28];
};




struct UIGraph_Context {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_CtxGraph_Component* components;
    uint8_t _pad_2[0x28];
    struct DynArray_CtxGraph_Dependency* dependencies;
    uint8_t _pad_3[0x30];
    struct UIGraph_ControllerComponent* UIController;
    uint8_t _pad_4[0x8];
    enum ARDataType renderTarget;
    uint8_t _pad_5[0x3];
    enum ARDataType BackBehavior;
};




struct MissionStringVariants {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionStringVariant* variants;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_BindingsStringFromIntegerSwitch {
    uint8_t _pad_0[0x50];
    struct BuildingBlocks_BindingsStringBase* defaultOverride;
    uint8_t _pad_1[0x8];
    struct CryStringT* defaultValue;
    uint8_t _pad_2[0x8];
    struct DynArray_BuildingBlocks_IntegerStringPair* values;
    uint8_t _pad_3[0x28];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_4[0x8];
};




struct DefaultActionsEntityEntryCondition_AND {
    uint8_t _pad_0[0x8];
    struct DynArray_DefaultActionsEntityEntryCondition* conditions;
    uint8_t _pad_1[0x28];
};




struct DefaultActionsEntityEntryCondition_OR {
    uint8_t _pad_0[0x8];
    struct DynArray_DefaultActionsEntityEntryCondition* conditions;
    uint8_t _pad_1[0x28];
};




struct DefaultActionsEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* description;
    uint8_t _pad_1[0x8];
    struct DynArray_DefaultActionsEntityEntryCondition* conditions;
    uint8_t _pad_2[0x28];
    struct DefaultActions* defaultActions;
    uint8_t _pad_3[0x30];
};




struct SWeaponActionAimSimpleParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    float zoomScale;
    float zoomTime;
    _Bool toggleZoomOverride;
    uint8_t _pad_10[0x7];
    struct SWeaponAimDofSettings* dofSettings;
    uint8_t _pad_11[0x8];
    struct SWeaponModifierParams* aimModifier;
    uint8_t _pad_12[0x8];
    struct SWeaponGeometryTagsParams* aimGeometryTags;
    uint8_t _pad_13[0x8];
    struct DynArray_SMannequinTagParams* mannequinTags;
    uint8_t _pad_14[0x28];
    struct AudioRtpc* aimRTPC;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* aimStart;
    uint8_t _pad_16[0x18];
    struct GlobalResourceAudio* aimStop;
    uint8_t _pad_17[0x18];
    struct AudioRtpc* timeSinceLastAimStartRtpc;
    uint8_t _pad_18[0x18];
    struct AudioRtpc* timeSinceLastAimStopRtpc;
    uint8_t _pad_19[0x18];
    struct AudioRtpc* timeSinceLastZoomInRtpc;
    uint8_t _pad_20[0x18];
    struct AudioRtpc* timeSinceLastZoomOutRtpc;
    uint8_t _pad_21[0x18];
    struct Tag* glintTag;
    uint8_t _pad_22[0x10];
};




struct ActorStanceDimensions {
    uint8_t _pad_0[0x8];
    float heightCollider;
    float groundContactEps;
    struct Vec2* groundTraceSpreadSizes;
    uint8_t _pad_1[0x8];
    struct Vec3* pivot;
    uint8_t _pad_2[0x10];
    struct Vec3* size;
    uint8_t _pad_3[0x10];
    struct Vec3* capsuleAxis;
    uint8_t _pad_4[0x10];
    struct Vec3* viewOffset;
    uint8_t _pad_5[0x10];
    struct Vec3* weaponOffset;
    uint8_t _pad_6[0x10];
    struct Vec3* headStabilization;
    uint8_t _pad_7[0x10];
    enum ARDataType upAlignMode;
    uint8_t _pad_8[0x4];
    struct DynArray_SActorStanceDimensionsExtraDef* extraDefs;
    uint8_t _pad_9[0x28];
};




struct mobiGlasAppTable {
    uint8_t _pad_0[0x8];
    struct DynArray_mobiGlasAppRef* mobiGlasAppRefs;
    uint8_t _pad_1[0x28];
};




struct Stat {
    uint8_t _pad_0[0x8];
    struct Tag* statTag;
    uint8_t _pad_1[0x10];
    float minimumValue;
    uint8_t _pad_2[0x4];
    struct DynArray_StatInfluence* influences;
    uint8_t _pad_3[0x28];
};




struct SubsumptionPlatformComponentParams {
    uint8_t _pad_0[0x18];
    struct MissionLocationParams* missionLocation;
    uint8_t _pad_1[0x8];
    struct DynArray_MissionLocationParams* additionalLocations;
    uint8_t _pad_2[0x28];
};




struct SCharacterCustomizerTextureList {
    uint8_t _pad_0[0x8];
    struct DynArray_SCharacterCustomizerTextureParams* textures;
    uint8_t _pad_1[0x28];
};




struct SCItemSeatParams {
    uint8_t _pad_0[0x18];
    struct OperatorModeAvailabilityParams* availableOperatorModes;
    uint8_t _pad_1[0x10];
    enum ARDataType seatType;
    uint8_t _pad_2[0x4];
    struct CryStringT* controlTemplate;
    uint8_t _pad_3[0x8];
    struct CryStringT* transitionTemplate;
    uint8_t _pad_4[0x8];
    float minYaw;
    float maxYaw;
    float minPitch;
    float maxPitch;
    _Bool setYawPitchLimits;
    uint8_t _pad_5[0x7];
    struct CryStringT* dashboardAnimationDatabase;
    uint8_t _pad_6[0x8];
    struct CryStringT* dashboardScopeContext;
    uint8_t _pad_7[0x8];
    struct CryStringT* userAnimationDatabase;
    uint8_t _pad_8[0x8];
    struct CryStringT* userScopeContext;
    uint8_t _pad_9[0x8];
    struct CryStringT* userSyncedScopeContext;
    uint8_t _pad_10[0x8];
    struct CryStringT* vehicleFragmentOverride;
    uint8_t _pad_11[0x8];
    struct CryStringT* vehicleScopeContext;
    uint8_t _pad_12[0x8];
    _Bool useSyncedEnslavement;
    _Bool useAnimationBasedTransition;
    _Bool supportPlayerAnimatedActions;
    _Bool allowRelaxedPose;
    _Bool allowDeadOrUnconscious;
    _Bool keepUserControlContextActive;
    uint8_t _pad_13[0x2];
    struct SCSeatActorAttachmentParams* actorAttachment;
    uint8_t _pad_14[0x20];
    struct DynArray_Camera* views;
    uint8_t _pad_15[0x28];
    struct DynArray_Camera* QTViews;
    uint8_t _pad_16[0x28];
    struct Camera* landingView;
    uint8_t _pad_17[0x10];
    struct SeatAdsDef* adsOverwriteRecord;
    uint8_t _pad_18[0x10];
    struct AdsCameraParams* adsCameraOverride;
    uint8_t _pad_19[0x8];
    struct SuggestedFOVSetup* seatFOV;
    uint8_t _pad_20[0x10];
    struct SCItemSeatEjectParams* ejection;
    uint8_t _pad_21[0x8];
    struct SSharedInteractionParams* usableInteraction;
    uint8_t _pad_22[0x8];
    struct SSharedInteractionParams* enterDefaultModeInteraction;
    uint8_t _pad_23[0x8];
    struct SSharedInteractionParams* enterScanModeInteraction;
    uint8_t _pad_24[0x8];
    struct SSharedInteractionParams* enterQuantumModeInteraction;
    uint8_t _pad_25[0x8];
    struct SCSeatHeadPosAdjustSetup* fpHeadAdjustmentRecord;
    uint8_t _pad_26[0x10];
    struct ActorLookAheadVehicle* lookAheadOverwriteRecord;
    uint8_t _pad_27[0x10];
    struct ActorGForceHeadBob* gforceHeadBobOverwriteRecord;
    uint8_t _pad_28[0x10];
    struct ActorGForceCameraEffects* gforceCameraEffectsOverwriteRecord;
    uint8_t _pad_29[0x10];
    struct SCItemSeatHeadTrackingPositionLimitParams* headTrackingPositionLimitOverwriteRecord;
    uint8_t _pad_30[0x10];
    struct ArmorMoveViewRestrictions* armorMoveViewRestrictions;
    uint8_t _pad_31[0x10];
    struct SeatUserActorCDIKRecord* userCDIKRecord;
    uint8_t _pad_32[0x10];
    struct GlobalResourceAudio* enterAdsAudioTrigger;
    uint8_t _pad_33[0x18];
    struct GlobalResourceAudio* exitAdsAudioTrigger;
    uint8_t _pad_34[0x18];
};




struct SSCLocalPlayerCameraComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_Camera* views;
    uint8_t _pad_1[0x28];
};




struct SEntityComponentZoneCamerasParams {
    uint8_t _pad_0[0x18];
    struct DynArray_Camera* views;
    uint8_t _pad_1[0x28];
    struct DynArray_Camera* QTViews;
    uint8_t _pad_2[0x28];
};




struct IndividualPortRefillData {
    uint8_t _pad_0[0x8];
    struct DynArray_PortRefillData* portRefillData;
    uint8_t _pad_1[0x28];
};




struct SS42Spawning {
    uint8_t _pad_0[0x18];
    float respawnTimeKilled;
    _Bool pressXToRespawn;
    _Bool allowForceRespawnSuicide;
    uint8_t _pad_1[0x2];
    struct SCustomizableMaterialLookupTable* customizableMaterialsLookupTable;
    uint8_t _pad_2[0x10];
    struct DynArray_SPlayerLoadoutOverride* loadoutOverrides;
    uint8_t _pad_3[0x28];
    struct CryStringT* defaultPlayerCharacterMale;
    uint8_t _pad_4[0x8];
    struct CryStringT* defaultPlayerCharacterFemale;
    uint8_t _pad_5[0x8];
};




struct FiringRangeScenarioDef {
    uint8_t _pad_0[0x8];
    struct DynArray_SecurityClearanceToken* tokensToBecomeAvailable;
    uint8_t _pad_1[0x28];
    struct SecurityClearanceToken* tokenGrantedUponCompletion;
    uint8_t _pad_2[0x10];
    float timeAllowed;
    float countdownTime;
    _Bool enforceWeaponType;
    uint8_t _pad_3[0x7];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* successMessageTitle;
    struct CLocIdentifier* successMessageBody;
    struct CLocIdentifier* unlockMessage;
    struct CLocIdentifier* failureMessage;
    _Bool autoEndScenario;
    uint8_t _pad_4[0x7];
    struct DynArray_FiringRangeTimeEntry* defaultLeaderboardTimes;
    uint8_t _pad_5[0x28];
};




struct SActorForceReactionMovementLaunchConfig {
    uint8_t _pad_0[0x8];
    float minDistance;
    float maxDistance;
    struct DynArray_SActorForceReactionFlightDurationConfig* durations;
    uint8_t _pad_1[0x28];
};




struct SLinkedInteractionStateChangedStateModifier {
    uint8_t _pad_0[0x8];
    struct SEntityContextBase* context;
    uint8_t _pad_1[0x8];
    struct DynArray_SLinkedInteractionStateTags* onChangeStateTagStates;
    uint8_t _pad_2[0x28];
    struct SInteractionState* nullEntityState;
    uint8_t _pad_3[0x8];
};




struct AINavigationDynamicTriggerComponent {
    uint8_t _pad_0[0x18];
    struct DynArray_NavigationTriggerAdapter* adapters;
    uint8_t _pad_1[0x28];
};




struct Flash_Palette {
    uint8_t _pad_0[0x8];
    struct DynArray_Flash_PaletteEntry* Entries;
    uint8_t _pad_1[0x28];
};




struct SMobiGlasAppDataPacketEmbedded {
    uint8_t _pad_0[0x8];
    struct DynArray_MobiGlasAppDataBase* data;
    uint8_t _pad_1[0x28];
};




struct MapDisplayParamsStarMap {
    uint8_t _pad_0[0x8];
    struct DynArray_MarkerTrackingViewMode* viewModes;
    uint8_t _pad_1[0x28];
    struct BuildingBlocks_Canvas* uiElementsCanvasGUID;
    uint8_t _pad_2[0x10];
    float displayRegionHeightPixels;
    uint8_t _pad_3[0x4];
};




struct SMisfireFunctionalityCondition {
    uint8_t _pad_0[0x8];
    float functionalityMin;
    float minTimeForTrigger;
    float meanTimeForCondition;
    uint8_t _pad_1[0x4];
    struct DynArray_SMisfireEffect* misfireArray;
    uint8_t _pad_2[0x28];
};




struct SMisfireProbabilityParams {
    uint8_t _pad_0[0x8];
    float weight;
    uint8_t _pad_1[0x4];
    struct DynArray_SMisfireEffect* misfireArray;
    uint8_t _pad_2[0x28];
};




struct SMisfireMeanTimeCondition {
    uint8_t _pad_0[0x8];
    float minDegradation;
    float meanTimeBetweenMisfire;
    struct DynArray_SMisfireEffect* misfireArray;
    uint8_t _pad_1[0x28];
};




struct SMisfireCriticalItemStateCondition {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* criticalConditions;
    uint8_t _pad_1[0x28];
    struct DynArray_SMisfireEffect* misfireArray;
    uint8_t _pad_2[0x28];
};




struct CarryConfig {
    uint8_t _pad_0[0x8];
    struct ThrowParams* overArmThrow;
    uint8_t _pad_1[0x10];
    struct ThrowParams* underArmThrow;
    uint8_t _pad_2[0x10];
    struct ThrowParams* twoHandedThrow;
    uint8_t _pad_3[0x10];
    struct ItemCarryParams* carry;
    uint8_t _pad_4[0x8];
    float reloadRummageDuration;
    float EVAHandReachPlaceDistance;
    struct DynArray_SActorCarryConfigTagSwitch* tagSwitches;
    uint8_t _pad_5[0x28];
    struct Vec3* dropHeldItemHandOffset;
    uint8_t _pad_6[0x10];
    struct Vec3* dropEquippedItemHandOffset;
    uint8_t _pad_7[0x10];
};




struct ResourceNetworkPowerPoolSetup {
    uint8_t _pad_0[0x8];
    struct DynArray_PowerPool* itemPools;
    uint8_t _pad_1[0x28];
    _Bool maxDefaultDistribution;
    uint8_t _pad_2[0x7];
};




struct Formation {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_FormationOffset* offsets;
    uint8_t _pad_2[0x28];
    struct PlayerFormationParams* playerFormationParams;
    uint8_t _pad_3[0x28];
    struct Tag* formationTag;
    uint8_t _pad_4[0x10];
};




struct MissionFlowCondition_OR {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionFlowConditionBase* conditions;
    uint8_t _pad_1[0x28];
};




struct MissionFlowCondition_AND {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionFlowConditionBase* conditions;
    uint8_t _pad_1[0x28];
};




struct DefaultActionsEntityState_OR {
    uint8_t _pad_0[0x8];
    struct DynArray_DefaultActionsEntityState* states;
    uint8_t _pad_1[0x28];
};




struct DefaultActionsEntityState_AND {
    uint8_t _pad_0[0x8];
    struct DynArray_DefaultActionsEntityState* states;
    uint8_t _pad_1[0x28];
};




struct InteractiveVariable_BackToDefaultFloatParams {
    uint8_t _pad_0[0x8];
    float waitTime;
    uint8_t _pad_1[0x4];
    struct DynArray_ControlFloatInteractiveVariable* controlVariables;
    uint8_t _pad_2[0x28];
};




struct SJumpTunnelSectionGenerationParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    float defaultSectionLength;
    uint8_t _pad_2[0x4];
    struct DynArray_SJumpTunnelSectionControlPointGenerationParams* controlPoints;
    uint8_t _pad_3[0x28];
    struct DynArray_SJumpTunnelSectionProbabilityParams* nextSectionProbabilities;
    uint8_t _pad_4[0x28];
    float chanceOfObstacles;
    uint8_t _pad_5[0x4];
    struct Range* numberOfObstacles;
    uint8_t _pad_6[0x8];
    struct SJumpTunnelObstacleGenerationParams* obstacleGeneration;
    uint8_t _pad_7[0x30];
    struct SJumpTunnelEllipticalParams* ellipticalParams;
    uint8_t _pad_8[0x138];
};




struct DialogueBundleWeightedEmbedded {
    uint8_t _pad_0[0x8];
    _Bool usePooling;
    uint8_t _pad_1[0x17];
    struct DynArray_WeightedDialogueBundleEntry* dialogueEntries;
    uint8_t _pad_2[0x28];
};




struct SEntrancesDef {
    uint8_t _pad_0[0x8];
    struct Vec3* boundingBoxScale;
    uint8_t _pad_1[0x10];
    struct Vec3* boundingBoxOffset;
    uint8_t _pad_2[0x10];
    struct DynArray_SCEntranceItem* entranceArray;
    uint8_t _pad_3[0x28];
};




struct SSequencerSequenceTaskEntryParams {
    uint8_t _pad_0[0x8];
    struct SSequencerDefTaskParams* task;
    uint8_t _pad_1[0x8];
    float postDelay;
    uint8_t _pad_2[0x4];
    struct DynArray_SSequencerDefTaskParams* dependentTasks;
    uint8_t _pad_3[0x28];
    _Bool haltOnFailure;
    uint8_t _pad_4[0x7];
};




struct SMusicComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SMusicEventTagMap* events;
    uint8_t _pad_1[0x28];
    struct DynArray_SMusicValueTagMap* values;
    uint8_t _pad_2[0x28];
    struct DynArray_SMusicTagBehaviour* tagBehaviours;
    uint8_t _pad_3[0x28];
};




struct SStarGalaStageParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SStarGalaWaveParams* waves;
    uint8_t _pad_1[0x28];
};




struct PersonalInnerThoughtActionRulePreset {
    uint8_t _pad_0[0x8];
    struct DynArray_ActionRuleParams* rules;
    uint8_t _pad_1[0x28];
};




struct ActionRuleList {
    uint8_t _pad_0[0x8];
    struct InputAction* inputAction;
    uint8_t _pad_1[0x28];
    struct PersonalInnerThoughtActionRulePreset* preset;
    uint8_t _pad_2[0x10];
    struct DynArray_ActionRuleParams* ruleParams;
    uint8_t _pad_3[0x28];
};




struct UIBindingsSubsumptionComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_Bindings_SubsumptionBroadcastEvent* broadcastEvents;
    uint8_t _pad_1[0x28];
    _Bool subsumptionCallbackTrigger;
    uint8_t _pad_2[0x7];
};




struct WingmanOrderList {
    uint8_t _pad_0[0x8];
    struct DynArray_WingmanOrderInfo* WingmanOrders;
    uint8_t _pad_1[0x28];
};




struct SPowerUserStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SPowerUserState* powerUserStates;
    uint8_t _pad_1[0x28];
};




struct SOnInteractionStateChangeTriggers {
    uint8_t _pad_0[0x8];
    struct SInteractionState* targetState;
    uint8_t _pad_1[0x8];
    struct DynArray_SBaseInteractionGameplayTrigger* gameplayTriggers;
    uint8_t _pad_2[0x28];
};




struct SOnInteractionTriggers {
    uint8_t _pad_0[0x8];
    struct SSharedInteractionParams* targetInteraction;
    uint8_t _pad_1[0x8];
    struct DynArray_SBaseInteractionGameplayTrigger* gameplayTriggers;
    uint8_t _pad_2[0x28];
};




struct TransitCarriageAudio {
    uint8_t _pad_0[0x8];
    struct GlobalResourceAudio* startTriggerID;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* stopTriggerID;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* startTriggerIDOneShot;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* stopTriggerIDOneShot;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* stoppingTriggerID;
    uint8_t _pad_5[0x18];
    float maxStoppingTime;
    uint8_t _pad_6[0x4];
    struct AudioRtpc* speedRTPC;
    uint8_t _pad_7[0x18];
    struct AudioRtpc* turnRTPC;
    uint8_t _pad_8[0x18];
    float turnRTPCScaler;
    uint8_t _pad_9[0x4];
    struct DynArray_TransitNodeDialogueContext* dialogueContexts;
    uint8_t _pad_10[0x28];
};




struct SecurityNetworkVariableEffects {
    uint8_t _pad_0[0x8];
    struct SecurityNetworkVariable* variableValue;
    uint8_t _pad_1[0x28];
    struct DynArray_SecurityNetworkVariableEffect_Base* effects;
    uint8_t _pad_2[0x28];
};




struct QuantumObstacleParams {
    uint8_t _pad_0[0x18];
    struct DefaultSphereGeom* defaultSphereFieldGeometry;
    uint8_t _pad_1[0x8];
    struct DynArray_SphereFieldGeom* sphereFieldGeometries;
    uint8_t _pad_2[0x28];
    struct DynArray_BoxFieldGeom* boxFieldGeometries;
    uint8_t _pad_3[0x28];
    struct DynArray_CylinderFieldGeom* cylinderFieldGeometries;
    uint8_t _pad_4[0x28];
    struct DynArray_CapsuleFieldGeom* capsuleFieldGeometries;
    uint8_t _pad_5[0x28];
    struct DynArray_TorusFieldGeom* torusFieldGeometries;
    uint8_t _pad_6[0x28];
    struct DynArray_MeshFieldGeom* meshFieldGeometries;
    uint8_t _pad_7[0x28];
    struct DynArray_Texture3DFieldGeom* texture3DFieldGeometries;
    uint8_t _pad_8[0x28];
};




struct GenericDataDisplayAppData {
    uint8_t _pad_0[0x8];
    struct DateTime* dateTime;
    uint8_t _pad_1[0x30];
    struct DynArray_MobiGlasAppContent* content;
    uint8_t _pad_2[0x28];
    struct SecurityClearanceToken* securityToken;
    uint8_t _pad_3[0x10];
};




struct MobiGlasPersonalMessage_Message {
    uint8_t _pad_0[0x8];
    struct DateTime* dateTime;
    uint8_t _pad_1[0x30];
    struct CLocIdentifier* senderName;
    struct CLocIdentifier* subject;
    struct DynArray_MobiGlasAppContent* content;
    uint8_t _pad_2[0x28];
    struct CryStringT* displayIcon;
    uint8_t _pad_3[0x8];
};




struct EntityClassMigration {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* Source;
    uint8_t _pad_1[0x10];
    struct EntityClassDefinition* Target;
    uint8_t _pad_2[0x10];
    struct DynArray_ComponentMigration* Components;
    uint8_t _pad_3[0x28];
    enum ARDataType Validation;
    uint8_t _pad_4[0x4];
};




struct ActorAimLimits {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorAimLimitsStateFilter* aimLimitsStateFilters;
    uint8_t _pad_1[0x28];
};




struct ChatCommandFastAccess {
    uint8_t _pad_0[0x8];
    struct DynArray_ChatCommandName* commands;
    uint8_t _pad_1[0x28];
};




struct AnimationJointMovement {
    uint8_t _pad_0[0x8];
    struct CryStringT* joint;
    uint8_t _pad_1[0x8];
    struct DynArray_AnimationJointBaseRotation* rotations;
    uint8_t _pad_2[0x28];
    struct DynArray_AnimationJointBaseTranslation* translations;
    uint8_t _pad_3[0x28];
};




struct MeleeAttackCombo {
    uint8_t _pad_0[0x8];
    struct DynArray_MeleeComboChainLink* comboChain;
    uint8_t _pad_1[0x28];
    float cooldown;
    uint8_t _pad_2[0x4];
};




struct SBeamEffectParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* helper;
    uint8_t _pad_1[0x8];
    _Bool killParticlesOnDeactivate;
    uint8_t _pad_2[0x7];
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_3[0x10];
    struct GlobalResourceParticle* thirdPersonParticleEffect;
    uint8_t _pad_4[0x10];
    enum ARDataType modifierSource;
    float startPointStrength;
    float endPointStrength;
    _Bool useMultiSpline;
    uint8_t _pad_5[0x3];
    float multiSplineOffset;
    uint8_t _pad_6[0x4];
    struct RGB* tintColor;
    uint8_t _pad_7[0x8];
    struct DynArray_SBeamParticleAudioParams* particleAudioParams;
    uint8_t _pad_8[0x28];
};




struct InnerThought_Params {
    uint8_t _pad_0[0x8];
    float fontSize;
    _Bool radialSelection;
    _Bool loopedSelection;
    _Bool useDepthTest;
    uint8_t _pad_1[0x1];
    struct DynArray_InnerThought_LayoutStates* states;
    uint8_t _pad_2[0x28];
    struct InnerThought_Anim* stateAnim;
    uint8_t _pad_3[0x10];
    struct InnerThought_Anim* selectionAnim;
    uint8_t _pad_4[0x10];
};




struct BlueprintCategoryDatabaseRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_BlueprintCategoryRecord* categories;
    uint8_t _pad_1[0x28];
};




struct BlueprintCategoryAvailability_Whitelist {
    uint8_t _pad_0[0x8];
    struct DynArray_BlueprintCategoryRecord* categories;
    uint8_t _pad_1[0x28];
};




struct PlayerShipRespawn {
    uint8_t _pad_0[0x8];
    struct DynArray_PlayerShipRespawnShipInfo* Ships;
    uint8_t _pad_1[0x28];
};




struct SWeaponActionFireHealingBeamParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* localisedName;
    struct SMannequinTagParams* mannequinTag;
    uint8_t _pad_2[0x18];
    struct Tag* entityTag;
    uint8_t _pad_3[0x10];
    struct TagList* entityTags;
    uint8_t _pad_4[0x30];
    struct Tag* uiBindingsTag;
    uint8_t _pad_5[0x10];
    enum ARDataType aiShootingMode;
    uint8_t _pad_6[0x7];
    struct GlobalResourceAudio* switchFireModeAudioTrigger;
    uint8_t _pad_7[0x18];
    struct SWeaponConditionBase* selectableCondition;
    uint8_t _pad_8[0x8];
    _Bool hasReloadModesOnUI;
    uint8_t _pad_9[0x7];
    enum ARDataType healingMode;
    _Bool externalHealingMode;
    uint8_t _pad_10[0x3];
    struct CryStringT* fireHelper;
    uint8_t _pad_11[0x8];
    _Bool toggle;
    uint8_t _pad_12[0x3];
    float maxDistance;
    float maxSensorDistance;
    enum ARDataType medicalAmmoType;
    float mSCUPerSec;
    float ammoPerMSCU;
    float wearPerSec;
    enum ARDataType batteryAmmoType;
    float batteryDrainPerSec;
    float autoDosageTargetBDLModifier;
    float healingBreakTime;
    float maxDoseForAutoAdjustment;
    struct CryStringT* hitType;
    uint8_t _pad_13[0x8];
    struct DynArray_SHealingBeamConsumableType* consumableTypes;
    uint8_t _pad_14[0x28];
    struct WeaponProceduralRecoilConfigDef* recoil;
    uint8_t _pad_15[0x10];
    float recoilInterval;
    uint8_t _pad_16[0x4];
    struct SFragmentParams* fireFragment;
    uint8_t _pad_17[0x18];
    struct SFragmentParams* stopFireFragment;
    uint8_t _pad_18[0x18];
    struct GlobalResourceAudio* startFireOneShotAudioTrigger;
    uint8_t _pad_19[0x18];
    struct GlobalResourceAudio* startFireLoopAudioTrigger;
    uint8_t _pad_20[0x18];
    struct GlobalResourceAudio* stopFireAudioTrigger;
    uint8_t _pad_21[0x18];
    struct GlobalResourceAudio* dryFireAudioTrigger;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* timeSinceLastFireRTPC;
    uint8_t _pad_23[0x18];
    struct DynArray_SWeaponParticleEffectParams* fireEffects;
    uint8_t _pad_24[0x28];
    struct SBeamGroupParams* beamGroup;
    uint8_t _pad_25[0x8];
    struct SWeaponConditionBase* updateCondition;
    uint8_t _pad_26[0x8];
    struct AudioRtpc* isHealingRTPC;
    uint8_t _pad_27[0x18];
    struct AudioRtpc* targetPlayerHealthRTPC;
    uint8_t _pad_28[0x18];
    struct ActorStatusGlobalParams* globalActorStatusParams;
    uint8_t _pad_29[0x10];
    struct DynArray_ARDataType* abilityTypesToHideCards;
    uint8_t _pad_30[0x28];
};




struct ProceduralPlanetAudioAlgorithm {
    uint8_t _pad_0[0x10];
    struct DynArray_AudioRtpc* countRtpcs;
    uint8_t _pad_1[0x30];
};




struct ProceduralPlanetAudioAlgorithmCount {
    uint8_t _pad_0[0x10];
    struct DynArray_AudioRtpc* countRtpcs;
    uint8_t _pad_1[0x30];
};




struct ProceduralPlanetAudioAlgorithmClosestObjects {
    uint8_t _pad_0[0x10];
    struct DynArray_AudioRtpc* countRtpcs;
    uint8_t _pad_1[0x30];
    uint32_t maxInstances;
    uint8_t _pad_2[0x4];
    struct AudioRtpc* scaleRtpc;
    uint8_t _pad_3[0x18];
    struct ProceduralPlanetAudioTagAndEventsDef* definitionSingle;
    uint8_t _pad_4[0x10];
    struct ProceduralPlanetAudioTagAndEventsDef* definitionCrowd;
    uint8_t _pad_5[0x10];
    struct AudioRtpc* countCrowdRtpc;
    uint8_t _pad_6[0x18];
    _Bool crowdIsMultipoint;
    uint8_t _pad_7[0x7];
};




struct SCItemFuelNozzleParams {
    uint8_t _pad_0[0x18];
    float fuelMaxFlowMultiplier;
    float fuelTankCapacityMultiplier;
    float fuelSafeSpeed;
    float fuelSafeSpeedRN;
    float fuelDamageMultiplier;
    float waveModifier;
    float waveModifierRN;
    float frequency;
    float flowSpeedModifier;
    float fuelPodMultiplier;
    struct GlobalResourceAudio* fuelFlowLoopStartAudioTrigger;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* fuelFlowLoopStopAudioTrigger;
    uint8_t _pad_2[0x18];
    struct DynArray_AudioRtpc* fuelFlowRateAudioRtpcs;
    uint8_t _pad_3[0x28];
    struct AudioRtpc* fuelSpillAudioRtpc;
    uint8_t _pad_4[0x18];
    struct SInteractionState* stateToPowerOff;
    uint8_t _pad_5[0x8];
};




struct EntityAudioControllerRtpcSubscriberListDef {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioRtpc* rtpcs;
    uint8_t _pad_1[0x28];
};




struct SAtmosphericCompositionParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SGasAtmosphereEntryParams* gases;
    uint8_t _pad_1[0x28];
};




struct ConstantDOFWeights {
    uint8_t _pad_0[0x8];
    float maxPositionWeight;
    float NPC;
    float localPlayer;
    float entity;
    float actorLookingAtPlayer;
    float door;
    struct DynArray_ConstantDOFPosWeights* positionWeights;
    uint8_t _pad_1[0x28];
};




struct DigitalSignageContentSet {
    uint8_t _pad_0[0x8];
    struct DynArray_DigitalSignageContent* content;
    uint8_t _pad_1[0x28];
};




struct UIWorldDisplaySoundParams {
    uint8_t _pad_0[0x8];
    struct DynArray_UIWorldDisplayInputSoundParams* inputSounds;
    uint8_t _pad_1[0x28];
    struct Tag* highlightChangeEventTag;
    uint8_t _pad_2[0x10];
    struct Tag* selectionChangeEventTag;
    uint8_t _pad_3[0x10];
};




struct CommsTapManagerComponentParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* tapInteraction;
    uint8_t _pad_1[0x8];
    struct DynArray_CommsChannelDef* relevantChannels;
    uint8_t _pad_2[0x28];
};




struct SCCommsSpeakerComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_CommsChannelDef* commsChannels;
    uint8_t _pad_1[0x28];
};




struct SCCommsChannelAreaComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_CommsChannelDef* commsChannels;
    uint8_t _pad_1[0x28];
    float innerRadius;
    float outerRadius;
};




struct SCItemCommsReceiverComponentParams {
    uint8_t _pad_0[0x18];
    struct SCItemCommsComponentSetup* setup;
    uint8_t _pad_1[0x10];
    struct DynArray_CommsChannelDef* commsChannels;
    uint8_t _pad_2[0x28];
    struct CryStringT* audioCommsEffectOverride;
    uint8_t _pad_3[0x8];
};




struct SThrowableParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SThrowMode* throwModes;
    uint8_t _pad_1[0x28];
    struct CryStringT* reticle;
    uint8_t _pad_2[0x8];
    _Bool faceUpWhenSettled;
    _Bool allowHologramTiltRotation;
    uint8_t _pad_3[0x2];
    float placementRange;
    float placementRangeHysteresis;
    uint8_t _pad_4[0x4];
    struct Vec3* defaultPlacementUpDirection;
    uint8_t _pad_5[0x10];
    float yawOffset;
    _Bool applyBoundingBoxPlacementOffset;
    uint8_t _pad_6[0x3];
    struct SThrowAudioParams* audioParams;
    uint8_t _pad_7[0x68];
    _Bool combatThrowable;
    uint8_t _pad_8[0x7];
};




struct SpawnerPrerequisite_OR {
    uint8_t _pad_0[0x8];
    struct DynArray_BaseSpawnerPrerequisite* prerequisites;
    uint8_t _pad_1[0x28];
};




struct SpawnerPrerequisite_AND {
    uint8_t _pad_0[0x8];
    struct DynArray_BaseSpawnerPrerequisite* prerequisites;
    uint8_t _pad_1[0x28];
};




struct SPUSpawning {
    uint8_t _pad_0[0x18];
    float respawnTimeKilled;
    _Bool pressXToRespawn;
    _Bool allowForceRespawnSuicide;
    uint8_t _pad_1[0x2];
    struct SCustomizableMaterialLookupTable* customizableMaterialsLookupTable;
    uint8_t _pad_2[0x10];
    float prisonExitWaitTilBlackScreen;
    uint8_t _pad_3[0x4];
    struct DynArray_JournalEntry* initialJournalEntries;
    uint8_t _pad_4[0x28];
};




struct ContractResult_JournalEntry {
    uint8_t _pad_0[0x8];
    struct DynArray_bool* missionResults;
    uint8_t _pad_1[0x28];
    struct DynArray_JournalEntry* journalEntriesToAdd;
    uint8_t _pad_2[0x28];
    struct DynArray_JournalEntry* journalEntriesToRemove;
    uint8_t _pad_3[0x28];
};




struct ContractPrerequisite_JournalEntries {
    uint8_t _pad_0[0x8];
    struct DynArray_JournalEntry* requiredJournalEntries;
    uint8_t _pad_1[0x28];
};




struct EntityComponentPointOfInterestParams {
    uint8_t _pad_0[0x18];
    enum ARDataType lookAtType;
    uint8_t _pad_1[0x4];
    struct DynArray_CustomLookAtBB* customLookAtBBs;
    uint8_t _pad_2[0x28];
};




struct SCItemDoorParams {
    uint8_t _pad_0[0x18];
    _Bool UseAutoCloseDelay;
    uint8_t _pad_1[0x3];
    float AutoCloseDelay;
    float DoorAnimationSpeed;
    float BreachingDoorAnimationSpeed;
    float BreachedDoorAnimationSpeed;
    float BreachedDoorOpenAmount;
    _Bool IsOpened;
    _Bool IsLocked;
    _Bool IsIgnoredByDoorController;
    uint8_t _pad_2[0x5];
    struct SDoorCollisionReactionBaseParams* CollisionReaction;
    uint8_t _pad_3[0x8];
    enum ARDataType DestructionBehavior;
    uint8_t _pad_4[0x4];
    struct CryStringT* FragName;
    uint8_t _pad_5[0x8];
    struct SCItemDoorAnimationParams* AnimationParams;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* OpenInteraction;
    uint8_t _pad_7[0x8];
    struct SSharedInteractionParams* SecondaryOpenInteraction;
    uint8_t _pad_8[0x8];
    struct SSharedInteractionParams* OpenFinishedInteraction;
    uint8_t _pad_9[0x8];
    struct SSharedInteractionParams* CloseInteraction;
    uint8_t _pad_10[0x8];
    struct SSharedInteractionParams* CloseFinishedInteraction;
    uint8_t _pad_11[0x8];
    struct SSharedInteractionParams* ToggleInteraction;
    uint8_t _pad_12[0x8];
    struct SSharedInteractionParams* LockInteraction;
    uint8_t _pad_13[0x8];
    struct SSharedInteractionParams* UnlockInteraction;
    uint8_t _pad_14[0x8];
    struct SSharedInteractionParams* OverrideOpenInteraction;
    uint8_t _pad_15[0x8];
    struct SSharedInteractionParams* OverrideCloseInteraction;
    uint8_t _pad_16[0x8];
    struct SCItemDoorEffectParams* EffectParams;
    uint8_t _pad_17[0x150];
    struct CryStringT* OpenEffectGroup;
    uint8_t _pad_18[0x8];
    struct CryStringT* CloseEffectGroup;
    uint8_t _pad_19[0x8];
    struct CryStringT* OpenedEffectGroup;
    uint8_t _pad_20[0x8];
    struct CryStringT* ClosedEffectGroup;
    uint8_t _pad_21[0x8];
    struct CryStringT* OpeningEffectGroup;
    uint8_t _pad_22[0x8];
    struct CryStringT* ClosingEffectGroup;
    uint8_t _pad_23[0x8];
    struct CryStringT* OverrideOpenEffectGroup;
    uint8_t _pad_24[0x8];
    struct CryStringT* OverrideCloseEffectGroup;
    uint8_t _pad_25[0x8];
    struct CryStringT* OverrideOpenedEffectGroup;
    uint8_t _pad_26[0x8];
    struct CryStringT* OverrideClosedEffectGroup;
    uint8_t _pad_27[0x8];
    struct CryStringT* OverrideOpeningEffectGroup;
    uint8_t _pad_28[0x8];
    struct CryStringT* OverrideClosingEffectGroup;
    uint8_t _pad_29[0x8];
    struct CryStringT* LockedEffectGroup;
    uint8_t _pad_30[0x8];
    struct CryStringT* UnlockedEffectGroup;
    uint8_t _pad_31[0x8];
    struct SCItemDoorPortalModeParams* PortalMode;
    uint8_t _pad_32[0x8];
    struct SCItemDoorConnectVisAreas* ConnectVisAreas;
    uint8_t _pad_33[0x8];
    struct DynArray_SSequencerItemDoorTaskParams* DoorTasks;
    uint8_t _pad_34[0x28];
    struct ItemResourceState* idleState;
    uint8_t _pad_35[0x8];
    struct ItemResourceState* activeState;
    uint8_t _pad_36[0x8];
};




struct SActorStaticColliderDeathBehaviour {
    uint8_t _pad_0[0x8];
    struct EntityClassDefinition* deadColliderClass;
    uint8_t _pad_1[0x10];
    struct DynArray_SActorDeathPoseVariant* deathPoseVariants;
    uint8_t _pad_2[0x28];
};




struct ControlHintDef {
    uint8_t _pad_0[0x8];
    struct CryStringT* description;
    uint8_t _pad_1[0x8];
    struct ControlHintCondition* condition;
    uint8_t _pad_2[0x8];
    struct ControlHintAlwaysDisplayCondition* alwaysDisplayCondition;
    uint8_t _pad_3[0x8];
    struct DynArray_ControlHint_DisplayInfoSet* hintDisplayInfoSet;
    uint8_t _pad_4[0x28];
};




struct ExtendedNameEntryTextConcatenateOptions {
    uint8_t _pad_0[0x8];
    struct DynArray_ExtendedNameEntryTextBase* options;
    uint8_t _pad_1[0x28];
};




struct ExtendedNameEntryTextRandomizedOptions {
    uint8_t _pad_0[0x8];
    struct DynArray_ExtendedNameEntryTextBase* options;
    uint8_t _pad_1[0x28];
};




struct RadarSystemSharedParams {
    uint8_t _pad_0[0x8];
    uint32_t paramsVersion;
    uint8_t _pad_1[0x4];
    struct DynArray_float* focusAngles;
    uint8_t _pad_2[0x28];
    struct RadarSharedParams* radarParams;
    uint8_t _pad_3[0x8];
    struct ScanSharedParams* scanParams;
    uint8_t _pad_4[0x8];
    struct PingSharedParams* pingParams;
    uint8_t _pad_5[0x8];
    struct ContactHighlightSharedParams* highlightParams;
    uint8_t _pad_6[0x8];
    struct ContactTaggingSharedParams* taggingParams;
    uint8_t _pad_7[0x8];
    struct OcclusionCheckSharedParams* occlusionParams;
    uint8_t _pad_8[0x8];
    _Bool displayRadarContactMarkers;
    uint8_t _pad_9[0x7];
    struct RadarJammerSharedParams* radarJammerParams;
    uint8_t _pad_10[0x8];
    struct DynArray_RadarDeltaSignatureDetectionParams* deltaSignatureDetectionParams;
    uint8_t _pad_11[0x28];
    struct DynArray_DeltaSignatureSpikeParams* deltaSignatureBaseSpike;
    uint8_t _pad_12[0x28];
    struct DynArray_DeltaSignatureSensitivityParams* deltaSignatureSensitivityParams;
    uint8_t _pad_13[0x28];
};




struct StringUserVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* defaultValue;
    uint8_t _pad_2[0x8];
    struct RecordRefUserVariableTypeBase* recordRefValue;
    uint8_t _pad_3[0x8];
    struct DynArray_StringUserVariableTask* tasks;
    uint8_t _pad_4[0x28];
};




struct BindingsOperations_StringFromIntegerSwitchFontStyle {
    uint8_t _pad_0[0x50];
    struct DynArray_BindingsOperations_IntegerStringFontStylePair* values;
    uint8_t _pad_1[0x28];
    struct BuildingBlocks_FontStyle* defaultValue;
    uint8_t _pad_2[0x10];
    struct BuildingBlocks_BindingsIntegerBase* input;
    uint8_t _pad_3[0x8];
};




struct MusicLogicIncrement {
    uint8_t _pad_0[0x8];
    struct DynArray_MusicLogicNode* children;
    uint8_t _pad_1[0x28];
    struct MusicLogicParameter* parameter;
    uint8_t _pad_2[0x10];
    float value;
    uint8_t _pad_3[0x4];
};




struct GreaterThan {
    uint8_t _pad_0[0x8];
    struct DynArray_MusicLogicNode* children;
    uint8_t _pad_1[0x28];
    struct MusicLogicParameter* parameter;
    uint8_t _pad_2[0x10];
    float value;
    uint8_t _pad_3[0x4];
};




struct MusicEventResponse {
    uint8_t _pad_0[0x8];
    struct DynArray_MusicLogicNode* children;
    uint8_t _pad_1[0x28];
    struct MusicLogicEvent* musicEvent;
    uint8_t _pad_2[0x10];
};




struct MusicLogicCondition {
    uint8_t _pad_0[0x8];
    struct DynArray_MusicLogicNode* children;
    uint8_t _pad_1[0x28];
};




struct ParentMusicLogicNode {
    uint8_t _pad_0[0x8];
    struct DynArray_MusicLogicNode* children;
    uint8_t _pad_1[0x28];
};




struct MusicLogicSuite {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_MusicLogicNode* nodes;
    uint8_t _pad_2[0x28];
    struct MusicLogicConfig* musicLogicConfig;
    uint8_t _pad_3[0x10];
};




struct CameraShopConfig {
    uint8_t _pad_0[0x8];
    struct Vec3* initialPositionOffset;
    uint8_t _pad_1[0x10];
    struct DynArray_CameraShopItemOffset* itemOffsets;
    uint8_t _pad_2[0x28];
    float minVerticalRotationAngle;
    float maxVerticalRotationAngle;
    float minHorizontalRotationAngle;
    float maxHorizontalRotationAngle;
    float inTranslationSpeed;
    float outTranslationSpeed;
    float inRotationSpeed;
    float outRotationSpeed;
    float rotationSpeed;
    float zoomMin;
    float zoomMax;
    float zoomSpeed;
    float twirlSpeed;
    float timeToActivateTwirl;
};




struct SCIGTestBB {
    uint8_t _pad_0[0x8];
    _Bool bBase;
    uint8_t _pad_1[0x7];
    _Bool bB;
    uint8_t _pad_2[0x7];
    struct DynArray_bool* bBBs;
    uint8_t _pad_3[0x28];
    struct DynArray_float* nBBs;
    uint8_t _pad_4[0x28];
    struct DynArray_SCIGTestBase* osBBTestBases;
    uint8_t _pad_5[0x28];
};




struct SUsableAnimationParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* FragmentId;
    uint8_t _pad_1[0x8];
    struct CryStringT* FragmentTag;
    uint8_t _pad_2[0x8];
    struct DynArray_SUsableMovementAlignmentParams* UsableMovementAlignmentSlots;
    uint8_t _pad_3[0x28];
};




struct SMFDView {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct BuildingBlocks_Canvas* landscapeCanvas;
    uint8_t _pad_1[0x10];
    struct DynArray_SManufacturerMFDView* landscapeCanvasStyleOverride;
    uint8_t _pad_2[0x28];
    _Bool castsUsePortrait;
    uint8_t _pad_3[0x7];
    struct BuildingBlocks_Canvas* portraitCanvas;
    uint8_t _pad_4[0x10];
    struct DynArray_SManufacturerMFDView* portraitCanvasStyleOverride;
    uint8_t _pad_5[0x28];
    enum ARDataType viewType;
    uint8_t _pad_6[0x4];
    struct CryStringT* urlpostfix;
    uint8_t _pad_7[0x8];
};




struct EntityComponentAttachableModifierParams {
    uint8_t _pad_0[0x18];
    struct DynArray_BaseItemModifierParams* modifiers;
    uint8_t _pad_1[0x28];
    enum ARDataType activationMethod;
    uint8_t _pad_2[0x4];
    struct SSharedInteractionParams* activationInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* deactivationInteraction;
    uint8_t _pad_4[0x8];
    int32_t charges;
    _Bool canInterrupt;
    _Bool isInterruptible;
    uint8_t _pad_5[0x2];
    struct CryStringT* icon;
    uint8_t _pad_6[0x8];
};




struct ItemportTraversingModifiersParams {
    uint8_t _pad_0[0x8];
    struct ItemModifierLifetime* modifierLifetime;
    uint8_t _pad_1[0x8];
    enum ARDataType targetItemType;
    enum ARDataType targetSubType;
    struct DynArray_BaseItemModifierParams* modifiers;
    uint8_t _pad_2[0x28];
};




struct MotionTurnSetupList {
    uint8_t _pad_0[0x8];
    struct DynArray_MotionTurnSetupFiltered* setupList;
    uint8_t _pad_1[0x28];
};




struct MedBedTierParams {
    uint8_t _pad_0[0x8];
    enum ARDataType medBedTier;
    _Bool canRespawnHere;
    uint8_t _pad_1[0x3];
    struct DynArray_DrugEfficacyForConsumableType* drugEfficacyForConsumableTypes;
    uint8_t _pad_2[0x28];
};




struct DrugEfficacyForItemSubType {
    uint8_t _pad_0[0x8];
    struct DynArray_DrugEfficacyForConsumableType* drugEfficacyForItemSubType;
    uint8_t _pad_1[0x28];
};




struct ChatFilterOptions {
    uint8_t _pad_0[0x8];
    struct DynArray_ChatFilter* options;
    uint8_t _pad_1[0x28];
};




struct WorldDisplayEnvironment {
    uint8_t _pad_0[0x8];
    struct DynArray_WorldDisplayEnvironmentBase* environments;
    uint8_t _pad_1[0x28];
};




struct GlobalShopBuyingParams {
    uint8_t _pad_0[0x8];
    uint32_t tutorialItemBuyLimitPerHour;
    uint8_t _pad_1[0x4];
    struct DynArray_LicensedItemModifier* licensedItemModifiers;
    uint8_t _pad_2[0x28];
};




struct ContractAvailability {
    uint8_t _pad_0[0x8];
    struct DynArray_ContractPrerequisiteBase* prerequisites;
    uint8_t _pad_1[0x28];
    _Bool notifyOnAvailable;
    uint8_t _pad_2[0x3];
    int32_t maxPlayersPerInstance;
    _Bool onceOnly;
    _Bool availableInPrison;
    _Bool canReacceptAfterAbandoning;
    uint8_t _pad_3[0x1];
    float abandonedCooldownTime;
    float abandonedCooldownTimeVariation;
    _Bool canReacceptAfterFailing;
    _Bool hasPersonalCooldown;
    uint8_t _pad_4[0x2];
    float personalCooldownTime;
    float personalCooldownTimeVariation;
};




struct SRewardGeneratorComponentParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* selectRandomRewardInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* claimInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* retrieveInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* cleanupInteraction;
    uint8_t _pad_4[0x8];
    _Bool allowCleanupInSameRevolution;
    uint8_t _pad_5[0x7];
    struct MissionScenario* missionScenario;
    uint8_t _pad_6[0x10];
    struct DynArray_SWeightedRewardEntry* rewardPool;
    uint8_t _pad_7[0x28];
};




struct SCLinkedInteractiveControllerParams {
    uint8_t _pad_0[0x18];
    struct DynArray_IntInteractiveVariable* ints;
    uint8_t _pad_1[0x28];
    struct DynArray_ControlIntInteractiveVariable* controlIntVariables;
    uint8_t _pad_2[0x28];
    struct DynArray_FloatInteractiveVariable* floats;
    uint8_t _pad_3[0x28];
    struct DynArray_ControlFloatInteractiveVariable* controlFloatVariables;
    uint8_t _pad_4[0x28];
};




struct SEntitityEffectSystem_System {
    uint8_t _pad_0[0x8];
    struct SEntityEffectSystem_ParticleCategory* particleEffects;
    uint8_t _pad_1[0x8];
    struct EntityEffectSystem_MaterialCategory* materialEffects;
    uint8_t _pad_2[0x8];
    struct SEntityEffectSystem_SoundCategory* soundEffects;
    uint8_t _pad_3[0x8];
    struct SEntityEffectSystem_AudioEnvironmentCategory* audioEnvironmentEffects;
    uint8_t _pad_4[0x8];
    struct EntityEffectSystem_LightCategory* lightEffects;
    uint8_t _pad_5[0x8];
    struct SEntityEffectSystem_UIOwnerCategory* uiOwnerEffects;
    uint8_t _pad_6[0x8];
    struct DynArray_EntityEffectSystem_BaseSequencerTask* sequencerTags;
    uint8_t _pad_7[0x28];
};




struct SServiceBeaconCreatorParamsWithDifficulty {
    uint8_t _pad_0[0x8];
    struct DynArray_SServiceBeaconDifficultyEntry* missionEntriesByDifficulty;
    uint8_t _pad_1[0x28];
};




struct SCDynamicLightingRigGlobalParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* projectorTexture;
    uint8_t _pad_1[0x8];
    struct Vec3* offsetPerAxis;
    uint8_t _pad_2[0x10];
    float frameOfReferenceVerticalOffset;
    float colorLerpTime;
    float positionLerpTime;
    float minIntensityScaleWhileLerping;
    float minRepositionDistanceFromPlayer;
    float minRepositionMovementDistance;
    float extendedProjectorFOVScale;
    _Bool allowRigWithHelmetOn;
    uint8_t _pad_3[0x3];
    struct DynArray_SCDynamicRigLightParams* lights;
    uint8_t _pad_4[0x28];
};




struct BuildingBlocks_BindingsIntegerFromStringSwitch {
    uint8_t _pad_0[0x50];
    int64_t defaultValue;
    struct DynArray_BuildingBlocks_StringIntegerPair* values;
    uint8_t _pad_1[0x28];
    struct BuildingBlocks_BindingsStringBase* input;
    uint8_t _pad_2[0x8];
};




struct NavigationLinkComponentParams {
    uint8_t _pad_0[0x18];
    _Bool enabledForAI;
    uint8_t _pad_1[0x7];
    struct DynArray_NavigationLinkType* navLinks;
    uint8_t _pad_2[0x28];
    struct NavigationLinkController* controller;
    uint8_t _pad_3[0x8];
};




struct ActorFallNode {
    uint8_t _pad_0[0x8];
    enum ARDataType configVariant;
    uint8_t _pad_1[0x4];
    struct FragmentInfo* intro;
    uint8_t _pad_2[0x40];
    struct FragmentRequiredInfo* loop;
    uint8_t _pad_3[0x40];
    struct FragmentInfo* outro;
    uint8_t _pad_4[0x40];
    _Bool introUseHandOverlay;
    _Bool loopUseHandOverlay;
    _Bool outroUseHandOverlay;
    _Bool introAllowTurning;
    _Bool loopAllowTurning;
    _Bool outroAllowTurning;
    uint8_t _pad_5[0x2];
    struct StanceCheckConfig* introStanceCheck;
    uint8_t _pad_6[0x8];
    float loopStanceCheckDelay;
    uint8_t _pad_7[0x4];
    struct StanceCheckConfig* loopStanceCheck;
    uint8_t _pad_8[0x8];
    struct StanceCheckConfig* outroStanceCheck;
    uint8_t _pad_9[0x8];
    float loopBlendStartTime;
    float loopBlendEndTime;
    float outroTimeToLand;
    float outroMinDelay;
    float outroMinSpeed;
    uint8_t _pad_10[0x4];
    struct ActorFallOverlayNode* fallOverlay;
    uint8_t _pad_11[0x8];
    struct ActorLandingNode* landing;
    uint8_t _pad_12[0x8];
    struct DynArray_LandingSelection* alternateLandings;
    uint8_t _pad_13[0x28];
};




struct UI3DDisplayInputParams {
    uint8_t _pad_0[0x8];
    _Bool allowInputOutOfBounds;
    _Bool disablePimWhenOverScreen;
    _Bool allowPitch;
    _Bool allowYaw;
    _Bool allowPan;
    _Bool allowZoom;
    _Bool invertPitch;
    uint8_t _pad_1[0x1];
    struct DynArray_UI3DDisplayInput* inputs;
    uint8_t _pad_2[0x28];
    _Bool allowAnalogZoom;
    _Bool allowDigitalZoom;
    uint8_t _pad_3[0x2];
    float analogZoomSensitivity;
    float digitalZoomSensitivity;
    float selectionScale;
};




struct AtmosphereBehavior_WeatherParams {
    uint8_t _pad_0[0x8];
    float planetCloudCondensationAmount;
    uint8_t _pad_1[0x4];
    struct Range* planetCloudDensityCondensationRange;
    uint8_t _pad_2[0x8];
    _Bool enableSurfaceWaterEffects;
    uint8_t _pad_3[0x7];
    struct DynArray_WeatherEffects_Atmosphere* effects;
    uint8_t _pad_4[0x28];
};




struct AnimationCombineVariable {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Range* range;
    uint8_t _pad_2[0x8];
    float defaultValue;
    uint8_t _pad_3[0x4];
    struct AnimationVariableInterpolation* defaultInterpolation;
    uint8_t _pad_4[0x8];
    struct DynArray_AnimationVariableLink* links;
    uint8_t _pad_5[0x28];
};




struct ReputationValueSettings {
    uint8_t _pad_0[0x8];
    float rangeMin;
    float rangeMax;
    struct DynArray_ReputationValueSetting* modificationValues;
    uint8_t _pad_1[0x28];
    struct DynArray_ReputationComparisonRange* comparisonValues;
    uint8_t _pad_2[0x28];
};




struct NavigationCostVolumeComponentParams {
    uint8_t _pad_0[0x18];
    struct TraversalCostConfig* costConfig;
    uint8_t _pad_1[0x10];
    struct DynArray_INavigationCostVolumeExtender* extensions;
    uint8_t _pad_2[0x28];
};




struct LootArchetypeEntry_Primary {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct Tag* tag;
    uint8_t _pad_2[0x10];
    struct TagsDNFTerm* additionalTags;
    uint8_t _pad_3[0x60];
    float weight;
    uint8_t _pad_4[0x4];
    struct DynArray_EntryOptionalData_Base* optionalData;
    uint8_t _pad_5[0x28];
};




struct SCPersonalThoughtDisplayParams {
    uint8_t _pad_0[0x18];
    struct DynArray_TypeSubtypeParams* itemPortTypeSubtypes;
    uint8_t _pad_1[0x28];
    struct HUDSilhouetteParams* lootEntitySilhouette;
    uint8_t _pad_2[0x28];
};




struct LootingItemPortSizeClass {
    uint8_t _pad_0[0x8];
    int32_t sizeClass;
    uint8_t _pad_1[0x4];
    struct DynArray_TypeSubtypeParams* itemPortTypeSubtypes;
    uint8_t _pad_2[0x28];
};




struct PersonalThoughtInventoryItemUIIcon {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayIconType;
    uint8_t _pad_1[0x8];
    struct DynArray_TypeSubtypeParams* itemCategories;
    uint8_t _pad_2[0x28];
};




struct SEntityComponentOutfitHangerParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* equipInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* hangInteraction;
    uint8_t _pad_2[0x8];
    struct SSharedInteractionParams* swapInteraction;
    uint8_t _pad_3[0x8];
    struct SSharedInteractionParams* swapAllInteraction;
    uint8_t _pad_4[0x8];
    struct SSharedInteractionParams* equipAllInteraction;
    uint8_t _pad_5[0x8];
    struct SSharedInteractionParams* hangAllInteraction;
    uint8_t _pad_6[0x8];
    struct SSharedInteractionParams* disguiseSwapAllInteraction;
    uint8_t _pad_7[0x8];
    struct DynArray_TypeSubtypeParams* itemPortTypeSubtypes;
    uint8_t _pad_8[0x28];
    struct SAnimatedOutfitSwapData* animatedOutfitSwap;
    uint8_t _pad_9[0x8];
    struct SAnimatedOutfitSwapData* animatedOutfitHang;
    uint8_t _pad_10[0x8];
    _Bool destroyPlayerItems;
    uint8_t _pad_11[0x7];
};




struct SApplicationFormVoiceParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct DynArray_GlobalResourceAudio* voiceSampleAudioTriggers;
    uint8_t _pad_2[0x28];
    struct DynArray_SModelVoiceTagPair* modelVoiceTagPairs;
    uint8_t _pad_3[0x28];
};




struct EAPickupParams {
    uint8_t _pad_0[0x18];
    enum ARDataType type_;
    uint8_t _pad_1[0x4];
    struct DynArray_GlobalResourceAudio* audioTriggers;
    uint8_t _pad_2[0x28];
    struct CryStringT* geometryTag;
    uint8_t _pad_3[0x8];
    struct EAPickupVehicleParams* vehicleParams;
    uint8_t _pad_4[0x48];
    struct EAPickupFPSParams* FPSParams;
    uint8_t _pad_5[0x48];
    struct DynArray_EAPickupSpecialEventOverrideParams* specialEventParams;
    uint8_t _pad_6[0x28];
};




struct AudioSignal {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct DynArray_AudioSwitch* switches;
    uint8_t _pad_2[0x28];
    struct DynArray_AudioSignalRtpc* rtpcs;
    uint8_t _pad_3[0x28];
    struct DynArray_GlobalResourceAudio* audioTriggers;
    uint8_t _pad_4[0x28];
};




struct DefaultActionsParams {
    uint8_t _pad_0[0x8];
    struct DynArray_DefaultActionsEntityState* states;
    uint8_t _pad_1[0x28];
    struct DynArray_DefaultActionDef* defaultActions;
    uint8_t _pad_2[0x28];
};




struct ForceFeedback {
    uint8_t _pad_0[0x8];
    struct DynArray_ForceFeedbackPattern* Patterns;
    uint8_t _pad_1[0x28];
    struct DynArray_ForceFeedbackEnvelope* Envelopes;
    uint8_t _pad_2[0x28];
    struct DynArray_ForceFeedbackEffect* Effects;
    uint8_t _pad_3[0x28];
};




struct HarvestBehaviourParams {
    uint8_t _pad_0[0x8];
    struct DynArray_HarvestConditionBase* harvestConditions;
    uint8_t _pad_1[0x28];
    struct HarvestDespawnTimerParams* despawnTimer;
    uint8_t _pad_2[0x8];
};




struct ContractParamOverrides {
    uint8_t _pad_0[0x8];
    struct DynArray_ContractStringParam* stringParamOverrides;
    uint8_t _pad_1[0x28];
    struct DynArray_ContractBoolParam* boolParamOverrides;
    uint8_t _pad_2[0x28];
    struct DynArray_ContractIntParam* intParamOverrides;
    uint8_t _pad_3[0x28];
    struct DynArray_ContractPropertyTagReplacement* propertyTagReplacement;
    uint8_t _pad_4[0x28];
    struct DynArray_MissionProperty* propertyOverrides;
    uint8_t _pad_5[0x28];
    struct DynArray_BaseMissionModifier* modifierOverrides;
    uint8_t _pad_6[0x28];
    struct MissionType* missionTypeOverride;
    uint8_t _pad_7[0x10];
};




struct SMissionLocationModule {
    uint8_t _pad_0[0x8];
    _Bool isPersistent;
    uint8_t _pad_1[0x7];
    struct CryStringT* missionModule;
    uint8_t _pad_2[0x8];
    struct DynArray_AbstractMissionInitParam* missionInputs;
    uint8_t _pad_3[0x28];
    struct DynArray_MissionProperty* properties;
    uint8_t _pad_4[0x28];
};




struct SubContract {
    uint8_t _pad_0[0x8];
    struct DynArray_ContractStringParam* stringParamOverrides;
    uint8_t _pad_1[0x28];
    struct DynArray_ContractBoolParam* boolParamOverrides;
    uint8_t _pad_2[0x28];
    struct DynArray_ContractIntParam* intParamOverrides;
    uint8_t _pad_3[0x28];
    struct DynArray_ContractPropertyTagReplacement* propertyTagReplacement;
    uint8_t _pad_4[0x28];
    struct DynArray_MissionProperty* propertyOverrides;
    uint8_t _pad_5[0x28];
    struct DynArray_BaseMissionModifier* modifierOverrides;
    uint8_t _pad_6[0x28];
    struct MissionType* missionTypeOverride;
    uint8_t _pad_7[0x10];
    struct CryGUID* id;
    uint8_t _pad_8[0x8];
    struct DynArray_ContractPrerequisiteBase* additionalPrerequisites;
    uint8_t _pad_9[0x28];
};




struct MissionPropertyValue_CombinedDataSetEntries {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionProperty* dataSetEntryProperties;
    uint8_t _pad_1[0x28];
};




struct LootGenerationGlobalParams {
    uint8_t _pad_0[0x8];
    struct DynArray_LootGenerationSpecialEventArchetype* specialEventArchetypes;
    uint8_t _pad_1[0x28];
};




struct ConsumableSubtype {
    uint8_t _pad_0[0x8];
    struct CryStringT* typeName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* consumableName;
    struct DynArray_ConsumableEffect* effectsPerMicroSCU;
    uint8_t _pad_2[0x28];
    struct RGBA* tintOverride;
    uint8_t _pad_3[0x8];
};




struct ActorProceduralRecoilConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorProceduralRecoilSetup* actorProceduralRecoilSetup;
    uint8_t _pad_1[0x28];
};




struct EAObjectiveControlPhase {
    uint8_t _pad_0[0x8];
    struct DynArray_TeamPhaseSettingsDef* teamSettings;
    uint8_t _pad_1[0x28];
};




struct AudioGameContextGlobals {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioSwitch* globalStates;
    uint8_t _pad_1[0x28];
    struct DynArray_AudioRtpcWithDefault* globalRTPCs;
    uint8_t _pad_2[0x28];
};




struct ProceduralPlanetAudioDisturbanceList {
    uint8_t _pad_0[0x8];
    struct DynArray_ProceduralPlanetAudioDisturbanceDef* disturbances;
    uint8_t _pad_1[0x28];
};




struct SCItemTurretCustomAngleLimitTagOverwriteParams {
    uint8_t _pad_0[0x8];
    struct Tag* limiterTag;
    uint8_t _pad_1[0x10];
    struct DynArray_SCItemTurretCustomAngleLimit* AngleLimits;
    uint8_t _pad_2[0x28];
};




struct SpawnDescription_NPC_Group {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct DynArray_SpawnDescription_NPCOption* options;
    uint8_t _pad_2[0x28];
};




struct CraftingGameplayPropertyImplSingleStatTier_Float {
    uint8_t _pad_0[0x8];
    struct DynArray_CraftingGameplayPropertyImplValueRange_Float* valueRanges;
    uint8_t _pad_1[0x28];
};




struct TacticScoringProfile {
    uint8_t _pad_0[0x8];
    struct DynArray_CommonTacticScores* tactics;
    uint8_t _pad_1[0x28];
};




struct mobiGlasDefaultAppEntry {
    uint8_t _pad_0[0x8];
    struct mobiGlasApp* defaultMobiGlasApp;
    uint8_t _pad_1[0x10];
    struct DynArray_MobiGlasAppData* defaultAppData;
    uint8_t _pad_2[0x28];
};




struct SMobiGlasAppDataPacketReferenced {
    uint8_t _pad_0[0x8];
    struct DynArray_MobiGlasAppData* data;
    uint8_t _pad_1[0x28];
};




struct SHealthComponentParams {
    uint8_t _pad_0[0x18];
    float Health;
    uint8_t _pad_1[0x4];
    struct DamageResistanceBase* DamageResistances;
    uint8_t _pad_2[0x8];
    struct SInitialDamage* InitialDamage;
    uint8_t _pad_3[0x8];
    struct CryStringT* SerializedDamageMapPath;
    uint8_t _pad_4[0x8];
    _Bool UseDirtShaderForDamage;
    _Bool ClientOnly;
    _Bool UnlockInteractionsOnDeath;
    _Bool PushDamageUpPartsHeirarchyWhenDead;
    _Bool DetachFromItemPortOnDeath;
    _Bool DetachFromEntityOnDeath;
    _Bool DestroyChildrenOnDeath;
    _Bool PropagateExplosionDamageToChildren;
    _Bool UpdateObservableStatus;
    uint8_t _pad_5[0x7];
    struct DynArray_HealthDamageState* HealthLevelStates;
    uint8_t _pad_6[0x28];
    struct CryStringT* DestroyedGeometryTag;
    uint8_t _pad_7[0x8];
    struct CryStringT* ExplodedGeometryTag;
    uint8_t _pad_8[0x8];
    struct CryStringT* DebrisGeometryTag;
    uint8_t _pad_9[0x8];
    float ExplosionDelayTime;
    float ExplosionRandomDelayRange;
    struct CryStringT* ExplosionBone;
    uint8_t _pad_10[0x8];
    struct ExplosionParams* DeathExplosionParams;
    uint8_t _pad_11[0x8];
    struct DynArray_SGasMass* DeathGasComposition;
    uint8_t _pad_12[0x28];
    struct DynArray_SHealthInteractionLockParams* InteractionLocks;
    uint8_t _pad_13[0x28];
    _Bool IsSalvagable;
    _Bool IsRepairable;
    _Bool MirrorSalvageHit;
    _Bool DisableMaterialDamage;
    uint8_t _pad_14[0x4];
    struct DynArray_EntityComponentHealth_SBaseSequencerTask* sequencerTasks;
    uint8_t _pad_15[0x28];
    struct MaelstromShatterDestroyEvent* shatterDestroyEvent;
    uint8_t _pad_16[0x8];
    struct EntityClassCraftingData* craftingData;
    uint8_t _pad_17[0x8];
    _Bool alwaysPropagateHitToParent;
    uint8_t _pad_18[0x7];
};




struct SubsumptionComponentParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* subsumptionMastergraph;
    uint8_t _pad_1[0x8];
    struct CryStringT* subsumptionActivity;
    uint8_t _pad_2[0x8];
    struct DynArray_SMastergraphStateOverride* mastergraphStateOverrides;
    uint8_t _pad_3[0x28];
};




struct DynArray_SFortitudeLevelStats {
    struct SFortitudeLevelStats** m_data;
};




struct DynArray_STakedownTechniqueLevelStats {
    struct STakedownTechniqueLevelStats** m_data;
};




struct DynArray_SReflexLevelStats {
    struct SReflexLevelStats** m_data;
};




struct DynArray_SPlayerRoleShakeMultipliers {
    struct SPlayerRoleShakeMultipliers** m_data;
};




struct DynArray_SStrengthLevelStats {
    struct SStrengthLevelStats** m_data;
};




struct DynArray_SLightStatePreset {
    struct SLightStatePreset** m_data;
};




struct DynArray_PingDetectionLevelParams {
    struct PingDetectionLevelParams** m_data;
};




struct DynArray_SVaultingTechniqueLevelStats {
    struct SVaultingTechniqueLevelStats** m_data;
};




struct DynArray_SFitnessLevelStats {
    struct SFitnessLevelStats** m_data;
};




struct DynArray_SAimableGameModeRoleParams {
    struct SAimableGameModeRoleParams** m_data;
};




struct DynArray_OperatorModeAvailability {
    struct OperatorModeAvailability** m_data;
};




struct DynArray_ContractResultBase {
    struct ContractResultBase** m_data;
};




struct DynArray_WebCustomizationItemTypeName {
    struct WebCustomizationItemTypeName** m_data;
};




struct DynArray_EASpecialEventInformationParams {
    struct EASpecialEventInformationParams** m_data;
};




struct DynArray_GameModeCustomSetting {
    struct GameModeCustomSetting** m_data;
};




struct DynArray_ItemPreview_SkinnedLoadoutOverride {
    struct ItemPreview_SkinnedLoadoutOverride** m_data;
};




struct DynArray_STargetableItemType {
    struct STargetableItemType** m_data;
};




struct DynArray_MasterModeExclusion {
    struct MasterModeExclusion** m_data;
};




struct DynArray_ItemPreview_CameraSettingsOverride {
    struct ItemPreview_CameraSettingsOverride** m_data;
};




struct DynArray_InventoryContainerItemTypeFilter {
    struct InventoryContainerItemTypeFilter** m_data;
};




struct DynArray_StatusEffectAbilityLock {
    struct StatusEffectAbilityLock** m_data;
};




struct DynArray_SItemTypeFilter {
    struct SItemTypeFilter** m_data;
};




struct DynArray_OrificeBloodParams {
    struct OrificeBloodParams** m_data;
};




struct DynArray_InfractionDefinition {
    struct InfractionDefinition** m_data;
};




struct DynArray_SocialTab {
    struct SocialTab** m_data;
};




struct DynArray_AbilityDefinition {
    struct AbilityDefinition** m_data;
};




struct DynArray_SUninsuredItem {
    struct SUninsuredItem** m_data;
};




struct DynArray_ItemPreview_TurntableOverride {
    struct ItemPreview_TurntableOverride** m_data;
};




struct DynArray_ItemResourceNetworkMapTriggerEntry {
    struct ItemResourceNetworkMapTriggerEntry** m_data;
};




struct DynArray_SCItemSuitThrusterParams {
    struct SCItemSuitThrusterParams** m_data;
};




struct DynArray_SItemPortDefTypes {
    struct SItemPortDefTypes** m_data;
};




struct DynArray_AIObservableFilterFlags {
    struct AIObservableFilterFlags** m_data;
};




struct DynArray_ArmsLockSingleAbility {
    struct ArmsLockSingleAbility** m_data;
};




struct DynArray_OperatorModeDefinitions {
    struct OperatorModeDefinitions** m_data;
};




struct DynArray_PassengerScanStatusMappings {
    struct PassengerScanStatusMappings** m_data;
};




struct DynArray_PersonalThoughtForceCloseActionList {
    struct PersonalThoughtForceCloseActionList** m_data;
};




struct DynArray_DockingSlotVisibilityTagSet {
    struct DockingSlotVisibilityTagSet** m_data;
};




struct DynArray_AsteroidFieldShapeLinkParams {
    struct AsteroidFieldShapeLinkParams** m_data;
};




struct DynArray_SWeaponOnAttachParams {
    struct SWeaponOnAttachParams** m_data;
};




struct DynArray_DisabledLoadoutInteraction {
    struct DisabledLoadoutInteraction** m_data;
};




struct DynArray_DurationTags {
    struct DurationTags** m_data;
};




struct DynArray_Fidget {
    struct Fidget** m_data;
};




struct DynArray_SMegaMapSolarSystem {
    struct SMegaMapSolarSystem** m_data;
};




struct DynArray_PersonalThoughtContextualActionsMenu {
    struct PersonalThoughtContextualActionsMenu** m_data;
};




struct DynArray_ChatEmoteData {
    struct ChatEmoteData** m_data;
};




struct DynArray_SSimpodSimulation {
    struct SSimpodSimulation** m_data;
};




struct DynArray_AwardService_Award {
    struct AwardService_Award** m_data;
};




struct DynArray_SApplicationFormBodyTypeOption {
    struct SApplicationFormBodyTypeOption** m_data;
};




struct DynArray_InnerThought_LayoutGridSet {
    struct InnerThought_LayoutGridSet** m_data;
};




struct DynArray_StatusEffectBuffMacro {
    struct StatusEffectBuffMacro** m_data;
};




struct DynArray_VehicleEditorCapabilities {
    struct VehicleEditorCapabilities** m_data;
};




struct DynArray_SSCSignatureSystemAudioRule {
    struct SSCSignatureSystemAudioRule** m_data;
};




struct DynArray_EVAState {
    struct EVAState** m_data;
};




struct DynArray_ScanDisplaySectionParams {
    struct ScanDisplaySectionParams** m_data;
};




struct DynArray_SeatUserActorCDIKMapping {
    struct SeatUserActorCDIKMapping** m_data;
};




struct DynArray_BoolUserVariable {
    struct BoolUserVariable** m_data;
};




struct DynArray_BuildingBlocks_TextEmphasisModifierList {
    struct BuildingBlocks_TextEmphasisModifierList** m_data;
};




struct DynArray_SPerkReputationListParams {
    struct SPerkReputationListParams** m_data;
};




struct DynArray_CustomScanProcedureParams {
    struct CustomScanProcedureParams** m_data;
};




struct DynArray_Announcement {
    struct Announcement** m_data;
};




struct DynArray_SCSeatAccessEntranceInteractionParams {
    struct SCSeatAccessEntranceInteractionParams** m_data;
};




struct DynArray_SCSeatAccessPassageInteractionParams {
    struct SCSeatAccessPassageInteractionParams** m_data;
};




struct DynArray_SpawnDescription_ShipOptions {
    struct SpawnDescription_ShipOptions** m_data;
};




struct DynArray_BuildingBlocks_Keyframe {
    struct BuildingBlocks_Keyframe** m_data;
};




struct DynArray_SEAFPSGunGameArmorSet {
    struct SEAFPSGunGameArmorSet** m_data;
};




struct DynArray_ScanInformationDef {
    struct ScanInformationDef** m_data;
};




struct DynArray_WeaponProceduralClipsSetUp {
    struct WeaponProceduralClipsSetUp** m_data;
};




struct DynArray_MissionScenarioCycle {
    struct MissionScenarioCycle** m_data;
};




struct DynArray_ProcBreathingExertion {
    struct ProcBreathingExertion** m_data;
};




struct DynArray_SRemoteRigidEntityControlledEntitiesParams {
    struct SRemoteRigidEntityControlledEntitiesParams** m_data;
};




struct DynArray_ScreenEffects_DebugEffect {
    struct ScreenEffects_DebugEffect** m_data;
};




struct DynArray_BodyPartConfig {
    struct BodyPartConfig** m_data;
};




struct DynArray_AutoSpawnSettings {
    struct AutoSpawnSettings** m_data;
};




struct DynArray_SReputationAmountListParams {
    struct SReputationAmountListParams** m_data;
};




struct DynArray_SMiniGameSpriteParams {
    struct SMiniGameSpriteParams** m_data;
};




struct DynArray_SReputationScopeContextUI {
    struct SReputationScopeContextUI** m_data;
};




struct DynArray_SReputationJournalGroupParams {
    struct SReputationJournalGroupParams** m_data;
};




struct DynArray_SCItemControlPriorityTable {
    struct SCItemControlPriorityTable** m_data;
};




struct DynArray_VehicleCareer {
    struct VehicleCareer** m_data;
};




struct DynArray_ActorStatData {
    struct ActorStatData** m_data;
};




struct DynArray_ItemAwardWeightings {
    struct ItemAwardWeightings** m_data;
};




struct DynArray_S42CommendationRulesEntry {
    struct S42CommendationRulesEntry** m_data;
};




struct DynArray_LootArchetypeOrGroup_Secondary {
    struct LootArchetypeOrGroup_Secondary** m_data;
};




struct DynArray_STaggedSignaturesEntry {
    struct STaggedSignaturesEntry** m_data;
};




struct DynArray_SEAUISpawnScreenFPSEquipmentSlotParams {
    struct SEAUISpawnScreenFPSEquipmentSlotParams** m_data;
};




struct DynArray_PersonalThoughtInventorySingleFilter {
    struct PersonalThoughtInventorySingleFilter** m_data;
};




struct DynArray_PersonalThoughtInventoryItemOrientationOffset {
    struct PersonalThoughtInventoryItemOrientationOffset** m_data;
};




struct DynArray_InventoryDropDetachRules {
    struct InventoryDropDetachRules** m_data;
};




struct DynArray_InventoryInteractionBlockingAttachedEntities {
    struct InventoryInteractionBlockingAttachedEntities** m_data;
};




struct DynArray_LootingTabParams {
    struct LootingTabParams** m_data;
};




struct DynArray_BoidState {
    struct BoidState** m_data;
};




struct DynArray_BuildingBlocks_StaticArrayEntry {
    struct BuildingBlocks_StaticArrayEntry** m_data;
};




struct DynArray_FoleyLoop {
    struct FoleyLoop** m_data;
};




struct DynArray_FoleyOneShot {
    struct FoleyOneShot** m_data;
};




struct DynArray_UnitTest {
    struct UnitTest** m_data;
};




struct DynArray_MobiGlasAfterActionReportStat {
    struct MobiGlasAfterActionReportStat** m_data;
};




struct DynArray_SCItemPriorityGroupParam {
    struct SCItemPriorityGroupParam** m_data;
};




struct DynArray_HandholdParams {
    struct HandholdParams** m_data;
};




struct DynArray_BuildingBlocks_StyleConditionList {
    struct BuildingBlocks_StyleConditionList** m_data;
};




struct DynArray_SQedVisualGraphStateParams {
    struct SQedVisualGraphStateParams** m_data;
};




struct DynArray_LightningBehavior_Effect {
    struct LightningBehavior_Effect** m_data;
};




struct DynArray_BuildingBlocksLayer {
    struct BuildingBlocksLayer** m_data;
};




struct DynArray_SReputationStateMissionResultModifierListParams {
    struct SReputationStateMissionResultModifierListParams** m_data;
};




struct DynArray_RaSTaRLibraryCategory {
    struct RaSTaRLibraryCategory** m_data;
};




struct DynArray_DialogueContent {
    struct DialogueContent** m_data;
};




struct DynArray_SCharacterCustomizerVoiceParams {
    struct SCharacterCustomizerVoiceParams** m_data;
};




struct DynArray_SCharacterCustomizerSkinBaseMaterialList {
    struct SCharacterCustomizerSkinBaseMaterialList** m_data;
};




struct DynArray_SCharacterCustomizerWildlineCondition {
    struct SCharacterCustomizerWildlineCondition** m_data;
};




struct DynArray_TriggerConditionDef {
    struct TriggerConditionDef** m_data;
};




struct DynArray_SCharacterCustomizerBodyTypeParams {
    struct SCharacterCustomizerBodyTypeParams** m_data;
};




struct DynArray_DrugEfficacyForItemType {
    struct DrugEfficacyForItemType** m_data;
};




struct DynArray_SEntityTraversingTarget {
    struct SEntityTraversingTarget** m_data;
};




struct DynArray_ProcAimRigConfig {
    struct ProcAimRigConfig** m_data;
};




struct DynArray_PlayerUsableSlot {
    struct PlayerUsableSlot** m_data;
};




struct DynArray_ScreenEffects_Effect {
    struct ScreenEffects_Effect** m_data;
};




struct DynArray_SpawnDescription_EntityOptions {
    struct SpawnDescription_EntityOptions** m_data;
};




struct DynArray_SActorForceReactionProceduralVanduulLeanPose {
    struct SActorForceReactionProceduralVanduulLeanPose** m_data;
};




struct DynArray_SActorForceReactionProceduralXianLeanPose {
    struct SActorForceReactionProceduralXianLeanPose** m_data;
};




struct DynArray_SActorForceReactionProceduralHumanLeanPose {
    struct SActorForceReactionProceduralHumanLeanPose** m_data;
};




struct DynArray_BuildingBlocks_NumberCompareStatement {
    struct BuildingBlocks_NumberCompareStatement** m_data;
};




struct DynArray_SReputationMissionGiverRewardBonusParams {
    struct SReputationMissionGiverRewardBonusParams** m_data;
};




struct DynArray_CommunicationEntry {
    struct CommunicationEntry** m_data;
};




struct DynArray_CockpitResponseVariation {
    struct CockpitResponseVariation** m_data;
};




struct DynArray_SHelmetStateBaseParams {
    struct SHelmetStateBaseParams** m_data;
};




struct DynArray_CameraLensGhostSet {
    struct CameraLensGhostSet** m_data;
};




struct DynArray_SEALoadoutItem {
    struct SEALoadoutItem** m_data;
};




struct DynArray_UsableArchetype {
    struct UsableArchetype** m_data;
};




struct DynArray_SpecialEventDay {
    struct SpecialEventDay** m_data;
};




struct DynArray_IntUserVariable {
    struct IntUserVariable** m_data;
};




struct DynArray_SScoreboard {
    struct SScoreboard** m_data;
};




struct DynArray_SActorForceReactionFlinchConfigDef {
    struct SActorForceReactionFlinchConfigDef** m_data;
};




struct DynArray_SpineBone {
    struct SpineBone** m_data;
};




struct DynArray_DifficultyLevelParams {
    struct DifficultyLevelParams** m_data;
};




struct DynArray_ContextualCommunicationResponse {
    struct ContextualCommunicationResponse** m_data;
};




struct DynArray_UsableChannelInputActionGroup {
    struct UsableChannelInputActionGroup** m_data;
};




struct DynArray_ResourceType {
    struct ResourceType** m_data;
};




struct DynArray_SActorForceReactionFilteredStaggerRangeDef {
    struct SActorForceReactionFilteredStaggerRangeDef** m_data;
};




struct DynArray_AudioValueOutput {
    struct AudioValueOutput** m_data;
};




struct DynArray_SHackingThreatLevelParams {
    struct SHackingThreatLevelParams** m_data;
};




struct DynArray_RadarContactSubGroupEntry {
    struct RadarContactSubGroupEntry** m_data;
};




struct DynArray_ActorStatusUIWarning {
    struct ActorStatusUIWarning** m_data;
};




struct DynArray_ActionStatusCosts {
    struct ActionStatusCosts** m_data;
};




struct DynArray_AbilityStatusCosts {
    struct AbilityStatusCosts** m_data;
};




struct DynArray_EAPatchNoteCategoryParams {
    struct EAPatchNoteCategoryParams** m_data;
};




struct DynArray_EntityEffectSystem_MaterialPropertyLink {
    struct EntityEffectSystem_MaterialPropertyLink** m_data;
};




struct DynArray_EntityEffectSystem_LightPropertyLink {
    struct EntityEffectSystem_LightPropertyLink** m_data;
};




struct DynArray_SEntityEffectSystem_SoundPropertyLink {
    struct SEntityEffectSystem_SoundPropertyLink** m_data;
};




struct DynArray_SEntityEffectSystem_ParticlePropertyLink {
    struct SEntityEffectSystem_ParticlePropertyLink** m_data;
};




struct DynArray_MobiGlasAfterActionReportRankRules {
    struct MobiGlasAfterActionReportRankRules** m_data;
};




struct DynArray_ExtendedNameData {
    struct ExtendedNameData** m_data;
};




struct DynArray_AnimationGraph_Track {
    struct AnimationGraph_Track** m_data;
};




struct DynArray_SActorLocomotionFidgetStateFilteredDef {
    struct SActorLocomotionFidgetStateFilteredDef** m_data;
};




struct DynArray_Investigation_ClueItem {
    struct Investigation_ClueItem** m_data;
};




struct DynArray_CostModifierPerAgentType {
    struct CostModifierPerAgentType** m_data;
};




struct DynArray_SActorForceReactionTwitchConfigDef {
    struct SActorForceReactionTwitchConfigDef** m_data;
};




struct DynArray_VehicleEditorGroupData {
    struct VehicleEditorGroupData** m_data;
};




struct DynArray_AIContextualVisualFieldProfile {
    struct AIContextualVisualFieldProfile** m_data;
};




struct DynArray_InteractionConditionPreset {
    struct InteractionConditionPreset** m_data;
};




struct DynArray_SInteractionPointModifier {
    struct SInteractionPointModifier** m_data;
};




struct DynArray_SItemPortLoadoutBaseParams {
    struct SItemPortLoadoutBaseParams** m_data;
};




struct DynArray_FloatUserVariable {
    struct FloatUserVariable** m_data;
};




struct DynArray_ActorStatusData {
    struct ActorStatusData** m_data;
};




struct DynArray_Conversation {
    struct Conversation** m_data;
};




struct DynArray_VibrationAudioEntry {
    struct VibrationAudioEntry** m_data;
};




struct DynArray_AudioEnvironmentMovementRtpcBehavior {
    struct AudioEnvironmentMovementRtpcBehavior** m_data;
};




struct DynArray_ThrusterOutputToRtpcList {
    struct ThrusterOutputToRtpcList** m_data;
};




struct DynArray_IFCSOutputToRtpcList {
    struct IFCSOutputToRtpcList** m_data;
};




struct DynArray_SWeaponParticleEffectParamsArray {
    struct SWeaponParticleEffectParamsArray** m_data;
};




struct DynArray_PersonalThoughtGameModeDef {
    struct PersonalThoughtGameModeDef** m_data;
};




struct DynArray_FiringRangeWeaponItem {
    struct FiringRangeWeaponItem** m_data;
};




struct DynArray_SMobiGlasPersonalStatusWeaponItem {
    struct SMobiGlasPersonalStatusWeaponItem** m_data;
};




struct DynArray_StateTokenRequirements {
    struct StateTokenRequirements** m_data;
};




struct DynArray_PostureGroup {
    struct PostureGroup** m_data;
};




struct DynArray_ActorLandingNode {
    struct ActorLandingNode** m_data;
};




struct DynArray_PartialContractRewardRange {
    struct PartialContractRewardRange** m_data;
};




struct DynArray_ArmouryItem {
    struct ArmouryItem** m_data;
};




struct DynArray_PlayerChoice_OptionList {
    struct PlayerChoice_OptionList** m_data;
};




struct DynArray_FrontendS42Scenario {
    struct FrontendS42Scenario** m_data;
};




struct DynArray_StarMapObject {
    struct StarMapObject** m_data;
};




struct DynArray_MotionState {
    struct MotionState** m_data;
};




struct DynArray_SCharacterCustomizerDNAHeadPool {
    struct SCharacterCustomizerDNAHeadPool** m_data;
};




struct DynArray_ProceduralAnimationSequence {
    struct ProceduralAnimationSequence** m_data;
};




struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Int {
    struct CraftingGameplayPropertyImplSingleStatTier_Int** m_data;
};




struct DynArray_SHackingCodeCommandEntry {
    struct SHackingCodeCommandEntry** m_data;
};




struct DynArray_HudColor_Palette {
    struct HudColor_Palette** m_data;
};




struct DynArray_SCItemObservableScreenParams {
    struct SCItemObservableScreenParams** m_data;
};




struct DynArray_MeleeAttackInfo {
    struct MeleeAttackInfo** m_data;
};




struct DynArray_SandboxTriggerManualParams {
    struct SandboxTriggerManualParams** m_data;
};




struct DynArray_HarvestableElementModifier {
    struct HarvestableElementModifier** m_data;
};




struct DynArray_SubHarvestableSlot {
    struct SubHarvestableSlot** m_data;
};




struct DynArray_HarvestableElement {
    struct HarvestableElement** m_data;
};




struct DynArray_AudioBreathStyleTransitionNode {
    struct AudioBreathStyleTransitionNode** m_data;
};




struct DynArray_ActorBreathingStyleStartup {
    struct ActorBreathingStyleStartup** m_data;
};




struct DynArray_ItemResourceState {
    struct ItemResourceState** m_data;
};




struct DynArray_SGalactapediaCategory {
    struct SGalactapediaCategory** m_data;
};




struct DynArray_ZeroGTraversalState {
    struct ZeroGTraversalState** m_data;
};




struct DynArray_PersonalThoughtQuickAccessWheel {
    struct PersonalThoughtQuickAccessWheel** m_data;
};




struct DynArray_LeanState {
    struct LeanState** m_data;
};




struct DynArray_InfractionSet {
    struct InfractionSet** m_data;
};




struct DynArray_CtxGraph_Context {
    struct CtxGraph_Context** m_data;
};




struct DynArray_DefaultActionsEntry {
    struct DefaultActionsEntry** m_data;
};




struct DynArray_Stat {
    struct Stat** m_data;
};




struct DynArray_SMisfireProbabilityParams {
    struct SMisfireProbabilityParams** m_data;
};




struct DynArray_Formation {
    struct Formation** m_data;
};




struct DynArray_SJumpTunnelSectionGenerationParams {
    struct SJumpTunnelSectionGenerationParams** m_data;
};




struct DynArray_SSequencerSequenceTaskEntryParams {
    struct SSequencerSequenceTaskEntryParams** m_data;
};




struct DynArray_SStarGalaStageParams {
    struct SStarGalaStageParams** m_data;
};




struct DynArray_ActionRuleList {
    struct ActionRuleList** m_data;
};




struct DynArray_SOnInteractionStateChangeTriggers {
    struct SOnInteractionStateChangeTriggers** m_data;
};




struct DynArray_SOnInteractionTriggers {
    struct SOnInteractionTriggers** m_data;
};




struct DynArray_SecurityNetworkVariableEffects {
    struct SecurityNetworkVariableEffects** m_data;
};




struct DynArray_AnimationJointMovement {
    struct AnimationJointMovement** m_data;
};




struct DynArray_MeleeAttackCombo {
    struct MeleeAttackCombo** m_data;
};




struct DynArray_SBeamEffectParams {
    struct SBeamEffectParams** m_data;
};




struct DynArray_EntityAudioControllerRtpcSubscriberListDef {
    struct EntityAudioControllerRtpcSubscriberListDef** m_data;
};




struct DynArray_ControlHintDef {
    struct ControlHintDef** m_data;
};




struct DynArray_StringUserVariable {
    struct StringUserVariable** m_data;
};




struct DynArray_SCIGTestBB {
    struct SCIGTestBB** m_data;
};




struct DynArray_SMFDView {
    struct SMFDView** m_data;
};




struct DynArray_MedBedTierParams {
    struct MedBedTierParams** m_data;
};




struct DynArray_DrugEfficacyForItemSubType {
    struct DrugEfficacyForItemSubType** m_data;
};




struct DynArray_ActorFallNode {
    struct ActorFallNode** m_data;
};




struct DynArray_LootArchetypeEntry_Primary {
    struct LootArchetypeEntry_Primary** m_data;
};




struct DynArray_LootingItemPortSizeClass {
    struct LootingItemPortSizeClass** m_data;
};




struct DynArray_PersonalThoughtInventoryItemUIIcon {
    struct PersonalThoughtInventoryItemUIIcon** m_data;
};




struct DynArray_SApplicationFormVoiceParams {
    struct SApplicationFormVoiceParams** m_data;
};




struct DynArray_AudioSignal {
    struct AudioSignal** m_data;
};




struct DynArray_DefaultActionsParams {
    struct DefaultActionsParams** m_data;
};




struct DynArray_SMissionLocationModule {
    struct SMissionLocationModule** m_data;
};




struct DynArray_SubContract {
    struct SubContract** m_data;
};




struct DynArray_ConsumableSubtype {
    struct ConsumableSubtype** m_data;
};




struct DynArray_EAObjectiveControlPhase {
    struct EAObjectiveControlPhase** m_data;
};




struct DynArray_ProceduralPlanetAudioDisturbanceList {
    struct ProceduralPlanetAudioDisturbanceList** m_data;
};




struct DynArray_SCItemTurretCustomAngleLimitTagOverwriteParams {
    struct SCItemTurretCustomAngleLimitTagOverwriteParams** m_data;
};




struct DynArray_SpawnDescription_NPC_Group {
    struct SpawnDescription_NPC_Group** m_data;
};




struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Float {
    struct CraftingGameplayPropertyImplSingleStatTier_Float** m_data;
};




struct DynArray_mobiGlasDefaultAppEntry {
    struct mobiGlasDefaultAppEntry** m_data;
};




struct STakedownTechnique {
    uint8_t _pad_0[0x8];
    struct DynArray_STakedownTechniqueLevelStats* takedownTechniqueLevelStats;
    uint8_t _pad_1[0x28];
    struct STakedownTechniqueGains* takedownTechniqueGains;
    uint8_t _pad_2[0x8];
};




struct SActorExternalForceResponseCameraShakeDef {
    uint8_t _pad_0[0x8];
    struct DynArray_CameraActorVibrationShakeConfig* vibrationShakes;
    uint8_t _pad_1[0x28];
    struct DynArray_SPlayerRoleShakeMultipliers* roleShakeMultipliers;
    uint8_t _pad_2[0x28];
};




struct SLightGroupComponentParams {
    uint8_t _pad_0[0x18];
    float offEnvironmentProbeScale;
    _Bool auxiliaryWhenDisabled;
    _Bool affectedByDayNight;
    _Bool attachViaObjectLink;
    uint8_t _pad_1[0x1];
    enum ARDataType nightTimeState;
    enum ARDataType dayTimeState;
    struct CryStringT* helper;
    uint8_t _pad_2[0x8];
    enum ARDataType currentState;
    uint8_t _pad_3[0x4];
    struct DynArray_SLightStatePreset* lightStatePresets;
    uint8_t _pad_4[0x28];
    struct DynArray_SLightStateOverride* lightStateOverrides;
    uint8_t _pad_5[0x28];
};




struct PingSettingsParams {
    uint8_t _pad_0[0x8];
    float maxActiveDistance;
    float cooldownRate;
    struct DynArray_PingDetectionLevelParams* detectionLevelParams;
    uint8_t _pad_1[0x28];
};




struct SVaultingTechnique {
    uint8_t _pad_0[0x8];
    struct DynArray_SVaultingTechniqueLevelStats* vaultingTechniqueLevelStats;
    uint8_t _pad_1[0x28];
    struct SVaultingTechniqueGains* vaultingTechniqueGains;
    uint8_t _pad_2[0x8];
};




struct SPlayerSkillsParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SFitnessLevelStats* fitnessLevelStats;
    uint8_t _pad_1[0x28];
    struct DynArray_SStrengthLevelStats* strengthLevelStats;
    uint8_t _pad_2[0x28];
    struct DynArray_SReflexLevelStats* reflexLevelStats;
    uint8_t _pad_3[0x28];
    struct DynArray_SFortitudeLevelStats* fortitudeLevelStats;
    uint8_t _pad_4[0x28];
    struct SFitnessXPGains* fitnessXPGains;
    uint8_t _pad_5[0x10];
    struct SStrengthXPGains* strengthXPGains;
    uint8_t _pad_6[0x18];
    struct SReflexXPGains* reflexXPGains;
    uint8_t _pad_7[0x10];
    struct SFortitudeXPGains* fortitudeXPGains;
    uint8_t _pad_8[0x18];
    struct SPlayerSkillsTechniques* techniques;
    uint8_t _pad_9[0x90];
    struct SActivityThresholds* activityThresholds;
    uint8_t _pad_10[0x10];
};




struct SAimableGameModeParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SAimableGameModeRoleParams* aimableUsers;
    uint8_t _pad_1[0x28];
};




struct OperatorModeAvailabilityParams {
    uint8_t _pad_0[0x8];
    enum ARDataType defaultMode;
    uint8_t _pad_1[0x4];
    struct DynArray_ARDataType* availableModes;
    uint8_t _pad_2[0x28];
    struct DynArray_OperatorModeAvailability* masterModes;
    uint8_t _pad_3[0x28];
};




struct ContractResults {
    uint8_t _pad_0[0x8];
    struct DynArray_ContractResultBase* contractResults;
    uint8_t _pad_1[0x28];
    int32_t contractBuyInAmount;
    float timeToComplete;
    struct ContractDifficulty* difficulty;
    uint8_t _pad_2[0x8];
};




struct WebCustomizationGlobalParams {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* defaultLoadoutKitName;
    struct DynArray_WebCustomizationItemTypeName* typeNames;
    uint8_t _pad_1[0x28];
};




struct GameMode {
    uint8_t _pad_0[0x8];
    enum ARDataType id;
    enum ARDataType requiredPass;
    enum ARDataType playedBadgeId;
    uint8_t _pad_1[0x4];
    struct CryStringT* thumbnail;
    uint8_t _pad_2[0x8];
    struct CryStringT* icon;
    uint8_t _pad_3[0x8];
    struct DynArray_CryStringT* backgroundVideos;
    uint8_t _pad_4[0x28];
    struct CLocIdentifier* locDisplayName;
    struct CLocIdentifier* locSubtitle;
    struct CLocIdentifier* description;
    struct CryStringT* alias;
    uint8_t _pad_5[0x8];
    struct CryStringT* leaderboardMatchCode;
    uint8_t _pad_6[0x8];
    struct SLoadingScreenInformationDef* loadingScreenInfo;
    uint8_t _pad_7[0x68];
    _Bool shardPersistenceEnabled;
    _Bool enableCustomization;
    uint8_t _pad_8[0x6];
    struct DynArray_GameModeFilter* filters;
    uint8_t _pad_9[0x28];
    struct DynArray_ARDataType* validNetworkTypes;
    uint8_t _pad_10[0x28];
    struct SIBettingModule* bettingModule;
    uint8_t _pad_11[0x8];
    struct SICamerasModule* camerasModule;
    uint8_t _pad_12[0x8];
    struct ChatSystemOptionsModule* chatSystemOptions;
    uint8_t _pad_13[0x8];
    struct SIDamageHandlingModule* damageHandling;
    uint8_t _pad_14[0x8];
    struct SIDifficultyModule* difficultyModule;
    uint8_t _pad_15[0x8];
    struct SIHostilityModule* hostility;
    uint8_t _pad_16[0x8];
    struct SILayerEntitiesGroupManager* layerEntitiesGroupManager;
    uint8_t _pad_17[0x8];
    struct SINotificationsModule* notifications;
    uint8_t _pad_18[0x8];
    struct SIObjectives* objectives;
    uint8_t _pad_19[0x8];
    struct SIPickupModule* pickup;
    uint8_t _pad_20[0x8];
    struct SIParamsModule* params;
    uint8_t _pad_21[0x8];
    struct SIPlayerSetupModule* playerSetup;
    uint8_t _pad_22[0x8];
    struct SIPlayerStats* playerStats;
    uint8_t _pad_23[0x8];
    struct SIReputationModule* reputationModule;
    uint8_t _pad_24[0x8];
    struct SIRoundsModule* rounds;
    uint8_t _pad_25[0x8];
    struct SISpectatorModule* spectator;
    uint8_t _pad_26[0x8];
    struct SIScoringModule* scoring;
    uint8_t _pad_27[0x8];
    struct SISpawning* spawning;
    uint8_t _pad_28[0x8];
    struct SIStateModule* stateModule;
    uint8_t _pad_29[0x8];
    struct SIStatsRecordingModule* statsRecording;
    uint8_t _pad_30[0x8];
    struct SISubsumptionMissionModule* subsumptionMissionModule;
    uint8_t _pad_31[0x8];
    struct SITeamsModule* teams;
    uint8_t _pad_32[0x8];
    struct SIVictoryConditionsModule* victoryConditions;
    uint8_t _pad_33[0x8];
    struct SIVotingModule* votingModule;
    uint8_t _pad_34[0x8];
    _Bool mapSelection;
    uint8_t _pad_35[0x7];
    struct DynArray_GameModeValidMap* validMaps;
    uint8_t _pad_36[0x28];
    struct DynArray_GameModeCustomSetting* customSettings;
    uint8_t _pad_37[0x28];
};




struct STargetableItemTypesRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_STargetableItemType* targetableItemTypes;
    uint8_t _pad_1[0x28];
    struct DynArray_STargetableItemType* squadronTargetableItemTypes;
    uint8_t _pad_2[0x28];
};




struct MasterModeExclusionGlobalParams {
    uint8_t _pad_0[0x8];
    struct DynArray_MasterModeExclusion* exclusions;
    uint8_t _pad_1[0x28];
};




struct InventoryOpenContainerType {
    uint8_t _pad_0[0x8];
    struct InventoryContainerGridCellSizeBase* gridCellSize;
    uint8_t _pad_1[0x8];
    struct Vec3* minPermittedItemSize;
    uint8_t _pad_2[0x10];
    struct Vec3* maxPermittedItemSize;
    uint8_t _pad_3[0x10];
    _Bool isExternalContainer;
    uint8_t _pad_4[0x7];
    struct Vec3* gridPosOffset;
    uint8_t _pad_5[0x10];
    int32_t maxPercentageErasedOnParentDestruction;
    float randomDestructionDistributionExponent;
    float appliedForceOnParentDestruction;
    uint8_t _pad_6[0x4];
    struct DynArray_InventoryContainerItemTypeFilter* overrideStorableItemTypes;
    uint8_t _pad_7[0x28];
};




struct InventoryOpenAlwaysContainerType {
    uint8_t _pad_0[0x8];
    struct InventoryContainerGridCellSizeBase* gridCellSize;
    uint8_t _pad_1[0x8];
    struct Vec3* minPermittedItemSize;
    uint8_t _pad_2[0x10];
    struct Vec3* maxPermittedItemSize;
    uint8_t _pad_3[0x10];
    _Bool isExternalContainer;
    uint8_t _pad_4[0x7];
    struct Vec3* gridPosOffset;
    uint8_t _pad_5[0x10];
    int32_t maxPercentageErasedOnParentDestruction;
    float randomDestructionDistributionExponent;
    float appliedForceOnParentDestruction;
    uint8_t _pad_6[0x4];
    struct DynArray_InventoryContainerItemTypeFilter* overrideStorableItemTypes;
    uint8_t _pad_7[0x28];
};




struct SSalvageRepairHighlightParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SSalvageRepairHighlightColorParams* colors;
    uint8_t _pad_1[0x28];
    struct SSalvageRepairHighlightOutlineValues* validOutlineValues;
    uint8_t _pad_2[0x10];
    struct RGB* invalidTargetColor;
    uint8_t _pad_3[0x10];
    struct SSalvageRepairHighlightOutlineValues* invalidOutlineValues;
    uint8_t _pad_4[0x10];
    struct DynArray_SItemTypeFilter* filterItemTypes;
    uint8_t _pad_5[0x28];
};




struct StatusBloodParams {
    uint8_t _pad_0[0x8];
    struct DynArray_OrificeBloodParams* orificeBloodParams;
    uint8_t _pad_1[0x28];
    float globalMinBloodInterval;
    float bloodTimeToDryAfterDeath;
    float bloodToHygieneDecayMultiplier;
    uint8_t _pad_2[0x4];
};




struct SJurisdictionRoomExtensionParams {
    uint8_t _pad_0[0x18];
    struct Jurisdiction* jurisdiction;
    uint8_t _pad_1[0x10];
    struct DynArray_InfractionDefinition* extraInfractions;
    uint8_t _pad_2[0x28];
};




struct ActorAbilityComponent {
    uint8_t _pad_0[0x8];
    struct DynArray_AbilityDefinition* abilityDefinitions;
    uint8_t _pad_1[0x28];
};




struct ShipInsurancePolicyRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_SUninsuredItem* uninsuredItemTypes;
    uint8_t _pad_1[0x28];
};




struct ItemPreview_Config {
    uint8_t _pad_0[0x8];
    struct CryStringT* dummyPoseAnim;
    uint8_t _pad_1[0x8];
    struct CryStringT* skinnedLoadoutDefault;
    uint8_t _pad_2[0x8];
    struct EntityClassDefinition* dummyBaseClass;
    uint8_t _pad_3[0x10];
    struct ItemPreview_CameraSettings* cameraSettingsDefault;
    uint8_t _pad_4[0x58];
    struct ItemPreview_TurntableSettings* turntableSettingsDefault;
    uint8_t _pad_5[0x30];
    struct DynArray_ItemPreview_SkinnedLoadoutOverride* skinnedLoadoutOverrides;
    uint8_t _pad_6[0x28];
    struct DynArray_ItemPreview_CameraSettingsOverride* cameraSettingsOverrides;
    uint8_t _pad_7[0x28];
    struct DynArray_ItemPreview_TurntableOverride* turntableSettingsOverrides;
    uint8_t _pad_8[0x28];
    struct ItemPreview_LightingSettings* lightingSettings;
    uint8_t _pad_9[0x50];
    float fadeDelay;
    float fadeTime;
};




struct ItemResourceNetworkUIParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ItemResourceNetworkTypeUIData* typeData;
    uint8_t _pad_1[0x28];
    struct DynArray_ARDataType* exclusiveTypes;
    uint8_t _pad_2[0x28];
    struct DynArray_float* healthRanges;
    uint8_t _pad_3[0x28];
    struct DynArray_float* wearRanges;
    uint8_t _pad_4[0x28];
    struct DynArray_EngineeringStateMessages* notificationMessages;
    uint8_t _pad_5[0x28];
    struct DynArray_ItemResourceNetworkMapTriggerEntry* mapTriggerArray;
    uint8_t _pad_6[0x28];
};




struct SCItemSuitThrusterPackParams {
    uint8_t _pad_0[0x18];
    struct SCLegacyThrustParams* LegacyThrustParams;
    uint8_t _pad_1[0x90];
    struct SCThrustParams* DefaultThrustParams;
    uint8_t _pad_2[0x100];
    struct DynArray_SCOptionalThrustParams* OptionalThrustParams;
    uint8_t _pad_3[0x28];
    struct GlobalResourceAudio* StartAudioTrigger;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* StopAudioTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceParticle* ThrusterEffect;
    uint8_t _pad_6[0x10];
    struct DynArray_SCItemSuitThrusterParams* Thrusters;
    uint8_t _pad_7[0x28];
    float VFXThrusterThreshold;
    float SFXThrusterAngularThreshold;
    float SFXThrusterLinearThreshold;
    uint8_t _pad_8[0x4];
    struct SCItemSuitFuelParams* fuelParams;
    uint8_t _pad_9[0x10];
};




struct SMFDParamsDiagnostics {
    uint8_t _pad_0[0x8];
    float healthThresholdDamaged;
    float healthThresholdCritical;
    struct DynArray_SItemPortDefTypes* excludedItemTypes;
    uint8_t _pad_1[0x28];
    struct DynArray_SItemPortDefTypes* includedItemTypes;
    uint8_t _pad_2[0x28];
};




struct VehicleEditorCategoryData {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CryStringT* displayIcon;
    uint8_t _pad_1[0x8];
    struct DynArray_SItemPortDefTypes* allowableTypes;
    uint8_t _pad_2[0x28];
};




struct GlobalShopCommodityParams {
    uint8_t _pad_0[0x8];
    int32_t MaxKioskCargoGridDisplaySize;
    int32_t autoLoadingBasePrice;
    struct SAutoLoadingBoxSizePrices* autoLoadingBoxSizePrices;
    uint8_t _pad_1[0x28];
    float noSupplyLevel;
    float VeryLowSupplyLevel;
    float LowSupplyLevel;
    float MediumSupplyLevel;
    float HighSupplyLevel;
    float VeryHighSupplyLevel;
    float noDemandLevel;
    float VeryLowDemandLevel;
    float LowDemandLevel;
    float MediumDemandLevel;
    float HighDemandLevel;
    float VeryHighDemandLevel;
    struct DynArray_SItemPortDefTypes* transactionSupportedResourceContainerTypes;
    uint8_t _pad_2[0x28];
    struct ResourceType* RMC_ResourceType;
    uint8_t _pad_3[0x10];
    struct EntityClassDefinition* RMC_SalvageCannisterEntity;
    uint8_t _pad_4[0x10];
    struct SResourceTypeDefaultCargoContainers* genericCrates;
    uint8_t _pad_5[0xf0];
    struct CLocIdentifier* Location_Select;
    struct CLocIdentifier* subLocation_All;
    struct CLocIdentifier* subLocation_CargoGrid;
    struct CLocIdentifier* subLocation_GeneralStorage;
    struct CLocIdentifier* subLocation_ResourceContainers;
    struct CLocIdentifier* subLocationItems_All;
};




struct VehicleEditorAutoEquipData {
    uint8_t _pad_0[0x8];
    struct DynArray_SItemPortDefTypes* containerItemTypes;
    uint8_t _pad_1[0x28];
    struct DynArray_SItemPortDefTypes* innerItemTypes;
    uint8_t _pad_2[0x28];
    struct DynArray_VehicleEditorItemData* containerItemList;
    uint8_t _pad_3[0x28];
    _Bool recursiveItemPortIteration;
    _Bool showContainerItems;
    uint8_t _pad_4[0x6];
};




struct VehicleEditorPortsData {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* names;
    uint8_t _pad_1[0x28];
    struct DynArray_SItemPortDefTypes* types;
    uint8_t _pad_2[0x28];
};




struct SLocalPlayerShoppingPredefinedARParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct DynArray_SItemPortDefTypes* itemTypes;
    uint8_t _pad_2[0x28];
    struct SItemShopARParams* arParams;
    uint8_t _pad_3[0x90];
};




struct VehicleEditorItemStatData {
    uint8_t _pad_0[0x8];
    struct DynArray_SItemPortDefTypes* itemTypes;
    uint8_t _pad_1[0x28];
    struct DynArray_ARDataType* statTypes;
    uint8_t _pad_2[0x28];
};




struct AIObservableFilters {
    uint8_t _pad_0[0x8];
    struct DynArray_AIObservableFilterFlags* types;
    uint8_t _pad_1[0x28];
};




struct ArmsLockConfig {
    uint8_t _pad_0[0x8];
    float minWeight;
    float maxWeight;
    float baseMinDuration;
    float baseMaxDuration;
    float baseMinShaking;
    float baseMaxShaking;
    float heavyItemDropDelay;
    float shakingDecayRate;
    struct DynArray_ArmsLockSingleAbility* singleUseAbilities;
    uint8_t _pad_1[0x28];
    struct DynArray_ARDataType* abilitiesToLock;
    uint8_t _pad_2[0x28];
    struct DynArray_ARDataType* abilitiesThatPreventArmsLowering;
    uint8_t _pad_3[0x28];
    struct BreathingTriggerDef* breathTriggerOnDrop;
    uint8_t _pad_4[0x10];
};




struct OperatorModeDefinitionParams {
    uint8_t _pad_0[0x8];
    struct DynArray_OperatorModeDefinitions* operatorModes;
    uint8_t _pad_1[0x28];
};




struct PassengerScanProcedureParams {
    uint8_t _pad_0[0x8];
    struct Tag* requiredScanTag;
    uint8_t _pad_1[0x10];
    float emissionBaseline;
    float runtimeDuration;
    _Bool allowedInAIAutoScan;
    _Bool allowedInFocalPointScan;
    _Bool allowedInPassiveScan;
    _Bool allowedInPingBroadScan;
    _Bool allowedInPingFocusScan;
    uint8_t _pad_2[0x3];
    struct CLocIdentifier* displayForUninjured;
    struct CLocIdentifier* displayForDead;
    struct DynArray_PassengerScanStatusMappings* conditions;
    uint8_t _pad_3[0x28];
};




struct PersonalThoughtForceCloseActionsParams {
    uint8_t _pad_0[0x8];
    struct PersonalThoughtForceCloseActionList* globalActions;
    uint8_t _pad_1[0x48];
    struct DynArray_PersonalThoughtForceCloseActionList* actionsPerGameMode;
    uint8_t _pad_2[0x28];
};




struct DockingSlotVisibilityRule {
    uint8_t _pad_0[0x8];
    struct DynArray_ARDataType* modes;
    uint8_t _pad_1[0x28];
    struct DynArray_DockingSlotVisibilityTagSet* tagSets;
    uint8_t _pad_2[0x30];
};




struct SAsteroidShapeComponentParams {
    uint8_t _pad_0[0x18];
    int32_t rngSeed;
    uint8_t viewDistRatio;
    uint8_t lodRatio;
    uint8_t _pad_1[0x2];
    struct CryStringT* composition;
    uint8_t _pad_2[0x8];
    float noiseAmplitude;
    float noiseGranularity;
    float noiseRoughness;
    uint8_t _pad_3[0xc];
    float densityScale;
    float noiseFrequencyX;
    float noiseFrequencyY;
    float noiseFrequencyZ;
    struct DynArray_AsteroidFieldShapeLinkParams* shapeLinks;
    uint8_t _pad_4[0x28];
    struct DynArray_CryStringT* exclusionShapeLinks;
    uint8_t _pad_5[0x28];
};




struct ActorJumpNode {
    uint8_t _pad_0[0x8];
    enum ARDataType configVariant;
    uint8_t _pad_1[0x4];
    struct FragmentInfo* launch;
    uint8_t _pad_2[0x40];
    struct FragmentInfo* arc;
    uint8_t _pad_3[0x40];
    _Bool arcUseHandOverlay;
    _Bool arcAllowTurning;
    uint8_t _pad_4[0x6];
    struct DynArray_DurationTags* durationTags;
    uint8_t _pad_5[0x28];
    struct ActorFallOverlayNode* fallOverlay;
    uint8_t _pad_6[0x8];
    struct ActorFallNode* fall;
    uint8_t _pad_7[0x8];
    struct ActorLandingNode* landing;
    uint8_t _pad_8[0x8];
};




struct FidgetConfig {
    uint8_t _pad_0[0x8];
    float RepeatTime;
    uint8_t _pad_1[0x4];
    struct CryStringT* FragmentId;
    uint8_t _pad_2[0x8];
    struct DynArray_Fidget* Fidgets;
    uint8_t _pad_3[0x28];
    float BreakTime;
    uint8_t _pad_4[0x4];
};




struct MegaMap {
    uint8_t _pad_0[0x8];
    struct Level* level;
    uint8_t _pad_1[0x10];
    struct GameMode* gameMode;
    uint8_t _pad_2[0x10];
    struct CryStringT* trackViewIntro;
    uint8_t _pad_3[0x8];
    struct DynArray_SMegaMapSolarSystem* SolarSystems;
    uint8_t _pad_4[0x28];
    enum ARDataType singlePlayerOrMultiplayer;
    uint8_t _pad_5[0x4];
    struct CryStringT* subsumptionMission;
    uint8_t _pad_6[0x8];
    struct DynArray_AbstractMissionInitParam* subsumptionMissionInitParams;
    uint8_t _pad_7[0x28];
    struct ArenaCommanderScenarioParams* arenaCommanderScenarioParams;
    uint8_t _pad_8[0x8];
    struct MissionBroker* missionBroker;
    uint8_t _pad_9[0x10];
    struct StarMapObject* rootLocation;
    uint8_t _pad_10[0x10];
    enum ARDataType streamingMode;
    _Bool bindCullingEnabled;
    uint8_t _pad_11[0x3];
    int32_t defaultWinningTeamOverride;
    uint8_t _pad_12[0x4];
    struct CLocIdentifier* displayName;
    _Bool appearsInS42LevelSelect;
    uint8_t _pad_13[0x7];
    struct MegaMap* chapter;
    uint8_t _pad_14[0x10];
    _Bool skipLoadScreen;
    uint8_t _pad_15[0x7];
};




struct ChatEmotePack {
    uint8_t _pad_0[0x8];
    struct CryStringT* packType;
    uint8_t _pad_1[0x8];
    struct DynArray_ChatEmoteData* emotes;
    uint8_t _pad_2[0x28];
};




struct SSimpodComponentParams {
    uint8_t _pad_0[0x18];
    struct SSharedInteractionParams* startUsingInteraction;
    uint8_t _pad_1[0x8];
    struct SSharedInteractionParams* exitInteraction;
    uint8_t _pad_2[0x8];
    int32_t screenLayerIndex;
    uint8_t _pad_3[0x4];
    struct CryStringT* screenViewName;
    uint8_t _pad_4[0x8];
    struct DynArray_SSimpodSimulation* availableSimulations;
    uint8_t _pad_5[0x28];
    float cameraExposure;
    uint8_t _pad_6[0x4];
};




struct AwardService_Config {
    uint8_t _pad_0[0x8];
    struct DynArray_AwardService_Award* Awards;
    uint8_t _pad_1[0x28];
    struct DynArray_AwardService_Award* Played;
    uint8_t _pad_2[0x28];
};




struct SApplicationFormHeadHomeworld {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CLocIdentifier* displayDescription;
    struct CryStringT* imagePath;
    uint8_t _pad_1[0x8];
    struct DynArray_SApplicationFormBodyTypeOption* bodyTypes;
    uint8_t _pad_2[0x28];
};




struct InnerThought_LayoutGrid {
    uint8_t _pad_0[0x10];
    struct InnerThought_ColorParams* selectedColor;
    uint8_t _pad_1[0x10];
    struct InnerThought_ColorParams* unselectedColor;
    uint8_t _pad_2[0x10];
    struct InnerThought_ColorParams* secondaryColor;
    uint8_t _pad_3[0x10];
    struct Vec3* selectedOffset;
    uint8_t _pad_4[0x10];
    struct Vec3* unselectedOffset;
    uint8_t _pad_5[0x10];
    struct Vec3* secondaryOffset;
    uint8_t _pad_6[0x10];
    struct DynArray_InnerThought_LayoutGridSet* primarySets;
    uint8_t _pad_7[0x28];
    struct DynArray_InnerThought_LayoutGridSet* secondarySets;
    uint8_t _pad_8[0x28];
};




struct GForceParams {
    uint8_t _pad_0[0x8];
    float tolerance;
    float maxGees;
    float safeGStress;
    float stressMaxoutTime;
    float stressRecoveryTime;
    uint8_t _pad_1[0x4];
    struct DynArray_StatusEffectBuffMacro* stressEffects;
    uint8_t _pad_2[0x28];
};




struct SSCSignatureSystemAudioRuleset {
    uint8_t _pad_0[0x8];
    struct DynArray_SSCSignatureSystemAudioRule* rules;
    uint8_t _pad_1[0x28];
};




struct EVAGraph {
    uint8_t _pad_0[0x8];
    struct DynArray_EVAState* EVAStates;
    uint8_t _pad_1[0x28];
};




struct ScanDisplayLayoutParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ScanDisplaySectionParams* displaySections;
    uint8_t _pad_1[0x28];
    struct ScanDisplaySetupParams* contactDisplay;
    uint8_t _pad_2[0x8];
};




struct SeatUserActorCDIKRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_SeatUserActorCDIKMapping* filters;
    uint8_t _pad_1[0x28];
};




struct SOrganizationProperties {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* DisplayName;
    struct CLocIdentifier* Description;
    struct CLocIdentifier* Headquarters;
    uint64_t GEID;
    struct CryStringT* Logo;
    uint8_t _pad_2[0x8];
    struct SReputationContextUI* ReputationContextPropertiesUI;
    uint8_t _pad_3[0x10];
    _Bool Lawful;
    _Bool DisableReputationTracking;
    uint8_t _pad_4[0x6];
    struct DynArray_OrganizationRelationshipParams* Allies;
    uint8_t _pad_5[0x28];
    struct DynArray_OrganizationRelationshipParams* Enemies;
    uint8_t _pad_6[0x28];
    struct RelationStandingParams* hostilityParams;
    uint8_t _pad_7[0x50];
    struct RelationStandingParams* alliedParams;
    uint8_t _pad_8[0x50];
    int32_t MemberCount;
    uint8_t _pad_9[0x4];
    struct DynArray_SReputationContextBBPropertyParams* propertiesBB;
    uint8_t _pad_10[0x28];
    struct DynArray_SPerkReputationListParams* perkReputationRewardList;
    uint8_t _pad_11[0x28];
    struct DynArray_SandboxTriggerBaseDef* sandboxTriggers;
    uint8_t _pad_12[0x28];
};




struct ScanCustomDataInfo {
    uint8_t _pad_0[0x8];
    struct DynArray_CustomScanProcedureParams* scanProcedures;
    uint8_t _pad_1[0x28];
};




struct Announcer {
    uint8_t _pad_0[0x8];
    struct Announcer* base;
    uint8_t _pad_1[0x10];
    struct DynArray_Announcement* announcements;
    uint8_t _pad_2[0x28];
};




struct SCItemSeatAccessParams {
    uint8_t _pad_0[0x18];
    struct CryStringT* humanPassageADB;
    uint8_t _pad_1[0x8];
    struct DynArray_SCSeatAccessGatewayInteractionParams* gateways;
    uint8_t _pad_2[0x28];
    struct DynArray_SCSeatAccessEntranceInteractionParams* entrances;
    uint8_t _pad_3[0x28];
    struct DynArray_SCSeatAccessPassageInteractionParams* passages;
    uint8_t _pad_4[0x28];
};




struct SpawnDescription_ShipGroup {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct MissionPropertyValue_AIName* embeddedName;
    uint8_t _pad_2[0x8];
    struct DynArray_SpawnDescription_ShipOptions* ships;
    uint8_t _pad_3[0x28];
};




struct BuildingBlocks_TimelineTypeEmbedded {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_Keyframe* keyframes;
    uint8_t _pad_1[0x28];
};




struct ScanInformationTable {
    uint8_t _pad_0[0x8];
    struct DynArray_ScanInformationDef* defs;
    uint8_t _pad_1[0x28];
};




struct WeaponProceduralAnimation {
    uint8_t _pad_0[0x8];
    struct DynArray_WeaponProceduralClipsSetUp* weaponProceduralClipsSetUp;
    uint8_t _pad_1[0x28];
};




struct MissionScenario {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* description;
    uint8_t _pad_2[0x8];
    struct DynArray_MissionVariableBase* variables;
    uint8_t _pad_3[0x28];
    struct DynArray_MissionScenarioCycle* cycles;
    uint8_t _pad_4[0x28];
    struct MissionScenarioSchedule* schedule;
    uint8_t _pad_5[0x8];
    _Bool auto_create;
    uint8_t _pad_6[0x7];
};




struct ProcBreathingSetup {
    uint8_t _pad_0[0x8];
    struct DynArray_ProcBreathingExertion* exertionGraphs;
    uint8_t _pad_1[0x28];
    struct ProcBreathingHoldBreathNoise* holdBreathNoise;
    uint8_t _pad_2[0x8];
};




struct SRemoteRigidEntityControllerControlledGroupParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SRemoteRigidEntityControlledEntitiesParams* entityGroups;
    uint8_t _pad_1[0x28];
};




struct ScreenEffects_Debug {
    uint8_t _pad_0[0x8];
    struct DynArray_ScreenEffects_DebugEffect* effectList;
    uint8_t _pad_1[0x28];
};




struct BodyHealthConfig {
    uint8_t _pad_0[0x8];
    struct AudioRtpc* bleedingRtpc;
    uint8_t _pad_1[0x18];
    struct AudioRtpc* bleedRateRtpc;
    uint8_t _pad_2[0x18];
    _Bool isInvulnerable;
    _Bool isVulnerableOnlyToPlayer;
    _Bool setDamageEffectRatioOnChildren;
    uint8_t _pad_3[0x5];
    struct DynArray_BodyPartConfig* bodyPartConfigs;
    uint8_t _pad_4[0x28];
};




struct SAsteroids {
    uint8_t _pad_0[0x8];
    struct Vec2* textureSize;
    uint8_t _pad_1[0x8];
    struct DynArray_SMiniGameSpriteParams* gameSprites;
    uint8_t _pad_2[0x28];
    int32_t playerMaxLives;
    float playerRotationSpeed;
    float playerMoveSpeedMax;
    float playerAccel;
    float playerBrake;
    float playerShotDelayAuto;
    float playerShotDelayMin;
    float playerProjectileSpeed;
    float asteroidMaxSpeed;
    float asteroidMaxRotationSpeed;
    int32_t largeScore;
    int32_t midScore;
    int32_t smallScore;
    uint8_t _pad_3[0x4];
    struct Tag* playerFireTag;
    uint8_t _pad_4[0x10];
    struct Tag* enemyExplosionTag;
    uint8_t _pad_5[0x10];
};




struct SVanduulInvaders {
    uint8_t _pad_0[0x8];
    struct Vec2* textureSize;
    uint8_t _pad_1[0x8];
    struct DynArray_SMiniGameSpriteParams* gameSprites;
    uint8_t _pad_2[0x28];
    float roundTime;
    float deathImmunityTime;
    int32_t playerMaxLives;
    int32_t playerMaxHealth;
    float playerRotationSpeed;
    float playerMaxRotation;
    float playerShotDelayAuto;
    float playerShotDelayMin;
    float playerProjectileSpeed;
    float invaderShotDelayMin;
    float invaderShotDelayMax;
    float invaderShotDelayDecreasePerRound;
    float invaderMoveSpeedMin;
    float invaderMoveSpeedMax;
    float oneInvaderMoveSpeedMax;
    float invaderRotationLimit;
    float invaderMaxRadius;
    float invaderMinRadius;
    float invaderMinSpacing;
    float invaderMaxSpacing;
    float invaderRowSpaceOffset;
    float invaderRowScale;
    float invaderProjectileSpeed;
    int32_t row1Score;
    int32_t row2Score;
    int32_t row3Score;
    int32_t projectileScore;
    uint8_t _pad_3[0x4];
    struct Tag* explosionTag;
    uint8_t _pad_4[0x10];
    struct Tag* playerFireTag;
    uint8_t _pad_5[0x10];
    struct Tag* invaderFireTag;
    uint8_t _pad_6[0x10];
    struct Tag* gameOnTag;
    uint8_t _pad_7[0x10];
    struct Tag* gameOverTag;
    uint8_t _pad_8[0x10];
};




struct SReputationContextUI {
    uint8_t _pad_0[0x8];
    enum ARDataType sortOrderScope;
    uint8_t _pad_1[0x4];
    struct SReputationScopeContextUI* primaryScopeContext;
    uint8_t _pad_2[0x48];
    struct DynArray_SReputationScopeContextUI* scopeContextList;
    uint8_t _pad_3[0x28];
};




struct SReputationJournalEntriesParams {
    uint8_t _pad_0[0x8];
    struct FactionReputation* factionReputation;
    uint8_t _pad_1[0x10];
    struct SReputationScopeParams* reputationScope;
    uint8_t _pad_2[0x10];
    struct DynArray_SReputationJournalGroupParams* journalGroups;
    uint8_t _pad_3[0x28];
};




struct SCItemControlPriorities {
    uint8_t _pad_0[0x10];
    struct DynArray_SCItemControlPriorityTable* itemControlPriorities;
    uint8_t _pad_1[0x40];
};




struct VehicleCareerList {
    uint8_t _pad_0[0x8];
    struct DynArray_VehicleCareer* careerList;
    uint8_t _pad_1[0x28];
};




struct ItemAwardWeightingsRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_ItemAwardWeightings* itemAwardStructure;
    uint8_t _pad_1[0x28];
};




struct S42CommendationRules {
    uint8_t _pad_0[0x8];
    struct DynArray_S42CommendationRulesEntry* rules;
    uint8_t _pad_1[0x28];
};




struct LootArchetype {
    uint8_t _pad_0[0x8];
    struct TagList* excludedTags;
    uint8_t _pad_1[0x30];
    struct LootArchetypeOrGroup_Primary* primaryOrGroup;
    uint8_t _pad_2[0x30];
    struct DynArray_LootArchetypeOrGroup_Secondary* secondaryOrGroups;
    uint8_t _pad_3[0x28];
};




struct SSCSignatureSystemBaseSignatureParams {
    uint8_t _pad_0[0x8];
    struct DynArray_STaggedSignaturesEntry* taggedSignatures;
    uint8_t _pad_1[0x28];
    struct DynArray_SSignaturesCategoryEntry* signatureCategories;
    uint8_t _pad_2[0x28];
    struct DynArray_float* signatures;
    uint8_t _pad_3[0x28];
};




struct SEAUISpawnScreenFPSEquipmentParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SEAUISpawnScreenFPSEquipmentSlotParams* slots;
    uint8_t _pad_1[0x28];
};




struct PersonalThoughtInventoryCategoryFilter {
    uint8_t _pad_0[0x8];
    struct CryStringT* displayIconPath;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* name;
    _Bool disableForFPSKiosk;
    uint8_t _pad_2[0x7];
    struct DynArray_PersonalThoughtInventorySingleFilter* filters;
    uint8_t _pad_3[0x28];
};




struct PlayerChoice_PITConfig {
    uint8_t _pad_0[0x8];
    struct PersonalThoughtContextualActionsMenusParams* contextualActionsMenus;
    uint8_t _pad_1[0x60];
    int32_t maxMenuSize;
    _Bool showDisabledActions;
    uint8_t _pad_2[0x3];
    struct DynArray_PersonalThoughtCameraEffectsParams* cameraEffects;
    uint8_t _pad_3[0x28];
    struct PersonalThoughtForceCloseActionsParams* forceCloseActions;
    uint8_t _pad_4[0x80];
    struct PersonalThoughtHologramActionsList* hologramActionsList;
    uint8_t _pad_5[0x30];
    struct PersonalThoughtHologramParams* hologramParams;
    uint8_t _pad_6[0x70];
    struct HUDSilhouetteParams* softAttachColourParams;
    uint8_t _pad_7[0x28];
    struct PersonalThoughtCategoryAction* root;
    uint8_t _pad_8[0x70];
    struct PersonalThoughtActionDescriptionsList* actionDescriptionsList;
    uint8_t _pad_9[0x30];
    struct PersonalThoughtInventoryParams* inventoryParams;
    uint8_t _pad_10[0x258];
    struct PersonalThoughtQuickAccessWheels* quickAccessWheelsParams;
    uint8_t _pad_11[0x48];
    struct PersonalThoughtActionsRulesParams* actionRulesParams;
    uint8_t _pad_12[0x30];
    struct DynArray_InventoryDropDetachRules* dropDetachRules;
    uint8_t _pad_13[0x28];
};




struct InventoryConfig {
    uint8_t _pad_0[0x8];
    float selectTimer;
    float silhouettesAmount;
    float silhouettesFillStr;
    float silhouetteEdgeWidth;
    float silhouetteBlurRadius;
    uint8_t _pad_1[0x4];
    struct HUDSilhouetteParams* hoverParams;
    uint8_t _pad_2[0x28];
    struct HUDSilhouetteParams* hoverAttachmentsParams;
    uint8_t _pad_3[0x28];
    struct HUDSilhouetteParams* focusParams;
    uint8_t _pad_4[0x28];
    struct HUDSilhouetteParams* focusAttachmentsParams;
    uint8_t _pad_5[0x28];
    struct HUDSilhouetteParams* unavailabeParams;
    uint8_t _pad_6[0x28];
    struct HUDSilhouetteParams* unavailabeAttachmentsParams;
    uint8_t _pad_7[0x28];
    struct HUDSilhouetteParams* blockedHoverParams;
    uint8_t _pad_8[0x28];
    struct HUDSilhouetteParams* externalInventoryOutlineParams;
    uint8_t _pad_9[0x8];
    struct HUDSilhouetteParams* blockedInventoryOutlineParams;
    uint8_t _pad_10[0x8];
    struct DynArray_ItemCategory* skinEntityParentTypes;
    uint8_t _pad_11[0x28];
    struct DynArray_InventoryInteractionBlockingAttachedEntities* blockingRules;
    uint8_t _pad_12[0x28];
};




struct LootingInventoryParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* defaultTabIconPath;
    uint8_t _pad_1[0x8];
    struct DynArray_LootingTabParams* tabParams;
    uint8_t _pad_2[0x28];
};




struct BuildingBlocks_StaticArrayDataArray {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_BuildingBlocks_StaticArrayEntry* values;
    uint8_t _pad_2[0x28];
};




struct FoleyItem {
    uint8_t _pad_0[0x8];
    struct FoleyBone* bone;
    uint8_t _pad_1[0x10];
    struct FoleyBone* trackedBoneOverride;
    uint8_t _pad_2[0x10];
    struct FoleyBone* referenceBone;
    uint8_t _pad_3[0x10];
    struct CryStringT* velocityRTPCName;
    uint8_t _pad_4[0x8];
    float velocityRTPCMinimum;
    float velocityRTPCMaximum;
    struct CryStringT* collisionImpactRTPCName;
    uint8_t _pad_5[0x8];
    struct CryStringT* collisionScuffRTPCName;
    uint8_t _pad_6[0x8];
    struct CryStringT* equipmentMassRTPCName;
    uint8_t _pad_7[0x8];
    struct DynArray_FoleyOneShot* oneShots;
    uint8_t _pad_8[0x28];
    struct DynArray_FoleyLoop* loops;
    uint8_t _pad_9[0x28];
    struct DynArray_FoleyCollision* collisions;
    uint8_t _pad_10[0x28];
};




struct TestArrays {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* myStringArray;
    uint8_t _pad_1[0x28];
    struct DynArray_int8_t* myInt8Array;
    uint8_t _pad_2[0x28];
    struct DynArray_int16_t* myInt16Array;
    uint8_t _pad_3[0x28];
    struct DynArray_int32_t* myInt32Array;
    uint8_t _pad_4[0x28];
    struct DynArray_int64_t* myInt64Array;
    uint8_t _pad_5[0x28];
    struct DynArray_uint8_t* myUInt8Array;
    uint8_t _pad_6[0x28];
    struct DynArray_uint16_t* myUInt16Array;
    uint8_t _pad_7[0x28];
    struct DynArray_uint32_t* myUInt32Array;
    uint8_t _pad_8[0x28];
    struct DynArray_uint64_t* myUInt64Array;
    uint8_t _pad_9[0x28];
    struct DynArray_bool* myBooleanArray;
    uint8_t _pad_10[0x28];
    struct DynArray_float* myFloatArray;
    uint8_t _pad_11[0x28];
    struct DynArray_double* myDoubleArray;
    uint8_t _pad_12[0x28];
    struct DynArray_TestAtomics* myStructArray;
    uint8_t _pad_13[0x28];
    struct DynArray_TestAtomics* myWeakPtrArray;
    uint8_t _pad_14[0x28];
    struct DynArray_UnitTest* myReferenceArray;
    uint8_t _pad_15[0x28];
    struct DynArray_ARDataType* myEnumArray;
    uint8_t _pad_16[0x28];
    struct DynArray_CLocIdentifier* localeArray;
    uint8_t _pad_17[0x28];
    struct DynArray_CryStringT* enumFixedArray;
    uint8_t _pad_18[0x28];
};




struct MobiGlasAfterActionReportStatsBlock {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct DynArray_MobiGlasAfterActionReportStat* stats;
    uint8_t _pad_1[0x28];
};




struct SCItemControllableGroupParams {
    uint8_t _pad_0[0x10];
    struct DynArray_SCItemPriorityGroupParam* priorityGroups;
    uint8_t _pad_1[0x40];
};




struct HandholdComponentParams {
    uint8_t _pad_0[0x18];
    _Bool isEnabled;
    uint8_t _pad_1[0x7];
    struct DynArray_HandholdParams* handholds;
    uint8_t _pad_2[0x28];
    struct SSharedInteractionParams* grabInteractionTemplate;
    uint8_t _pad_3[0x8];
    struct SInteractionPointParams* grabIPTemplate;
    uint8_t _pad_4[0x8];
};




struct BuildingBlocks_StyleEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_BuildingBlocks_StyleConditionList* conditionsList;
    uint8_t _pad_2[0x28];
    struct DynArray_BuildingBlocks_FieldModifierBase* modifiers;
    uint8_t _pad_3[0x28];
    struct DynArray_BuildingBlocks_FieldTransitionBase* transitions;
    uint8_t _pad_4[0x30];
};




struct SQedVisualGraphParams {
    uint8_t _pad_0[0x8];
    struct Tag* effectStrengthLink;
    uint8_t _pad_1[0x10];
    struct DynArray_SQedVisualGraphStateParams* states;
    uint8_t _pad_2[0x28];
};




struct LightningBehavior {
    uint8_t _pad_0[0x8];
    struct DynArray_LightningBehavior_Effect* effects;
    uint8_t _pad_1[0x28];
};




struct UIBuildingBlocksEntityComponentParams {
    uint8_t _pad_0[0x20];
    struct DynArray_BuildingBlocksLayer* layers;
    uint8_t _pad_1[0x28];
    _Bool enableFullScreenMouse;
    uint8_t _pad_2[0x7];
    struct BuildingBlocks_Style* defaultStyle;
    uint8_t _pad_3[0x10];
    struct BuildingBlocks_PreviewScreenBase* defaultPreviewScene;
    uint8_t _pad_4[0x8];
};




struct SReputationStateMissionResultModifierParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SReputationStateMissionResultModifierListParams* missionResultStateModifiers;
    uint8_t _pad_1[0x28];
};




struct RaSTaRLibrary {
    uint8_t _pad_0[0x8];
    struct DynArray_RaSTaRLibraryCategory* categories;
    uint8_t _pad_1[0x28];
};




struct DialogueContentBank {
    uint8_t _pad_0[0x8];
    struct DialogueRealm* realm;
    uint8_t _pad_1[0x10];
    struct Character* character;
    uint8_t _pad_2[0x10];
    struct DynArray_DialogueContent* contents;
    uint8_t _pad_3[0x28];
};




struct SCharacterCustomizerMaterialEditParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SCharacterCustomizerBlemishMapParams* blemishMaps;
    uint8_t _pad_1[0x28];
    struct DynArray_SCharacterCustomizerSkinBaseMaterialList* baseSkinMaterials;
    uint8_t _pad_2[0x28];
    float hairDyeShiftMinFadeOut;
    uint8_t _pad_3[0x4];
    struct DynArray_SCharacterCustomizerHairLengthEntry* hairLengths;
    uint8_t _pad_4[0x28];
};




struct SCharacterCustomizerDialogueEntry {
    uint8_t _pad_0[0x8];
    struct CryGUID* guid;
    uint8_t _pad_1[0x8];
    struct DynArray_SCharacterCustomizerWildlineCondition* conditions;
    uint8_t _pad_2[0x28];
    struct GlobalResourceAudio* audioTrigger;
    uint8_t _pad_3[0x18];
    _Bool playOnlyOnce;
    uint8_t _pad_4[0x7];
};




struct TriggerConditionDataDef {
    uint8_t _pad_0[0x8];
    struct DynArray_TriggerConditionDef* conditions;
    uint8_t _pad_1[0x28];
};




struct ProceduralAimRigRecord {
    uint8_t _pad_0[0x18];
    int32_t aimLayer;
    uint8_t _pad_1[0x4];
    struct DynArray_ProcAimRigConfig* aimRigs;
    uint8_t _pad_2[0x28];
};




struct ScreenEffects_Library {
    uint8_t _pad_0[0x8];
    struct DynArray_ScreenEffects_Effect* effectList;
    uint8_t _pad_1[0x28];
};




struct SpawnDescription_EntityGroup {
    uint8_t _pad_0[0x8];
    struct CryStringT* Name;
    uint8_t _pad_1[0x8];
    struct DynArray_SpawnDescription_EntityOptions* entities;
    uint8_t _pad_2[0x28];
};




struct SActorForceReactionProceduralVanduulLeanPoseList {
    uint8_t _pad_0[0x8];
    struct DynArray_SActorForceReactionProceduralVanduulLeanPose* poseTypes;
    uint8_t _pad_1[0x28];
};




struct SActorForceReactionProceduralXianLeanPoseList {
    uint8_t _pad_0[0x8];
    struct DynArray_SActorForceReactionProceduralXianLeanPose* poseTypes;
    uint8_t _pad_1[0x28];
};




struct SActorForceReactionProceduralHumanLeanPoseList {
    uint8_t _pad_0[0x8];
    struct DynArray_SActorForceReactionProceduralHumanLeanPose* poseTypes;
    uint8_t _pad_1[0x28];
};




struct BuildingBlocks_BindingsIntegerFromNumberCompare {
    uint8_t _pad_0[0x50];
    int64_t default_;
    struct DynArray_BuildingBlocks_NumberCompareStatement* statements;
    uint8_t _pad_1[0x28];
    struct BuildingBlocks_BindingsNumberBase* input;
    uint8_t _pad_2[0x8];
};




struct SReputationMissionRewardBonusParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SReputationMissionGiverRewardBonusParams* missionGiverBonuses;
    uint8_t _pad_1[0x28];
};




struct CockpitResponse {
    uint8_t _pad_0[0x8];
    struct CryStringT* concept_;
    uint8_t _pad_1[0x8];
    _Bool canPlayWhenLanded;
    _Bool canPlayWhenRacing;
    uint8_t _pad_2[0x6];
    struct DynArray_CockpitResponseVariation* variations;
    uint8_t _pad_3[0x28];
};




struct SHelmetStateMachineParams {
    uint8_t _pad_0[0x8];
    enum ARDataType stateMachine;
    uint8_t _pad_1[0x4];
    struct DynArray_SHelmetStateBaseParams* states;
    uint8_t _pad_2[0x28];
    enum ARDataType startState;
    uint8_t _pad_3[0x4];
};




struct CameraLensParams {
    uint8_t _pad_0[0x8];
    float BloomIntensity;
    float FlareIntensity;
    struct CameraLensStreak* Streak;
    uint8_t _pad_1[0x8];
    struct DynArray_CameraLensGhostSet* GhostSets;
    uint8_t _pad_2[0x28];
};




struct SEALoadoutSet {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* displayName;
    struct CryStringT* icon;
    uint8_t _pad_1[0x8];
    struct DynArray_SEALoadoutItem* itemSlots;
    uint8_t _pad_2[0x28];
};




struct UsableArchetypes {
    uint8_t _pad_0[0x8];
    struct DynArray_UsableArchetype* archetypes;
    uint8_t _pad_1[0x28];
};




struct SpecialEventDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_SpecialEventDay* days;
    uint8_t _pad_1[0x28];
};




struct SEAUIScoreboardComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SScoreboard* scoreboards;
    uint8_t _pad_1[0x28];
    struct ContextMenu* contextMenu;
    uint8_t _pad_2[0x30];
};




struct ActorDuckingParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* heightRefBone;
    uint8_t _pad_1[0x8];
    struct CryStringT* hipBone;
    uint8_t _pad_2[0x8];
    struct CryStringT* headLowpassBone;
    uint8_t _pad_3[0x8];
    float refBoneDesiredClearance;
    uint8_t _pad_4[0x4];
    struct Vec3* collisionCheckOrigin;
    uint8_t _pad_5[0x10];
    float collisionCheckDistance;
    float minDuckHeight;
    struct DuckPose* noWeaponPoseParams;
    uint8_t _pad_6[0x18];
    struct DuckPose* stockedPoseParams;
    uint8_t _pad_7[0x18];
    struct DynArray_SpineBone* spine;
    uint8_t _pad_8[0x28];
};




struct GameDifficultyModifiers {
    uint8_t _pad_0[0x8];
    struct DynArray_DifficultyLevelParams* difficulties;
    uint8_t _pad_1[0x28];
};




struct ContextualCommunicationConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_ContextualCommunicationResponse* responseEntries;
    uint8_t _pad_1[0x28];
};




struct PlayerUsableUseChannelInstance {
    uint8_t _pad_0[0x8];
    struct UsableUseChannelInstance* useChannelInstance;
    uint8_t _pad_1[0x8];
    enum ARDataType delinkOnEnterComplete;
    uint8_t _pad_2[0x4];
    struct DynArray_UsableChannelInputActionGroup* availableActionGroups;
    uint8_t _pad_3[0x28];
};




struct ItemResourceCompositionMap {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* name;
    struct DynArray_ResourceType* containerResources;
    uint8_t _pad_1[0x28];
    _Bool affectsItemFunctionality;
    _Bool isShared;
    _Bool itemMustBeOnline;
    uint8_t _pad_2[0x5];
};




struct SActorForceReactionFilteredStaggerConfigDef {
    uint8_t _pad_0[0x8];
    struct SActorForceReactionBlockConfig* reactionBlock;
    uint8_t _pad_1[0x30];
    struct DynArray_SActorForceReactionFilteredStaggerRangeDef* staggerFilters;
    uint8_t _pad_2[0x28];
};




struct AudioValueOutputSetup {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioValueOutput* outputs;
    uint8_t _pad_1[0x28];
};




struct SHackingDifficultyPresetOverride {
    uint8_t _pad_0[0x8];
    int32_t boardWidthOverride;
    int32_t boardHeightOverride;
    float timelimitOverride;
    uint8_t _pad_1[0x4];
    struct DynArray_int32_t* linkGroupsOverride;
    uint8_t _pad_2[0x28];
    int32_t minSpawnPointsCountOverride;
    int32_t maxSpawnPointsCountOverride;
    float defenseAlertDurationOverride;
    int32_t seedOverride;
    enum ARDataType codeOnlyInputFlagOverride;
    uint8_t _pad_3[0x4];
    struct SHackingCodeInputModifiersParams* codeInputModifiersOverride;
    uint8_t _pad_4[0x8];
    int32_t finalStageRepetitionsOverride;
    uint8_t _pad_5[0x4];
    struct DynArray_SHackingThreatLevelParams* threatLevelsOverride;
    uint8_t _pad_6[0x28];
};




struct SHackingThreatLevelsPreset {
    uint8_t _pad_0[0x8];
    int32_t finalStageRepetitions;
    uint8_t _pad_1[0x4];
    struct DynArray_SHackingThreatLevelParams* threatLevels;
    uint8_t _pad_2[0x28];
};




struct RadarContactGroupEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_RadarContactTypeEntry* types;
    uint8_t _pad_2[0x28];
    struct DynArray_RadarContactSubGroupEntry* children;
    uint8_t _pad_3[0x28];
};




struct ActorStatusUIData {
    uint8_t _pad_0[0x8];
    struct CLocIdentifier* lifeExpectancyWarning;
    struct CLocIdentifier* downedRescueNotification;
    struct ActorStatusIncapacitatedUIData* incapacitatedWarningStrings;
    uint8_t _pad_1[0x50];
    struct DynArray_ActorStatusUIWarning* actorStatusWarnings;
    uint8_t _pad_2[0x28];
    struct HealthIconData* healthIconData;
    uint8_t _pad_3[0x38];
};




struct ActorStatusComponent {
    uint8_t _pad_0[0x8];
    struct DynArray_SpeedThreshold* speedThresholds;
    uint8_t _pad_1[0x28];
    struct DynArray_ActorStatData* actorStats;
    uint8_t _pad_2[0x28];
    struct DynArray_ActorStatusPreset* actorStatusPresets;
    uint8_t _pad_3[0x28];
    struct DynArray_LinkedStatSetupPreset* linkedStatPresets;
    uint8_t _pad_4[0x28];
    struct DynArray_StatusMaskedRetriggerPreset* maskedRetriggerPresets;
    uint8_t _pad_5[0x28];
    struct ActorStatusUIData* actorStatusUIData;
    uint8_t _pad_6[0xd8];
    struct DynArray_AbilityStatusCosts* abilityStatusCosts;
    uint8_t _pad_7[0x28];
    struct DynArray_ActionStatusCosts* actionStatusCosts;
    uint8_t _pad_8[0x28];
    struct DynArray_StatusEffectAbilityLock* statusEffectAbilityLocks;
    uint8_t _pad_9[0x28];
    struct ConsumableParams* consumptionParams;
    uint8_t _pad_10[0x10];
    struct ArmsLockConfig* armsLockParams;
    uint8_t _pad_11[0xc8];
    struct DriftingConsciousnessConfig* driftingConsciousnessParams;
    uint8_t _pad_12[0x18];
    struct DownedConfig* downedParams;
    uint8_t _pad_13[0x38];
    struct DriftingDrunkConfig* driftingDrunkParams;
    uint8_t _pad_14[0x90];
    struct SignatureParams* actorSignatureParams;
    uint8_t _pad_15[0x8];
    struct ResistanceWeightParams* bodyResistanceWeights;
    uint8_t _pad_16[0x18];
    struct RevivalFadeInParams* revivalFadeinParams;
    uint8_t _pad_17[0x8];
    struct ActorStatusGlobalParams* globalParams;
    uint8_t _pad_18[0x10];
    float BDLSafeLimit;
    uint8_t _pad_19[0x4];
    struct ActorToxicGasParams* toxicGasParams;
    uint8_t _pad_20[0x8];
    struct HygieneParams* hygieneParams;
    uint8_t _pad_21[0x20];
};




struct SEntityComponentFrontendEAUIProviderParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SMatchNetworkTypeParams* matchNetworkTypeNames;
    uint8_t _pad_1[0x28];
    struct CLocIdentifier* anyMapOptionName;
    struct CLocIdentifier* anyMapOptionDescription;
    struct CryStringT* anyMapOptionThumbnail;
    uint8_t _pad_2[0x8];
    struct CLocIdentifier* anyTeamOptionName;
    struct CLocIdentifier* anyTeamOptionDescription;
    struct CLocIdentifier* locReadyCount;
    struct CLocIdentifier* locErrorReadyCheck;
    struct CLocIdentifier* locErrorPlayerLimit;
    struct CLocIdentifier* locErrorMissingBadge;
    struct CLocIdentifier* locErrorMinPlayers;
    enum ARDataType featuredGameMode;
    uint8_t _pad_3[0x4];
    struct DynArray_PopupParams* popupParams;
    uint8_t _pad_4[0x28];
    struct DynArray_EAPatchNoteCategoryParams* patchNoteCategories;
    uint8_t _pad_5[0x28];
    struct DynArray_SocialTab* socialTabs;
    uint8_t _pad_6[0x28];
    struct EAExperimentalModeResetTimeParams* experimentalModeResetTime;
    uint8_t _pad_7[0x18];
    struct DynArray_EASpecialEventInformationParams* specialEventInformation;
    uint8_t _pad_8[0x28];
};




struct EntityEffectSystem_MaterialEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct DynArray_EntityEffectSystem_MaterialPropertyLink* propertyLinks;
    uint8_t _pad_3[0xa0];
};




struct EntityEffectSystem_MaterialTagEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct DynArray_EntityEffectSystem_MaterialPropertyLink* propertyLinks;
    uint8_t _pad_3[0xa0];
    struct Tag* tag;
    uint8_t _pad_4[0x10];
};




struct EntityEffectSystem_MaterialTriggerEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct DynArray_EntityEffectSystem_MaterialPropertyLink* propertyLinks;
    uint8_t _pad_3[0xa0];
    float duration;
    uint8_t _pad_4[0x4];
    struct Tag* trigger;
    uint8_t _pad_5[0x10];
};




struct EntityEffectSystem_LightTriggerEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_3[0x8];
    struct DynArray_EntityEffectSystem_LightPropertyLink* propertyLinks;
    uint8_t _pad_4[0x28];
    struct RGB* color;
    uint8_t _pad_5[0x10];
    _Bool useTemperature;
    uint8_t _pad_6[0x3];
    float colorTemperature;
    float diffuseMultiplier;
    uint8_t viewDistanceRatio;
    _Bool castShadow;
    uint8_t _pad_7[0x2];
    enum ARDataType shadowQualityCap;
    float maxShadowCastDistance;
    _Bool ambient;
    _Bool softBulb;
    _Bool fakeLight;
    _Bool affectsFog;
    _Bool affectsGI;
    _Bool affectThisAreaOnly;
    _Bool holographic;
    _Bool visibleThirdPerson;
    _Bool visibleFirstPerson;
    _Bool distantImposter;
    _Bool visibleShadows;
    uint8_t _pad_8[0x1];
    enum ARDataType lightImportance;
    struct EntityEffectSystem_LightType* lightType;
    uint8_t _pad_9[0x8];
    struct EntityEffectSystem_LightLink* lightLink;
    uint8_t _pad_10[0x8];
    struct LightFlareParams* flare;
    uint8_t _pad_11[0x1a0];
    float duration;
    uint8_t _pad_12[0x4];
    struct Tag* trigger;
    uint8_t _pad_13[0x10];
};




struct EntityEffectSystem_LightEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_3[0x8];
    struct DynArray_EntityEffectSystem_LightPropertyLink* propertyLinks;
    uint8_t _pad_4[0x28];
    struct RGB* color;
    uint8_t _pad_5[0x10];
    _Bool useTemperature;
    uint8_t _pad_6[0x3];
    float colorTemperature;
    float diffuseMultiplier;
    uint8_t viewDistanceRatio;
    _Bool castShadow;
    uint8_t _pad_7[0x2];
    enum ARDataType shadowQualityCap;
    float maxShadowCastDistance;
    _Bool ambient;
    _Bool softBulb;
    _Bool fakeLight;
    _Bool affectsFog;
    _Bool affectsGI;
    _Bool affectThisAreaOnly;
    _Bool holographic;
    _Bool visibleThirdPerson;
    _Bool visibleFirstPerson;
    _Bool distantImposter;
    _Bool visibleShadows;
    uint8_t _pad_8[0x1];
    enum ARDataType lightImportance;
    struct EntityEffectSystem_LightType* lightType;
    uint8_t _pad_9[0x8];
    struct EntityEffectSystem_LightLink* lightLink;
    uint8_t _pad_10[0x8];
    struct LightFlareParams* flare;
    uint8_t _pad_11[0x1a0];
};




struct EntityEffectSystem_LightTagEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_3[0x8];
    struct DynArray_EntityEffectSystem_LightPropertyLink* propertyLinks;
    uint8_t _pad_4[0x28];
    struct RGB* color;
    uint8_t _pad_5[0x10];
    _Bool useTemperature;
    uint8_t _pad_6[0x3];
    float colorTemperature;
    float diffuseMultiplier;
    uint8_t viewDistanceRatio;
    _Bool castShadow;
    uint8_t _pad_7[0x2];
    enum ARDataType shadowQualityCap;
    float maxShadowCastDistance;
    _Bool ambient;
    _Bool softBulb;
    _Bool fakeLight;
    _Bool affectsFog;
    _Bool affectsGI;
    _Bool affectThisAreaOnly;
    _Bool holographic;
    _Bool visibleThirdPerson;
    _Bool visibleFirstPerson;
    _Bool distantImposter;
    _Bool visibleShadows;
    uint8_t _pad_8[0x1];
    enum ARDataType lightImportance;
    struct EntityEffectSystem_LightType* lightType;
    uint8_t _pad_9[0x8];
    struct EntityEffectSystem_LightLink* lightLink;
    uint8_t _pad_10[0x8];
    struct LightFlareParams* flare;
    uint8_t _pad_11[0x1a0];
    struct Tag* tag;
    uint8_t _pad_12[0x10];
};




struct SEntityEffectSystem_SoundTriggerEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct GlobalResourceAudio* soundEffect;
    uint8_t _pad_3[0x18];
    _Bool multiPosition;
    _Bool useDefaultProxy;
    uint8_t _pad_4[0x6];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_5[0x8];
    struct DynArray_SEntityEffectSystem_SoundPropertyLink* propertyLinks;
    uint8_t _pad_6[0x120];
    struct Tag* trigger;
    uint8_t _pad_7[0x10];
};




struct SEntityEffectSystem_SoundTagEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct GlobalResourceAudio* soundEffect;
    uint8_t _pad_3[0x18];
    _Bool multiPosition;
    _Bool useDefaultProxy;
    uint8_t _pad_4[0x6];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_5[0x8];
    struct DynArray_SEntityEffectSystem_SoundPropertyLink* propertyLinks;
    uint8_t _pad_6[0x120];
    struct Tag* tag;
    uint8_t _pad_7[0x10];
};




struct SEntityEffectSystem_SoundEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct GlobalResourceAudio* soundEffect;
    uint8_t _pad_3[0x18];
    _Bool multiPosition;
    _Bool useDefaultProxy;
    uint8_t _pad_4[0x6];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_5[0x8];
    struct DynArray_SEntityEffectSystem_SoundPropertyLink* propertyLinks;
    uint8_t _pad_6[0x120];
};




struct SEntityEffectSystem_ParticleTagEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_3[0x10];
    _Bool primed;
    _Bool holographic;
    _Bool updateEntityBounds;
    uint8_t _pad_4[0x1];
    enum ARDataType clipToVisArea;
    enum ARDataType gpuVisAreaCullingMode;
    uint8_t _pad_5[0x4];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_6[0x8];
    struct DynArray_SEntityEffectSystem_ParticlePropertyLink* propertyLinks;
    uint8_t _pad_7[0x130];
    struct Tag* tag;
    uint8_t _pad_8[0x10];
};




struct SEntityEffectSystem_ParticleEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_3[0x10];
    _Bool primed;
    _Bool holographic;
    _Bool updateEntityBounds;
    uint8_t _pad_4[0x1];
    enum ARDataType clipToVisArea;
    enum ARDataType gpuVisAreaCullingMode;
    uint8_t _pad_5[0x4];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_6[0x8];
    struct DynArray_SEntityEffectSystem_ParticlePropertyLink* propertyLinks;
    uint8_t _pad_7[0x130];
};




struct SEntityEffectSystem_ParticleTriggerEffect {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    _Bool enabled;
    uint8_t _pad_2[0x7];
    struct GlobalResourceParticle* particleEffect;
    uint8_t _pad_3[0x10];
    _Bool primed;
    _Bool holographic;
    _Bool updateEntityBounds;
    uint8_t _pad_4[0x1];
    enum ARDataType clipToVisArea;
    enum ARDataType gpuVisAreaCullingMode;
    uint8_t _pad_5[0x4];
    struct SEntityEffectSystem_Attachment* attachmentSettings;
    uint8_t _pad_6[0x8];
    struct DynArray_SEntityEffectSystem_ParticlePropertyLink* propertyLinks;
    uint8_t _pad_7[0x130];
    struct Tag* trigger;
    uint8_t _pad_8[0x10];
};




struct ExtendedNameDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_ExtendedNameData* data;
    uint8_t _pad_1[0x28];
};




struct AnimationGraph_Timeline {
    uint8_t _pad_0[0x8];
    struct CryStringT* timerID;
    uint8_t _pad_1[0x8];
    uint32_t frameRate;
    uint8_t _pad_2[0x4];
    struct DynArray_AnimationGraph_Track* tracks;
    uint8_t _pad_3[0x28];
};




struct SActorLocomotionFidgetDef {
    uint8_t _pad_0[0x8];
    _Bool enable;
    uint8_t _pad_1[0x7];
    struct DynArray_SActorLocomotionFidgetStateFilteredDef* stateDefs;
    uint8_t _pad_2[0x28];
};




struct Investigation_Location {
    uint8_t _pad_0[0x8];
    struct DynArray_Investigation_ClueItem* clueItems;
    uint8_t _pad_1[0x28];
};




struct TraversalCostConfig {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct DynArray_CostModifierPerAgentType* costs;
    uint8_t _pad_2[0x28];
};




struct SActorForceReactionsDef {
    uint8_t _pad_0[0x8];
    float physicsImpulseScale;
    float explosionsImpulseScale;
    float meleeImpulseScale;
    float bulletImpulseScale;
    struct SActorForceReactionExternalImpulseDef* externalImpulseConfig;
    uint8_t _pad_1[0x18];
    struct SActorForceReactionSustainedForceDef* sustainedForceConfig;
    uint8_t _pad_2[0xb8];
    struct DynArray_SActorForceReactionsVehicleForceDampeningDef* vehicleForceDampeningConfig;
    uint8_t _pad_3[0x28];
    struct SActorForceReactionsStunDef* stunConfig;
    uint8_t _pad_4[0x18];
    struct SActorForceReactionLimitDef* reactionLimits;
    uint8_t _pad_5[0x18];
    struct SActorForceReactionGlobalEffectConfig* effectGlobalConfig;
    uint8_t _pad_6[0xb8];
    struct SActorForceReactionGlobalStaggerConfig* staggerGlobalConfig;
    uint8_t _pad_7[0x58];
    struct SActorForceReactionImpulseAccumulationConfig* impulseAccumulationConfig;
    uint8_t _pad_8[0x10];
    struct DynArray_SActorForceReactionFilterDef* filters;
    uint8_t _pad_9[0x28];
    struct DynArray_SActorForceReactionTwitchConfigDef* twitchConfigs;
    uint8_t _pad_10[0x28];
    struct DynArray_SActorForceReactionFlinchConfigDef* flinchConfigs;
    uint8_t _pad_11[0x28];
    struct DynArray_SActorForceReactionFlinchConfigDef* sustainedDeltaFlinchConfigs;
    uint8_t _pad_12[0x28];
    struct SActorForceReactionFilteredStaggerConfigDef* directStaggerConfig;
    uint8_t _pad_13[0x68];
    struct SActorForceReactionFilteredStaggerConfigDef* indirectStaggerConfig;
    uint8_t _pad_14[0x68];
    struct SActorForceReactionUnfilteredStaggerConfigDef* sustainedDeltaStaggerConfig;
    uint8_t _pad_15[0x68];
    struct SActorForceReactionKnockdownConfigDef* directKnockdownConfig;
    uint8_t _pad_16[0x68];
    struct SActorForceReactionKnockdownConfigDef* indirectKnockdownConfig;
    uint8_t _pad_17[0x68];
    struct SActorForceReactionKnockdownConfigDef* sustainedDeltaKnockdownConfig;
    uint8_t _pad_18[0x68];
    struct SActorForceReactionKnockdownConfigDef* sustainedKnockdownConfig;
    uint8_t _pad_19[0x68];
    struct SActorForceReactionStumbleConfigDef* sustainedStumbleConfig;
    uint8_t _pad_20[0x8];
    struct SActorForceReactionLeanConfigDef* leanConfig;
    uint8_t _pad_21[0x48];
};




struct AIVisualFieldProfile {
    uint8_t _pad_0[0x8];
    struct DynArray_AIContextualVisualFieldProfile* profile;
    uint8_t _pad_1[0x28];
};




struct InteractionConditionList {
    uint8_t _pad_0[0x8];
    struct DynArray_InteractionConditionPreset* presetList;
    uint8_t _pad_1[0x28];
    struct DynArray_InteractionConditionParams* conditionParams;
    uint8_t _pad_2[0x28];
    struct DynArray_InteractionConditionParams* conditionToHideParams;
    uint8_t _pad_3[0x28];
};




struct SGroupedLoadouts {
    uint8_t _pad_0[0x8];
    enum ARDataType Group;
    uint8_t _pad_1[0x4];
    struct SLoadoutRequirementBase* Requirement;
    uint8_t _pad_2[0x8];
    struct DynArray_SItemPortLoadoutBaseParams* Loadouts;
    uint8_t _pad_3[0x28];
};




struct StatusEffectSetup {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorStatusData* actorStatuses;
    uint8_t _pad_1[0x28];
};




struct ConversationBank {
    uint8_t _pad_0[0x8];
    struct CryStringT* region;
    uint8_t _pad_1[0x8];
    struct DynArray_Conversation* conversations;
    uint8_t _pad_2[0x28];
};




struct VibrationAudioPointDef {
    uint8_t _pad_0[0x8];
    struct DynArray_VibrationAudioEntry* vibrationAudioEntries;
    uint8_t _pad_1[0x28];
    float customFalloff;
    uint8_t _pad_2[0x4];
};




struct AudioEnvironmentFeedbackTagAndEvent {
    uint8_t _pad_0[0x8];
    struct Tag* tag;
    uint8_t _pad_1[0x10];
    struct GlobalResourceAudio* loopStart;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* loopStop;
    uint8_t _pad_3[0x18];
    struct DynArray_AudioEnvironmentMovementRtpcBehavior* movementRtpcs;
    uint8_t _pad_4[0x28];
};




struct ThrusterAudioComponentParams {
    uint8_t _pad_0[0x18];
    struct AudioThrusterProperties* properties;
    uint8_t _pad_1[0x60];
    struct GlobalResourceAudio* spoolStart;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* spoolStop;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* spoolUpStarted;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* spoolUpCompleted;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* spoolDownStarted;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* spoolDownCompleted;
    uint8_t _pad_7[0x18];
    struct AudioRtpc* timeSinceLastOneshotAtSpoolBegin;
    uint8_t _pad_8[0x18];
    struct AudioRtpc* timeSinceLastOneshotAtSpoolEnd;
    uint8_t _pad_9[0x18];
    float spoolTime;
    uint8_t _pad_10[0x4];
    struct AudioRtpc* spoolRTPC;
    uint8_t _pad_11[0x18];
    _Bool avoidSpoolOneshotsOnLowRankShips;
    uint8_t _pad_12[0x7];
    struct GlobalResourceAudio* thrusterLoopStart;
    uint8_t _pad_13[0x18];
    struct GlobalResourceAudio* thrusterLoopStop;
    uint8_t _pad_14[0x18];
    struct GlobalResourceAudio* afterburnerEnabledLoopStart;
    uint8_t _pad_15[0x18];
    struct GlobalResourceAudio* afterburnerEnabledLoopStop;
    uint8_t _pad_16[0x18];
    struct GlobalResourceAudio* afterburnerEnabledOneShot;
    uint8_t _pad_17[0x18];
    struct AudioRtpc* timeSinceLastAfterburnerEnabledRtpc;
    uint8_t _pad_18[0x18];
    struct GlobalResourceAudio* afterburnerDisabledOneShot;
    uint8_t _pad_19[0x18];
    _Bool avoidAfterburnerOneShotsOnLowRankShips;
    uint8_t _pad_20[0x7];
    struct AudioRtpc* timeSinceLastAfterburnerDisabledRtpc;
    uint8_t _pad_21[0x18];
    struct GlobalResourceAudio* thrusterOnOneShot;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* timeSinceLastThrusterOnRtpc;
    uint8_t _pad_23[0x18];
    struct GlobalResourceAudio* thrusterOffOneShot;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* timeSinceLastThrusterOffRtpc;
    uint8_t _pad_25[0x18];
    float thrusterFireStartedThreshold;
    _Bool avoidThrusterFireOneShotsOnLowRankShips;
    uint8_t _pad_26[0x3];
    struct GlobalResourceAudio* misfireLoopStart;
    uint8_t _pad_27[0x18];
    struct GlobalResourceAudio* misfireLoopStop;
    uint8_t _pad_28[0x18];
    struct GlobalResourceAudio* misfireOnOneshot;
    uint8_t _pad_29[0x18];
    struct AudioRtpc* timeSinceLastMisfireOnRtpc;
    uint8_t _pad_30[0x18];
    struct GlobalResourceAudio* misfireOffOneshot;
    uint8_t _pad_31[0x18];
    struct AudioRtpc* timeSinceLastMisfireOffRtpc;
    uint8_t _pad_32[0x18];
    _Bool avoidMisfireOneShotsOnLowRankShips;
    uint8_t _pad_33[0x7];
    struct DynArray_ThrusterOutputToRtpcList* thrustersOutputsToRtpcs;
    uint8_t _pad_34[0x28];
    struct AudioRtpc* thrusterDegradationRtpc;
    uint8_t _pad_35[0x18];
    _Bool isMultiposition;
    uint8_t _pad_36[0x7];
    struct CryStringT* boneName;
    uint8_t _pad_37[0x8];
    struct Ang3* offsetRotation;
    uint8_t _pad_38[0x10];
    struct Vec3* offsetTranslation;
    uint8_t _pad_39[0x10];
    _Bool updateLocalPosition;
    uint8_t _pad_40[0x3];
    float vibrationModifier;
    struct AudioSwitch* manufacturerAudioSwitch;
    uint8_t _pad_41[0x30];
    struct AudioSwitch* sizeAudioSwitch;
    uint8_t _pad_42[0x30];
    struct AudioSwitch* classAudioSwitch;
    uint8_t _pad_43[0x30];
    struct AudioSwitch* thrusterPanningAudioSwitch;
    uint8_t _pad_44[0x30];
    float motionToThrustCrossover;
    uint8_t _pad_45[0x4];
};




struct ShipAudioComponentParams {
    uint8_t _pad_0[0x18];
    struct Tag* shipManufacturerTag;
    uint8_t _pad_1[0x10];
    struct AudioRtpc* shipBuildQualityRtpc;
    uint8_t _pad_2[0x18];
    float shipBuildQualityRtpcValue;
    uint8_t _pad_3[0x4];
    struct AudioSwitch* shipSizeSwitch;
    uint8_t _pad_4[0x30];
    struct AudioRtpc* isClientDrivingRtpc;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* landedSweetener;
    uint8_t _pad_6[0x18];
    struct GlobalResourceAudio* contactSweetener;
    uint8_t _pad_7[0x18];
    struct GlobalResourceAudio* shipMovementRealisticStart;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* shipMovementRealisticStop;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* shipMovementSoundSimStart;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* shipMovementSoundSimStop;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* masterModeSpoolingStartedAudioTrigger;
    uint8_t _pad_12[0x18];
    struct GlobalResourceAudio* masterModeSpoolingFinishedAudioTrigger;
    uint8_t _pad_13[0x18];
    struct Ang3* offsetRotation;
    uint8_t _pad_14[0x10];
    struct Vec3* offsetTranslation;
    uint8_t _pad_15[0x10];
    _Bool useDeprecatedIfcsOutputsToRtpcs;
    uint8_t _pad_16[0x7];
    struct DynArray_IFCSOutputToRtpcList* ifcsOutputsToRtpcsDEPRECATED;
    uint8_t _pad_17[0x28];
    struct DynArray_IFCSOutputToRtpcList* ifcsOutputsToRtpcs;
    uint8_t _pad_18[0x28];
    struct DynArray_ShipWideAudioObject* shipWideAudioObjects;
    uint8_t _pad_19[0x28];
    float vibrationModifierTranslation;
    float vibrationModifierRotation;
    float vibrationModifierLift;
    float vibrationModifierDrag;
    float expectedCombinedThrusterSize;
    uint8_t _pad_20[0x4];
    struct AudioRtpc* shipHealthRtpc;
    uint8_t _pad_21[0x18];
    struct AudioRtpc* thrustersSpoolStateRtpc;
    uint8_t _pad_22[0x18];
    struct AudioRtpc* thrusterHealthRtpc;
    uint8_t _pad_23[0x18];
    struct AudioRtpc* thrustersTemperatureRatioRtpc;
    uint8_t _pad_24[0x18];
    struct AudioRtpc* thrustersOverheatRtpc;
    uint8_t _pad_25[0x18];
    struct AudioRtpc* misfireRtpc;
    uint8_t _pad_26[0x18];
    struct AudioRtpc* techLevelRtpc;
    uint8_t _pad_27[0x18];
    struct AudioRtpc* civilianLowRtpc;
    uint8_t _pad_28[0x18];
    struct AudioRtpc* civilianMedRtpc;
    uint8_t _pad_29[0x18];
    struct AudioRtpc* civilianHighRtpc;
    uint8_t _pad_30[0x18];
    struct AudioRtpc* industrialRtpc;
    uint8_t _pad_31[0x18];
    struct AudioRtpc* militaryRtpc;
    uint8_t _pad_32[0x18];
    struct AudioRtpc* racingRtpc;
    uint8_t _pad_33[0x18];
    struct AudioRtpc* stealthRtpc;
    uint8_t _pad_34[0x18];
    struct AudioRtpc* degradationRtpc;
    uint8_t _pad_35[0x18];
    struct GlobalResourceAudio* shipCollisionFeedback;
    uint8_t _pad_36[0x18];
    struct AudioRtpc* shipCollisionRelShieldDamageRtpc;
    uint8_t _pad_37[0x18];
    struct AudioRtpc* shipCollisionRelHullDamageRtpc;
    uint8_t _pad_38[0x18];
    struct AudioRtpc* shipCollisionTotalDeliverableDamageRtpc;
    uint8_t _pad_39[0x18];
    struct GlobalResourceAudio* shipGasCloudFeedback;
    uint8_t _pad_40[0x18];
    struct AudioRtpc* gasCloudDensityRtpc;
    uint8_t _pad_41[0x18];
    struct ShipAudioTrackviewParams* trackviewParams;
    uint8_t _pad_42[0x8];
};




struct SCItemWeaponComponentParams {
    uint8_t _pad_0[0x18];
    struct SWeaponReticleParams* reticleParams;
    uint8_t _pad_1[0x28];
    struct CryStringT* geometryTags;
    uint8_t _pad_2[0x8];
    struct Vec3* defaultAdsCameraOffset;
    uint8_t _pad_3[0x10];
    struct DynArray_SWeaponOnAttachParams* onAttachParams;
    uint8_t _pad_4[0x28];
    float supplementaryFireTime;
    uint8_t _pad_5[0x4];
    struct EntityClassDefinition* ammoContainerRecord;
    uint8_t _pad_6[0x10];
    struct DynArray_SSecondaryAmmoContainerParams* secondaryAmmoContainers;
    uint8_t _pad_7[0x28];
    _Bool ShouldIgnorePrimaryAmmoContainer;
    uint8_t _pad_8[0x7];
    struct WeaponProceduralAnimation* proceduralAnimationRecord;
    uint8_t _pad_9[0x10];
    struct ActorProceduralRecoilConfig* actorProceduralRecoilConfig;
    uint8_t _pad_10[0x10];
    struct SWeaponAIDataParams* weaponAIData;
    uint8_t _pad_11[0x1a0];
    struct SWeaponConnectionParams* connectionParams;
    uint8_t _pad_12[0x13b8];
    struct SWeaponRegenConsumerParams* weaponRegenConsumerParams;
    uint8_t _pad_13[0x8];
    _Bool fireOnAim;
    uint8_t _pad_14[0x7];
    struct BezierCurve* scopeZoomCurve;
    uint8_t _pad_15[0x88];
    struct SWeaponActionParams* aimAction;
    uint8_t _pad_16[0x8];
    struct DynArray_SWeaponActionParams* fireActions;
    uint8_t _pad_17[0x28];
    struct SWeaponAudioParams* audioParams;
    uint8_t _pad_18[0xc8];
    struct SWeaponAudioReportEnvironmentParams* audioReportEnvironmentParams;
    uint8_t _pad_19[0x38];
    struct DynArray_SWeaponParticleEffectParamsArray* specialEffectsParams;
    uint8_t _pad_20[0x28];
    struct DynArray_SWeaponParticleEffectParams* turnedOnEffects;
    uint8_t _pad_21[0x28];
    struct SWeaponSpinAnimationParams* fireSpinAnimationParams;
    uint8_t _pad_22[0x8];
    float autoAimMuzzleAngleOverwrite;
    uint8_t _pad_23[0x4];
    struct WeaponAimableAnglesDef* aimableAnglesRecord;
    uint8_t _pad_24[0x10];
    struct WeaponGimbalModeModifierDef* gimbalModeModifierRecord;
    uint8_t _pad_25[0x10];
    struct WeaponARModifier* arModifierRecord;
    uint8_t _pad_26[0x10];
    struct SWeaponModifierParams* weaponDegradationModifier;
    uint8_t _pad_27[0x8];
    struct SWeaponMisfireParams* misfireParams;
    uint8_t _pad_28[0x60];
    _Bool useAdsHelper;
    _Bool isAllowedInGreenZones;
    _Bool uncollapseOnTurnedOn;
    _Bool allowFiringDuringFiremodeSwitch;
    uint8_t _pad_29[0x4];
    struct DynArray_float* overrideDisplayStats;
    uint8_t _pad_30[0x28];
    struct SWeaponAmmoRepoolParams* ammoRepoolParams;
    uint8_t _pad_31[0x10];
};




struct PersonalThoughtContextualActionsMenusParams {
    uint8_t _pad_0[0x8];
    struct DynArray_PersonalThoughtContextualActionsMenu* contextualMenus;
    uint8_t _pad_1[0x28];
    struct DynArray_PersonalThoughtGameModeDef* gameModeDef;
    uint8_t _pad_2[0x28];
};




struct S42PersonalStatusAppParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SS42PersonalStatusDrugBuffEffectString* drugEffectStrings;
    uint8_t _pad_1[0x28];
    struct DynArray_SMobiGlasPersonalStatusWeaponItem* firingRangeWeaponTypes;
    uint8_t _pad_2[0x28];
    struct DynArray_SMobiGlasPersonalStatusSkillsEntry* playerSkills;
    uint8_t _pad_3[0x28];
};




struct StateTypeStateTokenRequirements {
    uint8_t _pad_0[0x8];
    struct SInteractionStateType* stateType;
    uint8_t _pad_1[0x8];
    struct DynArray_StateTokenRequirements* stateTokenRequirements;
    uint8_t _pad_2[0x28];
};




struct PostureDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_PostureGroup* Groups;
    uint8_t _pad_1[0x28];
};




struct PartialContractRewards {
    uint8_t _pad_0[0x8];
    struct DynArray_PartialContractRewardRange* percentageThresholds;
    uint8_t _pad_1[0x28];
};




struct ArmouryItemCategory {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugName;
    uint8_t _pad_1[0x8];
    struct CLocIdentifier* displayName;
    struct DynArray_ArmouryItem* armouryItems;
    uint8_t _pad_2[0x28];
    _Bool isWeaponCategory;
    uint8_t _pad_3[0x7];
    struct DynArray_SArmouryItemFilter* itemFilters;
    uint8_t _pad_4[0x28];
};




struct PlayerChoice_Library {
    uint8_t _pad_0[0x8];
    struct DynArray_PlayerChoice_OptionList* optionLists;
    uint8_t _pad_1[0x28];
};




struct FrontendControllerProviderSQ42Params {
    uint8_t _pad_0[0x18];
    struct DynArray_FrontendS42Scenario* scenarios;
    uint8_t _pad_1[0x28];
    float deleteGameTimer;
    uint8_t _pad_2[0x4];
};




struct MissionLocality {
    uint8_t _pad_0[0x8];
    struct DynArray_StarMapObject* availableLocations;
    uint8_t _pad_1[0x28];
};




struct MotionGraph {
    uint8_t _pad_0[0x8];
    struct DynArray_MotionState* motionStates;
    uint8_t _pad_1[0x28];
    struct MotionSmoothingParams* motionSmoothingConfig;
    uint8_t _pad_2[0x18];
    struct MotionJukeParams* jukeConfig;
    uint8_t _pad_3[0x10];
    struct ProceduralIdleToMoveParams* idleToMoveProcParamsForward;
    uint8_t _pad_4[0x20];
    struct ProceduralIdleToMoveParams* idleToMoveProcParamsBack;
    uint8_t _pad_5[0x20];
    struct ProceduralIdleToMoveParams* idleToMoveProcParamsLeft;
    uint8_t _pad_6[0x20];
    struct ProceduralIdleToMoveParams* idleToMoveProcParamsRight;
    uint8_t _pad_7[0x20];
    struct MotionTurnSetupList* turnConfig;
    uint8_t _pad_8[0x30];
    struct MotionFootPinningParams* footPinningParams;
    uint8_t _pad_9[0x18];
};




struct ProceduralAnimation {
    uint8_t _pad_0[0x8];
    struct DynArray_ProceduralAnimationSequence* sequences;
    uint8_t _pad_1[0x28];
};




struct CraftingGameplayPropertyImpl_SingleStat_Int {
    uint8_t _pad_0[0x8];
    struct CraftingMaterialStatTypeRecord* scaledByStat;
    uint8_t _pad_1[0x10];
    struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Int* tiers;
    uint8_t _pad_2[0x28];
};




struct SHackingCodeParamsPreset {
    uint8_t _pad_0[0x8];
    struct DynArray_SHackingCodeErrorEntry* errorEntries;
    uint8_t _pad_1[0x28];
    struct DynArray_SHackingCodeCommandEntry* commandEntries;
    uint8_t _pad_2[0x28];
    struct DynArray_SHackingCodeSystemLogEntry* systemLogEntries;
    uint8_t _pad_3[0x28];
};




struct HudColors {
    uint8_t _pad_0[0x8];
    struct DynArray_HudColor_HoloParam* HoloMatParams;
    uint8_t _pad_1[0x28];
    struct DynArray_HudColor_Palette* Palettes;
    uint8_t _pad_2[0x28];
};




struct SCItemObservableGroupParams {
    uint8_t _pad_0[0x8];
    enum ARDataType itemType;
    uint8_t _pad_1[0x4];
    struct DynArray_SCItemObservableScreenParams* screens;
    uint8_t _pad_2[0x88];
};




struct MeleeCombatConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_MeleeAttackInfo* attackNodes;
    uint8_t _pad_1[0x28];
    struct DynArray_MeleeAttackInfo* attackNodesZeroG;
    uint8_t _pad_2[0x28];
    struct DynArray_MeleeAttackCategoryInfo* meleeAttackCategoryInfo;
    uint8_t _pad_3[0x28];
    struct DynArray_AttackCategoryParams* attackCategoryParams;
    uint8_t _pad_4[0x28];
    float zLockTriggerTime;
    uint8_t _pad_5[0x4];
    struct ConversationStickyFilter* zLockStickyFilter;
    uint8_t _pad_6[0x10];
};




struct SandboxTriggerRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_SandboxTriggerManualParams* triggerManualParams;
    uint8_t _pad_1[0x28];
};




struct HarvestableAreaPreset {
    uint8_t _pad_0[0x8];
    struct CryStringT* debugGroupName;
    uint8_t _pad_1[0x8];
    struct HarvestableAreaTypeBase* areaType;
    uint8_t _pad_2[0x8];
    float globalModifier;
    uint8_t _pad_3[0x4];
    struct DynArray_HarvestableElementModifier* modifiers;
    uint8_t _pad_4[0x28];
};




struct SubHarvestableConfig {
    uint8_t _pad_0[0x8];
    float initialSlotsProbability;
    uint8_t _pad_1[0x4];
    struct OptionalProbability* initialSlotsProbabilityDeepest;
    uint8_t _pad_2[0x8];
    float configRespawnTimeMultiplier;
    uint8_t _pad_3[0x4];
    struct DynArray_SubHarvestableSlot* subHarvestables;
    uint8_t _pad_4[0x28];
};




struct HarvestableElementGroup {
    uint8_t _pad_0[0x8];
    struct CryStringT* groupName;
    uint8_t _pad_1[0x8];
    float groupProbability;
    uint8_t _pad_2[0x4];
    struct DynArray_HarvestableElement* harvestables;
    uint8_t _pad_3[0x28];
};




struct AudioBreathStyleNode {
    uint8_t _pad_0[0x8];
    struct CryStringT* description;
    uint8_t _pad_1[0x8];
    struct AudioBreathStyle* style;
    uint8_t _pad_2[0x10];
    struct DynArray_AudioBreathStyleTransitionNode* transitions;
    uint8_t _pad_3[0x28];
};




struct AudioBreathStyle {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorBreathingStyleStartup* firstBreathCustomisation;
    uint8_t _pad_1[0x28];
    enum ARDataType VO2InputParam;
    float minInputValue;
    float maxInputValue;
    float InputFallingPredictionTime;
    float InputRisingPredictionTime;
    _Bool allowBreathShortening;
    uint8_t _pad_2[0x3];
    struct BezierCurve* VO2FromInput;
    uint8_t _pad_3[0x88];
    float maxVO2FallRate;
    float maxVO2RiseRate;
    struct BezierCurve* durationFromVO2;
    uint8_t _pad_4[0x88];
    struct BezierCurve* volumeFromVO2;
    uint8_t _pad_5[0x88];
    struct BezierCurve* inhaleExhaleRatioFromVO2Delta;
    uint8_t _pad_6[0x88];
    struct BezierCurve* durationVolumeScaleFromVO2Delta;
    uint8_t _pad_7[0x88];
    float minVolume;
    float maxVolume;
    float maxVolumeDrop;
    float maxVolumeRise;
    float minDuration;
    float maxDuration;
    float maxDurationDrop;
    float maxDurationRise;
    struct GlobalResourceAudio* audioEventOnEnter;
    uint8_t _pad_8[0x18];
    struct GlobalResourceAudio* audioEventOnExit;
    uint8_t _pad_9[0x18];
    struct DynArray_GlobalResourceAudio* audioEvents;
    uint8_t _pad_10[0x28];
    struct AudioBreathInterrupt* landingInterrupt;
    uint8_t _pad_11[0x10];
};




struct ItemResourceStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_SRangeStateLevel* stateRanges;
    uint8_t _pad_1[0x28];
    struct DynArray_ItemResourceState* linkedRNetStates;
    uint8_t _pad_2[0x28];
};




struct SGalactapediaData {
    uint8_t _pad_0[0x8];
    struct DynArray_SGalactapediaCategory* categories;
    uint8_t _pad_1[0x28];
};




struct ZeroGTraversalGraph {
    uint8_t _pad_0[0x8];
    struct DynArray_ZeroGTraversalState* traversalStates;
    uint8_t _pad_1[0x28];
};




struct PersonalThoughtQuickAccessWheels {
    uint8_t _pad_0[0x8];
    float mouseCursorRadius;
    float nonMouseCursorRadius;
    struct DynArray_PersonalThoughtQuickAccessWheel* quickAccessWheels;
    uint8_t _pad_1[0x28];
    float angularSelectWheelRadius;
    float angularSelectWheelRadiusSubmenu;
    float angularSelectWheelRadiusV2;
    float angularSelectWheelRadiusSubmenuV2;
};




struct LeanGraph {
    uint8_t _pad_0[0x8];
    struct DynArray_LeanState* leanStates;
    uint8_t _pad_1[0x28];
};




struct CtxGraph_Group {
    uint8_t _pad_0[0x8];
    struct DynArray_CtxGraph_Context* contexts;
    uint8_t _pad_1[0x28];
};




struct ActorDefaultActionsConfig {
    uint8_t _pad_0[0x8];
    int32_t versionID;
    uint8_t _pad_1[0x4];
    struct DynArray_DefaultActionsEntry* defaultActionsList;
    uint8_t _pad_2[0x28];
    struct DynArray_DefaultActionDescriptionOverride* defaultActionsDescriptions;
    uint8_t _pad_3[0x38];
};




struct StatDefinitions {
    uint8_t _pad_0[0x8];
    struct DynArray_Stat* stats;
    uint8_t _pad_1[0x28];
};




struct SMisfireLevelParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SMisfireProbabilityParams* misfireProbabilityArray;
    uint8_t _pad_1[0x28];
};




struct AITargetableComponentParams {
    uint8_t _pad_0[0x18];
    struct AITargetableSettings* targetableSettings;
    uint8_t _pad_1[0x10];
    struct DynArray_Formation* formations;
    uint8_t _pad_2[0x28];
};




struct SJumpTunnelGenerationParams {
    uint8_t _pad_0[0x8];
    float tunnelRadius;
    float tunnelRadiusGameplayBuffer;
    float tunnelLength;
    float entranceLength;
    float exitLength;
    uint8_t _pad_1[0x4];
    struct SJumpTunnelEllipticalParams* entranceEllipticalParams;
    uint8_t _pad_2[0x138];
    struct SJumpTunnelEllipticalParams* exitEllipticalParams;
    uint8_t _pad_3[0x138];
    struct DynArray_SJumpTunnelSectionProbabilityParams* firstSectionProbabilities;
    uint8_t _pad_4[0x28];
    struct DynArray_SJumpTunnelSectionGenerationParams* genParams;
    uint8_t _pad_5[0x28];
};




struct SReplicatedSequencerDefSequenceParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_SSequencerSequenceTaskEntryParams* taskEntries;
    uint8_t _pad_2[0x28];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_3[0x8];
};




struct SSequencerDefSequenceParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_SSequencerSequenceTaskEntryParams* taskEntries;
    uint8_t _pad_2[0x28];
    struct SSharedInteractionParams* interaction;
    uint8_t _pad_3[0x8];
};




struct SStarGala {
    uint8_t _pad_0[0x8];
    struct Vec2* textureSize;
    uint8_t _pad_1[0x8];
    struct DynArray_SMiniGameSpriteParams* gameSprites;
    uint8_t _pad_2[0x28];
    struct DynArray_SStarGalaStageParams* formationStages;
    uint8_t _pad_3[0x28];
    struct DynArray_SStarGalaStageParams* challengeStages;
    uint8_t _pad_4[0x28];
    int32_t playerMaxLives;
    int32_t playerMaxStartLives;
    float playerMoveSpeedMax;
    float playerShotDelayAuto;
    float playerShotDelayMin;
    float playerProjectileSpeed;
    float enemyMoveSpeedMin;
    float enemyMoveSpeedMax;
    float captureBeamTotalTime;
    float captureBeamOnOffTime;
    float enemyFireDelayTimeMin;
    float enemyFireDelayTimeMax;
    int32_t difficultyIncreaseStages;
    int32_t extraLifeTarget;
    int32_t bossFormationScore;
    int32_t bossDiveScore;
    int32_t bossDiveOneScore;
    int32_t bossDiveTwoScore;
    int32_t butterflyFormationScore;
    int32_t butterflyScore;
    int32_t beeFormationScore;
    int32_t beeScore;
    int32_t bonusMultiplier;
    int32_t bonusHitsPerfect;
    int32_t continuousDiveMin;
    int32_t continuousDiveMax;
    int32_t continuousDiveStartMin;
    int32_t continuousDiveStartMax;
    int32_t highScore;
    uint8_t _pad_5[0x4];
    struct Tag* playerFireTag;
    uint8_t _pad_6[0x10];
    struct Tag* enemyFireTag;
    uint8_t _pad_7[0x10];
    struct Tag* playerExplosionTag;
    uint8_t _pad_8[0x10];
    struct Tag* enemyExplosionTag;
    uint8_t _pad_9[0x10];
    struct Tag* diveTag;
    uint8_t _pad_10[0x10];
    struct Tag* captureBeamTag;
    uint8_t _pad_11[0x10];
    struct Tag* bossHitTag;
    uint8_t _pad_12[0x10];
    struct Tag* stageMedalTag;
    uint8_t _pad_13[0x10];
    struct Tag* bonusTickTag;
    uint8_t _pad_14[0x10];
};




struct PersonalThoughtActionsRulesParams {
    uint8_t _pad_0[0x8];
    struct DynArray_ActionRuleList* actionRulesList;
    uint8_t _pad_1[0x28];
};




struct SCInteractionStateGameplayTriggerComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SOnInteractionStateChangeTriggers* onInteractionStateChangeTriggers;
    uint8_t _pad_1[0x28];
    struct DynArray_SOnInteractionTriggers* onInteractionSuccessTriggers;
    uint8_t _pad_2[0x28];
    struct DynArray_SOnInteractionTriggers* onInteractionFailedTriggers;
    uint8_t _pad_3[0x28];
};




struct SecurityNetworkMemberComponentParams {
    uint8_t _pad_0[0x18];
    struct Tag* hostilityRulesTag;
    uint8_t _pad_1[0x10];
    struct DynArray_SecurityNetworkVariableEffects* variableEffects;
    uint8_t _pad_2[0x28];
};




struct SecurityNetworkManifest {
    uint8_t _pad_0[0x8];
    struct SecurityNetworkProtocol* defaultProtocol;
    uint8_t _pad_1[0x70];
    struct DynArray_SecurityNetworkProtocolOverride* roomProtocols;
    uint8_t _pad_2[0x28];
    struct DynArray_SecurityNetworkVariable* variables;
    uint8_t _pad_3[0x28];
    struct DynArray_SHostilityRules* hostilityRules;
    uint8_t _pad_4[0x28];
    struct DynArray_SecurityNetworkVariableEffects* variableEffects;
    uint8_t _pad_5[0x28];
    _Bool isNeutralTerritory;
    _Bool teleportPlayerOut;
    uint8_t _pad_6[0x6];
};




struct AnimationJointControl {
    uint8_t _pad_0[0x8];
    struct DynArray_AnimationVariable* variables;
    uint8_t _pad_1[0x28];
    struct DynArray_AnimationJointMovement* movements;
    uint8_t _pad_2[0x28];
    struct DynArray_AnimationMovement* animations;
    uint8_t _pad_3[0x28];
};




struct AIMeleeCombatConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_MeleeAttackCategoryInfo* meleeAttackCategoryInfo;
    uint8_t _pad_1[0x28];
    struct DynArray_AttackCategoryParamsBase* attackCategoryParams;
    uint8_t _pad_2[0x28];
    struct DynArray_AIMeleeAttack* meleeAttacks;
    uint8_t _pad_3[0x28];
    struct DynArray_MeleeAttackCombo* combos;
    uint8_t _pad_4[0x28];
};




struct SBeamGroupParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* hitEffectName;
    uint8_t _pad_1[0x8];
    _Bool cuttableImpacts;
    _Bool detachOnActivate;
    _Bool tractorBeam;
    _Bool skipListIncludeOwner;
    _Bool useADSHelper;
    _Bool immediateRaycast;
    uint8_t _pad_2[0x2];
    struct AudioSwitch* beamSizeSwitch;
    uint8_t _pad_3[0x30];
    struct GlobalResourceAudio* beamAudioOneShot;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* beamLoopAudioTrigger;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* beamStopAudioTrigger;
    uint8_t _pad_6[0x18];
    struct AudioRtpc* beamActiveRTPC;
    uint8_t _pad_7[0x18];
    struct AudioRtpc* beamModifierRTPC;
    uint8_t _pad_8[0x18];
    enum ARDataType beamModifierRTPCSource;
    enum ARDataType beamImpactModifierSource;
    struct GlobalResourceAudio* beamImpactStartTriggerOneShot;
    uint8_t _pad_9[0x18];
    struct GlobalResourceAudio* beamImpactStopTriggerOneShot;
    uint8_t _pad_10[0x18];
    struct GlobalResourceAudio* beamImpactStartTrigger;
    uint8_t _pad_11[0x18];
    struct GlobalResourceAudio* beamImpactStopTrigger;
    uint8_t _pad_12[0x18];
    struct AudioRtpc* targetAttractionRTPC;
    uint8_t _pad_13[0x18];
    struct DynArray_SBeamEffectParams* beamEffects;
    uint8_t _pad_14[0x28];
};




struct TachyonProjectileParams {
    uint8_t _pad_0[0x8];
    struct ProjectileDetonationParams* detonationParams;
    uint8_t _pad_1[0x8];
    struct ProjectileProximityTriggerParams* proximityTriggerParams;
    uint8_t _pad_2[0x8];
    struct CryStringT* hitType;
    uint8_t _pad_3[0x8];
    struct CryStringT* hitEffect;
    uint8_t _pad_4[0x8];
    struct DamageBase* damage;
    uint8_t _pad_5[0x8];
    float fullDamageRange;
    float zeroDamageRange;
    struct DynArray_SBeamEffectParams* beamEffects;
    uint8_t _pad_6[0x28];
};




struct EntityAudioControllerRtpcSubscriberParams {
    uint8_t _pad_0[0x18];
    struct DynArray_AudioRtpc* rtpcs;
    uint8_t _pad_1[0x28];
    struct DynArray_EntityAudioControllerRtpcSubscriberListDef* rtpcLists;
    uint8_t _pad_2[0x28];
};




struct EntityComponentVehicleAudioPointParams {
    uint8_t _pad_0[0x18];
    struct GlobalResourceAudio* loopStart;
    uint8_t _pad_1[0x18];
    struct GlobalResourceAudio* loopStop;
    uint8_t _pad_2[0x18];
    struct GlobalResourceAudio* soundSimOnOneshot;
    uint8_t _pad_3[0x18];
    struct GlobalResourceAudio* soundSimOffOneshot;
    uint8_t _pad_4[0x18];
    struct GlobalResourceAudio* shipAudioOnOneshot;
    uint8_t _pad_5[0x18];
    struct GlobalResourceAudio* shipAudioOffOneshot;
    uint8_t _pad_6[0x18];
    struct DynArray_AudioRtpc* rtpcs;
    uint8_t _pad_7[0x28];
    struct DynArray_EntityAudioControllerRtpcSubscriberListDef* rtpcLists;
    uint8_t _pad_8[0x28];
};




struct ControlHint_Entry {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct DynArray_ControlHintDef* controlHintList;
    uint8_t _pad_2[0x28];
};




struct UserVariablesComponentParams {
    uint8_t _pad_0[0x18];
    _Bool AlwaysUseDefaultValues;
    uint8_t _pad_1[0x7];
    struct DynArray_FloatUserVariable* floats;
    uint8_t _pad_2[0x28];
    struct DynArray_IntUserVariable* ints;
    uint8_t _pad_3[0x28];
    struct DynArray_BoolUserVariable* bools;
    uint8_t _pad_4[0x28];
    struct DynArray_StringUserVariable* strings;
    uint8_t _pad_5[0x28];
    struct DynArray_LocStringUserVariable* locStrings;
    uint8_t _pad_6[0x28];
};




struct SEntityComponentCIGTestAParams {
    uint8_t _pad_0[0x18];
    _Bool Bool_0;
    _Bool Bool_1;
    uint8_t _pad_1[0x6];
    struct DynArray_bool* Bool_2;
    uint8_t _pad_2[0x28];
    struct DynArray_bool* Bool_3;
    uint8_t _pad_3[0x28];
    int8_t SInt8_0;
    int8_t SInt8_1;
    uint8_t _pad_4[0x6];
    struct DynArray_int8_t* SInt8_2;
    uint8_t _pad_5[0x28];
    struct DynArray_int8_t* SInt8_3;
    uint8_t _pad_6[0x28];
    int16_t SInt16_0;
    int16_t SInt16_1;
    uint8_t _pad_7[0x4];
    struct DynArray_int16_t* SInt16_2;
    uint8_t _pad_8[0x28];
    struct DynArray_int16_t* SInt16_3;
    uint8_t _pad_9[0x28];
    int32_t SInt32_0;
    int32_t SInt32_1;
    struct DynArray_int32_t* SInt32_2;
    uint8_t _pad_10[0x28];
    struct DynArray_int32_t* SInt32_3;
    uint8_t _pad_11[0x28];
    int64_t SInt64_0;
    int64_t SInt64_1;
    struct DynArray_int64_t* SInt64_2;
    uint8_t _pad_12[0x28];
    struct DynArray_int64_t* SInt64_3;
    uint8_t _pad_13[0x28];
    uint8_t UInt8_0;
    uint8_t UInt8_1;
    uint8_t _pad_14[0x6];
    struct DynArray_uint8_t* UInt8_2;
    uint8_t _pad_15[0x28];
    struct DynArray_uint8_t* UInt8_3;
    uint8_t _pad_16[0x28];
    uint16_t UInt16_0;
    uint16_t UInt16_1;
    uint8_t _pad_17[0x4];
    struct DynArray_uint16_t* UInt16_2;
    uint8_t _pad_18[0x28];
    struct DynArray_uint16_t* UInt16_3;
    uint8_t _pad_19[0x28];
    uint32_t UInt32_0;
    uint32_t UInt32_1;
    struct DynArray_uint32_t* UInt32_2;
    uint8_t _pad_20[0x28];
    struct DynArray_uint32_t* UInt32_3;
    uint8_t _pad_21[0x28];
    uint64_t UInt64_0;
    uint64_t UInt64_1;
    struct DynArray_uint64_t* UInt64_2;
    uint8_t _pad_22[0x28];
    struct DynArray_uint64_t* UInt64_3;
    uint8_t _pad_23[0x28];
    float Float_0;
    float Float_1;
    struct DynArray_float* Float_2;
    uint8_t _pad_24[0x28];
    struct DynArray_float* Float_3;
    uint8_t _pad_25[0x28];
    double Double_0;
    double Double_1;
    struct DynArray_double* Double_2;
    uint8_t _pad_26[0x28];
    struct DynArray_double* Double_3;
    uint8_t _pad_27[0x28];
    enum ARDataType Enum_0;
    enum ARDataType Enum_1;
    struct DynArray_ARDataType* Enum_2;
    uint8_t _pad_28[0x28];
    struct DynArray_ARDataType* Enum_3;
    uint8_t _pad_29[0x28];
    struct CryStringT* String_0;
    uint8_t _pad_30[0x8];
    struct CryStringT* String_1;
    uint8_t _pad_31[0x8];
    struct DynArray_CryStringT* String_2;
    uint8_t _pad_32[0x28];
    struct DynArray_CryStringT* String_3;
    uint8_t _pad_33[0x28];
    struct CryStringT* FilePath_0;
    uint8_t _pad_34[0x8];
    struct CryStringT* FilePath_1;
    uint8_t _pad_35[0x8];
    struct DynArray_CryStringT* FilePath_2;
    uint8_t _pad_36[0x28];
    struct DynArray_CryStringT* FilePath_3;
    uint8_t _pad_37[0x28];
    struct CryStringT* VFX_0;
    uint8_t _pad_38[0x8];
    struct CryStringT* VFX_1;
    uint8_t _pad_39[0x8];
    struct DynArray_CryStringT* VFX_2;
    uint8_t _pad_40[0x28];
    struct DynArray_CryStringT* VFX_3;
    uint8_t _pad_41[0x28];
    struct CLocIdentifier* LocId_0;
    struct CLocIdentifier* LocId_1;
    struct DynArray_CLocIdentifier* LocId_2;
    uint8_t _pad_42[0x28];
    struct DynArray_CLocIdentifier* LocId_3;
    uint8_t _pad_43[0x28];
    struct SCIGTestBase* wpTestBase_0;
    uint8_t _pad_44[0x8];
    struct SCIGTestBase* wpTestBase_1;
    uint8_t _pad_45[0x8];
    struct DynArray_SCIGTestBase* wpTestBase_2;
    uint8_t _pad_46[0x28];
    struct DynArray_SCIGTestBase* wpTestBase_3;
    uint8_t _pad_47[0x28];
    struct SCIGTestA* wpTestA_0;
    uint8_t _pad_48[0x8];
    struct SCIGTestA* wpTestA_1;
    uint8_t _pad_49[0x8];
    struct DynArray_SCIGTestA* wpTestA_2;
    uint8_t _pad_50[0x28];
    struct DynArray_SCIGTestA* wpTestA_3;
    uint8_t _pad_51[0x28];
    struct SCIGTestBase* osTestBase_0;
    uint8_t _pad_52[0x8];
    struct SCIGTestBase* osTestBase_1;
    uint8_t _pad_53[0x8];
    struct DynArray_SCIGTestBase* osTestBase_2;
    uint8_t _pad_54[0x28];
    struct DynArray_SCIGTestBase* osTestBase_3;
    uint8_t _pad_55[0x28];
    struct SCIGTestBB* osTestBB_0;
    uint8_t _pad_56[0x8];
    struct SCIGTestBB* osTestBB_1;
    uint8_t _pad_57[0x8];
    struct DynArray_SCIGTestBB* osTestBB_2;
    uint8_t _pad_58[0x28];
    struct DynArray_SCIGTestBB* osTestBB_3;
    uint8_t _pad_59[0x28];
    struct SCIGTestA* osTestA;
    uint8_t _pad_60[0x8];
    struct SCIGTestAA* osTestAA;
    uint8_t _pad_61[0x8];
    struct SCIGTestAAA* osTestAAA;
    uint8_t _pad_62[0x8];
    struct SCIGTestB* osTestB;
    uint8_t _pad_63[0x8];
    struct SCIGTestC* osTestC;
    uint8_t _pad_64[0x8];
};




struct SMFDViewList {
    uint8_t _pad_0[0x8];
    struct DynArray_SMFDView* views;
    uint8_t _pad_1[0x28];
};




struct MedicalItemTierConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_MedBedTierParams* medBedConfigs;
    uint8_t _pad_1[0x28];
    struct DynArray_DrugEfficacyForItemType* drugEfficacyConfig;
    uint8_t _pad_2[0x28];
    struct DynArray_DrugTypeToApply* availableDrugTypes;
    uint8_t _pad_3[0x28];
};




struct DrugEfficacyConfigForItemSubTypeWeapon {
    uint8_t _pad_0[0x8];
    enum ARDataType itemSubType;
    uint8_t _pad_1[0x4];
    struct DynArray_DrugEfficacyForItemSubType* drugEfficacyForItemSubType;
    uint8_t _pad_2[0x28];
};




struct LootArchetypeOrGroup_Primary {
    uint8_t _pad_0[0x8];
    struct DynArray_LootArchetypeEntry_Primary* entries;
    uint8_t _pad_1[0x28];
};




struct PersonalThoughtLootingScreenParams {
    uint8_t _pad_0[0x8];
    struct DynArray_LootingItemPortSizeClass* itemPortClasses;
    uint8_t _pad_1[0x28];
    struct LootingInventoryParams* lootingInventoryParams;
    uint8_t _pad_2[0x40];
};




struct PersonalThoughtInventoryParams {
    uint8_t _pad_0[0x8];
    struct PersonalThoughtLootingScreenParams* lootingScreenParams;
    uint8_t _pad_1[0x78];
    struct InteractionConditionPreset* inventoryDropInteractionConditions;
    uint8_t _pad_2[0x10];
    struct CLocIdentifier* inventoryTitle;
    struct CLocIdentifier* capacityBarTitle;
    struct CryStringT* defaultItemDisplayThumbnail;
    uint8_t _pad_3[0x8];
    struct CLocIdentifier* emptyInventoryMessage;
    struct CLocIdentifier* fullInventoryMessage;
    struct CLocIdentifier* noSpaceForItemInInventoryMessage;
    struct CLocIdentifier* itemCantFitInInventoryMessage;
    struct CLocIdentifier* genericInvalidMovementMessage;
    struct DynArray_PersonalThoughtInventoryFilter* filters;
    uint8_t _pad_4[0x28];
    struct PersonalThoughtInventoryActionsParams* inventoryActionsParams;
    uint8_t _pad_5[0x20];
    struct PersonalThoughtPopWindowParams* emptyBackpackPopWindowParams;
    uint8_t _pad_6[0x18];
    struct PersonalThoughtInventoryGridParams* inventoryGridParams;
    uint8_t _pad_7[0x70];
    struct Vec3* defaultOrientation;
    uint8_t _pad_8[0x10];
    struct DynArray_PersonalThoughtInventoryItemOrientationOffset* listOfItemsOrientationOffset;
    uint8_t _pad_9[0x28];
    struct CryStringT* defaultDisplayIconType;
    uint8_t _pad_10[0x8];
    struct DynArray_PersonalThoughtInventoryItemUIIcon* itemClassUIIconsList;
    uint8_t _pad_11[0x28];
};




struct AudioSignalList {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioSignal* Signals;
    uint8_t _pad_1[0x28];
};




struct DefaultActions {
    uint8_t _pad_0[0x8];
    struct DynArray_DefaultActionsParams* defaultActionsPerState;
    uint8_t _pad_1[0x28];
};




struct MissionLocationData {
    uint8_t _pad_0[0x8];
    struct MissionLocationTags* generalTags;
    uint8_t _pad_1[0x30];
    struct TagSearchTerm* producesTags;
    uint8_t _pad_2[0x60];
    struct TagSearchTerm* consumesTags;
    uint8_t _pad_3[0x60];
    struct TagList* aiSpawnTags;
    uint8_t _pad_4[0x30];
    struct MissionStringVariants* stringVariants;
    uint8_t _pad_5[0x30];
    struct DynArray_SMissionLocationModule* missionModules;
    uint8_t _pad_6[0x28];
    _Bool allowPartialOCStreamingForInit;
    uint8_t _pad_7[0x7];
    struct DynArray_LocationMissionLimit* missionLimits;
    uint8_t _pad_8[0x28];
    struct DynArray_AutoSpawnSettings* autoSpawnSettings;
    uint8_t _pad_9[0x28];
    _Bool isSecurityNetworkHost;
    uint8_t _pad_10[0x7];
    struct SecurityNetworkManifest* defaultSecurityNetworkManifest;
    uint8_t _pad_11[0x10];
    _Bool disabled;
    uint8_t _pad_12[0x7];
    struct EntityClusterMember* entityClusterMember;
    uint8_t _pad_13[0x10];
};




struct CareerContract {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    _Bool notForRelease;
    uint8_t _pad_2[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_3[0x8];
    struct ContractTemplate* template_;
    uint8_t _pad_4[0x10];
    struct ContractParamOverrides* paramOverrides;
    uint8_t _pad_5[0x138];
    struct DynArray_SubContract* subContracts;
    uint8_t _pad_6[0x28];
    struct DynArray_ContractPrerequisiteBase* additionalPrerequisites;
    uint8_t _pad_7[0x28];
    struct ContractGenerationParamsBase* generationParams;
    uint8_t _pad_8[0x8];
    struct ContractLifeTime* contractLifeTime;
    uint8_t _pad_9[0x8];
    struct ContractResults* contractResults;
    uint8_t _pad_10[0x48];
    struct SReputationStandingParams* minStanding;
    uint8_t _pad_11[0x10];
    struct SReputationStandingParams* maxStanding;
    uint8_t _pad_12[0x10];
};




struct ContractBase {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    _Bool notForRelease;
    uint8_t _pad_2[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_3[0x8];
    struct ContractTemplate* template_;
    uint8_t _pad_4[0x10];
    struct ContractParamOverrides* paramOverrides;
    uint8_t _pad_5[0x138];
    struct DynArray_SubContract* subContracts;
    uint8_t _pad_6[0x28];
    struct DynArray_ContractPrerequisiteBase* additionalPrerequisites;
    uint8_t _pad_7[0x28];
    struct ContractGenerationParamsBase* generationParams;
    uint8_t _pad_8[0x8];
    struct ContractLifeTime* contractLifeTime;
    uint8_t _pad_9[0x8];
    struct ContractResults* contractResults;
    uint8_t _pad_10[0x48];
};




struct ContractLegacy {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    _Bool notForRelease;
    uint8_t _pad_2[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_3[0x8];
    struct ContractTemplate* template_;
    uint8_t _pad_4[0x10];
    struct ContractParamOverrides* paramOverrides;
    uint8_t _pad_5[0x138];
    struct DynArray_SubContract* subContracts;
    uint8_t _pad_6[0x28];
    struct DynArray_ContractPrerequisiteBase* additionalPrerequisites;
    uint8_t _pad_7[0x28];
    struct ContractGenerationParamsBase* generationParams;
    uint8_t _pad_8[0x8];
    struct ContractLifeTime* contractLifeTime;
    uint8_t _pad_9[0x8];
    struct ContractResults* contractResults;
    uint8_t _pad_10[0x48];
    struct MissionBrokerEntry* missionBrokerEntry;
    uint8_t _pad_11[0x10];
};




struct Contract {
    uint8_t _pad_0[0x8];
    struct CryGUID* id;
    uint8_t _pad_1[0x8];
    _Bool notForRelease;
    uint8_t _pad_2[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_3[0x8];
    struct ContractTemplate* template_;
    uint8_t _pad_4[0x10];
    struct ContractParamOverrides* paramOverrides;
    uint8_t _pad_5[0x138];
    struct DynArray_SubContract* subContracts;
    uint8_t _pad_6[0x28];
    struct DynArray_ContractPrerequisiteBase* additionalPrerequisites;
    uint8_t _pad_7[0x28];
    struct ContractGenerationParamsBase* generationParams;
    uint8_t _pad_8[0x8];
    struct ContractLifeTime* contractLifeTime;
    uint8_t _pad_9[0x8];
    struct ContractResults* contractResults;
    uint8_t _pad_10[0x48];
};




struct ConsumableType {
    uint8_t _pad_0[0x8];
    struct CryStringT* typeName;
    uint8_t _pad_1[0x8];
    struct DynArray_ConsumableSubtype* subtypes;
    uint8_t _pad_2[0x28];
};




struct EAObjectiveControl {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* selectSpawnObjective;
    struct EntityCaptureParams* entityCaptureSettings;
    uint8_t _pad_1[0x10];
    float fullInteractionSpeedMultiplier;
    float teamAssistBoost;
    float opposingTeamSlowdown;
    float captureDecay;
    int32_t scoreTickTimer;
    int32_t scorePerTerminal;
    float dominationAwardCooldown;
    float closeCallCaptureRatio;
    struct Vec2* markerHUDScreenPosition;
    uint8_t _pad_2[0x8];
    struct RGBA* allyTeamUIColor;
    uint8_t _pad_3[0x10];
    struct RGBA* enemyTeamUIColor;
    uint8_t _pad_4[0x10];
    struct RGBA* contestedUIColor;
    uint8_t _pad_5[0x10];
    struct RGBA* neutralUIColor;
    uint8_t _pad_6[0x10];
    int32_t initialPhase;
    uint8_t _pad_7[0x4];
    struct DynArray_EAObjectiveControlPhase* phasesSettings;
    uint8_t _pad_8[0x28];
    struct SEACriticalMessageDef* phaseSuccessMessage;
    uint8_t _pad_9[0x10];
    struct SEACriticalMessageDef* phaseFailMessage;
    uint8_t _pad_10[0x10];
    struct SEACriticalMessageDef* overtimeMessage;
    uint8_t _pad_11[0x10];
    struct Faction_LEGACY* defendingTeam;
    uint8_t _pad_12[0x10];
    float minTimeBetweenPhases;
    int32_t extraTime;
    float overloadReminderTime;
    float phaseEndMusicEventTime;
    int32_t terminalDisabledTime;
    uint8_t _pad_13[0x4];
};




struct ProceduralPlanetAudioEntry {
    uint8_t _pad_0[0x8];
    struct CryStringT* audioName;
    uint8_t _pad_1[0x8];
    float listenerMovementThreshold;
    uint8_t _pad_2[0x4];
    struct ProceduralPlanetAudioAlgorithm* algorithm;
    uint8_t _pad_3[0x8];
    struct DynArray_ProceduralPlanetAudioDisturbanceList* disturbances;
    uint8_t _pad_4[0x28];
};




struct SCItemTurretCustomAngleLimitParams {
    uint8_t _pad_0[0x8];
    struct CryStringT* RelativeJointName;
    uint8_t _pad_1[0x8];
    struct DynArray_SCItemTurretCustomAngleLimit* AngleLimits;
    uint8_t _pad_2[0x28];
    struct DynArray_SCItemTurretCustomAngleLimitTagOverwriteParams* limitOverwrites;
    uint8_t _pad_3[0x28];
};




struct MissionPropertyValue_NPCSpawnDescriptions {
    uint8_t _pad_0[0x8];
    struct DynArray_SpawnDescription_NPC_Group* spawnDescriptions;
    uint8_t _pad_1[0x28];
};




struct CraftingGameplayPropertyImpl_SingleStat_Float {
    uint8_t _pad_0[0x8];
    struct CraftingMaterialStatTypeRecord* scaledByStat;
    uint8_t _pad_1[0x10];
    struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Float* tiers;
    uint8_t _pad_2[0x28];
};




struct SCItemMobiGlasProviderParams {
    uint8_t _pad_0[0x18];
    struct DynArray_mobiGlasDefaultAppEntry* defaultInstalledApps;
    uint8_t _pad_1[0x28];
    float appTransitionTime;
    _Bool onlyAllowUserInteractions;
    _Bool startOpen;
    uint8_t _pad_2[0x2];
};




struct DynArray_PingSettingsParams {
    struct PingSettingsParams** m_data;
};




struct DynArray_GameMode {
    struct GameMode** m_data;
};




struct DynArray_VehicleEditorCategoryData {
    struct VehicleEditorCategoryData** m_data;
};




struct DynArray_VehicleEditorAutoEquipData {
    struct VehicleEditorAutoEquipData** m_data;
};




struct DynArray_SLocalPlayerShoppingPredefinedARParams {
    struct SLocalPlayerShoppingPredefinedARParams** m_data;
};




struct DynArray_VehicleEditorItemStatData {
    struct VehicleEditorItemStatData** m_data;
};




struct DynArray_AIObservableFilters {
    struct AIObservableFilters** m_data;
};




struct DynArray_DockingSlotVisibilityRule {
    struct DockingSlotVisibilityRule** m_data;
};




struct DynArray_ActorJumpNode {
    struct ActorJumpNode** m_data;
};




struct DynArray_MegaMap {
    struct MegaMap** m_data;
};




struct DynArray_ChatEmotePack {
    struct ChatEmotePack** m_data;
};




struct DynArray_SApplicationFormHeadHomeworld {
    struct SApplicationFormHeadHomeworld** m_data;
};




struct DynArray_GForceParams {
    struct GForceParams** m_data;
};




struct DynArray_SSCSignatureSystemAudioRuleset {
    struct SSCSignatureSystemAudioRuleset** m_data;
};




struct DynArray_SpawnDescription_ShipGroup {
    struct SpawnDescription_ShipGroup** m_data;
};




struct DynArray_MissionScenario {
    struct MissionScenario** m_data;
};




struct DynArray_SReputationJournalEntriesParams {
    struct SReputationJournalEntriesParams** m_data;
};




struct DynArray_FoleyItem {
    struct FoleyItem** m_data;
};




struct DynArray_MobiGlasAfterActionReportStatsBlock {
    struct MobiGlasAfterActionReportStatsBlock** m_data;
};




struct DynArray_BuildingBlocks_StyleEntry {
    struct BuildingBlocks_StyleEntry** m_data;
};




struct DynArray_SCharacterCustomizerDialogueEntry {
    struct SCharacterCustomizerDialogueEntry** m_data;
};




struct DynArray_SpawnDescription_EntityGroup {
    struct SpawnDescription_EntityGroup** m_data;
};




struct DynArray_CockpitResponse {
    struct CockpitResponse** m_data;
};




struct DynArray_SHelmetStateMachineParams {
    struct SHelmetStateMachineParams** m_data;
};




struct DynArray_SEALoadoutSet {
    struct SEALoadoutSet** m_data;
};




struct DynArray_PlayerUsableUseChannelInstance {
    struct PlayerUsableUseChannelInstance** m_data;
};




struct DynArray_ItemResourceCompositionMap {
    struct ItemResourceCompositionMap** m_data;
};




struct DynArray_RadarContactGroupEntry {
    struct RadarContactGroupEntry** m_data;
};




struct DynArray_EntityEffectSystem_MaterialTagEffect {
    struct EntityEffectSystem_MaterialTagEffect** m_data;
};




struct DynArray_EntityEffectSystem_MaterialTriggerEffect {
    struct EntityEffectSystem_MaterialTriggerEffect** m_data;
};




struct DynArray_EntityEffectSystem_LightTriggerEffect {
    struct EntityEffectSystem_LightTriggerEffect** m_data;
};




struct DynArray_EntityEffectSystem_LightTagEffect {
    struct EntityEffectSystem_LightTagEffect** m_data;
};




struct DynArray_SEntityEffectSystem_SoundTriggerEffect {
    struct SEntityEffectSystem_SoundTriggerEffect** m_data;
};




struct DynArray_SEntityEffectSystem_SoundTagEffect {
    struct SEntityEffectSystem_SoundTagEffect** m_data;
};




struct DynArray_SEntityEffectSystem_ParticleTagEffect {
    struct SEntityEffectSystem_ParticleTagEffect** m_data;
};




struct DynArray_SEntityEffectSystem_ParticleTriggerEffect {
    struct SEntityEffectSystem_ParticleTriggerEffect** m_data;
};




struct DynArray_AnimationGraph_Timeline {
    struct AnimationGraph_Timeline** m_data;
};




struct DynArray_Investigation_Location {
    struct Investigation_Location** m_data;
};




struct DynArray_SGroupedLoadouts {
    struct SGroupedLoadouts** m_data;
};




struct DynArray_AudioEnvironmentFeedbackTagAndEvent {
    struct AudioEnvironmentFeedbackTagAndEvent** m_data;
};




struct DynArray_StateTypeStateTokenRequirements {
    struct StateTypeStateTokenRequirements** m_data;
};




struct DynArray_ArmouryItemCategory {
    struct ArmouryItemCategory** m_data;
};




struct DynArray_SCItemObservableGroupParams {
    struct SCItemObservableGroupParams** m_data;
};




struct DynArray_HarvestableAreaPreset {
    struct HarvestableAreaPreset** m_data;
};




struct DynArray_HarvestableElementGroup {
    struct HarvestableElementGroup** m_data;
};




struct DynArray_AudioBreathStyle {
    struct AudioBreathStyle** m_data;
};




struct DynArray_CtxGraph_Group {
    struct CtxGraph_Group** m_data;
};




struct DynArray_SMisfireLevelParams {
    struct SMisfireLevelParams** m_data;
};




struct DynArray_SSequencerDefSequenceParams {
    struct SSequencerDefSequenceParams** m_data;
};




struct DynArray_ControlHint_Entry {
    struct ControlHint_Entry** m_data;
};




struct DynArray_CareerContract {
    struct CareerContract** m_data;
};




struct DynArray_ContractLegacy {
    struct ContractLegacy** m_data;
};




struct DynArray_Contract {
    struct Contract** m_data;
};




struct DynArray_ConsumableType {
    struct ConsumableType** m_data;
};




struct DynArray_ProceduralPlanetAudioEntry {
    struct ProceduralPlanetAudioEntry** m_data;
};




struct ChargePingTypeParams {
    uint8_t _pad_0[0x8];
    float pingChargeUIShowTime;
    float pingChargeUIJammedTime;
    float pingChargeUIHideTime;
    float pingChargeUIUnavailableTime;
    float chargeTime;
    uint8_t _pad_1[0x4];
    struct DynArray_PingSettingsParams* pingSettingsParams;
    uint8_t _pad_2[0x28];
};




struct Level {
    uint8_t _pad_0[0x8];
    enum ARDataType id;
    uint8_t _pad_1[0x4];
    struct CryStringT* gameToken;
    uint8_t _pad_2[0x8];
    struct CryStringT* thumbnail;
    uint8_t _pad_3[0x8];
    struct GameMode* defaultGameRules;
    uint8_t _pad_4[0x10];
    struct DynArray_GameMode* validGameRules;
    uint8_t _pad_5[0x28];
    struct SLoadingScreenInformationDef* loadingScreenInfo;
    uint8_t _pad_6[0x68];
    struct CLocIdentifier* locDisplayName;
    struct CLocIdentifier* description;
    uint64_t universeLocationUniqueId;
    struct SCExtendedLocalizationLevelParams* displayFeatures;
    uint8_t _pad_7[0x8];
    struct DynArray_StarMapObject* potentialSpawnLocations;
    uint8_t _pad_8[0x28];
    struct DynArray_StarMapObject* potentialDevOnlySpawnLocations;
    uint8_t _pad_9[0x28];
    struct CryStringT* systemImagePath;
    uint8_t _pad_10[0x8];
};




struct VehicleEditorEditableCategoriesData {
    uint8_t _pad_0[0x8];
    struct DynArray_VehicleEditorCategoryData* categories;
    uint8_t _pad_1[0x28];
};




struct SLocalPlayerShoppingData {
    uint8_t _pad_0[0x8];
    struct SItemShopARParams* defaultARParams;
    uint8_t _pad_1[0x90];
    struct DynArray_SLocalPlayerShoppingPredefinedARParams* predefinedARParams;
    uint8_t _pad_2[0x28];
    struct HUDSilhouetteParams* silhouette;
    uint8_t _pad_3[0x28];
    float keyHoldDuration;
    uint8_t _pad_4[0x4];
    struct SLocalPlayerShoppingNotificationConfiguration* notificationConfig;
    uint8_t _pad_5[0x30];
    struct CLocIdentifier* transactionComplete;
    struct CLocIdentifier* transactionFail;
};




struct AIObservableFiltersProfile {
    uint8_t _pad_0[0x8];
    struct DynArray_AIObservableFilters* observableFilters;
    uint8_t _pad_1[0x28];
};




struct DockingSlotVisibility {
    uint8_t _pad_0[0x8];
    struct DynArray_DockingSlotVisibilityRule* rules;
    uint8_t _pad_1[0x28];
};




struct JumpFallLandConfig {
    uint8_t _pad_0[0x8];
    struct DynArray_ActorJumpNode* jumpNodes;
    uint8_t _pad_1[0x28];
    struct DynArray_ActorFallNode* fallNodes;
    uint8_t _pad_2[0x28];
    struct DynArray_ActorLandingNode* landingNodes;
    uint8_t _pad_3[0x28];
    struct DynArray_ActorFallOverlayNode* fallOverlayNodes;
    uint8_t _pad_4[0x28];
    struct DynArray_ActorJumpFallLandVariantConfigNode* variantConfigNodes;
    uint8_t _pad_5[0x28];
};




struct FrontendOverrideParams {
    uint8_t _pad_0[0x8];
    _Bool persistentUniverseActive;
    _Bool arenaCommanderActive;
    _Bool tutorialDisabled;
    _Bool disableResidenceSelectionWarning;
    uint8_t _pad_1[0x4];
    struct CryStringT* backgroundVideoPath;
    uint8_t _pad_2[0x8];
    struct DynArray_MegaMap* disabledSystems;
    uint8_t _pad_3[0x28];
};




struct ChatEmoteRecord {
    uint8_t _pad_0[0x8];
    struct DynArray_ChatEmotePack* packs;
    uint8_t _pad_1[0x28];
};




struct FlightAcademyApplicationFormComponentParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SApplicationFormHeadHomeworld* homeworlds;
    uint8_t _pad_1[0x28];
    struct DynArray_CLocIdentifier* emergencyContactLocations;
    uint8_t _pad_2[0x28];
    struct DynArray_SApplicationFormRelationParams* emergencyContactRelations;
    uint8_t _pad_3[0x28];
    struct DynArray_SApplicationFormVoiceParams* voiceParams;
    uint8_t _pad_4[0x28];
    struct DynArray_CryStringT* bodyTypeMannequinTags;
    uint8_t _pad_5[0x28];
};




struct ActorGForceComponent {
    uint8_t _pad_0[0x8];
    struct DynArray_GForceParams* gForceParams;
    uint8_t _pad_1[0x28];
};




struct SSCSignatureSystemAudioParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SSCSignatureSystemAudioRuleset* rulesets;
    uint8_t _pad_1[0x28];
};




struct MissionPropertyValue_ShipSpawnDescriptions {
    uint8_t _pad_0[0x8];
    struct DynArray_SpawnDescription_ShipGroup* spawnDescriptions;
    uint8_t _pad_1[0x28];
};




struct ContractGenerator {
    uint8_t _pad_0[0x8];
    struct DynArray_ContractGeneratorHandlerBase* generators;
    uint8_t _pad_1[0x28];
    struct DynArray_MissionScenario* required_active_scenarios;
    uint8_t _pad_2[0x28];
};




struct SReputationJournalEntryHandlerParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SReputationJournalEntriesParams* reputationTypes;
    uint8_t _pad_1[0x28];
};




struct FoleyDefinition {
    uint8_t _pad_0[0x8];
    int32_t priority;
    uint8_t _pad_1[0x4];
    struct DynArray_FoleyItem* items;
    uint8_t _pad_2[0x28];
    struct DynArray_UserRTPC* userRTPCs;
    uint8_t _pad_3[0x28];
};




struct MobiGlasAfterActionReportGenerationRules {
    uint8_t _pad_0[0x8];
    struct MissionLogEntry* missionLogEntry;
    uint8_t _pad_1[0x10];
    struct DynArray_MobiGlasAfterActionReportRankRules* ranks;
    uint8_t _pad_2[0x28];
    struct DynArray_MobiGlasAfterActionReportStatsBlock* statsDisplay;
    uint8_t _pad_3[0x28];
    struct S42CommendationRules* commendationRules;
    uint8_t _pad_4[0x10];
    struct CLocIdentifier* CORank;
    struct CLocIdentifier* COName;
    struct CryStringT* COImage;
    uint8_t _pad_5[0x8];
    struct Tag* medPenTag;
    uint8_t _pad_6[0x10];
    struct DynArray_MissionObjective* optionalObjectives;
    uint8_t _pad_7[0x28];
};




struct BuildingBlocks_BrandStyles {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Style* brandIdentifier;
    uint8_t _pad_1[0x10];
    struct BuildingBlocks_Style* sharedStyles;
    uint8_t _pad_2[0x10];
    struct DynArray_BuildingBlocks_StyleEntry* entries;
    uint8_t _pad_3[0x28];
};




struct BuildingBlocks_Style {
    uint8_t _pad_0[0x8];
    struct DynArray_BuildingBlocks_StyleEntry* entries;
    uint8_t _pad_1[0x28];
    struct DynArray_BuildingBlocks_ColorBase* colorStyles;
    uint8_t _pad_2[0x28];
    struct DynArray_BuildingBlocks_TextEmphasisModifierList* textFieldModifiers;
    uint8_t _pad_3[0x28];
};




struct BuildingBlocks_DefaultStyles {
    uint8_t _pad_0[0x8];
    struct BuildingBlocks_Style* sharedStyles;
    uint8_t _pad_1[0x10];
    struct DynArray_BuildingBlocks_StyleEntry* entries;
    uint8_t _pad_2[0x28];
};




struct SCharacterCustomizerDialogueData {
    uint8_t _pad_0[0x8];
    float minTimeBetweenMainLines;
    float minTimeBetweenWildlines;
    float maxTimeBetweenWildlines;
    uint8_t _pad_1[0x4];
    struct DynArray_SCharacterCustomizerDialogueEntry* wildlineEntries;
    uint8_t _pad_2[0x28];
    struct DynArray_SCharacterCustomizerDialogueEntry* stepTriggers;
    uint8_t _pad_3[0x28];
    struct DynArray_SCharacterCustomizerDialogueEntry* featureTriggers;
    uint8_t _pad_4[0x28];
};




struct MissionPropertyValue_EntitySpawnDescriptions {
    uint8_t _pad_0[0x8];
    struct DynArray_SpawnDescription_EntityGroup* spawnDescriptions;
    uint8_t _pad_1[0x28];
};




struct CockpitResponses {
    uint8_t _pad_0[0x8];
    struct DynArray_CockpitResponse* responses;
    uint8_t _pad_1[0x28];
};




struct ShipComputerPreset {
    uint8_t _pad_0[0x10];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct ShipComputerPreset* base;
    uint8_t _pad_2[0x10];
    struct CLocIdentifier* displayText;
    struct DynArray_CockpitResponse* responses;
    uint8_t _pad_3[0x28];
};




struct AnimatedHelmetParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SHelmetStateMachineParams* stateMachines;
    uint8_t _pad_1[0x28];
};




struct SEALoadoutCollection {
    uint8_t _pad_0[0x8];
    struct DynArray_SEALoadoutSet* availableLoadouts;
    uint8_t _pad_1[0x28];
};




struct SPlayerUsableParams {
    uint8_t _pad_0[0x18];
    struct DynArray_PlayerUsableSlot* playerUsableSlots;
    uint8_t _pad_1[0x28];
    struct DynArray_PlayerUsableUseChannelInstance* playerUseChannels;
    uint8_t _pad_2[0x28];
    struct DynArray_SSequencerPlayerUsableTaskParams* sequencerTasks;
    uint8_t _pad_3[0x28];
    struct SSpecializedData* specializedData;
    uint8_t _pad_4[0x30];
    struct DynArray_PlayerUsableView* views;
    uint8_t _pad_5[0x28];
};




struct ItemResourceNetworkGlobal {
    uint8_t _pad_0[0x8];
    struct DynArray_ItemResourceCompositionMap* networkResources;
    uint8_t _pad_1[0x28];
    struct DynArray_ItemRoomResourcePair* resourcePairs;
    uint8_t _pad_2[0x28];
    struct DynArray_ItemResourceTypeData* itemResourceTypeData;
    uint8_t _pad_3[0x28];
    float coolantBaseConversionRate;
    float powerBaseConversionRate;
    struct ItemResourceNetworkUIParams* uiParams;
    uint8_t _pad_4[0x120];
    struct ItemResourceNetworkPowerParams* powerParams;
    uint8_t _pad_5[0x30];
    struct ItemResourceNetworkDefaultPowerDistributionParams* defaultPowerDistributionParams;
    uint8_t _pad_6[0x68];
};




struct SCItemRadarSensitivityModifierTypeContactGroups {
    uint8_t _pad_0[0x8];
    struct DynArray_RadarContactGroupEntry* contactGroups;
    uint8_t _pad_1[0x28];
};




struct RadarContactGroupArray {
    uint8_t _pad_0[0x8];
    struct DynArray_RadarContactGroupEntry* groups;
    uint8_t _pad_1[0x28];
};




struct RadarContactGroupDefinition {
    uint8_t _pad_0[0x8];
    struct DynArray_RadarContactGroupEntry* groups;
    uint8_t _pad_1[0x28];
};




struct EntityEffectSystem_MaterialCategory {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool allowMultipleTags;
    uint8_t _pad_1[0x6];
    struct DynArray_EntityEffectSystem_MaterialTagEffect* tagEffects;
    uint8_t _pad_2[0x28];
    struct DynArray_EntityEffectSystem_MaterialTriggerEffect* triggerEffects;
    uint8_t _pad_3[0x28];
};




struct EntityEffectSystem_LightCategory {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool allowMultipleTags;
    uint8_t _pad_1[0x6];
    struct DynArray_EntityEffectSystem_LightTagEffect* tagEffects;
    uint8_t _pad_2[0x28];
    struct DynArray_EntityEffectSystem_LightTriggerEffect* triggerEffects;
    uint8_t _pad_3[0x28];
};




struct SEntityEffectSystem_SoundCategory {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool allowMultipleTags;
    uint8_t _pad_1[0x6];
    struct DynArray_SEntityEffectSystem_SoundTagEffect* tagEffects;
    uint8_t _pad_2[0x28];
    struct DynArray_SEntityEffectSystem_SoundTriggerEffect* triggerEffects;
    uint8_t _pad_3[0x28];
};




struct SEntityEffectSystem_ParticleCategory {
    uint8_t _pad_0[0x8];
    _Bool enabled;
    _Bool allowMultipleTags;
    uint8_t _pad_1[0x6];
    struct DynArray_SEntityEffectSystem_ParticleTagEffect* tagEffects;
    uint8_t _pad_2[0x28];
    struct DynArray_SEntityEffectSystem_ParticleTriggerEffect* triggerEffects;
    uint8_t _pad_3[0x28];
};




struct AnimatedMarker_Marker {
    uint8_t _pad_0[0x8];
    struct DynArray_CryStringT* matrixStackID;
    uint8_t _pad_1[0x28];
    struct DynArray_AnimationGraph_Timeline* timelines;
    uint8_t _pad_2[0x28];
    struct DynArray_AnimationGraph_Timer* timers;
    uint8_t _pad_3[0x28];
};




struct MissionPropertyValue_Investigation {
    uint8_t _pad_0[0x8];
    struct DynArray_JournalEntry* startingJournalEntries;
    uint8_t _pad_1[0x28];
    struct DynArray_Investigation_Suspect* suspects;
    uint8_t _pad_2[0x28];
    struct DynArray_Investigation_Location* locations;
    uint8_t _pad_3[0x28];
};




struct SLoadoutAssortment {
    uint8_t _pad_0[0x8];
    struct SLoadoutRequirementBase* Requirement;
    uint8_t _pad_1[0x8];
    struct DynArray_SGroupedLoadouts* GroupedLoadouts;
    uint8_t _pad_2[0x28];
};




struct AudioEnvironmentFeedbackPointDef {
    uint8_t _pad_0[0x8];
    struct DynArray_AudioEnvironmentFeedbackTagAndEvent* tagAndEvents;
    uint8_t _pad_1[0x28];
};




struct SecurityAccessTokenStateModifier {
    uint8_t _pad_0[0x8];
    struct DynArray_StateTypeStateTokenRequirements* stateTypeStateTokenRequirements;
    uint8_t _pad_1[0x28];
};




struct ArmouryData {
    uint8_t _pad_0[0x8];
    struct DynArray_ArmouryItemCategory* armouryCategories;
    uint8_t _pad_1[0x28];
    struct DynArray_ArmouryCertificationParams* certificationParams;
    uint8_t _pad_2[0x28];
};




struct SCItemObservableParams {
    uint8_t _pad_0[0x8];
    struct DynArray_SCItemObservableGroupParams* observableGroups;
    uint8_t _pad_1[0x40];
};




struct HarvestableProviderPreset {
    uint8_t _pad_0[0x8];
    struct DynArray_HarvestableElementGroup* harvestableGroups;
    uint8_t _pad_1[0x28];
    struct DynArray_HarvestableAreaPreset* areas;
    uint8_t _pad_2[0x28];
};




struct AudioBreathDefinition {
    uint8_t _pad_0[0x8];
    struct AudioBreathStyleSuite* defaultBreathingStyles;
    uint8_t _pad_1[0x10];
    struct AudioBreathStyleSuite* pilotBreathingStyles;
    uint8_t _pad_2[0x10];
    struct SAudioBreathParameters* params;
    uint8_t _pad_3[0x8];
    struct DynArray_GlobalResourceAudio* audioEvents;
    uint8_t _pad_4[0x28];
    struct DynArray_AudioRtpcWithDefault* audioRTPCs;
    uint8_t _pad_5[0x28];
    struct BreathVolumeParams* breathVolumeParams;
    uint8_t _pad_6[0x8];
    struct BreathDurationParams* breathDurationParams;
    uint8_t _pad_7[0x40];
    struct DynArray_AudioBreathStyle* holdBreathStylesWhitelist;
    uint8_t _pad_8[0x28];
    struct ProcBreathingSetup* defaultProcBreathingSetup;
    uint8_t _pad_9[0x10];
    struct AudioBreathInterrupt* defaultLandingRecord;
    uint8_t _pad_10[0x10];
    struct MistedBreathParams* mistedBreathParams;
    uint8_t _pad_11[0x28];
    struct DynArray_StanceBreathModifier* stanceBreathModifiers;
    uint8_t _pad_12[0x28];
};




struct CtxGraph {
    uint8_t _pad_0[0x10];
    struct DynArray_CtxGraph_Group* groups;
    uint8_t _pad_1[0x28];
    struct DynArray_CtxGraph_Node* nodes;
    uint8_t _pad_2[0x28];
};




struct EntityComponentMisfireParams {
    uint8_t _pad_0[0x18];
    struct CLocIdentifier* itemLocId;
    float maxWindowLength;
    float minWindowLength;
    struct DynArray_SMisfireCondition* triggerConditions;
    uint8_t _pad_1[0x28];
    struct DynArray_SMisfireLevelParams* misfireLevels;
    uint8_t _pad_2[0x28];
    struct DynArray_SMisfireEffect* misfires;
    uint8_t _pad_3[0x28];
};




struct SEntityComponentSequencerParams {
    uint8_t _pad_0[0x18];
    struct DynArray_SSequencerDefSequenceParams* sequences;
    uint8_t _pad_1[0x28];
    struct SSequencerDefSequenceParams* resetSequence;
    uint8_t _pad_2[0x8];
};




struct ControlHints_Preset {
    uint8_t _pad_0[0x8];
    struct DynArray_ControlHint_Entry* hintSlots;
    uint8_t _pad_1[0x28];
};




struct ContractGeneratorHandler_Legacy {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct ContractAvailability* defaultAvailability;
    uint8_t _pad_3[0x50];
    struct ContractParamOverrides* contractParams;
    uint8_t _pad_4[0x138];
    struct DynArray_ContractLegacy* legacyContracts;
    uint8_t _pad_5[0x28];
};




struct ContractGeneratorHandler_TutorialSeriesDef {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct ContractAvailability* defaultAvailability;
    uint8_t _pad_3[0x50];
    struct ContractParamOverrides* contractParams;
    uint8_t _pad_4[0x138];
    struct DynArray_Contract* contracts;
    uint8_t _pad_5[0x28];
};




struct ContractGeneratorHandler_Career {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct ContractAvailability* defaultAvailability;
    uint8_t _pad_3[0x50];
    struct ContractParamOverrides* contractParams;
    uint8_t _pad_4[0x138];
    struct DynArray_Contract* introContracts;
    uint8_t _pad_5[0x28];
    struct FactionReputation* factionReputation;
    uint8_t _pad_6[0x10];
    struct SReputationScopeParams* reputationScope;
    uint8_t _pad_7[0x10];
    struct DynArray_CareerContract* contracts;
    uint8_t _pad_8[0x28];
};




struct ContractGeneratorHandler_LinearSeries {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct ContractAvailability* defaultAvailability;
    uint8_t _pad_3[0x50];
    struct ContractParamOverrides* contractParams;
    uint8_t _pad_4[0x138];
    struct DynArray_Contract* contracts;
    uint8_t _pad_5[0x28];
};




struct ContractGeneratorHandler_ServiceBeacon {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct ContractAvailability* defaultAvailability;
    uint8_t _pad_3[0x50];
    struct ContractParamOverrides* contractParams;
    uint8_t _pad_4[0x138];
    struct DynArray_Contract* serviceBeaconContracts;
    uint8_t _pad_5[0x28];
};




struct ContractGeneratorHandler_PVPBountyDef {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct ContractAvailability* defaultAvailability;
    uint8_t _pad_3[0x50];
    struct ContractParamOverrides* contractParams;
    uint8_t _pad_4[0x138];
    struct DynArray_Contract* PVPBountyContract;
    uint8_t _pad_5[0x28];
    _Bool escapedConvicts;
    uint8_t _pad_6[0x7];
};




struct ContractGeneratorHandler_List {
    uint8_t _pad_0[0x8];
    _Bool notForRelease;
    uint8_t _pad_1[0x7];
    struct CryStringT* debugName;
    uint8_t _pad_2[0x8];
    struct ContractAvailability* defaultAvailability;
    uint8_t _pad_3[0x50];
    struct ContractParamOverrides* contractParams;
    uint8_t _pad_4[0x138];
    struct DynArray_Contract* contracts;
    uint8_t _pad_5[0x28];
};




struct ConsumableTypeDatabase {
    uint8_t _pad_0[0x8];
    struct DynArray_ConsumableType* types;
    uint8_t _pad_1[0x28];
};




struct ProceduralPlanetAudioData {
    uint8_t _pad_0[0x8];
    struct DynArray_ProceduralPlanetAudioEntry* entries;
    uint8_t _pad_1[0x28];
    struct AudioRtpc* pressureRtpc;
    uint8_t _pad_2[0x18];
    struct AudioRtpc* temperatureRtpc;
    uint8_t _pad_3[0x18];
    struct AudioRtpc* humidityRtpc;
    uint8_t _pad_4[0x18];
    struct AudioRtpc* breathabilityRtpc;
    uint8_t _pad_5[0x18];
    struct AudioRtpc* firstRoomIsPlanetRoomRtpc;
    uint8_t _pad_6[0x18];
    struct DynArray_ProceduralPlanetAudioTagAndRtpc* effectTagMovementRtpcs;
    uint8_t _pad_7[0x28];
    struct DynArray_ProceduralPlanetAudioDisturbanceList* disturbanceLists;
    uint8_t _pad_8[0x28];
    struct AudioRtpc* disturbanceVelocityRtpc;
    uint8_t _pad_9[0x18];
};




struct DynArray_ContractGenerator {
    struct ContractGenerator** m_data;
};




struct DynArray_BuildingBlocks_BrandStyles {
    struct BuildingBlocks_BrandStyles** m_data;
};




struct DynArray_ShipComputerPreset {
    struct ShipComputerPreset** m_data;
};




struct DynArray_SEALoadoutCollection {
    struct SEALoadoutCollection** m_data;
};




struct DynArray_AnimatedMarker_Marker {
    struct AnimatedMarker_Marker** m_data;
};




struct DynArray_SLoadoutAssortment {
    struct SLoadoutAssortment** m_data;
};




struct GlobalMissionSettings {
    uint8_t _pad_0[0x8];
    struct DynArray_MissionLocationValidation* locationValidation;
    uint8_t _pad_1[0x28];
    struct Jurisdiction* defaultJurisdictionForPlayerCrimeStats;
    uint8_t _pad_2[0x10];
    struct DynArray_ContractGenerator* PVPBountyContractGenerators;
    uint8_t _pad_3[0x28];
};




struct ShipComputerPresetList {
    uint8_t _pad_0[0x8];
    struct DynArray_ShipComputerPreset* presets;
    uint8_t _pad_1[0x28];
};




struct SEAGlobalSpecialLoadout {
    uint8_t _pad_0[0x8];
    struct DynArray_SEALoadoutSet* sharedLoadouts;
    uint8_t _pad_1[0x28];
    struct DynArray_SEALoadoutCollection* teamLoadouts;
    uint8_t _pad_2[0x28];
};




struct AnimatedMarker {
    uint8_t _pad_0[0x8];
    struct CryStringT* name;
    uint8_t _pad_1[0x8];
    struct CryStringT* objectName;
    uint8_t _pad_2[0x8];
    _Bool doOriginOffsetScale;
    uint8_t _pad_3[0x3];
    float originOffsetScaleMin;
    float originOffsetTargetBoundInc;
    float matrixBlendRate;
    float lockLostLength;
    uint32_t additionAttachments;
    struct DynArray_AnimatedMarker_Marker* markers;
    uint8_t _pad_4[0x28];
};




struct SItemPortLoadoutRandomGeneratedParams {
    uint8_t _pad_0[0x8];
    struct Range* WearRange;
    uint8_t _pad_1[0x8];
    struct Range* DirtRange;
    uint8_t _pad_2[0x8];
    struct DynArray_SLoadoutInventoryItem* InventoryItems;
    uint8_t _pad_3[0x28];
    int32_t GenerationSeed;
    uint8_t _pad_4[0x4];
    struct DynArray_SLoadoutAssortment* LoadoutAssortments;
    uint8_t _pad_5[0x28];
};




struct DynArray_SEAGlobalSpecialLoadout {
    struct SEAGlobalSpecialLoadout** m_data;
};




struct SEAGlobalEventLoadouts {
    uint8_t _pad_0[0x8];
    struct DynArray_SEAGlobalSpecialLoadout* loadouts;
    uint8_t _pad_1[0x28];
};
