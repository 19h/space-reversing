#ifndef STARCITIZEN_DATACORE_HPP
#define STARCITIZEN_DATACORE_HPP

#include <stdint.h> // For sized types like uint64_t, int32_t, etc.

/* Define bool if not using <stdbool.h> */
/* typedef uint8_t bool; */
/* #define true 1 */
/* #define false 0 */

/*=========================================================================*/
/*   CORE TYPE DEFINITIONS                                                 */
/*=========================================================================*/

/* Unique runtime entity handle (seems to be 64-bit in Star Citizen) */
typedef uint64_t EntityId;

/* 32-bit FNV-1a hash, commonly used in CryEngine */
typedef uint32_t Fnv1a32;

/*-------------------------------------------------------------------------*
 * CryString
 *-------------------------------------------------------------------------*/

/* The user-facing string type (holds pointer to heap data) */
/* Note: This is often a template (CryStringT<char>) */
struct CryStringT {
    char *m_str;               /* -> UTF-8 data, NUL-terminated on heap */
};

/* The hidden metadata header preceding the string data on the heap */
struct CryString_StrHeader {
    int32_t nRefCount;         /* Reference counter */
    int32_t nLength;           /* Number of characters (excluding NUL) */
    int32_t nAllocSize;        /* Allocated size (excluding NUL and this header) */
    /* char data[nAllocSize+1] follows */
};

/* Macro to retrieve the heap header from a CryStringT object's pointer */
/* Usage: CryString_StrHeader* header = CRYSTRING_HEADER(myCryString); */
#define CRYSTRING_HEADER(obj)  ((struct CryString_StrHeader*)((obj).m_str) - 1)

/*-------------------------------------------------------------------------*
 * CryGUID
 *-------------------------------------------------------------------------*/

/* 128-bit Globally Unique Identifier */
struct CryGUID {
    uint64_t lo; /* Lower 64 bits */
    uint64_t hi; /* Upper 64 bits */
};

/*-------------------------------------------------------------------------*
 * Localization Helpers
 *-------------------------------------------------------------------------*/

/* Canonical localisation key (pointer to identifier string) */
struct CLocIdentifier {
    char *m_sIdentifier; /* Null-terminated, heap-allocated string */
};

/* Pre-hashed localisation key (FNV-1a 32-bit hash of the identifier) */
typedef Fnv1a32 CLocIdentifierHash;

/* Localised string resolved for the current language (pointer to text) */
struct CLocString {
    char *m_wString;  /* Pointer to language-specific UTF-8 text */
};

/* Generic 32-bit string hash wrapper (often FNV-1a) */
typedef Fnv1a32 CStringHash;

/*-------------------------------------------------------------------------*
 * DynArray Placeholders
 *-------------------------------------------------------------------------*/
/* The generated DynArray_T structs below represent the stack-allocated part */
/* of a dynamic array (CryEngine's LegacyDynArray / SmallDynStorage).      */
/* This typically just holds a pointer ('m_data') to the heap-allocated    */
/* element buffer. The actual elements on the heap are preceded by a       */
/* header containing size and capacity information, similar in concept to  */
/* CryString_StrHeader but with different fields.                          */

#endif // STARCITIZEN_DATACORE_HPP PREAMBLE GUARD

/*=========================================================================*/
/*   BEGINNING OF AUTO-GENERATED DEFINITIONS                               */
/*=========================================================================*/

/*=========================================================================*/
/*   ENUM DEFINITIONS (C-Style with Prefixed Variants)                     */
/*=========================================================================*/

// Original name: ARDataType
enum ARDataType {
    ARDataType_Player          = 0x0, /* Player */
    ARDataType_ShopItem        = 0x1, /* ShopItem */
    ARDataType_PointOfInterest = 0x2, /* PointOfInterest */
};

// Original name: ARLabelMovementType
enum ARLabelMovementType {
    ARLabelMovementType_Fixed        = 0x0, /* Fixed */
    ARLabelMovementType_FacingPlayer = 0x1, /* FacingPlayer */
    ARLabelMovementType_Rotating     = 0x2, /* Rotating */
};

// Original name: AbilityType
enum AbilityType {
    AbilityType_unnamed                            = 0x0, /*  */
    AbilityType_BeingRestrained                    = 0x0, /* BeingRestrained */
    AbilityType_BeingTakenDown                     = 0x1, /* BeingTakenDown */
    AbilityType_BeingUnrestrained                  = 0x2, /* BeingUnrestrained */
    AbilityType_ChangeMode                         = 0x3, /* ChangeMode */
    AbilityType_Climb                              = 0x4, /* Climb */
    AbilityType_Crouch                             = 0x5, /* Crouch */
    AbilityType_Duck                               = 0x6, /* Duck */
    AbilityType_Fire                               = 0x7, /* Fire */
    AbilityType_UseConsumable                      = 0x8, /* UseConsumable */
    AbilityType_EatAndDrink                        = 0x9, /* EatAndDrink */
    AbilityType_EatAndDrink2H                      = 0xa, /* EatAndDrink2H */
    AbilityType_HoldBreath                         = 0xb, /* HoldBreath */
    AbilityType_Jump                               = 0xc, /* Jump */
    AbilityType_Land                               = 0xd, /* Land */
    AbilityType_LadderSprint                       = 0xe, /* LadderSprint */
    AbilityType_LadderDodge                        = 0xf, /* LadderDodge */
    AbilityType_Lean                               = 0x10, /* Lean */
    AbilityType_Melee                              = 0x11, /* Melee */
    AbilityType_MedicalMelee                       = 0x12, /* MedicalMelee */
    AbilityType_MobiGlas                           = 0x13, /* MobiGlas */
    AbilityType_Movement                           = 0x14, /* Movement */
    AbilityType_Rotation                           = 0x15, /* Rotation */
    AbilityType_PersonalInnerThought               = 0x16, /* PersonalInnerThought */
    AbilityType_Place                              = 0x17, /* Place */
    AbilityType_Prone                              = 0x18, /* Prone */
    AbilityType_ProneMove                          = 0x19, /* ProneMove */
    AbilityType_ProneRoll                          = 0x1a, /* ProneRoll */
    AbilityType_Reload                             = 0x1b, /* Reload */
    AbilityType_AmmoRepool                         = 0x1c, /* AmmoRepool */
    AbilityType_Walk                               = 0x1d, /* Walk */
    AbilityType_Run                                = 0x1e, /* Run */
    AbilityType_Sprint                             = 0x1f, /* Sprint */
    AbilityType_Stand                              = 0x20, /* Stand */
    AbilityType_Stow                               = 0x21, /* Stow */
    AbilityType_Restrain                           = 0x22, /* Restrain */
    AbilityType_PreTake                            = 0x23, /* PreTake */
    AbilityType_Take                               = 0x24, /* Take */
    AbilityType_TakeDown                           = 0x25, /* TakeDown */
    AbilityType_ThrowOverhand                      = 0x26, /* ThrowOverhand */
    AbilityType_ThrowUnderhand                     = 0x27, /* ThrowUnderhand */
    AbilityType_UnarmedCombat                      = 0x28, /* UnarmedCombat */
    AbilityType_Unstow                             = 0x29, /* Unstow */
    AbilityType_Unrestrain                         = 0x2a, /* Unrestrain */
    AbilityType_Zoom                               = 0x2b, /* Zoom */
    AbilityType_HandSignal                         = 0x2c, /* HandSignal */
    AbilityType_Carry                              = 0x2d, /* Carry */
    AbilityType_Carry2H                            = 0x2e, /* Carry2H */
    AbilityType_Equip                              = 0x2f, /* Equip */
    AbilityType_SocialEmote                        = 0x30, /* SocialEmote */
    AbilityType_Fall                               = 0x31, /* Fall */
    AbilityType_Inspect                            = 0x32, /* Inspect */
    AbilityType_InteractionMode                    = 0x33, /* InteractionMode */
    AbilityType_BlockingInteractionMode            = 0x34, /* BlockingInteractionMode */
    AbilityType_TryOn                              = 0x35, /* TryOn */
    AbilityType_SeatTransition                     = 0x36, /* SeatTransition */
    AbilityType_DiscardItem                        = 0x37, /* DiscardItem */
    AbilityType_TurnStep                           = 0x38, /* TurnStep */
    AbilityType_Lookback                           = 0x39, /* Lookback */
    AbilityType_ItemRaise                          = 0x3a, /* ItemRaise */
    AbilityType_HeadTrack                          = 0x3b, /* HeadTrack */
    AbilityType_FreeLook                           = 0x3c, /* FreeLook */
    AbilityType_MeleeBlock                         = 0x3d, /* MeleeBlock */
    AbilityType_LootingInteraction                 = 0x3e, /* LootingInteraction */
    AbilityType_UsableBeingDraggedOut              = 0x3f, /* UsableBeingDraggedOut */
    AbilityType_UsableBeingDroppedIn               = 0x40, /* UsableBeingDroppedIn */
    AbilityType_UsableDragUserOut                  = 0x41, /* UsableDragUserOut */
    AbilityType_UsableDropUserIn                   = 0x42, /* UsableDropUserIn */
    AbilityType_UsableInteraction                  = 0x43, /* UsableInteraction */
    AbilityType_MeleeHeavy                         = 0x44, /* MeleeHeavy */
    AbilityType_StickyFilter                       = 0x45, /* StickyFilter */
    AbilityType_Dodge                              = 0x46, /* Dodge */
    AbilityType_ProtectFace                        = 0x47, /* ProtectFace */
    AbilityType_SuitEquip                          = 0x48, /* SuitEquip */
    AbilityType_EVA                                = 0x49, /* EVA */
    AbilityType_BodyDragging                       = 0x4a, /* BodyDragging */
    AbilityType_TrackviewControlled                = 0x4b, /* TrackviewControlled */
    AbilityType_Fidgets                            = 0x4c, /* Fidgets */
    AbilityType_DamageReactions                    = 0x4d, /* DamageReactions */
    AbilityType_EffortMoveSet                      = 0x4e, /* EffortMoveSet */
    AbilityType_WalkToPlace                        = 0x4f, /* WalkToPlace */
    AbilityType_Looting                            = 0x50, /* Looting */
    AbilityType_OpenCloseContainer                 = 0x51, /* OpenCloseContainer */
    AbilityType_UseConsumable2H                    = 0x52, /* UseConsumable2H */
    AbilityType_VisorWipe                          = 0x53, /* VisorWipe */
    AbilityType_CanUseMovable                      = 0x54, /* CanUseMovable */
    AbilityType_ThrowReady                         = 0x55, /* ThrowReady */
    AbilityType_PlaceReady                         = 0x56, /* PlaceReady */
    AbilityType_PrimeItem                          = 0x57, /* PrimeItem */
    AbilityType_Hack                               = 0x58, /* Hack */
    AbilityType_UsingMovable                       = 0x59, /* UsingMovable */
    AbilityType_ZeroGTraversal                     = 0x5a, /* ZeroGTraversal */
    AbilityType_ZeroGTraversalMovement             = 0x5b, /* ZeroGTraversalMovement */
    AbilityType_ZeroGTraversalHandAttach           = 0x5c, /* ZeroGTraversalHandAttach */
    AbilityType_WeaponMount                        = 0x5d, /* WeaponMount */
    AbilityType_Scanning                           = 0x5e, /* Scanning */
    AbilityType_TurnOverApply                      = 0x5f, /* TurnOverApply */
    AbilityType_SyncedRevival                      = 0x60, /* SyncedRevival */
    AbilityType_Vault                              = 0x61, /* Vault */
    AbilityType_VaultHigh                          = 0x62, /* VaultHigh */
    AbilityType_Mantle                             = 0x63, /* Mantle */
    AbilityType_MantleHigh                         = 0x64, /* MantleHigh */
    AbilityType_DrunkStumble                       = 0x65, /* DrunkStumble */
    AbilityType_SelfTarget                         = 0x66, /* SelfTarget */
    AbilityType_ForceReactions                     = 0x67, /* ForceReactions */
    AbilityType_SoftLockWeapons                    = 0x68, /* SoftLockWeapons */
    AbilityType_AnyPlayerAnimatedInteraction       = 0x69, /* AnyPlayerAnimatedInteraction */
    AbilityType_LeftHandPlayerAnimatedInteraction  = 0x6a, /* LeftHandPlayerAnimatedInteraction */
    AbilityType_RightHandPlayerAnimatedInteraction = 0x6b, /* RightHandPlayerAnimatedInteraction */
    AbilityType_FixOverheat                        = 0x6c, /* FixOverheat */
    AbilityType_OpenInventory                      = 0x6d, /* OpenInventory */
    AbilityType_Misfire                            = 0x6e, /* Misfire */
    AbilityType_SyncedMeleeAttack                  = 0x6f, /* SyncedMeleeAttack */
    AbilityType_SyncedMeleeDefend                  = 0x70, /* SyncedMeleeDefend */
    AbilityType_Swim                               = 0x71, /* Swim */
    AbilityType_WeaponLowering                     = 0x72, /* WeaponLowering */
    AbilityType_Slide                              = 0x73, /* Slide */
    AbilityType_SlideDrop                          = 0x74, /* SlideDrop */
    AbilityType_Malfunctioning                     = 0x75, /* Malfunctioning */
    AbilityType_StaticFiringModeDeploy             = 0x76, /* StaticFiringModeDeploy */
    AbilityType_StaticFiringModeIdle               = 0x77, /* StaticFiringModeIdle */
    AbilityType_StaticFiringModeRetract            = 0x78, /* StaticFiringModeRetract */
    AbilityType_AttachedWeaponDeploy               = 0x79, /* AttachedWeaponDeploy */
    AbilityType_AttachedWeaponIdle                 = 0x7a, /* AttachedWeaponIdle */
    AbilityType_AttachedWeaponRetract              = 0x7b, /* AttachedWeaponRetract */
    AbilityType_EquipWearable                      = 0x7c, /* EquipWearable */
    AbilityType_UNDEFINED                          = 0x7d, /* UNDEFINED */
};

// Original name: AccountBadge
enum AccountBadge {
    AccountBadge_RSI_BADGE_QA         = 0x1, /* RSI_BADGE_QA */
    AccountBadge_RSI_BADGE_STAFF      = 0x2, /* RSI_BADGE_STAFF */
    AccountBadge_RSI_BADGE_GM         = 0x4, /* RSI_BADGE_GM */
    AccountBadge_RSI_BADGE_SUBSCRIBER = 0x8, /* RSI_BADGE_SUBSCRIBER */
    AccountBadge_RSI_BADGE_CONCIERGE  = 0x10, /* RSI_BADGE_CONCIERGE */
    AccountBadge_RSI_BADGE_MMHC       = 0x20, /* RSI_BADGE_MMHC */
    AccountBadge_RSI_BADGE_BACKER     = 0x40, /* RSI_BADGE_BACKER */
};

// Original name: ActivationMethod
enum ActivationMethod {
    ActivationMethod_ActivateOnAttach = 0x0, /* ActivateOnAttach */
    ActivationMethod_ActivateOnDemand = 0x1, /* ActivateOnDemand */
};

// Original name: ActivationMode
enum ActivationMode {
    ActivationMode_Default   = 0x0, /* Default */
    ActivationMode_Press     = 0x1, /* Press */
    ActivationMode_Tap       = 0x2, /* Tap */
    ActivationMode_DoubleTap = 0x3, /* DoubleTap */
    ActivationMode_Hold      = 0x4, /* Hold */
    ActivationMode_Release   = 0x5, /* Release */
    ActivationMode_Movement  = 0x6, /* Movement */
    ActivationMode_UNDEFINED = 0x7, /* UNDEFINED */
};

// Original name: ActiveRange
enum ActiveRange {
    ActiveRange_InteriorRange = 0x0, /* InteriorRange */
    ActiveRange_ExteriorRange = 0x1, /* ExteriorRange */
    ActiveRange_UNDEFINED     = 0x2, /* UNDEFINED */
};

// Original name: ActorBodyDirection
enum ActorBodyDirection {
    ActorBodyDirection_None      = 0x0, /* None */
    ActorBodyDirection_Chest     = 0x1, /* Chest */
    ActorBodyDirection_Back      = 0x2, /* Back */
    ActorBodyDirection_Right     = 0x3, /* Right */
    ActorBodyDirection_Left      = 0x4, /* Left */
    ActorBodyDirection_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: ActorBone
enum ActorBone {
    ActorBone_Hips                  = 0x0, /* Hips */
    ActorBone_Spine                 = 0x1, /* Spine */
    ActorBone_Spine2                = 0x2, /* Spine2 */
    ActorBone_Spine3                = 0x3, /* Spine3 */
    ActorBone_Neck                  = 0x4, /* Neck */
    ActorBone_Head                  = 0x5, /* Head */
    ActorBone_FACIAL_LOD1_R_Eyeball = 0x6, /* FACIAL_LOD1_R_Eyeball */
    ActorBone_FACIAL_LOD1_L_Eyeball = 0x7, /* FACIAL_LOD1_L_Eyeball */
    ActorBone_Weapon                = 0x8, /* Weapon */
    ActorBone_Weapon2               = 0x9, /* Weapon2 */
    ActorBone_FootRight             = 0xa, /* FootRight */
    ActorBone_FootLeft              = 0xb, /* FootLeft */
    ActorBone_ArmRight              = 0xc, /* ArmRight */
    ActorBone_ArmLeft               = 0xd, /* ArmLeft */
    ActorBone_ForearmRight          = 0xe, /* ForearmRight */
    ActorBone_ForearmLeft           = 0xf, /* ForearmLeft */
    ActorBone_CalfRight             = 0x12, /* CalfRight */
    ActorBone_CalfLeft              = 0x13, /* CalfLeft */
    ActorBone_Camera                = 0x14, /* Camera */
    ActorBone_LegRight              = 0x15, /* LegRight */
    ActorBone_LegLeft               = 0x16, /* LegLeft */
};

// Original name: ActorStatCooldownType
enum ActorStatCooldownType {
    ActorStatCooldownType_Time      = 0x0, /* Time */
    ActorStatCooldownType_Points    = 0x1, /* Points */
    ActorStatCooldownType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: ActorStatType
enum ActorStatType {
    ActorStatType_Hunger           = 0x0, /* Hunger */
    ActorStatType_Thirst           = 0x1, /* Thirst */
    ActorStatType_BloodDrugLevel   = 0x2, /* BloodDrugLevel */
    ActorStatType_OverdoseLevel    = 0x3, /* OverdoseLevel */
    ActorStatType_BodyTemperature  = 0x4, /* BodyTemperature */
    ActorStatType_SuitTemperature  = 0x5, /* SuitTemperature */
    ActorStatType_Stun             = 0x6, /* Stun */
    ActorStatType_Distortion       = 0x7, /* Distortion */
    ActorStatType_Pressure         = 0x8, /* Pressure */
    ActorStatType_GasSaturationO2  = 0x9, /* GasSaturationO2 */
    ActorStatType_DownedDamage     = 0xa, /* DownedDamage */
    ActorStatType_HealthPool       = 0xb, /* HealthPool */
    ActorStatType_HealthHead       = 0xc, /* HealthHead */
    ActorStatType_HealthTorso      = 0xd, /* HealthTorso */
    ActorStatType_HealthLeftArm    = 0xe, /* HealthLeftArm */
    ActorStatType_HealthRightArm   = 0xf, /* HealthRightArm */
    ActorStatType_HealthLeftLeg    = 0x10, /* HealthLeftLeg */
    ActorStatType_HealthRightLeg   = 0x11, /* HealthRightLeg */
    ActorStatType_WearHead         = 0x12, /* WearHead */
    ActorStatType_WearTorso        = 0x13, /* WearTorso */
    ActorStatType_WearLeftArm      = 0x14, /* WearLeftArm */
    ActorStatType_WearRightArm     = 0x15, /* WearRightArm */
    ActorStatType_WearLeftLeg      = 0x16, /* WearLeftLeg */
    ActorStatType_WearRightLeg     = 0x17, /* WearRightLeg */
    ActorStatType_BodyRadiation    = 0x18, /* BodyRadiation */
    ActorStatType_SuitRadiation    = 0x19, /* SuitRadiation */
    ActorStatType_GasSaturationCO2 = 0x1a, /* GasSaturationCO2 */
    ActorStatType_GasSaturationCO  = 0x1b, /* GasSaturationCO */
    ActorStatType_Hygiene          = 0x1c, /* Hygiene */
    ActorStatType_UNDEFINED        = 0x1d, /* UNDEFINED */
};

// Original name: ActorStateFilterByAimStanceState
enum ActorStateFilterByAimStanceState {
    ActorStateFilterByAimStanceState_Any        = 0x0, /* Any */
    ActorStateFilterByAimStanceState_Inactive   = 0x1, /* Inactive */
    ActorStateFilterByAimStanceState_Relaxed    = 0x2, /* Relaxed */
    ActorStateFilterByAimStanceState_Ready      = 0x3, /* Ready */
    ActorStateFilterByAimStanceState_Lowered    = 0x4, /* Lowered */
    ActorStateFilterByAimStanceState_ADS        = 0x5, /* ADS */
    ActorStateFilterByAimStanceState_Inspect    = 0x6, /* Inspect */
    ActorStateFilterByAimStanceState_SelfTarget = 0x7, /* SelfTarget */
    ActorStateFilterByAimStanceState_MeleeBlock = 0x8, /* MeleeBlock */
    ActorStateFilterByAimStanceState_ThrowReady = 0x9, /* ThrowReady */
    ActorStateFilterByAimStanceState_UNDEFINED  = 0xa, /* UNDEFINED */
};

// Original name: ActorStateFilterByCharacterType
enum ActorStateFilterByCharacterType {
    ActorStateFilterByCharacterType_Any            = 0x0, /* Any */
    ActorStateFilterByCharacterType_PlayerOnly     = 0x1, /* PlayerOnly */
    ActorStateFilterByCharacterType_NonPlayersOnly = 0x2, /* NonPlayersOnly */
    ActorStateFilterByCharacterType_UNDEFINED      = 0x3, /* UNDEFINED */
};

// Original name: ActorStateFilterByHeldItemType
enum ActorStateFilterByHeldItemType {
    ActorStateFilterByHeldItemType_Any             = 0x0, /* Any */
    ActorStateFilterByHeldItemType_Pistol          = 0x1, /* Pistol */
    ActorStateFilterByHeldItemType_Stocked         = 0x2, /* Stocked */
    ActorStateFilterByHeldItemType_Shouldered      = 0x3, /* Shouldered */
    ActorStateFilterByHeldItemType_MeleeMode       = 0x4, /* MeleeMode */
    ActorStateFilterByHeldItemType_mobiGlas        = 0x5, /* mobiGlas */
    ActorStateFilterByHeldItemType_CombatThrowable = 0x6, /* CombatThrowable */
    ActorStateFilterByHeldItemType_Food            = 0x7, /* Food */
    ActorStateFilterByHeldItemType_Drink           = 0x8, /* Drink */
    ActorStateFilterByHeldItemType_MediPenHeal     = 0x9, /* MediPenHeal */
    ActorStateFilterByHeldItemType_Other           = 0xa, /* Other */
    ActorStateFilterByHeldItemType_Movable         = 0xb, /* Movable */
    ActorStateFilterByHeldItemType_TractorBeam     = 0xc, /* TractorBeam */
    ActorStateFilterByHeldItemType_MiningTool      = 0xd, /* MiningTool */
    ActorStateFilterByHeldItemType_None            = 0xe, /* None */
    ActorStateFilterByHeldItemType_UNDEFINED       = 0xf, /* UNDEFINED */
};

// Original name: ActorStateFilterByLeanState
enum ActorStateFilterByLeanState {
    ActorStateFilterByLeanState_Any       = 0x0, /* Any */
    ActorStateFilterByLeanState_Left      = 0x1, /* Left */
    ActorStateFilterByLeanState_Right     = 0x2, /* Right */
    ActorStateFilterByLeanState_None      = 0x3, /* None */
    ActorStateFilterByLeanState_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: ActorStateFilterByLocomotionSet
enum ActorStateFilterByLocomotionSet {
    ActorStateFilterByLocomotionSet_Any          = 0x0, /* Any */
    ActorStateFilterByLocomotionSet_Drunk        = 0x1, /* Drunk */
    ActorStateFilterByLocomotionSet_Standard     = 0x2, /* Standard */
    ActorStateFilterByLocomotionSet_Effort       = 0x3, /* Effort */
    ActorStateFilterByLocomotionSet_Hurt         = 0x4, /* Hurt */
    ActorStateFilterByLocomotionSet_Stumble      = 0x5, /* Stumble */
    ActorStateFilterByLocomotionSet_BodyDragging = 0x6, /* BodyDragging */
    ActorStateFilterByLocomotionSet_Movable      = 0x7, /* Movable */
    ActorStateFilterByLocomotionSet_UNDEFINED    = 0x8, /* UNDEFINED */
};

// Original name: ActorStateFilterByMotionSpeed
enum ActorStateFilterByMotionSpeed {
    ActorStateFilterByMotionSpeed_Any       = 0x0, /* Any */
    ActorStateFilterByMotionSpeed_Idle      = 0x1, /* Idle */
    ActorStateFilterByMotionSpeed_Movement  = 0x2, /* Movement */
    ActorStateFilterByMotionSpeed_Walk      = 0x3, /* Walk */
    ActorStateFilterByMotionSpeed_Run       = 0x4, /* Run */
    ActorStateFilterByMotionSpeed_WalkOrRun = 0x5, /* WalkOrRun */
    ActorStateFilterByMotionSpeed_Sprint    = 0x6, /* Sprint */
    ActorStateFilterByMotionSpeed_UNDEFINED = 0x7, /* UNDEFINED */
};

// Original name: ActorStateFilterByPoseState
enum ActorStateFilterByPoseState {
    ActorStateFilterByPoseState_Any           = 0x0, /* Any */
    ActorStateFilterByPoseState_Inactive      = 0x1, /* Inactive */
    ActorStateFilterByPoseState_NoWeapon      = 0x2, /* NoWeapon */
    ActorStateFilterByPoseState_Weapon        = 0x3, /* Weapon */
    ActorStateFilterByPoseState_Carry         = 0x4, /* Carry */
    ActorStateFilterByPoseState_EnterCarry    = 0x5, /* EnterCarry */
    ActorStateFilterByPoseState_ExitCarry     = 0x6, /* ExitCarry */
    ActorStateFilterByPoseState_UnarmedCombat = 0x7, /* UnarmedCombat */
    ActorStateFilterByPoseState_UNDEFINED     = 0x8, /* UNDEFINED */
};

// Original name: ActorStateFilterBySkeleton
enum ActorStateFilterBySkeleton {
    ActorStateFilterBySkeleton_Any         = 0x0, /* Any */
    ActorStateFilterBySkeleton_HumanMale   = 0x1, /* HumanMale */
    ActorStateFilterBySkeleton_HumanFemale = 0x2, /* HumanFemale */
    ActorStateFilterBySkeleton_Vanduul     = 0x3, /* Vanduul */
    ActorStateFilterBySkeleton_UNDEFINED   = 0x4, /* UNDEFINED */
};

// Original name: ActorStateFilterByStanceState
enum ActorStateFilterByStanceState {
    ActorStateFilterByStanceState_Any           = 0x0, /* Any */
    ActorStateFilterByStanceState_Inactive      = 0x1, /* Inactive */
    ActorStateFilterByStanceState_Stand         = 0x2, /* Stand */
    ActorStateFilterByStanceState_Crouch        = 0x3, /* Crouch */
    ActorStateFilterByStanceState_Prone         = 0x4, /* Prone */
    ActorStateFilterByStanceState_ProneFront    = 0x5, /* ProneFront */
    ActorStateFilterByStanceState_ProneBack     = 0x6, /* ProneBack */
    ActorStateFilterByStanceState_ProneV2       = 0x7, /* ProneV2 */
    ActorStateFilterByStanceState_CoverLow      = 0x8, /* CoverLow */
    ActorStateFilterByStanceState_CoverHigh     = 0x9, /* CoverHigh */
    ActorStateFilterByStanceState_Seated        = 0xa, /* Seated */
    ActorStateFilterByStanceState_StandSquashed = 0xb, /* StandSquashed */
    ActorStateFilterByStanceState_Swim          = 0xc, /* Swim */
    ActorStateFilterByStanceState_Underground   = 0xd, /* Underground */
    ActorStateFilterByStanceState_UNDEFINED     = 0xe, /* UNDEFINED */
};

// Original name: ActorStateFilterByState
enum ActorStateFilterByState {
    ActorStateFilterByState_Any                    = 0x0, /* Any */
    ActorStateFilterByState_BodyDragged            = 0x1, /* BodyDragged */
    ActorStateFilterByState_BodyDragging           = 0x2, /* BodyDragging */
    ActorStateFilterByState_EVA                    = 0x3, /* EVA */
    ActorStateFilterByState_Jump                   = 0x4, /* Jump */
    ActorStateFilterByState_Fall                   = 0x5, /* Fall */
    ActorStateFilterByState_Land                   = 0x6, /* Land */
    ActorStateFilterByState_KnockDown              = 0x7, /* KnockDown */
    ActorStateFilterByState_Fly                    = 0x8, /* Fly */
    ActorStateFilterByState_Swim                   = 0x9, /* Swim */
    ActorStateFilterByState_Ground                 = 0xa, /* Ground */
    ActorStateFilterByState_Ladder                 = 0xb, /* Ladder */
    ActorStateFilterByState_Interacting            = 0xc, /* Interacting */
    ActorStateFilterByState_Ledge                  = 0xd, /* Ledge */
    ActorStateFilterByState_Restrain               = 0xe, /* Restrain */
    ActorStateFilterByState_Unrestrain             = 0xf, /* Unrestrain */
    ActorStateFilterByState_TakeDown               = 0x10, /* TakeDown */
    ActorStateFilterByState_Usable                 = 0x11, /* Usable */
    ActorStateFilterByState_WeaponMount            = 0x12, /* WeaponMount */
    ActorStateFilterByState_Scanning               = 0x13, /* Scanning */
    ActorStateFilterByState_Linked                 = 0x14, /* Linked */
    ActorStateFilterByState_ZeroGTraversal         = 0x15, /* ZeroGTraversal */
    ActorStateFilterByState_ZeroGLaunch            = 0x16, /* ZeroGLaunch */
    ActorStateFilterByState_ZeroGHandholdTraversal = 0x17, /* ZeroGHandholdTraversal */
    ActorStateFilterByState_Slide                  = 0x18, /* Slide */
    ActorStateFilterByState_Reload                 = 0x19, /* Reload */
    ActorStateFilterByState_HolsterUnholster       = 0x1a, /* HolsterUnholster */
    ActorStateFilterByState_Dead                   = 0x1b, /* Dead */
    ActorStateFilterByState_UNDEFINED              = 0x1c, /* UNDEFINED */
};

// Original name: ActorStateSelection_Stance
enum ActorStateSelection_Stance {
    ActorStateSelection_Stance_Any           = 0x0, /* Any */
    ActorStateSelection_Stance_Stand         = 0x1, /* Stand */
    ActorStateSelection_Stance_Crouch        = 0x2, /* Crouch */
    ActorStateSelection_Stance_Prone         = 0x3, /* Prone */
    ActorStateSelection_Stance_ProneBack     = 0x4, /* ProneBack */
    ActorStateSelection_Stance_CoverLow      = 0x5, /* CoverLow */
    ActorStateSelection_Stance_CoverHigh     = 0x6, /* CoverHigh */
    ActorStateSelection_Stance_Seated        = 0x7, /* Seated */
    ActorStateSelection_Stance_StandSquashed = 0x8, /* StandSquashed */
    ActorStateSelection_Stance_Swim          = 0x9, /* Swim */
    ActorStateSelection_Stance_UNDEFINED     = 0xa, /* UNDEFINED */
};

// Original name: ActorStatusType
enum ActorStatusType {
    ActorStatusType_Concussion                = 0x0, /* Concussion */
    ActorStatusType_Hypothermia               = 0x1, /* Hypothermia */
    ActorStatusType_Hyperthermia              = 0x2, /* Hyperthermia */
    ActorStatusType_Depressurization          = 0x3, /* Depressurization */
    ActorStatusType_PoorAtmosphereQuality     = 0x4, /* PoorAtmosphereQuality */
    ActorStatusType_LowHealth                 = 0x5, /* LowHealth */
    ActorStatusType_Hurt                      = 0x6, /* Hurt */
    ActorStatusType_Damaged                   = 0x7, /* Damaged */
    ActorStatusType_Ruined                    = 0x8, /* Ruined */
    ActorStatusType_Starved                   = 0x9, /* Starved */
    ActorStatusType_Dehydrated                = 0xa, /* Dehydrated */
    ActorStatusType_Dying                     = 0xb, /* Dying */
    ActorStatusType_MildlyIntoxicated         = 0xc, /* MildlyIntoxicated */
    ActorStatusType_Intoxicated               = 0xd, /* Intoxicated */
    ActorStatusType_Downed                    = 0xe, /* Downed */
    ActorStatusType_Overdosed                 = 0xf, /* Overdosed */
    ActorStatusType_Injury                    = 0x10, /* Injury */
    ActorStatusType_MajorInjury               = 0x11, /* MajorInjury */
    ActorStatusType_DeadlyInjury              = 0x12, /* DeadlyInjury */
    ActorStatusType_RadiationSicknessMild     = 0x13, /* RadiationSicknessMild */
    ActorStatusType_RadiationSicknessModerate = 0x14, /* RadiationSicknessModerate */
    ActorStatusType_RadiationSicknessSevere   = 0x15, /* RadiationSicknessSevere */
    ActorStatusType_DistortionInterference    = 0x16, /* DistortionInterference */
    ActorStatusType_UNDEFINED                 = 0x17, /* UNDEFINED */
};

// Original name: ActorStatusWidget
enum ActorStatusWidget {
    ActorStatusWidget_HealthPool          = 0x0, /* HealthPool */
    ActorStatusWidget_Oxygen              = 0x1, /* Oxygen */
    ActorStatusWidget_BodyTemperature     = 0x2, /* BodyTemperature */
    ActorStatusWidget_ExternalTemperature = 0x3, /* ExternalTemperature */
    ActorStatusWidget_InjuryDoll          = 0x4, /* InjuryDoll */
    ActorStatusWidget_HeartMonitor        = 0x5, /* HeartMonitor */
    ActorStatusWidget_Hunger              = 0x6, /* Hunger */
    ActorStatusWidget_Thirst              = 0x7, /* Thirst */
    ActorStatusWidget_BloodDrugLevel      = 0x8, /* BloodDrugLevel */
    ActorStatusWidget_UNDEFINED           = 0x9, /* UNDEFINED */
};

// Original name: AgentStance
enum AgentStance {
    AgentStance_Stand     = 0x1, /* Stand */
    AgentStance_Crouch    = 0x2, /* Crouch */
    AgentStance_Prone     = 0x3, /* Prone */
    AgentStance_CoverLow  = 0x5, /* CoverLow */
    AgentStance_CoverHigh = 0x6, /* CoverHigh */
};

// Original name: AmmoCategory
enum AmmoCategory {
    AmmoCategory_None          = 0x0, /* None */
    AmmoCategory__5mm          = 0x1, /* _5mm */
    AmmoCategory__7mm          = 0x2, /* _7mm */
    AmmoCategory__10mm         = 0x3, /* _10mm */
    AmmoCategory__50cal        = 0x4, /* _50cal */
    AmmoCategory__50cal_pistol = 0x5, /* _50cal_pistol */
    AmmoCategory__12g          = 0x6, /* _12g */
    AmmoCategory_Electron      = 0x7, /* Electron */
    AmmoCategory_Coil          = 0x8, /* Coil */
    AmmoCategory_Plasma        = 0x9, /* Plasma */
    AmmoCategory_Laser         = 0xa, /* Laser */
    AmmoCategory_UNDEFINED     = 0xb, /* UNDEFINED */
};

// Original name: AmmoSpawnType
enum AmmoSpawnType {
    AmmoSpawnType_AllClients       = 0x0, /* AllClients */
    AmmoSpawnType_ServerReplicated = 0x1, /* ServerReplicated */
    AmmoSpawnType_UNDEFINED        = 0x2, /* UNDEFINED */
};

// Original name: AnimFootSyncMethod
enum AnimFootSyncMethod {
    AnimFootSyncMethod_Pairs = 0x0, /* Pairs */
};

// Original name: AnimationGraph_TimeModifier
enum AnimationGraph_TimeModifier {
    AnimationGraph_TimeModifier_None    = 0x0, /* None */
    AnimationGraph_TimeModifier_Total   = 0x1, /* Total */
    AnimationGraph_TimeModifier_Stagger = 0x2, /* Stagger */
};

// Original name: AnimationGraph_TrackType
enum AnimationGraph_TrackType {
    AnimationGraph_TrackType_RotateX = 0x0, /* RotateX */
    AnimationGraph_TrackType_RotateY = 0x1, /* RotateY */
    AnimationGraph_TrackType_RotateZ = 0x2, /* RotateZ */
    AnimationGraph_TrackType_Scale   = 0x3, /* Scale */
    AnimationGraph_TrackType_Number  = 0x4, /* Number */
};

// Original name: AnimationScopeContextTypes
enum AnimationScopeContextTypes {
    AnimationScopeContextTypes_Self            = 0x0, /* Self */
    AnimationScopeContextTypes_ObjectContainer = 0x1, /* ObjectContainer */
    AnimationScopeContextTypes_ItemPort        = 0x2, /* ItemPort */
    AnimationScopeContextTypes_UNDEFINED       = 0x3, /* UNDEFINED */
};

// Original name: AnimationVariableInterpolationType
enum AnimationVariableInterpolationType {
    AnimationVariableInterpolationType_Linear       = 0x0, /* Linear */
    AnimationVariableInterpolationType_Acceleration = 0x1, /* Acceleration */
    AnimationVariableInterpolationType_Deceleration = 0x2, /* Deceleration */
    AnimationVariableInterpolationType_Snap         = 0x3, /* Snap */
    AnimationVariableInterpolationType_UNDEFINED    = 0x4, /* UNDEFINED */
};

// Original name: AsteroidStatePropertyType
enum AsteroidStatePropertyType {
    AsteroidStatePropertyType_DebrisDensity = 0x0, /* DebrisDensity */
    AsteroidStatePropertyType_UNDEFINED     = 0x1, /* UNDEFINED */
};

// Original name: AtmosphereStatePropertyType
enum AtmosphereStatePropertyType {
    AtmosphereStatePropertyType_Pressure    = 0x0, /* Pressure */
    AtmosphereStatePropertyType_Temperature = 0x1, /* Temperature */
    AtmosphereStatePropertyType_Humidity    = 0x2, /* Humidity */
    AtmosphereStatePropertyType_UNDEFINED   = 0x3, /* UNDEFINED */
};

// Original name: AtmosphereType
enum AtmosphereType {
    AtmosphereType_Static    = 0x0, /* Static */
    AtmosphereType_Dynamic   = 0x1, /* Dynamic */
    AtmosphereType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: AttachmentZoneType
enum AttachmentZoneType {
    AttachmentZoneType_Hosted     = 0x0, /* Hosted */
    AttachmentZoneType_Host       = 0x1, /* Host */
    AttachmentZoneType_HostParent = 0x2, /* HostParent */
    AttachmentZoneType_Root       = 0x3, /* Root */
    AttachmentZoneType_UNDEFINED  = 0x4, /* UNDEFINED */
};

// Original name: AttackType
enum AttackType {
    AttackType_LightRight    = 0x0, /* LightRight */
    AttackType_LightLeft     = 0x1, /* LightLeft */
    AttackType_HeavyRight    = 0x2, /* HeavyRight */
    AttackType_HeavyLeft     = 0x3, /* HeavyLeft */
    AttackType_SyringeStab   = 0x4, /* SyringeStab */
    AttackType_AI_Light      = 0x5, /* AI_Light */
    AttackType_AI_Heavy      = 0x6, /* AI_Heavy */
    AttackType_AI_SwipeLeft  = 0x7, /* AI_SwipeLeft */
    AttackType_AI_SwipeRight = 0x8, /* AI_SwipeRight */
    AttackType_AI_Stab       = 0x9, /* AI_Stab */
    AttackType_AI_Leap       = 0xa, /* AI_Leap */
    AttackType_AI_HammerDown = 0xb, /* AI_HammerDown */
    AttackType_AI_PushBack   = 0xc, /* AI_PushBack */
    AttackType_AI_Shoot      = 0xd, /* AI_Shoot */
    AttackType_AI_TestAttack = 0xe, /* AI_TestAttack */
};

// Original name: BB_AnimationDirection
enum BB_AnimationDirection {
    BB_AnimationDirection_Forward          = 0x0, /* Forward */
    BB_AnimationDirection_Reverse          = 0x1, /* Reverse */
    BB_AnimationDirection_Alternate        = 0x2, /* Alternate */
    BB_AnimationDirection_AlternateReverse = 0x3, /* AlternateReverse */
    BB_AnimationDirection_UNDEFINED        = 0x4, /* UNDEFINED */
};

// Original name: BB_AnimationFillMode
enum BB_AnimationFillMode {
    BB_AnimationFillMode_None      = 0x0, /* None */
    BB_AnimationFillMode_Forward   = 0x1, /* Forward */
    BB_AnimationFillMode_Backward  = 0x2, /* Backward */
    BB_AnimationFillMode_Both      = 0x3, /* Both */
    BB_AnimationFillMode_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: BB_AudioEvent
enum BB_AudioEvent {
    BB_AudioEvent_Change        = 0x0, /* Change */
    BB_AudioEvent_ChangeToTrue  = 0x1, /* ChangeToTrue */
    BB_AudioEvent_ChangeToFalse = 0x2, /* ChangeToFalse */
    BB_AudioEvent_UNDEFINED     = 0x3, /* UNDEFINED */
};

// Original name: BB_AutoScalingMethod
enum BB_AutoScalingMethod {
    BB_AutoScalingMethod_None      = 0x0, /* None */
    BB_AutoScalingMethod_Fill      = 0x1, /* Fill */
    BB_AutoScalingMethod_Contain   = 0x2, /* Contain */
    BB_AutoScalingMethod_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_Axis
enum BB_Axis {
    BB_Axis_None      = 0x0, /* None */
    BB_Axis_X         = 0x1, /* X */
    BB_Axis_Y         = 0x2, /* Y */
    BB_Axis_Both      = 0x3, /* Both */
    BB_Axis_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: BB_AxisDirection
enum BB_AxisDirection {
    BB_AxisDirection_Horizontal = 0x0, /* Horizontal */
    BB_AxisDirection_Vertical   = 0x1, /* Vertical */
    BB_AxisDirection_UNDEFINED  = 0x2, /* UNDEFINED */
};

// Original name: BB_BackgroundType
enum BB_BackgroundType {
    BB_BackgroundType_None      = 0x0, /* None */
    BB_BackgroundType_Texture   = 0x1, /* Texture */
    BB_BackgroundType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_BindingsArithmeticType
enum BB_BindingsArithmeticType {
    BB_BindingsArithmeticType_Add       = 0x0, /* Add */
    BB_BindingsArithmeticType_Sub       = 0x1, /* Sub */
    BB_BindingsArithmeticType_Mul       = 0x2, /* Mul */
    BB_BindingsArithmeticType_Div       = 0x3, /* Div */
    BB_BindingsArithmeticType_Min       = 0x4, /* Min */
    BB_BindingsArithmeticType_Max       = 0x5, /* Max */
    BB_BindingsArithmeticType_Mod       = 0x6, /* Mod */
    BB_BindingsArithmeticType_Pow       = 0x7, /* Pow */
    BB_BindingsArithmeticType_UNDEFINED = 0x8, /* UNDEFINED */
};

// Original name: BB_BindingsBuiltInVariableTypeInteger
enum BB_BindingsBuiltInVariableTypeInteger {
    BB_BindingsBuiltInVariableTypeInteger_ServerTime = 0x0, /* ServerTime */
    BB_BindingsBuiltInVariableTypeInteger_ListIndex  = 0x1, /* ListIndex */
    BB_BindingsBuiltInVariableTypeInteger_UNDEFINED  = 0x2, /* UNDEFINED */
};

// Original name: BB_BindingsBuiltInVariableTypeNumber
enum BB_BindingsBuiltInVariableTypeNumber {
    BB_BindingsBuiltInVariableTypeNumber_TimerSeconds   = 0x0, /* TimerSeconds */
    BB_BindingsBuiltInVariableTypeNumber_CameraDistance = 0x1, /* CameraDistance */
    BB_BindingsBuiltInVariableTypeNumber_UNDEFINED      = 0x2, /* UNDEFINED */
};

// Original name: BB_BindingsCaseModifierType
enum BB_BindingsCaseModifierType {
    BB_BindingsCaseModifierType_None      = 0x0, /* None */
    BB_BindingsCaseModifierType_Upper     = 0x1, /* Upper */
    BB_BindingsCaseModifierType_Lower     = 0x2, /* Lower */
    BB_BindingsCaseModifierType_Pascal    = 0x3, /* Pascal */
    BB_BindingsCaseModifierType_Camel     = 0x4, /* Camel */
    BB_BindingsCaseModifierType_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: BB_BindingsCurrencyType
enum BB_BindingsCurrencyType {
    BB_BindingsCurrencyType_CURRENCY_UEC  = 0x0, /* CURRENCY_UEC */
    BB_BindingsCurrencyType_CURRENCY_REC  = 0x1, /* CURRENCY_REC */
    BB_BindingsCurrencyType_CURRENCY_AUEC = 0x2, /* CURRENCY_AUEC */
    BB_BindingsCurrencyType_CURRENCY_MER  = 0x3, /* CURRENCY_MER */
    BB_BindingsCurrencyType_UNDEFINED     = 0x4, /* UNDEFINED */
};

// Original name: BB_BindingsFunctionType
enum BB_BindingsFunctionType {
    BB_BindingsFunctionType_Floor     = 0x0, /* Floor */
    BB_BindingsFunctionType_Ceil      = 0x1, /* Ceil */
    BB_BindingsFunctionType_Round     = 0x2, /* Round */
    BB_BindingsFunctionType_ModFrac   = 0x3, /* ModFrac */
    BB_BindingsFunctionType_ModInt    = 0x4, /* ModInt */
    BB_BindingsFunctionType_Exp       = 0x5, /* Exp */
    BB_BindingsFunctionType_Log       = 0x6, /* Log */
    BB_BindingsFunctionType_Sin       = 0x7, /* Sin */
    BB_BindingsFunctionType_Cos       = 0x8, /* Cos */
    BB_BindingsFunctionType_Abs       = 0x9, /* Abs */
    BB_BindingsFunctionType_Tan       = 0xa, /* Tan */
    BB_BindingsFunctionType_Asin      = 0xb, /* Asin */
    BB_BindingsFunctionType_Acos      = 0xc, /* Acos */
    BB_BindingsFunctionType_Atan      = 0xd, /* Atan */
    BB_BindingsFunctionType_Sqrt      = 0xe, /* Sqrt */
    BB_BindingsFunctionType_Squared   = 0xf, /* Squared */
    BB_BindingsFunctionType_Cubed     = 0x10, /* Cubed */
    BB_BindingsFunctionType_UNDEFINED = 0x11, /* UNDEFINED */
};

// Original name: BB_BindingsIntegerConstants
enum BB_BindingsIntegerConstants {
    BB_BindingsIntegerConstants_InvalidIndex = 0x0, /* InvalidIndex */
    BB_BindingsIntegerConstants_UNDEFINED    = 0x1, /* UNDEFINED */
};

// Original name: BB_BindingsIntegerFunctionType
enum BB_BindingsIntegerFunctionType {
    BB_BindingsIntegerFunctionType_Abs       = 0x0, /* Abs */
    BB_BindingsIntegerFunctionType_Squared   = 0x1, /* Squared */
    BB_BindingsIntegerFunctionType_Cubed     = 0x2, /* Cubed */
    BB_BindingsIntegerFunctionType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_BooleanField
enum BB_BooleanField {
    BB_BooleanField_AffectsAutosize                  = 0x0, /* AffectsAutosize */
    BB_BooleanField_AffectsLayout                    = 0x1, /* AffectsLayout */
    BB_BooleanField_AutoFontSize                     = 0x2, /* AutoFontSize */
    BB_BooleanField_AutoScroll                       = 0x3, /* AutoScroll */
    BB_BooleanField_CenterDragProxyOnCursor          = 0x4, /* CenterDragProxyOnCursor */
    BB_BooleanField_Chamfer                          = 0x5, /* Chamfer */
    BB_BooleanField_CustomPivot                      = 0x6, /* CustomPivot */
    BB_BooleanField_Disabled                         = 0x7, /* Disabled */
    BB_BooleanField_DoFill                           = 0x8, /* DoFill */
    BB_BooleanField_DoStroke                         = 0x9, /* DoStroke */
    BB_BooleanField_Editable                         = 0xa, /* Editable */
    BB_BooleanField_EditBoxSingleLine                = 0xb, /* EditBoxSingleLine */
    BB_BooleanField_EditBoxAllowSpaces               = 0xc, /* EditBoxAllowSpaces */
    BB_BooleanField_EditBoxBindingsAuthoritative     = 0xd, /* EditBoxBindingsAuthoritative */
    BB_BooleanField_EditBoxConfirmDeselect           = 0xe, /* EditBoxConfirmDeselect */
    BB_BooleanField_EditBoxHiddenText                = 0xf, /* EditBoxHiddenText */
    BB_BooleanField_EnableBackground                 = 0x10, /* EnableBackground */
    BB_BooleanField_EnableBottomRightBorderChamfer   = 0x11, /* EnableBottomRightBorderChamfer */
    BB_BooleanField_EnableBottomLeftBorderChamfer    = 0x12, /* EnableBottomLeftBorderChamfer */
    BB_BooleanField_EnableColorOverlay               = 0x13, /* EnableColorOverlay */
    BB_BooleanField_EnableMinWidth                   = 0x14, /* EnableMinWidth */
    BB_BooleanField_EnableMinHeight                  = 0x15, /* EnableMinHeight */
    BB_BooleanField_EnableMaxWidth                   = 0x16, /* EnableMaxWidth */
    BB_BooleanField_EnableMaxHeight                  = 0x17, /* EnableMaxHeight */
    BB_BooleanField_EnableNineSliceRect              = 0x18, /* EnableNineSliceRect */
    BB_BooleanField_EnableSegmentedBarFill           = 0x19, /* EnableSegmentedBarFill */
    BB_BooleanField_EnableSegmentedFill              = 0x1a, /* EnableSegmentedFill */
    BB_BooleanField_EnableSilhouette                 = 0x1b, /* EnableSilhouette */
    BB_BooleanField_EnableTopLeftBorderChamfer       = 0x1c, /* EnableTopLeftBorderChamfer */
    BB_BooleanField_EnableTopRightBorderChamfer      = 0x1d, /* EnableTopRightBorderChamfer */
    BB_BooleanField_FadeXAxis                        = 0x1e, /* FadeXAxis */
    BB_BooleanField_FadeYAxis                        = 0x1f, /* FadeYAxis */
    BB_BooleanField_FadeZAxis                        = 0x20, /* FadeZAxis */
    BB_BooleanField_GeomEntityAnimationNormalizeTime = 0x21, /* GeomEntityAnimationNormalizeTime */
    BB_BooleanField_GeomEntityAnimationWrapTime      = 0x22, /* GeomEntityAnimationWrapTime */
    BB_BooleanField_GhostPrimRearOffset              = 0x23, /* GhostPrimRearOffset */
    BB_BooleanField_ImageFlipHorizontal              = 0x24, /* ImageFlipHorizontal */
    BB_BooleanField_ImageFlipVertical                = 0x25, /* ImageFlipVertical */
    BB_BooleanField_IncludeInGroundingEffects        = 0x26, /* IncludeInGroundingEffects */
    BB_BooleanField_InheritDisabledState             = 0x27, /* InheritDisabledState */
    BB_BooleanField_InheritDownState                 = 0x28, /* InheritDownState */
    BB_BooleanField_InheritHoverState                = 0x29, /* InheritHoverState */
    BB_BooleanField_InheritRadialRotation            = 0x2a, /* InheritRadialRotation */
    BB_BooleanField_InheritRadialShapeWarp           = 0x2b, /* InheritRadialShapeWarp */
    BB_BooleanField_InheritSelectedState             = 0x2c, /* InheritSelectedState */
    BB_BooleanField_Instantiated                     = 0x2d, /* Instantiated */
    BB_BooleanField_Interactable                     = 0x2e, /* Interactable */
    BB_BooleanField_IsActive                         = 0x2f, /* IsActive */
    BB_BooleanField_FillStroke                       = 0x30, /* FillStroke */
    BB_BooleanField_Flip                             = 0x31, /* Flip */
    BB_BooleanField_MaintainGapLength                = 0x32, /* MaintainGapLength */
    BB_BooleanField_MouseTestRadialShape             = 0x33, /* MouseTestRadialShape */
    BB_BooleanField_MoviePlaying                     = 0x34, /* MoviePlaying */
    BB_BooleanField_ParallelGaps                     = 0x35, /* ParallelGaps */
    BB_BooleanField_PrimitiveFlipHorizontal          = 0x36, /* PrimitiveFlipHorizontal */
    BB_BooleanField_PrimitiveFlipVertical            = 0x37, /* PrimitiveFlipVertical */
    BB_BooleanField_PrimitiveHasPerspective          = 0x38, /* PrimitiveHasPerspective */
    BB_BooleanField_PrimitiveIsFacingCamera          = 0x39, /* PrimitiveIsFacingCamera */
    BB_BooleanField_PropagateInteractionStates       = 0x3a, /* PropagateInteractionStates */
    BB_BooleanField_RenderAsHTML                     = 0x3b, /* RenderAsHTML */
    BB_BooleanField_RenderShape                      = 0x3c, /* RenderShape */
    BB_BooleanField_RotateProgressAngleWidget        = 0x3d, /* RotateProgressAngleWidget */
    BB_BooleanField_RotateStartAngleWidget           = 0x3e, /* RotateStartAngleWidget */
    BB_BooleanField_PivotStartAngleWidget            = 0x3f, /* PivotStartAngleWidget */
    BB_BooleanField_PivotProgressAngleWidget         = 0x40, /* PivotProgressAngleWidget */
    BB_BooleanField_PrimitiveIsGrouped               = 0x41, /* PrimitiveIsGrouped */
    BB_BooleanField_Selected                         = 0x42, /* Selected */
    BB_BooleanField_SvgFlipHorizontal                = 0x43, /* SvgFlipHorizontal */
    BB_BooleanField_SvgFlipVertical                  = 0x44, /* SvgFlipVertical */
    BB_BooleanField_TextBold                         = 0x45, /* TextBold */
    BB_BooleanField_TextItalic                       = 0x46, /* TextItalic */
    BB_BooleanField_TextKerning                      = 0x47, /* TextKerning */
    BB_BooleanField_TextUnderline                    = 0x48, /* TextUnderline */
    BB_BooleanField_WordWrap                         = 0x49, /* WordWrap */
    BB_BooleanField_ParamInput0                      = 0x4a, /* ParamInput0 */
    BB_BooleanField_ParamInput1                      = 0x4b, /* ParamInput1 */
    BB_BooleanField_ParamInput2                      = 0x4c, /* ParamInput2 */
    BB_BooleanField_ParamInput3                      = 0x4d, /* ParamInput3 */
    BB_BooleanField_ParamInput4                      = 0x4e, /* ParamInput4 */
    BB_BooleanField_ParamInput5                      = 0x4f, /* ParamInput5 */
    BB_BooleanField_ParamInput6                      = 0x50, /* ParamInput6 */
    BB_BooleanField_ParamInput7                      = 0x51, /* ParamInput7 */
    BB_BooleanField_ParamInput8                      = 0x52, /* ParamInput8 */
    BB_BooleanField_UNDEFINED                        = 0x53, /* UNDEFINED */
};

// Original name: BB_BooleanWriteMode
enum BB_BooleanWriteMode {
    BB_BooleanWriteMode_Invert    = 0x0, /* Invert */
    BB_BooleanWriteMode_Set       = 0x1, /* Set */
    BB_BooleanWriteMode_Clear     = 0x2, /* Clear */
    BB_BooleanWriteMode_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_CanvasCoordinateMethod
enum BB_CanvasCoordinateMethod {
    BB_CanvasCoordinateMethod_useRaw                = 0x0, /* useRaw */
    BB_CanvasCoordinateMethod_aspectOverridesWidth  = 0x1, /* aspectOverridesWidth */
    BB_CanvasCoordinateMethod_aspectOverridesHeight = 0x2, /* aspectOverridesHeight */
    BB_CanvasCoordinateMethod_auto                  = 0x3, /* auto */
    BB_CanvasCoordinateMethod_longestSide           = 0x4, /* longestSide */
};

// Original name: BB_CanvasWidgetSizingMethod
enum BB_CanvasWidgetSizingMethod {
    BB_CanvasWidgetSizingMethod_Size      = 0x0, /* Size */
    BB_CanvasWidgetSizingMethod_Scale     = 0x1, /* Scale */
    BB_CanvasWidgetSizingMethod_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_ColorField
enum BB_ColorField {
    BB_ColorField_BackgroundColor            = 0x0, /* BackgroundColor */
    BB_ColorField_BackgroundColorTopLeft     = 0x1, /* BackgroundColorTopLeft */
    BB_ColorField_BackgroundColorBottomLeft  = 0x2, /* BackgroundColorBottomLeft */
    BB_ColorField_BackgroundColorTopRight    = 0x3, /* BackgroundColorTopRight */
    BB_ColorField_BackgroundColorBottomRight = 0x4, /* BackgroundColorBottomRight */
    BB_ColorField_BorderColorLeft            = 0x5, /* BorderColorLeft */
    BB_ColorField_BorderColorRight           = 0x6, /* BorderColorRight */
    BB_ColorField_BorderColorTop             = 0x7, /* BorderColorTop */
    BB_ColorField_BorderColorBottom          = 0x8, /* BorderColorBottom */
    BB_ColorField_FillColor                  = 0x9, /* FillColor */
    BB_ColorField_GlowColor                  = 0xa, /* GlowColor */
    BB_ColorField_LightColor                 = 0xb, /* LightColor */
    BB_ColorField_SegmentColor               = 0xc, /* SegmentColor */
    BB_ColorField_StrokeColor                = 0xd, /* StrokeColor */
    BB_ColorField_StripStartColor            = 0xe, /* StripStartColor */
    BB_ColorField_StripEndColor              = 0xf, /* StripEndColor */
    BB_ColorField_SilhouetteColor            = 0x10, /* SilhouetteColor */
    BB_ColorField_TintColor                  = 0x11, /* TintColor */
    BB_ColorField_ParamInput0                = 0x12, /* ParamInput0 */
    BB_ColorField_ParamInput1                = 0x13, /* ParamInput1 */
    BB_ColorField_ParamInput2                = 0x14, /* ParamInput2 */
    BB_ColorField_ParamInput3                = 0x15, /* ParamInput3 */
    BB_ColorField_ParamInput4                = 0x16, /* ParamInput4 */
    BB_ColorField_ParamInput5                = 0x17, /* ParamInput5 */
    BB_ColorField_ParamInput6                = 0x18, /* ParamInput6 */
    BB_ColorField_ParamInput7                = 0x19, /* ParamInput7 */
    BB_ColorField_ParamInput8                = 0x1a, /* ParamInput8 */
    BB_ColorField_UNDEFINED                  = 0x1b, /* UNDEFINED */
};

// Original name: BB_ColorStyle
enum BB_ColorStyle {
    BB_ColorStyle_Base               = 0x0, /* Base */
    BB_ColorStyle_Positive           = 0x1, /* Positive */
    BB_ColorStyle_Moderate           = 0x2, /* Moderate */
    BB_ColorStyle_Critical           = 0x3, /* Critical */
    BB_ColorStyle_Accent1            = 0x4, /* Accent1 */
    BB_ColorStyle_Accent2            = 0x5, /* Accent2 */
    BB_ColorStyle_Bright             = 0x6, /* Bright */
    BB_ColorStyle_Selected           = 0x7, /* Selected */
    BB_ColorStyle_Disabled           = 0x8, /* Disabled */
    BB_ColorStyle_Background         = 0x9, /* Background */
    BB_ColorStyle_ContactNeutral     = 0xa, /* ContactNeutral */
    BB_ColorStyle_ContactParty       = 0xb, /* ContactParty */
    BB_ColorStyle_ContactPositiveRep = 0xc, /* ContactPositiveRep */
    BB_ColorStyle_ContactNegativeRep = 0xd, /* ContactNegativeRep */
    BB_ColorStyle_ContactAgressive   = 0xe, /* ContactAgressive */
    BB_ColorStyle_ContactUnknown     = 0xf, /* ContactUnknown */
    BB_ColorStyle_MissionObjectives  = 0x10, /* MissionObjectives */
    BB_ColorStyle_UNDEFINED          = 0x11, /* UNDEFINED */
};

// Original name: BB_ComparisonOperatorType
enum BB_ComparisonOperatorType {
    BB_ComparisonOperatorType_Equal          = 0x0, /* Equal */
    BB_ComparisonOperatorType_NotEqual       = 0x1, /* NotEqual */
    BB_ComparisonOperatorType_Greater        = 0x2, /* Greater */
    BB_ComparisonOperatorType_GreaterOrEqual = 0x3, /* GreaterOrEqual */
    BB_ComparisonOperatorType_Less           = 0x4, /* Less */
    BB_ComparisonOperatorType_LessOrEqual    = 0x5, /* LessOrEqual */
    BB_ComparisonOperatorType_UNDEFINED      = 0x6, /* UNDEFINED */
};

// Original name: BB_ComponentParameter
enum BB_ComponentParameter {
    BB_ComponentParameter_ParamInput0 = 0x0, /* ParamInput0 */
    BB_ComponentParameter_ParamInput1 = 0x1, /* ParamInput1 */
    BB_ComponentParameter_ParamInput2 = 0x2, /* ParamInput2 */
    BB_ComponentParameter_ParamInput3 = 0x3, /* ParamInput3 */
    BB_ComponentParameter_ParamInput4 = 0x4, /* ParamInput4 */
    BB_ComponentParameter_ParamInput5 = 0x5, /* ParamInput5 */
    BB_ComponentParameter_ParamInput6 = 0x6, /* ParamInput6 */
    BB_ComponentParameter_ParamInput7 = 0x7, /* ParamInput7 */
    BB_ComponentParameter_ParamInput8 = 0x8, /* ParamInput8 */
    BB_ComponentParameter_UNDEFINED   = 0x9, /* UNDEFINED */
};

// Original name: BB_ContentBoxPosition
enum BB_ContentBoxPosition {
    BB_ContentBoxPosition_Top       = 0x0, /* Top */
    BB_ContentBoxPosition_Right     = 0x1, /* Right */
    BB_ContentBoxPosition_Bottom    = 0x2, /* Bottom */
    BB_ContentBoxPosition_Left      = 0x3, /* Left */
    BB_ContentBoxPosition_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: BB_CurvatureAxis
enum BB_CurvatureAxis {
    BB_CurvatureAxis_X         = 0x0, /* X */
    BB_CurvatureAxis_Y         = 0x1, /* Y */
    BB_CurvatureAxis_Z         = 0x2, /* Z */
    BB_CurvatureAxis_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_DraggablePolicyType
enum BB_DraggablePolicyType {
    BB_DraggablePolicyType_None           = 0x0, /* None */
    BB_DraggablePolicyType_DropTargetItem = 0x1, /* DropTargetItem */
    BB_DraggablePolicyType_UNDEFINED      = 0x2, /* UNDEFINED */
};

// Original name: BB_DropTargetPolicyType
enum BB_DropTargetPolicyType {
    BB_DropTargetPolicyType_None       = 0x0, /* None */
    BB_DropTargetPolicyType_DropTarget = 0x1, /* DropTarget */
    BB_DropTargetPolicyType_UNDEFINED  = 0x2, /* UNDEFINED */
};

// Original name: BB_DropdownAlignment
enum BB_DropdownAlignment {
    BB_DropdownAlignment_Up        = 0x0, /* Up */
    BB_DropdownAlignment_Down      = 0x1, /* Down */
    BB_DropdownAlignment_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_DustParticleMovementRestriction
enum BB_DustParticleMovementRestriction {
    BB_DustParticleMovementRestriction_None                 = 0x0, /* None */
    BB_DustParticleMovementRestriction_ZoomExclusive        = 0x1, /* ZoomExclusive */
    BB_DustParticleMovementRestriction_TranslationExclusive = 0x2, /* TranslationExclusive */
    BB_DustParticleMovementRestriction_UNDEFINED            = 0x3, /* UNDEFINED */
};

// Original name: BB_FillStyle
enum BB_FillStyle {
    BB_FillStyle_Filled    = 0x0, /* Filled */
    BB_FillStyle_Ghost     = 0x1, /* Ghost */
    BB_FillStyle_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_FlexAxisJustification
enum BB_FlexAxisJustification {
    BB_FlexAxisJustification_Start        = 0x0, /* Start */
    BB_FlexAxisJustification_End          = 0x1, /* End */
    BB_FlexAxisJustification_Center       = 0x2, /* Center */
    BB_FlexAxisJustification_SpaceBetween = 0x3, /* SpaceBetween */
    BB_FlexAxisJustification_SpaceAround  = 0x4, /* SpaceAround */
    BB_FlexAxisJustification_SpaceEvenly  = 0x5, /* SpaceEvenly */
    BB_FlexAxisJustification_Stretch      = 0x6, /* Stretch */
    BB_FlexAxisJustification_UNDEFINED    = 0x7, /* UNDEFINED */
};

// Original name: BB_FlexDirection
enum BB_FlexDirection {
    BB_FlexDirection_Row           = 0x0, /* Row */
    BB_FlexDirection_RowReverse    = 0x1, /* RowReverse */
    BB_FlexDirection_Column        = 0x2, /* Column */
    BB_FlexDirection_ColumnReverse = 0x3, /* ColumnReverse */
    BB_FlexDirection_UNDEFINED     = 0x4, /* UNDEFINED */
};

// Original name: BB_FlexItemAlignment
enum BB_FlexItemAlignment {
    BB_FlexItemAlignment_Start     = 0x0, /* Start */
    BB_FlexItemAlignment_End       = 0x1, /* End */
    BB_FlexItemAlignment_Center    = 0x2, /* Center */
    BB_FlexItemAlignment_Stretch   = 0x3, /* Stretch */
    BB_FlexItemAlignment_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: BB_FlexWrap
enum BB_FlexWrap {
    BB_FlexWrap_Wrap           = 0x0, /* Wrap */
    BB_FlexWrap_WrapReverse    = 0x1, /* WrapReverse */
    BB_FlexWrap_NoWrap         = 0x2, /* NoWrap */
    BB_FlexWrap_NoWrapInfinite = 0x3, /* NoWrapInfinite */
    BB_FlexWrap_UNDEFINED      = 0x4, /* UNDEFINED */
};

// Original name: BB_FlipDirection
enum BB_FlipDirection {
    BB_FlipDirection_None       = 0x0, /* None */
    BB_FlipDirection_Vertical   = 0x1, /* Vertical */
    BB_FlipDirection_Horizontal = 0x2, /* Horizontal */
    BB_FlipDirection_Both       = 0x3, /* Both */
    BB_FlipDirection_UNDEFINED  = 0x4, /* UNDEFINED */
};

// Original name: BB_GrabBounds
enum BB_GrabBounds {
    BB_GrabBounds_Sphere    = 0x0, /* Sphere */
    BB_GrabBounds_Box       = 0x1, /* Box */
    BB_GrabBounds_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_GrabRotationMode
enum BB_GrabRotationMode {
    BB_GrabRotationMode_Orbital   = 0x0, /* Orbital */
    BB_GrabRotationMode_Planar    = 0x1, /* Planar */
    BB_GrabRotationMode_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_GridPackDirection
enum BB_GridPackDirection {
    BB_GridPackDirection_Horizontal = 0x0, /* Horizontal */
    BB_GridPackDirection_Vertical   = 0x1, /* Vertical */
    BB_GridPackDirection_UNDEFINED  = 0x2, /* UNDEFINED */
};

// Original name: BB_IconWidgetPreset
enum BB_IconWidgetPreset {
    BB_IconWidgetPreset_None                          = 0x0, /* _None */
    BB_IconWidgetPreset_ArrowHollowUp                 = 0x1, /* ArrowHollowUp */
    BB_IconWidgetPreset_ArrowHollowRight              = 0x2, /* ArrowHollowRight */
    BB_IconWidgetPreset_ArrowHollowDown               = 0x3, /* ArrowHollowDown */
    BB_IconWidgetPreset_ArrowHollowLeft               = 0x4, /* ArrowHollowLeft */
    BB_IconWidgetPreset_ArrowHollowCurvedLeft         = 0x5, /* ArrowHollowCurvedLeft */
    BB_IconWidgetPreset_ArrowHollowCurvedRight        = 0x6, /* ArrowHollowCurvedRight */
    BB_IconWidgetPreset_ArrowHollowCurvedDoubleLeft   = 0x7, /* ArrowHollowCurvedDoubleLeft */
    BB_IconWidgetPreset_ArrowHollowCurvedDoubleRight  = 0x8, /* ArrowHollowCurvedDoubleRight */
    BB_IconWidgetPreset_ArrowHollowCurvedDownLeft     = 0x9, /* ArrowHollowCurvedDownLeft */
    BB_IconWidgetPreset_ArrowHollowCurvedDownRight    = 0xa, /* ArrowHollowCurvedDownRight */
    BB_IconWidgetPreset_ArrowUp                       = 0xb, /* ArrowUp */
    BB_IconWidgetPreset_ArrowRight                    = 0xc, /* ArrowRight */
    BB_IconWidgetPreset_ArrowDown                     = 0xd, /* ArrowDown */
    BB_IconWidgetPreset_ArrowLeft                     = 0xe, /* ArrowLeft */
    BB_IconWidgetPreset_ArrowUpLeft                   = 0xf, /* ArrowUpLeft */
    BB_IconWidgetPreset_ArrowUpRight                  = 0x10, /* ArrowUpRight */
    BB_IconWidgetPreset_ArrowDownRight                = 0x11, /* ArrowDownRight */
    BB_IconWidgetPreset_ArrowDownLeft                 = 0x12, /* ArrowDownLeft */
    BB_IconWidgetPreset_ArrowHookLeft                 = 0x13, /* ArrowHookLeft */
    BB_IconWidgetPreset_ArrowHookRight                = 0x14, /* ArrowHookRight */
    BB_IconWidgetPreset_ArrowDiamond                  = 0x15, /* ArrowDiamond */
    BB_IconWidgetPreset_ArrowSquare                   = 0x16, /* ArrowSquare */
    BB_IconWidgetPreset_ArrowExpandDownUp             = 0x17, /* ArrowExpandDownUp */
    BB_IconWidgetPreset_ArrowExpandUpDown             = 0x18, /* ArrowExpandUpDown */
    BB_IconWidgetPreset_ArrowCurvedLeft               = 0x19, /* ArrowCurvedLeft */
    BB_IconWidgetPreset_ArrowCurvedRight              = 0x1a, /* ArrowCurvedRight */
    BB_IconWidgetPreset_ArrowCurvedDoubleLeft         = 0x1b, /* ArrowCurvedDoubleLeft */
    BB_IconWidgetPreset_ArrowCurvedDoubleRight        = 0x1c, /* ArrowCurvedDoubleRight */
    BB_IconWidgetPreset_ArrowCurvedDownLeft           = 0x1d, /* ArrowCurvedDownLeft */
    BB_IconWidgetPreset_ArrowCurvedDownRight          = 0x1e, /* ArrowCurvedDownRight */
    BB_IconWidgetPreset_ArrowFullCircleCCW            = 0x1f, /* ArrowFullCircleCCW */
    BB_IconWidgetPreset_ArrowFullCircleCW             = 0x20, /* ArrowFullCircleCW */
    BB_IconWidgetPreset_ArrowHalfCircleCCW            = 0x21, /* ArrowHalfCircleCCW */
    BB_IconWidgetPreset_ArrowHalfCircleCW             = 0x22, /* ArrowHalfCircleCW */
    BB_IconWidgetPreset_ArrowHalfCircleExclamationCCW = 0x23, /* ArrowHalfCircleExclamationCCW */
    BB_IconWidgetPreset_ArrowHalfCircleExclamationCW  = 0x24, /* ArrowHalfCircleExclamationCW */
    BB_IconWidgetPreset_ArrowCaratUp                  = 0x25, /* ArrowCaratUp */
    BB_IconWidgetPreset_ArrowCaratRight               = 0x26, /* ArrowCaratRight */
    BB_IconWidgetPreset_ArrowCaratDown                = 0x27, /* ArrowCaratDown */
    BB_IconWidgetPreset_ArrowCaratLeft                = 0x28, /* ArrowCaratLeft */
    BB_IconWidgetPreset_ArrowCaratDoubleUp            = 0x29, /* ArrowCaratDoubleUp */
    BB_IconWidgetPreset_ArrowCaratDoubleRight         = 0x2a, /* ArrowCaratDoubleRight */
    BB_IconWidgetPreset_ArrowCaratDoubleDown          = 0x2b, /* ArrowCaratDoubleDown */
    BB_IconWidgetPreset_ArrowCaratDoubleLeft          = 0x2c, /* ArrowCaratDoubleLeft */
    BB_IconWidgetPreset_ArrowEncasedUp                = 0x2d, /* ArrowEncasedUp */
    BB_IconWidgetPreset_ArrowEncasedRight             = 0x2e, /* ArrowEncasedRight */
    BB_IconWidgetPreset_ArrowEncasedDown              = 0x2f, /* ArrowEncasedDown */
    BB_IconWidgetPreset_ArrowEncasedLeft              = 0x30, /* ArrowEncasedLeft */
    BB_IconWidgetPreset_ArrowEncasedUpLeft            = 0x31, /* ArrowEncasedUpLeft */
    BB_IconWidgetPreset_ArrowEncasedUpRight           = 0x32, /* ArrowEncasedUpRight */
    BB_IconWidgetPreset_ArrowEncasedDownRight         = 0x33, /* ArrowEncasedDownRight */
    BB_IconWidgetPreset_ArrowEncasedDownLeft          = 0x34, /* ArrowEncasedDownLeft */
    BB_IconWidgetPreset_ArrowEncasedHookLeft          = 0x35, /* ArrowEncasedHookLeft */
    BB_IconWidgetPreset_ArrowEncasedHookRight         = 0x36, /* ArrowEncasedHookRight */
    BB_IconWidgetPreset_ArrowEncasedCaratUp           = 0x37, /* ArrowEncasedCaratUp */
    BB_IconWidgetPreset_ArrowEncasedCaratRight        = 0x38, /* ArrowEncasedCaratRight */
    BB_IconWidgetPreset_ArrowEncasedCaratDown         = 0x39, /* ArrowEncasedCaratDown */
    BB_IconWidgetPreset_ArrowEncasedCaratLeft         = 0x3a, /* ArrowEncasedCaratLeft */
    BB_IconWidgetPreset_ArrowEncasedCaratDoubleUp     = 0x3b, /* ArrowEncasedCaratDoubleUp */
    BB_IconWidgetPreset_ArrowEncasedCaratDoubleRight  = 0x3c, /* ArrowEncasedCaratDoubleRight */
    BB_IconWidgetPreset_ArrowEncasedCaratDoubleDown   = 0x3d, /* ArrowEncasedCaratDoubleDown */
    BB_IconWidgetPreset_ArrowEncasedCaratDoubleLeft   = 0x3e, /* ArrowEncasedCaratDoubleLeft */
    BB_IconWidgetPreset_GeneralCheckmark              = 0x3f, /* GeneralCheckmark */
    BB_IconWidgetPreset_GeneralCircleFilled           = 0x40, /* GeneralCircleFilled */
    BB_IconWidgetPreset_GeneralX                      = 0x41, /* GeneralX */
    BB_IconWidgetPreset_GeneralInfo                   = 0x42, /* GeneralInfo */
    BB_IconWidgetPreset_UNDEFINED                     = 0x43, /* UNDEFINED */
};

// Original name: BB_ImageScalingMethod
enum BB_ImageScalingMethod {
    BB_ImageScalingMethod_Fill      = 0x0, /* Fill */
    BB_ImageScalingMethod_Contain   = 0x1, /* Contain */
    BB_ImageScalingMethod_Cover     = 0x2, /* Cover */
    BB_ImageScalingMethod_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_IntegerField
enum BB_IntegerField {
    BB_IntegerField_AutoScrollBehavior              = 0x0, /* AutoScrollBehavior */
    BB_IntegerField_BorderBottomLeftRadiusBehavior  = 0x1, /* BorderBottomLeftRadiusBehavior */
    BB_IntegerField_BorderBottomRightRadiusBehavior = 0x2, /* BorderBottomRightRadiusBehavior */
    BB_IntegerField_BorderTopLeftRadiusBehavior     = 0x3, /* BorderTopLeftRadiusBehavior */
    BB_IntegerField_BorderTopRightRadiusBehavior    = 0x4, /* BorderTopRightRadiusBehavior */
    BB_IntegerField_CanvasWidgetSizingMethod        = 0x5, /* CanvasWidgetSizingMethod */
    BB_IntegerField_CaretIndex                      = 0x6, /* CaretIndex */
    BB_IntegerField_CaseModifier                    = 0x7, /* CaseModifier */
    BB_IntegerField_CurvatureAxis                   = 0x8, /* CurvatureAxis */
    BB_IntegerField_DepthBehavior                   = 0x9, /* DepthBehavior */
    BB_IntegerField_DraggablePolicy                 = 0xa, /* DraggablePolicy */
    BB_IntegerField_DropTargetPolicy                = 0xb, /* DropTargetPolicy */
    BB_IntegerField_DustParticleCount               = 0xc, /* DustParticleCount */
    BB_IntegerField_DustParticleMovementRestriction = 0xd, /* DustParticleMovementRestriction */
    BB_IntegerField_ImageScalingBehavior            = 0xe, /* ImageScalingBehavior */
    BB_IntegerField_EditBoxCharLimit                = 0xf, /* EditBoxCharLimit */
    BB_IntegerField_EntityImageSource               = 0x10, /* EntityImageSource */
    BB_IntegerField_FlexItemAlignment               = 0x11, /* FlexItemAlignment */
    BB_IntegerField_FlexAxisJustification           = 0x12, /* FlexAxisJustification */
    BB_IntegerField_FlexCrossAxisJustification      = 0x13, /* FlexCrossAxisJustification */
    BB_IntegerField_FlexDirection                   = 0x14, /* FlexDirection */
    BB_IntegerField_FlexWrap                        = 0x15, /* FlexWrap */
    BB_IntegerField_GhostPrimCount                  = 0x16, /* GhostPrimCount */
    BB_IntegerField_GridPackDirection               = 0x17, /* GridPackDirection */
    BB_IntegerField_HeightBehavior                  = 0x18, /* HeightBehavior */
    BB_IntegerField_HorizontalAlignment             = 0x19, /* HorizontalAlignment */
    BB_IntegerField_LayoutDisplayOrder              = 0x1a, /* LayoutDisplayOrder */
    BB_IntegerField_LayoutPolicy                    = 0x1b, /* LayoutPolicy */
    BB_IntegerField_MaxWidthBehavior                = 0x1c, /* MaxWidthBehavior */
    BB_IntegerField_MaxHeightBehavior               = 0x1d, /* MaxHeightBehavior */
    BB_IntegerField_MinWidthBehavior                = 0x1e, /* MinWidthBehavior */
    BB_IntegerField_MinHeightBehavior               = 0x1f, /* MinHeightBehavior */
    BB_IntegerField_MovieStartTimeMs                = 0x20, /* MovieStartTimeMs */
    BB_IntegerField_RadialPolyResolution            = 0x21, /* RadialPolyResolution */
    BB_IntegerField_RuntimeImageSource              = 0x22, /* RuntimeImageSource */
    BB_IntegerField_ScrollBehavior                  = 0x23, /* ScrollBehavior */
    BB_IntegerField_ScrollDirection                 = 0x24, /* ScrollDirection */
    BB_IntegerField_ScrollEasingType                = 0x25, /* ScrollEasingType */
    BB_IntegerField_ScrollPolicy                    = 0x26, /* ScrollPolicy */
    BB_IntegerField_SegmentSizeBehavior             = 0x27, /* SegmentSizeBehavior */
    BB_IntegerField_SegmentSpacingSizeBehavior      = 0x28, /* SegmentSpacingSizeBehavior */
    BB_IntegerField_StackDirection                  = 0x29, /* StackDirection */
    BB_IntegerField_StrokeAlignment                 = 0x2a, /* StrokeAlignment */
    BB_IntegerField_StrokeCapStyle                  = 0x2b, /* StrokeCapStyle */
    BB_IntegerField_StrokeJointStyle                = 0x2c, /* StrokeJointStyle */
    BB_IntegerField_SegmentEasing                   = 0x2d, /* SegmentEasing */
    BB_IntegerField_SegmentProgressBehavior         = 0x2e, /* SegmentProgressBehavior */
    BB_IntegerField_SvgScalingBehavior              = 0x2f, /* SvgScalingBehavior */
    BB_IntegerField_SliderMode                      = 0x30, /* SliderMode */
    BB_IntegerField_TextureGroup                    = 0x31, /* TextureGroup */
    BB_IntegerField_TickBoxMode                     = 0x32, /* TickBoxMode */
    BB_IntegerField_Segments                        = 0x33, /* Segments */
    BB_IntegerField_Sides                           = 0x34, /* Sides */
    BB_IntegerField_SquashAxis                      = 0x35, /* SquashAxis */
    BB_IntegerField_VerticalAlignment               = 0x36, /* VerticalAlignment */
    BB_IntegerField_WidthBehavior                   = 0x37, /* WidthBehavior */
    BB_IntegerField_ParamInput0                     = 0x38, /* ParamInput0 */
    BB_IntegerField_ParamInput1                     = 0x39, /* ParamInput1 */
    BB_IntegerField_ParamInput2                     = 0x3a, /* ParamInput2 */
    BB_IntegerField_ParamInput3                     = 0x3b, /* ParamInput3 */
    BB_IntegerField_ParamInput4                     = 0x3c, /* ParamInput4 */
    BB_IntegerField_ParamInput5                     = 0x3d, /* ParamInput5 */
    BB_IntegerField_ParamInput6                     = 0x3e, /* ParamInput6 */
    BB_IntegerField_ParamInput7                     = 0x3f, /* ParamInput7 */
    BB_IntegerField_ParamInput8                     = 0x40, /* ParamInput8 */
    BB_IntegerField_UNDEFINED                       = 0x41, /* UNDEFINED */
};

// Original name: BB_JumpTerm
enum BB_JumpTerm {
    BB_JumpTerm_Start     = 0x0, /* Start */
    BB_JumpTerm_End       = 0x1, /* End */
    BB_JumpTerm_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_LayoutPolicyType
enum BB_LayoutPolicyType {
    BB_LayoutPolicyType_None      = 0x0, /* None */
    BB_LayoutPolicyType_Flex      = 0x1, /* Flex */
    BB_LayoutPolicyType_GridPack  = 0x2, /* GridPack */
    BB_LayoutPolicyType_Spacer    = 0x3, /* Spacer */
    BB_LayoutPolicyType_Stack     = 0x4, /* Stack */
    BB_LayoutPolicyType_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: BB_LineScaleStyle
enum BB_LineScaleStyle {
    BB_LineScaleStyle_Normal     = 0x0, /* Normal */
    BB_LineScaleStyle_Horizontal = 0x1, /* Horizontal */
    BB_LineScaleStyle_Vertical   = 0x2, /* Vertical */
    BB_LineScaleStyle_None       = 0x3, /* None */
    BB_LineScaleStyle_UNDEFINED  = 0x4, /* UNDEFINED */
};

// Original name: BB_LocalizedField
enum BB_LocalizedField {
    BB_LocalizedField_EditBoxHelperString = 0x0, /* EditBoxHelperString */
    BB_LocalizedField_Text                = 0x1, /* Text */
    BB_LocalizedField_TooltipText         = 0x2, /* TooltipText */
    BB_LocalizedField_ParamInput0         = 0x3, /* ParamInput0 */
    BB_LocalizedField_ParamInput1         = 0x4, /* ParamInput1 */
    BB_LocalizedField_ParamInput2         = 0x5, /* ParamInput2 */
    BB_LocalizedField_ParamInput3         = 0x6, /* ParamInput3 */
    BB_LocalizedField_ParamInput4         = 0x7, /* ParamInput4 */
    BB_LocalizedField_ParamInput5         = 0x8, /* ParamInput5 */
    BB_LocalizedField_ParamInput6         = 0x9, /* ParamInput6 */
    BB_LocalizedField_ParamInput7         = 0xa, /* ParamInput7 */
    BB_LocalizedField_ParamInput8         = 0xb, /* ParamInput8 */
    BB_LocalizedField_UNDEFINED           = 0xc, /* UNDEFINED */
};

// Original name: BB_NavigationType
enum BB_NavigationType {
    BB_NavigationType_Back      = 0x0, /* Back */
    BB_NavigationType_Close     = 0x1, /* Close */
    BB_NavigationType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_NumberField
enum BB_NumberField {
    BB_NumberField_Alpha                       = 0x0, /* Alpha */
    BB_NumberField_AnchorX                     = 0x1, /* AnchorX */
    BB_NumberField_AnchorY                     = 0x2, /* AnchorY */
    BB_NumberField_AnchorZ                     = 0x3, /* AnchorZ */
    BB_NumberField_AutoScrollSpeed             = 0x4, /* AutoScrollSpeed */
    BB_NumberField_AutoScrollStartPause        = 0x5, /* AutoScrollStartPause */
    BB_NumberField_AutoScrollEndPause          = 0x6, /* AutoScrollEndPause */
    BB_NumberField_AutoScrollFadeSpeed         = 0x7, /* AutoScrollFadeSpeed */
    BB_NumberField_BorderTopWidth              = 0x8, /* BorderTopWidth */
    BB_NumberField_BorderRightWidth            = 0x9, /* BorderRightWidth */
    BB_NumberField_BorderBottomWidth           = 0xa, /* BorderBottomWidth */
    BB_NumberField_BorderLeftWidth             = 0xb, /* BorderLeftWidth */
    BB_NumberField_BorderTopLeftRadius         = 0xc, /* BorderTopLeftRadius */
    BB_NumberField_BorderTopRightRadius        = 0xd, /* BorderTopRightRadius */
    BB_NumberField_BorderBottomRightRadius     = 0xe, /* BorderBottomRightRadius */
    BB_NumberField_BorderBottomLeftRadius      = 0xf, /* BorderBottomLeftRadius */
    BB_NumberField_CharsPerSecond              = 0x10, /* CharsPerSecond */
    BB_NumberField_ConicSlantFactor            = 0x11, /* ConicSlantFactor */
    BB_NumberField_CornerRatio                 = 0x12, /* CornerRatio */
    BB_NumberField_DissolveOpacity             = 0x13, /* DissolveOpacity */
    BB_NumberField_DustParticleDiameter        = 0x14, /* DustParticleDiameter */
    BB_NumberField_DustParticleOffsetX         = 0x15, /* DustParticleOffsetX */
    BB_NumberField_DustParticleOffsetY         = 0x16, /* DustParticleOffsetY */
    BB_NumberField_DustParticleOffsetZ         = 0x17, /* DustParticleOffsetZ */
    BB_NumberField_DustZoomFactor              = 0x18, /* DustZoomFactor */
    BB_NumberField_EntityContentOrientationX   = 0x19, /* EntityContentOrientationX */
    BB_NumberField_EntityContentOrientationY   = 0x1a, /* EntityContentOrientationY */
    BB_NumberField_EntityContentOrientationZ   = 0x1b, /* EntityContentOrientationZ */
    BB_NumberField_EntityContentScaleLimitMin  = 0x1c, /* EntityContentScaleLimitMin */
    BB_NumberField_EntityContentScaleLimitMax  = 0x1d, /* EntityContentScaleLimitMax */
    BB_NumberField_EntityDirt                  = 0x1e, /* EntityDirt */
    BB_NumberField_EntityWear                  = 0x1f, /* EntityWear */
    BB_NumberField_InterferenceAmount          = 0x20, /* InterferenceAmount */
    BB_NumberField_FillStrokeWidth             = 0x21, /* FillStrokeWidth */
    BB_NumberField_FlexColumnSpacing           = 0x22, /* FlexColumnSpacing */
    BB_NumberField_FlexGrowProportion          = 0x23, /* FlexGrowProportion */
    BB_NumberField_FlexRowSpacing              = 0x24, /* FlexRowSpacing */
    BB_NumberField_FlexShrinkProportion        = 0x25, /* FlexShrinkProportion */
    BB_NumberField_FontSize                    = 0x26, /* FontSize */
    BB_NumberField_GapAngle                    = 0x27, /* GapAngle */
    BB_NumberField_GeomEntityAnimationTime     = 0x28, /* GeomEntityAnimationTime */
    BB_NumberField_GhostPrimAlphaClamp         = 0x29, /* GhostPrimAlphaClamp */
    BB_NumberField_GhostPrimAlphaFactor        = 0x2a, /* GhostPrimAlphaFactor */
    BB_NumberField_GhostPrimScaleFactor        = 0x2b, /* GhostPrimScaleFactor */
    BB_NumberField_GlowAmount                  = 0x2c, /* GlowAmount */
    BB_NumberField_GridPackGutter              = 0x2d, /* GridPackGutter */
    BB_NumberField_HitDetectionOffset          = 0x2e, /* HitDetectionOffset */
    BB_NumberField_LayoutTransitionDelay       = 0x2f, /* LayoutTransitionDelay */
    BB_NumberField_LayoutTransitionDuration    = 0x30, /* LayoutTransitionDuration */
    BB_NumberField_LetterSpacing               = 0x31, /* LetterSpacing */
    BB_NumberField_LightBulbRadius             = 0x32, /* LightBulbRadius */
    BB_NumberField_LightIntensity              = 0x33, /* LightIntensity */
    BB_NumberField_LightFrustumAngle           = 0x34, /* LightFrustumAngle */
    BB_NumberField_LightRadius                 = 0x35, /* LightRadius */
    BB_NumberField_LinearSliderMinValue        = 0x36, /* LinearSliderMinValue */
    BB_NumberField_LinearSliderMaxValue        = 0x37, /* LinearSliderMaxValue */
    BB_NumberField_LineSpacing                 = 0x38, /* LineSpacing */
    BB_NumberField_LocalCoordinateSpace        = 0x39, /* LocalCoordinateSpace */
    BB_NumberField_MarginTop                   = 0x3a, /* MarginTop */
    BB_NumberField_MarginRight                 = 0x3b, /* MarginRight */
    BB_NumberField_MarginBottom                = 0x3c, /* MarginBottom */
    BB_NumberField_MarginLeft                  = 0x3d, /* MarginLeft */
    BB_NumberField_MarginFront                 = 0x3e, /* MarginFront */
    BB_NumberField_MarginBack                  = 0x3f, /* MarginBack */
    BB_NumberField_MaxMeterClamp               = 0x40, /* MaxMeterClamp */
    BB_NumberField_MaxProgressClamp            = 0x41, /* MaxProgressClamp */
    BB_NumberField_MaxSizeX                    = 0x42, /* MaxSizeX */
    BB_NumberField_MaxSizeY                    = 0x43, /* MaxSizeY */
    BB_NumberField_MinMeterClamp               = 0x44, /* MinMeterClamp */
    BB_NumberField_MinProgressClamp            = 0x45, /* MinProgressClamp */
    BB_NumberField_MinSizeX                    = 0x46, /* MinSizeX */
    BB_NumberField_MinSizeY                    = 0x47, /* MinSizeY */
    BB_NumberField_NineSliceTop                = 0x48, /* NineSliceTop */
    BB_NumberField_NineSliceRight              = 0x49, /* NineSliceRight */
    BB_NumberField_NineSliceBottom             = 0x4a, /* NineSliceBottom */
    BB_NumberField_NineSliceLeft               = 0x4b, /* NineSliceLeft */
    BB_NumberField_NineSliceScale              = 0x4c, /* NineSliceScale */
    BB_NumberField_OrientationX                = 0x4d, /* OrientationX */
    BB_NumberField_OrientationY                = 0x4e, /* OrientationY */
    BB_NumberField_OrientationZ                = 0x4f, /* OrientationZ */
    BB_NumberField_OrientationXOffset          = 0x50, /* OrientationXOffset */
    BB_NumberField_OrientationYOffset          = 0x51, /* OrientationYOffset */
    BB_NumberField_OrientationZOffset          = 0x52, /* OrientationZOffset */
    BB_NumberField_OverflowWidthFadeThreshold  = 0x53, /* OverflowWidthFadeThreshold */
    BB_NumberField_OverflowHeightFadeThreshold = 0x54, /* OverflowHeightFadeThreshold */
    BB_NumberField_OverflowDepthFadeThreshold  = 0x55, /* OverflowDepthFadeThreshold */
    BB_NumberField_PaddingTop                  = 0x56, /* PaddingTop */
    BB_NumberField_PaddingRight                = 0x57, /* PaddingRight */
    BB_NumberField_PaddingBottom               = 0x58, /* PaddingBottom */
    BB_NumberField_PaddingLeft                 = 0x59, /* PaddingLeft */
    BB_NumberField_PaddingFront                = 0x5a, /* PaddingFront */
    BB_NumberField_PaddingBack                 = 0x5b, /* PaddingBack */
    BB_NumberField_PosX                        = 0x5c, /* PosX */
    BB_NumberField_PosY                        = 0x5d, /* PosY */
    BB_NumberField_PosZ                        = 0x5e, /* PosZ */
    BB_NumberField_PosXOffset                  = 0x5f, /* PosXOffset */
    BB_NumberField_PosYOffset                  = 0x60, /* PosYOffset */
    BB_NumberField_PosZOffset                  = 0x61, /* PosZOffset */
    BB_NumberField_PrimitiveConstantScale      = 0x62, /* PrimitiveConstantScale */
    BB_NumberField_PrimitiveInterferenceEffect = 0x63, /* PrimitiveInterferenceEffect */
    BB_NumberField_ScaleX                      = 0x64, /* ScaleX */
    BB_NumberField_ScaleY                      = 0x65, /* ScaleY */
    BB_NumberField_ScaleZ                      = 0x66, /* ScaleZ */
    BB_NumberField_SizeX                       = 0x67, /* SizeX */
    BB_NumberField_SizeY                       = 0x68, /* SizeY */
    BB_NumberField_SizeZ                       = 0x69, /* SizeZ */
    BB_NumberField_TintStrength                = 0x6a, /* TintStrength */
    BB_NumberField_PivotX                      = 0x6b, /* PivotX */
    BB_NumberField_PivotY                      = 0x6c, /* PivotY */
    BB_NumberField_PivotZ                      = 0x6d, /* PivotZ */
    BB_NumberField_Progress                    = 0x6e, /* Progress */
    BB_NumberField_RadialTransformMultiplier   = 0x6f, /* RadialTransformMultiplier */
    BB_NumberField_ScrollEasingTime            = 0x70, /* ScrollEasingTime */
    BB_NumberField_ScrollPixelIncrement        = 0x71, /* ScrollPixelIncrement */
    BB_NumberField_SegmentAngle                = 0x72, /* SegmentAngle */
    BB_NumberField_SegmentSize                 = 0x73, /* SegmentSize */
    BB_NumberField_SegmentSpacingSize          = 0x74, /* SegmentSpacingSize */
    BB_NumberField_SegmentXOffset              = 0x75, /* SegmentXOffset */
    BB_NumberField_SilhouetteWidth             = 0x76, /* SilhouetteWidth */
    BB_NumberField_StackSpacing                = 0x77, /* StackSpacing */
    BB_NumberField_StartAngle                  = 0x78, /* StartAngle */
    BB_NumberField_StartDelayTime              = 0x79, /* StartDelayTime */
    BB_NumberField_UStart                      = 0x7a, /* UStart */
    BB_NumberField_VStart                      = 0x7b, /* VStart */
    BB_NumberField_USize                       = 0x7c, /* USize */
    BB_NumberField_VSize                       = 0x7d, /* VSize */
    BB_NumberField_StepAngle                   = 0x7e, /* StepAngle */
    BB_NumberField_StepMidPoint                = 0x7f, /* StepMidPoint */
    BB_NumberField_StripWidth                  = 0x80, /* StripWidth */
    BB_NumberField_StrokeExtent                = 0x81, /* StrokeExtent */
    BB_NumberField_StrokeWidth                 = 0x82, /* StrokeWidth */
    BB_NumberField_SvgContainPositionX         = 0x83, /* SvgContainPositionX */
    BB_NumberField_SvgContainPositionY         = 0x84, /* SvgContainPositionY */
    BB_NumberField_SvgPlayhead                 = 0x85, /* SvgPlayhead */
    BB_NumberField_WindowCameraFOV             = 0x86, /* WindowCameraFOV */
    BB_NumberField_ParamInput0                 = 0x87, /* ParamInput0 */
    BB_NumberField_ParamInput1                 = 0x88, /* ParamInput1 */
    BB_NumberField_ParamInput2                 = 0x89, /* ParamInput2 */
    BB_NumberField_ParamInput3                 = 0x8a, /* ParamInput3 */
    BB_NumberField_ParamInput4                 = 0x8b, /* ParamInput4 */
    BB_NumberField_ParamInput5                 = 0x8c, /* ParamInput5 */
    BB_NumberField_ParamInput6                 = 0x8d, /* ParamInput6 */
    BB_NumberField_ParamInput7                 = 0x8e, /* ParamInput7 */
    BB_NumberField_ParamInput8                 = 0x8f, /* ParamInput8 */
    BB_NumberField_UNDEFINED                   = 0x90, /* UNDEFINED */
};

// Original name: BB_OverflowBehavior
enum BB_OverflowBehavior {
    BB_OverflowBehavior_Visible   = 0x0, /* Visible */
    BB_OverflowBehavior_Fade      = 0x1, /* Fade */
    BB_OverflowBehavior_Clip      = 0x2, /* Clip */
    BB_OverflowBehavior_ClipFade  = 0x3, /* ClipFade */
    BB_OverflowBehavior_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: BB_ProgressMeterState
enum BB_ProgressMeterState {
    BB_ProgressMeterState_Static    = 0x0, /* Static */
    BB_ProgressMeterState_Active    = 0x1, /* Active */
    BB_ProgressMeterState_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_RendererType
enum BB_RendererType {
    BB_RendererType_None      = 0x0, /* None */
    BB_RendererType_Entity    = 0x1, /* Entity */
    BB_RendererType_Flash     = 0x2, /* Flash */
    BB_RendererType_Primitive = 0x3, /* Primitive */
    BB_RendererType_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: BB_RotationField
enum BB_RotationField {
    BB_RotationField_Orientation       = 0x0, /* Orientation */
    BB_RotationField_OrientationOffset = 0x1, /* OrientationOffset */
    BB_RotationField_UNDEFINED         = 0x2, /* UNDEFINED */
};

// Original name: BB_SIPrefix
enum BB_SIPrefix {
    BB_SIPrefix_INVALID          = 0x0, /* INVALID */
    BB_SIPrefix_Yocto            = 0x1, /* Yocto */
    BB_SIPrefix_Zepto            = 0x2, /* Zepto */
    BB_SIPrefix_Atto             = 0x3, /* Atto */
    BB_SIPrefix_Femto            = 0x4, /* Femto */
    BB_SIPrefix_Pico             = 0x5, /* Pico */
    BB_SIPrefix_Nano             = 0x6, /* Nano */
    BB_SIPrefix_Micro            = 0x7, /* Micro */
    BB_SIPrefix_Milli            = 0x8, /* Milli */
    BB_SIPrefix_Unit             = 0x9, /* Unit */
    BB_SIPrefix_Kilo             = 0xa, /* Kilo */
    BB_SIPrefix_Mega             = 0xb, /* Mega */
    BB_SIPrefix_Giga             = 0xc, /* Giga */
    BB_SIPrefix_AstronomicalUnit = 0xd, /* AstronomicalUnit */
    BB_SIPrefix_LightYear        = 0xe, /* LightYear */
    BB_SIPrefix_UNDEFINED        = 0xf, /* UNDEFINED */
};

// Original name: BB_SIUnit
enum BB_SIUnit {
    BB_SIUnit_None         = 0x0, /* None */
    BB_SIUnit_Acceleration = 0x1, /* Acceleration */
    BB_SIUnit_Area         = 0x2, /* Area */
    BB_SIUnit_Distance     = 0x3, /* Distance */
    BB_SIUnit_Force        = 0x4, /* Force */
    BB_SIUnit_Percent      = 0x5, /* Percent */
    BB_SIUnit_Power        = 0x6, /* Power */
    BB_SIUnit_Speed        = 0x7, /* Speed */
    BB_SIUnit_Temperature  = 0x8, /* Temperature */
    BB_SIUnit_Volume       = 0x9, /* Volume */
    BB_SIUnit_Weight       = 0xa, /* Weight */
    BB_SIUnit_UNDEFINED    = 0xb, /* UNDEFINED */
};

// Original name: BB_SVGScalingBehavior
enum BB_SVGScalingBehavior {
    BB_SVGScalingBehavior_Contain   = 0x0, /* Contain */
    BB_SVGScalingBehavior_Center    = 0x1, /* Center */
    BB_SVGScalingBehavior_StretchX  = 0x2, /* StretchX */
    BB_SVGScalingBehavior_StretchY  = 0x3, /* StretchY */
    BB_SVGScalingBehavior_StretchXY = 0x4, /* StretchXY */
    BB_SVGScalingBehavior_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: BB_ScrollBehavior
enum BB_ScrollBehavior {
    BB_ScrollBehavior_Pixel     = 0x0, /* Pixel */
    BB_ScrollBehavior_Item      = 0x1, /* Item */
    BB_ScrollBehavior_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_ScrollPolicyType
enum BB_ScrollPolicyType {
    BB_ScrollPolicyType_None                   = 0x0, /* None */
    BB_ScrollPolicyType_UnidirectionalScroller = 0x1, /* UnidirectionalScroller */
    BB_ScrollPolicyType_UNDEFINED              = 0x2, /* UNDEFINED */
};

// Original name: BB_SegmentProgressBehavior
enum BB_SegmentProgressBehavior {
    BB_SegmentProgressBehavior_Clip              = 0x0, /* Clip */
    BB_SegmentProgressBehavior_Alpha             = 0x1, /* Alpha */
    BB_SegmentProgressBehavior_Visibility        = 0x2, /* Visibility */
    BB_SegmentProgressBehavior_ThicknessIn       = 0x3, /* ThicknessIn */
    BB_SegmentProgressBehavior_ThicknessInAlpha  = 0x4, /* ThicknessInAlpha */
    BB_SegmentProgressBehavior_ThicknessOut      = 0x5, /* ThicknessOut */
    BB_SegmentProgressBehavior_ThicknessOutAlpha = 0x6, /* ThicknessOutAlpha */
    BB_SegmentProgressBehavior_UNDEFINED         = 0x7, /* UNDEFINED */
};

// Original name: BB_SeparatorStyle
enum BB_SeparatorStyle {
    BB_SeparatorStyle_Primary   = 0x0, /* Primary */
    BB_SeparatorStyle_Secondary = 0x1, /* Secondary */
    BB_SeparatorStyle_Tertiary  = 0x2, /* Tertiary */
    BB_SeparatorStyle_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_SizeBehavior
enum BB_SizeBehavior {
    BB_SizeBehavior_Fixed      = 0x0, /* Fixed */
    BB_SizeBehavior_Percent    = 0x1, /* Percent */
    BB_SizeBehavior_PercentOfX = 0x2, /* PercentOfX */
    BB_SizeBehavior_PercentOfY = 0x3, /* PercentOfY */
    BB_SizeBehavior_PercentOfZ = 0x4, /* PercentOfZ */
    BB_SizeBehavior_Auto       = 0x5, /* Auto */
    BB_SizeBehavior_UNDEFINED  = 0x6, /* UNDEFINED */
};

// Original name: BB_SliderMode
enum BB_SliderMode {
    BB_SliderMode_HorizontalBar    = 0x0, /* HorizontalBar */
    BB_SliderMode_VerticalBar      = 0x1, /* VerticalBar */
    BB_SliderMode_HorizontalMarker = 0x2, /* HorizontalMarker */
    BB_SliderMode_VerticalMarker   = 0x3, /* VerticalMarker */
    BB_SliderMode_UNDEFINED        = 0x4, /* UNDEFINED */
};

// Original name: BB_StackDirection
enum BB_StackDirection {
    BB_StackDirection_Horizontal = 0x0, /* Horizontal */
    BB_StackDirection_Vertical   = 0x1, /* Vertical */
    BB_StackDirection_Depth      = 0x2, /* Depth */
    BB_StackDirection_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: BB_StringField
enum BB_StringField {
    BB_StringField_ActorEntityDNAString               = 0x0, /* ActorEntityDNAString */
    BB_StringField_ActorEntityIdleName                = 0x1, /* ActorEntityIdleName */
    BB_StringField_ActorEntityFacialName              = 0x2, /* ActorEntityFacialName */
    BB_StringField_CanvasReferenceRecord              = 0x3, /* CanvasReferenceRecord */
    BB_StringField_EditBoxConfirmTrigger              = 0x4, /* EditBoxConfirmTrigger */
    BB_StringField_EditBoxVariablePath                = 0x5, /* EditBoxVariablePath */
    BB_StringField_EntityGeometryTag                  = 0x6, /* EntityGeometryTag */
    BB_StringField_EntityLoadoutName0                 = 0x7, /* EntityLoadoutName0 */
    BB_StringField_EntityLoadoutName1                 = 0x8, /* EntityLoadoutName1 */
    BB_StringField_EntityLoadoutName2                 = 0x9, /* EntityLoadoutName2 */
    BB_StringField_EntityLoadoutName3                 = 0xa, /* EntityLoadoutName3 */
    BB_StringField_EntityMaterialPath                 = 0xb, /* EntityMaterialPath */
    BB_StringField_EntityTintPalettePath              = 0xc, /* EntityTintPalettePath */
    BB_StringField_FontStyleRecord                    = 0xd, /* FontStyleRecord */
    BB_StringField_GeneralEntityClassName             = 0xe, /* GeneralEntityClassName */
    BB_StringField_GeomEntityAnimationPath            = 0xf, /* GeomEntityAnimationPath */
    BB_StringField_GeomEntityGeometryPath             = 0x10, /* GeomEntityGeometryPath */
    BB_StringField_ImageColorPickerAnchorXURL0        = 0x11, /* ImageColorPickerAnchorXURL0 */
    BB_StringField_ImageColorPickerAnchorYURL0        = 0x12, /* ImageColorPickerAnchorYURL0 */
    BB_StringField_ImageColorPickerOutputColorURL0    = 0x13, /* ImageColorPickerOutputColorURL0 */
    BB_StringField_ImagePath                          = 0x14, /* ImagePath */
    BB_StringField_InteractionsOnLeftClickTriggerURL0 = 0x15, /* InteractionsOnLeftClickTriggerURL0 */
    BB_StringField_LightImagePath                     = 0x16, /* LightImagePath */
    BB_StringField_MoviePath                          = 0x17, /* MoviePath */
    BB_StringField_StyleReferenceRecord               = 0x18, /* StyleReferenceRecord */
    BB_StringField_SvgPath                            = 0x19, /* SvgPath */
    BB_StringField_ParticleEffectName                 = 0x1a, /* ParticleEffectName */
    BB_StringField_PrimaryStateTag                    = 0x1b, /* PrimaryStateTag */
    BB_StringField_SecondaryStateTag                  = 0x1c, /* SecondaryStateTag */
    BB_StringField_TertiaryStateTag                   = 0x1d, /* TertiaryStateTag */
    BB_StringField_TextMaterial                       = 0x1e, /* TextMaterial */
    BB_StringField_QuarternaryStateTag                = 0x1f, /* QuarternaryStateTag */
    BB_StringField_QuinaryStateTag                    = 0x20, /* QuinaryStateTag */
    BB_StringField_SenaryStateTag                     = 0x21, /* SenaryStateTag */
    BB_StringField_StripMaterialPath                  = 0x22, /* StripMaterialPath */
    BB_StringField_URLOptional                        = 0x23, /* URLOptional */
    BB_StringField_URLPostfix                         = 0x24, /* URLPostfix */
    BB_StringField_VehicleEntityClassName             = 0x25, /* VehicleEntityClassName */
    BB_StringField_VehicleEntityLoadoutName           = 0x26, /* VehicleEntityLoadoutName */
    BB_StringField_PrimitiveMaterialPath              = 0x27, /* PrimitiveMaterialPath */
    BB_StringField_ParamInput0                        = 0x28, /* ParamInput0 */
    BB_StringField_ParamInput1                        = 0x29, /* ParamInput1 */
    BB_StringField_ParamInput2                        = 0x2a, /* ParamInput2 */
    BB_StringField_ParamInput3                        = 0x2b, /* ParamInput3 */
    BB_StringField_ParamInput4                        = 0x2c, /* ParamInput4 */
    BB_StringField_ParamInput5                        = 0x2d, /* ParamInput5 */
    BB_StringField_ParamInput6                        = 0x2e, /* ParamInput6 */
    BB_StringField_ParamInput7                        = 0x2f, /* ParamInput7 */
    BB_StringField_ParamInput8                        = 0x30, /* ParamInput8 */
    BB_StringField_VariableInput0                     = 0x31, /* VariableInput0 */
    BB_StringField_VariableInput1                     = 0x32, /* VariableInput1 */
    BB_StringField_VariableInput2                     = 0x33, /* VariableInput2 */
    BB_StringField_VariableInput3                     = 0x34, /* VariableInput3 */
    BB_StringField_VariableInput4                     = 0x35, /* VariableInput4 */
    BB_StringField_UNDEFINED                          = 0x36, /* UNDEFINED */
};

// Original name: BB_StrokeAlignment
enum BB_StrokeAlignment {
    BB_StrokeAlignment_Center    = 0x0, /* Center */
    BB_StrokeAlignment_Inside    = 0x1, /* Inside */
    BB_StrokeAlignment_Outside   = 0x2, /* Outside */
    BB_StrokeAlignment_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_StrokeCapStyle
enum BB_StrokeCapStyle {
    BB_StrokeCapStyle_Round     = 0x0, /* Round */
    BB_StrokeCapStyle_None      = 0x1, /* None */
    BB_StrokeCapStyle_Square    = 0x2, /* Square */
    BB_StrokeCapStyle_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_StrokeJointStyle
enum BB_StrokeJointStyle {
    BB_StrokeJointStyle_Round     = 0x0, /* Round */
    BB_StrokeJointStyle_Bevel     = 0x1, /* Bevel */
    BB_StrokeJointStyle_Miter     = 0x2, /* Miter */
    BB_StrokeJointStyle_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_StyleCountType
enum BB_StyleCountType {
    BB_StyleCountType_Every = 0x0, /* Every */
    BB_StyleCountType_First = 0x1, /* First */
    BB_StyleCountType_Last  = 0x2, /* Last */
};

// Original name: BB_TextAlignment
enum BB_TextAlignment {
    BB_TextAlignment_Left      = 0x0, /* Left */
    BB_TextAlignment_Center    = 0x1, /* Center */
    BB_TextAlignment_Right     = 0x2, /* Right */
    BB_TextAlignment_Justify   = 0x3, /* Justify */
    BB_TextAlignment_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: BB_TextFieldWidgetStylePreset
enum BB_TextFieldWidgetStylePreset {
    BB_TextFieldWidgetStylePreset_Title1    = 0x0, /* Title1 */
    BB_TextFieldWidgetStylePreset_Title2    = 0x1, /* Title2 */
    BB_TextFieldWidgetStylePreset_Title3    = 0x2, /* Title3 */
    BB_TextFieldWidgetStylePreset_Title4    = 0x3, /* Title4 */
    BB_TextFieldWidgetStylePreset_Title5    = 0x4, /* Title5 */
    BB_TextFieldWidgetStylePreset_Heading1  = 0x5, /* Heading1 */
    BB_TextFieldWidgetStylePreset_Heading2  = 0x6, /* Heading2 */
    BB_TextFieldWidgetStylePreset_Heading3  = 0x7, /* Heading3 */
    BB_TextFieldWidgetStylePreset_Heading4  = 0x8, /* Heading4 */
    BB_TextFieldWidgetStylePreset_Heading5  = 0x9, /* Heading5 */
    BB_TextFieldWidgetStylePreset_Heading6  = 0xa, /* Heading6 */
    BB_TextFieldWidgetStylePreset_Body      = 0xb, /* Body */
    BB_TextFieldWidgetStylePreset_UNDEFINED = 0xc, /* UNDEFINED */
};

// Original name: BB_TextureOrientation
enum BB_TextureOrientation {
    BB_TextureOrientation_Landscape = 0x0, /* Landscape */
    BB_TextureOrientation_Portrait  = 0x1, /* Portrait */
    BB_TextureOrientation_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: BB_TransformField
enum BB_TransformField {
    BB_TransformField_PositionOrientation       = 0x0, /* PositionOrientation */
    BB_TransformField_PositionOrientationOffset = 0x1, /* PositionOrientationOffset */
    BB_TransformField_UNDEFINED                 = 0x2, /* UNDEFINED */
};

// Original name: BB_UnidirectionalAutoScrollBehavior
enum BB_UnidirectionalAutoScrollBehavior {
    BB_UnidirectionalAutoScrollBehavior_LeftToRight_Always = 0x0, /* LeftToRight_Always */
    BB_UnidirectionalAutoScrollBehavior_LeftToRight_IfLong = 0x1, /* LeftToRight_IfLong */
    BB_UnidirectionalAutoScrollBehavior_RightToLeft_Always = 0x2, /* RightToLeft_Always */
    BB_UnidirectionalAutoScrollBehavior_RightToLeft_IfLong = 0x3, /* RightToLeft_IfLong */
    BB_UnidirectionalAutoScrollBehavior_Bounce             = 0x4, /* Bounce */
    BB_UnidirectionalAutoScrollBehavior_UNDEFINED          = 0x5, /* UNDEFINED */
};

// Original name: BB_UnidirectionalScrollDirection
enum BB_UnidirectionalScrollDirection {
    BB_UnidirectionalScrollDirection_DeriveFromLayout = 0x0, /* DeriveFromLayout */
    BB_UnidirectionalScrollDirection_Horizontal       = 0x1, /* Horizontal */
    BB_UnidirectionalScrollDirection_Vertical         = 0x2, /* Vertical */
    BB_UnidirectionalScrollDirection_Depth            = 0x3, /* Depth */
    BB_UnidirectionalScrollDirection_UNDEFINED        = 0x4, /* UNDEFINED */
};

// Original name: BB_VectorField
enum BB_VectorField {
    BB_VectorField_Position          = 0x0, /* Position */
    BB_VectorField_PositionOffset    = 0x1, /* PositionOffset */
    BB_VectorField_Orientation       = 0x2, /* Orientation */
    BB_VectorField_OrientationOffset = 0x3, /* OrientationOffset */
    BB_VectorField_Scale             = 0x4, /* Scale */
    BB_VectorField_Size              = 0x5, /* Size */
    BB_VectorField_Pivot             = 0x6, /* Pivot */
    BB_VectorField_Anchor            = 0x7, /* Anchor */
    BB_VectorField_UNDEFINED         = 0x8, /* UNDEFINED */
};

// Original name: BB_VerticalTextAlignment
enum BB_VerticalTextAlignment {
    BB_VerticalTextAlignment_Top       = 0x0, /* Top */
    BB_VerticalTextAlignment_Center    = 0x1, /* Center */
    BB_VerticalTextAlignment_Bottom    = 0x2, /* Bottom */
    BB_VerticalTextAlignment_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: BB_WidgetType
enum BB_WidgetType {
    BB_WidgetType_ActorEntity      = 0x0, /* ActorEntity */
    BB_WidgetType_Base             = 0x1, /* Base */
    BB_WidgetType_Canvas           = 0x2, /* Canvas */
    BB_WidgetType_Card             = 0x3, /* Card */
    BB_WidgetType_Circle           = 0x4, /* Circle */
    BB_WidgetType_Clone            = 0x5, /* Clone */
    BB_WidgetType_CustomShape      = 0x6, /* CustomShape */
    BB_WidgetType_EditBox          = 0x7, /* EditBox */
    BB_WidgetType_EnvironmentProbe = 0x8, /* EnvironmentProbe */
    BB_WidgetType_GeneralEntity    = 0x9, /* GeneralEntity */
    BB_WidgetType_GeomEntity       = 0xa, /* GeomEntity */
    BB_WidgetType_HoloVolume       = 0xb, /* HoloVolume */
    BB_WidgetType_Image            = 0xc, /* Image */
    BB_WidgetType_Light            = 0xd, /* Light */
    BB_WidgetType_Line             = 0xe, /* Line */
    BB_WidgetType_LineList         = 0xf, /* LineList */
    BB_WidgetType_List             = 0x10, /* List */
    BB_WidgetType_Movie            = 0x11, /* Movie */
    BB_WidgetType_ParticleEffect   = 0x12, /* ParticleEffect */
    BB_WidgetType_Polygon          = 0x13, /* Polygon */
    BB_WidgetType_Polymorphic      = 0x14, /* Polymorphic */
    BB_WidgetType_RuntimeImage     = 0x15, /* RuntimeImage */
    BB_WidgetType_Slider           = 0x16, /* Slider */
    BB_WidgetType_Slice            = 0x17, /* Slice */
    BB_WidgetType_Strip            = 0x18, /* Strip */
    BB_WidgetType_Text             = 0x19, /* Text */
    BB_WidgetType_TickBox          = 0x1a, /* TickBox */
    BB_WidgetType_VehicleEntity    = 0x1b, /* VehicleEntity */
    BB_WidgetType_Window           = 0x1c, /* Window */
    BB_WidgetType_DustVolume       = 0x1d, /* DustVolume */
};

// Original name: BettingFormat
enum BettingFormat {
    BettingFormat_TopPlayer = 0x0, /* TopPlayer */
    BettingFormat_TopTeam   = 0x1, /* TopTeam */
};

// Original name: CIGAudioContextNamingStrategy
enum CIGAudioContextNamingStrategy {
    CIGAudioContextNamingStrategy_DataCoreFilePathAndEntityClassName = 0x0, /* DataCoreFilePathAndEntityClassName */
    CIGAudioContextNamingStrategy_EntityClassNameAndEntityName       = 0x1, /* EntityClassNameAndEntityName */
};

// Original name: CameraViewTransitionMode
enum CameraViewTransitionMode {
    CameraViewTransitionMode_ExpSlerp   = 0x0, /* ExpSlerp */
    CameraViewTransitionMode_Nlerp      = 0x1, /* Nlerp */
    CameraViewTransitionMode_NlerpCubic = 0x2, /* NlerpCubic */
    CameraViewTransitionMode_Slerp      = 0x3, /* Slerp */
    CameraViewTransitionMode_UNDEFINED  = 0x4, /* UNDEFINED */
};

// Original name: CargoFaceStackingSupport
enum CargoFaceStackingSupport {
    CargoFaceStackingSupport_StackAll  = 0x0, /* StackAll */
    CargoFaceStackingSupport_StackSelf = 0x1, /* StackSelf */
    CargoFaceStackingSupport_StackNone = 0x2, /* StackNone */
    CargoFaceStackingSupport_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: ChannelColor
enum ChannelColor {
    ChannelColor_Blue       = 0x0, /* Blue */
    ChannelColor_White      = 0x1, /* White */
    ChannelColor_Silver     = 0x2, /* Silver */
    ChannelColor_Grey       = 0x3, /* Grey */
    ChannelColor_Charcoal   = 0x4, /* Charcoal */
    ChannelColor_Red        = 0x5, /* Red */
    ChannelColor_Orange     = 0x6, /* Orange */
    ChannelColor_Yellow     = 0x7, /* Yellow */
    ChannelColor_Chartreuse = 0x8, /* Chartreuse */
    ChannelColor_Green      = 0x9, /* Green */
    ChannelColor_Mint       = 0xa, /* Mint */
    ChannelColor_Cyan       = 0xb, /* Cyan */
    ChannelColor_Azure      = 0xc, /* Azure */
    ChannelColor_Indigo     = 0xd, /* Indigo */
    ChannelColor_Purple     = 0xe, /* Purple */
    ChannelColor_Pink       = 0xf, /* Pink */
    ChannelColor_Hotpink    = 0x10, /* Hotpink */
    ChannelColor_UNDEFINED  = 0x11, /* UNDEFINED */
};

// Original name: ClassMigrationValidationType
enum ClassMigrationValidationType {
    ClassMigrationValidationType_None         = 0x0, /* None */
    ClassMigrationValidationType_DataAssert   = 0x1, /* DataAssert */
    ClassMigrationValidationType_DataCritical = 0x2, /* DataCritical */
};

// Original name: CombatStyle
enum CombatStyle {
    CombatStyle_NotSet   = 0x0, /* NotSet */
    CombatStyle_Civilian = 0x1, /* Civilian */
    CombatStyle_Merc     = 0x2, /* Merc */
    CombatStyle_SpecOps  = 0x3, /* SpecOps */
    CombatStyle_Slaver   = 0x4, /* Slaver */
    CombatStyle_OMC      = 0x5, /* OMC */
    CombatStyle_Galson   = 0x6, /* Galson */
};

// Original name: ConditionResult
enum ConditionResult {
    ConditionResult_Pass      = 0x0, /* Pass */
    ConditionResult_Fail      = 0x1, /* Fail */
    ConditionResult_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: ContractBoolParamType
enum ContractBoolParamType {
    ContractBoolParamType_Illegal                    = 0x0, /* Illegal */
    ContractBoolParamType_ShowLifeTimeInMobiGlas     = 0x1, /* ShowLifeTimeInMobiGlas */
    ContractBoolParamType_FailIfSentToPrison         = 0x2, /* FailIfSentToPrison */
    ContractBoolParamType_FailIfBecameCriminal       = 0x3, /* FailIfBecameCriminal */
    ContractBoolParamType_FailIfLeavePrison          = 0x4, /* FailIfLeavePrison */
    ContractBoolParamType_NotifyOnAvailable          = 0x5, /* NotifyOnAvailable */
    ContractBoolParamType_OnceOnly                   = 0x6, /* OnceOnly */
    ContractBoolParamType_CanReacceptAfterAbandoning = 0x7, /* CanReacceptAfterAbandoning */
    ContractBoolParamType_CanReacceptAfterFailing    = 0x8, /* CanReacceptAfterFailing */
    ContractBoolParamType_HasPersonalCooldown        = 0x9, /* HasPersonalCooldown */
    ContractBoolParamType_CanBeShared                = 0xa, /* CanBeShared */
    ContractBoolParamType_HasCompleteButton          = 0xb, /* HasCompleteButton */
    ContractBoolParamType_UNDEFINED                  = 0xc, /* UNDEFINED */
};

// Original name: ContractEndCommsReason
enum ContractEndCommsReason {
    ContractEndCommsReason_Complete  = 0x0, /* Complete */
    ContractEndCommsReason_Fail      = 0x1, /* Fail */
    ContractEndCommsReason_Abandon   = 0x2, /* Abandon */
    ContractEndCommsReason_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: ContractIntParamType
enum ContractIntParamType {
    ContractIntParamType_MaxPlayersPerInstance          = 0x0, /* MaxPlayersPerInstance */
    ContractIntParamType_AbandonedCooldownTime          = 0x1, /* AbandonedCooldownTime */
    ContractIntParamType_AbandonedCooldownTimeVariation = 0x2, /* AbandonedCooldownTimeVariation */
    ContractIntParamType_PersonalCooldownTime           = 0x3, /* PersonalCooldownTime */
    ContractIntParamType_PersonalCooldownTimeVariation  = 0x4, /* PersonalCooldownTimeVariation */
    ContractIntParamType_TimeToComplete                 = 0x5, /* TimeToComplete */
    ContractIntParamType_UNDEFINED                      = 0x6, /* UNDEFINED */
};

// Original name: ContractStringParamType
enum ContractStringParamType {
    ContractStringParamType_Title            = 0x0, /* Title */
    ContractStringParamType_TitleHUD         = 0x1, /* TitleHUD */
    ContractStringParamType_Description      = 0x2, /* Description */
    ContractStringParamType_Contractor       = 0x3, /* Contractor */
    ContractStringParamType_CommsChannelName = 0x4, /* CommsChannelName */
    ContractStringParamType_UNDEFINED        = 0x5, /* UNDEFINED */
};

// Original name: ControlHintConditionActorAttachmentType
enum ControlHintConditionActorAttachmentType {
    ControlHintConditionActorAttachmentType_Held              = 0x0, /* Held */
    ControlHintConditionActorAttachmentType_Attached          = 0x1, /* Attached */
    ControlHintConditionActorAttachmentType_Wearing           = 0x2, /* Wearing */
    ControlHintConditionActorAttachmentType_PersonalInventory = 0x3, /* PersonalInventory */
};

// Original name: ControlHintConditionActorCommsState
enum ControlHintConditionActorCommsState {
    ControlHintConditionActorCommsState_BeingCalled = 0x0, /* BeingCalled */
};

// Original name: ControlHintConditionActorEnvironment
enum ControlHintConditionActorEnvironment {
    ControlHintConditionActorEnvironment_Greenzone              = 0x0, /* Greenzone */
    ControlHintConditionActorEnvironment_UsingKiosk             = 0x1, /* UsingKiosk */
    ControlHintConditionActorEnvironment_NearInteractableObject = 0x2, /* NearInteractableObject */
    ControlHintConditionActorEnvironment_NearMineableRock       = 0x3, /* NearMineableRock */
    ControlHintConditionActorEnvironment_NearDraggableBody      = 0x4, /* NearDraggableBody */
    ControlHintConditionActorEnvironment_InRestrainRange        = 0x5, /* InRestrainRange */
    ControlHintConditionActorEnvironment_InTakeDownRange        = 0x6, /* InTakeDownRange */
    ControlHintConditionActorEnvironment_InMeleeRange           = 0x7, /* InMeleeRange */
    ControlHintConditionActorEnvironment_InMantleRange          = 0x8, /* InMantleRange */
};

// Original name: ControlHintConditionActorInteractionState
enum ControlHintConditionActorInteractionState {
    ControlHintConditionActorInteractionState_InInteractModeNothingUnderCursor               = 0x0, /* InInteractModeNothingUnderCursor */
    ControlHintConditionActorInteractionState_InInteractModeInteractableUnderCursor          = 0x1, /* InInteractModeInteractableUnderCursor */
    ControlHintConditionActorInteractionState_InInteractModeScreenUnderCursor                = 0x2, /* InInteractModeScreenUnderCursor */
    ControlHintConditionActorInteractionState_QuickSelectWheelOpen                           = 0x3, /* QuickSelectWheelOpen */
    ControlHintConditionActorInteractionState_PITMenuOpen                                    = 0x4, /* PITMenuOpen */
    ControlHintConditionActorInteractionState_PITMenuOpenMultiplePages                       = 0x5, /* PITMenuOpenMultiplePages */
    ControlHintConditionActorInteractionState_InventoryOpen                                  = 0x6, /* InventoryOpen */
    ControlHintConditionActorInteractionState_InventoryOpenItemUnderCursor                   = 0x7, /* InventoryOpenItemUnderCursor */
    ControlHintConditionActorInteractionState_InventoryOpenContextMenuOpen                   = 0x8, /* InventoryOpenContextMenuOpen */
    ControlHintConditionActorInteractionState_LootingOpen                                    = 0x9, /* LootingOpen */
    ControlHintConditionActorInteractionState_UsableLinkedInteractive                        = 0xa, /* UsableLinkedInteractive */
    ControlHintConditionActorInteractionState_PISWheelOpen                                   = 0xb, /* PISWheelOpen */
    ControlHintConditionActorInteractionState_PISWheelOpenMultiplePages                      = 0xc, /* PISWheelOpenMultiplePages */
    ControlHintConditionActorInteractionState_SwapWheelOpen                                  = 0xd, /* SwapWheelOpen */
    ControlHintConditionActorInteractionState_SwapWheelOpenMultiplePages                     = 0xe, /* SwapWheelOpenMultiplePages */
    ControlHintConditionActorInteractionState_PISWheelOpenCustomisablePrimarySecondary       = 0xf, /* PISWheelOpenCustomisablePrimarySecondary */
    ControlHintConditionActorInteractionState_PISWheelOpenContextMenuOpen                    = 0x10, /* PISWheelOpenContextMenuOpen */
    ControlHintConditionActorInteractionState_QuickSelectWheelOpenSegmentHasContextMenu      = 0x11, /* QuickSelectWheelOpenSegmentHasContextMenu */
    ControlHintConditionActorInteractionState_QuickSelectWheelOpenHoverOverNavigationSegment = 0x12, /* QuickSelectWheelOpenHoverOverNavigationSegment */
    ControlHintConditionActorInteractionState_QuickSelectWheelOpenMultiplePages              = 0x13, /* QuickSelectWheelOpenMultiplePages */
    ControlHintConditionActorInteractionState_InteractionPromptWithSingleOptionAvailable     = 0x14, /* InteractionPromptWithSingleOptionAvailable */
    ControlHintConditionActorInteractionState_InteractionPromptWithMultipleOptionsAvailable  = 0x15, /* InteractionPromptWithMultipleOptionsAvailable */
    ControlHintConditionActorInteractionState_InteractionPromptHasAvailableSecondaryAction   = 0x16, /* InteractionPromptHasAvailableSecondaryAction */
    ControlHintConditionActorInteractionState_OffscreenInteractionAvailable                  = 0x17, /* OffscreenInteractionAvailable */
    ControlHintConditionActorInteractionState_HeldItemHasAvailablePrimaryAction              = 0x18, /* HeldItemHasAvailablePrimaryAction */
    ControlHintConditionActorInteractionState_HeldItemHasAvailableSecondaryAction            = 0x19, /* HeldItemHasAvailableSecondaryAction */
    ControlHintConditionActorInteractionState_InputAwaitingRebind                            = 0x1a, /* InputAwaitingRebind */
};

// Original name: ControlHintConditionActorLadderState
enum ControlHintConditionActorLadderState {
    ControlHintConditionActorLadderState_WithinMidPointRange = 0x0, /* WithinMidPointRange */
    ControlHintConditionActorLadderState_WithinLaunchAngle   = 0x1, /* WithinLaunchAngle */
    ControlHintConditionActorLadderState_IsLadderSlideable   = 0x2, /* IsLadderSlideable */
    ControlHintConditionActorLadderState_CanDodgeRight       = 0x3, /* CanDodgeRight */
    ControlHintConditionActorLadderState_CanDodgeLeft        = 0x4, /* CanDodgeLeft */
};

// Original name: ControlHintConditionActorMissionOfferReceived
enum ControlHintConditionActorMissionOfferReceived {
    ControlHintConditionActorMissionOfferReceived_OfferReceived = 0x0, /* OfferReceived */
};

// Original name: ControlHintConditionActorSightZeroMode
enum ControlHintConditionActorSightZeroMode {
    ControlHintConditionActorSightZeroMode_Manual       = 0x0, /* Manual */
    ControlHintConditionActorSightZeroMode_Auto         = 0x1, /* Auto */
    ControlHintConditionActorSightZeroMode_AutoIsZeroed = 0x2, /* AutoIsZeroed */
    ControlHintConditionActorSightZeroMode_None         = 0x3, /* None */
};

// Original name: ControlHintConditionActorSuitState
enum ControlHintConditionActorSuitState {
    ControlHintConditionActorSuitState_VisorDirty = 0x0, /* VisorDirty */
};

// Original name: ControlHintConditionActorToolState
enum ControlHintConditionActorToolState {
    ControlHintConditionActorToolState_TractorBeamInUseOnObject        = 0x0, /* TractorBeamInUseOnObject */
    ControlHintConditionActorToolState_TractorBeamInDetachMode         = 0x1, /* TractorBeamInDetachMode */
    ControlHintConditionActorToolState_TractorBeamInCargoMode          = 0x2, /* TractorBeamInCargoMode */
    ControlHintConditionActorToolState_TractorBeamValidPlacementTarget = 0x3, /* TractorBeamValidPlacementTarget */
    ControlHintConditionActorToolState_TractorBeamMovingToValidTarget  = 0x4, /* TractorBeamMovingToValidTarget */
    ControlHintConditionActorToolState_TractorBeamChargingThrow        = 0x5, /* TractorBeamChargingThrow */
    ControlHintConditionActorToolState_MediGunInUseOnTarget            = 0x6, /* MediGunInUseOnTarget */
};

// Original name: ControlHintConditionActorWeaponState
enum ControlHintConditionActorWeaponState {
    ControlHintConditionActorWeaponState_Reloadable                            = 0x0, /* Reloadable */
    ControlHintConditionActorWeaponState_AmmoFull                              = 0x1, /* AmmoFull */
    ControlHintConditionActorWeaponState_AmmoEmpty                             = 0x2, /* AmmoEmpty */
    ControlHintConditionActorWeaponState_ModifierAttachment                    = 0x3, /* ModifierAttachment */
    ControlHintConditionActorWeaponState_AltFire                               = 0x4, /* AltFire */
    ControlHintConditionActorWeaponState_HasModifierPortsAvailable             = 0x5, /* HasModifierPortsAvailable */
    ControlHintConditionActorWeaponState_HasAmmoAvailableInItemPortOrInventory = 0x6, /* HasAmmoAvailableInItemPortOrInventory */
    ControlHintConditionActorWeaponState_ActivatableUnderbarrelAttachment      = 0x7, /* ActivatableUnderbarrelAttachment */
    ControlHintConditionActorWeaponState_Customizing                           = 0x8, /* Customizing */
};

// Original name: ControlHintConditionActorZeroGEVAState
enum ControlHintConditionActorZeroGEVAState {
    ControlHintConditionActorZeroGEVAState_CanAttachToSurface = 0x0, /* CanAttachToSurface */
    ControlHintConditionActorZeroGEVAState_CanAttachToGrip    = 0x1, /* CanAttachToGrip */
    ControlHintConditionActorZeroGEVAState_IsAttachedToGrip   = 0x2, /* IsAttachedToGrip */
};

// Original name: ControlHintConditionMobiglasMapState
enum ControlHintConditionMobiglasMapState {
    ControlHintConditionMobiglasMapState_InteriorMapActive                 = 0x0, /* InteriorMapActive */
    ControlHintConditionMobiglasMapState_InteriorMapAvailable              = 0x1, /* InteriorMapAvailable */
    ControlHintConditionMobiglasMapState_InteriorMapRouteAvailable         = 0x2, /* InteriorMapRouteAvailable */
    ControlHintConditionMobiglasMapState_InteriorMapRouteSet               = 0x3, /* InteriorMapRouteSet */
    ControlHintConditionMobiglasMapState_InteriorMapCrossSectionViewActive = 0x4, /* InteriorMapCrossSectionViewActive */
    ControlHintConditionMobiglasMapState_InteriorMapHasMultipleZones       = 0x5, /* InteriorMapHasMultipleZones */
    ControlHintConditionMobiglasMapState_InteriorMapHasMultipleSections    = 0x6, /* InteriorMapHasMultipleSections */
    ControlHintConditionMobiglasMapState_StarMapActive                     = 0x7, /* StarMapActive */
    ControlHintConditionMobiglasMapState_StarMapInJumpTunnel               = 0x8, /* StarMapInJumpTunnel */
    ControlHintConditionMobiglasMapState_StarMapRouteAvailable             = 0x9, /* StarMapRouteAvailable */
    ControlHintConditionMobiglasMapState_StarMapRouteSet                   = 0xa, /* StarMapRouteSet */
    ControlHintConditionMobiglasMapState_GalacticMapActive                 = 0xb, /* GalacticMapActive */
    ControlHintConditionMobiglasMapState_GeneralMapStepBackAvailable       = 0xc, /* GeneralMapStepBackAvailable */
};

// Original name: ControlHintConditionOptInEventState
enum ControlHintConditionOptInEventState {
    ControlHintConditionOptInEventState_OptInEventAvailable = 0x0, /* OptInEventAvailable */
    ControlHintConditionOptInEventState_OptInEventActive    = 0x1, /* OptInEventActive */
};

// Original name: ControlHintConditionRemoteTurret
enum ControlHintConditionRemoteTurret {
    ControlHintConditionRemoteTurret_HasRemoteTurretAccess  = 0x0, /* HasRemoteTurretAccess */
    ControlHintConditionRemoteTurret_MultipleRemoteTurrets  = 0x1, /* MultipleRemoteTurrets */
    ControlHintConditionRemoteTurret_RemoteTurret1Available = 0x2, /* RemoteTurret1Available */
    ControlHintConditionRemoteTurret_RemoteTurret2Available = 0x3, /* RemoteTurret2Available */
    ControlHintConditionRemoteTurret_RemoteTurret3Available = 0x4, /* RemoteTurret3Available */
    ControlHintConditionRemoteTurret_UsingRemoteTurret      = 0x5, /* UsingRemoteTurret */
};

// Original name: ControlHintConditionTryOnState
enum ControlHintConditionTryOnState {
    ControlHintConditionTryOnState_Active = 0x0, /* Active */
};

// Original name: ControlHintConditionVehicleAutoLandState
enum ControlHintConditionVehicleAutoLandState {
    ControlHintConditionVehicleAutoLandState_Ready = 0x0, /* Ready */
};

// Original name: ControlHintConditionVehicleAutoSelectedContact
enum ControlHintConditionVehicleAutoSelectedContact {
    ControlHintConditionVehicleAutoSelectedContact_None     = 0x0, /* None */
    ControlHintConditionVehicleAutoSelectedContact_All      = 0x1, /* All */
    ControlHintConditionVehicleAutoSelectedContact_Hostile  = 0x2, /* Hostile */
    ControlHintConditionVehicleAutoSelectedContact_Friendly = 0x3, /* Friendly */
    ControlHintConditionVehicleAutoSelectedContact_Attacker = 0x4, /* Attacker */
};

// Original name: ControlHintConditionVehicleComponents
enum ControlHintConditionVehicleComponents {
    ControlHintConditionVehicleComponents_Missiles                 = 0x0, /* Missiles */
    ControlHintConditionVehicleComponents_Guns                     = 0x1, /* Guns */
    ControlHintConditionVehicleComponents_Radar                    = 0x2, /* Radar */
    ControlHintConditionVehicleComponents_QuantumInterdictionSnare = 0x3, /* QuantumInterdictionSnare */
    ControlHintConditionVehicleComponents_MiningLaser              = 0x4, /* MiningLaser */
    ControlHintConditionVehicleComponents_QuantumDrive             = 0x5, /* QuantumDrive */
    ControlHintConditionVehicleComponents_Bombs                    = 0x6, /* Bombs */
    ControlHintConditionVehicleComponents_Gimbals                  = 0x7, /* Gimbals */
    ControlHintConditionVehicleComponents_CurrentOrdnanceTypeEmpty = 0x8, /* CurrentOrdnanceTypeEmpty */
    ControlHintConditionVehicleComponents_JumpThrusterPack         = 0x9, /* JumpThrusterPack */
};

// Original name: ControlHintConditionVehicleCounterMeasureState
enum ControlHintConditionVehicleCounterMeasureState {
    ControlHintConditionVehicleCounterMeasureState_HasChaff                 = 0x0, /* HasChaff */
    ControlHintConditionVehicleCounterMeasureState_HasFlare                 = 0x1, /* HasFlare */
    ControlHintConditionVehicleCounterMeasureState_IncomingCounterWithChaff = 0x2, /* IncomingCounterWithChaff */
    ControlHintConditionVehicleCounterMeasureState_IncomingCounterWithFlare = 0x3, /* IncomingCounterWithFlare */
};

// Original name: ControlHintConditionVehicleDestroyedState
enum ControlHintConditionVehicleDestroyedState {
    ControlHintConditionVehicleDestroyedState_Alive     = 0x0, /* Alive */
    ControlHintConditionVehicleDestroyedState_SoftDeath = 0x1, /* SoftDeath */
};

// Original name: ControlHintConditionVehicleDocking
enum ControlHintConditionVehicleDocking {
    ControlHintConditionVehicleDocking_NoDockingTube      = 0x0, /* NoDockingTube */
    ControlHintConditionVehicleDocking_Active             = 0x1, /* Active */
    ControlHintConditionVehicleDocking_CanAutoDock        = 0x2, /* CanAutoDock */
    ControlHintConditionVehicleDocking_AutoDocking        = 0x3, /* AutoDocking */
    ControlHintConditionVehicleDocking_NeedUndockRequest  = 0x4, /* NeedUndockRequest */
    ControlHintConditionVehicleDocking_NearDockingStation = 0x5, /* NearDockingStation */
    ControlHintConditionVehicleDocking_NearDockingShip    = 0x6, /* NearDockingShip */
    ControlHintConditionVehicleDocking_DockingTargetValid = 0x7, /* DockingTargetValid */
};

// Original name: ControlHintConditionVehicleEjectorSeat
enum ControlHintConditionVehicleEjectorSeat {
    ControlHintConditionVehicleEjectorSeat_EjectorSeat = 0x0, /* EjectorSeat */
};

// Original name: ControlHintConditionVehicleEnvironment
enum ControlHintConditionVehicleEnvironment {
    ControlHintConditionVehicleEnvironment_IncomingMissiles = 0x0, /* IncomingMissiles */
    ControlHintConditionVehicleEnvironment_ContactOnRadar   = 0x1, /* ContactOnRadar */
    ControlHintConditionVehicleEnvironment_HostileOnRadar   = 0x2, /* HostileOnRadar */
    ControlHintConditionVehicleEnvironment_BlobOnRadar      = 0x3, /* BlobOnRadar */
    ControlHintConditionVehicleEnvironment_UnknownOnRadar   = 0x4, /* UnknownOnRadar */
    ControlHintConditionVehicleEnvironment_NearMineableRock = 0x5, /* NearMineableRock */
    ControlHintConditionVehicleEnvironment_AttackerOnRadar  = 0x6, /* AttackerOnRadar */
};

// Original name: ControlHintConditionVehicleHealthState
enum ControlHintConditionVehicleHealthState {
    ControlHintConditionVehicleHealthState_Below10Percent = 0x0, /* Below10Percent */
    ControlHintConditionVehicleHealthState_Below20Percent = 0x1, /* Below20Percent */
    ControlHintConditionVehicleHealthState_Below30Percent = 0x2, /* Below30Percent */
    ControlHintConditionVehicleHealthState_Below40Percent = 0x3, /* Below40Percent */
    ControlHintConditionVehicleHealthState_Below50Percent = 0x4, /* Below50Percent */
};

// Original name: ControlHintConditionVehicleJumpDriveState
enum ControlHintConditionVehicleJumpDriveState {
    ControlHintConditionVehicleJumpDriveState_HasJumpDrive           = 0x0, /* HasJumpDrive */
    ControlHintConditionVehicleJumpDriveState_HasLinkedJumpPoint     = 0x1, /* HasLinkedJumpPoint */
    ControlHintConditionVehicleJumpDriveState_TunedToJumpPoint       = 0x2, /* TunedToJumpPoint */
    ControlHintConditionVehicleJumpDriveState_JumpPointClosed        = 0x3, /* JumpPointClosed */
    ControlHintConditionVehicleJumpDriveState_ShipInATCQueue         = 0x4, /* ShipInATCQueue */
    ControlHintConditionVehicleJumpDriveState_InJumpTunnel           = 0x5, /* InJumpTunnel */
    ControlHintConditionVehicleJumpDriveState_TakingDistortionDamage = 0x6, /* TakingDistortionDamage */
};

// Original name: ControlHintConditionVehicleLandingArea
enum ControlHintConditionVehicleLandingArea {
    ControlHintConditionVehicleLandingArea_NoLandingArea                = 0x0, /* NoLandingArea */
    ControlHintConditionVehicleLandingArea_InsideNonReservedLandingArea = 0x1, /* InsideNonReservedLandingArea */
    ControlHintConditionVehicleLandingArea_Reserved                     = 0x2, /* Reserved */
    ControlHintConditionVehicleLandingArea_NeedTakeOffPermission        = 0x3, /* NeedTakeOffPermission */
    ControlHintConditionVehicleLandingArea_WaitingForTakeOff            = 0x4, /* WaitingForTakeOff */
    ControlHintConditionVehicleLandingArea_NearLandingArea              = 0x5, /* NearLandingArea */
};

// Original name: ControlHintConditionVehicleLandingGearState
enum ControlHintConditionVehicleLandingGearState {
    ControlHintConditionVehicleLandingGearState_Down = 0x0, /* Down */
    ControlHintConditionVehicleLandingGearState_Up   = 0x1, /* Up */
};

// Original name: ControlHintConditionVehicleLockedTarget
enum ControlHintConditionVehicleLockedTarget {
    ControlHintConditionVehicleLockedTarget_None     = 0x0, /* None */
    ControlHintConditionVehicleLockedTarget_All      = 0x1, /* All */
    ControlHintConditionVehicleLockedTarget_Hostile  = 0x2, /* Hostile */
    ControlHintConditionVehicleLockedTarget_Friendly = 0x3, /* Friendly */
    ControlHintConditionVehicleLockedTarget_Attacker = 0x4, /* Attacker */
};

// Original name: ControlHintConditionVehicleMainThrustersState
enum ControlHintConditionVehicleMainThrustersState {
    ControlHintConditionVehicleMainThrustersState_Off       = 0x0, /* Off */
    ControlHintConditionVehicleMainThrustersState_On        = 0x1, /* On */
    ControlHintConditionVehicleMainThrustersState_Destroyed = 0x2, /* Destroyed */
};

// Original name: ControlHintConditionVehicleMasterMode
enum ControlHintConditionVehicleMasterMode {
    ControlHintConditionVehicleMasterMode_SCM = 0x0, /* SCM */
    ControlHintConditionVehicleMasterMode_NAV = 0x1, /* NAV */
};

// Original name: ControlHintConditionVehicleMiningLaserMode
enum ControlHintConditionVehicleMiningLaserMode {
    ControlHintConditionVehicleMiningLaserMode_Fracture  = 0x0, /* Fracture */
    ControlHintConditionVehicleMiningLaserMode_Extractor = 0x1, /* Extractor */
};

// Original name: ControlHintConditionVehiclePinnedTarget
enum ControlHintConditionVehiclePinnedTarget {
    ControlHintConditionVehiclePinnedTarget_None     = 0x0, /* None */
    ControlHintConditionVehiclePinnedTarget_All      = 0x1, /* All */
    ControlHintConditionVehiclePinnedTarget_Hostile  = 0x2, /* Hostile */
    ControlHintConditionVehiclePinnedTarget_Friendly = 0x3, /* Friendly */
    ControlHintConditionVehiclePinnedTarget_Attacker = 0x4, /* Attacker */
};

// Original name: ControlHintConditionVehicleQuantumTravelState
enum ControlHintConditionVehicleQuantumTravelState {
    ControlHintConditionVehicleQuantumTravelState_QT_RouteSet            = 0x0, /* QT_RouteSet */
    ControlHintConditionVehicleQuantumTravelState_QT_ReadyToEngage       = 0x1, /* QT_ReadyToEngage */
    ControlHintConditionVehicleQuantumTravelState_QT_CanTravel           = 0x2, /* QT_CanTravel */
    ControlHintConditionVehicleQuantumTravelState_QT_PartyLeaderRouteSet = 0x3, /* QT_PartyLeaderRouteSet */
};

// Original name: ControlHintConditionVehicleSalvage
enum ControlHintConditionVehicleSalvage {
    ControlHintConditionVehicleSalvage_SupportsScraping         = 0x0, /* SupportsScraping */
    ControlHintConditionVehicleSalvage_SupportsStructural       = 0x1, /* SupportsStructural */
    ControlHintConditionVehicleSalvage_SupportsTractor          = 0x2, /* SupportsTractor */
    ControlHintConditionVehicleSalvage_SupportsFocusHeads       = 0x3, /* SupportsFocusHeads */
    ControlHintConditionVehicleSalvage_SupportsFocusStructural  = 0x4, /* SupportsFocusStructural */
    ControlHintConditionVehicleSalvage_SupportsHeadsBeamSpacing = 0x5, /* SupportsHeadsBeamSpacing */
};

// Original name: ControlHintConditionVehicleScanWaveAvailability
enum ControlHintConditionVehicleScanWaveAvailability {
    ControlHintConditionVehicleScanWaveAvailability_Available = 0x0, /* Available */
};

// Original name: ControlHintConditionVehicleSeatTypeState
enum ControlHintConditionVehicleSeatTypeState {
    ControlHintConditionVehicleSeatTypeState_SeatToExterior = 0x0, /* SeatToExterior */
    ControlHintConditionVehicleSeatTypeState_SeatToInterior = 0x1, /* SeatToInterior */
};

// Original name: ControlHintConditionVehicleState
enum ControlHintConditionVehicleState {
    ControlHintConditionVehicleState_Docked                     = 0x0, /* Docked */
    ControlHintConditionVehicleState_Landed                     = 0x1, /* Landed */
    ControlHintConditionVehicleState_Active                     = 0x2, /* Active */
    ControlHintConditionVehicleState_Quantum                    = 0x3, /* Quantum */
    ControlHintConditionVehicleState_Static                     = 0x4, /* Static */
    ControlHintConditionVehicleState_VolatileCargoExplosionSoon = 0x5, /* VolatileCargoExplosionSoon */
    ControlHintConditionVehicleState_BombTargetActive           = 0x6, /* BombTargetActive */
};

// Original name: ControlHintConditionVehicleSystems
enum ControlHintConditionVehicleSystems {
    ControlHintConditionVehicleSystems_Power_On                  = 0x0, /* Power_On */
    ControlHintConditionVehicleSystems_DecoupledMode_On          = 0x1, /* DecoupledMode_On */
    ControlHintConditionVehicleSystems_CruiseControl_On          = 0x2, /* CruiseControl_On */
    ControlHintConditionVehicleSystems_Missile_Locked            = 0x3, /* Missile_Locked */
    ControlHintConditionVehicleSystems_Afterburner_Active        = 0x4, /* Afterburner_Active */
    ControlHintConditionVehicleSystems_SpeedLimiter_On           = 0x5, /* SpeedLimiter_On */
    ControlHintConditionVehicleSystems_GForceSafety_On           = 0x6, /* GForceSafety_On */
    ControlHintConditionVehicleSystems_Rotation_Locked           = 0x7, /* Rotation_Locked */
    ControlHintConditionVehicleSystems_AtMaxSpeed                = 0x8, /* AtMaxSpeed */
    ControlHintConditionVehicleSystems_AtMaxCruiseSpeed          = 0x9, /* AtMaxCruiseSpeed */
    ControlHintConditionVehicleSystems_PlayerAcceleration_Active = 0xa, /* PlayerAcceleration_Active */
    ControlHintConditionVehicleSystems_Shields_On                = 0xb, /* Shields_On */
};

// Original name: ControlHintConditionVehicleWeaponState
enum ControlHintConditionVehicleWeaponState {
    ControlHintConditionVehicleWeaponState_WeaponGroup1Set = 0x0, /* WeaponGroup1Set */
    ControlHintConditionVehicleWeaponState_WeaponGroup2Set = 0x1, /* WeaponGroup2Set */
};

// Original name: ControlHintConditionVehicleWeaponSystems
enum ControlHintConditionVehicleWeaponSystems {
    ControlHintConditionVehicleWeaponSystems_PrecisionTargetingEnabled = 0x0, /* PrecisionTargetingEnabled */
    ControlHintConditionVehicleWeaponSystems_StaggeredFiringEnabled    = 0x1, /* StaggeredFiringEnabled */
    ControlHintConditionVehicleWeaponSystems_LagPipsEnabled            = 0x2, /* LagPipsEnabled */
};

// Original name: ControlSurfaceEnabledMode
enum ControlSurfaceEnabledMode {
    ControlSurfaceEnabledMode_Disabled        = 0x0, /* Disabled */
    ControlSurfaceEnabledMode_EnabledForSetUp = 0x1, /* EnabledForSetUp */
    ControlSurfaceEnabledMode_EnabledForAll   = 0x2, /* EnabledForAll */
    ControlSurfaceEnabledMode_UNDEFINED       = 0x3, /* UNDEFINED */
};

// Original name: CounterMeasureType
enum CounterMeasureType {
    CounterMeasureType_Flare     = 0x0, /* Flare */
    CounterMeasureType_Chaff     = 0x1, /* Chaff */
    CounterMeasureType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: CoverBodyDirection
enum CoverBodyDirection {
    CoverBodyDirection_None  = 0x1, /* None */
    CoverBodyDirection_Left  = 0x2, /* Left */
    CoverBodyDirection_Right = 0x3, /* Right */
};

// Original name: CtxGraph_ContextActionType
enum CtxGraph_ContextActionType {
    CtxGraph_ContextActionType_Load    = 0x0, /* Load */
    CtxGraph_ContextActionType_Unload  = 0x1, /* Unload */
    CtxGraph_ContextActionType_Enter   = 0x2, /* Enter */
    CtxGraph_ContextActionType_Leave   = 0x3, /* Leave */
    CtxGraph_ContextActionType_Unfocus = 0x4, /* Unfocus */
    CtxGraph_ContextActionType_Focus   = 0x5, /* Focus */
};

// Original name: CurrencyType
enum CurrencyType {
    CurrencyType_INVALID = 0x0, /* INVALID */
    CurrencyType_UEC     = 0x1, /* UEC */
    CurrencyType_REC     = 0x2, /* REC */
    CurrencyType_MER     = 0x3, /* MER */
};

// Original name: Cursor
enum Cursor {
    Cursor_Auto             = -0x1, /* Auto */
    Cursor_Disabled         = 0x6e, /* Disabled */
    Cursor_DollyCamera      = 0x6f, /* DollyCamera */
    Cursor_Grabbable        = 0x70, /* Grabbable */
    Cursor_GrabDisabled     = 0x71, /* GrabDisabled */
    Cursor_Grabbed          = 0x72, /* Grabbed */
    Cursor_InteractMode     = 0x73, /* InteractMode */
    Cursor_InteractableZoom = 0x74, /* InteractableZoom */
    Cursor_Press            = 0x75, /* Press */
    Cursor_SlideHorizontal  = 0x76, /* SlideHorizontal */
    Cursor_SlideVertical    = 0x77, /* SlideVertical */
    Cursor_Standard         = 0x78, /* Standard */
    Cursor_TextEntry        = 0x79, /* TextEntry */
    Cursor_Conversation     = 0x7a, /* Conversation */
    Cursor_Throw            = 0x7b, /* Throw */
    Cursor_Empty            = 0x7c, /* Empty */
};

// Original name: CurveEndPoint
enum CurveEndPoint {
    CurveEndPoint_MinOptimal = 0x0, /* MinOptimal */
    CurveEndPoint_MaxOptimal = 0x1, /* MaxOptimal */
    CurveEndPoint_MaxPower   = 0x2, /* MaxPower */
};

// Original name: CurveStartPoint
enum CurveStartPoint {
    CurveStartPoint_MinPower   = 0x0, /* MinPower */
    CurveStartPoint_MinOptimal = 0x1, /* MinOptimal */
    CurveStartPoint_MaxOptimal = 0x2, /* MaxOptimal */
};

// Original name: DamageTypes
enum DamageTypes {
    DamageTypes_Physical    = 0x0, /* Physical */
    DamageTypes_Energy      = 0x1, /* Energy */
    DamageTypes_Distortion  = 0x2, /* Distortion */
    DamageTypes_Thermal     = 0x3, /* Thermal */
    DamageTypes_Biochemical = 0x4, /* Biochemical */
    DamageTypes_Stun        = 0x5, /* Stun */
    DamageTypes_UNDEFINED   = 0x6, /* UNDEFINED */
};

// Original name: DateScheduleRepeat
enum DateScheduleRepeat {
    DateScheduleRepeat_OneOff        = 0x0, /* OneOff */
    DateScheduleRepeat_RepeatDaily   = 0x1, /* RepeatDaily */
    DateScheduleRepeat_RepeatMonthly = 0x2, /* RepeatMonthly */
    DateScheduleRepeat_RepeatYearly  = 0x3, /* RepeatYearly */
    DateScheduleRepeat_UNDEFINED     = 0x4, /* UNDEFINED */
};

// Original name: DaylightParticleGroupActivation
enum DaylightParticleGroupActivation {
    DaylightParticleGroupActivation_AlwaysActive      = 0x0, /* AlwaysActive */
    DaylightParticleGroupActivation_ActiveDuringNight = 0x1, /* ActiveDuringNight */
    DaylightParticleGroupActivation_ActiveDuringDay   = 0x2, /* ActiveDuringDay */
    DaylightParticleGroupActivation_UNDEFINED         = 0x3, /* UNDEFINED */
};

// Original name: DeliveryObjectiveType
enum DeliveryObjectiveType {
    DeliveryObjectiveType_None             = 0x0, /* None */
    DeliveryObjectiveType_Freight_Resource = 0x1, /* Freight_Resource */
    DeliveryObjectiveType_Freight_Entity   = 0x2, /* Freight_Entity */
    DeliveryObjectiveType_ItemPort_Entity  = 0x3, /* ItemPort_Entity */
    DeliveryObjectiveType_Locker_Entity    = 0x4, /* Locker_Entity */
    DeliveryObjectiveType_UNDEFINED        = 0x5, /* UNDEFINED */
};

// Original name: DeviceType
enum DeviceType {
    DeviceType_Keyboard  = 0x0, /* Keyboard */
    DeviceType_Mouse     = 0x1, /* Mouse */
    DeviceType_Gamepad   = 0x2, /* Gamepad */
    DeviceType_Joystick  = 0x3, /* Joystick */
    DeviceType_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: DirectForceTypeFilter
enum DirectForceTypeFilter {
    DirectForceTypeFilter_Any        = 0x0, /* Any */
    DirectForceTypeFilter_Projectile = 0x1, /* Projectile */
    DirectForceTypeFilter_Melee      = 0x2, /* Melee */
    DirectForceTypeFilter_Physics    = 0x3, /* Physics */
};

// Original name: DirectRenderStage
enum DirectRenderStage {
    DirectRenderStage_None                = 0x0, /* None */
    DirectRenderStage_BeforeToneMapping   = 0x1, /* BeforeToneMapping */
    DirectRenderStage_AfterToneMapping    = 0x2, /* AfterToneMapping */
    DirectRenderStage_AfterPostProcessing = 0x3, /* AfterPostProcessing */
};

// Original name: DisplayCategory
enum DisplayCategory {
    DisplayCategory_Critical     = 0x0, /* Critical */
    DisplayCategory_Warning      = 0x1, /* Warning */
    DisplayCategory_MinorWarning = 0x2, /* MinorWarning */
    DisplayCategory_Normal       = 0x3, /* Normal */
    DisplayCategory_UNDEFINED    = 0x4, /* UNDEFINED */
};

// Original name: DisturbanceStyle
enum DisturbanceStyle {
    DisturbanceStyle_CenteredNoise = 0x0, /* CenteredNoise */
    DisturbanceStyle_Figure8       = 0x1, /* Figure8 */
    DisturbanceStyle_Waterfall     = 0x2, /* Waterfall */
    DisturbanceStyle_Gaussian      = 0x3, /* Gaussian */
};

// Original name: EAEntityInclusionMode
enum EAEntityInclusionMode {
    EAEntityInclusionMode_DoNotInclude   = 0x0, /* DoNotInclude */
    EAEntityInclusionMode_ReadyToInclude = 0x1, /* ReadyToInclude */
};

// Original name: EAGameCompletionAwardType
enum EAGameCompletionAwardType {
    EAGameCompletionAwardType_WinOrLoss           = 0x0, /* WinOrLoss */
    EAGameCompletionAwardType_ScoreboardPlacement = 0x1, /* ScoreboardPlacement */
};

// Original name: EAGunGameArmorLevels
enum EAGunGameArmorLevels {
    EAGunGameArmorLevels_Small     = 0x0, /* Small */
    EAGunGameArmorLevels_Medium    = 0x1, /* Medium */
    EAGunGameArmorLevels_Heavy     = 0x2, /* Heavy */
    EAGunGameArmorLevels_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EAIAlertnessLevel
enum EAIAlertnessLevel {
    EAIAlertnessLevel_Inactive = 0x0, /* Inactive */
    EAIAlertnessLevel_Low      = 0x1, /* Low */
    EAIAlertnessLevel_Medium   = 0x2, /* Medium */
    EAIAlertnessLevel_High     = 0x3, /* High */
};

// Original name: EAIMagazineRules
enum EAIMagazineRules {
    EAIMagazineRules_FollowGamerules   = 0x0, /* FollowGamerules */
    EAIMagazineRules_FiniteMagazines   = 0x1, /* FiniteMagazines */
    EAIMagazineRules_InfiniteMagazines = 0x2, /* InfiniteMagazines */
};

// Original name: EAINavigationGeneration
enum EAINavigationGeneration {
    EAINavigationGeneration_Included          = 0x0, /* Included */
    EAINavigationGeneration_Excluded          = 0x1, /* Excluded */
    EAINavigationGeneration_IgnoreWalkability = 0x2, /* IgnoreWalkability */
    EAINavigationGeneration_UNDEFINED         = 0x3, /* UNDEFINED */
};

// Original name: EAIPerceptionContext
enum EAIPerceptionContext {
    EAIPerceptionContext_Default   = 0x0, /* Default */
    EAIPerceptionContext_OnSeat    = 0x1, /* OnSeat */
    EAIPerceptionContext_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EAIWeaponShootingMode
enum EAIWeaponShootingMode {
    EAIWeaponShootingMode_Single      = 0x0, /* Single */
    EAIWeaponShootingMode_Burst       = 0x1, /* Burst */
    EAIWeaponShootingMode_Rapid       = 0x2, /* Rapid */
    EAIWeaponShootingMode_Charge      = 0x3, /* Charge */
    EAIWeaponShootingMode_Melee       = 0x4, /* Melee */
    EAIWeaponShootingMode_TractorBeam = 0x5, /* TractorBeam */
    EAIWeaponShootingMode_Repair      = 0x6, /* Repair */
};

// Original name: EALoadoutSnapshotType
enum EALoadoutSnapshotType {
    EALoadoutSnapshotType_EA_ELIMINATION = 0x0, /* EA_ELIMINATION */
    EALoadoutSnapshotType_EA_MARINE      = 0x1, /* EA_MARINE */
    EALoadoutSnapshotType_EA_SLAVER      = 0x2, /* EA_SLAVER */
    EALoadoutSnapshotType_UNDEFINED      = 0x3, /* UNDEFINED */
};

// Original name: EAMvpType
enum EAMvpType {
    EAMvpType_None        = 0x0, /* None */
    EAMvpType_Score       = 0x1, /* Score */
    EAMvpType_Kills       = 0x2, /* Kills */
    EAMvpType_Assists     = 0x3, /* Assists */
    EAMvpType_LeastDeaths = 0x4, /* LeastDeaths */
    EAMvpType_FastestLap  = 0x5, /* FastestLap */
};

// Original name: EAPickupAudioTrigger
enum EAPickupAudioTrigger {
    EAPickupAudioTrigger_PickupAquiredByPlayer      = 0x0, /* PickupAquiredByPlayer */
    EAPickupAudioTrigger_PickupAquiredByNLPC        = 0x1, /* PickupAquiredByNLPC */
    EAPickupAudioTrigger_PickupAquireFailedByPlayer = 0x2, /* PickupAquireFailedByPlayer */
    EAPickupAudioTrigger_PickupAquireFailedByNLPC   = 0x3, /* PickupAquireFailedByNLPC */
    EAPickupAudioTrigger_PickupSpawned              = 0x4, /* PickupSpawned */
    EAPickupAudioTrigger_PickupExpired              = 0x5, /* PickupExpired */
};

// Original name: EAPickupType
enum EAPickupType {
    EAPickupType_Ballistics    = 0x0, /* Ballistics */
    EAPickupType_Missiles      = 0x1, /* Missiles */
    EAPickupType_Fuel          = 0x2, /* Fuel */
    EAPickupType_Repair        = 0x3, /* Repair */
    EAPickupType_KillConfirmed = 0x4, /* KillConfirmed */
    EAPickupType_SpecialEvent  = 0x5, /* SpecialEvent */
    EAPickupType_UNDEFINED     = 0x6, /* UNDEFINED */
};

// Original name: EASOPSpawnState
enum EASOPSpawnState {
    EASOPSpawnState_None      = 0x0, /* None */
    EASOPSpawnState_Off       = 0x1, /* Off */
    EASOPSpawnState_On        = 0x2, /* On */
    EASOPSpawnState_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EASpawnScreenMode
enum EASpawnScreenMode {
    EASpawnScreenMode_Disabled     = 0x0, /* Disabled */
    EASpawnScreenMode_InitialSpawn = 0x1, /* InitialSpawn */
    EASpawnScreenMode_AlwaysActive = 0x2, /* AlwaysActive */
};

// Original name: EATransportOnTransitionFinished
enum EATransportOnTransitionFinished {
    EATransportOnTransitionFinished_DoNothing             = 0x0, /* DoNothing */
    EATransportOnTransitionFinished_Explode               = 0x1, /* Explode */
    EATransportOnTransitionFinished_Land                  = 0x2, /* Land */
    EATransportOnTransitionFinished_LoopNatural           = 0x3, /* LoopNatural */
    EATransportOnTransitionFinished_LoopTeleportToSpawner = 0x4, /* LoopTeleportToSpawner */
    EATransportOnTransitionFinished_NextTransition        = 0x5, /* NextTransition */
};

// Original name: EATransportTransitionType
enum EATransportTransitionType {
    EATransportTransitionType_Unknown   = 0x0, /* Unknown */
    EATransportTransitionType_FlySpline = 0x1, /* FlySpline */
    EATransportTransitionType_QTravel   = 0x2, /* QTravel */
};

// Original name: EAccumulatorType
enum EAccumulatorType {
    EAccumulatorType_Wear    = 0x1, /* Wear */
    EAccumulatorType_Dirt    = 0x2, /* Dirt */
    EAccumulatorType_Wetness = 0x4, /* Wetness */
};

// Original name: EActorActionEntityCarryableState
enum EActorActionEntityCarryableState {
    EActorActionEntityCarryableState_Undefined                       = 0x0, /* Undefined */
    EActorActionEntityCarryableState_Carryable_Settled               = 0x1, /* Carryable_Settled */
    EActorActionEntityCarryableState_Carryable_Carried               = 0x2, /* Carryable_Carried */
    EActorActionEntityCarryableState_Carryable_CarriedAndEquipped    = 0x3, /* Carryable_CarriedAndEquipped */
    EActorActionEntityCarryableState_Carryable_EquippedWorn          = 0x4, /* Carryable_EquippedWorn */
    EActorActionEntityCarryableState_Carryable_CarriedAndInspected   = 0x5, /* Carryable_CarriedAndInspected */
    EActorActionEntityCarryableState_Carryable_Dropped               = 0x6, /* Carryable_Dropped */
    EActorActionEntityCarryableState_Carryable_Stowed                = 0x7, /* Carryable_Stowed */
    EActorActionEntityCarryableState_Carryable_Offered               = 0x8, /* Carryable_Offered */
    EActorActionEntityCarryableState_Carryable_Stored                = 0x9, /* Carryable_Stored */
    EActorActionEntityCarryableState_Carryable_HangingOnOutfitHanger = 0xa, /* Carryable_HangingOnOutfitHanger */
    EActorActionEntityCarryableState_Special_Gripped                 = 0xb, /* Special_Gripped */
    EActorActionEntityCarryableState_Special_Mounted                 = 0xc, /* Special_Mounted */
    EActorActionEntityCarryableState_UNDEFINED                       = 0xd, /* UNDEFINED */
};

// Original name: EActorActionHandlerEventType
enum EActorActionHandlerEventType {
    EActorActionHandlerEventType_Sleep     = 0x0, /* Sleep */
    EActorActionHandlerEventType_UNDEFINED = 0x1, /* UNDEFINED */
};

// Original name: EActorHostedArticulatedEntityProfile
enum EActorHostedArticulatedEntityProfile {
    EActorHostedArticulatedEntityProfile_None            = 0x0, /* None */
    EActorHostedArticulatedEntityProfile_Default         = 0x1, /* Default */
    EActorHostedArticulatedEntityProfile_Disabled        = 0x2, /* Disabled */
    EActorHostedArticulatedEntityProfile_ActiveKinematic = 0x3, /* ActiveKinematic */
    EActorHostedArticulatedEntityProfile_ActiveDynamic   = 0x4, /* ActiveDynamic */
    EActorHostedArticulatedEntityProfile_UNDEFINED       = 0x5, /* UNDEFINED */
};

// Original name: EActorLookAheadTargetPointType
enum EActorLookAheadTargetPointType {
    EActorLookAheadTargetPointType_VehicleForward             = 0x0, /* VehicleForward */
    EActorLookAheadTargetPointType_VehicleForwardHorizon      = 0x1, /* VehicleForwardHorizon */
    EActorLookAheadTargetPointType_VehicleVelocityTranslation = 0x2, /* VehicleVelocityTranslation */
    EActorLookAheadTargetPointType_VehicleVelocityPitchYaw    = 0x3, /* VehicleVelocityPitchYaw */
    EActorLookAheadTargetPointType_LockedTarget               = 0x4, /* LockedTarget */
    EActorLookAheadTargetPointType_JumpPointSpline            = 0x5, /* JumpPointSpline */
    EActorLookAheadTargetPointType_VJoy                       = 0x6, /* VJoy */
    EActorLookAheadTargetPointType_TurretForward              = 0x7, /* TurretForward */
    EActorLookAheadTargetPointType_TurretLockedTarget         = 0x8, /* TurretLockedTarget */
    EActorLookAheadTargetPointType_TurretVJoy                 = 0x9, /* TurretVJoy */
    EActorLookAheadTargetPointType_TurretPitchYaw             = 0xa, /* TurretPitchYaw */
    EActorLookAheadTargetPointType_TurretPointerTarget        = 0xb, /* TurretPointerTarget */
    EActorLookAheadTargetPointType_LockedTargetPadlock        = 0xc, /* LockedTargetPadlock */
    EActorLookAheadTargetPointType_TurretLockedTargetPadlock  = 0xd, /* TurretLockedTargetPadlock */
    EActorLookAheadTargetPointType_MgvForward                 = 0xe, /* MgvForward */
    EActorLookAheadTargetPointType_MgvPitchYaw                = 0xf, /* MgvPitchYaw */
    EActorLookAheadTargetPointType_MgvVJoy                    = 0x10, /* MgvVJoy */
    EActorLookAheadTargetPointType_MgvLockedTarget            = 0x11, /* MgvLockedTarget */
    EActorLookAheadTargetPointType_MgvLockedTargetPadlock     = 0x12, /* MgvLockedTargetPadlock */
    EActorLookAheadTargetPointType_QuantumBoostTarget         = 0x13, /* QuantumBoostTarget */
    EActorLookAheadTargetPointType_AdsPadlock                 = 0x14, /* AdsPadlock */
    EActorLookAheadTargetPointType_AdsCrosshair               = 0x15, /* AdsCrosshair */
    EActorLookAheadTargetPointType_CustomPoint                = 0x16, /* CustomPoint */
    EActorLookAheadTargetPointType_UNDEFINED                  = 0x17, /* UNDEFINED */
};

// Original name: EActorPhysicalizationProfile
enum EActorPhysicalizationProfile {
    EActorPhysicalizationProfile_None              = 0x0, /* None */
    EActorPhysicalizationProfile_Default           = 0x1, /* Default */
    EActorPhysicalizationProfile_Default_PoseMatch = 0x2, /* Default_PoseMatch */
    EActorPhysicalizationProfile_FloppyRagdoll     = 0x3, /* FloppyRagdoll */
    EActorPhysicalizationProfile_DrivenRagdoll     = 0x4, /* DrivenRagdoll */
    EActorPhysicalizationProfile_NewRagdoll        = 0x5, /* NewRagdoll */
    EActorPhysicalizationProfile_PassiveRagdoll    = 0x6, /* PassiveRagdoll */
    EActorPhysicalizationProfile_Linked            = 0x7, /* Linked */
    EActorPhysicalizationProfile_Flying            = 0x8, /* Flying */
    EActorPhysicalizationProfile_UNDEFINED         = 0x9, /* UNDEFINED */
};

// Original name: EActorStanceUpAlignMode
enum EActorStanceUpAlignMode {
    EActorStanceUpAlignMode_Auto                     = 0x0, /* Auto */
    EActorStanceUpAlignMode_OnlyAlignToSurfaceNormal = 0x1, /* OnlyAlignToSurfaceNormal */
    EActorStanceUpAlignMode_OnlyAlignToGravity       = 0x2, /* OnlyAlignToGravity */
    EActorStanceUpAlignMode_UNDEFINED                = 0x3, /* UNDEFINED */
};

// Original name: EActorStateFilterByAimingRestriction
enum EActorStateFilterByAimingRestriction {
    EActorStateFilterByAimingRestriction_Any       = 0x0, /* Any */
    EActorStateFilterByAimingRestriction_Friendly  = 0x1, /* Friendly */
    EActorStateFilterByAimingRestriction_Kiosk     = 0x2, /* Kiosk */
    EActorStateFilterByAimingRestriction_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EActorStateFilterByBoolState
enum EActorStateFilterByBoolState {
    EActorStateFilterByBoolState_Any       = 0x0, /* Any */
    EActorStateFilterByBoolState_True      = 0x1, /* True */
    EActorStateFilterByBoolState_False     = 0x2, /* False */
    EActorStateFilterByBoolState_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EActorStateFilterByPlayerCamera
enum EActorStateFilterByPlayerCamera {
    EActorStateFilterByPlayerCamera_Any         = 0x0, /* Any */
    EActorStateFilterByPlayerCamera_FirstPerson = 0x1, /* FirstPerson */
    EActorStateFilterByPlayerCamera_ThirdPerson = 0x2, /* ThirdPerson */
    EActorStateFilterByPlayerCamera_UNDEFINED   = 0x3, /* UNDEFINED */
};

// Original name: EActorType
enum EActorType {
    EActorType_Regular      = 0x0, /* Regular */
    EActorType_PlayerCorpse = 0x1, /* PlayerCorpse */
    EActorType_DebugGhost   = 0x2, /* DebugGhost */
    EActorType_Transport    = 0x3, /* Transport */
    EActorType_DeadBody     = 0x4, /* DeadBody */
    EActorType_PlayerShadow = 0x5, /* PlayerShadow */
    EActorType_Creature     = 0x6, /* Creature */
    EActorType_UNDEFINED    = 0x7, /* UNDEFINED */
};

// Original name: EAimFireDetectionMode
enum EAimFireDetectionMode {
    EAimFireDetectionMode_Temperature = 0x0, /* Temperature */
    EAimFireDetectionMode_Radius      = 0x1, /* Radius */
    EAimFireDetectionMode_Both        = 0x2, /* Both */
};

// Original name: EAmmoContainerType
enum EAmmoContainerType {
    EAmmoContainerType_Primary = 0x0, /* Primary */
    EAmmoContainerType_Medical = 0x1, /* Medical */
    EAmmoContainerType_Salvage = 0x2, /* Salvage */
};

// Original name: EAnnouncementPriority
enum EAnnouncementPriority {
    EAnnouncementPriority_None      = 0x0, /* None */
    EAnnouncementPriority_SkipQueue = 0x1, /* SkipQueue */
    EAnnouncementPriority_PlayNow   = 0x2, /* PlayNow */
};

// Original name: EAnnouncerGameTokenType
enum EAnnouncerGameTokenType {
    EAnnouncerGameTokenType_None     = 0x0, /* None */
    EAnnouncerGameTokenType_GameMode = 0x1, /* GameMode */
    EAnnouncerGameTokenType_Team     = 0x2, /* Team */
    EAnnouncerGameTokenType_Level    = 0x3, /* Level */
    EAnnouncerGameTokenType_Phase    = 0x4, /* Phase */
};

// Original name: EApplicationFormBodyTypes
enum EApplicationFormBodyTypes {
    EApplicationFormBodyTypes_Male                 = 0x0, /* Male */
    EApplicationFormBodyTypes_Female               = 0x1, /* Female */
    EApplicationFormBodyTypes_PreferToSelfDescribe = 0x2, /* PreferToSelfDescribe */
    EApplicationFormBodyTypes_PreferNotToSay       = 0x3, /* PreferNotToSay */
    EApplicationFormBodyTypes_UNDEFINED            = 0x4, /* UNDEFINED */
};

// Original name: EAudioBreathEvents
enum EAudioBreathEvents {
    EAudioBreathEvents_BreathIn         = 0x0, /* BreathIn */
    EAudioBreathEvents_BreathOut        = 0x1, /* BreathOut */
    EAudioBreathEvents_BreathingStarted = 0x2, /* BreathingStarted */
    EAudioBreathEvents_BreathingStopped = 0x3, /* BreathingStopped */
    EAudioBreathEvents_BreathHold       = 0x4, /* BreathHold */
    EAudioBreathEvents_BreathRelease    = 0x5, /* BreathRelease */
    EAudioBreathEvents_BreathCustom     = 0x6, /* BreathCustom */
    EAudioBreathEvents_UNDEFINED        = 0x7, /* UNDEFINED */
};

// Original name: EAudioBreathParams
enum EAudioBreathParams {
    EAudioBreathParams_BreathDuration      = 0x0, /* BreathDuration */
    EAudioBreathParams_BreathVolume        = 0x1, /* BreathVolume */
    EAudioBreathParams_BreathAirSpeed      = 0x2, /* BreathAirSpeed */
    EAudioBreathParams_BloodOxygen         = 0x3, /* BloodOxygen */
    EAudioBreathParams_BlackOut            = 0x4, /* BlackOut */
    EAudioBreathParams_Health              = 0x5, /* Health */
    EAudioBreathParams_Stamina             = 0x6, /* Stamina */
    EAudioBreathParams_BreathOxygenLevel   = 0x7, /* BreathOxygenLevel */
    EAudioBreathParams_Exertion            = 0x8, /* Exertion */
    EAudioBreathParams_Recovery            = 0x9, /* Recovery */
    EAudioBreathParams_BodyTemperature     = 0xa, /* BodyTemperature */
    EAudioBreathParams_SuitTemperature     = 0xb, /* SuitTemperature */
    EAudioBreathParams_ApparentTemperature = 0xc, /* ApparentTemperature */
    EAudioBreathParams_BreathHeldRatio     = 0xd, /* BreathHeldRatio */
    EAudioBreathParams_LungFullness        = 0xe, /* LungFullness */
    EAudioBreathParams_BreathInOut         = 0xf, /* BreathInOut */
    EAudioBreathParams_GForce              = 0x10, /* GForce */
    EAudioBreathParams_GForceStress        = 0x11, /* GForceStress */
    EAudioBreathParams_GForcePassout       = 0x12, /* GForcePassout */
    EAudioBreathParams_StyleActiveTime     = 0x13, /* StyleActiveTime */
    EAudioBreathParams_CustomParameter     = 0x14, /* CustomParameter */
    EAudioBreathParams_TorsoWear           = 0x15, /* TorsoWear */
    EAudioBreathParams_ArmsLock            = 0x16, /* ArmsLock */
    EAudioBreathParams_IsInEVA             = 0x17, /* IsInEVA */
    EAudioBreathParams_UNDEFINED           = 0x18, /* UNDEFINED */
};

// Original name: EAudioControllerEntityType
enum EAudioControllerEntityType {
    EAudioControllerEntityType_None            = 0x0, /* None */
    EAudioControllerEntityType_Actor           = 0x1, /* Actor */
    EAudioControllerEntityType_Vehicle         = 0x2, /* Vehicle */
    EAudioControllerEntityType_Communication   = 0x3, /* Communication */
    EAudioControllerEntityType_TransitCarriage = 0x4, /* TransitCarriage */
    EAudioControllerEntityType_UNDEFINED       = 0x5, /* UNDEFINED */
};

// Original name: EAudioEnvironmentFeedbackMovementType
enum EAudioEnvironmentFeedbackMovementType {
    EAudioEnvironmentFeedbackMovementType_EnvironmentMovement_X         = 0x0, /* EnvironmentMovement_X */
    EAudioEnvironmentFeedbackMovementType_EnvironmentMovement_Y         = 0x1, /* EnvironmentMovement_Y */
    EAudioEnvironmentFeedbackMovementType_EnvironmentMovement_Z         = 0x2, /* EnvironmentMovement_Z */
    EAudioEnvironmentFeedbackMovementType_EnvironmentMovement_Magnitude = 0x3, /* EnvironmentMovement_Magnitude */
    EAudioEnvironmentFeedbackMovementType_UNDEFINED                     = 0x4, /* UNDEFINED */
};

// Original name: EAudioGameContextType
enum EAudioGameContextType {
    EAudioGameContextType_Default       = 0x0, /* Default */
    EAudioGameContextType_ActorDefault  = 0x1, /* ActorDefault */
    EAudioGameContextType_ActorEVA      = 0x2, /* ActorEVA */
    EAudioGameContextType_VehicleDriver = 0x3, /* VehicleDriver */
    EAudioGameContextType_VehicleCrew   = 0x4, /* VehicleCrew */
    EAudioGameContextType_RemoteTurret  = 0x5, /* RemoteTurret */
    EAudioGameContextType_Dead          = 0x6, /* Dead */
    EAudioGameContextType_Cutscene      = 0x7, /* Cutscene */
    EAudioGameContextType_UNDEFINED     = 0x8, /* UNDEFINED */
};

// Original name: EAudioIFCSOutputData
enum EAudioIFCSOutputData {
    EAudioIFCSOutputData_IFCS_Update_Mode                                         = 0x0, /* IFCS_Update_Mode */
    EAudioIFCSOutputData_Ship_Aerodynamics_DragMagnitude                          = 0x1, /* Ship_Aerodynamics_DragMagnitude */
    EAudioIFCSOutputData_Ship_Aerodynamics_LiftMagnitude                          = 0x2, /* Ship_Aerodynamics_LiftMagnitude */
    EAudioIFCSOutputData_Ship_AfterburnerCommanded                                = 0x3, /* Ship_AfterburnerCommanded */
    EAudioIFCSOutputData_Ship_AfterburnerEnabled                                  = 0x4, /* Ship_AfterburnerEnabled */
    EAudioIFCSOutputData_Ship_AfterburnerEnabledScaled                            = 0x5, /* Ship_AfterburnerEnabledScaled */
    EAudioIFCSOutputData_Ship_AfterburnerRampUpRatio                              = 0x6, /* Ship_AfterburnerRampUpRatio */
    EAudioIFCSOutputData_Ship_AfterburnerCapacityRatio                            = 0x7, /* Ship_AfterburnerCapacityRatio */
    EAudioIFCSOutputData_Ship_GSafe_Enabled                                       = 0x8, /* Ship_GSafe_Enabled */
    EAudioIFCSOutputData_Ship_Coupled                                             = 0x9, /* Ship_Coupled */
    EAudioIFCSOutputData_Ship_FuelRatio                                           = 0xa, /* Ship_FuelRatio */
    EAudioIFCSOutputData_Ship_HoverMode                                           = 0xb, /* Ship_HoverMode */
    EAudioIFCSOutputData_Ship_HoverModeAnimationPosition                          = 0xc, /* Ship_HoverModeAnimationPosition */
    EAudioIFCSOutputData_Ship_HoverDriftForwardBackward                           = 0xd, /* Ship_HoverDriftForwardBackward */
    EAudioIFCSOutputData_Ship_HoverDriftLeftRight                                 = 0xe, /* Ship_HoverDriftLeftRight */
    EAudioIFCSOutputData_Ship_HoverDriftMagnitude                                 = 0xf, /* Ship_HoverDriftMagnitude */
    EAudioIFCSOutputData_Ship_Planet_Altitude                                     = 0x10, /* Ship_Planet_Altitude */
    EAudioIFCSOutputData_Ship_Planet_AtmosphericDensity                           = 0x11, /* Ship_Planet_AtmosphericDensity */
    EAudioIFCSOutputData_Ship_Planet_HeightAboveGround                            = 0x12, /* Ship_Planet_HeightAboveGround */
    EAudioIFCSOutputData_Ship_Atmospheric_Mach                                    = 0x13, /* Ship_Atmospheric_Mach */
    EAudioIFCSOutputData_Ship_Atmospheric_StagnationTemperature                   = 0x14, /* Ship_Atmospheric_StagnationTemperature */
    EAudioIFCSOutputData_Ship_Atmospheric_StagnationTemperatureFlareStarted       = 0x15, /* Ship_Atmospheric_StagnationTemperatureFlareStarted */
    EAudioIFCSOutputData_Ship_Atmospheric_StagnationTemperatureNormalized         = 0x16, /* Ship_Atmospheric_StagnationTemperatureNormalized */
    EAudioIFCSOutputData_Ship_Atmospheric_Wind_Speed_Rotational_Non_Normalised    = 0x17, /* Ship_Atmospheric_Wind_Speed_Rotational_Non_Normalised */
    EAudioIFCSOutputData_Ship_Atmospheric_Wind_Speed_Translational_Non_Normalised = 0x18, /* Ship_Atmospheric_Wind_Speed_Translational_Non_Normalised */
    EAudioIFCSOutputData_Ship_Translation_Speed                                   = 0x19, /* Ship_Translation_Speed */
    EAudioIFCSOutputData_Ship_Translation_Speed_NonNormalized                     = 0x1a, /* Ship_Translation_Speed_NonNormalized */
    EAudioIFCSOutputData_Ship_Translation_Acceleration_MaxAll                     = 0x1b, /* Ship_Translation_Acceleration_MaxAll */
    EAudioIFCSOutputData_Ship_Translation_Acceleration_Forward                    = 0x1c, /* Ship_Translation_Acceleration_Forward */
    EAudioIFCSOutputData_Ship_Translation_Acceleration_Backward                   = 0x1d, /* Ship_Translation_Acceleration_Backward */
    EAudioIFCSOutputData_Ship_Translation_Acceleration_ForwardBackward            = 0x1e, /* Ship_Translation_Acceleration_ForwardBackward */
    EAudioIFCSOutputData_Ship_Translation_Acceleration_UpDown                     = 0x1f, /* Ship_Translation_Acceleration_UpDown */
    EAudioIFCSOutputData_Ship_Translation_Acceleration_UpDownSigned               = 0x20, /* Ship_Translation_Acceleration_UpDownSigned */
    EAudioIFCSOutputData_Ship_Translation_Acceleration_LeftRight                  = 0x21, /* Ship_Translation_Acceleration_LeftRight */
    EAudioIFCSOutputData_Ship_Translation_Acceleration_LeftRightSigned            = 0x22, /* Ship_Translation_Acceleration_LeftRightSigned */
    EAudioIFCSOutputData_Ship_Translation_Acceleration_MaxLeftRightUpDown         = 0x23, /* Ship_Translation_Acceleration_MaxLeftRightUpDown */
    EAudioIFCSOutputData_Ship_Translation_GSafe_Strength                          = 0x24, /* Ship_Translation_GSafe_Strength */
    EAudioIFCSOutputData_Ship_Translation_InCruiseRange                           = 0x25, /* Ship_Translation_InCruiseRange */
    EAudioIFCSOutputData_Ship_Rotation_Speed                                      = 0x26, /* Ship_Rotation_Speed */
    EAudioIFCSOutputData_Ship_Rotation_Speed_NonNormalized                        = 0x27, /* Ship_Rotation_Speed_NonNormalized */
    EAudioIFCSOutputData_Ship_Rotation_Speed_Pitch                                = 0x28, /* Ship_Rotation_Speed_Pitch */
    EAudioIFCSOutputData_Ship_Rotation_Speed_Pitch_Signed                         = 0x29, /* Ship_Rotation_Speed_Pitch_Signed */
    EAudioIFCSOutputData_Ship_Rotation_Speed_Yaw                                  = 0x2a, /* Ship_Rotation_Speed_Yaw */
    EAudioIFCSOutputData_Ship_Rotation_Speed_Yaw_Signed                           = 0x2b, /* Ship_Rotation_Speed_Yaw_Signed */
    EAudioIFCSOutputData_Ship_Rotation_Speed_Roll                                 = 0x2c, /* Ship_Rotation_Speed_Roll */
    EAudioIFCSOutputData_Ship_Rotation_Speed_Roll_Signed                          = 0x2d, /* Ship_Rotation_Speed_Roll_Signed */
    EAudioIFCSOutputData_Ship_Rotation_Speed_MaxAll                               = 0x2e, /* Ship_Rotation_Speed_MaxAll */
    EAudioIFCSOutputData_Ship_Rotation_Speed_MaxPitchYaw                          = 0x2f, /* Ship_Rotation_Speed_MaxPitchYaw */
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence                            = 0x30, /* Ship_Rotation_InputDivergence */
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_Pitch                      = 0x31, /* Ship_Rotation_InputDivergence_Pitch */
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_Yaw                        = 0x32, /* Ship_Rotation_InputDivergence_Yaw */
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_Roll                       = 0x33, /* Ship_Rotation_InputDivergence_Roll */
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_MaxAll                     = 0x34, /* Ship_Rotation_InputDivergence_MaxAll */
    EAudioIFCSOutputData_Ship_Rotation_InputDivergence_MaxPitchYaw                = 0x35, /* Ship_Rotation_InputDivergence_MaxPitchYaw */
    EAudioIFCSOutputData_Gravlev_Compression_One                                  = 0x36, /* Gravlev_Compression_One */
    EAudioIFCSOutputData_Gravlev_Compression_Two                                  = 0x37, /* Gravlev_Compression_Two */
    EAudioIFCSOutputData_Gravlev_Compression_Three                                = 0x38, /* Gravlev_Compression_Three */
    EAudioIFCSOutputData_Gravlev_Compression_Four                                 = 0x39, /* Gravlev_Compression_Four */
    EAudioIFCSOutputData_Gravlev_Compression_All                                  = 0x3a, /* Gravlev_Compression_All */
    EAudioIFCSOutputData_Gravlev_Compression_Average                              = 0x3b, /* Gravlev_Compression_Average */
    EAudioIFCSOutputData_Gravlev_Compression_Max                                  = 0x3c, /* Gravlev_Compression_Max */
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_One                       = 0x3d, /* Gravlev_Compression_Normalized_One */
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Two                       = 0x3e, /* Gravlev_Compression_Normalized_Two */
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Three                     = 0x3f, /* Gravlev_Compression_Normalized_Three */
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Four                      = 0x40, /* Gravlev_Compression_Normalized_Four */
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_All                       = 0x41, /* Gravlev_Compression_Normalized_All */
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Average                   = 0x42, /* Gravlev_Compression_Normalized_Average */
    EAudioIFCSOutputData_Gravlev_Compression_Normalized_Max                       = 0x43, /* Gravlev_Compression_Normalized_Max */
    EAudioIFCSOutputData_Gravlev_Enabled                                          = 0x44, /* Gravlev_Enabled */
    EAudioIFCSOutputData_Ship_Linear_VelocityLengthNormalizedLS                   = 0x45, /* Ship_Linear_VelocityLengthNormalizedLS */
    EAudioIFCSOutputData_Ship_Linear_VelocityGoalLengthNormalizedLS               = 0x46, /* Ship_Linear_VelocityGoalLengthNormalizedLS */
    EAudioIFCSOutputData_Ship_Linear_VelocityForwardBackwardNormalizedLS          = 0x47, /* Ship_Linear_VelocityForwardBackwardNormalizedLS */
    EAudioIFCSOutputData_Ship_Linear_VelocityRightLeftNormalizedLS                = 0x48, /* Ship_Linear_VelocityRightLeftNormalizedLS */
    EAudioIFCSOutputData_Ship_Linear_VelocityUpDownNormalizedLS                   = 0x49, /* Ship_Linear_VelocityUpDownNormalizedLS */
    EAudioIFCSOutputData_Ship_Angular_AccelerationLengthLS                        = 0x4a, /* Ship_Angular_AccelerationLengthLS */
    EAudioIFCSOutputData_Ship_Linear_RealAccelerationLS                           = 0x4b, /* Ship_Linear_RealAccelerationLS */
    EAudioIFCSOutputData_Ship_MaxSpeedNav                                         = 0x4c, /* Ship_MaxSpeedNav */
    EAudioIFCSOutputData_Ship_AtmosphericDensity                                  = 0x4d, /* Ship_AtmosphericDensity */
    EAudioIFCSOutputData_Ship_IsInControlSurfaceMode                              = 0x4e, /* Ship_IsInControlSurfaceMode */
    EAudioIFCSOutputData_Ship_IsLanded                                            = 0x4f, /* Ship_IsLanded */
    EAudioIFCSOutputData_Ship_IsGearDown                                          = 0x50, /* Ship_IsGearDown */
    EAudioIFCSOutputData_Ship_IsMainThrustersOn                                   = 0x51, /* Ship_IsMainThrustersOn */
    EAudioIFCSOutputData_Ship_RawInputRotation                                    = 0x52, /* Ship_RawInputRotation */
    EAudioIFCSOutputData_Ship_NavModeEnabled                                      = 0x53, /* Ship_NavModeEnabled */
    EAudioIFCSOutputData_Ship_ThrusterDisconnectActive                            = 0x54, /* Ship_ThrusterDisconnectActive */
    EAudioIFCSOutputData_Ship_ThrusterControlSurfaceMix                           = 0x55, /* Ship_ThrusterControlSurfaceMix */
    EAudioIFCSOutputData_UNDEFINED                                                = 0x56, /* UNDEFINED */
};

// Original name: EAudioRayOcclusionCalcRule
enum EAudioRayOcclusionCalcRule {
    EAudioRayOcclusionCalcRule_Average             = 0x0, /* Average */
    EAudioRayOcclusionCalcRule_WeightLeastOccluded = 0x1, /* WeightLeastOccluded */
    EAudioRayOcclusionCalcRule_WeightMostOccluded  = 0x2, /* WeightMostOccluded */
    EAudioRayOcclusionCalcRule_UNDEFINED           = 0x3, /* UNDEFINED */
};

// Original name: EAudioRayOcclusionType
enum EAudioRayOcclusionType {
    EAudioRayOcclusionType_SingleRayCentre = 0x0, /* SingleRayCentre */
    EAudioRayOcclusionType_MultiRayBounds  = 0x1, /* MultiRayBounds */
    EAudioRayOcclusionType_MultiRayRadius  = 0x2, /* MultiRayRadius */
    EAudioRayOcclusionType_UNDEFINED       = 0x3, /* UNDEFINED */
};

// Original name: EAudioTriggerType
enum EAudioTriggerType {
    EAudioTriggerType_None           = 0x0, /* None */
    EAudioTriggerType_WeaponFire     = 0x1, /* WeaponFire */
    EAudioTriggerType_EntityEffect   = 0x2, /* EntityEffect */
    EAudioTriggerType_Footsteps      = 0x3, /* Footsteps */
    EAudioTriggerType_Foley          = 0x4, /* Foley */
    EAudioTriggerType_ProceduralClip = 0x5, /* ProceduralClip */
    EAudioTriggerType_Dialogue       = 0x6, /* Dialogue */
    EAudioTriggerType_Count          = 0x7, /* Count */
    EAudioTriggerType_Stopped        = 0x8, /* Stopped */
    EAudioTriggerType_UNDEFINED      = 0x9, /* UNDEFINED */
};

// Original name: EAudioType
enum EAudioType {
    EAudioType_BulletHit  = 0x1, /* BulletHit */
    EAudioType_BulletWhiz = 0x2, /* BulletWhiz */
    EAudioType_Weapon     = 0x4, /* Weapon */
    EAudioType_Movement   = 0x8, /* Movement */
    EAudioType_Explosion  = 0x10, /* Explosion */
    EAudioType_Collision  = 0x20, /* Collision */
    EAudioType_Grenade    = 0x40, /* Grenade */
    EAudioType_Vehicle    = 0x80, /* Vehicle */
    EAudioType_Ragdoll    = 0x100, /* Ragdoll */
    EAudioType_Takedown   = 0x200, /* Takedown */
    EAudioType_Custom     = 0x400, /* Custom */
};

// Original name: EAudioValueOutputCameraInputs
enum EAudioValueOutputCameraInputs {
    EAudioValueOutputCameraInputs_EAVOCI_None          = 0x0, /* EAVOCI_None */
    EAudioValueOutputCameraInputs_EAVOCI_Snapshot      = 0x1, /* EAVOCI_Snapshot */
    EAudioValueOutputCameraInputs_EAVOCI_Average       = 0x2, /* EAVOCI_Average */
    EAudioValueOutputCameraInputs_EAVOCI_AverageRooted = 0x3, /* EAVOCI_AverageRooted */
    EAudioValueOutputCameraInputs_EAVOCI_Max           = 0x4, /* EAVOCI_Max */
    EAudioValueOutputCameraInputs_UNDEFINED            = 0x5, /* UNDEFINED */
};

// Original name: EAutoFillType
enum EAutoFillType {
    EAutoFillType_None           = 0x0, /* None */
    EAutoFillType_Balance        = 0x1, /* Balance */
    EAutoFillType_TopToBottom    = 0x2, /* TopToBottom */
    EAutoFillType_BottomToTop    = 0x3, /* BottomToTop */
    EAutoFillType_SmartBalancing = 0x4, /* SmartBalancing */
};

// Original name: EAuxiliaryProxy
enum EAuxiliaryProxy {
    EAuxiliaryProxy_Head_Proxies       = 0x0, /* Head_Proxies */
    EAuxiliaryProxy_Neck_Proxies       = 0x1, /* Neck_Proxies */
    EAuxiliaryProxy_Spine_1_Proxies    = 0x2, /* Spine_1_Proxies */
    EAuxiliaryProxy_Spine_2_Proxies    = 0x3, /* Spine_2_Proxies */
    EAuxiliaryProxy_Spine_3_Proxies    = 0x4, /* Spine_3_Proxies */
    EAuxiliaryProxy_Hips_Proxies       = 0x5, /* Hips_Proxies */
    EAuxiliaryProxy_L_Shoulder_Proxies = 0x6, /* L_Shoulder_Proxies */
    EAuxiliaryProxy_L_Arm_Proxies      = 0x7, /* L_Arm_Proxies */
    EAuxiliaryProxy_L_ForeArm_Proxies  = 0x8, /* L_ForeArm_Proxies */
    EAuxiliaryProxy_L_Hand_Proxies     = 0x9, /* L_Hand_Proxies */
    EAuxiliaryProxy_L_Thigh_Proxies    = 0xa, /* L_Thigh_Proxies */
    EAuxiliaryProxy_L_Knee_Proxies     = 0xb, /* L_Knee_Proxies */
    EAuxiliaryProxy_L_Foot_Proxies     = 0xc, /* L_Foot_Proxies */
    EAuxiliaryProxy_L_Toe_Proxies      = 0xd, /* L_Toe_Proxies */
    EAuxiliaryProxy_R_Shoulder_Proxies = 0xe, /* R_Shoulder_Proxies */
    EAuxiliaryProxy_R_Arm_Proxies      = 0xf, /* R_Arm_Proxies */
    EAuxiliaryProxy_R_ForeArm_Proxies  = 0x10, /* R_ForeArm_Proxies */
    EAuxiliaryProxy_R_Hand_Proxies     = 0x11, /* R_Hand_Proxies */
    EAuxiliaryProxy_R_Thigh_Proxies    = 0x12, /* R_Thigh_Proxies */
    EAuxiliaryProxy_R_Knee_Proxies     = 0x13, /* R_Knee_Proxies */
    EAuxiliaryProxy_R_Foot_Proxies     = 0x14, /* R_Foot_Proxies */
    EAuxiliaryProxy_R_Toe_Proxies      = 0x15, /* R_Toe_Proxies */
    EAuxiliaryProxy_Helper_01_Proxies  = 0x16, /* Helper_01_Proxies */
    EAuxiliaryProxy_Helper_02_Proxies  = 0x17, /* Helper_02_Proxies */
    EAuxiliaryProxy_Helper_03_Proxies  = 0x18, /* Helper_03_Proxies */
    EAuxiliaryProxy_Helper_04_Proxies  = 0x19, /* Helper_04_Proxies */
    EAuxiliaryProxy_Helper_05_Proxies  = 0x1a, /* Helper_05_Proxies */
    EAuxiliaryProxy_Helper_06_Proxies  = 0x1b, /* Helper_06_Proxies */
    EAuxiliaryProxy_Helper_07_Proxies  = 0x1c, /* Helper_07_Proxies */
    EAuxiliaryProxy_Helper_08_Proxies  = 0x1d, /* Helper_08_Proxies */
    EAuxiliaryProxy_Helper_09_Proxies  = 0x1e, /* Helper_09_Proxies */
    EAuxiliaryProxy_Helper_10_Proxies  = 0x1f, /* Helper_10_Proxies */
    EAuxiliaryProxy_UNDEFINED          = 0x20, /* UNDEFINED */
};

// Original name: EAwardId
enum EAwardId {
    EAwardId_None                          = 0x1, /* None */
    EAwardId_VanduulSwarm_Win_Legacy       = 0x2, /* VanduulSwarm_Win_Legacy */
    EAwardId_VanduulSwarm_Win              = 0x4, /* VanduulSwarm_Win */
    EAwardId_PirateSwarm_Win               = 0x8, /* PirateSwarm_Win */
    EAwardId_PirateSwarm_Speedrun          = 0x10, /* PirateSwarm_Speedrun */
    EAwardId_PirateSwarm_SpecialCondition  = 0x20, /* PirateSwarm_SpecialCondition */
    EAwardId_Tank_Win                      = 0x40, /* Tank_Win */
    EAwardId_GunGame_Win                   = 0x80, /* GunGame_Win */
    EAwardId_ExperimentalMode_Played       = 0x100, /* ExperimentalMode_Played */
    EAwardId_Killed_Developer              = 0x200, /* Killed_Developer */
    EAwardId_PvE_Deathless                 = 0x400, /* PvE_Deathless */
    EAwardId_Xmas_Win                      = 0x800, /* Xmas_Win */
    EAwardId_LunarNewYear_Win              = 0x1000, /* LunarNewYear_Win */
    EAwardId_Valentines_Win                = 0x2000, /* Valentines_Win */
    EAwardId_Halloween_Win                 = 0x4000, /* Halloween_Win */
    EAwardId_SC_GameMasterEventItem        = 0x8000, /* SC_GameMasterEventItem */
    EAwardId_SC_LootableEventItem          = 0x10000, /* SC_LootableEventItem */
    EAwardId_StPatricks_Win                = 0x20000, /* StPatricks_Win */
    EAwardId_WelcomeToPyro_Chapter_One     = 0x40000, /* WelcomeToPyro_Chapter_One */
    EAwardId_WelcomeToPyro_Chapter_Two     = 0x80000, /* WelcomeToPyro_Chapter_Two */
    EAwardId_WelcomeToPyro_Chapter_Two_VIG = 0x100000, /* WelcomeToPyro_Chapter_Two_VIG */
    EAwardId_WelcomeToPyro_Chapter_Two_CFP = 0x200000, /* WelcomeToPyro_Chapter_Two_CFP */
    EAwardId_WelcomeToPyro_Chapter_Two_HH  = 0x400000, /* WelcomeToPyro_Chapter_Two_HH */
    EAwardId_WelcomeToPyro_Firesale        = 0x800000, /* WelcomeToPyro_Firesale */
    EAwardId_WelcomeToPyro_MiningRush      = 0x1000000, /* WelcomeToPyro_MiningRush */
    EAwardId_WelcomeToPyro_SalvageRush     = 0x2000000, /* WelcomeToPyro_SalvageRush */
    EAwardId_WelcomeToPyro_FiresaleCombo   = 0x4000000, /* WelcomeToPyro_FiresaleCombo */
    EAwardId_Training_UEE                  = 0x8000000, /* Training_UEE */
    EAwardId_HuntingThePolaris             = 0x10000000, /* HuntingThePolaris */
};

// Original name: EBuildingBlocksFlattenBehavior
enum EBuildingBlocksFlattenBehavior {
    EBuildingBlocksFlattenBehavior_None        = 0x0, /* None */
    EBuildingBlocksFlattenBehavior_FlattenAs3D = 0x1, /* FlattenAs3D */
    EBuildingBlocksFlattenBehavior_FlattenAs2D = 0x2, /* FlattenAs2D */
};

// Original name: ECIGTestA
enum ECIGTestA {
    ECIGTestA_Item_A    = 0x0, /* Item_A */
    ECIGTestA_Item_B    = 0x1, /* Item_B */
    ECIGTestA_Item_C    = 0x2, /* Item_C */
    ECIGTestA_Item_D    = 0x3, /* Item_D */
    ECIGTestA_Item_E    = 0x4, /* Item_E */
    ECIGTestA_Item_F    = 0x5, /* Item_F */
    ECIGTestA_Item_G    = 0x6, /* Item_G */
    ECIGTestA_Item_H    = 0x7, /* Item_H */
    ECIGTestA_UNDEFINED = 0x8, /* UNDEFINED */
};

// Original name: ECameraTransitionRelativeTo
enum ECameraTransitionRelativeTo {
    ECameraTransitionRelativeTo_Start = 0x0, /* Start */
    ECameraTransitionRelativeTo_End   = 0x1, /* End */
};

// Original name: ECameraViewTypes
enum ECameraViewTypes {
    ECameraViewTypes_Simple3P                    = 0x0, /* Simple3P */
    ECameraViewTypes_Static                      = 0x1, /* Static */
    ECameraViewTypes_StaticFixedSpectator        = 0x2, /* StaticFixedSpectator */
    ECameraViewTypes_ThirdPersonBase             = 0x3, /* ThirdPersonBase */
    ECameraViewTypes_Orbit                       = 0x4, /* Orbit */
    ECameraViewTypes_OrbitEntity                 = 0x5, /* OrbitEntity */
    ECameraViewTypes_OrbitEntityCinematic        = 0x6, /* OrbitEntityCinematic */
    ECameraViewTypes_OrbitPassenger              = 0x7, /* OrbitPassenger */
    ECameraViewTypes_OrbitPlayer                 = 0x8, /* OrbitPlayer */
    ECameraViewTypes_OrbitPoint                  = 0x9, /* OrbitPoint */
    ECameraViewTypes_OrbitVehicle                = 0xa, /* OrbitVehicle */
    ECameraViewTypes_OrbitSCItemSeat             = 0xb, /* OrbitSCItemSeat */
    ECameraViewTypes_OrbitPassengerSCItemSeat    = 0xc, /* OrbitPassengerSCItemSeat */
    ECameraViewTypes_OrbitSpectatorFollow        = 0xd, /* OrbitSpectatorFollow */
    ECameraViewTypes_OrbitSpectatorFollowVehicle = 0xe, /* OrbitSpectatorFollowVehicle */
    ECameraViewTypes_ChaseVehicle                = 0xf, /* ChaseVehicle */
    ECameraViewTypes_ChaseSCItemSeat             = 0x10, /* ChaseSCItemSeat */
    ECameraViewTypes_ChasePlayerHead             = 0x11, /* ChasePlayerHead */
    ECameraViewTypes_SeatCockpit                 = 0x12, /* SeatCockpit */
    ECameraViewTypes_LookBehind                  = 0x13, /* LookBehind */
    ECameraViewTypes_LookVehicleItem             = 0x14, /* LookVehicleItem */
    ECameraViewTypes_FreeCam                     = 0x15, /* FreeCam */
    ECameraViewTypes_TimeCam                     = 0x16, /* TimeCam */
    ECameraViewTypes_FPSDeathCam                 = 0x17, /* FPSDeathCam */
    ECameraViewTypes_CinematicTwoShipsFrame      = 0x18, /* CinematicTwoShipsFrame */
    ECameraViewTypes_FirstPersonSpectator        = 0x19, /* FirstPersonSpectator */
    ECameraViewTypes_TrackviewControlled         = 0x1a, /* TrackviewControlled */
    ECameraViewTypes_RemoteTurret                = 0x1b, /* RemoteTurret */
    ECameraViewTypes_Docking                     = 0x1c, /* Docking */
    ECameraViewTypes_FirstPersonBase             = 0x1d, /* FirstPersonBase */
    ECameraViewTypes_KillerDeathCam              = 0x1e, /* KillerDeathCam */
    ECameraViewTypes_PlayerInventory             = 0x1f, /* PlayerInventory */
    ECameraViewTypes_UNDEFINED                   = 0x20, /* UNDEFINED */
};

// Original name: ECarryableDefaultInteractions
enum ECarryableDefaultInteractions {
    ECarryableDefaultInteractions_Carry            = 0x0, /* Carry */
    ECarryableDefaultInteractions_Place            = 0x1, /* Place */
    ECarryableDefaultInteractions_Drop             = 0x2, /* Drop */
    ECarryableDefaultInteractions_EquipToItemport  = 0x3, /* EquipToItemport */
    ECarryableDefaultInteractions_Store            = 0x4, /* Store */
    ECarryableDefaultInteractions_HoldReady        = 0x5, /* HoldReady */
    ECarryableDefaultInteractions_EquipWearable    = 0x6, /* EquipWearable */
    ECarryableDefaultInteractions_Inspect          = 0x7, /* Inspect */
    ECarryableDefaultInteractions_Flip             = 0x8, /* Flip */
    ECarryableDefaultInteractions_SwapAttachments  = 0x9, /* SwapAttachments */
    ECarryableDefaultInteractions_AttachToHeldItem = 0xa, /* AttachToHeldItem */
    ECarryableDefaultInteractions_UNDEFINED        = 0xb, /* UNDEFINED */
};

// Original name: ECarryableSequenceActions
enum ECarryableSequenceActions {
    ECarryableSequenceActions_Undefined    = 0x0, /* Undefined */
    ECarryableSequenceActions_BespokeTake  = 0x1, /* BespokeTake */
    ECarryableSequenceActions_BespokePlace = 0x2, /* BespokePlace */
    ECarryableSequenceActions_UNDEFINED    = 0x3, /* UNDEFINED */
};

// Original name: ECarryableState
enum ECarryableState {
    ECarryableState_eCS_Dropped               = 0x0, /* eCS_Dropped */
    ECarryableState_eCS_Carried               = 0x1, /* eCS_Carried */
    ECarryableState_eCS_Settled               = 0x2, /* eCS_Settled */
    ECarryableState_eCS_CarriedAndEquipped    = 0x3, /* eCS_CarriedAndEquipped */
    ECarryableState_eCS_Stowed                = 0x4, /* eCS_Stowed */
    ECarryableState_eCS_Offered               = 0x5, /* eCS_Offered */
    ECarryableState_eCS_CarriedAndInspected   = 0x6, /* eCS_CarriedAndInspected */
    ECarryableState_eCS_EquippedWorn          = 0x7, /* eCS_EquippedWorn */
    ECarryableState_eCS_Stored                = 0x8, /* eCS_Stored */
    ECarryableState_eCS_HangingOnOutfitHanger = 0x9, /* eCS_HangingOnOutfitHanger */
    ECarryableState_UNDEFINED                 = 0xa, /* UNDEFINED */
};

// Original name: ECharacterCustomizerDNARegion
enum ECharacterCustomizerDNARegion {
    ECharacterCustomizerDNARegion_LeftBrow   = 0x0, /* LeftBrow */
    ECharacterCustomizerDNARegion_RightBrow  = 0x1, /* RightBrow */
    ECharacterCustomizerDNARegion_LeftEye    = 0x2, /* LeftEye */
    ECharacterCustomizerDNARegion_RightEye   = 0x3, /* RightEye */
    ECharacterCustomizerDNARegion_Nose       = 0x4, /* Nose */
    ECharacterCustomizerDNARegion_LeftEar    = 0x5, /* LeftEar */
    ECharacterCustomizerDNARegion_RightEar   = 0x6, /* RightEar */
    ECharacterCustomizerDNARegion_LeftCheek  = 0x7, /* LeftCheek */
    ECharacterCustomizerDNARegion_RightCheek = 0x8, /* RightCheek */
    ECharacterCustomizerDNARegion_Mouth      = 0x9, /* Mouth */
    ECharacterCustomizerDNARegion_Jawline    = 0xa, /* Jawline */
    ECharacterCustomizerDNARegion_Neckhead   = 0xb, /* Neckhead */
    ECharacterCustomizerDNARegion_AllRegions = 0xc, /* AllRegions */
    ECharacterCustomizerDNARegion_Invalid    = 0xd, /* Invalid */
    ECharacterCustomizerDNARegion_UNDEFINED  = 0xe, /* UNDEFINED */
};

// Original name: ECharacterCustomizerFeature
enum ECharacterCustomizerFeature {
    ECharacterCustomizerFeature_Skin       = 0x0, /* Skin */
    ECharacterCustomizerFeature_Complexion = 0x1, /* Complexion */
    ECharacterCustomizerFeature_Hair       = 0x2, /* Hair */
    ECharacterCustomizerFeature_FacialHair = 0x3, /* FacialHair */
    ECharacterCustomizerFeature_Eyebrows   = 0x4, /* Eyebrows */
    ECharacterCustomizerFeature_HairDye    = 0x5, /* HairDye */
    ECharacterCustomizerFeature_Eyes       = 0x6, /* Eyes */
    ECharacterCustomizerFeature_Makeup     = 0x7, /* Makeup */
    ECharacterCustomizerFeature_Tattoos    = 0x8, /* Tattoos */
    ECharacterCustomizerFeature_BodySkin   = 0x9, /* BodySkin */
    ECharacterCustomizerFeature_Invalid    = 0xa, /* Invalid */
    ECharacterCustomizerFeature_UNDEFINED  = 0xb, /* UNDEFINED */
};

// Original name: ECharacterCustomizerItemSelectMode
enum ECharacterCustomizerItemSelectMode {
    ECharacterCustomizerItemSelectMode_HeadSelection = 0x0, /* HeadSelection */
    ECharacterCustomizerItemSelectMode_BindingsValue = 0x1, /* BindingsValue */
    ECharacterCustomizerItemSelectMode_Toggle        = 0x2, /* Toggle */
    ECharacterCustomizerItemSelectMode_UNDEFINED     = 0x3, /* UNDEFINED */
};

// Original name: ECharacterCustomizerTextureSelectSlot
enum ECharacterCustomizerTextureSelectSlot {
    ECharacterCustomizerTextureSelectSlot_MakeupSlot1 = 0x0, /* MakeupSlot1 */
    ECharacterCustomizerTextureSelectSlot_MakeupSlot2 = 0x1, /* MakeupSlot2 */
    ECharacterCustomizerTextureSelectSlot_MakeupSlot3 = 0x2, /* MakeupSlot3 */
    ECharacterCustomizerTextureSelectSlot_TattooSlot1 = 0x3, /* TattooSlot1 */
    ECharacterCustomizerTextureSelectSlot_UNDEFINED   = 0x4, /* UNDEFINED */
};

// Original name: EChargeDrainMode
enum EChargeDrainMode {
    EChargeDrainMode_Charge = 0x0, /* Charge */
    EChargeDrainMode_Drain  = 0x1, /* Drain */
};

// Original name: EChatEmoteType
enum EChatEmoteType {
    EChatEmoteType_Social       = 0x0, /* Social */
    EChatEmoteType_CombatSignal = 0x1, /* CombatSignal */
};

// Original name: ECommsNotificationTiming
enum ECommsNotificationTiming {
    ECommsNotificationTiming_Simultaneous           = 0x0, /* Simultaneous */
    ECommsNotificationTiming_HUDNotificationFirst   = 0x1, /* HUDNotificationFirst */
    ECommsNotificationTiming_CommsNotificationFirst = 0x2, /* CommsNotificationFirst */
    ECommsNotificationTiming_UNDEFINED              = 0x3, /* UNDEFINED */
};

// Original name: ECommsRTTLocation
enum ECommsRTTLocation {
    ECommsRTTLocation_None       = 0x0, /* None */
    ECommsRTTLocation_Visor      = 0x1, /* Visor */
    ECommsRTTLocation_Mobiglas   = 0x2, /* Mobiglas */
    ECommsRTTLocation_VehicleMFD = 0x3, /* VehicleMFD */
    ECommsRTTLocation_Hologram   = 0x4, /* Hologram */
    ECommsRTTLocation_Tannoy     = 0x5, /* Tannoy */
    ECommsRTTLocation_UNDEFINED  = 0x6, /* UNDEFINED */
};

// Original name: EComparisonMode
enum EComparisonMode {
    EComparisonMode_Equal          = 0x0, /* Equal */
    EComparisonMode_Greater        = 0x1, /* Greater */
    EComparisonMode_Less           = 0x2, /* Less */
    EComparisonMode_GreaterOrEqual = 0x3, /* GreaterOrEqual */
    EComparisonMode_LessOrEqual    = 0x4, /* LessOrEqual */
};

// Original name: EConsumableResourceType
enum EConsumableResourceType {
    EConsumableResourceType_None      = 0x0, /* None */
    EConsumableResourceType_Fuel      = 0x1, /* Fuel */
    EConsumableResourceType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EControlledSubstanceClass
enum EControlledSubstanceClass {
    EControlledSubstanceClass_ClassA    = 0x0, /* ClassA */
    EControlledSubstanceClass_ClassB    = 0x1, /* ClassB */
    EControlledSubstanceClass_ClassC    = 0x2, /* ClassC */
    EControlledSubstanceClass_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EConversationHubLinkType
enum EConversationHubLinkType {
    EConversationHubLinkType_First           = 0x0, /* First */
    EConversationHubLinkType_Random          = 0x1, /* Random */
    EConversationHubLinkType_RandomCanRepeat = 0x2, /* RandomCanRepeat */
};

// Original name: ECustomSettingType
enum ECustomSettingType {
    ECustomSettingType_TimeLimit                = 0x1, /* TimeLimit */
    ECustomSettingType_ScoreLimit               = 0x2, /* ScoreLimit */
    ECustomSettingType_EnableMatchCycling       = 0x4, /* EnableMatchCycling */
    ECustomSettingType_RandomizeMapOnMatchCycle = 0x8, /* RandomizeMapOnMatchCycle */
    ECustomSettingType_EnableTeamSwitching      = 0x10, /* EnableTeamSwitching */
    ECustomSettingType_EnableTeamBalancing      = 0x20, /* EnableTeamBalancing */
    ECustomSettingType_PlayerLimit              = 0x40, /* PlayerLimit */
};

// Original name: EDFMVictoryScoringType
enum EDFMVictoryScoringType {
    EDFMVictoryScoringType_Kills        = 0x0, /* Kills */
    EDFMVictoryScoringType_Score        = 0x1, /* Score */
    EDFMVictoryScoringType_Deaths       = 0x2, /* Deaths */
    EDFMVictoryScoringType_GunGameLevel = 0x3, /* GunGameLevel */
};

// Original name: EDNAEditType
enum EDNAEditType {
    EDNAEditType_None      = 0x0, /* None */
    EDNAEditType_Blending  = 0x1, /* Blending */
    EDNAEditType_Sculpting = 0x2, /* Sculpting */
    EDNAEditType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EDefaultActionsEntityType
enum EDefaultActionsEntityType {
    EDefaultActionsEntityType_MountedGun    = 0x0, /* MountedGun */
    EDefaultActionsEntityType_ActorMovable  = 0x1, /* ActorMovable */
    EDefaultActionsEntityType_DraggableBody = 0x2, /* DraggableBody */
    EDefaultActionsEntityType_UNDEFINED     = 0x3, /* UNDEFINED */
};

// Original name: EDefaultColliderBehaviour
enum EDefaultColliderBehaviour {
    EDefaultColliderBehaviour_Pushable    = 0x0, /* Pushable */
    EDefaultColliderBehaviour_NonPushable = 0x1, /* NonPushable */
    EDefaultColliderBehaviour_Kinematic   = 0x2, /* Kinematic */
    EDefaultColliderBehaviour_UNDEFINED   = 0x3, /* UNDEFINED */
};

// Original name: EDefaultEntitlement
enum EDefaultEntitlement {
    EDefaultEntitlement_Offline        = 0x0, /* Offline */
    EDefaultEntitlement_AllModes       = 0x1, /* AllModes */
    EDefaultEntitlement_StarMarine     = 0x2, /* StarMarine */
    EDefaultEntitlement_ArenaCommander = 0x3, /* ArenaCommander */
};

// Original name: EDeformerType
enum EDeformerType {
    EDeformerType_Standard             = 0x0, /* Standard */
    EDeformerType_OriginalSkin         = 0x1, /* OriginalSkin */
    EDeformerType_Protos               = 0x2, /* Protos */
    EDeformerType_ProtosMisc           = 0x3, /* ProtosMisc */
    EDeformerType_WD_Elastic           = 0x4, /* WD_Elastic */
    EDeformerType_WD_BShapeExclusion   = 0x5, /* WD_BShapeExclusion */
    EDeformerType_WD_NUScaling         = 0x6, /* WD_NUScaling */
    EDeformerType_WD_ElasticNUScaling  = 0x7, /* WD_ElasticNUScaling */
    EDeformerType_WD_ElasticDQSkinning = 0x8, /* WD_ElasticDQSkinning */
    EDeformerType_Cloth                = 0x9, /* Cloth */
    EDeformerType_LinearSkinning       = 0xa, /* LinearSkinning */
    EDeformerType_UNDEFINED            = 0xb, /* UNDEFINED */
};

// Original name: EDelayUnit
enum EDelayUnit {
    EDelayUnit_Seconds = 0x0, /* Seconds */
    EDelayUnit_RPM     = 0x1, /* RPM */
};

// Original name: EDelinkMode
enum EDelinkMode {
    EDelinkMode_NoDelink  = 0x0, /* NoDelink */
    EDelinkMode_Normal    = 0x1, /* Normal */
    EDelinkMode_Quick     = 0x2, /* Quick */
    EDelinkMode_Forced    = 0x3, /* Forced */
    EDelinkMode_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EDeltaSignaturePriority
enum EDeltaSignaturePriority {
    EDeltaSignaturePriority_None      = 0x0, /* None */
    EDeltaSignaturePriority_Auxiliary = 0x1, /* Auxiliary */
    EDeltaSignaturePriority_Primary   = 0x2, /* Primary */
};

// Original name: EDifficultyRange_GameKnowledge
enum EDifficultyRange_GameKnowledge {
    EDifficultyRange_GameKnowledge_Noob_gaming_or_tutorial_1                       = 0x0, /* Noob_gaming_or_tutorial_1 */
    EDifficultyRange_GameKnowledge_FPS_mechanics_walk_shoot_mobiGlass_2            = 0x1, /* FPS_mechanics_walk_shoot_mobiGlass_2 */
    EDifficultyRange_GameKnowledge_Flight_mechanics_fly_dock_quantum_3             = 0x2, /* Flight_mechanics_fly_dock_quantum_3 */
    EDifficultyRange_GameKnowledge_Standard_understanding_FPS_flight_professions_4 = 0x3, /* Standard_understanding_FPS_flight_professions_4 */
    EDifficultyRange_GameKnowledge_Expert_understanding_FPS_flight_professions_5   = 0x4, /* Expert_understanding_FPS_flight_professions_5 */
    EDifficultyRange_GameKnowledge_Pro_understanding_of_optimal_tactics_6          = 0x5, /* Pro_understanding_of_optimal_tactics_6 */
    EDifficultyRange_GameKnowledge_Basically_a_Dev_7                               = 0x6, /* Basically_a_Dev_7 */
    EDifficultyRange_GameKnowledge_No_content_like_this_yet_8                      = 0x7, /* No_content_like_this_yet_8 */
    EDifficultyRange_GameKnowledge_UNDEFINED                                       = 0x8, /* UNDEFINED */
};

// Original name: EDifficultyRange_MechanicalSkill
enum EDifficultyRange_MechanicalSkill {
    EDifficultyRange_MechanicalSkill_Hands_free_gaming_1                     = 0x0, /* Hands_free_gaming_1 */
    EDifficultyRange_MechanicalSkill_Zero_risk_of_action_2                   = 0x1, /* Zero_risk_of_action_2 */
    EDifficultyRange_MechanicalSkill_Easy_PvE_only_action_3                  = 0x2, /* Easy_PvE_only_action_3 */
    EDifficultyRange_MechanicalSkill_Normal_PvE_only_action_4                = 0x3, /* Normal_PvE_only_action_4 */
    EDifficultyRange_MechanicalSkill_Hard_PvE_or_Easy_PvP_action_5           = 0x4, /* Hard_PvE_or_Easy_PvP_action_5 */
    EDifficultyRange_MechanicalSkill_Multiplayer_PvE_or_Expert_PvP_action_6  = 0x5, /* Multiplayer_PvE_or_Expert_PvP_action_6 */
    EDifficultyRange_MechanicalSkill_PvE_PvP_large_group_action_eg_warzone_7 = 0x6, /* PvE_PvP_large_group_action_eg_warzone_7 */
    EDifficultyRange_MechanicalSkill_No_content_like_this_yet_8              = 0x7, /* No_content_like_this_yet_8 */
    EDifficultyRange_MechanicalSkill_UNDEFINED                               = 0x8, /* UNDEFINED */
};

// Original name: EDifficultyRange_MentalLoad
enum EDifficultyRange_MentalLoad {
    EDifficultyRange_MentalLoad_AFK_gaming_1                        = 0x0, /* AFK_gaming_1 */
    EDifficultyRange_MentalLoad_Requires_minimal_thought_2          = 0x1, /* Requires_minimal_thought_2 */
    EDifficultyRange_MentalLoad_Routine_light_work_3                = 0x2, /* Routine_light_work_3 */
    EDifficultyRange_MentalLoad_Moments_of_concentration_required_4 = 0x3, /* Moments_of_concentration_required_4 */
    EDifficultyRange_MentalLoad_Like_spinning_10_plates_at_once_5   = 0x4, /* Like_spinning_10_plates_at_once_5 */
    EDifficultyRange_MentalLoad_Extremely_hard_to_manage_alone_6    = 0x5, /* Extremely_hard_to_manage_alone_6 */
    EDifficultyRange_MentalLoad_Insane_complexity_NOT_soloable_7    = 0x6, /* Insane_complexity_NOT_soloable_7 */
    EDifficultyRange_MentalLoad_No_content_like_this_yet_8          = 0x7, /* No_content_like_this_yet_8 */
    EDifficultyRange_MentalLoad_UNDEFINED                           = 0x8, /* UNDEFINED */
};

// Original name: EDifficultyRange_RiskOfLoss
enum EDifficultyRange_RiskOfLoss {
    EDifficultyRange_RiskOfLoss_Safe_and_sound_zzzz_1                     = 0x0, /* Safe_and_sound_zzzz_1 */
    EDifficultyRange_RiskOfLoss_Barely_even_breaking_a_sweat_2            = 0x1, /* Barely_even_breaking_a_sweat_2 */
    EDifficultyRange_RiskOfLoss_Minimal_danger_FPS_NOT_ship_action_3      = 0x2, /* Minimal_danger_FPS_NOT_ship_action_3 */
    EDifficultyRange_RiskOfLoss_Ship_could_get_damaged_Could_lose_cargo_4 = 0x3, /* Ship_could_get_damaged_Could_lose_cargo_4 */
    EDifficultyRange_RiskOfLoss_Player_might_die_Ship_could_explode_5     = 0x4, /* Player_might_die_Ship_could_explode_5 */
    EDifficultyRange_RiskOfLoss_Player_likely_to_die_Ship_too_6           = 0x5, /* Player_likely_to_die_Ship_too_6 */
    EDifficultyRange_RiskOfLoss_Without_help_Player_and_Ship_die_7        = 0x6, /* Without_help_Player_and_Ship_die_7 */
    EDifficultyRange_RiskOfLoss_No_content_like_this_yet_8                = 0x7, /* No_content_like_this_yet_8 */
    EDifficultyRange_RiskOfLoss_UNDEFINED                                 = 0x8, /* UNDEFINED */
};

// Original name: EDockingTubeAnimationStage
enum EDockingTubeAnimationStage {
    EDockingTubeAnimationStage_NotSet    = 0x0, /* NotSet */
    EDockingTubeAnimationStage_Inactive  = 0x1, /* Inactive */
    EDockingTubeAnimationStage_PreDocked = 0x2, /* PreDocked */
    EDockingTubeAnimationStage_Docked    = 0x3, /* Docked */
    EDockingTubeAnimationStage_Count     = 0x4, /* Count */
};

// Original name: EDoorCollisionReactionDirection
enum EDoorCollisionReactionDirection {
    EDoorCollisionReactionDirection_All       = 0x0, /* All */
    EDoorCollisionReactionDirection_Up        = 0x1, /* Up */
    EDoorCollisionReactionDirection_Down      = 0x2, /* Down */
    EDoorCollisionReactionDirection_Left      = 0x3, /* Left */
    EDoorCollisionReactionDirection_Right     = 0x4, /* Right */
    EDoorCollisionReactionDirection_Front     = 0x5, /* Front */
    EDoorCollisionReactionDirection_Back      = 0x6, /* Back */
    EDoorCollisionReactionDirection_UNDEFINED = 0x7, /* UNDEFINED */
};

// Original name: EDoorDestructionBehavior
enum EDoorDestructionBehavior {
    EDoorDestructionBehavior_UnlockDoor = 0x0, /* UnlockDoor */
    EDoorDestructionBehavior_BreakDoor  = 0x1, /* BreakDoor */
    EDoorDestructionBehavior_UNDEFINED  = 0x2, /* UNDEFINED */
};

// Original name: EDoorPoweredState
enum EDoorPoweredState {
    EDoorPoweredState_Powered   = 0x0, /* Powered */
    EDoorPoweredState_Unpowered = 0x1, /* Unpowered */
};

// Original name: EEAActionItemMessageType
enum EEAActionItemMessageType {
    EEAActionItemMessageType_Default                          = 0x0, /* Default */
    EEAActionItemMessageType_WaitingForPlayers                = 0x1, /* WaitingForPlayers */
    EEAActionItemMessageType_BalancingTeams                   = 0x2, /* BalancingTeams */
    EEAActionItemMessageType_MatchStarting                    = 0x3, /* MatchStarting */
    EEAActionItemMessageType_MatchEnding                      = 0x4, /* MatchEnding */
    EEAActionItemMessageType_Contested                        = 0x5, /* Contested */
    EEAActionItemMessageType_OutOfPosition                    = 0x6, /* OutOfPosition */
    EEAActionItemMessageType_PressKeyToSkip                   = 0x7, /* PressKeyToSkip */
    EEAActionItemMessageType_Retry                            = 0x8, /* Retry */
    EEAActionItemMessageType_Respawning                       = 0x9, /* Respawning */
    EEAActionItemMessageType_RespawnPrompt                    = 0xa, /* RespawnPrompt */
    EEAActionItemMessageType_RespawnTimer                     = 0xb, /* RespawnTimer */
    EEAActionItemMessageType_Award                            = 0xc, /* Award */
    EEAActionItemMessageType_ReadyWaitingOnKeyPress           = 0xd, /* ReadyWaitingOnKeyPress */
    EEAActionItemMessageType_ReadyWaitingOnKeyPressForceReady = 0xe, /* ReadyWaitingOnKeyPressForceReady */
    EEAActionItemMessageType_ReadyWaitingForOtherPlayers      = 0xf, /* ReadyWaitingForOtherPlayers */
    EEAActionItemMessageType_WaitingForPlayersWithDebugSkip   = 0x10, /* WaitingForPlayersWithDebugSkip */
};

// Original name: EEACapturableEntityType
enum EEACapturableEntityType {
    EEACapturableEntityType_Terminal    = 0x0, /* Terminal */
    EEACapturableEntityType_Prop        = 0x1, /* Prop */
    EEACapturableEntityType_LockedSpawn = 0x2, /* LockedSpawn */
};

// Original name: EEAMessageTriggerFrequency
enum EEAMessageTriggerFrequency {
    EEAMessageTriggerFrequency_Always           = 0x0, /* Always */
    EEAMessageTriggerFrequency_OncePerLife      = 0x1, /* OncePerLife */
    EEAMessageTriggerFrequency_OncePerRound     = 0x2, /* OncePerRound */
    EEAMessageTriggerFrequency_ActiveWhenInside = 0x3, /* ActiveWhenInside */
};

// Original name: EEAObjectiveState
enum EEAObjectiveState {
    EEAObjectiveState_Default           = 0x0, /* Default */
    EEAObjectiveState_Capturing         = 0x1, /* Capturing */
    EEAObjectiveState_MultipleCapturing = 0x2, /* MultipleCapturing */
    EEAObjectiveState_Contesting        = 0x3, /* Contesting */
    EEAObjectiveState_ReturningToOwner  = 0x4, /* ReturningToOwner */
    EEAObjectiveState_Cooldown          = 0x5, /* Cooldown */
};

// Original name: EEAPlayableAreaOnExit
enum EEAPlayableAreaOnExit {
    EEAPlayableAreaOnExit_None             = 0x0, /* None */
    EEAPlayableAreaOnExit_Autopilot        = 0x1, /* Autopilot */
    EEAPlayableAreaOnExit_DamagePerSecond  = 0x2, /* DamagePerSecond */
    EEAPlayableAreaOnExit_Kill             = 0x3, /* Kill */
    EEAPlayableAreaOnExit_Disable          = 0x4, /* Disable */
    EEAPlayableAreaOnExit_Redout           = 0x5, /* Redout */
    EEAPlayableAreaOnExit_SimulationGlitch = 0x6, /* SimulationGlitch */
};

// Original name: EEASpawnMulticrewType
enum EEASpawnMulticrewType {
    EEASpawnMulticrewType_Public    = 0x1, /* Public */
    EEASpawnMulticrewType_SquadOnly = 0x2, /* SquadOnly */
};

// Original name: EEndCondition
enum EEndCondition {
    EEndCondition_None                 = 0x0, /* None */
    EEndCondition_AllUsed              = 0x1, /* AllUsed */
    EEndCondition_NumberOfUsablesToUse = 0x2, /* NumberOfUsablesToUse */
    EEndCondition_AllUsed_WithSync     = 0x3, /* AllUsed_WithSync */
    EEndCondition_UNDEFINED            = 0x4, /* UNDEFINED */
};

// Original name: EEnemyType
enum EEnemyType {
    EEnemyType_ET_Invalid   = 0x0, /* ET_Invalid */
    EEnemyType_ET_Boss      = 0x1, /* ET_Boss */
    EEnemyType_ET_Butterfly = 0x2, /* ET_Butterfly */
    EEnemyType_ET_Bee       = 0x3, /* ET_Bee */
    EEnemyType_ET_Tonbo     = 0x4, /* ET_Tonbo */
    EEnemyType_ET_Momiji    = 0x5, /* ET_Momiji */
    EEnemyType_ET_Sasori    = 0x6, /* ET_Sasori */
    EEnemyType_ET_Midori    = 0x7, /* ET_Midori */
    EEnemyType_ET_Galboss   = 0x8, /* ET_Galboss */
    EEnemyType_UNDEFINED    = 0x9, /* UNDEFINED */
};

// Original name: EEntityComponentCommsChannelJoinType
enum EEntityComponentCommsChannelJoinType {
    EEntityComponentCommsChannelJoinType_AutoJoin = 0x0, /* AutoJoin */
    EEntityComponentCommsChannelJoinType_Invite   = 0x1, /* Invite */
};

// Original name: EEntityMarkerType
enum EEntityMarkerType {
    EEntityMarkerType_None         = 0x0, /* None */
    EEntityMarkerType_LandingZone  = 0x1, /* LandingZone */
    EEntityMarkerType_MedPen       = 0x2, /* MedPen */
    EEntityMarkerType_AmmoCrate    = 0x3, /* AmmoCrate */
    EEntityMarkerType_GrenadeCrate = 0x4, /* GrenadeCrate */
    EEntityMarkerType_UNDEFINED    = 0x5, /* UNDEFINED */
};

// Original name: EEntryFlagCondition
enum EEntryFlagCondition {
    EEntryFlagCondition_Tracked               = 0x0, /* Tracked */
    EEntryFlagCondition_Locked                = 0x1, /* Locked */
    EEntryFlagCondition_Pinned                = 0x2, /* Pinned */
    EEntryFlagCondition_DetectedByActiveRadar = 0x3, /* DetectedByActiveRadar */
    EEntryFlagCondition_Tagged                = 0x4, /* Tagged */
    EEntryFlagCondition_BoxoutActive          = 0x5, /* BoxoutActive */
    EEntryFlagCondition_IsObjective           = 0x6, /* IsObjective */
    EEntryFlagCondition_IsPartyMember         = 0x7, /* IsPartyMember */
    EEntryFlagCondition_UNDEFINED             = 0x8, /* UNDEFINED */
};

// Original name: EEventTriggerMask
enum EEventTriggerMask {
    EEventTriggerMask_AIAndPlayer = 0x0, /* AIAndPlayer */
    EEventTriggerMask_OnlyAI      = 0x1, /* OnlyAI */
    EEventTriggerMask_OnlyPlayer  = 0x2, /* OnlyPlayer */
    EEventTriggerMask_UNDEFINED   = 0x3, /* UNDEFINED */
};

// Original name: EExcludeSpawnGender
enum EExcludeSpawnGender {
    EExcludeSpawnGender_Male      = 0x0, /* Male */
    EExcludeSpawnGender_Female    = 0x1, /* Female */
    EExcludeSpawnGender_None      = 0x2, /* None */
    EExcludeSpawnGender_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EFaceType
enum EFaceType {
    EFaceType_Bubble    = 0x0, /* Bubble */
    EFaceType_FrontBack = 0x1, /* FrontBack */
    EFaceType_Quadrant  = 0x2, /* Quadrant */
    EFaceType_Box       = 0x3, /* Box */
    EFaceType_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EFacialAnim
enum EFacialAnim {
    EFacialAnim_Neutral    = 0x0, /* Neutral */
    EFacialAnim_Happy      = 0x1, /* Happy */
    EFacialAnim_Sad        = 0x2, /* Sad */
    EFacialAnim_Angry      = 0x3, /* Angry */
    EFacialAnim_Intense    = 0x4, /* Intense */
    EFacialAnim_Interested = 0x5, /* Interested */
};

// Original name: EFiringRangePenaltyType
enum EFiringRangePenaltyType {
    EFiringRangePenaltyType_EnemyReachedPlayer = 0x0, /* EnemyReachedPlayer */
    EFiringRangePenaltyType_Friendlyfire       = 0x1, /* Friendlyfire */
    EFiringRangePenaltyType_HeadShot           = 0x2, /* HeadShot */
    EFiringRangePenaltyType_UNDEFINED          = 0x3, /* UNDEFINED */
};

// Original name: EFirstSelectMode
enum EFirstSelectMode {
    EFirstSelectMode_None      = 0x0, /* None */
    EFirstSelectMode_Once      = 0x1, /* Once */
    EFirstSelectMode_Always    = 0x2, /* Always */
    EFirstSelectMode_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EFrontendGameModeButton
enum EFrontendGameModeButton {
    EFrontendGameModeButton_PU = 0x0, /* PU */
    EFrontendGameModeButton_EA = 0x1, /* EA */
};

// Original name: EGameCollisionClass
enum EGameCollisionClass {
    EGameCollisionClass_Actor_Capsule          = 0x400, /* Actor_Capsule */
    EGameCollisionClass_Actor_Body             = 0x800, /* Actor_Body */
    EGameCollisionClass_Actor_PlayerControlled = 0x1000, /* Actor_PlayerControlled */
    EGameCollisionClass_Actor_AIControlled     = 0x2000, /* Actor_AIControlled */
    EGameCollisionClass_Vehicle                = 0x4000, /* Vehicle */
    EGameCollisionClass_Vehicle_Interior       = 0x8000, /* Vehicle_Interior */
    EGameCollisionClass_Ragdoll                = 0x10000, /* Ragdoll */
    EGameCollisionClass_Projectile             = 0x40000, /* Projectile */
    EGameCollisionClass_Missile                = 0x80000, /* Missile */
    EGameCollisionClass_Debris                 = 0x800000, /* Debris */
};

// Original name: EGameDifficulty
enum EGameDifficulty {
    EGameDifficulty_None      = 0x0, /* None */
    EGameDifficulty_Easy      = 0x1, /* Easy */
    EGameDifficulty_Normal    = 0x2, /* Normal */
    EGameDifficulty_Hard      = 0x3, /* Hard */
    EGameDifficulty_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EGameModeFilters
enum EGameModeFilters {
    EGameModeFilters_Released       = 0x1, /* Released */
    EGameModeFilters_Flight         = 0x2, /* Flight */
    EGameModeFilters_GroundVehicles = 0x4, /* GroundVehicles */
    EGameModeFilters_FPS            = 0x8, /* FPS */
    EGameModeFilters_COOP           = 0x10, /* COOP */
    EGameModeFilters_PvP            = 0x20, /* PvP */
    EGameModeFilters_PvE            = 0x40, /* PvE */
    EGameModeFilters_Racing         = 0x80, /* Racing */
    EGameModeFilters_Experimental   = 0x100, /* Experimental */
    EGameModeFilters_MultiCrew      = 0x200, /* MultiCrew */
};

// Original name: EGameModeId
enum EGameModeId {
    EGameModeId_S42_Default            = -0x4, /* S42_Default */
    EGameModeId_SC_Frontend            = -0x3, /* SC_Frontend */
    EGameModeId_SC_Default             = -0x2, /* SC_Default */
    EGameModeId_INVALID                = -0x1, /* INVALID */
    EGameModeId_EA_BattleRoyale        = 0x0, /* EA_BattleRoyale */
    EGameModeId_EA_FreeFlight          = 0x1, /* EA_FreeFlight */
    EGameModeId_EA_PirateSwarm         = 0x2, /* EA_PirateSwarm */
    EGameModeId_EA_SquadronBattle      = 0x3, /* EA_SquadronBattle */
    EGameModeId_EA_VanduulSwarm        = 0x4, /* EA_VanduulSwarm */
    EGameModeId_EA_ClassicRace         = 0x5, /* EA_ClassicRace */
    EGameModeId_EA_Elimination         = 0x6, /* EA_Elimination */
    EGameModeId_EA_TeamElimination     = 0x7, /* EA_TeamElimination */
    EGameModeId_EA_Control             = 0x8, /* EA_Control */
    EGameModeId_EA_TheatersOfWar       = 0x9, /* EA_TheatersOfWar */
    EGameModeId_EA_IterativeTesting    = 0xa, /* EA_IterativeTesting */
    EGameModeId_EA_Duel                = 0xb, /* EA_Duel */
    EGameModeId_EA_FPSGunGame          = 0xc, /* EA_FPSGunGame */
    EGameModeId_EA_Horde               = 0xd, /* EA_Horde */
    EGameModeId_EA_VanduulInvasion     = 0xe, /* EA_VanduulInvasion */
    EGameModeId_EA_ExperimentalMode_1  = 0xf, /* EA_ExperimentalMode_1 */
    EGameModeId_EA_ExperimentalMode_2  = 0x10, /* EA_ExperimentalMode_2 */
    EGameModeId_EA_ExperimentalMode_3  = 0x11, /* EA_ExperimentalMode_3 */
    EGameModeId_EA_ExperimentalMode_4  = 0x12, /* EA_ExperimentalMode_4 */
    EGameModeId_EA_ExperimentalMode_5  = 0x13, /* EA_ExperimentalMode_5 */
    EGameModeId_EA_ExperimentalMode_6  = 0x14, /* EA_ExperimentalMode_6 */
    EGameModeId_EA_ExperimentalMode_7  = 0x15, /* EA_ExperimentalMode_7 */
    EGameModeId_EA_ExperimentalMode_8  = 0x16, /* EA_ExperimentalMode_8 */
    EGameModeId_EA_ExperimentalMode_9  = 0x17, /* EA_ExperimentalMode_9 */
    EGameModeId_EA_ExperimentalMode_10 = 0x18, /* EA_ExperimentalMode_10 */
    EGameModeId_EA_ExperimentalMode_11 = 0x19, /* EA_ExperimentalMode_11 */
    EGameModeId_EA_ExperimentalMode_12 = 0x1a, /* EA_ExperimentalMode_12 */
    EGameModeId_EA_GravRace            = 0x1b, /* EA_GravRace */
};

// Original name: EGameModePlayedId
enum EGameModePlayedId {
    EGameModePlayedId_None                           = 0x1, /* None */
    EGameModePlayedId_EA_Played_GunGame              = 0x2, /* EA_Played_GunGame */
    EGameModePlayedId_EA_Played_TankRoyale           = 0x4, /* EA_Played_TankRoyale */
    EGameModePlayedId_EA_Played_TeamTank             = 0x8, /* EA_Played_TeamTank */
    EGameModePlayedId_EA_Played_SingleWeapon         = 0x10, /* EA_Played_SingleWeapon */
    EGameModePlayedId_EA_Played_MirrorMatch          = 0x20, /* EA_Played_MirrorMatch */
    EGameModePlayedId_EA_Played_MM_Vanduul           = 0x40, /* EA_Played_MM_Vanduul */
    EGameModePlayedId_EA_Played_MM_Dogfight          = 0x80, /* EA_Played_MM_Dogfight */
    EGameModePlayedId_EA_Played_MM_ClassicRace       = 0x100, /* EA_Played_MM_ClassicRace */
    EGameModePlayedId_EA_Played_KillConfirmedFPS     = 0x200, /* EA_Played_KillConfirmedFPS */
    EGameModePlayedId_EA_Played_KillConfirmedVehicle = 0x400, /* EA_Played_KillConfirmedVehicle */
    EGameModePlayedId_EA_Played_Wingman              = 0x800, /* EA_Played_Wingman */
    EGameModePlayedId_EA_Played_TeamElimination      = 0x1000, /* EA_Played_TeamElimination */
    EGameModePlayedId_EA_Played_GravRace             = 0x2000, /* EA_Played_GravRace */
    EGameModePlayedId_EA_Played_GravRoyale           = 0x4000, /* EA_Played_GravRoyale */
    EGameModePlayedId_EA_Played_RN_SquadronBattle    = 0x8000, /* EA_Played_RN_SquadronBattle */
    EGameModePlayedId_EA_Played_RN_Duel              = 0x10000, /* EA_Played_RN_Duel */
};

// Original name: EGameRulesEventType
enum EGameRulesEventType {
    EGameRulesEventType_PlayerKill                         = 0x0, /* PlayerKill */
    EGameRulesEventType_PlayerKillAssist                   = 0x1, /* PlayerKillAssist */
    EGameRulesEventType_PlayerKillAssistTeam1              = 0x2, /* PlayerKillAssistTeam1 */
    EGameRulesEventType_PlayerKillAssistTeam2              = 0x3, /* PlayerKillAssistTeam2 */
    EGameRulesEventType_PlayerBledOut                      = 0x4, /* PlayerBledOut */
    EGameRulesEventType_PlayerTeamKill                     = 0x5, /* PlayerTeamKill */
    EGameRulesEventType_Accident                           = 0x6, /* Accident */
    EGameRulesEventType_Suicide                            = 0x7, /* Suicide */
    EGameRulesEventType_Tagged_PlayerKillAssist            = 0x8, /* Tagged_PlayerKillAssist */
    EGameRulesEventType_PlayerBleeding                     = 0x9, /* PlayerBleeding */
    EGameRulesEventType_DistortionDamage                   = 0xa, /* DistortionDamage */
    EGameRulesEventType_DistortionDisabledShip             = 0xb, /* DistortionDisabledShip */
    EGameRulesEventType_DamageShip                         = 0xc, /* DamageShip */
    EGameRulesEventType_DamageTeamShip                     = 0xd, /* DamageTeamShip */
    EGameRulesEventType_DestroyedShip                      = 0xe, /* DestroyedShip */
    EGameRulesEventType_DestroyedTeamShip                  = 0xf, /* DestroyedTeamShip */
    EGameRulesEventType_DestroyedShipEjected               = 0x10, /* DestroyedShipEjected */
    EGameRulesEventType_PlayerKillEjected                  = 0x11, /* PlayerKillEjected */
    EGameRulesEventType_CompletedLap                       = 0x12, /* CompletedLap */
    EGameRulesEventType_Award_UnaidedKill                  = 0x13, /* Award_UnaidedKill */
    EGameRulesEventType_Award_Untouchable                  = 0x14, /* Award_Untouchable */
    EGameRulesEventType_Award_Ace                          = 0x15, /* Award_Ace */
    EGameRulesEventType_Award_AceBonus                     = 0x16, /* Award_AceBonus */
    EGameRulesEventType_Award_AceKill                      = 0x17, /* Award_AceKill */
    EGameRulesEventType_Award_AceKillBonus                 = 0x18, /* Award_AceKillBonus */
    EGameRulesEventType_Award_KillingSpree                 = 0x19, /* Award_KillingSpree */
    EGameRulesEventType_Award_KillingSpreeBonus            = 0x1a, /* Award_KillingSpreeBonus */
    EGameRulesEventType_Award_KillingSpreeKill             = 0x1b, /* Award_KillingSpreeKill */
    EGameRulesEventType_Award_KillingSpreeKillBonus        = 0x1c, /* Award_KillingSpreeKillBonus */
    EGameRulesEventType_Award_NemesisKill                  = 0x1d, /* Award_NemesisKill */
    EGameRulesEventType_Award_RedemptionKill               = 0x1e, /* Award_RedemptionKill */
    EGameRulesEventType_Award_ResurgentKill                = 0x1f, /* Award_ResurgentKill */
    EGameRulesEventType_Award_ResurgentKillBonus           = 0x20, /* Award_ResurgentKillBonus */
    EGameRulesEventType_Award_RevengeKill                  = 0x21, /* Award_RevengeKill */
    EGameRulesEventType_Award_FirstBlood                   = 0x22, /* Award_FirstBlood */
    EGameRulesEventType_Award_KillAssist                   = 0x23, /* Award_KillAssist */
    EGameRulesEventType_Award_KillAssistCrew               = 0x24, /* Award_KillAssistCrew */
    EGameRulesEventType_Award_Savior                       = 0x25, /* Award_Savior */
    EGameRulesEventType_Award_SquadronRevengeKill          = 0x26, /* Award_SquadronRevengeKill */
    EGameRulesEventType_Award_UnderdogKill                 = 0x27, /* Award_UnderdogKill */
    EGameRulesEventType_Award_CrashRoberts                 = 0x28, /* Award_CrashRoberts */
    EGameRulesEventType_Award_CheapShot                    = 0x29, /* Award_CheapShot */
    EGameRulesEventType_Award_ForcedEject                  = 0x2a, /* Award_ForcedEject */
    EGameRulesEventType_Award_ForcedError                  = 0x2b, /* Award_ForcedError */
    EGameRulesEventType_Award_Goodnight                    = 0x2c, /* Award_Goodnight */
    EGameRulesEventType_Award_LightsOut                    = 0x2d, /* Award_LightsOut */
    EGameRulesEventType_Award_MartyrKill                   = 0x2e, /* Award_MartyrKill */
    EGameRulesEventType_Award_ControlTerminalCaptured      = 0x2f, /* Award_ControlTerminalCaptured */
    EGameRulesEventType_Award_ControlTerminalDefended      = 0x30, /* Award_ControlTerminalDefended */
    EGameRulesEventType_Award_ControlTerminalCaptureAssist = 0x31, /* Award_ControlTerminalCaptureAssist */
    EGameRulesEventType_Award_ControlTerminalHackerKilled  = 0x32, /* Award_ControlTerminalHackerKilled */
    EGameRulesEventType_Award_ControlTerminalDomination    = 0x33, /* Award_ControlTerminalDomination */
    EGameRulesEventType_Award_CaptureAreaCaptureBegin      = 0x34, /* Award_CaptureAreaCaptureBegin */
    EGameRulesEventType_Award_CaptureAreaCaptureComplete   = 0x35, /* Award_CaptureAreaCaptureComplete */
    EGameRulesEventType_Award_CaptureAreaContesting        = 0x36, /* Award_CaptureAreaContesting */
    EGameRulesEventType_Award_CaptureAreaNeutralized       = 0x37, /* Award_CaptureAreaNeutralized */
    EGameRulesEventType_Award_CaptureAreaCapturing         = 0x38, /* Award_CaptureAreaCapturing */
    EGameRulesEventType_Award_CaptureCloseCallKill         = 0x39, /* Award_CaptureCloseCallKill */
    EGameRulesEventType_Award_CaptureReversing             = 0x3a, /* Award_CaptureReversing */
    EGameRulesEventType_Award_DefenderKill                 = 0x3b, /* Award_DefenderKill */
    EGameRulesEventType_Award_AttackerKill                 = 0x3c, /* Award_AttackerKill */
    EGameRulesEventType_Award_Hemorrhage                   = 0x3d, /* Award_Hemorrhage */
    EGameRulesEventType_Award_Headshot                     = 0x3e, /* Award_Headshot */
    EGameRulesEventType_Award_MeleeKill                    = 0x3f, /* Award_MeleeKill */
    EGameRulesEventType_Award_TakeDown                     = 0x40, /* Award_TakeDown */
    EGameRulesEventType_DamageItem                         = 0x41, /* DamageItem */
    EGameRulesEventType_DamageTeamItem                     = 0x42, /* DamageTeamItem */
    EGameRulesEventType_Award_TerminalTick                 = 0x43, /* Award_TerminalTick */
    EGameRulesEventType_Award_PhaseWon                     = 0x44, /* Award_PhaseWon */
    EGameRulesEventType_Award_MatchDefeat                  = 0x45, /* Award_MatchDefeat */
    EGameRulesEventType_Award_MatchVictory                 = 0x46, /* Award_MatchVictory */
    EGameRulesEventType_Award_SecondPlace                  = 0x47, /* Award_SecondPlace */
    EGameRulesEventType_Award_ThirdPlace                   = 0x48, /* Award_ThirdPlace */
    EGameRulesEventType_Award_DestroyPhaseObjective        = 0x49, /* Award_DestroyPhaseObjective */
    EGameRulesEventType_Award_DamagePhaseObjective         = 0x4a, /* Award_DamagePhaseObjective */
    EGameRulesEventType_Award_DamageSentToObjective        = 0x4b, /* Award_DamageSentToObjective */
    EGameRulesEventType_Award_KillCollected                = 0x4d, /* Award_KillCollected */
    EGameRulesEventType_Award_KillDenied                   = 0x4e, /* Award_KillDenied */
};

// Original name: EGasCloudOverrideVolumeType
enum EGasCloudOverrideVolumeType {
    EGasCloudOverrideVolumeType_Sphere    = 0x0, /* Sphere */
    EGasCloudOverrideVolumeType_Cube      = 0x1, /* Cube */
    EGasCloudOverrideVolumeType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EGeometrySlots
enum EGeometrySlots {
    EGeometrySlots_Main         = 0x0, /* Main */
    EGeometrySlots_LegacyHelper = 0x1, /* LegacyHelper */
    EGeometrySlots_DebrisPieces = 0x2, /* DebrisPieces */
    EGeometrySlots_UNDEFINED    = 0x3, /* UNDEFINED */
};

// Original name: EGeometryVisAreaMode
enum EGeometryVisAreaMode {
    EGeometryVisAreaMode_AABB_Center     = 0x0, /* AABB_Center */
    EGeometryVisAreaMode_Pivot           = 0x1, /* Pivot */
    EGeometryVisAreaMode_Ignore_VisAreas = 0x2, /* Ignore_VisAreas */
    EGeometryVisAreaMode_UNDEFINED       = 0x3, /* UNDEFINED */
};

// Original name: EGestureAnim
enum EGestureAnim {
    EGestureAnim_NodHead   = 0x0, /* NodHead */
    EGestureAnim_ShakeHead = 0x1, /* ShakeHead */
};

// Original name: EGripUser
enum EGripUser {
    EGripUser_AI     = 0x0, /* AI */
    EGripUser_Player = 0x1, /* Player */
    EGripUser_All    = 0x2, /* All */
};

// Original name: EHUDNotificationType
enum EHUDNotificationType {
    EHUDNotificationType_Default     = 0x0, /* Default */
    EHUDNotificationType_Group       = 0x1, /* Group */
    EHUDNotificationType_Party       = 0x2, /* Party */
    EHUDNotificationType_Beacon      = 0x3, /* Beacon */
    EHUDNotificationType_Tutorial    = 0x4, /* Tutorial */
    EHUDNotificationType_ProgressBar = 0x5, /* ProgressBar */
    EHUDNotificationType_UNDEFINED   = 0x6, /* UNDEFINED */
};

// Original name: EHackingCodeCommandParamType
enum EHackingCodeCommandParamType {
    EHackingCodeCommandParamType_Int        = 0x0, /* Int */
    EHackingCodeCommandParamType_Char       = 0x1, /* Char */
    EHackingCodeCommandParamType_Float      = 0x2, /* Float */
    EHackingCodeCommandParamType_Coordinate = 0x3, /* Coordinate */
    EHackingCodeCommandParamType_UNDEFINED  = 0x4, /* UNDEFINED */
};

// Original name: EHackingErrorType
enum EHackingErrorType {
    EHackingErrorType_Ok                                           = 0x0, /* Ok */
    EHackingErrorType_AbilityIsChargingUp                          = 0x1, /* AbilityIsChargingUp */
    EHackingErrorType_AbilityIsActive                              = 0x2, /* AbilityIsActive */
    EHackingErrorType_AbilityIsCoolingDown                         = 0x3, /* AbilityIsCoolingDown */
    EHackingErrorType_AbilityInjectNoOverlappedPoint               = 0x4, /* AbilityInjectNoOverlappedPoint */
    EHackingErrorType_AbilityInjectPointAlreadyActive              = 0x5, /* AbilityInjectPointAlreadyActive */
    EHackingErrorType_AbilityInjectPointAlreadyInactive            = 0x6, /* AbilityInjectPointAlreadyInactive */
    EHackingErrorType_AbilitySwapSpareNodeUnavailable              = 0x7, /* AbilitySwapSpareNodeUnavailable */
    EHackingErrorType_AbilitySwapTargetNodeCantBeSwapped           = 0x8, /* AbilitySwapTargetNodeCantBeSwapped */
    EHackingErrorType_AbilitySwapTargetNodeIsUnrevealed            = 0x9, /* AbilitySwapTargetNodeIsUnrevealed */
    EHackingErrorType_AbilityWrapTeleportWhileMoving               = 0xa, /* AbilityWrapTeleportWhileMoving */
    EHackingErrorType_AbilityWrapAgentAlreadyTeleporting           = 0xb, /* AbilityWrapAgentAlreadyTeleporting */
    EHackingErrorType_AbilityWrapDestinationNodeIsUnrevealed       = 0xc, /* AbilityWrapDestinationNodeIsUnrevealed */
    EHackingErrorType_AbilityWrapNoTeleportationDirectionAvailable = 0xd, /* AbilityWrapNoTeleportationDirectionAvailable */
    EHackingErrorType_AbilityWrapInvalidDestination                = 0xe, /* AbilityWrapInvalidDestination */
    EHackingErrorType_AbilityWrapAmbiguousDestination              = 0xf, /* AbilityWrapAmbiguousDestination */
    EHackingErrorType_CodeInvalidCommandToken                      = 0x10, /* CodeInvalidCommandToken */
    EHackingErrorType_CodeTooManyArgs                              = 0x11, /* CodeTooManyArgs */
    EHackingErrorType_CodeTooLittleArgs                            = 0x12, /* CodeTooLittleArgs */
    EHackingErrorType_CodeInvalidArgType                           = 0x13, /* CodeInvalidArgType */
    EHackingErrorType_CodeInvalidArgFormat                         = 0x14, /* CodeInvalidArgFormat */
    EHackingErrorType_MovementCantMoveToUnrevealedNode             = 0x15, /* MovementCantMoveToUnrevealedNode */
    EHackingErrorType_SpawnInappropriateGameState                  = 0x16, /* SpawnInappropriateGameState */
    EHackingErrorType_SpawnInvalidNodeSelected                     = 0x17, /* SpawnInvalidNodeSelected */
    EHackingErrorType_UnknownError                                 = 0x18, /* UnknownError */
    EHackingErrorType_UNDEFINED                                    = 0x19, /* UNDEFINED */
};

// Original name: EHackingFlagOverrideType
enum EHackingFlagOverrideType {
    EHackingFlagOverrideType_UsePreset = 0x0, /* UsePreset */
    EHackingFlagOverrideType_False     = 0x1, /* False */
    EHackingFlagOverrideType_True      = 0x2, /* True */
    EHackingFlagOverrideType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EHackingParamsAbilityType
enum EHackingParamsAbilityType {
    EHackingParamsAbilityType_Invalid    = 0x0, /* Invalid */
    EHackingParamsAbilityType_NodeSwap   = 0x1, /* NodeSwap */
    EHackingParamsAbilityType_Ping       = 0x2, /* Ping */
    EHackingParamsAbilityType_Inject     = 0x3, /* Inject */
    EHackingParamsAbilityType_Slowdown   = 0x4, /* Slowdown */
    EHackingParamsAbilityType_WrapAround = 0x5, /* WrapAround */
    EHackingParamsAbilityType_Any        = 0x6, /* Any */
    EHackingParamsAbilityType_UNDEFINED  = 0x7, /* UNDEFINED */
};

// Original name: EHandMode
enum EHandMode {
    EHandMode_LeftHand  = 0x0, /* LeftHand */
    EHandMode_RightHand = 0x1, /* RightHand */
    EHandMode_Total     = 0x2, /* Total */
};

// Original name: EHandholdAttachOrientationSpace
enum EHandholdAttachOrientationSpace {
    EHandholdAttachOrientationSpace_ActorSpace    = 0x0, /* ActorSpace */
    EHandholdAttachOrientationSpace_HandholdSpace = 0x1, /* HandholdSpace */
    EHandholdAttachOrientationSpace_EntitySpace   = 0x2, /* EntitySpace */
    EHandholdAttachOrientationSpace_ZoneSpace     = 0x3, /* ZoneSpace */
    EHandholdAttachOrientationSpace_UNDEFINED     = 0x4, /* UNDEFINED */
};

// Original name: EHeadWearHair
enum EHeadWearHair {
    EHeadWearHair_any        = 0x0, /* any */
    EHeadWearHair_snoopy_cap = 0x1, /* snoopy_cap */
    EHeadWearHair_hatHair    = 0x2, /* hatHair */
    EHeadWearHair_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: EHealingMode
enum EHealingMode {
    EHealingMode_Target = 0x0, /* Target */
    EHealingMode_Self   = 0x1, /* Self */
};

// Original name: EHealingValueType
enum EHealingValueType {
    EHealingValueType_Health = 0x0, /* Health */
    EHealingValueType_Buff   = 0x1, /* Buff */
};

// Original name: EHelmetState
enum EHelmetState {
    EHelmetState_NONE    = 0x0, /* NONE */
    EHelmetState_Open    = 0x1, /* Open */
    EHelmetState_Opening = 0x2, /* Opening */
    EHelmetState_Closed  = 0x3, /* Closed */
    EHelmetState_Closing = 0x4, /* Closing */
};

// Original name: EHelmetStateMachine
enum EHelmetStateMachine {
    EHelmetStateMachine_Default   = 0x0, /* Default */
    EHelmetStateMachine_EVA       = 0x1, /* EVA */
    EHelmetStateMachine_Targeting = 0x2, /* Targeting */
};

// Original name: EHitmarkerPositionMethod
enum EHitmarkerPositionMethod {
    EHitmarkerPositionMethod_ScreenCenter              = 0x0, /* ScreenCenter */
    EHitmarkerPositionMethod_CrosshairPosition         = 0x1, /* CrosshairPosition */
    EHitmarkerPositionMethod_CrosshairPositionSnapshot = 0x2, /* CrosshairPositionSnapshot */
    EHitmarkerPositionMethod_HitpositionWorld          = 0x3, /* HitpositionWorld */
    EHitmarkerPositionMethod_HitpositionScreen         = 0x4, /* HitpositionScreen */
};

// Original name: EHoloFieldShape
enum EHoloFieldShape {
    EHoloFieldShape_HoloField_Mesh            = 0x0, /* HoloField_Mesh */
    EHoloFieldShape_HoloField_Sphere          = 0x1, /* HoloField_Sphere */
    EHoloFieldShape_HoloField_HardCodedSphere = 0x2, /* HoloField_HardCodedSphere */
    EHoloFieldShape_UNDEFINED                 = 0x3, /* UNDEFINED */
};

// Original name: EHolographicVolumeType
enum EHolographicVolumeType {
    EHolographicVolumeType_Sphere    = 0x0, /* Sphere */
    EHolographicVolumeType_Cube      = 0x1, /* Cube */
    EHolographicVolumeType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EHoverPowerStage
enum EHoverPowerStage {
    EHoverPowerStage_PoweredOff  = 0x0, /* PoweredOff */
    EHoverPowerStage_PoweringOff = 0x1, /* PoweringOff */
    EHoverPowerStage_PoweringOn  = 0x2, /* PoweringOn */
    EHoverPowerStage_PoweredOn   = 0x3, /* PoweredOn */
    EHoverPowerStage_UNDEFINED   = 0x4, /* UNDEFINED */
};

// Original name: EImpoundingTrigger
enum EImpoundingTrigger {
    EImpoundingTrigger_IllegalParking  = 0x0, /* IllegalParking */
    EImpoundingTrigger_PadRamming      = 0x1, /* PadRamming */
    EImpoundingTrigger_TrespassImpound = 0x2, /* TrespassImpound */
    EImpoundingTrigger_UNDEFINED       = 0x3, /* UNDEFINED */
};

// Original name: EInfractionTrigger
enum EInfractionTrigger {
    EInfractionTrigger_KillActor                  = 0x0, /* KillActor */
    EInfractionTrigger_ForcedIntoDowned           = 0x1, /* ForcedIntoDowned */
    EInfractionTrigger_DownedDirectDamage         = 0x2, /* DownedDirectDamage */
    EInfractionTrigger_Manslaughter               = 0x3, /* Manslaughter */
    EInfractionTrigger_DestroyVehicle             = 0x4, /* DestroyVehicle */
    EInfractionTrigger_DestroyEntity              = 0x5, /* DestroyEntity */
    EInfractionTrigger_IllegalParking             = 0x6, /* IllegalParking */
    EInfractionTrigger_Interdiction               = 0x7, /* Interdiction */
    EInfractionTrigger_FireWeapon                 = 0x8, /* FireWeapon */
    EInfractionTrigger_RamVehicle                 = 0x9, /* RamVehicle */
    EInfractionTrigger_RamActor                   = 0xa, /* RamActor */
    EInfractionTrigger_PadRamming                 = 0xb, /* PadRamming */
    EInfractionTrigger_AssaultActor               = 0xc, /* AssaultActor */
    EInfractionTrigger_AssaultLawEnforcement      = 0xd, /* AssaultLawEnforcement */
    EInfractionTrigger_DamageEntity               = 0xe, /* DamageEntity */
    EInfractionTrigger_GreenZonePropertyDamage    = 0xf, /* GreenZonePropertyDamage */
    EInfractionTrigger_KnockoutActor              = 0x10, /* KnockoutActor */
    EInfractionTrigger_MeleeActor                 = 0x11, /* MeleeActor */
    EInfractionTrigger_Arrest                     = 0x12, /* Arrest */
    EInfractionTrigger_PrisonEscape               = 0x13, /* PrisonEscape */
    EInfractionTrigger_PrisonSuicide              = 0x14, /* PrisonSuicide */
    EInfractionTrigger_KillPrisoner               = 0x15, /* KillPrisoner */
    EInfractionTrigger_Trespassing                = 0x16, /* Trespassing */
    EInfractionTrigger_State_Trespassing          = 0x17, /* State_Trespassing */
    EInfractionTrigger_State_Intruding            = 0x18, /* State_Intruding */
    EInfractionTrigger_State_WeaponDrawn          = 0x19, /* State_WeaponDrawn */
    EInfractionTrigger_State_HoldingIllegalItem   = 0x1a, /* State_HoldingIllegalItem */
    EInfractionTrigger_State_IllegalVehicleTowing = 0x1b, /* State_IllegalVehicleTowing */
    EInfractionTrigger_LowBDL                     = 0x1c, /* LowBDL */
    EInfractionTrigger_HighBDL                    = 0x1d, /* HighBDL */
    EInfractionTrigger_HighBDLUnconscious         = 0x1e, /* HighBDLUnconscious */
    EInfractionTrigger_RestrictedAreaTrespass     = 0x1f, /* RestrictedAreaTrespass */
    EInfractionTrigger_RemoveItemFromCargoGrid    = 0x20, /* RemoveItemFromCargoGrid */
    EInfractionTrigger_UNDEFINED                  = 0x21, /* UNDEFINED */
};

// Original name: EInputPromptBoundTo
enum EInputPromptBoundTo {
    EInputPromptBoundTo_ActorEyes                                = 0x0, /* ActorEyes */
    EInputPromptBoundTo_EntityRoot                               = 0x1, /* EntityRoot */
    EInputPromptBoundTo_TopBoundingBoxZSurface                   = 0x2, /* TopBoundingBoxZSurface */
    EInputPromptBoundTo_NearestBoundingBoxSurface                = 0x3, /* NearestBoundingBoxSurface */
    EInputPromptBoundTo_NearestBoundingBoxIgnoreFurthestSurfaces = 0x4, /* NearestBoundingBoxIgnoreFurthestSurfaces */
    EInputPromptBoundTo_InteractionPointFixedOffset              = 0x5, /* InteractionPointFixedOffset */
    EInputPromptBoundTo_Tmp_AngleConstraintForwardDirection      = 0x6, /* Tmp_AngleConstraintForwardDirection */
    EInputPromptBoundTo_UNDEFINED                                = 0x7, /* UNDEFINED */
};

// Original name: EInputPromptMode
enum EInputPromptMode {
    EInputPromptMode_SingleClick = 0x0, /* SingleClick */
    EInputPromptMode_MultiClick  = 0x1, /* MultiClick */
    EInputPromptMode_Hold        = 0x2, /* Hold */
    EInputPromptMode_UNDEFINED   = 0x3, /* UNDEFINED */
};

// Original name: EInteractionConditionTargetEntity
enum EInteractionConditionTargetEntity {
    EInteractionConditionTargetEntity_Interactor            = 0x0, /* Interactor */
    EInteractionConditionTargetEntity_Interactable          = 0x1, /* Interactable */
    EInteractionConditionTargetEntity_InteractableItemOwner = 0x2, /* InteractableItemOwner */
    EInteractionConditionTargetEntity_UNDEFINED             = 0x3, /* UNDEFINED */
};

// Original name: EInteractionTriggerType
enum EInteractionTriggerType {
    EInteractionTriggerType_Self          = 0x0, /* Self */
    EInteractionTriggerType_Root          = 0x1, /* Root */
    EInteractionTriggerType_Children      = 0x2, /* Children */
    EInteractionTriggerType_FullHierarchy = 0x3, /* FullHierarchy */
    EInteractionTriggerType_UNDEFINED     = 0x4, /* UNDEFINED */
};

// Original name: EItemActionEventType
enum EItemActionEventType {
    EItemActionEventType_PowerOn   = 0x0, /* PowerOn */
    EItemActionEventType_PowerOff  = 0x1, /* PowerOff */
    EItemActionEventType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EItemFunctionalityCondition
enum EItemFunctionalityCondition {
    EItemFunctionalityCondition_Damage      = 0x0, /* Damage */
    EItemFunctionalityCondition_Degradation = 0x1, /* Degradation */
    EItemFunctionalityCondition_Distortion  = 0x2, /* Distortion */
    EItemFunctionalityCondition_Heat        = 0x3, /* Heat */
    EItemFunctionalityCondition_UNDEFINED   = 0x4, /* UNDEFINED */
};

// Original name: EItemPortAttachImplType
enum EItemPortAttachImplType {
    EItemPortAttachImplType_Bone      = 0x0, /* Bone */
    EItemPortAttachImplType_Skin      = 0x1, /* Skin */
    EItemPortAttachImplType_Face      = 0x2, /* Face */
    EItemPortAttachImplType_Entity    = 0x3, /* Entity */
    EItemPortAttachImplType_StatObj   = 0x4, /* StatObj */
    EItemPortAttachImplType_Noattach  = 0x5, /* Noattach */
    EItemPortAttachImplType_Logical   = 0x6, /* Logical */
    EItemPortAttachImplType_UNDEFINED = 0x7, /* UNDEFINED */
};

// Original name: EItemPortAttachRotationLimitAxis
enum EItemPortAttachRotationLimitAxis {
    EItemPortAttachRotationLimitAxis_None      = 0x0, /* None */
    EItemPortAttachRotationLimitAxis_XAxis     = 0x1, /* XAxis */
    EItemPortAttachRotationLimitAxis_YAxis     = 0x2, /* YAxis */
    EItemPortAttachRotationLimitAxis_ZAxis     = 0x3, /* ZAxis */
    EItemPortAttachRotationLimitAxis_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EItemPortConnectionType
enum EItemPortConnectionType {
    EItemPortConnectionType_NoConnection       = 0x0, /* NoConnection */
    EItemPortConnectionType_DefaultConnection  = 0x1, /* DefaultConnection */
    EItemPortConnectionType_ExteriorConnection = 0x2, /* ExteriorConnection */
};

// Original name: EItemPortPhysicsGridBehavior
enum EItemPortPhysicsGridBehavior {
    EItemPortPhysicsGridBehavior_Interior  = 0x0, /* Interior */
    EItemPortPhysicsGridBehavior_Exterior  = 0x1, /* Exterior */
    EItemPortPhysicsGridBehavior_Both      = 0x2, /* Both */
    EItemPortPhysicsGridBehavior_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EItemShopAdjustmentMode
enum EItemShopAdjustmentMode {
    EItemShopAdjustmentMode_NoAdjustment = 0x0, /* NoAdjustment */
    EItemShopAdjustmentMode_Override     = 0x1, /* Override */
    EItemShopAdjustmentMode_Offset       = 0x2, /* Offset */
    EItemShopAdjustmentMode_Scale        = 0x3, /* Scale */
    EItemShopAdjustmentMode_UNDEFINED    = 0x4, /* UNDEFINED */
};

// Original name: EItemShopReference
enum EItemShopReference {
    EItemShopReference_Item             = 0x0, /* Item */
    EItemShopReference_Rack             = 0x1, /* Rack */
    EItemShopReference_InteractionPoint = 0x2, /* InteractionPoint */
    EItemShopReference_PlayerCamera     = 0x3, /* PlayerCamera */
    EItemShopReference_PlayerActor      = 0x4, /* PlayerActor */
    EItemShopReference_Pedestal         = 0x5, /* Pedestal */
    EItemShopReference_UNDEFINED        = 0x6, /* UNDEFINED */
};

// Original name: EItemStatType
enum EItemStatType {
    EItemStatType_Flight_IFCS_BoostSpeedBackward     = 0x0, /* Flight_IFCS_BoostSpeedBackward */
    EItemStatType_Flight_IFCS_BoostSpeedForward      = 0x1, /* Flight_IFCS_BoostSpeedForward */
    EItemStatType_Flight_IFCS_MaxSpeed               = 0x2, /* Flight_IFCS_MaxSpeed */
    EItemStatType_Flight_IFCS_ScmSpeed               = 0x3, /* Flight_IFCS_ScmSpeed */
    EItemStatType_Missile_ArmTime                    = 0x4, /* Missile_ArmTime */
    EItemStatType_Missile_LockRangeMax               = 0x5, /* Missile_LockRangeMax */
    EItemStatType_Missile_LockRangeMin               = 0x6, /* Missile_LockRangeMin */
    EItemStatType_Missile_LockTime                   = 0x7, /* Missile_LockTime */
    EItemStatType_Missile_TopSpeed                   = 0x8, /* Missile_TopSpeed */
    EItemStatType_Missile_TotalDamage                = 0x9, /* Missile_TotalDamage */
    EItemStatType_QDrive_Acceleration_Boost          = 0xa, /* QDrive_Acceleration_Boost */
    EItemStatType_QDrive_Acceleration_Linear         = 0xb, /* QDrive_Acceleration_Linear */
    EItemStatType_QDrive_Counteraction_Boost         = 0xc, /* QDrive_Counteraction_Boost */
    EItemStatType_QDrive_Counteraction_Linear        = 0xd, /* QDrive_Counteraction_Linear */
    EItemStatType_QDrive_IFCSHandoverDownTime_Boost  = 0xe, /* QDrive_IFCSHandoverDownTime_Boost */
    EItemStatType_QDrive_IFCSHandoverDownTime_Linear = 0xf, /* QDrive_IFCSHandoverDownTime_Linear */
    EItemStatType_QDrive_MaxSpeed_Boost              = 0x10, /* QDrive_MaxSpeed_Boost */
    EItemStatType_QDrive_MaxSpeed_Linear             = 0x11, /* QDrive_MaxSpeed_Linear */
    EItemStatType_Shield_ChargeToFull                = 0x12, /* Shield_ChargeToFull */
    EItemStatType_Shield_DamagedRegenDelay           = 0x13, /* Shield_DamagedRegenDelay */
    EItemStatType_Shield_Health                      = 0x14, /* Shield_Health */
    EItemStatType_Shield_Regen                       = 0x15, /* Shield_Regen */
    EItemStatType_Vehicle_Mass                       = 0x16, /* Vehicle_Mass */
    EItemStatType_Vehicle_SizeCount_Countermeasures  = 0x17, /* Vehicle_SizeCount_Countermeasures */
    EItemStatType_Vehicle_SizeCount_Ordnance         = 0x18, /* Vehicle_SizeCount_Ordnance */
    EItemStatType_Vehicle_SizeCount_Thrusters        = 0x19, /* Vehicle_SizeCount_Thrusters */
    EItemStatType_Vehicle_SizeCount_Weapon           = 0x1a, /* Vehicle_SizeCount_Weapon */
    EItemStatType_Weapon_AmmoCapacity                = 0x1b, /* Weapon_AmmoCapacity */
    EItemStatType_Weapon_FireRate                    = 0x1c, /* Weapon_FireRate */
    EItemStatType_Weapon_Velocity                    = 0x1d, /* Weapon_Velocity */
    EItemStatType_UNDEFINED                          = 0x1e, /* UNDEFINED */
};

// Original name: EItemSubType
enum EItemSubType {
    EItemSubType_unnamed                           = 0x0, /*  */
    EItemSubType_ADSComputer                       = 0x0, /* ADSComputer */
    EItemSubType_AirlockPart                       = 0x1, /* AirlockPart */
    EItemSubType_Ammo_1000mm                       = 0x2, /* Ammo_1000mm */
    EItemSubType_Ammo_20mm                         = 0x3, /* Ammo_20mm */
    EItemSubType_Ammo_24mm                         = 0x4, /* Ammo_24mm */
    EItemSubType_Ammo_25mm                         = 0x5, /* Ammo_25mm */
    EItemSubType_Ammo_28mm                         = 0x6, /* Ammo_28mm */
    EItemSubType_Ammo_30mm                         = 0x7, /* Ammo_30mm */
    EItemSubType_Ammo_35mm                         = 0x8, /* Ammo_35mm */
    EItemSubType_Ammo_40mm                         = 0x9, /* Ammo_40mm */
    EItemSubType_Ammo_50mm                         = 0xa, /* Ammo_50mm */
    EItemSubType_Ammo_60mm                         = 0xb, /* Ammo_60mm */
    EItemSubType_Ammo_Rail_60mm                    = 0xc, /* Ammo_Rail_60mm */
    EItemSubType_Ammo_Rail_80mm                    = 0xd, /* Ammo_Rail_80mm */
    EItemSubType_AmmoBox_Ballistic_120rd_106mm_exp = 0xe, /* AmmoBox_Ballistic_120rd_106mm_exp */
    EItemSubType_Armor                             = 0xf, /* Armor */
    EItemSubType_Autopilot                         = 0x10, /* Autopilot */
    EItemSubType_Awesome                           = 0x11, /* Awesome */
    EItemSubType_BallTurret                        = 0x12, /* BallTurret */
    EItemSubType_Bar                               = 0x13, /* Bar */
    EItemSubType_Barrel                            = 0x14, /* Barrel */
    EItemSubType_BombRack                          = 0x15, /* BombRack */
    EItemSubType_Bottle                            = 0x16, /* Bottle */
    EItemSubType_BottomAttachment                  = 0x17, /* BottomAttachment */
    EItemSubType_BottomTurret                      = 0x18, /* BottomTurret */
    EItemSubType_Box                               = 0x19, /* Box */
    EItemSubType_Can                               = 0x1a, /* Can */
    EItemSubType_CanardTurret                      = 0x1b, /* CanardTurret */
    EItemSubType_Cargo                             = 0x1c, /* Cargo */
    EItemSubType_Cockpit_Audio                     = 0x1d, /* Cockpit_Audio */
    EItemSubType_Constellation                     = 0x1e, /* Constellation */
    EItemSubType_Consumable                        = 0x1f, /* Consumable */
    EItemSubType_CountermeasureLauncher            = 0x20, /* CountermeasureLauncher */
    EItemSubType_CPU                               = 0x21, /* CPU */
    EItemSubType_Credit                            = 0x22, /* Credit */
    EItemSubType_Default                           = 0x23, /* Default */
    EItemSubType_delta                             = 0x24, /* delta */
    EItemSubType_DoorPart                          = 0x25, /* DoorPart */
    EItemSubType_External                          = 0x26, /* External */
    EItemSubType_EyeWare                           = 0x27, /* EyeWare */
    EItemSubType_Female                            = 0x28, /* Female */
    EItemSubType_Female_Kid                        = 0x29, /* Female_Kid */
    EItemSubType_FiringMechanism                   = 0x2a, /* FiringMechanism */
    EItemSubType_FixedThruster                     = 0x2b, /* FixedThruster */
    EItemSubType_Flair_Hanging                     = 0x2c, /* Flair_Hanging */
    EItemSubType_Flair_Wall_Picture                = 0x2d, /* Flair_Wall_Picture */
    EItemSubType_Flair_Wall_Interaction            = 0x2e, /* Flair_Wall_Interaction */
    EItemSubType_Flair_Static                      = 0x2f, /* Flair_Static */
    EItemSubType_Flair_Surface_Clutter             = 0x30, /* Flair_Surface_Clutter */
    EItemSubType_Flair_Surface_DisplayCase         = 0x31, /* Flair_Surface_DisplayCase */
    EItemSubType_Flair_Surface_HoloViewer          = 0x32, /* Flair_Surface_HoloViewer */
    EItemSubType_Flair_Floor_WallAligned           = 0x33, /* Flair_Floor_WallAligned */
    EItemSubType_Flashlight                        = 0x34, /* Flashlight */
    EItemSubType_FlexThruster                      = 0x35, /* FlexThruster */
    EItemSubType_Fluid                             = 0x36, /* Fluid */
    EItemSubType_Fuel                              = 0x37, /* Fuel */
    EItemSubType_Fuse                              = 0x38, /* Fuse */
    EItemSubType_Gadget                            = 0x39, /* Gadget */
    EItemSubType_ghostHornet                       = 0x3a, /* ghostHornet */
    EItemSubType_Glass                             = 0x3b, /* Glass */
    EItemSubType_Grapple                           = 0x3c, /* Grapple */
    EItemSubType_Grenade                           = 0x3d, /* Grenade */
    EItemSubType_Gun                               = 0x3e, /* Gun */
    EItemSubType_GunTurret                         = 0x3f, /* GunTurret */
    EItemSubType_Hacking                           = 0x40, /* Hacking */
    EItemSubType_Handheld                          = 0x41, /* Handheld */
    EItemSubType_Harvestable                       = 0x42, /* Harvestable */
    EItemSubType_Hat                               = 0x43, /* Hat */
    EItemSubType_Helmet                            = 0x44, /* Helmet */
    EItemSubType_Heavy                             = 0x45, /* Heavy */
    EItemSubType_Idris                             = 0x46, /* Idris */
    EItemSubType_Idris_Turret                      = 0x47, /* Idris_Turret */
    EItemSubType_Interior_Audio                    = 0x48, /* Interior_Audio */
    EItemSubType_Inventory_Container               = 0x49, /* Inventory_Container */
    EItemSubType_IronSight                         = 0x4a, /* IronSight */
    EItemSubType_JetPack                           = 0x4b, /* JetPack */
    EItemSubType_JointThruster                     = 0x4c, /* JointThruster */
    EItemSubType_JumpDrive                         = 0x4d, /* JumpDrive */
    EItemSubType_Junk                              = 0x4e, /* Junk */
    EItemSubType_Knife                             = 0x4f, /* Knife */
    EItemSubType_Kopion                            = 0x50, /* Kopion */
    EItemSubType_LandingSystem                     = 0x51, /* LandingSystem */
    EItemSubType_Large                             = 0x52, /* Large */
    EItemSubType_legs                              = 0x53, /* legs */
    EItemSubType_Light                             = 0x54, /* Light */
    EItemSubType_LightArmor                        = 0x55, /* LightArmor */
    EItemSubType_ln                                = 0x56, /* ln */
    EItemSubType_LongRangeRadar                    = 0x57, /* LongRangeRadar */
    EItemSubType_Magazine                          = 0x58, /* Magazine */
    EItemSubType_Male                              = 0x59, /* Male */
    EItemSubType_Male_Kid                          = 0x5a, /* Male_Kid */
    EItemSubType_MannedTurret                      = 0x5b, /* MannedTurret */
    EItemSubType_Marok                             = 0x5c, /* Marok */
    EItemSubType_Medical                           = 0x5d, /* Medical */
    EItemSubType_Medium                            = 0x5e, /* Medium */
    EItemSubType_MedPack                           = 0x5f, /* MedPack */
    EItemSubType_MeleeMedium                       = 0x60, /* MeleeMedium */
    EItemSubType_MidRangeRadar                     = 0x61, /* MidRangeRadar */
    EItemSubType_Mineable                          = 0x62, /* Mineable */
    EItemSubType_Missile                           = 0x63, /* Missile */
    EItemSubType_MissileRack                       = 0x64, /* MissileRack */
    EItemSubType_MissileTurret                     = 0x65, /* MissileTurret */
    EItemSubType_Mission                           = 0x66, /* Mission */
    EItemSubType_Motherboard                       = 0x67, /* Motherboard */
    EItemSubType_NoseMounted                       = 0x68, /* NoseMounted */
    EItemSubType_Oxygen                            = 0x69, /* Oxygen */
    EItemSubType_OxygenCap                         = 0x6a, /* OxygenCap */
    EItemSubType_PDCTurret                         = 0x6b, /* PDCTurret */
    EItemSubType_Personal                          = 0x6c, /* Personal */
    EItemSubType_Pilot                             = 0x6d, /* Pilot */
    EItemSubType_Plant                             = 0x6e, /* Plant */
    EItemSubType_Power                             = 0x6f, /* Power */
    EItemSubType_PowerArray                        = 0x70, /* PowerArray */
    EItemSubType_Power_Idris                       = 0x71, /* Power_Idris */
    EItemSubType_QDrive                            = 0x72, /* QDrive */
    EItemSubType_QuantumFuel                       = 0x73, /* QuantumFuel */
    EItemSubType_QuasiGrazer                       = 0x74, /* QuasiGrazer */
    EItemSubType_Radar                             = 0x75, /* Radar */
    EItemSubType_Retaliator                        = 0x76, /* Retaliator */
    EItemSubType_Retro                             = 0x77, /* Retro */
    EItemSubType_Rocket                            = 0x78, /* Rocket */
    EItemSubType_Sachet                            = 0x79, /* Sachet */
    EItemSubType_SalvageModifier_TractorBeam       = 0x7a, /* SalvageModifier_TractorBeam */
    EItemSubType_Scanner                           = 0x7b, /* Scanner */
    EItemSubType_ShortRangeRadar                   = 0x7c, /* ShortRangeRadar */
    EItemSubType_SignatureReductor                 = 0x7d, /* SignatureReductor */
    EItemSubType_SkinTest                          = 0x7e, /* SkinTest */
    EItemSubType_Small                             = 0x7f, /* Small */
    EItemSubType_SpaceMineRack                     = 0x80, /* SpaceMineRack */
    EItemSubType_Stormwal                          = 0x81, /* Stormwal */
    EItemSubType_superHornet                       = 0x82, /* superHornet */
    EItemSubType_SystemAccess                      = 0x83, /* SystemAccess */
    EItemSubType_TargetingComputer                 = 0x84, /* TargetingComputer */
    EItemSubType_ThrusterPack                      = 0x85, /* ThrusterPack */
    EItemSubType_Tin                               = 0x86, /* Tin */
    EItemSubType_TopTurret                         = 0x87, /* TopTurret */
    EItemSubType_Torpedo                           = 0x88, /* Torpedo */
    EItemSubType_Utility                           = 0x89, /* Utility */
    EItemSubType_Unmanned                          = 0x8a, /* Unmanned */
    EItemSubType_Vanduul                           = 0x8b, /* Vanduul */
    EItemSubType_Xian                              = 0x8c, /* Xian */
    EItemSubType_Valakkar                          = 0x8d, /* Valakkar */
    EItemSubType_VectorThruster                    = 0x8e, /* VectorThruster */
    EItemSubType_Vehicle_Boat                      = 0x8f, /* Vehicle_Boat */
    EItemSubType_Vehicle_GroundVehicle             = 0x90, /* Vehicle_GroundVehicle */
    EItemSubType_Vehicle_Spaceship                 = 0x91, /* Vehicle_Spaceship */
    EItemSubType_Ventilation                       = 0x92, /* Ventilation */
    EItemSubType_Weapon                            = 0x93, /* Weapon */
    EItemSubType_WeaponControl                     = 0x94, /* WeaponControl */
    EItemSubType_UNDEFINED                         = 0x95, /* UNDEFINED */
};

// Original name: EItemType
enum EItemType {
    EItemType_AIModule                      = 0x0, /* AIModule */
    EItemType_AirTrafficController          = 0x1, /* AirTrafficController */
    EItemType_AmmoBox                       = 0x2, /* AmmoBox */
    EItemType_AmmoCrate                     = 0x3, /* AmmoCrate */
    EItemType_Armor                         = 0x4, /* Armor */
    EItemType_Audio                         = 0x5, /* Audio */
    EItemType_Avionics                      = 0x6, /* Avionics */
    EItemType_AttachedPart                  = 0x7, /* AttachedPart */
    EItemType_Battery                       = 0x8, /* Battery */
    EItemType_BoatController                = 0x9, /* BoatController */
    EItemType_BodyArmor                     = 0xa, /* BodyArmor */
    EItemType_Bomb                          = 0xb, /* Bomb */
    EItemType_BombLauncher                  = 0xc, /* BombLauncher */
    EItemType_Bottle                        = 0xd, /* Bottle */
    EItemType_Button                        = 0xe, /* Button */
    EItemType_CapacitorAssignmentController = 0xf, /* CapacitorAssignmentController */
    EItemType_Cargo                         = 0x10, /* Cargo */
    EItemType_CargoGrid                     = 0x11, /* CargoGrid */
    EItemType_Char_Accessory_Eyes           = 0x12, /* Char_Accessory_Eyes */
    EItemType_Char_Accessory_Head           = 0x13, /* Char_Accessory_Head */
    EItemType_Char_Armor_Arms               = 0x14, /* Char_Armor_Arms */
    EItemType_Char_Armor_Feet               = 0x15, /* Char_Armor_Feet */
    EItemType_Char_Armor_Helmet             = 0x16, /* Char_Armor_Helmet */
    EItemType_Char_Armor_Legs               = 0x17, /* Char_Armor_Legs */
    EItemType_Char_Armor_Torso              = 0x18, /* Char_Armor_Torso */
    EItemType_Char_Armor_Undersuit          = 0x19, /* Char_Armor_Undersuit */
    EItemType_Char_Armor_Backpack           = 0x1a, /* Char_Armor_Backpack */
    EItemType_Char_Body                     = 0x1b, /* Char_Body */
    EItemType_Char_Clothing_Feet            = 0x1c, /* Char_Clothing_Feet */
    EItemType_Char_Clothing_Hands           = 0x1d, /* Char_Clothing_Hands */
    EItemType_Char_Clothing_Hat             = 0x1e, /* Char_Clothing_Hat */
    EItemType_Char_Clothing_Legs            = 0x1f, /* Char_Clothing_Legs */
    EItemType_Char_Clothing_Torso_0         = 0x20, /* Char_Clothing_Torso_0 */
    EItemType_Char_Clothing_Torso_1         = 0x21, /* Char_Clothing_Torso_1 */
    EItemType_Char_Clothing_Torso_2         = 0x22, /* Char_Clothing_Torso_2 */
    EItemType_Char_Clothing_Backpack        = 0x23, /* Char_Clothing_Backpack */
    EItemType_Char_Flair                    = 0x24, /* Char_Flair */
    EItemType_Char_Hair_Color               = 0x25, /* Char_Hair_Color */
    EItemType_Char_Head                     = 0x26, /* Char_Head */
    EItemType_Char_Head_Beard               = 0x27, /* Char_Head_Beard */
    EItemType_Char_Head_Eyebrow             = 0x28, /* Char_Head_Eyebrow */
    EItemType_Char_Head_Eyelash             = 0x29, /* Char_Head_Eyelash */
    EItemType_Char_Head_Eyes                = 0x2a, /* Char_Head_Eyes */
    EItemType_Char_Head_Hair                = 0x2b, /* Char_Head_Hair */
    EItemType_Char_Head_Stubble             = 0x2c, /* Char_Head_Stubble */
    EItemType_Char_Head_Piercings           = 0x2d, /* Char_Head_Piercings */
    EItemType_Char_Lens                     = 0x2e, /* Char_Lens */
    EItemType_Char_Skin_Color               = 0x2f, /* Char_Skin_Color */
    EItemType_Cloth                         = 0x30, /* Cloth */
    EItemType_CommsController               = 0x31, /* CommsController */
    EItemType_Container                     = 0x32, /* Container */
    EItemType_ControlPanel                  = 0x33, /* ControlPanel */
    EItemType_Cooler                        = 0x34, /* Cooler */
    EItemType_CoolerController              = 0x35, /* CoolerController */
    EItemType_Crafter                       = 0x36, /* Crafter */
    EItemType_Creature_Body                 = 0x37, /* Creature_Body */
    EItemType_Creature_Hair                 = 0x38, /* Creature_Hair */
    EItemType_Creature_Harvest              = 0x39, /* Creature_Harvest */
    EItemType_Debris                        = 0x3a, /* Debris */
    EItemType_Decal                         = 0x3b, /* Decal */
    EItemType_Display                       = 0x3c, /* Display */
    EItemType_DockingAnimator               = 0x3d, /* DockingAnimator */
    EItemType_DockingCollar                 = 0x3e, /* DockingCollar */
    EItemType_DockingController             = 0x3f, /* DockingController */
    EItemType_Door                          = 0x40, /* Door */
    EItemType_DoorController                = 0x41, /* DoorController */
    EItemType_Drink                         = 0x42, /* Drink */
    EItemType_Elevator                      = 0x43, /* Elevator */
    EItemType_EMP                           = 0x44, /* EMP */
    EItemType_EnergyController              = 0x45, /* EnergyController */
    EItemType_ExternalFuelTank              = 0x46, /* ExternalFuelTank */
    EItemType_Flair_Cockpit                 = 0x47, /* Flair_Cockpit */
    EItemType_Flair_Floor                   = 0x48, /* Flair_Floor */
    EItemType_Flair_Surface                 = 0x49, /* Flair_Surface */
    EItemType_Flair_Wall                    = 0x4a, /* Flair_Wall */
    EItemType_FlightController              = 0x4b, /* FlightController */
    EItemType_Food                          = 0x4c, /* Food */
    EItemType_FPS_AttachmentBarrel          = 0x4d, /* FPS_AttachmentBarrel */
    EItemType_FPS_AttachmentBottom          = 0x4e, /* FPS_AttachmentBottom */
    EItemType_FPS_AttachmentOptics          = 0x4f, /* FPS_AttachmentOptics */
    EItemType_FPS_Consumable                = 0x50, /* FPS_Consumable */
    EItemType_FPS_Cooler                    = 0x51, /* FPS_Cooler */
    EItemType_FPS_Deployable                = 0x52, /* FPS_Deployable */
    EItemType_FPS_Magazine                  = 0x53, /* FPS_Magazine */
    EItemType_FPS_PowerGen                  = 0x54, /* FPS_PowerGen */
    EItemType_FPS_Radar                     = 0x55, /* FPS_Radar */
    EItemType_FPS_Scanner                   = 0x56, /* FPS_Scanner */
    EItemType_FPS_Throwable                 = 0x57, /* FPS_Throwable */
    EItemType_FPS_WeaponMelee               = 0x58, /* FPS_WeaponMelee */
    EItemType_FPS_WeaponShouldered          = 0x59, /* FPS_WeaponShouldered */
    EItemType_FPS_WeaponSidearm             = 0x5a, /* FPS_WeaponSidearm */
    EItemType_FPS_WeaponStocked             = 0x5b, /* FPS_WeaponStocked */
    EItemType_FPS_WeaponUtility             = 0x5c, /* FPS_WeaponUtility */
    EItemType_FuelController                = 0x5d, /* FuelController */
    EItemType_FuelIntake                    = 0x5e, /* FuelIntake */
    EItemType_FuelNozzle                    = 0x5f, /* FuelNozzle */
    EItemType_FuelTank                      = 0x60, /* FuelTank */
    EItemType_Gadget                        = 0x61, /* Gadget */
    EItemType_GravityGenerator              = 0x62, /* GravityGenerator */
    EItemType_Grenade                       = 0x63, /* Grenade */
    EItemType_HangarExpansion               = 0x64, /* HangarExpansion */
    EItemType_HangarStock                   = 0x65, /* HangarStock */
    EItemType_Interior                      = 0x66, /* Interior */
    EItemType_InventoryContainer            = 0x67, /* InventoryContainer */
    EItemType_JumpDrive                     = 0x68, /* JumpDrive */
    EItemType_LandingSystem                 = 0x69, /* LandingSystem */
    EItemType_LandingGear                   = 0x6a, /* LandingGear */
    EItemType_LifeSupportGenerator          = 0x6b, /* LifeSupportGenerator */
    EItemType_LifeSupportTank               = 0x6c, /* LifeSupportTank */
    EItemType_LifeSupportVent               = 0x6d, /* LifeSupportVent */
    EItemType_Light                         = 0x6e, /* Light */
    EItemType_LightController               = 0x6f, /* LightController */
    EItemType_Lightgroup                    = 0x70, /* Lightgroup */
    EItemType_LiveSupport                   = 0x71, /* LiveSupport */
    EItemType_MaelstromPart                 = 0x72, /* MaelstromPart */
    EItemType_Magazine                      = 0x73, /* Magazine */
    EItemType_MainEngine                    = 0x74, /* MainEngine */
    EItemType_MainThruster                  = 0x75, /* MainThruster */
    EItemType_ManneuverThruster             = 0x76, /* ManneuverThruster */
    EItemType_MiningController              = 0x77, /* MiningController */
    EItemType_MiningModifier                = 0x78, /* MiningModifier */
    EItemType_Misc                          = 0x79, /* Misc */
    EItemType_Missile                       = 0x7a, /* Missile */
    EItemType_MissileController             = 0x7b, /* MissileController */
    EItemType_MissileLauncher               = 0x7c, /* MissileLauncher */
    EItemType_MobiGlas                      = 0x7d, /* MobiGlas */
    EItemType_Module                        = 0x7e, /* Module */
    EItemType_MultiLight                    = 0x7f, /* MultiLight */
    EItemType_NOITEM_Player                 = 0x80, /* NOITEM_Player */
    EItemType_NOITEM_Vehicle                = 0x81, /* NOITEM_Vehicle */
    EItemType_Paints                        = 0x82, /* Paints */
    EItemType_PersistentHab                 = 0x83, /* PersistentHab */
    EItemType_PersonalInnerThought          = 0x84, /* PersonalInnerThought */
    EItemType_Ping                          = 0x85, /* Ping */
    EItemType_Player                        = 0x86, /* Player */
    EItemType_PowerPlant                    = 0x87, /* PowerPlant */
    EItemType_QuantumDrive                  = 0x88, /* QuantumDrive */
    EItemType_QuantumInterdictionGenerator  = 0x89, /* QuantumInterdictionGenerator */
    EItemType_QuantumFuelTank               = 0x8a, /* QuantumFuelTank */
    EItemType_Radar                         = 0x8b, /* Radar */
    EItemType_Relay                         = 0x8c, /* Relay */
    EItemType_RemoteConnection              = 0x8d, /* RemoteConnection */
    EItemType_RemovableChip                 = 0x8e, /* RemovableChip */
    EItemType_RemovableBlade                = 0x8f, /* RemovableBlade */
    EItemType_Room                          = 0x90, /* Room */
    EItemType_SalvageController             = 0x91, /* SalvageController */
    EItemType_SalvageFieldEmitter           = 0x92, /* SalvageFieldEmitter */
    EItemType_SalvageFieldSupporter         = 0x93, /* SalvageFieldSupporter */
    EItemType_SalvageFillerStation          = 0x94, /* SalvageFillerStation */
    EItemType_SalvageHead                   = 0x95, /* SalvageHead */
    EItemType_SalvageInternalStorage        = 0x96, /* SalvageInternalStorage */
    EItemType_SalvageModifier               = 0x97, /* SalvageModifier */
    EItemType_Scanner                       = 0x98, /* Scanner */
    EItemType_Seat                          = 0x99, /* Seat */
    EItemType_SeatAccess                    = 0x9a, /* SeatAccess */
    EItemType_SeatDashboard                 = 0x9b, /* SeatDashboard */
    EItemType_SelfDestruct                  = 0x9c, /* SelfDestruct */
    EItemType_Sensor                        = 0x9d, /* Sensor */
    EItemType_Shield                        = 0x9e, /* Shield */
    EItemType_ShieldController              = 0x9f, /* ShieldController */
    EItemType_Ship                          = 0xa0, /* Ship */
    EItemType_ShopDisplay                   = 0xa1, /* ShopDisplay */
    EItemType_SpaceMine                     = 0xa2, /* SpaceMine */
    EItemType_SpaceMineLauncher             = 0xa3, /* SpaceMineLauncher */
    EItemType_StatusScreen                  = 0xa4, /* StatusScreen */
    EItemType_Suit                          = 0xa5, /* Suit */
    EItemType_TargetSelector                = 0xa6, /* TargetSelector */
    EItemType_ToolArm                       = 0xa7, /* ToolArm */
    EItemType_TowingBeam                    = 0xa8, /* TowingBeam */
    EItemType_TractorBeam                   = 0xa9, /* TractorBeam */
    EItemType_Transponder                   = 0xaa, /* Transponder */
    EItemType_Turret                        = 0xab, /* Turret */
    EItemType_TurretBase                    = 0xac, /* TurretBase */
    EItemType_Usable                        = 0xad, /* Usable */
    EItemType_UtilityTurret                 = 0xae, /* UtilityTurret */
    EItemType_Visor                         = 0xaf, /* Visor */
    EItemType_WeaponAttachment              = 0xb0, /* WeaponAttachment */
    EItemType_WeaponController              = 0xb1, /* WeaponController */
    EItemType_WeaponDefensive               = 0xb2, /* WeaponDefensive */
    EItemType_WeaponGun                     = 0xb3, /* WeaponGun */
    EItemType_WeaponMining                  = 0xb4, /* WeaponMining */
    EItemType_WeaponPersonal                = 0xb5, /* WeaponPersonal */
    EItemType_WeaponRegenPool               = 0xb6, /* WeaponRegenPool */
    EItemType_WheeledController             = 0xb7, /* WheeledController */
    EItemType_WeaponMount                   = 0xb8, /* WeaponMount */
    EItemType_UNDEFINED                     = 0xb9, /* UNDEFINED */
};

// Original name: ELandingAreaCanBeUsedBy
enum ELandingAreaCanBeUsedBy {
    ELandingAreaCanBeUsedBy_None      = 0x0, /* None */
    ELandingAreaCanBeUsedBy_AI        = 0x1, /* AI */
    ELandingAreaCanBeUsedBy_Player    = 0x2, /* Player */
    ELandingAreaCanBeUsedBy_All       = 0x3, /* All */
    ELandingAreaCanBeUsedBy_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: ELawLicenseType
enum ELawLicenseType {
    ELawLicenseType_IllegalGoodsLicense_ClassA     = 0x0, /* IllegalGoodsLicense_ClassA */
    ELawLicenseType_IllegalGoodsLicense_ClassB     = 0x1, /* IllegalGoodsLicense_ClassB */
    ELawLicenseType_IllegalGoodsLicense_ClassC     = 0x2, /* IllegalGoodsLicense_ClassC */
    ELawLicenseType_IllegalGoodsLicense_Prohibited = 0x3, /* IllegalGoodsLicense_Prohibited */
    ELawLicenseType_ArrestLicense                  = 0x4, /* ArrestLicense */
    ELawLicenseType_UNDEFINED                      = 0x5, /* UNDEFINED */
};

// Original name: ELicenseType
enum ELicenseType {
    ELicenseType_Gold                = 0x0, /* Gold */
    ELicenseType_Platinum            = 0x1, /* Platinum */
    ELicenseType_GameMasterEventItem = 0x2, /* GameMasterEventItem */
    ELicenseType_LootableEventItem   = 0x3, /* LootableEventItem */
    ELicenseType_UNDEFINED           = 0x4, /* UNDEFINED */
};

// Original name: ELightAffectsGI
enum ELightAffectsGI {
    ELightAffectsGI_On                    = 0x0, /* On */
    ELightAffectsGI_Off                   = 0x1, /* Off */
    ELightAffectsGI_InheritAffectsObjects = 0x2, /* InheritAffectsObjects */
    ELightAffectsGI_UNDEFINED             = 0x3, /* UNDEFINED */
};

// Original name: ELightEnabledWithGI
enum ELightEnabledWithGI {
    ELightEnabledWithGI_Always    = 0x0, /* Always */
    ELightEnabledWithGI_WithGI    = 0x1, /* WithGI */
    ELightEnabledWithGI_WithoutGI = 0x2, /* WithoutGI */
    ELightEnabledWithGI_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: ELightImportance
enum ELightImportance {
    ELightImportance_Decorative = 0x0, /* Decorative */
    ELightImportance_Standard   = 0x1, /* Standard */
    ELightImportance_Secondary  = 0x2, /* Secondary */
    ELightImportance_Key        = 0x3, /* Key */
    ELightImportance_Cinematic  = 0x4, /* Cinematic */
    ELightImportance_UNDEFINED  = 0x5, /* UNDEFINED */
};

// Original name: ELightState
enum ELightState {
    ELightState_Off       = 0x0, /* Off */
    ELightState_Default   = 0x1, /* Default */
    ELightState_Auxiliary = 0x2, /* Auxiliary */
    ELightState_Emergency = 0x3, /* Emergency */
    ELightState_Cinematic = 0x4, /* Cinematic */
    ELightState_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: ELightStateOverride
enum ELightStateOverride {
    ELightStateOverride_Off             = 0x0, /* Off */
    ELightStateOverride_Default         = 0x1, /* Default */
    ELightStateOverride_Auxiliary       = 0x2, /* Auxiliary */
    ELightStateOverride_Emergency       = 0x3, /* Emergency */
    ELightStateOverride_Cinematic       = 0x4, /* Cinematic */
    ELightStateOverride_DisableOverride = 0x5, /* DisableOverride */
};

// Original name: ELightType
enum ELightType {
    ELightType_Omni      = 0x0, /* Omni */
    ELightType_SoftOmni  = 0x1, /* SoftOmni */
    ELightType_Projector = 0x2, /* Projector */
    ELightType_Planar    = 0x3, /* Planar */
    ELightType_Ambient   = 0x4, /* Ambient */
    ELightType_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: ELinkMode
enum ELinkMode {
    ELinkMode_NoLink    = 0x0, /* NoLink */
    ELinkMode_FeetLink  = 0x1, /* FeetLink */
    ELinkMode_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: ELoadingScreenType
enum ELoadingScreenType {
    ELoadingScreenType_StarCitizen      = 0x0, /* StarCitizen */
    ELoadingScreenType_ElectronicAccess = 0x1, /* ElectronicAccess */
    ELoadingScreenType_Squadron42       = 0x2, /* Squadron42 */
    ELoadingScreenType_Frontend         = 0x3, /* Frontend */
    ELoadingScreenType_UNDEFINED        = 0x4, /* UNDEFINED */
};

// Original name: ELoadoutGroup
enum ELoadoutGroup {
    ELoadoutGroup_Body                  = 0x0, /* Body */
    ELoadoutGroup_SkinTone              = 0x1, /* SkinTone */
    ELoadoutGroup_Head                  = 0x2, /* Head */
    ELoadoutGroup_Brows                 = 0x3, /* Brows */
    ELoadoutGroup_Eyes                  = 0x4, /* Eyes */
    ELoadoutGroup_Hair                  = 0x5, /* Hair */
    ELoadoutGroup_HairColour            = 0x6, /* HairColour */
    ELoadoutGroup_FacialHair            = 0x7, /* FacialHair */
    ELoadoutGroup_FacialHairColour      = 0x8, /* FacialHairColour */
    ELoadoutGroup_FacialAttachments1    = 0x9, /* FacialAttachments1 */
    ELoadoutGroup_FacialAttachments2    = 0xa, /* FacialAttachments2 */
    ELoadoutGroup_Piercings1            = 0xb, /* Piercings1 */
    ELoadoutGroup_Piercings2            = 0xc, /* Piercings2 */
    ELoadoutGroup_Tattoos               = 0xd, /* Tattoos */
    ELoadoutGroup_TattooFace            = 0xe, /* TattooFace */
    ELoadoutGroup_TattooBody            = 0xf, /* TattooBody */
    ELoadoutGroup_Undersuit             = 0x10, /* Undersuit */
    ELoadoutGroup_Helmet                = 0x11, /* Helmet */
    ELoadoutGroup_Torso                 = 0x12, /* Torso */
    ELoadoutGroup_Torso2                = 0x13, /* Torso2 */
    ELoadoutGroup_Torso3                = 0x14, /* Torso3 */
    ELoadoutGroup_TorsoAttachments      = 0x15, /* TorsoAttachments */
    ELoadoutGroup_Outfit                = 0x16, /* Outfit */
    ELoadoutGroup_Outfit2               = 0x17, /* Outfit2 */
    ELoadoutGroup_Outfit3               = 0x18, /* Outfit3 */
    ELoadoutGroup_Outfit4               = 0x19, /* Outfit4 */
    ELoadoutGroup_Arm                   = 0x1a, /* Arm */
    ELoadoutGroup_Leg                   = 0x1b, /* Leg */
    ELoadoutGroup_Feet                  = 0x1c, /* Feet */
    ELoadoutGroup_PrimaryWeapon         = 0x1d, /* PrimaryWeapon */
    ELoadoutGroup_PrimaryOptics         = 0x1e, /* PrimaryOptics */
    ELoadoutGroup_UnderBarrelAttachment = 0x1f, /* UnderBarrelAttachment */
    ELoadoutGroup_BarrelAttachment      = 0x20, /* BarrelAttachment */
    ELoadoutGroup_PrimaryAttachments    = 0x21, /* PrimaryAttachments */
    ELoadoutGroup_SecondaryWeapon       = 0x22, /* SecondaryWeapon */
    ELoadoutGroup_SecondaryOptics       = 0x23, /* SecondaryOptics */
    ELoadoutGroup_SecondarAttachments   = 0x24, /* SecondarAttachments */
    ELoadoutGroup_MeleeWeapon           = 0x25, /* MeleeWeapon */
    ELoadoutGroup_Grenades              = 0x26, /* Grenades */
    ELoadoutGroup_MedicalSupplies       = 0x27, /* MedicalSupplies */
    ELoadoutGroup_Item                  = 0x28, /* Item */
    ELoadoutGroup_Mobiglas              = 0x29, /* Mobiglas */
    ELoadoutGroup_Utility1              = 0x2a, /* Utility1 */
    ELoadoutGroup_Utility2              = 0x2b, /* Utility2 */
    ELoadoutGroup_UNDEFINED             = 0x2c, /* UNDEFINED */
};

// Original name: ELocationTypeLevel
enum ELocationTypeLevel {
    ELocationTypeLevel_SolarSystem  = 0x0, /* SolarSystem */
    ELocationTypeLevel_Region       = 0x1, /* Region */
    ELocationTypeLevel_LocalSystem  = 0x2, /* LocalSystem */
    ELocationTypeLevel_PlanetOrMoon = 0x3, /* PlanetOrMoon */
    ELocationTypeLevel_POIOrCluster = 0x4, /* POIOrCluster */
    ELocationTypeLevel_UNDEFINED    = 0x5, /* UNDEFINED */
};

// Original name: ELootFullnessMode
enum ELootFullnessMode {
    ELootFullnessMode_stopAfterExceed = 0x0, /* stopAfterExceed */
    ELootFullnessMode_preventExceed   = 0x1, /* preventExceed */
};

// Original name: ELootPruningLevel
enum ELootPruningLevel {
    ELootPruningLevel_none           = 0x0, /* none */
    ELootPruningLevel_containerSize  = 0x1, /* containerSize */
    ELootPruningLevel_fullnessTarget = 0x2, /* fullnessTarget */
    ELootPruningLevel_dynamic        = 0x3, /* dynamic */
};

// Original name: ELootingDefaultInteractions
enum ELootingDefaultInteractions {
    ELootingDefaultInteractions_OpenInventoryUI = 0x0, /* OpenInventoryUI */
    ELootingDefaultInteractions_OpenLootingUI   = 0x1, /* OpenLootingUI */
    ELootingDefaultInteractions_UNDEFINED       = 0x2, /* UNDEFINED */
};

// Original name: EMapId
enum EMapId {
    EMapId_EA_AstorsClearing      = 0x0, /* EA_AstorsClearing */
    EMapId_EA_BloodshotRidge      = 0x1, /* EA_BloodshotRidge */
    EMapId_EA_BrokenMoon          = 0x2, /* EA_BrokenMoon */
    EMapId_EA_CaplanCircuit       = 0x3, /* EA_CaplanCircuit */
    EMapId_EA_ClioIslands         = 0x4, /* EA_ClioIslands */
    EMapId_EA_Crossroads          = 0x5, /* EA_Crossroads */
    EMapId_EA_CryAstro_DC3412     = 0x6, /* EA_CryAstro_DC3412 */
    EMapId_EA_Daymar              = 0x7, /* EA_Daymar */
    EMapId_EA_DaymarDunes         = 0x8, /* EA_DaymarDunes */
    EMapId_EA_Demien              = 0x9, /* EA_Demien */
    EMapId_EA_DemienComms         = 0xa, /* EA_DemienComms */
    EMapId_EA_DogfightTest        = 0xb, /* EA_DogfightTest */
    EMapId_EA_DunlowDerby         = 0xc, /* EA_DunlowDerby */
    EMapId_EA_DyingStar           = 0xd, /* EA_DyingStar */
    EMapId_EA_Echo11              = 0xe, /* EA_Echo11 */
    EMapId_EA_EuterpeIcebreaker   = 0xf, /* EA_EuterpeIcebreaker */
    EMapId_EA_EZHab               = 0x10, /* EA_EZHab */
    EMapId_EA_Gundo               = 0x11, /* EA_Gundo */
    EMapId_EA_HurstonGroundArena  = 0x12, /* EA_HurstonGroundArena */
    EMapId_EA_JerichoStation      = 0x13, /* EA_JerichoStation */
    EMapId_EA_Kareah              = 0x14, /* EA_Kareah */
    EMapId_EA_LorvilleOutskirts   = 0x15, /* EA_LorvilleOutskirts */
    EMapId_EA_MagdaGroundArena    = 0x16, /* EA_MagdaGroundArena */
    EMapId_EA_MakersPoint         = 0x17, /* EA_MakersPoint */
    EMapId_EA_MicroTechRiver      = 0x18, /* EA_MicroTechRiver */
    EMapId_EA_MinersLament        = 0x19, /* EA_MinersLament */
    EMapId_EA_Ministry            = 0x1a, /* EA_Ministry */
    EMapId_EA_NHS_Arena           = 0x1b, /* EA_NHS_Arena */
    EMapId_EA_NHS_DeffordLink     = 0x1c, /* EA_NHS_DeffordLink */
    EMapId_EA_NHS_HalloranCircuit = 0x1d, /* EA_NHS_HalloranCircuit */
    EMapId_EA_NHS_OldVanderval    = 0x1e, /* EA_NHS_OldVanderval */
    EMapId_EA_NHS_Rikkord         = 0x1f, /* EA_NHS_Rikkord */
    EMapId_EA_NHS_Wetlands        = 0x20, /* EA_NHS_Wetlands */
    EMapId_EA_Pyro2               = 0x21, /* EA_Pyro2 */
    EMapId_EA_PyroJump            = 0x22, /* EA_PyroJump */
    EMapId_EA_ScenarioTwo         = 0x23, /* EA_ScenarioTwo */
    EMapId_EA_TheGoodDr           = 0x24, /* EA_TheGoodDr */
    EMapId_EA_TheSkyScraper       = 0x25, /* EA_TheSkyScraper */
    EMapId_EA_TheSnakePit         = 0x26, /* EA_TheSnakePit */
    EMapId_EA_TheSnakePit_Reverse = 0x27, /* EA_TheSnakePit_Reverse */
    EMapId_EA_RayariStation       = 0x28, /* EA_RayariStation */
    EMapId_EA_YadarValley         = 0x29, /* EA_YadarValley */
    EMapId_EA_YelaGroundArena     = 0x2a, /* EA_YelaGroundArena */
    EMapId_UNDEFINED              = 0x2b, /* UNDEFINED */
};

// Original name: EMasterMode
enum EMasterMode {
    EMasterMode_Invalid    = 0x0, /* Invalid */
    EMasterMode_Navigation = 0x1, /* Navigation */
    EMasterMode_SCM        = 0x2, /* SCM */
    EMasterMode_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: EMatchCycleType
enum EMatchCycleType {
    EMatchCycleType_None         = 0x0, /* None */
    EMatchCycleType_NewServer    = 0x1, /* NewServer */
    EMatchCycleType_RestartLevel = 0x2, /* RestartLevel */
};

// Original name: EMatchNetworkType
enum EMatchNetworkType {
    EMatchNetworkType_Offline = 0x1, /* Offline */
    EMatchNetworkType_Online  = 0x2, /* Online */
    EMatchNetworkType_Custom  = 0x4, /* Custom */
};

// Original name: EMeshChunks
enum EMeshChunks {
    EMeshChunks_vneck_zone          = 0x0, /* vneck_zone */
    EMeshChunks_torso01_zone        = 0x1, /* torso01_zone */
    EMeshChunks_torso02_zone        = 0x2, /* torso02_zone */
    EMeshChunks_torso03_zone        = 0x3, /* torso03_zone */
    EMeshChunks_torso04_zone        = 0x4, /* torso04_zone */
    EMeshChunks_head_zone           = 0x5, /* head_zone */
    EMeshChunks_hips_zone           = 0x6, /* hips_zone */
    EMeshChunks_underwear_top_zone  = 0x7, /* underwear_top_zone */
    EMeshChunks_underwear_zone      = 0x8, /* underwear_zone */
    EMeshChunks_pants_acc_zone      = 0x9, /* pants_acc_zone */
    EMeshChunks_shirt_acc_zone      = 0xa, /* shirt_acc_zone */
    EMeshChunks_l_shoulder_zone     = 0xb, /* l_shoulder_zone */
    EMeshChunks_l_arm01_zone        = 0xc, /* l_arm01_zone */
    EMeshChunks_l_arm02_zone        = 0xd, /* l_arm02_zone */
    EMeshChunks_l_arm03_zone        = 0xe, /* l_arm03_zone */
    EMeshChunks_l_arm04_zone        = 0xf, /* l_arm04_zone */
    EMeshChunks_l_arm05_zone        = 0x10, /* l_arm05_zone */
    EMeshChunks_l_arm05_body_zone   = 0x11, /* l_arm05_body_zone */
    EMeshChunks_l_arm05_torso0_zone = 0x12, /* l_arm05_torso0_zone */
    EMeshChunks_l_hand_zone         = 0x13, /* l_hand_zone */
    EMeshChunks_l_leg01_zone        = 0x14, /* l_leg01_zone */
    EMeshChunks_l_leg02_zone        = 0x15, /* l_leg02_zone */
    EMeshChunks_l_leg03_zone        = 0x16, /* l_leg03_zone */
    EMeshChunks_l_leg04_zone        = 0x17, /* l_leg04_zone */
    EMeshChunks_l_foot_zone         = 0x18, /* l_foot_zone */
    EMeshChunks_l_eye_zone          = 0x19, /* l_eye_zone */
    EMeshChunks_r_shoulder_zone     = 0x1a, /* r_shoulder_zone */
    EMeshChunks_r_arm01_zone        = 0x1b, /* r_arm01_zone */
    EMeshChunks_r_arm02_zone        = 0x1c, /* r_arm02_zone */
    EMeshChunks_r_arm03_zone        = 0x1d, /* r_arm03_zone */
    EMeshChunks_r_arm04_zone        = 0x1e, /* r_arm04_zone */
    EMeshChunks_r_arm05_zone        = 0x1f, /* r_arm05_zone */
    EMeshChunks_r_arm05_body_zone   = 0x20, /* r_arm05_body_zone */
    EMeshChunks_r_arm05_torso0_zone = 0x21, /* r_arm05_torso0_zone */
    EMeshChunks_r_hand_zone         = 0x22, /* r_hand_zone */
    EMeshChunks_r_leg01_zone        = 0x23, /* r_leg01_zone */
    EMeshChunks_r_leg02_zone        = 0x24, /* r_leg02_zone */
    EMeshChunks_r_leg03_zone        = 0x25, /* r_leg03_zone */
    EMeshChunks_r_leg04_zone        = 0x26, /* r_leg04_zone */
    EMeshChunks_r_foot_zone         = 0x27, /* r_foot_zone */
    EMeshChunks_r_eye_zone          = 0x28, /* r_eye_zone */
    EMeshChunks_omega_core_zone     = 0x29, /* omega_core_zone */
    EMeshChunks_omega_arms_zone     = 0x2a, /* omega_arms_zone */
    EMeshChunks_omega_legs_zone     = 0x2b, /* omega_legs_zone */
    EMeshChunks_theta_head_zone     = 0x2c, /* theta_head_zone */
    EMeshChunks_theta_core_zone     = 0x2d, /* theta_core_zone */
    EMeshChunks_theta_arms_zone     = 0x2e, /* theta_arms_zone */
    EMeshChunks_theta_legs_zone     = 0x2f, /* theta_legs_zone */
    EMeshChunks_theta_l_arm_zone    = 0x30, /* theta_l_arm_zone */
    EMeshChunks_theta_r_arm_zone    = 0x31, /* theta_r_arm_zone */
    EMeshChunks_theta_l_leg_zone    = 0x32, /* theta_l_leg_zone */
    EMeshChunks_theta_r_leg_zone    = 0x33, /* theta_r_leg_zone */
    EMeshChunks_pcg_eyebrows        = 0x34, /* pcg_eyebrows */
    EMeshChunks_pcg_r_ear           = 0x35, /* pcg_r_ear */
    EMeshChunks_pcg_l_ear           = 0x36, /* pcg_l_ear */
    EMeshChunks_pcg_nose            = 0x37, /* pcg_nose */
    EMeshChunks_pcg_mouth           = 0x38, /* pcg_mouth */
    EMeshChunks_UNDEFINED           = 0x39, /* UNDEFINED */
};

// Original name: EMisfireType
enum EMisfireType {
    EMisfireType_None      = 0x0, /* None */
    EMisfireType_Minor     = 0x1, /* Minor */
    EMisfireType_Major     = 0x2, /* Major */
    EMisfireType_Critical  = 0x3, /* Critical */
    EMisfireType_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EMissionObjectiveCategory
enum EMissionObjectiveCategory {
    EMissionObjectiveCategory_Primary   = 0x0, /* Primary */
    EMissionObjectiveCategory_Optional  = 0x1, /* Optional */
    EMissionObjectiveCategory_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EMissionResult
enum EMissionResult {
    EMissionResult_Completed  = 0x0, /* Completed */
    EMissionResult_InProgress = 0x1, /* InProgress */
    EMissionResult_Failed     = 0x2, /* Failed */
    EMissionResult_Abandoned  = 0x3, /* Abandoned */
    EMissionResult_Withdrawn  = 0x4, /* Withdrawn */
    EMissionResult_UNDEFINED  = 0x5, /* UNDEFINED */
};

// Original name: EMobiGlasPersonalStatusSkillsDisplayType
enum EMobiGlasPersonalStatusSkillsDisplayType {
    EMobiGlasPersonalStatusSkillsDisplayType_None      = 0x0, /* None */
    EMobiGlasPersonalStatusSkillsDisplayType_Attribute = 0x1, /* Attribute */
    EMobiGlasPersonalStatusSkillsDisplayType_Technique = 0x2, /* Technique */
    EMobiGlasPersonalStatusSkillsDisplayType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EModifierSignatureType
enum EModifierSignatureType {
    EModifierSignatureType_GainPercentage = 0x0, /* GainPercentage */
    EModifierSignatureType_LossPercentage = 0x1, /* LossPercentage */
    EModifierSignatureType_UNDEFINED      = 0x2, /* UNDEFINED */
};

// Original name: EModuleType
enum EModuleType {
    EModuleType_PersistentUniverse = 0x0, /* PersistentUniverse */
    EModuleType_ElectronicAccess   = 0x1, /* ElectronicAccess */
    EModuleType_Squadron42         = 0x2, /* Squadron42 */
    EModuleType_Frontend           = 0x3, /* Frontend */
    EModuleType_Undefined          = 0x4, /* Undefined */
};

// Original name: EMotionProcessorLimiterType
enum EMotionProcessorLimiterType {
    EMotionProcessorLimiterType_NormalizedUniform              = 0x0, /* NormalizedUniform */
    EMotionProcessorLimiterType_NormalizedUniformWithMaxRadius = 0x1, /* NormalizedUniformWithMaxRadius */
    EMotionProcessorLimiterType_Ellipsoid                      = 0x2, /* Ellipsoid */
    EMotionProcessorLimiterType_UNDEFINED                      = 0x3, /* UNDEFINED */
};

// Original name: EMovementProcessor
enum EMovementProcessor {
    EMovementProcessor_Basic             = 0x0, /* Basic */
    EMovementProcessor_Locomotion        = 0x1, /* Locomotion */
    EMovementProcessor_SubmergedCreature = 0x2, /* SubmergedCreature */
};

// Original name: EMyEnum
enum EMyEnum {
    EMyEnum_First  = 0x0, /* First */
    EMyEnum_Second = 0x1, /* Second */
    EMyEnum_Third  = 0x2, /* Third */
};

// Original name: ENavPointType
enum ENavPointType {
    ENavPointType_General      = 0x0, /* General */
    ENavPointType_QTTracePoint = 0x1, /* QTTracePoint */
};

// Original name: ENavigationAgentType
enum ENavigationAgentType {
    ENavigationAgentType_MediumSizedCharacters = 0x0, /* MediumSizedCharacters */
    ENavigationAgentType_LargeSizedCharacters  = 0x1, /* LargeSizedCharacters */
    ENavigationAgentType_VehicleMedium         = 0x2, /* VehicleMedium */
    ENavigationAgentType_UNDEFINED             = 0x6, /* UNDEFINED */
};

// Original name: ENavigationLinkLinkingType
enum ENavigationLinkLinkingType {
    ENavigationLinkLinkingType_LinksInsideSameZone         = 0x0, /* LinksInsideSameZone */
    ENavigationLinkLinkingType_LinksInsideSameExternalZone = 0x1, /* LinksInsideSameExternalZone */
    ENavigationLinkLinkingType_LinksToExternalZone         = 0x2, /* LinksToExternalZone */
    ENavigationLinkLinkingType_LinksFromExternalZone       = 0x3, /* LinksFromExternalZone */
    ENavigationLinkLinkingType_UNDEFINED                   = 0x4, /* UNDEFINED */
};

// Original name: EObjectDataBankEntryTrackerType
enum EObjectDataBankEntryTrackerType {
    EObjectDataBankEntryTrackerType_None             = 0x0, /* None */
    EObjectDataBankEntryTrackerType_LandingArea      = 0x1, /* LandingArea */
    EObjectDataBankEntryTrackerType_FPSMineable      = 0x2, /* FPSMineable */
    EObjectDataBankEntryTrackerType_Mineable         = 0x3, /* Mineable */
    EObjectDataBankEntryTrackerType_Missile          = 0x4, /* Missile */
    EObjectDataBankEntryTrackerType_Mission          = 0x5, /* Mission */
    EObjectDataBankEntryTrackerType_NavPoint         = 0x6, /* NavPoint */
    EObjectDataBankEntryTrackerType_PartyMember      = 0x7, /* PartyMember */
    EObjectDataBankEntryTrackerType_QuantumTravel    = 0x8, /* QuantumTravel */
    EObjectDataBankEntryTrackerType_RaceCheckpoint   = 0x9, /* RaceCheckpoint */
    EObjectDataBankEntryTrackerType_Transponder      = 0xa, /* Transponder */
    EObjectDataBankEntryTrackerType_Vehicle          = 0xb, /* Vehicle */
    EObjectDataBankEntryTrackerType_Turret           = 0xc, /* Turret */
    EObjectDataBankEntryTrackerType_Debris           = 0xd, /* Debris */
    EObjectDataBankEntryTrackerType_Actor            = 0xe, /* Actor */
    EObjectDataBankEntryTrackerType_Unknown          = 0xf, /* Unknown */
    EObjectDataBankEntryTrackerType_BlobContact      = 0x10, /* BlobContact */
    EObjectDataBankEntryTrackerType_InteractionPoint = 0x11, /* InteractionPoint */
    EObjectDataBankEntryTrackerType_Interactable     = 0x12, /* Interactable */
    EObjectDataBankEntryTrackerType_Hint             = 0x13, /* Hint */
    EObjectDataBankEntryTrackerType_Explosive        = 0x14, /* Explosive */
};

// Original name: EObjectiveInteractionType
enum EObjectiveInteractionType {
    EObjectiveInteractionType_Defend    = 0x0, /* Defend */
    EObjectiveInteractionType_Capture   = 0x1, /* Capture */
    EObjectiveInteractionType_Damage    = 0x2, /* Damage */
    EObjectiveInteractionType_Overload  = 0x3, /* Overload */
    EObjectiveInteractionType_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EObjectiveTokenState
enum EObjectiveTokenState {
    EObjectiveTokenState_NotStarted = 0x0, /* NotStarted */
    EObjectiveTokenState_Active     = 0x1, /* Active */
    EObjectiveTokenState_Completed  = 0x2, /* Completed */
    EObjectiveTokenState_Failed     = 0x3, /* Failed */
    EObjectiveTokenState_Abandoned  = 0x4, /* Abandoned */
    EObjectiveTokenState_UNDEFINED  = 0x5, /* UNDEFINED */
};

// Original name: EOperatorMode
enum EOperatorMode {
    EOperatorMode_None                 = 0x0, /* None */
    EOperatorMode_Inactive             = 0x1, /* Inactive */
    EOperatorMode_Flight               = 0x2, /* Flight */
    EOperatorMode_Combat               = 0x3, /* Combat */
    EOperatorMode_Turret               = 0x4, /* Turret */
    EOperatorMode_Missile              = 0x5, /* Missile */
    EOperatorMode_Scanning             = 0x6, /* Scanning */
    EOperatorMode_Mining               = 0x7, /* Mining */
    EOperatorMode_QuantumNavigation    = 0x8, /* QuantumNavigation */
    EOperatorMode_Refuel               = 0x9, /* Refuel */
    EOperatorMode_AirTrafficController = 0xa, /* AirTrafficController */
    EOperatorMode_Salvage              = 0xb, /* Salvage */
    EOperatorMode_UNDEFINED            = 0xc, /* UNDEFINED */
};

// Original name: EOrdnanceRelativeDetachType
enum EOrdnanceRelativeDetachType {
    EOrdnanceRelativeDetachType_Ordnance   = 0x0, /* Ordnance */
    EOrdnanceRelativeDetachType_Weapon     = 0x1, /* Weapon */
    EOrdnanceRelativeDetachType_WeaponHost = 0x2, /* WeaponHost */
    EOrdnanceRelativeDetachType_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: EOutfitPieceType
enum EOutfitPieceType {
    EOutfitPieceType_Head      = 0x0, /* Head */
    EOutfitPieceType_Torso     = 0x1, /* Torso */
    EOutfitPieceType_Arms      = 0x2, /* Arms */
    EOutfitPieceType_Legs      = 0x3, /* Legs */
    EOutfitPieceType_Undersuit = 0x4, /* Undersuit */
};

// Original name: EParticleInputs
enum EParticleInputs {
    EParticleInputs_Count     = 0x0, /* Count */
    EParticleInputs_Size      = 0x1, /* Size */
    EParticleInputs_Speed     = 0x2, /* Speed */
    EParticleInputs_Time      = 0x3, /* Time */
    EParticleInputs_Pulse     = 0x4, /* Pulse */
    EParticleInputs_Strength  = 0x5, /* Strength */
    EParticleInputs_Scale     = 0x6, /* Scale */
    EParticleInputs_Diffuse   = 0x7, /* Diffuse */
    EParticleInputs_Radius    = 0x8, /* Radius */
    EParticleInputs_UNDEFINED = 0x9, /* UNDEFINED */
};

// Original name: EParticleModifierSource
enum EParticleModifierSource {
    EParticleModifierSource_None                = 0x0, /* None */
    EParticleModifierSource_Power               = 0x1, /* Power */
    EParticleModifierSource_Heat                = 0x2, /* Heat */
    EParticleModifierSource_BarrelAttachment    = 0x3, /* BarrelAttachment */
    EParticleModifierSource_MiningLaserThrottle = 0x4, /* MiningLaserThrottle */
    EParticleModifierSource_WeaponState         = 0x5, /* WeaponState */
    EParticleModifierSource_SalvageRepair       = 0x6, /* SalvageRepair */
    EParticleModifierSource_Wear                = 0x7, /* Wear */
};

// Original name: EParticleProperties
enum EParticleProperties {
    EParticleProperties_strength     = 0x0, /* strength */
    EParticleProperties_alpha        = 0x1, /* alpha */
    EParticleProperties_color        = 0x2, /* color */
    EParticleProperties_count        = 0x3, /* count */
    EParticleProperties_size         = 0x4, /* size */
    EParticleProperties_speed        = 0x5, /* speed */
    EParticleProperties_time         = 0x6, /* time */
    EParticleProperties_pulse        = 0x7, /* pulse */
    EParticleProperties_radius       = 0x8, /* radius */
    EParticleProperties_distribution = 0x9, /* distribution */
    EParticleProperties_glowScale    = 0xa, /* glowScale */
    EParticleProperties_emissionSize = 0xb, /* emissionSize */
    EParticleProperties_UNDEFINED    = 0xc, /* UNDEFINED */
};

// Original name: EPerceptionSenses
enum EPerceptionSenses {
    EPerceptionSenses_Vision    = 0x0, /* Vision */
    EPerceptionSenses_Hearing   = 0x1, /* Hearing */
    EPerceptionSenses_Radar     = 0x2, /* Radar */
    EPerceptionSenses_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EPerceptionTypes
enum EPerceptionTypes {
    EPerceptionTypes_unnamed               = 0x0, /*  */
    EPerceptionTypes_Explosive             = 0x0, /* Explosive */
    EPerceptionTypes_Agent                 = 0x1, /* Agent */
    EPerceptionTypes_Player                = 0x2, /* Player */
    EPerceptionTypes_Interesting           = 0x3, /* Interesting */
    EPerceptionTypes_SearchSpots           = 0x4, /* SearchSpots */
    EPerceptionTypes_SabotageEquipment     = 0x5, /* SabotageEquipment */
    EPerceptionTypes_Vehicle               = 0x6, /* Vehicle */
    EPerceptionTypes_Spaceship             = 0x7, /* Spaceship */
    EPerceptionTypes_Missile               = 0x8, /* Missile */
    EPerceptionTypes_Torpedo               = 0x9, /* Torpedo */
    EPerceptionTypes_FiringRangeTarget     = 0xa, /* FiringRangeTarget */
    EPerceptionTypes_LargeObject           = 0xb, /* LargeObject */
    EPerceptionTypes_Turret                = 0xc, /* Turret */
    EPerceptionTypes_ExplosiveDestructible = 0xd, /* ExplosiveDestructible */
    EPerceptionTypes_UNDEFINED             = 0xe, /* UNDEFINED */
};

// Original name: EPersistentDataPolicy
enum EPersistentDataPolicy {
    EPersistentDataPolicy_Disabled  = 0x0, /* Disabled */
    EPersistentDataPolicy_ReadOnly  = 0x1, /* ReadOnly */
    EPersistentDataPolicy_WriteFull = 0x2, /* WriteFull */
};

// Original name: EPhysFlag
enum EPhysFlag {
    EPhysFlag_none                        = 0x0, /* none */
    EPhysFlag_geom_colltype_default       = 0x1, /* geom_colltype_default */
    EPhysFlag_geom_colltype_player        = 0x2, /* geom_colltype_player */
    EPhysFlag_geom_colltype_explosion     = 0x3, /* geom_colltype_explosion */
    EPhysFlag_geom_colltype_vehicle       = 0x4, /* geom_colltype_vehicle */
    EPhysFlag_geom_colltype_foliage       = 0x5, /* geom_colltype_foliage */
    EPhysFlag_geom_colltype_debris        = 0x6, /* geom_colltype_debris */
    EPhysFlag_geom_colltype_shield        = 0x7, /* geom_colltype_shield */
    EPhysFlag_geom_colltype_terrain_mesh  = 0x8, /* geom_colltype_terrain_mesh */
    EPhysFlag_geom_colltype_foliage_proxy = 0x9, /* geom_colltype_foliage_proxy */
    EPhysFlag_geom_colltype_obstruct      = 0xa, /* geom_colltype_obstruct */
    EPhysFlag_geom_colltype_ray           = 0xb, /* geom_colltype_ray */
    EPhysFlag_geom_car_wheel              = 0xc, /* geom_car_wheel */
    EPhysFlag_geom_interior               = 0xd, /* geom_interior */
    EPhysFlag_geom_exterior               = 0xe, /* geom_exterior */
    EPhysFlag_geom_interior_grid_part     = 0xf, /* geom_interior_grid_part */
    EPhysFlag_geom_voxelization_proxy     = 0x10, /* geom_voxelization_proxy */
    EPhysFlag_geom_cluster_mesh           = 0x11, /* geom_cluster_mesh */
    EPhysFlag_geom_interaction            = 0x12, /* geom_interaction */
    EPhysFlag_geom_disabled               = 0x13, /* geom_disabled */
    EPhysFlag_geom_floats                 = 0x14, /* geom_floats */
    EPhysFlag_geom_constraint_on_break    = 0x15, /* geom_constraint_on_break */
    EPhysFlag_geom_structure_changes      = 0x16, /* geom_structure_changes */
    EPhysFlag_geom_can_modify             = 0x17, /* geom_can_modify */
    EPhysFlag_geom_squashy                = 0x18, /* geom_squashy */
    EPhysFlag_geom_log_interactions       = 0x19, /* geom_log_interactions */
    EPhysFlag_geom_monitor_contacts       = 0x1a, /* geom_monitor_contacts */
    EPhysFlag_geom_manually_breakable     = 0x1b, /* geom_manually_breakable */
    EPhysFlag_geom_no_coll_response       = 0x1c, /* geom_no_coll_response */
    EPhysFlag_geom_mat_substitutor        = 0x1d, /* geom_mat_substitutor */
    EPhysFlag_geom_break_approximation    = 0x1e, /* geom_break_approximation */
    EPhysFlag_geom_no_particle_impulse    = 0x1f, /* geom_no_particle_impulse */
    EPhysFlag_geom_destroyed_on_break     = 0x20, /* geom_destroyed_on_break */
    EPhysFlag_geom_sdf_proxy              = 0x21, /* geom_sdf_proxy */
    EPhysFlag_geom_removed                = 0x22, /* geom_removed */
    EPhysFlag_geom_invalid                = 0x23, /* geom_invalid */
    EPhysFlag_geom_unpushable             = 0x24, /* geom_unpushable */
    EPhysFlag_geom_foot_coll              = 0x25, /* geom_foot_coll */
    EPhysFlag_geom_kinematic_part         = 0x26, /* geom_kinematic_part */
    EPhysFlag_geom_stairs_ramps           = 0x27, /* geom_stairs_ramps */
    EPhysFlag_UNDEFINED                   = 0x28, /* UNDEFINED */
};

// Original name: EPipeClass
enum EPipeClass {
    EPipeClass_Power          = 0x0, /* Power */
    EPipeClass_Heat           = 0x1, /* Heat */
    EPipeClass_Avionics       = 0x2, /* Avionics */
    EPipeClass_Fuel           = 0x3, /* Fuel */
    EPipeClass_QuantumFuel    = 0x4, /* QuantumFuel */
    EPipeClass_Shield         = 0x5, /* Shield */
    EPipeClass_Decibel        = 0x6, /* Decibel */
    EPipeClass_Charge         = 0x7, /* Charge */
    EPipeClass_Health         = 0x8, /* Health */
    EPipeClass_Input          = 0x9, /* Input */
    EPipeClass_Output         = 0xa, /* Output */
    EPipeClass_Atmosphere     = 0xb, /* Atmosphere */
    EPipeClass_WeaponRegen    = 0xc, /* WeaponRegen */
    EPipeClass_WeaponAmmoLoad = 0xd, /* WeaponAmmoLoad */
    EPipeClass_UNDEFINED      = 0xe, /* UNDEFINED */
};

// Original name: EPipeConnectionProcess
enum EPipeConnectionProcess {
    EPipeConnectionProcess_Consumer  = 0x0, /* Consumer */
    EPipeConnectionProcess_Producer  = 0x1, /* Producer */
    EPipeConnectionProcess_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EPipePriorityGroup
enum EPipePriorityGroup {
    EPipePriorityGroup_Weapon    = 0x0, /* Weapon */
    EPipePriorityGroup_Shield    = 0x1, /* Shield */
    EPipePriorityGroup_Thruster  = 0x2, /* Thruster */
    EPipePriorityGroup_Other     = 0x3, /* Other */
    EPipePriorityGroup_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EPlayerActionAnimType
enum EPlayerActionAnimType {
    EPlayerActionAnimType_NoAnim     = 0x0, /* NoAnim */
    EPlayerActionAnimType_OneShot    = 0x1, /* OneShot */
    EPlayerActionAnimType_Continuous = 0x2, /* Continuous */
    EPlayerActionAnimType_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: EPlayerAnimatedInteractionType
enum EPlayerAnimatedInteractionType {
    EPlayerAnimatedInteractionType_Instantaneous = 0x0, /* Instantaneous */
    EPlayerAnimatedInteractionType_Reactive      = 0x1, /* Reactive */
    EPlayerAnimatedInteractionType_Bluetooth     = 0x2, /* Bluetooth */
};

// Original name: EPlayerAttachmentSlots
enum EPlayerAttachmentSlots {
    EPlayerAttachmentSlots_Barrel      = 0x0, /* Barrel */
    EPlayerAttachmentSlots_IronSight   = 0x1, /* IronSight */
    EPlayerAttachmentSlots_UnderBarrel = 0x2, /* UnderBarrel */
};

// Original name: EPlayerFormationRadius
enum EPlayerFormationRadius {
    EPlayerFormationRadius_Target    = 0x0, /* Target */
    EPlayerFormationRadius_Inner     = 0x1, /* Inner */
    EPlayerFormationRadius_Outer     = 0x2, /* Outer */
    EPlayerFormationRadius_Break     = 0x3, /* Break */
    EPlayerFormationRadius_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EPlayerGroupType
enum EPlayerGroupType {
    EPlayerGroupType_Invalid       = 0x0, /* Invalid */
    EPlayerGroupType_System        = 0x1, /* System */
    EPlayerGroupType_Party         = 0x2, /* Party */
    EPlayerGroupType_Group         = 0x3, /* Group */
    EPlayerGroupType_Server        = 0x4, /* Server */
    EPlayerGroupType_DirectMessage = 0x5, /* DirectMessage */
    EPlayerGroupType_GameEntity    = 0x6, /* GameEntity */
};

// Original name: EPlayerItemSlots
enum EPlayerItemSlots {
    EPlayerItemSlots_ArmorArms         = 0x0, /* ArmorArms */
    EPlayerItemSlots_ArmorHelmet       = 0x1, /* ArmorHelmet */
    EPlayerItemSlots_ArmorLegs         = 0x2, /* ArmorLegs */
    EPlayerItemSlots_ArmorTorso        = 0x3, /* ArmorTorso */
    EPlayerItemSlots_ArmorUndersuit    = 0x4, /* ArmorUndersuit */
    EPlayerItemSlots_CharAccessoryEyes = 0x12, /* CharAccessoryEyes */
    EPlayerItemSlots_CharAccessoryHead = 0x13, /* CharAccessoryHead */
    EPlayerItemSlots_CharBody          = 0x14, /* CharBody */
    EPlayerItemSlots_CharFlair         = 0x15, /* CharFlair */
    EPlayerItemSlots_CharHead          = 0x16, /* CharHead */
    EPlayerItemSlots_CharHeadBeard     = 0x17, /* CharHeadBeard */
    EPlayerItemSlots_CharHeadEyebrow   = 0x18, /* CharHeadEyebrow */
    EPlayerItemSlots_CharHeadEyelash   = 0x19, /* CharHeadEyelash */
    EPlayerItemSlots_CharHeadEyes      = 0x1a, /* CharHeadEyes */
    EPlayerItemSlots_CharHeadHair      = 0x1b, /* CharHeadHair */
    EPlayerItemSlots_Grenade           = 0x1c, /* Grenade */
    EPlayerItemSlots_Medpen            = 0x1d, /* Medpen */
    EPlayerItemSlots_Radar             = 0x1e, /* Radar */
    EPlayerItemSlots_WeaponPrimary     = 0x1f, /* WeaponPrimary */
    EPlayerItemSlots_WeaponSecondary   = 0x20, /* WeaponSecondary */
    EPlayerItemSlots_WeaponSidearm     = 0x21, /* WeaponSidearm */
    EPlayerItemSlots_WeaponMelee       = 0x22, /* WeaponMelee */
    EPlayerItemSlots_Utility           = 0x23, /* Utility */
    EPlayerItemSlots_Visor             = 0x24, /* Visor */
};

// Original name: EPlayerStateActions
enum EPlayerStateActions {
    EPlayerStateActions_None            = 0x0, /* None */
    EPlayerStateActions_Carry           = 0x1, /* Carry */
    EPlayerStateActions_Consume         = 0x2, /* Consume */
    EPlayerStateActions_Drop            = 0x3, /* Drop */
    EPlayerStateActions_Equip           = 0x4, /* Equip */
    EPlayerStateActions_FinishConsume   = 0x5, /* FinishConsume */
    EPlayerStateActions_FirstSelect     = 0x6, /* FirstSelect */
    EPlayerStateActions_Inspect         = 0x8, /* Inspect */
    EPlayerStateActions_Interact        = 0x9, /* Interact */
    EPlayerStateActions_OffHandStore    = 0xb, /* OffHandStore */
    EPlayerStateActions_OffHandStow     = 0xc, /* OffHandStow */
    EPlayerStateActions_OpenMobiGlas    = 0xe, /* OpenMobiGlas */
    EPlayerStateActions_Place           = 0xf, /* Place */
    EPlayerStateActions_PlaceReady      = 0x10, /* PlaceReady */
    EPlayerStateActions_Stow            = 0x12, /* Stow */
    EPlayerStateActions_Store           = 0x13, /* Store */
    EPlayerStateActions_SwapAttachments = 0x14, /* SwapAttachments */
    EPlayerStateActions_ThrowReady      = 0x17, /* ThrowReady */
    EPlayerStateActions_ThrowV2         = 0x18, /* ThrowV2 */
    EPlayerStateActions_Unequip         = 0x19, /* Unequip */
    EPlayerStateActions_UnprimeItem     = 0x1b, /* UnprimeItem */
    EPlayerStateActions_Unstow          = 0x1c, /* Unstow */
    EPlayerStateActions_VisorWipe       = 0x1d, /* VisorWipe */
    EPlayerStateActions_SelfTarget      = 0x1e, /* SelfTarget */
};

// Original name: EPowerSourceState
enum EPowerSourceState {
    EPowerSourceState_None       = 0x0, /* None */
    EPowerSourceState_Online     = 0x1, /* Online */
    EPowerSourceState_Offline    = 0x2, /* Offline */
    EPowerSourceState_Inoperable = 0x3, /* Inoperable */
};

// Original name: EPresetFStopValues
enum EPresetFStopValues {
    EPresetFStopValues_FStop_0_1      = 0x0, /* FStop_0_1 */
    EPresetFStopValues_FStop_0_5      = 0x1, /* FStop_0_5 */
    EPresetFStopValues_FStop_1        = 0x2, /* FStop_1 */
    EPresetFStopValues_FStop_2        = 0x3, /* FStop_2 */
    EPresetFStopValues_FStop_3        = 0x4, /* FStop_3 */
    EPresetFStopValues_FStop_4        = 0x5, /* FStop_4 */
    EPresetFStopValues_FStop_5        = 0x6, /* FStop_5 */
    EPresetFStopValues_FStop_6        = 0x7, /* FStop_6 */
    EPresetFStopValues_FStop_8        = 0x8, /* FStop_8 */
    EPresetFStopValues_FStop_14       = 0x9, /* FStop_14 */
    EPresetFStopValues_FStop_22       = 0xa, /* FStop_22 */
    EPresetFStopValues_FStop_Disabled = 0xb, /* FStop_Disabled */
};

// Original name: EPresetLensSizes
enum EPresetLensSizes {
    EPresetLensSizes_LensSize_8mm   = 0x0, /* LensSize_8mm */
    EPresetLensSizes_LensSize_9mm46 = 0x1, /* LensSize_9mm46 */
    EPresetLensSizes_LensSize_12mm  = 0x2, /* LensSize_12mm */
    EPresetLensSizes_LensSize_14mm  = 0x3, /* LensSize_14mm */
    EPresetLensSizes_LensSize_16mm  = 0x4, /* LensSize_16mm */
    EPresetLensSizes_LensSize_18mm  = 0x5, /* LensSize_18mm */
    EPresetLensSizes_LensSize_21mm  = 0x6, /* LensSize_21mm */
    EPresetLensSizes_LensSize_25mm  = 0x7, /* LensSize_25mm */
    EPresetLensSizes_LensSize_27mm  = 0x8, /* LensSize_27mm */
    EPresetLensSizes_LensSize_32mm  = 0x9, /* LensSize_32mm */
    EPresetLensSizes_LensSize_35mm  = 0xa, /* LensSize_35mm */
    EPresetLensSizes_LensSize_40mm  = 0xb, /* LensSize_40mm */
    EPresetLensSizes_LensSize_50mm  = 0xc, /* LensSize_50mm */
    EPresetLensSizes_LensSize_65mm  = 0xd, /* LensSize_65mm */
    EPresetLensSizes_LensSize_75mm  = 0xe, /* LensSize_75mm */
};

// Original name: EProcLeanPoseType
enum EProcLeanPoseType {
    EProcLeanPoseType_Standing  = 0x0, /* Standing */
    EProcLeanPoseType_Sitting   = 0x1, /* Sitting */
    EProcLeanPoseType_Crouching = 0x2, /* Crouching */
};

// Original name: EProjectedHudAlignmentType
enum EProjectedHudAlignmentType {
    EProjectedHudAlignmentType_NoRotation            = 0x0, /* NoRotation */
    EProjectedHudAlignmentType_AngledToPitchSource   = 0x1, /* AngledToPitchSource */
    EProjectedHudAlignmentType_AngledToView          = 0x2, /* AngledToView */
    EProjectedHudAlignmentType_AngledToYawLineOrigin = 0x3, /* AngledToYawLineOrigin */
    EProjectedHudAlignmentType_UNDEFINED             = 0x4, /* UNDEFINED */
};

// Original name: EProjectedHudPositionType
enum EProjectedHudPositionType {
    EProjectedHudPositionType_OnAngle   = 0x0, /* OnAngle */
    EProjectedHudPositionType_OnYawLine = 0x1, /* OnYawLine */
    EProjectedHudPositionType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EProjectedHudYawLineAnchorType
enum EProjectedHudYawLineAnchorType {
    EProjectedHudYawLineAnchorType_InForward = 0x0, /* InForward */
    EProjectedHudYawLineAnchorType_InWorld   = 0x1, /* InWorld */
    EProjectedHudYawLineAnchorType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EProjectileType
enum EProjectileType {
    EProjectileType_Primary   = 0x0, /* Primary */
    EProjectileType_Secondary = 0x1, /* Secondary */
};

// Original name: EProjectionSelection1
enum EProjectionSelection1 {
    EProjectionSelection1_PS1_NoProjection     = 0x0, /* PS1_NoProjection */
    EProjectionSelection1_PS1_ShortarcRotation = 0x1, /* PS1_ShortarcRotation */
    EProjectionSelection1_UNDEFINED            = 0x2, /* UNDEFINED */
};

// Original name: EProjectionSelection2
enum EProjectionSelection2 {
    EProjectionSelection2_PS2_NoProjection     = 0x0, /* PS2_NoProjection */
    EProjectionSelection2_PS2_ShortarcRotation = 0x1, /* PS2_ShortarcRotation */
    EProjectionSelection2_PS2_DirectedRotation = 0x2, /* PS2_DirectedRotation */
    EProjectionSelection2_UNDEFINED            = 0x3, /* UNDEFINED */
};

// Original name: EProjectionSelection3
enum EProjectionSelection3 {
    EProjectionSelection3_PS3_NoProjection        = 0x0, /* PS3_NoProjection */
    EProjectionSelection3_PS3_ShortvecTranslation = 0x1, /* PS3_ShortvecTranslation */
    EProjectionSelection3_UNDEFINED               = 0x2, /* UNDEFINED */
};

// Original name: EProjectionSelection4
enum EProjectionSelection4 {
    EProjectionSelection4_PS4_NoProjection        = 0x0, /* PS4_NoProjection */
    EProjectionSelection4_PS4_ShortvecTranslation = 0x1, /* PS4_ShortvecTranslation */
    EProjectionSelection4_PS4_DirectedTranslation = 0x2, /* PS4_DirectedTranslation */
    EProjectionSelection4_UNDEFINED               = 0x3, /* UNDEFINED */
};

// Original name: EQedVisualGraphState
enum EQedVisualGraphState {
    EQedVisualGraphState_Idle        = 0x0, /* Idle */
    EQedVisualGraphState_Charging    = 0x1, /* Charging */
    EQedVisualGraphState_Discharging = 0x2, /* Discharging */
    EQedVisualGraphState_Ready       = 0x3, /* Ready */
    EQedVisualGraphState_Active      = 0x4, /* Active */
    EQedVisualGraphState_Tethering   = 0x5, /* Tethering */
    EQedVisualGraphState_Cooldown    = 0x6, /* Cooldown */
    EQedVisualGraphState_Jamming     = 0x7, /* Jamming */
    EQedVisualGraphState_Off         = 0x8, /* Off */
};

// Original name: EQedVisualGraphTrackedVariable
enum EQedVisualGraphTrackedVariable {
    EQedVisualGraphTrackedVariable_ChargePercentage   = 0x0, /* ChargePercentage */
    EQedVisualGraphTrackedVariable_CooldownPercentage = 0x1, /* CooldownPercentage */
};

// Original name: EQedVisualGraphTrackedVariableContext
enum EQedVisualGraphTrackedVariableContext {
    EQedVisualGraphTrackedVariableContext_TrackAscending  = 0x0, /* TrackAscending */
    EQedVisualGraphTrackedVariableContext_TrackDescending = 0x1, /* TrackDescending */
};

// Original name: ERadarChargeLevels
enum ERadarChargeLevels {
    ERadarChargeLevels_LowCharge  = 0x0, /* LowCharge */
    ERadarChargeLevels_FullCharge = 0x1, /* FullCharge */
};

// Original name: ERadarContactBehaviourCategory
enum ERadarContactBehaviourCategory {
    ERadarContactBehaviourCategory_Vehicle = 0x0, /* Vehicle */
    ERadarContactBehaviourCategory_FPS     = 0x1, /* FPS */
    ERadarContactBehaviourCategory_Both    = 0x2, /* Both */
    ERadarContactBehaviourCategory_None    = 0x3, /* None */
};

// Original name: ERadarContactHighlightState
enum ERadarContactHighlightState {
    ERadarContactHighlightState_TargetScanBlocked      = 0x0, /* TargetScanBlocked */
    ERadarContactHighlightState_TargetScannable        = 0x1, /* TargetScannable */
    ERadarContactHighlightState_TargetScanned          = 0x2, /* TargetScanned */
    ERadarContactHighlightState_TargetScanning         = 0x3, /* TargetScanning */
    ERadarContactHighlightState_PingDetected_Hostile   = 0x4, /* PingDetected_Hostile */
    ERadarContactHighlightState_PingDetected_Neutral   = 0x5, /* PingDetected_Neutral */
    ERadarContactHighlightState_PingDetected_Friendly  = 0x6, /* PingDetected_Friendly */
    ERadarContactHighlightState_PingDetected_Objective = 0x7, /* PingDetected_Objective */
    ERadarContactHighlightState_PingDetected_Unknown   = 0x8, /* PingDetected_Unknown */
};

// Original name: ERadarFocusLevels
enum ERadarFocusLevels {
    ERadarFocusLevels_Level1 = 0x0, /* Level1 */
    ERadarFocusLevels_Level2 = 0x1, /* Level2 */
    ERadarFocusLevels_Level3 = 0x2, /* Level3 */
    ERadarFocusLevels_Level4 = 0x3, /* Level4 */
    ERadarFocusLevels_Level5 = 0x4, /* Level5 */
    ERadarFocusLevels_Level6 = 0x5, /* Level6 */
    ERadarFocusLevels_Level7 = 0x6, /* Level7 */
    ERadarFocusLevels_Level8 = 0x7, /* Level8 */
};

// Original name: ERatingScoreCurveType
enum ERatingScoreCurveType {
    ERatingScoreCurveType_TwoThousandFiveHundred   = 0x0, /* TwoThousandFiveHundred */
    ERatingScoreCurveType_FiveThousand             = 0x1, /* FiveThousand */
    ERatingScoreCurveType_SevenThousandFiveHundred = 0x2, /* SevenThousandFiveHundred */
    ERatingScoreCurveType_TenThousand              = 0x3, /* TenThousand */
};

// Original name: ERenderLayer
enum ERenderLayer {
    ERenderLayer_Default      = 0x0, /* Default */
    ERenderLayer_Wall         = 0x1, /* Wall */
    ERenderLayer_Floor        = 0x2, /* Floor */
    ERenderLayer_Bulkhead     = 0x3, /* Bulkhead */
    ERenderLayer_Skeleton     = 0x4, /* Skeleton */
    ERenderLayer_Exterior     = 0x5, /* Exterior */
    ERenderLayer_Hologram     = 0x6, /* Hologram */
    ERenderLayer_NonPlayable  = 0x7, /* NonPlayable */
    ERenderLayer_UIObject     = 0x8, /* UIObject */
    ERenderLayer_DoorUnlocked = 0x9, /* DoorUnlocked */
    ERenderLayer_DoorLocked   = 0xa, /* DoorLocked */
    ERenderLayer_SurfaceWater = 0xb, /* SurfaceWater */
    ERenderLayer_Nominal      = 0xc, /* Nominal */
    ERenderLayer_Moderate     = 0xd, /* Moderate */
    ERenderLayer_Critical     = 0xe, /* Critical */
    ERenderLayer_Disabled     = 0xf, /* Disabled */
};

// Original name: ERenderType
enum ERenderType {
    ERenderType_FORWARD      = 0x0, /* FORWARD */
    ERenderType_TILEDFORWARD = 0x1, /* TILEDFORWARD */
    ERenderType_DEFERRED     = 0x2, /* DEFERRED */
};

// Original name: EReputationChangeReason
enum EReputationChangeReason {
    EReputationChangeReason_UNSPECIFIED = 0x0, /* UNSPECIFIED */
    EReputationChangeReason_INITIALIZED = 0x1, /* INITIALIZED */
    EReputationChangeReason_INCREASED   = 0x2, /* INCREASED */
    EReputationChangeReason_DECREASED   = 0x3, /* DECREASED */
    EReputationChangeReason_SET         = 0x4, /* SET */
    EReputationChangeReason_RESET       = 0x5, /* RESET */
    EReputationChangeReason_STATE       = 0x6, /* STATE */
    EReputationChangeReason_STANDING    = 0x7, /* STANDING */
    EReputationChangeReason_UNDEFINED   = 0x8, /* UNDEFINED */
};

// Original name: EReputationComparisonOperator
enum EReputationComparisonOperator {
    EReputationComparisonOperator_EqualTo              = 0x0, /* EqualTo */
    EReputationComparisonOperator_GreaterThan          = 0x1, /* GreaterThan */
    EReputationComparisonOperator_GreaterThanOrEqualTo = 0x2, /* GreaterThanOrEqualTo */
    EReputationComparisonOperator_LessThan             = 0x3, /* LessThan */
    EReputationComparisonOperator_LessThanOrEqualTo    = 0x4, /* LessThanOrEqualTo */
    EReputationComparisonOperator_UNDEFINED            = 0x5, /* UNDEFINED */
};

// Original name: EReputationEntityType
enum EReputationEntityType {
    EReputationEntityType_Organization = 0x0, /* Organization */
    EReputationEntityType_MissionGiver = 0x1, /* MissionGiver */
    EReputationEntityType_UNDEFINED    = 0x2, /* UNDEFINED */
};

// Original name: EReputationSortOrderEntity
enum EReputationSortOrderEntity {
    EReputationSortOrderEntity_Alphabetical    = 0x0, /* Alphabetical */
    EReputationSortOrderEntity_RecentActivity  = 0x1, /* RecentActivity */
    EReputationSortOrderEntity_PrimaryProgress = 0x2, /* PrimaryProgress */
    EReputationSortOrderEntity_UNDEFINED       = 0x3, /* UNDEFINED */
};

// Original name: EReputationSortOrderScope
enum EReputationSortOrderScope {
    EReputationSortOrderScope_Alphabetical = 0x0, /* Alphabetical */
    EReputationSortOrderScope_ListOrder    = 0x1, /* ListOrder */
    EReputationSortOrderScope_UNDEFINED    = 0x2, /* UNDEFINED */
};

// Original name: ERespawnLocationType
enum ERespawnLocationType {
    ERespawnLocationType_None             = 0x0, /* None */
    ERespawnLocationType_Hospital         = 0x1, /* Hospital */
    ERespawnLocationType_Prison           = 0x2, /* Prison */
    ERespawnLocationType_PrisonExit       = 0x3, /* PrisonExit */
    ERespawnLocationType_CriminalLocation = 0x4, /* CriminalLocation */
    ERespawnLocationType_CriminalHospital = 0x5, /* CriminalHospital */
    ERespawnLocationType_Other            = 0x6, /* Other */
    ERespawnLocationType_UNDEFINED        = 0x7, /* UNDEFINED */
};

// Original name: ERtpcBehaviourType
enum ERtpcBehaviourType {
    ERtpcBehaviourType_None      = 0x0, /* None */
    ERtpcBehaviourType_Lerped    = 0x1, /* Lerped */
    ERtpcBehaviourType_TimeBased = 0x2, /* TimeBased */
    ERtpcBehaviourType_Average   = 0x3, /* Average */
    ERtpcBehaviourType_Capacitor = 0x4, /* Capacitor */
    ERtpcBehaviourType_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: ERuntimeImageSourceType
enum ERuntimeImageSourceType {
    ERuntimeImageSourceType_None          = 0x0, /* None */
    ERuntimeImageSourceType_CommsCall     = 0x1, /* CommsCall */
    ERuntimeImageSourceType_FuelCamera    = 0x2, /* FuelCamera */
    ERuntimeImageSourceType_UserInterface = 0x3, /* UserInterface */
    ERuntimeImageSourceType_InteriorMap   = 0x4, /* InteriorMap */
    ERuntimeImageSourceType_Slot_1        = 0x5, /* Slot_1 */
    ERuntimeImageSourceType_Slot_2        = 0x6, /* Slot_2 */
    ERuntimeImageSourceType_Slot_3        = 0x7, /* Slot_3 */
    ERuntimeImageSourceType_Slot_4        = 0x8, /* Slot_4 */
    ERuntimeImageSourceType_Slot_5        = 0x9, /* Slot_5 */
    ERuntimeImageSourceType_Slot_6        = 0xa, /* Slot_6 */
    ERuntimeImageSourceType_Slot_7        = 0xb, /* Slot_7 */
    ERuntimeImageSourceType_Slot_8        = 0xc, /* Slot_8 */
    ERuntimeImageSourceType_Slot_9        = 0xd, /* Slot_9 */
    ERuntimeImageSourceType_Slot_10       = 0xe, /* Slot_10 */
    ERuntimeImageSourceType_UNDEFINED     = 0xf, /* UNDEFINED */
};

// Original name: ES42StatsComparisonType
enum ES42StatsComparisonType {
    ES42StatsComparisonType_Equal          = 0x0, /* Equal */
    ES42StatsComparisonType_NotEqual       = 0x1, /* NotEqual */
    ES42StatsComparisonType_Greater        = 0x2, /* Greater */
    ES42StatsComparisonType_Less           = 0x3, /* Less */
    ES42StatsComparisonType_GreaterOrEqual = 0x4, /* GreaterOrEqual */
    ES42StatsComparisonType_LessOrEqual    = 0x5, /* LessOrEqual */
    ES42StatsComparisonType_UNDEFINED      = 0x6, /* UNDEFINED */
};

// Original name: ES42StatsOperationType
enum ES42StatsOperationType {
    ES42StatsOperationType_Add       = 0x0, /* Add */
    ES42StatsOperationType_Sub       = 0x1, /* Sub */
    ES42StatsOperationType_Mul       = 0x2, /* Mul */
    ES42StatsOperationType_Div       = 0x3, /* Div */
    ES42StatsOperationType_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: ES42StatsPlayerState
enum ES42StatsPlayerState {
    ES42StatsPlayerState_Any       = 0x0, /* Any */
    ES42StatsPlayerState_OnFoot    = 0x1, /* OnFoot */
    ES42StatsPlayerState_InShip    = 0x2, /* InShip */
    ES42StatsPlayerState_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: ES42StatsType
enum ES42StatsType {
    ES42StatsType_EnemyKills        = 0x0, /* EnemyKills */
    ES42StatsType_ShipKills         = 0x1, /* ShipKills */
    ES42StatsType_GroundKills       = 0x2, /* GroundKills */
    ES42StatsType_FriendlyFireHits  = 0x3, /* FriendlyFireHits */
    ES42StatsType_WeaponShots       = 0x4, /* WeaponShots */
    ES42StatsType_WeaponHits        = 0x5, /* WeaponHits */
    ES42StatsType_MissileShots      = 0x6, /* MissileShots */
    ES42StatsType_MissileHits       = 0x7, /* MissileHits */
    ES42StatsType_HeadShots         = 0x8, /* HeadShots */
    ES42StatsType_Consumable        = 0x9, /* Consumable */
    ES42StatsType_FriendlyFireMelee = 0xa, /* FriendlyFireMelee */
    ES42StatsType_UNDEFINED         = 0xb, /* UNDEFINED */
};

// Original name: ESCItemDisplayScreenLightType
enum ESCItemDisplayScreenLightType {
    ESCItemDisplayScreenLightType_None      = 0x0, /* None */
    ESCItemDisplayScreenLightType_Omni      = 0x1, /* Omni */
    ESCItemDisplayScreenLightType_SoftOmni  = 0x2, /* SoftOmni */
    ESCItemDisplayScreenLightType_Projector = 0x3, /* Projector */
    ESCItemDisplayScreenLightType_Planar    = 0x4, /* Planar */
    ESCItemDisplayScreenLightType_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: ESCItemDisplayScreenState
enum ESCItemDisplayScreenState {
    ESCItemDisplayScreenState_None           = 0x0, /* None */
    ESCItemDisplayScreenState_NoSignal       = 0x1, /* NoSignal */
    ESCItemDisplayScreenState_NoPower        = 0x2, /* NoPower */
    ESCItemDisplayScreenState_Normal         = 0x3, /* Normal */
    ESCItemDisplayScreenState_Emergency      = 0x4, /* Emergency */
    ESCItemDisplayScreenState_Auxiliary      = 0x5, /* Auxiliary */
    ESCItemDisplayScreenState_CustomOverride = 0x6, /* CustomOverride */
    ESCItemDisplayScreenState_UNDEFINED      = 0x7, /* UNDEFINED */
};

// Original name: ESCItemDisplayScreenUIModel
enum ESCItemDisplayScreenUIModel {
    ESCItemDisplayScreenUIModel_Provider  = 0x0, /* Provider */
    ESCItemDisplayScreenUIModel_Consumer  = 0x1, /* Consumer */
    ESCItemDisplayScreenUIModel_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: ESCItemElevatorPathNodeType
enum ESCItemElevatorPathNodeType {
    ESCItemElevatorPathNodeType_Stop      = 0x0, /* Stop */
    ESCItemElevatorPathNodeType_WayPoint  = 0x1, /* WayPoint */
    ESCItemElevatorPathNodeType_Teleport  = 0x2, /* Teleport */
    ESCItemElevatorPathNodeType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: ESCScreenType
enum ESCScreenType {
    ESCScreenType_MFD_16_9          = 0x0, /* MFD_16_9 */
    ESCScreenType_MFD_4_3           = 0x1, /* MFD_4_3 */
    ESCScreenType_Support_16_9      = 0x2, /* Support_16_9 */
    ESCScreenType_Support_1_1       = 0x3, /* Support_1_1 */
    ESCScreenType_Support_Bespoke_1 = 0x4, /* Support_Bespoke_1 */
    ESCScreenType_Support_Bespoke_2 = 0x5, /* Support_Bespoke_2 */
    ESCScreenType_HeadUpDisplay     = 0x6, /* HeadUpDisplay */
    ESCScreenType_Annunciator       = 0x7, /* Annunciator */
    ESCScreenType_Visor             = 0x8, /* Visor */
    ESCScreenType_Radar3DScreen     = 0x9, /* Radar3DScreen */
    ESCScreenType_UNDEFINED         = 0xa, /* UNDEFINED */
};

// Original name: ESDFSetTypes
enum ESDFSetTypes {
    ESDFSetTypes_Shield = 0x1, /* Shield */
};

// Original name: ESalvageRepairMode
enum ESalvageRepairMode {
    ESalvageRepairMode_Salvage = 0x0, /* Salvage */
    ESalvageRepairMode_Repair  = 0x1, /* Repair */
};

// Original name: EScanCategory
enum EScanCategory {
    EScanCategory_Affiliation = 0x0, /* Affiliation */
    EScanCategory_General     = 0x1, /* General */
    EScanCategory_Physical    = 0x2, /* Physical */
    EScanCategory_Signatures  = 0x3, /* Signatures */
    EScanCategory_ScanSystem  = 0x4, /* ScanSystem */
};

// Original name: EScanDisplaySection
enum EScanDisplaySection {
    EScanDisplaySection_Boxout   = 0x0, /* Boxout */
    EScanDisplaySection_Overview = 0x1, /* Overview */
    EScanDisplaySection_Exterior = 0x2, /* Exterior */
    EScanDisplaySection_Interior = 0x3, /* Interior */
};

// Original name: EScanDisplayVariable
enum EScanDisplayVariable {
    EScanDisplayVariable_Header    = 0x0, /* Header */
    EScanDisplayVariable_Body      = 0x1, /* Body */
    EScanDisplayVariable_Capacity  = 0x2, /* Capacity */
    EScanDisplayVariable_Extension = 0x3, /* Extension */
};

// Original name: EScanDisplayVariableAuxiliaryType
enum EScanDisplayVariableAuxiliaryType {
    EScanDisplayVariableAuxiliaryType_None          = 0x0, /* None */
    EScanDisplayVariableAuxiliaryType_ShipRegNumber = 0x1, /* ShipRegNumber */
};

// Original name: EScanInformation
enum EScanInformation {
    EScanInformation_ActorStatus                 = 0x0, /* ActorStatus */
    EScanInformation_CargoAmount                 = 0x1, /* CargoAmount */
    EScanInformation_CargoAmountLoose            = 0x2, /* CargoAmountLoose */
    EScanInformation_Classification              = 0x3, /* Classification */
    EScanInformation_Commodity                   = 0x4, /* Commodity */
    EScanInformation_ContactType                 = 0x5, /* ContactType */
    EScanInformation_Callout1                    = 0x6, /* Callout1 */
    EScanInformation_Callout2                    = 0x7, /* Callout2 */
    EScanInformation_Callout3                    = 0x8, /* Callout3 */
    EScanInformation_CauseOfDeath                = 0x9, /* CauseOfDeath */
    EScanInformation_CommsChannelStatus          = 0xa, /* CommsChannelStatus */
    EScanInformation_DeltaSignature              = 0xb, /* DeltaSignature */
    EScanInformation_Description                 = 0xc, /* Description */
    EScanInformation_DisplaySection              = 0xd, /* DisplaySection */
    EScanInformation_DoorLocked                  = 0xe, /* DoorLocked */
    EScanInformation_DoorOpen                    = 0xf, /* DoorOpen */
    EScanInformation_DriverOrganization          = 0x10, /* DriverOrganization */
    EScanInformation_DriverName                  = 0x11, /* DriverName */
    EScanInformation_EntityId                    = 0x12, /* EntityId */
    EScanInformation_EntityClass                 = 0x13, /* EntityClass */
    EScanInformation_ID                          = 0x14, /* ID */
    EScanInformation_Instability                 = 0x15, /* Instability */
    EScanInformation_InventoryAmount             = 0x16, /* InventoryAmount */
    EScanInformation_ItemType                    = 0x17, /* ItemType */
    EScanInformation_ItemStatus                  = 0x18, /* ItemStatus */
    EScanInformation_Jurisdiction                = 0x19, /* Jurisdiction */
    EScanInformation_LastScanned                 = 0x1a, /* LastScanned */
    EScanInformation_LegalOwnerEntityId          = 0x1b, /* LegalOwnerEntityId */
    EScanInformation_LegalOwnerFlagged           = 0x1c, /* LegalOwnerFlagged */
    EScanInformation_LegalOwnerName              = 0x1d, /* LegalOwnerName */
    EScanInformation_LegalOwnerOrganization      = 0x1e, /* LegalOwnerOrganization */
    EScanInformation_Hackable                    = 0x1f, /* Hackable */
    EScanInformation_Health                      = 0x20, /* Health */
    EScanInformation_Mass                        = 0x21, /* Mass */
    EScanInformation_MasterMode                  = 0x22, /* MasterMode */
    EScanInformation_MineablePercentageTotal     = 0x23, /* MineablePercentageTotal */
    EScanInformation_MineablePercentageValuables = 0x24, /* MineablePercentageValuables */
    EScanInformation_Model                       = 0x25, /* Model */
    EScanInformation_Name                        = 0x26, /* Name */
    EScanInformation_OptimalPowerWindowLow       = 0x27, /* OptimalPowerWindowLow */
    EScanInformation_OptimalPowerWindowHigh      = 0x28, /* OptimalPowerWindowHigh */
    EScanInformation_OtherTrauma1                = 0x29, /* OtherTrauma1 */
    EScanInformation_OtherTrauma2                = 0x2a, /* OtherTrauma2 */
    EScanInformation_OtherTrauma3                = 0x2b, /* OtherTrauma3 */
    EScanInformation_OtherTrauma4                = 0x2c, /* OtherTrauma4 */
    EScanInformation_PassengerCount              = 0x2d, /* PassengerCount */
    EScanInformation_PowerAvailability           = 0x2e, /* PowerAvailability */
    EScanInformation_PowerSwitch                 = 0x2f, /* PowerSwitch */
    EScanInformation_PowerTransferResistance     = 0x30, /* PowerTransferResistance */
    EScanInformation_Priority                    = 0x31, /* Priority */
    EScanInformation_Resource                    = 0x32, /* Resource */
    EScanInformation_Role                        = 0x33, /* Role */
    EScanInformation_ScanFullyCompleted          = 0x34, /* ScanFullyCompleted */
    EScanInformation_ScanProcedureBits           = 0x35, /* ScanProcedureBits */
    EScanInformation_ScanTimeStamp               = 0x36, /* ScanTimeStamp */
    EScanInformation_ScanToken                   = 0x37, /* ScanToken */
    EScanInformation_SelfDestructFlagged         = 0x38, /* SelfDestructFlagged */
    EScanInformation_SignatureIR                 = 0x39, /* SignatureIR */
    EScanInformation_SignatureCS                 = 0x3a, /* SignatureCS */
    EScanInformation_SignatureEM                 = 0x3b, /* SignatureEM */
    EScanInformation_SignatureRS                 = 0x3c, /* SignatureRS */
    EScanInformation_Species                     = 0x3d, /* Species */
    EScanInformation_Stolen                      = 0x3e, /* Stolen */
    EScanInformation_SubType                     = 0x3f, /* SubType */
    EScanInformation_Type                        = 0x40, /* Type */
    EScanInformation_Value                       = 0x41, /* Value */
    EScanInformation_Volatility                  = 0x42, /* Volatility */
    EScanInformation_WantedLevel                 = 0x43, /* WantedLevel */
    EScanInformation_MissionId                   = 0x44, /* MissionId */
};

// Original name: EScanProcedure
enum EScanProcedure {
    EScanProcedure_Armor                   = 0x0, /* Armor */
    EScanProcedure_CargoCommodities        = 0x1, /* CargoCommodities */
    EScanProcedure_Classification          = 0x2, /* Classification */
    EScanProcedure_CommsTap                = 0x3, /* CommsTap */
    EScanProcedure_ContactType             = 0x4, /* ContactType */
    EScanProcedure_Custom                  = 0x5, /* Custom */
    EScanProcedure_Death                   = 0x6, /* Death */
    EScanProcedure_Description             = 0x7, /* Description */
    EScanProcedure_Door                    = 0x8, /* Door */
    EScanProcedure_Driver                  = 0x9, /* Driver */
    EScanProcedure_Emissions               = 0xa, /* Emissions */
    EScanProcedure_Faction                 = 0xb, /* Faction */
    EScanProcedure_Instability             = 0xc, /* Instability */
    EScanProcedure_InventoryContents       = 0xd, /* InventoryContents */
    EScanProcedure_Jurisdiction            = 0xe, /* Jurisdiction */
    EScanProcedure_LegalOwner              = 0xf, /* LegalOwner */
    EScanProcedure_Hackable                = 0x10, /* Hackable */
    EScanProcedure_Health                  = 0x11, /* Health */
    EScanProcedure_Mass                    = 0x12, /* Mass */
    EScanProcedure_MineableCommodities     = 0x13, /* MineableCommodities */
    EScanProcedure_Name                    = 0x14, /* Name */
    EScanProcedure_OptimalPowerWindow      = 0x15, /* OptimalPowerWindow */
    EScanProcedure_Passenger               = 0x16, /* Passenger */
    EScanProcedure_Power                   = 0x17, /* Power */
    EScanProcedure_PowerTransferResistance = 0x18, /* PowerTransferResistance */
    EScanProcedure_Species                 = 0x19, /* Species */
    EScanProcedure_Status                  = 0x1a, /* Status */
    EScanProcedure_Stolen                  = 0x1b, /* Stolen */
    EScanProcedure_SubItems                = 0x1c, /* SubItems */
    EScanProcedure_VehicleModel            = 0x1d, /* VehicleModel */
    EScanProcedure_VehicleRole             = 0x1e, /* VehicleRole */
    EScanProcedure_VehicleSelfDestruct     = 0x1f, /* VehicleSelfDestruct */
    EScanProcedure_VehicleMasterMode       = 0x20, /* VehicleMasterMode */
    EScanProcedure_WantedLevel             = 0x21, /* WantedLevel */
};

// Original name: EScanSortType
enum EScanSortType {
    EScanSortType_Less    = 0x0, /* Less */
    EScanSortType_Greater = 0x1, /* Greater */
};

// Original name: EScanTable
enum EScanTable {
    EScanTable_Self                = 0x0, /* Self */
    EScanTable_CargoCommodities    = 0x1, /* CargoCommodities */
    EScanTable_Custom              = 0x2, /* Custom */
    EScanTable_MineableCommodities = 0x3, /* MineableCommodities */
    EScanTable_Passengers          = 0x4, /* Passengers */
    EScanTable_SubItems            = 0x5, /* SubItems */
    EScanTable_InventoryContents   = 0x6, /* InventoryContents */
    EScanTable_CommsChannels       = 0x7, /* CommsChannels */
    EScanTable_Armor               = 0x8, /* Armor */
};

// Original name: EScanType
enum EScanType {
    EScanType_AIAutoScan     = 0x0, /* AIAutoScan */
    EScanType_FocalPointScan = 0x1, /* FocalPointScan */
    EScanType_PassiveScan    = 0x2, /* PassiveScan */
    EScanType_PingBroadScan  = 0x3, /* PingBroadScan */
    EScanType_PingFocusScan  = 0x4, /* PingFocusScan */
};

// Original name: EScopeType
enum EScopeType {
    EScopeType_None        = 0x0, /* None */
    EScopeType_Zoom        = 0x1, /* Zoom */
    EScopeType_Nightvision = 0x2, /* Nightvision */
};

// Original name: EScoreDisplayType
enum EScoreDisplayType {
    EScoreDisplayType_Score  = 0x0, /* Score */
    EScoreDisplayType_Rounds = 0x1, /* Rounds */
};

// Original name: EScoreUIType
enum EScoreUIType {
    EScoreUIType_NONE      = 0x0, /* NONE */
    EScoreUIType_Primary   = 0x1, /* Primary */
    EScoreUIType_Secondary = 0x2, /* Secondary */
};

// Original name: EScoreboardType
enum EScoreboardType {
    EScoreboardType_TotalScore      = 0x0, /* TotalScore */
    EScoreboardType_ObjectivePoints = 0x1, /* ObjectivePoints */
    EScoreboardType_Kills           = 0x2, /* Kills */
    EScoreboardType_Deaths          = 0x3, /* Deaths */
    EScoreboardType_Assists         = 0x4, /* Assists */
    EScoreboardType_CompletedLaps   = 0x5, /* CompletedLaps */
    EScoreboardType_FastestLapTime  = 0x6, /* FastestLapTime */
    EScoreboardType_RacePosition    = 0x7, /* RacePosition */
    EScoreboardType_GunGameLevel    = 0x8, /* GunGameLevel */
};

// Original name: ESeatAccessConditionType
enum ESeatAccessConditionType {
    ESeatAccessConditionType_True   = 0x0, /* True */
    ESeatAccessConditionType_False  = 0x1, /* False */
    ESeatAccessConditionType_Either = 0x2, /* Either */
};

// Original name: ESeatAccessEntranceDependencyType
enum ESeatAccessEntranceDependencyType {
    ESeatAccessEntranceDependencyType_Never  = 0x0, /* Never */
    ESeatAccessEntranceDependencyType_Exit   = 0x1, /* Exit */
    ESeatAccessEntranceDependencyType_Enter  = 0x2, /* Enter */
    ESeatAccessEntranceDependencyType_Always = 0x3, /* Always */
};

// Original name: ESeatAccessPassageCondition
enum ESeatAccessPassageCondition {
    ESeatAccessPassageCondition_InteriorOnly = 0x0, /* InteriorOnly */
    ESeatAccessPassageCondition_ExteriorOnly = 0x1, /* ExteriorOnly */
    ESeatAccessPassageCondition_Either       = 0x2, /* Either */
};

// Original name: ESeatViewType
enum ESeatViewType {
    ESeatViewType_Background = 0x0, /* Background */
    ESeatViewType_Comms      = 0x1, /* Comms */
    ESeatViewType_Cooler     = 0x2, /* Cooler */
    ESeatViewType_Energy     = 0x3, /* Energy */
    ESeatViewType_Flight     = 0x4, /* Flight */
    ESeatViewType_Missile    = 0x5, /* Missile */
    ESeatViewType_Quantum    = 0x6, /* Quantum */
    ESeatViewType_Shield     = 0x7, /* Shield */
    ESeatViewType_Target     = 0x8, /* Target */
    ESeatViewType_Weapon     = 0x9, /* Weapon */
    ESeatViewType_Wheeled    = 0xa, /* Wheeled */
    ESeatViewType_Scanner    = 0xb, /* Scanner */
};

// Original name: ESecurityNetworkPermissionValue
enum ESecurityNetworkPermissionValue {
    ESecurityNetworkPermissionValue_Inherit   = 0x0, /* Inherit */
    ESecurityNetworkPermissionValue_Yes       = 0x1, /* Yes */
    ESecurityNetworkPermissionValue_No        = 0x2, /* No */
    ESecurityNetworkPermissionValue_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: ESelectionBehaviour
enum ESelectionBehaviour {
    ESelectionBehaviour_KeepAllSelected              = 0x0, /* KeepAllSelected */
    ESelectionBehaviour_EquipAndUnselectAll          = 0x1, /* EquipAndUnselectAll */
    ESelectionBehaviour_EquipAndKeepItemPortSelected = 0x2, /* EquipAndKeepItemPortSelected */
    ESelectionBehaviour_EquipAndKeepItemSelected     = 0x3, /* EquipAndKeepItemSelected */
    ESelectionBehaviour_EquipAndKeepFirstSelection   = 0x4, /* EquipAndKeepFirstSelection */
    ESelectionBehaviour_EquipAndKeepLastSelection    = 0x5, /* EquipAndKeepLastSelection */
    ESelectionBehaviour_UNDEFINED                    = 0x6, /* UNDEFINED */
};

// Original name: ESequenceMode
enum ESequenceMode {
    ESequenceMode_Individually  = 0x0, /* Individually */
    ESequenceMode_Automatically = 0x1, /* Automatically */
    ESequenceMode_Looping       = 0x2, /* Looping */
};

// Original name: EServiceBeaconType
enum EServiceBeaconType {
    EServiceBeaconType_None              = 0x0, /* None */
    EServiceBeaconType_PersonalTransport = 0x1, /* PersonalTransport */
    EServiceBeaconType_CombatAssistance  = 0x2, /* CombatAssistance */
    EServiceBeaconType_Escort            = 0x3, /* Escort */
    EServiceBeaconType_Heal              = 0x4, /* Heal */
    EServiceBeaconType_Revive            = 0x5, /* Revive */
    EServiceBeaconType_Refuel            = 0x6, /* Refuel */
};

// Original name: EShipComputerMode
enum EShipComputerMode {
    EShipComputerMode_Default   = 0x0, /* Default */
    EShipComputerMode_Race      = 0x1, /* Race */
    EShipComputerMode_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EShipState
enum EShipState {
    EShipState_Grounded  = 0x0, /* Grounded */
    EShipState_Flying    = 0x1, /* Flying */
    EShipState_Both      = 0x2, /* Both */
    EShipState_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: ESignatureType
enum ESignatureType {
    ESignatureType_Infrared        = 0x0, /* Infrared */
    ESignatureType_Electromagnetic = 0x1, /* Electromagnetic */
    ESignatureType_CrossSection    = 0x2, /* CrossSection */
    ESignatureType_Decibel         = 0x3, /* Decibel */
    ESignatureType_Resource        = 0x4, /* Resource */
    ESignatureType_Identity        = 0x5, /* Identity */
    ESignatureType_CommsSignal     = 0x6, /* CommsSignal */
    ESignatureType_Interactable    = 0x7, /* Interactable */
};

// Original name: ESilhouetteColourSource
enum ESilhouetteColourSource {
    ESilhouetteColourSource_HDRTarget = 0x0, /* HDRTarget */
    ESilhouetteColourSource_PerObject = 0x1, /* PerObject */
};

// Original name: ESimulationClampType
enum ESimulationClampType {
    ESimulationClampType_Disabled              = 0x0, /* Disabled */
    ESimulationClampType_PendulumCone          = 0x1, /* PendulumCone */
    ESimulationClampType_PendulumHingePlane    = 0x2, /* PendulumHingePlane */
    ESimulationClampType_PendulumHalfCone      = 0x3, /* PendulumHalfCone */
    ESimulationClampType_SpringEllipsoid       = 0x4, /* SpringEllipsoid */
    ESimulationClampType_TranslationProjection = 0x5, /* TranslationProjection */
    ESimulationClampType_UNDEFINED             = 0x6, /* UNDEFINED */
};

// Original name: ESlottingMode
enum ESlottingMode {
    ESlottingMode_EnabledOnSlotting       = 0x0, /* EnabledOnSlotting */
    ESlottingMode_DisabledOnSlotting      = 0x1, /* DisabledOnSlotting */
    ESlottingMode_EnabledOnAndOffSlotting = 0x2, /* EnabledOnAndOffSlotting */
    ESlottingMode_UNDEFINED               = 0x3, /* UNDEFINED */
};

// Original name: ESoftbodySubstepMode
enum ESoftbodySubstepMode {
    ESoftbodySubstepMode_FullSubstep          = 0x0, /* FullSubstep */
    ESoftbodySubstepMode_FullSubstep_SingleCD = 0x1, /* FullSubstep_SingleCD */
    ESoftbodySubstepMode_Iteration            = 0x2, /* Iteration */
};

// Original name: ESoftbodyVisualBindingMode
enum ESoftbodyVisualBindingMode {
    ESoftbodyVisualBindingMode_Planar     = 0x0, /* Planar */
    ESoftbodyVisualBindingMode_Volumetric = 0x1, /* Volumetric */
    ESoftbodyVisualBindingMode_Spline     = 0x2, /* Spline */
};

// Original name: ESoundInputs
enum ESoundInputs {
    ESoundInputs_FloatParam = 0x0, /* FloatParam */
    ESoundInputs_Enable     = 0x1, /* Enable */
    ESoundInputs_Disable    = 0x2, /* Disable */
    ESoundInputs_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: ESpecialEffectsType
enum ESpecialEffectsType {
    ESpecialEffectsType_ReloadFull  = 0x0, /* ReloadFull */
    ESpecialEffectsType_ReloadCheck = 0x1, /* ReloadCheck */
    ESpecialEffectsType_ReloadEmpty = 0x2, /* ReloadEmpty */
};

// Original name: ESpectatorMode
enum ESpectatorMode {
    ESpectatorMode_SM_Fixed       = 0x1, /* SM_Fixed */
    ESpectatorMode_SM_Free        = 0x2, /* SM_Free */
    ESpectatorMode_SM_Cinematic   = 0x3, /* SM_Cinematic */
    ESpectatorMode_SM_Follow      = 0x4, /* SM_Follow */
    ESpectatorMode_SM_FirstPerson = 0x5, /* SM_FirstPerson */
};

// Original name: ESpikeOperationType
enum ESpikeOperationType {
    ESpikeOperationType_Add      = 0x0, /* Add */
    ESpikeOperationType_Multiply = 0x1, /* Multiply */
};

// Original name: ESpinActivationMode
enum ESpinActivationMode {
    ESpinActivationMode_Fire     = 0x0, /* Fire */
    ESpinActivationMode_Procclip = 0x1, /* Procclip */
};

// Original name: EStarGalaPaths
enum EStarGalaPaths {
    EStarGalaPaths_formationPath1     = 0x0, /* formationPath1 */
    EStarGalaPaths_formationPath2     = 0x1, /* formationPath2 */
    EStarGalaPaths_formationPath3     = 0x2, /* formationPath3 */
    EStarGalaPaths_formationPath4     = 0x3, /* formationPath4 */
    EStarGalaPaths_challengeStage1    = 0x4, /* challengeStage1 */
    EStarGalaPaths_challengeStage2    = 0x5, /* challengeStage2 */
    EStarGalaPaths_challengeStage3    = 0x6, /* challengeStage3 */
    EStarGalaPaths_challengeStage4    = 0x7, /* challengeStage4 */
    EStarGalaPaths_challengeStage5    = 0x8, /* challengeStage5 */
    EStarGalaPaths_challengeStage6    = 0x9, /* challengeStage6 */
    EStarGalaPaths_challengeStage7    = 0xa, /* challengeStage7 */
    EStarGalaPaths_challengeStage8    = 0xb, /* challengeStage8 */
    EStarGalaPaths_challengeStage9_1  = 0xc, /* challengeStage9_1 */
    EStarGalaPaths_challengeStage9_2  = 0xd, /* challengeStage9_2 */
    EStarGalaPaths_challengeStage10_1 = 0xe, /* challengeStage10_1 */
    EStarGalaPaths_challengeStage10_2 = 0xf, /* challengeStage10_2 */
    EStarGalaPaths_challengeStage11   = 0x10, /* challengeStage11 */
    EStarGalaPaths_challengeStage12   = 0x11, /* challengeStage12 */
    EStarGalaPaths_challengeStage13_1 = 0x12, /* challengeStage13_1 */
    EStarGalaPaths_challengeStage13_2 = 0x13, /* challengeStage13_2 */
    EStarGalaPaths_challengeStage13_3 = 0x14, /* challengeStage13_3 */
    EStarGalaPaths_challengeStage13_4 = 0x15, /* challengeStage13_4 */
    EStarGalaPaths_challengeStage14   = 0x16, /* challengeStage14 */
    EStarGalaPaths_challengeStage15   = 0x17, /* challengeStage15 */
    EStarGalaPaths_challengeStage16   = 0x18, /* challengeStage16 */
    EStarGalaPaths_UNDEFINED          = 0x19, /* UNDEFINED */
};

// Original name: EStatCompareMode
enum EStatCompareMode {
    EStatCompareMode_MoreIsBetter = 0x0, /* MoreIsBetter */
    EStatCompareMode_LessIsBetter = 0x1, /* LessIsBetter */
    EStatCompareMode_Neutral      = 0x2, /* Neutral */
    EStatCompareMode_UNDEFINED    = 0x3, /* UNDEFINED */
};

// Original name: EStatType
enum EStatType {
    EStatType_OnFoot = 0x0, /* OnFoot */
    EStatType_Seated = 0x1, /* Seated */
    EStatType_Size   = 0x2, /* Size */
};

// Original name: ESuggestedFOVMode
enum ESuggestedFOVMode {
    ESuggestedFOVMode_SuggestedFOVMode_None          = 0x0, /* SuggestedFOVMode_None */
    ESuggestedFOVMode_SuggestedFOVMode_ForceAlways   = 0x1, /* SuggestedFOVMode_ForceAlways */
    ESuggestedFOVMode_SuggestedFOVMode_ApplyIfBigger = 0x2, /* SuggestedFOVMode_ApplyIfBigger */
    ESuggestedFOVMode_SuggestedFOVMode_ApplyIfLower  = 0x3, /* SuggestedFOVMode_ApplyIfLower */
};

// Original name: ESunShadowMode
enum ESunShadowMode {
    ESunShadowMode_Upto_20m                 = 0x0, /* Upto_20m */
    ESunShadowMode_Upto_100m                = 0x1, /* Upto_100m */
    ESunShadowMode_Upto_400m                = 0x2, /* Upto_400m */
    ESunShadowMode_Upto_2000m               = 0x3, /* Upto_2000m */
    ESunShadowMode_Upto_2000m_AND_Heightmap = 0x4, /* Upto_2000m_AND_Heightmap */
    ESunShadowMode_Heightmap_Only           = 0x5, /* Heightmap_Only */
    ESunShadowMode_UNDEFINED                = 0x6, /* UNDEFINED */
};

// Original name: EThrowMode
enum EThrowMode {
    EThrowMode_Undefined       = 0x0, /* Undefined */
    EThrowMode_OverhandThrow   = 0x1, /* OverhandThrow */
    EThrowMode_UnderhandThrow  = 0x2, /* UnderhandThrow */
    EThrowMode_Drop            = 0x3, /* Drop */
    EThrowMode_Place           = 0x4, /* Place */
    EThrowMode_InteractionMode = 0x5, /* InteractionMode */
    EThrowMode_TwoHandedThrow  = 0x6, /* TwoHandedThrow */
};

// Original name: EThrowPerceptionSound
enum EThrowPerceptionSound {
    EThrowPerceptionSound_SmallSound = 0x0, /* SmallSound */
    EThrowPerceptionSound_LargeSound = 0x1, /* LargeSound */
};

// Original name: EThrusterAnimDriver
enum EThrusterAnimDriver {
    EThrusterAnimDriver_ThrustWithAfterburner = 0x0, /* ThrustWithAfterburner */
    EThrusterAnimDriver_Thrust                = 0x1, /* Thrust */
    EThrusterAnimDriver_Velocity              = 0x2, /* Velocity */
    EThrusterAnimDriver_ForwardOnlyVelocity   = 0x3, /* ForwardOnlyVelocity */
    EThrusterAnimDriver_Nutcracker            = 0x4, /* Nutcracker */
    EThrusterAnimDriver_UNDEFINED             = 0x5, /* UNDEFINED */
};

// Original name: EThrusterFlag
enum EThrusterFlag {
    EThrusterFlag_StrafeForward = 0x0, /* StrafeForward */
    EThrusterFlag_StrafeBack    = 0x1, /* StrafeBack */
    EThrusterFlag_StrafeLeft    = 0x2, /* StrafeLeft */
    EThrusterFlag_StrafeRight   = 0x3, /* StrafeRight */
    EThrusterFlag_StrafeUp      = 0x4, /* StrafeUp */
    EThrusterFlag_StrafeDown    = 0x5, /* StrafeDown */
    EThrusterFlag_YawLeft       = 0x6, /* YawLeft */
    EThrusterFlag_YawRight      = 0x7, /* YawRight */
    EThrusterFlag_PitchUp       = 0x8, /* PitchUp */
    EThrusterFlag_PitchDown     = 0x9, /* PitchDown */
    EThrusterFlag_RollLeft      = 0xa, /* RollLeft */
    EThrusterFlag_RollRight     = 0xb, /* RollRight */
    EThrusterFlag_UNDEFINED     = 0xc, /* UNDEFINED */
};

// Original name: EThrusterOutputData
enum EThrusterOutputData {
    EThrusterOutputData_FireStrength         = 0x0, /* FireStrength */
    EThrusterOutputData_FireStrengthSmoothed = 0x1, /* FireStrengthSmoothed */
    EThrusterOutputData_AfterburnerEnabled   = 0x2, /* AfterburnerEnabled */
    EThrusterOutputData_LastFuelRequested    = 0x3, /* LastFuelRequested */
    EThrusterOutputData_LastFuelReceived     = 0x4, /* LastFuelReceived */
    EThrusterOutputData_HealthRatio          = 0x5, /* HealthRatio */
    EThrusterOutputData_MisfireThrustRatio   = 0x6, /* MisfireThrustRatio */
    EThrusterOutputData_MisfireState         = 0x7, /* MisfireState */
    EThrusterOutputData_TemperatureRatio     = 0x8, /* TemperatureRatio */
    EThrusterOutputData_IsOverheating        = 0x9, /* IsOverheating */
    EThrusterOutputData_IsOverheated         = 0xa, /* IsOverheated */
    EThrusterOutputData_PowerRatio           = 0xb, /* PowerRatio */
    EThrusterOutputData_UNDEFINED            = 0xc, /* UNDEFINED */
};

// Original name: EThrusterType
enum EThrusterType {
    EThrusterType_Maneuver  = 0x0, /* Maneuver */
    EThrusterType_Main      = 0x1, /* Main */
    EThrusterType_Retro     = 0x2, /* Retro */
    EThrusterType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: ETriggerDefaultActions
enum ETriggerDefaultActions {
    ETriggerDefaultActions_pc_item_primary   = 0x0, /* pc_item_primary */
    ETriggerDefaultActions_pc_item_secondary = 0x1, /* pc_item_secondary */
    ETriggerDefaultActions_UNDEFINED         = 0x2, /* UNDEFINED */
};

// Original name: ETurbulentPassEA
enum ETurbulentPassEA {
    ETurbulentPassEA_EA_BattleRoyale        = 0x1, /* EA_BattleRoyale */
    ETurbulentPassEA_EA_FreeFlight          = 0x2, /* EA_FreeFlight */
    ETurbulentPassEA_EA_PirateSwarm         = 0x4, /* EA_PirateSwarm */
    ETurbulentPassEA_EA_SquadronBattle      = 0x8, /* EA_SquadronBattle */
    ETurbulentPassEA_EA_VanduulSwarm        = 0x10, /* EA_VanduulSwarm */
    ETurbulentPassEA_EA_ClassicRace         = 0x20, /* EA_ClassicRace */
    ETurbulentPassEA_EA_Elimination         = 0x40, /* EA_Elimination */
    ETurbulentPassEA_EA_TeamElimination     = 0x80, /* EA_TeamElimination */
    ETurbulentPassEA_EA_Control             = 0x100, /* EA_Control */
    ETurbulentPassEA_EA_TheatersOfWar       = 0x200, /* EA_TheatersOfWar */
    ETurbulentPassEA_EA_IterativeTesting    = 0x400, /* EA_IterativeTesting */
    ETurbulentPassEA_EA_Duel                = 0x800, /* EA_Duel */
    ETurbulentPassEA_EA_FPSGunGame          = 0x1000, /* EA_FPSGunGame */
    ETurbulentPassEA_EA_Horde               = 0x2000, /* EA_Horde */
    ETurbulentPassEA_EA_VanduulInvasion     = 0x4000, /* EA_VanduulInvasion */
    ETurbulentPassEA_EA_ExperimentalMode_1  = 0x8000, /* EA_ExperimentalMode_1 */
    ETurbulentPassEA_EA_ExperimentalMode_2  = 0x10000, /* EA_ExperimentalMode_2 */
    ETurbulentPassEA_EA_ExperimentalMode_3  = 0x20000, /* EA_ExperimentalMode_3 */
    ETurbulentPassEA_EA_ExperimentalMode_4  = 0x40000, /* EA_ExperimentalMode_4 */
    ETurbulentPassEA_EA_ExperimentalMode_5  = 0x80000, /* EA_ExperimentalMode_5 */
    ETurbulentPassEA_EA_ExperimentalMode_6  = 0x100000, /* EA_ExperimentalMode_6 */
    ETurbulentPassEA_EA_ExperimentalMode_7  = 0x200000, /* EA_ExperimentalMode_7 */
    ETurbulentPassEA_EA_ExperimentalMode_8  = 0x400000, /* EA_ExperimentalMode_8 */
    ETurbulentPassEA_EA_ExperimentalMode_9  = 0x800000, /* EA_ExperimentalMode_9 */
    ETurbulentPassEA_EA_ExperimentalMode_10 = 0x1000000, /* EA_ExperimentalMode_10 */
    ETurbulentPassEA_EA_ExperimentalMode_11 = 0x2000000, /* EA_ExperimentalMode_11 */
    ETurbulentPassEA_EA_ExperimentalMode_12 = 0x4000000, /* EA_ExperimentalMode_12 */
    ETurbulentPassEA_EA_GravRace            = 0x8000000, /* EA_GravRace */
    ETurbulentPassEA_Subscriber             = 0x20000000, /* Subscriber */
    ETurbulentPassEA_EA_SpecialEvent        = 0x40000000, /* EA_SpecialEvent */
};

// Original name: ETurretRotationStyle
enum ETurretRotationStyle {
    ETurretRotationStyle_SingleAxis = 0x0, /* SingleAxis */
    ETurretRotationStyle_MultiAxis  = 0x1, /* MultiAxis */
};

// Original name: EUsableEntrySelectionType
enum EUsableEntrySelectionType {
    EUsableEntrySelectionType_FirstFound = 0x0, /* FirstFound */
    EUsableEntrySelectionType_Closest    = 0x1, /* Closest */
    EUsableEntrySelectionType_Farthest   = 0x2, /* Farthest */
    EUsableEntrySelectionType_Random     = 0x3, /* Random */
    EUsableEntrySelectionType_UNDEFINED  = 0x4, /* UNDEFINED */
};

// Original name: EUsableSelectionMethod
enum EUsableSelectionMethod {
    EUsableSelectionMethod_Priority  = 0x0, /* Priority */
    EUsableSelectionMethod_Random    = 0x1, /* Random */
    EUsableSelectionMethod_Closest   = 0x2, /* Closest */
    EUsableSelectionMethod_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EUsableSequencerTaskType
enum EUsableSequencerTaskType {
    EUsableSequencerTaskType_AssignLoadoutToContainer = 0x0, /* AssignLoadoutToContainer */
    EUsableSequencerTaskType_Delink                   = 0x1, /* Delink */
    EUsableSequencerTaskType_EnableUseChannel         = 0x2, /* EnableUseChannel */
    EUsableSequencerTaskType_DisableUseChannel        = 0x3, /* DisableUseChannel */
    EUsableSequencerTaskType_FillConsumable           = 0x4, /* FillConsumable */
    EUsableSequencerTaskType_UNDEFINED                = 0x5, /* UNDEFINED */
};

// Original name: EUsableStance
enum EUsableStance {
    EUsableStance_Stand     = 0x0, /* Stand */
    EUsableStance_Crouch    = 0x1, /* Crouch */
    EUsableStance_Seated    = 0x2, /* Seated */
    EUsableStance_Prone     = 0x3, /* Prone */
    EUsableStance_ProneBack = 0x4, /* ProneBack */
    EUsableStance_Unset     = 0x5, /* Unset */
    EUsableStance_UNDEFINED = 0x6, /* UNDEFINED */
};

// Original name: EUseSlotReenablePoint
enum EUseSlotReenablePoint {
    EUseSlotReenablePoint_UseChannelCompletion = 0x0, /* UseChannelCompletion */
    EUseSlotReenablePoint_ExitAnimStart        = 0x1, /* ExitAnimStart */
    EUseSlotReenablePoint_UsableDelink         = 0x2, /* UsableDelink */
    EUseSlotReenablePoint_UNDEFINED            = 0x3, /* UNDEFINED */
};

// Original name: EVAStateType
enum EVAStateType {
    EVAStateType_StandIdle      = 0x0, /* StandIdle */
    EVAStateType_StandMove      = 0x1, /* StandMove */
    EVAStateType_IronmanMove    = 0x2, /* IronmanMove */
    EVAStateType_IronmanRelaxed = 0x3, /* IronmanRelaxed */
    EVAStateType_IronmanTurn    = 0x4, /* IronmanTurn */
};

// Original name: EVehicleDamageModifier
enum EVehicleDamageModifier {
    EVehicleDamageModifier_AI_HitBy_AI               = 0x0, /* AI_HitBy_AI */
    EVehicleDamageModifier_AI_HitBy_Player           = 0x1, /* AI_HitBy_Player */
    EVehicleDamageModifier_Player_HitBy_AI           = 0x2, /* Player_HitBy_AI */
    EVehicleDamageModifier_Player_HitBy_Player       = 0x3, /* Player_HitBy_Player */
    EVehicleDamageModifier_Uncontrolled_HitBy_AI     = 0x4, /* Uncontrolled_HitBy_AI */
    EVehicleDamageModifier_Uncontrolled_HitBy_Player = 0x5, /* Uncontrolled_HitBy_Player */
    EVehicleDamageModifier_UNDEFINED                 = 0x6, /* UNDEFINED */
};

// Original name: EVehicleMovementClass
enum EVehicleMovementClass {
    EVehicleMovementClass_ArcadeWheeled   = 0x0, /* ArcadeWheeled */
    EVehicleMovementClass_Dummy           = 0x1, /* Dummy */
    EVehicleMovementClass_Spaceship       = 0x2, /* Spaceship */
    EVehicleMovementClass_TrackWheeled    = 0x3, /* TrackWheeled */
    EVehicleMovementClass_Boat            = 0x4, /* Boat */
    EVehicleMovementClass_PhysicalWheeled = 0x5, /* PhysicalWheeled */
    EVehicleMovementClass_UNDEFINED       = 0x6, /* UNDEFINED */
};

// Original name: EVibrationAudioCalculationType
enum EVibrationAudioCalculationType {
    EVibrationAudioCalculationType_Additive  = 0x0, /* Additive */
    EVibrationAudioCalculationType_MaxOfAll  = 0x1, /* MaxOfAll */
    EVibrationAudioCalculationType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: EVibrationComponentType
enum EVibrationComponentType {
    EVibrationComponentType_DynamicEntity = 0x0, /* DynamicEntity */
    EVibrationComponentType_Room          = 0x1, /* Room */
    EVibrationComponentType_UNDEFINED     = 0x2, /* UNDEFINED */
};

// Original name: EVibrationSource
enum EVibrationSource {
    EVibrationSource_unnamed              = 0x0, /*  */
    EVibrationSource_Collision            = 0x0, /* Collision */
    EVibrationSource_Damage               = 0x1, /* Damage */
    EVibrationSource_Explosion            = 0x2, /* Explosion */
    EVibrationSource_IFCSAeroDynamicsDrag = 0x3, /* IFCSAeroDynamicsDrag */
    EVibrationSource_IFCSAeroDynamicsLift = 0x4, /* IFCSAeroDynamicsLift */
    EVibrationSource_IFCSMasterModeDrag   = 0x5, /* IFCSMasterModeDrag */
    EVibrationSource_IFCSAeroStall        = 0x6, /* IFCSAeroStall */
    EVibrationSource_Thruster             = 0x7, /* Thruster */
    EVibrationSource_WeaponFire           = 0x8, /* WeaponFire */
    EVibrationSource_WeaponFirePlayer     = 0x9, /* WeaponFirePlayer */
    EVibrationSource_WindArea             = 0xa, /* WindArea */
    EVibrationSource_Distortion           = 0xb, /* Distortion */
    EVibrationSource_MagLaunch_Charge     = 0xc, /* MagLaunch_Charge */
    EVibrationSource_MagLaunch_Catapult   = 0xd, /* MagLaunch_Catapult */
    EVibrationSource_QuantumBoost         = 0xe, /* QuantumBoost */
    EVibrationSource_ElectricalCharge     = 0xf, /* ElectricalCharge */
    EVibrationSource_ProjectileImpact     = 0x10, /* ProjectileImpact */
    EVibrationSource_JumpDrive            = 0x11, /* JumpDrive */
    EVibrationSource_JumpPoint            = 0x12, /* JumpPoint */
    EVibrationSource_JumpTunnel           = 0x13, /* JumpTunnel */
    EVibrationSource_UNDEFINED            = 0x14, /* UNDEFINED */
};

// Original name: EVibrationVehiclePlayerRole
enum EVibrationVehiclePlayerRole {
    EVibrationVehiclePlayerRole_None      = 0x0, /* None */
    EVibrationVehiclePlayerRole_Driver    = 0x1, /* Driver */
    EVibrationVehiclePlayerRole_Crew      = 0x2, /* Crew */
    EVibrationVehiclePlayerRole_Passenger = 0x3, /* Passenger */
    EVibrationVehiclePlayerRole_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EViewType
enum EViewType {
    EViewType_eView_Off             = 0x0, /* eView_Off */
    EViewType_eView_SelfStatus      = 0x1, /* eView_SelfStatus */
    EViewType_eView_TargetStatus    = 0x2, /* eView_TargetStatus */
    EViewType_eView_Communications  = 0x3, /* eView_Communications */
    EViewType_eView_Configuration   = 0x4, /* eView_Configuration */
    EViewType_eView_IFCS            = 0x5, /* eView_IFCS */
    EViewType_eView_Diagnostics     = 0x6, /* eView_Diagnostics */
    EViewType_eView_ResourceNetwork = 0x7, /* eView_ResourceNetwork */
    EViewType_eView_Scanning        = 0x8, /* eView_Scanning */
    EViewType_eView_Weapons         = 0x9, /* eView_Weapons */
    EViewType_eView_Shields         = 0xa, /* eView_Shields */
    EViewType_UNDEFINED             = 0xb, /* UNDEFINED */
};

// Original name: EWantedLevelComparison
enum EWantedLevelComparison {
    EWantedLevelComparison_Ignore         = 0x0, /* Ignore */
    EWantedLevelComparison_Equal          = 0x1, /* Equal */
    EWantedLevelComparison_EqualOrLess    = 0x2, /* EqualOrLess */
    EWantedLevelComparison_EqualOrGreater = 0x3, /* EqualOrGreater */
    EWantedLevelComparison_UNDEFINED      = 0x4, /* UNDEFINED */
};

// Original name: EWave
enum EWave {
    EWave_EWave_1   = 0x0, /* EWave_1 */
    EWave_EWave_2   = 0x1, /* EWave_2 */
    EWave_EWave_3   = 0x2, /* EWave_3 */
    EWave_EWave_4   = 0x3, /* EWave_4 */
    EWave_EWave_5   = 0x4, /* EWave_5 */
    EWave_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: EWeaponGroup
enum EWeaponGroup {
    EWeaponGroup_Gun1      = 0x0, /* Gun1 */
    EWeaponGroup_Gun2      = 0x1, /* Gun2 */
    EWeaponGroup_Missiles  = 0x2, /* Missiles */
    EWeaponGroup_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: EWeaponRangeCategory
enum EWeaponRangeCategory {
    EWeaponRangeCategory_Short  = 0x0, /* Short */
    EWeaponRangeCategory_Medium = 0x1, /* Medium */
    EWeaponRangeCategory_Long   = 0x2, /* Long */
};

// Original name: EWeekday
enum EWeekday {
    EWeekday_Sunday    = 0x0, /* Sunday */
    EWeekday_Monday    = 0x1, /* Monday */
    EWeekday_Tuesday   = 0x2, /* Tuesday */
    EWeekday_Wednesday = 0x3, /* Wednesday */
    EWeekday_Thursday  = 0x4, /* Thursday */
    EWeekday_Friday    = 0x5, /* Friday */
    EWeekday_Saturday  = 0x6, /* Saturday */
};

// Original name: ElectricalCalculationPropertyType
enum ElectricalCalculationPropertyType {
    ElectricalCalculationPropertyType_Distance         = 0x0, /* Distance */
    ElectricalCalculationPropertyType_ElectricalCharge = 0x1, /* ElectricalCharge */
    ElectricalCalculationPropertyType_UNDEFINED        = 0x2, /* UNDEFINED */
};

// Original name: ElectricalStatePropertyType
enum ElectricalStatePropertyType {
    ElectricalStatePropertyType_Charge    = 0x0, /* Charge */
    ElectricalStatePropertyType_UNDEFINED = 0x1, /* UNDEFINED */
};

// Original name: EngineeringState
enum EngineeringState {
    EngineeringState_Baseline  = 0x0, /* Baseline */
    EngineeringState_Warning   = 0x1, /* Warning */
    EngineeringState_Critical  = 0x2, /* Critical */
    EngineeringState_Disabled  = 0x3, /* Disabled */
    EngineeringState_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: EulerAngles
enum EulerAngles {
    EulerAngles_Pitch = 0x0, /* Pitch */
    EulerAngles_Roll  = 0x1, /* Roll */
    EulerAngles_Yaw   = 0x2, /* Yaw */
};

// Original name: FactionType
enum FactionType {
    FactionType_LawEnforcement  = 0x0, /* LawEnforcement */
    FactionType_PrivateSecurity = 0x1, /* PrivateSecurity */
    FactionType_Lawful          = 0x2, /* Lawful */
    FactionType_Unlawful        = 0x3, /* Unlawful */
    FactionType_UNDEFINED       = 0x4, /* UNDEFINED */
};

// Original name: FireBehavior
enum FireBehavior {
    FireBehavior_VoxelDamage         = 0x0, /* VoxelDamage */
    FireBehavior_Radiation           = 0x1, /* Radiation */
    FireBehavior_Convection          = 0x2, /* Convection */
    FireBehavior_Equalization        = 0x3, /* Equalization */
    FireBehavior_DamageIgnition      = 0x4, /* DamageIgnition */
    FireBehavior_FlashIgnition       = 0x5, /* FlashIgnition */
    FireBehavior_OxygenStrength      = 0x6, /* OxygenStrength */
    FireBehavior_OxygenConsumption   = 0x7, /* OxygenConsumption */
    FireBehavior_LowOxygenExtinguish = 0x8, /* LowOxygenExtinguish */
    FireBehavior_FuelConsumption     = 0x9, /* FuelConsumption */
    FireBehavior_RequiresFuel        = 0xa, /* RequiresFuel */
    FireBehavior_SmokeProduction     = 0xb, /* SmokeProduction */
    FireBehavior_DamageToHealth      = 0xc, /* DamageToHealth */
    FireBehavior_AmbientTemperature  = 0xd, /* AmbientTemperature */
    FireBehavior_AutoRepairing       = 0xe, /* AutoRepairing */
    FireBehavior_Repairing           = 0xf, /* Repairing */
    FireBehavior_Extinguishing       = 0x10, /* Extinguishing */
    FireBehavior_RoomConnectors      = 0x11, /* RoomConnectors */
    FireBehavior_UNDEFINED           = 0x12, /* UNDEFINED */
};

// Original name: FireEnabledMode
enum FireEnabledMode {
    FireEnabledMode_Enabled              = 0x0, /* Enabled */
    FireEnabledMode_Disabled             = 0x1, /* Disabled */
    FireEnabledMode_EnabledOnVehicles    = 0x2, /* EnabledOnVehicles */
    FireEnabledMode_EnabledOnTag         = 0x3, /* EnabledOnTag */
    FireEnabledMode_EnabledOnAllVehicles = 0x4, /* EnabledOnAllVehicles */
    FireEnabledMode_UNDEFINED            = 0x5, /* UNDEFINED */
};

// Original name: FireFilterMode
enum FireFilterMode {
    FireFilterMode_Include   = 0x0, /* Include */
    FireFilterMode_Exclude   = 0x1, /* Exclude */
    FireFilterMode_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: FireHazardFogNoiseTextures
enum FireHazardFogNoiseTextures {
    FireHazardFogNoiseTextures_Noise0    = 0x0, /* Noise0 */
    FireHazardFogNoiseTextures_Noise1    = 0x1, /* Noise1 */
    FireHazardFogNoiseTextures_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: FireHazardMaterials
enum FireHazardMaterials {
    FireHazardMaterials_Baseline            = 0x0, /* Baseline */
    FireHazardMaterials_MaxSpecular         = 0x1, /* MaxSpecular */
    FireHazardMaterials_MaxGloss            = 0x2, /* MaxGloss */
    FireHazardMaterials_MaxSpecularAndGloss = 0x3, /* MaxSpecularAndGloss */
    FireHazardMaterials_UNDEFINED           = 0x4, /* UNDEFINED */
};

// Original name: FireHazardSurfaceDirections
enum FireHazardSurfaceDirections {
    FireHazardSurfaceDirections_Floors    = 0x0, /* Floors */
    FireHazardSurfaceDirections_Walls     = 0x1, /* Walls */
    FireHazardSurfaceDirections_Ceilings  = 0x2, /* Ceilings */
    FireHazardSurfaceDirections_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: FlashValueUpdateMode
enum FlashValueUpdateMode {
    FlashValueUpdateMode_None          = 0x0, /* None */
    FlashValueUpdateMode_Offset        = 0x1, /* Offset */
    FlashValueUpdateMode_Overwrite     = 0x2, /* Overwrite */
    FlashValueUpdateMode_AttachContent = 0x3, /* AttachContent */
    FlashValueUpdateMode_AttachScreen  = 0x4, /* AttachScreen */
    FlashValueUpdateMode_UNDEFINED     = 0x5, /* UNDEFINED */
};

// Original name: ForceKnockdownDirection
enum ForceKnockdownDirection {
    ForceKnockdownDirection_None      = 0x0, /* None */
    ForceKnockdownDirection_Forward   = 0x1, /* Forward */
    ForceKnockdownDirection_Backward  = 0x2, /* Backward */
    ForceKnockdownDirection_Left      = 0x3, /* Left */
    ForceKnockdownDirection_Right     = 0x4, /* Right */
    ForceKnockdownDirection_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: ForceReactionLeanHumanSpineBoneName
enum ForceReactionLeanHumanSpineBoneName {
    ForceReactionLeanHumanSpineBoneName_Hips   = 0x0, /* Hips */
    ForceReactionLeanHumanSpineBoneName_Spine  = 0x1, /* Spine */
    ForceReactionLeanHumanSpineBoneName_Spine1 = 0x2, /* Spine1 */
    ForceReactionLeanHumanSpineBoneName_Spine2 = 0x3, /* Spine2 */
    ForceReactionLeanHumanSpineBoneName_Spine3 = 0x4, /* Spine3 */
    ForceReactionLeanHumanSpineBoneName_Neck   = 0x5, /* Neck */
    ForceReactionLeanHumanSpineBoneName_Neck1  = 0x6, /* Neck1 */
    ForceReactionLeanHumanSpineBoneName_Head   = 0x7, /* Head */
};

// Original name: ForceReactionLeanVanduulSpineBoneName
enum ForceReactionLeanVanduulSpineBoneName {
    ForceReactionLeanVanduulSpineBoneName_Hips   = 0x0, /* Hips */
    ForceReactionLeanVanduulSpineBoneName_Spine  = 0x1, /* Spine */
    ForceReactionLeanVanduulSpineBoneName_Spine1 = 0x2, /* Spine1 */
    ForceReactionLeanVanduulSpineBoneName_Spine2 = 0x3, /* Spine2 */
    ForceReactionLeanVanduulSpineBoneName_Spine3 = 0x4, /* Spine3 */
    ForceReactionLeanVanduulSpineBoneName_Neck   = 0x5, /* Neck */
    ForceReactionLeanVanduulSpineBoneName_Neck1  = 0x6, /* Neck1 */
    ForceReactionLeanVanduulSpineBoneName_Head   = 0x7, /* Head */
};

// Original name: ForceReactionLeanXianSpineBoneName
enum ForceReactionLeanXianSpineBoneName {
    ForceReactionLeanXianSpineBoneName_Hips   = 0x0, /* Hips */
    ForceReactionLeanXianSpineBoneName_Spine1 = 0x1, /* Spine1 */
    ForceReactionLeanXianSpineBoneName_Spine2 = 0x2, /* Spine2 */
    ForceReactionLeanXianSpineBoneName_Spine3 = 0x3, /* Spine3 */
    ForceReactionLeanXianSpineBoneName_Spine4 = 0x4, /* Spine4 */
    ForceReactionLeanXianSpineBoneName_Neck1  = 0x5, /* Neck1 */
    ForceReactionLeanXianSpineBoneName_Neck2  = 0x6, /* Neck2 */
    ForceReactionLeanXianSpineBoneName_Neck3  = 0x7, /* Neck3 */
    ForceReactionLeanXianSpineBoneName_Neck4  = 0x8, /* Neck4 */
    ForceReactionLeanXianSpineBoneName_Head   = 0x9, /* Head */
};

// Original name: FriendlyFireType
enum FriendlyFireType {
    FriendlyFireType_None = 0x0, /* None */
    FriendlyFireType_Self = 0x1, /* Self */
    FriendlyFireType_Team = 0x2, /* Team */
};

// Original name: FuelTypes
enum FuelTypes {
    FuelTypes_INVALIDFUEL  = 0x0, /* INVALIDFUEL */
    FuelTypes_QuantumFuel  = 0x1, /* QuantumFuel */
    FuelTypes_HydrogenFuel = 0x2, /* HydrogenFuel */
    FuelTypes_UNDEFINED    = 0x3, /* UNDEFINED */
};

// Original name: GRID_TYPE
enum GRID_TYPE {
    GRID_TYPE_Global      = 0x0, /* Global */
    GRID_TYPE_Planetary   = 0x1, /* Planetary */
    GRID_TYPE_Small       = 0x2, /* Small */
    GRID_TYPE_Medium      = 0x3, /* Medium */
    GRID_TYPE_Large       = 0x4, /* Large */
    GRID_TYPE_SolarSystem = 0x5, /* SolarSystem */
};

// Original name: GenderType
enum GenderType {
    GenderType_NotSet = 0x0, /* NotSet */
    GenderType_Male   = 0x1, /* Male */
    GenderType_Female = 0x2, /* Female */
};

// Original name: GeomForm
enum GeomForm {
    GeomForm_Vertices = 0x0, /* Vertices */
    GeomForm_Edges    = 0x1, /* Edges */
    GeomForm_Surface  = 0x2, /* Surface */
    GeomForm_Volume   = 0x3, /* Volume */
};

// Original name: GeomType
enum GeomType {
    GeomType_None        = 0x0, /* None */
    GeomType_BoundingBox = 0x1, /* BoundingBox */
    GeomType_Physics     = 0x2, /* Physics */
    GeomType_Render      = 0x3, /* Render */
};

// Original name: HUDPalleteEntry
enum HUDPalleteEntry {
    HUDPalleteEntry_Moderate      = 0x0, /* Moderate */
    HUDPalleteEntry_Positive      = 0x1, /* Positive */
    HUDPalleteEntry_Neutral       = 0x2, /* Neutral */
    HUDPalleteEntry_Hostile       = 0x3, /* Hostile */
    HUDPalleteEntry_Critical      = 0x4, /* Critical */
    HUDPalleteEntry_Unknown       = 0x5, /* Unknown */
    HUDPalleteEntry_Highlight     = 0x6, /* Highlight */
    HUDPalleteEntry_Friendly      = 0x7, /* Friendly */
    HUDPalleteEntry_SubItemTarget = 0x8, /* SubItemTarget */
};

// Original name: HackingCodeCommandType
enum HackingCodeCommandType {
    HackingCodeCommandType_None          = 0x0, /* None */
    HackingCodeCommandType_Move          = 0x1, /* Move */
    HackingCodeCommandType_Stop          = 0x2, /* Stop */
    HackingCodeCommandType_Swap          = 0x3, /* Swap */
    HackingCodeCommandType_Ping          = 0x4, /* Ping */
    HackingCodeCommandType_Wrap          = 0x5, /* Wrap */
    HackingCodeCommandType_Inject        = 0x6, /* Inject */
    HackingCodeCommandType_Slowdown      = 0x7, /* Slowdown */
    HackingCodeCommandType_CancelAbility = 0x8, /* CancelAbility */
    HackingCodeCommandType_Spawn         = 0x9, /* Spawn */
    HackingCodeCommandType_RotatePreview = 0xa, /* RotatePreview */
    HackingCodeCommandType_Help          = 0xb, /* Help */
    HackingCodeCommandType_Commands      = 0xc, /* Commands */
    HackingCodeCommandType_AutoCorrect   = 0xd, /* AutoCorrect */
    HackingCodeCommandType_Exit          = 0xe, /* Exit */
    HackingCodeCommandType_UNDEFINED     = 0xf, /* UNDEFINED */
};

// Original name: HackingCodeEventType
enum HackingCodeEventType {
    HackingCodeEventType_None                    = 0x0, /* None */
    HackingCodeEventType_UnrecognizedCommand     = 0x1, /* UnrecognizedCommand */
    HackingCodeEventType_HackingInitiated        = 0x2, /* HackingInitiated */
    HackingCodeEventType_HackingStarted          = 0x3, /* HackingStarted */
    HackingCodeEventType_DefenderDetected        = 0x4, /* DefenderDetected */
    HackingCodeEventType_DefenderAlerted         = 0x5, /* DefenderAlerted */
    HackingCodeEventType_DefenderAlertOver       = 0x6, /* DefenderAlertOver */
    HackingCodeEventType_DefenderSpottedIntruder = 0x7, /* DefenderSpottedIntruder */
    HackingCodeEventType_DefenderLostIntruder    = 0x8, /* DefenderLostIntruder */
    HackingCodeEventType_DefenderStartedSwap     = 0x9, /* DefenderStartedSwap */
    HackingCodeEventType_DefenderCompletedSwap   = 0xa, /* DefenderCompletedSwap */
    HackingCodeEventType_LinkPointActivated      = 0xb, /* LinkPointActivated */
    HackingCodeEventType_LinkPointDeactivated    = 0xc, /* LinkPointDeactivated */
    HackingCodeEventType_LinkPointLinked         = 0xd, /* LinkPointLinked */
    HackingCodeEventType_LinkPointUnlinked       = 0xe, /* LinkPointUnlinked */
    HackingCodeEventType_IntruderCaptured        = 0xf, /* IntruderCaptured */
    HackingCodeEventType_HackTimedOut            = 0x10, /* HackTimedOut */
    HackingCodeEventType_HackAborted             = 0x11, /* HackAborted */
    HackingCodeEventType_HackSuccessful          = 0x12, /* HackSuccessful */
    HackingCodeEventType_UNDEFINED               = 0x13, /* UNDEFINED */
};

// Original name: HandholdType
enum HandholdType {
    HandholdType_Fixed     = 0x0, /* Fixed */
    HandholdType_Cylinder  = 0x1, /* Cylinder */
    HandholdType_Corner    = 0x2, /* Corner */
    HandholdType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: HarvestableOverrideAreaType
enum HarvestableOverrideAreaType {
    HarvestableOverrideAreaType_AutoRegisterWithZoneHost = 0x0, /* AutoRegisterWithZoneHost */
    HarvestableOverrideAreaType_ManualEntityLink         = 0x1, /* ManualEntityLink */
    HarvestableOverrideAreaType_UNDEFINED                = 0x2, /* UNDEFINED */
};

// Original name: HintEventType
enum HintEventType {
    HintEventType_None                                                   = 0x0, /* None */
    HintEventType_ActorStatusBuffApplied                                 = 0x1, /* ActorStatusBuffApplied */
    HintEventType_ActorStatusClothingChanged                             = 0x2, /* ActorStatusClothingChanged */
    HintEventType_ActorStatusDeadlyInjuryStarted                         = 0x3, /* ActorStatusDeadlyInjuryStarted */
    HintEventType_ActorStatusDigestionAbsorptionEmpty                    = 0x4, /* ActorStatusDigestionAbsorptionEmpty */
    HintEventType_ActorStatusDownedEnter                                 = 0x5, /* ActorStatusDownedEnter */
    HintEventType_ActorStatusEffectArmsLockCannotClimbLadder             = 0x6, /* ActorStatusEffectArmsLockCannotClimbLadder */
    HintEventType_ActorStatusEffectArmsLockCannotMantle                  = 0x7, /* ActorStatusEffectArmsLockCannotMantle */
    HintEventType_ActorStatusEffectArmsLockCannotSteerShip               = 0x8, /* ActorStatusEffectArmsLockCannotSteerShip */
    HintEventType_ActorStatusEffectArmsLockCannotRestrain                = 0x9, /* ActorStatusEffectArmsLockCannotRestrain */
    HintEventType_ActorStatusEffectArmsLockCannotTakeDown                = 0xa, /* ActorStatusEffectArmsLockCannotTakeDown */
    HintEventType_ActorStatusEffectArmsLockCannotUseMountedGun           = 0xb, /* ActorStatusEffectArmsLockCannotUseMountedGun */
    HintEventType_ActorStatusEffectArmsLockCannotUseTrolley              = 0xc, /* ActorStatusEffectArmsLockCannotUseTrolley */
    HintEventType_ActorStatusEffectArmsLockDropItem                      = 0xd, /* ActorStatusEffectArmsLockDropItem */
    HintEventType_ActorStatusEffectArmsLockLowerWeapon                   = 0xe, /* ActorStatusEffectArmsLockLowerWeapon */
    HintEventType_ActorStatusEffectArmsLockStart                         = 0xf, /* ActorStatusEffectArmsLockStart */
    HintEventType_ActorStatusEffectBleedStart                            = 0x10, /* ActorStatusEffectBleedStart */
    HintEventType_ActorStatusEffectProneLockStart                        = 0x11, /* ActorStatusEffectProneLockStart */
    HintEventType_ActorStatusFoodDrinkItemHeld                           = 0x12, /* ActorStatusFoodDrinkItemHeld */
    HintEventType_ActorStatusFoodDrinkItemInInventory                    = 0x13, /* ActorStatusFoodDrinkItemInInventory */
    HintEventType_ActorStatusHospitalEnter                               = 0x14, /* ActorStatusHospitalEnter */
    HintEventType_ActorStatusHospitalRoomReserved                        = 0x15, /* ActorStatusHospitalRoomReserved */
    HintEventType_ActorStatusHungerThirstDamageStarted                   = 0x16, /* ActorStatusHungerThirstDamageStarted */
    HintEventType_ActorStatusHungerThirstDeath                           = 0x17, /* ActorStatusHungerThirstDeath */
    HintEventType_ActorStatusHungerThirstFull                            = 0x18, /* ActorStatusHungerThirstFull */
    HintEventType_ActorStatusHungerThirstStatusStarted                   = 0x19, /* ActorStatusHungerThirstStatusStarted */
    HintEventType_ActorStatusHyperthermiaDamageStarted                   = 0x1a, /* ActorStatusHyperthermiaDamageStarted */
    HintEventType_ActorStatusHyperthermiaStarted                         = 0x1b, /* ActorStatusHyperthermiaStarted */
    HintEventType_ActorStatusHypothermiaDamageStarted                    = 0x1c, /* ActorStatusHypothermiaDamageStarted */
    HintEventType_ActorStatusHypothermiaStarted                          = 0x1d, /* ActorStatusHypothermiaStarted */
    HintEventType_ActorStatusInjuryStarted                               = 0x1e, /* ActorStatusInjuryStarted */
    HintEventType_ActorStatusIntoxicatedEnter                            = 0x1f, /* ActorStatusIntoxicatedEnter */
    HintEventType_ActorStatusMajorInjuryStarted                          = 0x20, /* ActorStatusMajorInjuryStarted */
    HintEventType_ActorStatusMedBedEnter                                 = 0x21, /* ActorStatusMedBedEnter */
    HintEventType_ActorStatusOverdoseDamageStarted                       = 0x22, /* ActorStatusOverdoseDamageStarted */
    HintEventType_ActorStatusOverdoseDeath                               = 0x23, /* ActorStatusOverdoseDeath */
    HintEventType_ActorStatusOverdoseEnter                               = 0x24, /* ActorStatusOverdoseEnter */
    HintEventType_ActorStatusPITMenuDrugs                                = 0x25, /* ActorStatusPITMenuDrugs */
    HintEventType_ActorStatusRespawnMedBed                               = 0x26, /* ActorStatusRespawnMedBed */
    HintEventType_ActorStatusRespawnLocationSet                          = 0x27, /* ActorStatusRespawnLocationSet */
    HintEventType_ActorStatusRespawnCriminal                             = 0x28, /* ActorStatusRespawnCriminal */
    HintEventType_ActorStatusRespawnPrison                               = 0x29, /* ActorStatusRespawnPrison */
    HintEventType_ActorStatusTemperatureAboveMaxResistance               = 0x2a, /* ActorStatusTemperatureAboveMaxResistance */
    HintEventType_ActorStatusTemperatureBelowMinResistance               = 0x2b, /* ActorStatusTemperatureBelowMinResistance */
    HintEventType_ActorStatusTemperatureDeath                            = 0x2c, /* ActorStatusTemperatureDeath */
    HintEventType_ActorStatusWearingHelmetConsume                        = 0x2d, /* ActorStatusWearingHelmetConsume */
    HintEventType_ActorStatusWeatherLocomotionEntered                    = 0x2e, /* ActorStatusWeatherLocomotionEntered */
    HintEventType_AlignShipForCargoTransfer                              = 0x2f, /* AlignShipForCargoTransfer */
    HintEventType_ASOPShipSpawned                                        = 0x30, /* ASOPShipSpawned */
    HintEventType_BodyDrag_Start                                         = 0x31, /* BodyDrag_Start */
    HintEventType_CargoTransferInterruptions                             = 0x32, /* CargoTransferInterruptions */
    HintEventType_ChatOpened                                             = 0x33, /* ChatOpened */
    HintEventType_CollectCargoFromLoadingArea                            = 0x34, /* CollectCargoFromLoadingArea */
    HintEventType_ConsumableFirstMiningConsumableBought                  = 0x35, /* ConsumableFirstMiningConsumableBought */
    HintEventType_ConsumableFirstMiningWithConsumablesEquipped           = 0x36, /* ConsumableFirstMiningWithConsumablesEquipped */
    HintEventType_ConsumableMiningConsumableExpired                      = 0x37, /* ConsumableMiningConsumableExpired */
    HintEventType_ConsumableMiningConsumableExpiredNoCharges             = 0x38, /* ConsumableMiningConsumableExpiredNoCharges */
    HintEventType_ConsumableMiningConsumableUsed                         = 0x39, /* ConsumableMiningConsumableUsed */
    HintEventType_ContactsOpened                                         = 0x3a, /* ContactsOpened */
    HintEventType_CorpseMarkerShown                                      = 0x3b, /* CorpseMarkerShown */
    HintEventType_CustomizeACLoadoutMenuEntered                          = 0x3c, /* CustomizeACLoadoutMenuEntered */
    HintEventType_CustomizeSMLoadoutMenuEntered                          = 0x3d, /* CustomizeSMLoadoutMenuEntered */
    HintEventType_DeliverCargoToLoadingArea                              = 0x3e, /* DeliverCargoToLoadingArea */
    HintEventType_FPSMiningAttachmentPurchased                           = 0x3f, /* FPSMiningAttachmentPurchased */
    HintEventType_FPSMiningFinishedRockScan                              = 0x40, /* FPSMiningFinishedRockScan */
    HintEventType_FPSMiningRockFracturedBad                              = 0x41, /* FPSMiningRockFracturedBad */
    HintEventType_FPSMiningRockFracturedGood                             = 0x42, /* FPSMiningRockFracturedGood */
    HintEventType_FPSMiningRockNearby                                    = 0x43, /* FPSMiningRockNearby */
    HintEventType_FPSMiningRockPowerDangerLevel                          = 0x44, /* FPSMiningRockPowerDangerLevel */
    HintEventType_FPSMiningRockPowerOptimalLevel                         = 0x45, /* FPSMiningRockPowerOptimalLevel */
    HintEventType_FPSMiningRockTargetedNotADS                            = 0x46, /* FPSMiningRockTargetedNotADS */
    HintEventType_FPSMiningShotEnvironment                               = 0x47, /* FPSMiningShotEnvironment */
    HintEventType_FPSMiningShotRockADS                                   = 0x48, /* FPSMiningShotRockADS */
    HintEventType_FPSMiningWeaponSelected                                = 0x49, /* FPSMiningWeaponSelected */
    HintEventType_GreenZoneEntered                                       = 0x4a, /* GreenZoneEntered */
    HintEventType_GreenZoneExited                                        = 0x4b, /* GreenZoneExited */
    HintEventType_HailCargoServicesForLoading                            = 0x4c, /* HailCargoServicesForLoading */
    HintEventType_HarvestableInHandBackpackNotFull                       = 0x4d, /* HarvestableInHandBackpackNotFull */
    HintEventType_HarvestableNotInHand                                   = 0x4e, /* HarvestableNotInHand */
    HintEventType_HarvestablePlayerLooksAtHarvestableBackpackNotFull     = 0x4f, /* HarvestablePlayerLooksAtHarvestableBackpackNotFull */
    HintEventType_HarvestablePlayerLooksAtHarvestableNoBackpack          = 0x50, /* HarvestablePlayerLooksAtHarvestableNoBackpack */
    HintEventType_HintAreaEntered                                        = 0x51, /* HintAreaEntered */
    HintEventType_HintAreaExited                                         = 0x52, /* HintAreaExited */
    HintEventType_HullC_CargoRequiresSpindlesExtended                    = 0x53, /* HullC_CargoRequiresSpindlesExtended */
    HintEventType_InGameStateBegin                                       = 0x54, /* InGameStateBegin */
    HintEventType_InteractionModeEntered                                 = 0x55, /* InteractionModeEntered */
    HintEventType_InteractionModeExited                                  = 0x56, /* InteractionModeExited */
    HintEventType_InteractionConditionGeneric                            = 0x57, /* InteractionConditionGeneric */
    HintEventType_InteractionConditionSpecific                           = 0x58, /* InteractionConditionSpecific */
    HintEventType_KnockdownStarted                                       = 0x59, /* KnockdownStarted */
    HintEventType_LegallyLandedShipStarted                               = 0x5a, /* LegallyLandedShipStarted */
    HintEventType_LogoutEntered                                          = 0x5b, /* LogoutEntered */
    HintEventType_LogoutEnteredNonOwned                                  = 0x5c, /* LogoutEnteredNonOwned */
    HintEventType_LogoutEnteredNoPlayersAround                           = 0x5d, /* LogoutEnteredNoPlayersAround */
    HintEventType_LogoutEnteredPlayersAround                             = 0x5e, /* LogoutEnteredPlayersAround */
    HintEventType_LogoutEnteredPlayersInShip                             = 0x5f, /* LogoutEnteredPlayersInShip */
    HintEventType_LogoutRespawnFailed                                    = 0x60, /* LogoutRespawnFailed */
    HintEventType_LogoutEnteredShipInShip                                = 0x61, /* LogoutEnteredShipInShip */
    HintEventType_LogoutEnteredNonPersistent                             = 0x62, /* LogoutEnteredNonPersistent */
    HintEventType_MedBeamEquippedMedgun                                  = 0x63, /* MedBeamEquippedMedgun */
    HintEventType_MedBeamEquippedMultiTool                               = 0x64, /* MedBeamEquippedMultiTool */
    HintEventType_MedBeamSelfHealPrompt                                  = 0x65, /* MedBeamSelfHealPrompt */
    HintEventType_MedBeamSelfHealDescription                             = 0x66, /* MedBeamSelfHealDescription */
    HintEventType_MedBeamValidTargetAcquired                             = 0x67, /* MedBeamValidTargetAcquired */
    HintEventType_MedBeamValidTargetAcquiredIsHurt                       = 0x68, /* MedBeamValidTargetAcquiredIsHurt */
    HintEventType_MedBeamBDLTooHighMedgun                                = 0x69, /* MedBeamBDLTooHighMedgun */
    HintEventType_MedBeamBDLTooHighMultiTool                             = 0x6a, /* MedBeamBDLTooHighMultiTool */
    HintEventType_MedBeamMedgunToggleAdvancedMode                        = 0x6b, /* MedBeamMedgunToggleAdvancedMode */
    HintEventType_MedBeamMedgunOnAdvancedModeActivated                   = 0x6c, /* MedBeamMedgunOnAdvancedModeActivated */
    HintEventType_MedBeamMedgunAdvancedModeButtons                       = 0x6d, /* MedBeamMedgunAdvancedModeButtons */
    HintEventType_MedBeamMedgunAdvancedModeSafeBDLBypass                 = 0x6e, /* MedBeamMedgunAdvancedModeSafeBDLBypass */
    HintEventType_MedBeamMedgunAdvancedModeCriticalBDLBypass             = 0x6f, /* MedBeamMedgunAdvancedModeCriticalBDLBypass */
    HintEventType_MedBedClearAllRespawns                                 = 0x70, /* MedBedClearAllRespawns */
    HintEventType_MedBedEraseDNA                                         = 0x71, /* MedBedEraseDNA */
    HintEventType_MedBedRespawnNotAvailable                              = 0x72, /* MedBedRespawnNotAvailable */
    HintEventType_MedBedRespawnOutOfRange                                = 0x73, /* MedBedRespawnOutOfRange */
    HintEventType_MedBedUploadDNA                                        = 0x74, /* MedBedUploadDNA */
    HintEventType_MedpenStabBlockedInGreenZone                           = 0x75, /* MedpenStabBlockedInGreenZone */
    HintEventType_MeleeEquip                                             = 0x76, /* MeleeEquip */
    HintEventType_MeleeLightAttacks                                      = 0x77, /* MeleeLightAttacks */
    HintEventType_MeleeHooks                                             = 0x78, /* MeleeHooks */
    HintEventType_MeleeHaymaker                                          = 0x79, /* MeleeHaymaker */
    HintEventType_MeleeUppercut                                          = 0x7a, /* MeleeUppercut */
    HintEventType_MeleeCombinationAttacks                                = 0x7b, /* MeleeCombinationAttacks */
    HintEventType_MeleeBlocking                                          = 0x7c, /* MeleeBlocking */
    HintEventType_MeleeDodging                                           = 0x7d, /* MeleeDodging */
    HintEventType_MeleeStun                                              = 0x7e, /* MeleeStun */
    HintEventType_MeleeKnifeEquip                                        = 0x7f, /* MeleeKnifeEquip */
    HintEventType_MeleeKnifeLight                                        = 0x80, /* MeleeKnifeLight */
    HintEventType_MeleeKnifeHeavy                                        = 0x81, /* MeleeKnifeHeavy */
    HintEventType_MeleeTakedownGun                                       = 0x82, /* MeleeTakedownGun */
    HintEventType_MeleeTakedownFists                                     = 0x83, /* MeleeTakedownFists */
    HintEventType_MeleeTakedownWeapon                                    = 0x84, /* MeleeTakedownWeapon */
    HintEventType_MeleeTakedownStop                                      = 0x85, /* MeleeTakedownStop */
    HintEventType_MFDFocusEntered                                        = 0x86, /* MFDFocusEntered */
    HintEventType_MFDFocusExited                                         = 0x87, /* MFDFocusExited */
    HintEventType_MiningExtractableRockTargeted                          = 0x88, /* MiningExtractableRockTargeted */
    HintEventType_MiningFracturableRockTargeted                          = 0x89, /* MiningFracturableRockTargeted */
    HintEventType_MiningModeSwitch                                       = 0x8a, /* MiningModeSwitch */
    HintEventType_MiningNoProgress                                       = 0x8b, /* MiningNoProgress */
    HintEventType_MiningRadarBlobFound                                   = 0x8c, /* MiningRadarBlobFound */
    HintEventType_MiningRockExtracted                                    = 0x8d, /* MiningRockExtracted */
    HintEventType_MiningRockFractured                                    = 0x8e, /* MiningRockFractured */
    HintEventType_MiningRockInPassiveRadar                               = 0x8f, /* MiningRockInPassiveRadar */
    HintEventType_MiningRockPowerDangerLevel                             = 0x90, /* MiningRockPowerDangerLevel */
    HintEventType_MiningRockPowerOptimalLevel                            = 0x91, /* MiningRockPowerOptimalLevel */
    HintEventType_MiningShipCargoFull                                    = 0x92, /* MiningShipCargoFull */
    HintEventType_MiningShipCargoHalfFull                                = 0x93, /* MiningShipCargoHalfFull */
    HintEventType_MiningShipIsFlightReady                                = 0x94, /* MiningShipIsFlightReady */
    HintEventType_MiningShipLowMoonOrbit                                 = 0x95, /* MiningShipLowMoonOrbit */
    HintEventType_MobiGlasOpened                                         = 0x96, /* MobiGlasOpened */
    HintEventType_MobiGlasClosed                                         = 0x97, /* MobiGlasClosed */
    HintEventType_MobiGlasJournalOpened                                  = 0x98, /* MobiGlasJournalOpened */
    HintEventType_MobiGlasMissionManagerOpened                           = 0x99, /* MobiGlasMissionManagerOpened */
    HintEventType_MonitoredZoneEntered                                   = 0x9a, /* MonitoredZoneEntered */
    HintEventType_MonitoredZoneExited                                    = 0x9b, /* MonitoredZoneExited */
    HintEventType_OxygenDroppedTo50pcHasCapsules                         = 0x9c, /* OxygenDroppedTo50pcHasCapsules */
    HintEventType_OxygenDroppedTo50pcNoCapsules                          = 0x9d, /* OxygenDroppedTo50pcNoCapsules */
    HintEventType_OxygenDroppedTo25pcHasCapsules                         = 0x9e, /* OxygenDroppedTo25pcHasCapsules */
    HintEventType_OxygenDroppedTo25pcNoCapsules                          = 0x9f, /* OxygenDroppedTo25pcNoCapsules */
    HintEventType_OxygenRefilled                                         = 0xa0, /* OxygenRefilled */
    HintEventType_PersonalInnerThoughtClosed                             = 0xa1, /* PersonalInnerThoughtClosed */
    HintEventType_PersonalInnerThoughtOpened                             = 0xa2, /* PersonalInnerThoughtOpened */
    HintEventType_PersonalInnerThoughtQuickSelectionMode                 = 0xa3, /* PersonalInnerThoughtQuickSelectionMode */
    HintEventType_PersonalInnerThoughtQuickSelectionWeaponsOpened        = 0xa4, /* PersonalInnerThoughtQuickSelectionWeaponsOpened */
    HintEventType_PersonalInnerThoughtQuickSelectionModeOpened           = 0xa5, /* PersonalInnerThoughtQuickSelectionModeOpened */
    HintEventType_PersonalInnerThoughtGreyedOutActions                   = 0xa6, /* PersonalInnerThoughtGreyedOutActions */
    HintEventType_PersonalInnerThoughtAddToFavorites                     = 0xa7, /* PersonalInnerThoughtAddToFavorites */
    HintEventType_PersonalInnerThoughtTriedToCustomizeDefaultActions     = 0xa8, /* PersonalInnerThoughtTriedToCustomizeDefaultActions */
    HintEventType_PersonalInnerThoughtCancelRebind                       = 0xa9, /* PersonalInnerThoughtCancelRebind */
    HintEventType_PersonalInventoryBackpackFull                          = 0xaa, /* PersonalInventoryBackpackFull */
    HintEventType_PersonalInventoryHarvestableLootedIntoBackpack         = 0xab, /* PersonalInventoryHarvestableLootedIntoBackpack */
    HintEventType_PersonalInventoryItemStowed                            = 0xac, /* PersonalInventoryItemStowed */
    HintEventType_PersonalInventoryShardLootedIntoBackpack               = 0xad, /* PersonalInventoryShardLootedIntoBackpack */
    HintEventType_PersonalInventoryHarvestableDirectlyStowedIntoBackpack = 0xae, /* PersonalInventoryHarvestableDirectlyStowedIntoBackpack */
    HintEventType_PersonalInventoryUndersuitClothingIncompatible         = 0xaf, /* PersonalInventoryUndersuitClothingIncompatible */
    HintEventType_PersonalInventoryOpen                                  = 0xb0, /* PersonalInventoryOpen */
    HintEventType_PersonalInventoryHomeItemAdded                         = 0xb1, /* PersonalInventoryHomeItemAdded */
    HintEventType_PersonalInventoryItemPurchased                         = 0xb2, /* PersonalInventoryItemPurchased */
    HintEventType_PersonalInventoryContainerSizeLimits                   = 0xb3, /* PersonalInventoryContainerSizeLimits */
    HintEventType_PersonalInventoryContainerFull                         = 0xb4, /* PersonalInventoryContainerFull */
    HintEventType_PersonalInventoryVehicleEnter                          = 0xb5, /* PersonalInventoryVehicleEnter */
    HintEventType_PersonalInventoryOpenInVehicle                         = 0xb6, /* PersonalInventoryOpenInVehicle */
    HintEventType_PersonalInventoryVehicleStorageUsed                    = 0xb7, /* PersonalInventoryVehicleStorageUsed */
    HintEventType_PersonalInventoryVehicleDestroyed                      = 0xb8, /* PersonalInventoryVehicleDestroyed */
    HintEventType_PersonalInventoryOpenWithNoAvailableContainer          = 0xb9, /* PersonalInventoryOpenWithNoAvailableContainer */
    HintEventType_PersonalInventoryInvalidClothingArmorEquip             = 0xba, /* PersonalInventoryInvalidClothingArmorEquip */
    HintEventType_PersonalInventoryOutOfRange                            = 0xbb, /* PersonalInventoryOutOfRange */
    HintEventType_PickupCollected                                        = 0xbc, /* PickupCollected */
    HintEventType_PlayerCombatHealed                                     = 0xbd, /* PlayerCombatHealed */
    HintEventType_PlayerEnteredEVA                                       = 0xbe, /* PlayerEnteredEVA */
    HintEventType_PlayerGotAKill                                         = 0xbf, /* PlayerGotAKill */
    HintEventType_PlayerLowHealth                                        = 0xc0, /* PlayerLowHealth */
    HintEventType_PlayerPickupItem                                       = 0xc1, /* PlayerPickupItem */
    HintEventType_PlayerStowItem                                         = 0xc2, /* PlayerStowItem */
    HintEventType_PlayerThrewItem                                        = 0xc3, /* PlayerThrewItem */
    HintEventType_PlayerWasKilled                                        = 0xc4, /* PlayerWasKilled */
    HintEventType_PlayerWasKilledByGrenade                               = 0xc5, /* PlayerWasKilledByGrenade */
    HintEventType_PrivateMatchMenuEntered                                = 0xc6, /* PrivateMatchMenuEntered */
    HintEventType_RepairBeam_AmmoEmpty                                   = 0xc7, /* RepairBeam_AmmoEmpty */
    HintEventType_RepairBeam_HullOverview                                = 0xc8, /* RepairBeam_HullOverview */
    HintEventType_RepairBeam_Repairing                                   = 0xc9, /* RepairBeam_Repairing */
    HintEventType_RepairBeam_VehicleTargetAquired                        = 0xca, /* RepairBeam_VehicleTargetAquired */
    HintEventType_Restrain                                               = 0xcb, /* Restrain */
    HintEventType_RestrictedAreaTunnelActivatedLanding                   = 0xcc, /* RestrictedAreaTunnelActivatedLanding */
    HintEventType_RestrictedAreaTunnelActivatedTakeoff                   = 0xcd, /* RestrictedAreaTunnelActivatedTakeoff */
    HintEventType_RestrictedAreaTunnelEdge                               = 0xce, /* RestrictedAreaTunnelEdge */
    HintEventType_RestrictedAreaTunnelNearby                             = 0xcf, /* RestrictedAreaTunnelNearby */
    HintEventType_SalvageBeam_AmmoFull                                   = 0xd0, /* SalvageBeam_AmmoFull */
    HintEventType_SalvageBeam_HullOverview                               = 0xd1, /* SalvageBeam_HullOverview */
    HintEventType_SalvageBeam_MaterialDepleeted                          = 0xd2, /* SalvageBeam_MaterialDepleeted */
    HintEventType_SalvageBeam_Salvaging                                  = 0xd3, /* SalvageBeam_Salvaging */
    HintEventType_SalvageBeam_VehicleTargetAquired                       = 0xd4, /* SalvageBeam_VehicleTargetAquired */
    HintEventType_SalvageRepairBeam_Shields                              = 0xd5, /* SalvageRepairBeam_Shields */
    HintEventType_SalvageRepairBeam_SwitchFireMode                       = 0xd6, /* SalvageRepairBeam_SwitchFireMode */
    HintEventType_ScanModeEntered                                        = 0xd7, /* ScanModeEntered */
    HintEventType_ScanModeExited                                         = 0xd8, /* ScanModeExited */
    HintEventType_ShipAfterburnerOn                                      = 0xd9, /* ShipAfterburnerOn */
    HintEventType_ShipBoostOn                                            = 0xda, /* ShipBoostOn */
    HintEventType_ShipCollision                                          = 0xdb, /* ShipCollision */
    HintEventType_ShipCritPartHealthDroppedTo25pc                        = 0xdc, /* ShipCritPartHealthDroppedTo25pc */
    HintEventType_ShipOverallHealthDroppedTo75pc                         = 0xdd, /* ShipOverallHealthDroppedTo75pc */
    HintEventType_ShipAnyPartAndItemDamaged                              = 0xde, /* ShipAnyPartAndItemDamaged */
    HintEventType_ShipDecoupledOn                                        = 0xdf, /* ShipDecoupledOn */
    HintEventType_ShipGSafeToggle                                        = 0xe0, /* ShipGSafeToggle */
    HintEventType_ShipHitByGun                                           = 0xe1, /* ShipHitByGun */
    HintEventType_ShipHitByMissile                                       = 0xe2, /* ShipHitByMissile */
    HintEventType_ShipIsFlightReady                                      = 0xe3, /* ShipIsFlightReady */
    HintEventType_ShipEnteringLandingArea                                = 0xe4, /* ShipEnteringLandingArea */
    HintEventType_ShipLandingGearRaised                                  = 0xe5, /* ShipLandingGearRaised */
    HintEventType_ShipLandingGearLowered                                 = 0xe6, /* ShipLandingGearLowered */
    HintEventType_ShipPitchedOrYawedOnce                                 = 0xe7, /* ShipPitchedOrYawedOnce */
    HintEventType_ShipHydrogenFuelDroppedTo25pc                          = 0xe8, /* ShipHydrogenFuelDroppedTo25pc */
    HintEventType_ShipHydrogenFuelDroppedTo75pc                          = 0xe9, /* ShipHydrogenFuelDroppedTo75pc */
    HintEventType_ShipHydrogenFuelRefilled                               = 0xea, /* ShipHydrogenFuelRefilled */
    HintEventType_ShipQuantumFuelDroppedTo25pc                           = 0xeb, /* ShipQuantumFuelDroppedTo25pc */
    HintEventType_ShipQuantumFuelDroppedTo75pc                           = 0xec, /* ShipQuantumFuelDroppedTo75pc */
    HintEventType_ShipQuantumFuelRefilled                                = 0xed, /* ShipQuantumFuelRefilled */
    HintEventType_ShipQuantumTravelObstructed                            = 0xee, /* ShipQuantumTravelObstructed */
    HintEventType_ShipQuantumDriveSpoolingStarted                        = 0xef, /* ShipQuantumDriveSpoolingStarted */
    HintEventType_ShipQuantumDriveSpoolingOff                            = 0xf0, /* ShipQuantumDriveSpoolingOff */
    HintEventType_ShipQuantumDriveTriedSpoolingInCooldown                = 0xf1, /* ShipQuantumDriveTriedSpoolingInCooldown */
    HintEventType_ShipQuantumCalibrationStarted                          = 0xf2, /* ShipQuantumCalibrationStarted */
    HintEventType_ShipQuantumCalibrationCompletedButNotSpooled           = 0xf3, /* ShipQuantumCalibrationCompletedButNotSpooled */
    HintEventType_ShipQuantumCalibrationStalled                          = 0xf4, /* ShipQuantumCalibrationStalled */
    HintEventType_ShipQuantumNoCalibrationButSpooled                     = 0xf5, /* ShipQuantumNoCalibrationButSpooled */
    HintEventType_ShipQuantumCalibratedSpooledAlone                      = 0xf6, /* ShipQuantumCalibratedSpooledAlone */
    HintEventType_ShipQuantumCalibratedSpooledInGroup                    = 0xf7, /* ShipQuantumCalibratedSpooledInGroup */
    HintEventType_ShipSeatEntered                                        = 0xf8, /* ShipSeatEntered */
    HintEventType_ShipShieldsDown                                        = 0xf9, /* ShipShieldsDown */
    HintEventType_ShipZoneEntered                                        = 0xfa, /* ShipZoneEntered */
    HintEventType_ShipTakenOff                                           = 0xfb, /* ShipTakenOff */
    HintEventType_ShipThrottledUpOnce                                    = 0xfc, /* ShipThrottledUpOnce */
    HintEventType_ShipStartedPreRampUp                                   = 0xfd, /* ShipStartedPreRampUp */
    HintEventType_ShipStartedQuantumTravel                               = 0xfe, /* ShipStartedQuantumTravel */
    HintEventType_ShipEndedQuantumTravel                                 = 0xff, /* ShipEndedQuantumTravel */
    HintEventType_ShipEndedPostRampDown                                  = 0x100, /* ShipEndedPostRampDown */
    HintEventType_ShipAbortedQuantumTravel                               = 0x101, /* ShipAbortedQuantumTravel */
    HintEventType_ShipWeaponGroup2Fired                                  = 0x102, /* ShipWeaponGroup2Fired */
    HintEventType_ShipWeaponsFired                                       = 0x103, /* ShipWeaponsFired */
    HintEventType_ShipMissilesDroppedTo25pc                              = 0x104, /* ShipMissilesDroppedTo25pc */
    HintEventType_ShipMissilesRefilled                                   = 0x105, /* ShipMissilesRefilled */
    HintEventType_ShipBulletsDroppedTo25pc                               = 0x106, /* ShipBulletsDroppedTo25pc */
    HintEventType_ShipBulletsRefilled                                    = 0x107, /* ShipBulletsRefilled */
    HintEventType_ShoppingTryOnInspectEnter                              = 0x108, /* ShoppingTryOnInspectEnter */
    HintEventType_ShoppingTryOnInspectExit                               = 0x109, /* ShoppingTryOnInspectExit */
    HintEventType_SignatureSystemPingAngleChanged                        = 0x10a, /* SignatureSystemPingAngleChanged */
    HintEventType_SignatureSystemPingTriggered                           = 0x10b, /* SignatureSystemPingTriggered */
    HintEventType_SignatureSystemScanAbandonned                          = 0x10c, /* SignatureSystemScanAbandonned */
    HintEventType_SignatureSystemScanCompleted                           = 0x10d, /* SignatureSystemScanCompleted */
    HintEventType_SignatureSystemScanModeEntered                         = 0x10e, /* SignatureSystemScanModeEntered */
    HintEventType_SignatureSystemScanModeExited                          = 0x10f, /* SignatureSystemScanModeExited */
    HintEventType_SignatureSystemScanStarted                             = 0x110, /* SignatureSystemScanStarted */
    HintEventType_SignatureSystemScanZoomChanged                         = 0x111, /* SignatureSystemScanZoomChanged */
    HintEventType_SpawnPointEnter                                        = 0x112, /* SpawnPointEnter */
    HintEventType_SpawnPointExit                                         = 0x113, /* SpawnPointExit */
    HintEventType_StaminaDroppedTo90pc                                   = 0x114, /* StaminaDroppedTo90pc */
    HintEventType_StaminaDroppedTo25pc                                   = 0x115, /* StaminaDroppedTo25pc */
    HintEventType_StartGame                                              = 0x116, /* StartGame */
    HintEventType_TrackviewButtonPressedAllowSwitch                      = 0x117, /* TrackviewButtonPressedAllowSwitch */
    HintEventType_TrackviewButtonPressedDontAllowSwitch                  = 0x118, /* TrackviewButtonPressedDontAllowSwitch */
    HintEventType_TrackviewCameraSwitchTimeOut                           = 0x119, /* TrackviewCameraSwitchTimeOut */
    HintEventType_TrackviewCameraSwitchedTo1P                            = 0x11a, /* TrackviewCameraSwitchedTo1P */
    HintEventType_TractorBeamPlayerEquipped                              = 0x11b, /* TractorBeamPlayerEquipped */
    HintEventType_TractorBeamTetheredToTarget                            = 0x11c, /* TractorBeamTetheredToTarget */
    HintEventType_TractorBeamDistControlUsed                             = 0x11d, /* TractorBeamDistControlUsed */
    HintEventType_TractorBeamTetherBrokenDistance                        = 0x11e, /* TractorBeamTetherBrokenDistance */
    HintEventType_TractorBeamTargetedTooHeavyObject                      = 0x11f, /* TractorBeamTargetedTooHeavyObject */
    HintEventType_TractorBeamTargetedTooLargeObject                      = 0x120, /* TractorBeamTargetedTooLargeObject */
    HintEventType_TractorBeamEnteredZeroG                                = 0x121, /* TractorBeamEnteredZeroG */
    HintEventType_TractorBeamLineOfSightBroken                           = 0x122, /* TractorBeamLineOfSightBroken */
    HintEventType_TractorBeamTetherBrokenFastMovement                    = 0x123, /* TractorBeamTetherBrokenFastMovement */
    HintEventType_UnboundKeyShown                                        = 0x124, /* UnboundKeyShown */
    HintEventType_UsableEntered                                          = 0x125, /* UsableEntered */
    HintEventType_UsableExited                                           = 0x126, /* UsableExited */
    HintEventType_VolatileCargoCollected                                 = 0x127, /* VolatileCargoCollected */
    HintEventType_VolatileCargoCollectedFirstTime                        = 0x128, /* VolatileCargoCollectedFirstTime */
    HintEventType_VolatileCargoCritical                                  = 0x129, /* VolatileCargoCritical */
    HintEventType_VolatileCargoExplodedNoDeath                           = 0x12a, /* VolatileCargoExplodedNoDeath */
    HintEventType_VolatileCargoJettisoned                                = 0x12b, /* VolatileCargoJettisoned */
    HintEventType_VolatileCargoLightOnCritical                           = 0x12c, /* VolatileCargoLightOnCritical */
    HintEventType_VolatileCargoLightOnWarning                            = 0x12d, /* VolatileCargoLightOnWarning */
    HintEventType_WantedLevelIncreased                                   = 0x12e, /* WantedLevelIncreased */
    HintEventType_WeaponADSActivateNightvision                           = 0x12f, /* WeaponADSActivateNightvision */
    HintEventType_WeaponADSActivateZoom                                  = 0x130, /* WeaponADSActivateZoom */
    HintEventType_WeaponADSUsed                                          = 0x131, /* WeaponADSUsed */
    HintEventType_WeaponADSZoomedOut                                     = 0x132, /* WeaponADSZoomedOut */
    HintEventType_WeaponZeroingEnteredADSManual                          = 0x133, /* WeaponZeroingEnteredADSManual */
    HintEventType_WeaponZeroingEnteredADSAuto                            = 0x134, /* WeaponZeroingEnteredADSAuto */
    HintEventType_WeaponZeroingAutoSet                                   = 0x135, /* WeaponZeroingAutoSet */
    HintEventType_EVENTSCOUNT                                            = 0x136, /* EVENTSCOUNT */
    HintEventType_UNDEFINED                                              = 0x137, /* UNDEFINED */
};

// Original name: HitReactionPart
enum HitReactionPart {
    HitReactionPart_Head     = 0x0, /* Head */
    HitReactionPart_Torso    = 0x1, /* Torso */
    HitReactionPart_Crotch   = 0x2, /* Crotch */
    HitReactionPart_LegLeft  = 0x3, /* LegLeft */
    HitReactionPart_LegRight = 0x4, /* LegRight */
};

// Original name: HitReactionRegion
enum HitReactionRegion {
    HitReactionRegion_Head      = 0x0, /* Head */
    HitReactionRegion_UpperBody = 0x1, /* UpperBody */
    HitReactionRegion_LowerBody = 0x2, /* LowerBody */
};

// Original name: InnerThoughtDisplayType
enum InnerThoughtDisplayType {
    InnerThoughtDisplayType_Show        = 0x0, /* Show */
    InnerThoughtDisplayType_Hide        = 0x1, /* Hide */
    InnerThoughtDisplayType_ForeignOnly = 0x2, /* ForeignOnly */
    InnerThoughtDisplayType_UNDEFINED   = 0x3, /* UNDEFINED */
};

// Original name: InnerThoughtJustification
enum InnerThoughtJustification {
    InnerThoughtJustification_Left      = 0x0, /* Left */
    InnerThoughtJustification_Middle    = 0x1, /* Middle */
    InnerThoughtJustification_Right     = 0x2, /* Right */
    InnerThoughtJustification_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: InnerThoughtOrientation
enum InnerThoughtOrientation {
    InnerThoughtOrientation_RotateToPlayer = 0x0, /* RotateToPlayer */
    InnerThoughtOrientation_FixedRotation  = 0x1, /* FixedRotation */
    InnerThoughtOrientation_UNDEFINED      = 0x2, /* UNDEFINED */
};

// Original name: InnerThought_ForceCase
enum InnerThought_ForceCase {
    InnerThought_ForceCase_None  = 0x0, /* None */
    InnerThought_ForceCase_Upper = 0x1, /* Upper */
    InnerThought_ForceCase_Lower = 0x2, /* Lower */
};

// Original name: InputDeviceType
enum InputDeviceType {
    InputDeviceType_Keyboard    = 0x0, /* Keyboard */
    InputDeviceType_Mouse       = 0x1, /* Mouse */
    InputDeviceType_Joystick    = 0x2, /* Joystick */
    InputDeviceType_Gamepad     = 0x3, /* Gamepad */
    InputDeviceType_Headmounted = 0x4, /* Headmounted */
    InputDeviceType_Count       = 0x5, /* Count */
    InputDeviceType_AllInputs   = 0x1f, /* AllInputs */
    InputDeviceType_Unknown     = 0xffff, /* Unknown */
};

// Original name: InstancedInteriorSizeEnum
enum InstancedInteriorSizeEnum {
    InstancedInteriorSizeEnum_Small     = 0x0, /* Small */
    InstancedInteriorSizeEnum_Medium    = 0x1, /* Medium */
    InstancedInteriorSizeEnum_Large     = 0x2, /* Large */
    InstancedInteriorSizeEnum_XLarge    = 0x3, /* XLarge */
    InstancedInteriorSizeEnum_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: InstancedInteriorTechLevelEnum
enum InstancedInteriorTechLevelEnum {
    InstancedInteriorTechLevelEnum_HighTech  = 0x0, /* HighTech */
    InstancedInteriorTechLevelEnum_LowTech   = 0x1, /* LowTech */
    InstancedInteriorTechLevelEnum_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: InteractionBindingsMethod
enum InteractionBindingsMethod {
    InteractionBindingsMethod_None   = 0x0, /* None */
    InteractionBindingsMethod_Name   = 0x1, /* Name */
    InteractionBindingsMethod_States = 0x2, /* States */
};

// Original name: InteractionGenericCursor
enum InteractionGenericCursor {
    InteractionGenericCursor_SingleAction = 0x0, /* SingleAction */
    InteractionGenericCursor_MultiAction  = 0x1, /* MultiAction */
    InteractionGenericCursor_Button       = 0x2, /* Button */
    InteractionGenericCursor_Grab         = 0x3, /* Grab */
    InteractionGenericCursor_Conversation = 0x4, /* Conversation */
    InteractionGenericCursor_Invalid      = 0x5, /* Invalid */
    InteractionGenericCursor_UNDEFINED    = 0x6, /* UNDEFINED */
};

// Original name: InteractionModifier
enum InteractionModifier {
    InteractionModifier_DefaultStanding = 0x0, /* DefaultStanding */
    InteractionModifier_Crouch          = 0x1, /* Crouch */
    InteractionModifier_Prone           = 0x2, /* Prone */
    InteractionModifier_Linked          = 0x3, /* Linked */
    InteractionModifier_EVA             = 0x4, /* EVA */
    InteractionModifier_UNDEFINED       = 0x5, /* UNDEFINED */
};

// Original name: InteractionPromptBoundTo
enum InteractionPromptBoundTo {
    InteractionPromptBoundTo_ActorEyes                                = 0x0, /* ActorEyes */
    InteractionPromptBoundTo_EntityRoot                               = 0x1, /* EntityRoot */
    InteractionPromptBoundTo_TopBoundingBoxZSurface                   = 0x2, /* TopBoundingBoxZSurface */
    InteractionPromptBoundTo_NearestBoundingBoxSurface                = 0x3, /* NearestBoundingBoxSurface */
    InteractionPromptBoundTo_NearestBoundingBoxIgnoreFurthestSurfaces = 0x4, /* NearestBoundingBoxIgnoreFurthestSurfaces */
    InteractionPromptBoundTo_InteractionPointFixedOffset              = 0x5, /* InteractionPointFixedOffset */
    InteractionPromptBoundTo_Tmp_AngleConstraintForwardDirection      = 0x6, /* Tmp_AngleConstraintForwardDirection */
    InteractionPromptBoundTo_UNDEFINED                                = 0x7, /* UNDEFINED */
};

// Original name: InteractiveVariableLoopType
enum InteractiveVariableLoopType {
    InteractiveVariableLoopType_NoLoop    = 0x0, /* NoLoop */
    InteractiveVariableLoopType_Loop      = 0x1, /* Loop */
    InteractiveVariableLoopType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: InterpolationMode
enum InterpolationMode {
    InterpolationMode_Linear         = 0x0, /* Linear */
    InterpolationMode_EaseInQuad     = 0x1, /* EaseInQuad */
    InterpolationMode_EaseOutQuad    = 0x2, /* EaseOutQuad */
    InterpolationMode_EaseInOutQuad  = 0x3, /* EaseInOutQuad */
    InterpolationMode_EaseInCubic    = 0x4, /* EaseInCubic */
    InterpolationMode_EaseOutCubic   = 0x5, /* EaseOutCubic */
    InterpolationMode_EaseInOutCubic = 0x6, /* EaseInOutCubic */
    InterpolationMode_EaseInExpo     = 0x7, /* EaseInExpo */
    InterpolationMode_EaseOutExpo    = 0x8, /* EaseOutExpo */
    InterpolationMode_EaseInOutExpo  = 0x9, /* EaseInOutExpo */
};

// Original name: InventoryContainerType
enum InventoryContainerType {
    InventoryContainerType_Closed     = 0x0, /* Closed */
    InventoryContainerType_Open       = 0x1, /* Open */
    InventoryContainerType_OpenAlways = 0x2, /* OpenAlways */
    InventoryContainerType_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: ItemJumpDriveState
enum ItemJumpDriveState {
    ItemJumpDriveState_Idle           = 0x0, /* Idle */
    ItemJumpDriveState_EntryChecks    = 0x1, /* EntryChecks */
    ItemJumpDriveState_Tuning         = 0x2, /* Tuning */
    ItemJumpDriveState_RequestingJump = 0x3, /* RequestingJump */
    ItemJumpDriveState_WaitingForOpen = 0x4, /* WaitingForOpen */
    ItemJumpDriveState_Entering       = 0x5, /* Entering */
    ItemJumpDriveState_Transiting     = 0x6, /* Transiting */
    ItemJumpDriveState_Exiting        = 0x7, /* Exiting */
    ItemJumpDriveState_Failing        = 0x8, /* Failing */
    ItemJumpDriveState_UNDEFINED      = 0x9, /* UNDEFINED */
};

// Original name: ItemKioskMode
enum ItemKioskMode {
    ItemKioskMode_Commodity = 0x0, /* Commodity */
    ItemKioskMode_Reference = 0x1, /* Reference */
    ItemKioskMode_Vehicle   = 0x2, /* Vehicle */
    ItemKioskMode_Player    = 0x3, /* Player */
    ItemKioskMode_Refinery  = 0x4, /* Refinery */
    ItemKioskMode_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: ItemResourceDeltaType
enum ItemResourceDeltaType {
    ItemResourceDeltaType_Consumption       = 0x0, /* Consumption */
    ItemResourceDeltaType_Generation        = 0x1, /* Generation */
    ItemResourceDeltaType_Storage           = 0x2, /* Storage */
    ItemResourceDeltaType_Conversion        = 0x3, /* Conversion */
    ItemResourceDeltaType_NetworkReflection = 0x4, /* NetworkReflection */
    ItemResourceDeltaType_INVALID           = 0x5, /* INVALID */
    ItemResourceDeltaType_UNDEFINED         = 0x6, /* UNDEFINED */
};

// Original name: ItemResourceTypes
enum ItemResourceTypes {
    ItemResourceTypes_Vent             = 0x0, /* Vent */
    ItemResourceTypes_LifeSupport      = 0x1, /* LifeSupport */
    ItemResourceTypes_Light            = 0x2, /* Light */
    ItemResourceTypes_HeatSource       = 0x3, /* HeatSource */
    ItemResourceTypes_GravityGenerator = 0x4, /* GravityGenerator */
    ItemResourceTypes_Cooler           = 0x5, /* Cooler */
    ItemResourceTypes_Relay            = 0x6, /* Relay */
    ItemResourceTypes_Misc             = 0x7, /* Misc */
    ItemResourceTypes_All              = 0x8, /* All */
    ItemResourceTypes_UNDEFINED        = 0x9, /* UNDEFINED */
};

// Original name: JumpVariant
enum JumpVariant {
    JumpVariant_Default           = 0x0, /* Default */
    JumpVariant_Vault             = 0x1, /* Vault */
    JumpVariant_ZeroG             = 0x2, /* ZeroG */
    JumpVariant_KnockdownForward  = 0x3, /* KnockdownForward */
    JumpVariant_KnockdownBackward = 0x4, /* KnockdownBackward */
    JumpVariant_LadderDisembark   = 0x5, /* LadderDisembark */
};

// Original name: KioskShopType
enum KioskShopType {
    KioskShopType_Commodity = 0x0, /* Commodity */
    KioskShopType_ShipItem  = 0x1, /* ShipItem */
    KioskShopType_Refinery  = 0x2, /* Refinery */
    KioskShopType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: LandingCondition
enum LandingCondition {
    LandingCondition_None         = 0x0, /* None */
    LandingCondition_ADSTriggered = 0x1, /* ADSTriggered */
    LandingCondition_UNDEFINED    = 0x2, /* UNDEFINED */
};

// Original name: LandingExitStance
enum LandingExitStance {
    LandingExitStance_Stand     = 0x0, /* Stand */
    LandingExitStance_Crouch    = 0x1, /* Crouch */
    LandingExitStance_Prone     = 0x2, /* Prone */
    LandingExitStance_ProneBack = 0x3, /* ProneBack */
    LandingExitStance_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: LandingStrength
enum LandingStrength {
    LandingStrength_Light  = 0x0, /* Light */
    LandingStrength_Medium = 0x1, /* Medium */
    LandingStrength_Heavy  = 0x2, /* Heavy */
    LandingStrength_Impact = 0x3, /* Impact */
};

// Original name: LeanStateType
enum LeanStateType {
    LeanStateType_Idle        = 0x0, /* Idle */
    LeanStateType_LeanLeft    = 0x1, /* LeanLeft */
    LeanStateType_LeanRight   = 0x2, /* LeanRight */
    LeanStateType_LeftToIdle  = 0x3, /* LeftToIdle */
    LeanStateType_IdleToLeft  = 0x4, /* IdleToLeft */
    LeanStateType_IdleToRight = 0x5, /* IdleToRight */
    LeanStateType_RightToIdle = 0x6, /* RightToIdle */
    LeanStateType_LeftToRight = 0x7, /* LeftToRight */
    LeanStateType_RightToLeft = 0x8, /* RightToLeft */
};

// Original name: LedgeHeight
enum LedgeHeight {
    LedgeHeight_Low    = 0x0, /* Low */
    LedgeHeight_Medium = 0x1, /* Medium */
    LedgeHeight_High   = 0x2, /* High */
    LedgeHeight_Ultra  = 0x3, /* Ultra */
};

// Original name: LedgeTransition
enum LedgeTransition {
    LedgeTransition_Vault  = 0x0, /* Vault */
    LedgeTransition_Mantle = 0x1, /* Mantle */
};

// Original name: LegacyCraftingPortMode
enum LegacyCraftingPortMode {
    LegacyCraftingPortMode_Both      = 0x0, /* Both */
    LegacyCraftingPortMode_Input     = 0x1, /* Input */
    LegacyCraftingPortMode_Output    = 0x2, /* Output */
    LegacyCraftingPortMode_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: LevelStreamingMode
enum LevelStreamingMode {
    LevelStreamingMode_Never      = 0x0, /* Never */
    LevelStreamingMode_Always     = 0x1, /* Always */
    LevelStreamingMode_ForTesting = 0x2, /* ForTesting */
};

// Original name: LightProperties
enum LightProperties {
    LightProperties_Radius       = 0x0, /* Radius */
    LightProperties_DiffuseColor = 0x1, /* DiffuseColor */
    LightProperties_Intensity    = 0x2, /* Intensity */
    LightProperties_UNDEFINED    = 0x3, /* UNDEFINED */
};

// Original name: LightningStrengthPropertyType
enum LightningStrengthPropertyType {
    LightningStrengthPropertyType_Distance         = 0x0, /* Distance */
    LightningStrengthPropertyType_ElectricalCharge = 0x1, /* ElectricalCharge */
    LightningStrengthPropertyType_UNDEFINED        = 0x2, /* UNDEFINED */
};

// Original name: LinkedStatReverseSignFlag
enum LinkedStatReverseSignFlag {
    LinkedStatReverseSignFlag_None           = 0x0, /* None */
    LinkedStatReverseSignFlag_AlwaysPositive = 0x1, /* AlwaysPositive */
    LinkedStatReverseSignFlag_AlwaysNegative = 0x2, /* AlwaysNegative */
    LinkedStatReverseSignFlag_ReverseSign    = 0x3, /* ReverseSign */
    LinkedStatReverseSignFlag_UNDEFINED      = 0x4, /* UNDEFINED */
};

// Original name: MapDisplayFrameType
enum MapDisplayFrameType {
    MapDisplayFrameType_Rectangle2D    = 0x0, /* Rectangle2D */
    MapDisplayFrameType_Rectangle2DRTT = 0x1, /* Rectangle2DRTT */
    MapDisplayFrameType_Ellipse2D      = 0x2, /* Ellipse2D */
    MapDisplayFrameType_Ellipse2DRTT   = 0x3, /* Ellipse2DRTT */
    MapDisplayFrameType_Sphere3D       = 0x4, /* Sphere3D */
    MapDisplayFrameType_None           = 0x5, /* None */
    MapDisplayFrameType_UNDEFINED      = 0x6, /* UNDEFINED */
};

// Original name: MapMarkerTrackingPlaneAlignmentMode
enum MapMarkerTrackingPlaneAlignmentMode {
    MapMarkerTrackingPlaneAlignmentMode_GalacticPlane = 0x0, /* GalacticPlane */
    MapMarkerTrackingPlaneAlignmentMode_Player        = 0x1, /* Player */
    MapMarkerTrackingPlaneAlignmentMode_UNDEFINED     = 0x2, /* UNDEFINED */
};

// Original name: MarkerClippingVolumeType
enum MarkerClippingVolumeType {
    MarkerClippingVolumeType_Sphere    = 0x0, /* Sphere */
    MarkerClippingVolumeType_Cuboid    = 0x1, /* Cuboid */
    MarkerClippingVolumeType_Frustum   = 0x2, /* Frustum */
    MarkerClippingVolumeType_Camera    = 0x3, /* Camera */
    MarkerClippingVolumeType_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: MarkerTrackingActions
enum MarkerTrackingActions {
    MarkerTrackingActions_None          = 0x0, /* None */
    MarkerTrackingActions_SelectMarker  = 0x1, /* SelectMarker */
    MarkerTrackingActions_FocusMarker   = 0x2, /* FocusMarker */
    MarkerTrackingActions_LockTarget    = 0x3, /* LockTarget */
    MarkerTrackingActions_PinTarget     = 0x4, /* PinTarget */
    MarkerTrackingActions_HailContact   = 0x5, /* HailContact */
    MarkerTrackingActions_QuantumTravel = 0x6, /* QuantumTravel */
    MarkerTrackingActions_UNDEFINED     = 0x7, /* UNDEFINED */
};

// Original name: Marker_ARCullingCategory
enum Marker_ARCullingCategory {
    Marker_ARCullingCategory_Unassigned        = 0x0, /* Unassigned */
    Marker_ARCullingCategory_Special_Hostile   = 0x1, /* Special_Hostile */
    Marker_ARCullingCategory_UnattendedVehicle = 0x2, /* UnattendedVehicle */
    Marker_ARCullingCategory_Vehicle           = 0x3, /* Vehicle */
    Marker_ARCullingCategory_Vehicle_Ground    = 0x4, /* Vehicle_Ground */
    Marker_ARCullingCategory_Actor             = 0x5, /* Actor */
    Marker_ARCullingCategory_Turret            = 0x6, /* Turret */
    Marker_ARCullingCategory_Navpoint          = 0x7, /* Navpoint */
    Marker_ARCullingCategory_Mineable          = 0x8, /* Mineable */
    Marker_ARCullingCategory_Creature          = 0x9, /* Creature */
    Marker_ARCullingCategory_Placeholder1      = 0xa, /* Placeholder1 */
    Marker_ARCullingCategory_Placeholder2      = 0xb, /* Placeholder2 */
    Marker_ARCullingCategory_Placeholder3      = 0xc, /* Placeholder3 */
};

// Original name: Marker_DisplayMode
enum Marker_DisplayMode {
    Marker_DisplayMode_FPS         = 0x0, /* FPS */
    Marker_DisplayMode_VehicleSeat = 0x1, /* VehicleSeat */
};

// Original name: Marker_MapBoxoutSectionType
enum Marker_MapBoxoutSectionType {
    Marker_MapBoxoutSectionType_Amenities    = 0x0, /* Amenities */
    Marker_MapBoxoutSectionType_Galactapedia = 0x1, /* Galactapedia */
    Marker_MapBoxoutSectionType_Jurisdiction = 0x2, /* Jurisdiction */
};

// Original name: Marker_MapDisplayMode
enum Marker_MapDisplayMode {
    Marker_MapDisplayMode_DefaultRadar      = 0x0, /* DefaultRadar */
    Marker_MapDisplayMode_DefaultStarmap    = 0x1, /* DefaultStarmap */
    Marker_MapDisplayMode_JumpTunnelRadar   = 0x2, /* JumpTunnelRadar */
    Marker_MapDisplayMode_JumpTunnelStarmap = 0x3, /* JumpTunnelStarmap */
    Marker_MapDisplayMode_None              = 0x4, /* None */
};

// Original name: Marker_MapLabelDisplayType
enum Marker_MapLabelDisplayType {
    Marker_MapLabelDisplayType_Always          = 0x0, /* Always */
    Marker_MapLabelDisplayType_OnInteracted    = 0x1, /* OnInteracted */
    Marker_MapLabelDisplayType_OnParentSurface = 0x2, /* OnParentSurface */
    Marker_MapLabelDisplayType_OnSelected      = 0x3, /* OnSelected */
};

// Original name: Marker_StackPositionAlignment
enum Marker_StackPositionAlignment {
    Marker_StackPositionAlignment_Top          = 0x0, /* Top */
    Marker_StackPositionAlignment_Origin       = 0x1, /* Origin */
    Marker_StackPositionAlignment_Center       = 0x2, /* Center */
    Marker_StackPositionAlignment_Bottom       = 0x3, /* Bottom */
    Marker_StackPositionAlignment_TopAndBottom = 0x4, /* TopAndBottom */
};

// Original name: MaterialProperties
enum MaterialProperties {
    MaterialProperties_Glow         = 0x0, /* Glow */
    MaterialProperties_Wear         = 0x1, /* Wear */
    MaterialProperties_Dirt         = 0x2, /* Dirt */
    MaterialProperties_Damage       = 0x3, /* Damage */
    MaterialProperties_Interference = 0x4, /* Interference */
    MaterialProperties_Dissolve     = 0x5, /* Dissolve */
    MaterialProperties_Wetness      = 0x6, /* Wetness */
    MaterialProperties_UNDEFINED    = 0x7, /* UNDEFINED */
};

// Original name: MedBedTier
enum MedBedTier {
    MedBedTier_Hospital  = 0x0, /* Hospital */
    MedBedTier_Clinic    = 0x1, /* Clinic */
    MedBedTier_Ambulance = 0x2, /* Ambulance */
    MedBedTier_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: MeleeAttackClass
enum MeleeAttackClass {
    MeleeAttackClass_Any    = -0x1, /* Any */
    MeleeAttackClass_Basic  = 0x1, /* Basic */
    MeleeAttackClass_Synced = 0x2, /* Synced */
};

// Original name: MessageState
enum MessageState {
    MessageState_Normal   = 0x0, /* Normal */
    MessageState_Moderate = 0x1, /* Moderate */
    MessageState_Critical = 0x2, /* Critical */
};

// Original name: MissionLocationResourcePriority
enum MissionLocationResourcePriority {
    MissionLocationResourcePriority_Contract  = 0x0, /* Contract */
    MissionLocationResourcePriority_Story     = 0x1, /* Story */
    MissionLocationResourcePriority_Event     = 0x2, /* Event */
    MissionLocationResourcePriority_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: MissionLocationTagType
enum MissionLocationTagType {
    MissionLocationTagType_General   = 0x0, /* General */
    MissionLocationTagType_Produces  = 0x1, /* Produces */
    MissionLocationTagType_Consumes  = 0x2, /* Consumes */
    MissionLocationTagType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: Month
enum Month {
    Month_January   = 0x0, /* January */
    Month_February  = 0x1, /* February */
    Month_March     = 0x2, /* March */
    Month_April     = 0x3, /* April */
    Month_May       = 0x4, /* May */
    Month_June      = 0x5, /* June */
    Month_July      = 0x6, /* July */
    Month_August    = 0x7, /* August */
    Month_September = 0x8, /* September */
    Month_October   = 0x9, /* October */
    Month_November  = 0xa, /* November */
    Month_December  = 0xb, /* December */
    Month_UNDEFINED = 0xc, /* UNDEFINED */
};

// Original name: MotionControlType
enum MotionControlType {
    MotionControlType_Animation = 0x0, /* Animation */
    MotionControlType_Entity    = 0x1, /* Entity */
};

// Original name: MotionStateType
enum MotionStateType {
    MotionStateType_Idle       = 0x0, /* Idle */
    MotionStateType_Move       = 0x1, /* Move */
    MotionStateType_IdleToMove = 0x2, /* IdleToMove */
    MotionStateType_MoveToIdle = 0x3, /* MoveToIdle */
    MotionStateType_Step       = 0x4, /* Step */
    MotionStateType_Turn       = 0x5, /* Turn */
    MotionStateType_Juke       = 0x6, /* Juke */
    MotionStateType_InAirIdle  = 0x7, /* InAirIdle */
    MotionStateType_InAirMove  = 0x8, /* InAirMove */
};

// Original name: MovementSet
enum MovementSet {
    MovementSet_Drunk    = 0x1, /* Drunk */
    MovementSet_Effort   = 0x2, /* Effort */
    MovementSet_Hurt     = 0x3, /* Hurt */
    MovementSet_Movable  = 0x4, /* Movable */
    MovementSet_Standard = 0x5, /* Standard */
    MovementSet_Stumble  = 0x6, /* Stumble */
};

// Original name: MovementSetCondition
enum MovementSetCondition {
    MovementSetCondition_StateMovable      = 0x0, /* StateMovable */
    MovementSetCondition_StateBodyDragging = 0x1, /* StateBodyDragging */
    MovementSetCondition_StateSubmerged    = 0x2, /* StateSubmerged */
    MovementSetCondition_ForceBrace        = 0x3, /* ForceBrace */
    MovementSetCondition_ForceLean         = 0x4, /* ForceLean */
    MovementSetCondition_ForceStumble      = 0x5, /* ForceStumble */
    MovementSetCondition_StatusHurt        = 0x6, /* StatusHurt */
    MovementSetCondition_StatusDrunk       = 0x7, /* StatusDrunk */
};

// Original name: MovementSpeed
enum MovementSpeed {
    MovementSpeed_WalkSlow = 0x0, /* WalkSlow */
    MovementSpeed_WalkMid  = 0x1, /* WalkMid */
    MovementSpeed_WalkFast = 0x2, /* WalkFast */
    MovementSpeed_RunSlow  = 0x3, /* RunSlow */
    MovementSpeed_RunFast  = 0x4, /* RunFast */
    MovementSpeed_Sprint   = 0x5, /* Sprint */
};

// Original name: NaturalMotionSpeed
enum NaturalMotionSpeed {
    NaturalMotionSpeed_WalkSlow        = 0x0, /* WalkSlow */
    NaturalMotionSpeed_WalkMid         = 0x1, /* WalkMid */
    NaturalMotionSpeed_WalkFast        = 0x2, /* WalkFast */
    NaturalMotionSpeed_RunSlow         = 0x3, /* RunSlow */
    NaturalMotionSpeed_RunFast         = 0x4, /* RunFast */
    NaturalMotionSpeed_Sprint          = 0x5, /* Sprint */
    NaturalMotionSpeed_GreenZoneWalk   = 0x6, /* GreenZoneWalk */
    NaturalMotionSpeed_GreenZoneSprint = 0x7, /* GreenZoneSprint */
    NaturalMotionSpeed_AimDownSight    = 0x8, /* AimDownSight */
    NaturalMotionSpeed_Lean            = 0x9, /* Lean */
    NaturalMotionSpeed_Conversation    = 0xa, /* Conversation */
    NaturalMotionSpeed_UNDEFINED       = 0xb, /* UNDEFINED */
};

// Original name: NavPointIconEnum
enum NavPointIconEnum {
    NavPointIconEnum_Default     = 0x0, /* Default */
    NavPointIconEnum_Star        = 0x1, /* Star */
    NavPointIconEnum_Planet      = 0x2, /* Planet */
    NavPointIconEnum_Moon        = 0x3, /* Moon */
    NavPointIconEnum_Station     = 0x4, /* Station */
    NavPointIconEnum_Outpost     = 0x5, /* Outpost */
    NavPointIconEnum_LandingZone = 0x6, /* LandingZone */
    NavPointIconEnum_UNDEFINED   = 0x7, /* UNDEFINED */
};

// Original name: ParticleAttachToZone
enum ParticleAttachToZone {
    ParticleAttachToZone_Parent      = 0x0, /* Parent */
    ParticleAttachToZone_AboveParent = 0x1, /* AboveParent */
    ParticleAttachToZone_UNDEFINED   = 0x2, /* UNDEFINED */
};

// Original name: ParticleCPUVisAreaCullingMode
enum ParticleCPUVisAreaCullingMode {
    ParticleCPUVisAreaCullingMode_None      = 0x0, /* None */
    ParticleCPUVisAreaCullingMode_Local     = 0x1, /* Local */
    ParticleCPUVisAreaCullingMode_Dynamic   = 0x2, /* Dynamic */
    ParticleCPUVisAreaCullingMode_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: ParticleGPUVisAreaCullingMode
enum ParticleGPUVisAreaCullingMode {
    ParticleGPUVisAreaCullingMode_Default     = 0x0, /* Default */
    ParticleGPUVisAreaCullingMode_None        = 0x1, /* None */
    ParticleGPUVisAreaCullingMode_PerParticle = 0x2, /* PerParticle */
    ParticleGPUVisAreaCullingMode_PerPixel    = 0x3, /* PerPixel */
    ParticleGPUVisAreaCullingMode_UNDEFINED   = 0x4, /* UNDEFINED */
};

// Original name: ParticleTesselationOverride
enum ParticleTesselationOverride {
    ParticleTesselationOverride_Default   = 0x0, /* Default */
    ParticleTesselationOverride_Off       = 0x1, /* Off */
    ParticleTesselationOverride_Low       = 0x2, /* Low */
    ParticleTesselationOverride_Medium    = 0x3, /* Medium */
    ParticleTesselationOverride_High      = 0x4, /* High */
    ParticleTesselationOverride_Ultra     = 0x5, /* Ultra */
    ParticleTesselationOverride_UNDEFINED = 0x6, /* UNDEFINED */
};

// Original name: PersistentItemGameModeFlag
enum PersistentItemGameModeFlag {
    PersistentItemGameModeFlag_Any                 = 0x0, /* Any */
    PersistentItemGameModeFlag_StarMarine          = 0x0, /* StarMarine */
    PersistentItemGameModeFlag_ArenaCommander      = 0x1, /* ArenaCommander */
    PersistentItemGameModeFlag_PersistentUniverse  = 0x2, /* PersistentUniverse */
    PersistentItemGameModeFlag_SubscriberExclusive = 0x3, /* SubscriberExclusive */
    PersistentItemGameModeFlag_Prison              = 0x4, /* Prison */
};

// Original name: PersonalThoughtContext
enum PersonalThoughtContext {
    PersonalThoughtContext_EVA           = 0x0, /* EVA */
    PersonalThoughtContext_Flight        = 0x1, /* Flight */
    PersonalThoughtContext_GroundVehicle = 0x2, /* GroundVehicle */
    PersonalThoughtContext_OnFoot        = 0x3, /* OnFoot */
    PersonalThoughtContext_Seated        = 0x4, /* Seated */
    PersonalThoughtContext_Turret        = 0x5, /* Turret */
    PersonalThoughtContext_Usable        = 0x6, /* Usable */
    PersonalThoughtContext_UNDEFINED     = 0x7, /* UNDEFINED */
};

// Original name: PickableCollision
enum PickableCollision {
    PickableCollision_None        = 0x0, /* None */
    PickableCollision_Transparent = 0x1, /* Transparent */
    PickableCollision_Cutout      = 0x2, /* Cutout */
    PickableCollision_Opaque      = 0x3, /* Opaque */
};

// Original name: PlanetAreaFitting
enum PlanetAreaFitting {
    PlanetAreaFitting_Tight = 0x0, /* Tight */
    PlanetAreaFitting_Loose = 0x1, /* Loose */
};

// Original name: PlanetAreaType
enum PlanetAreaType {
    PlanetAreaType_Hole         = 0x0, /* Hole */
    PlanetAreaType_ExcludeLarge = 0x1, /* ExcludeLarge */
    PlanetAreaType_ExcludeAll   = 0x2, /* ExcludeAll */
};

// Original name: PostEffectParams
enum PostEffectParams {
    PostEffectParams_Global_DirectionalBlur_Vec        = 0x0, /* Global_DirectionalBlur_Vec */
    PostEffectParams_ColorGrading_Brightness           = 0x1, /* ColorGrading_Brightness */
    PostEffectParams_ColorGrading_Contrast             = 0x2, /* ColorGrading_Contrast */
    PostEffectParams_ColorGrading_Saturation           = 0x3, /* ColorGrading_Saturation */
    PostEffectParams_Dof_Active                        = 0x4, /* Dof_Active */
    PostEffectParams_Dof_FocusDistance                 = 0x5, /* Dof_FocusDistance */
    PostEffectParams_Dof_FocusRange                    = 0x6, /* Dof_FocusRange */
    PostEffectParams_Dof_FocusMin                      = 0x7, /* Dof_FocusMin */
    PostEffectParams_Dof_FocusMax                      = 0x8, /* Dof_FocusMax */
    PostEffectParams_Dof_MaxCoC                        = 0x9, /* Dof_MaxCoC */
    PostEffectParams_Dof_BlurAmount                    = 0xa, /* Dof_BlurAmount */
    PostEffectParams_Dof_User_Active                   = 0xb, /* Dof_User_Active */
    PostEffectParams_Dof_User_FocusDistance            = 0xc, /* Dof_User_FocusDistance */
    PostEffectParams_Dof_User_FocusRange               = 0xd, /* Dof_User_FocusRange */
    PostEffectParams_Dof_User_BlurAmount               = 0xe, /* Dof_User_BlurAmount */
    PostEffectParams_Dof_FocusMinZ                     = 0xf, /* Dof_FocusMinZ */
    PostEffectParams_Dof_FocusMinZScale                = 0x10, /* Dof_FocusMinZScale */
    PostEffectParams_FilterChromaShift_User_Amount     = 0x11, /* FilterChromaShift_User_Amount */
    PostEffectParams_FilterArtifacts_ChromaShift       = 0x12, /* FilterArtifacts_ChromaShift */
    PostEffectParams_FilterGrain_Amount                = 0x13, /* FilterGrain_Amount */
    PostEffectParams_FilterArtifacts_Grain             = 0x14, /* FilterArtifacts_Grain */
    PostEffectParams_FilterArtifacts_GrainTile         = 0x15, /* FilterArtifacts_GrainTile */
    PostEffectParams_FilterBlurring_Amount             = 0x16, /* FilterBlurring_Amount */
    PostEffectParams_FilterRadialBlurring_Amount       = 0x17, /* FilterRadialBlurring_Amount */
    PostEffectParams_FilterRadialBlurring_ScreenPosX   = 0x18, /* FilterRadialBlurring_ScreenPosX */
    PostEffectParams_FilterRadialBlurring_ScreenPosY   = 0x19, /* FilterRadialBlurring_ScreenPosY */
    PostEffectParams_FilterRadialBlurring_Radius       = 0x1a, /* FilterRadialBlurring_Radius */
    PostEffectParams_FlashBang_Active                  = 0x1b, /* FlashBang_Active */
    PostEffectParams_FlashBang_DifractionAmount        = 0x1c, /* FlashBang_DifractionAmount */
    PostEffectParams_FlashBang_Time                    = 0x1d, /* FlashBang_Time */
    PostEffectParams_FlashBang_BlindAmount             = 0x1e, /* FlashBang_BlindAmount */
    PostEffectParams_GForce_BlackoutValue              = 0x1f, /* GForce_BlackoutValue */
    PostEffectParams_GForce_RedoutValue                = 0x20, /* GForce_RedoutValue */
    PostEffectParams_GForce_LatStressValue             = 0x21, /* GForce_LatStressValue */
    PostEffectParams_GForce_BlackoutRecovery           = 0x22, /* GForce_BlackoutRecovery */
    PostEffectParams_GForce_LatStressRecovery          = 0x23, /* GForce_LatStressRecovery */
    PostEffectParams_GForce_PulseAmplitude             = 0x24, /* GForce_PulseAmplitude */
    PostEffectParams_GForce_PulseMaskAmplitude         = 0x25, /* GForce_PulseMaskAmplitude */
    PostEffectParams_GForce_PulsePeriod                = 0x26, /* GForce_PulsePeriod */
    PostEffectParams_GForce_PulseDuration              = 0x27, /* GForce_PulseDuration */
    PostEffectParams_GForce_TunnelRadiusGrey           = 0x28, /* GForce_TunnelRadiusGrey */
    PostEffectParams_GForce_TunnelRadiusBlack          = 0x29, /* GForce_TunnelRadiusBlack */
    PostEffectParams_GForce_TunnelStrengthGrey         = 0x2a, /* GForce_TunnelStrengthGrey */
    PostEffectParams_GForce_TunnelStrengthBlack        = 0x2b, /* GForce_TunnelStrengthBlack */
    PostEffectParams_GForce_SaturationGrey             = 0x2c, /* GForce_SaturationGrey */
    PostEffectParams_GForce_SaturationBlack            = 0x2d, /* GForce_SaturationBlack */
    PostEffectParams_HudSilhouettes_Active             = 0x2e, /* HudSilhouettes_Active */
    PostEffectParams_HudSilhouettes_Amount             = 0x2f, /* HudSilhouettes_Amount */
    PostEffectParams_HudSilhouettes_FillStr            = 0x30, /* HudSilhouettes_FillStr */
    PostEffectParams_HudSilhouettes_EdgeWidth          = 0x31, /* HudSilhouettes_EdgeWidth */
    PostEffectParams_HudSilhouettes_BlurRadius         = 0x32, /* HudSilhouettes_BlurRadius */
    PostEffectParams_HudSilhouettes_Type               = 0x33, /* HudSilhouettes_Type */
    PostEffectParams_OcularMigraine_StrengthValue      = 0x34, /* OcularMigraine_StrengthValue */
    PostEffectParams_OcularMigraine_BlindspotSize      = 0x35, /* OcularMigraine_BlindspotSize */
    PostEffectParams_OcularMigraine_SpectralOpacity    = 0x36, /* OcularMigraine_SpectralOpacity */
    PostEffectParams_OcularMigraine_BlindspotOpacity   = 0x37, /* OcularMigraine_BlindspotOpacity */
    PostEffectParams_BloodVision_StrengthValue         = 0x38, /* BloodVision_StrengthValue */
    PostEffectParams_BloodVision_BloodAuraStrength     = 0x39, /* BloodVision_BloodAuraStrength */
    PostEffectParams_BloodVision_AngularVelocityScaleX = 0x3a, /* BloodVision_AngularVelocityScaleX */
    PostEffectParams_BloodVision_AngularVelocityScaleY = 0x3b, /* BloodVision_AngularVelocityScaleY */
    PostEffectParams_SunShafts_Active                  = 0x3c, /* SunShafts_Active */
    PostEffectParams_SunShafts_RaysAmount              = 0x3d, /* SunShafts_RaysAmount */
    PostEffectParams_SunShafts_RaysAttenuation         = 0x3e, /* SunShafts_RaysAttenuation */
    PostEffectParams_SunShafts_RaysCustomColor         = 0x3f, /* SunShafts_RaysCustomColor */
    PostEffectParams_tex_VisualArtifacts_Mask          = 0x40, /* tex_VisualArtifacts_Mask */
    PostEffectParams_clr_VisualArtifacts_ColotTint     = 0x41, /* clr_VisualArtifacts_ColotTint */
    PostEffectParams_VisualArtifacts_Vsync             = 0x42, /* VisualArtifacts_Vsync */
    PostEffectParams_VisualArtifacts_VsyncFreq         = 0x43, /* VisualArtifacts_VsyncFreq */
    PostEffectParams_VisualArtifacts_Interlacing       = 0x44, /* VisualArtifacts_Interlacing */
    PostEffectParams_VisualArtifacts_InterlacingTile   = 0x45, /* VisualArtifacts_InterlacingTile */
    PostEffectParams_VisualArtifacts_InterlacingRot    = 0x46, /* VisualArtifacts_InterlacingRot */
    PostEffectParams_VisualArtifacts_Pixelation        = 0x47, /* VisualArtifacts_Pixelation */
    PostEffectParams_VisualArtifacts_Noise             = 0x48, /* VisualArtifacts_Noise */
    PostEffectParams_VisualArtifacts_SyncWaveFreq      = 0x49, /* VisualArtifacts_SyncWaveFreq */
    PostEffectParams_VisualArtifacts_SyncWavePhase     = 0x4a, /* VisualArtifacts_SyncWavePhase */
    PostEffectParams_VisualArtifacts_SyncWaveAmplitude = 0x4b, /* VisualArtifacts_SyncWaveAmplitude */
    PostEffectParams_WaterDroplets_Amount              = 0x4c, /* WaterDroplets_Amount */
    PostEffectParams_ImageGhosting_Amount              = 0x4d, /* ImageGhosting_Amount */
    PostEffectParams_Letterboxing_WidthAspectRatio     = 0x4e, /* Letterboxing_WidthAspectRatio */
    PostEffectParams_Letterboxing_HeightAspectRatio    = 0x4f, /* Letterboxing_HeightAspectRatio */
    PostEffectParams_Letterboxing_Progress             = 0x50, /* Letterboxing_Progress */
    PostEffectParams_UNDEFINED                         = 0x51, /* UNDEFINED */
};

// Original name: PostureType
enum PostureType {
    PostureType_Invalid   = 0x0, /* Invalid */
    PostureType_Peek      = 0x1, /* Peek */
    PostureType_Aim       = 0x2, /* Aim */
    PostureType_BlindFire = 0x3, /* BlindFire */
    PostureType_Throw     = 0x4, /* Throw */
};

// Original name: ProceduralAnimationBoneName
enum ProceduralAnimationBoneName {
    ProceduralAnimationBoneName_Hips          = 0x0, /* Hips */
    ProceduralAnimationBoneName_Spine         = 0x1, /* Spine */
    ProceduralAnimationBoneName_Spine1        = 0x2, /* Spine1 */
    ProceduralAnimationBoneName_Spine2        = 0x3, /* Spine2 */
    ProceduralAnimationBoneName_Spine3        = 0x4, /* Spine3 */
    ProceduralAnimationBoneName_Neck          = 0x5, /* Neck */
    ProceduralAnimationBoneName_Neck1         = 0x6, /* Neck1 */
    ProceduralAnimationBoneName_Head          = 0x7, /* Head */
    ProceduralAnimationBoneName_HelmetCam     = 0x8, /* HelmetCam */
    ProceduralAnimationBoneName_Head_LowPass  = 0x9, /* Head_LowPass */
    ProceduralAnimationBoneName_LeftShoulder  = 0xa, /* LeftShoulder */
    ProceduralAnimationBoneName_RightShoulder = 0xb, /* RightShoulder */
    ProceduralAnimationBoneName_LeftArm       = 0xc, /* LeftArm */
    ProceduralAnimationBoneName_RightArm      = 0xd, /* RightArm */
    ProceduralAnimationBoneName_LeftForeArm   = 0xe, /* LeftForeArm */
    ProceduralAnimationBoneName_RightForeArm  = 0xf, /* RightForeArm */
    ProceduralAnimationBoneName_LeftHand      = 0x10, /* LeftHand */
    ProceduralAnimationBoneName_RightHand     = 0x11, /* RightHand */
    ProceduralAnimationBoneName_LeftFoot      = 0x12, /* LeftFoot */
    ProceduralAnimationBoneName_RightFoot     = 0x13, /* RightFoot */
    ProceduralAnimationBoneName_LeftLeg       = 0x14, /* LeftLeg */
    ProceduralAnimationBoneName_RightLeg      = 0x15, /* RightLeg */
    ProceduralAnimationBoneName_LeftUpLeg     = 0x16, /* LeftUpLeg */
    ProceduralAnimationBoneName_RightUpLeg    = 0x17, /* RightUpLeg */
};

// Original name: ProceduralAnimationBoneOperation
enum ProceduralAnimationBoneOperation {
    ProceduralAnimationBoneOperation_Offset   = 0x0, /* Offset */
    ProceduralAnimationBoneOperation_Rotation = 0x1, /* Rotation */
};

// Original name: ProceduralAnimationBoneSpace
enum ProceduralAnimationBoneSpace {
    ProceduralAnimationBoneSpace_ParentBone = 0x0, /* ParentBone */
    ProceduralAnimationBoneSpace_Character  = 0x1, /* Character */
    ProceduralAnimationBoneSpace_TPose      = 0x2, /* TPose */
};

// Original name: ProceduralLandingStrengthFilter
enum ProceduralLandingStrengthFilter {
    ProceduralLandingStrengthFilter_Light  = 0x0, /* Light */
    ProceduralLandingStrengthFilter_Medium = 0x1, /* Medium */
    ProceduralLandingStrengthFilter_Heavy  = 0x2, /* Heavy */
    ProceduralLandingStrengthFilter_Impact = 0x3, /* Impact */
    ProceduralLandingStrengthFilter_Any    = 0x4, /* Any */
};

// Original name: ProceduralLayout_TagFilteringMode
enum ProceduralLayout_TagFilteringMode {
    ProceduralLayout_TagFilteringMode_Inclusion = 0x0, /* Inclusion */
    ProceduralLayout_TagFilteringMode_Exclusion = 0x1, /* Exclusion */
    ProceduralLayout_TagFilteringMode_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: ProceduralLayout_VerticalDirection
enum ProceduralLayout_VerticalDirection {
    ProceduralLayout_VerticalDirection_Downwards = 0x0, /* Downwards */
    ProceduralLayout_VerticalDirection_Upwards   = 0x1, /* Upwards */
    ProceduralLayout_VerticalDirection_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: ProceduralPOILookAtType
enum ProceduralPOILookAtType {
    ProceduralPOILookAtType_Origin    = 0x0, /* Origin */
    ProceduralPOILookAtType_EntityBB  = 0x1, /* EntityBB */
    ProceduralPOILookAtType_CustomBBs = 0x2, /* CustomBBs */
};

// Original name: PurchasableVehicleUsageType
enum PurchasableVehicleUsageType {
    PurchasableVehicleUsageType_Purchase  = 0x0, /* Purchase */
    PurchasableVehicleUsageType_Rent      = 0x1, /* Rent */
    PurchasableVehicleUsageType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: QDriveSplineRotationBehavior
enum QDriveSplineRotationBehavior {
    QDriveSplineRotationBehavior_NoRollback = 0x0, /* NoRollback */
    QDriveSplineRotationBehavior_Rollback   = 0x1, /* Rollback */
    QDriveSplineRotationBehavior_UNDEFINED  = 0x2, /* UNDEFINED */
};

// Original name: QuantumDriveState
enum QuantumDriveState {
    QuantumDriveState_Off                = 0x0, /* Off */
    QuantumDriveState_Idle               = 0x1, /* Idle */
    QuantumDriveState_Aligning           = 0x2, /* Aligning */
    QuantumDriveState_Pre_Ramp_Up        = 0x3, /* Pre_Ramp_Up */
    QuantumDriveState_Ramp_Up            = 0x4, /* Ramp_Up */
    QuantumDriveState_Flight_In_Progress = 0x5, /* Flight_In_Progress */
    QuantumDriveState_Ramp_Down          = 0x6, /* Ramp_Down */
    QuantumDriveState_Post_Ramp_Down     = 0x7, /* Post_Ramp_Down */
    QuantumDriveState_End_Travel         = 0x8, /* End_Travel */
    QuantumDriveState_Abort              = 0x9, /* Abort */
    QuantumDriveState_Cooldown           = 0xa, /* Cooldown */
    QuantumDriveState_UNDEFINED          = 0xb, /* UNDEFINED */
};

// Original name: RadarPriorityComparison
enum RadarPriorityComparison {
    RadarPriorityComparison_LessThan         = 0x0, /* LessThan */
    RadarPriorityComparison_LessThanEqual    = 0x1, /* LessThanEqual */
    RadarPriorityComparison_Equals           = 0x2, /* Equals */
    RadarPriorityComparison_GreaterThanEqual = 0x3, /* GreaterThanEqual */
    RadarPriorityComparison_GreaterThan      = 0x4, /* GreaterThan */
    RadarPriorityComparison_UNDEFINED        = 0x5, /* UNDEFINED */
};

// Original name: RadiationStatePropertyType
enum RadiationStatePropertyType {
    RadiationStatePropertyType_Distortion      = 0x0, /* Distortion */
    RadiationStatePropertyType_IR              = 0x1, /* IR */
    RadiationStatePropertyType_EM              = 0x2, /* EM */
    RadiationStatePropertyType_CS              = 0x3, /* CS */
    RadiationStatePropertyType_RadiationHazard = 0x4, /* RadiationHazard */
    RadiationStatePropertyType_UNDEFINED       = 0x5, /* UNDEFINED */
};

// Original name: ReactionType
enum ReactionType {
    ReactionType_Hostile   = 0x0, /* Hostile */
    ReactionType_Neutral   = 0x1, /* Neutral */
    ReactionType_Friendly  = 0x2, /* Friendly */
    ReactionType_Unknown   = 0x3, /* Unknown */
    ReactionType_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: RefiningQuality
enum RefiningQuality {
    RefiningQuality_Normal    = 0x0, /* Normal */
    RefiningQuality_Careful   = 0x1, /* Careful */
    RefiningQuality_Wasteful  = 0x2, /* Wasteful */
    RefiningQuality_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: RefiningSpeed
enum RefiningSpeed {
    RefiningSpeed_Normal    = 0x0, /* Normal */
    RefiningSpeed_Slow      = 0x1, /* Slow */
    RefiningSpeed_Fast      = 0x2, /* Fast */
    RefiningSpeed_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: RenderToTextureTarget
enum RenderToTextureTarget {
    RenderToTextureTarget_Primary   = 0x0, /* Primary */
    RenderToTextureTarget_Secondary = 0x1, /* Secondary */
    RenderToTextureTarget_All       = 0x3, /* All */
};

// Original name: ResourceNetworkAcessParameter
enum ResourceNetworkAcessParameter {
    ResourceNetworkAcessParameter_Pressure          = 0x0, /* Pressure */
    ResourceNetworkAcessParameter_Temperature       = 0x1, /* Temperature */
    ResourceNetworkAcessParameter_CarbonDioxide     = 0x2, /* CarbonDioxide */
    ResourceNetworkAcessParameter_Oxygen            = 0x3, /* Oxygen */
    ResourceNetworkAcessParameter_FuncionalityRatio = 0x4, /* FuncionalityRatio */
    ResourceNetworkAcessParameter_Preference        = 0x5, /* Preference */
    ResourceNetworkAcessParameter_UNDEFINED         = 0x6, /* UNDEFINED */
};

// Original name: ResourceNetworkResource
enum ResourceNetworkResource {
    ResourceNetworkResource_Power       = 0x0, /* Power */
    ResourceNetworkResource_Fuel        = 0x1, /* Fuel */
    ResourceNetworkResource_Coolant     = 0x2, /* Coolant */
    ResourceNetworkResource_Shield      = 0x3, /* Shield */
    ResourceNetworkResource_Gravity     = 0x4, /* Gravity */
    ResourceNetworkResource_QuantumFuel = 0x5, /* QuantumFuel */
    ResourceNetworkResource_CPU         = 0x6, /* CPU */
    ResourceNetworkResource_Gas         = 0x7, /* Gas */
    ResourceNetworkResource_Filter      = 0x8, /* Filter */
    ResourceNetworkResource_WeaponRegen = 0x9, /* WeaponRegen */
    ResourceNetworkResource_WeaponAmmo  = 0xa, /* WeaponAmmo */
    ResourceNetworkResource_LifeSupport = 0xb, /* LifeSupport */
    ResourceNetworkResource_UNDEFINED   = 0xc, /* UNDEFINED */
};

// Original name: RestraintStyle
enum RestraintStyle {
    RestraintStyle_CuffArmLeg  = 0x0, /* CuffArmLeg */
    RestraintStyle_CuffArmOnly = 0x1, /* CuffArmOnly */
    RestraintStyle_UNDEFINED   = 0x2, /* UNDEFINED */
};

// Original name: RestrictedAreaState
enum RestrictedAreaState {
    RestrictedAreaState_Allow     = 0x0, /* Allow */
    RestrictedAreaState_Disallow  = 0x1, /* Disallow */
    RestrictedAreaState_Despawn   = 0x2, /* Despawn */
    RestrictedAreaState_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: RoomConnectorOrientationMode
enum RoomConnectorOrientationMode {
    RoomConnectorOrientationMode_AutoDetectWidest = 0x0, /* AutoDetectWidest */
    RoomConnectorOrientationMode_ForwardBackward  = 0x1, /* ForwardBackward */
    RoomConnectorOrientationMode_UpDown           = 0x2, /* UpDown */
    RoomConnectorOrientationMode_RightLeft        = 0x3, /* RightLeft */
    RoomConnectorOrientationMode_UNDEFINED        = 0x4, /* UNDEFINED */
};

// Original name: RoomStateModifyType
enum RoomStateModifyType {
    RoomStateModifyType_Inherit   = 0x0, /* Inherit */
    RoomStateModifyType_Override  = 0x1, /* Override */
    RoomStateModifyType_Additive  = 0x2, /* Additive */
    RoomStateModifyType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: RoomStatePropertyType
enum RoomStatePropertyType {
    RoomStatePropertyType_DebrisDensity   = 0x0, /* DebrisDensity */
    RoomStatePropertyType_Pressure        = 0x1, /* Pressure */
    RoomStatePropertyType_Temperature     = 0x2, /* Temperature */
    RoomStatePropertyType_Humidity        = 0x3, /* Humidity */
    RoomStatePropertyType_Charge          = 0x4, /* Charge */
    RoomStatePropertyType_Distortion      = 0x5, /* Distortion */
    RoomStatePropertyType_IR              = 0x6, /* IR */
    RoomStatePropertyType_EM              = 0x7, /* EM */
    RoomStatePropertyType_CS              = 0x8, /* CS */
    RoomStatePropertyType_RadiationHazard = 0x9, /* RadiationHazard */
    RoomStatePropertyType_UNDEFINED       = 0xa, /* UNDEFINED */
};

// Original name: RoomType
enum RoomType {
    RoomType_Area          = 0x0, /* Area */
    RoomType_Planet        = 0x1, /* Planet */
    RoomType_GasCloud      = 0x2, /* GasCloud */
    RoomType_AsteroidField = 0x3, /* AsteroidField */
    RoomType_Helmet        = 0x4, /* Helmet */
    RoomType_NavPoint      = 0x5, /* NavPoint */
    RoomType_UNDEFINED     = 0x6, /* UNDEFINED */
};

// Original name: RttOutputType
enum RttOutputType {
    RttOutputType_Default      = 0x0, /* Default */
    RttOutputType_SurfaceWater = 0x1, /* SurfaceWater */
};

// Original name: SCSeatActorAttachmentType
enum SCSeatActorAttachmentType {
    SCSeatActorAttachmentType_Host = 0x0, /* Host */
    SCSeatActorAttachmentType_Seat = 0x1, /* Seat */
};

// Original name: SeatSkipStates
enum SeatSkipStates {
    SeatSkipStates_None        = 0x0, /* None */
    SeatSkipStates_SkipDeploy  = 0x1, /* SkipDeploy */
    SeatSkipStates_SkipRetract = 0x2, /* SkipRetract */
    SeatSkipStates_SkipBoth    = 0x3, /* SkipBoth */
    SeatSkipStates_UNDEFINED   = 0x4, /* UNDEFINED */
};

// Original name: SeatTypes
enum SeatTypes {
    SeatTypes_HOTAS_R_L  = 0x0, /* HOTAS_R_L */
    SeatTypes_HOTAS_C_L  = 0x1, /* HOTAS_C_L */
    SeatTypes_DUAL_STICK = 0x2, /* DUAL_STICK */
    SeatTypes_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: ShadowQuality
enum ShadowQuality {
    ShadowQuality_Full      = 0x0, /* Full */
    ShadowQuality_Half      = 0x1, /* Half */
    ShadowQuality_Quarter   = 0x2, /* Quarter */
    ShadowQuality_OneEighth = 0x3, /* OneEighth */
    ShadowQuality_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: ShockwaveType
enum ShockwaveType {
    ShockwaveType_Sphere   = 0x4, /* Sphere */
    ShockwaveType_Cylinder = 0x5, /* Cylinder */
};

// Original name: ShopInventoryType
enum ShopInventoryType {
    ShopInventoryType_INVALID   = 0x0, /* INVALID */
    ShopInventoryType_ITEM      = 0x1, /* ITEM */
    ShopInventoryType_COMMODITY = 0x2, /* COMMODITY */
};

// Original name: ShoppingKioskVariant
enum ShoppingKioskVariant {
    ShoppingKioskVariant_LOW       = 0x0, /* LOW */
    ShoppingKioskVariant_MED       = 0x1, /* MED */
    ShoppingKioskVariant_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: SinglePlayerOrMultiplayer
enum SinglePlayerOrMultiplayer {
    SinglePlayerOrMultiplayer_Both             = 0x0, /* Both */
    SinglePlayerOrMultiplayer_SinglePlayerOnly = 0x1, /* SinglePlayerOnly */
    SinglePlayerOrMultiplayer_MultiplayerOnly  = 0x2, /* MultiplayerOnly */
};

// Original name: SkeletonAnimationTaskTransitionType
enum SkeletonAnimationTaskTransitionType {
    SkeletonAnimationTaskTransitionType_Linear    = 0x0, /* Linear */
    SkeletonAnimationTaskTransitionType_Cubic     = 0x1, /* Cubic */
    SkeletonAnimationTaskTransitionType_UNDEFINED = 0x2, /* UNDEFINED */
};

// Original name: SpawnWithMode
enum SpawnWithMode {
    SpawnWithMode_MostSimilar = 0x0, /* MostSimilar */
    SpawnWithMode_Random      = 0x1, /* Random */
    SpawnWithMode_UNDEFINED   = 0x2, /* UNDEFINED */
};

// Original name: SpeedThrottleActiveMode
enum SpeedThrottleActiveMode {
    SpeedThrottleActiveMode_Always   = 0x0, /* Always */
    SpeedThrottleActiveMode_NoWeapon = 0x1, /* NoWeapon */
};

// Original name: SpeedThrottleNoWeaponSpeedCategory
enum SpeedThrottleNoWeaponSpeedCategory {
    SpeedThrottleNoWeaponSpeedCategory_SlowWalk = 0x0, /* SlowWalk */
    SpeedThrottleNoWeaponSpeedCategory_MidWalk  = 0x1, /* MidWalk */
    SpeedThrottleNoWeaponSpeedCategory_FastWalk = 0x2, /* FastWalk */
    SpeedThrottleNoWeaponSpeedCategory_SlowRun  = 0x3, /* SlowRun */
    SpeedThrottleNoWeaponSpeedCategory_FastRun  = 0x4, /* FastRun */
};

// Original name: SpeedThrottleWithWeaponSpeedCategory
enum SpeedThrottleWithWeaponSpeedCategory {
    SpeedThrottleWithWeaponSpeedCategory_SameAsNoWeapon = 0x0, /* SameAsNoWeapon */
    SpeedThrottleWithWeaponSpeedCategory_SlowWalk       = 0x1, /* SlowWalk */
    SpeedThrottleWithWeaponSpeedCategory_MidWalk        = 0x2, /* MidWalk */
    SpeedThrottleWithWeaponSpeedCategory_FastWalk       = 0x3, /* FastWalk */
    SpeedThrottleWithWeaponSpeedCategory_SlowRun        = 0x4, /* SlowRun */
    SpeedThrottleWithWeaponSpeedCategory_FastRun        = 0x5, /* FastRun */
    SpeedThrottleWithWeaponSpeedCategory_AimDownSight   = 0x6, /* AimDownSight */
};

// Original name: StaminaActionCategory
enum StaminaActionCategory {
    StaminaActionCategory_None            = 0x0, /* None */
    StaminaActionCategory_MeleeJab        = 0x1, /* MeleeJab */
    StaminaActionCategory_MeleeHook       = 0x2, /* MeleeHook */
    StaminaActionCategory_MeleeOverhand   = 0x3, /* MeleeOverhand */
    StaminaActionCategory_MeleeArmed      = 0x4, /* MeleeArmed */
    StaminaActionCategory_MeleeUpperCut   = 0x5, /* MeleeUpperCut */
    StaminaActionCategory_MeleeBolo       = 0x6, /* MeleeBolo */
    StaminaActionCategory_MeleeHaymaker   = 0x7, /* MeleeHaymaker */
    StaminaActionCategory_BladeSlash      = 0x8, /* BladeSlash */
    StaminaActionCategory_BladeStab       = 0x9, /* BladeStab */
    StaminaActionCategory_BladeLightOver  = 0xa, /* BladeLightOver */
    StaminaActionCategory_BladeLightUnder = 0xb, /* BladeLightUnder */
    StaminaActionCategory_BladeHeavyOver  = 0xc, /* BladeHeavyOver */
    StaminaActionCategory_BladeHeavyUnder = 0xd, /* BladeHeavyUnder */
    StaminaActionCategory_LanceSwipeLeft  = 0xe, /* LanceSwipeLeft */
    StaminaActionCategory_LanceSwipeRight = 0xf, /* LanceSwipeRight */
    StaminaActionCategory_LanceStab       = 0x10, /* LanceStab */
    StaminaActionCategory_LanceLeap       = 0x11, /* LanceLeap */
    StaminaActionCategory_LanceHammerDown = 0x12, /* LanceHammerDown */
    StaminaActionCategory_LancePushBack   = 0x13, /* LancePushBack */
    StaminaActionCategory_LanceShoot      = 0x14, /* LanceShoot */
    StaminaActionCategory_TestAttack      = 0x15, /* TestAttack */
    StaminaActionCategory_Blocking        = 0x16, /* Blocking */
    StaminaActionCategory_SyringeStab     = 0x17, /* SyringeStab */
};

// Original name: StarmapBoolOverride
enum StarmapBoolOverride {
    StarmapBoolOverride_False      = 0x0, /* False */
    StarmapBoolOverride_True       = 0x1, /* True */
    StarmapBoolOverride_NoOverride = 0x2, /* NoOverride */
    StarmapBoolOverride_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: StatBuffType
enum StatBuffType {
    StatBuffType_Hypertrophic                  = 0x0, /* Hypertrophic */
    StatBuffType_Atrophic                      = 0x1, /* Atrophic */
    StatBuffType_Fatiguing                     = 0x2, /* Fatiguing */
    StatBuffType_Energizing                    = 0x3, /* Energizing */
    StatBuffType_CognitiveBoost                = 0x4, /* CognitiveBoost */
    StatBuffType_CognitiveImpair               = 0x5, /* CognitiveImpair */
    StatBuffType_HypoMetabolic                 = 0x6, /* HypoMetabolic */
    StatBuffType_HyperMetabolic                = 0x7, /* HyperMetabolic */
    StatBuffType_Hydrating                     = 0x8, /* Hydrating */
    StatBuffType_Dehydrating                   = 0x9, /* Dehydrating */
    StatBuffType_Healing                       = 0xa, /* Healing */
    StatBuffType_Toxic                         = 0xb, /* Toxic */
    StatBuffType_ImmuneBoost                   = 0xc, /* ImmuneBoost */
    StatBuffType_ImmuneSuppress                = 0xd, /* ImmuneSuppress */
    StatBuffType_WeaponChargeMoveSpeed         = 0xe, /* WeaponChargeMoveSpeed */
    StatBuffType_GForcePassOut                 = 0xf, /* GForcePassOut */
    StatBuffType_OverdoseRevival               = 0x10, /* OverdoseRevival */
    StatBuffType_OverdoseRevivalBDLDecay       = 0x11, /* OverdoseRevivalBDLDecay */
    StatBuffType_ReviveDamageMultiplier        = 0x12, /* ReviveDamageMultiplier */
    StatBuffType_DownedDamageMultiplier        = 0x13, /* DownedDamageMultiplier */
    StatBuffType_DrugDurationMultiplier        = 0x14, /* DrugDurationMultiplier */
    StatBuffType_HealthPoolMask                = 0x15, /* HealthPoolMask */
    StatBuffType_HurtLocomotionMask            = 0x16, /* HurtLocomotionMask */
    StatBuffType_StunRecoveryMask              = 0x17, /* StunRecoveryMask */
    StatBuffType_ImpactResistanceKnockdownMask = 0x18, /* ImpactResistanceKnockdownMask */
    StatBuffType_ImpactResistanceStaggerMask   = 0x19, /* ImpactResistanceStaggerMask */
    StatBuffType_ImpactResistanceTwitchMask    = 0x1a, /* ImpactResistanceTwitchMask */
    StatBuffType_ImpactResistanceFlinchMask    = 0x1b, /* ImpactResistanceFlinchMask */
    StatBuffType_StaminaRegenMask              = 0x1c, /* StaminaRegenMask */
    StatBuffType_StaminaPoolMask               = 0x1d, /* StaminaPoolMask */
    StatBuffType_WheezingAudioMask             = 0x1e, /* WheezingAudioMask */
    StatBuffType_CoughBloodMask                = 0x1f, /* CoughBloodMask */
    StatBuffType_MoveSpeedMask                 = 0x20, /* MoveSpeedMask */
    StatBuffType_TraversalLockMask             = 0x21, /* TraversalLockMask */
    StatBuffType_TraversalLockProneMask        = 0x22, /* TraversalLockProneMask */
    StatBuffType_PainGruntMask                 = 0x23, /* PainGruntMask */
    StatBuffType_ArmsLockMask                  = 0x24, /* ArmsLockMask */
    StatBuffType_WeaponSwayMask                = 0x25, /* WeaponSwayMask */
    StatBuffType_ADSEnterMask                  = 0x26, /* ADSEnterMask */
    StatBuffType_BloodVisionMask               = 0x27, /* BloodVisionMask */
    StatBuffType_MuffledAudioInjuryMask        = 0x28, /* MuffledAudioInjuryMask */
    StatBuffType_BlurredVisionMask             = 0x29, /* BlurredVisionMask */
    StatBuffType_DrunkLocomotionMask           = 0x2a, /* DrunkLocomotionMask */
    StatBuffType_DrunkManoeuvringMask          = 0x2b, /* DrunkManoeuvringMask */
    StatBuffType_DoubleVisionMask              = 0x2c, /* DoubleVisionMask */
    StatBuffType_OrificeBloodMask              = 0x2d, /* OrificeBloodMask */
    StatBuffType_FlashEffect                   = 0x2e, /* FlashEffect */
    StatBuffType_Slam                          = 0x2f, /* Slam */
    StatBuffType_RadiationAntidote             = 0x30, /* RadiationAntidote */
    StatBuffType_ThrowForceMask                = 0x31, /* ThrowForceMask */
    StatBuffType_MeleeForceMask                = 0x32, /* MeleeForceMask */
    StatBuffType_UNDEFINED                     = 0x33, /* UNDEFINED */
};

// Original name: StateTypeNetworkAuthority
enum StateTypeNetworkAuthority {
    StateTypeNetworkAuthority_Server = 0x0, /* Server */
    StateTypeNetworkAuthority_Local  = 0x1, /* Local */
};

// Original name: StatusEffectType
enum StatusEffectType {
    StatusEffectType_ADSEnter                  = 0x0, /* ADSEnter */
    StatusEffectType_ArmsLock                  = 0x1, /* ArmsLock */
    StatusEffectType_Bleed                     = 0x2, /* Bleed */
    StatusEffectType_BloodDrugLevelDecay       = 0x3, /* BloodDrugLevelDecay */
    StatusEffectType_BloodVision               = 0x4, /* BloodVision */
    StatusEffectType_BlurredVision             = 0x5, /* BlurredVision */
    StatusEffectType_BodyRadiationDecay        = 0x6, /* BodyRadiationDecay */
    StatusEffectType_CoughBlood                = 0x7, /* CoughBlood */
    StatusEffectType_Dead                      = 0x8, /* Dead */
    StatusEffectType_DehydrationDamage         = 0x9, /* DehydrationDamage */
    StatusEffectType_DepressurizationDamage    = 0xa, /* DepressurizationDamage */
    StatusEffectType_DrugDuration              = 0xb, /* DrugDuration */
    StatusEffectType_DrunkLocomotion           = 0xc, /* DrunkLocomotion */
    StatusEffectType_DrunkManoeuvring          = 0xd, /* DrunkManoeuvring */
    StatusEffectType_DoubleVision              = 0xe, /* DoubleVision */
    StatusEffectType_DownedDamageDecay         = 0xf, /* DownedDamageDecay */
    StatusEffectType_EarRinging                = 0x10, /* EarRinging */
    StatusEffectType_ExternalDamageMultiplier  = 0x11, /* ExternalDamageMultiplier */
    StatusEffectType_FlashEffect               = 0x12, /* FlashEffect */
    StatusEffectType_HeadacheAudio             = 0x13, /* HeadacheAudio */
    StatusEffectType_HealthPool                = 0x14, /* HealthPool */
    StatusEffectType_HealthBoost               = 0x15, /* HealthBoost */
    StatusEffectType_HungerDecay               = 0x16, /* HungerDecay */
    StatusEffectType_HurtLocomotion            = 0x17, /* HurtLocomotion */
    StatusEffectType_HurtProne                 = 0x18, /* HurtProne */
    StatusEffectType_HygieneDecay              = 0x19, /* HygieneDecay */
    StatusEffectType_HypothermiaDamage         = 0x1a, /* HypothermiaDamage */
    StatusEffectType_HyperthermiaDamage        = 0x1b, /* HyperthermiaDamage */
    StatusEffectType_ImpactResistanceKnockdown = 0x1c, /* ImpactResistanceKnockdown */
    StatusEffectType_ImpactResistanceStagger   = 0x1d, /* ImpactResistanceStagger */
    StatusEffectType_ImpactResistanceTwitch    = 0x1e, /* ImpactResistanceTwitch */
    StatusEffectType_ImpactResistanceFlinch    = 0x1f, /* ImpactResistanceFlinch */
    StatusEffectType_LightSensitivity          = 0x20, /* LightSensitivity */
    StatusEffectType_MacularDegeneration       = 0x21, /* MacularDegeneration */
    StatusEffectType_MalfunctionDistortion     = 0x22, /* MalfunctionDistortion */
    StatusEffectType_MeleeDamage               = 0x23, /* MeleeDamage */
    StatusEffectType_MeleeForce                = 0x24, /* MeleeForce */
    StatusEffectType_MoveSpeed                 = 0x25, /* MoveSpeed */
    StatusEffectType_MuffledAudio              = 0x26, /* MuffledAudio */
    StatusEffectType_OcularMigraine            = 0x27, /* OcularMigraine */
    StatusEffectType_OrificeBlood              = 0x28, /* OrificeBlood */
    StatusEffectType_OverdoseDamage            = 0x29, /* OverdoseDamage */
    StatusEffectType_PainGrunt                 = 0x2a, /* PainGrunt */
    StatusEffectType_PassOutDowned             = 0x2b, /* PassOutDowned */
    StatusEffectType_PassOutUnconscious        = 0x2c, /* PassOutUnconscious */
    StatusEffectType_PassOutGForce             = 0x2d, /* PassOutGForce */
    StatusEffectType_RadiationDamageLow        = 0x2e, /* RadiationDamageLow */
    StatusEffectType_RadiationDamageHigh       = 0x2f, /* RadiationDamageHigh */
    StatusEffectType_Recoil                    = 0x30, /* Recoil */
    StatusEffectType_Shivering                 = 0x31, /* Shivering */
    StatusEffectType_StaminaCost               = 0x32, /* StaminaCost */
    StatusEffectType_StaminaPool               = 0x33, /* StaminaPool */
    StatusEffectType_StaminaRegen              = 0x34, /* StaminaRegen */
    StatusEffectType_StarvationDamage          = 0x35, /* StarvationDamage */
    StatusEffectType_StatusDamageCap           = 0x36, /* StatusDamageCap */
    StatusEffectType_StatusDamageMultiplier    = 0x37, /* StatusDamageMultiplier */
    StatusEffectType_StomachGroanAudio         = 0x38, /* StomachGroanAudio */
    StatusEffectType_StunDecay                 = 0x39, /* StunDecay */
    StatusEffectType_Suffocation               = 0x3a, /* Suffocation */
    StatusEffectType_SuffocationDamage         = 0x3b, /* SuffocationDamage */
    StatusEffectType_TempAudioLoss             = 0x3c, /* TempAudioLoss */
    StatusEffectType_ThirstDecay               = 0x3d, /* ThirstDecay */
    StatusEffectType_ThrowForce                = 0x3e, /* ThrowForce */
    StatusEffectType_TraversalLock             = 0x3f, /* TraversalLock */
    StatusEffectType_TraversalLockProne        = 0x40, /* TraversalLockProne */
    StatusEffectType_Wheezing                  = 0x41, /* Wheezing */
    StatusEffectType_WeaponSway                = 0x42, /* WeaponSway */
    StatusEffectType_UNDEFINED                 = 0x43, /* UNDEFINED */
};

// Original name: StatusEffectValueType
enum StatusEffectValueType {
    StatusEffectValueType_Additive           = 0x0, /* Additive */
    StatusEffectValueType_Multiplier         = 0x1, /* Multiplier */
    StatusEffectValueType_MaxValue           = 0x2, /* MaxValue */
    StatusEffectValueType_MinValue           = 0x3, /* MinValue */
    StatusEffectValueType_DiminishingReturns = 0x4, /* DiminishingReturns */
    StatusEffectValueType_UNDEFINED          = 0x5, /* UNDEFINED */
};

// Original name: StatusHeadBleedingLocation
enum StatusHeadBleedingLocation {
    StatusHeadBleedingLocation_LeftEye      = 0x0, /* LeftEye */
    StatusHeadBleedingLocation_LeftNostril  = 0x1, /* LeftNostril */
    StatusHeadBleedingLocation_LeftMouth    = 0x2, /* LeftMouth */
    StatusHeadBleedingLocation_LeftEar      = 0x3, /* LeftEar */
    StatusHeadBleedingLocation_RightEye     = 0x4, /* RightEye */
    StatusHeadBleedingLocation_RightNostril = 0x5, /* RightNostril */
    StatusHeadBleedingLocation_RightMouth   = 0x6, /* RightMouth */
    StatusHeadBleedingLocation_RightEar     = 0x7, /* RightEar */
    StatusHeadBleedingLocation_UNDEFINED    = 0x8, /* UNDEFINED */
};

// Original name: StatusProbabilityCheckType
enum StatusProbabilityCheckType {
    StatusProbabilityCheckType_Always            = 0x0, /* Always */
    StatusProbabilityCheckType_StatValueIncrease = 0x1, /* StatValueIncrease */
    StatusProbabilityCheckType_StatValueDecrease = 0x2, /* StatValueDecrease */
    StatusProbabilityCheckType_UNDEFINED         = 0x3, /* UNDEFINED */
};

// Original name: SubItemScanItemStatus
enum SubItemScanItemStatus {
    SubItemScanItemStatus_Default   = 0x0, /* Default */
    SubItemScanItemStatus_PowerOn   = 0x1, /* PowerOn */
    SubItemScanItemStatus_PowerOff  = 0x2, /* PowerOff */
    SubItemScanItemStatus_Destroyed = 0x3, /* Destroyed */
    SubItemScanItemStatus_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: SyncedMeleeAttackResult
enum SyncedMeleeAttackResult {
    SyncedMeleeAttackResult_Hit       = 0x0, /* Hit */
    SyncedMeleeAttackResult_Countered = 0x1, /* Countered */
    SyncedMeleeAttackResult_Dodged    = 0x2, /* Dodged */
};

// Original name: TacticalQuerySystemType
enum TacticalQuerySystemType {
    TacticalQuerySystemType_TacticalPointQuery  = 0x0, /* TacticalPointQuery */
    TacticalQuerySystemType_TacticalTargetQuery = 0x1, /* TacticalTargetQuery */
};

// Original name: TakeDownQuadrant
enum TakeDownQuadrant {
    TakeDownQuadrant_AllQuadrants = 0x0, /* AllQuadrants */
    TakeDownQuadrant_BackOnly     = 0x1, /* BackOnly */
    TakeDownQuadrant_FrontOnly    = 0x2, /* FrontOnly */
    TakeDownQuadrant_NotPossible  = 0x3, /* NotPossible */
};

// Original name: TakeDownStance
enum TakeDownStance {
    TakeDownStance_AnyStance   = 0x0, /* AnyStance */
    TakeDownStance_StandOnly   = 0x1, /* StandOnly */
    TakeDownStance_ProneOnly   = 0x2, /* ProneOnly */
    TakeDownStance_NotPossible = 0x3, /* NotPossible */
};

// Original name: TestType
enum TestType {
    TestType_PhysicsImpact_Ocean       = 0x0, /* PhysicsImpact_Ocean */
    TestType_PhysicsImpact_WaterVolume = 0x1, /* PhysicsImpact_WaterVolume */
    TestType_MFXHit                    = 0x2, /* MFXHit */
};

// Original name: UI3DDisplayInputType
enum UI3DDisplayInputType {
    UI3DDisplayInputType_Pan       = 0x0, /* Pan */
    UI3DDisplayInputType_Rotate    = 0x1, /* Rotate */
    UI3DDisplayInputType_Zoom      = 0x2, /* Zoom */
    UI3DDisplayInputType_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: UIBlockingMode
enum UIBlockingMode {
    UIBlockingMode_ScanMode = 0x0, /* ScanMode */
};

// Original name: UIDisplayActivationTypes
enum UIDisplayActivationTypes {
    UIDisplayActivationTypes_Manual     = 0x0, /* Manual */
    UIDisplayActivationTypes_AlwaysOn   = 0x1, /* AlwaysOn */
    UIDisplayActivationTypes_OnWhenUsed = 0x2, /* OnWhenUsed */
    UIDisplayActivationTypes_UNDEFINED  = 0x3, /* UNDEFINED */
};

// Original name: UIDisplayEnvironmentAlignment
enum UIDisplayEnvironmentAlignment {
    UIDisplayEnvironmentAlignment_GalacticPlane = 0x0, /* GalacticPlane */
    UIDisplayEnvironmentAlignment_World         = 0x1, /* World */
    UIDisplayEnvironmentAlignment_Owner         = 0x2, /* Owner */
    UIDisplayEnvironmentAlignment_UNDEFINED     = 0x3, /* UNDEFINED */
};

// Original name: UIElementAlignMode
enum UIElementAlignMode {
    UIElementAlignMode_dynamic    = 0x0, /* dynamic */
    UIElementAlignMode_fullscreen = 0x1, /* fullscreen */
    UIElementAlignMode_UNDEFINED  = 0x2, /* UNDEFINED */
};

// Original name: UIGraph_BackBehavior
enum UIGraph_BackBehavior {
    UIGraph_BackBehavior_Unsuported            = 0x0, /* Unsuported */
    UIGraph_BackBehavior_NoAction              = 0x1, /* NoAction */
    UIGraph_BackBehavior_LastDoNothing         = 0x2, /* LastDoNothing */
    UIGraph_BackBehavior_Default               = 0x3, /* Default */
    UIGraph_BackBehavior_LastRequestContextEnd = 0x3, /* LastRequestContextEnd */
    UIGraph_BackBehavior_LastRequestClose      = 0x4, /* LastRequestClose */
    UIGraph_BackBehavior_LastCustomCallback    = 0x5, /* LastCustomCallback */
};

// Original name: UIGraph_BlockingMessagePopUpProvider
enum UIGraph_BlockingMessagePopUpProvider {
    UIGraph_BlockingMessagePopUpProvider_GlobalGame       = 0x0, /* GlobalGame */
    UIGraph_BlockingMessagePopUpProvider_ElectronicAccess = 0x1, /* ElectronicAccess */
};

// Original name: UIGraph_MissionDockComponentTab
enum UIGraph_MissionDockComponentTab {
    UIGraph_MissionDockComponentTab_Available = 0x0, /* Available */
    UIGraph_MissionDockComponentTab_Accepted  = 0x1, /* Accepted */
    UIGraph_MissionDockComponentTab_Pending   = 0x2, /* Pending */
    UIGraph_MissionDockComponentTab_History   = 0x3, /* History */
    UIGraph_MissionDockComponentTab_Beacon    = 0x4, /* Beacon */
    UIGraph_MissionDockComponentTab_UNDEFINED = 0x5, /* UNDEFINED */
};

// Original name: UIGraph_SimpleComponentType
enum UIGraph_SimpleComponentType {
    UIGraph_SimpleComponentType_UNDEFINED                     = -0x1, /* UNDEFINED */
    UIGraph_SimpleComponentType_ElectronicAccessFullscreen    = 0x0, /* ElectronicAccessFullscreen */
    UIGraph_SimpleComponentType_Hints                         = 0x1, /* Hints */
    UIGraph_SimpleComponentType_PlayerInteraction             = 0x2, /* PlayerInteraction */
    UIGraph_SimpleComponentType_PlayerLens                    = 0x3, /* PlayerLens */
    UIGraph_SimpleComponentType_ChatWidget                    = 0x4, /* ChatWidget */
    UIGraph_SimpleComponentType_FpsCombat                     = 0x5, /* FpsCombat */
    UIGraph_SimpleComponentType_ACLoadoutContextSwitch        = 0x6, /* ACLoadoutContextSwitch */
    UIGraph_SimpleComponentType_EALoadoutWarningPopUp         = 0x7, /* EALoadoutWarningPopUp */
    UIGraph_SimpleComponentType_EAShipDetailsKickNoticePopUp  = 0x8, /* EAShipDetailsKickNoticePopUp */
    UIGraph_SimpleComponentType_EAShipDetailsKickWarningPopUp = 0x9, /* EAShipDetailsKickWarningPopUp */
    UIGraph_SimpleComponentType_EALeaderboards                = 0xa, /* EALeaderboards */
    UIGraph_SimpleComponentType_GGULoadingScreen              = 0xb, /* GGULoadingScreen */
    UIGraph_SimpleComponentType_GGUNotificationScreen         = 0xc, /* GGUNotificationScreen */
    UIGraph_SimpleComponentType_FrontendViewTransition        = 0xd, /* FrontendViewTransition */
    UIGraph_SimpleComponentType_mobiGlasLauncherDock          = 0xe, /* mobiGlasLauncherDock */
    UIGraph_SimpleComponentType_mobiGlasHomeDock              = 0xf, /* mobiGlasHomeDock */
    UIGraph_SimpleComponentType_mobiGlasBeacon                = 0x10, /* mobiGlasBeacon */
    UIGraph_SimpleComponentType_mobiGlasRouteInfo             = 0x11, /* mobiGlasRouteInfo */
    UIGraph_SimpleComponentType_ShopApp                       = 0x12, /* ShopApp */
    UIGraph_SimpleComponentType_ShopDock                      = 0x13, /* ShopDock */
    UIGraph_SimpleComponentType_Popup                         = 0x14, /* Popup */
    UIGraph_SimpleComponentType_ContactsCommsApp              = 0x15, /* ContactsCommsApp */
    UIGraph_SimpleComponentType_BackClick                     = 0x16, /* BackClick */
    UIGraph_SimpleComponentType_ShipList                      = 0x17, /* ShipList */
    UIGraph_SimpleComponentType_PortCategories                = 0x18, /* PortCategories */
    UIGraph_SimpleComponentType_ItemKioskDock                 = 0x19, /* ItemKioskDock */
    UIGraph_SimpleComponentType_VehicleQuery                  = 0x1a, /* VehicleQuery */
    UIGraph_SimpleComponentType_ShipSelectOrRental            = 0x1b, /* ShipSelectOrRental */
    UIGraph_SimpleComponentType_ShopKiosk                     = 0x1c, /* ShopKiosk */
    UIGraph_SimpleComponentType_AreaMapContextComponent       = 0x1d, /* AreaMapContextComponent */
};

// Original name: UIWorldDisplayFollowRotationMode
enum UIWorldDisplayFollowRotationMode {
    UIWorldDisplayFollowRotationMode_Default   = 0x0, /* Default */
    UIWorldDisplayFollowRotationMode_None      = 0x1, /* None */
    UIWorldDisplayFollowRotationMode_Owner     = 0x2, /* Owner */
    UIWorldDisplayFollowRotationMode_User      = 0x3, /* User */
    UIWorldDisplayFollowRotationMode_UNDEFINED = 0x4, /* UNDEFINED */
};

// Original name: UIWorldDisplayPlaneAlignment
enum UIWorldDisplayPlaneAlignment {
    UIWorldDisplayPlaneAlignment_Default       = 0x0, /* Default */
    UIWorldDisplayPlaneAlignment_GalacticPlane = 0x1, /* GalacticPlane */
    UIWorldDisplayPlaneAlignment_Owner         = 0x2, /* Owner */
    UIWorldDisplayPlaneAlignment_UNDEFINED     = 0x3, /* UNDEFINED */
};

// Original name: UIWorldDisplayUseInputMode
enum UIWorldDisplayUseInputMode {
    UIWorldDisplayUseInputMode_Default   = 0x0, /* Default */
    UIWorldDisplayUseInputMode_UseInput  = 0x1, /* UseInput */
    UIWorldDisplayUseInputMode_NoInput   = 0x2, /* NoInput */
    UIWorldDisplayUseInputMode_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: VectorBases
enum VectorBases {
    VectorBases_Right   = 0x0, /* Right */
    VectorBases_Forward = 0x1, /* Forward */
    VectorBases_Up      = 0x2, /* Up */
};

// Original name: WeaponPoseType
enum WeaponPoseType {
    WeaponPoseType_RightHand = 0x0, /* RightHand */
    WeaponPoseType_Zoom      = 0x1, /* Zoom */
    WeaponPoseType_LeftHand  = 0x2, /* LeftHand */
};

// Original name: WingmanTargetTypes
enum WingmanTargetTypes {
    WingmanTargetTypes_None      = 0x0, /* None */
    WingmanTargetTypes_Player    = 0x1, /* Player */
    WingmanTargetTypes_Target    = 0x2, /* Target */
    WingmanTargetTypes_UNDEFINED = 0x3, /* UNDEFINED */
};

// Original name: WorldDisplayObjectFacingMode
enum WorldDisplayObjectFacingMode {
    WorldDisplayObjectFacingMode_Default        = 0x0, /* Default */
    WorldDisplayObjectFacingMode_World          = 0x1, /* World */
    WorldDisplayObjectFacingMode_Camera         = 0x2, /* Camera */
    WorldDisplayObjectFacingMode_AwayFromParent = 0x3, /* AwayFromParent */
    WorldDisplayObjectFacingMode_UNDEFINED      = 0x4, /* UNDEFINED */
};

// Original name: ZeroGTraversalAction
enum ZeroGTraversalAction {
    ZeroGTraversalAction_None           = 0x0, /* None */
    ZeroGTraversalAction_Attach         = 0x1, /* Attach */
    ZeroGTraversalAction_AttachLanding  = 0x2, /* AttachLanding */
    ZeroGTraversalAction_Detach         = 0x3, /* Detach */
    ZeroGTraversalAction_Idle           = 0x4, /* Idle */
    ZeroGTraversalAction_MoveForward    = 0x5, /* MoveForward */
    ZeroGTraversalAction_LedgeTraversal = 0x6, /* LedgeTraversal */
    ZeroGTraversalAction_IdleToTurn     = 0x7, /* IdleToTurn */
    ZeroGTraversalAction_KneeDrop       = 0x8, /* KneeDrop */
    ZeroGTraversalAction_LaunchTurn     = 0x9, /* LaunchTurn */
    ZeroGTraversalAction_Launch         = 0xa, /* Launch */
    ZeroGTraversalAction_Sprint         = 0xb, /* Sprint */
};

// Original name: eCommunicationChannelType
enum eCommunicationChannelType {
    eCommunicationChannelType_Global   = 0x0, /* Global */
    eCommunicationChannelType_Group    = 0x1, /* Group */
    eCommunicationChannelType_Personal = 0x2, /* Personal */
};

// Original name: eCommunicationChoiceMethod
enum eCommunicationChoiceMethod {
    eCommunicationChoiceMethod_Random         = 0x0, /* Random */
    eCommunicationChoiceMethod_Sequence       = 0x1, /* Sequence */
    eCommunicationChoiceMethod_RandomSequence = 0x2, /* RandomSequence */
};

// Original name: eCommunicationCriteriaOperant
enum eCommunicationCriteriaOperant {
    eCommunicationCriteriaOperant_None                = 0x0, /* None */
    eCommunicationCriteriaOperant_Equals              = 0x1, /* Equals */
    eCommunicationCriteriaOperant_LessThan            = 0x2, /* LessThan */
    eCommunicationCriteriaOperant_LessThanOrEquals    = 0x3, /* LessThanOrEquals */
    eCommunicationCriteriaOperant_GreaterThan         = 0x4, /* GreaterThan */
    eCommunicationCriteriaOperant_GreaterThanOrEquals = 0x5, /* GreaterThanOrEquals */
};

// Original name: eContextualCommunicationConcept
enum eContextualCommunicationConcept {
    eContextualCommunicationConcept_None                           = 0x0, /* None */
    eContextualCommunicationConcept_Custom                         = 0x1, /* Custom */
    eContextualCommunicationConcept_OnIdleChatter                  = 0x2, /* OnIdleChatter */
    eContextualCommunicationConcept_OnHit                          = 0x3, /* OnHit */
    eContextualCommunicationConcept_OnVehicleHit                   = 0x4, /* OnVehicleHit */
    eContextualCommunicationConcept_OnFriendlyDied                 = 0x5, /* OnFriendlyDied */
    eContextualCommunicationConcept_OnFriendlyKilledEnemy          = 0x6, /* OnFriendlyKilledEnemy */
    eContextualCommunicationConcept_OnTargetKilled                 = 0x7, /* OnTargetKilled */
    eContextualCommunicationConcept_OnVehiclePartDestroyed         = 0x8, /* OnVehiclePartDestroyed */
    eContextualCommunicationConcept_OnRespawn                      = 0x9, /* OnRespawn */
    eContextualCommunicationConcept_OnKilled                       = 0xa, /* OnKilled */
    eContextualCommunicationConcept_OnVehicleEnemySpotted          = 0xb, /* OnVehicleEnemySpotted */
    eContextualCommunicationConcept_OnVehicleEnemyMissileLockingOn = 0xc, /* OnVehicleEnemyMissileLockingOn */
    eContextualCommunicationConcept_OnVehicleEnemyMissileLockedOn  = 0xd, /* OnVehicleEnemyMissileLockedOn */
    eContextualCommunicationConcept_OnVehicleEnemyMissileLockLost  = 0xe, /* OnVehicleEnemyMissileLockLost */
    eContextualCommunicationConcept_OnVehicleEnemyMissileLaunched  = 0xf, /* OnVehicleEnemyMissileLaunched */
    eContextualCommunicationConcept_OnVehicleMissileLockingOn      = 0x10, /* OnVehicleMissileLockingOn */
    eContextualCommunicationConcept_OnVehicleMissileLaunched       = 0x11, /* OnVehicleMissileLaunched */
    eContextualCommunicationConcept_OnResponseFinished             = 0x12, /* OnResponseFinished */
};

// Original name: eContextualCommunicationCriteria
enum eContextualCommunicationCriteria {
    eContextualCommunicationCriteria_Custom                        = 0x0, /* Custom */
    eContextualCommunicationCriteria_Who                           = 0x1, /* Who */
    eContextualCommunicationCriteria_LevelName                     = 0x2, /* LevelName */
    eContextualCommunicationCriteria_LastResponse                  = 0x3, /* LastResponse */
    eContextualCommunicationCriteria_LastDialog                    = 0x4, /* LastDialog */
    eContextualCommunicationCriteria_Vehicle                       = 0x5, /* Vehicle */
    eContextualCommunicationCriteria_VehicleHealth                 = 0x6, /* VehicleHealth */
    eContextualCommunicationCriteria_VehicleShield                 = 0x7, /* VehicleShield */
    eContextualCommunicationCriteria_VehicleSpeed                  = 0x8, /* VehicleSpeed */
    eContextualCommunicationCriteria_VehicleHitTime                = 0x9, /* VehicleHitTime */
    eContextualCommunicationCriteria_VehicleHitShield              = 0xa, /* VehicleHitShield */
    eContextualCommunicationCriteria_VehicleHitDamage              = 0xb, /* VehicleHitDamage */
    eContextualCommunicationCriteria_VehicleStartFireTime          = 0xc, /* VehicleStartFireTime */
    eContextualCommunicationCriteria_VehicleStopFireTime           = 0xd, /* VehicleStopFireTime */
    eContextualCommunicationCriteria_VehicleFiringWeapons          = 0xe, /* VehicleFiringWeapons */
    eContextualCommunicationCriteria_Attacker_Vehicle              = 0xf, /* Attacker_Vehicle */
    eContextualCommunicationCriteria_Attacker_VehicleHealth        = 0x10, /* Attacker_VehicleHealth */
    eContextualCommunicationCriteria_Attacker_VehicleShield        = 0x11, /* Attacker_VehicleShield */
    eContextualCommunicationCriteria_Attacker_VehicleSpeed         = 0x12, /* Attacker_VehicleSpeed */
    eContextualCommunicationCriteria_Attacker_VehicleFiringWeapons = 0x13, /* Attacker_VehicleFiringWeapons */
    eContextualCommunicationCriteria_Target_Vehicle                = 0x14, /* Target_Vehicle */
    eContextualCommunicationCriteria_Target_VehicleHealth          = 0x15, /* Target_VehicleHealth */
    eContextualCommunicationCriteria_Target_VehicleShield          = 0x16, /* Target_VehicleShield */
    eContextualCommunicationCriteria_Target_VehicleSpeed           = 0x17, /* Target_VehicleSpeed */
    eContextualCommunicationCriteria_Target_VehicleFiringWeapons   = 0x18, /* Target_VehicleFiringWeapons */
    eContextualCommunicationCriteria_ActorHealth                   = 0x19, /* ActorHealth */
    eContextualCommunicationCriteria_IsDriving                     = 0x1a, /* IsDriving */
    eContextualCommunicationCriteria_IsOnFoot                      = 0x1b, /* IsOnFoot */
    eContextualCommunicationCriteria_IsEjecting                    = 0x1c, /* IsEjecting */
    eContextualCommunicationCriteria_IsEjected                     = 0x1d, /* IsEjected */
    eContextualCommunicationCriteria_IsDead                        = 0x1e, /* IsDead */
    eContextualCommunicationCriteria_Attacker_Who                  = 0x1f, /* Attacker_Who */
    eContextualCommunicationCriteria_Attacker_ActorHealth          = 0x20, /* Attacker_ActorHealth */
    eContextualCommunicationCriteria_Attacker_IsDriving            = 0x21, /* Attacker_IsDriving */
    eContextualCommunicationCriteria_Attacker_IsOnFoot             = 0x22, /* Attacker_IsOnFoot */
    eContextualCommunicationCriteria_Attacker_IsEjecting           = 0x23, /* Attacker_IsEjecting */
    eContextualCommunicationCriteria_Attacker_IsEjected            = 0x24, /* Attacker_IsEjected */
    eContextualCommunicationCriteria_Attacker_IsDead               = 0x25, /* Attacker_IsDead */
    eContextualCommunicationCriteria_Attacker_IsFriendly           = 0x26, /* Attacker_IsFriendly */
    eContextualCommunicationCriteria_Target_Who                    = 0x27, /* Target_Who */
    eContextualCommunicationCriteria_Target_ActorHealth            = 0x28, /* Target_ActorHealth */
    eContextualCommunicationCriteria_Target_IsDriving              = 0x29, /* Target_IsDriving */
    eContextualCommunicationCriteria_Target_IsOnFoot               = 0x2a, /* Target_IsOnFoot */
    eContextualCommunicationCriteria_Target_IsEjecting             = 0x2b, /* Target_IsEjecting */
    eContextualCommunicationCriteria_Target_IsEjected              = 0x2c, /* Target_IsEjected */
    eContextualCommunicationCriteria_Target_IsDead                 = 0x2d, /* Target_IsDead */
    eContextualCommunicationCriteria_Target_IsFriendly             = 0x2e, /* Target_IsFriendly */
};

/*=========================================================================*/
/*   STRUCT FORWARD DECLARATIONS                                           */
/*=========================================================================*/
/* Forward declarations allow pointers to structs defined later.           */

struct DataSetMatchCondition_SpecificOrganizationsDef;
struct AlignmentSlotBase;
struct UsableArchetypes;
struct SDashboardInteractionParams;
struct FlightControllerHydrogenFuelStates;
struct InteractionConditionInteractableIsIncapacitatedActor;
struct ItemRoomResourcePair;
struct LeanState;
struct VehicleEditorTerminalParams;
struct MobiGlasAfterActionReportStat;
struct SEntityTraversingTarget;
struct CommunicationConfig;
struct EntityComponentAudioEnvironmentFeedbackParams;
struct VehicleEditorAvailableItemsData;
struct UIGraph_LoadoutItemPortDockContextComponent;
struct SWeaponActionFireChargeDrainParams;
struct ServiceBeaconParams;
struct SubsumptionPlatformComponentParams;
struct UIRenderToTextureEntityComponentParams;
struct SInteractionPointModifierApplyActorOffsetByGravity;
struct BuildingBlocks_BindingsTagFromBoolean;
struct SCEntityWeaponMountParams;
struct TransitNavigationLink;
struct ItemResourceDeltaInject;
struct ContractPrerequisite_Locality;
struct PersonalThoughtInventorySingleFilter;
struct OperatorSeatAlignmentSlot;
struct EVAConnection;
struct PlayerInventory;
struct SWeaponActionFireExtinguisherParams;
struct PlanetOceanAudioComponentParams;
struct mobiGlasAppTable;
struct SSequencerImmediateDespawnDespawnerTaskParams;
struct SCItemSuitThrusterPackParams;
struct SApplicationFormVoiceParams;
struct SEAFPSGunGameWeaponLists;
struct EntityEffectSystem_MaterialEffect;
struct EnemyAwarenessConfig;
struct MissionModifier_HostileMission;
struct EntityEffectSystem_MaterialPropertyLink;
struct VehicleMasterModeScanProcedureParams;
struct FloatInteractiveVariable;
struct SEALoadoutExplicit;
struct ConversationNode_Dialogue;
struct ContractPrerequisite_Reputation;
struct ItemResourceContainerPlaceholderParams;
struct SSalvageGlobalStructuralVFXParams;
struct SPowerUserStateModifier;
struct ProceduralLayoutGraphNode_AlternateSubGraph;
struct EAPickupBallisticsParams;
struct InteractionConditionHasProhibitedItems;
struct LeanGraph;
struct EntityTemperatureItemResource;
struct EntitityEffectSystem_StaticColor;
struct SCSeatAccessGatewayInteractionStateParams;
struct SecurityClearanceTokenData;
struct MissionPropertyValueOption_Float;
struct S42ShipStatusAllowedShipParams;
struct WeaponControllerArmMissileStates;
struct ScreenEffects_Debug;
struct TransitCarriageEffects;
struct SExplosiveOrdnanceParams;
struct SCItemCommsControllerParams;
struct SubHarvestableConfigRecord;
struct SWeaponActionParams;
struct SStateAutoChange;
struct SStartHackingGameplayTrigger;
struct SEALoadoutSetup;
struct MissionPropertyValueOption_Tags;
struct RefuelBaseService;
struct CostModifierPerAgentType;
struct MineableParams;
struct SubHarvestableConfig;
struct EVAState;
struct BuildingBlocks_WidgetToggleControl;
struct SCItemInteractionEffectsMapParams;
struct InteractionConditionDeliveryMissionItem;
struct SSCRadarContactProperites;
struct EntitityEffectSystem_StaticFloat;
struct DigitalSignageComponentParams;
struct ShipComputerDefinition;
struct OutfitParams;
struct BuildingBlocks_DisplayWidget;
struct S42StatOperationStat;
struct SWeaponActionConditionParams;
struct ItemResourceDeltaStorage;
struct SEntityComponentEffects;
struct BuildingBlocks_WidgetCinematicLabel;
struct MissionPropertyValue_Investigation;
struct SCharacterCustomizerFeatureBodyTypeSelect;
struct SQuantumDriveEffectTemplate;
struct BuildingBlocks_ComponentGeneralButton;
struct SWeaponParticleEffectParamsArray;
struct PlayerChoiceMenuItem;
struct RastarLocationParams;
struct AlignmentSlotExclusivityGroup;
struct SSetInteractionStateInItemportedGameplayTrigger;
struct SCSeatAccessLinkedGatewayParams;
struct ProceduralLayoutGraph;
struct CargoCommoditiesScanProcedureParams;
struct ItemResourceState;
struct STriggerableDevicesBehaviorParams;
struct BuildingBlocks_WidgetPagination;
struct DoorScanProcedureParams;
struct FrontendControllerProviderSQ42Params;
struct BuildingBlocks_BindingsLocalizedField;
struct SCItemShipCoursePredictionParams;
struct EAPickupKillConfirmedParams;
struct Behavior_ElectricalVehicleEffectParams;
struct InteractionConditionEntityOrientation;
struct SCharacterCustomizerVoiceParams;
struct Behavior_JumpDriveEffectsPreset;
struct SCSeatAccessPassageInteractionStateParams;
struct STriggerableDevicesBehaviorActorStatusParams;
struct StateModifierHoverPowerStage;
struct SCItemMissileParams;
struct VehicleEditorAvailableVehiclesData;
struct SpawnDescription_Ship;
struct SpeciesScanProcedureParams;
struct UsableSlottingSetup;
struct SEntityComponentSequencerParams;
struct EscortParams;
struct MissionModifier_ShipKioskFilter;
struct RttLoadoutPreviewEntityComponentParams;
struct SEntityComponentCarryableParams;
struct MissionLogEntryList;
struct EAFactionTeamParams;
struct MissionPropertyValue_Float;
struct MineableExplosionParams;
struct Investigation_ClueItem_Corpse;
struct JurisdictionScanProcedureParams;
struct SWeaponActionFireBeamParams;
struct SCItemPurchasableParams;
struct SCItemInventoryContainerComponentParams;
struct PlayerUsableInteractionPoint;
struct SControlledEntityGroupCondition;
struct BoidsComponentParams;
struct CommsNotificationStageObject;
struct TagDatabase;
struct LootArchetype;
struct STriggerableDevicesTriggerParams;
struct SEntityEffectSystem_SoundTriggerEffect;
struct BuildingBlocks_BindingsIntegerField;
struct InteractionConditionItemPower;
struct CombatAssistanceParams;
struct LegalRegistrationLocationComponentParams;
struct SEAFPSGunGameArmorLevel;
struct SMusicEventTagMap;
struct ItemResourceCompositionValue;
struct SCItemRadarComponentParams;
struct InteractionConditionSwapAvailable;
struct DataSetMatchCondition_TagSearch;
struct PlacedSurfaceEffects_Emitter;
struct ProjectileParams;
struct SSpreadMisfireEffect;
struct AudioHitListenerDefinition;
struct ScanProcedureParams;
struct SCItemMobiGlasProviderParams;
struct LandingZoneInventory;
struct PlayerUsableSlot;
struct LootGenerationComponentParams;
struct SMisfireFunctionalityCondition;
struct AudioGameContextSetup;
struct HaulingOrder_MissionItemDropOff;
struct FlightControllerQuantumFuelStates;
struct BulletProjectileParams;
struct MissionFailConditionsList;
struct SOutfitPlacingRule;
struct SSalvageRepairMaterialParams;
struct ContractResult_LegacyReputation;
struct InteractionConditionHasItemTypeAttached;
struct BuildingBlocks_TagIntegerPair;
struct InteractionConditionActorSealedHelmet;
struct UIMapEntityComponentParams;
struct UIDataBankDisplay3DParams;
struct SWeaponSequenceEntryParams;
struct SFreightElevatorUIProviderParams;
struct BuildingBlocks_StyleSelectorConditionNotTag;
struct SSequencerPlayerUsableReserveSlotTaskParams;
struct HarvestableElementGroup;
struct SpawnDescription_ShipOptions;
struct DynamicObjectNavigationTriggerAdapter;
struct SCItemTurretCustomAngleLimitTagOverwriteParams;
struct TintPalette;
struct SCItemFuelTankParams;
struct MotionState;
struct MissionModuleHierarchySubMission;
struct LandingGearContactStateModifier;
struct SItemResourceContainerStateModifier;
struct InteractionConditionUsableAlignmentSlotEmpty;
struct SCItemElevatorParams;
struct SSCSignatureSystemParams;
struct SPerkShopItemCategoryBase;
struct MusicLogicSetValue;
struct ControlHintCondition_ActorItemTypeAndTags;
struct CustomScanProcedureParams;
struct InteractionConditionPreset;
struct SActorUsableParams;
struct mobiGlasDefaultAppEntry;
struct GameModeValidMap;
struct TQSOptionContentRecord;
struct RadiationEmitterComponentParams;
struct BuildingBlocks_WidgetRadioControl;
struct SControlledEntityParams;
struct ScreenEffects_DebugParam;
struct SWeaponActionFireSalvageRepairParams;
struct SkillDefinitions;
struct SCEntityActorMovableParams;
struct SCItemQuantumDriveParams;
struct VaultNavigationLink;
struct InteractionProhibitedItemParams;
struct BuildingBlocks_ComponentScrollBar;
struct UIGraph_LoadoutEditorComponent;
struct BuildingBlocks_ComponentGeneralListItem;
struct ItemResourceDeltaConsumption;
struct SecurityClearanceConditions;
struct CareerContract;
struct SpawnSettingsInventoryItem;
struct SMisfireLevelParams;
struct BuildingBlocks_WidgetLineList;
struct SItemPortLoadoutEntryParams;
struct SCItemFlightControllerParams;
struct ResourceTypeGroup;
struct SInteractionLinkExecuteCreateInteractionLinkNode;
struct SInteractionLockGameplayTrigger;
struct MineableElement;
struct HarvestableAreaPreset;
struct SReputationAmountParams;
struct SCharacterCustomizerStep;
struct SEntityEffectSystem_SoundTagEffect;
struct UIBuildingBlocksEntityComponentParams;
struct SInteractionPointModifierReplaceByBoneTransform;
struct MissionModifier_IgnoreMissionPlayerCriminality;
struct ElevatorPathNodeGatewayParams;
struct BuildingBlocks_WidgetCustomShape;
struct BuildingBlocks_WidgetRadialProgressMeter;
struct SInteractionState;
struct VisorLens_Region;
struct ExplosionParams;
struct ProceduralLayout_SupplementaryElementTagsOptions;
struct SItemDefinition;
struct SCItemRadarSensitivityModifierTypeContacts;
struct InteractionConditionPlayerNotInCombat;
struct SCuttableStateModifier;
struct InteractionConditionSecurityClearanceToken;
struct SSequencerTurretSetMovementTagTaskParams;
struct NavigationLinkTagCost;
struct S42CommendationRequirementTriggerCondition;
struct ItemResourceComposition;
struct BountyParams;
struct InteractionConditionAvailableSpaceInLinkedUsableItem;
struct ProjectileDetonationParams;
struct LoadoutEditorComponentParams;
struct CargoFillCapacityValue_Random;
struct HarvestableElementModifier;
struct SRangeStateModifier;
struct SDashboardWeaponInteractionParams;
struct SFlightsuitHangerGroup;
struct STrackViewOutfitInteractionSwapData;
struct EntityComponentAttachableGadgetUIProviderParams;
struct RadarContactTypeDefinition;
struct SCItemDoorParams;
struct UserArraysComponentParams;
struct ElectricalRoomExtension;
struct CommsTapManagerComponentParams;
struct ScreenEffects_Effect;
struct LegacyCraftingOutput_Entity;
struct TQSOptionReference;
struct TagToAudioRtpc;
struct ActorInteractionPointStateModifier;
struct FlightControllerStateModifier;
struct ProceduralLayout_TagFilter;
struct SCLinkedInteractiveControllerParams;
struct SCharacterCustomizerDNARegionParams;
struct UsableChannelInputActionGroup;
struct AudioOneShotManagerBudgetEntry;
struct BuildingBlocks_AspectRatioLibrary;
struct SArmouryManagerParams;
struct ItemResourceNetworkGlobal;
struct EntityEffectSystem_DisableSequencerTask;
struct ScanInformationDef;
struct TriggerConditionDataDef;
struct InteractionConditionPlayerOwnsVehicle;
struct LandingZoneInventoryRedirect;
struct GlobalMarkerConfigs;
struct MissionLogEntry;
struct SCItemTurretGyroParams;
struct HintComponentParams;
struct ChildMissionPhase;
struct SChangeInteractionStateGameplayTrigger;
struct BuildingBlocks_WidgetCard;
struct ContractPrerequisite_CompletedContractTags;
struct SAttachableItemModifierStateModifier;
struct BuildingBlocks_WidgetPolygon;
struct SEASpawnLocationParamsDef;
struct EntityEffectSystem_LightPropertyLink;
struct EntityAudioControllerTypeParams;
struct PersonalThoughtStateModifier;
struct BuildingBlocks_ComponentLabelCaptionPair;
struct InventoryContainerParams;
struct InteractionConditionCanDropItemInCurrentZone;
struct ControlHintCondition_ActorTags;
struct SCSeatAccessEntranceInteractionParams;
struct SEntityEffectSystem_ParticleTagEffect;
struct LootArchetypeEntry_Secondary;
struct MissionPropertyValue_MissionItem;
struct SCItemRadarSensitivityModifierTypeContactGroups;
struct SCharacterCustomizerMakeupSlotRandomizationParams;
struct BuildingBlocks_ComponentGeneralButtonSecondary;
struct BreakableEntityClassParams;
struct InteractionConditionHoverPowerStageEqual;
struct ContractPrerequisite_CrimeStat;
struct BuildingBlocks_WidgetParticleEffect;
struct DefaultActionsEntityState_InteractionStateMachineStateTag;
struct SCOptionalZeroGTraversalParams;
struct EATeamsModuleParams;
struct EntityComponentAsteroidVolumeParams;
struct SDashboardConsumableInteractionParams;
struct SS42Spawning;
struct BuildingBlocks_FieldModifierPair;
struct WebCustomizationStaticParams;
struct BuildingBlocks_WidgetPolymorphic;
struct SDragDropUsableUserConfig;
struct SEAUISpawnScreenFPSEquipmentCategoryParams;
struct SCItemBoatControllerParams;
struct BuildingBlocks_WidgetLine;
struct MusicLogicParameter;
struct ArmouryItem;
struct SMisfireProbabilityParams;
struct SAmmoContainerComponentParams;
struct GlobalShopCommodityParams;
struct SCSeatAccessGatewayInteractionParams;
struct SEntityOnlineStateModifier;
struct ItemCategory;
struct BoidTransition;
struct AreaAlignmentSlot;
struct SItemPortEntityOnlineStateModifier;
struct LoadoutEditorParams;
struct ItemAwardTag;
struct BindingsOperations_AudioParameter;
struct ArmouryItemCategory;
struct SWeaponActionFireTractorBeamAttachDetachParams;
struct SCItemDoorEffectParams;
struct SRewardGeneratorComponentParams;
struct KioskInteractionEntityComponentParams;
struct Investigation_Location;
struct SQuantumBoostEffectParams_LEGACY;
struct BuildingBlocks_ComponentLinearRangeSlider;
struct SCriticalMalfunctionStates;
struct BuildingBlocks_WidgetSlider;
struct OptimalPowerWindowScanProcedureParams;
struct SEntityComponentEffects_Test;
struct MissionLocationTemplate;
struct ARModeSettings;
struct ReviveParams;
struct InteractionConditionSeatUserRegistered;
struct EntityComponentEffects_Test_ColorLink;
struct QuantumDriveEffectParams;
struct ItemAwardEntityClass;
struct Jurisdiction;
struct GlobalMissionSettings;
struct SEntityAudioControllerParams;
struct UIGraph_KioskMainComponent;
struct SEAVehicleSpawnProperties;
struct SCItemSpaceMineParams;
struct SMissionGiverStaticProperties;
struct SEntityTraversingNodeBase;
struct SControlledEntityTransformParams;
struct SStateLevel;
struct SWeaponActionAimSimpleParams;
struct BuildingBlocks_StyleSelectorConditionAllOfTag;
struct S42MissionLogEntryParams;
struct SStarGala;
struct SInternalResourceLink;
struct SpawnerPrerequisite_InteractionState;
struct SEntityComponentDefaultLoadoutParams;
struct PlayerChoiceMenuOptionItem;
struct ItemResourceControlOutputState;
struct FlightControllerEnableStates;
struct InteractionConditionActorHasAttachedEntityTypes;
struct HealthScanProcedureParams;
struct SCItemRestraintParams;
struct SEntityEffectSystem_SoundPropertyLink;
struct BuildingBlocks_ComponentGeneralDropDownMenu;
struct ActorStatusGlobalParams;
struct BuildingBlocks_TwoVariablePicker;
struct NavPointSpawnInformation;
struct ItemResourceControlOutputControlBlock;
struct InteractionConditionCanAttachItemOnHanger;
struct SCItemUIViewOwnerParams;
struct InteractionConditionLimitNearbyCarryables;
struct BreakableComponentParams;
struct FireAreaHazards;
struct TQSWeightInputValue;
struct EntityComponentSpawnClosetTransitManagerParams;
struct CheckEntitiesOnActorsLoadoutWithinAreaGameplayTrigger;
struct SOrganizationProperties;
struct SCharacterCustomizerMakeupSlot;
struct Investigation_ClueItem_Datapad;
struct ArenaCommanderLocationObjectContainersParams;
struct BuildingBlocks_Canvas;
struct SItemPortDef;
struct CraftingResult_Item;
struct HackableScanProcedureParams;
struct AfterActionReportReputationImpact;
struct InteractionConditionActorHasAttachedEntityWithTag;
struct SDashboardEffectParams;
struct BuildingBlocks_WidgetBodyBackground;
struct AIWaveMember;
struct SHostExplosionEffect;
struct EntityComponentSpawnClosetRoomParams;
struct ScanCustomDataTagToggle;
struct MassScanProcedureParams;
struct InteractionConditionIsAttachedToItemPort;
struct VendingMachineParams;
struct SRangeStateLevel;
struct EntityEffectSystem_LightTriggerEffect;
struct UIAudioDefinition;
struct InteractionConditionCanStoreInPersonalInventory;
struct SpawnDescription_NPC_Group;
struct SWeaponAttachmentUIComponentParams;
struct BuildingBlocks_BindingsTagFromIntegerSwitch;
struct SecurityClearanceGiverComponentParams;
struct ProceduralPlanetAudioAlgorithmClosestObjects;
struct AudioBudgetDefinition;
struct MissionPropertyValueOption_Integer;
struct BuildingBlocks_ComponentNavigationTabList;
struct BuildingBlocks_StringTagPair;
struct InteractionConditionPlayerVehicleNotInLandingArea;
struct UIOwnerEntityComponentParams;
struct MissionModuleHierarchy;
struct VehicleComponentParams;
struct SSequencerPlayerUsableSwitchChannelTaskParams;
struct BuildingBlocksView;
struct VehicleEditorItemData;
struct CargoControllerParams;
struct HarvestableAreaTypeManualOverride;
struct BuildingBlocks_EntityWidgetBase;
struct S42CommendationRequirementStat;
struct BuildingBlocks_DraggablePolicyBase;
struct BuildingBlocks_ActorEntityWidget;
struct SDegradationStateModifier;
struct FlightAcademyApplicationFormComponentParams;
struct BuildingBlocks_ContextMenuPolicy;
struct SItemPortDefAttachmentImplementationFace;
struct PlayerChoiceMenu;
struct AudioHitTypeDefinition;
struct LawSystemGlobalSettings;
struct SCItemInteractionJournalParams;
struct BuildingBlocks_WidgetSlice;
struct EAPickupFuelParams;
struct SCItemTurretStandardAngleLimitParams;
struct SRadarDisplayStateModifier;
struct STriggerableDevicesTriggerGravityParams;
struct InteractionConditionIsInteractionShownAsPrompt;
struct SCItemQuantumInterdictionPulseParams;
struct SItemPortLoadoutXMLParams;
struct InstancedInteriorLocationMap;
struct SLootableItemPortRuleParams;
struct AudioGameContext;
struct RadarContactGroupEntry;
struct SHostilityRules;
struct ProceduralPlanetAudioAlgorithmAveragePosition;
struct AudioBreathDefinition;
struct ContractParamOverrides;
struct mobiGlasApp;
struct InteractionConditionLinkedUsableItemHasAttachment;
struct MissionPropertyValue_StringHash;
struct AudioBreathStyleTransitionNode;
struct HarvestablePreset;
struct AreaMapParams;
struct CargoFillCapacityValue_Even;
struct SPerkDiscountItemCategory;
struct SCLoadingPlatformManagerParams;
struct BuildingBlocks_GeometryEntityWidget;
struct SQuantumBoostParams;
struct CargoOccupancyStateModifier;
struct BoidRandomTransition;
struct DefaultActionsEntityEntryCondition_Tags;
struct SCItemConsumableParams;
struct BuildingBlocks_IntegerTagPair;
struct SelfDestructStateModifier;
struct FactionScanProcedureParams;
struct FrontendOverrideParams;
struct BuildingBlocks_ComponentNotification;
struct OperatorModeStateModifier;
struct SPhysicalScreen;
struct LootConfig;
struct ObjectiveHandler_Deliveries;
struct AIWave;
struct SCItemFuelNozzleParams;
struct NotificationDef;
struct Faction;
struct EmissionsScanProcedureParams;
struct MissionOrganization;
struct TQSOption;
struct GeometryAsteroidModelTag;
struct SWeaponActionToggleAimStanceParams;
struct SHighlightBehaviorNode;
struct ArmouryTerminalParams;
struct SServiceBeaconCreatorParamsWithDifficulty;
struct SQedVisualGraphEffectParams;
struct SPlayerUsableSearchRouteUsable;
struct SReputationMissionGiverRequirementParams;
struct VehicleSelfDestructScanProcedureParams;
struct MissionPropertyValue_Reward;
struct ItemResourceDeltaConversion;
struct SModelVoiceTagPair;
struct PersonalThoughtInventoryItemOrientationOffset;
struct LootArchetypeOrGroup_Secondary;
struct SReputationMissionRewardBonusParams;
struct BoidsGroupComposition;
struct InteractionConditionEmptyUsableItemPort;
struct S42StatId;
struct LoadoutDummyComponentParams;
struct DialogueContextReferenceEntry;
struct AggregateStateModifier;
struct BoidState;
struct MissionStringVariants;
struct BuildingBlocks_WidgetLoadingIndicator;
struct InteractionConditionCanDropWearableItem;
struct SpawnDescription_ShipGroup;
struct SEAGlobalEventLoadouts;
struct WeaponControllerStateModifier;
struct SEntityEffectSystem_Attachment_BoneAttachment;
struct LegacyCraftingCost_ResourceAmountDerivedFromAmmoContainer;
struct S42ShipStatusAppParams;
struct ServiceBeaconGlobalParams;
struct ObjectContainerModifierParams;
struct InstancedInteriorLocationParams;
struct SGeometryResourceParams;
struct SPrisonSentenceStateModifier;
struct SCharacterCustomizerRandomizationOverrideParams;
struct FiringRangeScenarioDef;
struct UsableStateModifier;
struct SCharacterCustomizerLoadoutItemReplacementMapping;
struct MinRequiredMissions;
struct EntityTemperatureResourceHeatGeneration;
struct InteractionConditionOR;
struct SInteractionConditionMovableMover;
struct SCharacterCustomizerFeatureShaderEdit;
struct VehicleEditorGroupData;
struct Stat;
struct SAccoladeRequirementWatchedStat;
struct LootTable;
struct CommsNotification;
struct EntityDefaultLoadoutParams;
struct AsteroidBehavior;
struct InteractionConditionEntityTags;
struct TQSInput;
struct SSpawnProtectionBarrierParams;
struct EAPickupModule;
struct SEAGlobalSpecialLoadout;
struct EAEntityMarkerComponentParams;
struct CrewManifest;
struct SCItemSeatDashboardMFDParams;
struct SItemPortRule_TriggerSequenceDef;
struct UIGraph_BuildingBlocksContextComponent;
struct BuildingBlocks_TogglerBase;
struct SkinInteractableTemplates;
struct FiringRangeWeaponItem;
struct DefaultPlayerLoadoutEntitlementParams;
struct ElevatorEffectParams;
struct MissionModifier_SecurityClearance;
struct BlockedHintParams;
struct SBurstMisfireEffect;
struct SVolatileCargoHealthStateModifier;
struct RestockService;
struct SMovableGrip;
struct SServiceBeaconCreatorParams;
struct SSequencerDefInteractionTaskParams;
struct SPVPBountyContractGenerators;
struct WebCustomizationDebug;
struct EntityComponentCharacterCustomizerParams;
struct SCEntityComponentDragDropUsableUserParams;
struct SCItemInspectableParams;
struct SCItemDockingTubeParams;
struct CommunicationChannel;
struct CommodityTypeDatabase;
struct SEntityTraversingTargetPath;
struct BuildingBlocks_VehicleEntityWidget;
struct InteractionConditionAccessReservedRoom;
struct SReputationJournalEntriesParams;
struct ItemPortTagsDictionary;
struct BuildingBlocks_BindingsStringFromBooleanCanvas;
struct ProceduralLayoutGraphNode_MultiElement;
struct ResourceContainer;
struct BuildingBlocks_WidgetCheckboxControl;
struct SInteractionStateType;
struct LandingGearStateModifier;
struct CargoResourceAllocation;
struct PowerConnectionStateModifier;
struct VehicleEditorManagerParams;
struct SEAFPSGunGameArmorSet;
struct UsableSlottingAlignmentSlot;
struct SItemPortLoadoutBaseParams;
struct SEAUISpawnScreenFPSEquipmentParams;
struct LootArchetypeOrGroup_Primary;
struct CraftingCost_Item;
struct FiringRangeParams;
struct SCInteractionStateGameplayTriggerComponentParams;
struct ContactHighlightSharedParams;
struct SubHarvestableConfigSingleManual;
struct SConditionalWeaponAction;
struct InteractionConditionEntityIsHeldByOtherActor;
struct SSequencerUsableEnableUseChannelTask;
struct BuildingBlocks_BindingsStringFromTagSwitch;
struct SEntityEffectSystem_ParticleEffect;
struct ItemPortTagsElement;
struct SkinInteractableTemplate;
struct TQSOptionContent;
struct RestrictedAreaKillParams;
struct InteractionConditionInteractionStateMachineTag;
struct UIAudioComponentEntityComponentParams;
struct NavigationCostVolumeComponentParams;
struct MusicAreaComponentParams;
struct MissionFlowAction_TokenStateChange;
struct BuildingBlocks_WidgetCircle;
struct SItemPortInteractionsParams;
struct SControlledEntityDynamicTransformParams;
struct MaelstromShatterDestroyEvent;
struct PlayerUsableItemPort;
struct WeightedLootArchetype;
struct ScreenEffects_Param;
struct MusicLogicIncrement;
struct ProceduralLayoutGraphNode_AlternateElement;
struct ProceduralLayoutGraphNode_CorridorElement;
struct SEALoadoutFPSGunGameSetup;
struct UsableUseSlot;
struct SpawnDescription_Entity;
struct EVAGraph;
struct SCItemWeaponComponentParams;
struct ObjectiveHandler_EntityAttached;
struct SSecurityNetworkRoomExtensionParams;
struct SCItemHydraulicLeverSwitchParams;
struct ShopInteractionData;
struct UsableSlottingReferenceItemPort;
struct SItemPortDefaultItemDef;
struct CargoManifest;
struct SEAUISpawnScreenComponentParams;
struct GrenadeMarkerProvider;
struct PlayerMarkerProvider;
struct BoidActorProximityTransition;
struct SEntityComponentUnattendedVehicleMarkerParams;
struct SWeaponActionHighlightCuttablesParams;
struct NameScanProcedureParams;
struct MegaMap;
struct DoorLockStates;
struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect;
struct SAsteroids;
struct InteractionConditionCheckActorState;
struct LegalOwnerScanProcedureParams;
struct SUsableExitTransitionParams;
struct ObjectiveHandler_EventModule;
struct ProceduralPlanetAudioComponentParams;
struct InteractionConditionActorInventoryContainerEntityHasTag;
struct Investigation_ClueItem;
struct UIAudioEvent;
struct ContractGeneratorHandler_TutorialSeriesDef;
struct ItemResourceDynamicCompositionExample;
struct SEntityInteractableParams;
struct SAttachableComponentParams;
struct BuildingBlocks_WidgetMovie;
struct EntityEffectSystem_ToggleSequencerTask;
struct PassengerScanProcedureParams;
struct SItemPortDefAttachmentImplementationSkin;
struct BuildingBlocks_ComponentCustomButtonSecondary;
struct SCItemWeaponControllerStaggeredFiring;
struct SCItemSeatAccessParams;
struct SWeaponActionFireHealingBeamParams;
struct UnitTest;
struct CommunicationVariation;
struct MissionPropertyValueOption_StringHash;
struct ResourceLinkedInteractionState;
struct ResourceContainerDefaultCompositionEntry;
struct GreaterThan;
struct SRemoteRigidEntityControllerControlledGroupParams;
struct DebugLoadoutKit;
struct SSequencerPlayerUsableScoochTaskParams;
struct SEntityHoverPhysicsControllerParams;
struct MineableComposition;
struct LadderNavigationLink;
struct ScreenEffects_DebugEffect;
struct TransitCarriageParams;
struct RepairService;
struct SEntityEffectSystem_UIOwnerTagEffect;
struct SCItemProximitySensorParams;
struct SLockCameraViewAreaParams;
struct BuildingBlocks_WidgetCanvas;
struct ShipAudioComponentParams;
struct SCItemFlashlightParams;
struct SEALoadoutAttachment;
struct CargoResource;
struct MantleNavigationLink;
struct SCItemSeatParams;
struct SInteractionConditionPlayerVehicleNotInArmisticeZone;
struct TQSInputBoolValue;
struct InteractionConditionEntityIsHeldByInteractor;
struct ArenaCommanderPlanetOverrideParams;
struct UseChannelArchetype;
struct SChangeFactionTrigger;
struct ThrusterGimbalState;
struct SLightGroupComponentParams;
struct ItemResourceGroup;
struct InteractionConditionListRecord;
struct SChangeHoloEntityStateModifier;
struct EntityComponentAudioEnvironmentFeedbackPointParams;
struct RadarContactGroupArray;
struct DoorOpenStates;
struct AudioBreathStyleNode;
struct EntityClassDefinition;
struct ItemResourceCompositionMap;
struct ReputationPrerequisites;
struct InventoryLocation;
struct ActorMechanicsParams;
struct ObjectiveHandler_WithModule;
struct MineableCompositionPart;
struct BuildingBlocks_BindingsBooleanField;
struct BuildingBlocks_BindingsIntegerFromTagSwitch;
struct SEntityFireMisfireEffect;
struct SCItemSeatDashboardPhysicalScreenParams;
struct CommunicationChannelConfig;
struct CargoFillCapacityValue_RandomBeta;
struct SLoadoutInventoryContainer;
struct BuildingBlocks_ColorPicker;
struct SGlobalElectronParams;
struct AtmosphereBehavior;
struct EntityComponentEffects_Test_Tag;
struct StatDefinitions;
struct SPrimeableComponentParams;
struct BuildingBlocks_WidgetLighting;
struct SubHarvestableConfigRef;
struct MineableCommoditiesScanProcedureParams;
struct SecurityAccessTokenStateModifier;
struct SEntitySpaceShipPhysicsControllerParams;
struct InventoryContainerManager;
struct DataSetMatchCondition_PropertyTags;
struct BuildingBlocks_WidgetText;
struct MissionLocationData;
struct SUsableRoutingSettings;
struct EAPickupBaseParams;
struct NavigationLinkCostCustomization;
struct EAObjectiveInteractableComponentDef;
struct BuildingBlocks_ShapeWidget;
struct SMultiMissionCompleteReward;
struct TagToAudioRtpcList;
struct RestrictedAreaParams;
struct ArmorScanProcedureParams;
struct SMobiGlasAppLink;
struct BuildingBlocks_BindingsFieldBase;
struct SubHarvestableSlot;
struct SCItemTurretCustomAngleLimitParams;
struct SCAirTrafficControllerDataManagerParams;
struct ItemResourceConversionModifierScrub;
struct SDamageMisfireEffect;
struct UIWorldDisplay3DParams;
struct QuantumTravelPreparationStates;
struct SGeometryDataParams;
struct SGlobalCrosshairParams;
struct ContractGeneratorHandler_Career;
struct SMusicTagBehaviour;
struct MissionFailConditionParams;
struct SCItemMissileRackParams;
struct InteractionConditionDraggedActorNotDead;
struct SSequencerSetInteractionStateCarryableTaskParams;
struct EntityComponentMisfireParams;
struct SItemPerkListParams;
struct ArenaCommanderScenarioParams;
struct SCItemSuitHelmetParams;
struct PlacedSurfaceEffects_EmitterEntry;
struct SCActorRestrainableParams;
struct SCInteractionJournalEntryParams;
struct MobiGlasAfterActionReportGenerationRules;
struct SEntityEffectSystem_Attachment_BoneListAttachment;
struct BuildingBlocks_WidgetList;
struct STransferCreditGameplayTrigger;
struct SDespawnerParams;
struct AudioEnvironmentFeedbackZoneProcess;
struct SEntityComponentAtmosphereContainerParams;
struct STriggerableDevicesTriggerLaserTripParams;
struct SCItemDisplayScreenComponentParams;
struct SItemPortDefHelperNode;
struct SCraftingDictionary;
struct UsableChannelInputAction;
struct ScanCustomDataTagEntry;
struct ContractPrerequisite_AreaTags;
struct PlacedSurfaceEffectsComponentParams;
struct BuildingBlocks_TextureBase;
struct SChargeDrainPrimeParams;
struct CollectibleStateModifier;
struct SEAPlayerSpawnProperties;
struct SOnInteractionStateChangeTriggers;
struct SQuantumDriveEffectTemplateRef;
struct InteractionConditionCanBeBodyDragged;
struct EntityComponentLegacyCrafterParams;
struct SLegacyMisfireEventParams;
struct VisorLens_Widget;
struct InteractionConditionPlayerVehicleContainsNoUnownedVehicles;
struct SCItemVehicleLandingGearSystemParams;
struct SPowerSourceStateModifier;
struct EntityComponentEffects_Test_Trigger;
struct SReplicatedSequencerDefSequenceParams;
struct SQedVisualGraphStateParams;
struct SDashboardPowerInteractionParams;
struct DialogueContextBank;
struct InteractionConditionIsUserAI;
struct ScanEvaluationInfractionSettings;
struct SCharacterCustomizerItemSelect;
struct UsableChannelInputAction_TriggerSequence;
struct SCharacterCustomizerTattooRandomizationParams;
struct SSequencerPlayerUsableUseChannelTaskParams;
struct ExtendedNameDatabase;
struct UsableSlottingReferenceLoadoutEntry;
struct CommsNotificationsGlobalParams;
struct SubContract;
struct SItemShopARItemPortParams;
struct ProceduralPlanetAudioTagAndEvent;
struct BuildingBlocks_ComponentCustomButton;
struct SSpawnEntity;
struct SCItemQuantumInterdictionGeneratorParams;
struct BeaconsContracts;
struct ContractResult_CompletionTags;
struct AudioEnvironmentFeedbackTagAndEvent;
struct InteractionPointTemplate;
struct InteractionConditionCheckItemWeight;
struct BuildingBlocks_WidgetEditBox;
struct EntityComponentEffects_Test_Link;
struct RadarContactTypeEntry;
struct SEntityParticlePhysicsControllerParams;
struct PersonalThoughtInventoryCategoryFilter;
struct SCharacterCustomizerMaterialEditParams;
struct MobiGlasAfterActionReportStatsBlock;
struct SCItemEMPParams;
struct SActorComponentParams;
struct DeliveryLockerComponentParams;
struct UsableArchetype;
struct SLinkedInteractionStateChangedStateModifier;
struct OrganizationRelationshipParams;
struct EntityEffectSystem_EnableSequencerTask;
struct InventoryDropDetachRules;
struct LegacyCrafterContainerPort;
struct Skill;
struct SCItemExplosiveParams;
struct SCarryableSequenceRef;
struct CommunicationVariationCondition;
struct SCItemTurretMovementTagName;
struct SEffectParamsNodeSound;
struct HintTriggerData;
struct SEntityTraversingNodeTypeUserControl;
struct HealParams;
struct TQSWeightInputTagValue;
struct MissionPropertyValue_Organization;
struct SPUHostility;
struct InteractionConditionList;
struct SLootableInventoryParams;
struct SCItemTurretSensitivityParams;
struct SecurityNetworkProtocolOverride;
struct ContractResult_CompletionTag;
struct SEAUISpawnScreenFPSEquipmentSlotParams;
struct SResourceTypeDefaultCargoContainers;
struct MinCompletionTags;
struct MissionFlowCondition_TokenState;
struct MissionObjective;
struct STaggedSignaturesEntry;
struct InteractionConditionEntityTag;
struct SubHarvestableConfigSingleRef;
struct LegalRegistrationComponentParams;
struct DoorStateModifier;
struct MissionBroker;
struct ProceduralPlanetAudioTagAndRtpc;
struct BuildingBlocks_AspectRatioOption;
struct InteractionConditionInteractableEntityOwnerHasArmorAttached;
struct SEntityRigidPhysicsControllerParams;
struct SSharedInteractionParams;
struct SEntityEffectSystem_UIOwnerTriggerEffect;
struct InteractionConditionCanBeBodyDragDropped;
struct SLoadoutRequirementTags;
struct PlayerChoiceMenuType;
struct SCarryableStatesParams;
struct SCItemShipComputerParams;
struct SecurityClearanceTokenData_Reputation;
struct SAuxiliaryWeaponActionComponentParams;
struct ExtendedNameEntry;
struct CameraPlayerInventoryConfig;
struct FactionRelationship;
struct StarMapObjectTypes;
struct UsableChannelInputAction_ControlInteractive;
struct SVendingMachineItem;
struct MissionLocality;
struct MissionPropertyValue_Location;
struct SPerkEnabledItemCategory;
struct ContractGeneratorHandler_LinearSeries;
struct InteractionConditionDraggedActorIsPlayer;
struct InteractionConditionPlayerVehicleInAnotherVehicle;
struct MissionModifier_RequestRentShip;
struct TQSWeightInput;
struct TagSearchTerm;
struct SecurityNetworkProtocol;
struct SHealthComponentParams;
struct SCItemClothingParams;
struct SInteractionStateTransition;
struct SecurityNetworkVariableEffect_SetInteractionState;
struct QuickAccessWheelInventoryItemDef;
struct SCItemPowerPlantParams;
struct LootArchetypeEntry_Primary;
struct ActorMarkerTrackerParams;
struct SMaterialNodeParams;
struct SecurityClearanceTokenData_OutfitRequirementDef;
struct SSpawnerParams;
struct KeypadParams;
struct SSimpodComponentParams;
struct SWeaponMountGrip;
struct SEntityLootableContainerParams;
struct SInverseInteractionLinkParams;
struct EAPhaseActivePropComponentDef;
struct SWeaponMisfireParams;
struct RadarContactSubGroupEntry;
struct SCInteractionGeometryMapEntryParams;
struct LegacyCraftingCost_ResourceAmount;
struct SItemPortActorRecordParams;
struct ControlledSubstanceClass;
struct ContractResult_BadgeAward;
struct ActorZeroGTraversalParams;
struct SEntityEffectSystem_Attachment_EntitySlot;
struct TQSInputDynamicVariableValue;
struct MapDisplayParamsInteriorMap;
struct ContractGeneratorHandler_ServiceBeacon;
struct SUIEntityGeometryResourceParams;
struct NavigationWaypointMarkerProvider;
struct TraversalCostConditionTags;
struct InteractiveVariable_BackToDefaultFloatParams;
struct RestrictedAreaComponentParams;
struct ClassificationScanProcedureParams;
struct SubItemsScanProcedureParams;
struct SEASpawning;
struct MissionModifier_ShopItemPerksDef;
struct BuildingBlocks_ComponentCustomDropDownMenu;
struct ProjectileTestParams;
struct SSequencerUsableDisableUseChannelTask;
struct InteractionConditionAND;
struct SCItemQuantumJammerParams;
struct SGeometryNodeParams;
struct SQuantumResourceNetworkParams;
struct SCItemJumpDriveParams;
struct ProceduralPlanetAudioData;
struct UIAudioManufacturer;
struct ContractPrerequisite_Location;
struct InventoryInteractionBlockingAttachedEntities;
struct QuantumDriveGlobalParams;
struct VehicleEditorPortsWithItemData;
struct SCItemTurretStandardAngleLimitTagOverwriteParams;
struct ObjectiveToken;
struct SInteractionStateMachineParams;
struct BuildingBlocks_WidgetDustVolume;
struct UsableChannelInputAction_ConsumeWithUsable;
struct HackingControllerParams;
struct InteractionConditionParams;
struct EAMessageTriggerComponentParams;
struct SWeaponActionToggleParams;
struct TagTrigger;
struct InteractionConditionHasSupportingItemport;
struct SCItemQuantumDriveParams_NEW;
struct SCharacterCustomizerHairLengthEntry;
struct TargetSelectorSubTargetingStates;
struct ConditionDisplayParams;
struct ItemResourceStateModifier;
struct CarryConfig;
struct AudioThrusterProperties;
struct Marker_Configuration;
struct ContractGeneratorHandler_PVPBountyDef;
struct BuildingBlocks_DropTarget;
struct GenericDataDisplayAppData;
struct ResourceType;
struct DialogueContext;
struct SCommunicationUserComponentParams;
struct STrackViewOutfitExternalSwapData;
struct SCItemTurretMovementParams;
struct SEntityComponentProceduralOCModifierParams;
struct TacticalQuery;
struct SCItemHoloDisplayParams;
struct ScanOverrideParams;
struct SEntityHoverPhysicsControllerComponentParams;
struct BuildingBlocks_BindingsColorField;
struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect;
struct InteractionConditionPlayerVehicleLandedOrZeroG;
struct BindingsOperations_IntegerStringCanvasPair;
struct SEntityComponentCIGTestBParams;
struct MissionFlowAction_PickRandomMissionPhase;
struct SCItemWheeledControllerParams;
struct BuildingBlocks_TabListBase;
struct UIGraph_ItemPreviewContextComponentDef;
struct BuildingBlocks_WidgetIcon;
struct SSequencerDefSequenceParams;
struct EAStaticLoadoutDummy;
struct LootingInventoryParams;
struct PowerScanProcedureParams;
struct BuildingBlocks_ComponentCheckboxListItem;
struct SLoadoutInventoryItem;
struct WantedLevelOwnerScanProcedureParams;
struct TransitCarriageAudio;
struct InteractionConditionAccountBadge;
struct ItemResourceConversionPair;
struct EAPickupRepairParams;
struct BuildingBlocks_NumberTagPair;
struct SEASpawnLocationVehicleSeatSlot;
struct EntityComponentSpawnClosetParams;
struct JumpDownNavigationLink;
struct HandholdSharedInteractionLink;
struct EntityClassMigration;
struct SWeaponActionDynamicConditionParams;
struct InstabilityScanProcedureParams;
struct SWeaponActionGatheringBeamParams;
struct InteractionConditionActorStatusEffect;
struct SDamageMapStateModifier;
struct TQSInputTagValue;
struct SecurityClearance_OutfitRequirement_TagRequirementDef;
struct SDestroyAttachedItemGameplayTrigger;
struct MissionPropertyValue_NPCSpawnDescriptions;
struct Behavior_AtmosphereVehicleEffectParams;
struct SInspectAnimationParams;
struct InteractionConditionCanOpenExternalInventory;
struct BuildingBlocks_FieldModifierRecordRefTypeCanvasReferenceRecord;
struct SWeaponParticleEffectParams;
struct MusicLogicConfig;
struct LogoutComponentParams;
struct SCItemTurretParams;
struct SCItemLandingDockControllerParams;
struct SSimpodSimulation;
struct SCItemBombParams;
struct InventoryStateModifier;
struct SExplosionComponentParams;
struct CommunicationEntry;
struct AutoSpawnSettings;
struct InteractionConditionEntityIsAttachedToInteractor;
struct SecurityClearanceTokenData_WeaponDrawn;
struct BuildingBlocks_StyleSelectorConditionAnyOfTag;
struct HealthDamageState;
struct ContractBase;
struct VehicleSalvageGlobalParams;
struct MobiGlasMissionBriefing;
struct VehicleEditorAutoEquipData;
struct SDashboardSeatInteractionParams;
struct BuildingBlocks_WidgetLinearProgressMeter;
struct SOnInteractionTriggers;
struct AggregateStateParams;
struct BuildingBlocks_WidgetHoloVolume;
struct SecurityClearanceToken;
struct SJumpTunnelSectionGenerationParams;
struct ContractResult_Reward;
struct SWeaponConditionHasTags;
struct SWeaponActionParallelParams;
struct RadarJammerComponentParams;
struct SMissionLocationObjectMetadataParams;
struct SActionAreaComponentParams;
struct SWeaponModifierComponentParams;
struct EntityComponentTriggerableDevicesParams;
struct SUsableEnterTransitionParams;
struct SEntityAttachStateModifier;
struct SActorStaticColliderDeathBehaviour;
struct SSalvageCargoParams;
struct DescriptionScanProcedureParams;
struct STriggerableDevicesTriggerImpactParams;
struct MonitoredZoneControllerParams;
struct ContractResult_Item;
struct SEntityComponentOutfitHangerParams;
struct TagsDNFTerm;
struct MobiGlasPersonalMessage_Message;
struct EntityComponentAudioHitListenerParams;
struct SecurityClearanceTokenData_PrisonInmate;
struct SEntityTraversingTreeParams;
struct VisorLens_Layout;
struct ItemResourceModifier;
struct SSecondaryAmmoContainerParams;
struct LocationMissionLimit;
struct SEAPlayerLoadoutSnapshotEntry;
struct SCItemTurretRemoteParams;
struct BuildingBlocks_WidgetImage;
struct EntryOptionalData_SpawnWith;
struct TestArrays;
struct MissionRandomPhaseEntry;
struct SecurityNetworkVariableEffect_SetHostilityRules;
struct BuildingBlocks_WidgetWindow;
struct SWeaponAttachmentIconPair;
struct SEntityEffectSystem_ParticleTriggerEffect;
struct SRemoteRigidEntityControlledEntitiesParams;
struct TQSEmbeddedOption;
struct InteractionConditionCanAffordItem;
struct SReputationAmountListParams;
struct ProceduralLayoutGraphNode_VerticalElement;
struct BuildingBlocks_GeneralEntityWidget;
struct SCItemTurretJointMovementParams;
struct QuantumDriveStateModifier;
struct RadarDisplay3DPreset;
struct InteractionConditionDraggedActorHasProhibitedItems;
struct EntityEffectSystem_MaterialCategory;
struct EntityTemperatureStateModifier;
struct SAtmosphericHeatingParams;
struct SEALoadoutCollection;
struct DriverScanProcedureParams;
struct InteractionConditionUsableNotInMotion;
struct SQuantumTracePointParams;
struct TraversalCostConfig;
struct BuildingBlocks_ComponentBadgeListItem;
struct TQSInputStringValue;
struct DeathScanProcedureParams;
struct InteractionConditionSwapOnly;
struct SCItemSalvageControllerParams;
struct Behavior_VehicleEffectParams;
struct DynamicMissionLocation;
struct SWeaponActionMiningParams;
struct ScreenEffects_ParamStrengthBehavior;
struct BuildingBlocks_BindingsTransformField;
struct SEntityEffectSystem_AudioEnvironmentFeedbackZone;
struct LoadoutKit;
struct SSequencerTurretSetLimiterTagTaskParams;
struct SecurityClearanceTokenData_OR;
struct AudioEnvironmentFeedbackPointDef;
struct WeaponControllerMissileEventStates;
struct BuildingBlocks_WidgetContainer;
struct SpawnPointComponentParams;
struct SMultiMissionCompleteRewardRecord;
struct InteractionConditionGameMode;
struct SCharacterCustomizerAllowedClasses;
struct SEntityEffectSystem_SoundCategory;
struct MotionConnection;
struct SEntityComponentHostilityParams;
struct SEntityTraversingNodeTypeEntityLink;
struct ScreenEffects_ParamStrengthBehavior_RangeEnable;
struct SCraftingDictionaryEntry;
struct SCItemShieldEmitterParams;
struct AudioEnvironmentFeedbackZoneSetup;
struct ObjectiveHandler_NearLocation;
struct SInverseInteractionLinkExecuteCreateInteractionLinkNode;
struct InteractionConditionEligibleForPrisonRelease;
struct SurfaceRaindropsComponentParams;
struct SSCSignatureSystemAudioTriggerTagRule;
struct SCPlayer;
struct BuildingBlocks_BindingsStringField;
struct SendSetAmmoRegenRateEvent;
struct SInteractionPointModifier;
struct TargetSelectorStateModifier;
struct ProceduralLayoutGlobalOptions;
struct InteractionConditionPlayerVehicleNotInQuantum;
struct PlaylistRNGConfig;
struct Level;
struct CommunicationAutoMannequinTagsConfig;
struct VehicleEditorItemOffsets;
struct SCItemDisplayScreenStateParams;
struct MissionModifier_FactionHostility;
struct CrewData;
struct SSolarSystem;
struct SCItemElevatorPathNodeParams;
struct InstancedInteriorSizeList;
struct SEntityTraversingNodeTypeChildTag;
struct SLoadoutAssortment;
struct SSCSignatureSystemBaseSignatureParams;
struct HarvestableTagListTagEditor;
struct DeliveryTarget;
struct TQSWeightInputIntValue;
struct UserArrayElement;
struct AmmoParams;
struct BuildingBlocks_WidgetRuntimeImage;
struct BuildingBlocks_StaticVariableCanvas;
struct CommoditySubtype;
struct EAEntityInclusionParams;
struct GlobalJumpDriveParams;
struct SStandardParams;
struct RadarSystemSharedParams;
struct SCItemLensDisplayParams;
struct HydrogenRefuelService;
struct SPrimeableAnimationState;
struct UsableUseChannelInstance;
struct SStateModifierMovableMover;
struct ShoppingProviderEntityComponentParams;
struct HandholdComponentParams;
struct InteractionConditionEntityIsAttachedToOtherActor;
struct STriggerableDevicesTriggerTimerParams;
struct SShipStatusAppParams;
struct BuildingBlocks_BindingsVectorField;
struct UIConfig;
struct SItemPortLoadoutOutfitParams;
struct TQSWeightDynamicVariableValue;
struct ProceduralLayoutNode_ElementProperties;
struct ContractGeneratorHandlerBase;
struct HarvestableElement;
struct BuildingBlocks_BindingsTagFromNumberCompare;
struct SCriminalRecordStateModifier;
struct Grip;
struct TQSInputFloatValue;
struct BuildingBlocks_Interactions;
struct SCItemWeaponControllerParams;
struct SItemPortStateModifier;
struct ItemWeaponBeamVFXParams;
struct BuildingBlocks_WidgetTextField;
struct UsableAlignmentSlot;
struct SGeometryActorModelTag;
struct STriggerableDevicesBehaviorUnprimeParams;
struct BuildingBlocks_WidgetLight;
struct SMusicComponentParams;
struct EntityTemperature;
struct SecurityClearanceTokenData_NOT;
struct ItemRecoveryParams;
struct SecurityTokenNotificationRecordReference;
struct InteractionConditionLinkedUsableHasTag;
struct BuildingBlocks_ComponentMinMaxRangeSlider;
struct TrespassAreaComponentParams;
struct SWeaponActionMeleeParams;
struct ProceduralLayoutGraphNode_Base;
struct AdditionalProjectilesParams;
struct BoidAlertedTransition;
struct ContractPropertyTagReplacement;
struct WeaponARModifier;
struct SCLoadingPlatformEffectParams;
struct ServiceBeaconBaseParams;
struct LootGenerationGlobalParams;
struct SCharacterCustomizerFeatureDNA;
struct SReputationMissionGiverRewardBonusParams;
struct SCOptionalThrustParams;
struct LocomotionNavigationLink;
struct SSubsumptionMission;
struct GlobalShopBuyingParams;
struct ContractTemplate;
struct Formation;
struct SEntityEffectSystem_PropertyLink;
struct SpectatorPointParams;
struct NavigationLinkComponentParams;
struct SEntityTraversalTargetPathContext;
struct SMFDView;
struct SHealthStateModifier;
struct HandholdInteractionPointLink;
struct MissionPropertyValue_EntitySpawnDescriptions;
struct BuildingBlocks_CalloutSettings;
struct CargoResourceDistribution;
struct BuildingBlocksLayer;
struct Behavior_CustomQuantumDriveEffectsPreset;
struct TelevisionScreenParams;
struct BuildingBlocks_ComponentToggleListItem;
struct SMisfireMeanTimeCondition;
struct PowerTransferResistanceScanProcedureParams;
struct UIAudioParameter;
struct SPlayerUsableParams;
struct EntityPhysicalAudioParams;
struct ContractGeneratorHandler_List;
struct InteractionConditionHackingControllerEnabled;
struct SCharacterCustomizerFeatureBase;
struct SMobiGlasPersonalStatusWeaponItem;
struct SSCItemSelfDestructComponentParams;
struct SCargoGridSpawnedStateModifier;
struct InteractionConditionCanReachMovable;
struct ItemPreview_Config;
struct InteractionConditionInteractorNotInZeroG;
struct SEntityEffectSystem_SoundEffect;
struct SpawnDescription_EntityGroup;
struct BuildingBlocks_ComponentOptionTabList;
struct HarvestableGeometry;
struct ExplosionRecord;
struct ContractGeneratorHandler_Legacy;
struct InteractionConditionHeldItem;
struct HaulingOrder_MissionItem;
struct SGiveClearanceTokenGameplayTrigger;
struct SubHarvestableConfigManual;
struct MissionPropertyValue_Tags;
struct PlayerChoice_PITConfig;
struct UIGraph_Group;
struct Tag;
struct IndividualPortRefillData;
struct BuildingBlocks_WidgetForegroundOverlay;
struct InteractionConditionItem;
struct AudioHitListenerTrigger;
struct BuildingBlocks_TagStringPair;
struct ResourceTypeDatabase;
struct SCustomizableMaterialParams;
struct SCItemCargoGridParams;
struct SecurityClearanceTokenData_UnarmedDef;
struct HaulingOrder_EntityClass;
struct SWeaponActionLockOnParams;
struct BuildingBlocks_WidgetTickBox;
struct EntityEffectSystem_LightEffect;
struct EntityEffectSystem_MaterialTagEffect;
struct ZeroGTraversalConnection;
struct SCInteractionEffectsMapEntryParams;
struct EnvironmentFeedbackAudioObject;
struct SecurityNetworkVariable;
struct SEntityComponentCrewManifestParams;
struct SFirstSelect;
struct JumpDriveEffectParams;
struct SJumpTunnelGenerationParams;
struct SWeaponActionFireChargedParams;
struct EAEntityDataParams;
struct STaggedInverseInteractionLinkExecuteCreateInteractionLinkNode;
struct SWeaponConnectionParams;
struct VehicleEditorUIData;
struct StarMapObjectType;
struct LeanConnection;
struct SInteractionLinkParams;
struct STriggerableDevicesBehaviorExplosionParams;
struct LogoutInteractionParams;
struct EAPhaseObjectiveComponentDef;
struct ContractLegacy;
struct ProceduralLayoutGraphNode_Element;
struct EAObjectiveInteractionDef;
struct BuildingBlocks_ComponentRadialRangeSlider;
struct SecurityClearanceTokenData_AND;
struct TQSWeightInputFloatValue;
struct Faction_LEGACY;
struct VehicleModelScanProcedureParams;
struct TriggerConditionDef;
struct SEntityComponentCorpseMarkerParams;
struct SCItemManufacturer;
struct LootingTabParams;
struct LegacyCrafterInteractions;
struct TachyonProjectileParams;
struct SMobiGlasSetUniqueShip;
struct ActorStatusScanProcedureParams;
struct MissionStringVariant;
struct UsableItemPort;
struct SWeaponActionFireRapidParams;
struct ContractResult_CalculatedReputation;
struct HandholdLinkComponentParams;
struct SGroupedLoadouts;
struct MedBedComponentParams;
struct ScanCustomDataInfo;
struct SInteractionPointParams;
struct BuildingBlocks_WidgetBase;
struct mobiGlasAppRef;
struct InteractionConditionCanAttachItem;
struct StatInfluence;
struct AudioBreathStyleSuite;
struct MissionLocationParams;
struct PortRefillData;
struct HarvestableProviderParams;
struct BuildingBlocks_ComponentRadioButton;
struct SPlayerLoadoutOverride;
struct SEntityEffectSystem_ParticlePropertyLink;
struct MissionBrokerEntry;
struct PersonalThoughtInventoryParams;
struct MotionGraph;
struct VoiceChatInputParams;
struct SEASimpodSpawning;
struct BuildingBlocks_TooltipPolicy;
struct ArmouryCertificationParams;
struct BuildingBlocks_WidgetSeparator;
struct SCuttableState;
struct SecurityNetworkVariableEffects;
struct BuildingBlocks_ComponentGeneralButtonLarge;
struct BuildingBlocks_WidgetTextEntry;
struct ScreenEffects_ParamStrengthBehavior_RangeFade;
struct SCItemInteractionGeometryMapParams;
struct SCSeatAccessEntranceInteractionStateParams;
struct PlanetOceanAudioData;
struct SLinkedInteractionStateTags;
struct SItemPortLoadoutRandomGeneratedParams;
struct LegacyCraftingOutput_ResourceAmount;
struct SVanduulInvaders;
struct TagsDNF;
struct VehicleEntranceMarkerProvider;
struct SecurityClearanceTokenData_Ownership;
struct MarkerTrackingViewMode;
struct CounterMeasureProjectileParams;
struct InteractionConditionEmptyItemPort;
struct CargoFillCapacityValue_Custom;
struct SecurityClearanceTokenData_NeutralZone;
struct SWeaponActionSequenceParams;
struct SItemPortContainerComponentParams;
struct TQSInputIntValue;
struct BuildingBlocks_WidgetClone;
struct SPerkParamsItem;
struct ZeroGTraversalState;
struct SMisfireEffect;
struct GeometryBaseHierarchicalData;
struct Behavior_CustomVehicleEffectsPreset;
struct SActorCarryConfigTagSwitch;
struct BuildingBlocks_BindingsNumberField;
struct MobiGlasMissionManagerSummaryUpdate;
struct ItemResourceComponentParams;
struct SSalvageScrapingParams;
struct SAtmosphericEffectsComponentParams;
struct FormationOffset;
struct SCItemSeatEjectParams;
struct BuildingBlocks_StyleSelectorConditionTag;
struct SQuantumDriveParams;
struct RefuelParams;
struct SMisfireCriticalItemStateCondition;
struct ControlFloatInteractiveVariable;
struct MissionItem;
struct SJumpTunnelSectionProbabilityParams;
struct SVehicleItemportInteractionLink;
struct BuildingBlocks_WidgetStrip;
struct ReputationRewardFaction;
struct StolenScanProcedureParams;
struct Commodity;
struct MissionInitParamTag;
struct BuildingBlocks_WidgetBadge;
struct SecurityNetworkRoomSettings;
struct SVendingMachineStateModifier;
struct SDashboardEngineInteractionParams;
struct SMusicValueTagMap;
struct SEntityEffectSystem_AudioEnvironmentCategory;
struct ControlHints_UsableLinkedInteractiveAction;
struct BuildingBlocks_BindingsRotationField;
struct StarMapObject;
struct QuantumTravelStates;
struct MissionPropertyValue_ShipSpawnDescriptions;
struct SSalvageStructuralParams;
struct SEntityInsuranceProperties;
struct SCItemClothingMeshChunkParams;
struct SPowerUserState;
struct SMusicValue;
struct SCItemShopRackParams;
struct InteractionConditionActorAbility;
struct ControlHintCondition_HintTrigger;
struct TransitNodeDialogueContext;
struct DependentMissionProperty;
struct MobiGlasMissionNote;
struct KeypadInteractionParams;
struct BuildingBlocks_WidgetEnvironmentProbe;
struct SEntityEffectSystem_Attachment;
struct StateTokenRequirements;
struct EntityComponentFrontendUIProviderParams;
struct DialogueContextEmbeddedEntry;
struct MobiGlasAppContent;
struct SDashboardQuantumInterdictionParams;
struct PlayerGroupMemberComponentParams;
struct EntityEffectSystem_MaterialTriggerEffect;
struct QuantumDriveAudioParams;
struct CommodityDamageConfiguration;
struct SHackableStateModifier;
struct HaulingOrder_Resource;
struct EntityComponentAttachableModifierParams;
struct SAISkillsComponentParams;
struct ObjectiveHandler_PlayerAttached;
struct InteractionConditionNAND;
struct TintPaletteRef;
struct SInteractionParams;
struct SItemPortDefAttachmentImplementationEntity;
struct HarvestableProviderPreset;
struct SEAPlayerLoadoutSnapshots;
struct SLightStateOverride;
struct SReputationJournalEntryHandlerParams;
struct SEAFPSGunGameWeaponSetup;
struct SItemPortLoadoutManualParams;
struct SHydraulicPumpableComponentParams;
struct MissionGiver;
struct SWeaponActionGrappleParams;
struct SEffectParamsNodeParticle;
struct SEntityEffectSystem_ParticleCategory;
struct ContactTypeScanProcedureParams;
struct SInteractableParams;
struct PointAlignmentSlot;
struct SpawnDescription_EntityOptions;
struct SResourceContainerStateModifier;
struct SRemoteRigidEntityControllerParams;
struct SQedVisualGraphParams;
struct JournalEntryDialogueLog;
struct SEntityComponentHostilityCompositeParams;
struct ShipRecallParams;
struct DataSetMatchCondition_SpecificItemsDef;
struct SecurityClearanceTokenData_OtherToken;
struct EntityEffectSystem_LightTagEffect;
struct InteractionConditionLootableNotBeingViewedByAnyOtherInventory;
struct CraftingCost_Resource;
struct SDashboardSystemInteractionParams;
struct TargetSelectorRootTargetingStates;
struct STriggerableDevicesTriggerAllAnyParams;
struct DigitalSignageContent;
struct SItemPortLoadoutRecordParams;
struct JournalEntryLawText;
struct UIWorldDisplayInputSoundParams;
struct TagList;
struct MobiGlasAfterActionReportRankRules;
struct EAPickupMissilesParams;
struct SInstancedInteriorGatewayParams;
struct SSCItemTargetSelectorComponentParams;
struct SEALoadoutItem;
struct SDetachItemGameplayTrigger;
struct GlobalJumpTunnelHostParams;
struct ObjectiveHandler_Local;
struct CommsTapScanProcedureParams;
struct SGlobalHealingBeamParams;
struct QuickAccessWheelAttachableSlotsDef;
struct SSetSecurityNetworkVariableTrigger;
struct ItemResourceControlBlock;
struct InventoryConfig;
struct SCItemClothingVisibilityConditionParams;
struct BuildingBlocks_BindingsTagFromStringSwitch;
struct ProceduralLayoutNode_AlternateElementProperties;
struct SWeaponActionFireSingleParams;
struct RadarContactGroupDefinition;
struct InteractionConditionPlayerAloneInVehicle;
struct UIGraph_DockingGroup;
struct CraftingResult_Resource;
struct S42PersonalStatusAppParams;
struct SEntitityEffectSystem_System;
struct SOutfitHangerGroup;
struct DefaultPlayerLoadoutEntitlementRecord;
struct UIWorldDisplaySoundParams;
struct PlayerUsableUseChannelInstance;
struct SCItemClothingPortVisibilityConditionParams;
struct SCSeatAccessPassageInteractionParams;
struct BindingsOperations_StringFromIntegerSwitchCanvas;
struct SFireMisfireEffect;
struct STriggerableDevicesBehaviorDetachParams;
struct MissionReward;
struct WeaponControllerCycleMissileStates;
struct MaelstromShatterBaseEvent;
struct UIGraph_SMLoadoutContextComponent;
struct MissionLocationTags;
struct ItemResourceRoomModifierParams;
struct SManufacturerMFDView;
struct SEntityEffectSystem_UIOwnerCategory;
struct MissionPropertyValue_Integer;
struct JournalEntryMinRequiredMissionsText;
struct SCharacterCustomizerFeatureItemEquip;
struct BuildingBlocks_DropTargetItem;
struct SDummyPlayerComponentParams;
struct SItemPortDefAttachmentImplementationBone;
struct SGasTankFillerStateModifier;
struct VehicleRoleScanProcedureParams;
struct BuildingBlocks_WidgetManufacturerLogo;
struct ActorStatusComponent;
struct LocationPinMarkerProvider;
struct InventoryScanProcedureParams;
struct BindingsOperations_AudioEvent;
struct SWeaponActionFireBurstParams;
struct SSalvageRepairGlowParams;
struct SCEntityDraggableParams;
struct SGlobalSalvageRepairBeamParams;
struct GameMode;
struct AITargetableComponentParams;
struct LicensedItemModifier;
struct ZeroGTraversalGraph;
struct EntityEffectSystem_LightCategory;
struct StateTypeStateTokenRequirements;
struct InteractionConditionPlayerVehicleNotDestroyed;
struct ProceduralLayoutNode_AlternateSubGraphProperties;
struct ArmouryData;
struct ThrusterAudioComponentParams;
struct TargetSelectorCycleTargetStates;
struct VehicleEditorGroupEquipData;
struct SecurityNetworkMemberComponentParams;
struct InteractableHelmetParams;
struct UICanvasDecalDescriptorEntityComponentParams;
struct TransportDestinationParams;
struct BuildingBlocks_ComponentCustomListItem;
struct RecordRefUserVariableTypeCanvasRecord;
struct PersonalThoughtInventoryGridParams;
struct GreenZoneComponentParams;
struct SWeightedRewardEntry;
struct SAttachableStateModifier;
struct ExtendedNameData;
struct PlayerChoiceMenuItems;
struct SMannequinHangerGroup;
struct SServiceBeaconDifficultyEntry;
struct TransitManagerParams;
struct SMegaMapSolarSystem;
struct NavigationLinkType;
struct AudioSplineParams;
struct FrontendS42Scenario;
struct IneractionConditionUserNotInUsable;
struct TriggerSubConditionS42StatsDef;
struct ScanCustomDataDef;
struct BuildingBlocks_IntegerWidgetPairDef;
struct CommunicationLocationAutoTags;
struct SNavPointObjectMetadataParams;
struct SCItemUIView_DashboardCanvasDef;
struct BaseMissionPropertyValueOption;
struct MapDisplayParamsStarMap;
struct SCItemSuitFuelParams;
struct ScanInformationTable;
struct SLawComponentParams;
struct SItemPortLoadoutOutfitTagParams;
struct SJurisdictionRoomExtensionParams;
struct SEALoadoutSet;
struct TransportGatewayParams;
struct SEntityInsuranceDisplayParams;
struct ContractGiverSettings;
struct SCriminalRecordHackingStateModifier;
struct SCharacterCustomizerFeatureTextureSelect;
struct SWeaponActionFireTractorBeamParams;
struct PersonalTransportParams;
struct MissionLocationValidation_EntityTags;
struct BuildingBlocks_TargetSlicer;
struct SCharacterCustomizerBodyTypeParams;
struct SSCShipStatusAppParams;
struct SCSeatConnectionParams;
struct PersonalThoughtLootingScreenParams;
struct InteractionConditionShippingBuild;
struct FactionReputation;
struct BuildingBlocks_ComponentRadioListItem;
struct ProceduralPlanetAudioTagAndEventsDef;
struct QuantumRefuelService;
struct Contract;
struct CommodityComponentParams;
struct EAPhaseBaseComponentDef;
struct SCItemDoorControllerParams;
struct TintPaletteTree;
struct ElectricalBehavior;
struct SCharacterCustomizerHeadLibraryParams;
struct AIWaveCollection;
struct LootGenerationSpecialEventArchetype;
struct SCharacterCustomizerVertexParams;
struct ItemResourceControlOutputChangeInteractionState;
struct SItemPortDefAttachmentImplementationStatObj;
struct MiningGlobalParams;
struct JournalEntryMissionProgressText;
struct MusicLogicSuite;
struct ContractGenerator;
struct SCItemThrusterParams;
struct BuildingBlocks_ComponentCheckboxButton;
struct InteractionConditionNOT;
struct SOrganizationRelationships;
struct SKioskInteractionStateModifier;
struct SCItemSeatDashboardParams;
struct AnimationNavigationLink;
struct SMFDViewList;
struct EAObjectiveControl;
struct DigitalSignageContentSet;
struct SEntityTraversingNodeTypeInteractionLink;
struct SpawnDescription_NPCOption;
struct SCItemControlTerminalParamsDef;
struct SMultiMissionCompleteRewardParams;
struct SCItemUIView_DashboardCanvasViewDef;
struct SKeypadStateModifier;
struct ItemResourceDeltaGeneration;
struct SecurityNetworkManifest;
struct SHealthInteractionLockParams;
struct ScreenEffects_Library;
struct SEntityTraversalNodeReferenceContext;
struct BuildingBlocks_ComponentToggleButton;
struct EAEntityEntitlement;
struct MusicLogicParameterMultiply;
struct SQuantumDriveEffectParams_LEGACY;
struct DynArray_MissionOrganization;
struct DynArray_SInteractionPointParams;
struct DynArray_Tag;
struct DynArray_UsableArchetype;
struct DynArray_LeanConnection;
struct DynArray_SEntityTraversingTargetPath;
struct DynArray_CommunicationEntry;
struct DynArray_CommunicationConfig;
struct DynArray_EnvironmentFeedbackAudioObject;
struct DynArray_VehicleEditorItemData;
struct DynArray_SWeaponParticleEffectParams;
struct DynArray_MissionLocationParams;
struct DynArray_InteractionConditionParams;
struct DynArray_SWeaponMountGrip;
struct DynArray_ItemCategory;
struct DynArray_mobiGlasAppRef;
struct DynArray_SItemPortDef;
struct DynArray_SCOptionalThrustParams;
struct DynArray_SModelVoiceTagPair;
struct DynArray_SEAFPSGunGameWeaponSetup;
struct DynArray_EntityEffectSystem_MaterialPropertyLink;
struct DynArray_SPowerUserState;
struct DynArray_TagList;
struct DynArray_ProceduralLayoutNode_AlternateSubGraphProperties;
struct DynArray_InteractionProhibitedItemParams;
struct DynArray_LeanState;
struct DynArray_EntityTemperatureResourceHeatGeneration;
struct DynArray_DependentMissionProperty;
struct DynArray_ScreenEffects_DebugEffect;
struct DynArray_TraversalCostConditionTags;
struct DynArray_SubHarvestableSlot;
struct DynArray_EVAConnection;
struct DynArray_SCInteractionEffectsMapEntryParams;
struct DynArray_SConditionalWeaponAction;
struct DynArray_EntitityEffectSystem_StaticFloat;
struct DynArray_EntitityEffectSystem_StaticColor;
struct DynArray_Investigation_Location;
struct DynArray_SCharacterCustomizerFeatureBase;
struct DynArray_AlignmentSlotBase;
struct DynArray_ProceduralLayout_TagFilter;
struct DynArray_ResourceLinkedInteractionState;
struct DynArray_FrontendS42Scenario;
struct DynArray_EntityClassDefinition;
struct DynArray_UsableAlignmentSlot;
struct DynArray_UsableUseSlot;
struct DynArray_SSequencerDefSequenceParams;
struct DynArray_SCarryableSequenceRef;
struct DynArray_MissionLogEntry;
struct DynArray_MissionPropertyValueOption_Float;
struct DynArray_BoidsGroupComposition;
struct DynArray_BoidState;
struct DynArray_LootArchetypeOrGroup_Secondary;
struct DynArray_SEntityEffectSystem_SoundPropertyLink;
struct DynArray_TagSearchTerm;
struct DynArray_mobiGlasDefaultAppEntry;
struct DynArray_InventoryLocation;
struct DynArray_LandingZoneInventoryRedirect;
struct DynArray_PlayerUsableInteractionPoint;
struct DynArray_PlayerUsableItemPort;
struct DynArray_SMisfireEffect;
struct DynArray_AudioGameContext;
struct DynArray_DeliveryTarget;
struct DynArray_MissionFailConditionParams;
struct DynArray_HarvestableElement;
struct DynArray_SpawnDescription_Ship;
struct DynArray_TintPalette;
struct DynArray_MotionConnection;
struct DynArray_SRangeStateLevel;
struct DynArray_AlignmentSlotExclusivityGroup;
struct DynArray_UsableSlottingSetup;
struct DynArray_Skill;
struct DynArray_SMovableGrip;
struct DynArray_SecurityClearanceToken;
struct DynArray_SubContract;
struct DynArray_SMisfireProbabilityParams;
struct DynArray_ResourceTypeGroup;
struct DynArray_ResourceType;
struct DynArray_SSharedInteractionParams;
struct DynArray_HarvestableElementModifier;
struct DynArray_BuildingBlocksLayer;
struct DynArray_SInteractionStateTransition;
struct DynArray_VisorLens_Widget;
struct DynArray_RadarContactTypeEntry;
struct DynArray_ItemResourceCompositionValue;
struct DynArray_MissionBrokerEntry;
struct DynArray_CargoResource;
struct DynArray_HarvestableGeometry;
struct DynArray_UserArrayElement;
struct DynArray_ScreenEffects_Param;
struct DynArray_TQSOption;
struct DynArray_ProceduralLayout_SupplementaryElementTagsOptions;
struct DynArray_FloatInteractiveVariable;
struct DynArray_ControlFloatInteractiveVariable;
struct DynArray_SCharacterCustomizerVertexParams;
struct DynArray_UsableChannelInputAction;
struct DynArray_BuildingBlocks_AspectRatioOption;
struct DynArray_ItemResourceCompositionMap;
struct DynArray_ItemRoomResourcePair;
struct DynArray_ScanProcedureParams;
struct DynArray_TriggerConditionDef;
struct DynArray_ChildMissionPhase;
struct DynArray_SEASpawnLocationVehicleSeatSlot;
struct DynArray_SCSeatAccessLinkedGatewayParams;
struct DynArray_SEntityEffectSystem_ParticlePropertyLink;
struct DynArray_RadarContactGroupEntry;
struct DynArray_EAFactionTeamParams;
struct DynArray_SPlayerLoadoutOverride;
struct DynArray_LoadoutKit;
struct DynArray_BuildingBlocks_IntegerWidgetPairDef;
struct DynArray_MusicLogicParameter;
struct DynArray_ArmouryItem;
struct DynArray_SWeightedRewardEntry;
struct DynArray_Investigation_ClueItem;
struct DynArray_EntityComponentEffects_Test_Tag;
struct DynArray_EntityComponentEffects_Test_Trigger;
struct DynArray_EntityComponentEffects_Test_Link;
struct DynArray_EntityComponentEffects_Test_ColorLink;
struct DynArray_ControlledSubstanceClass;
struct DynArray_SPVPBountyContractGenerators;
struct DynArray_TagTrigger;
struct DynArray_SEntityTraversingNodeBase;
struct DynArray_MissionObjective;
struct DynArray_TQSWeightInputValue;
struct DynArray_OrganizationRelationshipParams;
struct DynArray_BuildingBlocks_WidgetBase;
struct DynArray_CargoManifest;
struct DynArray_ScanCustomDataTagEntry;
struct DynArray_SVendingMachineItem;
struct DynArray_EntityEffectSystem_LightPropertyLink;
struct DynArray_UIAudioEvent;
struct DynArray_UIAudioParameter;
struct DynArray_SpawnDescription_NPCOption;
struct DynArray_SWeaponAttachmentIconPair;
struct DynArray_BuildingBlocks_IntegerTagPair;
struct DynArray_AudioOneShotManagerBudgetEntry;
struct DynArray_MissionModuleHierarchySubMission;
struct DynArray_SApplicationFormVoiceParams;
struct DynArray_ScanEvaluationInfractionSettings;
struct DynArray_SCInteractionJournalEntryParams;
struct DynArray_SCItemTurretStandardAngleLimitTagOverwriteParams;
struct DynArray_SLoadoutInventoryItem;
struct DynArray_InstancedInteriorLocationParams;
struct DynArray_RadarContactSubGroupEntry;
struct DynArray_ContractPropertyTagReplacement;
struct DynArray_mobiGlasApp;
struct DynArray_MissionPropertyValueOption_StringHash;
struct DynArray_MegaMap;
struct DynArray_AIWaveMember;
struct DynArray_Faction;
struct DynArray_MissionLocationTags;
struct DynArray_SHighlightBehaviorNode;
struct DynArray_SServiceBeaconDifficultyEntry;
struct DynArray_LootArchetypeEntry_Secondary;
struct DynArray_SReputationMissionGiverRewardBonusParams;
struct DynArray_AggregateStateParams;
struct DynArray_BoidTransition;
struct DynArray_MissionStringVariant;
struct DynArray_SpawnDescription_ShipOptions;
struct DynArray_SEAGlobalSpecialLoadout;
struct DynArray_S42ShipStatusAllowedShipParams;
struct DynArray_VehicleEditorPortsWithItemData;
struct DynArray_StatInfluence;
struct DynArray_WeightedLootArchetype;
struct DynArray_SEALoadoutSet;
struct DynArray_SEALoadoutCollection;
struct DynArray_CrewData;
struct DynArray_SkinInteractableTemplate;
struct DynArray_DebugLoadoutKit;
struct DynArray_SCharacterCustomizerDNARegionParams;
struct DynArray_SCharacterCustomizerBodyTypeParams;
struct DynArray_SCharacterCustomizerVoiceParams;
struct DynArray_SCharacterCustomizerLoadoutItemReplacementMapping;
struct DynArray_SCharacterCustomizerStep;
struct DynArray_SCustomizableMaterialParams;
struct DynArray_SDragDropUsableUserConfig;
struct DynArray_SInspectAnimationParams;
struct DynArray_CommunicationChannel;
struct DynArray_CommoditySubtype;
struct DynArray_ItemPortTagsElement;
struct DynArray_ResourceContainerDefaultCompositionEntry;
struct DynArray_SInteractionState;
struct DynArray_VehicleEditorAutoEquipData;
struct DynArray_VehicleEditorGroupEquipData;
struct DynArray_SEAFPSGunGameArmorLevel;
struct DynArray_SEAUISpawnScreenFPSEquipmentSlotParams;
struct DynArray_LootArchetypeEntry_Primary;
struct DynArray_FiringRangeWeaponItem;
struct DynArray_SOnInteractionStateChangeTriggers;
struct DynArray_SOnInteractionTriggers;
struct DynArray_UsableUseChannelInstance;
struct DynArray_BuildingBlocks_TagStringPair;
struct DynArray_TQSInput;
struct DynArray_TQSWeightInput;
struct DynArray_UIAudioManufacturer;
struct DynArray_ProceduralLayoutNode_AlternateElementProperties;
struct DynArray_SEAFPSGunGameWeaponLists;
struct DynArray_SEAFPSGunGameArmorSet;
struct DynArray_UsableItemPort;
struct DynArray_EVAState;
struct DynArray_SSecondaryAmmoContainerParams;
struct DynArray_SWeaponActionParams;
struct DynArray_SWeaponParticleEffectParamsArray;
struct DynArray_SItemPortDefaultItemDef;
struct DynArray_SMegaMapSolarSystem;
struct DynArray_Contract;
struct DynArray_SCSeatAccessGatewayInteractionParams;
struct DynArray_SCSeatAccessEntranceInteractionParams;
struct DynArray_SCSeatAccessPassageInteractionParams;
struct DynArray_SRemoteRigidEntityControlledEntitiesParams;
struct DynArray_MineableCompositionPart;
struct DynArray_ScreenEffects_DebugParam;
struct DynArray_TQSInputBoolValue;
struct DynArray_SLightStateOverride;
struct DynArray_ItemResourceGroup;
struct DynArray_AudioBreathStyleTransitionNode;
struct DynArray_OutfitParams;
struct DynArray_BuildingBlocks_TagIntegerPair;
struct DynArray_SPhysicalScreen;
struct DynArray_CargoResourceDistribution;
struct DynArray_Stat;
struct DynArray_SPrimeableAnimationState;
struct DynArray_StateTypeStateTokenRequirements;
struct DynArray_LocationMissionLimit;
struct DynArray_AutoSpawnSettings;
struct DynArray_NavigationLinkTagCost;
struct DynArray_EAObjectiveInteractionDef;
struct DynArray_MinRequiredMissions;
struct DynArray_TagToAudioRtpc;
struct DynArray_SCItemTurretCustomAngleLimitTagOverwriteParams;
struct DynArray_ItemResourceConversionPair;
struct DynArray_CareerContract;
struct DynArray_SMisfireLevelParams;
struct DynArray_SPerkShopItemCategoryBase;
struct DynArray_MobiGlasAfterActionReportRankRules;
struct DynArray_MobiGlasAfterActionReportStatsBlock;
struct DynArray_SCItemDisplayScreenStateParams;
struct DynArray_SItemPortDefHelperNode;
struct DynArray_SCraftingDictionaryEntry;
struct DynArray_PlacedSurfaceEffects_EmitterEntry;
struct DynArray_LegacyCrafterContainerPort;
struct DynArray_DialogueContext;
struct DynArray_ExtendedNameData;
struct DynArray_ContractTemplate;
struct DynArray_ContractResult_CompletionTag;
struct DynArray_PersonalThoughtInventorySingleFilter;
struct DynArray_SCharacterCustomizerHairLengthEntry;
struct DynArray_MobiGlasAfterActionReportStat;
struct DynArray_UseChannelArchetype;
struct DynArray_SLinkedInteractionStateTags;
struct DynArray_SEffectParamsNodeSound;
struct DynArray_TQSWeightInputTagValue;
struct DynArray_InteractionConditionPreset;
struct DynArray_SEAUISpawnScreenFPSEquipmentCategoryParams;
struct DynArray_DynamicMissionLocation;
struct DynArray_PlayerChoiceMenu;
struct DynArray_StarMapObjectType;
struct DynArray_StarMapObject;
struct DynArray_HealthDamageState;
struct DynArray_SHealthInteractionLockParams;
struct DynArray_SCItemClothingMeshChunkParams;
struct DynArray_SMaterialNodeParams;
struct DynArray_SSpawnEntity;
struct DynArray_SSimpodSimulation;
struct DynArray_SOutfitPlacingRule;
struct DynArray_SLootableItemPortRuleParams;
struct DynArray_SOutfitHangerGroup;
struct DynArray_MinCompletionTags;
struct DynArray_SCOptionalZeroGTraversalParams;
struct DynArray_TQSInputDynamicVariableValue;
struct DynArray_SGeometryNodeParams;
struct DynArray_ProceduralPlanetAudioTagAndRtpc;
struct DynArray_SInteractionStateType;
struct DynArray_ItemResourceState;
struct DynArray_SActorCarryConfigTagSwitch;
struct DynArray_MobiGlasAppContent;
struct DynArray_UnitTest;
struct DynArray_MissionRandomPhaseEntry;
struct DynArray_LootingTabParams;
struct DynArray_TransitNodeDialogueContext;
struct DynArray_TQSInputTagValue;
struct DynArray_SpawnDescription_NPC_Group;
struct DynArray_LogoutInteractionParams;
struct DynArray_SSequencerTurretSetMovementTagTaskParams;
struct DynArray_SSequencerTurretSetLimiterTagTaskParams;
struct DynArray_SCItemTurretMovementTagName;
struct DynArray_SCItemTurretMovementParams;
struct DynArray_CommunicationVariation;
struct DynArray_SpawnSettingsInventoryItem;
struct DynArray_SJumpTunnelSectionProbabilityParams;
struct DynArray_STriggerableDevicesTriggerParams;
struct DynArray_SEntityTraversingTarget;
struct DynArray_VisorLens_Region;
struct DynArray_BuildingBlocks_ColorPicker;
struct DynArray_SControlledEntityParams;
struct DynArray_SReputationAmountParams;
struct DynArray_EntityEffectSystem_MaterialTagEffect;
struct DynArray_EntityEffectSystem_MaterialTriggerEffect;
struct DynArray_CostModifierPerAgentType;
struct DynArray_TQSInputStringValue;
struct DynArray_SecurityClearanceTokenData;
struct DynArray_AudioEnvironmentFeedbackTagAndEvent;
struct DynArray_SMultiMissionCompleteReward;
struct DynArray_SEntityEffectSystem_SoundTagEffect;
struct DynArray_SEntityEffectSystem_SoundTriggerEffect;
struct DynArray_AudioEnvironmentFeedbackZoneProcess;
struct DynArray_SInverseInteractionLinkParams;
struct DynArray_SItemPortLoadoutEntryParams;
struct DynArray_GameMode;
struct DynArray_CommunicationLocationAutoTags;
struct DynArray_SGroupedLoadouts;
struct DynArray_STaggedSignaturesEntry;
struct DynArray_TQSWeightInputIntValue;
struct DynArray_SItemPortLoadoutOutfitTagParams;
struct DynArray_TQSWeightDynamicVariableValue;
struct DynArray_BuildingBlocks_NumberTagPair;
struct DynArray_TQSInputFloatValue;
struct DynArray_SMusicEventTagMap;
struct DynArray_SMusicValueTagMap;
struct DynArray_SMusicTagBehaviour;
struct DynArray_NotificationDef;
struct DynArray_LootGenerationSpecialEventArchetype;
struct DynArray_LicensedItemModifier;
struct DynArray_ObjectiveToken;
struct DynArray_FormationOffset;
struct DynArray_NavigationLinkType;
struct DynArray_SManufacturerMFDView;
struct DynArray_SpawnDescription_EntityGroup;
struct DynArray_BuildingBlocksView;
struct DynArray_PlayerUsableSlot;
struct DynArray_PlayerUsableUseChannelInstance;
struct DynArray_SpawnDescription_EntityOptions;
struct DynArray_ContractLegacy;
struct DynArray_MissionPropertyValueOption_Tags;
struct DynArray_InventoryDropDetachRules;
struct DynArray_UIGraph_Group;
struct DynArray_PortRefillData;
struct DynArray_SJumpTunnelSectionGenerationParams;
struct DynArray_VehicleEditorItemOffsets;
struct DynArray_SVehicleItemportInteractionLink;
struct DynArray_TQSWeightInputFloatValue;
struct DynArray_FactionRelationship;
struct DynArray_HandholdSharedInteractionLink;
struct DynArray_HandholdInteractionPointLink;
struct DynArray_SItemPortLoadoutBaseParams;
struct DynArray_CustomScanProcedureParams;
struct DynArray_SInteractionPointModifier;
struct DynArray_SInteractionParams;
struct DynArray_SReputationAmountListParams;
struct DynArray_PersonalThoughtInventoryItemOrientationOffset;
struct DynArray_MotionState;
struct DynArray_SCInteractionGeometryMapEntryParams;
struct DynArray_SLoadoutAssortment;
struct DynArray_TagsDNFTerm;
struct DynArray_CargoResourceAllocation;
struct DynArray_SWeaponSequenceEntryParams;
struct DynArray_SInternalResourceLink;
struct DynArray_TQSInputIntValue;
struct DynArray_BuildingBlocks_FieldModifierPair;
struct DynArray_ZeroGTraversalConnection;
struct DynArray_ItemResourceControlBlock;
struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect;
struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect;
struct DynArray_SpawnDescription_ShipGroup;
struct DynArray_SCItemClothingVisibilityConditionParams;
struct DynArray_SItemShopARItemPortParams;
struct DynArray_BaseMissionPropertyValueOption;
struct DynArray_HarvestableElementGroup;
struct DynArray_HarvestableAreaPreset;
struct DynArray_SEAPlayerLoadoutSnapshotEntry;
struct DynArray_SReputationJournalEntriesParams;
struct DynArray_SEffectParamsNodeParticle;
struct DynArray_SEntityEffectSystem_ParticleTagEffect;
struct DynArray_SEntityEffectSystem_ParticleTriggerEffect;
struct DynArray_SpawnDescription_Entity;
struct DynArray_SQedVisualGraphStateParams;
struct DynArray_MissionItem;
struct DynArray_AfterActionReportReputationImpact;
struct DynArray_SEALoadoutAttachment;
struct DynArray_SEALoadoutExplicit;
struct DynArray_InventoryInteractionBlockingAttachedEntities;
struct DynArray_SCItemClothingPortVisibilityConditionParams;
struct DynArray_BuildingBlocks_StringTagPair;
struct DynArray_SMobiGlasPersonalStatusWeaponItem;
struct DynArray_DefaultPlayerLoadoutEntitlementParams;
struct DynArray_UIWorldDisplayInputSoundParams;
struct DynArray_UsableChannelInputActionGroup;
struct DynArray_BindingsOperations_IntegerStringCanvasPair;
struct DynArray_SEntityEffectSystem_UIOwnerTagEffect;
struct DynArray_SEntityEffectSystem_UIOwnerTriggerEffect;
struct DynArray_MissionPropertyValueOption_Integer;
struct DynArray_Grip;
struct DynArray_GameModeValidMap;
struct DynArray_Formation;
struct DynArray_ZeroGTraversalState;
struct DynArray_EntityEffectSystem_LightTagEffect;
struct DynArray_EntityEffectSystem_LightTriggerEffect;
struct DynArray_StateTokenRequirements;
struct DynArray_ArmouryItemCategory;
struct DynArray_ArmouryCertificationParams;
struct DynArray_VehicleEditorGroupData;
struct DynArray_SecurityNetworkVariableEffects;
struct DynArray_InventoryContainerParams;
struct DynArray_ExtendedNameEntry;
struct DynArray_PlayerChoiceMenuItem;
struct DynArray_SCItemUIView_DashboardCanvasViewDef;
struct DynArray_MarkerTrackingViewMode;
struct DynArray_ScanInformationDef;
struct DynArray_SEALoadoutItem;
struct DynArray_SCharacterCustomizerRandomizationOverrideParams;
struct DynArray_FactionReputation;
struct DynArray_ProceduralPlanetAudioTagAndEvent;
struct DynArray_AIWave;
struct DynArray_ContractGeneratorHandlerBase;
struct DynArray_ThrusterGimbalState;
struct DynArray_SMFDView;
struct DynArray_DigitalSignageContent;
struct DynArray_BuildingBlocks_Canvas;
struct DynArray_SecurityNetworkProtocolOverride;
struct DynArray_SecurityNetworkVariable;
struct DynArray_SHostilityRules;
struct DynArray_ScreenEffects_Effect;
struct StatusPriorityActorStatus;
struct AISeatQuantumDriveControllerComponentParams;
struct LinkedStatPassIncreaseToValue;
struct SCItemControlBaseParams;
struct EntityComponentCommsChannelParams;
struct CraftingResult_Base;
struct SSCActorProceduralRecoilComponentParams;
struct SIVictoryConditionsModule;
struct BuildingBlocks_TRBL;
struct SSequencerBespokeTakeCarryableTaskParams;
struct CinematicTriggerMPOptions;
struct SAtmosphericCompositionInheritPlanet;
struct LedgeTransitionParams;
struct MoveViewRestrictionWeighting;
struct DesignerNavigationVolumeParams;
struct CommsAudioEffect;
struct BuildingBlocks_BindingsPathStructure;
struct SCItemRadarPingProperties;
struct SRaceCheckpointObjectMetadataParams;
struct SMisfireSeverityFactors;
struct SCItemControllableSimpleParams;
struct SShieldAbsorption;
struct SSequencerBespokePlaceCarryableTaskParams;
struct CustomFloat;
struct S42Commendation;
struct BasePortRefillData;
struct SEntityTraversingNodeId;
struct GlobalResourceMaterial;
struct CameraDOFFocusDistanceConfig;
struct SetCloneLocationMedicalTier;
struct TriggerSubConditionInnerThoughtOptionDef;
struct SDoorCollisionReactionRetractParams;
struct SActorHitReactionsDef;
struct CommodityCrateComponentParams;
struct SApplicationFormHead;
struct SetPowerSourceStateEvent;
struct SAnalyticShadowComponentParams;
struct StarMapAssetManagerLocationParams;
struct BuildingBlocks_BindingsPathBase;
struct BuffDurationBase;
struct SMFDOperatorModeConfig;
struct StanceBreathModifier;
struct HarvestConditionInteraction;
struct AudioRayOcclusionParams;
struct WalkToAlignParams;
struct SGlobalHitBehaviorParams;
struct ActorLookAheadTargetTracking;
struct VehicleEditorCapability;
struct RentalNotificationParams;
struct FireHazardFireProperties;
struct ControlHints_KeyInput;
struct VehicleHUDMessagingParams;
struct SSCSignatureSystemAudioSubRule;
struct SEffectParamsNodeBase;
struct SAnimatedOutfitSwapData;
struct PlacementValidatorMines;
struct BuildingBlocks_FieldModifierEnumeratedTypeSliderMode;
struct SSequencerSkeletonAnimationTaskParams;
struct SActorForceReactionStumbleConfigDef;
struct ActorTurnAngles;
struct FacialTrackingParams;
struct SActorForceReactionBlockADSConfig;
struct MovementSpeedOverride;
struct AIGroupEntityParams;
struct ActorStateSkeletonFilter;
struct SNPCObjectMetadataParams;
struct GlobalResourceTextureDDS;
struct SAtmosphericEffectTestsParams;
struct SActorForceReactionAnimationTwitchConfig;
struct SCDynamicRigLightEnabledParams;
struct StatusPriorityStamina;
struct SHackingEntitySpawnParams;
struct SSelfHintActivator;
struct ItemResourceControlConditionBase;
struct BuildingBlocks_TimingFunctionBase;
struct ControlHintCondition_OptInEventState;
struct BuildingBlocks_TriggerDirectHyperLink;
struct SPartyMemberMarkerObjectMetadataParams;
struct BuildingBlocks_TimingFunctionPreset;
struct SCharacterCustomizerWildlineSubconditionFeature;
struct SZoneHostEntityHighlightNode;
struct BuildingBlocks_FieldModifierInteger;
struct ScreenEffects_Pattern_Linear;
struct UIGraph_FlashDockingStationComponent;
struct ItemPortViewInformationByItemType;
struct SEntityComponentManagedEntityZoneParams;
struct SPowerPlantMisfireParams;
struct AtmosphereStateBase;
struct SCSeatItemPort;
struct SCProneMotionGraphDef;
struct BoolUserVariableTask;
struct TriggeredHealth;
struct BuildingBlocks_RadialTransform;
struct SDespawnRule_OnStreamOut;
struct VehicleSerialNumberCharacterType;
struct SCharacterCustomizerBlemishMapParams;
struct Marker_AbilityNavpoint;
struct ResourceNetworkParams;
struct GasCloudOverrideCubeVolumeParams;
struct GlobalJumpDriveTuningEffectParams;
struct LightGroupParams;
struct HarvestableTagListBase;
struct DissolveParams;
struct ShipRecallBannedAreaParams;
struct SEntityComponentTrackViewParams;
struct BuildingBlocks_TextFormatModifierBase;
struct RadiationBehavior_AsteroidInverseSquareSurfaceRadiationParams;
struct SItemPortDefExtensionFPS;
struct UIGraph_MarkerARProviderComponent;
struct SimpleRotationComponentOscillation;
struct PlayerGroupManagerObjectsLocStringParams;
struct CockpitRuleFloat;
struct EntityComponentDockingHubParams;
struct SEntityLinkedContext;
struct SCItemCoolerParams;
struct SEntityComponentUpdateProxyParams;
struct SArmouryItemFilter;
struct UIGraph_MissionDockComponent;
struct MagLaunchNoiseParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeTextFieldWidgetStylePreset;
struct PurchasableDisplayBase;
struct EASpawnNotifierParams;
struct LedgeShapeComponentParams;
struct BuildingBlocks_BindingsNumberComponentParameter;
struct SimpleSpriteSheet;
struct SPlayerCameraTypeAllowedParams;
struct ScanCustomData;
struct MapDisplayParamsGalacticMap;
struct AccessibilityExteriorZoneParams;
struct SWeaponActionAIParams;
struct GameModeFilter;
struct SMissileEntryTrackerParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeSegmentEasing;
struct BuildingBlocks_ColorStyle;
struct SCItemControlPriorityNoControlValue;
struct CraftingGameplayPropertyImpl_Base;
struct ActionAreaExtensionType;
struct StatusSweatingParams;
struct LightMiscParams;
struct AnnouncementGameToken;
struct VisibilityConditionDef;
struct QuantumColorShiftParams;
struct LocalPlayerMusicParams;
struct PlayerTradeNotification;
struct LightFlickerWaveSphereParams;
struct SEntityLinkHighlightNode;
struct ControlHintCondition_ActorLocomotionSet;
struct SBaseLevelStats;
struct TriggerSubConditionInterruptTimerDef;
struct AIDynamicCoverSurfaceComponentParams;
struct SMissionEntityParams;
struct IncapacitatedPlayerMarkerParams;
struct PlanetEffectLODDistance;
struct SMicroResourceUnit;
struct EMPoolParams;
struct SSequencerTurretResumeControlTaskParams;
struct SpawnHelperComponentParams;
struct STeamChannel;
struct BoolUserVariableSetValueTask;
struct SStopFillingGasTankGameplayTrigger;
struct EntityComponentHealth_SBaseSequencerTask;
struct BuffValueOverride;
struct SLoadoutRequirementBase;
struct ControlHintCondition_VehicleHealthState;
struct RestrictedAreaPatchTypes;
struct PlayerChoice_MarkerNearestFace;
struct SRadiationEmitterGameplayTrigger;
struct MarkerTrackingActionParameters;
struct EntityComponentHealth_SApplyDamageMapTask;
struct ControlHintCondition_VehiclePinnedTarget;
struct GlobalResourceTexture;
struct AerodynamicTrailCalculation;
struct BuildingBlocks_BindingsStringBase;
struct ControlHintCondition_VehicleQuantumTravel;
struct SPerkParamsBase;
struct GoToPointComponentParams;
struct EntityComponentRttAspectFocusVehicleParams;
struct SCIGTestAA;
struct DefaultActionsEntityEntryCondition_Customisable;
struct MusicLogicEvent;
struct SActorDefaultDeathBehaviour;
struct BuildingBlocks_ComponentParameterInputBoolean;
struct BuildingBlocks_BindingsBooleanBase;
struct MissionVariableBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeDraggablePolicy;
struct EntityEffectSystem_LightType_PointLight;
struct DamageMapExplosionParams;
struct ContextMenuOption;
struct HoldExhaleDuration;
struct SStrengthXPGains;
struct SCharacterCustomizerRegionParams;
struct SMissionStagingAreaComponentParams;
struct ItemPortViewInformation;
struct SCItemNavigationParams;
struct GlobalResourceCAF;
struct SActorProceduralAnimationComponentParams;
struct MissionPropertyValue_Boolean;
struct InteriorMapWorldUICursorPointParams;
struct SActorForceReactionsProceduralLeanOverride;
struct CraftingRecipeResults_Base;
struct StatusPriorityStatType;
struct VibrationTypeData;
struct TransitNavSplineDataParams;
struct DefaultActionsEntityState_EntityIsAttachedToOtherActor;
struct CtxGraph_Node;
struct ControlHintCondition_VehicleAvailableOperatorMode;
struct SCDashboardConnectionParams;
struct StatusPriorityFloat;
struct OnFootWeaponRangeCategoryScore;
struct JournalEntryAudioLog;
struct MissionCompletePerkBaseDef;
struct ReadySystemParams;
struct SLandingCommunicationParams;
struct JumpDriveOpeningParams;
struct SPowerSegmentResourceUnit;
struct SQedVisualGraphTransitionTypeParams;
struct SQuantumServiceBeaconQTPointParams;
struct MissionVariableBoolean;
struct BuildingBlocks_TriggerModifyInt;
struct SSpreadParams;
struct AreaAlignmentSlotTypeParams;
struct ControlHintCondition_VehicleLandingGearState;
struct BuildingBlocks_ComponentLabelProperties;
struct BaseMissionModifier;
struct BuildingBlocks_FlashRendererPolicy;
struct PersonalThoughtHologramAnimationParams;
struct EntityComponentRefineryUIProviderParams;
struct SelectionTab;
struct SJournalComponentParams;
struct Marker_AbilityAboveBelowIndicator;
struct ElectricalStateTemplateInternal;
struct DownedConfig;
struct SCItemControlPriorityExclusiveValue;
struct SCLoadingPlatformEntityReferences;
struct SVectorFieldParams;
struct PlayerChoiceMenuOption;
struct DisplayState;
struct BuildingBlocks_Node;
struct ExtinguishType_Base;
struct DrugEfficacy;
struct ControlHints_HintDisplayInfo;
struct EntityEffectSystem_LightType;
struct LadderLookAroundParams;
struct SMissionLocationComponentParams;
struct SkylineComponentParams;
struct AILookComponentParams;
struct MissionLocationValidation;
struct ControlHintCondition_VehicleMiningLaserMode;
struct SInteractionStateDef;
struct SActorLocomotionFeatureDef_Slope;
struct PersonalThoughtInventoryFilter;
struct FixedSizedCircleTraversalCostShapeConfig;
struct SCSeatActorAttachmentParams;
struct PatrolPointComponentParams;
struct HierarchicalContextualData;
struct SDespawnRule_OnFallBelow;
struct SWetnessAccumulatorParams;
struct BuildingBlocks_ColorBase;
struct VolumeShape_Sphere;
struct BuildingBlocks_BindingsListIndex;
struct BuildingBlocks_PreviewSceneAugmentedRealityRtt;
struct BuildingBlocks_BindingsNumberBuiltInVariable;
struct SCIGTestB;
struct SEntityDynamicLocationProperties;
struct SModHealth;
struct SCSeatAccessInteractionConditionParams;
struct MissionScenarioCyclePhase;
struct SNonTeamHostility;
struct AnimationComponentParams;
struct UIGraph_BindingsArrayDockComponent;
struct Ang3;
struct SLocalPlayerHapticParams;
struct LinkedStatRulePassAlways;
struct CraftingRecipeCosts_Base;
struct HintMarkerParams;
struct CommonTargetVisibilityScore;
struct SCItemInputAutoAimParams;
struct SServiceBeaconNotificationOverride;
struct ServiceBeaconInterfaceParams;
struct AIMeleeAttack;
struct VendingMachineItemParams;
struct SCDynamicRigIntensityParams;
struct BodyPart;
struct MissionPropertyValue_DeliveryOrder;
struct BuildingBlocks_FieldModifierEnumeratedTypeDropTargetPolicy;
struct TriggeredWarningClear;
struct AudioBreathStyleBaseNode;
struct STurretGlobalParams;
struct SphereAreaAlignmentSlotTypeParams;
struct AtmosphereBehavior_TurbulenceParams;
struct UIWorldDisplayRotationModeParams;
struct SSpecializedDataEntry;
struct AlignmentSlotAreaHelperComponentParams;
struct AudioSwitch;
struct LinkedStatRulePassAlwaysPositive;
struct UnitTest_ClassB;
struct ItemTypeModifier;
struct SuggestedFOVSetup;
struct ItemPortViewInformationByName;
struct DamageResistanceEntry;
struct LightBoxComponentParams;
struct ControlHintCondition_ActorAimStanceState;
struct AttentionTargetComponentParams;
struct TimeValue_Base;
struct AISpecialRangedAttackConfig;
struct Vec2;
struct RestrictedAreaAutopilotParams;
struct SEntityContextBase;
struct SEntityBuoyancyParams;
struct LightStateParams_Off;
struct SBBDynamicPropertyBool;
struct SignatureTypeGlobalParams;
struct BuildingBlocks_BindingsLocalizedComponentParameter;
struct CraftingResearch_Base_NonRef;
struct LegacyCraftingRecipe_Base;
struct Marker_AbilityDistanceVisibility;
struct ConstantDOFGrid;
struct SRemoteRigidEntityControllerOneHandedParams;
struct LadderJumpParams;
struct SDebrisEntryTrackerParams;
struct SItemPortDefExtensionBase;
struct SCLoadingPlatformLightGroupParams;
struct FireHazardAfterglowProperties;
struct ControlHintCondition_VehicleSystems;
struct SWeaponConditionBase;
struct GameRulesStateBaseParams;
struct ItemResourceConversionModifierBase;
struct SCloseKioskInteractionGameplayTrigger;
struct SQuantumDriveEffectBaseParams;
struct SWeaponActionFireTractorBeamVehicleBased;
struct PersonalThoughtInventoryActionsParams;
struct LightStateParams;
struct ElectricalState;
struct SINotificationsModule;
struct ApplyStatusBuff;
struct FPSReticle_Config;
struct BuildingBlocks_BindingsStringComponentParameter;
struct ScanCustomValue;
struct CinematicConversationSettings;
struct ControlHints_Input;
struct ControlHintCondition_ActorHeldItemInteractionState;
struct Burst;
struct CollisionMFXEntityParams;
struct ControlHintCondition_VehicleMasterMode;
struct DialogueContextEntry;
struct InnerThought_CycleAnimRotateZ;
struct SSequencerInteractionTask;
struct SInteractionLinkHighlightNode;
struct ScreenEffects_ParamValue_Float;
struct ClothingTypeHeadWear;
struct AtmosphereStateHumidityTemplate;
struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeJointStyle;
struct ControlHintCondition_ActorSkeleton;
struct SecurityNetworkPermissions;
struct EAUIMulticrewTypeOptionParams;
struct BasicStatusEffectApplicationType;
struct SWeaponAmmoRepoolParams;
struct AreaEllipsoidComponentParams;
struct UIGraph_ArenaCommanderVehicleLoadoutEditorContextComponent;
struct InteriorMapSectionDefinition;
struct ControlHintCondition_ActorHeldItemType;
struct SThrusterMisfireParams;
struct EntityComponentRttAspectMFDShieldsParams;
struct TriggerSubConditionInteractionStateDef;
struct NavSplineAnchorPointComponentParams;
struct StatusMaskedRetriggerSetupBase;
struct AudioGroupComponentParams;
struct ItemFuelControllerParams;
struct SEntityDensityClassOverwritesBase;
struct VehicleRole;
struct BindingsOperations_WaveformShapeSquare;
struct AIActorLocomotionParams;
struct SViewDistanceRatioParams;
struct LinkedStatBase;
struct LightFlickerWaveLinearParams;
struct SHackingThreatLevelConditionNodeSwapped;
struct CameraBlendConfig;
struct SInteractableEntryTrackerParams;
struct MissionInitParamActivity;
struct HarvestableClusterParams;
struct ControlHintAlwaysDisplayCondition;
struct BuildingBlocks_StyleSelectorConditionType;
struct LightFadeParams;
struct PersonalThoughtFavoriteSlot;
struct PersonalThoughtInventoryMissionFilter;
struct BuildingBlocks_TriggerModifyBool;
struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitCaseModifier;
struct SReputationStandingParams;
struct CodeDrivenChatProviderSettings;
struct AtmosphereStateTemperatureTemplate;
struct SCPlayerPUSpawningComponentParams;
struct ModifierInterpolator;
struct EAWinOrLossAwardParams;
struct RadarDeltaSignatureNotificationParams;
struct ItemAwardBase;
struct SRenderToTextureViewBaseParams;
struct BoidsCylindricalLimiterRule;
struct ObjectiveRewardContribution_PercentOfMission;
struct VendingMachineShopParams;
struct RestrictedAreaHandlerParams;
struct SInteractionPointEntryTrackerParams;
struct SShieldStunParams;
struct JumpTunnelCameraEffectParam;
struct PatrolGraphLinkComponentParams;
struct BuildingBlocks_StaticVariableBoolean;
struct BlockedCursorParams;
struct CommunicationName;
struct ExponentialDamage;
struct SCLocalPlayerSocialConnectionComponentParams;
struct BuildingBlocks_BindingsIntegerBuiltInVariable;
struct SFrontendGameModeButton;
struct SCItemCoolerControllerParams;
struct ForceFeedbackEnvelope;
struct CommunicationVariableBase;
struct SHazardAreaShapeParams;
struct S42CommendationRequirementBase;
struct FlightHUDUIMessage;
struct SEntityComponentAttachmentClusterParams;
struct BreathingHelperComponentParams;
struct BuildingBlocks_StaticVariableString;
struct ControlHintCondition_ActorStatusType;
struct BuildingBlocks_TransformerBase;
struct BoidsOceanSurfaceRepelRule;
struct BuildingBlocks_BindingsOperationBase;
struct SObjectMetadataParams;
struct UIElementSoundEntry;
struct SITeamsModule;
struct SICamerasModule;
struct ActorFootJointPairDef;
struct BuildingBlocks_VirtualCursorPolicy;
struct BuildingBlocks_ScrollPolicyBase;
struct BuildingBlocks_Overflow;
struct SCItemSeatHeadTrackingPositionLimitParams;
struct CraftingGameplayPropertyImpl_Base_Float;
struct SMovableLimits;
struct SEAUIMessageComponentParams;
struct SIntNumberComparer;
struct ObjectiveDisplayInfo;
struct InventoryContainerGridCellSizeBase;
struct DynamicInstancePropertiesParams;
struct SCharacterCustomizerItemRandomizationParams;
struct EntityComponentSpawnClosetAreaParams;
struct SDespawnRule;
struct BuildingBlocks_PreviewScreenWorldOrigin;
struct ObjectiveHandlerBase;
struct DirectRTT_PixelGridParams;
struct BuildingBlocks_TriggerSubsumptionBroadcast;
struct SFlowGraphProxyParams;
struct InteriorMapWorldUIFocusPointPlanarGridParams;
struct SecurityLoginInput;
struct ItemResourceDynamicAmountThrusterFuel;
struct ThrowParams;
struct CockpitRuleString;
struct ItemResourceNetworkDefaultPowerDistributionParams;
struct DegradationTemperatureMultiplier;
struct SEntityTraversingNodeExecuteLinkAllTaggedInteractions;
struct ForceFeedbackPattern;
struct Aiming;
struct VoiceSingle;
struct AudioValueOutputBehaviourMicrophone;
struct ProjectileProximityTriggerParams;
struct DragCurveParams;
struct ActorFrostedVisorParams;
struct SMissileLauncher;
struct ActorStateData_LadderValidationParams;
struct EntityComponentFireArea;
struct SActorPhysicsCollisionParams;
struct ScannableComponentParams;
struct SJumpPointAccessParams;
struct SJumpTunnelHostParams;
struct FireVoxelSelectionShape_Sphere;
struct EAPlayableAreaMovementTypeParamsDef;
struct BuildingBlocks_StaticArrayDataBase;
struct SCItemDoorUserAnimationParams;
struct AIDebugDrawComponentParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderTopLeftRadiusBehavior;
struct EnvironmentLightFadeParams;
struct SCItemCapacitorAssignmentControllerParams;
struct UserRTPC;
struct UnitTestSubRecord;
struct HudColor_HoloMatTextures;
struct ContractClass_PVPBounty;
struct QuickAccessWheelAutoWingmanCommandsDef;
struct DefaultAction_CarryableInteractionDef;
struct S42StatOperationBase;
struct PlayerGroupManagerLocStringParams;
struct PatrolGraphComponentParams;
struct SSequencerActorActionHandlerTask;
struct SUsableIdlePoseOverride;
struct SEntityComponentPartyMarkerParams;
struct SDecayCurveMaxValueParams;
struct BuildingBlocks_FieldModifierRecordRefTypeBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeDepthBehavior;
struct SParentEntityHighlightNode;
struct BuildingBlocks_FieldModifierEnumeratedTypeProgressMeterState;
struct BuildingBlocks_FieldModifierEnumeratedTypeTickBoxMode;
struct BuildingBlocks_FieldModifierEnumeratedTypeFillStyle;
struct ExtraLegalBounds;
struct RadarQuantumOverrideParams;
struct SEASpawnRespawnIndividualSchedulerParams;
struct GlobalJumpPointClosingParams;
struct SShopUIProviderCategoryIcon;
struct CIGAudioParams;
struct SpawningManagerNotifierComponentParams;
struct UIGraph_LauncherScreenComponent;
struct UIStateDisplay_Threshold;
struct SAtmosphericCompositionBaseParams;
struct EmotionDescription;
struct StatusBuffTypeBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexDirection;
struct Marker_AbilityIncapacitatedActor;
struct SCItemPriorityTagParam;
struct GasCloudVDBGamePlayParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeContentBoxPosition;
struct SBBDynamicPropertyBase;
struct FiringRangePenaltyDef;
struct SEntityTraversingNodeExecuteLinkUIVendor;
struct HazardAwarenessParams;
struct ItemCarryParams;
struct SUniqueEntityClass;
struct EntityComponentCommLinkProviderParams;
struct SLayerEntitiesGroupManager;
struct SEntityComponentConstraintPartnerComponentParams;
struct SVehicleObjectMetadataParams;
struct SCBoostScaleParam;
struct GlobalResourceParticle;
struct CommunicationVariableBool;
struct SMissionBrokerInterfaceComponentParams;
struct SHudTapeParams;
struct SReputationMissionRequirementExpression_Or;
struct GroupEntityParams;
struct MedBedProviderParams;
struct BuildingBlocks_StyleSelectorConditionBase;
struct SDespawnRule_OnDestroyed;
struct ActorStatusStatModifier;
struct ExtendedNameEntryTextRandomizedLocalizedSequence;
struct LinkedStatRuleHasCrossedBelowThreshold;
struct BuildingBlocks_FieldModifierBase;
struct MedBedSurgeryNamesInjurySeverity;
struct SHandsRecoilCurveNoiseModifer;
struct SMisfireDamageRatio;
struct MobiGlasAuthorizationEntry;
struct EVAReticle_Config;
struct SActorForceReactionAnimationFlinchConfig;
struct TestAtomics;
struct ControlHintCondition_MobiglasMapState;
struct DefaultActionsEntityState_CanAttachToHeldWeapon;
struct CommunicationAudioRTPC;
struct ItemResourceControlParameterBase;
struct EATransportBaseTransitionParams;
struct DefaultActionsEntityEntryCondition_EntityTypes;
struct ScanWaveDetectionParams;
struct FoleySuitAmbienceDefinition;
struct SLayerEntitiesGroupComponentParams;
struct SCentiResourceUnit;
struct GameModule;
struct SSCSignatureSystemAudioOffset;
struct SRadarSenseComponentParams;
struct ContractDifficultyProfile;
struct ControlInteractiveVariable;
struct SCItemControlCondition_Tag;
struct ScreenEffects_ParamValue_Vec4Base;
struct StarMapAmenityTypeEntry;
struct ControlHintCondition_VehicleEnvironment;
struct LightningTargetMode;
struct SDoorCollisionReactionNoneParams;
struct SRootEntityHighlightNode;
struct SLandingAreaObjectMetadataParams;
struct RelationMarkerParams;
struct DefaultActionsEntityState_InTakedownRange;
struct PlanetDayNightTemperatureParams;
struct UIGraph_MouseControlComponent;
struct BuildingBlocks_FieldModifierEnumeratedTypeSegmentProgressBehavior;
struct QueueingBehaviour;
struct PlayerInteractionParams;
struct ExtendedNameEntryTextRaw;
struct CraftingResearchUnlock;
struct BuildingBlocks_TimelineTypeBase;
struct SBBDynamicPropertyString;
struct VisibilityConditionDef_EntryFlag;
struct UIEntityServiceEntityComponentParams;
struct InteriorMapWorldUIZoneHostPlanarGridParams;
struct PlayerECGGraph_Config;
struct SecurityNotifications;
struct BuildingBlocks_UnidirectionalScroller;
struct SAddHealthValue;
struct WorldDisplayEnvironmentColor;
struct LegacyCraftingCost_Base;
struct JumpThrusterPackConfig;
struct ControlHintCondition_ActorLadderState;
struct S42FieldManualCategory;
struct SWeaponProceduralBodyRecoilConfigDef;
struct EnvironmentLightGroupParams;
struct SSetInteractionStateOnParentItemportGameplayTrigger;
struct UIGraph_ChatComponent;
struct TriggerSubConditionNumberOfInterruptsDef;
struct SSequencerUsableAssignLoadoutTask;
struct AmmoPenetrationParams;
struct FireRepairerType_Raycast;
struct DefaultActionsEntityEntryCondition_AttachableItems;
struct DefaultActionsEntityState_CarryableState;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexCrossAxisJustification;
struct NavSplineComponentParams;
struct SActorAnimationComponentParams;
struct AreaSphereComponentParams;
struct QuadGeometryEntityComponentParams;
struct SLegacyShieldGeneratorMisfireParams;
struct CraftingBlueprint_Base;
struct BoidsBehaviorRule;
struct AttachableStateModifierContext_Immediate_Parent;
struct SGameCollisionClass;
struct SMisfireStatCondition;
struct SActorForceReactionsVehicleForceDampeningDef;
struct ControlHintCondition_ActorToolState;
struct MobiGlasEffectParams;
struct ItemDashboardScreenMFDParams;
struct GlobalJumpTunnelProbeParams;
struct WeaponPortsParams;
struct RParticleFieldNodeDebugParams;
struct STrackviewInterruptComponentParams;
struct ItemResourceDynamicCompositionBase;
struct BuildingBlocks_WidgetLightSetting;
struct TacticPlayerDistance;
struct SAccumulatorParams;
struct WeaponProceduralClipBase;
struct SSequencerUsableDelinkTask;
struct ProjectileSpawnerParams;
struct AtmosphericFlightDataParams;
struct MiningShopProviderEntityComponentParams;
struct LiteralStringUserVariable;
struct SSequencerFirstSelectCarryableTaskParams;
struct JumpDriveApproachRingsParams;
struct MusicLogicTrigger;
struct SGeomCacheEntityComponentParams;
struct SLandingAreaEntryTrackerParams;
struct LightFlareParams;
struct InteractiveVariable_BackToDefaultParams;
struct SIDifficultyModule;
struct DamageMapChannels;
struct AngYPR;
struct ProcBreathingHoldBreathNoise;
struct CustomMaterialEntryParams;
struct TriggerSubConditionFocusDef;
struct STemperatureReadOutParams;
struct EntityClusterId;
struct SActivityThresholds;
struct SAnimatedCharacterComponentParams;
struct RaSTaRLibraryElement;
struct CounterMeasureBaseParams;
struct MissionFlowActionBase;
struct SAutoLoadingBoxSizeLoadingTime;
struct VehicleEditorStat;
struct LinkedStatRuleBase;
struct SStopHackingGameplayTrigger;
struct ReverseTrailsSetting;
struct GlobalEnvironmentEffectSettings;
struct SCMountRotationAxisParams;
struct EnvironmentLightStateParams;
struct SBlobContactEntryTrackerParams;
struct VideoComms;
struct SSquadChannel;
struct ShipInsuranceEntityComponentParams;
struct DeliveryItemPortComponentParams;
struct FixedFloat;
struct SEntityDensityClassOverwrites;
struct SInternalHardpointLink;
struct SAuxiliaryWeaponActionParams;
struct DialogueExternalSource;
struct EAScenarioComponentParams;
struct BuildingBlocks_FlexItem;
struct Vec4;
struct RttPreviewManagerEntityComponentParams;
struct QuantumDriveSplineFXNode;
struct EntityComponentRttAspectMFDSelfStatusParams;
struct WeaponAIAimingMethod;
struct BaseDataSetMatchCondition;
struct PlayerNotificationBannerOptionsParams;
struct BuildingBlocks_BindingsColorBase;
struct SStateModifier;
struct SecurityNetworkVariableValue_Base;
struct AnimationGraph_Timer;
struct SecurityNetworkVariableValue_Bool;
struct SSCActorRotationComponentParams;
struct SCharacterCustomizerBaseMaterialSet;
struct SCItemSeatDashboardScreenStyle;
struct MissionFlowAction_StateChange;
struct ControlHintCondition_VehicleState;
struct MonitoredZoneParams;
struct SCharacterCustomizerWildlineSubconditionBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeBase;
struct HarvestConditionDamageMap;
struct SItemPortDefAttachmentImplementationLogical;
struct TriggerSubConditionUsableDef;
struct AudioAreaEntityComponentParams;
struct CraftingGameplayPropertyImpl_Base_Int;
struct SCIGTestC;
struct PlayerFormationParams;
struct TriggerSubConditionDef;
struct SHackingAbilitySlowdownParams;
struct SARTrailParams;
struct HolographicVolumeSphereParams;
struct SElevatorBaseCollisionParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeCapStyle;
struct BuildingBlocks_SpacerContainer;
struct SCLoadingPlatformTrackviewParams;
struct SJumpPointATCParams;
struct SpeedThrottleConfiguration;
struct BuildingBlocks_BindingsVariableInput;
struct SChargeDrainRangeParams;
struct SandboxInfractionBaseDef;
struct JournalEntryText;
struct SecurityClearance_OutfitRequirementDef;
struct STerminalLoginGameplayTrigger;
struct SIObjectives;
struct SendLandingGearObstructedEvent;
struct SMannequinActionDef_PowerSuit;
struct PlayerTradeInterfaceParams;
struct SBindingTriggerGameplayTrigger;
struct AnimationControlActorIK;
struct SCItemControlPriorityCustomValue;
struct ControlHintCondition_ActorAbilityActive;
struct SSCMusicAreaTriggerComponentParams;
struct ActorObservableExtender;
struct SNodeSwapExpansionParams;
struct SDamageCurveParams;
struct VehicleAITargetingParams;
struct TimeValue_Partitioned;
struct UnitTest_ClassA;
struct IObservableExtender;
struct BuildingBlocks_ComponentParameterInputNumber;
struct UIInteriorMapLabelParams;
struct AISeatDashboardControllerComponentParams;
struct ConsumableEffectResource;
struct SLocomotionPersonalityStateFilter;
struct AISeatShieldControllerComponentParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeLayoutPolicy;
struct RadarDisplayEntryEffects_Config;
struct ResourceTypeMolarMass;
struct Vec3;
struct RadarSharedParams;
struct SJumpTunnelVisualParams;
struct BuildingBlocks_StaticVariableInteger;
struct ExtendedNameEntryTextLocalized;
struct DefaultActionsEntityState_HasAvailableCommsTap;
struct MusicLogicSwitchValue;
struct SPlayerObjectMetadataParams;
struct SMisfireCondition;
struct SCLensAnimationParams;
struct SMobiGlasAppDataPacketBase;
struct SWeaponReticleParams;
struct LegacyCraftingOutput_Base;
struct BuildingBlocks_EntityRendererPolicy;
struct CraftingResearchUnlock_Base_NonRef;
struct SOrdnanceEmissionsParams;
struct SWeaponActionFireTractorBeamTowingParams;
struct GlobalResourceSkin;
struct SCItemControllableParams;
struct GeomFont_LetterNode;
struct BuildingBlocks_NumberTextFormatModifier;
struct CargoInterfaceParams;
struct HospitalCheckinScreenComponentParams;
struct SSCActorInteractorComponentParams;
struct HitConsistencyParams;
struct SSCLocalPlayerAimControlComponentParams;
struct SExitInteractionGameplayTrigger;
struct ItemPreview_LightIntensities;
struct GameTokenContainerParams;
struct BindingsOperations_WaveformShapeSine;
struct LinkedStatSetupBase;
struct ExtinguishType_Sphere;
struct SCItemClothingTemperatureResistanceParams;
struct BuildingBlocks_FieldModifierNumber;
struct SMobiGlasPersonalStatusSkillsEntry;
struct FoleyBone;
struct ControlHintCondition_ActorEnvironment;
struct SSCDamageHandling;
struct BaseService;
struct DrugEfficacyConfigForItemSubTypeBase;
struct FloatFactorRange;
struct FoleyAxis;
struct ResourceHealthHandlerParams;
struct AttachableStateModifierContext_Self;
struct MedicalSkeletonUIProviderParams;
struct CraftingCost_Base_Material;
struct AtmosphereState;
struct BuildingBlocks_BindingsIntegerComponentParameter;
struct RadiationStateBase;
struct ProcAimBaseJointTypeConfig;
struct VisualStateParams;
struct SSequencerEntityDragTaskParams;
struct SSequencerDespawnerTaskParams;
struct SCActorDNAComponentParams;
struct SHackingAIDecisionParams;
struct DynamicPowerPool;
struct MarkerTrackingBoxoutParameters;
struct SecurityNetworkVariableValue_Int;
struct SAverageValue;
struct SWeaponVibrationParams;
struct GlobalResourceDBA;
struct LightStatusMultiplier;
struct VLKCombatData;
struct SHackingAbilityParams;
struct UIDataBankDisplay3DSpaceDustParams;
struct PurchasableVehicleProviderParams;
struct AerodynamicTrailCalculationDefault;
struct LinkedStatPassValueBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeSvgScalingBehavior;
struct SShieldGeneratorMisfireParams;
struct DirectRTT_InterferenceParams;
struct SubsumptionMissionAudioComponentParams;
struct ToxiInputModifierDelay;
struct SSCLocalPlayerPersonalThoughtComponentParams;
struct ItemModifierLifetime;
struct ControlHintCondition_VehicleAutoLand;
struct SDFSetParams;
struct SSphereHazardAreaShapeParams;
struct ScanDisplayVariableParams;
struct RoomExtension;
struct FireHazardGlobalDamageToHealthParams;
struct PlacementValidator;
struct TransitDynamicDestinationParams;
struct SMobiGlasSetShipRecallAllowed;
struct SWeaponRegenConsumerParams;
struct BuffDurationOverride;
struct FloatUserVariableSetValueTask;
struct SApplicationFormRelationParams;
struct BindingsOperations_WaveformShapeRandom;
struct SAnimationScopeContext;
struct LoadoutEditorAdditionalParams;
struct AtmosphereStatePressureTemplate;
struct BuildingBlocks_LayoutPolicyBase;
struct SFPSMineableEntryTrackerParams;
struct MusicLogicSwitch;
struct UvInset;
struct ControlHintCondition_RemoteTurret;
struct ActorMotionStateFilter;
struct EATransportSplineTransitionParams;
struct BuildingBlocks_PrimitiveRendererPolicy;
struct SActorProceduralBodyRecoilModifiers;
struct PersonalThoughtPopWindowParams;
struct SEACriticalMessageDef;
struct TriggeredWarningAdd;
struct ReputationProviderParams;
struct BindingsOperations_WaveformShapeSawtooth;
struct ControlHintCondition_ActorWeaponState;
struct RewardScale;
struct ContractGeneration;
struct CraftingRecipe_Base;
struct SEntityTraversingNodeTypeItemPort;
struct SurfaceRaindrops_Occluder;
struct SCLedgeEntityParams;
struct ContractIntParam;
struct SObjectDataBankParams;
struct SActorForceReactionLeanBoneDef;
struct BaseHoloDisplayProvider;
struct SEntityTraversingNodeTypeZoneHostVehicle;
struct LocationManagerParams;
struct UIRenderToTextureTarget;
struct BuildingBlocks_StaticVariableIntegerConstant;
struct SpawnNotifierEntityComponentParams;
struct SDoorCollisionReactionParams;
struct ContractClassBase;
struct FireRepairerType_Base;
struct BuildingBlocks_TriggerNavigation;
struct BuildingBlocks_NumberCompareCondition;
struct STriggerableDevicesBlinking;
struct TriggerSubConditionDistanceDef;
struct SHackingAbilityPingParams;
struct SCItemDoorStatusLightsParams;
struct EASerializedCarrier;
struct SCItemMissileControllerParams;
struct SDistortionParams;
struct SCEquipableParams;
struct ProceduralLayoutNode_Base;
struct PlanetDayNightTemperatureBaseParams;
struct SRemoveCrimesGameplayTrigger;
struct WeatherEffects_Asteroid;
struct SGreenZoneObedienceComponentParams;
struct SRaceCheckpointEntryTrackerParams;
struct ItemResourceNetworkPowerModifier;
struct LightFlickerWaveParams;
struct ItemModifierTimedLife;
struct SCharacterValidationParams;
struct CraftingRecipeResults_Base_NonRef;
struct SCItemTurretAngleLimitParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeHorizontalAlignment;
struct SSpreadModifier;
struct DoorNavigationLinkController;
struct UIGraph_SkyLineWDComponent;
struct GreenZoneFlagsDef;
struct HarvestConditionMovement;
struct InnerThought_AnimBase;
struct ParticleEffectNoneTintingParams;
struct ImpactForceResistance;
struct ScreenEffects_ParamValue;
struct SEntityComponentNavPointParams;
struct CraftingGameplayProperty_Base;
struct AtmosphereLifeSupportParams;
struct RadiationBehavior_SurfaceRadiationParams;
struct SSetParticleEnabledStateGameplayTrigger;
struct SRegenConsumerModifier;
struct SEntityEffectSystem_Effect;
struct SEntityEffectSystem_Category;
struct SFitnessXPGains;
struct PersonalThoughtOption;
struct BlueprintCategoryAvailability_Base;
struct PurchasableDisplayClothing;
struct EntityComponentNetworkParams;
struct SSubsumptionMissionComponentParams;
struct VolumeShape;
struct SISpawning;
struct SUnknownEntryTrackerParams;
struct SObjectiveMarkerComponentParams;
struct RestrictedAreaSplineParams;
struct CockpitRuleBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalScrollDirection;
struct TriggeredHealthRatio;
struct SVendingMachineSpawnGameplayTrigger;
struct VehicleCollisionParams;
struct SPhysicalProxyComponentParams;
struct BuildingBlocks_ComponentCaptionProperties;
struct TriggerSubConditionSubsumptionEventDef;
struct SItemPipeSystemParams;
struct SHelmetLinkedState;
struct PopupDef;
struct SLightFlickerFilteringParams;
struct SActorForceReactionStaggerTagConfig;
struct DefaultActionDescriptionOverride;
struct BuildingBlocks_BindingsBooleanComponentParameter;
struct SWeaponAimableAnglesParams;
struct ActorLocomotionAvoidanceParams;
struct SLauncherBase;
struct PingBlobLifeTime;
struct TransportAlignmentPointParams;
struct DegYPR;
struct UIGraph_ControllerComponent;
struct EABettingModuleParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomRightRadiusBehavior;
struct ActorSignatureMultiplierGlobalParams;
struct ActorStateData_JumpFallValidationParams;
struct AINavigationObstacleParams;
struct ControlHintCondition_VehicleJumpDriveState;
struct SIParamsModule;
struct SEASpawningLocalization;
struct ActionAreaAudioNoiseExtension;
struct SEntityComponentPersistentEntityEntitlementSpawnerParams;
struct SCItemRadarAIProperties;
struct SUsableMovementAlignmentData;
struct InstancedInteriorManagerComponentParams;
struct SUsableGroupParams;
struct CraftingBlueprintTier_Base;
struct SAILedgeParams;
struct HarvestDespawnTimerParams;
struct GlobalResourceCharacter;
struct SSalvageRepairRangeParams;
struct QuantumParams;
struct SCItemControlPriorityValue;
struct SEntityTraversingNodeTypeItemType;
struct CockpitRuleInt;
struct SQedVisualGraphAnimationParams;
struct AIPerceptionMeterThresholds;
struct SpecialEventManufacturer;
struct SandboxTriggerBaseDef;
struct InterferenceParams_Continuous;
struct BuildingBlocks_FieldModifierBoolean;
struct IntUserVariableTask;
struct HintUIData;
struct SScoreboardStat;
struct AudioEnvironment;
struct CommunicationChannelName;
struct SurfaceRaindropsTargetComponentParams;
struct SCItemUserParams;
struct SSpawnOnTimer;
struct ControlHintCondition_VehicleLandingArea;
struct RaceRingComponentParams;
struct GlobalResourceGeometry;
struct BuildingBlocks_BindingsPathArrayIndexNumber;
struct BuildingBlocks_FontStyle;
struct DeltaSignatureSpikeParams;
struct SFloatNumberComparer;
struct EntityComponentRttAspectBoxoutParams;
struct SEntityComponentATCSpawnableParams;
struct MissionFlowCondition_OnMissionStart;
struct SDespawnRule_OnPartsDetached;
struct ProceduralConnectionLinkController;
struct SAttachmentConstraintParams;
struct TimeValue_LongSeconds;
struct SReflexXPGains;
struct BoneCounterRotateConfig;
struct GlobalResourceADB;
struct SARDataGenericComponentParams;
struct EAScoringComponentParamsDef;
struct SEntityComponentManagedEntityRegionParams;
struct ContractStringParam;
struct SubHarvestableConfigBase;
struct SAccoladeRequirement;
struct ItemTypeCategory;
struct Range;
struct EntityComponentRttAspectMFDIFCSParams;
struct SurfaceRaindrops_Override;
struct BuildingBlocks_FieldModifierEnumeratedTypeWidthBehavior;
struct ControlHintCondition_VehicleAutoSelectedContact;
struct Marker_AbilityComms;
struct SUsableGroupCoordinatorParams;
struct ContractGenerationParams_Legacy;
struct SSCPlayerGameRulesNetworkComponentParams;
struct CraftingOptionEffect_MaterialStats;
struct WearMovementMultipliers;
struct HoloDisplayBackgroundEffects;
struct DefaultActionsEntityState_CanActorBeLooted;
struct DifficultyModifierRange;
struct SActorForceReactionStateConfig;
struct ContextualCommunicationCondition;
struct ScreenEffects_ParamValue_Bool;
struct OptionalProbability;
struct BindingsOperations_WaveformShapeTriangle;
struct AsteroidStateBase;
struct VehicleItem;
struct VoiceChatRxParams;
struct MissionModifier_LawLicense;
struct HealthIconStatusEffect;
struct TimeTrialSplit;
struct EntityComponentRttAspectOwnVehicleParams;
struct ConsumableHelpers;
struct SRGB8;
struct SCItemVehicleDebrisParams;
struct EntryOptionalData_StackSize;
struct SToolArmDeployCondition_Base;
struct DeliveryMissionHelperComponentParams;
struct SClipVolumeProxyParams;
struct ResourceTypeProperties;
struct LookAtType;
struct SDespawnRule_OnMoved;
struct SCItemRadarSensitivityModifierType;
struct ControlHintCondition_ActorSuitState;
struct ArmorPenetrationResistanceParams;
struct StatusEffectSetupBase;
struct LinkedStatPassExcessBelowThreshold;
struct SSequencerMoveToAnimateCarryableTaskParams;
struct FireHazardGlobalExtinguishing;
struct BoidsTerrainSurfaceRepelRule;
struct SSequencerAnimationTaskParams;
struct LadderAnimationOffset;
struct FireHazardGlobalRoomConnectorParams;
struct SubsumptionAssignmentComponentParams;
struct EntityComponentFuelConnection;
struct UIGraph_JournalEntryDockComponent;
struct ExplosionFlashbangParams;
struct SWeaponActionFireTractorBeamMultitractorParams;
struct Marker_AbilityClosure;
struct PostGameScoreboardParams;
struct BaseItem;
struct AudioValueOutputBehaviour;
struct CargoGridOccupantFace;
struct BuildingBlocks_LayoutPolicyItemBase;
struct SHackingThreatLevelConditionParams;
struct RGB;
struct SGlobalShopErrors;
struct NavLinkLocation;
struct SQedVisualGraphTransitionTypeParams_ValueBased;
struct BuildingBlocks_FieldModifierEnumeratedTypeHeightBehavior;
struct BuildingBlocks_StyleSelectorConditionCount;
struct MotionFootPinningParams;
struct BuildingBlocks_ComponentTextureProperties;
struct SActorForceReactionProceduralLeanPose;
struct PlayerDockingHubControllerParams;
struct SNodeSwapUnstuckParams;
struct SReputationStateModifierDecrement;
struct SSensorMineTriggerType;
struct SWeaponActionFireTractorBeamCargoModeOverrideParams;
struct ActorStanceSpeeds;
struct MissionFlowCondition_AnyTokensState;
struct SSendSeatReadyPoseLockedEvent;
struct STurnOnItemGameplayTrigger;
struct SSalvageRepairHighlightOutlineValues;
struct UIGraph_BlockingMessagePopUpComponent;
struct HarvestableAreaTypeBase;
struct SAimModifier;
struct BoidAgentComponentParams;
struct Marker_AbilityBase;
struct SReputationRewardAmount;
struct SDynamicDifficultyPointsPerEvent;
struct BuildingBlocks_PreviewSceneRttWindow;
struct BaseBuildingParams;
struct ItemResourceDynamicAmountExample;
struct BaseDensityUnit;
struct ActorStatusUIWarningEntry;
struct SAuxiliaryWeaponActionFlashlightParams;
struct SQuantumTravelEntryTrackerParams;
struct STurnOffItemGameplayTrigger;
struct DefaultSphereGeom;
struct UIGraph_KioskBackgroundComponent;
struct SHeadRecoilNoiseParams;
struct ItemResourceDynamicAmountBase;
struct SDirtAccumulatorParams;
struct BoidsAlertPointRepelRule;
struct StatusCost;
struct BuildingBlocks_StaticVariableBase;
struct SSCSignatureSystemAudioModifier;
struct SSubsumptionActionAreaTrackerParams;
struct DriftingDrunkBDLEffects;
struct SendAttemptWirelessLinkEvent;
struct StatusEffectValueAbsolute;
struct ControlHintCondition_ActorMotionSpeed;
struct ScreenEffects_Pattern;
struct ItemResourceDynamicAmountJumpTravelFuel;
struct EntityAudioControllerTypeManagementParams;
struct SSequencerMoveToAnimateItemDoorTaskParams;
struct InteriorMapWorldUISectionLabelsParams;
struct LocationMusicConfig;
struct EAPatchNoteParams;
struct PersonalThoughtActionsMenu;
struct SSequencerStowHeldEntityCarryableTaskParams;
struct JumpFallLandParams;
struct SCTurretSeatRotationParams;
struct PlanetKillVolumeComponentParams;
struct SStandardPlayerSetup;
struct EASpawnRezParams;
struct BuildingBlocks_FieldModifierLocalization;
struct ActorEnvironmentalModifierConfig;
struct EnvironmentLightProjectionParams;
struct StaminaCost;
struct MatchCycleParams;
struct SCItemControlCondition_Base;
struct GlobalJumpPointTuningParams;
struct AttackDetectionConfig;
struct CameraFOVConfig;
struct AtmosphereStateTemplateInternal;
struct SDynamicLaunchZoneDef;
struct EATransportQTravelTransitionParams;
struct ControlHintCondition_GameOptionState;
struct SEntityEffectSystem_PropertyModifier;
struct ActorActionHandler_LadderValidationParams;
struct BaseJournalEntry;
struct SS42SubsumptionMissionComponentParams;
struct ApparentTemperatureParams;
struct StanceCheckConfig;
struct STeamHostility;
struct FloatModifierMultiplicative;
struct StatusEffectValueLinear;
struct GasCloudLightFadeParams;
struct DynamicCameraEffectsRendererParams;
struct EntityComponentHeatConnection;
struct CraftingNameInfo;
struct UIOwnerContextTransitionPair;
struct SHintActivator;
struct SContextualTakedownFragmentTag;
struct SNavPointEntryTrackerParams;
struct TransitLimboNodeParams;
struct RestrictedAreaBoundaryMeshParams;
struct BuildingBlocks_ComponentIconProperties;
struct BiomeAccumulationParams;
struct TriggeredVisorMessage;
struct S42StatOperationValue;
struct SVehicleEntryTrackerParams;
struct SReputationStateModifierSet;
struct BuildingBlocks_BindingsNumberBase;
struct AttachableStateModifierContext_Parent;
struct ScanDisplaySortInfoParams;
struct StatusPriorityBase;
struct SReputationMissionRequirementExpressionElement;
struct TakeDownMaxDistances;
struct SCLocalPlayerGroupVideoCallComponentParams;
struct SAddHealthRatio;
struct ItemResourceDynamicAmountLifeSupport;
struct SBBDynamicPropertyLocString;
struct DockingSensitivity;
struct SResourceNetworItemType;
struct EntityEventCallbackComponentParams;
struct SOrdnanceClusterParams;
struct CraftingCost_Base;
struct StickyFilterRotationParams;
struct DevTeam;
struct StatusEntityComponentParams;
struct ItemResourceDynamicAmountFunctionalityRatio;
struct SMineableResourceObjectMetadataParams;
struct LightClipBoxParams;
struct CameraKillerDeathCamParams;
struct SInitialDamageSpecifierBase;
struct SReputationStateModifierSetBool;
struct ActorViewLimits;
struct VoteBaseParams;
struct InventoryContainerGridCellSizeCentimeters;
struct ControlHintCondition_VehicleEjectorSeat;
struct RGBA8;
struct SubHarvestableConfigSingleBase;
struct SLocalPlayerShoppingNotificationConfiguration;
struct HospitalEmergencyScreenComponentParams;
struct S42StateParams;
struct LegacyCraftingRecipeList_Base;
struct SBaseCargoUnit;
struct SEntityTraversingExecuteNodeBase;
struct HandholdGripType;
struct AIPathComponentParams;
struct SAudioProxyParams;
struct LightFlickerWaveRandomParams;
struct BuildingBlocks_TriggerBase;
struct SEnergyPipeDefinition;
struct SCItemProximitySensorShapeParams;
struct SSequencerActorAnimationTaskParams;
struct SLegacyThrusterMisfireParams;
struct SCharacterCustomizerWildlineSubconditionFlowStep;
struct AnimationGraph_KeyFrame;
struct SCItemDisplayScreenPreset;
struct SEntityEffectSystem_MinMaxModifier;
struct HeatDegradation;
struct IntUserVariableSetValueTask;
struct AIFireDisciplineSettings;
struct LandingAreaServicesParams;
struct TraversalCostShapeConfig;
struct TemperatureUIParams;
struct LinkedStatRulePassBelowThreshold;
struct SIBettingModule;
struct SStatusTriggerThresholdLevelModifier;
struct SHackingCodeErrorEntry;
struct LoudspeakerComponentParams;
struct SActorLocomotionFidgetSeverityParams;
struct Investigation_Clue;
struct ConsumableEffectHealth;
struct CraftingBlueprint_Base_NonRef;
struct BoidsAreaLimiterRule;
struct SignatureUIGlobalParams;
struct SolarSystemComponentParams;
struct SEntityComponentVehicleSeaterParams;
struct RevivalFadeInParams;
struct AIMercyTimerSettings;
struct EntityEffectSystem_UIOwnerEvent_Goto;
struct AnimationVariableInterpolation;
struct EntityCaptureParams;
struct PlayerScoresUIProviderParams;
struct SCommodityUIProviderParams;
struct SScoreEvent;
struct InterferenceParams_OneShot;
struct ItemResourceDynamicAmountQuantumTravelFuel;
struct ResistanceWeightParams;
struct SEntityComponentLocationDataParams;
struct RemovableChipValue;
struct BuildingBlocks_TimingFunctionSteps;
struct BuildingBlocks_FieldModifierEnumeratedTypeScrollEasingType;
struct SBBDynamicPropertyInt;
struct ControlHintCondition_VehicleTurretEquippedComponents;
struct SAsteroidGasCloudComponentParams;
struct UISimpleRenderNodeEntityComponentParams;
struct LoadoutProviderEntityComponentParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderTopRightRadiusBehavior;
struct SObjectDataBankEntryTrackerParams;
struct FrontendControllerProviderParams;
struct GlobalJumpDriveExitEffectParams;
struct ExtinguishType_Spray;
struct GrabCameraControlParams;
struct SMovableObjectContainerParams;
struct TransitInteractionPanelParams;
struct SEnemyKnowledgeComponentParams;
struct DefaultActionsEntityState_EntityIsAttachedToLootableActor;
struct MineableInstabilityParams;
struct CommodityType;
struct SEntityComponentPushPullModificationObjectParams;
struct SurfaceMFXEntityParams;
struct LinkedStatusEffectTrigger;
struct Marker_AbilityJumpPoint;
struct ItemResourceControlRNParameterExternalPort;
struct SIStateModule;
struct SEAGameFeedEventParams;
struct SDummyLauncher;
struct VoteNextLevelParams;
struct SCMaxLinearVelocityParams;
struct SWeaponActionFireTractorBeamInputParams;
struct SSpawnOnDestroy;
struct BuildingBlocks_GeomEntityAnimationParams;
struct DiminishingReturnsStatusEffectApplicationType;
struct ControlHintAlwaysDisplay_WhenConditionsPass;
struct ShootingParams;
struct QuantumDriveSplineRollbackParams;
struct SSpawnRules;
struct BuildingBlocks_FieldModifierEnumeratedTypeMaxHeightBehavior;
struct ItemDashboardScreenPhysicalParams;
struct SubsumptionMissionLinkComponentParams;
struct SEntityEffectSystem_MultiplierModifier;
struct SAtmosphericCompositionInherit;
struct ControlHintCondition_ActorState;
struct SItemMisfireParams;
struct BindingsOperations_WaveformShapeBase;
struct TriggeredMessage;
struct MissionBeaconProviderEntityComponentParams;
struct AbstractMissionInitParam;
struct InventoryContainerGridCellSizeMeters;
struct ActorMovementSetTransition;
struct AudioSignalRtpc;
struct ProbabilisticStatusEffect;
struct LightningTargetParams;
struct SHandsRecoilCurveNoiseParams;
struct SObjectContainerComponentParams;
struct ClothingType;
struct Date;
struct STransponderEntryTrackerParams;
struct BuildingBlocks_PrimitiveVisualState;
struct RestrictedAreaRedoutParams;
struct AIVisualFieldParams;
struct SChatChannelTypeBase;
struct FloatModifier;
struct AudioAllegianceParams;
struct SCItemFuelIntakeParams;
struct JumpPointVibrationParams;
struct SInteractionPointPrimitiveParams;
struct RadarSignatureCategoryEntry;
struct SEntityEffectSystem_SmoothnessModifier;
struct HolographicVolumeCubeParams;
struct CraterModifierComponentParams;
struct CommsStageUIProviderParams;
struct Marker_AbilityHostility;
struct ItemResourceDynamicAmountWeaponRegen;
struct SIVotingModule;
struct SVaultingTechniqueGains;
struct ProceduralIdleToMoveParams;
struct MotionJukeParams;
struct SItemPortRuleDef;
struct SDoorCollisionReactionToggleParams;
struct SEntityHighlightNode;
struct SStandardCargoUnit;
struct SCItemMannequinTags;
struct AudioObservableExtender;
struct HearingDisruptionGameplayTrigger;
struct MotionSmoothingParams;
struct Marker_ShowRule;
struct EntityComponentWaterVolumeParams;
struct AdvancedLootConstraints;
struct AIAimingComponentParams;
struct LinkedStatPassFullValue;
struct InteriorMapWorldUIRoomLabelsParams;
struct RammingTrackerParams;
struct MoveViewRestrictionPenalty;
struct BlockedTextParams;
struct SDisruptionGameplayTriggerType;
struct QuantumDriveHeatParams;
struct Marker_AbilityVehicleData;
struct BuildingBlocks_GhostPrimitiveSettings;
struct SActorForceReactionsStunDef;
struct SFragmentParams;
struct FunctionalityModifierBase;
struct SubsumptionConversationLinkComponentParams;
struct AudioPropagationParams;
struct ControlHintCondition_AnyHintTrigger;
struct ChatSystemOptionsModule;
struct EnvironmentLightSizeParams;
struct SAutoLoadingBoxSizePrices;
struct DefaultActionsEntityState_InRestrainRange;
struct BuildingBlocks_ContainerModeBase;
struct DeliveryItemPortPickupComponentParams;
struct ReputationPrerequisiteRange;
struct BuildingBlocks_TriggerHyperLink;
struct ResourceRangeParams;
struct BoidsSphericalLimiterRule;
struct ControlHintCondition_ActorStanceState;
struct LifetimeDebugParams;
struct VehicleInteriorObjectContainer;
struct EAGameCompletionAwardBaseParams;
struct FloatUserVariableTask;
struct RandomFloat;
struct ActorLocomotionSharpTurnParams;
struct SSCSignatureDummyParams;
struct ConversationNode_Base;
struct EventDispatcher;
struct InnerThought_CycleAnimBase;
struct LoadoutInfo;
struct ObjectivePropertyBase;
struct SActorAnimationPoseDeathBehaviour;
struct ScoreMessage;
struct AutopilotParams;
struct SEntityComponentRoomGroupParams;
struct PlayerAnimatedInteractionHandParams;
struct SCSeatAccessLinkedGatewaySequenceParams;
struct SReputationMissionRequirementExpression_And;
struct SMatchNetworkTypeParams;
struct SDialogueComponentParams;
struct LongTermPersistenceWhiteListSubTypeEntry;
struct SActorForceReactionEffectDefaults;
struct DialogueBundleWeighted;
struct LongTermPersistenceSubTypeListOption;
struct PlayerChoice_InteractionModifier;
struct DefaultActionsEntityEntryCondition_CanActorBeLooted;
struct SIHostilityModule;
struct BuildingBlocks_ComponentBadgeProperties;
struct ItemResourceDeltaNetworkReflection;
struct DeliveryLockerItemComponentParams;
struct BuildingBlocks_TriggerURL;
struct TriggeredWarning;
struct ControlHintCondition_ActorInteractionState;
struct PlayerAnimatedInteractionBase;
struct Marker_AbilityNearestFace;
struct SSCElectronicAccessPlayerComponentParams;
struct TriggeredHealthValue;
struct SEntityEffectSystem_UIOwnerEffect;
struct DoorNavigationTriggerAdapter;
struct SElevatorBBoxCollisionParams;
struct BuildingBlocks_TriggerSubsumptionCallback;
struct StarMapDisplayProviderParams;
struct SAsteroidFieldComponentParams;
struct OrbitEntityCinematicEvent;
struct EASpawnCameraControllerParamsDef;
struct MaterialEffectEntry;
struct BuildingBlocks_AutoTypeParams;
struct SSequencerItemActionTask;
struct InputAction;
struct SEASpawnRespawnSchedulerParams;
struct SSalvageTractorParams;
struct QuantumGridComponentParams;
struct SSpawner_SpawnedEntityParams;
struct SStandardResourceUnit;
struct BuildingBlocks_GridPackContainer;
struct ItemResourceDynamicAmountWeaponAmmo;
struct CommonTargetingSameTargetScore;
struct ActorMeleeDef;
struct BoidsAlignmentRule;
struct UIModeVisibilitySettings;
struct TileParams;
struct ActorStateData_AnimationValidationParams;
struct SMisfireBandParams;
struct CameraBaseSettingsConfig;
struct STurbulenceParams;
struct SecurityClearance_OutfitRequirement_RequiredPieceDef;
struct PostureData;
struct SEAObjectiveMarkerStateSettings;
struct SCharacterSkinValidationParams;
struct LinearDamage;
struct UIStateColor_Threshold;
struct DeliveryItemPortManagerComponentParams;
struct SReputationContextBBEntityListParams;
struct MarkerTrackingLabelParameters;
struct LadderMovementParams;
struct SAuthoritativeStatsRecording;
struct SCItemTutorialParams;
struct GlobalResourceObjectContainer;
struct SActorProceduralAimRecoilCurveNoiseModifiersDef;
struct SEntityHoverPhysicsPartialParams;
struct ItemResourceNetworkTypeUIData;
struct PlayerNotificationBannerManagerGlobalParams;
struct EntitlementItemType;
struct ArmouryItemStat;
struct SEntityComponentOrbitalNavPointParams;
struct SCharacterCustomizerClampedValueParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitVerticalAlignment;
struct SResetKeypadInputGameplayTrigger;
struct RadarJammerSharedParams;
struct ItemAwardWeightingsBase;
struct AreaDisruptionGameplayTrigger;
struct SSalvageRepairItemTypeLocalizationPair;
struct EnvironmentLightMiscParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeVerticalAlignment;
struct SShieldResistance;
struct SMissileObjectMetadataParams;
struct GameNotificationDockItemParams;
struct SIStatsRecordingModule;
struct LandingAreaParamOverrideParams;
struct RadiationStatePropertyParams;
struct AnnunciatorProviderParams;
struct AsteroidState;
struct SActorForceReactionLimitDef;
struct PersonalThoughtInventoryOtherFilter;
struct SActorForceReactionBlockConfig;
struct SRopeProxyParams;
struct MissionType;
struct ShipInsuranceParams;
struct ActivityDataRecord;
struct SBreakablePhysicsParams;
struct TriggerSubConditionInteractionDef;
struct PlanetSpawnedEntityParams;
struct BlinkingLightParams;
struct SItemPortDefAttachmentImplementationBase;
struct SReputationStateModifierIncrement;
struct CraftingMaterialStatTypeRecord;
struct RastarUIParams;
struct SSuperGUIDComponentParams;
struct ContractLifeTime;
struct SCItemRadarSignatureDetection;
struct SCommonDamageHandling;
struct MissionFlowCondition_AllTokensState;
struct BuildingBlocks_ComponentParameterInputString;
struct LinkedStatRuleHasCrossedAboveThreshold;
struct PlayerChoice_Option;
struct SIPlayerStats;
struct SSequencerPlayerUsableTaskParams;
struct SEAActionItemMessageDef;
struct EAExperimentalModeResetTimeParams;
struct PrisonDepositKioskParams;
struct CinematicCameraControllerSetup;
struct MapDisplayRenderLayerParams;
struct DamageBase;
struct ScanDisplayConditionCompareParams;
struct SBaseHealthComponentParams;
struct BuildingBlocks_RendererPolicyBase;
struct ChatEmoteAnimData;
struct BoidsVehicleRepelRule;
struct EntityReferenceDef;
struct STargetByLineIntersection;
struct ActorStateFilter;
struct SSCActorExternalForceResponseComponentParams;
struct AllPortRefillData;
struct StarMapAsteroidRing;
struct UIBindingsConsumerEntityComponentParams;
struct ForceFeedbackMotor;
struct AttachableStateModifierContext_Sibling;
struct SShopDebugHelperComponentParams;
struct LightStyleParams;
struct SAttachableEntityParams;
struct AudioFootstepSurfaceMapping;
struct CameraLensChromaticAberration;
struct GasCloudOverrideSphereVolumeParams;
struct BreathingComponentParams;
struct SCentiCargoUnit;
struct SPartyMemberEntryTrackerParams;
struct SReputationStateModifierBase;
struct SandboxTrigger;
struct SubsumptionEventReceiverComponentParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeMinWidthBehavior;
struct GlobalResourceCGF;
struct SReputationMissionRequirementExpression_LeftParenthesis;
struct SEntitiesGroupComponentParams;
struct RadarContactGamePlayProperties;
struct LinkedStatRulePassCrossingBelowThreshold;
struct EnvironmentalMissionComponentParams;
struct MissionVariableInteger;
struct UIBindingsVendorEntityComponentParams;
struct SHideAmmoAttachmentParams;
struct SIPlayerSetupModule;
struct FrontendStateParams;
struct GreenZoneFlagAdditionalSettingsDef;
struct VehicleNavigationTriggerAdapter;
struct SThrowableLauncher;
struct SSequencerUsableFillConsumableTaskParams;
struct CameraLensDistortion;
struct ThrusterGimbalAxis;
struct SActorForceReactionEnvelope;
struct MissionInitParamFloat;
struct SUsableAttachFlagParams;
struct NavigationShapeComponentParams;
struct TriggerSubConditionTimerDef;
struct AIWeaponComponentParams;
struct SSCSignatureParamsBase;
struct SCharacterCustomizerDNAHeadParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeMaxWidthBehavior;
struct Weapon;
struct ControlHints_QuickSelectWheelInput;
struct SBBDynamicPropertyFloat;
struct SerializedComponentParams;
struct SAudioBreathParameters;
struct SStandardNotifications;
struct StaminaComponentParams;
struct S42FieldManualContentPiece;
struct HandholdAttachPointChoiceParams;
struct SQuantumTrailParams;
struct SSubstitutionProxyParams;
struct BuildingBlocks_ContextMenuItem;
struct VoiceChatRxAggregatorParams;
struct EAScoringAssistThreshold;
struct BuildingBlocks_PreviewSceneEnhancedRealityRtt;
struct BoidsSeparationRule;
struct DialogueBundle;
struct ColorGradientComponentParams;
struct NavigationCostShapeComponentParams;
struct TinyMachineGraphInstanceComponentParams;
struct PlanetOceanAudioCheckpoint;
struct CraftingGameplayPropertyImplValueRange_Int;
struct UIBindingsInteractionsComponentParams;
struct SRGBA8;
struct SISubsumptionMissionModule;
struct SSequencerAnimationTaskParamsBase;
struct SCItemClothingRadiationResistanceParams;
struct EntityComponentSpawnClosetNPCParams;
struct StringUserVariableSetValueTask;
struct InteriorMapWorldUIDustParticlesParams;
struct DockingHUDMessagesParams;
struct DefaultAction_LootingInteractionDef;
struct LegacyCraftingRecipeDef_Base;
struct MissionDataComponentParams;
struct FloatModifierAdditive;
struct ActorStatusIncapacitatedUIData;
struct SCItemFishParams;
struct InteractiveVariable;
struct SEASpawnLivesGovernor;
struct DriftingConsciousnessConfig;
struct RTTNameTagParams;
struct SCOperatorATCParams;
struct ReputationComparisonRange;
struct SSCActorShoppingAssistanceParams;
struct SEntityComponentRttLiveCameraPreviewParams;
struct SBaseObjectContainerComponentParams;
struct SWeaponActionFireSalvageRepairBeamStrengthValueParams;
struct SHackingCodeCommandParam;
struct DefaultActionsEntityState_EntityIsAttachedToDraggableBody;
struct EntityComponentRefineryParams;
struct SHackingThreatLevelConditionAbilityStarted;
struct StatusPriorityOxygen;
struct SJumpTunnelDistortionParams;
struct ImpoundingDefinition;
struct DirectRTT_BloomParams;
struct SSequencerMoveToAnimateEntityDragTaskParams;
struct SHoloFieldComponentParams;
struct EntityEffectSystem_LightType_AreaLight;
struct ContractPrerequisite_LocationProperty;
struct FireHazardGlobalUpdate;
struct CargoGridSpawnedComponentParams;
struct SISpectatorModule;
struct GlobalJumpTunnelLightParams;
struct SSalvageModifier;
struct ActorStateData_UsableValidationParams;
struct AbilityComponentParams;
struct CinematicConfig;
struct BuildingBlocks_BindingsVectorBase;
struct MusicLogicReset;
struct BuildingBlocks_PreviewSceneEntityRoot;
struct VehicleLandingUIParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeScrollBehavior;
struct ControlHintCondition_VehicleSeatTypeState;
struct SubsumptionMissionMusicComponentParams;
struct ItemKioskLoadoutEditorAdditionalParams;
struct SStreamingDependencyComponentParams;
struct ObjectDataBankMarkerProvider;
struct SubItemScanStatusMappings;
struct CraftingOptionalEffect_Base;
struct BuildingBlocks_FieldModifierEnumeratedTypeGridPackDirection;
struct SSpawnOnDropped;
struct SSequencerUsableTask;
struct LargeObservableExtender;
struct SCItemEnergyControllerParams;
struct TriggerSubConditionMobiGlasDef;
struct SSetScreenShakeAreaEnabledStateGameplayTrigger;
struct DataForgeComponentParams;
struct SCItemDoorPortalModeParams;
struct GameModeParams;
struct AICoverSurfaceComponentParams;
struct AISeatFlightControllerComponentParams;
struct SCItemObservableScreenViewParams;
struct SWeaponGeometryTagsParams;
struct EnvironmentLightRuntimeParams;
struct ResourceTypeDensityType;
struct SIRoundsModule;
struct WakeMFXEntityParams;
struct ScanCustomValueLocString;
struct SControlledEntityIFCSParams;
struct StatusEffectValue;
struct SUsableViewParams;
struct SCItemAimableComponentParams;
struct SplashDamageInfractionSettings;
struct LinkedStatPassExcessAboveThreshold;
struct Marker_ShowRuleMapDisplayMode;
struct STurretEntryTrackerParams;
struct SSequencerCarryableTaskParams;
struct BoidsCohesionRule;
struct SCItemDoorPortalModeAutomaticParams;
struct GramsPerCubicCentimeter;
struct GameShapeComponentParams;
struct FriendlyFireReactionOverride;
struct SSCPlayerUINetworkComponentParams;
struct ScanCustomValueFloat;
struct ControlHintCondition_VehicleOperatorMode;
struct UnitTest_BaseTest;
struct SHintEntryTrackerParams;
struct DefaultActionsEntityEntryCondition_Primed;
struct MissionDeadline;
struct SServiceBeaconCreatorParamsBase;
struct ChatProviderSettingsBase;
struct SDestroySelfGameplayTrigger;
struct CameraFOVChangeData;
struct ScanDisplayConditionBaseParams;
struct ShipListEntityComponentParams;
struct ItemThrottleParamsBase;
struct UIGraph_ActorLoadoutEditorContextComponent;
struct TriggerSubConditionAngleDef;
struct EntityComponentRoomOccupantParams;
struct BreathVolumeParams;
struct InnerThought_CycleAnimRotateX;
struct ActorLocomotionTurnOnSpotParams;
struct SHardPointHighlightNode;
struct SWalletParams;
struct JournalEntryShopAlertsText;
struct PlayerForceReactionParams;
struct ScanDisplaySetupParams;
struct SQedVisualGraphTransitionTypeParams_TimeBased;
struct SMFD;
struct InteriorMapEntityVisiblityEntityComponentParams;
struct StarMapQuantumTravelDataParams;
struct LegacyUIOptionsParams;
struct OcclusionBindingsParams;
struct AudioBreathStyleCondition;
struct SCBoatMovementBuoyancyParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeImageScalingBehavior;
struct ItemResourceDeltaBase;
struct ControlHintCondition;
struct ContractGenerationParamsBase;
struct BuildingBlocks_BindingsIntegerBase;
struct CommunicationSubtitleSettings;
struct AudioListenerParams;
struct SSCSignatureSystemActorCrossSectionParams;
struct JournalEntryType;
struct CommunicationVariableFloat;
struct BuildingBlocks_RadialTransformChild;
struct SModifierSignaturesEntry;
struct ChatManagerDefaultChannelColor;
struct CloneLocationMedicalTier;
struct ItemResourceDynamicAmountCoolant;
struct AttachableStateModifierContextBase;
struct SMobiGlasLauncherApp;
struct SCustomizableMaterialEntry;
struct MissionPropertyValue_StarMapLocation;
struct SAudioGroupControllerComponentParams;
struct SSpecialEventInteractionsParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomLeftRadiusBehavior;
struct SGameRulesS42ReputationParamsDef;
struct FoleyCollision;
struct BuildingBlocks_FieldModifierEnumeratedTypeMinHeightBehavior;
struct SCollectibleCategory;
struct FlashVariableObject;
struct SHackingCodeInputModifiersParams;
struct SMicroCargoUnit;
struct AudioCommsSignalComponentParams;
struct SDockingAnimatorStageTriggerParams;
struct SEAObjectiveMarkerStatusMessages;
struct MapDisplayControlLimits;
struct CameraComponentOverrideControllerSpawnNotifierComponentParams;
struct MiningTransactionParams;
struct SGameRulesReputationBaseParamsDef;
struct MovementSystemComponentParams;
struct DamageResistanceBase;
struct EntityComponentRttAspectMFDDiagnosticsParams;
struct CraftingBlueprintTier_Base_NonRef;
struct SActorForceReactionFilterItemDef;
struct ItemPowerSegmentThrottleParams;
struct SActorEntryTrackerParams;
struct CommonCurrentTargetDistanceScore;
struct ControlHintCondition_VehicleWeaponState;
struct QuickAccessWheelElement;
struct SHackingThreatLevelConditionLinkPointActivated;
struct STakedownTechniqueGains;
struct SSmoothingWithLerp;
struct TrailFadingSettings;
struct SReputationStateParams;
struct ControlHintCondition_VehicleWeaponSystems;
struct TransportDoorParams;
struct SActorForceReactionAnimationStaggerConfig;
struct STileSocketParams;
struct SCItemLightGroupParams;
struct RangeEventDispatcherComponentParams;
struct EntityComponentShipCommsChannelParams;
struct RefiningProcess;
struct SGameVolumeComponentParams;
struct SCuttableShapeDefinition;
struct ControlHintCondition_ActorLeanState;
struct SItemPortBreakable;
struct BuildingBlocks_BooleanTextFormatModifier;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexItemAlignment;
struct SMineableEntryTrackerParams;
struct AITargetableSettings;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexAxisJustification;
struct SUIGeometryResourceComponentParams;
struct LinkedCloneLocationMedicalTier;
struct SIPickupModule;
struct SSCSignatureSystemAudioMultiplier;
struct SWeaponZeroingParams;
struct SItemUserHintActivator;
struct ItemSuitArmorSignatureParams;
struct TransportGatewayTimerPanelParams;
struct FireRepairerType_EntityPos;
struct EntityEffectSystem_LightType_ProjectorLight;
struct SStartRemoveInfractionTimerGameplayTrigger;
struct CtxGraph_Component;
struct UIGraph_SimpleComponent;
struct SHackingAIAlertedStateModifiersParams;
struct HoverCollisions;
struct BuildingBlocks_SteppedLine;
struct DefaultActionsEntityEntryCondition;
struct TractorBeamTarget;
struct CommsNotificationUserParams;
struct EntityEffectSystem_LightLink;
struct MissionVariableFloat;
struct BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalAutoScrollBehavior;
struct SMannequinTagParams;
struct ControlHintCondition_ActorCommsState;
struct ActorBaseStanceMovementModifiers;
struct SActorStanceDimensionsExtraDef;
struct BuffDurationOverrideIndefiniteS42;
struct HangarAreaComponentParams;
struct ActorTargetedParams;
struct AsteroidStateTemplateInternal;
struct SCItemDisplayScreenPowerParams;
struct SCharacterCustomizerTextureParams;
struct NavigationLinkController;
struct ActorShudderConfig;
struct UIGraph_MarkerARDockComponent;
struct SProjectedDisplayParams;
struct SIReputationModule;
struct EngineeringStateMessages;
struct SAsteroidRingComponentParams;
struct Marker_ShowRuleDisplayMode;
struct EntityComponentRttAspectMFDTargetStatusParams;
struct SProjectedYawLineParams;
struct SActorForceReactionLeanAngleLimitsDef;
struct Time;
struct GlobalResourceBase;
struct FiringRangeTimeEntry;
struct BulletPierceabilityParams;
struct ControlHintCondition_VehicleLockedTarget;
struct BuildingBlocks_CaseModifierTextFormatModifier;
struct PathingComponentParams;
struct SIDamageHandlingModule;
struct SActorForceReactionFlightDurationConfig;
struct EntityComponentSpawnClosetManagerParams;
struct ObjectiveRewardContributionBase;
struct SCharacterCustomizerRandomizationParams;
struct SCPlayerMissionLogComponentParams;
struct SNonAuthoritativeClientStatsRecording;
struct BuildingBlocks_TriggerModifyNumber;
struct CraftingRecipe_Base_NonRef;
struct AreaBoxComponentParams;
struct BuildingBlocks_BindingsLocalizedBase;
struct ActiveContractSettings;
struct ControlHintCondition_VehicleScanWaveAvailability;
struct PlayerScoresManagerParams;
struct ControlHintCondition_VehicleCounterMeasureState;
struct ItemResourceControlParameterUIParameter;
struct NavigationTriggerAdapter;
struct EAPlayerHUDParams;
struct SMisfireDamageValue;
struct ContractGenerationParams_RequestOnly;
struct PingContactLifeTime;
struct PlayerChoice_HeadLookParams;
struct MobiGlasAppDataBase;
struct BuildingBlocks_StaticVariableNumber;
struct ContractBoolParam;
struct SActorForceReactionImpulseAccumulationConfig;
struct SHighlightBehaviorNodeParams;
struct GasCloudSunShadowParams;
struct SMobiGlasAppParamsBase;
struct MotionTurnParams;
struct HudColor_HoloParam;
struct SCObjectDataBankEntryMarkerConfig;
struct WorldDisplayEnvironmentColor_Manufacturer;
struct CounterMeasureFlareParams;
struct STargetingMethodBase;
struct PlayerTradeProviderParams;
struct SStandardHostility;
struct PowerPool;
struct PrisonSentenceUIProviderParams;
struct SWeaponActionFireTractorBeamStrengthValueParams;
struct AreaEventCallbackComponentParams;
struct MissionFlowConditionBase;
struct Marker_AbilityScan;
struct SSCSignatureSystemCrossSectionParams;
struct SFortitudeXPGains;
struct ActorForceMovementModifierConfig;
struct ItemResourceTypeData;
struct DefaultActionsEntityState;
struct CargoDebugHelperParams;
struct SSequencerBespokeEntityDragTaskParams;
struct BuildingBlocks_WindowCamera;
struct SItemPortAttachmentPoints;
struct SSmoothingTimeBased;
struct CommunicationVariationRules;
struct EntityClassStaticDataParams;
struct SS42PersonalStatusDrugBuffEffectString;
struct SRenderProxyParams;
struct NumResultsConstraints;
struct KilogramsPerCubicMeter;
struct SeatReticleArchetype;
struct BuildingBlocks_PreviewScreenBase;
struct VehicleDifficultyParams;
struct SItemPortRule_HideAllInteractionsDef;
struct PlayerAssetManagerProviderParams;
struct PingTypeParams;
struct SReputationMissionRequirementExpression_Not;
struct SSequencerDefTaskParams;
struct SHackingThreatLevelConditionTime;
struct SStarGalaWaveParams;
struct Bindings_SubsumptionBroadcastEvent;
struct WeaponAIAimingMethodHighLowArc;
struct WingmanOrderInfo;
struct SCItemDoorPortalModeManualParams;
struct SStreamingObjectContainerComponentParams;
struct SReputationMissionRequirementExpression_RightParenthesis;
struct ShipStateMonitorComponentParams;
struct ScreenEffects_ParamValue_Int;
struct SBaseInteractionGameplayTrigger;
struct PlayerMissionDataBankManagementComponentParams;
struct SSpawnOnStreamIn;
struct SendItemResourceNetworkedStateEvent;
struct SCoolerMisfireParams;
struct PlayerMarkerSubscription;
struct SecurityNetworkVariableEffect_Base;
struct ItemResourceControlOutputBase;
struct BulletImpulseFalloffParams;
struct RestrictedAreaSphereParams;
struct SCBoatMovementInputParams;
struct SLegacyItemMisfireParams;
struct InterferenceParams;
struct JumpDriveUIConeParams;
struct SWeaponConditionIsHeldEntity;
struct AISeatOperatorComponentParams;
struct TileManagerParams;
struct RecordRefUserVariableTypeBase;
struct ItemPortHostComponentParams;
struct MissionPropertyValue_Object;
struct MissionScenarioScheduleConstraint;
struct UIWorldDisplayAutoRotationParams;
struct BuildingBlocks_BindingsTransformBase;
struct ChatCommandName;
struct GlobalAudioSettings;
struct BuildingBlocks_BindingsRotationBase;
struct MeleeComboChainLink;
struct SStartFillingGasTankGameplayTrigger;
struct ControlHintCondition_TryOnState;
struct CommunicationATLConfig;
struct SMisfireDamage;
struct SSCSignatureSystemSDFCrossSectionParams;
struct SDoorCollisionReactionBaseParams;
struct BlueprintCategoryRecord;
struct SARMarkersParams;
struct PlayerShipRespawnShipInfo;
struct STransponderObjectMetadataParams;
struct RearmRefuelTerminalParams;
struct GlobalJumpDriveEntryEffectParams;
struct SetTriggerableDeviceActiveEvent;
struct CameraCollisionConfig;
struct QuantumDriveEffectSettings;
struct AreaOutdoorMaterialParams;
struct SInteractorHintActivator;
struct SSCSignatureEmissionBaseModifier;
struct InteractiveVariable_BackToDefaultIntParams;
struct SOrbitComponentParams;
struct SHackingCodeSystemLogEntry;
struct ConsumableEffectModifyActorStatus;
struct SGasPressureRangeParams;
struct CameraDistanceConfig;
struct AudioRtpc;
struct BuildingBlocks_TriggerCloseContextMenu;
struct InnerThought_LayoutBase;
struct LinkedStatRulePassCrossingAboveThreshold;
struct SILayerEntitiesGroupManager;
struct BoidsActorRepelRule;
struct BlueprintCategoryAvailability_Base_NonRef;
struct AccessibilityBaseParams;
struct PlanetNavigationVolumeParams;
struct BuildingBlocks_PreviewSceneHoloVolume;
struct ConstantDOFPosWeights;
struct SProjectedPitchLadderParams;
struct UsableSlottingReferenceElementBase;
struct Marker_AbilityOverrideDisplayName;
struct LightSizeParams;
struct SSCSignatureSystemAudioOverride;
struct BuildingBlocks_StaticVariableLocalization;
struct BuildingBlocks_FlexContainer;
struct SEntityEffectSystem_OverrideValueModifier;
struct CommsChannelDef;
struct SJumpPointPushAreaParams;
struct MarkerTrackingDisplayParameters;
struct BuildingBlocks_FieldModifierEnumeratedTypeDustParticleMovementRestriction;
struct WeaponAIAimingMethodDirect;
struct BaseSpawnerPrerequisite;
struct HaulingMissionHelperComponentParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexWrap;
struct ControlHints_ActionInput;
struct SMatchChannel;
struct HintManagerParams;
struct SSpawnOnlyOnRequest;
struct SEntityComponentSmoothingModificationObjectParams;
struct MissionInitParamBoolean;
struct SSequencerItemDoorTaskParams;
struct SEntityObjectCharacterComponentParams;
struct LinkedStatRulePassAlwaysNegative;
struct QuickAccessWheelAutoOperatorModeDef;
struct ControlHintCondition_ActorSightZeroMode;
struct EntityTemperatureSignature;
struct SActorDeathPoseVariant;
struct FireHazardSpawnParams;
struct ControlHintCondition_VehicleMainThrustersState;
struct ControlHintCondition_VehicleDestroyedState;
struct TriggerSubConditionActionAreaDef;
struct ExtendedNameEntryTextBase;
struct BulletElectronParams;
struct DeltaSignatureSensitivityParams;
struct SDFMRaceObjectives;
struct WaterShapeComponentParams;
struct SCZeroGLaunchParams;
struct AutoMountRadiusParams;
struct StringUserVariableTask;
struct SWeaponAimDofSettings;
struct BuildingBlocks_StandardContainerMode;
struct MissionScenarioScheduleRecurrence;
struct MusicLogicNode;
struct CraftingCost_Base_NonRef;
struct SCIGTestBase;
struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitHorizontalAlignment;
struct PlacementValidatorPlacingOnMineable;
struct MissionInitParamInteger;
struct BuildingBlocks_StaticArrayDataIntegerRange;
struct TriggerSubConditionPlayerActionDef;
struct ControlHintCondition_VehicleSalvage;
struct SendDockingEnableEvent;
struct LongTermPersistenceSubTypeAll;
struct DaylightParticleGroupComponentParams;
struct RestrictedAreaATCComponentParams;
struct PopupParams;
struct AreaShapeComponentParams;
struct ControlHintCondition_ActorPoseState;
struct FireVoxelSelectionShape;
struct SCIGTestA;
struct SSetHazardEnabledStateGameplayTrigger;
struct BuildingBlocks_FieldModifierEnumeratedTypeIconWidgetPreset;
struct UIGraph_VehicleLoadoutEditorContextComponent;
struct SignatureParams;
struct SetDoorAutoCloseGameplayTrigger;
struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeAlignment;
struct BaseItemModifierParams;
struct GravityShapeComponentParams;
struct JumpDriveWakeParams;
struct SItemPortConnectionParam;
struct ActorStateData_StateValidationParams;
struct DefaultAction_InteractionDef;
struct LinkedStatRulePassAboveThreshold;
struct ShipServicesProviderParams;
struct SPayFinesGameplayTrigger;
struct BaseCargoFillCapacityValue;
struct SEASpawnRespawnWaveSchedulerParams;
struct ControlHintCondition_ActorAbilityAvailable;
struct VehicleEditorValueData;
struct GasCloudLightNoiseParams;
struct ControlHintCondition_VehicleEquippedComponents;
struct GasCloudVDBDataParams;
struct SPersistentComponentParams;
struct LocStringUserVariable;
struct BuildingBlocks_PreviewScreenWorldRoot;
struct SActorForceReactionEffectRangeDef;
struct IMannequinActionDef;
struct ConsumableParams;
struct SCarryParams;
struct SEntitityEffectSystem_SystemBase;
struct SSequencerTurretRecenterTaskParams;
struct UIGraph_PMAContextComponent;
struct SVehicleHintActivator;
struct CriminalRecordUIProviderParams;
struct ChatFilter;
struct SRtpcBehaviour;
struct TransitPeripheralParams;
struct BuildingBlocks_ComponentParameterInputLocalization;
struct TransportResponsiveGatewayControlPanelParams;
struct SCItemRadarDisplayScreenParams;
struct MovementRecordingParams;
struct SActorDeathBehaviour;
struct CraftingResearchUnlock_Base;
struct FoIPConfigurationProviderParams;
struct ControlHintCondition_ActorMissionOfferReceived;
struct BuildingBlocks_TriggerModifyString;
struct BuildingBlocks_StaticArrayDataNumberRangeRandom;
struct LightProjectorParams;
struct ContractPrerequisiteBase;
struct Deg3;
struct AreaBaseComponentParams;
struct ShopFranchise;
struct SMissionEntryTrackerParams;
struct SCItemClothingHiddenPartsParams;
struct SecurityManualInput;
struct HologramParams;
struct SExplosiveEntryTrackerParams;
struct SEntityandAttachmentsHighlightNode;
struct DevOwnerType_Base;
struct EntityEffectSystem_BaseSequencerTask;
struct ControlHintCondition_ActorStatusEffectAcive;
struct SWeaponActionFireTractorBeamRotationParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeScrollPolicy;
struct AIFormulaScoreModifiers;
struct ItemResourceDynamicResourceFuelTank;
struct SSubstractHealthRatio;
struct ProximityAssistModifierParams;
struct SActorForceReactionLeanFilterItemDef;
struct SCItemLightGroupControllerParams;
struct BuildingBlocks_StringIntegerPair;
struct BuildingBlocks_FixedOrRelativeValue;
struct SSpawningBase;
struct UI3DDisplayInput;
struct SGeometryModelTagBase;
struct CommunicationVariableString;
struct CraftingResearch_Base;
struct BuildingBlocks_Range;
struct InnerThought_CycleAnimRotateY;
struct WeatherEffects_Atmosphere;
struct TemperatureDamageControl;
struct JumpDriveVelocityStrengthParams;
struct BuildingBlocks_SlicerBase;
struct SWeaponActionFireTractorBeamMovementParams;
struct STargetByRaycast;
struct ContactTaggingSharedParams;
struct SSCSignatureEmitterParams;
struct ReputationValueSetting;
struct INavigationCostVolumeExtender;
struct EntityComponentRttAspectMFDScanningParams;
struct LinkedStatPassCustomValue;
struct SCarryAnimationParams;
struct Marker_AbilityProximityVisibility;
struct LegacyMobiGlasParams;
struct BuildingBlocks_StackContainer;
struct SWeaponActionFireTractorBeamGrappleParams;
struct HarvestableOverrideAreaParams;
struct HarvestableTagListString;
struct BuildingBlocks_ComponentParameterInputInteger;
struct SEntityEffectSystem_BlinkingModifier;
struct PlayerHostilityAccidentalFireParams;
struct HarvestConditionHealth;
struct AerodynamicCurveParams;
struct ItemResourceDynamicAmountFuelNozzleFuel;
struct ControlHintCondition_VehicleDocking;
struct HackingChipParams;
struct SEntityTraversingNodeTypeParentEntity;
struct EntryOptionalData_Base;
struct SEAAnnouncerParamsDef;
struct ControlHintCondition_ActorZeroGEVAState;
struct SAsteroidClusterComponentParams;
struct CraftingGameplayProperty_Base_NonRef;
struct SetDoorPowerStateEvent;
struct SHostilityWantedLevelParams;
struct DeadBodyParams;
struct CraftingOptionEffect_Time;
struct SToolArmDeployCondition_LandingGear;
struct InteriorMapWorldUIRoutePathLineParams;
struct UIGraph_JournalComponent;
struct TypeSubtypeParams;
struct ElectricalStateBase;
struct SBaseResourceUnit;
struct GlobalResourceAudio;
struct CraftingRecipeCosts_Base_NonRef;
struct BoundingBoxTraversalCostShapeConfig;
struct DefaultActionDef;
struct MissionVariableString;
struct PUStateParams;
struct HarvestConditionBase;
struct BuildingBlocks_FieldModifierString;
struct MissionDataBankManagementComponentParams;
struct SRefuelAtmosphereComponentParams;
struct CharacterNameData;
struct SGameRulesComponentParams;
struct BuildingBlocks_TriggerBindingsHyperLink;
struct SGripShapeParams;
struct RadarOptionParams;
struct BuildingBlocks_FieldModifierEnumeratedTypeCanvasWidgetSizingMethod;
struct ConsumableEffect;
struct RGBA;
struct SCoreInventoryItem;
struct LightShadowParams;
struct ResourceTypeVolatility;
struct SubsumptionConversationComponentParams;
struct AudioRtpcWithDefault;
struct GasCloudLightShadowParams;
struct SCuttableShapeObjectParams;
struct DockingAutodockingParams;
struct EASpawnModifierParams;
struct FunctionalityModifierLinear;
struct SCItemTurretCustomAngleLimit;
struct RefineryNotificationConfiguration;
struct ItemResourceDynamicResourceBase;
struct ItemResourceControlParameterRNParameter;
struct BuildingBlocks_FieldModifierEnumeratedTypeCaseModifier;
struct BaseMissionPropertyValue;
struct SEntityTraversingNodeTypeZoneHostEntity;
struct DamageInfo;
struct SEntityTraversingNodeTypeParams;
struct QuantumDriveNotification;
struct UIGraph_MissionMgrComponent;
struct BuildingBlocks_OrbitTransformer;
struct LinearModifierInterpolator;
struct AreaTriggerParams;
struct AISeatWeaponControllerComponentParams;
struct SEARounds;
struct StatusEffect;
struct CraftingGameplayPropertyImplValueRange_Float;
struct WeaponAIAimingMethodPreferredHeightArc;
struct SpeedThreshold;
struct BuildingBlocks_ComponentParameterInputBase;
struct SEntityTraversingNodeTypeRootEntity;
struct InventoryContainerTypeBase;
struct FixedPowerPool;
struct BoidsNavmeshEdgeRepelRule;
struct UIGraph_ShopKioskVehicleLoadoutEditorContextComponent;
struct SActorForceReactionProceduralLeanPoseList;
struct SSubstractHealthValue;
struct LoadoutResponseParams;
struct SMastergraphStateOverride;
struct Marker_AbilityEntityGeometry;
struct SMissionMarkerObjectMetadataParams;
struct UIGraph_SkyLineComponent;
struct RGB8;
struct SDamageMapShaderValueDetails;
struct PlanetWeatherParams;
struct EntityComponentResourceNetworkUIProviderParams;
struct DynArray_float;
struct DynArray_bool;
struct DynArray_ARDataType;
struct DynArray_CryStringT;
struct DynArray_CLocIdentifier;
struct DynArray_int64_t;
struct DynArray_int32_t;
struct DynArray_uint32_t;
struct DynArray_int8_t;
struct DynArray_int16_t;
struct DynArray_uint8_t;
struct DynArray_uint16_t;
struct DynArray_uint64_t;
struct DynArray_double;
struct DynArray_CraftingResult_Base;
struct BuildingBlocks_SVGContainerMode;
struct ArmorMoveViewRestrictions;
struct DynArray_SShieldAbsorption;
struct SEntityTraversingNodeUniqueId;
struct BulletVisualParams;
struct DynArray_SApplicationFormHead;
struct DynArray_BuildingBlocks_BindingsPathBase;
struct DynArray_SMFDOperatorModeConfig;
struct DynArray_StanceBreathModifier;
struct DynArray_VehicleEditorCapability;
struct DynArray_FireHazardFireProperties;
struct DynArray_ControlHints_KeyInput;
struct DynArray_SSCSignatureSystemAudioSubRule;
struct DynArray_SEffectParamsNodeBase;
struct DynArray_MovementSpeedOverride;
struct ActorRestrainPerAttackerConfig;
struct JumpTunnelCubeMapParams;
struct DynArray_SCDynamicRigLightEnabledParams;
struct DynArray_ItemResourceControlConditionBase;
struct BuildingBlocks_FieldTransitionBase;
struct BuildingBlocks_LayoutItemCommon;
struct BuildingBlocks_FieldTransitionNumber;
struct BuildingBlocks_FieldTransitionColor;
struct DynArray_BoolUserVariableTask;
struct SSetHealthGameplayTrigger;
struct DynArray_VehicleSerialNumberCharacterType;
struct DynArray_SCharacterCustomizerBlemishMapParams;
struct DynArray_BuildingBlocks_TextFormatModifierBase;
struct DynArray_SArmouryItemFilter;
struct MagLaunchParams;
struct SimpleSpriteSlotDouble;
struct SimpleSpriteSlot;
struct DynArray_ScanCustomData;
struct DynArray_SWeaponActionAIParams;
struct DynArray_GameModeFilter;
struct DynArray_ActionAreaExtensionType;
struct DynArray_AnnouncementGameToken;
struct VisibilityCondition;
struct DynArray_VisibilityConditionDef;
struct PlayerTradeGlobalParams;
struct DynArray_PlanetEffectLODDistance;
struct DynArray_EntityComponentHealth_SBaseSequencerTask;
struct ActorStatusAddBuff;
struct ConsumableEffectAddBuffEffect;
struct SLoadoutRequirementNOT;
struct DynArray_SLoadoutRequirementBase;
struct RestrictedAreaPatchParams;
struct ScreenEffects_ParamValue_Texture;
struct DynArray_GlobalResourceTexture;
struct BuildingBlocks_BindingsColorFromString;
struct BindingsOperation_BooleanFromStringIsEmpty;
struct BuildingBlocks_StringStringPair;
struct BuildingBlocks_NumberStringPair;
struct BindingsOperation_BooleanFromStringComparison;
struct BuildingBlocks_IntegerStringPair;
struct BindingsOperations_StringCombine;
struct DynArray_MusicLogicEvent;
struct BuildingBlocks_BindingsBooleanCompare;
struct BuildingBlocks_BindingsStringFromBoolean;
struct BuildingBlocks_BindingsBooleanInvert;
struct DynArray_BuildingBlocks_BindingsBooleanBase;
struct DynArray_MissionVariableBase;
struct DynArray_ContextMenuOption;
struct DynArray_HoldExhaleDuration;
struct DynArray_ItemPortViewInformation;
struct DynArray_SActorForceReactionsProceduralLeanOverride;
struct DynArray_VibrationTypeData;
struct DynArray_CtxGraph_Node;
struct GameRulesEAStatePreGameParams;
struct SQedVisualGraphTransitionParams;
struct SProjectileLauncher;
struct DynArray_BaseMissionModifier;
struct DynArray_SelectionTab;
struct ElectricalStateTemplate;
struct SExtinguisherVectorFieldParams;
struct DynArray_PlayerChoiceMenuOption;
struct DynArray_DisplayState;
struct DynArray_BuildingBlocks_Node;
struct DynArray_MissionLocationValidation;
struct DynArray_PersonalThoughtInventoryFilter;
struct BuildingBlocks_ColorIntegerPairDef;
struct BuildingBlocks_FieldModifierColor;
struct BuildingBlocks_GeomEntityEffect;
struct BuildingBlocks_EntityEffectBase;
struct BuildingBlocks_Background;
struct BuildingBlocks_ColorFromBooleanToggle;
struct BuildingBlocks_BorderSide;
struct BuildingBlocks_ExternalColorReference;
struct BuildingBlocks_LightParams;
struct BuildingBlocks_EntityEffectSilhouette;
struct BuildingBlocks_SvgFill;
struct DynArray_BuildingBlocks_ColorBase;
struct DynArray_SCIGTestB;
struct SModifyHealthGameplayTrigger;
struct SCSeatAccessBaseInteractionParams;
struct DynArray_MissionScenarioCyclePhase;
struct SSalvageArmParams;
struct WeaponProceduralClipHandsOverlay;
struct CameraRotationConfig;
struct Quat;
struct SCameraViewStateOrbit;
struct CraftingRecipe;
struct DynArray_AIMeleeAttack;
struct BodyJoint;
struct DynArray_BodyPart;
struct DynArray_AudioBreathStyleBaseNode;
struct DynArray_SSpecializedDataEntry;
struct ProceduralEntityAudioParams;
struct DynArray_AudioSwitch;
struct DynArray_ItemTypeModifier;
struct DamageResistance;
struct SEntityDensityClass;
struct DynArray_AISpecialRangedAttackConfig;
struct EntityComponentWaterImpactTestParams;
struct SCActorCollisionAvoidanceParams;
struct BuildingBlocks_ShapeQuad;
struct SCharacterCustomizerHairRandomizationParams;
struct SItemPortDefExtensionTurret;
struct SPowerTriangleVertices;
struct BuildingBlocks_ShapeCircle;
struct EntityComponentWaterDisturbance_NoiseParams;
struct SCharacterCustomizerControlParams;
struct DirectRTT_ChromaticAberrationParams;
struct ActorLookAheadPoint;
struct SCharacterCustomizerComplexionRandomizationParams;
struct LandingSplineVisualParams;
struct ActorFOVViewParams;
struct SSalvageRepairCardParams;
struct MarkerAR_ConfigDef;
struct BuildingBlocks_ShapeBase;
struct PlayerChoice_SoftwareCursorEntry;
struct WeaponProceduralClipRecoil;
struct DuckPose;
struct UIWorldDisplayPathLineParams;
struct PointOfInterestData;
struct SHackingCameraParams;
struct BuildingBlocks_ShapeTriangle;
struct SChargeDrainCardParams;
struct SMiniGameData;
struct BuildingBlocks_RawSlicer;
struct DynArray_Vec2;
struct DynArray_SignatureTypeGlobalParams;
struct LegacyCraftingRecipeDefRecord;
struct LegacyCraftingRecipeDef_Direct;
struct SWeaponSpinAnimationParams;
struct DynArray_SWeaponConditionBase;
struct ScanCustomDataDirect;
struct DynArray_ScanCustomValue;
struct DynArray_ControlHints_Input;
struct DialogueBundleEntry;
struct WeightedDialogueBundleEntry;
struct DynArray_SSequencerInteractionTask;
struct DynArray_EAUIMulticrewTypeOptionParams;
struct StarMapObjectLocationParams;
struct SAreaComponentParams;
struct DynArray_VehicleRole;
struct DynArray_SViewDistanceRatioParams;
struct DynArray_LinkedStatBase;
struct DynArray_HarvestableClusterParams;
struct SReputationStandingRewardBonusParams;
struct DynArray_SReputationStandingParams;
struct DynArray_ModifierInterpolator;
struct RadarDeltaSignatureEntry;
struct DynArray_ItemAwardBase;
struct JumpTunnelCameraEffects;
struct DynArray_SFrontendGameModeButton;
struct DynArray_ForceFeedbackEnvelope;
struct DynArray_CommunicationVariableBase;
struct DynArray_S42CommendationRequirementBase;
struct DynArray_FlightHUDUIMessage;
struct DynArray_SObjectMetadataParams;
struct DynArray_UIElementSoundEntry;
struct CraftingGameplayProperty_Base_Float;
struct CraftingGameplayProperty_Crafter_Speed;
struct SWeaponConditionAmmoCount;
struct MobiglasDisplayLayoutBase;
struct MobiglasDisplayCounter;
struct MobiglasDisplayLocation;
struct DynArray_SDespawnRule;
struct DynArray_DegradationTemperatureMultiplier;
struct DynArray_ForceFeedbackPattern;
struct SeatOperatorSkills;
struct DynArray_VoiceSingle;
struct DynArray_BuildingBlocks_StaticArrayDataBase;
struct SCItemDoorSimpleOpenCloseParams;
struct SCItemDoorFiveWayProceduralParams;
struct SCItemDoorSingleProceduralParams;
struct SCItemDoorAnimationParams;
struct DynArray_UserRTPC;
struct DynArray_UnitTestSubRecord;
struct DynArray_S42StatOperationBase;
struct DynArray_SSequencerActorActionHandlerTask;
struct DynArray_SUsableIdlePoseOverride;
struct SDecayCurveMaxValues;
struct BuildingBlocks_FieldModifierRecordRef;
struct DynArray_SShopUIProviderCategoryIcon;
struct DynArray_UIStateDisplay_Threshold;
struct DynArray_EmotionDescription;
struct ActorStatusBuff;
struct DynArray_SCItemPriorityTagParam;
struct SReputationContextBBPropertyParams;
struct SExtinguisherImpactParams;
struct MistedBreathParams;
struct WeatherEffects_SpaceLoopEffect;
struct DematerializeAnimation;
struct SurfaceParticleRTTParams;
struct SSCLocalPlayerComponentParams;
struct PlanetEffectTestParams;
struct EntityComponentExtinguisher;
struct BlobVFXDistanceParams;
struct FireHazardGlobalDefaultEffects;
struct DynArray_GlobalResourceParticle;
struct DynArray_CommunicationVariableBool;
struct SVehicleHudParams;
struct DynArray_BuildingBlocks_StyleSelectorConditionBase;
struct ActorStatusEffect;
struct BuildingBlocks_KeyframeModifierData;
struct DynArray_BuildingBlocks_FieldModifierBase;
struct MedBedSurgeryNames;
struct DynArray_MobiGlasAuthorizationEntry;
struct DynArray_TestAtomics;
struct ItemResourceControlConditionGravity;
struct DynArray_ItemResourceControlParameterBase;
struct EATransportTransitionGroupParams;
struct ContractDifficulty;
struct DynArray_StarMapAmenityTypeEntry;
struct DynArray_LightningTargetMode;
struct PlanetDayNightTemperatureTemplate;
struct BuildingBlocks_Animation;
struct WorldDisplayEnvironmentBase;
struct DynArray_LegacyCraftingCost_Base;
struct SCItemJumpThrusterPackParams;
struct BoidsBehaviorRuleContainer;
struct DynArray_SActorForceReactionsVehicleForceDampeningDef;
struct SharedTacticParams;
struct DynArray_SAccumulatorParams;
struct WeaponProceduralClip;
struct DynArray_LiteralStringUserVariable;
struct DamageMapDamageTypes;
struct ProcAimBallJointTypeConfig;
struct DynArray_CustomMaterialEntryParams;
struct DynArray_RaSTaRLibraryElement;
struct DynArray_VehicleEditorStat;
struct JournalEntryVideo;
struct DynArray_VideoComms;
struct SEntityDensityClassOverwritesManual;
struct SEntityDensityClassOverwritesRecord;
struct DynArray_SInternalHardpointLink;
struct DynArray_DialogueExternalSource;
struct ScreenEffects_ParamValue_Vec4;
struct QuantumDriveSplineFXParams;
struct DynArray_BaseDataSetMatchCondition;
struct PlayerNotificationBannerParams;
struct DynArray_SStateModifier;
struct DynArray_AnimationGraph_Timer;
struct DynArray_SCharacterCustomizerBaseMaterialSet;
struct DynArray_SCharacterCustomizerWildlineSubconditionBase;
struct BuildingBlocks_FieldModifierEnumerated;
struct CraftingGameplayProperty_Base_Int;
struct DynArray_TriggerSubConditionDef;
struct LocalPlayerSpeedThrottleComponent;
struct BuildingBlocks_DropTargetPolicyBase;
struct SecurityClearance_OutfitRequirement_NotDef;
struct DynArray_SecurityClearance_OutfitRequirementDef;
struct DynArray_AnimationControlActorIK;
struct SMiningDamageMapParams;
struct VehicleAIPropertiesParams;
struct DynArray_IObservableExtender;
struct CameraTargetOffsetConfig;
struct MobiGlasPositionParams;
struct SSimulationParamsPendulum;
struct AeroSurface;
struct SEntityPhysicsWheel;
struct ARMarkerPlayerOffsetParams;
struct SHeadRecoilNoiseModifier;
struct SJumpDriveFlightLinearParams;
struct SARDataComponentParams;
struct CrossSectionGlobalParams;
struct CylinderFieldGeom;
struct SSCSignatureSystemManualCrossSectionParams;
struct SCItemProximitySensorBoxParams;
struct SEffectInputParamsSound;
struct CameraWheeledVehicleConfig;
struct SEntityBasePhysicsGridParams;
struct ThrusterMFXEntityParams;
struct SCItemDoorConnectVisAreas;
struct SGuidanceAndControlPhaseParams;
struct WebRTCCommsCallProjectorLightParams;
struct Primitive_Billboard;
struct CommsNotificationStageActorMark;
struct StickyFilterAutocenterParams;
struct SCItemProximitySensorSphereParams;
struct SCItemDoorHazardLightsParams;
struct SHealingBeamBoneEntryParams;
struct SimpleRotationComponentVariation;
struct SSalvageAreaBoxParams;
struct LandingPadSize;
struct HeadMotionOffsetParams;
struct Texture3DFieldGeom;
struct StickyFilterMovementParams;
struct LandingUIParams;
struct SEntityComponentPlanetAreaParams;
struct EAPickupBaseComponentParams;
struct SEffectInputParamsDC;
struct SJumpDriveFlightRotationParams;
struct ActorCameraOffsetParams;
struct CommsNotificationStageCamera;
struct FireHazardIgniteEvent;
struct ClosestOrientationHandholdAttachSpotChoiceParams;
struct SObservablePointDef;
struct SLoadingAreaParams;
struct HandholdAttachSpotParams;
struct BuildingBlocks_LookAtTransformer;
struct SCLegacyThrustParams;
struct QuatT;
struct SSensorMineProximityTrigger;
struct AirlockAreaParams;
struct SEntityBoxPhysicsGridParams;
struct TorusFieldGeom;
struct VehicleLandingGearSpring;
struct SCSeatHeadPosAdjustSetup;
struct ShadowRegionEntityComponentParams;
struct SDecalParams;
struct SSensorMineLaserTrigger;
struct CommsNotificationStageBase;
struct EAPickupFPSParams;
struct SInteractionPointCuboidPrimitiveParams;
struct SActorStanceHeadSphereDef;
struct Matrix34;
struct SXYZCurvesWithMaxValuesModifer;
struct VolumeShape_Box;
struct SElevatorCustomCollisionParams;
struct SSimulationParamsBase;
struct GlobalFogVolume;
struct HarvestableTransformParams;
struct ConstraintParams;
struct CameraGForceShakeConfig;
struct GravityBoxParams;
struct SWeaponAttachmentItemPort;
struct BreathingHelperParams;
struct SEffectInputParamsParticle;
struct WeaponProceduralClipRaise;
struct SConversationIconParams;
struct WeaponProceduralClipLean;
struct SShakeParams;
struct SSafeTeleportPointParams;
struct Primitive_Ring;
struct PlayerAnimatedInteractionWalkingRequestParams;
struct FireHazardFogNoiseParams;
struct FireVoxelSelectionShape_Box;
struct VolumeShape_Ellipsoid;
struct LoadoutItemPreviewTransformParams;
struct LandingAreaComponentParams;
struct SIFCSAuthoredMotionLimits;
struct SItemShopReference;
struct SAngleConstraint;
struct ShockwaveParams;
struct SCAngularMovementParams;
struct SFrontendS42ActionSettings;
struct MiningCameraShakeConfig;
struct SEntityVisAreaPhysicsGridParams;
struct Primitive_Quad;
struct CapsuleFieldGeom;
struct SBoxHazardAreaShapeParams;
struct LandingAreaGroupParams;
struct SEntityTargetingProperties;
struct ProceduralAnimationBone;
struct SEntitySpherePhysicsGridParams;
struct CameraSourceShakeParams;
struct ProcAimHingeJointTypeConfig;
struct SCItemDisplayScreenGlobalLightParams;
struct SUnifiedShakeParamsDef;
struct TransitGatewayParams;
struct SEntityCGFPhysicsGridParams;
struct SInteractionPointSpherePrimitiveParams;
struct SEntityVoxelPhysicsGridParams;
struct ObjectiveMarkerLocation;
struct CommsNotificationStageListItem;
struct EAPickupVehicleParams;
struct MarkerTrackingLayoutParameters;
struct EAPickupSpecialEventOverrideParams;
struct SEntityEffectSystem_OverrideVectorValueModifier;
struct LedgeNearbyParams;
struct Primitive_Line;
struct SEntityComponentRoomConnectorParams;
struct SCEntranceItem;
struct CameraSpeedShakeConfig;
struct RParticleFieldNodeComponentParams;
struct SphereFieldGeom;
struct BoxAreaAlignmentSlotTypeParams;
struct CameraShakeConfig;
struct ItemPreview_TurntableSettings;
struct WindAreaParams;
struct GravityBaseParams;
struct SJumpDriveFlightTurbulenceNoiseParams;
struct RaceCheckpointComponentParams;
struct SCItemDoorCodeProceduralParams;
struct SWeaponProceduralClipSwayOvershoot;
struct HoverPlane;
struct ExitCollisionCheckOverrideParams;
struct SThrowMode;
struct CustomLookAtBB;
struct CameraShopItemOffset;
struct LoadoutDummyTransformParams;
struct CameraSpringAxesConfig;
struct SCItemDeployableShieldParams;
struct BlockingHelperComponentParams;
struct SActorProceduralHandsRecoilCurveDecayModifiersDef;
struct Looping_Quad;
struct EntityLinkTargetingParams;
struct UIInteriorMapSectionParams;
struct SCDynamicRigLightParams;
struct SCLinearMovementParams;
struct ToxiInputModifierAxis;
struct GravityAreaParams;
struct QuatTS;
struct SEntityComponentRectangleModificationObjectParams;
struct DynArray_Vec3;
struct DynArray_SMisfireCondition;
struct SMobiGlasAppDataPacket;
struct DynArray_LegacyCraftingOutput_Base;
struct DynArray_SOrdnanceEmissionsParams;
struct SSCItemControllableManagerParams;
struct SCItemControlUsableParams;
struct DynArray_GeomFont_LetterNode;
struct ItemPreview_LightingSettings;
struct DynArray_SMobiGlasPersonalStatusSkillsEntry;
struct DynArray_FoleyBone;
struct DynArray_BaseService;
struct DynArray_DrugEfficacyConfigForItemSubTypeBase;
struct DynArray_ProcAimBaseJointTypeConfig;
struct DynArray_SSequencerEntityDragTaskParams;
struct DynArray_SSequencerDespawnerTaskParams;
struct DynArray_SHackingAIDecisionParams;
struct DynArray_LightStatusMultiplier;
struct LinkedStatSetup;
struct ItemHeatModifierParams;
struct LifetimeControlledItemModifierParams;
struct ItemMiningBoosterParams;
struct ItemSignatureModifierParams;
struct TurretModifiersParams;
struct ScanDisplayScanDataEntryVariableParams;
struct ScanDisplayContactTypeVariableParams;
struct ScanDisplayHeaderOnlySetupParams;
struct ScanDisplayDeltaSignatureVariableParams;
struct ScanDisplayStandardSetupParams;
struct ScanDisplayHeaderWithBodySetupParams;
struct ScanDisplayLocStringVariableParams;
struct ScanDisplaySignatureSetupParams;
struct DynArray_RoomExtension;
struct DynArray_PlacementValidator;
struct DynArray_SApplicationFormRelationParams;
struct DynArray_SAnimationScopeContext;
struct DynArray_LoadoutEditorAdditionalParams;
struct AtmosphereStateMultiRef;
struct TeamPhaseSettingsDef;
struct DynArray_SEACriticalMessageDef;
struct DynArray_ContractIntParam;
struct DynArray_SActorForceReactionLeanBoneDef;
struct EntityComponentFireRepairer;
struct DynArray_BuildingBlocks_NumberCompareCondition;
struct ProceduralLayoutNode_Start;
struct DynArray_ProceduralLayoutNode_Base;
struct PlanetRoomParams;
struct DynArray_WeatherEffects_Asteroid;
struct DynArray_ItemResourceNetworkPowerModifier;
struct CraftingRecipeResultsRecord;
struct InnerThought_Anim;
struct DynArray_CraftingGameplayProperty_Base;
struct RadiationBehavior;
struct DynArray_PersonalThoughtOption;
struct CrafterComponentParams;
struct EntityComponentRoomFadeVolumeParams;
struct DynArray_CockpitRuleBase;
struct DynArray_SHelmetLinkedState;
struct DynArray_SActorForceReactionStaggerTagConfig;
struct DynArray_DefaultActionDescriptionOverride;
struct DynArray_SWeaponAimableAnglesParams;
struct SActorStanceTrailSphereDef;
struct SUsableMovementAlignmentParams;
struct DynArray_CraftingBlueprintTier_Base;
struct LedgeObjectComponentParams;
struct SCItemControlPriorityTag;
struct DynArray_SpecialEventManufacturer;
struct DynArray_SandboxTriggerBaseDef;
struct DynArray_IntUserVariableTask;
struct DynArray_SScoreboardStat;
struct CommunicationRequest;
struct SEntityObjectContainerGridProperty;
struct SEntityVoxelGridProperty;
struct SEntityGridProperty;
struct StarMapPartyMemberObject;
struct MeshFieldGeom;
struct SEntityBoxGridProperty;
struct StarMapMissionObject;
struct ConsumableFoodAttachment;
struct ConsumableAttachment;
struct SEntitySphereGridProperty;
struct SEntityCgfGridProperty;
struct BuildingBlocks_FieldModifierRecordRefTypeFontStyleRecord;
struct RecordRefUserVariableTypeFontStyle;
struct BuildingBlocks_FontReplacementPair;
struct BuildingBlocks_StaticVariableFontStyle;
struct BindingsOperations_IntegerStringFontStylePair;
struct DynArray_DeltaSignatureSpikeParams;
struct SWeaponConditionHeatLevel;
struct DynArray_BoneCounterRotateConfig;
struct EAScoringVehicleComponentParamsDef;
struct EAScoringActorComponentParamsDef;
struct DynArray_ContractStringParam;
struct HarvestableParams;
struct SAccolade;
struct DynArray_SAccoladeRequirement;
struct ItemTypeCategoryException;
struct DynArray_ItemTypeCategory;
struct SJumpTunnelFailureParams;
struct JumpDriveExitParams;
struct GlobalJumpTunnelPassByLightParams;
struct GlobalEngineTrailsSetting;
struct GlobalAerodynamicTrailSettings;
struct ElectricalCalculationPropertyRange;
struct SJumpTunnelSectionControlPointGenerationParams;
struct JumpDriveTravelParams;
struct FireHazardGlobalPropagation;
struct SWeaponAIChargedParams;
struct VectorFieldParams;
struct WeaponFlickerParams;
struct WaterInteractionEffectParams;
struct GlobalAtmosphericHeatingSettings;
struct SJumpTunnelObstacleGenerationParams;
struct SWeaponAIRapidParams;
struct GlobalJumpTunnelFogParams;
struct LightningStrengthDriver;
struct SurfaceRaindrops_Emitter;
struct SActorForceReactionSustainedImpulseDef;
struct CounterMeasureChaffParams;
struct HoverHeight;
struct AerodynamicTrailCalculationGasCloudOpticalDensityRange;
struct EntityFireHazard;
struct SActorForceReactionExternalImpulseDef;
struct AerodynamicTrailCalculationPropertyRange;
struct ShockDiamondParams;
struct DynArray_Range;
struct DynArray_DifficultyModifierRange;
struct DynArray_ContextualCommunicationCondition;
struct DynArray_HealthIconStatusEffect;
struct DynArray_TimeTrialSplit;
struct DynArray_ConsumableHelpers;
struct ShieldTypeParams;
struct SunLightComponentParams;
struct GasCloudVDBLightingParams;
struct DirectRTT_DropShadowParams;
struct HudColor_HoloMatColors;
struct CinematicTriggerParams;
struct TintEntry;
struct FactionPalette;
struct ChatManagerColor;
struct SCommentEntityParams;
struct DynArray_SRGB8;
struct DynArray_SToolArmDeployCondition_Base;
struct DynArray_ResourceTypeProperties;
struct DynArray_LookAtType;
struct SCItemRadarSensitivityModifier;
struct DynArray_LadderAnimationOffset;
struct Item;
struct DynArray_AudioValueOutputBehaviour;
struct CargoGridOccupantProperties;
struct DynArray_SHackingThreatLevelConditionParams;
struct SSilhouetteParamsDef;
struct LightStateParams_Aux;
struct FogVolumeComponentParams;
struct SSalvageRepairHighlightColorParams;
struct LightStateParams_Default;
struct ParticleEffectFixedTintingParams;
struct ExplosiveOrdnancePingVFX;
struct STargetSelectorColorHighlighting;
struct SChargeDrainHighlightOutlineValues;
struct CameraLensGhostInstance;
struct EnvironmentLightStateParams_Default;
struct ParticleEffectRandomTintingParams;
struct SCharacterCustomizerRandomColorDef;
struct FireHazardGlobalLightParams;
struct EnvironmentLightStateParams_Emergency;
struct EntityComponentConsumableLiquidSourceParams;
struct STintParamsDef;
struct PooledLightData;
struct SSalvageGlobalStructuralHighlightParams;
struct CameraLensStreak;
struct SGlobalCuttableShapeParams;
struct EnvironmentLightStateParams_Cinematic;
struct LightStateParams_Cinematic;
struct SObjectSilhouetteParamsDef;
struct EntityEffectSystem_OverrideColorModifier;
struct GasParams;
struct JumpTunnelEffectTintingParams;
struct EnvironmentLightStateParams_Aux;
struct LightStateParams_Emergency;
struct InnerThought_ColorParams;
struct DynArray_RGB;
struct SSensorMineComponentParams;
struct ActorStanceSpeedsInfo;
struct DynArray_Marker_AbilityBase;
struct DynArray_SDynamicDifficultyPointsPerEvent;
struct ResourceTypeDensity;
struct DynArray_ActorStatusUIWarningEntry;
struct SVecWithNoiseParams;
struct DynArray_StatusCost;
struct DynArray_BuildingBlocks_StaticVariableBase;
struct DriftingDrunkConfig;
struct DynArray_EntityAudioControllerTypeManagementParams;
struct DynArray_EAPatchNoteParams;
struct ActorEnvironmentalMovementModifiers;
struct AbilityStaminaStates;
struct ActionStaminaCosts;
struct GameRulesEAStatePostGameParams;
struct SCItemConditionalPriority;
struct DynArray_SCItemControlCondition_Base;
struct AtmosphereStateTemplate;
struct STargetingParams;
struct DynArray_SEntityEffectSystem_PropertyModifier;
struct ActorActionHandler_ValidationParams;
struct GlobalGasParams;
struct DynamicCameraEffects;
struct DynArray_UIOwnerContextTransitionPair;
struct SHintGameplayTrigger;
struct BuildingBlocks_BindingsLocalizedCurrencyFromNumber;
struct BuildingBlocks_BindingsColorFromNumberRGBA;
struct BuildingBlocks_BindingsNumberArithmatic;
struct BuildingBlocks_BindingsNumberFunction;
struct BuildingBlocks_BindingsNumberRound;
struct BindingsOperations_LocalizationTimeFormatDuration;
struct BuildingBlocks_BindingsNumberEase;
struct BuildingBlocks_IntegerNumberPair;
struct BuildingBlocks_BindingsLocalizationTimeFormat;
struct BuildingBlocks_BindingsNumberClamp;
struct BuildingBlocks_BindingsIntegerFromNumber;
struct BuildingBlocks_BindingsNumberFromBoolean;
struct BuildingBlocks_BindingsNumberAtan2;
struct BuildingBlocks_BindingsNumberInterpolate;
struct BuildingBlocks_BindingsLocalizationFromTemperature;
struct BuildingBlocks_BindingsBooleanFromNumber;
struct BuildingBlocks_BindingsLocalizedFromNumber;
struct BuildingBlocks_BindingsColorFromNumberInterpolate;
struct BuildingBlocks_BindingsLocalizationFromDistance;
struct BuildingBlocks_BindingsVectorFromNumber;
struct DynArray_BuildingBlocks_BindingsNumberBase;
struct DynArray_ScanDisplaySortInfoParams;
struct DynArray_StatusPriorityBase;
struct DynArray_SReputationMissionRequirementExpressionElement;
struct TakeDownParams;
struct DynArray_CraftingCost_Base;
struct SInitialDamage;
struct ActorViewLimitPreset;
struct ActorAimAndLookLimitsStateFilter;
struct ActorLookLimitsStateFilter;
struct ActorAimLimitsStateFilter;
struct DynArray_RGBA8;
struct TaggedSubHarvestableConfig;
struct SInventoryParams;
struct InventoryClosedContainerType;
struct DefaultActionsEntityEntryConditionDef_InventoryContainerCapacity;
struct DynArray_SEntityTraversingExecuteNodeBase;
struct DynArray_HandholdGripType;
struct DynArray_BuildingBlocks_TriggerBase;
struct DynArray_SEnergyPipeDefinition;
struct DynArray_AnimationGraph_KeyFrame;
struct EnvironmentTemperatureParams;
struct DynArray_SStatusTriggerThresholdLevelModifier;
struct DynArray_SHackingCodeErrorEntry;
struct DynArray_SActorLocomotionFidgetSeverityParams;
struct DynArray_Investigation_Clue;
struct CraftingBlueprintRecord;
struct AnimationScalarVariable;
struct AnimationPlayerInputVariable;
struct AnimationFloatVariable;
struct AnimationVariable;
struct DynArray_SScoreEvent;
struct DynArray_RemovableChipValue;
struct EntityUIDisplayParams;
struct DynArray_CommodityType;
struct SEAGameFeedParams;
struct SMisfireEventParams;
struct BuildingBlocks_BindingsNumberWaveform;
struct SUIWarningGameplayTrigger;
struct DynArray_AbstractMissionInitParam;
struct DynArray_ActorMovementSetTransition;
struct DynArray_AudioSignalRtpc;
struct BuildingBlocks_PrimitiveSettings;
struct DynArray_AIVisualFieldParams;
struct DynArray_SChatChannelTypeBase;
struct MiningLaserModifiers;
struct MiningFilterParams;
struct SSignaturesCategoryEntry;
struct DynArray_RadarSignatureCategoryEntry;
struct HolographicVolumeParams;
struct DynArray_SItemPortRuleDef;
struct DynArray_Marker_ShowRule;
struct LootConstraints;
struct ActionRuleDisplayParams;
struct SDisruptionGameplayTrigger;
struct FunctionalityModifiers;
struct DynArray_ResourceRangeParams;
struct DynArray_FloatUserVariableTask;
struct ConversationNode_BaseNext;
struct ConversationNode_VariableGameToken;
struct ConversationNode_Start;
struct ConversationNode_ConditionalGameToken;
struct ConversationNode_FlowGraphEvent;
struct ConversationNode_Wait;
struct DynArray_ConversationNode_Base;
struct DynArray_EventDispatcher;
struct DynArray_InnerThought_CycleAnimBase;
struct DynArray_LoadoutInfo;
struct CommsNotificationSelector;
struct HaulingOrderBase;
struct MissionFlowCondition_PropertyIsSet;
struct DynArray_ObjectivePropertyBase;
struct DynArray_ScoreMessage;
struct DynArray_SMatchNetworkTypeParams;
struct DynArray_LongTermPersistenceWhiteListSubTypeEntry;
struct LongTermPersistenceWhiteListEntry;
struct DynArray_PlayerChoice_InteractionModifier;
struct DynArray_OrbitEntityCinematicEvent;
struct DynArray_SSequencerItemActionTask;
struct PersonalThoughtInventoryMenu;
struct PersonalThoughtAction;
struct PersonalThoughtActionDescription;
struct DefaultAction_ActionDef;
struct AnimatedAction;
struct PersonalThoughtPlayerItem;
struct QuickAccessWheelActionDef;
struct QuickAccessWheelActionStateDef;
struct DynArray_InputAction;
struct SMisfireGenerationParams;
struct CameraDockingConfig;
struct CameraViewFirstPersonSpectatorParams;
struct CameraBaseConfig;
struct CameraSimple3PConfig;
struct CameraTrackviewConfig;
struct DynArray_PostureData;
struct DynArray_SEAObjectiveMarkerStateSettings;
struct DynArray_UIStateColor_Threshold;
struct DynArray_SReputationContextBBEntityListParams;
struct MarkerTrackingCommonMapParameters;
struct SCItemAttachableObjectContainerParams;
struct SActorProceduralAimRecoilCurveModifiersDef;
struct DynArray_ItemResourceNetworkTypeUIData;
struct DynArray_EntitlementItemType;
struct DynArray_ArmouryItemStat;
struct DynArray_ItemAwardWeightingsBase;
struct DynArray_SSalvageRepairItemTypeLocalizationPair;
struct DynArray_SShieldResistance;
struct CargoLoadingNotificationParams;
struct ServiceBeaconNotificationParams;
struct PlayerDockContextComponentGlobalParams;
struct RadiationState;
struct RadiationStateTemplateInternal;
struct DynArray_ActivityDataRecord;
struct SEntityArticulatedPhysicsControllerParams;
struct SEntityBasePhysicsControllerParams;
struct SEntityStaticPhysicsControllerParams;
struct SEntitySoftExPhysicsControllerParams;
struct SEntitySoftDeprecatedPhysicsControllerParams;
struct SEntityActorPhysicsControllerParams;
struct SEntityDummyPhysicsControllerParams;
struct CraftingMaterialStatEntry;
struct DynArray_CraftingMaterialStatTypeRecord;
struct DynArray_SCItemRadarSignatureDetection;
struct DynArray_PlayerChoice_Option;
struct DynArray_SSequencerPlayerUsableTaskParams;
struct DynArray_SEAActionItemMessageDef;
struct BulletDamageDropParams;
struct HitBehaviorDamageOverTime;
struct SWeaponActionFireBeamChainParams;
struct SInitialDamageSpecifierFixed;
struct HazardComponentParams;
struct SCItemVehicleArmorParams;
struct SControlledEntityRopeAttachmentPair;
struct SAutoCraneParams;
struct SControlledEntityStaticTransformParams;
struct UsableGroupCoordinatorDataParams;
struct SCharacterCustomizerClippingVolumeParams;
struct DynArray_EntityReferenceDef;
struct ActorSomaticShakeConfig;
struct DynArray_StarMapAsteroidRing;
struct ForceFeedbackEffect;
struct DynArray_SAttachableEntityParams;
struct DynArray_AudioFootstepSurfaceMapping;
struct GasCloudOverrideVolumeParams;
struct SVehiclePhysicsGridParams;
struct AsteroidProcedural;
struct GeometryInstancer_Serialized;
struct DynArray_SHideAmmoAttachmentParams;
struct ThrusterGimbal;
struct SActorForceReactionFOVScaleConfig;
struct DynArray_SCharacterCustomizerDNAHeadParams;
struct DynArray_S42FieldManualContentPiece;
struct HandholdAttachmentTriggerParams;
struct DynArray_BuildingBlocks_ContextMenuItem;
struct DynArray_EAScoringAssistThreshold;
struct DynArray_PlanetOceanAudioCheckpoint;
struct DynArray_CraftingGameplayPropertyImplValueRange_Int;
struct SFaceHighlightingParams;
struct BuildingBlocks_ColorSolid;
struct BuildingBlocks_ComponentParameterInputColor;
struct RTTSunlightParams;
struct WorldDisplayEnvironmentColor_Custom;
struct BuildingBlocks_BindingsColorComponentParameter;
struct SCharacterCustomizerMakeupChannelParams;
struct ItemKioskBrand;
struct LoadoutItemHighlightParams;
struct FireHazardSurfaceProperties;
struct Flash_PaletteEntry;
struct SCItemDisplayScreenStateLightParams;
struct CommsNotificationStageLight;
struct DynArray_SRGBA8;
struct DynArray_SSequencerAnimationTaskParamsBase;
struct DynArray_LegacyCraftingRecipeDef_Base;
struct DynArray_ReputationComparisonRange;
struct DynArray_SHackingCodeCommandParam;
struct DynArray_ImpoundingDefinition;
struct DynArray_SubItemScanStatusMappings;
struct CraftingOptionalEntry;
struct DynArray_SSequencerUsableTask;
struct ComponentMigration;
struct DynArray_DataForgeComponentParams;
struct DynArray_SCItemObservableScreenViewParams;
struct StatusEffectMultipleTrigger;
struct StatusEffectTrigger;
struct DynArray_Marker_ShowRuleMapDisplayMode;
struct DynArray_SSequencerCarryableTaskParams;
struct DynArray_FriendlyFireReactionOverride;
struct DynArray_UnitTest_BaseTest;
struct ContractAutoFinishSettings;
struct EntityComponentChatProviderParams;
struct DynArray_ScanDisplayConditionBaseParams;
struct DynArray_ItemThrottleParamsBase;
struct NpcBreathingParams;
struct ScanDisplayInstanceParams;
struct DynArray_SMFD;
struct DynArray_AudioBreathStyleCondition;
struct DynArray_ItemResourceDeltaBase;
struct ControlHintCondition_NOT;
struct ControlHintAlwaysDisplay_WhenBaseAndAdditionalConditionsPass;
struct DynArray_ControlHintCondition;
struct BuildingBlocks_BindingsLocalizedFromInteger;
struct BuildingBlocks_BindingsIntegerArithmatic;
struct BuildingBlocks_IntegerIntegerPair;
struct BuildingBlocks_LocalizationDateFromIntegerTimeStamp;
struct BuildingBlocks_BindingsColorFromIntegerRGBA;
struct BuildingBlocks_BindingsIntegerFunction;
struct BuildingBlocks_BindingsIntegerFromBoolean;
struct BuildingBlocks_BindingsLocalizedRandomFromInteger;
struct BuildingBlocks_BindingsBooleanFromInteger;
struct BuildingBlocks_BindingsNumberFromInteger;
struct BuildingBlocks_BindingsLocalizedSIUnitFromNumber;
struct BuildingBlocks_BindingsColorFromIntegerPacked;
struct DynArray_BuildingBlocks_BindingsIntegerBase;
struct JournalEntry;
struct DynArray_SModifierSignaturesEntry;
struct CloneLocationUIProviderParams;
struct AttachableStateModifierBase;
struct LandingSystemStateModifierBase;
struct DynArray_SMobiGlasLauncherApp;
struct DynArray_SCustomizableMaterialEntry;
struct DynArray_FoleyCollision;
struct SCollectible;
struct DynArray_FlashVariableObject;
struct DynArray_SDockingAnimatorStageTriggerParams;
struct SeatedTacticScores;
struct OnFootTacticScores;
struct CommonTacticScores;
struct DynArray_QuickAccessWheelElement;
struct SReputationStateModifierParams;
struct SReputationStateModifierSetToState;
struct DynArray_ItemSuitArmorSignatureParams;
struct CtxGraph_Dependency;
struct DynArray_CtxGraph_Component;
struct DefaultActionsEntityEntryCondition_NOT;
struct DynArray_DefaultActionsEntityEntryCondition;
struct DynArray_SMannequinTagParams;
struct ActorBaseMovementModifiers;
struct DynArray_SActorStanceDimensionsExtraDef;
struct AsteroidStateTemplate;
struct DynArray_SCharacterCustomizerTextureParams;
struct DynArray_EngineeringStateMessages;
struct SActorForceReactionLeanFilterDef;
struct DateTime;
struct DynArray_FiringRangeTimeEntry;
struct DynArray_SActorForceReactionFlightDurationConfig;
struct CraftingRecipeRecord;
struct CraftingRecipe_Ref;
struct BuildingBlocks_IntegerLocalizedPair;
struct BuildingBlocks_BindingsLocalizedFromBoolean;
struct BindingsOperations_LocalizationCombine;
struct BuildingBlocks_BindingsLocalizedModifyCase;
struct BindingsOperation_BooleanFromLocalizationIsEmpty;
struct DynArray_NavigationTriggerAdapter;
struct MobiGlasAppData;
struct DynArray_MobiGlasAppDataBase;
struct DynArray_ContractBoolParam;
struct MotionTurnSetupFiltered;
struct DynArray_HudColor_HoloParam;
struct STargetingMethodRecord;
struct DynArray_PowerPool;
struct MissionFlowCondition_NOT;
struct MissionFlowTrigger;
struct DynArray_MissionFlowConditionBase;
struct ActorExternalForceMovementModifiers;
struct DynArray_ItemResourceTypeData;
struct DefaultActionsEntityState_NOT;
struct DynArray_DefaultActionsEntityState;
struct DynArray_SItemPortAttachmentPoints;
struct DynArray_EntityClassStaticDataParams;
struct DynArray_SS42PersonalStatusDrugBuffEffectString;
struct DynArray_BuildingBlocks_PreviewScreenBase;
struct DynArray_SSequencerDefTaskParams;
struct DynArray_SStarGalaWaveParams;
struct DynArray_Bindings_SubsumptionBroadcastEvent;
struct DynArray_WingmanOrderInfo;
struct DynArray_SBaseInteractionGameplayTrigger;
struct DynArray_SecurityNetworkVariableEffect_Base;
struct ItemResourceControlConditionThrottle;
struct ItemResourceControlConditionLimitParameter;
struct ItemResourceControlConditionLimit;
struct DynArray_ItemResourceControlOutputBase;
struct BuildingBlocks_BindingsTransformMultiply;
struct BuildingBlocks_BindingsTransformInvert;
struct DynArray_ChatCommandName;
struct DynArray_MeleeComboChainLink;
struct DynArray_BlueprintCategoryRecord;
struct DynArray_PlayerShipRespawnShipInfo;
struct GlobalJumpDriveEffectParams;
struct CaptureAreaUIParams;
struct IntInteractiveVariable;
struct DynArray_SHackingCodeSystemLogEntry;
struct CameraLookBehindConfig;
struct VideoCommsAudioParams;
struct MiningLaserGlobalParams;
struct SSalvageRepairAudioParams;
struct JumpDriveAudioMovementParams;
struct SSCSignatureSystemAudioRtpcSubRule;
struct MiningControllerAudioParams;
struct AudioAllegianceSwitches;
struct ParticleEffectAudioParams;
struct UIWorldDisplayInputSoundRtpcParam;
struct EntityComponentLocalPlayerVisorAudioParams;
struct DynArray_AudioRtpc;
struct InnerThought_LayoutStates;
struct BlueprintCategoryAvailabilityRecord;
struct DynArray_ConstantDOFPosWeights;
struct SProjectedHudParams;
struct DynArray_CommsChannelDef;
struct SJumpTunnelExitParams;
struct MarkerTrackingViewModeParameters;
struct SpawnerPrerequisite_NOT;
struct DynArray_BaseSpawnerPrerequisite;
struct SEntityComponentNoisySmoothingModificationObjectParams;
struct DynArray_SSequencerItemDoorTaskParams;
struct DynArray_SActorDeathPoseVariant;
struct DynArray_ExtendedNameEntryTextBase;
struct DynArray_DeltaSignatureSensitivityParams;
struct SCDefaultZeroGTraversalParams;
struct DynArray_StringUserVariableTask;
struct MissionScenarioSchedule;
struct DynArray_MusicLogicNode;
struct CraftingCost_Ref;
struct CraftingCostRecord;
struct SCIGTestAAA;
struct DynArray_SCIGTestBase;
struct DynArray_PopupParams;
struct EntityComponentFireFilter;
struct EntityComponentFireIgniter;
struct DynArray_SCIGTestA;
struct DelayedModifierTriggerParams;
struct DynArray_BaseItemModifierParams;
struct DynArray_SItemPortConnectionParam;
struct ActorStateData_ValidationParams;
struct DynArray_LocStringUserVariable;
struct SMannequinActionDefRecord;
struct DynArray_ChatFilter;
struct SAudioCapacitor;
struct AudioRtpcWithBehaviour;
struct CraftingResearch;
struct DynArray_ContractPrerequisiteBase;
struct BuildingBlocks_PreviewSceneRttRoot;
struct MapDisplayOverrideParams;
struct SSCSignatureSystemScanBounds;
struct SShopComponentParams;
struct DynArray_SCItemClothingHiddenPartsParams;
struct DevOwner;
struct DynArray_EntityEffectSystem_BaseSequencerTask;
struct AITargetingFormulaSettings;
struct SActorForceReactionFilterDef;
struct DynArray_BuildingBlocks_StringIntegerPair;
struct BuildingBlocks_BorderRadiusCorner;
struct BuildingBlocks_Size;
struct BuildingBlocks_SegmentedFill;
struct DynArray_UI3DDisplayInput;
struct CraftingBlueprintTier;
struct BuildingBlocks_GrabControlsPolicy;
struct DynArray_WeatherEffects_Atmosphere;
struct CommodityTemperatureTolerance;
struct DynArray_ReputationValueSetting;
struct DynArray_INavigationCostVolumeExtender;
struct PlayerHostilityParams;
struct DynArray_EntryOptionalData_Base;
struct SObjectiveAnnouncerSettingsDef;
struct CraftingGameplayPropertyRecord;
struct InteriorMapWorldUIConfig;
struct DynArray_TypeSubtypeParams;
struct ItemResourceDeltaAmount;
struct QuantumDriveLocTypeMusicMap;
struct LightningTargetMode_Internal;
struct SScopeAttachmentParams;
struct SWeaponAudioParams;
struct TransitStationAnnouncement;
struct WheelAudioParams;
struct DialogueRealm;
struct AudioAreaAmbienceComponentParams;
struct MiningAudioParams;
struct QuantumDriveStateMusicMap;
struct SCItemTurretJointMovementAxisParams;
struct SSalvageStructuralAudioParams;
struct LocalPlayerAudioEnvironmentParams;
struct SCExtendedLocalizationLevelParams;
struct GPUParticleAudio;
struct AudioTriggerSpotParams;
struct PingSFXSharedParams;
struct SMusicEvent;
struct JumpDriveStateAudioMap;
struct SCItemCommsComponentSetup;
struct PlanetOceanDepthAssignment;
struct RewardNotification;
struct SPowerSourceComponentParams;
struct SWeaponAudioReportEnvironment;
struct ShipWideAudioObject;
struct SUsableTransitionParams;
struct ProceduralPlanetAudioRiverData;
struct TransitDisplayPanelGenericAnnouncements;
struct EAPlayableAreaControllerComponentParamsDef;
struct SCJukeboxParams;
struct LightAudioComponentParams;
struct PhysicalAudioCollisionTrigger;
struct ScanSFXSharedParams;
struct SurfaceAudioProperties;
struct ShipAudioTrackviewParams;
struct GasCloudLightAudioParams;
struct GroundVehicleAudioComponentParams;
struct JumpDriveMusicEvent;
struct EACapturableEntityComponentDef;
struct SGalactapediaEntry;
struct HackableParams;
struct QuantumStateMusicMap;
struct SThrowAudioParams;
struct SSCLocalPlayerAudioComponentParams;
struct AudioWaterInteractions;
struct SQuantumBoostAudioParams;
struct GPUParticleAudioStruct;
struct QuantumMusicEventBase;
struct SOrdnanceAudioParams;
struct ProceduralPlanetAudioDisturbanceDef;
struct DynArray_GlobalResourceAudio;
struct CraftingRecipeCostsRecord;
struct CraftingRecipeCosts_Ref;
struct CraftingRecipeResults_Ref;
struct DynArray_DefaultActionDef;
struct DynArray_HarvestConditionBase;
struct MissionPropertyValue_AIName;
struct DynArray_ConsumableEffect;
struct ContactHighlightStateBaseParams;
struct ContactHighlightShaderParams;
struct PersonalThoughtHologramParams;
struct UIWorldDisplayPathStateParams;
struct ContactHighlightMaterialParams;
struct ScreenEffects_ParamValue_Color;
struct HUDSilhouetteParams;
struct DynArray_RGBA;
struct DynArray_SCoreInventoryItem;
struct DynArray_AudioRtpcWithDefault;
struct SCuttableComponentParams;
struct DynArray_SCItemTurretCustomAngleLimit;
struct SpawnDescriptionEntry;
struct MissionProperty;
struct AttackCategoryParamsBase;
struct DamageMacro;
struct QuantumDriveNotifications;
struct DynArray_CraftingGameplayPropertyImplValueRange_Float;
struct DynArray_SpeedThreshold;
struct DynArray_BuildingBlocks_ComponentParameterInputBase;
struct DynArray_SMastergraphStateOverride;
struct DynArray_RGB8;
struct SDamageMapShaderValues;
struct SFortitudeLevelStats;
struct STakedownTechniqueLevelStats;
struct SReflexLevelStats;
struct SPlayerRoleShakeMultipliers;
struct SStrengthLevelStats;
struct SLightStatePreset;
struct BuildingBlocks_StaticArrayDataNumber;
struct PingDetectionLevelParams;
struct SVaultingTechniqueLevelStats;
struct SFitnessLevelStats;
struct FireHazardGlobalIgnition;
struct SVehicleAiDamageModifiers;
struct HudFeedbackParams;
struct AIHealthThresholdsConfig;
struct ContractResult_RefundBuyIn;
struct OcclusionCheckSharedParams;
struct ContractResult_CompletionBounty;
struct UIV2Markers;
struct SAimableGameModeRoleParams;
struct ContractResult_CalculatedReward;
struct OperatorModeAvailability;
struct RelayFilterParams;
struct FireParams;
struct ContractResultBase;
struct BuildingBlocks_StaticArrayDataBoolean;
struct GlobalShopTerminalParams;
struct SDFMVictoryConditionsLives;
struct SDFMVictoryConditionsTeam;
struct SSimulationParamsTranslationalProjection;
struct WebCustomizationItemTypeName;
struct ItemPreview_CameraSettings;
struct MaskStatusBuff;
struct SHealingBeamBodyPartHighlightingParams;
struct SGroupChannel;
struct AudioWhitelist;
struct GameModeCustomSetting;
struct ItemPreview_SkinnedLoadoutOverride;
struct STargetableItemType;
struct MasterModeExclusion;
struct SyncedAttackCategoryParams;
struct ItemThrottleParams;
struct InventoryContainer;
struct InventoryContainerItemTypeFilter;
struct StatusEffectAbilityLock;
struct ConsumableEffectClearBuffEffect;
struct SItemTypeFilter;
struct OrificeBloodParams;
struct SocialTab;
struct SSimulationParamsSpringEllipsoid;
struct SDFMVictoryConditionsPlayer;
struct MasterModeExclusionsOverride;
struct MarkerDeclutteringCullingOrder;
struct TransformationInterpolatorParams;
struct PlayerLimitationsProfile;
struct SUninsuredItem;
struct DefaultEntitlementRecord;
struct SStandardVictoryConditionsTeam;
struct SFPSVictoryConditionsTeamLives;
struct ItemResourceNetworkMapTriggerEntry;
struct SCItemSuitThrusterParams;
struct SItemPortDefTypes;
struct SDFMVictoryConditionsRace;
struct LoadoutCandidateRootParams;
struct AIObservableFilterFlags;
struct SBadgeCompleteReward;
struct SSimulationParamsPendulumHingePlane;
struct SEAFriendlyFireKickParams;
struct SSimulationParamsPendulumHalfCone;
struct SSimulationParamsPendulumCone;
struct ArmsLockSingleAbility;
struct SFPSVictoryConditionsTeam;
struct OperatorModeDefinitions;
struct PassengerScanStatusMappings;
struct SObjectiveVictoryConditionsTeam;
struct ActionAreaAudioFilter;
struct HarvestableAreaTypeObjectPreset;
struct BuildingBlocks_StaticArrayDataString;
struct SBonesHighlightNode;
struct LocomotionAnimSyncConfig;
struct LoadoutRequiredAttachmentsParams;
struct PersonalThoughtForceCloseActionList;
struct RagdollRecoveryConfig;
struct FragmentRequiredInfo;
struct DockingSlotVisibilityTagSet;
struct FragmentInfo;
struct SetItemportActiveEvent;
struct ActorUndergroundEffects;
struct UndergroundCreatureHelpersComponent;
struct GameTokens;
struct SWeaponOnAttachParams;
struct SItemPortRule_HideInteractionsDef;
struct SSCActorInteractionHelperParams;
struct DisabledLoadoutInteraction;
struct SCItemControlCondition_AllowedByRemoteTurretView;
struct DurationTags;
struct Fidget;
struct PlayerAnimatedInteraction;
struct PersonalThoughtContextualActionsMenu;
struct EntityComponentFrontendPUUIProviderParams;
struct ActorStatusLocalisation;
struct SMasterModeLabels;
struct VoteGenericLocParams;
struct SLoadingScreenInformationDef;
struct ContractDisplayInfo;
struct GlobalTutorialParams;
struct SOperatorModeLabels;
struct ChatEmoteData;
struct InfractionParameters;
struct BuildingBlocks_StaticArrayDataLocalization;
struct SHackingCodeWindowParams;
struct SAimableGimbalModeLabels;
struct RestrictedAreaHUDMessageParams;
struct BuildingBlocks_StaticArrayDataInteger;
struct BuildingBlocks_BindingsBooleanFromIntegerSwitch;
struct SLightFlickerAnimParams;
struct EAScoreboardPlacementAwardParams;
struct CrimeStatThresholds;
struct AwardService_Award;
struct CraftingRecipeResults;
struct SEntityTraversalNodeContext;
struct SApplicationFormBodyTypeOption;
struct BuildingBlocks_BindingsIntegerVariable;
struct BuildingBlocks_BindingsBooleanVariable;
struct BuildingBlocks_BindingsVectorVariable;
struct BuildingBlocks_BindingsTransformVariable;
struct BuildingBlocks_BindingsRotationVariable;
struct BuildingBlocks_BindingsNumberVariable;
struct BuildingBlocks_BindingsLocalizedVariable;
struct BuildingBlocks_BindingsIntegerTimestamp;
struct BuildingBlocks_BindingsStringVariable;
struct SMFDModeConfig;
struct VehicleEditorCapabilities;
struct ControlHints_LocalizedKeyInput;
struct SSCSignatureSystemAudioTriggerTypeRule;
struct SSCSignatureSystemAudioRule;
struct SSCSignatureSystemAudioRuleAlways;
struct SEntityEffectCoreParams;
struct Character;
struct DynArray_ActorRestrainPerAttackerConfig;
struct SJumpTunnelMeshParams;
struct DynArray_BuildingBlocks_FieldTransitionBase;
struct BoolUserVariable;
struct VehicleSerialNumberFormat;
struct BuildingBlocks_TextEmphasisModifierList;
struct WorldDisplay_2DLocalEntityEnvironment;
struct WorldDisplayRadar_Icon;
struct RadarPlate_Config;
struct WorldDisplay_PlaneEnvironment_Ring;
struct WorldDisplayRadar_Line;
struct DynArray_VisibilityCondition;
struct VisibilityConditionDef_AND;
struct DynArray_ActorStatusAddBuff;
struct SLoadoutRequirementAND;
struct SLoadoutRequirementOR;
struct DynArray_BuildingBlocks_StringStringPair;
struct DynArray_BuildingBlocks_NumberStringPair;
struct DynArray_BuildingBlocks_IntegerStringPair;
struct MusicLogicEventList;
struct BuildingBlocks_BindingsBooleanEvaluateOr;
struct BuildingBlocks_IntegerFromBitFlagDef;
struct BuildingBlocks_BindingsBooleanEvaluateAnd;
struct EntityClusterMember;
struct ContextMenu;
struct BreathDurationParams;
struct LoadoutItemPortViewParams;
struct SActorForceReactionsPresetRecord;
struct SVibrationDef;
struct DynArray_SQedVisualGraphTransitionParams;
struct ElectricalStateRef;
struct PlayerChoiceMenuOptionSubMenu;
struct StatusWidgetDisplayPreset;
struct DynArray_BuildingBlocks_ColorIntegerPairDef;
struct BuildingBlocks_ColorRecordReference;
struct SBuildingBlocks_EntityEffects;
struct MissionScenarioCycle;
struct InnerThought_LayoutGridSetThought;
struct BoxFieldGeom;
struct DynArray_SCameraViewStateOrbit;
struct DynArray_BodyJoint;
struct StatusEffectDamageOverTime;
struct BodyPartConfig;
struct StatusEffectDamageToDeathOverTime;
struct StatusEffectDamage;
struct StatusEffectDamageNonLinear;
struct SSpecializedData;
struct GlobalShopSellingParams;
struct DamageResistanceMacro;
struct AIAvailableSpecialRangedAttacksConfig;
struct EntityComponentWaterDisturbanceParams;
struct DynArray_ActorLookAheadPoint;
struct EALockedSpawnMarkerTracker;
struct EAMarkerTrackerBase;
struct EAUIMarkerBaseComponent;
struct EAEntityMarkerTracker;
struct EAObjectiveMarkerTracker;
struct EAPlayableAreaMarkerTracker;
struct DynArray_PlayerChoice_SoftwareCursorEntry;
struct DynArray_PointOfInterestData;
struct MiniGameRecordDef;
struct SMiniGameSpriteParams;
struct BezierCurve;
struct LegacyCraftingRecipeDef_Record;
struct DynArray_SWeaponSpinAnimationParams;
struct SWeaponConditionAll;
struct SWeaponConditionAny;
struct ScanCustomValueArray;
struct ControlHints_HintDisplayInfoAction;
struct DynArray_DialogueBundleEntry;
struct DynArray_WeightedDialogueBundleEntry;
struct VehicleCareer;
struct SGeometryViewDistanceRatioCategories;
struct ActorStatData;
struct HarvestableClusterPreset;
struct DynArray_SReputationStandingRewardBonusParams;
struct SReputationStandingMapParams;
struct ItemWeaponBeamVFXStrengthOverrideParams;
struct RadarDeltaSignatureDetectionParams;
struct MasterModeSwitchDeltaSignatureTypes;
struct DynArray_RadarDeltaSignatureEntry;
struct ItemAwardWeightings;
struct GlobalJumpTunnelCameraEffectParams;
struct S42CommendationRulesEntry;
struct FlightHUDUIView_Config;
struct SEntityComponentObjectMetadataParams;
struct UIElementSoundsRecord;
struct Hauling_ObjectiveSettings;
struct SDespawnRules;
struct VoiceBundle;
struct BuildingBlocks_StaticArrayEntry;
struct FoleyLoop;
struct FoleyOneShot;
struct SUsableIdleParams;
struct SShopUIProviderParams;
struct UIStateDisplay;
struct EmotionList;
struct DynArray_ActorStatusBuff;
struct SCItemPriorityGroupParam;
struct DynArray_SReputationContextBBPropertyParams;
struct WeatherEffects_Atmosphere_PropertyValue;
struct WeatherEffects_Asteroid_PropertyValue;
struct WeatherEffects_Atmosphere_WaterDepth;
struct WeatherEffects_Atmosphere_VolumetricCloudDensity;
struct WeatherEffects_Atmosphere_GasCloudOpticalDensity;
struct DynArray_BlobVFXDistanceParams;
struct PingWaveVFXParams;
struct CommunicationVariableConfig;
struct BuildingBlocks_StyleSelectorConditionAnyOfCondition;
struct BuildingBlocks_StyleSelectorConditionAllOfCondition;
struct BuildingBlocks_StyleSelectorConditionParent;
struct BuildingBlocks_StyleSelectorConditionChild;
struct BuildingBlocks_StyleConditionList;
struct BuildingBlocks_StyleSelectorConditionAncestor;
struct DynArray_ActorStatusEffect;
struct DynArray_BuildingBlocks_KeyframeModifierData;
struct MobiGlasMissionAuthorization;
struct DynArray_EATransportTransitionGroupParams;
struct StarMapAmenityTypes;
struct LightningBehavior_Effect;
struct PlanetDayNightTemperatureTemplateRef;
struct BuidlingBlocks_FieldModifierAnimation;
struct DynArray_WorldDisplayEnvironmentBase;
struct DynArray_BoidsBehaviorRuleContainer;
struct SDegradationParams;
struct DynArray_WeaponProceduralClip;
struct LiteralStringProviderComponentParams;
struct DamageMapDamageForm;
struct CustomMaterialsEntityParams;
struct RaSTaRLibraryCategory;
struct TVMovieList;
struct SEntityDensityClassOverwritesRef;
struct DialogueContent;
struct QuantumDriveSplineTraversalParams;
struct PlayerGroupManagerNotificationParams;
struct FriendManagerNotificationsParams;
struct SCharacterCustomizerSkinBaseMaterialList;
struct SCharacterCustomizerWildlineCondition;
struct SpeedThrottleComponentParams;
struct SecurityClearance_OutfitRequirement_OrDef;
struct SecurityClearance_OutfitRequirement_AndDef;
struct SMineableHealthComponentParams;
struct CameraRemoteTurretConfig;
struct CameraStaticFixedSpectatorConfig;
struct CameraStaticConfig;
struct DynArray_AeroSurface;
struct DynArray_SEntityPhysicsWheel;
struct ARMarkerGlobalParams;
struct SWeaponProceduralHeadRecoilCurveModifierDef;
struct DynArray_CylinderFieldGeom;
struct DynArray_SEffectInputParamsSound;
struct SEntityComponentPhysicsGridParams;
struct SGuidanceAndControlParams;
struct PlayerToPlayerCommsCallGlobalParams;
struct SSimpleRotationComponentParams;
struct TimeToTakeOffMinOverrideByDockingClass;
struct StayTimeMinOverrideByDockingClass;
struct HeadMotionShakeSettings;
struct DynArray_Texture3DFieldGeom;
struct ActorCameraOffsetFiltered;
struct SpecificHandholdAttachSpotChoiceParams;
struct DynArray_SObservablePointDef;
struct DynArray_HandholdAttachSpotParams;
struct SCarryableInteractionPointOffsets;
struct SeatUserActorCDIKConfig;
struct SAttachableObjectContainerData;
struct NavLinkLedgeLocation;
struct SurfaceRaindrops_Acceleration;
struct UIAudioComponent_ManualOffset;
struct SVehicleObjectContainerParams;
struct UIWorldDisplayHolographicSettings;
struct UIAudioComponent_Offset;
struct SCarryableIKInteraction;
struct SCItemSeatDashboardScreenPos;
struct SEffectParams;
struct NavLinkHelperLocation;
struct WorldDisplay_MeshEnvironment;
struct InputPromptConfig;
struct SLootableMainInteractionsTarget;
struct SGrip;
struct InstancedInteriorComponentParams;
struct NavLinkTransformLocation;
struct DynArray_QuatT;
struct SCItemAirlockParams;
struct DynArray_TorusFieldGeom;
struct SCItemLandingGearParams;
struct VehicleLandingGear;
struct DynArray_SDecalParams;
struct SItemPortDefHelper;
struct PlanetEffectLOD;
struct DynArray_SWeaponAttachmentItemPort;
struct DynArray_SEffectInputParamsParticle;
struct SScenePlayerChoiceSettings;
struct PlayerAnimatedInteractionFiltered;
struct FireHazardFogParams;
struct SItemShopARParams;
struct SFrontendS42Settings;
struct MiningControllerGlobalParams;
struct DynArray_CapsuleFieldGeom;
struct DynArray_ProceduralAnimationBone;
struct SUnifiedShakeParamsRecord;
struct DynArray_ObjectiveMarkerLocation;
struct DynArray_CommsNotificationStageListItem;
struct DynArray_EAPickupSpecialEventOverrideParams;
struct LedgeGrabbingParams;
struct DynArray_SCEntranceItem;
struct DynArray_SphereFieldGeom;
struct CameraThirdPersonBaseConfig;
struct CameraView2ShipsFrameParams;
struct CameraTimeCamConfig;
struct CameraFreeCamConfig;
struct CameraKillerDeathCamConfig;
struct ItemPreview_TurntableOverride;
struct WeaponProceduralClipSway;
struct LadderAccessClimbParams;
struct DynArray_SThrowMode;
struct DynArray_CustomLookAtBB;
struct DynArray_CameraShopItemOffset;
struct CameraSpringConfig;
struct SActorProceduralHandsRecoilCurveModifiersDef;
struct LightningRegionLightningParams;
struct DynArray_SCDynamicRigLightParams;
struct SCThrustParams;
struct UIGroundingEffectsEntityComponentParams;
struct LegacyCraftingRecipe_Default;
struct GeomFont_Config;
struct AreaServices;
struct DrugEfficacyForItemType;
struct ProcAimRigConfig;
struct SHackingAIParams;
struct ActionAreaLightExtension;
struct LinkedStat;
struct LinkedStatSetupPreset;
struct SEntityComponentRoomParams;
struct SEntityAttachParams;
struct DynArray_TeamPhaseSettingsDef;
struct SEACriticalMessageParams;
struct SActorForceReactionProceduralVanduulLeanPose;
struct SActorForceReactionProceduralXianLeanPose;
struct SActorForceReactionProceduralHumanLeanPose;
struct BuildingBlocks_NumberCompareStatement;
struct ProceduralEntityParams;
struct AsteroidBehavior_WeatherParams;
struct ItemResourceNetworkPowerParams;
struct CraftingRecipeResults_RecordRef;
struct EntityClassGameplayPropertiesCraftingData;
struct EntityComponentRadiationVolumeParams;
struct PersonalThoughtCategory;
struct PersonalThoughtCategoryAction;
struct CockpitResponseVariation;
struct SHelmetStateBaseParams;
struct SActorForceReactionGlobalStaggerConfig;
struct WeaponAimableAnglesDef;
struct DynArray_SUsableMovementAlignmentParams;
struct CraftingBlueprint;
struct DynArray_SCItemControlPriorityTag;
struct SpecialEventDay;
struct TransitDestinationParams;
struct IntUserVariable;
struct SScoreboard;
struct DynArray_MeshFieldGeom;
struct DynArray_BuildingBlocks_FontReplacementPair;
struct DynArray_BindingsOperations_IntegerStringFontStylePair;
struct SpineBone;
struct SAccoladeRequirementOR;
struct SAccoladeRequirementAND;
struct DynArray_ItemTypeCategoryException;
struct DynArray_SJumpTunnelSectionControlPointGenerationParams;
struct WaterEffectsGlobalParams;
struct AtmosphericFlightEffects;
struct GlobalJumpTunnelEffectParams;
struct LightningTargetMode_Vehicle;
struct LightningTargetMode_Actor;
struct LightningTargetMode_RoomOccupants;
struct DynArray_SurfaceRaindrops_Emitter;
struct SActorForceReactionSustainedForceDef;
struct ThrusterEffectsComponentParams;
struct DifficultyLevelParams;
struct ContextualCommunicationResponse;
struct HealthIconData;
struct MissionPropertyValue_TimeTrialRace;
struct GasCloudVDBParams;
struct DirectRTT_AfterTonemappingParams;
struct HudColor_CustomEntry;
struct HudColor_Entry;
struct DynArray_FactionPalette;
struct DynArray_ChatManagerColor;
struct SCItemToolArmParams;
struct LookAtTypes;
struct DynArray_SCItemRadarSensitivityModifier;
struct LadderAnimationParams;
struct AudioValueOutput;
struct OpenInventoryOccupantItemTypeProperties;
struct SHackingThreatLevelParams;
struct UIHoloVehicle_Config;
struct DynArray_SSalvageRepairHighlightColorParams;
struct ExplosiveOrdnancePingGlobalParams;
struct SChargeDrainTargetStateOutlineParams;
struct DynArray_CameraLensGhostInstance;
struct DynArray_SCharacterCustomizerRandomColorDef;
struct SRenderToTextureRenderLayerParams;
struct BreathableGasParams;
struct SCItemSuitAtmosphereFuelConversionParams;
struct SGasProducerConsumerEntryParams;
struct BreathableOxygenParams;
struct ToxicGasDef;
struct SGasMass;
struct SGasAtmosphereEntryParams;
struct GasTankFillerParams;
struct JumpPointEffectParams;
struct EnvironmentLightComponentParams;
struct LightComponentParams;
struct InnerThought_LayoutClean;
struct InnerThought_LayoutPIT;
struct SInteractableMenuTitleParams;
struct BlockedColorParams;
struct InnerThought_LayoutChoiceBase;
struct SInteractableMenuSetTitle;
struct InnerThought_LayoutList;
struct GlobalRoomStateParams;
struct DynArray_ActorStanceSpeedsInfo;
struct SDynamicDifficultyParams;
struct ActorStatusUIWarning;
struct ActionStatusCosts;
struct AbilityStatusCosts;
struct EntityAudioControllerManagerParams;
struct EAPatchNoteCategoryParams;
struct DynArray_AbilityStaminaStates;
struct DynArray_ActionStaminaCosts;
struct EASimpodStateParams;
struct EAStateParams;
struct DynArray_SCItemConditionalPriority;
struct SCItemControlCondition_And;
struct AtmosphereStateRef;
struct PersonalThoughtCameraEffectsParams;
struct DynamicCameraEffectsList;
struct ConversationStickyFilter;
struct DynArray_BuildingBlocks_IntegerNumberPair;
struct BuildingBlocks_BindingsNumberArithmeticMulti;
struct ScanDisplayCustomDataArraySetupParams;
struct ScanDisplayStandardArraySetupParams;
struct ActorStatusPrioritySet;
struct SReputationMissionRequirementsParams;
struct DynArray_TakeDownParams;
struct CraftingCost_Select;
struct InitialDamageOverride;
struct DynArray_ActorViewLimitPreset;
struct DynArray_ActorLookLimitsStateFilter;
struct DynArray_ActorAimLimitsStateFilter;
struct DynArray_TaggedSubHarvestableConfig;
struct HandholdGripDatabase;
struct SItemPortMasterControllerParams;
struct AnimationGraph_Track;
struct ActorEnvironmentComponent;
struct SStatusFortitudeLevelModifier;
struct SActorLocomotionFidgetStateFilteredDef;
struct CraftingBlueprint_RecordRef;
struct AnimationVariableLink;
struct AnimationSetVariable;
struct AnimationJointBaseTranslation;
struct AnimationJointLinearRotation;
struct AnimationJointTransform;
struct AnimationMovement;
struct AnimationJointLinearTranslation;
struct AnimationJointBaseRotation;
struct DynArray_AnimationVariable;
struct STeamScoring;
struct SPlayerScoring;
struct RemovableChipParams;
struct DynArray_SMisfireEventParams;
struct ActorMovementSetsConfig;
struct AIContextualVisualFieldProfile;
struct CyclingChannelOption;
struct SChatChannelFilterBase;
struct SChatChannelWhiteList;
struct SChatChannelBlackList;
struct ItemMiningModifierParams;
struct ItemMineableRockModifierParams;
struct MiningFilterItemModifierParams;
struct DynArray_SSignaturesCategoryEntry;
struct SCItemRadarSensitivityModifierTypeSignatureCategory;
struct RadarSignatureCategoryDefinition;
struct ActionRuleNotAllowedInContext;
struct ActionRuleNotAllowedInGreenZone;
struct ActionRuleParams;
struct FloatUserVariable;
struct ConversationNode_Hub;
struct Conversation;
struct InnerThought_LayoutCurve;
struct StarMarineLoadoutEditorAdditionalParams;
struct DynArray_CommsNotificationSelector;
struct DynArray_HaulingOrderBase;
struct EAScoringMessageParams;
struct LongTermPersistenceSubTypeList;
struct DynArray_LongTermPersistenceWhiteListEntry;
struct PlayerChoice_SignalConfig;
struct DynArray_PersonalThoughtActionDescription;
struct DynArray_AnimatedAction;
struct PersonalThoughtGameModeDef;
struct PersonalThoughtHologramActionsList;
struct Camera;
struct PostureGroup;
struct UIStateColor;
struct SReputationGlobalContextBBParams;
struct SActorProceduralAimRecoilModifiers;
struct SAimRecoilModifier;
struct EntitlementAccountItemGlobalParams;
struct EntitlementNonInventoryStorableItemGlobalParams;
struct SSalvageRepairLocalizationParams;
struct SCItemShieldGeneratorParams;
struct GlobalCargoLoadingParams;
struct RadiationStateTemplate;
struct ActivityData;
struct SSCActorPhysicsControllerComponentParams;
struct SEntityPhysicsControllerParams;
struct SObjectContainerPhysicsControllerParams;
struct SSoftbodyGeometryParams;
struct DynArray_CraftingMaterialStatEntry;
struct CraftingMaterialStatDatabaseRecord;
struct PlayerChoice_OptionList;
struct SEAActionItemMessageParams;
struct DynArray_SControlledEntityRopeAttachmentPair;
struct DynArray_SControlledEntityStaticTransformParams;
struct SubsumptionDataComponentParams;
struct FrontendS42ActionData;
struct DynArray_ActorSomaticShakeConfig;
struct DynArray_ForceFeedbackEffect;
struct AudioFootstepSurfacesDefinition;
struct DynArray_AsteroidProcedural;
struct GeometryInstancerComponentParams;
struct SCharacterCustomizerDNAHeadPool;
struct S42FieldManual;
struct HandholdInteractionLink;
struct DynArray_HandholdAttachmentTriggerParams;
struct EAScoringAssistParams;
struct CraftingGameplayPropertyImplSingleStatTier_Int;
struct BuildingBlocks_ColorTextFormatModifier;
struct SCharacterCustomizerMakeupDefaultParams;
struct DynArray_FireHazardSurfaceProperties;
struct DynArray_Flash_PaletteEntry;
struct LegacyCraftingRecipeListRecord;
struct LegacyCraftingRecipeList_Direct;
struct SHackingCodeCommandEntry;
struct DynArray_CraftingOptionalEntry;
struct DynArray_ComponentMigration;
struct SCItemObservableScreenParams;
struct DynArray_StatusEffectTrigger;
struct UnitTest_Inheritance;
struct ContractClass_Contract;
struct ScanDisplayConditionVariableParams;
struct ScanOverrideDisplayBaseParams;
struct ScanOverrideDisplayInjectParams;
struct ScanOverrideDisplayRemoveParams;
struct DynArray_ScanDisplayInstanceParams;
struct AudioBreathStyleConditionList;
struct ActorBreathingStyleStartup;
struct ControlHintCondition_AND;
struct ControlHintCondition_OR;
struct DynArray_BuildingBlocks_IntegerIntegerPair;
struct BuildingBlocks_BindingsIntegerArithmeticMulti;
struct SReputationStandingJournalEntryParams;
struct Investigation_Clue_JournalEntry;
struct DynArray_JournalEntry;
struct SSCSignatureEmissionModifier;
struct EntityComponentMobiglasLauncherProviderParams;
struct SCustomizableMaterialLookupTable;
struct SCollectibleComponentParams;
struct FlashObjectBindingGroup;
struct SDockingAnimatorBaseParams;
struct DynArray_CommonTacticScores;
struct QuickAccessWheelMenuDef;
struct PersonalThoughtQuickAccessWheel;
struct DynArray_SReputationStateModifierParams;
struct DynArray_CtxGraph_Dependency;
struct DefaultActionsEntityEntryCondition_AND;
struct DefaultActionsEntityEntryCondition_OR;
struct ActorStanceDimensions;
struct AsteroidStateRef;
struct SCharacterCustomizerTextureList;
struct DynArray_SActorForceReactionLeanFilterDef;
struct DateTimeSchedule;
struct MobiGlasPersonalMessage_ShipChat;
struct SActorForceReactionMovementLaunchConfig;
struct CraftingRecipe_RecordRef;
struct DynArray_BuildingBlocks_IntegerLocalizedPair;
struct AINavigationDynamicTriggerComponent;
struct DynArray_MobiGlasAppData;
struct SMobiGlasAppDataPacketEmbedded;
struct DynArray_MotionTurnSetupFiltered;
struct SCombatTargeting;
struct SMiningTargeting;
struct SScanTargeting;
struct ResourceNetworkPowerPoolSetup;
struct DynArray_MissionFlowTrigger;
struct MissionFlowCondition_OR;
struct MissionFlowCondition_AND;
struct ActorMovementModifiers;
struct DefaultActionsEntityState_OR;
struct DefaultActionsEntityState_AND;
struct SSequencerSequenceTaskEntryParams;
struct SStarGalaStageParams;
struct UIBindingsSubsumptionComponentParams;
struct WingmanOrderList;
struct ChatCommandFastAccess;
struct MeleeAttackCombo;
struct BlueprintCategoryDatabaseRecord;
struct BlueprintCategoryAvailability_Whitelist;
struct PlayerShipRespawn;
struct ControlIntInteractiveVariable;
struct DynArray_IntInteractiveVariable;
struct SEntityComponentMiningLaserParams;
struct ProceduralPlanetAudioAlgorithm;
struct ProceduralPlanetAudioAlgorithmCount;
struct EntityAudioControllerRtpcSubscriberListDef;
struct DynArray_InnerThought_LayoutStates;
struct BlueprintCategoryAvailability_Ref;
struct ConstantDOFWeights;
struct SCCommsSpeakerComponentParams;
struct SCCommsChannelAreaComponentParams;
struct SpawnerPrerequisite_OR;
struct SpawnerPrerequisite_AND;
struct ExtendedNameEntryTextConcatenateOptions;
struct ExtendedNameEntryTextRandomizedOptions;
struct StringUserVariable;
struct MusicEventResponse;
struct MusicLogicCondition;
struct ParentMusicLogicNode;
struct CraftingCost_RecordRef;
struct SCIGTestBB;
struct ItemportTraversingModifiersParams;
struct ActorStateValidation;
struct ChatFilterOptions;
struct DynArray_AudioRtpcWithBehaviour;
struct ContractAvailability;
struct Developer;
struct DynArray_SActorForceReactionFilterDef;
struct BuildingBlocks_BindingsIntegerFromStringSwitch;
struct BuildingBlocks_Border;
struct UI3DDisplayInputParams;
struct AtmosphereBehavior_WeatherParams;
struct ReputationValueSettings;
struct CraftingGameplayProperty_RecordRef;
struct LootingItemPortSizeClass;
struct PersonalThoughtInventoryItemUIIcon;
struct DynArray_QuantumDriveLocTypeMusicMap;
struct DynArray_TransitStationAnnouncement;
struct WheelAudioSurfaceMapping;
struct DynArray_QuantumDriveStateMusicMap;
struct SSalvageAudioParams;
struct SCItemLocalization;
struct SBeamParticleAudioParams;
struct DynArray_GPUParticleAudio;
struct DynArray_JumpDriveStateAudioMap;
struct SCItemCommsComponentParams;
struct SCItemATCCommsComponentParams;
struct SCItemCommsReceiverComponentParams;
struct DynArray_PlanetOceanDepthAssignment;
struct DynArray_SWeaponAudioReportEnvironment;
struct DynArray_ShipWideAudioObject;
struct DynArray_PhysicalAudioCollisionTrigger;
struct ScanSharedParams;
struct DynArray_SurfaceAudioProperties;
struct GasCloudLightParams;
struct JumpDriveStateMusicMap;
struct DynArray_SGalactapediaEntry;
struct DynArray_QuantumStateMusicMap;
struct ParticleEffectParams;
struct QuantumMusicTripCategory;
struct QuantumEffectMusic;
struct DynArray_ProceduralPlanetAudioDisturbanceDef;
struct AudioSignal;
struct CraftingRecipeCosts_RecordRef;
struct DefaultActionsParams;
struct HarvestBehaviourParams;
struct ServiceBeaconBaseTemplateParams;
struct PersonalTransportBeaconParams;
struct Investigation_Clue_CorpseScanInfo;
struct Investigation_Suspect;
struct ConsumableSubtype;
struct ContactHighlightStateParams;
struct UIWorldDisplayPathParams;
struct SCPersonalThoughtDisplayParams;
struct AudioGameContextGlobals;
struct DynArray_SpawnDescriptionEntry;
struct ObjectiveProperty_Embedded;
struct DataSetMatchCondition_ExcludeNearbyLocationsDef;
struct DataSetMatchCondition_ExcludeDistantLocationsDef;
struct DataSetMatchCondition_ExcludeProperty;
struct ObjectiveProperty_Output;
struct ContractCommsNotification;
struct ContractResult_ItemsWeighting;
struct ObjectiveProperty_Referenced;
struct ContractEndCommsNotification;
struct DynArray_MissionProperty;
struct DynArray_AttackCategoryParamsBase;
struct DamageParams;
struct SInitialDamageSpecifierFraction;
struct CraftingGameplayPropertyImplSingleStatTier_Float;
struct DynArray_SFortitudeLevelStats;
struct DynArray_STakedownTechniqueLevelStats;
struct DynArray_SReflexLevelStats;
struct DynArray_SPlayerRoleShakeMultipliers;
struct DynArray_SStrengthLevelStats;
struct DynArray_SLightStatePreset;
struct DynArray_PingDetectionLevelParams;
struct DynArray_SVaultingTechniqueLevelStats;
struct DynArray_SFitnessLevelStats;
struct DynArray_SAimableGameModeRoleParams;
struct DynArray_OperatorModeAvailability;
struct DynArray_ContractResultBase;
struct DynArray_WebCustomizationItemTypeName;
struct ItemPreview_CameraSettingsOverride;
struct SHealingBeamBodyPartParams;
struct DynArray_GameModeCustomSetting;
struct DynArray_ItemPreview_SkinnedLoadoutOverride;
struct DynArray_STargetableItemType;
struct DynArray_MasterModeExclusion;
struct AISyncedMeleeAttack;
struct DynArray_InventoryContainerItemTypeFilter;
struct DynArray_StatusEffectAbilityLock;
struct DynArray_SItemTypeFilter;
struct DynArray_OrificeBloodParams;
struct DynArray_SocialTab;
struct ItemControlComponentParams;
struct ARMarkerTrackingParams;
struct MovieClipTransformationInterpolatorParams;
struct TransformationInterpolator;
struct DynArray_SUninsuredItem;
struct DefaultEntitlementEntityParams;
struct DynArray_ItemResourceNetworkMapTriggerEntry;
struct DynArray_SCItemSuitThrusterParams;
struct DynArray_SItemPortDefTypes;
struct SHearingComponentParams;
struct DynArray_AIObservableFilterFlags;
struct SStandardPlayerStats;
struct SS42PlayerStats;
struct SFPSPlayerStats;
struct DynArray_ArmsLockSingleAbility;
struct DynArray_OperatorModeDefinitions;
struct DynArray_PassengerScanStatusMappings;
struct DynArray_PersonalThoughtForceCloseActionList;
struct ActorSkeletonConfig;
struct DynArray_DockingSlotVisibilityTagSet;
struct LandingAnimationSetup;
struct ActorFallOverlayNode;
struct SSCActorEffectsControllerParams;
struct VehicleItemInteriorController;
struct DynArray_SWeaponOnAttachParams;
struct DynArray_DisabledLoadoutInteraction;
struct DynArray_DurationTags;
struct DynArray_Fidget;
struct PlayerAnimatedInteractionCustom;
struct PlayerAnimatedInteractionTemplate;
struct DynArray_PersonalThoughtContextualActionsMenu;
struct EAVotingModule;
struct DynArray_ChatEmoteData;
struct InfractionDefinition;
struct SHackingVisualParamsPreset;
struct SLightFlickerVolumeComponentParams;
struct DynArray_AwardService_Award;
struct DynArray_SApplicationFormBodyTypeOption;
struct DynArray_VehicleEditorCapabilities;
struct DynArray_SSCSignatureSystemAudioRule;
struct ActorRestrainConfig;
struct DynArray_BoolUserVariable;
struct DynArray_BuildingBlocks_TextEmphasisModifierList;
struct RadarDisplay_Config;
struct DynArray_WorldDisplay_PlaneEnvironment_Ring;
struct WorldDisplayRadar;
struct VisibleElement;
struct StatusEffectBuffMacro;
struct BuildingBlocks_BindingsStringFromStringSwitch;
struct BuildingBlocks_BindingsStringFromNumberCompare;
struct BuildingBlocks_BindingsStringFromIntegerSwitch;
struct EntityComponentVibrationParams;
struct BuildingBlocks_BindingsColorFromIntegerSwitch;
struct DynArray_MissionScenarioCycle;
struct DynArray_InnerThought_LayoutGridSetThought;
struct DynArray_BoxFieldGeom;
struct BodyMapping;
struct DynArray_BodyPartConfig;
struct DamageResistanceReference;
struct DynArray_EAMarkerTrackerBase;
struct SSCLocalPlayerChoiceComponentParams;
struct PointOfInterestList;
struct SMinigameAppParams;
struct DynArray_SMiniGameSpriteParams;
struct CameraActorVibrationShakeConfig;
struct AeroParams;
struct JumpTunnelVibrationParams;
struct TargetTrackingAutoZoomDef;
struct FunctionalityModifierCurve;
struct FullscreenTutorial;
struct AreaMapCameraParams;
struct CapacitorAssignmentInputOutputDef;
struct SQuantumBoostRotationParams;
struct SQuantumBoostBubbleIntegrityParams;
struct AITimeSinceTargetSeen;
struct CombatMarker;
struct SJumpDriveFlightTurbulenceParams;
struct SWeaponMisfireEntry;
struct VideoCommsShaderParams;
struct JumpTunnelForcesParams;
struct SQuantumBoostBubbleIntegrityParams_NEW;
struct SWeaponAIShootingTimeAccuracyData;
struct SAimableControllerHudParams;
struct SuspensionSprings;
struct SVehicleAfterburnerParams;
struct SInputDeflectionTimeParams;
struct ActorLookAheadRoll;
struct GlobalGasCloudVDB_GameplayParams;
struct SJumpTunnelEllipticalParams;
struct STurretESP;
struct AIPerceptionProfile;
struct SWearAccumulatorParams;
struct BuildingBlocks_TimingFunctionCustomCurve;
struct ProcBreathingCurve;
struct ESPParams;
struct BezierModifierInterpolator;
struct SEntityEffectSystem_PatternModifier;
struct SActorForceReactionCurve;
struct UIDataBankDisplay3DInterpolateParams;
struct ActorGForceHeadBob;
struct DistressCommsSignalComponentParams;
struct AudioBreathInterrupt;
struct SCurve;
struct SBezierCurveRecord;
struct SCBoatMovementParams;
struct SXYZCurves;
struct AudioValueOutputBehaviourCamera;
struct ToxiInputModifierDistortion;
struct RadiationBehavior_AsteroidDesignCurveSurfaceRadiationParams;
struct ItemResourceSignatureEntry;
struct HoverTilting;
struct STargetSelectorHudParams;
struct GlobalJumpPointOpeningParams;
struct SYawPitchRollCurves;
struct SJumpDriveFlightSteeringParams;
struct BezierDamage;
struct JumpDriveVibrationParams;
struct HoverHandling;
struct SCharacterEyeValidationParams;
struct BuildingBlocks_BindingsNumberCurve;
struct STurretHealthModifierDef;
struct SeatAdsDef;
struct SCItemDisplayScreenUISourceParams;
struct CameraTransitionInterpolationCurveRecord;
struct SAmplitudeFreqencyDecayCurves;
struct ControlHint_DisplayInfoSet;
struct DialogueBundleEmbedded;
struct DialogueBundleWeightedEmbedded;
struct DynArray_VehicleCareer;
struct DynArray_ActorStatData;
struct SReputationScopeParams;
struct DynArray_RadarDeltaSignatureDetectionParams;
struct SignatureSystemGlobalParams;
struct RadarDeltaSignatureDefinition;
struct DynArray_ItemAwardWeightings;
struct DynArray_S42CommendationRulesEntry;
struct UIElement;
struct BuildingBlocks_StaticVariableArray;
struct DynArray_BuildingBlocks_StaticArrayEntry;
struct DynArray_FoleyLoop;
struct DynArray_FoleyOneShot;
struct DynArray_SCItemPriorityGroupParam;
struct BlobVFXSharedParams;
struct PingVFXSharedParams;
struct DynArray_BuildingBlocks_StyleConditionList;
struct BuildingBlocks_Keyframe;
struct EATransportControllerComponentParams;
struct DynArray_LightningBehavior_Effect;
struct WorldDisplayEnvironment;
struct WeaponProceduralClipsSetUp;
struct DamageMapGlobalParams;
struct DynArray_RaSTaRLibraryCategory;
struct DynArray_DialogueContent;
struct PlayerGroupManagerNotificationsParams;
struct FriendManagerGlobalParams;
struct DynArray_SCharacterCustomizerSkinBaseMaterialList;
struct DynArray_SCharacterCustomizerWildlineCondition;
struct SEntityWheeledPhysicsComponentParams;
struct SActorProceduralHeadRecoilModifiers;
struct SEffectParamSound;
struct DynArray_TimeToTakeOffMinOverrideByDockingClass;
struct DynArray_StayTimeMinOverrideByDockingClass;
struct HeadMotionConfig;
struct DynArray_ActorCameraOffsetFiltered;
struct SObservableComponentParams;
struct HandholdParams;
struct DynArray_SeatUserActorCDIKConfig;
struct DynArray_SAttachableObjectContainerData;
struct DynArray_SVehicleObjectContainerParams;
struct DynArray_SCarryableIKInteraction;
struct SCItemSeatDashboardScreen;
struct QTERequestConfig;
struct SCarryableGrip;
struct DynArray_VehicleLandingGear;
struct SEntityComponentDecalParams;
struct SEffectParamParticle;
struct DynArray_PlayerAnimatedInteractionFiltered;
struct SCItemShopPedestalParams;
struct SCItemMiningControllerParams;
struct ProceduralAnimationSequence;
struct SObjectiveMarkerLocationParams;
struct CommsNotificationStage;
struct EAPickupParams;
struct SEntrancesDef;
struct DynArray_ItemPreview_TurntableOverride;
struct LadderAccessPointParams;
struct SThrowableParams;
struct EntityComponentPointOfInterestParams;
struct CameraShopConfig;
struct SActorProceduralHandsRecoilModifiers;
struct LightningRegionParams;
struct SCDynamicLightingRigGlobalParams;
struct InnerThought_Config;
struct DynArray_DrugEfficacyForItemType;
struct DynArray_ProcAimRigConfig;
struct SHackingAgentParamsPreset;
struct LinkedStatPreset;
struct DynArray_LinkedStatSetupPreset;
struct EAObjectiveControlPhase;
struct DynArray_SActorForceReactionProceduralVanduulLeanPose;
struct DynArray_SActorForceReactionProceduralXianLeanPose;
struct DynArray_SActorForceReactionProceduralHumanLeanPose;
struct DynArray_BuildingBlocks_NumberCompareStatement;
struct DynArray_CockpitResponseVariation;
struct DynArray_SHelmetStateBaseParams;
struct SUsableAnimationParams;
struct SCItemControlPriorityTable;
struct DynArray_SpecialEventDay;
struct DynArray_IntUserVariable;
struct DynArray_SScoreboard;
struct BuildingBlocks_LanguageSpecificFontReplacement;
struct BindingsOperations_StringFromIntegerSwitchFontStyle;
struct DynArray_SpineBone;
struct ItemTypeCategoryMap;
struct DynArray_DifficultyLevelParams;
struct DynArray_ContextualCommunicationResponse;
struct DynArray_HudColor_CustomEntry;
struct DynArray_HudColor_Entry;
struct FactionPalettes;
struct ChatManagerGlobalParams;
struct LadderConfig;
struct DynArray_AudioValueOutput;
struct DynArray_OpenInventoryOccupantItemTypeProperties;
struct DynArray_SHackingThreatLevelParams;
struct SGlobalChargeDrainBeamParams;
struct CameraLensGhostSet;
struct SCharacterCustomizerEyeRandomizationParams;
struct DynArray_SRenderToTextureRenderLayerParams;
struct DynArray_BreathableGasParams;
struct DynArray_SCItemSuitAtmosphereFuelConversionParams;
struct DynArray_SGasProducerConsumerEntryParams;
struct DynArray_ToxicGasDef;
struct ConsumableEffectGas;
struct DynArray_SGasMass;
struct DynArray_SGasAtmosphereEntryParams;
struct SJumpPointParams;
struct ConditionProhibitedItemsDisplayParams;
struct DynArray_ActorStatusUIWarning;
struct DynArray_ActionStatusCosts;
struct DynArray_AbilityStatusCosts;
struct DynArray_EAPatchNoteCategoryParams;
struct StaminaCostParams;
struct SCItemConditionalControllableGroupParams;
struct DynArray_PersonalThoughtCameraEffectsParams;
struct BuildingBlocks_BindingsNumberFromIntegerSwitch;
struct ActorViewLimitPresetDatabase;
struct ActorLookLimits;
struct ActorAimLimits;
struct SubHarvestableMultiConfig;
struct DynArray_AnimationGraph_Track;
struct ProbabilisticStatusTrigger;
struct PercentageStatusTrigger;
struct DefaultStatusTrigger;
struct StatusTriggerBase;
struct DynArray_SActorLocomotionFidgetStateFilteredDef;
struct DynArray_AnimationVariableLink;
struct DynArray_AnimationJointBaseTranslation;
struct DynArray_AnimationMovement;
struct DynArray_AnimationJointBaseRotation;
struct SIScoringModule;
struct SMisfireEvents;
struct DynArray_AIContextualVisualFieldProfile;
struct VoiceChannelSettingsRecord;
struct AutoSubscribeChatProviderSettings;
struct ChatChannelFilterRecord;
struct DynArray_ActionRuleParams;
struct DynArray_FloatUserVariable;
struct Announcement;
struct DynArray_Conversation;
struct EntityComponentPlayerEAUIProviderParams;
struct LongTermPersistenceGlobalParams;
struct PersonalThoughtActionDescriptionsList;
struct DynArray_PersonalThoughtGameModeDef;
struct SpectatorModeParams;
struct SCRTTCameraParams;
struct SControlledEntityCameraParams;
struct CameraAlternativeViewsConfig;
struct SCamerasBaseModule;
struct AdsCameraParams;
struct DynArray_Camera;
struct DynArray_PostureGroup;
struct SRecoilModifier;
struct RadiationStateRef;
struct SubsumptionComponentParams;
struct EntityClassRawMaterialCraftingData;
struct ResourceTypeCraftingData;
struct DynArray_PlayerChoice_OptionList;
struct SControlledEntityRopeAttachmentPairs;
struct FrontendS42Actions;
struct ActorSomaticShakeParams;
struct ForceFeedback;
struct FoleyFootstepDefinition;
struct AsteroidFieldComposition;
struct DynArray_SCharacterCustomizerDNAHeadPool;
struct EAScoringParams;
struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Int;
struct SCharacterCustomizerMakeupParams;
struct FireHazardPermanentEffects;
struct Flash_Palette;
struct LegacyCraftingRecipeList_Record;
struct DynArray_SHackingCodeCommandEntry;
struct CraftingRecipeCosts;
struct DynArray_SCItemObservableScreenParams;
struct DynArray_ScanOverrideDisplayBaseParams;
struct ScanDisplaySectionParams;
struct DynArray_ActorBreathingStyleStartup;
struct BuildingBlocks_BindingsIntegerFromIntegerSwitch;
struct DynArray_SReputationStandingJournalEntryParams;
struct ContractResult_JournalEntry;
struct ContractPrerequisite_JournalEntries;
struct SFrontendSpawning;
struct SSCSpawningBase;
struct SPUSpawning;
struct DockingDoorAnimatorComponentParams;
struct DockingAnimatorComponentParams;
struct TacticScoringProfile;
struct DynArray_PersonalThoughtQuickAccessWheel;
struct SReputationStateMissionResultModifierListParams;
struct CtxGraph_Context;
struct UIGraph_Context;
struct ActorStanceDimensionsInfo;
struct SActorForceReactionLeanConfigDef;
struct DynArray_DateTimeSchedule;
struct MobiGlasPersonalMessage_ShipChatScheduleEntry;
struct BuildingBlocks_BindingsLocalizationFromIntegerSwitch;
struct SMobiGlasAppDataPacketReferenced;
struct MotionTurnSetupList;
struct STargetSelectorGlobalTargetingParams;
struct MissionFlow;
struct DynArray_SSequencerSequenceTaskEntryParams;
struct DynArray_SStarGalaStageParams;
struct DynArray_MeleeAttackCombo;
struct DynArray_ControlIntInteractiveVariable;
struct DynArray_EntityAudioControllerRtpcSubscriberListDef;
struct InnerThought_Params;
struct ConstantDOFGlobalData;
struct DynArray_StringUserVariable;
struct DynArray_SCIGTestBB;
struct VibrationAudioEntry;
struct AudioEnvironmentMovementRtpcBehavior;
struct ThrusterOutputToRtpcList;
struct IFCSOutputToRtpcList;
struct AudioPassByRtpcParams;
struct DynArray_LootingItemPortSizeClass;
struct DynArray_PersonalThoughtInventoryItemUIIcon;
struct TransitStationAnnouncements;
struct DynArray_WheelAudioSurfaceMapping;
struct DynArray_SBeamParticleAudioParams;
struct GPUParticleAudioList;
struct JumpDriveAudioParams;
struct SWeaponAudioReportEnvironmentParams;
struct SurfaceAudioPropertiesDefinition;
struct DynArray_JumpDriveStateMusicMap;
struct SGalactapediaUnlockableComponentParams;
struct SGalactapediaCategory;
struct DynArray_QuantumMusicTripCategory;
struct ProceduralPlanetAudioDisturbanceList;
struct DynArray_AudioSignal;
struct DynArray_DefaultActionsParams;
struct ContractClass_ServiceBeacon;
struct DynArray_Investigation_Suspect;
struct DrugTypeToApply;
struct ConsumableContent;
struct SHealingBeamConsumableType;
struct DrugEfficacyForConsumableType;
struct DynArray_ConsumableSubtype;
struct DynArray_ContactHighlightStateParams;
struct DynArray_UIWorldDisplayPathParams;
struct SpawnDescriptions;
struct ObjectiveHandler_Hauling;
struct ObjectiveProperty_Input;
struct DynArray_ContractEndCommsNotification;
struct SMissionLocationModule;
struct MissionPropertyValue_CombinedDataSetEntries;
struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Float;
struct STakedownTechnique;
struct PingSettingsParams;
struct SVaultingTechnique;
struct SAimableGameModeParams;
struct OperatorModeAvailabilityParams;
struct ContractResults;
struct WebCustomizationGlobalParams;
struct DynArray_ItemPreview_CameraSettingsOverride;
struct DynArray_SHealingBeamBodyPartParams;
struct STargetableItemTypesRecord;
struct MasterModeExclusionGlobalParams;
struct InventoryOpenContainerType;
struct InventoryOpenAlwaysContainerType;
struct SSalvageRepairHighlightParams;
struct StatusBloodParams;
struct DynArray_MovieClipTransformationInterpolatorParams;
struct ShipInsurancePolicyRecord;
struct ItemResourceNetworkUIParams;
struct SMFDParamsDiagnostics;
struct VehicleEditorCategoryData;
struct VehicleEditorPortsData;
struct SLocalPlayerShoppingPredefinedARParams;
struct VehicleEditorItemStatData;
struct AIObservableFilters;
struct OperatorModeDefinitionParams;
struct PersonalThoughtForceCloseActionsParams;
struct DockingSlotVisibilityRule;
struct DynArray_LandingAnimationSetup;
struct DynArray_ActorFallOverlayNode;
struct FidgetConfig;
struct PlayerAnimatedInteractionTemplateRef;
struct ChatEmotePack;
struct SandboxInfractionDefinitionTrigger;
struct SInfractionGameplayTrigger;
struct Infraction;
struct DynArray_InfractionDefinition;
struct AwardService_Config;
struct SApplicationFormHeadHomeworld;
struct SSCSignatureSystemAudioRuleset;
struct WorldDisplay_PlaneEnvironment;
struct Marker_AbilityVisibility;
struct DynArray_StatusEffectBuffMacro;
struct MissionScenario;
struct InnerThought_LayoutGridSet;
struct QuantumObstacleParams;
struct BodyHealthConfig;
struct SSCLocalPlayerMarkerTrackerComponentParams;
struct EntityComponentPointOfInterestProvider;
struct DynArray_CameraActorVibrationShakeConfig;
struct LocalPlayerTargetTrackingAutoZoomComponentParams;
struct AfterburnerParams;
struct SCItemWeaponRegenPoolComponentParams;
struct CharacterAccuracyModifiers;
struct WeaponMisfireDef;
struct SQuantumMovementParams;
struct SWeaponAIDataParams;
struct SCItemAimableControllerParams;
struct TurretInputDeflectionTimeParams;
struct IfcsInputDeflectionTimeParams;
struct DynArray_ActorLookAheadRoll;
struct GlobalGasCloudVDBParams;
struct SEntityPerceptionComponentParams;
struct ProcBreathingGraph;
struct DynArray_ProcBreathingCurve;
struct SActorForceReactionCurveConfig;
struct DynArray_SActorForceReactionCurve;
struct AbilityBreathAction;
struct BreathingTriggerDef;
struct DynArray_SCurve;
struct ShakeComponentParams;
struct BuildingBlocks_TimingFunctionCurveRecord;
struct ActorLocomotionRotateParams;
struct SWeaponSimplifiedHeatParamsTemperatureCurveParams;
struct SWeaponSimplifiedHeatGlowParams;
struct SControlledEntityAutoCraneCurve;
struct WeaponPoseXYZCurvesMaxValues;
struct SHandsRecoilTimeModifier;
struct SDecayTimesAndCurves;
struct IntoxicationIFCSModifierParams;
struct IntoxicationWheeledModifierParams;
struct IntoxicationBoatModifierParams;
struct IntoxicationTurretModifierParams;
struct ItemResourceSignatureParams;
struct GlobalJumpPointEffectParams;
struct SAimRecoilNoiseCurves;
struct JumpDriveFlightParams;
struct JumpSystemVibrationParams;
struct GravlevParams;
struct CinematicFlythroughPoint;
struct CameraTransitionParams;
struct SWeaponProceduralHeadRecoilCurveConfigDef;
struct DynArray_ControlHint_DisplayInfoSet;
struct DialogueBundlePreset;
struct DialogueBundlePresetWeighted;
struct VehicleCareerList;
struct SPerkReputationParams;
struct PartialContractRewardRepAdjustment;
struct SReputationScopeContextUI;
struct RelationStandingParams;
struct ReputationRewardBaseDef;
struct RadarSystemGlobalParams;
struct ItemAwardWeightingsRecord;
struct S42CommendationRules;
struct DynArray_BuildingBlocks_StaticVariableArray;
struct BuildingBlocks_StaticArrayDataArray;
struct FoleyItem;
struct SCItemControllableGroupParams;
struct PingSharedParams;
struct BuildingBlocks_StyleEntry;
struct DynArray_BuildingBlocks_Keyframe;
struct LightningBehavior;
struct RadarDisplayProviderParams;
struct DynArray_WeaponProceduralClipsSetUp;
struct RaSTaRLibrary;
struct DialogueContentBank;
struct PlayerGroupManagerGlobalParams;
struct SCharacterCustomizerDialogueEntry;
struct DynArray_HeadMotionConfig;
struct DynArray_HandholdParams;
struct SeatUserActorCDIKMapping;
struct SAttachableObjectContainerSpawnerParams;
struct SCarryableIKInteractionList;
struct AuxiliaryVehicleScreenEntityComponentParams;
struct DynArray_SCItemSeatDashboardScreen;
struct TakeDownConfig;
struct WeaponMisfireFixConfig;
struct SSequencerPickupCarryableTaskParams;
struct DynArray_SCarryableGrip;
struct VehicleLandingGearSystem;
struct PlayerAnimatedInteractionConfig;
struct DynArray_ProceduralAnimationSequence;
struct EntranceDisplayComponentParams;
struct DynArray_LadderAccessPointParams;
struct ActorProceduralRecoilModifiers;
struct SCDynamicLightingRigComponentParams;
struct FontSupportParams;
struct ProceduralAimRigRecord;
struct DynArray_EAObjectiveControlPhase;
struct SActorForceReactionProceduralVanduulLeanPoseList;
struct SActorForceReactionProceduralXianLeanPoseList;
struct SActorForceReactionProceduralHumanLeanPoseList;
struct BuildingBlocks_BindingsIntegerFromNumberCompare;
struct CockpitResponse;
struct SHelmetStateMachineParams;
struct DynArray_SCItemControlPriorityTable;
struct SpecialEventDatabase;
struct SEAUIScoreboardComponentParams;
struct ActorDuckingParams;
struct ItemTypeInfo;
struct GameDifficultyModifiers;
struct ContextualCommunicationConfig;
struct HudColor_Palette;
struct AudioValueOutputSetup;
struct SHackingDifficultyPresetOverride;
struct SHackingThreatLevelsPreset;
struct DynArray_CameraLensGhostSet;
struct SRenderToTextureViewParams;
struct SCItemGasProducerConsumerParams;
struct ActorToxicGasParams;
struct SCItemGasTankParams;
struct SAtmosphericCompositionParams;
struct ActorStatusUIData;
struct ActorStaminaComponent;
struct SubHarvestableMultiConfigManual;
struct SubHarvestableMultiConfigRecord;
struct AnimationGraph_Timeline;
struct StatusMaskedRetriggerSetup;
struct ActorStatusData;
struct SActorLocomotionFidgetDef;
struct AnimationCombineVariable;
struct AnimationJointMovement;
struct EntityComponentPowerConnection;
struct AIVisualFieldProfile;
struct ChatSystemOptions;
struct PersonalInnerThoughtActionRulePreset;
struct DynArray_Announcement;
struct ConversationBank;
struct PersonalThoughtContextualActionsMenusParams;
struct DynArray_SpectatorModeParams;
struct SOverrideControlledEntityCameraParams;
struct CameraOrbitEntityConfig;
struct CameraOrbitPointConfig;
struct CameraOrbitSpectatorFollowConfig;
struct CameraOrbitSpectatorFollowVehicleConfig;
struct CameraOrbitFPSDeathCamConfig;
struct CameraOrbitSCItemSeatConfig;
struct CameraOrbitPassengerSCItemSeatConfig;
struct CameraOrbitConfig;
struct CameraOrbitEntityCinematicConfig;
struct SSCLocalPlayerCameraComponentParams;
struct SEntityComponentZoneCamerasParams;
struct PostureDatabase;
struct SWeaponStats;
struct EntityClassCraftingData;
struct PlayerChoice_Library;
struct ActorSomaticShakingParams;
struct SCItemSuitArmorParams;
struct AsteroidFieldShapeLinkParams;
struct CraftingGameplayPropertyImpl_SingleStat_Int;
struct SHackingCodeParamsPreset;
struct SCItemObservableGroupParams;
struct DynArray_ScanDisplaySectionParams;
struct AudioBreathStyle;
struct SReputationJournalGroupParams;
struct PersonalThoughtQuickAccessWheels;
struct DynArray_SReputationStateMissionResultModifierListParams;
struct DynArray_CtxGraph_Context;
struct DynArray_ActorStanceDimensionsInfo;
struct ContractPrerequisite_DateSchedule;
struct DynArray_MobiGlasPersonalMessage_ShipChatScheduleEntry;
struct EntityAudioControllerRtpcSubscriberParams;
struct EntityComponentVehicleAudioPointParams;
struct InnerThought_InteractionSystemConfig;
struct InnerThought_LegacyUseSystemConfig;
struct InnerThought_ConversationSystemConfig;
struct UserVariablesComponentParams;
struct SEntityComponentCIGTestAParams;
struct DynArray_VibrationAudioEntry;
struct DynArray_AudioEnvironmentMovementRtpcBehavior;
struct DynArray_ThrusterOutputToRtpcList;
struct DynArray_IFCSOutputToRtpcList;
struct AudioPassByComponentParams;
struct TransitDisplayPanelStationAnnouncements;
struct WheelAudioSurfaceMap;
struct SBeamEffectParams;
struct JumpDriveMusicParams;
struct DynArray_SGalactapediaCategory;
struct QuantumMusicParams;
struct DynArray_ProceduralPlanetAudioDisturbanceList;
struct AudioSignalList;
struct DefaultActions;
struct DynArray_DrugTypeToApply;
struct DynArray_ConsumableContent;
struct DynArray_SHealingBeamConsumableType;
struct DynArray_DrugEfficacyForConsumableType;
struct ConsumableType;
struct HaulingOrder_DropOff;
struct DynArray_SMissionLocationModule;
struct CraftingGameplayPropertyImpl_SingleStat_Float;
struct BasicPingTypeParams;
struct DynArray_PingSettingsParams;
struct SPlayerSkillsTechniques;
struct SCItemRemoteConnectionParams;
struct SCItemAIModuleParams;
struct HygieneParams;
struct MovieClipTransformationInterpolator;
struct DynArray_VehicleEditorCategoryData;
struct DynArray_SLocalPlayerShoppingPredefinedARParams;
struct DynArray_VehicleEditorItemStatData;
struct DynArray_AIObservableFilters;
struct DynArray_DockingSlotVisibilityRule;
struct DynArray_ChatEmotePack;
struct DynArray_Infraction;
struct DynArray_SApplicationFormHeadHomeworld;
struct DynArray_SSCSignatureSystemAudioRuleset;
struct GForceParams;
struct DynArray_MissionScenario;
struct DynArray_InnerThought_LayoutGridSet;
struct HealthTemplate;
struct SActorExternalForceResponseCameraShakeDef;
struct CharacterSkills;
struct AuxiliaryWeaponActionMisfireParams;
struct ActorLookAheadVehicle;
struct ProcBreathingGraphEntry;
struct ProcBreathingCurveDatabase;
struct SActorForceReactionWeaponTwitchConfig;
struct SActorForceReactionHeadRecoilConfig;
struct SActorForceReactionAimPunchConfig;
struct SActorForceReactionGlobalEffectConfig;
struct DynArray_AbilityBreathAction;
struct ArmsLockConfig;
struct SXYZCurvesArrays;
struct SWeaponSimplifiedHeatParams;
struct SControlledEntityAutoCraneData;
struct WeaponPoseInterpolationCurves;
struct IFCSParams;
struct GlobalJumpPointParams;
struct SWeaponProceduralAimRecoilCurveConfigDef;
struct SVibrationVehicleDef;
struct DynArray_CinematicFlythroughPoint;
struct PlayerUsableView;
struct SWeaponProceduralHeadRecoilConfigDef;
struct ControlHintDef;
struct DialogueBundleReference;
struct DialogueBundleWeightedReference;
struct DynArray_SPerkReputationParams;
struct DynArray_PartialContractRewardRepAdjustment;
struct DynArray_SReputationScopeContextUI;
struct DynArray_ReputationRewardBaseDef;
struct ItemAwardWeightingsParams;
struct DynArray_FoleyItem;
struct DynArray_BuildingBlocks_StyleEntry;
struct BuildingBlocks_TimelineTypeEmbedded;
struct WeaponProceduralAnimation;
struct DynArray_SCharacterCustomizerDialogueEntry;
struct CameraSeatCockpitConfig;
struct CameraFirstPersonBaseConfig;
struct CameraPlayerHeadConfig;
struct DynArray_SeatUserActorCDIKMapping;
struct SCItemSeatDashboardUIDesc;
struct SCItemVisorDashboardConfig;
struct SGripContainer;
struct ProceduralAnimation;
struct LadderComponentParams;
struct ActorProceduralRecoilSetup;
struct ProceduralAimRigComponent;
struct DynArray_CockpitResponse;
struct DynArray_SHelmetStateMachineParams;
struct SCItemControlPriorities;
struct DynArray_ItemTypeInfo;
struct S42DifficultyParams;
struct BaseDifficultyParams;
struct DynArray_HudColor_Palette;
struct SHackingDifficultyPreset;
struct CameraLensParams;
struct AtmosphericCompositionTemplate;
struct SubHarvestableMultiConfigRef;
struct DynArray_AnimationGraph_Timeline;
struct StatusMaskedRetriggerPreset;
struct DynArray_ActorStatusData;
struct ActorLocomotionPersonality;
struct DynArray_AnimationJointMovement;
struct ActionRuleList;
struct Announcer;
struct SPUSpectator;
struct SFPSSpectator;
struct SISpectatorBase;
struct SDFMSpectator;
struct SCoverSystemComponentParams;
struct SRangedWeaponStats;
struct SWeaponModifierParams;
struct DynArray_AsteroidFieldShapeLinkParams;
struct SHackingGeneralSettingsPreset;
struct DynArray_SCItemObservableGroupParams;
struct ScanDisplayLayoutParams;
struct DynArray_AudioBreathStyle;
struct DynArray_SReputationJournalGroupParams;
struct SReputationStateMissionResultModifierParams;
struct CtxGraph_Group;
struct ActorStanceConfig;
struct MobiGlasPersonalMessage_ShipChatSchedule;
struct PlayerChoice_RemoteCommsConfig;
struct VibrationAudioPointDef;
struct TransitDisplayPanelParams;
struct TrackWheeledVehicleAudioComponentParams;
struct WheeledVehicleAudioComponentParams;
struct DynArray_SBeamEffectParams;
struct SGalactapediaData;
struct ProceduralPlanetAudioEntry;
struct DefaultActionsEntry;
struct MedBedTierParams;
struct DrugEfficacyForItemSubType;
struct DynArray_ConsumableType;
struct ChargePingTypeParams;
struct SPlayerSkillsParams;
struct UIGraph_MovieClipTransformationInterpolatorComponent;
struct VehicleEditorEditableCategoriesData;
struct SLocalPlayerShoppingData;
struct AIObservableFiltersProfile;
struct DockingSlotVisibility;
struct ChatEmoteRecord;
struct InfractionSet;
struct SSCSignatureSystemAudioParams;
struct DynArray_GForceParams;
struct InnerThought_LayoutGrid;
struct BodyHealthComponentParams;
struct AIProfile;
struct ActorLookAheadComponentParams;
struct DynArray_ProcBreathingGraphEntry;
struct SActorForceReactionKnockdownRangeDef;
struct SActorForceReactionFlinchRangeDef;
struct SActorForceReactionStaggerRangeDef;
struct SActorForceReactionTwitchRangeDef;
struct AbilityBreathingParams;
struct SXYZCurvesWithMaxValues;
struct WeaponProceduralClipPose;
struct SWeaponProceduralAimRecoilConfigDef;
struct EntityComponentVibrationVehicleParams;
struct CinematicFlightPointsRecord;
struct DynArray_PlayerUsableView;
struct DynArray_ControlHintDef;
struct SPerkReputationListParams;
struct PartialContractRewardRange;
struct SReputationContextUI;
struct SandboxTriggerManualParams;
struct FoleyDefinition;
struct BuildingBlocks_Style;
struct BuildingBlocks_Timeline;
struct SCMeleeWeaponParams;
struct SCharacterCustomizerDialogueData;
struct SeatUserActorCDIKRecord;
struct SCItemVisorDisplayParams;
struct ProceduralLandingFilter;
struct AttackCategoryParams;
struct DynArray_ActorProceduralRecoilSetup;
struct CockpitResponses;
struct ShipComputerPreset;
struct AnimatedHelmetParams;
struct ItemControllerComponentParams;
struct ItemTypeDefinition;
struct HudColors;
struct CameraEffectsModifiers;
struct CameraSourceComponentParams;
struct FireHazardGlobalSmokeParams;
struct SAtmosphericCompositionTemplateRef;
struct AnimatedMarker_Marker;
struct StatusMaskedRetriggerSetupPreset;
struct DynArray_StatusMaskedRetriggerPreset;
struct StatusEffectSetup;
struct AnimationJointControl;
struct DynArray_ActionRuleList;
struct SGameRulesAnnouncerParams;
struct DynArray_SRangedWeaponStats;
struct ItemWeaponModifiersParams;
struct DynArray_SWeaponModifierParams;
struct SAsteroidShapeComponentParams;
struct SCItemObservableParams;
struct DynArray_CtxGraph_Group;
struct EntityComponentVibrationAudioPointParams;
struct SBeamGroupParams;
struct SS42GalactapediaSourceDataParams;
struct DynArray_ProceduralPlanetAudioEntry;
struct DynArray_DefaultActionsEntry;
struct DynArray_MedBedTierParams;
struct DrugEfficacyConfigForItemSubType;
struct DynArray_DrugEfficacyForItemSubType;
struct ConsumableTypeDatabase;
struct SSCLocalPlayerUIComponentParams;
struct SVisionComponentParams;
struct DynArray_InfractionSet;
struct ActorGForceComponent;
struct ProcBreathingExertion;
struct DynArray_SActorForceReactionKnockdownRangeDef;
struct DynArray_SActorForceReactionFlinchRangeDef;
struct DynArray_SActorForceReactionStaggerRangeDef;
struct DynArray_SActorForceReactionTwitchRangeDef;
struct AbilityDefinition;
struct SWeaponProceduralHandsRecoilCurveConfigDef;
struct ControlHint_Entry;
struct DynArray_SPerkReputationListParams;
struct DynArray_PartialContractRewardRange;
struct SReputationContextPropertiesUI;
struct DynArray_SandboxTriggerManualParams;
struct SCItemFoleyParams;
struct EASpecialEventInformationParams;
struct BuildingBlocks_BrandStyles;
struct BuildingBlocks_DefaultStyles;
struct BuildingBlocks_TimelineTypeReference;
struct DynArray_ProceduralLandingFilter;
struct MeleeAttackCategoryInfo;
struct DynArray_AttackCategoryParams;
struct ActorProceduralRecoilConfig;
struct DynArray_ShipComputerPreset;
struct ActorGForceCameraEffects;
struct SQuantumCameraEffectsDef;
struct ActorSpeedCameraEffects;
struct JumpTravelCameraParams;
struct FireHazardGlobalParams;
struct DynArray_AnimatedMarker_Marker;
struct ActorStatusPreset;
struct SAnimationControllerParams;
struct PersonalThoughtActionsRulesParams;
struct WeaponGimbalModeModifierDef;
struct SCItemControlAIModuleParams;
struct SCItemControlSeatParams;
struct CtxGraph;
struct SAuxiliaryWeaponActionBeamParams;
struct SWeaponModifierBeamEffectParams;
struct ActorDefaultActionsConfig;
struct MedicalItemTierConfig;
struct DrugEfficacyConfigForItemSubTypeWeapon;
struct DynArray_ProcBreathingExertion;
struct SActorForceReactionKnockdownConfigDef;
struct SActorForceReactionFlinchConfigDef;
struct SActorForceReactionFilteredStaggerRangeDef;
struct SActorForceReactionUnfilteredStaggerConfigDef;
struct SActorForceReactionTwitchConfigDef;
struct DynArray_AbilityDefinition;
struct SWeaponProceduralHandsRecoilConfigDef;
struct DynArray_ControlHint_Entry;
struct PartialContractRewards;
struct SandboxTriggerRecord;
struct DynArray_EASpecialEventInformationParams;
struct DynArray_BuildingBlocks_BrandStyles;
struct ProceduralLandingSetup;
struct AIBasicMeleeAttack;
struct MeleeFragInfo;
struct DynArray_MeleeAttackCategoryInfo;
struct ShipComputerPresetList;
struct ActorSlidingParams;
struct AnimatedMarker;
struct StatusEffectSetupPreset;
struct DynArray_ActorStatusPreset;
struct ProcBreathingSetup;
struct DynArray_SActorForceReactionFlinchConfigDef;
struct DynArray_SActorForceReactionFilteredStaggerRangeDef;
struct DynArray_SActorForceReactionTwitchConfigDef;
struct ActorAbilityComponent;
struct WeaponProceduralRecoilConfigDef;
struct ControlHints_Preset;
struct SandboxTriggerRecordParams;
struct SEntityComponentFrontendEAUIProviderParams;
struct ActorLandingNode;
struct DynArray_MeleeFragInfo;
struct AIMeleeCombatConfig;
struct PlayerChoice_IMConfig;
struct SCItemRadarDisplayHoloVolumeParams;
struct MobiGlasRemoteParams;
struct MobiGlasClientParams;
struct SActorForceReactionFilteredStaggerConfigDef;
struct ControlHintGameModeRecords;
struct LandingSelection;
struct DynArray_ActorLandingNode;
struct MeleeAttackInfo;
struct SAISpecialActionsParams;
struct SCItemMobiGlasParams;
struct SActorForceReactionsDef;
struct Visor_ControlHintsConfig;
struct DynArray_LandingSelection;
struct DynArray_MeleeAttackInfo;
struct VisorHUD_Config;
struct ActorFallNode;
struct MeleeCombatConfig;
struct ActorJumpNode;
struct DynArray_ActorFallNode;
struct SMeleeWeaponComponentParams;
struct SMeleeComponentParams;
struct ActorJumpFallLandVariantConfigNode;
struct DynArray_ActorJumpNode;
struct DynArray_ActorJumpFallLandVariantConfigNode;
struct JumpFallLandConfig;


/*=========================================================================*/
/*   CYCLIC / UNPROCESSED STRUCT DEFINITIONS                             */
/*=========================================================================*/
/* These structs have cyclic dependencies or could not be sorted.        */
/* Forward declarations above should resolve pointer usage issues.       */

// Original name: AITargetableComponentParams
// Size: 0x60
// VTable: 0x149a025a8
struct AITargetableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    AITargetableSettings targetableSettings; // Offset: 0x18
    DynArray_Formation* formations; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
};

// Original name: AIWave
// Size: 0x58
// VTable: 0x149a944e8
struct AIWave {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t id; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* textId; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    float staggerTime; // Offset: 0x20
    uint8_t _pad_3[0x4]; // Offset: 0x24
    DynArray_AIWaveMember* members; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x30
};

// Original name: AIWaveCollection
// Size: 0x38
// VTable: 0x149a94540
struct AIWaveCollection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AIWave* waves; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AIWaveMember
// Size: 0xd8
// VTable: 0x149a94418
struct AIWaveMember {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* archetype; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    EntityClassDefinition entityClassDefinition; // Offset: 0x18
    CryStringT* name; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
    CryStringT* vehicleName; // Offset: 0x40
    uint8_t _pad_3[0x8]; // Offset: 0x48
    int32_t amount; // Offset: 0x50
    int32_t minAmount; // Offset: 0x54
    int32_t midAmount; // Offset: 0x58
    int32_t maxAmount; // Offset: 0x5c
    CrewManifest crewManifestOverride; // Offset: 0x60
    SkillDefinitions skillsetOverride; // Offset: 0x78
    DynArray_CargoManifest* cargoManifests; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x98
    SVehicleAiDamageModifiers aiDamageModifiersOverride; // Offset: 0xc0
};

// Original name: ARModeSettings
// Size: 0x30
// VTable: 0x149a87ac8
struct ARModeSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float playerLabelOffsetX; // Offset: 0x8
    float playerLabelOffsetY; // Offset: 0xc
    float playerLabelOffsetZ; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    RadarDisplay3DPreset starMapParams; // Offset: 0x18
};

// Original name: ActorInteractionPointStateModifier
// Size: 0x28
// VTable: 0x149a638f8
struct ActorInteractionPointStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState normalState; // Offset: 0x8
    SInteractionState deadOrIncapacitatedState; // Offset: 0x18
};

// Original name: ActorMarkerTrackerParams
// Size: 0x78
// VTable: 0x149a236e8
struct ActorMarkerTrackerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GrenadeMarkerProvider Grenades; // Offset: 0x18
    LocationPinMarkerProvider LocationPins; // Offset: 0x28
    NavigationWaypointMarkerProvider NavigationWaypoints; // Offset: 0x38
    ObjectDataBankMarkerProvider ObjectDataBank; // Offset: 0x48
    PlayerMarkerProvider Player; // Offset: 0x58
    VehicleEntranceMarkerProvider VehicleEntrances; // Offset: 0x68
};

// Original name: ActorMechanicsParams
// Size: 0x58
// VTable: 0x1499d4bf8
struct ActorMechanicsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool allowZeroGTraversal; // Offset: 0x8
    bool allowEVAIronman; // Offset: 0x9
    bool allowSwimming; // Offset: 0xa
    bool allowSliding; // Offset: 0xb
    bool allowInAirLedgeGrab; // Offset: 0xc
    bool allowLadderV2; // Offset: 0xd
    bool allowKioskWalkToAlign; // Offset: 0xe
    bool allowKioskV2; // Offset: 0xf
    bool allowProneV2; // Offset: 0x10
    bool allowFirstSelects; // Offset: 0x11
    uint8_t _pad_1[0x6]; // Offset: 0x12
    DynArray_OutfitParams* outfitParams; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    bool allowUnlimitedEVAFuel; // Offset: 0x48
    bool allowEVARefuelFromAtmosphere; // Offset: 0x49
    bool allowNPCInfiniteAmmo; // Offset: 0x4a
    bool allowLooting; // Offset: 0x4b
    bool allowRestockOnNPCLootingAmmo; // Offset: 0x4c
    bool allowRestockOnNPCLootingWeapons; // Offset: 0x4d
    bool allowInfiniteRestraints; // Offset: 0x4e
    bool allowLowerOnFriendlyEntities; // Offset: 0x4f
    bool allowLowerOnFriendlyActors; // Offset: 0x50
    bool allowScriptedVisorFrost; // Offset: 0x51
    bool allowRadiationStats; // Offset: 0x52
    uint8_t _pad_3[0x5]; // Offset: 0x53
};

// Original name: ActorStatusComponent
// Size: 0x4c8
// VTable: 0x149a00150
struct ActorStatusComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SpeedThreshold* speedThresholds; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ActorStatData* actorStats; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_ActorStatusPreset* actorStatusPresets; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_LinkedStatSetupPreset* linkedStatPresets; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_StatusMaskedRetriggerPreset* maskedRetriggerPresets; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
    ActorStatusUIData actorStatusUIData; // Offset: 0xf8
    DynArray_AbilityStatusCosts* abilityStatusCosts; // Offset: 0x1d8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x1e0
    DynArray_ActionStatusCosts* actionStatusCosts; // Offset: 0x208 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x210
    DynArray_StatusEffectAbilityLock* statusEffectAbilityLocks; // Offset: 0x238 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x240
    ConsumableParams consumptionParams; // Offset: 0x268
    ArmsLockConfig armsLockParams; // Offset: 0x280
    DriftingConsciousnessConfig driftingConsciousnessParams; // Offset: 0x350
    DownedConfig downedParams; // Offset: 0x370
    DriftingDrunkConfig driftingDrunkParams; // Offset: 0x398
    SignatureParams actorSignatureParams; // Offset: 0x430
    ResistanceWeightParams bodyResistanceWeights; // Offset: 0x440
    RevivalFadeInParams revivalFadeinParams; // Offset: 0x460
    ActorStatusGlobalParams globalParams; // Offset: 0x470
    float BDLSafeLimit; // Offset: 0x488
    uint8_t _pad_9[0x4]; // Offset: 0x48c
    ActorToxicGasParams toxicGasParams; // Offset: 0x490
    HygieneParams hygieneParams; // Offset: 0x4a0
};

// Original name: ActorStatusGlobalParams
// Size: 0x280
// VTable: 0x1499ffdd8
struct ActorStatusGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorStatusEffect* actorStatusEffects; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ActorStatusBuff* actorStatusBuffs; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    ActorStatusLocalisation actorStatusLocalisation; // Offset: 0x68
    MedicalItemTierConfig medicalItemTierConfig; // Offset: 0x100
    ConsumableType drugConsumableType; // Offset: 0x118
    ActorSomaticShakingParams somaticShakeParams; // Offset: 0x130
    ConsumableSubtype overdoseRevivalConsumableSubType; // Offset: 0x238
    DynArray_Tag* statusPlacedSurfaceEffectsTags; // Offset: 0x250 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x258
};

// Original name: ActorStatusScanProcedureParams
// Size: 0x70
// VTable: 0x1499c7990
struct ActorStatusScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    ActorStatusPrioritySet prioritySet; // Offset: 0x30
};

// Original name: ActorZeroGTraversalParams
// Size: 0x60
// VTable: 0x149a9c788
struct ActorZeroGTraversalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCDefaultZeroGTraversalParams defaultZeroGTraversalParams; // Offset: 0x8
    DynArray_SCOptionalZeroGTraversalParams* optionalZeroGTraversalParams; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
};

// Original name: AdditionalProjectilesParams
// Size: 0x38
// VTable: 0x149a18308
struct AdditionalProjectilesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AmmoParams ammoRecord; // Offset: 0x8
    int32_t amount; // Offset: 0x20
    float spreadDegrees; // Offset: 0x24
    Range lifetimeRange; // Offset: 0x28
};

// Original name: AfterActionReportReputationImpact
// Size: 0x40
// VTable: 0x149a36798
struct AfterActionReportReputationImpact {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition orgOrNPC; // Offset: 0x8
    SReputationScopeParams scope; // Offset: 0x20
    int32_t impactValue; // Offset: 0x38
    bool replaceCurrentValue; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
};

// Original name: AggregateStateModifier
// Size: 0x38
// VTable: 0x1499c15b0
struct AggregateStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AggregateStateParams* aggregateStateParams; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AggregateStateParams
// Size: 0x48
// VTable: 0x1499c1558
struct AggregateStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SInteractionState* aggregateStates; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SInteractionState state; // Offset: 0x38
};

// Original name: AlignmentSlotBase
// Size: 0xb8
// VTable: 0x149a92138
struct AlignmentSlotBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* name; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool available; // Offset: 0x28
    bool canPlayerUse; // Offset: 0x29
    uint8_t _pad_3[0x6]; // Offset: 0x2a
    DynArray_SInteractionPointParams* interactionPoints; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
    CryStringT* fragmentTag; // Offset: 0x60
    uint8_t _pad_5[0x8]; // Offset: 0x68
    DynArray_Tag* optionalGameTags; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x78
    CryStringT* slottedFragmentTag; // Offset: 0xa0
    uint8_t _pad_7[0x10]; // Offset: 0xa8
};

// Original name: AlignmentSlotExclusivityGroup
// Size: 0x40
// VTable: 0x149a91fc0
struct AlignmentSlotExclusivityGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AlignmentSlotBase* alignmentSlots; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x10
};

// Original name: AmmoParams
// Size: 0x158
// VTable: 0x1499ce610
struct AmmoParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType spawnType; // Offset: 0x8
    uint8_t size; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    ARDataType ammoCategory; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    CryStringT* UIIconType; // Offset: 0x18
    uint8_t _pad_3[0x8]; // Offset: 0x20
    float hitPoints; // Offset: 0x28
    float lifetime; // Offset: 0x2c
    float showtime; // Offset: 0x30
    float inheritVelocity; // Offset: 0x34
    int32_t bulletType; // Offset: 0x38
    float speed; // Offset: 0x3c
    float impulseScale; // Offset: 0x40
    bool noBulletHits; // Offset: 0x44
    bool quietRemoval; // Offset: 0x45
    uint8_t _pad_4[0x2]; // Offset: 0x46
    GlobalResourceAudio whizSound; // Offset: 0x48
    float whizSoundDistance; // Offset: 0x68
    uint8_t _pad_5[0x4]; // Offset: 0x6c
    GlobalResourceAudio ricochetSound; // Offset: 0x70
    bool useInConvergence; // Offset: 0x90
    uint8_t _pad_6[0x7]; // Offset: 0x91
    GlobalResourceParticle trailParticles; // Offset: 0x98
    SGeometryResourceParams geometryResourceParams; // Offset: 0xb0
    SEntityPhysicsControllerParams physicsControllerParams; // Offset: 0xc0
    PooledLightData lightPoolParams; // Offset: 0xd0
    ProjectileParams projectileParams; // Offset: 0xe0
    SSCSignatureSystemParams radarObjectParams; // Offset: 0xf0
    GlobalResourceAudio projectileLoopStart; // Offset: 0x100
    GlobalResourceAudio projectileLoopStop; // Offset: 0x120
    uint32_t shotsPerAudioLoop; // Offset: 0x140
    uint8_t _pad_7[0x4]; // Offset: 0x144
    CLocIdentifier* displayName; // Offset: 0x148
    uint8_t _pad_8[0x8]; // Offset: 0x150
};

// Original name: AnimationNavigationLink
// Size: 0x90
// VTable: 0x1499ecc50
struct AnimationNavigationLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkValidForAgentType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    NavigationLinkCostCustomization costMultiplierSetup; // Offset: 0x18
    ARDataType linkingType; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    UsableUseChannelInstance useChannel; // Offset: 0x58
    NavLinkLocation anchor; // Offset: 0x68
    CryStringT* mannequinTags; // Offset: 0x78
    uint8_t _pad_3[0x8]; // Offset: 0x80
    bool animationEndsAtAnchor; // Offset: 0x88
    uint8_t _pad_4[0x7]; // Offset: 0x89
};

// Original name: AreaAlignmentSlot
// Size: 0x298
// VTable: 0x149a92430
struct AreaAlignmentSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* name; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool available; // Offset: 0x28
    bool canPlayerUse; // Offset: 0x29
    uint8_t _pad_3[0x6]; // Offset: 0x2a
    DynArray_SInteractionPointParams* interactionPoints; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
    CryStringT* fragmentTag; // Offset: 0x60
    uint8_t _pad_5[0x8]; // Offset: 0x68
    DynArray_Tag* optionalGameTags; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x78
    CryStringT* slottedFragmentTag; // Offset: 0xa0
    uint8_t _pad_7[0x10]; // Offset: 0xa8
    CryStringT* helperName; // Offset: 0xb8
    uint8_t _pad_8[0x8]; // Offset: 0xc0
    QuatT relativeTransform; // Offset: 0xc8
    bool entityRelativeRotation; // Offset: 0x120
    bool entityRelativeTranslation; // Offset: 0x121
    uint8_t _pad_9[0x2]; // Offset: 0x122
    ARDataType linkMode; // Offset: 0x124
    ARDataType stance; // Offset: 0x128
    bool useHandIK; // Offset: 0x12c
    bool useADIK; // Offset: 0x12d
    uint8_t _pad_10[0x2]; // Offset: 0x12e
    SUsableViewParams viewParams; // Offset: 0x130
    SUsableEnterTransitionParams enterParams; // Offset: 0x148
    SUsableExitTransitionParams exitParams; // Offset: 0x1b0
    SUsableIdleParams usableIdleParams; // Offset: 0x228
    SUsableAttachFlagParams additionalAttachmentFlags; // Offset: 0x260
    AreaAlignmentSlotTypeParams areaTypeParams; // Offset: 0x270
    int32_t maxAmount; // Offset: 0x280
    uint8_t _pad_11[0x4]; // Offset: 0x284
    SSharedInteractionParams interactionOnEnter; // Offset: 0x288
};

// Original name: AreaMapParams
// Size: 0x2d0
// VTable: 0x1499ca378
struct AreaMapParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* groundMaterial; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* wallMaterial; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* groundMaterialFaded; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    CryStringT* wallMaterialFaded; // Offset: 0x48
    uint8_t _pad_4[0x8]; // Offset: 0x50
    CryStringT* doorMaterial; // Offset: 0x58
    uint8_t _pad_5[0x8]; // Offset: 0x60
    CryStringT* markerMaterial; // Offset: 0x68
    uint8_t _pad_6[0x8]; // Offset: 0x70
    CryStringT* markerGeomName; // Offset: 0x78
    uint8_t _pad_7[0x8]; // Offset: 0x80
    CryStringT* doorGeomName; // Offset: 0x88
    uint8_t _pad_8[0x8]; // Offset: 0x90
    CryStringT* rttGeomMaterial; // Offset: 0x98
    uint8_t _pad_9[0x8]; // Offset: 0xa0
    CryStringT* entityClipName; // Offset: 0xa8
    uint8_t _pad_10[0x8]; // Offset: 0xb0
    CryStringT* rttoName; // Offset: 0xb8
    uint8_t _pad_11[0x8]; // Offset: 0xc0
    CryStringT* outlineMaterial; // Offset: 0xc8
    uint8_t _pad_12[0x8]; // Offset: 0xd0
    Tag entityComponentRoomTag; // Offset: 0xd8
    Tag entityComponentRoomConnectorTag; // Offset: 0xf0
    Tag entityComponentRoomGroupTag; // Offset: 0x108
    AreaMapCameraParams cameraParams; // Offset: 0x120
    UI3DDisplayInputParams inputParams; // Offset: 0x270
    Vec2 rttGeomDimensions; // Offset: 0x2c0
};

// Original name: ArenaCommanderLocationObjectContainersParams
// Size: 0x58
// VTable: 0x149a3bf50
struct ArenaCommanderLocationObjectContainersParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObject location; // Offset: 0x8
    bool overrideRootOC; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    DynArray_CryStringT* objectContainers; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: ArenaCommanderPlanetOverrideParams
// Size: 0x28
// VTable: 0x149a3bfd8
struct ArenaCommanderPlanetOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObject location; // Offset: 0x8
    float fixedRotation; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: ArenaCommanderScenarioParams
// Size: 0x28
// VTable: 0x149a3c058
struct ArenaCommanderScenarioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ArenaCommanderLocationObjectContainersParams locationObjectContainersParams; // Offset: 0x8
    ArenaCommanderPlanetOverrideParams planetOverrideParams; // Offset: 0x18
};

// Original name: ArmorScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7a20
struct ArmorScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: ArmouryCertificationParams
// Size: 0x38
// VTable: 0x1499dc988
struct ArmouryCertificationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag certificationUnlockTag; // Offset: 0x8
    EntityClassDefinition weaponProvided; // Offset: 0x20
};

// Original name: ArmouryData
// Size: 0x68
// VTable: 0x1499dca08
struct ArmouryData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ArmouryItemCategory* armouryCategories; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ArmouryCertificationParams* certificationParams; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: ArmouryItem
// Size: 0xd8
// VTable: 0x1499dc780
struct ArmouryItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    CLocIdentifier* descriptionOverride; // Offset: 0x20
    DynArray_SecurityClearanceToken* tokensToUnlock; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    DynArray_SecurityClearanceToken* tokensToBeVisible; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
    DynArray_ArmouryItemStat* itemStats; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x90
    bool allowMultipleCheckouts; // Offset: 0xb8
    uint8_t _pad_4[0x7]; // Offset: 0xb9
    EntityClassDefinition displayEntity; // Offset: 0xc0
};

// Original name: ArmouryItemCategory
// Size: 0x88
// VTable: 0x1499dc900
struct ArmouryItemCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
    DynArray_ArmouryItem* armouryItems; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    bool isWeaponCategory; // Offset: 0x50
    uint8_t _pad_3[0x7]; // Offset: 0x51
    DynArray_SArmouryItemFilter* itemFilters; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x60
};

// Original name: ArmouryTerminalParams
// Size: 0xa0
// VTable: 0x1499dcf78
struct ArmouryTerminalParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    EntityReferenceDef armouryManager; // Offset: 0x18
    SecurityClearanceToken registrationCompleteToken; // Offset: 0x30
    SInteractionState registerState; // Offset: 0x48
    SInteractionState registrationCompleteState; // Offset: 0x58
    SInteractionState useState; // Offset: 0x68
    SInteractionState processingState; // Offset: 0x78
    SInteractionState checkoutItemsState; // Offset: 0x88
    float armourerRequestTimeout; // Offset: 0x98
    uint8_t _pad_1[0x4]; // Offset: 0x9c
};

// Original name: AsteroidBehavior
// Size: 0x70
// VTable: 0x149979ae8
struct AsteroidBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Behavior_VehicleEffectParams vehicleEffects; // Offset: 0x8
    AsteroidBehavior_WeatherParams weather; // Offset: 0x28
    Tag asteroidEnvironmentTag; // Offset: 0x38
    AudioRtpc asteroidDensityRtpc; // Offset: 0x50
};

// Original name: AtmosphereBehavior
// Size: 0xd8
// VTable: 0x14997aac0
struct AtmosphereBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Behavior_AtmosphereVehicleEffectParams vehicleEffects; // Offset: 0x8
    AtmosphereBehavior_TurbulenceParams turbulence; // Offset: 0x38
    AtmosphereBehavior_WeatherParams weather; // Offset: 0x48
    bool enableAtmosphericHeating; // Offset: 0x58
    bool enableActorVectorFields; // Offset: 0x59
    uint8_t _pad_1[0x6]; // Offset: 0x5a
    Tag atmosphereEnvironmentTag; // Offset: 0x60
    AudioRtpc atmospherePressureRtpc; // Offset: 0x78
    AudioRtpc atmosphereTemperatureRtpc; // Offset: 0x98
    AudioRtpc atmosphereHumidityRtpc; // Offset: 0xb8
};

// Original name: AudioBreathDefinition
// Size: 0x1c0
// VTable: 0x149a6d828
struct AudioBreathDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioBreathStyleSuite defaultBreathingStyles; // Offset: 0x8
    AudioBreathStyleSuite pilotBreathingStyles; // Offset: 0x20
    SAudioBreathParameters params; // Offset: 0x38
    DynArray_GlobalResourceAudio* audioEvents; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x50
    DynArray_AudioRtpcWithDefault* audioRTPCs; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x80
    BreathVolumeParams breathVolumeParams; // Offset: 0xa8
    BreathDurationParams breathDurationParams; // Offset: 0xb8
    DynArray_AudioBreathStyle* holdBreathStylesWhitelist; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x108
    ProcBreathingSetup defaultProcBreathingSetup; // Offset: 0x130
    AudioBreathInterrupt defaultLandingRecord; // Offset: 0x148
    MistedBreathParams mistedBreathParams; // Offset: 0x160
    DynArray_StanceBreathModifier* stanceBreathModifiers; // Offset: 0x190 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x198
};

// Original name: AudioBreathStyleNode
// Size: 0x60
// VTable: 0x149a6d590
struct AudioBreathStyleNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* description; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    AudioBreathStyle style; // Offset: 0x18
    DynArray_AudioBreathStyleTransitionNode* transitions; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
};

// Original name: AudioBreathStyleSuite
// Size: 0x48
// VTable: 0x149a6d618
struct AudioBreathStyleSuite {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioBreathStyleNode initialStyle; // Offset: 0x8
    DynArray_AudioBreathStyleBaseNode* nodes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: AudioBreathStyleTransitionNode
// Size: 0x60
// VTable: 0x149a6d4e0
struct AudioBreathStyleTransitionNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* description; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float whenConditionsAreTrueFor; // Offset: 0x18
    bool onNextInhale; // Offset: 0x1c
    bool onNextExhale; // Offset: 0x1d
    bool immediately; // Offset: 0x1e
    uint8_t _pad_2[0x1]; // Offset: 0x1f
    DynArray_AudioBreathStyleCondition* conditions; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    AudioBreathStyleNode style; // Offset: 0x50
};

// Original name: AudioBudgetDefinition
// Size: 0x48
// VTable: 0x149a95708
struct AudioBudgetDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioOneShotManagerBudgetEntry* oneshotBudget; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    int32_t shipAudioLimit; // Offset: 0x38
    int32_t shipThrusterLimit; // Offset: 0x3c
    int32_t actorFoleyLimit; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: AudioEnvironmentFeedbackPointDef
// Size: 0x38
// VTable: 0x149a1a6c0
struct AudioEnvironmentFeedbackPointDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioEnvironmentFeedbackTagAndEvent* tagAndEvents; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AudioEnvironmentFeedbackTagAndEvent
// Size: 0x90
// VTable: 0x149a1a668
struct AudioEnvironmentFeedbackTagAndEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    GlobalResourceAudio loopStart; // Offset: 0x20
    GlobalResourceAudio loopStop; // Offset: 0x40
    DynArray_AudioEnvironmentMovementRtpcBehavior* movementRtpcs; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x68
};

// Original name: AudioEnvironmentFeedbackZoneProcess
// Size: 0x170
// VTable: 0x149a1a4d0
struct AudioEnvironmentFeedbackZoneProcess {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    BezierCurve radius; // Offset: 0x20
    float maxRadius; // Offset: 0xb0
    uint8_t _pad_1[0x4]; // Offset: 0xb4
    BezierCurve environmentValue; // Offset: 0xb8
    float maxEnvironmentValue; // Offset: 0x148
    float lifeTime; // Offset: 0x14c
    AudioRtpc effectRtpc; // Offset: 0x150
};

// Original name: AudioEnvironmentFeedbackZoneSetup
// Size: 0x38
// VTable: 0x149a1a530
struct AudioEnvironmentFeedbackZoneSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioEnvironmentFeedbackZoneProcess* processes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AudioGameContext
// Size: 0x38
// VTable: 0x149a95808
struct AudioGameContext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioBudgetDefinition budgetDefinition; // Offset: 0x8
    AudioGameContextGlobals globalRtpcsAndStates; // Offset: 0x20
};

// Original name: AudioGameContextSetup
// Size: 0x38
// VTable: 0x149a95860
struct AudioGameContextSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioGameContext* gameContexts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AudioHitListenerDefinition
// Size: 0x168
// VTable: 0x1499dffb8
struct AudioHitListenerDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioHitTypeDefinition melee; // Offset: 0x8
    AudioHitTypeDefinition collision; // Offset: 0x18
    AudioHitTypeDefinition crash; // Offset: 0x28
    AudioHitTypeDefinition frag; // Offset: 0x38
    AudioHitTypeDefinition explosion; // Offset: 0x48
    AudioHitTypeDefinition takedown; // Offset: 0x58
    AudioHitTypeDefinition punish; // Offset: 0x68
    AudioHitTypeDefinition normal; // Offset: 0x78
    AudioHitTypeDefinition fire; // Offset: 0x88
    AudioHitTypeDefinition bullet; // Offset: 0x98
    AudioHitTypeDefinition vehicleDestruction; // Offset: 0xa8
    AudioHitTypeDefinition eventDamage; // Offset: 0xb8
    AudioHitTypeDefinition bleedOut; // Offset: 0xc8
    AudioHitTypeDefinition electricArc; // Offset: 0xd8
    AudioHitTypeDefinition repair; // Offset: 0xe8
    AudioHitTypeDefinition suffocate; // Offset: 0xf8
    AudioHitTypeDefinition suicide; // Offset: 0x108
    AudioHitTypeDefinition selfDestruct; // Offset: 0x118
    AudioHitTypeDefinition boundaryViolation; // Offset: 0x128
    AudioHitTypeDefinition drown; // Offset: 0x138
    AudioHitTypeDefinition damageOverTime; // Offset: 0x148
    AudioHitTypeDefinition hazard; // Offset: 0x158
};

// Original name: AudioHitListenerTrigger
// Size: 0xc0
// VTable: 0x1499dfb68
struct AudioHitListenerTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio trigger; // Offset: 0x8
    AudioRtpc rtpcTimeSinceLastTrigger; // Offset: 0x28
    AudioRtpc rtpcDamage; // Offset: 0x48
    AudioRtpc rtpcRatioAfterHit; // Offset: 0x68
    float oneShotMinPlayTime; // Offset: 0x88
    float cooldown; // Offset: 0x8c
    Tag oneshotTag; // Offset: 0x90
    Tag oneshotTagPlayer; // Offset: 0xa8
};

// Original name: AudioHitTypeDefinition
// Size: 0x248
// VTable: 0x1499dfc10
struct AudioHitTypeDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioHitListenerTrigger triggerImpactHealth; // Offset: 0x8
    AudioHitListenerTrigger triggerImpactShield; // Offset: 0xc8
    AudioHitListenerTrigger triggerShieldFail; // Offset: 0x188
};

// Original name: AudioOneShotManagerBudgetEntry
// Size: 0x28
// VTable: 0x149a95630
struct AudioOneShotManagerBudgetEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    int32_t maxAudioObjects; // Offset: 0x20
    float priorityFalloffPerSecond; // Offset: 0x24
};

// Original name: AudioSplineParams
// Size: 0x58
// VTable: 0x1499e0638
struct AudioSplineParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool activatedRoute; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float traversalDuration; // Offset: 0x1c
    AudioRtpc audioRTPCDistanceTravelled; // Offset: 0x20
    Tag activationTag; // Offset: 0x40
};

// Original name: AudioThrusterProperties
// Size: 0x68
// VTable: 0x149a1cf50
struct AudioThrusterProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float audioSize; // Offset: 0x8
    float techLevel; // Offset: 0xc
    float civilianLow; // Offset: 0x10
    float civilianMed; // Offset: 0x14
    float civilianHigh; // Offset: 0x18
    float industrial; // Offset: 0x1c
    float military; // Offset: 0x20
    float racing; // Offset: 0x24
    float stealth; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    Tag groupTag; // Offset: 0x30
    AudioRtpc groupRTPC; // Offset: 0x48
};

// Original name: AutoSpawnSettings
// Size: 0x290
// VTable: 0x1499e44c0
struct AutoSpawnSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* initialActivity; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    TagList positiveCharacterTags; // Offset: 0x28
    TagList negativeCharacterTags; // Offset: 0x60
    bool excludeShipCrew; // Offset: 0x98
    uint8_t _pad_3[0x3]; // Offset: 0x99
    ARDataType excludeSpawnGender; // Offset: 0x9c
    int32_t minGroupSize; // Offset: 0xa0
    int32_t maxGroupSize; // Offset: 0xa4
    int32_t maxConcurrentSpawns; // Offset: 0xa8
    int32_t maxSpawns; // Offset: 0xac
    float minSpawnDelay; // Offset: 0xb0
    float maxSpawnDelay; // Offset: 0xb4
    DynArray_SpawnSettingsInventoryItem* inventoryItems; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xc0
    TagList closetPositiveTags; // Offset: 0xe8
    TagList closetNegativeTags; // Offset: 0x120
    TagList roomPositiveTags; // Offset: 0x158
    TagList roomNegativeTags; // Offset: 0x190
    TagList defendAreaPositiveTags; // Offset: 0x1c8
    TagList defendAreaNegativeTags; // Offset: 0x200
    TagList entityTags; // Offset: 0x238
    Faction factionOverride; // Offset: 0x270
    bool missionAlliedMarker; // Offset: 0x288
    bool isCritical; // Offset: 0x289
    uint8_t _pad_5[0x6]; // Offset: 0x28a
};

// Original name: BaseMissionPropertyValueOption
// Size: 0x48
// VTable: 0x149969278
struct BaseMissionPropertyValueOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* textId; // Offset: 0x8
    float weighting; // Offset: 0x10
    bool DEBUG_forceChooseThisOption; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    DynArray_DependentMissionProperty* dependentProperties; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: BeaconsContracts
// Size: 0x50
// VTable: 0x1499707c8
struct BeaconsContracts {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ContractTemplate* serviceBeacons; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ContractGenerator serviceBeaconContractGenerator; // Offset: 0x38
};

// Original name: Behavior_AtmosphereVehicleEffectParams
// Size: 0x30
// VTable: 0x14997a7a0
struct Behavior_AtmosphereVehicleEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableEngineTrails; // Offset: 0x8
    bool enableEngineContrails; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    Behavior_CustomVehicleEffectsPreset customVehicleEffects; // Offset: 0x10
    AerodynamicTrailCalculation aerodynamicTrailCalculation; // Offset: 0x20
};

// Original name: Behavior_CustomQuantumDriveEffectsPreset
// Size: 0x78
// VTable: 0x149a54670
struct Behavior_CustomQuantumDriveEffectsPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityEffectSystem_ParticleCategory particleEffects; // Offset: 0x8
};

// Original name: Behavior_CustomVehicleEffectsPreset
// Size: 0x78
// VTable: 0x14997d520
struct Behavior_CustomVehicleEffectsPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityEffectSystem_ParticleCategory particleEffects; // Offset: 0x8
};

// Original name: Behavior_ElectricalVehicleEffectParams
// Size: 0x40
// VTable: 0x1499796f0
struct Behavior_ElectricalVehicleEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableEngineTrails; // Offset: 0x8
    bool enableEngineContrails; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    Behavior_CustomVehicleEffectsPreset customVehicleEffects; // Offset: 0x10
    ElectricalCalculationPropertyRange customVehicleCalculation; // Offset: 0x20
};

// Original name: Behavior_JumpDriveEffectsPreset
// Size: 0x78
// VTable: 0x1499f4560
struct Behavior_JumpDriveEffectsPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityEffectSystem_ParticleCategory particleEffects; // Offset: 0x8
};

// Original name: Behavior_VehicleEffectParams
// Size: 0x20
// VTable: 0x14997d5d0
struct Behavior_VehicleEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableEngineTrails; // Offset: 0x8
    bool enableEngineContrails; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    Behavior_CustomVehicleEffectsPreset customVehicleEffects; // Offset: 0x10
};

// Original name: BindingsOperations_AudioEvent
// Size: 0x78
// VTable: 0x149986d48
struct BindingsOperations_AudioEvent {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType triggerEvent; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0x48
    Tag soundTag; // Offset: 0x58
    bool triggerOnInitialValue; // Offset: 0x70
    uint8_t _pad_2[0x7]; // Offset: 0x71
};

// Original name: BindingsOperations_AudioParameter
// Size: 0x68
// VTable: 0x149986dc8
struct BindingsOperations_AudioParameter {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x40
    Tag audioParameterTag; // Offset: 0x50
};

// Original name: BindingsOperations_IntegerStringCanvasPair
// Size: 0x28
// VTable: 0x149989398
struct BindingsOperations_IntegerStringCanvasPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t first; // Offset: 0x8
    BuildingBlocks_Canvas second; // Offset: 0x10
};

// Original name: BindingsOperations_StringFromIntegerSwitchCanvas
// Size: 0xa8
// VTable: 0x149989bf0
struct BindingsOperations_StringFromIntegerSwitchCanvas {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BindingsOperations_IntegerStringCanvasPair* values; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    BuildingBlocks_Canvas defaultValue; // Offset: 0x80
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x98
};

// Original name: BlockedHintParams
// Size: 0x20
// VTable: 0x149a8d520
struct BlockedHintParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    HintTriggerData hintTrigger; // Offset: 0x8
};

// Original name: BoidActorProximityTransition
// Size: 0x50
// VTable: 0x1499ec4a0
struct BoidActorProximityTransition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* animationTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    BoidState transition; // Offset: 0x28
    bool instantTransition; // Offset: 0x38
    bool allowWhileTransitioning; // Offset: 0x39
    uint8_t _pad_3[0xe]; // Offset: 0x3a
    float distance; // Offset: 0x48
    uint8_t _pad_4[0x4]; // Offset: 0x4c
};

// Original name: BoidAlertedTransition
// Size: 0x48
// VTable: 0x1499ec440
struct BoidAlertedTransition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* animationTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    BoidState transition; // Offset: 0x28
    bool instantTransition; // Offset: 0x38
    bool allowWhileTransitioning; // Offset: 0x39
    uint8_t _pad_3[0xe]; // Offset: 0x3a
};

// Original name: BoidRandomTransition
// Size: 0x50
// VTable: 0x1499ec438
struct BoidRandomTransition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* animationTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    BoidState transition; // Offset: 0x28
    bool instantTransition; // Offset: 0x38
    bool allowWhileTransitioning; // Offset: 0x39
    uint8_t _pad_3[0xe]; // Offset: 0x3a
    float interval; // Offset: 0x48
    float chance; // Offset: 0x4c
};

// Original name: BoidState
// Size: 0xc8
// VTable: 0x1499eb038
struct BoidState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* stateName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_BoidsBehaviorRuleContainer* rules; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    bool shouldBeOnNavmesh; // Offset: 0x48
    bool deterministic; // Offset: 0x49
    uint8_t _pad_3[0x6]; // Offset: 0x4a
    DynArray_BoidTransition* boidTransitions; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x58
    CryStringT* animationTag; // Offset: 0x80
    uint8_t _pad_5[0x8]; // Offset: 0x88
    CryStringT* fragmentTag; // Offset: 0x90
    uint8_t _pad_6[0x8]; // Offset: 0x98
    float maxLinearSpeed; // Offset: 0xa0
    uint8_t _pad_7[0x24]; // Offset: 0xa4
};

// Original name: BoidTransition
// Size: 0x48
// VTable: 0x1499eb130
struct BoidTransition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* animationTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    BoidState transition; // Offset: 0x28
    bool instantTransition; // Offset: 0x38
    bool allowWhileTransitioning; // Offset: 0x39
    uint8_t _pad_3[0xe]; // Offset: 0x3a
};

// Original name: BoidsComponentParams
// Size: 0x88
// VTable: 0x1499ec578
struct BoidsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_BoidsGroupComposition* boidsGroups; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    float groupInfluenceRange; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    DynArray_BoidState* boidStates; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
    float querySphereRadius; // Offset: 0x80
    uint8_t _pad_4[0x4]; // Offset: 0x84
};

// Original name: BoidsGroupComposition
// Size: 0x60
// VTable: 0x1499eb258
struct BoidsGroupComposition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* boidsEntityClasses; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    int32_t amountOfEntities; // Offset: 0x38
    int32_t amountOfEntitiesVariation; // Offset: 0x3c
    float sizeVariation; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
    CryStringT* name; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
    bool spawnOnNavmesh; // Offset: 0x58
    uint8_t _pad_4[0x7]; // Offset: 0x59
};

// Original name: BountyParams
// Size: 0xa0
// VTable: 0x149967080
struct BountyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t crimeStatThreshold; // Offset: 0xc
    Jurisdiction jurisdiction; // Offset: 0x10
    DynArray_MissionBrokerEntry* missionBrokerEntries; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    DynArray_MissionBrokerEntry* escapedPrisonerMissions; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
    float bountyRewardIncreaseFactor; // Offset: 0x88
    bool arrestCriminalOnBountyKill; // Offset: 0x8c
    uint8_t _pad_4[0x3]; // Offset: 0x8d
    float minutesToBlockRepeatedPlayerBounty; // Offset: 0x90
    float minutesToDelayEscapedPrisonerBounty; // Offset: 0x94
    bool failMissionIfHunterKilledByBounty; // Offset: 0x98
    uint8_t _pad_5[0x3]; // Offset: 0x99
    float mobiglasActiveTimeToPingLocation; // Offset: 0x9c
};

// Original name: BreakableComponentParams
// Size: 0x58
// VTable: 0x1499cd4c0
struct BreakableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool forceEntities; // Offset: 0x18
    bool networkSynced; // Offset: 0x19
    uint8_t _pad_1[0x2]; // Offset: 0x1a
    float explodeImpulse; // Offset: 0x1c
    bool impulseRelativeToScale; // Offset: 0x20
    uint8_t _pad_2[0x3]; // Offset: 0x21
    float particleLifetime; // Offset: 0x24
    float pieceSpawnPlanetCheckRadius; // Offset: 0x28
    int32_t numPiecesOverride; // Offset: 0x2c
    Vec3 localOffsetForAdditionalOverridenDebris; // Offset: 0x30
    BreakableEntityClassParams entityClassOverride; // Offset: 0x48
};

// Original name: BreakableEntityClassParams
// Size: 0x20
// VTable: 0x1499cd320
struct BreakableEntityClassParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
};

// Original name: BuildingBlocksLayer
// Size: 0x60
// VTable: 0x149a162e8
struct BuildingBlocksLayer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* layerName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocksView defaultView; // Offset: 0x18
    DynArray_BuildingBlocksView* views; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    ARDataType renderTarget; // Offset: 0x58
    uint8_t _pad_3[0x7]; // Offset: 0x59
};

// Original name: BuildingBlocksView
// Size: 0x48
// VTable: 0x149a16218
struct BuildingBlocksView {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    CryStringT* name; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    UIGraph_BuildingBlocksContextComponent component; // Offset: 0x20
};

// Original name: BuildingBlocks_ActorEntityWidget
// Size: 0x9a0
// VTable: 0x14998d750
struct BuildingBlocks_ActorEntityWidget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    SBuildingBlocks_EntityEffects effects; // Offset: 0x860
    TintPaletteRef tintPalette; // Offset: 0x8a0
    Deg3 contentOrientation; // Offset: 0x8d0
    Tag geometryTag; // Offset: 0x8f0
    CryStringT* materialPath; // Offset: 0x908
    uint8_t _pad_8[0x8]; // Offset: 0x910
    DynArray_CryStringT* loadoutNames; // Offset: 0x918 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x920
    ARDataType imageSource; // Offset: 0x948
    float contentScaleLimitMin; // Offset: 0x94c
    float contentScaleLimitMax; // Offset: 0x950
    float dirt; // Offset: 0x954
    float wear; // Offset: 0x958
    bool useCustomPivot; // Offset: 0x95c
    uint8_t _pad_10[0x3]; // Offset: 0x95d
    CryStringT* spawnerType; // Offset: 0x960
    uint8_t _pad_11[0x8]; // Offset: 0x968
    CryStringT* idleAnimName; // Offset: 0x970
    uint8_t _pad_12[0x8]; // Offset: 0x978
    CryStringT* facialAnimName; // Offset: 0x980
    uint8_t _pad_13[0x8]; // Offset: 0x988
    CryStringT* DNAString; // Offset: 0x990
    uint8_t _pad_14[0x8]; // Offset: 0x998
};

// Original name: BuildingBlocks_AspectRatioLibrary
// Size: 0x38
// VTable: 0x149982b10
struct BuildingBlocks_AspectRatioLibrary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_AspectRatioOption* aspectRatioOptions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BuildingBlocks_AspectRatioOption
// Size: 0x28
// VTable: 0x149982ab8
struct BuildingBlocks_AspectRatioOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float aspectRatio; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Tag tag; // Offset: 0x10
};

// Original name: BuildingBlocks_BindingsBooleanField
// Size: 0x58
// VTable: 0x149986878
struct BuildingBlocks_BindingsBooleanField {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType field; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0x48
};

// Original name: BuildingBlocks_BindingsColorField
// Size: 0x58
// VTable: 0x149986af8
struct BuildingBlocks_BindingsColorField {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType field; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsColorBase input; // Offset: 0x48
};

// Original name: BuildingBlocks_BindingsFieldBase
// Size: 0x40
// VTable: 0x1499867f0
struct BuildingBlocks_BindingsFieldBase {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
};

// Original name: BuildingBlocks_BindingsIntegerField
// Size: 0x58
// VTable: 0x1499868f8
struct BuildingBlocks_BindingsIntegerField {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType field; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x48
};

// Original name: BuildingBlocks_BindingsIntegerFromTagSwitch
// Size: 0x98
// VTable: 0x149987600
struct BuildingBlocks_BindingsIntegerFromTagSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int64_t defaultValue; // Offset: 0x50
    DynArray_BuildingBlocks_TagIntegerPair* values; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
    BuildingBlocks_BindingsStringBase input; // Offset: 0x88
};

// Original name: BuildingBlocks_BindingsLocalizedField
// Size: 0x58
// VTable: 0x149986a78
struct BuildingBlocks_BindingsLocalizedField {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType field; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsLocalizedBase input; // Offset: 0x48
};

// Original name: BuildingBlocks_BindingsNumberField
// Size: 0x58
// VTable: 0x149986978
struct BuildingBlocks_BindingsNumberField {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType field; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x48
};

// Original name: BuildingBlocks_BindingsRotationField
// Size: 0x58
// VTable: 0x149986bf8
struct BuildingBlocks_BindingsRotationField {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType field; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsRotationBase input; // Offset: 0x48
};

// Original name: BuildingBlocks_BindingsStringField
// Size: 0x58
// VTable: 0x1499869f8
struct BuildingBlocks_BindingsStringField {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType field; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsStringBase input; // Offset: 0x48
};

// Original name: BuildingBlocks_BindingsStringFromBooleanCanvas
// Size: 0x1a0
// VTable: 0x149989a70
struct BuildingBlocks_BindingsStringFromBooleanCanvas {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_Canvas isTrue; // Offset: 0x50
    BuildingBlocks_Canvas isFalse; // Offset: 0x68
    BuildingBlocks_BindingsStringBase inputTrue; // Offset: 0x80
    BuildingBlocks_BindingsStringBase inputFalse; // Offset: 0x90
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0xa0
    uint8_t _pad_1[0xf0]; // Offset: 0xb0
};

// Original name: BuildingBlocks_BindingsStringFromTagSwitch
// Size: 0xb0
// VTable: 0x149989e48
struct BuildingBlocks_BindingsStringFromTagSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsStringBase defaultOverride; // Offset: 0x50
    CryStringT* defaultValue; // Offset: 0x60
    uint8_t _pad_1[0x8]; // Offset: 0x68
    DynArray_BuildingBlocks_TagStringPair* values; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x78
    BuildingBlocks_BindingsStringBase input; // Offset: 0xa0
};

// Original name: BuildingBlocks_BindingsTagFromBoolean
// Size: 0x1a0
// VTable: 0x14998a010
struct BuildingBlocks_BindingsTagFromBoolean {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    Tag isTrue; // Offset: 0x50
    Tag isFalse; // Offset: 0x68
    BuildingBlocks_BindingsStringBase inputTrue; // Offset: 0x80
    BuildingBlocks_BindingsStringBase inputFalse; // Offset: 0x90
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0xa0
    uint8_t _pad_1[0xf0]; // Offset: 0xb0
};

// Original name: BuildingBlocks_BindingsTagFromIntegerSwitch
// Size: 0xa8
// VTable: 0x14998a0c0
struct BuildingBlocks_BindingsTagFromIntegerSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_IntegerTagPair* values; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    Tag defaultValue; // Offset: 0x80
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x98
};

// Original name: BuildingBlocks_BindingsTagFromNumberCompare
// Size: 0xa8
// VTable: 0x14998a220
struct BuildingBlocks_BindingsTagFromNumberCompare {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_NumberTagPair* values; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    Tag defaultValue; // Offset: 0x80
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x98
};

// Original name: BuildingBlocks_BindingsTagFromStringSwitch
// Size: 0xa8
// VTable: 0x14998a170
struct BuildingBlocks_BindingsTagFromStringSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_StringTagPair* values; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    Tag defaultValue; // Offset: 0x80
    BuildingBlocks_BindingsStringBase input; // Offset: 0x98
};

// Original name: BuildingBlocks_BindingsTransformField
// Size: 0x58
// VTable: 0x149986c78
struct BuildingBlocks_BindingsTransformField {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType field; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsTransformBase input; // Offset: 0x48
};

// Original name: BuildingBlocks_BindingsVectorField
// Size: 0x58
// VTable: 0x149986b78
struct BuildingBlocks_BindingsVectorField {
    uint8_t _pad_0[0x30]; // Offset: 0x0
    BuildingBlocks_WidgetBase widget; // Offset: 0x30
    ARDataType field; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    BuildingBlocks_BindingsVectorBase input; // Offset: 0x48
};

// Original name: BuildingBlocks_CalloutSettings
// Size: 0x30
// VTable: 0x149984da8
struct BuildingBlocks_CalloutSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Canvas canvas; // Offset: 0x8
    CryStringT* activationVariableURL; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
};

// Original name: BuildingBlocks_Canvas
// Size: 0x370
// VTable: 0x149993598
struct BuildingBlocks_Canvas {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 size; // Offset: 0x8
    BuildingBlocks_Style style; // Offset: 0x20
    ARDataType collisionType; // Offset: 0x38
    uint8_t _pad_1[0x1]; // Offset: 0x39
    uint16_t cacheAmount; // Offset: 0x3a
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    BuildingBlocks_PreviewSceneEntityRoot entityPreviewScene; // Offset: 0x40
    BuildingBlocks_PreviewSceneAugmentedRealityRtt arPreviewScene; // Offset: 0x50
    BuildingBlocks_PreviewSceneRttRoot rttPreviewScene; // Offset: 0x60
    DynArray_BuildingBlocks_PreviewScreenBase* previewScenes; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x78
    DynArray_BuildingBlocks_StaticVariableBase* staticVariables; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa8
    DynArray_BuildingBlocks_WidgetBase* scene; // Offset: 0xd0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd8
    DynArray_BuildingBlocks_WidgetBase* library; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x108
    DynArray_BuildingBlocks_Node* operations; // Offset: 0x130 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x138
    Tag defaultButtonDownSoundTag; // Offset: 0x160
    Tag defaultRightButtonDownSoundTag; // Offset: 0x178
    Tag defaultLeftClickSoundTag; // Offset: 0x190
    Tag defaultRightClickSoundTag; // Offset: 0x1a8
    Tag defaultLeftDoubleClickSoundTag; // Offset: 0x1c0
    Tag defaultRollOverSoundTag; // Offset: 0x1d8
    Tag defaultRollOffSoundTag; // Offset: 0x1f0
    Tag defaultMovementStartSoundTag; // Offset: 0x208
    Tag defaultMovementStopSoundTag; // Offset: 0x220
    ARDataType coordinateMethod; // Offset: 0x238
    uint8_t _pad_8[0x4]; // Offset: 0x23c
    DynArray_BuildingBlocks_StyleEntry* embeddedStyles; // Offset: 0x240 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x248
    BuildingBlocks_DefaultStyles defaultStyles; // Offset: 0x270
    DynArray_BuildingBlocks_BrandStyles* brandStyles; // Offset: 0x2c0 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x2c8
    BuildingBlocks_WidgetBase proxyRootNode; // Offset: 0x2f0
    BuildingBlocks_Canvas overrideDefaultTooltipCanvas; // Offset: 0x300
    BuildingBlocks_Canvas overrideDefaultCalloutCanvas; // Offset: 0x318
    uint8_t _pad_11[0x40]; // Offset: 0x330
};

// Original name: BuildingBlocks_ColorPicker
// Size: 0x48
// VTable: 0x149990e18
struct BuildingBlocks_ColorPicker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_WidgetBase markerNodeDef; // Offset: 0x8
    CryStringT* anchorXVariableURL; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* anchorYVariableURL; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* outputColorVariableURL; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
};

// Original name: BuildingBlocks_ComponentBadgeListItem
// Size: 0x978
// VTable: 0x14998dc40
struct BuildingBlocks_ComponentBadgeListItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x910
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x930
    BuildingBlocks_ComponentBadgeProperties badgeProperties; // Offset: 0x950
    ARDataType alignment; // Offset: 0x970
    uint8_t _pad_13[0x4]; // Offset: 0x974
};

// Original name: BuildingBlocks_ComponentCheckboxButton
// Size: 0x948
// VTable: 0x14998dcf0
struct BuildingBlocks_ComponentCheckboxButton {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x900
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x920
    ARDataType alignment; // Offset: 0x940
    uint8_t _pad_14[0x4]; // Offset: 0x944
};

// Original name: BuildingBlocks_ComponentCheckboxListItem
// Size: 0x968
// VTable: 0x14998ddc8
struct BuildingBlocks_ComponentCheckboxListItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x900
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x920
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x940
    ARDataType alignment; // Offset: 0x960
    uint8_t _pad_14[0x4]; // Offset: 0x964
};

// Original name: BuildingBlocks_ComponentCustomButton
// Size: 0x8f8
// VTable: 0x14998de20
struct BuildingBlocks_ComponentCustomButton {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    ARDataType fillStyle; // Offset: 0x8f0
    uint8_t _pad_13[0x4]; // Offset: 0x8f4
};

// Original name: BuildingBlocks_ComponentCustomButtonSecondary
// Size: 0x8f8
// VTable: 0x14998de80
struct BuildingBlocks_ComponentCustomButtonSecondary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    ARDataType fillStyle; // Offset: 0x8f0
    uint8_t _pad_13[0x4]; // Offset: 0x8f4
};

// Original name: BuildingBlocks_ComponentCustomDropDownMenu
// Size: 0x920
// VTable: 0x14998e3d8
struct BuildingBlocks_ComponentCustomDropDownMenu {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* expandedVariable; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    CLocIdentifier* text; // Offset: 0x900
    BuildingBlocks_WidgetBase content; // Offset: 0x908
    ARDataType expand; // Offset: 0x918
    uint8_t _pad_14[0x4]; // Offset: 0x91c
};

// Original name: BuildingBlocks_ComponentCustomListItem
// Size: 0x8f0
// VTable: 0x14998de88
struct BuildingBlocks_ComponentCustomListItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
};

// Original name: BuildingBlocks_ComponentGeneralButton
// Size: 0x938
// VTable: 0x14998df58
struct BuildingBlocks_ComponentGeneralButton {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x910
    ARDataType fillStyle; // Offset: 0x930
    ARDataType iconPosition; // Offset: 0x934
};

// Original name: BuildingBlocks_ComponentGeneralButtonLarge
// Size: 0x930
// VTable: 0x14998dfd8
struct BuildingBlocks_ComponentGeneralButtonLarge {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x910
};

// Original name: BuildingBlocks_ComponentGeneralButtonSecondary
// Size: 0x938
// VTable: 0x14998e0a8
struct BuildingBlocks_ComponentGeneralButtonSecondary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x910
    ARDataType fillStyle; // Offset: 0x930
    ARDataType iconPosition; // Offset: 0x934
};

// Original name: BuildingBlocks_ComponentGeneralDropDownMenu
// Size: 0x9a8
// VTable: 0x14998e308
struct BuildingBlocks_ComponentGeneralDropDownMenu {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CLocIdentifier* placeholderText; // Offset: 0x8f0
    CryStringT* arrayVariable; // Offset: 0x8f8
    uint8_t _pad_13[0x8]; // Offset: 0x900
    CryStringT* selectedVariable; // Offset: 0x908
    uint8_t _pad_14[0x8]; // Offset: 0x910
    CryStringT* hoverVariable; // Offset: 0x918
    uint8_t _pad_15[0x8]; // Offset: 0x920
    CryStringT* keyboardNavVariable; // Offset: 0x928
    uint8_t _pad_16[0x8]; // Offset: 0x930
    CryStringT* gamepadNavVariable; // Offset: 0x938
    uint8_t _pad_17[0x8]; // Offset: 0x940
    CryStringT* expandedVariable; // Offset: 0x948
    uint8_t _pad_18[0x8]; // Offset: 0x950
    CryStringT* nameVariable; // Offset: 0x958
    uint8_t _pad_19[0x8]; // Offset: 0x960
    Tag closeDDMSoundTag; // Offset: 0x968
    Tag openDDMSoundTag; // Offset: 0x980
    float minListWidth; // Offset: 0x998
    float maxListHeight; // Offset: 0x99c
    bool collapseAlways; // Offset: 0x9a0
    uint8_t _pad_20[0x3]; // Offset: 0x9a1
    ARDataType expand; // Offset: 0x9a4
};

// Original name: BuildingBlocks_ComponentGeneralListItem
// Size: 0x958
// VTable: 0x14998e4a8
struct BuildingBlocks_ComponentGeneralListItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x910
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x930
    ARDataType alignment; // Offset: 0x950
    uint8_t _pad_13[0x4]; // Offset: 0x954
};

// Original name: BuildingBlocks_ComponentLabelCaptionPair
// Size: 0x938
// VTable: 0x14998e550
struct BuildingBlocks_ComponentLabelCaptionPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x910
    ARDataType alignment; // Offset: 0x930
    uint8_t _pad_13[0x4]; // Offset: 0x934
};

// Original name: BuildingBlocks_ComponentLinearRangeSlider
// Size: 0x918
// VTable: 0x14998e678
struct BuildingBlocks_ComponentLinearRangeSlider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    ARDataType direction; // Offset: 0x900
    ARDataType meterState; // Offset: 0x904
    uint16_t incrementProportion; // Offset: 0x908
    uint8_t _pad_14[0x2]; // Offset: 0x90a
    float minValue; // Offset: 0x90c
    float maxValue; // Offset: 0x910
    uint8_t _pad_15[0x4]; // Offset: 0x914
};

// Original name: BuildingBlocks_ComponentMinMaxRangeSlider
// Size: 0x920
// VTable: 0x14998e770
struct BuildingBlocks_ComponentMinMaxRangeSlider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* minVariableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    CryStringT* maxVariableName; // Offset: 0x900
    uint8_t _pad_14[0x8]; // Offset: 0x908
    ARDataType direction; // Offset: 0x910
    ARDataType meterState; // Offset: 0x914
    uint16_t incrementProportion; // Offset: 0x918
    uint8_t _pad_15[0x6]; // Offset: 0x91a
};

// Original name: BuildingBlocks_ComponentNavigationTabList
// Size: 0x968
// VTable: 0x14998e778
struct BuildingBlocks_ComponentNavigationTabList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* arrayVariable; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    CryStringT* selectedVariable; // Offset: 0x900
    uint8_t _pad_14[0x8]; // Offset: 0x908
    CryStringT* hoverVariable; // Offset: 0x910
    uint8_t _pad_15[0x8]; // Offset: 0x918
    CryStringT* keyboardNavVariable; // Offset: 0x920
    uint8_t _pad_16[0x8]; // Offset: 0x928
    CryStringT* gamepadNavVariable; // Offset: 0x930
    uint8_t _pad_17[0x8]; // Offset: 0x938
    CryStringT* nameVariable; // Offset: 0x940
    uint8_t _pad_18[0x8]; // Offset: 0x948
    CryStringT* disabledVariable; // Offset: 0x950
    uint8_t _pad_19[0x8]; // Offset: 0x958
    ARDataType direction; // Offset: 0x960
    uint8_t _pad_20[0x4]; // Offset: 0x964
};

// Original name: BuildingBlocks_ComponentNotification
// Size: 0x968
// VTable: 0x14998e870
struct BuildingBlocks_ComponentNotification {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x900
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x920
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x940
    ARDataType alignment; // Offset: 0x960
    bool closeButton; // Offset: 0x964
    uint8_t _pad_14[0x3]; // Offset: 0x965
};

// Original name: BuildingBlocks_ComponentOptionTabList
// Size: 0x968
// VTable: 0x14998e878
struct BuildingBlocks_ComponentOptionTabList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* arrayVariable; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    CryStringT* selectedVariable; // Offset: 0x900
    uint8_t _pad_14[0x8]; // Offset: 0x908
    CryStringT* hoverVariable; // Offset: 0x910
    uint8_t _pad_15[0x8]; // Offset: 0x918
    CryStringT* keyboardNavVariable; // Offset: 0x920
    uint8_t _pad_16[0x8]; // Offset: 0x928
    CryStringT* gamepadNavVariable; // Offset: 0x930
    uint8_t _pad_17[0x8]; // Offset: 0x938
    CryStringT* nameVariable; // Offset: 0x940
    uint8_t _pad_18[0x8]; // Offset: 0x948
    CryStringT* disabledVariable; // Offset: 0x950
    uint8_t _pad_19[0x8]; // Offset: 0x958
    ARDataType direction; // Offset: 0x960
    uint8_t _pad_20[0x4]; // Offset: 0x964
};

// Original name: BuildingBlocks_ComponentRadialRangeSlider
// Size: 0x960
// VTable: 0x14998e9e8
struct BuildingBlocks_ComponentRadialRangeSlider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* targetVariableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    CryStringT* currentVariableName; // Offset: 0x900
    uint8_t _pad_14[0x8]; // Offset: 0x908
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x910
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x930
    float limiterAngle; // Offset: 0x950
    float startAngleOffset; // Offset: 0x954
    ARDataType meterState; // Offset: 0x958
    uint16_t incrementProportion; // Offset: 0x95c
    uint8_t _pad_15[0x2]; // Offset: 0x95e
};

// Original name: BuildingBlocks_ComponentRadioButton
// Size: 0x948
// VTable: 0x14998ea90
struct BuildingBlocks_ComponentRadioButton {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x900
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x920
    ARDataType alignment; // Offset: 0x940
    uint8_t _pad_14[0x4]; // Offset: 0x944
};

// Original name: BuildingBlocks_ComponentRadioListItem
// Size: 0x968
// VTable: 0x14998eb68
struct BuildingBlocks_ComponentRadioListItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x900
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x920
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x940
    ARDataType alignment; // Offset: 0x960
    uint8_t _pad_14[0x4]; // Offset: 0x964
};

// Original name: BuildingBlocks_ComponentScrollBar
// Size: 0x918
// VTable: 0x14998ec10
struct BuildingBlocks_ComponentScrollBar {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    ARDataType direction; // Offset: 0x8f0
    uint8_t _pad_13[0x4]; // Offset: 0x8f4
    BuildingBlocks_WidgetBase target; // Offset: 0x8f8
    CryStringT* scrollPositionURL; // Offset: 0x908
    uint8_t _pad_14[0x8]; // Offset: 0x910
};

// Original name: BuildingBlocks_ComponentToggleButton
// Size: 0x948
// VTable: 0x14998ecc0
struct BuildingBlocks_ComponentToggleButton {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x900
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x920
    ARDataType alignment; // Offset: 0x940
    uint8_t _pad_14[0x4]; // Offset: 0x944
};

// Original name: BuildingBlocks_ComponentToggleListItem
// Size: 0x968
// VTable: 0x14998ed98
struct BuildingBlocks_ComponentToggleListItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x900
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x920
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x940
    ARDataType alignment; // Offset: 0x960
    uint8_t _pad_14[0x4]; // Offset: 0x964
};

// Original name: BuildingBlocks_ContextMenuPolicy
// Size: 0x70
// VTable: 0x149985a50
struct BuildingBlocks_ContextMenuPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* namespace_; /* namespace */ // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_Canvas canvas; // Offset: 0x18
    DynArray_BuildingBlocks_ContextMenuItem* menuItems; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
    float closeDistance; // Offset: 0x60
    bool isLocal; // Offset: 0x64
    uint8_t _pad_3[0xb]; // Offset: 0x65
};

// Original name: BuildingBlocks_DisplayWidget
// Size: 0x860
// VTable: 0x149985a58
struct BuildingBlocks_DisplayWidget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
};

// Original name: BuildingBlocks_DraggablePolicyBase
// Size: 0xd0
// VTable: 0x149982310
struct BuildingBlocks_DraggablePolicyBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_TriggerBase* onDragStart; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_BuildingBlocks_TriggerBase* onDragEnd; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    Tag dragStartSoundTag; // Offset: 0x68
    Tag dragEndSoundTag; // Offset: 0x80
    Tag cursorSpeedSoundTag; // Offset: 0x98
    CryStringT* dragXPosURL; // Offset: 0xb0
    uint8_t _pad_3[0x8]; // Offset: 0xb8
    CryStringT* dragYPosURL; // Offset: 0xc0
    uint8_t _pad_4[0x8]; // Offset: 0xc8
};

// Original name: BuildingBlocks_DropTarget
// Size: 0x30
// VTable: 0x149983960
struct BuildingBlocks_DropTarget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_BindingsVariableInput IdVariable; // Offset: 0x8
    BuildingBlocks_WidgetBase dragStamp; // Offset: 0x20
};

// Original name: BuildingBlocks_DropTargetItem
// Size: 0x130
// VTable: 0x149983a88
struct BuildingBlocks_DropTargetItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_TriggerBase* onDragStart; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_BuildingBlocks_TriggerBase* onDragEnd; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    Tag dragStartSoundTag; // Offset: 0x68
    Tag dragEndSoundTag; // Offset: 0x80
    Tag cursorSpeedSoundTag; // Offset: 0x98
    CryStringT* dragXPosURL; // Offset: 0xb0
    uint8_t _pad_3[0x8]; // Offset: 0xb8
    CryStringT* dragYPosURL; // Offset: 0xc0
    uint8_t _pad_4[0x8]; // Offset: 0xc8
    BuildingBlocks_BindingsVariableInput currentDropTargetIdVariable; // Offset: 0xd0
    BuildingBlocks_BindingsVariableInput orderIndexVariable; // Offset: 0xe8
    Tag reorderSoundTag; // Offset: 0x100
    BuildingBlocks_WidgetBase dragProxy; // Offset: 0x118
    bool centerOnCursor; // Offset: 0x128
    bool transformIsRelative; // Offset: 0x129
    uint8_t _pad_5[0x6]; // Offset: 0x12a
};

// Original name: BuildingBlocks_EntityWidgetBase
// Size: 0x970
// VTable: 0x149985c90
struct BuildingBlocks_EntityWidgetBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    SBuildingBlocks_EntityEffects effects; // Offset: 0x860
    TintPaletteRef tintPalette; // Offset: 0x8a0
    Deg3 contentOrientation; // Offset: 0x8d0
    Tag geometryTag; // Offset: 0x8f0
    CryStringT* materialPath; // Offset: 0x908
    uint8_t _pad_8[0x8]; // Offset: 0x910
    DynArray_CryStringT* loadoutNames; // Offset: 0x918 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x920
    ARDataType imageSource; // Offset: 0x948
    float contentScaleLimitMin; // Offset: 0x94c
    float contentScaleLimitMax; // Offset: 0x950
    float dirt; // Offset: 0x954
    float wear; // Offset: 0x958
    bool useCustomPivot; // Offset: 0x95c
    uint8_t _pad_10[0x3]; // Offset: 0x95d
    CryStringT* spawnerType; // Offset: 0x960
    uint8_t _pad_11[0x8]; // Offset: 0x968
};

// Original name: BuildingBlocks_FieldModifierPair
// Size: 0x28
// VTable: 0x1499903a8
struct BuildingBlocks_FieldModifierPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_WidgetBase target; // Offset: 0x8
    BuildingBlocks_FieldModifierBase modifier; // Offset: 0x18
};

// Original name: BuildingBlocks_FieldModifierRecordRefTypeCanvasReferenceRecord
// Size: 0x20
// VTable: 0x14998c550
struct BuildingBlocks_FieldModifierRecordRefTypeCanvasReferenceRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Canvas value; // Offset: 0x8
};

// Original name: BuildingBlocks_GeneralEntityWidget
// Size: 0x9a0
// VTable: 0x14998d7d8
struct BuildingBlocks_GeneralEntityWidget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    SBuildingBlocks_EntityEffects effects; // Offset: 0x860
    TintPaletteRef tintPalette; // Offset: 0x8a0
    Deg3 contentOrientation; // Offset: 0x8d0
    Tag geometryTag; // Offset: 0x8f0
    CryStringT* materialPath; // Offset: 0x908
    uint8_t _pad_8[0x8]; // Offset: 0x910
    DynArray_CryStringT* loadoutNames; // Offset: 0x918 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x920
    ARDataType imageSource; // Offset: 0x948
    float contentScaleLimitMin; // Offset: 0x94c
    float contentScaleLimitMax; // Offset: 0x950
    float dirt; // Offset: 0x954
    float wear; // Offset: 0x958
    bool useCustomPivot; // Offset: 0x95c
    uint8_t _pad_10[0x3]; // Offset: 0x95d
    CryStringT* spawnerType; // Offset: 0x960
    uint8_t _pad_11[0x8]; // Offset: 0x968
    EntityClassDefinition class_; /* class */ // Offset: 0x970
    ItemPreview_Config previewConfig; // Offset: 0x988
};

// Original name: BuildingBlocks_GeometryEntityWidget
// Size: 0x9a0
// VTable: 0x14998d9f8
struct BuildingBlocks_GeometryEntityWidget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    SBuildingBlocks_EntityEffects effects; // Offset: 0x860
    TintPaletteRef tintPalette; // Offset: 0x8a0
    Deg3 contentOrientation; // Offset: 0x8d0
    Tag geometryTag; // Offset: 0x8f0
    CryStringT* materialPath; // Offset: 0x908
    uint8_t _pad_8[0x8]; // Offset: 0x910
    DynArray_CryStringT* loadoutNames; // Offset: 0x918 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x920
    ARDataType imageSource; // Offset: 0x948
    float contentScaleLimitMin; // Offset: 0x94c
    float contentScaleLimitMax; // Offset: 0x950
    float dirt; // Offset: 0x954
    float wear; // Offset: 0x958
    bool useCustomPivot; // Offset: 0x95c
    uint8_t _pad_10[0x3]; // Offset: 0x95d
    CryStringT* spawnerType; // Offset: 0x960
    uint8_t _pad_11[0x8]; // Offset: 0x968
    BuildingBlocks_GeomEntityAnimationParams animationParams; // Offset: 0x970
    CryStringT* geometryPath; // Offset: 0x980
    uint8_t _pad_12[0x8]; // Offset: 0x988
    int64_t viewDistRatio; // Offset: 0x990
    int64_t lodCullDistMultiplier; // Offset: 0x998
};

// Original name: BuildingBlocks_IntegerTagPair
// Size: 0x28
// VTable: 0x1499895f8
struct BuildingBlocks_IntegerTagPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t first; // Offset: 0x8
    Tag second; // Offset: 0x10
};

// Original name: BuildingBlocks_IntegerWidgetPairDef
// Size: 0x20
// VTable: 0x149991b08
struct BuildingBlocks_IntegerWidgetPairDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t first; // Offset: 0x8
    BuildingBlocks_WidgetBase second; // Offset: 0x10
};

// Original name: BuildingBlocks_Interactions
// Size: 0x210
// VTable: 0x149984758
struct BuildingBlocks_Interactions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool canInteract; // Offset: 0x8
    bool disabled; // Offset: 0x9
    bool selected; // Offset: 0xa
    bool collideLeftClick; // Offset: 0xb
    bool collideRightClick; // Offset: 0xc
    bool collideMouseWheel; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    float hitDetectionOffset; // Offset: 0x10
    bool propagateInteractionStates; // Offset: 0x14
    bool inheritHoverState; // Offset: 0x15
    bool inheritDownState; // Offset: 0x16
    bool inheritSelectedState; // Offset: 0x17
    bool inheritDisabledState; // Offset: 0x18
    bool blocksCursor; // Offset: 0x19
    uint8_t _pad_2[0x6]; // Offset: 0x1a
    DynArray_BuildingBlocks_TriggerBase* onLeftClick; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    DynArray_BuildingBlocks_TriggerBase* onRightClick; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x58
    DynArray_BuildingBlocks_TriggerBase* onLeftDoubleClick; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x88
    DynArray_BuildingBlocks_TriggerBase* onRollOver; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xb8
    DynArray_BuildingBlocks_TriggerBase* onRollOff; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0xe8
    BuildingBlocks_ShapeBase boundRestrictionShape; // Offset: 0x110
    BuildingBlocks_TwoVariablePicker twoVariablePicker; // Offset: 0x120
    Tag buttonDownSoundTag; // Offset: 0x130
    Tag rightButtonDownSoundTag; // Offset: 0x148
    Tag leftClickSoundTag; // Offset: 0x160
    Tag rightClickSoundTag; // Offset: 0x178
    Tag leftDoubleClickSoundTag; // Offset: 0x190
    Tag rollOverSoundTag; // Offset: 0x1a8
    Tag rollOffSoundTag; // Offset: 0x1c0
    Tag movementStartSoundTag; // Offset: 0x1d8
    Tag movementStopSoundTag; // Offset: 0x1f0
    float movementStopDelayMs; // Offset: 0x208
    uint8_t _pad_8[0x4]; // Offset: 0x20c
};

// Original name: BuildingBlocks_NumberTagPair
// Size: 0x28
// VTable: 0x1499897a8
struct BuildingBlocks_NumberTagPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float first; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Tag second; // Offset: 0x10
};

// Original name: BuildingBlocks_ShapeWidget
// Size: 0x898
// VTable: 0x14998ffa8
struct BuildingBlocks_ShapeWidget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool doFill; // Offset: 0x860
    bool doStroke; // Offset: 0x861
    uint8_t _pad_8[0x2]; // Offset: 0x862
    float strokeWidth; // Offset: 0x864
    BuildingBlocks_ColorBase fillColor; // Offset: 0x868
    BuildingBlocks_ColorBase strokeColor; // Offset: 0x878
    ARDataType strokeCapStyle; // Offset: 0x888
    ARDataType strokeJointStyle; // Offset: 0x88c
    ARDataType strokeAlignment; // Offset: 0x890
    uint8_t _pad_9[0x4]; // Offset: 0x894
};

// Original name: BuildingBlocks_StaticVariableCanvas
// Size: 0x30
// VTable: 0x14998a720
struct BuildingBlocks_StaticVariableCanvas {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_Canvas value; // Offset: 0x18
};

// Original name: BuildingBlocks_StringTagPair
// Size: 0x30
// VTable: 0x149989678
struct BuildingBlocks_StringTagPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* first; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Tag second; // Offset: 0x18
};

// Original name: BuildingBlocks_StyleSelectorConditionAllOfTag
// Size: 0x40
// VTable: 0x14998cdb0
struct BuildingBlocks_StyleSelectorConditionAllOfTag {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: BuildingBlocks_StyleSelectorConditionAnyOfTag
// Size: 0x40
// VTable: 0x14998ccf0
struct BuildingBlocks_StyleSelectorConditionAnyOfTag {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: BuildingBlocks_StyleSelectorConditionNotTag
// Size: 0x28
// VTable: 0x14998cc90
struct BuildingBlocks_StyleSelectorConditionNotTag {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    Tag tag; // Offset: 0x10
};

// Original name: BuildingBlocks_StyleSelectorConditionTag
// Size: 0x28
// VTable: 0x14998cc30
struct BuildingBlocks_StyleSelectorConditionTag {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    Tag tag; // Offset: 0x10
};

// Original name: BuildingBlocks_TabListBase
// Size: 0x968
// VTable: 0x14998cbd8
struct BuildingBlocks_TabListBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* arrayVariable; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
    CryStringT* selectedVariable; // Offset: 0x900
    uint8_t _pad_14[0x8]; // Offset: 0x908
    CryStringT* hoverVariable; // Offset: 0x910
    uint8_t _pad_15[0x8]; // Offset: 0x918
    CryStringT* keyboardNavVariable; // Offset: 0x920
    uint8_t _pad_16[0x8]; // Offset: 0x928
    CryStringT* gamepadNavVariable; // Offset: 0x930
    uint8_t _pad_17[0x8]; // Offset: 0x938
    CryStringT* nameVariable; // Offset: 0x940
    uint8_t _pad_18[0x8]; // Offset: 0x948
    CryStringT* disabledVariable; // Offset: 0x950
    uint8_t _pad_19[0x8]; // Offset: 0x958
    ARDataType direction; // Offset: 0x960
    uint8_t _pad_20[0x4]; // Offset: 0x964
};

// Original name: BuildingBlocks_TagIntegerPair
// Size: 0x28
// VTable: 0x149987558
struct BuildingBlocks_TagIntegerPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag first; // Offset: 0x8
    int64_t second; // Offset: 0x20
};

// Original name: BuildingBlocks_TagStringPair
// Size: 0x40
// VTable: 0x149989720
struct BuildingBlocks_TagStringPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag first; // Offset: 0x8
    CryStringT* second; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    BuildingBlocks_BindingsStringBase secondOverride; // Offset: 0x30
};

// Original name: BuildingBlocks_TargetSlicer
// Size: 0x20
// VTable: 0x149991d18
struct BuildingBlocks_TargetSlicer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_WidgetBase target; // Offset: 0x8
    ARDataType coordinateMethod; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_TextureBase
// Size: 0x908
// VTable: 0x14998db40
struct BuildingBlocks_TextureBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentTextureProperties textureProperties; // Offset: 0x8f0
};

// Original name: BuildingBlocks_TogglerBase
// Size: 0x900
// VTable: 0x14998dae0
struct BuildingBlocks_TogglerBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
};

// Original name: BuildingBlocks_TooltipPolicy
// Size: 0x48
// VTable: 0x1499848a0
struct BuildingBlocks_TooltipPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float startDelay; // Offset: 0x8
    float duration; // Offset: 0xc
    BuildingBlocks_Canvas canvas; // Offset: 0x10
    CLocIdentifier* text; // Offset: 0x28
    Vec2 positionOffset; // Offset: 0x30
    bool shouldUseParentOffsets; // Offset: 0x40
    bool isLocal; // Offset: 0x41
    uint8_t _pad_1[0x6]; // Offset: 0x42
};

// Original name: BuildingBlocks_TwoVariablePicker
// Size: 0x38
// VTable: 0x149984270
struct BuildingBlocks_TwoVariablePicker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* variableXURL; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* variableYURL; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    BuildingBlocks_WidgetBase markerNodeDef; // Offset: 0x28
};

// Original name: BuildingBlocks_VehicleEntityWidget
// Size: 0x998
// VTable: 0x14998da78
struct BuildingBlocks_VehicleEntityWidget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    SBuildingBlocks_EntityEffects effects; // Offset: 0x860
    TintPaletteRef tintPalette; // Offset: 0x8a0
    Deg3 contentOrientation; // Offset: 0x8d0
    Tag geometryTag; // Offset: 0x8f0
    CryStringT* materialPath; // Offset: 0x908
    uint8_t _pad_8[0x8]; // Offset: 0x910
    DynArray_CryStringT* loadoutNames; // Offset: 0x918 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x920
    ARDataType imageSource; // Offset: 0x948
    float contentScaleLimitMin; // Offset: 0x94c
    float contentScaleLimitMax; // Offset: 0x950
    float dirt; // Offset: 0x954
    float wear; // Offset: 0x958
    bool useCustomPivot; // Offset: 0x95c
    uint8_t _pad_10[0x3]; // Offset: 0x95d
    CryStringT* spawnerType; // Offset: 0x960
    uint8_t _pad_11[0x8]; // Offset: 0x968
    EntityClassDefinition class_; /* class */ // Offset: 0x970
    CryStringT* loadoutName; // Offset: 0x988
    uint8_t _pad_12[0x8]; // Offset: 0x990
};

// Original name: BuildingBlocks_WidgetBadge
// Size: 0x918
// VTable: 0x14998ee18
struct BuildingBlocks_WidgetBadge {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    ARDataType fillStyle; // Offset: 0x910
    uint8_t _pad_13[0x4]; // Offset: 0x914
};

// Original name: BuildingBlocks_WidgetBase
// Size: 0x860
// VTable: 0x1499858d0
struct BuildingBlocks_WidgetBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
};

// Original name: BuildingBlocks_WidgetBodyBackground
// Size: 0x910
// VTable: 0x14998ee70
struct BuildingBlocks_WidgetBodyBackground {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentTextureProperties textureProperties; // Offset: 0x8f0
    ARDataType backgroundType; // Offset: 0x908
    uint8_t _pad_13[0x4]; // Offset: 0x90c
};

// Original name: BuildingBlocks_WidgetCanvas
// Size: 0x8f0
// VTable: 0x14998fce0
struct BuildingBlocks_WidgetCanvas {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
};

// Original name: BuildingBlocks_WidgetCard
// Size: 0x888
// VTable: 0x14998fe30
struct BuildingBlocks_WidgetCard {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    BuildingBlocks_GhostPrimitiveSettings ghostPrimitiveSettings; // Offset: 0x860
    float constantScale; // Offset: 0x878
    uint8_t textureGroup; // Offset: 0x87c
    bool flipHorizontal; // Offset: 0x87d
    bool flipVertical; // Offset: 0x87e
    bool isFacingCamera; // Offset: 0x87f
    bool hasPerspective; // Offset: 0x880
    uint8_t _pad_8[0x7]; // Offset: 0x881
};

// Original name: BuildingBlocks_WidgetCheckboxControl
// Size: 0x900
// VTable: 0x14998ee78
struct BuildingBlocks_WidgetCheckboxControl {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
};

// Original name: BuildingBlocks_WidgetCinematicLabel
// Size: 0x920
// VTable: 0x14998f088
struct BuildingBlocks_WidgetCinematicLabel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CLocIdentifier* title; // Offset: 0x8f0
    CLocIdentifier* body; // Offset: 0x8f8
    float constantScale; // Offset: 0x900
    float connectingLineLength; // Offset: 0x904
    bool faceCamera; // Offset: 0x908
    bool hasBacking; // Offset: 0x909
    bool isShowing; // Offset: 0x90a
    uint8_t _pad_13[0x1]; // Offset: 0x90b
    int32_t animationStage; // Offset: 0x90c
    ARDataType bodyBackgroundColorStyle; // Offset: 0x910
    ARDataType bodyTextColorStyle; // Offset: 0x914
    ARDataType titleBackgroundColorStyle; // Offset: 0x918
    ARDataType titleTextColorStyle; // Offset: 0x91c
};

// Original name: BuildingBlocks_WidgetCircle
// Size: 0x8f0
// VTable: 0x149990320
struct BuildingBlocks_WidgetCircle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool doFill; // Offset: 0x860
    bool doStroke; // Offset: 0x861
    uint8_t _pad_8[0x2]; // Offset: 0x862
    float strokeWidth; // Offset: 0x864
    BuildingBlocks_ColorBase fillColor; // Offset: 0x868
    BuildingBlocks_ColorBase strokeColor; // Offset: 0x878
    ARDataType strokeCapStyle; // Offset: 0x888
    ARDataType strokeJointStyle; // Offset: 0x88c
    ARDataType strokeAlignment; // Offset: 0x890
    uint8_t _pad_9[0x4]; // Offset: 0x894
    uint8_t segments; // Offset: 0x898
    uint8_t _pad_10[0x3]; // Offset: 0x899
    float gapAngle; // Offset: 0x89c
    bool parallelGaps; // Offset: 0x8a0
    uint8_t _pad_11[0x3]; // Offset: 0x8a1
    float startAngle; // Offset: 0x8a4
    float progress; // Offset: 0x8a8
    float minProgressClamp; // Offset: 0x8ac
    float maxProgressClamp; // Offset: 0x8b0
    float minMeterClamp; // Offset: 0x8b4
    float maxMeterClamp; // Offset: 0x8b8
    ARDataType segmentProgressBehavior; // Offset: 0x8bc
    ARDataType segmentEasing; // Offset: 0x8c0
    bool flip; // Offset: 0x8c1
    bool fillStroke; // Offset: 0x8c2
    uint8_t _pad_12[0x1]; // Offset: 0x8c3
    float fillStrokeWidth; // Offset: 0x8c4
    BuildingBlocks_WidgetBase startAngleWidget; // Offset: 0x8c8
    BuildingBlocks_WidgetBase progressAngleWidget; // Offset: 0x8d8
    bool rotateStartAngleWidget; // Offset: 0x8e8
    bool pivotStartAngleWidget; // Offset: 0x8e9
    bool radialUV; // Offset: 0x8ea
    bool rotateProgressAngleWidget; // Offset: 0x8eb
    bool pivotProgressAngleWidget; // Offset: 0x8ec
    uint8_t _pad_13[0x3]; // Offset: 0x8ed
};

// Original name: BuildingBlocks_WidgetClone
// Size: 0x8b8
// VTable: 0x149990478
struct BuildingBlocks_WidgetClone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    CryStringT* urlPostfix; // Offset: 0x860
    uint8_t _pad_8[0x8]; // Offset: 0x868
    bool instantiated; // Offset: 0x870
    uint8_t _pad_9[0x7]; // Offset: 0x871
    BuildingBlocks_WidgetBase target; // Offset: 0x878
    DynArray_BuildingBlocks_FieldModifierPair* modifiers; // Offset: 0x888 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x890
};

// Original name: BuildingBlocks_WidgetContainer
// Size: 0x900
// VTable: 0x14998f0e0
struct BuildingBlocks_WidgetContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ContainerModeBase containerMode; // Offset: 0x8f0
};

// Original name: BuildingBlocks_WidgetCustomShape
// Size: 0x8d0
// VTable: 0x1499906d8
struct BuildingBlocks_WidgetCustomShape {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool renderShape; // Offset: 0x860
    bool flipHorizontal; // Offset: 0x861
    bool flipVertical; // Offset: 0x862
    uint8_t _pad_8[0x5]; // Offset: 0x863
    CryStringT* svgPath; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    bool enableColorOverlay; // Offset: 0x878
    uint8_t _pad_10[0x7]; // Offset: 0x879
    BuildingBlocks_ColorBase color; // Offset: 0x880
    ARDataType scalingBehavior; // Offset: 0x890
    float containPositionX; // Offset: 0x894
    float containPositionY; // Offset: 0x898
    bool enableNineSliceRect; // Offset: 0x89c
    uint8_t _pad_11[0x3]; // Offset: 0x89d
    BuildingBlocks_TRBL nineSliceRect; // Offset: 0x8a0
    float nineSliceScale; // Offset: 0x8c0
    float strokeExtent; // Offset: 0x8c4
    float playhead; // Offset: 0x8c8
    uint8_t _pad_12[0x4]; // Offset: 0x8cc
};

// Original name: BuildingBlocks_WidgetDustVolume
// Size: 0x890
// VTable: 0x1499907f8
struct BuildingBlocks_WidgetDustVolume {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    uint16_t particleCount; // Offset: 0x860
    uint8_t _pad_8[0x2]; // Offset: 0x862
    float particleDiameter; // Offset: 0x864
    float alphaFadeOffMultiplier; // Offset: 0x868
    float zoomFactor; // Offset: 0x86c
    Vec3 translationOffset; // Offset: 0x870
    ARDataType movementRestriction; // Offset: 0x888
    uint8_t _pad_9[0x4]; // Offset: 0x88c
};

// Original name: BuildingBlocks_WidgetEditBox
// Size: 0x940
// VTable: 0x149990ad0
struct BuildingBlocks_WidgetEditBox {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    CryStringT* variableName; // Offset: 0x860
    uint8_t _pad_8[0x8]; // Offset: 0x868
    uint16_t characterLimit; // Offset: 0x870
    bool isSingleLine; // Offset: 0x872
    bool allowSpaces; // Offset: 0x873
    bool confirmDeselects; // Offset: 0x874
    bool hiddenText; // Offset: 0x875
    uint8_t _pad_9[0x2]; // Offset: 0x876
    CLocIdentifier* helperString; // Offset: 0x878
    BuildingBlocks_WidgetText textBox; // Offset: 0x880
    bool bindingsAuthoritative; // Offset: 0x890
    uint8_t _pad_10[0x7]; // Offset: 0x891
    BuildingBlocks_ColorBase selectionBackgroundColor; // Offset: 0x898
    BuildingBlocks_ColorBase blockCursorColor; // Offset: 0x8a8
    CryStringT* confirmTrigger; // Offset: 0x8b8
    uint8_t _pad_11[0x8]; // Offset: 0x8c0
    Tag activeSoundTag; // Offset: 0x8c8
    Tag inactiveSoundTag; // Offset: 0x8e0
    Tag keyEnterSoundTag; // Offset: 0x8f8
    Tag keyEnterFailSoundTag; // Offset: 0x910
    Tag keyDeleteSoundTag; // Offset: 0x928
};

// Original name: BuildingBlocks_WidgetEnvironmentProbe
// Size: 0x888
// VTable: 0x149990ba8
struct BuildingBlocks_WidgetEnvironmentProbe {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    float probeRadius; // Offset: 0x860
    float probeIntensity; // Offset: 0x864
    CryStringT* specularImage; // Offset: 0x868
    uint8_t _pad_8[0x8]; // Offset: 0x870
    BuildingBlocks_ColorBase probeColor; // Offset: 0x878
};

// Original name: BuildingBlocks_WidgetForegroundOverlay
// Size: 0x908
// VTable: 0x14998f0e8
struct BuildingBlocks_WidgetForegroundOverlay {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentTextureProperties textureProperties; // Offset: 0x8f0
};

// Original name: BuildingBlocks_WidgetHoloVolume
// Size: 0x8a8
// VTable: 0x149990d40
struct BuildingBlocks_WidgetHoloVolume {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    BuildingBlocks_PreviewSceneHoloVolume holoVolumePreviewScene; // Offset: 0x860
    Tag pickableTag; // Offset: 0x878
    ARDataType renderType; // Offset: 0x890
    uint8_t _pad_8[0x3]; // Offset: 0x891
    ARDataType volumeType; // Offset: 0x894
    float objectFadeDist; // Offset: 0x898
    float coordinateSpace; // Offset: 0x89c
    bool enableSSDO; // Offset: 0x8a0
    bool enableSubsurfaceScattering; // Offset: 0x8a1
    bool enableTAA; // Offset: 0x8a2
    uint8_t _pad_9[0x5]; // Offset: 0x8a3
};

// Original name: BuildingBlocks_WidgetIcon
// Size: 0x910
// VTable: 0x14998f140
struct BuildingBlocks_WidgetIcon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentIconProperties iconProperties; // Offset: 0x8f0
};

// Original name: BuildingBlocks_WidgetImage
// Size: 0x8e0
// VTable: 0x149991000
struct BuildingBlocks_WidgetImage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    CryStringT* imagePath; // Offset: 0x860
    uint8_t _pad_8[0x8]; // Offset: 0x868
    DynArray_BuildingBlocks_ColorPicker* colorPickers; // Offset: 0x870 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x878
    BuildingBlocks_ColorBase color; // Offset: 0x8a0
    CryStringT* colorPickerHandleIndexURL; // Offset: 0x8b0
    uint8_t _pad_10[0x8]; // Offset: 0x8b8
    ARDataType imageScalingMethod; // Offset: 0x8c0
    int32_t colorSearchStepX; // Offset: 0x8c4
    int32_t colorSearchStepY; // Offset: 0x8c8
    float containPositionX; // Offset: 0x8cc
    float containPositionY; // Offset: 0x8d0
    bool flipH; // Offset: 0x8d4
    bool flipV; // Offset: 0x8d5
    uint8_t _pad_11[0xa]; // Offset: 0x8d6
};

// Original name: BuildingBlocks_WidgetLight
// Size: 0x8b0
// VTable: 0x1499912b8
struct BuildingBlocks_WidgetLight {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    BuildingBlocks_LightParams light; // Offset: 0x860
    BuildingBlocks_TransformerBase transformer; // Offset: 0x8a0
};

// Original name: BuildingBlocks_WidgetLighting
// Size: 0x938
// VTable: 0x14998f2a0
struct BuildingBlocks_WidgetLighting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_WidgetLightSetting primaryLightSettings; // Offset: 0x8f0
    BuildingBlocks_WidgetLightSetting secondaryLightSettings; // Offset: 0x908
    BuildingBlocks_WidgetLightSetting tertiaryLightSettings; // Offset: 0x920
};

// Original name: BuildingBlocks_WidgetLine
// Size: 0x8a0
// VTable: 0x149991458
struct BuildingBlocks_WidgetLine {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    float strokeWidth; // Offset: 0x860
    uint8_t _pad_8[0x4]; // Offset: 0x864
    BuildingBlocks_ColorBase strokeColor; // Offset: 0x868
    BuildingBlocks_DisplayWidget targetWidget; // Offset: 0x878
    bool primitiveFacesCamera; // Offset: 0x888
    bool primitiveFixedWidth; // Offset: 0x889
    uint8_t _pad_9[0x6]; // Offset: 0x88a
    BuildingBlocks_SteppedLine steppedLine; // Offset: 0x890
};

// Original name: BuildingBlocks_WidgetLineList
// Size: 0x8c8
// VTable: 0x149991790
struct BuildingBlocks_WidgetLineList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    CryStringT* urlContainer; // Offset: 0x860
    uint8_t _pad_8[0x8]; // Offset: 0x868
    CryStringT* urlPosX; // Offset: 0x870
    uint8_t _pad_9[0x8]; // Offset: 0x878
    CryStringT* urlPosY; // Offset: 0x880
    uint8_t _pad_10[0x8]; // Offset: 0x888
    CryStringT* urlCurveX; // Offset: 0x890
    uint8_t _pad_11[0x8]; // Offset: 0x898
    CryStringT* urlCurveY; // Offset: 0x8a0
    uint8_t _pad_12[0x8]; // Offset: 0x8a8
    float strokeWidth; // Offset: 0x8b0
    uint8_t _pad_13[0x4]; // Offset: 0x8b4
    BuildingBlocks_ColorBase strokeColor; // Offset: 0x8b8
};

// Original name: BuildingBlocks_WidgetLinearProgressMeter
// Size: 0x900
// VTable: 0x14998f378
struct BuildingBlocks_WidgetLinearProgressMeter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    ARDataType direction; // Offset: 0x8f0
    ARDataType meterState; // Offset: 0x8f4
    float progress; // Offset: 0x8f8
    bool reverseDirection; // Offset: 0x8fc
    uint8_t _pad_13[0x3]; // Offset: 0x8fd
};

// Original name: BuildingBlocks_WidgetList
// Size: 0x8c8
// VTable: 0x149991640
struct BuildingBlocks_WidgetList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    CryStringT* arrayVariable; // Offset: 0x860
    uint8_t _pad_8[0x8]; // Offset: 0x868
    CryStringT* selectedVariable; // Offset: 0x870
    uint8_t _pad_9[0x8]; // Offset: 0x878
    CryStringT* hoverVariable; // Offset: 0x880
    uint8_t _pad_10[0x8]; // Offset: 0x888
    CryStringT* keyboardNavVariable; // Offset: 0x890
    uint8_t _pad_11[0x8]; // Offset: 0x898
    CryStringT* gamepadNavVariable; // Offset: 0x8a0
    uint8_t _pad_12[0x8]; // Offset: 0x8a8
    BuildingBlocks_WidgetBase target; // Offset: 0x8b0
    bool verticalKeyboardNavigation; // Offset: 0x8c0
    bool horizontalKeyboardNavigation; // Offset: 0x8c1
    bool useVirtualization; // Offset: 0x8c2
    bool useCulling; // Offset: 0x8c3
    uint16_t preCacheAmount; // Offset: 0x8c4
    uint8_t _pad_13[0x2]; // Offset: 0x8c6
};

// Original name: BuildingBlocks_WidgetLoadingIndicator
// Size: 0x8f0
// VTable: 0x14998f380
struct BuildingBlocks_WidgetLoadingIndicator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
};

// Original name: BuildingBlocks_WidgetManufacturerLogo
// Size: 0x908
// VTable: 0x14998f408
struct BuildingBlocks_WidgetManufacturerLogo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    bool overrideColor; // Offset: 0x8f0
    uint8_t _pad_13[0x7]; // Offset: 0x8f1
    BuildingBlocks_ColorStyle colorStyle; // Offset: 0x8f8
};

// Original name: BuildingBlocks_WidgetMovie
// Size: 0x8e0
// VTable: 0x149991958
struct BuildingBlocks_WidgetMovie {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    CryStringT* moviePath; // Offset: 0x860
    uint8_t _pad_8[0x8]; // Offset: 0x868
    DynArray_CryStringT* m_movieList; // Offset: 0x870 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x878
    int64_t movieStartTimeMs; // Offset: 0x8a0
    bool moviePlaying; // Offset: 0x8a8
    bool movieLooping; // Offset: 0x8a9
    bool movieSeeks; // Offset: 0x8aa
    bool neverSeeks; // Offset: 0x8ab
    uint8_t _pad_10[0x4]; // Offset: 0x8ac
    CryStringT* movieCompleteURL; // Offset: 0x8b0
    uint8_t _pad_11[0x8]; // Offset: 0x8b8
    CryStringT* movieSkipOffsetURL; // Offset: 0x8c0
    uint8_t _pad_12[0x8]; // Offset: 0x8c8
    CryStringT* currentMovieIndexURL; // Offset: 0x8d0
    uint8_t _pad_13[0x8]; // Offset: 0x8d8
};

// Original name: BuildingBlocks_WidgetPagination
// Size: 0x918
// VTable: 0x14998f528
struct BuildingBlocks_WidgetPagination {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    bool showFirstPageButton; // Offset: 0x8f0
    bool showPreviousPageButton; // Offset: 0x8f1
    bool showNextPageButton; // Offset: 0x8f2
    bool showLastPageButton; // Offset: 0x8f3
    uint8_t _pad_13[0x4]; // Offset: 0x8f4
    CryStringT* pageNumberURL; // Offset: 0x8f8
    uint8_t _pad_14[0x8]; // Offset: 0x900
    CryStringT* numPagesURL; // Offset: 0x908
    uint8_t _pad_15[0x8]; // Offset: 0x910
};

// Original name: BuildingBlocks_WidgetParticleEffect
// Size: 0x878
// VTable: 0x1499919b0
struct BuildingBlocks_WidgetParticleEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    GlobalResourceParticle effect; // Offset: 0x860
};

// Original name: BuildingBlocks_WidgetPolygon
// Size: 0x8a8
// VTable: 0x149991a88
struct BuildingBlocks_WidgetPolygon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool doFill; // Offset: 0x860
    bool doStroke; // Offset: 0x861
    uint8_t _pad_8[0x2]; // Offset: 0x862
    float strokeWidth; // Offset: 0x864
    BuildingBlocks_ColorBase fillColor; // Offset: 0x868
    BuildingBlocks_ColorBase strokeColor; // Offset: 0x878
    ARDataType strokeCapStyle; // Offset: 0x888
    ARDataType strokeJointStyle; // Offset: 0x88c
    ARDataType strokeAlignment; // Offset: 0x890
    uint8_t _pad_9[0x4]; // Offset: 0x894
    float startAngle; // Offset: 0x898
    uint8_t sides; // Offset: 0x89c
    uint8_t _pad_10[0x3]; // Offset: 0x89d
    float cornerRatio; // Offset: 0x8a0
    bool chamfer; // Offset: 0x8a4
    uint8_t _pad_11[0x3]; // Offset: 0x8a5
};

// Original name: BuildingBlocks_WidgetPolymorphic
// Size: 0x8a0
// VTable: 0x149991b88
struct BuildingBlocks_WidgetPolymorphic {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    CryStringT* variableName; // Offset: 0x860
    uint8_t _pad_8[0x8]; // Offset: 0x868
    DynArray_BuildingBlocks_IntegerWidgetPairDef* targetList; // Offset: 0x870 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x878
};

// Original name: BuildingBlocks_WidgetRadialProgressMeter
// Size: 0x938
// VTable: 0x14998fae8
struct BuildingBlocks_WidgetRadialProgressMeter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    BuildingBlocks_ComponentCaptionProperties captionProperties; // Offset: 0x910
    ARDataType meterState; // Offset: 0x930
    float progress; // Offset: 0x934
};

// Original name: BuildingBlocks_WidgetRadioControl
// Size: 0x900
// VTable: 0x14998f530
struct BuildingBlocks_WidgetRadioControl {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
};

// Original name: BuildingBlocks_WidgetRuntimeImage
// Size: 0x880
// VTable: 0x149991c08
struct BuildingBlocks_WidgetRuntimeImage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    Tag pickableTag; // Offset: 0x860
    ARDataType imageSource; // Offset: 0x878
    uint8_t _pad_8[0x4]; // Offset: 0x87c
};

// Original name: BuildingBlocks_WidgetSeparator
// Size: 0x900
// VTable: 0x14998f5e0
struct BuildingBlocks_WidgetSeparator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    ARDataType direction; // Offset: 0x8f0
    ARDataType style; // Offset: 0x8f4
    ARDataType flip; // Offset: 0x8f8
    uint8_t _pad_13[0x4]; // Offset: 0x8fc
};

// Original name: BuildingBlocks_WidgetSlice
// Size: 0x888
// VTable: 0x149991e60
struct BuildingBlocks_WidgetSlice {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    BuildingBlocks_SlicerBase slicer; // Offset: 0x860
    CryStringT* materialName; // Offset: 0x870
    uint8_t _pad_8[0x8]; // Offset: 0x878
    float constantScale; // Offset: 0x880
    bool flipHorizontal; // Offset: 0x884
    bool flipVertical; // Offset: 0x885
    bool isFacingCamera; // Offset: 0x886
    bool hasPerspective; // Offset: 0x887
};

// Original name: BuildingBlocks_WidgetSlider
// Size: 0x890
// VTable: 0x149991f88
struct BuildingBlocks_WidgetSlider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    CryStringT* variableName; // Offset: 0x860
    uint8_t _pad_8[0x8]; // Offset: 0x868
    float minimum; // Offset: 0x870
    float maximum; // Offset: 0x874
    ARDataType sliderMode; // Offset: 0x878
    int32_t markerIncrementProportion; // Offset: 0x87c
    BuildingBlocks_WidgetBase graphicDef; // Offset: 0x880
};

// Original name: BuildingBlocks_WidgetStrip
// Size: 0x908
// VTable: 0x149992198
struct BuildingBlocks_WidgetStrip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    BuildingBlocks_ColorBase StartColor; // Offset: 0x860
    BuildingBlocks_ColorBase EndColor; // Offset: 0x870
    CryStringT* materialPath; // Offset: 0x880
    uint8_t _pad_8[0x8]; // Offset: 0x888
    CryStringT* segmentArrayVariable; // Offset: 0x890
    uint8_t _pad_9[0x8]; // Offset: 0x898
    CryStringT* zoneTransformVariable; // Offset: 0x8a0
    uint8_t _pad_10[0x8]; // Offset: 0x8a8
    CryStringT* offsetStartIndexVariable; // Offset: 0x8b0
    uint8_t _pad_11[0x8]; // Offset: 0x8b8
    CryStringT* offsetEndIndexVariable; // Offset: 0x8c0
    uint8_t _pad_12[0x8]; // Offset: 0x8c8
    CryStringT* customEndQuatVariable; // Offset: 0x8d0
    uint8_t _pad_13[0x8]; // Offset: 0x8d8
    CryStringT* quatMemberName; // Offset: 0x8e0
    uint8_t _pad_14[0x8]; // Offset: 0x8e8
    CryStringT* fadeMultiplierMemberName; // Offset: 0x8f0
    uint8_t _pad_15[0x8]; // Offset: 0x8f8
    float minimumSectionGap; // Offset: 0x900
    float stripWidth; // Offset: 0x904
};

// Original name: BuildingBlocks_WidgetText
// Size: 0x8e0
// VTable: 0x1499928a8
struct BuildingBlocks_WidgetText {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    BuildingBlocks_AutoTypeParams autoTypeParams; // Offset: 0x860
    BuildingBlocks_ColorBase color; // Offset: 0x870
    CLocIdentifier* locString; // Offset: 0x880
    BuildingBlocks_FontStyle fontStyle; // Offset: 0x888
    CryStringT* materialOverride; // Offset: 0x8a0
    uint8_t _pad_8[0x8]; // Offset: 0x8a8
    ARDataType textAlignment; // Offset: 0x8b0
    ARDataType verticalAlignment; // Offset: 0x8b4
    bool wordWrap; // Offset: 0x8b8
    uint8_t _pad_9[0x3]; // Offset: 0x8b9
    float lineSpacing; // Offset: 0x8bc
    float letterSpacing; // Offset: 0x8c0
    bool horizontalAutoSize; // Offset: 0x8c4
    bool verticalAutoSize; // Offset: 0x8c5
    bool renderAsHTML; // Offset: 0x8c6
    bool ignoreTags; // Offset: 0x8c7
    float fontSize; // Offset: 0x8c8
    bool autoFontSize; // Offset: 0x8cc
    uint8_t _pad_10[0x3]; // Offset: 0x8cd
    ARDataType squashAxis; // Offset: 0x8d0
    bool bold; // Offset: 0x8d4
    bool italic; // Offset: 0x8d5
    bool underline; // Offset: 0x8d6
    bool kerning; // Offset: 0x8d7
    ARDataType caseModifier; // Offset: 0x8d8
    uint8_t _pad_11[0x4]; // Offset: 0x8dc
};

// Original name: BuildingBlocks_WidgetTextEntry
// Size: 0x980
// VTable: 0x14998f910
struct BuildingBlocks_WidgetTextEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    ARDataType textAlignment; // Offset: 0x910
    ARDataType verticalTextAlignment; // Offset: 0x914
    CryStringT* variableName; // Offset: 0x918
    uint8_t _pad_13[0x8]; // Offset: 0x920
    CryStringT* confirmTrigger; // Offset: 0x928
    uint8_t _pad_14[0x8]; // Offset: 0x930
    uint16_t characterLimit; // Offset: 0x938
    bool isSingleLine; // Offset: 0x93a
    bool allowSpaces; // Offset: 0x93b
    bool confirmDeselects; // Offset: 0x93c
    bool hiddenText; // Offset: 0x93d
    bool confirmEnabled; // Offset: 0x93e
    bool cancelEnabled; // Offset: 0x93f
    CLocIdentifier* helperString; // Offset: 0x940
    CLocIdentifier* prefixString; // Offset: 0x948
    bool bindingsAuthoritative; // Offset: 0x950
    uint8_t _pad_15[0x7]; // Offset: 0x951
    BuildingBlocks_ColorBase selectionBackgroundColor; // Offset: 0x958
    CryStringT* svgPath; // Offset: 0x968
    uint8_t _pad_16[0x8]; // Offset: 0x970
    float iconHeight; // Offset: 0x978
    float iconWidth; // Offset: 0x97c
};

// Original name: BuildingBlocks_WidgetTextField
// Size: 0x930
// VTable: 0x14998fa10
struct BuildingBlocks_WidgetTextField {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    BuildingBlocks_ComponentLabelProperties labelProperties; // Offset: 0x8f0
    ARDataType textAlignment; // Offset: 0x910
    ARDataType verticalTextAlignment; // Offset: 0x914
    BuildingBlocks_ColorStyle colorStyleOverride; // Offset: 0x918
    bool fitToParent; // Offset: 0x928
    uint8_t _pad_13[0x7]; // Offset: 0x929
};

// Original name: BuildingBlocks_WidgetTickBox
// Size: 0x888
// VTable: 0x149992950
struct BuildingBlocks_WidgetTickBox {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    CryStringT* variableName; // Offset: 0x860
    uint8_t _pad_8[0x8]; // Offset: 0x868
    BuildingBlocks_WidgetBase tick; // Offset: 0x870
    ARDataType mode; // Offset: 0x880
    uint8_t _pad_9[0x4]; // Offset: 0x884
};

// Original name: BuildingBlocks_WidgetToggleControl
// Size: 0x900
// VTable: 0x14998fa18
struct BuildingBlocks_WidgetToggleControl {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    bool instantiated; // Offset: 0x860
    uint8_t _pad_8[0x7]; // Offset: 0x861
    CryStringT* urlOptional; // Offset: 0x868
    uint8_t _pad_9[0x8]; // Offset: 0x870
    CryStringT* urlPostfix; // Offset: 0x878
    uint8_t _pad_10[0x8]; // Offset: 0x880
    BuildingBlocks_Style stylesheetOverride; // Offset: 0x888
    BuildingBlocks_Canvas canvas; // Offset: 0x8a0
    ARDataType sizingMethod; // Offset: 0x8b8
    uint8_t _pad_11[0x4]; // Offset: 0x8bc
    DynArray_BuildingBlocks_ComponentParameterInputBase* paramInputValues; // Offset: 0x8c0 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x8c8
    CryStringT* variableName; // Offset: 0x8f0
    uint8_t _pad_13[0x8]; // Offset: 0x8f8
};

// Original name: BuildingBlocks_WidgetWindow
// Size: 0x8c8
// VTable: 0x149992b28
struct BuildingBlocks_WidgetWindow {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_WidgetBase parent; // Offset: 0x18
    BuildingBlocks_PreviewScreenBase previewScene; // Offset: 0x28
    BuildingBlocks_PreviewScreenBase previewSceneFlattened; // Offset: 0x38
    DynArray_Tag* styleTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    BuildingBlocks_PrimitiveSettings primitiveSettings; // Offset: 0x78
    Vec3 position; // Offset: 0xc8
    Vec3 positionOffset; // Offset: 0xe0
    Deg3 orientation; // Offset: 0xf8
    Deg3 orientationOffset; // Offset: 0x118
    Vec3 scale; // Offset: 0x138
    BuildingBlocks_Size sizing; // Offset: 0x150
    ARDataType autoScalingMethod; // Offset: 0x1d0
    uint8_t _pad_3[0x4]; // Offset: 0x1d4
    BuildingBlocks_TRBL padding; // Offset: 0x1d8
    BuildingBlocks_TRBL margin; // Offset: 0x1f8
    Vec3 pivot; // Offset: 0x218
    Vec3 anchor; // Offset: 0x230
    BuildingBlocks_Background background; // Offset: 0x248
    BuildingBlocks_Border border; // Offset: 0x2a8
    BuildingBlocks_SegmentedFill segmentedFill; // Offset: 0x3b0
    BuildingBlocks_SvgFill svgFill; // Offset: 0x400
    BuildingBlocks_RendererPolicyBase rendererPolicy; // Offset: 0x470
    BuildingBlocks_LayoutPolicyBase layoutPolicy; // Offset: 0x480
    BuildingBlocks_LayoutPolicyItemBase layoutPolicyItem; // Offset: 0x490
    BuildingBlocks_LayoutItemCommon layoutItemCommon; // Offset: 0x4a0
    BuildingBlocks_DropTargetPolicyBase dropTargetPolicy; // Offset: 0x4b0
    BuildingBlocks_DraggablePolicyBase draggablePolicy; // Offset: 0x4c0
    BuildingBlocks_TooltipPolicy tooltipPolicy; // Offset: 0x4d0
    BuildingBlocks_ContextMenuPolicy contextMenuPolicy; // Offset: 0x4e0
    BuildingBlocks_GrabControlsPolicy grabControlsPolicy; // Offset: 0x4f0
    BuildingBlocks_CalloutSettings calloutSettings; // Offset: 0x500
    BuildingBlocks_ScrollPolicyBase scrollPolicy; // Offset: 0x510
    BuildingBlocks_VirtualCursorPolicy virtualCursorPolicy; // Offset: 0x520
    BuildingBlocks_Overflow overflow; // Offset: 0x530
    BuildingBlocks_Interactions interactions; // Offset: 0x550
    BuildingBlocks_RadialTransform radialTransform; // Offset: 0x760
    BuildingBlocks_RadialTransformChild radialTransformChild; // Offset: 0x778
    BuildingBlocks_Animation animation; // Offset: 0x788
    ARDataType rendererType; // Offset: 0x7d0
    float alpha; // Offset: 0x7d4
    bool canBeVirtual; // Offset: 0x7d8
    bool isActive; // Offset: 0x7d9
    bool affectsLayout; // Offset: 0x7da
    bool affectsAutosize; // Offset: 0x7db
    bool inheritsAlpha; // Offset: 0x7dc
    bool inheritsScale; // Offset: 0x7dd
    bool inheritsRotation; // Offset: 0x7de
    bool inheritsTranslation; // Offset: 0x7df
    bool inheritsOverflow; // Offset: 0x7e0
    bool enableHeldCursor; // Offset: 0x7e1
    bool exportNode; // Offset: 0x7e2
    uint8_t _pad_4[0x1]; // Offset: 0x7e3
    int16_t focusIndex; // Offset: 0x7e4
    uint8_t layer; // Offset: 0x7e6
    uint8_t _pad_5[0x1]; // Offset: 0x7e7
    DynArray_BuildingBlocks_StyleEntry* inlineStyles; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x7f0
    BuildingBlocks_AspectRatioLibrary aspectRatioLibrary; // Offset: 0x818
    ARDataType hoverCursor; // Offset: 0x830
    ARDataType heldCursor; // Offset: 0x834
    uint8_t _pad_7[0x28]; // Offset: 0x838
    BuildingBlocks_PreviewSceneRttWindow windowPreviewScene; // Offset: 0x860
    Tag pickableTag; // Offset: 0x878
    BuildingBlocks_WindowCamera camera; // Offset: 0x890
    ARDataType renderType; // Offset: 0x8a0
    uint8_t _pad_8[0x3]; // Offset: 0x8a1
    float fadeTime; // Offset: 0x8a4
    float coordinateSpace; // Offset: 0x8a8
    bool isStatic; // Offset: 0x8ac
    uint8_t _pad_9[0x3]; // Offset: 0x8ad
    GrabCameraControlParams grabCameraControlParams; // Offset: 0x8b0
};

// Original name: BulletProjectileParams
// Size: 0x158
// VTable: 0x149a18590
struct BulletProjectileParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ProjectileDetonationParams detonationParams; // Offset: 0x8
    ProjectileProximityTriggerParams proximityTriggerParams; // Offset: 0x18
    CryStringT* hitType; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    float impactRadius; // Offset: 0x38
    float minImpactRadius; // Offset: 0x3c
    float ignitionChanceOverride; // Offset: 0x40
    bool keepAliveOnZeroDamage; // Offset: 0x44
    uint8_t _pad_2[0x3]; // Offset: 0x45
    DamageBase damage; // Offset: 0x48
    BulletDamageDropParams damageDropParams; // Offset: 0x58
    BulletImpulseFalloffParams impulseFalloffParams; // Offset: 0x68
    BulletPierceabilityParams pierceabilityParams; // Offset: 0x78
    AmmoPenetrationParams penetrationParams; // Offset: 0x90
    BulletVisualParams visualParams; // Offset: 0xa0
    BulletVisualParams alternateVisualParams; // Offset: 0xf0
    BulletElectronParams electronParams; // Offset: 0x100
    AdditionalProjectilesParams additionalProjectilesParams; // Offset: 0x110
    uint8_t* hitBehaviors; // Offset: 0x120 // Pointer to array of opaque structs
    uint8_t _pad_3[0x30]; // Offset: 0x128
};

// Original name: CameraPlayerInventoryConfig
// Size: 0x768
// VTable: 0x149a01890
struct CameraPlayerInventoryConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
    DynArray_ActorCameraOffsetFiltered* actorOffsetConfig; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x550
    InventoryConfig inventoryConfig; // Offset: 0x578
};

// Original name: CareerContract
// Size: 0x288
// VTable: 0x149973f58
struct CareerContract {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool notForRelease; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    CryStringT* debugName; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    ContractTemplate template_; /* template */ // Offset: 0x30
    ContractParamOverrides paramOverrides; // Offset: 0x48
    DynArray_SubContract* subContracts; // Offset: 0x188 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x190
    DynArray_ContractPrerequisiteBase* additionalPrerequisites; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x1c0
    ContractGenerationParamsBase generationParams; // Offset: 0x1e8
    ContractLifeTime contractLifeTime; // Offset: 0x1f8
    ContractResults contractResults; // Offset: 0x208
    SReputationStandingParams minStanding; // Offset: 0x258
    SReputationStandingParams maxStanding; // Offset: 0x270
};

// Original name: CargoCommoditiesScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7a28
struct CargoCommoditiesScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: CargoControllerParams
// Size: 0x78
// VTable: 0x1499e22e0
struct CargoControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SInteractionState requiredStateForCargoOccupancy; // Offset: 0x18
    SInteractionState StateAnimForCargoOccupancy; // Offset: 0x28
    bool cargoDeckLoaded; // Offset: 0x38
    bool cargoRequiresDocking; // Offset: 0x39
    uint8_t _pad_1[0x6]; // Offset: 0x3a
    SBaseCargoUnit loadBatchAmount; // Offset: 0x40
    SBaseCargoUnit unloadBatchAmount; // Offset: 0x50
    CargoManifest cargoManifestOverride; // Offset: 0x60
};

// Original name: CargoFillCapacityValue_Custom
// Size: 0x38
// VTable: 0x1499b7fa0
struct CargoFillCapacityValue_Custom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CargoResourceAllocation* resources; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: CargoFillCapacityValue_Even
// Size: 0x40
// VTable: 0x1499b7e90
struct CargoFillCapacityValue_Even {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CargoResource* resources; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float minCapacityRange; // Offset: 0x38
    float maxCapacityRange; // Offset: 0x3c
};

// Original name: CargoFillCapacityValue_Random
// Size: 0x40
// VTable: 0x1499b7de0
struct CargoFillCapacityValue_Random {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CargoResource* resources; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float minCapacityRange; // Offset: 0x38
    float maxCapacityRange; // Offset: 0x3c
};

// Original name: CargoFillCapacityValue_RandomBeta
// Size: 0x40
// VTable: 0x1499b7f40
struct CargoFillCapacityValue_RandomBeta {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CargoResourceDistribution* resources; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float minCapacityRange; // Offset: 0x38
    float maxCapacityRange; // Offset: 0x3c
};

// Original name: CargoManifest
// Size: 0x80
// VTable: 0x1499b8050
struct CargoManifest {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList descriptionTags; // Offset: 0x8
    DynArray_Tag* tags; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x48
    BaseCargoFillCapacityValue cargoFillCapacity; // Offset: 0x70
};

// Original name: CargoOccupancyStateModifier
// Size: 0x28
// VTable: 0x1499c1978
struct CargoOccupancyStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState cargoVacant; // Offset: 0x8
    SInteractionState cargoStored; // Offset: 0x18
};

// Original name: CargoResource
// Size: 0x28
// VTable: 0x1499b7bf8
struct CargoResource {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resource; // Offset: 0x8
    float probability; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: CargoResourceAllocation
// Size: 0x38
// VTable: 0x1499b7ca0
struct CargoResourceAllocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CargoResource resources; // Offset: 0x8
    float minResourceAllocationPercentage; // Offset: 0x30
    float maxResourceAllocationPercentage; // Offset: 0x34
};

// Original name: CargoResourceDistribution
// Size: 0x28
// VTable: 0x1499b7d28
struct CargoResourceDistribution {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resource; // Offset: 0x8
    float meanAverage; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: CarryConfig
// Size: 0xc8
// VTable: 0x149a9fd90
struct CarryConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ThrowParams overArmThrow; // Offset: 0x8
    ThrowParams underArmThrow; // Offset: 0x20
    ThrowParams twoHandedThrow; // Offset: 0x38
    ItemCarryParams carry; // Offset: 0x50
    float reloadRummageDuration; // Offset: 0x60
    float EVAHandReachPlaceDistance; // Offset: 0x64
    DynArray_SActorCarryConfigTagSwitch* tagSwitches; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x70
    Vec3 dropHeldItemHandOffset; // Offset: 0x98
    Vec3 dropEquippedItemHandOffset; // Offset: 0xb0
};

// Original name: CheckEntitiesOnActorsLoadoutWithinAreaGameplayTrigger
// Size: 0x58
// VTable: 0x1499fb940
struct CheckEntitiesOnActorsLoadoutWithinAreaGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* requiredEntities; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SInteractionState successState; // Offset: 0x38
    SInteractionState failState; // Offset: 0x48
};

// Original name: ChildMissionPhase
// Size: 0x120
// VTable: 0x14996ecb8
struct ChildMissionPhase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* debugName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool startsActive; // Offset: 0x28
    uint8_t _pad_3[0x7]; // Offset: 0x29
    ObjectiveHandlerBase objectiveHandler; // Offset: 0x30
    ObjectiveRewardContributionBase rewardContribution; // Offset: 0x40
    ObjectiveDisplayInfo displayInfo; // Offset: 0x50
    DynArray_CommsNotificationSelector* commsNotifications; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x80
    DynArray_ObjectivePropertyBase* properties; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xb0
    DynArray_ChildMissionPhase* childMissionPhases; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xe0
    CryStringT* variableName; // Offset: 0x108
    uint8_t _pad_7[0x8]; // Offset: 0x110
    float weight; // Offset: 0x118
    uint8_t _pad_8[0x4]; // Offset: 0x11c
};

// Original name: ClassificationScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7a30
struct ClassificationScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: CollectibleStateModifier
// Size: 0x38
// VTable: 0x1499c2700
struct CollectibleStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState originState; // Offset: 0x8
    SInteractionState stateIfCollected; // Offset: 0x18
    SInteractionState stateIfUncollected; // Offset: 0x28
};

// Original name: CombatAssistanceParams
// Size: 0xa8
// VTable: 0x149a16a38
struct CombatAssistanceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType serviceBeaconType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* serviceBeaconName; // Offset: 0x20
    int32_t beaconTaxPercentage; // Offset: 0x28
    int32_t beaconMaxPaymentAmount; // Offset: 0x2c
    MissionPropertyValue_AIName npcRequesterNameDef; // Offset: 0x30
    SServiceBeaconCreatorParams playerCreatorParams; // Offset: 0x78
    SServiceBeaconCreatorParamsBase npcCreatorParams; // Offset: 0x88
    CLocIdentifier* objectiveTitle; // Offset: 0x98
    CLocIdentifier* objectiveDescription; // Offset: 0xa0
};

// Original name: Commodity
// Size: 0x98
// VTable: 0x1499e1c20
struct Commodity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CommodityType type_; /* type */ // Offset: 0x8
    CommoditySubtype subtype; // Offset: 0x20
    float volatility; // Offset: 0x38
    float gForceTolerance; // Offset: 0x3c
    float gForceDeltaToDamage; // Offset: 0x40
    float HealthDecayOverTime; // Offset: 0x44
    CommodityTemperatureTolerance temperatureTolerance; // Offset: 0x48
    DamageResistanceBase damageResistance; // Offset: 0x70
    Commodity refineOutput; // Offset: 0x80
};

// Original name: CommodityComponentParams
// Size: 0x88
// VTable: 0x1499e1d98
struct CommodityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CommodityType type_; /* type */ // Offset: 0x18
    CommoditySubtype subtype; // Offset: 0x30
    SBaseCargoUnit occupancy; // Offset: 0x48
    Vec3 ContainerDimension; // Offset: 0x58
    CLocIdentifier* name; // Offset: 0x70
    CLocIdentifier* description; // Offset: 0x78
    bool IsUnrefinedElement; // Offset: 0x80
    bool boxable; // Offset: 0x81
    uint8_t _pad_1[0x6]; // Offset: 0x82
};

// Original name: CommodityDamageConfiguration
// Size: 0x208
// VTable: 0x149a103c8
struct CommodityDamageConfiguration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumSpeed; // Offset: 0x8
    float speedSquaredToDamage; // Offset: 0xc
    ExplosionParams defaultExplosionParams; // Offset: 0x10
    AudioRtpc volatilePowerRtpc; // Offset: 0x1d0
    float volatilityRadiusFactor; // Offset: 0x1f0
    float volatilityDamageFactor; // Offset: 0x1f4
    float volatilityForceFactor; // Offset: 0x1f8
    float volatilityCommodityDamageFactor; // Offset: 0x1fc
    float volatilityParticleStrengthFactor; // Offset: 0x200
    float gracePeriod; // Offset: 0x204
};

// Original name: CommoditySubtype
// Size: 0xc0
// VTable: 0x149a8b370
struct CommoditySubtype {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* typeName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* name; // Offset: 0x18
    CLocIdentifier* description; // Offset: 0x20
    CryStringT* symbol; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    SRGBA8 color; // Offset: 0x38
    float volatility; // Offset: 0x48
    float gForceTolerance; // Offset: 0x4c
    float gForceDeltaToDamage; // Offset: 0x50
    float HealthDecayOverTime; // Offset: 0x54
    CommodityTemperatureTolerance temperatureTolerance; // Offset: 0x58
    DamageResistanceBase damageResistance; // Offset: 0x80
    CommoditySubtype refineOutput; // Offset: 0x90
    Commodity commodity; // Offset: 0xa8
};

// Original name: CommodityTypeDatabase
// Size: 0x68
// VTable: 0x149a8b3f8
struct CommodityTypeDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CommodityType* types; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_CommoditySubtype* subtypes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: CommsNotification
// Size: 0xa0
// VTable: 0x1499750b0
struct CommsNotification {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList tags; // Offset: 0x8
    CommunicationName communicationName; // Offset: 0x40
    EntityClassDefinition characterEntityClass; // Offset: 0x58
    EntityClassDefinition fakeCommsAudioEntityClass; // Offset: 0x70
    CommsNotificationStage stage; // Offset: 0x88
};

// Original name: CommsNotificationStageObject
// Size: 0x50
// VTable: 0x149974db0
struct CommsNotificationStageObject {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
    Vec3 rotation; // Offset: 0x20
    EntityClassDefinition entityClass; // Offset: 0x38
};

// Original name: CommsNotificationsGlobalParams
// Size: 0x40
// VTable: 0x149975188
struct CommsNotificationsGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CommunicationChannelName channelName; // Offset: 0x8
    float expiry; // Offset: 0x20
    int32_t priority; // Offset: 0x24
    EntityClassDefinition fakeCommsAudioEntityClass3D; // Offset: 0x28
};

// Original name: CommsTapManagerComponentParams
// Size: 0x58
// VTable: 0x1499e27d8
struct CommsTapManagerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams tapInteraction; // Offset: 0x18
    DynArray_CommsChannelDef* relevantChannels; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: CommsTapScanProcedureParams
// Size: 0x40
// VTable: 0x1499c7ab8
struct CommsTapScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    CLocIdentifier* displayForEncrypted; // Offset: 0x30
    CLocIdentifier* displayForListening; // Offset: 0x38
};

// Original name: CommunicationAutoMannequinTagsConfig
// Size: 0xd8
// VTable: 0x14997f240
struct CommunicationAutoMannequinTagsConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* actorIsPlayerFragmentTags; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* targetIsPlayerFragmentTags; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* targetIsAllyFragmentTags; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* targetIsNeutralFragmentTags; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
    CryStringT* targetIsEnemyFragmentTags; // Offset: 0x48
    uint8_t _pad_5[0x8]; // Offset: 0x50
    CryStringT* subjectIsPlayerFragmentTags; // Offset: 0x58
    uint8_t _pad_6[0x8]; // Offset: 0x60
    CryStringT* subjectIsAllyFragmentTags; // Offset: 0x68
    uint8_t _pad_7[0x8]; // Offset: 0x70
    CryStringT* subjectIsNeutralFragmentTags; // Offset: 0x78
    uint8_t _pad_8[0x8]; // Offset: 0x80
    CryStringT* subjectIsEnemyFragmentTags; // Offset: 0x88
    uint8_t _pad_9[0x8]; // Offset: 0x90
    CryStringT* subjectIsDisguisedFragmentTags; // Offset: 0x98
    uint8_t _pad_10[0x8]; // Offset: 0xa0
    DynArray_CommunicationLocationAutoTags* locationsAutoTags; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0xb0
};

// Original name: CommunicationChannel
// Size: 0xa8
// VTable: 0x14997ee30
struct CommunicationChannel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CommunicationChannelName name; // Offset: 0x8
    CryStringT* audioEventForExternalSources; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float minSilence; // Offset: 0x30
    float flushSilence; // Offset: 0x34
    ARDataType type_; /* type */ // Offset: 0x38
    int32_t priority; // Offset: 0x3c
    float minSpeakerSilence; // Offset: 0x40
    bool ignoreSpeakerSilence; // Offset: 0x44
    uint8_t _pad_2[0x3]; // Offset: 0x45
    CommunicationSubtitleSettings subtitles; // Offset: 0x48
    CommunicationAudioRTPC audioRTPC; // Offset: 0x68
    DynArray_CommunicationChannel* subChannels; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
};

// Original name: CommunicationChannelConfig
// Size: 0x48
// VTable: 0x14997eeb8
struct CommunicationChannelConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* ChannelConfigName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_CommunicationChannel* Channels; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: CommunicationConfig
// Size: 0x78
// VTable: 0x14997ea60
struct CommunicationConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_CommunicationEntry* communications; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_CommunicationConfig* subConfigs; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
};

// Original name: CommunicationEntry
// Size: 0x78
// VTable: 0x14997e9b0
struct CommunicationEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CommunicationName name; // Offset: 0x8
    CommunicationChannelName channelName; // Offset: 0x20
    ARDataType method; // Offset: 0x38
    bool forceAnimation; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
    DynArray_CommunicationVariation* variations; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
    float entityRetriggerDelay; // Offset: 0x70
    float channelRetriggerDelay; // Offset: 0x74
};

// Original name: CommunicationLocationAutoTags
// Size: 0x90
// VTable: 0x14997f058
struct CommunicationLocationAutoTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObject starMapObject; // Offset: 0x8
    CryStringT* actorInLocationMannequinTags; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    DynArray_Tag* availableConversationTopics; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
    DynArray_Tag* conversationTopicsToExclude; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x68
};

// Original name: CommunicationVariation
// Size: 0x108
// VTable: 0x14997e7a0
struct CommunicationVariation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* animationFragmentId; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* animationFragmentTags; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* soundName; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    float overrideMinSilence; // Offset: 0x38
    float overrideMinSpeakerSilence; // Offset: 0x3c
    DialogueContext dialogueContext; // Offset: 0x40
    DialogueExternalSource dialogueExternalSource; // Offset: 0x58
    CommunicationVariationRules rules; // Offset: 0x70
    CommunicationVariationCondition conditions; // Offset: 0x88
};

// Original name: CommunicationVariationCondition
// Size: 0x80
// VTable: 0x14997e608
struct CommunicationVariationCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* expression; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    TagsDNF conditionTags; // Offset: 0x18
};

// Original name: ConditionDisplayParams
// Size: 0x70
// VTable: 0x149a8d6f0
struct ConditionDisplayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool exclusiveDisplay; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    BlockedTextParams blockedText; // Offset: 0x10
    BlockedCursorParams blockedCursor; // Offset: 0x20
    BlockedColorParams blockedColor; // Offset: 0x30
    BlockedHintParams blockedHint; // Offset: 0x40
    ConditionProhibitedItemsDisplayParams autoStoreOption; // Offset: 0x50
    DialogueBundle blockedInteractionAttemptMonologue; // Offset: 0x60
};

// Original name: ContactHighlightSharedParams
// Size: 0x88
// VTable: 0x1499c59e0
struct ContactHighlightSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxHighlightDistance; // Offset: 0x8
    float minHighlightDistance; // Offset: 0xc
    float maxHighlightOpacity; // Offset: 0x10
    float minHighlightOpacity; // Offset: 0x14
    float opacityFadeInDelay; // Offset: 0x18
    float opacityFadeInDuration; // Offset: 0x1c
    float opacityFadeOutDuration; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    DynArray_ContactHighlightStateParams* highlightParams; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    DynArray_Tag* audioTriggerTags; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
};

// Original name: ContactTypeScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7a38
struct ContactTypeScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: Contract
// Size: 0x258
// VTable: 0x149973ba0
struct Contract {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool notForRelease; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    CryStringT* debugName; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    ContractTemplate template_; /* template */ // Offset: 0x30
    ContractParamOverrides paramOverrides; // Offset: 0x48
    DynArray_SubContract* subContracts; // Offset: 0x188 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x190
    DynArray_ContractPrerequisiteBase* additionalPrerequisites; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x1c0
    ContractGenerationParamsBase generationParams; // Offset: 0x1e8
    ContractLifeTime contractLifeTime; // Offset: 0x1f8
    ContractResults contractResults; // Offset: 0x208
};

// Original name: ContractBase
// Size: 0x258
// VTable: 0x149973b98
struct ContractBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool notForRelease; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    CryStringT* debugName; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    ContractTemplate template_; /* template */ // Offset: 0x30
    ContractParamOverrides paramOverrides; // Offset: 0x48
    DynArray_SubContract* subContracts; // Offset: 0x188 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x190
    DynArray_ContractPrerequisiteBase* additionalPrerequisites; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x1c0
    ContractGenerationParamsBase generationParams; // Offset: 0x1e8
    ContractLifeTime contractLifeTime; // Offset: 0x1f8
    ContractResults contractResults; // Offset: 0x208
};

// Original name: ContractGenerator
// Size: 0x68
// VTable: 0x1499740a8
struct ContractGenerator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ContractGeneratorHandlerBase* generators; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_MissionScenario* required_active_scenarios; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: ContractGeneratorHandlerBase
// Size: 0x1b8
// VTable: 0x149973cd8
struct ContractGeneratorHandlerBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    ContractAvailability defaultAvailability; // Offset: 0x20
    ContractParamOverrides contractParams; // Offset: 0x78
};

// Original name: ContractGeneratorHandler_Career
// Size: 0x248
// VTable: 0x149974028
struct ContractGeneratorHandler_Career {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    ContractAvailability defaultAvailability; // Offset: 0x20
    ContractParamOverrides contractParams; // Offset: 0x78
    DynArray_Contract* introContracts; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1c0
    FactionReputation factionReputation; // Offset: 0x1e8
    SReputationScopeParams reputationScope; // Offset: 0x200
    DynArray_CareerContract* contracts; // Offset: 0x218 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x220
};

// Original name: ContractGeneratorHandler_Legacy
// Size: 0x1e8
// VTable: 0x149973ed0
struct ContractGeneratorHandler_Legacy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    ContractAvailability defaultAvailability; // Offset: 0x20
    ContractParamOverrides contractParams; // Offset: 0x78
    DynArray_ContractLegacy* legacyContracts; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1c0
};

// Original name: ContractGeneratorHandler_LinearSeries
// Size: 0x1e8
// VTable: 0x149973e10
struct ContractGeneratorHandler_LinearSeries {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    ContractAvailability defaultAvailability; // Offset: 0x20
    ContractParamOverrides contractParams; // Offset: 0x78
    DynArray_Contract* contracts; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1c0
};

// Original name: ContractGeneratorHandler_List
// Size: 0x1e8
// VTable: 0x149973e70
struct ContractGeneratorHandler_List {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    ContractAvailability defaultAvailability; // Offset: 0x20
    ContractParamOverrides contractParams; // Offset: 0x78
    DynArray_Contract* contracts; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1c0
};

// Original name: ContractGeneratorHandler_PVPBountyDef
// Size: 0x1f0
// VTable: 0x149973db8
struct ContractGeneratorHandler_PVPBountyDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    ContractAvailability defaultAvailability; // Offset: 0x20
    ContractParamOverrides contractParams; // Offset: 0x78
    DynArray_Contract* PVPBountyContract; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1c0
    bool escapedConvicts; // Offset: 0x1e8
    uint8_t _pad_4[0x7]; // Offset: 0x1e9
};

// Original name: ContractGeneratorHandler_ServiceBeacon
// Size: 0x1e8
// VTable: 0x149973d30
struct ContractGeneratorHandler_ServiceBeacon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    ContractAvailability defaultAvailability; // Offset: 0x20
    ContractParamOverrides contractParams; // Offset: 0x78
    DynArray_Contract* serviceBeaconContracts; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1c0
};

// Original name: ContractGeneratorHandler_TutorialSeriesDef
// Size: 0x1e8
// VTable: 0x149973e18
struct ContractGeneratorHandler_TutorialSeriesDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    ContractAvailability defaultAvailability; // Offset: 0x20
    ContractParamOverrides contractParams; // Offset: 0x78
    DynArray_Contract* contracts; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1c0
};

// Original name: ContractGiverSettings
// Size: 0x80
// VTable: 0x149973500
struct ContractGiverSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool lawfulMission; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    MissionGiver missionGiverRecord; // Offset: 0x10
    MissionBrokerEntry invitationMission; // Offset: 0x28
    DynArray_Tag* contractTags; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
    CryStringT* contractGiverFragmentTags; // Offset: 0x70
    uint8_t _pad_3[0x8]; // Offset: 0x78
};

// Original name: ContractLegacy
// Size: 0x270
// VTable: 0x149973c00
struct ContractLegacy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool notForRelease; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    CryStringT* debugName; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    ContractTemplate template_; /* template */ // Offset: 0x30
    ContractParamOverrides paramOverrides; // Offset: 0x48
    DynArray_SubContract* subContracts; // Offset: 0x188 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x190
    DynArray_ContractPrerequisiteBase* additionalPrerequisites; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x1c0
    ContractGenerationParamsBase generationParams; // Offset: 0x1e8
    ContractLifeTime contractLifeTime; // Offset: 0x1f8
    ContractResults contractResults; // Offset: 0x208
    MissionBrokerEntry missionBrokerEntry; // Offset: 0x258
};

// Original name: ContractParamOverrides
// Size: 0x140
// VTable: 0x149973950
struct ContractParamOverrides {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ContractStringParam* stringParamOverrides; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ContractBoolParam* boolParamOverrides; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_ContractIntParam* intParamOverrides; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_ContractPropertyTagReplacement* propertyTagReplacement; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_MissionProperty* propertyOverrides; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
    DynArray_BaseMissionModifier* modifierOverrides; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x100
    MissionType missionTypeOverride; // Offset: 0x128
};

// Original name: ContractPrerequisite_AreaTags
// Size: 0x78
// VTable: 0x149973018
struct ContractPrerequisite_AreaTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList requiredAreaTags; // Offset: 0x8
    TagList excludedAreaTags; // Offset: 0x40
};

// Original name: ContractPrerequisite_CompletedContractTags
// Size: 0x88
// VTable: 0x149972f30
struct ContractPrerequisite_CompletedContractTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList requiredCompletedContractTags; // Offset: 0x8
    int32_t requiredCountValue; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    TagList excludedCompletedContractTags; // Offset: 0x48
    int32_t excludedCountValue; // Offset: 0x80
    bool includePrerequisiteWhenSharing; // Offset: 0x84
    uint8_t _pad_2[0x3]; // Offset: 0x85
};

// Original name: ContractPrerequisite_CrimeStat
// Size: 0x30
// VTable: 0x149972d18
struct ContractPrerequisite_CrimeStat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Jurisdiction crimeStatJurisdictionOverride; // Offset: 0x8
    float minCrimeStat; // Offset: 0x20
    float maxCrimeStat; // Offset: 0x24
    bool includePrerequisiteWhenSharing; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
};

// Original name: ContractPrerequisite_Locality
// Size: 0x20
// VTable: 0x149972b30
struct ContractPrerequisite_Locality {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLocality localityAvailable; // Offset: 0x8
};

// Original name: ContractPrerequisite_Location
// Size: 0x20
// VTable: 0x149972b90
struct ContractPrerequisite_Location {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObject locationAvailable; // Offset: 0x8
};

// Original name: ContractPrerequisite_Reputation
// Size: 0x78
// VTable: 0x149972e38
struct ContractPrerequisite_Reputation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FactionReputation factionReputation; // Offset: 0x8
    SReputationScopeParams scope; // Offset: 0x20
    bool exclude; // Offset: 0x38
    uint8_t _pad_1[0x7]; // Offset: 0x39
    SReputationStandingParams minStanding; // Offset: 0x40
    SReputationStandingParams maxStanding; // Offset: 0x58
    bool includePrerequisiteWhenSharing; // Offset: 0x70
    uint8_t _pad_2[0x7]; // Offset: 0x71
};

// Original name: ContractPropertyTagReplacement
// Size: 0x38
// VTable: 0x149973808
struct ContractPropertyTagReplacement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag templateTag; // Offset: 0x8
    Tag replacementTag; // Offset: 0x20
};

// Original name: ContractResult_BadgeAward
// Size: 0x70
// VTable: 0x1499721b8
struct ContractResult_BadgeAward {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_MinCompletionTags* requiredCompletionTags; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    ARDataType badgeToAward; // Offset: 0x68
    uint8_t _pad_3[0x4]; // Offset: 0x6c
};

// Original name: ContractResult_CalculatedReputation
// Size: 0x68
// VTable: 0x149971ef8
struct ContractResult_CalculatedReputation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    FactionReputation factionReputation; // Offset: 0x38
    SReputationScopeParams reputationScope; // Offset: 0x50
};

// Original name: ContractResult_CompletionTag
// Size: 0x28
// VTable: 0x149972058
struct ContractResult_CompletionTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t count; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Tag tag; // Offset: 0x10
};

// Original name: ContractResult_CompletionTags
// Size: 0x68
// VTable: 0x1499720b0
struct ContractResult_CompletionTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ContractResult_CompletionTag* completionTags; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: ContractResult_Item
// Size: 0x108
// VTable: 0x149972528
struct ContractResult_Item {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    EntityClassDefinition entityClass; // Offset: 0x38
    int32_t amount; // Offset: 0x50
    bool sendToPlayerHomeLocation; // Offset: 0x54
    bool awardOnlyToMissionOwner; // Offset: 0x55
    uint8_t _pad_2[0x2]; // Offset: 0x56
    MissionProperty targetLocation; // Offset: 0x58
    RewardNotification notification; // Offset: 0x68
};

// Original name: ContractResult_LegacyReputation
// Size: 0x88
// VTable: 0x149971e70
struct ContractResult_LegacyReputation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SReputationAmountParams contractResultReputationAmounts; // Offset: 0x38
};

// Original name: ContractResult_Reward
// Size: 0x68
// VTable: 0x149971e10
struct ContractResult_Reward {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MissionReward contractReward; // Offset: 0x38
};

// Original name: ContractTemplate
// Size: 0x160
// VTable: 0x149971530
struct ContractTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DevOwner owner; // Offset: 0x10
    ContractClassBase contractClass; // Offset: 0x28
    ContractDisplayInfo contractDisplayInfo; // Offset: 0x38
    DynArray_BaseMissionModifier* modifiers; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_MissionProperty* contractProperties; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
    DynArray_ObjectiveToken* objectiveTokens; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xb0
    PartialContractRewards partialRewardPayout; // Offset: 0xd8
    MissionFlow missionFlow; // Offset: 0xe8
    ContractCommsNotification contractStartCommsNotification; // Offset: 0x120
    DynArray_ContractEndCommsNotification* contractEndCommsNotifications; // Offset: 0x130 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x138
};

// Original name: ControlFloatInteractiveVariable
// Size: 0x48
// VTable: 0x1499f7918
struct ControlFloatInteractiveVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    FloatInteractiveVariable variable; // Offset: 0x28
    bool useAnimationEffectiveSection; // Offset: 0x38
    uint8_t _pad_3[0x3]; // Offset: 0x39
    float amountToChange; // Offset: 0x3c
    float animationCycle; // Offset: 0x40
    uint8_t _pad_4[0x4]; // Offset: 0x44
};

// Original name: ControlHintCondition_ActorItemTypeAndTags
// Size: 0x88
// VTable: 0x149a66530
struct ControlHintCondition_ActorItemTypeAndTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    ARDataType subType; // Offset: 0xc
    TagList positiveTags; // Offset: 0x10
    TagList negativeTags; // Offset: 0x48
    ARDataType attachmentType; // Offset: 0x80
    uint8_t _pad_1[0x7]; // Offset: 0x81
};

// Original name: ControlHintCondition_ActorTags
// Size: 0x78
// VTable: 0x149a66618
struct ControlHintCondition_ActorTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList positiveTags; // Offset: 0x8
    TagList negativeTags; // Offset: 0x40
};

// Original name: ControlHintCondition_HintTrigger
// Size: 0x20
// VTable: 0x149a67150
struct ControlHintCondition_HintTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    HintTriggerData hintTrigger; // Offset: 0x8
};

// Original name: ControlHints_UsableLinkedInteractiveAction
// Size: 0x28
// VTable: 0x149a67640
struct ControlHints_UsableLinkedInteractiveAction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType activationMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Tag tag; // Offset: 0x10
};

// Original name: ControlledSubstanceClass
// Size: 0x70
// VTable: 0x14996f2f0
struct ControlledSubstanceClass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* commodities; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ResourceType* resources; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    float maxPossessionSCU; // Offset: 0x68
    uint8_t _pad_3[0x4]; // Offset: 0x6c
};

// Original name: ConversationNode_Dialogue
// Size: 0x38
// VTable: 0x149a8d028
struct ConversationNode_Dialogue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConversationNode_Base next; // Offset: 0x8
    DialogueContext context; // Offset: 0x18
    float skipNodeInXSecs; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
};

// Original name: CostModifierPerAgentType
// Size: 0x48
// VTable: 0x14997f948
struct CostModifierPerAgentType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType agentType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_TraversalCostConditionTags* traversalCostVariants; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    float defaultCostMultiplier; // Offset: 0x40
    bool blocksTraversability; // Offset: 0x44
    uint8_t _pad_3[0x3]; // Offset: 0x45
};

// Original name: CounterMeasureProjectileParams
// Size: 0xb8
// VTable: 0x1499cf0a0
struct CounterMeasureProjectileParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ProjectileDetonationParams detonationParams; // Offset: 0x8
    ProjectileProximityTriggerParams proximityTriggerParams; // Offset: 0x18
    CounterMeasureBaseParams typeParams; // Offset: 0x28
    GlobalResourceAudio trailStartAudioTrigger; // Offset: 0x38
    GlobalResourceAudio trailStopAudioTrigger; // Offset: 0x58
    GlobalResourceAudio explosionStartAudioTrigger; // Offset: 0x78
    GlobalResourceAudio explosionStopAudioTrigger; // Offset: 0x98
};

// Original name: CraftingCost_Item
// Size: 0x28
// VTable: 0x1499b8358
struct CraftingCost_Item {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    int32_t quantity; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: CraftingCost_Resource
// Size: 0x30
// VTable: 0x1499b82d8
struct CraftingCost_Resource {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resource; // Offset: 0x8
    SBaseCargoUnit quantity; // Offset: 0x20
};

// Original name: CraftingResult_Item
// Size: 0x28
// VTable: 0x1499b85b0
struct CraftingResult_Item {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    int32_t quantity; // Offset: 0x20
    int32_t tier; // Offset: 0x24
};

// Original name: CraftingResult_Resource
// Size: 0x30
// VTable: 0x1499b8638
struct CraftingResult_Resource {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resource; // Offset: 0x8
    SBaseCargoUnit quantity; // Offset: 0x20
};

// Original name: CrewData
// Size: 0x100
// VTable: 0x1499ba6a0
struct CrewData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClassDefinition; // Offset: 0x8
    DynArray_Tag* outfitTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    DynArray_Tag* tags; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
    TagsDNF dnfTags; // Offset: 0x80
    UseChannelArchetype archetype; // Offset: 0xe8
};

// Original name: CrewManifest
// Size: 0x70
// VTable: 0x1499ba728
struct CrewManifest {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList descriptionTags; // Offset: 0x8
    DynArray_CrewData* crew; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x48
};

// Original name: CustomScanProcedureParams
// Size: 0x60
// VTable: 0x1499c7600
struct CustomScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    DynArray_ScanCustomData* customDatas; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
};

// Original name: DataSetMatchCondition_PropertyTags
// Size: 0x58
// VTable: 0x1499699e0
struct DataSetMatchCondition_PropertyTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionProperty searchProperty; // Offset: 0x8
    ARDataType propertyTagType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_Tag* tagFilters; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    ARDataType targetTagType; // Offset: 0x50
    bool searchForAnyTag; // Offset: 0x54
    uint8_t _pad_3[0x3]; // Offset: 0x55
};

// Original name: DataSetMatchCondition_SpecificItemsDef
// Size: 0x38
// VTable: 0x149969ba0
struct DataSetMatchCondition_SpecificItemsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionItem* items; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DataSetMatchCondition_SpecificOrganizationsDef
// Size: 0x38
// VTable: 0x149969c00
struct DataSetMatchCondition_SpecificOrganizationsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionOrganization* organizations; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DataSetMatchCondition_TagSearch
// Size: 0x40
// VTable: 0x1499698e8
struct DataSetMatchCondition_TagSearch {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TagSearchTerm* tagSearch; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ARDataType tagType; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: DeathScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7ac0
struct DeathScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: DebugLoadoutKit
// Size: 0x38
// VTable: 0x1499b11a8
struct DebugLoadoutKit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    LoadoutKit loadoutKit; // Offset: 0x20
};

// Original name: DefaultActionsEntityEntryCondition_Tags
// Size: 0x48
// VTable: 0x149a8be08
struct DefaultActionsEntityEntryCondition_Tags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool hasTags; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    TagList tags; // Offset: 0x10
};

// Original name: DefaultActionsEntityState_InteractionStateMachineStateTag
// Size: 0x20
// VTable: 0x149a8c070
struct DefaultActionsEntityState_InteractionStateMachineStateTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag interactionStateMachineStateTag; // Offset: 0x8
};

// Original name: DefaultPlayerLoadoutEntitlementParams
// Size: 0x30
// VTable: 0x1499b0f98
struct DefaultPlayerLoadoutEntitlementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    uint32_t LoadoutId; // Offset: 0x18
    ARDataType Entitlement; // Offset: 0x1c
    SItemPortLoadoutBaseParams Loadout; // Offset: 0x20
};

// Original name: DefaultPlayerLoadoutEntitlementRecord
// Size: 0x38
// VTable: 0x1499b0ff0
struct DefaultPlayerLoadoutEntitlementRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DefaultPlayerLoadoutEntitlementParams* Loadouts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DeliveryLockerComponentParams
// Size: 0x108
// VTable: 0x14996c3f8
struct DeliveryLockerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams placeInteraction; // Offset: 0x18
    SSharedInteractionParams pickupInteraction; // Offset: 0x28
    SSharedInteractionParams dropOffInteraction; // Offset: 0x38
    SSharedInteractionParams pickUpApprovedInteraction; // Offset: 0x48
    SSharedInteractionParams failedPickUpInteraction; // Offset: 0x58
    SSharedInteractionParams pickedUpItemInteraction; // Offset: 0x68
    SSharedInteractionParams dropOffApprovedInteraction; // Offset: 0x78
    SSharedInteractionParams droppedOffItemInteraction; // Offset: 0x88
    SSharedInteractionParams correctItemInteraction; // Offset: 0x98
    SSharedInteractionParams wrongItemInteraction; // Offset: 0xa8
    SSharedInteractionParams wrongItemPickUpInteraction; // Offset: 0xb8
    SSharedInteractionParams failedDropOffInteraction; // Offset: 0xc8
    SInteractionState failedRequestState; // Offset: 0xd8
    float spawnTimeOutSeconds; // Offset: 0xe8
    float requestProcessSeconds; // Offset: 0xec
    float waitForPickupSeconds; // Offset: 0xf0
    float finishedPickupSeconds; // Offset: 0xf4
    float despawnFailedPickupSeconds; // Offset: 0xf8
    float waitForDropOffSeconds; // Offset: 0xfc
    float dropOffShutterDelaySeconds; // Offset: 0x100
    uint8_t _pad_1[0x4]; // Offset: 0x104
};

// Original name: DeliveryTarget
// Size: 0x60
// VTable: 0x14996e060
struct DeliveryTarget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    TagList requiredLocationEntityTags; // Offset: 0x10
    Tag locationSearchTag; // Offset: 0x48
};

// Original name: DependentMissionProperty
// Size: 0x48
// VTable: 0x1499691a8
struct DependentMissionProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionProperty property; // Offset: 0x8
    DynArray_BaseMissionPropertyValueOption* values; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: DescriptionScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7ac8
struct DescriptionScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: DialogueContext
// Size: 0xe0
// VTable: 0x149a8ca08
struct DialogueContext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Character speaker; // Offset: 0x8
    CLocIdentifier* localizedSubtitleText; // Offset: 0x20
    CryStringT* tempText; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    GlobalResourceAudio audioTrigger; // Offset: 0x38
    GlobalResourceAudio femaleAudioTrigger; // Offset: 0x58
    bool forceSubtitles; // Offset: 0x78
    uint8_t _pad_2[0x7]; // Offset: 0x79
    DynArray_DialogueContent* contents; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x88
    DynArray_Tag* tags; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xb8
};

// Original name: DialogueContextBank
// Size: 0xa8
// VTable: 0x149a8cb00
struct DialogueContextBank {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DialogueRealm realm; // Offset: 0x8
    Character character; // Offset: 0x20
    GlobalResourceAudio defaultTrigger; // Offset: 0x38
    GlobalResourceAudio defaultFemaleTrigger; // Offset: 0x58
    DynArray_DialogueContext* contexts; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x80
};

// Original name: DialogueContextEmbeddedEntry
// Size: 0x20
// VTable: 0x149a8cb60
struct DialogueContextEmbeddedEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DialogueContext dialogueContext; // Offset: 0x8
};

// Original name: DialogueContextReferenceEntry
// Size: 0x20
// VTable: 0x149a8cbc0
struct DialogueContextReferenceEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DialogueContext dialogueContext; // Offset: 0x8
};

// Original name: DigitalSignageComponentParams
// Size: 0x60
// VTable: 0x149966190
struct DigitalSignageComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Tag signageAspectRatio; // Offset: 0x18
    Tag signageType; // Offset: 0x30
    BuildingBlocks_Canvas defaultCanvas; // Offset: 0x48
};

// Original name: DigitalSignageContent
// Size: 0x38
// VTable: 0x149966088
struct DigitalSignageContent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag contentAspectRatio; // Offset: 0x8
    BuildingBlocks_Canvas canvas; // Offset: 0x20
};

// Original name: DigitalSignageContentSet
// Size: 0x38
// VTable: 0x1499660e0
struct DigitalSignageContentSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DigitalSignageContent* content; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DoorLockStates
// Size: 0x28
// VTable: 0x1499c1ac8
struct DoorLockStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState locked; // Offset: 0x8
    SInteractionState unlocked; // Offset: 0x18
};

// Original name: DoorOpenStates
// Size: 0x48
// VTable: 0x1499c1a48
struct DoorOpenStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState opened; // Offset: 0x8
    SInteractionState closed; // Offset: 0x18
    SInteractionState opening; // Offset: 0x28
    SInteractionState closing; // Offset: 0x38
};

// Original name: DoorScanProcedureParams
// Size: 0x68
// VTable: 0x1499c7c10
struct DoorScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    CLocIdentifier* displayUnknown; // Offset: 0x30
    CLocIdentifier* displayForOpen; // Offset: 0x38
    CLocIdentifier* displayForOpening; // Offset: 0x40
    CLocIdentifier* displayForClosed; // Offset: 0x48
    CLocIdentifier* displayForClosing; // Offset: 0x50
    CLocIdentifier* displayForLocked; // Offset: 0x58
    CLocIdentifier* displayForUnlocked; // Offset: 0x60
};

// Original name: DoorStateModifier
// Size: 0x28
// VTable: 0x1499c1b48
struct DoorStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DoorOpenStates openStates; // Offset: 0x8
    DoorLockStates lockStates; // Offset: 0x18
};

// Original name: DriverScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7a10
struct DriverScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: DynArray_AIWave
// Generated DynArray for base type: AIWave
// Size: 0x8
struct DynArray_AIWave {
    AIWave* m_data; // Offset: 0x0
};

// Original name: DynArray_AIWaveMember
// Generated DynArray for base type: AIWaveMember
// Size: 0x8
struct DynArray_AIWaveMember {
    AIWaveMember* m_data; // Offset: 0x0
};

// Original name: DynArray_AfterActionReportReputationImpact
// Generated DynArray for base type: AfterActionReportReputationImpact
// Size: 0x8
struct DynArray_AfterActionReportReputationImpact {
    AfterActionReportReputationImpact* m_data; // Offset: 0x0
};

// Original name: DynArray_AggregateStateParams
// Generated DynArray for base type: AggregateStateParams
// Size: 0x8
struct DynArray_AggregateStateParams {
    AggregateStateParams* m_data; // Offset: 0x0
};

// Original name: DynArray_AlignmentSlotBase
// Generated DynArray for base type: AlignmentSlotBase
// Size: 0x8
struct DynArray_AlignmentSlotBase {
    AlignmentSlotBase* m_data; // Offset: 0x0
};

// Original name: DynArray_AlignmentSlotExclusivityGroup
// Generated DynArray for base type: AlignmentSlotExclusivityGroup
// Size: 0x8
struct DynArray_AlignmentSlotExclusivityGroup {
    AlignmentSlotExclusivityGroup* m_data; // Offset: 0x0
};

// Original name: DynArray_ArmouryCertificationParams
// Generated DynArray for base type: ArmouryCertificationParams
// Size: 0x8
struct DynArray_ArmouryCertificationParams {
    ArmouryCertificationParams* m_data; // Offset: 0x0
};

// Original name: DynArray_ArmouryItem
// Generated DynArray for base type: ArmouryItem
// Size: 0x8
struct DynArray_ArmouryItem {
    ArmouryItem* m_data; // Offset: 0x0
};

// Original name: DynArray_ArmouryItemCategory
// Generated DynArray for base type: ArmouryItemCategory
// Size: 0x8
struct DynArray_ArmouryItemCategory {
    ArmouryItemCategory* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioBreathStyleTransitionNode
// Generated DynArray for base type: AudioBreathStyleTransitionNode
// Size: 0x8
struct DynArray_AudioBreathStyleTransitionNode {
    AudioBreathStyleTransitionNode* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioEnvironmentFeedbackTagAndEvent
// Generated DynArray for base type: AudioEnvironmentFeedbackTagAndEvent
// Size: 0x8
struct DynArray_AudioEnvironmentFeedbackTagAndEvent {
    AudioEnvironmentFeedbackTagAndEvent* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioEnvironmentFeedbackZoneProcess
// Generated DynArray for base type: AudioEnvironmentFeedbackZoneProcess
// Size: 0x8
struct DynArray_AudioEnvironmentFeedbackZoneProcess {
    AudioEnvironmentFeedbackZoneProcess* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioGameContext
// Generated DynArray for base type: AudioGameContext
// Size: 0x8
struct DynArray_AudioGameContext {
    AudioGameContext* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioOneShotManagerBudgetEntry
// Generated DynArray for base type: AudioOneShotManagerBudgetEntry
// Size: 0x8
struct DynArray_AudioOneShotManagerBudgetEntry {
    AudioOneShotManagerBudgetEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_AutoSpawnSettings
// Generated DynArray for base type: AutoSpawnSettings
// Size: 0x8
struct DynArray_AutoSpawnSettings {
    AutoSpawnSettings* m_data; // Offset: 0x0
};

// Original name: DynArray_BaseMissionPropertyValueOption
// Generated DynArray for base type: BaseMissionPropertyValueOption
// Size: 0x8
struct DynArray_BaseMissionPropertyValueOption {
    BaseMissionPropertyValueOption* m_data; // Offset: 0x0
};

// Original name: DynArray_BindingsOperations_IntegerStringCanvasPair
// Generated DynArray for base type: BindingsOperations_IntegerStringCanvasPair
// Size: 0x8
struct DynArray_BindingsOperations_IntegerStringCanvasPair {
    BindingsOperations_IntegerStringCanvasPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BoidState
// Generated DynArray for base type: BoidState
// Size: 0x8
struct DynArray_BoidState {
    BoidState* m_data; // Offset: 0x0
};

// Original name: DynArray_BoidTransition
// Generated DynArray for base type: BoidTransition
// Size: 0x8
struct DynArray_BoidTransition {
    BoidTransition* m_data; // Offset: 0x0
};

// Original name: DynArray_BoidsGroupComposition
// Generated DynArray for base type: BoidsGroupComposition
// Size: 0x8
struct DynArray_BoidsGroupComposition {
    BoidsGroupComposition* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocksLayer
// Generated DynArray for base type: BuildingBlocksLayer
// Size: 0x8
struct DynArray_BuildingBlocksLayer {
    BuildingBlocksLayer* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocksView
// Generated DynArray for base type: BuildingBlocksView
// Size: 0x8
struct DynArray_BuildingBlocksView {
    BuildingBlocksView* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_AspectRatioOption
// Generated DynArray for base type: BuildingBlocks_AspectRatioOption
// Size: 0x8
struct DynArray_BuildingBlocks_AspectRatioOption {
    BuildingBlocks_AspectRatioOption* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_Canvas
// Generated DynArray for base type: BuildingBlocks_Canvas
// Size: 0x8
struct DynArray_BuildingBlocks_Canvas {
    BuildingBlocks_Canvas* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_ColorPicker
// Generated DynArray for base type: BuildingBlocks_ColorPicker
// Size: 0x8
struct DynArray_BuildingBlocks_ColorPicker {
    BuildingBlocks_ColorPicker* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_FieldModifierPair
// Generated DynArray for base type: BuildingBlocks_FieldModifierPair
// Size: 0x8
struct DynArray_BuildingBlocks_FieldModifierPair {
    BuildingBlocks_FieldModifierPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_IntegerTagPair
// Generated DynArray for base type: BuildingBlocks_IntegerTagPair
// Size: 0x8
struct DynArray_BuildingBlocks_IntegerTagPair {
    BuildingBlocks_IntegerTagPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_IntegerWidgetPairDef
// Generated DynArray for base type: BuildingBlocks_IntegerWidgetPairDef
// Size: 0x8
struct DynArray_BuildingBlocks_IntegerWidgetPairDef {
    BuildingBlocks_IntegerWidgetPairDef* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_NumberTagPair
// Generated DynArray for base type: BuildingBlocks_NumberTagPair
// Size: 0x8
struct DynArray_BuildingBlocks_NumberTagPair {
    BuildingBlocks_NumberTagPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_StringTagPair
// Generated DynArray for base type: BuildingBlocks_StringTagPair
// Size: 0x8
struct DynArray_BuildingBlocks_StringTagPair {
    BuildingBlocks_StringTagPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_TagIntegerPair
// Generated DynArray for base type: BuildingBlocks_TagIntegerPair
// Size: 0x8
struct DynArray_BuildingBlocks_TagIntegerPair {
    BuildingBlocks_TagIntegerPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_TagStringPair
// Generated DynArray for base type: BuildingBlocks_TagStringPair
// Size: 0x8
struct DynArray_BuildingBlocks_TagStringPair {
    BuildingBlocks_TagStringPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_WidgetBase
// Generated DynArray for base type: BuildingBlocks_WidgetBase
// Size: 0x8
struct DynArray_BuildingBlocks_WidgetBase {
    BuildingBlocks_WidgetBase* m_data; // Offset: 0x0
};

// Original name: DynArray_CareerContract
// Generated DynArray for base type: CareerContract
// Size: 0x8
struct DynArray_CareerContract {
    CareerContract* m_data; // Offset: 0x0
};

// Original name: DynArray_CargoManifest
// Generated DynArray for base type: CargoManifest
// Size: 0x8
struct DynArray_CargoManifest {
    CargoManifest* m_data; // Offset: 0x0
};

// Original name: DynArray_CargoResource
// Generated DynArray for base type: CargoResource
// Size: 0x8
struct DynArray_CargoResource {
    CargoResource* m_data; // Offset: 0x0
};

// Original name: DynArray_CargoResourceAllocation
// Generated DynArray for base type: CargoResourceAllocation
// Size: 0x8
struct DynArray_CargoResourceAllocation {
    CargoResourceAllocation* m_data; // Offset: 0x0
};

// Original name: DynArray_CargoResourceDistribution
// Generated DynArray for base type: CargoResourceDistribution
// Size: 0x8
struct DynArray_CargoResourceDistribution {
    CargoResourceDistribution* m_data; // Offset: 0x0
};

// Original name: DynArray_ChildMissionPhase
// Generated DynArray for base type: ChildMissionPhase
// Size: 0x8
struct DynArray_ChildMissionPhase {
    ChildMissionPhase* m_data; // Offset: 0x0
};

// Original name: DynArray_CommoditySubtype
// Generated DynArray for base type: CommoditySubtype
// Size: 0x8
struct DynArray_CommoditySubtype {
    CommoditySubtype* m_data; // Offset: 0x0
};

// Original name: DynArray_CommunicationChannel
// Generated DynArray for base type: CommunicationChannel
// Size: 0x8
struct DynArray_CommunicationChannel {
    CommunicationChannel* m_data; // Offset: 0x0
};

// Original name: DynArray_CommunicationConfig
// Generated DynArray for base type: CommunicationConfig
// Size: 0x8
struct DynArray_CommunicationConfig {
    CommunicationConfig* m_data; // Offset: 0x0
};

// Original name: DynArray_CommunicationEntry
// Generated DynArray for base type: CommunicationEntry
// Size: 0x8
struct DynArray_CommunicationEntry {
    CommunicationEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_CommunicationLocationAutoTags
// Generated DynArray for base type: CommunicationLocationAutoTags
// Size: 0x8
struct DynArray_CommunicationLocationAutoTags {
    CommunicationLocationAutoTags* m_data; // Offset: 0x0
};

// Original name: DynArray_CommunicationVariation
// Generated DynArray for base type: CommunicationVariation
// Size: 0x8
struct DynArray_CommunicationVariation {
    CommunicationVariation* m_data; // Offset: 0x0
};

// Original name: DynArray_Contract
// Generated DynArray for base type: Contract
// Size: 0x8
struct DynArray_Contract {
    Contract* m_data; // Offset: 0x0
};

// Original name: DynArray_ContractGeneratorHandlerBase
// Generated DynArray for base type: ContractGeneratorHandlerBase
// Size: 0x8
struct DynArray_ContractGeneratorHandlerBase {
    ContractGeneratorHandlerBase* m_data; // Offset: 0x0
};

// Original name: DynArray_ContractLegacy
// Generated DynArray for base type: ContractLegacy
// Size: 0x8
struct DynArray_ContractLegacy {
    ContractLegacy* m_data; // Offset: 0x0
};

// Original name: DynArray_ContractPropertyTagReplacement
// Generated DynArray for base type: ContractPropertyTagReplacement
// Size: 0x8
struct DynArray_ContractPropertyTagReplacement {
    ContractPropertyTagReplacement* m_data; // Offset: 0x0
};

// Original name: DynArray_ContractResult_CompletionTag
// Generated DynArray for base type: ContractResult_CompletionTag
// Size: 0x8
struct DynArray_ContractResult_CompletionTag {
    ContractResult_CompletionTag* m_data; // Offset: 0x0
};

// Original name: DynArray_ContractTemplate
// Generated DynArray for base type: ContractTemplate
// Size: 0x8
struct DynArray_ContractTemplate {
    ContractTemplate* m_data; // Offset: 0x0
};

// Original name: DynArray_ControlFloatInteractiveVariable
// Generated DynArray for base type: ControlFloatInteractiveVariable
// Size: 0x8
struct DynArray_ControlFloatInteractiveVariable {
    ControlFloatInteractiveVariable* m_data; // Offset: 0x0
};

// Original name: DynArray_ControlledSubstanceClass
// Generated DynArray for base type: ControlledSubstanceClass
// Size: 0x8
struct DynArray_ControlledSubstanceClass {
    ControlledSubstanceClass* m_data; // Offset: 0x0
};

// Original name: DynArray_CostModifierPerAgentType
// Generated DynArray for base type: CostModifierPerAgentType
// Size: 0x8
struct DynArray_CostModifierPerAgentType {
    CostModifierPerAgentType* m_data; // Offset: 0x0
};

// Original name: DynArray_CrewData
// Generated DynArray for base type: CrewData
// Size: 0x8
struct DynArray_CrewData {
    CrewData* m_data; // Offset: 0x0
};

// Original name: DynArray_CustomScanProcedureParams
// Generated DynArray for base type: CustomScanProcedureParams
// Size: 0x8
struct DynArray_CustomScanProcedureParams {
    CustomScanProcedureParams* m_data; // Offset: 0x0
};

// Original name: DynArray_DebugLoadoutKit
// Generated DynArray for base type: DebugLoadoutKit
// Size: 0x8
struct DynArray_DebugLoadoutKit {
    DebugLoadoutKit* m_data; // Offset: 0x0
};

// Original name: DynArray_DefaultPlayerLoadoutEntitlementParams
// Generated DynArray for base type: DefaultPlayerLoadoutEntitlementParams
// Size: 0x8
struct DynArray_DefaultPlayerLoadoutEntitlementParams {
    DefaultPlayerLoadoutEntitlementParams* m_data; // Offset: 0x0
};

// Original name: DynArray_DeliveryTarget
// Generated DynArray for base type: DeliveryTarget
// Size: 0x8
struct DynArray_DeliveryTarget {
    DeliveryTarget* m_data; // Offset: 0x0
};

// Original name: DynArray_DependentMissionProperty
// Generated DynArray for base type: DependentMissionProperty
// Size: 0x8
struct DynArray_DependentMissionProperty {
    DependentMissionProperty* m_data; // Offset: 0x0
};

// Original name: DynArray_DialogueContext
// Generated DynArray for base type: DialogueContext
// Size: 0x8
struct DynArray_DialogueContext {
    DialogueContext* m_data; // Offset: 0x0
};

// Original name: DynArray_DigitalSignageContent
// Generated DynArray for base type: DigitalSignageContent
// Size: 0x8
struct DynArray_DigitalSignageContent {
    DigitalSignageContent* m_data; // Offset: 0x0
};

// Original name: DynArray_DynamicMissionLocation
// Generated DynArray for base type: DynamicMissionLocation
// Size: 0x8
struct DynArray_DynamicMissionLocation {
    DynamicMissionLocation* m_data; // Offset: 0x0
};

// Original name: DynArray_EAFactionTeamParams
// Generated DynArray for base type: EAFactionTeamParams
// Size: 0x8
struct DynArray_EAFactionTeamParams {
    EAFactionTeamParams* m_data; // Offset: 0x0
};

// Original name: DynArray_EAObjectiveInteractionDef
// Generated DynArray for base type: EAObjectiveInteractionDef
// Size: 0x8
struct DynArray_EAObjectiveInteractionDef {
    EAObjectiveInteractionDef* m_data; // Offset: 0x0
};

// Original name: DynArray_EVAConnection
// Generated DynArray for base type: EVAConnection
// Size: 0x8
struct DynArray_EVAConnection {
    EVAConnection* m_data; // Offset: 0x0
};

// Original name: DynArray_EVAState
// Generated DynArray for base type: EVAState
// Size: 0x8
struct DynArray_EVAState {
    EVAState* m_data; // Offset: 0x0
};

// Original name: DynArray_EntitityEffectSystem_StaticColor
// Generated DynArray for base type: EntitityEffectSystem_StaticColor
// Size: 0x8
struct DynArray_EntitityEffectSystem_StaticColor {
    EntitityEffectSystem_StaticColor* m_data; // Offset: 0x0
};

// Original name: DynArray_EntitityEffectSystem_StaticFloat
// Generated DynArray for base type: EntitityEffectSystem_StaticFloat
// Size: 0x8
struct DynArray_EntitityEffectSystem_StaticFloat {
    EntitityEffectSystem_StaticFloat* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityClassDefinition
// Generated DynArray for base type: EntityClassDefinition
// Size: 0x8
struct DynArray_EntityClassDefinition {
    EntityClassDefinition* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityComponentEffects_Test_ColorLink
// Generated DynArray for base type: EntityComponentEffects_Test_ColorLink
// Size: 0x8
struct DynArray_EntityComponentEffects_Test_ColorLink {
    EntityComponentEffects_Test_ColorLink* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityComponentEffects_Test_Link
// Generated DynArray for base type: EntityComponentEffects_Test_Link
// Size: 0x8
struct DynArray_EntityComponentEffects_Test_Link {
    EntityComponentEffects_Test_Link* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityComponentEffects_Test_Tag
// Generated DynArray for base type: EntityComponentEffects_Test_Tag
// Size: 0x8
struct DynArray_EntityComponentEffects_Test_Tag {
    EntityComponentEffects_Test_Tag* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityComponentEffects_Test_Trigger
// Generated DynArray for base type: EntityComponentEffects_Test_Trigger
// Size: 0x8
struct DynArray_EntityComponentEffects_Test_Trigger {
    EntityComponentEffects_Test_Trigger* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityEffectSystem_LightPropertyLink
// Generated DynArray for base type: EntityEffectSystem_LightPropertyLink
// Size: 0x8
struct DynArray_EntityEffectSystem_LightPropertyLink {
    EntityEffectSystem_LightPropertyLink* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityEffectSystem_LightTagEffect
// Generated DynArray for base type: EntityEffectSystem_LightTagEffect
// Size: 0x8
struct DynArray_EntityEffectSystem_LightTagEffect {
    EntityEffectSystem_LightTagEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityEffectSystem_LightTriggerEffect
// Generated DynArray for base type: EntityEffectSystem_LightTriggerEffect
// Size: 0x8
struct DynArray_EntityEffectSystem_LightTriggerEffect {
    EntityEffectSystem_LightTriggerEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityEffectSystem_MaterialPropertyLink
// Generated DynArray for base type: EntityEffectSystem_MaterialPropertyLink
// Size: 0x8
struct DynArray_EntityEffectSystem_MaterialPropertyLink {
    EntityEffectSystem_MaterialPropertyLink* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityEffectSystem_MaterialTagEffect
// Generated DynArray for base type: EntityEffectSystem_MaterialTagEffect
// Size: 0x8
struct DynArray_EntityEffectSystem_MaterialTagEffect {
    EntityEffectSystem_MaterialTagEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityEffectSystem_MaterialTriggerEffect
// Generated DynArray for base type: EntityEffectSystem_MaterialTriggerEffect
// Size: 0x8
struct DynArray_EntityEffectSystem_MaterialTriggerEffect {
    EntityEffectSystem_MaterialTriggerEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityTemperatureResourceHeatGeneration
// Generated DynArray for base type: EntityTemperatureResourceHeatGeneration
// Size: 0x8
struct DynArray_EntityTemperatureResourceHeatGeneration {
    EntityTemperatureResourceHeatGeneration* m_data; // Offset: 0x0
};

// Original name: DynArray_EnvironmentFeedbackAudioObject
// Generated DynArray for base type: EnvironmentFeedbackAudioObject
// Size: 0x8
struct DynArray_EnvironmentFeedbackAudioObject {
    EnvironmentFeedbackAudioObject* m_data; // Offset: 0x0
};

// Original name: DynArray_ExtendedNameData
// Generated DynArray for base type: ExtendedNameData
// Size: 0x8
struct DynArray_ExtendedNameData {
    ExtendedNameData* m_data; // Offset: 0x0
};

// Original name: DynArray_ExtendedNameEntry
// Generated DynArray for base type: ExtendedNameEntry
// Size: 0x8
struct DynArray_ExtendedNameEntry {
    ExtendedNameEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_Faction
// Generated DynArray for base type: Faction
// Size: 0x8
struct DynArray_Faction {
    Faction* m_data; // Offset: 0x0
};

// Original name: DynArray_FactionRelationship
// Generated DynArray for base type: FactionRelationship
// Size: 0x8
struct DynArray_FactionRelationship {
    FactionRelationship* m_data; // Offset: 0x0
};

// Original name: DynArray_FactionReputation
// Generated DynArray for base type: FactionReputation
// Size: 0x8
struct DynArray_FactionReputation {
    FactionReputation* m_data; // Offset: 0x0
};

// Original name: DynArray_FiringRangeWeaponItem
// Generated DynArray for base type: FiringRangeWeaponItem
// Size: 0x8
struct DynArray_FiringRangeWeaponItem {
    FiringRangeWeaponItem* m_data; // Offset: 0x0
};

// Original name: DynArray_FloatInteractiveVariable
// Generated DynArray for base type: FloatInteractiveVariable
// Size: 0x8
struct DynArray_FloatInteractiveVariable {
    FloatInteractiveVariable* m_data; // Offset: 0x0
};

// Original name: DynArray_Formation
// Generated DynArray for base type: Formation
// Size: 0x8
struct DynArray_Formation {
    Formation* m_data; // Offset: 0x0
};

// Original name: DynArray_FormationOffset
// Generated DynArray for base type: FormationOffset
// Size: 0x8
struct DynArray_FormationOffset {
    FormationOffset* m_data; // Offset: 0x0
};

// Original name: DynArray_FrontendS42Scenario
// Generated DynArray for base type: FrontendS42Scenario
// Size: 0x8
struct DynArray_FrontendS42Scenario {
    FrontendS42Scenario* m_data; // Offset: 0x0
};

// Original name: DynArray_GameMode
// Generated DynArray for base type: GameMode
// Size: 0x8
struct DynArray_GameMode {
    GameMode* m_data; // Offset: 0x0
};

// Original name: DynArray_GameModeValidMap
// Generated DynArray for base type: GameModeValidMap
// Size: 0x8
struct DynArray_GameModeValidMap {
    GameModeValidMap* m_data; // Offset: 0x0
};

// Original name: DynArray_Grip
// Generated DynArray for base type: Grip
// Size: 0x8
struct DynArray_Grip {
    Grip* m_data; // Offset: 0x0
};

// Original name: DynArray_HandholdInteractionPointLink
// Generated DynArray for base type: HandholdInteractionPointLink
// Size: 0x8
struct DynArray_HandholdInteractionPointLink {
    HandholdInteractionPointLink* m_data; // Offset: 0x0
};

// Original name: DynArray_HandholdSharedInteractionLink
// Generated DynArray for base type: HandholdSharedInteractionLink
// Size: 0x8
struct DynArray_HandholdSharedInteractionLink {
    HandholdSharedInteractionLink* m_data; // Offset: 0x0
};

// Original name: DynArray_HarvestableAreaPreset
// Generated DynArray for base type: HarvestableAreaPreset
// Size: 0x8
struct DynArray_HarvestableAreaPreset {
    HarvestableAreaPreset* m_data; // Offset: 0x0
};

// Original name: DynArray_HarvestableElement
// Generated DynArray for base type: HarvestableElement
// Size: 0x8
struct DynArray_HarvestableElement {
    HarvestableElement* m_data; // Offset: 0x0
};

// Original name: DynArray_HarvestableElementGroup
// Generated DynArray for base type: HarvestableElementGroup
// Size: 0x8
struct DynArray_HarvestableElementGroup {
    HarvestableElementGroup* m_data; // Offset: 0x0
};

// Original name: DynArray_HarvestableElementModifier
// Generated DynArray for base type: HarvestableElementModifier
// Size: 0x8
struct DynArray_HarvestableElementModifier {
    HarvestableElementModifier* m_data; // Offset: 0x0
};

// Original name: DynArray_HarvestableGeometry
// Generated DynArray for base type: HarvestableGeometry
// Size: 0x8
struct DynArray_HarvestableGeometry {
    HarvestableGeometry* m_data; // Offset: 0x0
};

// Original name: DynArray_HealthDamageState
// Generated DynArray for base type: HealthDamageState
// Size: 0x8
struct DynArray_HealthDamageState {
    HealthDamageState* m_data; // Offset: 0x0
};

// Original name: DynArray_InstancedInteriorLocationParams
// Generated DynArray for base type: InstancedInteriorLocationParams
// Size: 0x8
struct DynArray_InstancedInteriorLocationParams {
    InstancedInteriorLocationParams* m_data; // Offset: 0x0
};

// Original name: DynArray_InteractionConditionParams
// Generated DynArray for base type: InteractionConditionParams
// Size: 0x8
struct DynArray_InteractionConditionParams {
    InteractionConditionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_InteractionConditionPreset
// Generated DynArray for base type: InteractionConditionPreset
// Size: 0x8
struct DynArray_InteractionConditionPreset {
    InteractionConditionPreset* m_data; // Offset: 0x0
};

// Original name: DynArray_InteractionProhibitedItemParams
// Generated DynArray for base type: InteractionProhibitedItemParams
// Size: 0x8
struct DynArray_InteractionProhibitedItemParams {
    InteractionProhibitedItemParams* m_data; // Offset: 0x0
};

// Original name: DynArray_InventoryContainerParams
// Generated DynArray for base type: InventoryContainerParams
// Size: 0x8
struct DynArray_InventoryContainerParams {
    InventoryContainerParams* m_data; // Offset: 0x0
};

// Original name: DynArray_InventoryDropDetachRules
// Generated DynArray for base type: InventoryDropDetachRules
// Size: 0x8
struct DynArray_InventoryDropDetachRules {
    InventoryDropDetachRules* m_data; // Offset: 0x0
};

// Original name: DynArray_InventoryInteractionBlockingAttachedEntities
// Generated DynArray for base type: InventoryInteractionBlockingAttachedEntities
// Size: 0x8
struct DynArray_InventoryInteractionBlockingAttachedEntities {
    InventoryInteractionBlockingAttachedEntities* m_data; // Offset: 0x0
};

// Original name: DynArray_InventoryLocation
// Generated DynArray for base type: InventoryLocation
// Size: 0x8
struct DynArray_InventoryLocation {
    InventoryLocation* m_data; // Offset: 0x0
};

// Original name: DynArray_Investigation_ClueItem
// Generated DynArray for base type: Investigation_ClueItem
// Size: 0x8
struct DynArray_Investigation_ClueItem {
    Investigation_ClueItem* m_data; // Offset: 0x0
};

// Original name: DynArray_Investigation_Location
// Generated DynArray for base type: Investigation_Location
// Size: 0x8
struct DynArray_Investigation_Location {
    Investigation_Location* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemCategory
// Generated DynArray for base type: ItemCategory
// Size: 0x8
struct DynArray_ItemCategory {
    ItemCategory* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemPortTagsElement
// Generated DynArray for base type: ItemPortTagsElement
// Size: 0x8
struct DynArray_ItemPortTagsElement {
    ItemPortTagsElement* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemResourceCompositionMap
// Generated DynArray for base type: ItemResourceCompositionMap
// Size: 0x8
struct DynArray_ItemResourceCompositionMap {
    ItemResourceCompositionMap* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemResourceCompositionValue
// Generated DynArray for base type: ItemResourceCompositionValue
// Size: 0x8
struct DynArray_ItemResourceCompositionValue {
    ItemResourceCompositionValue* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemResourceControlBlock
// Generated DynArray for base type: ItemResourceControlBlock
// Size: 0x8
struct DynArray_ItemResourceControlBlock {
    ItemResourceControlBlock* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemResourceConversionPair
// Generated DynArray for base type: ItemResourceConversionPair
// Size: 0x8
struct DynArray_ItemResourceConversionPair {
    ItemResourceConversionPair* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemResourceGroup
// Generated DynArray for base type: ItemResourceGroup
// Size: 0x8
struct DynArray_ItemResourceGroup {
    ItemResourceGroup* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemResourceState
// Generated DynArray for base type: ItemResourceState
// Size: 0x8
struct DynArray_ItemResourceState {
    ItemResourceState* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemRoomResourcePair
// Generated DynArray for base type: ItemRoomResourcePair
// Size: 0x8
struct DynArray_ItemRoomResourcePair {
    ItemRoomResourcePair* m_data; // Offset: 0x0
};

// Original name: DynArray_LandingZoneInventoryRedirect
// Generated DynArray for base type: LandingZoneInventoryRedirect
// Size: 0x8
struct DynArray_LandingZoneInventoryRedirect {
    LandingZoneInventoryRedirect* m_data; // Offset: 0x0
};

// Original name: DynArray_LeanConnection
// Generated DynArray for base type: LeanConnection
// Size: 0x8
struct DynArray_LeanConnection {
    LeanConnection* m_data; // Offset: 0x0
};

// Original name: DynArray_LeanState
// Generated DynArray for base type: LeanState
// Size: 0x8
struct DynArray_LeanState {
    LeanState* m_data; // Offset: 0x0
};

// Original name: DynArray_LegacyCrafterContainerPort
// Generated DynArray for base type: LegacyCrafterContainerPort
// Size: 0x8
struct DynArray_LegacyCrafterContainerPort {
    LegacyCrafterContainerPort* m_data; // Offset: 0x0
};

// Original name: DynArray_LicensedItemModifier
// Generated DynArray for base type: LicensedItemModifier
// Size: 0x8
struct DynArray_LicensedItemModifier {
    LicensedItemModifier* m_data; // Offset: 0x0
};

// Original name: DynArray_LoadoutKit
// Generated DynArray for base type: LoadoutKit
// Size: 0x8
struct DynArray_LoadoutKit {
    LoadoutKit* m_data; // Offset: 0x0
};

// Original name: DynArray_LocationMissionLimit
// Generated DynArray for base type: LocationMissionLimit
// Size: 0x8
struct DynArray_LocationMissionLimit {
    LocationMissionLimit* m_data; // Offset: 0x0
};

// Original name: DynArray_LogoutInteractionParams
// Generated DynArray for base type: LogoutInteractionParams
// Size: 0x8
struct DynArray_LogoutInteractionParams {
    LogoutInteractionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_LootArchetypeEntry_Primary
// Generated DynArray for base type: LootArchetypeEntry_Primary
// Size: 0x8
struct DynArray_LootArchetypeEntry_Primary {
    LootArchetypeEntry_Primary* m_data; // Offset: 0x0
};

// Original name: DynArray_LootArchetypeEntry_Secondary
// Generated DynArray for base type: LootArchetypeEntry_Secondary
// Size: 0x8
struct DynArray_LootArchetypeEntry_Secondary {
    LootArchetypeEntry_Secondary* m_data; // Offset: 0x0
};

// Original name: DynArray_LootArchetypeOrGroup_Secondary
// Generated DynArray for base type: LootArchetypeOrGroup_Secondary
// Size: 0x8
struct DynArray_LootArchetypeOrGroup_Secondary {
    LootArchetypeOrGroup_Secondary* m_data; // Offset: 0x0
};

// Original name: DynArray_LootGenerationSpecialEventArchetype
// Generated DynArray for base type: LootGenerationSpecialEventArchetype
// Size: 0x8
struct DynArray_LootGenerationSpecialEventArchetype {
    LootGenerationSpecialEventArchetype* m_data; // Offset: 0x0
};

// Original name: DynArray_LootingTabParams
// Generated DynArray for base type: LootingTabParams
// Size: 0x8
struct DynArray_LootingTabParams {
    LootingTabParams* m_data; // Offset: 0x0
};

// Original name: DynArray_MarkerTrackingViewMode
// Generated DynArray for base type: MarkerTrackingViewMode
// Size: 0x8
struct DynArray_MarkerTrackingViewMode {
    MarkerTrackingViewMode* m_data; // Offset: 0x0
};

// Original name: DynArray_MegaMap
// Generated DynArray for base type: MegaMap
// Size: 0x8
struct DynArray_MegaMap {
    MegaMap* m_data; // Offset: 0x0
};

// Original name: DynArray_MinCompletionTags
// Generated DynArray for base type: MinCompletionTags
// Size: 0x8
struct DynArray_MinCompletionTags {
    MinCompletionTags* m_data; // Offset: 0x0
};

// Original name: DynArray_MinRequiredMissions
// Generated DynArray for base type: MinRequiredMissions
// Size: 0x8
struct DynArray_MinRequiredMissions {
    MinRequiredMissions* m_data; // Offset: 0x0
};

// Original name: DynArray_MineableCompositionPart
// Generated DynArray for base type: MineableCompositionPart
// Size: 0x8
struct DynArray_MineableCompositionPart {
    MineableCompositionPart* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionBrokerEntry
// Generated DynArray for base type: MissionBrokerEntry
// Size: 0x8
struct DynArray_MissionBrokerEntry {
    MissionBrokerEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionFailConditionParams
// Generated DynArray for base type: MissionFailConditionParams
// Size: 0x8
struct DynArray_MissionFailConditionParams {
    MissionFailConditionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionItem
// Generated DynArray for base type: MissionItem
// Size: 0x8
struct DynArray_MissionItem {
    MissionItem* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionLocationParams
// Generated DynArray for base type: MissionLocationParams
// Size: 0x8
struct DynArray_MissionLocationParams {
    MissionLocationParams* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionLocationTags
// Generated DynArray for base type: MissionLocationTags
// Size: 0x8
struct DynArray_MissionLocationTags {
    MissionLocationTags* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionLogEntry
// Generated DynArray for base type: MissionLogEntry
// Size: 0x8
struct DynArray_MissionLogEntry {
    MissionLogEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionModuleHierarchySubMission
// Generated DynArray for base type: MissionModuleHierarchySubMission
// Size: 0x8
struct DynArray_MissionModuleHierarchySubMission {
    MissionModuleHierarchySubMission* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionObjective
// Generated DynArray for base type: MissionObjective
// Size: 0x8
struct DynArray_MissionObjective {
    MissionObjective* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionOrganization
// Generated DynArray for base type: MissionOrganization
// Size: 0x8
struct DynArray_MissionOrganization {
    MissionOrganization* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionPropertyValueOption_Float
// Generated DynArray for base type: MissionPropertyValueOption_Float
// Size: 0x8
struct DynArray_MissionPropertyValueOption_Float {
    MissionPropertyValueOption_Float* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionPropertyValueOption_Integer
// Generated DynArray for base type: MissionPropertyValueOption_Integer
// Size: 0x8
struct DynArray_MissionPropertyValueOption_Integer {
    MissionPropertyValueOption_Integer* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionPropertyValueOption_StringHash
// Generated DynArray for base type: MissionPropertyValueOption_StringHash
// Size: 0x8
struct DynArray_MissionPropertyValueOption_StringHash {
    MissionPropertyValueOption_StringHash* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionPropertyValueOption_Tags
// Generated DynArray for base type: MissionPropertyValueOption_Tags
// Size: 0x8
struct DynArray_MissionPropertyValueOption_Tags {
    MissionPropertyValueOption_Tags* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionRandomPhaseEntry
// Generated DynArray for base type: MissionRandomPhaseEntry
// Size: 0x8
struct DynArray_MissionRandomPhaseEntry {
    MissionRandomPhaseEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionStringVariant
// Generated DynArray for base type: MissionStringVariant
// Size: 0x8
struct DynArray_MissionStringVariant {
    MissionStringVariant* m_data; // Offset: 0x0
};

// Original name: DynArray_MobiGlasAfterActionReportRankRules
// Generated DynArray for base type: MobiGlasAfterActionReportRankRules
// Size: 0x8
struct DynArray_MobiGlasAfterActionReportRankRules {
    MobiGlasAfterActionReportRankRules* m_data; // Offset: 0x0
};

// Original name: DynArray_MobiGlasAfterActionReportStat
// Generated DynArray for base type: MobiGlasAfterActionReportStat
// Size: 0x8
struct DynArray_MobiGlasAfterActionReportStat {
    MobiGlasAfterActionReportStat* m_data; // Offset: 0x0
};

// Original name: DynArray_MobiGlasAfterActionReportStatsBlock
// Generated DynArray for base type: MobiGlasAfterActionReportStatsBlock
// Size: 0x8
struct DynArray_MobiGlasAfterActionReportStatsBlock {
    MobiGlasAfterActionReportStatsBlock* m_data; // Offset: 0x0
};

// Original name: DynArray_MobiGlasAppContent
// Generated DynArray for base type: MobiGlasAppContent
// Size: 0x8
struct DynArray_MobiGlasAppContent {
    MobiGlasAppContent* m_data; // Offset: 0x0
};

// Original name: DynArray_MotionConnection
// Generated DynArray for base type: MotionConnection
// Size: 0x8
struct DynArray_MotionConnection {
    MotionConnection* m_data; // Offset: 0x0
};

// Original name: DynArray_MotionState
// Generated DynArray for base type: MotionState
// Size: 0x8
struct DynArray_MotionState {
    MotionState* m_data; // Offset: 0x0
};

// Original name: DynArray_MusicLogicParameter
// Generated DynArray for base type: MusicLogicParameter
// Size: 0x8
struct DynArray_MusicLogicParameter {
    MusicLogicParameter* m_data; // Offset: 0x0
};

// Original name: DynArray_NavigationLinkTagCost
// Generated DynArray for base type: NavigationLinkTagCost
// Size: 0x8
struct DynArray_NavigationLinkTagCost {
    NavigationLinkTagCost* m_data; // Offset: 0x0
};

// Original name: DynArray_NavigationLinkType
// Generated DynArray for base type: NavigationLinkType
// Size: 0x8
struct DynArray_NavigationLinkType {
    NavigationLinkType* m_data; // Offset: 0x0
};

// Original name: DynArray_NotificationDef
// Generated DynArray for base type: NotificationDef
// Size: 0x8
struct DynArray_NotificationDef {
    NotificationDef* m_data; // Offset: 0x0
};

// Original name: DynArray_ObjectiveToken
// Generated DynArray for base type: ObjectiveToken
// Size: 0x8
struct DynArray_ObjectiveToken {
    ObjectiveToken* m_data; // Offset: 0x0
};

// Original name: DynArray_OrganizationRelationshipParams
// Generated DynArray for base type: OrganizationRelationshipParams
// Size: 0x8
struct DynArray_OrganizationRelationshipParams {
    OrganizationRelationshipParams* m_data; // Offset: 0x0
};

// Original name: DynArray_OutfitParams
// Generated DynArray for base type: OutfitParams
// Size: 0x8
struct DynArray_OutfitParams {
    OutfitParams* m_data; // Offset: 0x0
};

// Original name: DynArray_PersonalThoughtInventoryItemOrientationOffset
// Generated DynArray for base type: PersonalThoughtInventoryItemOrientationOffset
// Size: 0x8
struct DynArray_PersonalThoughtInventoryItemOrientationOffset {
    PersonalThoughtInventoryItemOrientationOffset* m_data; // Offset: 0x0
};

// Original name: DynArray_PersonalThoughtInventorySingleFilter
// Generated DynArray for base type: PersonalThoughtInventorySingleFilter
// Size: 0x8
struct DynArray_PersonalThoughtInventorySingleFilter {
    PersonalThoughtInventorySingleFilter* m_data; // Offset: 0x0
};

// Original name: DynArray_PlacedSurfaceEffects_EmitterEntry
// Generated DynArray for base type: PlacedSurfaceEffects_EmitterEntry
// Size: 0x8
struct DynArray_PlacedSurfaceEffects_EmitterEntry {
    PlacedSurfaceEffects_EmitterEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_PlayerChoiceMenu
// Generated DynArray for base type: PlayerChoiceMenu
// Size: 0x8
struct DynArray_PlayerChoiceMenu {
    PlayerChoiceMenu* m_data; // Offset: 0x0
};

// Original name: DynArray_PlayerChoiceMenuItem
// Generated DynArray for base type: PlayerChoiceMenuItem
// Size: 0x8
struct DynArray_PlayerChoiceMenuItem {
    PlayerChoiceMenuItem* m_data; // Offset: 0x0
};

// Original name: DynArray_PlayerUsableInteractionPoint
// Generated DynArray for base type: PlayerUsableInteractionPoint
// Size: 0x8
struct DynArray_PlayerUsableInteractionPoint {
    PlayerUsableInteractionPoint* m_data; // Offset: 0x0
};

// Original name: DynArray_PlayerUsableItemPort
// Generated DynArray for base type: PlayerUsableItemPort
// Size: 0x8
struct DynArray_PlayerUsableItemPort {
    PlayerUsableItemPort* m_data; // Offset: 0x0
};

// Original name: DynArray_PlayerUsableSlot
// Generated DynArray for base type: PlayerUsableSlot
// Size: 0x8
struct DynArray_PlayerUsableSlot {
    PlayerUsableSlot* m_data; // Offset: 0x0
};

// Original name: DynArray_PlayerUsableUseChannelInstance
// Generated DynArray for base type: PlayerUsableUseChannelInstance
// Size: 0x8
struct DynArray_PlayerUsableUseChannelInstance {
    PlayerUsableUseChannelInstance* m_data; // Offset: 0x0
};

// Original name: DynArray_PortRefillData
// Generated DynArray for base type: PortRefillData
// Size: 0x8
struct DynArray_PortRefillData {
    PortRefillData* m_data; // Offset: 0x0
};

// Original name: DynArray_ProceduralLayoutNode_AlternateElementProperties
// Generated DynArray for base type: ProceduralLayoutNode_AlternateElementProperties
// Size: 0x8
struct DynArray_ProceduralLayoutNode_AlternateElementProperties {
    ProceduralLayoutNode_AlternateElementProperties* m_data; // Offset: 0x0
};

// Original name: DynArray_ProceduralLayoutNode_AlternateSubGraphProperties
// Generated DynArray for base type: ProceduralLayoutNode_AlternateSubGraphProperties
// Size: 0x8
struct DynArray_ProceduralLayoutNode_AlternateSubGraphProperties {
    ProceduralLayoutNode_AlternateSubGraphProperties* m_data; // Offset: 0x0
};

// Original name: DynArray_ProceduralLayout_SupplementaryElementTagsOptions
// Generated DynArray for base type: ProceduralLayout_SupplementaryElementTagsOptions
// Size: 0x8
struct DynArray_ProceduralLayout_SupplementaryElementTagsOptions {
    ProceduralLayout_SupplementaryElementTagsOptions* m_data; // Offset: 0x0
};

// Original name: DynArray_ProceduralLayout_TagFilter
// Generated DynArray for base type: ProceduralLayout_TagFilter
// Size: 0x8
struct DynArray_ProceduralLayout_TagFilter {
    ProceduralLayout_TagFilter* m_data; // Offset: 0x0
};

// Original name: DynArray_ProceduralPlanetAudioTagAndEvent
// Generated DynArray for base type: ProceduralPlanetAudioTagAndEvent
// Size: 0x8
struct DynArray_ProceduralPlanetAudioTagAndEvent {
    ProceduralPlanetAudioTagAndEvent* m_data; // Offset: 0x0
};

// Original name: DynArray_ProceduralPlanetAudioTagAndRtpc
// Generated DynArray for base type: ProceduralPlanetAudioTagAndRtpc
// Size: 0x8
struct DynArray_ProceduralPlanetAudioTagAndRtpc {
    ProceduralPlanetAudioTagAndRtpc* m_data; // Offset: 0x0
};

// Original name: DynArray_RadarContactGroupEntry
// Generated DynArray for base type: RadarContactGroupEntry
// Size: 0x8
struct DynArray_RadarContactGroupEntry {
    RadarContactGroupEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_RadarContactSubGroupEntry
// Generated DynArray for base type: RadarContactSubGroupEntry
// Size: 0x8
struct DynArray_RadarContactSubGroupEntry {
    RadarContactSubGroupEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_RadarContactTypeEntry
// Generated DynArray for base type: RadarContactTypeEntry
// Size: 0x8
struct DynArray_RadarContactTypeEntry {
    RadarContactTypeEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_ResourceContainerDefaultCompositionEntry
// Generated DynArray for base type: ResourceContainerDefaultCompositionEntry
// Size: 0x8
struct DynArray_ResourceContainerDefaultCompositionEntry {
    ResourceContainerDefaultCompositionEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_ResourceLinkedInteractionState
// Generated DynArray for base type: ResourceLinkedInteractionState
// Size: 0x8
struct DynArray_ResourceLinkedInteractionState {
    ResourceLinkedInteractionState* m_data; // Offset: 0x0
};

// Original name: DynArray_ResourceType
// Generated DynArray for base type: ResourceType
// Size: 0x8
struct DynArray_ResourceType {
    ResourceType* m_data; // Offset: 0x0
};

// Original name: DynArray_ResourceTypeGroup
// Generated DynArray for base type: ResourceTypeGroup
// Size: 0x8
struct DynArray_ResourceTypeGroup {
    ResourceTypeGroup* m_data; // Offset: 0x0
};

// Original name: DynArray_S42ShipStatusAllowedShipParams
// Generated DynArray for base type: S42ShipStatusAllowedShipParams
// Size: 0x8
struct DynArray_S42ShipStatusAllowedShipParams {
    S42ShipStatusAllowedShipParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorCarryConfigTagSwitch
// Generated DynArray for base type: SActorCarryConfigTagSwitch
// Size: 0x8
struct DynArray_SActorCarryConfigTagSwitch {
    SActorCarryConfigTagSwitch* m_data; // Offset: 0x0
};

// Original name: DynArray_SApplicationFormVoiceParams
// Generated DynArray for base type: SApplicationFormVoiceParams
// Size: 0x8
struct DynArray_SApplicationFormVoiceParams {
    SApplicationFormVoiceParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCInteractionEffectsMapEntryParams
// Generated DynArray for base type: SCInteractionEffectsMapEntryParams
// Size: 0x8
struct DynArray_SCInteractionEffectsMapEntryParams {
    SCInteractionEffectsMapEntryParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCInteractionGeometryMapEntryParams
// Generated DynArray for base type: SCInteractionGeometryMapEntryParams
// Size: 0x8
struct DynArray_SCInteractionGeometryMapEntryParams {
    SCInteractionGeometryMapEntryParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCInteractionJournalEntryParams
// Generated DynArray for base type: SCInteractionJournalEntryParams
// Size: 0x8
struct DynArray_SCInteractionJournalEntryParams {
    SCInteractionJournalEntryParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemClothingMeshChunkParams
// Generated DynArray for base type: SCItemClothingMeshChunkParams
// Size: 0x8
struct DynArray_SCItemClothingMeshChunkParams {
    SCItemClothingMeshChunkParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemClothingPortVisibilityConditionParams
// Generated DynArray for base type: SCItemClothingPortVisibilityConditionParams
// Size: 0x8
struct DynArray_SCItemClothingPortVisibilityConditionParams {
    SCItemClothingPortVisibilityConditionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemClothingVisibilityConditionParams
// Generated DynArray for base type: SCItemClothingVisibilityConditionParams
// Size: 0x8
struct DynArray_SCItemClothingVisibilityConditionParams {
    SCItemClothingVisibilityConditionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemDisplayScreenStateParams
// Generated DynArray for base type: SCItemDisplayScreenStateParams
// Size: 0x8
struct DynArray_SCItemDisplayScreenStateParams {
    SCItemDisplayScreenStateParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemTurretCustomAngleLimitTagOverwriteParams
// Generated DynArray for base type: SCItemTurretCustomAngleLimitTagOverwriteParams
// Size: 0x8
struct DynArray_SCItemTurretCustomAngleLimitTagOverwriteParams {
    SCItemTurretCustomAngleLimitTagOverwriteParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemTurretMovementParams
// Generated DynArray for base type: SCItemTurretMovementParams
// Size: 0x8
struct DynArray_SCItemTurretMovementParams {
    SCItemTurretMovementParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemTurretMovementTagName
// Generated DynArray for base type: SCItemTurretMovementTagName
// Size: 0x8
struct DynArray_SCItemTurretMovementTagName {
    SCItemTurretMovementTagName* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemTurretStandardAngleLimitTagOverwriteParams
// Generated DynArray for base type: SCItemTurretStandardAngleLimitTagOverwriteParams
// Size: 0x8
struct DynArray_SCItemTurretStandardAngleLimitTagOverwriteParams {
    SCItemTurretStandardAngleLimitTagOverwriteParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemUIView_DashboardCanvasViewDef
// Generated DynArray for base type: SCItemUIView_DashboardCanvasViewDef
// Size: 0x8
struct DynArray_SCItemUIView_DashboardCanvasViewDef {
    SCItemUIView_DashboardCanvasViewDef* m_data; // Offset: 0x0
};

// Original name: DynArray_SCOptionalThrustParams
// Generated DynArray for base type: SCOptionalThrustParams
// Size: 0x8
struct DynArray_SCOptionalThrustParams {
    SCOptionalThrustParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCOptionalZeroGTraversalParams
// Generated DynArray for base type: SCOptionalZeroGTraversalParams
// Size: 0x8
struct DynArray_SCOptionalZeroGTraversalParams {
    SCOptionalZeroGTraversalParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCSeatAccessEntranceInteractionParams
// Generated DynArray for base type: SCSeatAccessEntranceInteractionParams
// Size: 0x8
struct DynArray_SCSeatAccessEntranceInteractionParams {
    SCSeatAccessEntranceInteractionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCSeatAccessGatewayInteractionParams
// Generated DynArray for base type: SCSeatAccessGatewayInteractionParams
// Size: 0x8
struct DynArray_SCSeatAccessGatewayInteractionParams {
    SCSeatAccessGatewayInteractionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCSeatAccessLinkedGatewayParams
// Generated DynArray for base type: SCSeatAccessLinkedGatewayParams
// Size: 0x8
struct DynArray_SCSeatAccessLinkedGatewayParams {
    SCSeatAccessLinkedGatewayParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCSeatAccessPassageInteractionParams
// Generated DynArray for base type: SCSeatAccessPassageInteractionParams
// Size: 0x8
struct DynArray_SCSeatAccessPassageInteractionParams {
    SCSeatAccessPassageInteractionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCarryableSequenceRef
// Generated DynArray for base type: SCarryableSequenceRef
// Size: 0x8
struct DynArray_SCarryableSequenceRef {
    SCarryableSequenceRef* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerBodyTypeParams
// Generated DynArray for base type: SCharacterCustomizerBodyTypeParams
// Size: 0x8
struct DynArray_SCharacterCustomizerBodyTypeParams {
    SCharacterCustomizerBodyTypeParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerDNARegionParams
// Generated DynArray for base type: SCharacterCustomizerDNARegionParams
// Size: 0x8
struct DynArray_SCharacterCustomizerDNARegionParams {
    SCharacterCustomizerDNARegionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerFeatureBase
// Generated DynArray for base type: SCharacterCustomizerFeatureBase
// Size: 0x8
struct DynArray_SCharacterCustomizerFeatureBase {
    SCharacterCustomizerFeatureBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerHairLengthEntry
// Generated DynArray for base type: SCharacterCustomizerHairLengthEntry
// Size: 0x8
struct DynArray_SCharacterCustomizerHairLengthEntry {
    SCharacterCustomizerHairLengthEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerLoadoutItemReplacementMapping
// Generated DynArray for base type: SCharacterCustomizerLoadoutItemReplacementMapping
// Size: 0x8
struct DynArray_SCharacterCustomizerLoadoutItemReplacementMapping {
    SCharacterCustomizerLoadoutItemReplacementMapping* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerRandomizationOverrideParams
// Generated DynArray for base type: SCharacterCustomizerRandomizationOverrideParams
// Size: 0x8
struct DynArray_SCharacterCustomizerRandomizationOverrideParams {
    SCharacterCustomizerRandomizationOverrideParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerStep
// Generated DynArray for base type: SCharacterCustomizerStep
// Size: 0x8
struct DynArray_SCharacterCustomizerStep {
    SCharacterCustomizerStep* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerVertexParams
// Generated DynArray for base type: SCharacterCustomizerVertexParams
// Size: 0x8
struct DynArray_SCharacterCustomizerVertexParams {
    SCharacterCustomizerVertexParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerVoiceParams
// Generated DynArray for base type: SCharacterCustomizerVoiceParams
// Size: 0x8
struct DynArray_SCharacterCustomizerVoiceParams {
    SCharacterCustomizerVoiceParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SConditionalWeaponAction
// Generated DynArray for base type: SConditionalWeaponAction
// Size: 0x8
struct DynArray_SConditionalWeaponAction {
    SConditionalWeaponAction* m_data; // Offset: 0x0
};

// Original name: DynArray_SControlledEntityParams
// Generated DynArray for base type: SControlledEntityParams
// Size: 0x8
struct DynArray_SControlledEntityParams {
    SControlledEntityParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCraftingDictionaryEntry
// Generated DynArray for base type: SCraftingDictionaryEntry
// Size: 0x8
struct DynArray_SCraftingDictionaryEntry {
    SCraftingDictionaryEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_SCustomizableMaterialParams
// Generated DynArray for base type: SCustomizableMaterialParams
// Size: 0x8
struct DynArray_SCustomizableMaterialParams {
    SCustomizableMaterialParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SDragDropUsableUserConfig
// Generated DynArray for base type: SDragDropUsableUserConfig
// Size: 0x8
struct DynArray_SDragDropUsableUserConfig {
    SDragDropUsableUserConfig* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAFPSGunGameArmorLevel
// Generated DynArray for base type: SEAFPSGunGameArmorLevel
// Size: 0x8
struct DynArray_SEAFPSGunGameArmorLevel {
    SEAFPSGunGameArmorLevel* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAFPSGunGameArmorSet
// Generated DynArray for base type: SEAFPSGunGameArmorSet
// Size: 0x8
struct DynArray_SEAFPSGunGameArmorSet {
    SEAFPSGunGameArmorSet* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAFPSGunGameWeaponLists
// Generated DynArray for base type: SEAFPSGunGameWeaponLists
// Size: 0x8
struct DynArray_SEAFPSGunGameWeaponLists {
    SEAFPSGunGameWeaponLists* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAFPSGunGameWeaponSetup
// Generated DynArray for base type: SEAFPSGunGameWeaponSetup
// Size: 0x8
struct DynArray_SEAFPSGunGameWeaponSetup {
    SEAFPSGunGameWeaponSetup* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAGlobalSpecialLoadout
// Generated DynArray for base type: SEAGlobalSpecialLoadout
// Size: 0x8
struct DynArray_SEAGlobalSpecialLoadout {
    SEAGlobalSpecialLoadout* m_data; // Offset: 0x0
};

// Original name: DynArray_SEALoadoutAttachment
// Generated DynArray for base type: SEALoadoutAttachment
// Size: 0x8
struct DynArray_SEALoadoutAttachment {
    SEALoadoutAttachment* m_data; // Offset: 0x0
};

// Original name: DynArray_SEALoadoutCollection
// Generated DynArray for base type: SEALoadoutCollection
// Size: 0x8
struct DynArray_SEALoadoutCollection {
    SEALoadoutCollection* m_data; // Offset: 0x0
};

// Original name: DynArray_SEALoadoutExplicit
// Generated DynArray for base type: SEALoadoutExplicit
// Size: 0x8
struct DynArray_SEALoadoutExplicit {
    SEALoadoutExplicit* m_data; // Offset: 0x0
};

// Original name: DynArray_SEALoadoutItem
// Generated DynArray for base type: SEALoadoutItem
// Size: 0x8
struct DynArray_SEALoadoutItem {
    SEALoadoutItem* m_data; // Offset: 0x0
};

// Original name: DynArray_SEALoadoutSet
// Generated DynArray for base type: SEALoadoutSet
// Size: 0x8
struct DynArray_SEALoadoutSet {
    SEALoadoutSet* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAPlayerLoadoutSnapshotEntry
// Generated DynArray for base type: SEAPlayerLoadoutSnapshotEntry
// Size: 0x8
struct DynArray_SEAPlayerLoadoutSnapshotEntry {
    SEAPlayerLoadoutSnapshotEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_SEASpawnLocationVehicleSeatSlot
// Generated DynArray for base type: SEASpawnLocationVehicleSeatSlot
// Size: 0x8
struct DynArray_SEASpawnLocationVehicleSeatSlot {
    SEASpawnLocationVehicleSeatSlot* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAUISpawnScreenFPSEquipmentCategoryParams
// Generated DynArray for base type: SEAUISpawnScreenFPSEquipmentCategoryParams
// Size: 0x8
struct DynArray_SEAUISpawnScreenFPSEquipmentCategoryParams {
    SEAUISpawnScreenFPSEquipmentCategoryParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAUISpawnScreenFPSEquipmentSlotParams
// Generated DynArray for base type: SEAUISpawnScreenFPSEquipmentSlotParams
// Size: 0x8
struct DynArray_SEAUISpawnScreenFPSEquipmentSlotParams {
    SEAUISpawnScreenFPSEquipmentSlotParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SEffectParamsNodeParticle
// Generated DynArray for base type: SEffectParamsNodeParticle
// Size: 0x8
struct DynArray_SEffectParamsNodeParticle {
    SEffectParamsNodeParticle* m_data; // Offset: 0x0
};

// Original name: DynArray_SEffectParamsNodeSound
// Generated DynArray for base type: SEffectParamsNodeSound
// Size: 0x8
struct DynArray_SEffectParamsNodeSound {
    SEffectParamsNodeSound* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect
// Generated DynArray for base type: SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect
// Size: 0x8
struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect {
    SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect
// Generated DynArray for base type: SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect
// Size: 0x8
struct DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect {
    SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_ParticlePropertyLink
// Generated DynArray for base type: SEntityEffectSystem_ParticlePropertyLink
// Size: 0x8
struct DynArray_SEntityEffectSystem_ParticlePropertyLink {
    SEntityEffectSystem_ParticlePropertyLink* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_ParticleTagEffect
// Generated DynArray for base type: SEntityEffectSystem_ParticleTagEffect
// Size: 0x8
struct DynArray_SEntityEffectSystem_ParticleTagEffect {
    SEntityEffectSystem_ParticleTagEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_ParticleTriggerEffect
// Generated DynArray for base type: SEntityEffectSystem_ParticleTriggerEffect
// Size: 0x8
struct DynArray_SEntityEffectSystem_ParticleTriggerEffect {
    SEntityEffectSystem_ParticleTriggerEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_SoundPropertyLink
// Generated DynArray for base type: SEntityEffectSystem_SoundPropertyLink
// Size: 0x8
struct DynArray_SEntityEffectSystem_SoundPropertyLink {
    SEntityEffectSystem_SoundPropertyLink* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_SoundTagEffect
// Generated DynArray for base type: SEntityEffectSystem_SoundTagEffect
// Size: 0x8
struct DynArray_SEntityEffectSystem_SoundTagEffect {
    SEntityEffectSystem_SoundTagEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_SoundTriggerEffect
// Generated DynArray for base type: SEntityEffectSystem_SoundTriggerEffect
// Size: 0x8
struct DynArray_SEntityEffectSystem_SoundTriggerEffect {
    SEntityEffectSystem_SoundTriggerEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_UIOwnerTagEffect
// Generated DynArray for base type: SEntityEffectSystem_UIOwnerTagEffect
// Size: 0x8
struct DynArray_SEntityEffectSystem_UIOwnerTagEffect {
    SEntityEffectSystem_UIOwnerTagEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityEffectSystem_UIOwnerTriggerEffect
// Generated DynArray for base type: SEntityEffectSystem_UIOwnerTriggerEffect
// Size: 0x8
struct DynArray_SEntityEffectSystem_UIOwnerTriggerEffect {
    SEntityEffectSystem_UIOwnerTriggerEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityTraversingNodeBase
// Generated DynArray for base type: SEntityTraversingNodeBase
// Size: 0x8
struct DynArray_SEntityTraversingNodeBase {
    SEntityTraversingNodeBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityTraversingTarget
// Generated DynArray for base type: SEntityTraversingTarget
// Size: 0x8
struct DynArray_SEntityTraversingTarget {
    SEntityTraversingTarget* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityTraversingTargetPath
// Generated DynArray for base type: SEntityTraversingTargetPath
// Size: 0x8
struct DynArray_SEntityTraversingTargetPath {
    SEntityTraversingTargetPath* m_data; // Offset: 0x0
};

// Original name: DynArray_SGeometryNodeParams
// Generated DynArray for base type: SGeometryNodeParams
// Size: 0x8
struct DynArray_SGeometryNodeParams {
    SGeometryNodeParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SGroupedLoadouts
// Generated DynArray for base type: SGroupedLoadouts
// Size: 0x8
struct DynArray_SGroupedLoadouts {
    SGroupedLoadouts* m_data; // Offset: 0x0
};

// Original name: DynArray_SHealthInteractionLockParams
// Generated DynArray for base type: SHealthInteractionLockParams
// Size: 0x8
struct DynArray_SHealthInteractionLockParams {
    SHealthInteractionLockParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SHighlightBehaviorNode
// Generated DynArray for base type: SHighlightBehaviorNode
// Size: 0x8
struct DynArray_SHighlightBehaviorNode {
    SHighlightBehaviorNode* m_data; // Offset: 0x0
};

// Original name: DynArray_SHostilityRules
// Generated DynArray for base type: SHostilityRules
// Size: 0x8
struct DynArray_SHostilityRules {
    SHostilityRules* m_data; // Offset: 0x0
};

// Original name: DynArray_SInspectAnimationParams
// Generated DynArray for base type: SInspectAnimationParams
// Size: 0x8
struct DynArray_SInspectAnimationParams {
    SInspectAnimationParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SInteractionParams
// Generated DynArray for base type: SInteractionParams
// Size: 0x8
struct DynArray_SInteractionParams {
    SInteractionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SInteractionPointModifier
// Generated DynArray for base type: SInteractionPointModifier
// Size: 0x8
struct DynArray_SInteractionPointModifier {
    SInteractionPointModifier* m_data; // Offset: 0x0
};

// Original name: DynArray_SInteractionPointParams
// Generated DynArray for base type: SInteractionPointParams
// Size: 0x8
struct DynArray_SInteractionPointParams {
    SInteractionPointParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SInteractionState
// Generated DynArray for base type: SInteractionState
// Size: 0x8
struct DynArray_SInteractionState {
    SInteractionState* m_data; // Offset: 0x0
};

// Original name: DynArray_SInteractionStateTransition
// Generated DynArray for base type: SInteractionStateTransition
// Size: 0x8
struct DynArray_SInteractionStateTransition {
    SInteractionStateTransition* m_data; // Offset: 0x0
};

// Original name: DynArray_SInteractionStateType
// Generated DynArray for base type: SInteractionStateType
// Size: 0x8
struct DynArray_SInteractionStateType {
    SInteractionStateType* m_data; // Offset: 0x0
};

// Original name: DynArray_SInternalResourceLink
// Generated DynArray for base type: SInternalResourceLink
// Size: 0x8
struct DynArray_SInternalResourceLink {
    SInternalResourceLink* m_data; // Offset: 0x0
};

// Original name: DynArray_SInverseInteractionLinkParams
// Generated DynArray for base type: SInverseInteractionLinkParams
// Size: 0x8
struct DynArray_SInverseInteractionLinkParams {
    SInverseInteractionLinkParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemPortDef
// Generated DynArray for base type: SItemPortDef
// Size: 0x8
struct DynArray_SItemPortDef {
    SItemPortDef* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemPortDefHelperNode
// Generated DynArray for base type: SItemPortDefHelperNode
// Size: 0x8
struct DynArray_SItemPortDefHelperNode {
    SItemPortDefHelperNode* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemPortDefaultItemDef
// Generated DynArray for base type: SItemPortDefaultItemDef
// Size: 0x8
struct DynArray_SItemPortDefaultItemDef {
    SItemPortDefaultItemDef* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemPortLoadoutBaseParams
// Generated DynArray for base type: SItemPortLoadoutBaseParams
// Size: 0x8
struct DynArray_SItemPortLoadoutBaseParams {
    SItemPortLoadoutBaseParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemPortLoadoutEntryParams
// Generated DynArray for base type: SItemPortLoadoutEntryParams
// Size: 0x8
struct DynArray_SItemPortLoadoutEntryParams {
    SItemPortLoadoutEntryParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemPortLoadoutOutfitTagParams
// Generated DynArray for base type: SItemPortLoadoutOutfitTagParams
// Size: 0x8
struct DynArray_SItemPortLoadoutOutfitTagParams {
    SItemPortLoadoutOutfitTagParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemShopARItemPortParams
// Generated DynArray for base type: SItemShopARItemPortParams
// Size: 0x8
struct DynArray_SItemShopARItemPortParams {
    SItemShopARItemPortParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SJumpTunnelSectionGenerationParams
// Generated DynArray for base type: SJumpTunnelSectionGenerationParams
// Size: 0x8
struct DynArray_SJumpTunnelSectionGenerationParams {
    SJumpTunnelSectionGenerationParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SJumpTunnelSectionProbabilityParams
// Generated DynArray for base type: SJumpTunnelSectionProbabilityParams
// Size: 0x8
struct DynArray_SJumpTunnelSectionProbabilityParams {
    SJumpTunnelSectionProbabilityParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SLightStateOverride
// Generated DynArray for base type: SLightStateOverride
// Size: 0x8
struct DynArray_SLightStateOverride {
    SLightStateOverride* m_data; // Offset: 0x0
};

// Original name: DynArray_SLinkedInteractionStateTags
// Generated DynArray for base type: SLinkedInteractionStateTags
// Size: 0x8
struct DynArray_SLinkedInteractionStateTags {
    SLinkedInteractionStateTags* m_data; // Offset: 0x0
};

// Original name: DynArray_SLoadoutAssortment
// Generated DynArray for base type: SLoadoutAssortment
// Size: 0x8
struct DynArray_SLoadoutAssortment {
    SLoadoutAssortment* m_data; // Offset: 0x0
};

// Original name: DynArray_SLoadoutInventoryItem
// Generated DynArray for base type: SLoadoutInventoryItem
// Size: 0x8
struct DynArray_SLoadoutInventoryItem {
    SLoadoutInventoryItem* m_data; // Offset: 0x0
};

// Original name: DynArray_SLootableItemPortRuleParams
// Generated DynArray for base type: SLootableItemPortRuleParams
// Size: 0x8
struct DynArray_SLootableItemPortRuleParams {
    SLootableItemPortRuleParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SMFDView
// Generated DynArray for base type: SMFDView
// Size: 0x8
struct DynArray_SMFDView {
    SMFDView* m_data; // Offset: 0x0
};

// Original name: DynArray_SManufacturerMFDView
// Generated DynArray for base type: SManufacturerMFDView
// Size: 0x8
struct DynArray_SManufacturerMFDView {
    SManufacturerMFDView* m_data; // Offset: 0x0
};

// Original name: DynArray_SMaterialNodeParams
// Generated DynArray for base type: SMaterialNodeParams
// Size: 0x8
struct DynArray_SMaterialNodeParams {
    SMaterialNodeParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SMegaMapSolarSystem
// Generated DynArray for base type: SMegaMapSolarSystem
// Size: 0x8
struct DynArray_SMegaMapSolarSystem {
    SMegaMapSolarSystem* m_data; // Offset: 0x0
};

// Original name: DynArray_SMisfireEffect
// Generated DynArray for base type: SMisfireEffect
// Size: 0x8
struct DynArray_SMisfireEffect {
    SMisfireEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_SMisfireLevelParams
// Generated DynArray for base type: SMisfireLevelParams
// Size: 0x8
struct DynArray_SMisfireLevelParams {
    SMisfireLevelParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SMisfireProbabilityParams
// Generated DynArray for base type: SMisfireProbabilityParams
// Size: 0x8
struct DynArray_SMisfireProbabilityParams {
    SMisfireProbabilityParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SMobiGlasPersonalStatusWeaponItem
// Generated DynArray for base type: SMobiGlasPersonalStatusWeaponItem
// Size: 0x8
struct DynArray_SMobiGlasPersonalStatusWeaponItem {
    SMobiGlasPersonalStatusWeaponItem* m_data; // Offset: 0x0
};

// Original name: DynArray_SModelVoiceTagPair
// Generated DynArray for base type: SModelVoiceTagPair
// Size: 0x8
struct DynArray_SModelVoiceTagPair {
    SModelVoiceTagPair* m_data; // Offset: 0x0
};

// Original name: DynArray_SMovableGrip
// Generated DynArray for base type: SMovableGrip
// Size: 0x8
struct DynArray_SMovableGrip {
    SMovableGrip* m_data; // Offset: 0x0
};

// Original name: DynArray_SMultiMissionCompleteReward
// Generated DynArray for base type: SMultiMissionCompleteReward
// Size: 0x8
struct DynArray_SMultiMissionCompleteReward {
    SMultiMissionCompleteReward* m_data; // Offset: 0x0
};

// Original name: DynArray_SMusicEventTagMap
// Generated DynArray for base type: SMusicEventTagMap
// Size: 0x8
struct DynArray_SMusicEventTagMap {
    SMusicEventTagMap* m_data; // Offset: 0x0
};

// Original name: DynArray_SMusicTagBehaviour
// Generated DynArray for base type: SMusicTagBehaviour
// Size: 0x8
struct DynArray_SMusicTagBehaviour {
    SMusicTagBehaviour* m_data; // Offset: 0x0
};

// Original name: DynArray_SMusicValueTagMap
// Generated DynArray for base type: SMusicValueTagMap
// Size: 0x8
struct DynArray_SMusicValueTagMap {
    SMusicValueTagMap* m_data; // Offset: 0x0
};

// Original name: DynArray_SOnInteractionStateChangeTriggers
// Generated DynArray for base type: SOnInteractionStateChangeTriggers
// Size: 0x8
struct DynArray_SOnInteractionStateChangeTriggers {
    SOnInteractionStateChangeTriggers* m_data; // Offset: 0x0
};

// Original name: DynArray_SOnInteractionTriggers
// Generated DynArray for base type: SOnInteractionTriggers
// Size: 0x8
struct DynArray_SOnInteractionTriggers {
    SOnInteractionTriggers* m_data; // Offset: 0x0
};

// Original name: DynArray_SOutfitHangerGroup
// Generated DynArray for base type: SOutfitHangerGroup
// Size: 0x8
struct DynArray_SOutfitHangerGroup {
    SOutfitHangerGroup* m_data; // Offset: 0x0
};

// Original name: DynArray_SOutfitPlacingRule
// Generated DynArray for base type: SOutfitPlacingRule
// Size: 0x8
struct DynArray_SOutfitPlacingRule {
    SOutfitPlacingRule* m_data; // Offset: 0x0
};

// Original name: DynArray_SPVPBountyContractGenerators
// Generated DynArray for base type: SPVPBountyContractGenerators
// Size: 0x8
struct DynArray_SPVPBountyContractGenerators {
    SPVPBountyContractGenerators* m_data; // Offset: 0x0
};

// Original name: DynArray_SPerkShopItemCategoryBase
// Generated DynArray for base type: SPerkShopItemCategoryBase
// Size: 0x8
struct DynArray_SPerkShopItemCategoryBase {
    SPerkShopItemCategoryBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SPhysicalScreen
// Generated DynArray for base type: SPhysicalScreen
// Size: 0x8
struct DynArray_SPhysicalScreen {
    SPhysicalScreen* m_data; // Offset: 0x0
};

// Original name: DynArray_SPlayerLoadoutOverride
// Generated DynArray for base type: SPlayerLoadoutOverride
// Size: 0x8
struct DynArray_SPlayerLoadoutOverride {
    SPlayerLoadoutOverride* m_data; // Offset: 0x0
};

// Original name: DynArray_SPowerUserState
// Generated DynArray for base type: SPowerUserState
// Size: 0x8
struct DynArray_SPowerUserState {
    SPowerUserState* m_data; // Offset: 0x0
};

// Original name: DynArray_SPrimeableAnimationState
// Generated DynArray for base type: SPrimeableAnimationState
// Size: 0x8
struct DynArray_SPrimeableAnimationState {
    SPrimeableAnimationState* m_data; // Offset: 0x0
};

// Original name: DynArray_SQedVisualGraphStateParams
// Generated DynArray for base type: SQedVisualGraphStateParams
// Size: 0x8
struct DynArray_SQedVisualGraphStateParams {
    SQedVisualGraphStateParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SRangeStateLevel
// Generated DynArray for base type: SRangeStateLevel
// Size: 0x8
struct DynArray_SRangeStateLevel {
    SRangeStateLevel* m_data; // Offset: 0x0
};

// Original name: DynArray_SRemoteRigidEntityControlledEntitiesParams
// Generated DynArray for base type: SRemoteRigidEntityControlledEntitiesParams
// Size: 0x8
struct DynArray_SRemoteRigidEntityControlledEntitiesParams {
    SRemoteRigidEntityControlledEntitiesParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SReputationAmountListParams
// Generated DynArray for base type: SReputationAmountListParams
// Size: 0x8
struct DynArray_SReputationAmountListParams {
    SReputationAmountListParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SReputationAmountParams
// Generated DynArray for base type: SReputationAmountParams
// Size: 0x8
struct DynArray_SReputationAmountParams {
    SReputationAmountParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SReputationJournalEntriesParams
// Generated DynArray for base type: SReputationJournalEntriesParams
// Size: 0x8
struct DynArray_SReputationJournalEntriesParams {
    SReputationJournalEntriesParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SReputationMissionGiverRewardBonusParams
// Generated DynArray for base type: SReputationMissionGiverRewardBonusParams
// Size: 0x8
struct DynArray_SReputationMissionGiverRewardBonusParams {
    SReputationMissionGiverRewardBonusParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SSecondaryAmmoContainerParams
// Generated DynArray for base type: SSecondaryAmmoContainerParams
// Size: 0x8
struct DynArray_SSecondaryAmmoContainerParams {
    SSecondaryAmmoContainerParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerDefSequenceParams
// Generated DynArray for base type: SSequencerDefSequenceParams
// Size: 0x8
struct DynArray_SSequencerDefSequenceParams {
    SSequencerDefSequenceParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerTurretSetLimiterTagTaskParams
// Generated DynArray for base type: SSequencerTurretSetLimiterTagTaskParams
// Size: 0x8
struct DynArray_SSequencerTurretSetLimiterTagTaskParams {
    SSequencerTurretSetLimiterTagTaskParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerTurretSetMovementTagTaskParams
// Generated DynArray for base type: SSequencerTurretSetMovementTagTaskParams
// Size: 0x8
struct DynArray_SSequencerTurretSetMovementTagTaskParams {
    SSequencerTurretSetMovementTagTaskParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SServiceBeaconDifficultyEntry
// Generated DynArray for base type: SServiceBeaconDifficultyEntry
// Size: 0x8
struct DynArray_SServiceBeaconDifficultyEntry {
    SServiceBeaconDifficultyEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_SSharedInteractionParams
// Generated DynArray for base type: SSharedInteractionParams
// Size: 0x8
struct DynArray_SSharedInteractionParams {
    SSharedInteractionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SSimpodSimulation
// Generated DynArray for base type: SSimpodSimulation
// Size: 0x8
struct DynArray_SSimpodSimulation {
    SSimpodSimulation* m_data; // Offset: 0x0
};

// Original name: DynArray_SSpawnEntity
// Generated DynArray for base type: SSpawnEntity
// Size: 0x8
struct DynArray_SSpawnEntity {
    SSpawnEntity* m_data; // Offset: 0x0
};

// Original name: DynArray_STaggedSignaturesEntry
// Generated DynArray for base type: STaggedSignaturesEntry
// Size: 0x8
struct DynArray_STaggedSignaturesEntry {
    STaggedSignaturesEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_STriggerableDevicesTriggerParams
// Generated DynArray for base type: STriggerableDevicesTriggerParams
// Size: 0x8
struct DynArray_STriggerableDevicesTriggerParams {
    STriggerableDevicesTriggerParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SVehicleItemportInteractionLink
// Generated DynArray for base type: SVehicleItemportInteractionLink
// Size: 0x8
struct DynArray_SVehicleItemportInteractionLink {
    SVehicleItemportInteractionLink* m_data; // Offset: 0x0
};

// Original name: DynArray_SVendingMachineItem
// Generated DynArray for base type: SVendingMachineItem
// Size: 0x8
struct DynArray_SVendingMachineItem {
    SVendingMachineItem* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeaponActionParams
// Generated DynArray for base type: SWeaponActionParams
// Size: 0x8
struct DynArray_SWeaponActionParams {
    SWeaponActionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeaponAttachmentIconPair
// Generated DynArray for base type: SWeaponAttachmentIconPair
// Size: 0x8
struct DynArray_SWeaponAttachmentIconPair {
    SWeaponAttachmentIconPair* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeaponMountGrip
// Generated DynArray for base type: SWeaponMountGrip
// Size: 0x8
struct DynArray_SWeaponMountGrip {
    SWeaponMountGrip* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeaponParticleEffectParams
// Generated DynArray for base type: SWeaponParticleEffectParams
// Size: 0x8
struct DynArray_SWeaponParticleEffectParams {
    SWeaponParticleEffectParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeaponParticleEffectParamsArray
// Generated DynArray for base type: SWeaponParticleEffectParamsArray
// Size: 0x8
struct DynArray_SWeaponParticleEffectParamsArray {
    SWeaponParticleEffectParamsArray* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeaponSequenceEntryParams
// Generated DynArray for base type: SWeaponSequenceEntryParams
// Size: 0x8
struct DynArray_SWeaponSequenceEntryParams {
    SWeaponSequenceEntryParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeightedRewardEntry
// Generated DynArray for base type: SWeightedRewardEntry
// Size: 0x8
struct DynArray_SWeightedRewardEntry {
    SWeightedRewardEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_ScanCustomDataTagEntry
// Generated DynArray for base type: ScanCustomDataTagEntry
// Size: 0x8
struct DynArray_ScanCustomDataTagEntry {
    ScanCustomDataTagEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_ScanEvaluationInfractionSettings
// Generated DynArray for base type: ScanEvaluationInfractionSettings
// Size: 0x8
struct DynArray_ScanEvaluationInfractionSettings {
    ScanEvaluationInfractionSettings* m_data; // Offset: 0x0
};

// Original name: DynArray_ScanInformationDef
// Generated DynArray for base type: ScanInformationDef
// Size: 0x8
struct DynArray_ScanInformationDef {
    ScanInformationDef* m_data; // Offset: 0x0
};

// Original name: DynArray_ScanProcedureParams
// Generated DynArray for base type: ScanProcedureParams
// Size: 0x8
struct DynArray_ScanProcedureParams {
    ScanProcedureParams* m_data; // Offset: 0x0
};

// Original name: DynArray_ScreenEffects_DebugEffect
// Generated DynArray for base type: ScreenEffects_DebugEffect
// Size: 0x8
struct DynArray_ScreenEffects_DebugEffect {
    ScreenEffects_DebugEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_ScreenEffects_DebugParam
// Generated DynArray for base type: ScreenEffects_DebugParam
// Size: 0x8
struct DynArray_ScreenEffects_DebugParam {
    ScreenEffects_DebugParam* m_data; // Offset: 0x0
};

// Original name: DynArray_ScreenEffects_Effect
// Generated DynArray for base type: ScreenEffects_Effect
// Size: 0x8
struct DynArray_ScreenEffects_Effect {
    ScreenEffects_Effect* m_data; // Offset: 0x0
};

// Original name: DynArray_ScreenEffects_Param
// Generated DynArray for base type: ScreenEffects_Param
// Size: 0x8
struct DynArray_ScreenEffects_Param {
    ScreenEffects_Param* m_data; // Offset: 0x0
};

// Original name: DynArray_SecurityClearanceToken
// Generated DynArray for base type: SecurityClearanceToken
// Size: 0x8
struct DynArray_SecurityClearanceToken {
    SecurityClearanceToken* m_data; // Offset: 0x0
};

// Original name: DynArray_SecurityClearanceTokenData
// Generated DynArray for base type: SecurityClearanceTokenData
// Size: 0x8
struct DynArray_SecurityClearanceTokenData {
    SecurityClearanceTokenData* m_data; // Offset: 0x0
};

// Original name: DynArray_SecurityNetworkProtocolOverride
// Generated DynArray for base type: SecurityNetworkProtocolOverride
// Size: 0x8
struct DynArray_SecurityNetworkProtocolOverride {
    SecurityNetworkProtocolOverride* m_data; // Offset: 0x0
};

// Original name: DynArray_SecurityNetworkVariable
// Generated DynArray for base type: SecurityNetworkVariable
// Size: 0x8
struct DynArray_SecurityNetworkVariable {
    SecurityNetworkVariable* m_data; // Offset: 0x0
};

// Original name: DynArray_SecurityNetworkVariableEffects
// Generated DynArray for base type: SecurityNetworkVariableEffects
// Size: 0x8
struct DynArray_SecurityNetworkVariableEffects {
    SecurityNetworkVariableEffects* m_data; // Offset: 0x0
};

// Original name: DynArray_Skill
// Generated DynArray for base type: Skill
// Size: 0x8
struct DynArray_Skill {
    Skill* m_data; // Offset: 0x0
};

// Original name: DynArray_SkinInteractableTemplate
// Generated DynArray for base type: SkinInteractableTemplate
// Size: 0x8
struct DynArray_SkinInteractableTemplate {
    SkinInteractableTemplate* m_data; // Offset: 0x0
};

// Original name: DynArray_SpawnDescription_Entity
// Generated DynArray for base type: SpawnDescription_Entity
// Size: 0x8
struct DynArray_SpawnDescription_Entity {
    SpawnDescription_Entity* m_data; // Offset: 0x0
};

// Original name: DynArray_SpawnDescription_EntityGroup
// Generated DynArray for base type: SpawnDescription_EntityGroup
// Size: 0x8
struct DynArray_SpawnDescription_EntityGroup {
    SpawnDescription_EntityGroup* m_data; // Offset: 0x0
};

// Original name: DynArray_SpawnDescription_EntityOptions
// Generated DynArray for base type: SpawnDescription_EntityOptions
// Size: 0x8
struct DynArray_SpawnDescription_EntityOptions {
    SpawnDescription_EntityOptions* m_data; // Offset: 0x0
};

// Original name: DynArray_SpawnDescription_NPCOption
// Generated DynArray for base type: SpawnDescription_NPCOption
// Size: 0x8
struct DynArray_SpawnDescription_NPCOption {
    SpawnDescription_NPCOption* m_data; // Offset: 0x0
};

// Original name: DynArray_SpawnDescription_NPC_Group
// Generated DynArray for base type: SpawnDescription_NPC_Group
// Size: 0x8
struct DynArray_SpawnDescription_NPC_Group {
    SpawnDescription_NPC_Group* m_data; // Offset: 0x0
};

// Original name: DynArray_SpawnDescription_Ship
// Generated DynArray for base type: SpawnDescription_Ship
// Size: 0x8
struct DynArray_SpawnDescription_Ship {
    SpawnDescription_Ship* m_data; // Offset: 0x0
};

// Original name: DynArray_SpawnDescription_ShipGroup
// Generated DynArray for base type: SpawnDescription_ShipGroup
// Size: 0x8
struct DynArray_SpawnDescription_ShipGroup {
    SpawnDescription_ShipGroup* m_data; // Offset: 0x0
};

// Original name: DynArray_SpawnDescription_ShipOptions
// Generated DynArray for base type: SpawnDescription_ShipOptions
// Size: 0x8
struct DynArray_SpawnDescription_ShipOptions {
    SpawnDescription_ShipOptions* m_data; // Offset: 0x0
};

// Original name: DynArray_SpawnSettingsInventoryItem
// Generated DynArray for base type: SpawnSettingsInventoryItem
// Size: 0x8
struct DynArray_SpawnSettingsInventoryItem {
    SpawnSettingsInventoryItem* m_data; // Offset: 0x0
};

// Original name: DynArray_StarMapObject
// Generated DynArray for base type: StarMapObject
// Size: 0x8
struct DynArray_StarMapObject {
    StarMapObject* m_data; // Offset: 0x0
};

// Original name: DynArray_StarMapObjectType
// Generated DynArray for base type: StarMapObjectType
// Size: 0x8
struct DynArray_StarMapObjectType {
    StarMapObjectType* m_data; // Offset: 0x0
};

// Original name: DynArray_Stat
// Generated DynArray for base type: Stat
// Size: 0x8
struct DynArray_Stat {
    Stat* m_data; // Offset: 0x0
};

// Original name: DynArray_StatInfluence
// Generated DynArray for base type: StatInfluence
// Size: 0x8
struct DynArray_StatInfluence {
    StatInfluence* m_data; // Offset: 0x0
};

// Original name: DynArray_StateTokenRequirements
// Generated DynArray for base type: StateTokenRequirements
// Size: 0x8
struct DynArray_StateTokenRequirements {
    StateTokenRequirements* m_data; // Offset: 0x0
};

// Original name: DynArray_StateTypeStateTokenRequirements
// Generated DynArray for base type: StateTypeStateTokenRequirements
// Size: 0x8
struct DynArray_StateTypeStateTokenRequirements {
    StateTypeStateTokenRequirements* m_data; // Offset: 0x0
};

// Original name: DynArray_SubContract
// Generated DynArray for base type: SubContract
// Size: 0x8
struct DynArray_SubContract {
    SubContract* m_data; // Offset: 0x0
};

// Original name: DynArray_SubHarvestableSlot
// Generated DynArray for base type: SubHarvestableSlot
// Size: 0x8
struct DynArray_SubHarvestableSlot {
    SubHarvestableSlot* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSInput
// Generated DynArray for base type: TQSInput
// Size: 0x8
struct DynArray_TQSInput {
    TQSInput* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSInputBoolValue
// Generated DynArray for base type: TQSInputBoolValue
// Size: 0x8
struct DynArray_TQSInputBoolValue {
    TQSInputBoolValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSInputDynamicVariableValue
// Generated DynArray for base type: TQSInputDynamicVariableValue
// Size: 0x8
struct DynArray_TQSInputDynamicVariableValue {
    TQSInputDynamicVariableValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSInputFloatValue
// Generated DynArray for base type: TQSInputFloatValue
// Size: 0x8
struct DynArray_TQSInputFloatValue {
    TQSInputFloatValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSInputIntValue
// Generated DynArray for base type: TQSInputIntValue
// Size: 0x8
struct DynArray_TQSInputIntValue {
    TQSInputIntValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSInputStringValue
// Generated DynArray for base type: TQSInputStringValue
// Size: 0x8
struct DynArray_TQSInputStringValue {
    TQSInputStringValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSInputTagValue
// Generated DynArray for base type: TQSInputTagValue
// Size: 0x8
struct DynArray_TQSInputTagValue {
    TQSInputTagValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSOption
// Generated DynArray for base type: TQSOption
// Size: 0x8
struct DynArray_TQSOption {
    TQSOption* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSWeightDynamicVariableValue
// Generated DynArray for base type: TQSWeightDynamicVariableValue
// Size: 0x8
struct DynArray_TQSWeightDynamicVariableValue {
    TQSWeightDynamicVariableValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSWeightInput
// Generated DynArray for base type: TQSWeightInput
// Size: 0x8
struct DynArray_TQSWeightInput {
    TQSWeightInput* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSWeightInputFloatValue
// Generated DynArray for base type: TQSWeightInputFloatValue
// Size: 0x8
struct DynArray_TQSWeightInputFloatValue {
    TQSWeightInputFloatValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSWeightInputIntValue
// Generated DynArray for base type: TQSWeightInputIntValue
// Size: 0x8
struct DynArray_TQSWeightInputIntValue {
    TQSWeightInputIntValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSWeightInputTagValue
// Generated DynArray for base type: TQSWeightInputTagValue
// Size: 0x8
struct DynArray_TQSWeightInputTagValue {
    TQSWeightInputTagValue* m_data; // Offset: 0x0
};

// Original name: DynArray_TQSWeightInputValue
// Generated DynArray for base type: TQSWeightInputValue
// Size: 0x8
struct DynArray_TQSWeightInputValue {
    TQSWeightInputValue* m_data; // Offset: 0x0
};

// Original name: DynArray_Tag
// Generated DynArray for base type: Tag
// Size: 0x8
struct DynArray_Tag {
    Tag* m_data; // Offset: 0x0
};

// Original name: DynArray_TagList
// Generated DynArray for base type: TagList
// Size: 0x8
struct DynArray_TagList {
    TagList* m_data; // Offset: 0x0
};

// Original name: DynArray_TagSearchTerm
// Generated DynArray for base type: TagSearchTerm
// Size: 0x8
struct DynArray_TagSearchTerm {
    TagSearchTerm* m_data; // Offset: 0x0
};

// Original name: DynArray_TagToAudioRtpc
// Generated DynArray for base type: TagToAudioRtpc
// Size: 0x8
struct DynArray_TagToAudioRtpc {
    TagToAudioRtpc* m_data; // Offset: 0x0
};

// Original name: DynArray_TagTrigger
// Generated DynArray for base type: TagTrigger
// Size: 0x8
struct DynArray_TagTrigger {
    TagTrigger* m_data; // Offset: 0x0
};

// Original name: DynArray_TagsDNFTerm
// Generated DynArray for base type: TagsDNFTerm
// Size: 0x8
struct DynArray_TagsDNFTerm {
    TagsDNFTerm* m_data; // Offset: 0x0
};

// Original name: DynArray_ThrusterGimbalState
// Generated DynArray for base type: ThrusterGimbalState
// Size: 0x8
struct DynArray_ThrusterGimbalState {
    ThrusterGimbalState* m_data; // Offset: 0x0
};

// Original name: DynArray_TintPalette
// Generated DynArray for base type: TintPalette
// Size: 0x8
struct DynArray_TintPalette {
    TintPalette* m_data; // Offset: 0x0
};

// Original name: DynArray_TransitNodeDialogueContext
// Generated DynArray for base type: TransitNodeDialogueContext
// Size: 0x8
struct DynArray_TransitNodeDialogueContext {
    TransitNodeDialogueContext* m_data; // Offset: 0x0
};

// Original name: DynArray_TraversalCostConditionTags
// Generated DynArray for base type: TraversalCostConditionTags
// Size: 0x8
struct DynArray_TraversalCostConditionTags {
    TraversalCostConditionTags* m_data; // Offset: 0x0
};

// Original name: DynArray_TriggerConditionDef
// Generated DynArray for base type: TriggerConditionDef
// Size: 0x8
struct DynArray_TriggerConditionDef {
    TriggerConditionDef* m_data; // Offset: 0x0
};

// Original name: DynArray_UIAudioEvent
// Generated DynArray for base type: UIAudioEvent
// Size: 0x8
struct DynArray_UIAudioEvent {
    UIAudioEvent* m_data; // Offset: 0x0
};

// Original name: DynArray_UIAudioManufacturer
// Generated DynArray for base type: UIAudioManufacturer
// Size: 0x8
struct DynArray_UIAudioManufacturer {
    UIAudioManufacturer* m_data; // Offset: 0x0
};

// Original name: DynArray_UIAudioParameter
// Generated DynArray for base type: UIAudioParameter
// Size: 0x8
struct DynArray_UIAudioParameter {
    UIAudioParameter* m_data; // Offset: 0x0
};

// Original name: DynArray_UIGraph_Group
// Generated DynArray for base type: UIGraph_Group
// Size: 0x8
struct DynArray_UIGraph_Group {
    UIGraph_Group* m_data; // Offset: 0x0
};

// Original name: DynArray_UIWorldDisplayInputSoundParams
// Generated DynArray for base type: UIWorldDisplayInputSoundParams
// Size: 0x8
struct DynArray_UIWorldDisplayInputSoundParams {
    UIWorldDisplayInputSoundParams* m_data; // Offset: 0x0
};

// Original name: DynArray_UnitTest
// Generated DynArray for base type: UnitTest
// Size: 0x8
struct DynArray_UnitTest {
    UnitTest* m_data; // Offset: 0x0
};

// Original name: DynArray_UsableAlignmentSlot
// Generated DynArray for base type: UsableAlignmentSlot
// Size: 0x8
struct DynArray_UsableAlignmentSlot {
    UsableAlignmentSlot* m_data; // Offset: 0x0
};

// Original name: DynArray_UsableArchetype
// Generated DynArray for base type: UsableArchetype
// Size: 0x8
struct DynArray_UsableArchetype {
    UsableArchetype* m_data; // Offset: 0x0
};

// Original name: DynArray_UsableChannelInputAction
// Generated DynArray for base type: UsableChannelInputAction
// Size: 0x8
struct DynArray_UsableChannelInputAction {
    UsableChannelInputAction* m_data; // Offset: 0x0
};

// Original name: DynArray_UsableChannelInputActionGroup
// Generated DynArray for base type: UsableChannelInputActionGroup
// Size: 0x8
struct DynArray_UsableChannelInputActionGroup {
    UsableChannelInputActionGroup* m_data; // Offset: 0x0
};

// Original name: DynArray_UsableItemPort
// Generated DynArray for base type: UsableItemPort
// Size: 0x8
struct DynArray_UsableItemPort {
    UsableItemPort* m_data; // Offset: 0x0
};

// Original name: DynArray_UsableSlottingSetup
// Generated DynArray for base type: UsableSlottingSetup
// Size: 0x8
struct DynArray_UsableSlottingSetup {
    UsableSlottingSetup* m_data; // Offset: 0x0
};

// Original name: DynArray_UsableUseChannelInstance
// Generated DynArray for base type: UsableUseChannelInstance
// Size: 0x8
struct DynArray_UsableUseChannelInstance {
    UsableUseChannelInstance* m_data; // Offset: 0x0
};

// Original name: DynArray_UsableUseSlot
// Generated DynArray for base type: UsableUseSlot
// Size: 0x8
struct DynArray_UsableUseSlot {
    UsableUseSlot* m_data; // Offset: 0x0
};

// Original name: DynArray_UseChannelArchetype
// Generated DynArray for base type: UseChannelArchetype
// Size: 0x8
struct DynArray_UseChannelArchetype {
    UseChannelArchetype* m_data; // Offset: 0x0
};

// Original name: DynArray_UserArrayElement
// Generated DynArray for base type: UserArrayElement
// Size: 0x8
struct DynArray_UserArrayElement {
    UserArrayElement* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorAutoEquipData
// Generated DynArray for base type: VehicleEditorAutoEquipData
// Size: 0x8
struct DynArray_VehicleEditorAutoEquipData {
    VehicleEditorAutoEquipData* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorGroupData
// Generated DynArray for base type: VehicleEditorGroupData
// Size: 0x8
struct DynArray_VehicleEditorGroupData {
    VehicleEditorGroupData* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorGroupEquipData
// Generated DynArray for base type: VehicleEditorGroupEquipData
// Size: 0x8
struct DynArray_VehicleEditorGroupEquipData {
    VehicleEditorGroupEquipData* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorItemData
// Generated DynArray for base type: VehicleEditorItemData
// Size: 0x8
struct DynArray_VehicleEditorItemData {
    VehicleEditorItemData* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorItemOffsets
// Generated DynArray for base type: VehicleEditorItemOffsets
// Size: 0x8
struct DynArray_VehicleEditorItemOffsets {
    VehicleEditorItemOffsets* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorPortsWithItemData
// Generated DynArray for base type: VehicleEditorPortsWithItemData
// Size: 0x8
struct DynArray_VehicleEditorPortsWithItemData {
    VehicleEditorPortsWithItemData* m_data; // Offset: 0x0
};

// Original name: DynArray_VisorLens_Region
// Generated DynArray for base type: VisorLens_Region
// Size: 0x8
struct DynArray_VisorLens_Region {
    VisorLens_Region* m_data; // Offset: 0x0
};

// Original name: DynArray_VisorLens_Widget
// Generated DynArray for base type: VisorLens_Widget
// Size: 0x8
struct DynArray_VisorLens_Widget {
    VisorLens_Widget* m_data; // Offset: 0x0
};

// Original name: DynArray_WeightedLootArchetype
// Generated DynArray for base type: WeightedLootArchetype
// Size: 0x8
struct DynArray_WeightedLootArchetype {
    WeightedLootArchetype* m_data; // Offset: 0x0
};

// Original name: DynArray_ZeroGTraversalConnection
// Generated DynArray for base type: ZeroGTraversalConnection
// Size: 0x8
struct DynArray_ZeroGTraversalConnection {
    ZeroGTraversalConnection* m_data; // Offset: 0x0
};

// Original name: DynArray_ZeroGTraversalState
// Generated DynArray for base type: ZeroGTraversalState
// Size: 0x8
struct DynArray_ZeroGTraversalState {
    ZeroGTraversalState* m_data; // Offset: 0x0
};

// Original name: DynArray_mobiGlasApp
// Generated DynArray for base type: mobiGlasApp
// Size: 0x8
struct DynArray_mobiGlasApp {
    mobiGlasApp* m_data; // Offset: 0x0
};

// Original name: DynArray_mobiGlasAppRef
// Generated DynArray for base type: mobiGlasAppRef
// Size: 0x8
struct DynArray_mobiGlasAppRef {
    mobiGlasAppRef* m_data; // Offset: 0x0
};

// Original name: DynArray_mobiGlasDefaultAppEntry
// Generated DynArray for base type: mobiGlasDefaultAppEntry
// Size: 0x8
struct DynArray_mobiGlasDefaultAppEntry {
    mobiGlasDefaultAppEntry* m_data; // Offset: 0x0
};

// Original name: DynamicMissionLocation
// Size: 0xc8
// VTable: 0x14996cb98
struct DynamicMissionLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TagSearchTerm* locationTagSearch; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    CryStringT* missionModule; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    DynArray_Tag* locationResourceTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    ARDataType resourcePriority; // Offset: 0x78
    uint8_t _pad_4[0x4]; // Offset: 0x7c
    DynArray_Tag* dynamicLocationTags; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x88
    int32_t maxActiveLocations; // Offset: 0xb0
    float spawnTimeMin; // Offset: 0xb4
    float spawnTimeMax; // Offset: 0xb8
    float activeTimeMin; // Offset: 0xbc
    float activeTimeMax; // Offset: 0xc0
    uint8_t _pad_6[0x4]; // Offset: 0xc4
};

// Original name: DynamicObjectNavigationTriggerAdapter
// Size: 0x38
// VTable: 0x1499ecae8
struct DynamicObjectNavigationTriggerAdapter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minSpeedToBeIgnored; // Offset: 0x8
    bool allowNavMeshCutout; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    TraversalCostConfig optionalCostConfig; // Offset: 0x10
    TraversalCostShapeConfig shapeConfig; // Offset: 0x28
};

// Original name: EAEntityDataParams
// Size: 0x50
// VTable: 0x149a3c248
struct EAEntityDataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType inclusionMode; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    EAEntityInclusionParams inclusionParams; // Offset: 0x10
};

// Original name: EAEntityEntitlement
// Size: 0x70
// VTable: 0x149a3c2a0
struct EAEntityEntitlement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF tagsToMatch; // Offset: 0x8
};

// Original name: EAEntityInclusionParams
// Size: 0x40
// VTable: 0x149a3c1c0
struct EAEntityInclusionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList tags; // Offset: 0x8
};

// Original name: EAEntityMarkerComponentParams
// Size: 0x80
// VTable: 0x149a20400
struct EAEntityMarkerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x18
    CLocIdentifier* description; // Offset: 0x20
    CryStringT* iconPath; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    ARDataType markerType; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    Faction_LEGACY factionTag; // Offset: 0x40
    float activeDistanceTreshold; // Offset: 0x58
    float boxRadius; // Offset: 0x5c
    float fovModifier; // Offset: 0x60
    uint8_t _pad_3[0x4]; // Offset: 0x64
    Vec3 offset; // Offset: 0x68
};

// Original name: EAFactionTeamParams
// Size: 0x28
// VTable: 0x149a3aa20
struct EAFactionTeamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Faction_LEGACY faction; // Offset: 0x8
    bool playersAllowed; // Offset: 0x20
    uint8_t maxPlayers; // Offset: 0x21
    uint8_t _pad_1[0x6]; // Offset: 0x22
};

// Original name: EAMessageTriggerComponentParams
// Size: 0x58
// VTable: 0x149a26e30
struct EAMessageTriggerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType triggerFrequency; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    int32_t phase; // Offset: 0x1c
    Faction faction; // Offset: 0x20
    ARDataType triggerMarkerType; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    SEACriticalMessageDef triggerNotification; // Offset: 0x40
};

// Original name: EAObjectiveControl
// Size: 0x178
// VTable: 0x149a2b118
struct EAObjectiveControl {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* selectSpawnObjective; // Offset: 0x18
    EntityCaptureParams entityCaptureSettings; // Offset: 0x20
    float fullInteractionSpeedMultiplier; // Offset: 0x38
    float teamAssistBoost; // Offset: 0x3c
    float opposingTeamSlowdown; // Offset: 0x40
    float captureDecay; // Offset: 0x44
    int32_t scoreTickTimer; // Offset: 0x48
    int32_t scorePerTerminal; // Offset: 0x4c
    float dominationAwardCooldown; // Offset: 0x50
    float closeCallCaptureRatio; // Offset: 0x54
    Vec2 markerHUDScreenPosition; // Offset: 0x58
    RGBA allyTeamUIColor; // Offset: 0x68
    RGBA enemyTeamUIColor; // Offset: 0x80
    RGBA contestedUIColor; // Offset: 0x98
    RGBA neutralUIColor; // Offset: 0xb0
    int32_t initialPhase; // Offset: 0xc8
    uint8_t _pad_1[0x4]; // Offset: 0xcc
    DynArray_EAObjectiveControlPhase* phasesSettings; // Offset: 0xd0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xd8
    SEACriticalMessageDef phaseSuccessMessage; // Offset: 0x100
    SEACriticalMessageDef phaseFailMessage; // Offset: 0x118
    SEACriticalMessageDef overtimeMessage; // Offset: 0x130
    Faction_LEGACY defendingTeam; // Offset: 0x148
    float minTimeBetweenPhases; // Offset: 0x160
    int32_t extraTime; // Offset: 0x164
    float overloadReminderTime; // Offset: 0x168
    float phaseEndMusicEventTime; // Offset: 0x16c
    int32_t terminalDisabledTime; // Offset: 0x170
    uint8_t _pad_3[0x4]; // Offset: 0x174
};

// Original name: EAObjectiveInteractableComponentDef
// Size: 0x60
// VTable: 0x149a28fd0
struct EAObjectiveInteractableComponentDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_EAObjectiveInteractionDef* interactions; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    float cooldownTime; // Offset: 0x48
    int32_t phase; // Offset: 0x4c
    bool onInitDefaultActive; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
    CLocIdentifier* name; // Offset: 0x58
};

// Original name: EAObjectiveInteractionDef
// Size: 0x48
// VTable: 0x149a28ed8
struct EAObjectiveInteractionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Faction_LEGACY faction; // Offset: 0x8
    ARDataType interactionType; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* objectiveLinkName; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    int32_t onInteractDamageToObjective; // Offset: 0x38
    float onInteractDamageRadius; // Offset: 0x3c
    bool sendDamageDirectly; // Offset: 0x40
    uint8_t _pad_3[0x7]; // Offset: 0x41
};

// Original name: EAPhaseActivePropComponentDef
// Size: 0x130
// VTable: 0x149a27730
struct EAPhaseActivePropComponentDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t sortingPosition; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* name; // Offset: 0x20
    int32_t phase; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    Faction_LEGACY defaultTeam; // Offset: 0x30
    bool scaleMarkerByDistance; // Offset: 0x48
    bool availableToDefaultTeam; // Offset: 0x49
    bool removeMarkerOnCapture; // Offset: 0x4a
    bool showMarker; // Offset: 0x4b
    bool canTriggerOvertime; // Offset: 0x4c
    uint8_t _pad_3[0x3]; // Offset: 0x4d
    CLocIdentifier* percentageString; // Offset: 0x50
    SEACriticalMessageDef capturedNotification; // Offset: 0x58
    SEACriticalMessageDef lostNotification; // Offset: 0x70
    SEACriticalMessageDef neutralizedNotification; // Offset: 0x88
    SEAObjectiveMarkerStatusMessages objectiveMarkerMessages; // Offset: 0xa0
    DynArray_SEAObjectiveMarkerStateSettings* objectiveMarkerSettings; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xf8
    int32_t onInteractDamageToObjective; // Offset: 0x120
    float onInteractDamageRadius; // Offset: 0x124
    float cooldownTime; // Offset: 0x128
    bool ignorePhases; // Offset: 0x12c
    bool remainActive; // Offset: 0x12d
    uint8_t _pad_5[0x2]; // Offset: 0x12e
};

// Original name: EAPhaseBaseComponentDef
// Size: 0x128
// VTable: 0x149a27530
struct EAPhaseBaseComponentDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t sortingPosition; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* name; // Offset: 0x20
    int32_t phase; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    Faction_LEGACY defaultTeam; // Offset: 0x30
    bool scaleMarkerByDistance; // Offset: 0x48
    bool availableToDefaultTeam; // Offset: 0x49
    bool removeMarkerOnCapture; // Offset: 0x4a
    bool showMarker; // Offset: 0x4b
    bool canTriggerOvertime; // Offset: 0x4c
    uint8_t _pad_3[0x3]; // Offset: 0x4d
    CLocIdentifier* percentageString; // Offset: 0x50
    SEACriticalMessageDef capturedNotification; // Offset: 0x58
    SEACriticalMessageDef lostNotification; // Offset: 0x70
    SEACriticalMessageDef neutralizedNotification; // Offset: 0x88
    SEAObjectiveMarkerStatusMessages objectiveMarkerMessages; // Offset: 0xa0
    DynArray_SEAObjectiveMarkerStateSettings* objectiveMarkerSettings; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xf8
    int32_t onInteractDamageToObjective; // Offset: 0x120
    float onInteractDamageRadius; // Offset: 0x124
};

// Original name: EAPhaseObjectiveComponentDef
// Size: 0x188
// VTable: 0x149a27680
struct EAPhaseObjectiveComponentDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t sortingPosition; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* name; // Offset: 0x20
    int32_t phase; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    Faction_LEGACY defaultTeam; // Offset: 0x30
    bool scaleMarkerByDistance; // Offset: 0x48
    bool availableToDefaultTeam; // Offset: 0x49
    bool removeMarkerOnCapture; // Offset: 0x4a
    bool showMarker; // Offset: 0x4b
    bool canTriggerOvertime; // Offset: 0x4c
    uint8_t _pad_3[0x3]; // Offset: 0x4d
    CLocIdentifier* percentageString; // Offset: 0x50
    SEACriticalMessageDef capturedNotification; // Offset: 0x58
    SEACriticalMessageDef lostNotification; // Offset: 0x70
    SEACriticalMessageDef neutralizedNotification; // Offset: 0x88
    SEAObjectiveMarkerStatusMessages objectiveMarkerMessages; // Offset: 0xa0
    DynArray_SEAObjectiveMarkerStateSettings* objectiveMarkerSettings; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xf8
    int32_t onInteractDamageToObjective; // Offset: 0x120
    float onInteractDamageRadius; // Offset: 0x124
    SEACriticalMessageDef captureStartedNotification; // Offset: 0x128
    CLocIdentifier* gamefeedNeutralizedStatus; // Offset: 0x140
    CLocIdentifier* gamefeedCapturedStatus; // Offset: 0x148
    CryStringT* gameTokenName; // Offset: 0x150
    uint8_t _pad_5[0x8]; // Offset: 0x158
    CryStringT* gameTokenValue; // Offset: 0x160
    uint8_t _pad_6[0x8]; // Offset: 0x168
    bool affectsPhaseProgress; // Offset: 0x170
    uint8_t _pad_7[0x7]; // Offset: 0x171
    SObjectiveAnnouncerSettingsDef objectiveAnnouncerParams; // Offset: 0x178
};

// Original name: EAPickupBallisticsParams
// Size: 0x38
// VTable: 0x149a39e10
struct EAPickupBallisticsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float percent; // Offset: 0xc
    int32_t requiredScore; // Offset: 0x10
    bool spawnOnKill; // Offset: 0x14
    bool enabledForFPS; // Offset: 0x15
    bool enabledForVehicles; // Offset: 0x16
    bool allowSpawnOnSuicide; // Offset: 0x17
    EntityClassDefinition entityClass; // Offset: 0x18
    bool split; // Offset: 0x30
    uint8_t _pad_2[0x7]; // Offset: 0x31
};

// Original name: EAPickupBaseParams
// Size: 0x30
// VTable: 0x149a39db8
struct EAPickupBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float percent; // Offset: 0xc
    int32_t requiredScore; // Offset: 0x10
    bool spawnOnKill; // Offset: 0x14
    bool enabledForFPS; // Offset: 0x15
    bool enabledForVehicles; // Offset: 0x16
    bool allowSpawnOnSuicide; // Offset: 0x17
    EntityClassDefinition entityClass; // Offset: 0x18
};

// Original name: EAPickupFuelParams
// Size: 0x30
// VTable: 0x149a39e20
struct EAPickupFuelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float percent; // Offset: 0xc
    int32_t requiredScore; // Offset: 0x10
    bool spawnOnKill; // Offset: 0x14
    bool enabledForFPS; // Offset: 0x15
    bool enabledForVehicles; // Offset: 0x16
    bool allowSpawnOnSuicide; // Offset: 0x17
    EntityClassDefinition entityClass; // Offset: 0x18
};

// Original name: EAPickupKillConfirmedParams
// Size: 0x30
// VTable: 0x149a39e30
struct EAPickupKillConfirmedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float percent; // Offset: 0xc
    int32_t requiredScore; // Offset: 0x10
    bool spawnOnKill; // Offset: 0x14
    bool enabledForFPS; // Offset: 0x15
    bool enabledForVehicles; // Offset: 0x16
    bool allowSpawnOnSuicide; // Offset: 0x17
    EntityClassDefinition entityClass; // Offset: 0x18
};

// Original name: EAPickupMissilesParams
// Size: 0x30
// VTable: 0x149a39e18
struct EAPickupMissilesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float percent; // Offset: 0xc
    int32_t requiredScore; // Offset: 0x10
    bool spawnOnKill; // Offset: 0x14
    bool enabledForFPS; // Offset: 0x15
    bool enabledForVehicles; // Offset: 0x16
    bool allowSpawnOnSuicide; // Offset: 0x17
    EntityClassDefinition entityClass; // Offset: 0x18
};

// Original name: EAPickupModule
// Size: 0x120
// VTable: 0x149a39f80
struct EAPickupModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool ballisticPersistence; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    EAPickupBallisticsParams ballisticsPickupParams; // Offset: 0x20
    bool missilePersistence; // Offset: 0x58
    uint8_t _pad_2[0x7]; // Offset: 0x59
    EAPickupMissilesParams missilesPickupParams; // Offset: 0x60
    EAPickupFuelParams fuelPickupParams; // Offset: 0x90
    EAPickupRepairParams repairPickupParams; // Offset: 0xc0
    EAPickupKillConfirmedParams killConfirmedParams; // Offset: 0xf0
};

// Original name: EAPickupRepairParams
// Size: 0x30
// VTable: 0x149a39e28
struct EAPickupRepairParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float percent; // Offset: 0xc
    int32_t requiredScore; // Offset: 0x10
    bool spawnOnKill; // Offset: 0x14
    bool enabledForFPS; // Offset: 0x15
    bool enabledForVehicles; // Offset: 0x16
    bool allowSpawnOnSuicide; // Offset: 0x17
    EntityClassDefinition entityClass; // Offset: 0x18
};

// Original name: EAStaticLoadoutDummy
// Size: 0x20
// VTable: 0x149a58220
struct EAStaticLoadoutDummy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LoadoutDummyComponentParams params; // Offset: 0x8
};

// Original name: EATeamsModuleParams
// Size: 0x50
// VTable: 0x149a3ab48
struct EATeamsModuleParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool allowSwitch; // Offset: 0x18
    bool allowFriendlyFire; // Offset: 0x19
    bool replaceTeamNamesWithPlayerNames; // Offset: 0x1a
    ARDataType autoFillType; // Offset: 0x1b
    int32_t maxTeamDiff; // Offset: 0x1c
    DynArray_EAFactionTeamParams* teams; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: EVAConnection
// Size: 0x30
// VTable: 0x149aac7e8
struct EVAConnection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool waitUntillFinished; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float delaySeconds; // Offset: 0xc
    CryStringT* waitForEvent; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    EVAState nextState; // Offset: 0x20
};

// Original name: EVAGraph
// Size: 0x38
// VTable: 0x149aac910
struct EVAGraph {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EVAState* EVAStates; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: EVAState
// Size: 0x60
// VTable: 0x149aac8b8
struct EVAState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* mannequinTags; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* mannequinFragment; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    DynArray_EVAConnection* connections; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
};

// Original name: ElectricalBehavior
// Size: 0x80
// VTable: 0x149979778
struct ElectricalBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LightningBehavior lightning; // Offset: 0x8
    Behavior_ElectricalVehicleEffectParams vehicleEffects; // Offset: 0x40
};

// Original name: ElectricalRoomExtension
// Size: 0x30
// VTable: 0x149978fe8
struct ElectricalRoomExtension {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ElectricalStateBase state; // Offset: 0x8
    ElectricalBehavior behavior; // Offset: 0x18
};

// Original name: ElevatorEffectParams
// Size: 0xc8
// VTable: 0x1499f3198
struct ElevatorEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag startTrigger; // Offset: 0x8
    Tag stopTrigger; // Offset: 0x20
    Tag rampUpTrigger; // Offset: 0x38
    Tag fullSpeedTrigger; // Offset: 0x50
    Tag rampDownTrigger; // Offset: 0x68
    Tag inTransitTag; // Offset: 0x80
    Tag powerUpTrigger; // Offset: 0x98
    Tag powerDownTrigger; // Offset: 0xb0
};

// Original name: ElevatorPathNodeGatewayParams
// Size: 0x38
// VTable: 0x1499f2ec8
struct ElevatorPathNodeGatewayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timingInTransit; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SSharedInteractionParams interaction; // Offset: 0x10
    uint8_t _pad_2[0x18]; // Offset: 0x20
};

// Original name: EmissionsScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7c18
struct EmissionsScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: EnemyAwarenessConfig
// Size: 0x38
// VTable: 0x1499b56c8
struct EnemyAwarenessConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicParameter numAwareEnemiesParameter; // Offset: 0x8
    MusicLogicParameter numInCombatEnemiesParameter; // Offset: 0x20
};

// Original name: EntitityEffectSystem_StaticColor
// Size: 0x38
// VTable: 0x1499992d8
struct EntitityEffectSystem_StaticColor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag parameterName; // Offset: 0x8
    RGB color; // Offset: 0x20
};

// Original name: EntitityEffectSystem_StaticFloat
// Size: 0x28
// VTable: 0x149999358
struct EntitityEffectSystem_StaticFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag parameterName; // Offset: 0x8
    float value; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: EntityAudioControllerTypeParams
// Size: 0x18
// VTable: 0x1499b0dc0
struct EntityAudioControllerTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityAudioControllerParams audioControllerParams; // Offset: 0x8
};

// Original name: EntityClassDefinition
// Size: 0xd8
// VTable: 0x1499b0888
struct EntityClassDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Category; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* Icon; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool Invisible; // Offset: 0x28
    bool BBoxSelection; // Offset: 0x29
    uint8_t _pad_3[0x6]; // Offset: 0x2a
    DynArray_Tag* tags; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
    SEntityDensityClass entityDensityClass; // Offset: 0x60
    DynArray_DataForgeComponentParams* Components; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x80
    DynArray_EntityClassStaticDataParams* StaticEntityClassData; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xb0
};

// Original name: EntityClassMigration
// Size: 0x70
// VTable: 0x1499b09d8
struct EntityClassMigration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition Source; // Offset: 0x8
    EntityClassDefinition Target; // Offset: 0x20
    DynArray_ComponentMigration* Components; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
    ARDataType Validation; // Offset: 0x68
    uint8_t _pad_2[0x4]; // Offset: 0x6c
};

// Original name: EntityComponentAsteroidVolumeParams
// Size: 0x40
// VTable: 0x149979808
struct EntityComponentAsteroidVolumeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    AsteroidStateBase state; // Offset: 0x18
    AsteroidBehavior behavior; // Offset: 0x28
};

// Original name: EntityComponentAttachableGadgetUIProviderParams
// Size: 0x48
// VTable: 0x1499f7420
struct EntityComponentAttachableGadgetUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams activationInteraction; // Offset: 0x18
    SSharedInteractionParams deactivationInteraction; // Offset: 0x28
    SSharedInteractionParams minigameStartInteraction; // Offset: 0x38
};

// Original name: EntityComponentAttachableModifierParams
// Size: 0x88
// VTable: 0x1499f72c8
struct EntityComponentAttachableModifierParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_BaseItemModifierParams* modifiers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    ARDataType activationMethod; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    SSharedInteractionParams activationInteraction; // Offset: 0x50
    SSharedInteractionParams deactivationInteraction; // Offset: 0x60
    int32_t charges; // Offset: 0x70
    bool canInterrupt; // Offset: 0x74
    bool isInterruptible; // Offset: 0x75
    uint8_t _pad_3[0x2]; // Offset: 0x76
    CryStringT* icon; // Offset: 0x78
    uint8_t _pad_4[0x8]; // Offset: 0x80
};

// Original name: EntityComponentAudioEnvironmentFeedbackParams
// Size: 0x48
// VTable: 0x149a1a7f0
struct EntityComponentAudioEnvironmentFeedbackParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_EnvironmentFeedbackAudioObject* audioObjects; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: EntityComponentAudioEnvironmentFeedbackPointParams
// Size: 0x30
// VTable: 0x1499df9e0
struct EntityComponentAudioEnvironmentFeedbackPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    AudioEnvironmentFeedbackPointDef feedbackPointDef; // Offset: 0x18
};

// Original name: EntityComponentAudioHitListenerParams
// Size: 0x38
// VTable: 0x1499e0038
struct EntityComponentAudioHitListenerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool calculateOnlyWhenPlayerContained; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    AudioHitListenerDefinition hitListenerDefinition; // Offset: 0x20
};

// Original name: EntityComponentCharacterCustomizerParams
// Size: 0x528
// VTable: 0x149a0e980
struct EntityComponentCharacterCustomizerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    EntityReferenceDef cameraRigRoot; // Offset: 0x18
    SFaceHighlightingParams playerHighlightingParams; // Offset: 0x30
    SFaceHighlightingParams currentEditFaceHighlightingParams; // Offset: 0x58
    EntityReferenceDef headLibraryTagPoint; // Offset: 0x80
    EntityReferenceDef cameraParent; // Offset: 0x98
    EntityReferenceDef zoomNavSpline; // Offset: 0xb0
    float libraryDeselectDelayTime; // Offset: 0xc8
    int32_t libraryHeadCount; // Offset: 0xcc
    DynArray_SCharacterCustomizerDNARegionParams* customizerDNARegions; // Offset: 0xd0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0xd8
    DynArray_SCharacterCustomizerBodyTypeParams* bodyTypes; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x108
    EntityClassDefinition blankSkinVariant; // Offset: 0x130
    SCharacterCustomizerControlParams controlParams; // Offset: 0x148
    SCharacterCustomizerMaterialEditParams materialEditingParams; // Offset: 0x1b0
    bool headLibraryRollOnTriggers; // Offset: 0x250
    uint8_t _pad_3[0x7]; // Offset: 0x251
    DynArray_SCharacterCustomizerDNAHeadPool* dnaBlendingPools; // Offset: 0x258 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x260
    DynArray_SCharacterCustomizerDNAHeadPool* faceSculptingExclusionPools; // Offset: 0x288 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x290
    SCharacterCustomizerHeadLibraryParams featureLibraryParams; // Offset: 0x2b8
    SCharacterCustomizerHeadLibraryParams dnaHeadLibraryParams; // Offset: 0x338
    SCharacterCustomizerClippingVolumeParams dnaClippingVolumeParams; // Offset: 0x3b8
    DynArray_SCharacterCustomizerVoiceParams* voiceOptions; // Offset: 0x3e0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x3e8
    SCharacterCustomizerAllowedClasses allowedClasses; // Offset: 0x410
    DynArray_CryStringT* featureItemTags; // Offset: 0x428 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x430
    bool serializeToNetwork; // Offset: 0x458
    uint8_t _pad_8[0x3]; // Offset: 0x459
    float serializationTimeout; // Offset: 0x45c
    DynArray_SCharacterCustomizerLoadoutItemReplacementMapping* loadoutReplacements; // Offset: 0x460 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x468
    bool updatePlayerEntity; // Offset: 0x490
    bool clearAllPlayerLoadout; // Offset: 0x491
    uint8_t _pad_10[0x6]; // Offset: 0x492
    EntityReferenceDef cameraEntity; // Offset: 0x498
    SCharacterCustomizerDialogueData dialogueData; // Offset: 0x4b0
    DynArray_SCharacterCustomizerStep* flowSteps; // Offset: 0x4c8 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x4d0
    DynArray_SCustomizableMaterialParams* customizableMaterials; // Offset: 0x4f8 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x500
};

// Original name: EntityComponentEffects_Test_ColorLink
// Size: 0x38
// VTable: 0x1499996c8
struct EntityComponentEffects_Test_ColorLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    Tag parameter; // Offset: 0x20
};

// Original name: EntityComponentEffects_Test_Link
// Size: 0x28
// VTable: 0x149999648
struct EntityComponentEffects_Test_Link {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Tag parameter; // Offset: 0x10
};

// Original name: EntityComponentEffects_Test_Tag
// Size: 0x30
// VTable: 0x149999510
struct EntityComponentEffects_Test_Tag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Tag tag; // Offset: 0x10
    bool forceStop; // Offset: 0x28
    uint8_t _pad_2[0x7]; // Offset: 0x29
};

// Original name: EntityComponentEffects_Test_Trigger
// Size: 0x30
// VTable: 0x1499995c0
struct EntityComponentEffects_Test_Trigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Tag trigger; // Offset: 0x10
    bool forceStop; // Offset: 0x28
    uint8_t _pad_2[0x7]; // Offset: 0x29
};

// Original name: EntityComponentFrontendUIProviderParams
// Size: 0x60
// VTable: 0x1499f9cd8
struct EntityComponentFrontendUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SFrontendGameModeButton* frontendGameModeButtons; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    FrontendOverrideParams overrideFrontendParam; // Offset: 0x48
};

// Original name: EntityComponentLegacyCrafterParams
// Size: 0xb8
// VTable: 0x149a0f638
struct EntityComponentLegacyCrafterParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    LegacyCraftingRecipeList_Base recipeList; // Offset: 0x18
    SItemPortDef screenPort; // Offset: 0x28
    DynArray_SItemPortDef* outputEntityPorts; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
    DynArray_LegacyCrafterContainerPort* containerPorts; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x70
    LegacyCrafterInteractions itemInteractions; // Offset: 0x98
    LegacyCrafterInteractions resourceInteractions; // Offset: 0xa8
};

// Original name: EntityComponentMisfireParams
// Size: 0xb8
// VTable: 0x149a091f8
struct EntityComponentMisfireParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* itemLocId; // Offset: 0x18
    float maxWindowLength; // Offset: 0x20
    float minWindowLength; // Offset: 0x24
    DynArray_SMisfireCondition* triggerConditions; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    DynArray_SMisfireLevelParams* misfireLevels; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
    DynArray_SMisfireEffect* misfires; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x90
};

// Original name: EntityComponentSpawnClosetParams
// Size: 0x60
// VTable: 0x1499e4598
struct EntityComponentSpawnClosetParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    TagList supportedTags; // Offset: 0x18
    float maxSpawnsPerMinute; // Offset: 0x50
    float requestHoldSeconds; // Offset: 0x54
    bool defaultDoorsOpen; // Offset: 0x58
    uint8_t _pad_1[0x7]; // Offset: 0x59
};

// Original name: EntityComponentSpawnClosetRoomParams
// Size: 0x60
// VTable: 0x1499e4680
struct EntityComponentSpawnClosetRoomParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    TagList supportedTags; // Offset: 0x18
    float maxSpawnsPerMinute; // Offset: 0x50
    float requestHoldSeconds; // Offset: 0x54
    bool defaultDoorsOpen; // Offset: 0x58
    uint8_t _pad_1[0x7]; // Offset: 0x59
};

// Original name: EntityComponentSpawnClosetTransitManagerParams
// Size: 0x60
// VTable: 0x1499e4668
struct EntityComponentSpawnClosetTransitManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    TagList supportedTags; // Offset: 0x18
    float maxSpawnsPerMinute; // Offset: 0x50
    float requestHoldSeconds; // Offset: 0x54
    bool defaultDoorsOpen; // Offset: 0x58
    uint8_t _pad_1[0x7]; // Offset: 0x59
};

// Original name: EntityComponentTriggerableDevicesParams
// Size: 0x88
// VTable: 0x149a70370
struct EntityComponentTriggerableDevicesParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_STriggerableDevicesTriggerParams* triggers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_STriggerableDevicesTriggerParams* aiTriggers; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    STriggerableDevicesBehaviorParams deathBehavior; // Offset: 0x78
};

// Original name: EntityDefaultLoadoutParams
// Size: 0x18
// VTable: 0x1499a6eb0
struct EntityDefaultLoadoutParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortLoadoutBaseParams loadout; // Offset: 0x8
};

// Original name: EntityEffectSystem_DisableSequencerTask
// Size: 0x38
// VTable: 0x149998dd0
struct EntityEffectSystem_DisableSequencerTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    Tag tag; // Offset: 0x20
};

// Original name: EntityEffectSystem_EnableSequencerTask
// Size: 0x38
// VTable: 0x149998d70
struct EntityEffectSystem_EnableSequencerTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    Tag tag; // Offset: 0x20
};

// Original name: EntityEffectSystem_LightCategory
// Size: 0x70
// VTable: 0x14999a698
struct EntityEffectSystem_LightCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool allowMultipleTags; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    DynArray_EntityEffectSystem_LightTagEffect* tagEffects; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_EntityEffectSystem_LightTriggerEffect* triggerEffects; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: EntityEffectSystem_LightEffect
// Size: 0x268
// VTable: 0x14999a530
struct EntityEffectSystem_LightEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x20
    DynArray_EntityEffectSystem_LightPropertyLink* propertyLinks; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    RGB color; // Offset: 0x60
    bool useTemperature; // Offset: 0x78
    uint8_t _pad_4[0x3]; // Offset: 0x79
    float colorTemperature; // Offset: 0x7c
    float diffuseMultiplier; // Offset: 0x80
    uint8_t viewDistanceRatio; // Offset: 0x84
    bool castShadow; // Offset: 0x85
    uint8_t _pad_5[0x2]; // Offset: 0x86
    ARDataType shadowQualityCap; // Offset: 0x88
    float maxShadowCastDistance; // Offset: 0x8c
    bool ambient; // Offset: 0x90
    bool softBulb; // Offset: 0x91
    bool fakeLight; // Offset: 0x92
    bool affectsFog; // Offset: 0x93
    bool affectsGI; // Offset: 0x94
    bool affectThisAreaOnly; // Offset: 0x95
    bool holographic; // Offset: 0x96
    bool visibleThirdPerson; // Offset: 0x97
    bool visibleFirstPerson; // Offset: 0x98
    bool distantImposter; // Offset: 0x99
    bool visibleShadows; // Offset: 0x9a
    uint8_t _pad_6[0x1]; // Offset: 0x9b
    ARDataType lightImportance; // Offset: 0x9c
    EntityEffectSystem_LightType lightType; // Offset: 0xa0
    EntityEffectSystem_LightLink lightLink; // Offset: 0xb0
    LightFlareParams flare; // Offset: 0xc0
    uint8_t _pad_7[0x178]; // Offset: 0xf0
};

// Original name: EntityEffectSystem_LightPropertyLink
// Size: 0x60
// VTable: 0x149999de0
struct EntityEffectSystem_LightPropertyLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEntityEffectSystem_PropertyModifier* modifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Tag parameterName; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x50
    ARDataType lightProperty; // Offset: 0x58
    uint8_t _pad_3[0x4]; // Offset: 0x5c
};

// Original name: EntityEffectSystem_LightTagEffect
// Size: 0x280
// VTable: 0x14999a610
struct EntityEffectSystem_LightTagEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x20
    DynArray_EntityEffectSystem_LightPropertyLink* propertyLinks; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    RGB color; // Offset: 0x60
    bool useTemperature; // Offset: 0x78
    uint8_t _pad_4[0x3]; // Offset: 0x79
    float colorTemperature; // Offset: 0x7c
    float diffuseMultiplier; // Offset: 0x80
    uint8_t viewDistanceRatio; // Offset: 0x84
    bool castShadow; // Offset: 0x85
    uint8_t _pad_5[0x2]; // Offset: 0x86
    ARDataType shadowQualityCap; // Offset: 0x88
    float maxShadowCastDistance; // Offset: 0x8c
    bool ambient; // Offset: 0x90
    bool softBulb; // Offset: 0x91
    bool fakeLight; // Offset: 0x92
    bool affectsFog; // Offset: 0x93
    bool affectsGI; // Offset: 0x94
    bool affectThisAreaOnly; // Offset: 0x95
    bool holographic; // Offset: 0x96
    bool visibleThirdPerson; // Offset: 0x97
    bool visibleFirstPerson; // Offset: 0x98
    bool distantImposter; // Offset: 0x99
    bool visibleShadows; // Offset: 0x9a
    uint8_t _pad_6[0x1]; // Offset: 0x9b
    ARDataType lightImportance; // Offset: 0x9c
    EntityEffectSystem_LightType lightType; // Offset: 0xa0
    EntityEffectSystem_LightLink lightLink; // Offset: 0xb0
    LightFlareParams flare; // Offset: 0xc0
    uint8_t _pad_7[0x178]; // Offset: 0xf0
    Tag tag; // Offset: 0x268
};

// Original name: EntityEffectSystem_LightTriggerEffect
// Size: 0x288
// VTable: 0x14999a5b8
struct EntityEffectSystem_LightTriggerEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x20
    DynArray_EntityEffectSystem_LightPropertyLink* propertyLinks; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    RGB color; // Offset: 0x60
    bool useTemperature; // Offset: 0x78
    uint8_t _pad_4[0x3]; // Offset: 0x79
    float colorTemperature; // Offset: 0x7c
    float diffuseMultiplier; // Offset: 0x80
    uint8_t viewDistanceRatio; // Offset: 0x84
    bool castShadow; // Offset: 0x85
    uint8_t _pad_5[0x2]; // Offset: 0x86
    ARDataType shadowQualityCap; // Offset: 0x88
    float maxShadowCastDistance; // Offset: 0x8c
    bool ambient; // Offset: 0x90
    bool softBulb; // Offset: 0x91
    bool fakeLight; // Offset: 0x92
    bool affectsFog; // Offset: 0x93
    bool affectsGI; // Offset: 0x94
    bool affectThisAreaOnly; // Offset: 0x95
    bool holographic; // Offset: 0x96
    bool visibleThirdPerson; // Offset: 0x97
    bool visibleFirstPerson; // Offset: 0x98
    bool distantImposter; // Offset: 0x99
    bool visibleShadows; // Offset: 0x9a
    uint8_t _pad_6[0x1]; // Offset: 0x9b
    ARDataType lightImportance; // Offset: 0x9c
    EntityEffectSystem_LightType lightType; // Offset: 0xa0
    EntityEffectSystem_LightLink lightLink; // Offset: 0xb0
    LightFlareParams flare; // Offset: 0xc0
    uint8_t _pad_7[0x178]; // Offset: 0xf0
    float duration; // Offset: 0x268
    uint8_t _pad_8[0x4]; // Offset: 0x26c
    Tag trigger; // Offset: 0x270
};

// Original name: EntityEffectSystem_MaterialCategory
// Size: 0x70
// VTable: 0x14999a8d8
struct EntityEffectSystem_MaterialCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool allowMultipleTags; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    DynArray_EntityEffectSystem_MaterialTagEffect* tagEffects; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_EntityEffectSystem_MaterialTriggerEffect* triggerEffects; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: EntityEffectSystem_MaterialEffect
// Size: 0xc8
// VTable: 0x14999a770
struct EntityEffectSystem_MaterialEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_EntityEffectSystem_MaterialPropertyLink* propertyLinks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0xa0]; // Offset: 0x28
};

// Original name: EntityEffectSystem_MaterialPropertyLink
// Size: 0x70
// VTable: 0x14999a718
struct EntityEffectSystem_MaterialPropertyLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEntityEffectSystem_PropertyModifier* modifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Tag parameterName; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x50
    ARDataType materialProperty; // Offset: 0x58
    uint8_t _pad_3[0x4]; // Offset: 0x5c
    CryStringT* subMeshName; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
};

// Original name: EntityEffectSystem_MaterialTagEffect
// Size: 0xe0
// VTable: 0x14999a850
struct EntityEffectSystem_MaterialTagEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_EntityEffectSystem_MaterialPropertyLink* propertyLinks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0xa0]; // Offset: 0x28
    Tag tag; // Offset: 0xc8
};

// Original name: EntityEffectSystem_MaterialTriggerEffect
// Size: 0xe8
// VTable: 0x14999a7f8
struct EntityEffectSystem_MaterialTriggerEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_EntityEffectSystem_MaterialPropertyLink* propertyLinks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0xa0]; // Offset: 0x28
    float duration; // Offset: 0xc8
    uint8_t _pad_4[0x4]; // Offset: 0xcc
    Tag trigger; // Offset: 0xd0
};

// Original name: EntityEffectSystem_ToggleSequencerTask
// Size: 0x38
// VTable: 0x149998d10
struct EntityEffectSystem_ToggleSequencerTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    Tag tag; // Offset: 0x20
};

// Original name: EntityPhysicalAudioParams
// Size: 0x328
// VTable: 0x1499df968
struct EntityPhysicalAudioParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_PhysicalAudioCollisionTrigger* collisionTriggers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    GlobalResourceAudio slideStartTrigger; // Offset: 0x48
    GlobalResourceAudio slideStopTrigger; // Offset: 0x68
    GlobalResourceAudio rollStartTrigger; // Offset: 0x88
    GlobalResourceAudio rollStopTrigger; // Offset: 0xa8
    GlobalResourceAudio movementStartTrigger; // Offset: 0xc8
    GlobalResourceAudio movementStopTrigger; // Offset: 0xe8
    GlobalResourceAudio pickupTrigger; // Offset: 0x108
    GlobalResourceAudio pickFromOwnerTrigger; // Offset: 0x128
    GlobalResourceAudio dropTrigger; // Offset: 0x148
    GlobalResourceAudio placeTrigger; // Offset: 0x168
    AudioRtpc rtpcSlideVelocity; // Offset: 0x188
    AudioRtpc rtpcMassSelf; // Offset: 0x1a8
    AudioRtpc rtpcMassOther; // Offset: 0x1c8
    AudioRtpc rtpcDampening; // Offset: 0x1e8
    AudioRtpc rtpcRollVelocity; // Offset: 0x208
    AudioRtpc rtpcHealth; // Offset: 0x228
    AudioRtpc rtpcMovement; // Offset: 0x248
    AudioRtpc rtpcRotation; // Offset: 0x268
    AudioRtpc rtpcTimeSinceLastOneshot; // Offset: 0x288
    AudioRtpc rtpcMomentum; // Offset: 0x2a8
    AudioRtpc rtpcCarried; // Offset: 0x2c8
    float minimumImpulseContinuous; // Offset: 0x2e8
    float minimumImpulseTransient; // Offset: 0x2ec
    float minimumVelocityNoImpulse; // Offset: 0x2f0
    float slideThreshold; // Offset: 0x2f4
    float rollThreshold; // Offset: 0x2f8
    float momentumScale; // Offset: 0x2fc
    bool useAABBCentre; // Offset: 0x300
    uint8_t _pad_2[0x7]; // Offset: 0x301
    Tag oneShotTag; // Offset: 0x308
    float oneShotCooldown; // Offset: 0x320
    bool dragOnly; // Offset: 0x324
    uint8_t _pad_3[0x3]; // Offset: 0x325
};

// Original name: EntityTemperature
// Size: 0xe8
// VTable: 0x1499e5f38
struct EntityTemperature {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float initialTemperature; // Offset: 0xc
    float coolingEqualizationMultiplier; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    EntityTemperatureSignature signatureParams; // Offset: 0x18
    EntityTemperatureItemResource itemResourceParams; // Offset: 0x30
    Range misfireTemperatureRange; // Offset: 0xb0
    float internalTemperatureGeneration; // Offset: 0xc0
    uint8_t _pad_3[0x4]; // Offset: 0xc4
    EntityFireHazard fireHazard; // Offset: 0xc8
};

// Original name: EntityTemperatureItemResource
// Size: 0x80
// VTable: 0x1499e5d18
struct EntityTemperatureItemResource {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minOperatingTemperature; // Offset: 0x8
    float minCoolingTemperature; // Offset: 0xc
    bool enableOverheat; // Offset: 0x10
    uint8_t _pad_1[0x3]; // Offset: 0x11
    float overheatTemperature; // Offset: 0x14
    float overheatWarningTemperature; // Offset: 0x18
    float overheatRecoveryTemperature; // Offset: 0x1c
    DynArray_EntityTemperatureResourceHeatGeneration* stateHeatGenerationValues; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    DynArray_DegradationTemperatureMultiplier* degradationTemperatureMultipliers; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
};

// Original name: EntityTemperatureResourceHeatGeneration
// Size: 0x20
// VTable: 0x1499e5ba8
struct EntityTemperatureResourceHeatGeneration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceState state; // Offset: 0x8
    float baselineTemperatureChange; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: EntityTemperatureStateModifier
// Size: 0x38
// VTable: 0x1499c1b50
struct EntityTemperatureStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRangeStateLevel* stateRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: EntryOptionalData_SpawnWith
// Size: 0x90
// VTable: 0x1499b3b30
struct EntryOptionalData_SpawnWith {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    TagsDNFTerm tagsToMatch; // Offset: 0x18
    ARDataType mode; // Offset: 0x80
    int32_t min; // Offset: 0x84
    int32_t max; // Offset: 0x88
    uint8_t _pad_2[0x4]; // Offset: 0x8c
};

// Original name: EnvironmentFeedbackAudioObject
// Size: 0x50
// VTable: 0x149a1a798
struct EnvironmentFeedbackAudioObject {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* boneName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 attachOffset; // Offset: 0x18
    bool updatePosition; // Offset: 0x30
    uint8_t _pad_2[0x7]; // Offset: 0x31
    AudioEnvironmentFeedbackPointDef feedbackPointDef; // Offset: 0x38
};

// Original name: EscortParams
// Size: 0xa8
// VTable: 0x149a16ab8
struct EscortParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType serviceBeaconType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* serviceBeaconName; // Offset: 0x20
    int32_t beaconTaxPercentage; // Offset: 0x28
    int32_t beaconMaxPaymentAmount; // Offset: 0x2c
    MissionPropertyValue_AIName npcRequesterNameDef; // Offset: 0x30
    SServiceBeaconCreatorParams playerCreatorParams; // Offset: 0x78
    SServiceBeaconCreatorParamsBase npcCreatorParams; // Offset: 0x88
    CLocIdentifier* objectiveTitle; // Offset: 0x98
    CLocIdentifier* objectiveDescription; // Offset: 0xa0
};

// Original name: ExplosionParams
// Size: 0x1c0
// VTable: 0x149a9da58
struct ExplosionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType friendlyFire; // Offset: 0x8
    float minRadius; // Offset: 0xc
    float maxRadius; // Offset: 0x10
    float soundRadius; // Offset: 0x14
    float minPhysRadius; // Offset: 0x18
    float maxPhysRadius; // Offset: 0x1c
    float angle; // Offset: 0x20
    float angleVertical; // Offset: 0x24
    Vec3 explosionFront; // Offset: 0x28
    Vec3 explosionUp; // Offset: 0x40
    float pressure; // Offset: 0x58
    float holeSize; // Offset: 0x5c
    float terrainHoleSize; // Offset: 0x60
    float maxblurdist; // Offset: 0x64
    float effectScale; // Offset: 0x68
    float effectScaleMin; // Offset: 0x6c
    float effectScaleMax; // Offset: 0x70
    bool useRandomScale; // Offset: 0x74
    uint8_t _pad_1[0x3]; // Offset: 0x75
    DamageBase damage; // Offset: 0x78
    CryStringT* hitType; // Offset: 0x88
    uint8_t _pad_2[0x8]; // Offset: 0x90
    GlobalResourceParticle effect; // Offset: 0x98
    GlobalResourceParticle failedEffect; // Offset: 0xb0
    CryStringT* customMaterialEffect; // Offset: 0xc8
    uint8_t _pad_3[0x8]; // Offset: 0xd0
    GlobalResourceAudio sound; // Offset: 0xd8
    GlobalResourceAudio failedSound; // Offset: 0xf8
    ExplosionFlashbangParams flashbangParams; // Offset: 0x118
    ShockwaveParams shockwaveParams; // Offset: 0x128
    MaterialEffectEntry materialEffectEntry; // Offset: 0x138
    Vec3 Offset; // Offset: 0x148
    Vec3 Direction; // Offset: 0x160
    float particleStrength; // Offset: 0x178
    uint8_t _pad_4[0x4]; // Offset: 0x17c
    RadarContactTypeEntry radarContactType; // Offset: 0x180
    uint8_t _pad_5[0x28]; // Offset: 0x198
};

// Original name: ExplosionRecord
// Size: 0x1c8
// VTable: 0x149a9dab0
struct ExplosionRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ExplosionParams explosionParams; // Offset: 0x8
};

// Original name: ExtendedNameData
// Size: 0x38
// VTable: 0x149a93330
struct ExtendedNameData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ExtendedNameEntry* entries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ExtendedNameDatabase
// Size: 0x38
// VTable: 0x149a93390
struct ExtendedNameDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ExtendedNameData* data; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ExtendedNameEntry
// Size: 0x30
// VTable: 0x149a932d8
struct ExtendedNameEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    ExtendedNameEntryTextBase text; // Offset: 0x20
};

// Original name: Faction
// Size: 0xd0
// VTable: 0x149a8b068
struct Faction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    ARDataType defaultReaction; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_Faction* alliedFactions; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    DynArray_Faction* enemyFactions; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
    DynArray_FriendlyFireReactionOverride* friendlyFireBehaviorOverrides; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x88
    ARDataType factionType; // Offset: 0xb0
    bool ableToArrest; // Offset: 0xb4
    bool policesLawfulTrespass; // Offset: 0xb5
    bool policesCriminality; // Offset: 0xb6
    bool noLegalRights; // Offset: 0xb7
    FactionReputation factionReputationRef; // Offset: 0xb8
};

// Original name: FactionRelationship
// Size: 0x28
// VTable: 0x1499d0c38
struct FactionRelationship {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Faction_LEGACY faction; // Offset: 0x8
    ARDataType reactionType; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: FactionReputation
// Size: 0x1f8
// VTable: 0x149a97f28
struct FactionReputation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
    uint64_t GEID; // Offset: 0x20
    CryStringT* logo; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    bool hideInDelpihApp; // Offset: 0x38
    bool isNPC; // Offset: 0x39
    uint8_t _pad_3[0x6]; // Offset: 0x3a
    SReputationContextUI reputationContextPropertiesUI; // Offset: 0x40
    DynArray_FactionReputation* allies; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x60
    DynArray_FactionReputation* enemies; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x90
    RelationStandingParams hostilityParams; // Offset: 0xb8
    RelationStandingParams alliedParams; // Offset: 0x110
    DynArray_SReputationContextBBPropertyParams* propertiesBB; // Offset: 0x168 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x170
    DynArray_SPerkReputationListParams* perkReputationRewardList; // Offset: 0x198 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x1a0
    DynArray_SandboxTriggerBaseDef* sandboxTriggers; // Offset: 0x1c8 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x1d0
};

// Original name: FactionScanProcedureParams
// Size: 0x30
// VTable: 0x1499c79f8
struct FactionScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: Faction_LEGACY
// Size: 0x108
// VTable: 0x1499d0e28
struct Faction_LEGACY {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    CryStringT* factionIcon; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* gameToken; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    ARDataType defaultReaction; // Offset: 0x38
    uint8_t _pad_3[0x4]; // Offset: 0x3c
    DynArray_FriendlyFireReactionOverride* friendlyFireBehaviorOverrides; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x48
    DynArray_FactionRelationship* factionRelationships; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x78
    TagsDNF disguiseManufacturerTags; // Offset: 0xa0
};

// Original name: FireAreaHazards
// Size: 0x20
// VTable: 0x14997fa50
struct FireAreaHazards {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TraversalCostConfig overrideConfig; // Offset: 0x8
};

// Original name: FiringRangeParams
// Size: 0x130
// VTable: 0x1499dcdf8
struct FiringRangeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SecurityClearanceConditions authorizationCondition; // Offset: 0x18
    SInteractionState authorizedState; // Offset: 0x50
    SInteractionState nonAuthorizedState; // Offset: 0x60
    SInteractionState offState; // Offset: 0x70
    DynArray_FiringRangeWeaponItem* allowedWeapons; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x88
    DynArray_Tag* weaponTagBlackList; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xb8
    EntityReferenceDef armouryManagerEntity; // Offset: 0xe0
    EntityReferenceDef actionAreaEntity; // Offset: 0xf8
    FiringRangeScenarioDef targetPracticeScenario; // Offset: 0x110
    float targetPracticeFinishedTime; // Offset: 0x128
    uint8_t _pad_3[0x4]; // Offset: 0x12c
};

// Original name: FiringRangeScenarioDef
// Size: 0xc0
// VTable: 0x1499dc578
struct FiringRangeScenarioDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SecurityClearanceToken* tokensToBecomeAvailable; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SecurityClearanceToken tokenGrantedUponCompletion; // Offset: 0x38
    float timeAllowed; // Offset: 0x50
    float countdownTime; // Offset: 0x54
    bool enforceWeaponType; // Offset: 0x58
    uint8_t _pad_2[0x7]; // Offset: 0x59
    CLocIdentifier* displayName; // Offset: 0x60
    CLocIdentifier* successMessageTitle; // Offset: 0x68
    CLocIdentifier* successMessageBody; // Offset: 0x70
    CLocIdentifier* unlockMessage; // Offset: 0x78
    CLocIdentifier* failureMessage; // Offset: 0x80
    bool autoEndScenario; // Offset: 0x88
    uint8_t _pad_3[0x7]; // Offset: 0x89
    DynArray_FiringRangeTimeEntry* defaultLeaderboardTimes; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x98
};

// Original name: FiringRangeWeaponItem
// Size: 0xd8
// VTable: 0x1499dcc38
struct FiringRangeWeaponItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* weaponName; // Offset: 0x8
    Tag tag; // Offset: 0x10
    FiringRangeScenarioDef basicScenario; // Offset: 0x28
    FiringRangeScenarioDef advancedScenario; // Offset: 0x40
    DynArray_SecurityClearanceToken* tokensToBecomeVisible; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
    DynArray_SecurityClearanceToken* tokensToBecomeUnlocked; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x90
    EntityClassDefinition defaultDisplayEntity; // Offset: 0xb8
    CLocIdentifier* equipText; // Offset: 0xd0
};

// Original name: FlightAcademyApplicationFormComponentParams
// Size: 0x108
// VTable: 0x149a0eda0
struct FlightAcademyApplicationFormComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SApplicationFormHeadHomeworld* homeworlds; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_CLocIdentifier* emergencyContactLocations; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_SApplicationFormRelationParams* emergencyContactRelations; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
    DynArray_SApplicationFormVoiceParams* voiceParams; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xb0
    DynArray_CryStringT* bodyTypeMannequinTags; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xe0
};

// Original name: FlightControllerEnableStates
// Size: 0x28
// VTable: 0x1499c28a8
struct FlightControllerEnableStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState enabled; // Offset: 0x8
    SInteractionState disabled; // Offset: 0x18
};

// Original name: FlightControllerHydrogenFuelStates
// Size: 0x68
// VTable: 0x1499c29c8
struct FlightControllerHydrogenFuelStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState full; // Offset: 0x8
    SInteractionState warning_75; // Offset: 0x18
    SInteractionState warning_50; // Offset: 0x28
    SInteractionState warning_25; // Offset: 0x38
    SInteractionState warning_10; // Offset: 0x48
    SInteractionState depleted; // Offset: 0x58
};

// Original name: FlightControllerQuantumFuelStates
// Size: 0x38
// VTable: 0x1499c2a70
struct FlightControllerQuantumFuelStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState normal; // Offset: 0x8
    SInteractionState low; // Offset: 0x18
    SInteractionState empty; // Offset: 0x28
};

// Original name: FlightControllerStateModifier
// Size: 0x98
// VTable: 0x1499c2c10
struct FlightControllerStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FlightControllerEnableStates engineStates; // Offset: 0x8
    FlightControllerEnableStates coupledModeStates; // Offset: 0x18
    FlightControllerEnableStates gSafetyStates; // Offset: 0x28
    FlightControllerEnableStates espStates; // Offset: 0x38
    FlightControllerEnableStates cruiseControlStates; // Offset: 0x48
    FlightControllerEnableStates vtolStates; // Offset: 0x58
    FlightControllerEnableStates proximityAssistStates; // Offset: 0x68
    FlightControllerHydrogenFuelStates hydrogenFuelStates; // Offset: 0x78
    FlightControllerQuantumFuelStates quantumFuelStates; // Offset: 0x88
};

// Original name: FloatInteractiveVariable
// Size: 0x38
// VTable: 0x1499f7740
struct FloatInteractiveVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float defaultValue; // Offset: 0x18
    float minValue; // Offset: 0x1c
    float maxValue; // Offset: 0x20
    ARDataType loopType; // Offset: 0x24
    InteractiveVariable_BackToDefaultFloatParams backToDefaultParams; // Offset: 0x28
};

// Original name: Formation
// Size: 0x90
// VTable: 0x149a94858
struct Formation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_FormationOffset* offsets; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    PlayerFormationParams playerFormationParams; // Offset: 0x48
    Tag formationTag; // Offset: 0x78
};

// Original name: FormationOffset
// Size: 0x38
// VTable: 0x149a94788
struct FormationOffset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 offset; // Offset: 0x8
    Tag offsetTag; // Offset: 0x20
};

// Original name: FrontendControllerProviderSQ42Params
// Size: 0x50
// VTable: 0x149a230a8
struct FrontendControllerProviderSQ42Params {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_FrontendS42Scenario* scenarios; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    float deleteGameTimer; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: FrontendOverrideParams
// Size: 0x50
// VTable: 0x1499f9c58
struct FrontendOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool persistentUniverseActive; // Offset: 0x8
    bool arenaCommanderActive; // Offset: 0x9
    bool tutorialDisabled; // Offset: 0xa
    bool disableResidenceSelectionWarning; // Offset: 0xb
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* backgroundVideoPath; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    DynArray_MegaMap* disabledSystems; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: FrontendS42Scenario
// Size: 0xa48
// VTable: 0x149a23028
struct FrontendS42Scenario {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag scenarioTag; // Offset: 0x8
    FrontendS42Actions actionsData; // Offset: 0x20
    EntityReferenceDef introToEngageTrackview; // Offset: 0x970
    EntityReferenceDef engageScreenTrackview; // Offset: 0x988
    EntityReferenceDef engageScreenToRoomTrackview; // Offset: 0x9a0
    EntityReferenceDef roomTrackview; // Offset: 0x9b8
    EntityReferenceDef hallwayTrackview; // Offset: 0x9d0
    EntityReferenceDef roomToHallwayTrackview; // Offset: 0x9e8
    EntityReferenceDef hallwayToRoomTrackview; // Offset: 0xa00
    DynArray_EntityReferenceDef* backgroundLoopingTrackviews; // Offset: 0xa18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0xa20
};

// Original name: GameMode
// Size: 0x360
// VTable: 0x149a94080
struct GameMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType id; // Offset: 0x8
    ARDataType requiredPass; // Offset: 0xc
    ARDataType playedBadgeId; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    CryStringT* thumbnail; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* icon; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    DynArray_CryStringT* backgroundVideos; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x40
    CLocIdentifier* locDisplayName; // Offset: 0x68
    CLocIdentifier* locSubtitle; // Offset: 0x70
    CLocIdentifier* description; // Offset: 0x78
    CryStringT* alias; // Offset: 0x80
    uint8_t _pad_5[0x8]; // Offset: 0x88
    CryStringT* leaderboardMatchCode; // Offset: 0x90
    uint8_t _pad_6[0x8]; // Offset: 0x98
    SLoadingScreenInformationDef loadingScreenInfo; // Offset: 0xa0
    bool shardPersistenceEnabled; // Offset: 0x110
    bool enableCustomization; // Offset: 0x111
    uint8_t _pad_7[0x6]; // Offset: 0x112
    DynArray_GameModeFilter* filters; // Offset: 0x118 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x120
    DynArray_ARDataType* validNetworkTypes; // Offset: 0x148 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x150
    SIBettingModule bettingModule; // Offset: 0x178
    SICamerasModule camerasModule; // Offset: 0x188
    ChatSystemOptionsModule chatSystemOptions; // Offset: 0x198
    SIDamageHandlingModule damageHandling; // Offset: 0x1a8
    SIDifficultyModule difficultyModule; // Offset: 0x1b8
    SIHostilityModule hostility; // Offset: 0x1c8
    SILayerEntitiesGroupManager layerEntitiesGroupManager; // Offset: 0x1d8
    SINotificationsModule notifications; // Offset: 0x1e8
    SIObjectives objectives; // Offset: 0x1f8
    SIPickupModule pickup; // Offset: 0x208
    SIParamsModule params; // Offset: 0x218
    SIPlayerSetupModule playerSetup; // Offset: 0x228
    SIPlayerStats playerStats; // Offset: 0x238
    SIReputationModule reputationModule; // Offset: 0x248
    SIRoundsModule rounds; // Offset: 0x258
    SISpectatorModule spectator; // Offset: 0x268
    SIScoringModule scoring; // Offset: 0x278
    SISpawning spawning; // Offset: 0x288
    SIStateModule stateModule; // Offset: 0x298
    SIStatsRecordingModule statsRecording; // Offset: 0x2a8
    SISubsumptionMissionModule subsumptionMissionModule; // Offset: 0x2b8
    SITeamsModule teams; // Offset: 0x2c8
    SIVictoryConditionsModule victoryConditions; // Offset: 0x2d8
    SIVotingModule votingModule; // Offset: 0x2e8
    bool mapSelection; // Offset: 0x2f8
    uint8_t _pad_10[0x7]; // Offset: 0x2f9
    DynArray_GameModeValidMap* validMaps; // Offset: 0x300 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x308
    DynArray_GameModeCustomSetting* customSettings; // Offset: 0x330 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x338
};

// Original name: GameModeValidMap
// Size: 0x28
// VTable: 0x1499b5148
struct GameModeValidMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Level levelReference; // Offset: 0x8
    bool devOnly; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: GenericDataDisplayAppData
// Size: 0x88
// VTable: 0x149a363c0
struct GenericDataDisplayAppData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DateTime dateTime; // Offset: 0x8
    DynArray_MobiGlasAppContent* content; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x48
    SecurityClearanceToken securityToken; // Offset: 0x70
};

// Original name: GeometryAsteroidModelTag
// Size: 0x20
// VTable: 0x1499a3130
struct GeometryAsteroidModelTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
};

// Original name: GeometryBaseHierarchicalData
// Size: 0x38
// VTable: 0x1499a2000
struct GeometryBaseHierarchicalData {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    float ExternalWear; // Offset: 0x10
    float ExternalDirt; // Offset: 0x14
    float InternalWear; // Offset: 0x18
    float InternalDirt; // Offset: 0x1c
    TintPaletteTree TintPaletteOverride; // Offset: 0x20
};

// Original name: GlobalJumpDriveParams
// Size: 0x670
// VTable: 0x1499f54e8
struct GlobalJumpDriveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    JumpDriveAudioParams audioParams; // Offset: 0x8
    JumpDriveMusicParams musicParams; // Offset: 0x558
    GlobalJumpDriveEffectParams effectParams; // Offset: 0x5f8
    SMisfireEffect malfunction; // Offset: 0x638
    JumpDriveApproachRingsParams approachRingParams; // Offset: 0x648
    float checksPassedDelay; // Offset: 0x660
    float obstructionPaddingSize; // Offset: 0x664
    float wallRepelBounceVelocity; // Offset: 0x668
    uint8_t _pad_1[0x4]; // Offset: 0x66c
};

// Original name: GlobalJumpTunnelHostParams
// Size: 0x578
// VTable: 0x149a14938
struct GlobalJumpTunnelHostParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceMaterial material; // Offset: 0x8
    SJumpTunnelGenerationParams tunnelGenerationParams; // Offset: 0x20
    SJumpTunnelFailureParams tunnelFailureParams; // Offset: 0x320
    SJumpTunnelDistortionParams tunnelDistortionParams; // Offset: 0x368
    SJumpTunnelExitParams tunnelExitParams; // Offset: 0x378
    SJumpTunnelVisualParams visualParams; // Offset: 0x3b8
    GlobalJumpTunnelEffectParams effectParams; // Offset: 0x3e8
    float entityPullInAcceleration; // Offset: 0x570
    uint8_t _pad_1[0x4]; // Offset: 0x574
};

// Original name: GlobalMarkerConfigs
// Size: 0x68
// VTable: 0x149a49ea8
struct GlobalMarkerConfigs {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Marker_Configuration missionPointMarkerConfig; // Offset: 0x8
    Marker_Configuration partyMemberMarkerConfig; // Offset: 0x20
    Marker_Configuration landingAreaMarkerConfig; // Offset: 0x38
    Marker_Configuration unattendedVehicleMarkerConfig; // Offset: 0x50
};

// Original name: GlobalMissionSettings
// Size: 0x80
// VTable: 0x1499709c0
struct GlobalMissionSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionLocationValidation* locationValidation; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Jurisdiction defaultJurisdictionForPlayerCrimeStats; // Offset: 0x38
    DynArray_SPVPBountyContractGenerators* PVPBountyContractGenerators; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
};

// Original name: GlobalShopBuyingParams
// Size: 0x40
// VTable: 0x149a3ee58
struct GlobalShopBuyingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint32_t tutorialItemBuyLimitPerHour; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_LicensedItemModifier* licensedItemModifiers; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: GlobalShopCommodityParams
// Size: 0x1f8
// VTable: 0x149a3ff30
struct GlobalShopCommodityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t MaxKioskCargoGridDisplaySize; // Offset: 0x8
    int32_t autoLoadingBasePrice; // Offset: 0xc
    SAutoLoadingBoxSizePrices autoLoadingBoxSizePrices; // Offset: 0x10
    float noSupplyLevel; // Offset: 0x40
    float VeryLowSupplyLevel; // Offset: 0x44
    float LowSupplyLevel; // Offset: 0x48
    float MediumSupplyLevel; // Offset: 0x4c
    float HighSupplyLevel; // Offset: 0x50
    float VeryHighSupplyLevel; // Offset: 0x54
    float noDemandLevel; // Offset: 0x58
    float VeryLowDemandLevel; // Offset: 0x5c
    float LowDemandLevel; // Offset: 0x60
    float MediumDemandLevel; // Offset: 0x64
    float HighDemandLevel; // Offset: 0x68
    float VeryHighDemandLevel; // Offset: 0x6c
    DynArray_SItemPortDefTypes* transactionSupportedResourceContainerTypes; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x78
    ResourceType RMC_ResourceType; // Offset: 0xa0
    EntityClassDefinition RMC_SalvageCannisterEntity; // Offset: 0xb8
    SResourceTypeDefaultCargoContainers genericCrates; // Offset: 0xd0
    CLocIdentifier* Location_Select; // Offset: 0x1c8
    CLocIdentifier* subLocation_All; // Offset: 0x1d0
    CLocIdentifier* subLocation_CargoGrid; // Offset: 0x1d8
    CLocIdentifier* subLocation_GeneralStorage; // Offset: 0x1e0
    CLocIdentifier* subLocation_ResourceContainers; // Offset: 0x1e8
    CLocIdentifier* subLocationItems_All; // Offset: 0x1f0
};

// Original name: GreaterThan
// Size: 0x58
// VTable: 0x1499b5cd8
struct GreaterThan {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MusicLogicNode* children; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MusicLogicParameter parameter; // Offset: 0x38
    float value; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
};

// Original name: GreenZoneComponentParams
// Size: 0x130
// VTable: 0x1499677b8
struct GreenZoneComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t priority; // Offset: 0x18
    bool noFPSWeapons; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
    GreenZoneFlagAdditionalSettingsDef noFPSWeaponsSettings; // Offset: 0x20
    bool noShipWeapons; // Offset: 0x30
    uint8_t _pad_2[0x7]; // Offset: 0x31
    GreenZoneFlagAdditionalSettingsDef noShipWeaponsSettings; // Offset: 0x38
    bool noMelee; // Offset: 0x48
    uint8_t _pad_3[0x7]; // Offset: 0x49
    GreenZoneFlagAdditionalSettingsDef noMeleeSettings; // Offset: 0x50
    bool noTakedown; // Offset: 0x60
    uint8_t _pad_4[0x7]; // Offset: 0x61
    GreenZoneFlagAdditionalSettingsDef noTakedownSettings; // Offset: 0x68
    bool walkOnly; // Offset: 0x78
    uint8_t _pad_5[0x7]; // Offset: 0x79
    GreenZoneFlagAdditionalSettingsDef walkOnlySettings; // Offset: 0x80
    bool softLockFPSWeapons; // Offset: 0x90
    uint8_t _pad_6[0x7]; // Offset: 0x91
    GreenZoneFlagAdditionalSettingsDef softLockFPSWeaponsSettings; // Offset: 0x98
    bool noShipSelfDestruct; // Offset: 0xa8
    uint8_t _pad_7[0x7]; // Offset: 0xa9
    GreenZoneFlagAdditionalSettingsDef noShipSelfDestructSettings; // Offset: 0xb0
    bool unlawfulZone; // Offset: 0xc0
    uint8_t _pad_8[0x7]; // Offset: 0xc1
    GreenZoneFlagAdditionalSettingsDef unlawfulZoneSettings; // Offset: 0xc8
    bool noTractorBeam; // Offset: 0xd8
    uint8_t _pad_9[0x7]; // Offset: 0xd9
    GreenZoneFlagAdditionalSettingsDef noTractorBeamSettings; // Offset: 0xe0
    GreenZoneFlagsDef flagsToInherit; // Offset: 0xf0
    bool enabledByDefault; // Offset: 0x108
    uint8_t _pad_10[0x3]; // Offset: 0x109
    float radius; // Offset: 0x10c
    SInteractionState stateToEnable; // Offset: 0x110
    SInteractionState stateToDisable; // Offset: 0x120
};

// Original name: GrenadeMarkerProvider
// Size: 0x20
// VTable: 0x149a23420
struct GrenadeMarkerProvider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Marker_Configuration markerConfig; // Offset: 0x8
};

// Original name: Grip
// Size: 0xe8
// VTable: 0x149a8b5f8
struct Grip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SGrip grip; // Offset: 0x38
};

// Original name: HackableScanProcedureParams
// Size: 0x58
// VTable: 0x1499c7d20
struct HackableScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    CLocIdentifier* displayForDisabled; // Offset: 0x30
    CLocIdentifier* displayForHackable; // Offset: 0x38
    CLocIdentifier* displayForHackInProgress; // Offset: 0x40
    CLocIdentifier* displayForHacked; // Offset: 0x48
    CLocIdentifier* displayForLockedDown; // Offset: 0x50
};

// Original name: HackingControllerParams
// Size: 0x168
// VTable: 0x149a2cb88
struct HackingControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool disabledOnStart; // Offset: 0x18
    bool failHackOnAbort; // Offset: 0x19
    uint8_t _pad_1[0x6]; // Offset: 0x1a
    SHackingGeneralSettingsPreset generalSettingsPreset; // Offset: 0x20
    SHackingDifficultyPreset difficultyPreset; // Offset: 0x38
    SHackingDifficultyPresetOverride difficultyPresetOverride; // Offset: 0x50
    SSharedInteractionParams startHackingInteraction; // Offset: 0xf8
    SSharedInteractionParams debugBypassHackSucceedInteraction; // Offset: 0x108
    SSharedInteractionParams debugBypassHackFailInteraction; // Offset: 0x118
    SSharedInteractionParams debugResetHackInteraction; // Offset: 0x128
    SSharedInteractionParams onHackSucceededInteraction; // Offset: 0x138
    SSharedInteractionParams onHackFailedInteraction; // Offset: 0x148
    SSharedInteractionParams onHackResetInteraction; // Offset: 0x158
};

// Original name: HandholdComponentParams
// Size: 0x70
// VTable: 0x149a03408
struct HandholdComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isEnabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    DynArray_HandholdParams* handholds; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    SSharedInteractionParams grabInteractionTemplate; // Offset: 0x50
    SInteractionPointParams grabIPTemplate; // Offset: 0x60
};

// Original name: HandholdInteractionPointLink
// Size: 0x48
// VTable: 0x149a03720
struct HandholdInteractionPointLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool ignoreInteractionOnFail; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    HandholdAttachmentTriggerParams attachmentTrigger; // Offset: 0x10
    SInteractionPointParams sourceInteractionPoint; // Offset: 0x20
    uint8_t _pad_2[0x18]; // Offset: 0x30
};

// Original name: HandholdLinkComponentParams
// Size: 0xe0
// VTable: 0x149a037d0
struct HandholdLinkComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_HandholdAttachmentTriggerParams* attachmentTriggers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_HandholdSharedInteractionLink* sharedInteractionLinks; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_HandholdInteractionPointLink* interactionPointLinks; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x60]; // Offset: 0x80
};

// Original name: HandholdSharedInteractionLink
// Size: 0x48
// VTable: 0x149a036c0
struct HandholdSharedInteractionLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool ignoreInteractionOnFail; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    HandholdAttachmentTriggerParams attachmentTrigger; // Offset: 0x10
    SSharedInteractionParams sourceSharedInteraction; // Offset: 0x20
    uint8_t _pad_2[0x18]; // Offset: 0x30
};

// Original name: HarvestableAreaPreset
// Size: 0x60
// VTable: 0x1499ef358
struct HarvestableAreaPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugGroupName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    HarvestableAreaTypeBase areaType; // Offset: 0x18
    float globalModifier; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    DynArray_HarvestableElementModifier* modifiers; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
};

// Original name: HarvestableAreaTypeManualOverride
// Size: 0x20
// VTable: 0x1499ef280
struct HarvestableAreaTypeManualOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
};

// Original name: HarvestableElement
// Size: 0x70
// VTable: 0x1499ef118
struct HarvestableElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    HarvestablePreset harvestable; // Offset: 0x8
    float relativeProbability; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    HarvestableClusterPreset clustering; // Offset: 0x28
    DynArray_HarvestableGeometry* geometries; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
};

// Original name: HarvestableElementGroup
// Size: 0x50
// VTable: 0x1499ef040
struct HarvestableElementGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* groupName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float groupProbability; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    DynArray_HarvestableElement* harvestables; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: HarvestableElementModifier
// Size: 0x50
// VTable: 0x1499ef1c0
struct HarvestableElementModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    HarvestableElement harvestableElement; // Offset: 0x8
    float harvestableModifier; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_HarvestableGeometry* geometries; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: HarvestableGeometry
// Size: 0x20
// VTable: 0x1499eef90
struct HarvestableGeometry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
};

// Original name: HarvestablePreset
// Size: 0xd8
// VTable: 0x1499f0128
struct HarvestablePreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    HarvestBehaviourParams harvestBehaviour; // Offset: 0x20
    HarvestableTransformParams transformParams; // Offset: 0x68
    SubHarvestableConfigBase subConfigBase; // Offset: 0xb0
    float respawnInSlotTime; // Offset: 0xc0
    uint8_t _pad_1[0x4]; // Offset: 0xc4
    CryStringT* specialHarvestableString; // Offset: 0xc8
    uint8_t _pad_2[0x8]; // Offset: 0xd0
};

// Original name: HarvestableProviderParams
// Size: 0x30
// VTable: 0x1499ef430
struct HarvestableProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    HarvestableProviderPreset preset; // Offset: 0x18
};

// Original name: HarvestableProviderPreset
// Size: 0x68
// VTable: 0x1499ef3d8
struct HarvestableProviderPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_HarvestableElementGroup* harvestableGroups; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_HarvestableAreaPreset* areas; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: HarvestableTagListTagEditor
// Size: 0x38
// VTable: 0x1499efa80
struct HarvestableTagListTagEditor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: HaulingOrder_EntityClass
// Size: 0x48
// VTable: 0x14996e360
struct HaulingOrder_EntityClass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectivePropertyBase pickUpLocation; // Offset: 0x8
    ObjectivePropertyBase dropOffLocation; // Offset: 0x18
    EntityClassDefinition entityClass; // Offset: 0x28
    int32_t minAmount; // Offset: 0x40
    int32_t maxAmount; // Offset: 0x44
};

// Original name: HaulingOrder_MissionItem
// Size: 0xa0
// VTable: 0x14996e460
struct HaulingOrder_MissionItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectivePropertyBase pickUpLocation; // Offset: 0x8
    ObjectivePropertyBase dropOffLocation; // Offset: 0x18
    ObjectivePropertyBase item; // Offset: 0x28
    int32_t minAmount; // Offset: 0x38
    int32_t maxAmount; // Offset: 0x3c
    DynArray_DeliveryTarget* pickUpTargetTypes; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x48
    DynArray_DeliveryTarget* dropOffTargetTypes; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x78
};

// Original name: HaulingOrder_MissionItemDropOff
// Size: 0x68
// VTable: 0x14996e4e8
struct HaulingOrder_MissionItemDropOff {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectivePropertyBase pickUpLocation; // Offset: 0x8
    ObjectivePropertyBase dropOffLocation; // Offset: 0x18
    ObjectiveProperty_Input deliveryOrderInput; // Offset: 0x28
    DynArray_DeliveryTarget* dropOffTargetTypes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: HaulingOrder_Resource
// Size: 0x50
// VTable: 0x14996e2b8
struct HaulingOrder_Resource {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectivePropertyBase pickUpLocation; // Offset: 0x8
    ObjectivePropertyBase dropOffLocation; // Offset: 0x18
    ResourceType resource; // Offset: 0x28
    float minSCU; // Offset: 0x40
    float maxSCU; // Offset: 0x44
    float maxContainerSize; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
};

// Original name: HealParams
// Size: 0xa8
// VTable: 0x149a16c38
struct HealParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType serviceBeaconType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* serviceBeaconName; // Offset: 0x20
    int32_t beaconTaxPercentage; // Offset: 0x28
    int32_t beaconMaxPaymentAmount; // Offset: 0x2c
    MissionPropertyValue_AIName npcRequesterNameDef; // Offset: 0x30
    SServiceBeaconCreatorParams playerCreatorParams; // Offset: 0x78
    SServiceBeaconCreatorParamsBase npcCreatorParams; // Offset: 0x88
    CLocIdentifier* objectiveTitle; // Offset: 0x98
    CLocIdentifier* objectiveDescription; // Offset: 0xa0
};

// Original name: HealthDamageState
// Size: 0x48
// VTable: 0x149a17870
struct HealthDamageState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* geometryTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Tag effectTrigger; // Offset: 0x18
    Tag effectTag; // Offset: 0x30
};

// Original name: HealthScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7c20
struct HealthScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: HintComponentParams
// Size: 0x58
// VTable: 0x1499c8cd8
struct HintComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    HintTriggerData trigger; // Offset: 0x18
    float radius; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
    Vec3 bounds; // Offset: 0x38
    bool showDebugInEditor; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
};

// Original name: HintTriggerData
// Size: 0xb8
// VTable: 0x149aa0e68
struct HintTriggerData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    HintUIData Hint; // Offset: 0x8
    bool HintEntityComponentTrigger; // Offset: 0x20
    bool ContinuousContextualHint; // Offset: 0x21
    uint8_t _pad_1[0x2]; // Offset: 0x22
    ARDataType TriggerEvent; // Offset: 0x24
    ARDataType UntriggerEvent; // Offset: 0x28
    int32_t NumEventsToTrigger; // Offset: 0x2c
    bool TriggerInSCPersistentUniverse; // Offset: 0x30
    bool TriggerInS42Default; // Offset: 0x31
    bool TriggerInSCHanger; // Offset: 0x32
    bool TriggerInEABattleRoyale; // Offset: 0x33
    bool TriggerInEAFreeFlight; // Offset: 0x34
    bool TriggerInEASquadronBattle; // Offset: 0x35
    bool TriggerInEASwarm; // Offset: 0x36
    bool TriggerInEAPirateSwarm; // Offset: 0x37
    bool TriggerInEAClassicRace; // Offset: 0x38
    bool TriggerInEAGravRace; // Offset: 0x39
    bool TriggerInEAElimination; // Offset: 0x3a
    bool TriggerInEATeamElimination; // Offset: 0x3b
    bool TriggerInEAControl; // Offset: 0x3c
    bool TriggerInEATheatersOfWar; // Offset: 0x3d
    bool TriggerInEADuel; // Offset: 0x3e
    bool TriggerInEAFPSGunGame; // Offset: 0x3f
    bool TriggerInEAHorde; // Offset: 0x40
    bool TriggerInEAExperimentalModes; // Offset: 0x41
    bool TriggerInSCFrontend; // Offset: 0x42
    bool TriggerInFloorDemo; // Offset: 0x43
    ARDataType SuppressionEvent; // Offset: 0x44
    bool MouseHint; // Offset: 0x48
    bool KeyboardHint; // Offset: 0x49
    bool GamepadHint; // Offset: 0x4a
    bool JoystickHint; // Offset: 0x4b
    bool HintAllowedOnFoot; // Offset: 0x4c
    bool HintAllowedOnGroundVehicles; // Offset: 0x4d
    bool HintAllowedOnSpaceships; // Offset: 0x4e
    bool HintIsDemoOnly; // Offset: 0x4f
    float TriggerTimer; // Offset: 0x50
    float DisplayTimeOverride; // Offset: 0x54
    int32_t MaxRepeats; // Offset: 0x58
    float TimeToRepeat; // Offset: 0x5c
    bool InfiniteTriggers; // Offset: 0x60
    uint8_t _pad_2[0x3]; // Offset: 0x61
    int32_t Priority; // Offset: 0x64
    HintTriggerData TriggerOnComplete; // Offset: 0x68
    bool TriggerInTutorial; // Offset: 0x80
    uint8_t _pad_3[0x7]; // Offset: 0x81
    DynArray_DialogueContext* dialogueContexts; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x90
};

// Original name: HydrogenRefuelService
// Size: 0x70
// VTable: 0x149a90370
struct HydrogenRefuelService {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    CLocIdentifier* productName; // Offset: 0x18
    CryStringT* icon; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float serviceDelayTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    CLocIdentifier* hudMessage; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    bool instantRefuel; // Offset: 0x48
    uint8_t _pad_4[0x3]; // Offset: 0x49
    int32_t refuelUnitPerSecond; // Offset: 0x4c
    ResourceType fuelCommodity; // Offset: 0x50
    uint8_t _pad_5[0x8]; // Offset: 0x68
};

// Original name: IndividualPortRefillData
// Size: 0x38
// VTable: 0x149a40690
struct IndividualPortRefillData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PortRefillData* portRefillData; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: IneractionConditionUserNotInUsable
// Size: 0x18
// VTable: 0x149a8e038
struct IneractionConditionUserNotInUsable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InstabilityScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7d28
struct InstabilityScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: InstancedInteriorLocationMap
// Size: 0x40
// VTable: 0x149aa1568
struct InstancedInteriorLocationMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float exitTimeBuffer; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_InstancedInteriorLocationParams* locationInteriors; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: InstancedInteriorLocationParams
// Size: 0x58
// VTable: 0x149aa14e0
struct InstancedInteriorLocationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObject location; // Offset: 0x8
    bool devOnly; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    DynArray_EntityClassDefinition* defaultHangars; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: InstancedInteriorSizeList
// Size: 0x38
// VTable: 0x149aa1430
struct InstancedInteriorSizeList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* hangars; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: InteractableHelmetParams
// Size: 0x28
// VTable: 0x149a005e8
struct InteractableHelmetParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams openInteraction; // Offset: 0x8
    SSharedInteractionParams closeInteraction; // Offset: 0x18
};

// Original name: InteractionConditionAND
// Size: 0x38
// VTable: 0x149a8dc18
struct InteractionConditionAND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    InteractionConditionParams firstCondition; // Offset: 0x18
    InteractionConditionParams secondCondition; // Offset: 0x28
};

// Original name: InteractionConditionAccessReservedRoom
// Size: 0x18
// VTable: 0x1499c1c08
struct InteractionConditionAccessReservedRoom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionAccountBadge
// Size: 0x20
// VTable: 0x149a8db10
struct InteractionConditionAccountBadge {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType badgeRequired; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: InteractionConditionActorAbility
// Size: 0x20
// VTable: 0x149a815f0
struct InteractionConditionActorAbility {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType abilityType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: InteractionConditionActorHasAttachedEntityTypes
// Size: 0xb0
// VTable: 0x149a8ded8
struct InteractionConditionActorHasAttachedEntityTypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType conditionResult; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_ARDataType* itemTypes; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    DynArray_ARDataType* itemSubTypes; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
    DynArray_CryStringT* ignoreItemPorts; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x88
};

// Original name: InteractionConditionActorHasAttachedEntityWithTag
// Size: 0x50
// VTable: 0x149a8dfd8
struct InteractionConditionActorHasAttachedEntityWithTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType conditionResult; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_CryStringT* attachableTag; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: InteractionConditionActorInventoryContainerEntityHasTag
// Size: 0x50
// VTable: 0x149a8df58
struct InteractionConditionActorInventoryContainerEntityHasTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType conditionResult; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_CryStringT* attachableTag; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: InteractionConditionActorSealedHelmet
// Size: 0x18
// VTable: 0x149a8e048
struct InteractionConditionActorSealedHelmet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionActorStatusEffect
// Size: 0x20
// VTable: 0x149a81598
struct InteractionConditionActorStatusEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType conditionResult; // Offset: 0x18
    ARDataType statusEffectType; // Offset: 0x1c
};

// Original name: InteractionConditionAvailableSpaceInLinkedUsableItem
// Size: 0x40
// VTable: 0x149a819d8
struct InteractionConditionAvailableSpaceInLinkedUsableItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    CryStringT* usablePortTag; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* itemPortTag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    ARDataType itemType; // Offset: 0x38
    ARDataType itemSubType; // Offset: 0x3c
};

// Original name: InteractionConditionCanAffordItem
// Size: 0x18
// VTable: 0x149a8e040
struct InteractionConditionCanAffordItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCanAttachItem
// Size: 0x18
// VTable: 0x149a814f8
struct InteractionConditionCanAttachItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCanAttachItemOnHanger
// Size: 0x18
// VTable: 0x149a81500
struct InteractionConditionCanAttachItemOnHanger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCanBeBodyDragDropped
// Size: 0x18
// VTable: 0x149a81710
struct InteractionConditionCanBeBodyDragDropped {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCanBeBodyDragged
// Size: 0x18
// VTable: 0x149a81708
struct InteractionConditionCanBeBodyDragged {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCanDropItemInCurrentZone
// Size: 0x18
// VTable: 0x149a8e060
struct InteractionConditionCanDropItemInCurrentZone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCanDropWearableItem
// Size: 0x18
// VTable: 0x149a8e068
struct InteractionConditionCanDropWearableItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCanOpenExternalInventory
// Size: 0x18
// VTable: 0x149a8e058
struct InteractionConditionCanOpenExternalInventory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCanReachMovable
// Size: 0x18
// VTable: 0x149a81518
struct InteractionConditionCanReachMovable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCanStoreInPersonalInventory
// Size: 0x18
// VTable: 0x149a81508
struct InteractionConditionCanStoreInPersonalInventory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionCheckActorState
// Size: 0x68
// VTable: 0x149a8dda0
struct InteractionConditionCheckActorState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType conditionResult; // Offset: 0x18
    ARDataType targetActor; // Offset: 0x1c
    ActorStateFilter actorState; // Offset: 0x20
};

// Original name: InteractionConditionCheckItemWeight
// Size: 0x18
// VTable: 0x149a8e050
struct InteractionConditionCheckItemWeight {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionDeliveryMissionItem
// Size: 0x18
// VTable: 0x149a81c68
struct InteractionConditionDeliveryMissionItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionDraggedActorHasProhibitedItems
// Size: 0x48
// VTable: 0x149a817f0
struct InteractionConditionDraggedActorHasProhibitedItems {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    DynArray_InteractionProhibitedItemParams* prohibitedList; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: InteractionConditionDraggedActorIsPlayer
// Size: 0x18
// VTable: 0x149a8dab0
struct InteractionConditionDraggedActorIsPlayer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionDraggedActorNotDead
// Size: 0x18
// VTable: 0x149a8daa8
struct InteractionConditionDraggedActorNotDead {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionEligibleForPrisonRelease
// Size: 0x18
// VTable: 0x149968ad8
struct InteractionConditionEligibleForPrisonRelease {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionEmptyItemPort
// Size: 0x28
// VTable: 0x149a8da40
struct InteractionConditionEmptyItemPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    CryStringT* itemPortTag; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: InteractionConditionEmptyUsableItemPort
// Size: 0x28
// VTable: 0x149a92d20
struct InteractionConditionEmptyUsableItemPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    CryStringT* itemPortTag; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: InteractionConditionEntityIsAttachedToInteractor
// Size: 0x48
// VTable: 0x149a81650
struct InteractionConditionEntityIsAttachedToInteractor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    DynArray_CryStringT* ignoreItemPorts; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: InteractionConditionEntityIsAttachedToOtherActor
// Size: 0x18
// VTable: 0x149a816e8
struct InteractionConditionEntityIsAttachedToOtherActor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionEntityIsHeldByInteractor
// Size: 0x18
// VTable: 0x149a816e0
struct InteractionConditionEntityIsHeldByInteractor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionEntityIsHeldByOtherActor
// Size: 0x18
// VTable: 0x149a816f0
struct InteractionConditionEntityIsHeldByOtherActor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionEntityOrientation
// Size: 0x40
// VTable: 0x149a81c60
struct InteractionConditionEntityOrientation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    float angleLimit; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 directionVectorToMatch; // Offset: 0x20
    bool useLocalGravity; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
};

// Original name: InteractionConditionEntityTag
// Size: 0x30
// VTable: 0x149a8de00
struct InteractionConditionEntityTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    Tag requiredTag; // Offset: 0x18
};

// Original name: InteractionConditionEntityTags
// Size: 0x88
// VTable: 0x149a818f8
struct InteractionConditionEntityTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    TagsDNFTerm tags; // Offset: 0x18
    bool CheckParent; // Offset: 0x80
    uint8_t _pad_1[0x7]; // Offset: 0x81
};

// Original name: InteractionConditionGameMode
// Size: 0x48
// VTable: 0x149a814f0
struct InteractionConditionGameMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    DynArray_ARDataType* gameModes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: InteractionConditionHackingControllerEnabled
// Size: 0x18
// VTable: 0x149a8e070
struct InteractionConditionHackingControllerEnabled {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionHasItemTypeAttached
// Size: 0x20
// VTable: 0x149a80cc8
struct InteractionConditionHasItemTypeAttached {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType itemType; // Offset: 0x18
    ARDataType itemSubType; // Offset: 0x1c
};

// Original name: InteractionConditionHasProhibitedItems
// Size: 0x50
// VTable: 0x149a81798
struct InteractionConditionHasProhibitedItems {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    DynArray_InteractionProhibitedItemParams* prohibitedList; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    bool AIAlwaysPass; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
};

// Original name: InteractionConditionHasSupportingItemport
// Size: 0x78
// VTable: 0x149a81878
struct InteractionConditionHasSupportingItemport {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    DynArray_CryStringT* itemPortTags; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_CryStringT* itemPortNames; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: InteractionConditionHeldItem
// Size: 0x30
// VTable: 0x149a8d9e8
struct InteractionConditionHeldItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType itemType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CryStringT* itemTag; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
};

// Original name: InteractionConditionHoverPowerStageEqual
// Size: 0x20
// VTable: 0x1499e88e0
struct InteractionConditionHoverPowerStageEqual {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType powerStage; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: InteractionConditionInteractableEntityOwnerHasArmorAttached
// Size: 0x18
// VTable: 0x149a816f8
struct InteractionConditionInteractableEntityOwnerHasArmorAttached {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionInteractableIsIncapacitatedActor
// Size: 0x18
// VTable: 0x149a8e0d0
struct InteractionConditionInteractableIsIncapacitatedActor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionInteractionStateMachineTag
// Size: 0x50
// VTable: 0x149a80c40
struct InteractionConditionInteractionStateMachineTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    TagList stateTags; // Offset: 0x18
};

// Original name: InteractionConditionInteractorNotInZeroG
// Size: 0x18
// VTable: 0x149a81510
struct InteractionConditionInteractorNotInZeroG {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionIsAttachedToItemPort
// Size: 0x38
// VTable: 0x149a816d8
struct InteractionConditionIsAttachedToItemPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    CryStringT* itemPortTag; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* itemPortName; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: InteractionConditionIsInteractionShownAsPrompt
// Size: 0x28
// VTable: 0x149a81bb0
struct InteractionConditionIsInteractionShownAsPrompt {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    SSharedInteractionParams Interaction; // Offset: 0x18
};

// Original name: InteractionConditionIsUserAI
// Size: 0x18
// VTable: 0x149a8da48
struct InteractionConditionIsUserAI {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionItem
// Size: 0x30
// VTable: 0x149a8d968
struct InteractionConditionItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType itemType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CryStringT* portTag; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
};

// Original name: InteractionConditionItemPower
// Size: 0x20
// VTable: 0x149a8e030
struct InteractionConditionItemPower {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    ARDataType powerState; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: InteractionConditionLimitNearbyCarryables
// Size: 0x20
// VTable: 0x149a80d48
struct InteractionConditionLimitNearbyCarryables {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    int32_t searchRadius; // Offset: 0x18
    int32_t maxLimit; // Offset: 0x1c
};

// Original name: InteractionConditionLinkedUsableHasTag
// Size: 0x80
// VTable: 0x149a81b50
struct InteractionConditionLinkedUsableHasTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    TagsDNFTerm usableTags; // Offset: 0x18
};

// Original name: InteractionConditionLinkedUsableItemHasAttachment
// Size: 0xb0
// VTable: 0x149a81af8
struct InteractionConditionLinkedUsableItemHasAttachment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    bool searchOnSocketUsable; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    CryStringT* usablePortTag; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    CryStringT* itemPortTag; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
    ARDataType itemType; // Offset: 0x40
    ARDataType itemSubType; // Offset: 0x44
    TagsDNFTerm itemTags; // Offset: 0x48
};

// Original name: InteractionConditionList
// Size: 0x98
// VTable: 0x149a8d880
struct InteractionConditionList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_InteractionConditionPreset* presetList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_InteractionConditionParams* conditionParams; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_InteractionConditionParams* conditionToHideParams; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: InteractionConditionListRecord
// Size: 0xa0
// VTable: 0x149a8d8e0
struct InteractionConditionListRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InteractionConditionList conditionList; // Offset: 0x8
};

// Original name: InteractionConditionLootableNotBeingViewedByAnyOtherInventory
// Size: 0x18
// VTable: 0x149a81700
struct InteractionConditionLootableNotBeingViewedByAnyOtherInventory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionNAND
// Size: 0x38
// VTable: 0x149a8dc98
struct InteractionConditionNAND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    InteractionConditionParams firstCondition; // Offset: 0x18
    InteractionConditionParams secondCondition; // Offset: 0x28
};

// Original name: InteractionConditionNOT
// Size: 0x28
// VTable: 0x149a8dcf0
struct InteractionConditionNOT {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    InteractionConditionParams condition; // Offset: 0x18
};

// Original name: InteractionConditionOR
// Size: 0x38
// VTable: 0x149a8db98
struct InteractionConditionOR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    InteractionConditionParams firstCondition; // Offset: 0x18
    InteractionConditionParams secondCondition; // Offset: 0x28
};

// Original name: InteractionConditionParams
// Size: 0x18
// VTable: 0x149a8d750
struct InteractionConditionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPlayerAloneInVehicle
// Size: 0x18
// VTable: 0x149a8e0c0
struct InteractionConditionPlayerAloneInVehicle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPlayerNotInCombat
// Size: 0x18
// VTable: 0x149a8e0b0
struct InteractionConditionPlayerNotInCombat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPlayerOwnsVehicle
// Size: 0x18
// VTable: 0x149a8e080
struct InteractionConditionPlayerOwnsVehicle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPlayerVehicleContainsNoUnownedVehicles
// Size: 0x18
// VTable: 0x149a8e0b8
struct InteractionConditionPlayerVehicleContainsNoUnownedVehicles {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPlayerVehicleInAnotherVehicle
// Size: 0x18
// VTable: 0x149a8e088
struct InteractionConditionPlayerVehicleInAnotherVehicle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPlayerVehicleLandedOrZeroG
// Size: 0x18
// VTable: 0x149a8e090
struct InteractionConditionPlayerVehicleLandedOrZeroG {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPlayerVehicleNotDestroyed
// Size: 0x18
// VTable: 0x149a8e0c8
struct InteractionConditionPlayerVehicleNotDestroyed {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPlayerVehicleNotInLandingArea
// Size: 0x18
// VTable: 0x149a8e0a0
struct InteractionConditionPlayerVehicleNotInLandingArea {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPlayerVehicleNotInQuantum
// Size: 0x18
// VTable: 0x149a8e098
struct InteractionConditionPlayerVehicleNotInQuantum {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionPreset
// Size: 0x68
// VTable: 0x149a8d7d8
struct InteractionConditionPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_InteractionConditionParams* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_InteractionConditionParams* conditionToHideParams; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: InteractionConditionSeatUserRegistered
// Size: 0x18
// VTable: 0x149a8db18
struct InteractionConditionSeatUserRegistered {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionSecurityClearanceToken
// Size: 0x58
// VTable: 0x149968b58
struct InteractionConditionSecurityClearanceToken {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    SecurityClearanceConditions requiredConditions; // Offset: 0x18
    bool checkEntityTokens; // Offset: 0x50
    uint8_t _pad_1[0x7]; // Offset: 0x51
};

// Original name: InteractionConditionShippingBuild
// Size: 0x18
// VTable: 0x149a8e078
struct InteractionConditionShippingBuild {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionSwapAvailable
// Size: 0x18
// VTable: 0x149a81908
struct InteractionConditionSwapAvailable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionSwapOnly
// Size: 0x18
// VTable: 0x149a81900
struct InteractionConditionSwapOnly {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: InteractionConditionUsableAlignmentSlotEmpty
// Size: 0x28
// VTable: 0x149a92cc0
struct InteractionConditionUsableAlignmentSlotEmpty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    AlignmentSlotBase alignmentSlot; // Offset: 0x18
};

// Original name: InteractionConditionUsableNotInMotion
// Size: 0x20
// VTable: 0x149a8daa0
struct InteractionConditionUsableNotInMotion {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    float maxSpeed; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: InteractionPointTemplate
// Size: 0x288
// VTable: 0x1499a63e0
struct InteractionPointTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams interactionPoint; // Offset: 0x8
};

// Original name: InteractionProhibitedItemParams
// Size: 0xb8
// VTable: 0x1499b0c90
struct InteractionProhibitedItemParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPortTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* itemPortName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    DynArray_Tag* tags; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x30
    DynArray_ARDataType* itemTypes; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x60
    DynArray_ARDataType* itemSubTypes; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x90
};

// Original name: InteractiveVariable_BackToDefaultFloatParams
// Size: 0x40
// VTable: 0x1499f74e0
struct InteractiveVariable_BackToDefaultFloatParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float waitTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ControlFloatInteractiveVariable* controlVariables; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: InventoryConfig
// Size: 0x1f0
// VTable: 0x149a9b898
struct InventoryConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float selectTimer; // Offset: 0x8
    float silhouettesAmount; // Offset: 0xc
    float silhouettesFillStr; // Offset: 0x10
    float silhouetteEdgeWidth; // Offset: 0x14
    float silhouetteBlurRadius; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    HUDSilhouetteParams hoverParams; // Offset: 0x20
    HUDSilhouetteParams hoverAttachmentsParams; // Offset: 0x50
    HUDSilhouetteParams focusParams; // Offset: 0x80
    HUDSilhouetteParams focusAttachmentsParams; // Offset: 0xb0
    HUDSilhouetteParams unavailabeParams; // Offset: 0xe0
    HUDSilhouetteParams unavailabeAttachmentsParams; // Offset: 0x110
    HUDSilhouetteParams blockedHoverParams; // Offset: 0x140
    HUDSilhouetteParams externalInventoryOutlineParams; // Offset: 0x170
    HUDSilhouetteParams blockedInventoryOutlineParams; // Offset: 0x180
    DynArray_ItemCategory* skinEntityParentTypes; // Offset: 0x190 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x198
    DynArray_InventoryInteractionBlockingAttachedEntities* blockingRules; // Offset: 0x1c0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1c8
};

// Original name: InventoryContainerManager
// Size: 0x190
// VTable: 0x149a9df48
struct InventoryContainerManager {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* lootBoxes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Vec3 spawnLootGrid; // Offset: 0x38
    DynArray_ARDataType* closedInventoryNonStorableItemTypes; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
    DynArray_ARDataType* closedInventoryNonStorableOutfitItemTypes; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x88
    DynArray_InventoryContainerItemTypeFilter* openInventoryNonStorableItemTypes; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xb8
    DynArray_OpenInventoryOccupantItemTypeProperties* itemTypeOpenInventoryOccupantProperties; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xe8
    CargoGridOccupantProperties defaultOpenInventoryOccupantProperties; // Offset: 0x110
    float smallItemDropDist; // Offset: 0x178
    float BigItemDropDist; // Offset: 0x17c
    float bigItemVolumeThresholdSCU; // Offset: 0x180
    float dropItemMaxHeight; // Offset: 0x184
    float dropItemSurfaceOffset; // Offset: 0x188
    uint8_t _pad_6[0x4]; // Offset: 0x18c
};

// Original name: InventoryContainerParams
// Size: 0x50
// VTable: 0x149a99fc0
struct InventoryContainerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    CryStringT* tags; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    ItemCategory itemCategory; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x48
};

// Original name: InventoryDropDetachRules
// Size: 0x60
// VTable: 0x149a9b218
struct InventoryDropDetachRules {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemCategory category; // Offset: 0x8
    DynArray_ItemCategory* dropDetachTypes; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
};

// Original name: InventoryInteractionBlockingAttachedEntities
// Size: 0x60
// VTable: 0x149a9b5e8
struct InventoryInteractionBlockingAttachedEntities {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemCategory category; // Offset: 0x8
    DynArray_ItemCategory* blockingAttachedTypes; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
};

// Original name: InventoryLocation
// Size: 0x28
// VTable: 0x149a9e3c8
struct InventoryLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObject location; // Offset: 0x8
    bool visibleToPlayer; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: InventoryScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7c28
struct InventoryScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: InventoryStateModifier
// Size: 0x28
// VTable: 0x1499c1c88
struct InventoryStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState OpenedState; // Offset: 0x8
    SInteractionState ClosedState; // Offset: 0x18
};

// Original name: Investigation_ClueItem
// Size: 0x88
// VTable: 0x14996aa00
struct Investigation_ClueItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    TagList spawnTags; // Offset: 0x20
    DynArray_Investigation_Clue* clues; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
};

// Original name: Investigation_ClueItem_Corpse
// Size: 0x98
// VTable: 0x14996aac0
struct Investigation_ClueItem_Corpse {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    TagList spawnTags; // Offset: 0x20
    DynArray_Investigation_Clue* clues; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
    Investigation_Suspect suspectRepresented; // Offset: 0x88
};

// Original name: Investigation_ClueItem_Datapad
// Size: 0xa0
// VTable: 0x14996aa60
struct Investigation_ClueItem_Datapad {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    TagList spawnTags; // Offset: 0x20
    DynArray_Investigation_Clue* clues; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
    BuildingBlocks_Canvas canvas; // Offset: 0x88
};

// Original name: Investigation_Location
// Size: 0x38
// VTable: 0x14996ab20
struct Investigation_Location {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Investigation_ClueItem* clueItems; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ItemAwardEntityClass
// Size: 0x28
// VTable: 0x1499725e0
struct ItemAwardEntityClass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t amountToAward; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    EntityClassDefinition entityClass; // Offset: 0x10
};

// Original name: ItemAwardTag
// Size: 0x78
// VTable: 0x149972640
struct ItemAwardTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t amountToAward; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    TagsDNFTerm rewardSearchTags; // Offset: 0x10
};

// Original name: ItemCategory
// Size: 0x28
// VTable: 0x149a995d0
struct ItemCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    ARDataType subType; // Offset: 0xc
    Tag requiredTag; // Offset: 0x10
};

// Original name: ItemPortTagsDictionary
// Size: 0x38
// VTable: 0x149a9e5b0
struct ItemPortTagsDictionary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ItemPortTagsElement* elements; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ItemPortTagsElement
// Size: 0x30
// VTable: 0x149a9e558
struct ItemPortTagsElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* string; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Tag tag; // Offset: 0x18
};

// Original name: ItemPreview_Config
// Size: 0x1c8
// VTable: 0x149a95380
struct ItemPreview_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* dummyPoseAnim; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* skinnedLoadoutDefault; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    EntityClassDefinition dummyBaseClass; // Offset: 0x28
    ItemPreview_CameraSettings cameraSettingsDefault; // Offset: 0x40
    ItemPreview_TurntableSettings turntableSettingsDefault; // Offset: 0xa0
    DynArray_ItemPreview_SkinnedLoadoutOverride* skinnedLoadoutOverrides; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xe0
    DynArray_ItemPreview_CameraSettingsOverride* cameraSettingsOverrides; // Offset: 0x108 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x110
    DynArray_ItemPreview_TurntableOverride* turntableSettingsOverrides; // Offset: 0x138 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x140
    ItemPreview_LightingSettings lightingSettings; // Offset: 0x168
    float fadeDelay; // Offset: 0x1c0
    float fadeTime; // Offset: 0x1c4
};

// Original name: ItemRecoveryParams
// Size: 0xc8
// VTable: 0x149aab148
struct ItemRecoveryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* itemRecoveryBlacklist; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_EntityClassDefinition* corpseClasses; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_ARDataType* allowedTypes; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_ARDataType* allowedSubTypes; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
};

// Original name: ItemResourceComponentParams
// Size: 0xf0
// VTable: 0x1499a8470
struct ItemResourceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isResourceNetworked; // Offset: 0x18
    bool isRelay; // Offset: 0x19
    uint8_t _pad_1[0x6]; // Offset: 0x1a
    RelayFilterParams filterParams; // Offset: 0x20
    bool isConnectedToRoom; // Offset: 0x30
    bool wirelessConnection; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
    DynArray_ItemResourceState* states; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x40
    DynArray_ItemResourceControlParameterBase* controlParameters; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x70
    DynArray_ItemResourceControlBlock* controlBlocks; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xa0
    int32_t defaultPriority; // Offset: 0xc8
    uint8_t _pad_6[0x4]; // Offset: 0xcc
    FunctionalityModifiers functionalityModifiers; // Offset: 0xd0
    ItemResourceNetworkPowerModifier powerPlantOverride; // Offset: 0xe0
};

// Original name: ItemResourceComposition
// Size: 0x58
// VTable: 0x1499a76c0
struct ItemResourceComposition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ItemResourceCompositionValue* values; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x48]; // Offset: 0x10
};

// Original name: ItemResourceCompositionMap
// Size: 0x48
// VTable: 0x1499a0d00
struct ItemResourceCompositionMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    DynArray_ResourceType* containerResources; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    bool affectsItemFunctionality; // Offset: 0x40
    bool isShared; // Offset: 0x41
    bool itemMustBeOnline; // Offset: 0x42
    uint8_t _pad_2[0x5]; // Offset: 0x43
};

// Original name: ItemResourceCompositionValue
// Size: 0x28
// VTable: 0x1499a75e8
struct ItemResourceCompositionValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType containerResource; // Offset: 0x8
    float ratio; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: ItemResourceContainerPlaceholderParams
// Size: 0x78
// VTable: 0x1499a88f0
struct ItemResourceContainerPlaceholderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float capacity; // Offset: 0x18
    float defaultFullness; // Offset: 0x1c
    ItemResourceComposition composition; // Offset: 0x20
};

// Original name: ItemResourceControlBlock
// Size: 0xb8
// VTable: 0x1499a8220
struct ItemResourceControlBlock {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ItemResourceState startState; // Offset: 0x18
    DynArray_ItemResourceControlOutputBase* controlOutputs; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    DynArray_ItemResourceControlConditionBase* controlConditions; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
    DynArray_SInteractionState* linkedInteractionStatesReceive; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x90
};

// Original name: ItemResourceControlOutputChangeInteractionState
// Size: 0x18
// VTable: 0x1499a8d90
struct ItemResourceControlOutputChangeInteractionState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState outputInteractionState; // Offset: 0x8
};

// Original name: ItemResourceControlOutputControlBlock
// Size: 0x18
// VTable: 0x1499a8d30
struct ItemResourceControlOutputControlBlock {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceControlBlock outputControlBlock; // Offset: 0x8
};

// Original name: ItemResourceControlOutputState
// Size: 0x18
// VTable: 0x1499a8cd0
struct ItemResourceControlOutputState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceState outputState; // Offset: 0x8
};

// Original name: ItemResourceConversionModifierScrub
// Size: 0x38
// VTable: 0x1499a8ae0
struct ItemResourceConversionModifierScrub {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ItemResourceConversionPair* conversionPair; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ItemResourceConversionPair
// Size: 0x38
// VTable: 0x1499a7668
struct ItemResourceConversionPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType toScrub; // Offset: 0x8
    ResourceType toAdd; // Offset: 0x20
};

// Original name: ItemResourceDeltaConsumption
// Size: 0x98
// VTable: 0x1499a7a18
struct ItemResourceDeltaConsumption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceDeltaAmount consumption; // Offset: 0x8
    ItemResourceComposition consumptionComposition; // Offset: 0x28
    ItemResourceDynamicAmountBase dynamicAmountOverride; // Offset: 0x80
    float minimumConsumptionFraction; // Offset: 0x90
    uint8_t _pad_1[0x4]; // Offset: 0x94
};

// Original name: ItemResourceDeltaConversion
// Size: 0x130
// VTable: 0x1499a7df0
struct ItemResourceDeltaConversion {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceDeltaAmount consumption; // Offset: 0x8
    ItemResourceDeltaAmount generation; // Offset: 0x28
    ItemResourceComposition generatedComposition; // Offset: 0x48
    ItemResourceComposition consumptionComposition; // Offset: 0xa0
    ItemResourceConversionModifierBase dynamicConversionModifier; // Offset: 0xf8
    ItemResourceDynamicAmountBase dynamicAmountOverride; // Offset: 0x108
    bool noOverGeneration; // Offset: 0x118
    uint8_t _pad_1[0x3]; // Offset: 0x119
    float minimumConsumptionFraction; // Offset: 0x11c
    FunctionalityModifiers generationModifiers; // Offset: 0x120
};

// Original name: ItemResourceDeltaGeneration
// Size: 0xb8
// VTable: 0x1499a7b38
struct ItemResourceDeltaGeneration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceDeltaAmount generation; // Offset: 0x8
    ItemResourceComposition composition; // Offset: 0x28
    ItemResourceDynamicAmountBase dynamicAmountOverride; // Offset: 0x80
    ItemResourceDynamicCompositionBase dynamicCompositionOverride; // Offset: 0x90
    FunctionalityModifiers generationModifiers; // Offset: 0xa0
    bool noOverGeneration; // Offset: 0xb0
    uint8_t _pad_1[0x7]; // Offset: 0xb1
};

// Original name: ItemResourceDeltaInject
// Size: 0x80
// VTable: 0x1499a77c8
struct ItemResourceDeltaInject {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceDeltaAmount injectedDelta; // Offset: 0x8
    ItemResourceComposition injectedComposition; // Offset: 0x28
};

// Original name: ItemResourceDeltaStorage
// Size: 0xc8
// VTable: 0x1499a7c58
struct ItemResourceDeltaStorage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceDeltaAmount consumption; // Offset: 0x8
    ItemResourceDeltaAmount generation; // Offset: 0x28
    bool discharge; // Offset: 0x48
    uint8_t _pad_1[0x7]; // Offset: 0x49
    ItemResourceComposition consumptionComposition; // Offset: 0x50
    ItemResourceDynamicResourceBase dynamicResourceOverride; // Offset: 0xa8
    FunctionalityModifiers transferModifiers; // Offset: 0xb8
};

// Original name: ItemResourceDynamicCompositionExample
// Size: 0x38
// VTable: 0x1499a8b68
struct ItemResourceDynamicCompositionExample {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resource1; // Offset: 0x8
    ResourceType resource2; // Offset: 0x20
};

// Original name: ItemResourceGroup
// Size: 0x80
// VTable: 0x1499a9188
struct ItemResourceGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SItemPortDef* subPorts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ItemResourceGroup* subGroups; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    CryStringT* groupName; // Offset: 0x68
    uint8_t _pad_3[0x8]; // Offset: 0x70
    bool controlableSubs; // Offset: 0x78
    uint8_t _pad_4[0x7]; // Offset: 0x79
};

// Original name: ItemResourceModifier
// Size: 0x18
// VTable: 0x1499a1460
struct ItemResourceModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceDeltaInject delta; // Offset: 0x8
};

// Original name: ItemResourceNetworkGlobal
// Size: 0x270
// VTable: 0x1499a1408
struct ItemResourceNetworkGlobal {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ItemResourceCompositionMap* networkResources; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ItemRoomResourcePair* resourcePairs; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_ItemResourceTypeData* itemResourceTypeData; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    float coolantBaseConversionRate; // Offset: 0x98
    float powerBaseConversionRate; // Offset: 0x9c
    ItemResourceNetworkUIParams uiParams; // Offset: 0xa0
    ItemResourceNetworkPowerParams powerParams; // Offset: 0x1c8
    ItemResourceNetworkDefaultPowerDistributionParams defaultPowerDistributionParams; // Offset: 0x200
    uint8_t _pad_4[0x50]; // Offset: 0x220
};

// Original name: ItemResourceRoomModifierParams
// Size: 0x30
// VTable: 0x1499f6b70
struct ItemResourceRoomModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    ItemResourceModifier resourceModifiers; // Offset: 0x18
};

// Original name: ItemResourceState
// Size: 0xf0
// VTable: 0x1499a8120
struct ItemResourceState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ItemResourceDeltaBase* deltas; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_ResourceLinkedInteractionState* linkedInteractionStates; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    ItemResourceSignatureParams signatureParams; // Offset: 0x78
    DynArray_ResourceRangeParams* rangeParams; // Offset: 0xc0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xc8
};

// Original name: ItemResourceStateModifier
// Size: 0x68
// VTable: 0x1499a90b0
struct ItemResourceStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRangeStateLevel* stateRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ItemResourceState* linkedRNetStates; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: ItemRoomResourcePair
// Size: 0x38
// VTable: 0x1499a0d88
struct ItemRoomResourcePair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resourceGasRef; // Offset: 0x8
    GasParams roomGasRef; // Offset: 0x20
};

// Original name: ItemWeaponBeamVFXParams
// Size: 0x248
// VTable: 0x1499f6f18
struct ItemWeaponBeamVFXParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    int32_t fireActionIndex; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    ItemWeaponBeamVFXStrengthOverrideParams strengthOverride; // Offset: 0x20
    CryStringT* helperName; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
    float range; // Offset: 0x40
    uint8_t _pad_3[0x4]; // Offset: 0x44
    SBeamGroupParams beamEffects; // Offset: 0x48
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x218 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x220
};

// Original name: JournalEntryDialogueLog
// Size: 0x40
// VTable: 0x1499758a8
struct JournalEntryDialogueLog {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DialogueContext* Dialogue; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    CLocIdentifier* Description; // Offset: 0x38
};

// Original name: JournalEntryLawText
// Size: 0x28
// VTable: 0x149975548
struct JournalEntryLawText {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* BodyText; // Offset: 0x8
    Jurisdiction jurisdiction; // Offset: 0x10
};

// Original name: JournalEntryMinRequiredMissionsText
// Size: 0x58
// VTable: 0x149975770
struct JournalEntryMinRequiredMissionsText {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* BodyText; // Offset: 0x8
    DynArray_MinRequiredMissions* minRequiredMissions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    CLocIdentifier* completedText; // Offset: 0x40
    CLocIdentifier* allCompletedText; // Offset: 0x48
    ARDataType allCompletedAwardTriggerBadge; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
};

// Original name: JournalEntryMissionProgressText
// Size: 0x50
// VTable: 0x149975678
struct JournalEntryMissionProgressText {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* BodyText; // Offset: 0x8
    DynArray_MissionBrokerEntry* associatedMissions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    CLocIdentifier* completedText; // Offset: 0x40
    CLocIdentifier* allCompletedText; // Offset: 0x48
};

// Original name: JumpDownNavigationLink
// Size: 0x90
// VTable: 0x1499ecdb0
struct JumpDownNavigationLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkValidForAgentType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    NavigationLinkCostCustomization costMultiplierSetup; // Offset: 0x18
    ARDataType linkingType; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    UsableUseChannelInstance useChannel; // Offset: 0x58
    NavLinkLocation topAnchor; // Offset: 0x68
    CryStringT* mannequinTags; // Offset: 0x78
    uint8_t _pad_3[0x8]; // Offset: 0x80
    float motionWarpSearchDistance; // Offset: 0x88
    uint8_t _pad_4[0x4]; // Offset: 0x8c
};

// Original name: JumpDriveEffectParams
// Size: 0xa8
// VTable: 0x149a135a0
struct JumpDriveEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Behavior_JumpDriveEffectsPreset jumpDriveParticles; // Offset: 0x8
    GlobalResourceParticle projectileEffect; // Offset: 0x18
    GlobalResourceParticle tunnelResponseEffect; // Offset: 0x30
    JumpDriveWakeParams wakeParams; // Offset: 0x48
    JumpDriveOpeningParams openingParams; // Offset: 0x58
    JumpDriveTravelParams travelParams; // Offset: 0x68
    JumpDriveExitParams exitParams; // Offset: 0x88
};

// Original name: Jurisdiction
// Size: 0x1a0
// VTable: 0x14996f5a8
struct Jurisdiction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* subsumptionJurisdiction; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* name; // Offset: 0x18
    CryStringT* logoPath; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    Jurisdiction parentJurisdiction; // Offset: 0x30
    bool respectsParentJurisdictionLaws; // Offset: 0x48
    uint8_t _pad_3[0x7]; // Offset: 0x49
    DynArray_Infraction* infractions; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x58
    DynArray_InfractionSet* infractionSets; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x88
    JournalEntry journalEntry; // Offset: 0xb0
    float maxStolenGoodsPossessionSCU; // Offset: 0xc8
    uint8_t _pad_6[0x4]; // Offset: 0xcc
    DynArray_EntityClassDefinition* prohibitedGoods; // Offset: 0xd0 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0xd8
    DynArray_ResourceType* prohibitedResources; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x108
    DynArray_ControlledSubstanceClass* controlledSubstanceClasses; // Offset: 0x130 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x138
    int32_t baseFine; // Offset: 0x160
    float earlyPaymentPeriod; // Offset: 0x164
    bool isPrison; // Offset: 0x168
    uint8_t _pad_10[0x7]; // Offset: 0x169
    DynArray_ImpoundingDefinition* impoundingDefinitions; // Offset: 0x170 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x178
};

// Original name: JurisdictionScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7a00
struct JurisdictionScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: KeypadInteractionParams
// Size: 0x58
// VTable: 0x149967870
struct KeypadInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSharedInteractionParams* keyInteractions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SSharedInteractionParams enterCodeInteraction; // Offset: 0x38
    SSharedInteractionParams clearCodeInteraction; // Offset: 0x48
};

// Original name: KeypadParams
// Size: 0x68
// VTable: 0x149967a38
struct KeypadParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t codeLength; // Offset: 0x18
    bool repeatKey; // Offset: 0x1c
    bool repeatKeyInCode; // Offset: 0x1d
    bool randomCode; // Offset: 0x1e
    uint8_t _pad_1[0x1]; // Offset: 0x1f
    DynArray_int32_t* validCodes; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    int32_t attemptsUntilCodeReset; // Offset: 0x50
    bool resetCodeOnSuccess; // Offset: 0x54
    bool autoSuccessOnEnterKey; // Offset: 0x55
    bool autoFailOnInputLength; // Offset: 0x56
    uint8_t _pad_3[0x1]; // Offset: 0x57
    KeypadInteractionParams interactionSetup; // Offset: 0x58
};

// Original name: KioskInteractionEntityComponentParams
// Size: 0x148
// VTable: 0x149a488a0
struct KioskInteractionEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool onlyShowCursorWhenLockedByKiosk; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float initialForceLookAtLerpTime; // Offset: 0x1c
    float defaultForceLookAtLerpTime; // Offset: 0x20
    float forceLookAtDecayFactor; // Offset: 0x24
    float forceLookAtIncreaseFactor; // Offset: 0x28
    float forceLookAtThreshold; // Offset: 0x2c
    float FOVSpeedFactor; // Offset: 0x30
    float FOVHaltDistanceMax; // Offset: 0x34
    float FOVHaltDistanceMin; // Offset: 0x38
    float FOVMax; // Offset: 0x3c
    float FOVMin; // Offset: 0x40
    float lookInputFactor; // Offset: 0x44
    float inActivityTimer; // Offset: 0x48
    float autoCloseRadiusInNonFoucseMode; // Offset: 0x4c
    bool blockLookInputs; // Offset: 0x50
    bool supportWalkToAlign; // Offset: 0x51
    uint8_t _pad_2[0x6]; // Offset: 0x52
    SSharedInteractionParams openInteraction; // Offset: 0x58
    DynArray_UIOwnerContextTransitionPair* attractTransitions; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_UIOwnerContextTransitionPair* openTransitions; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_UIOwnerContextTransitionPair* powerOffTransitions; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
    DynArray_ARDataType* abilityLocks; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x100
    bool isAccessedFromVehicleSeat; // Offset: 0x128
    uint8_t _pad_7[0x7]; // Offset: 0x129
    Vec3 lookAtOffset; // Offset: 0x130
};

// Original name: LadderNavigationLink
// Size: 0x68
// VTable: 0x1499ece68
struct LadderNavigationLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkValidForAgentType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    NavigationLinkCostCustomization costMultiplierSetup; // Offset: 0x18
    ARDataType linkingType; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    UsableUseChannelInstance useChannel; // Offset: 0x58
};

// Original name: LandingGearContactStateModifier
// Size: 0x38
// VTable: 0x1499c1f78
struct LandingGearContactStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AttachableStateModifierContextBase context; // Offset: 0x8
    SInteractionState landed; // Offset: 0x18
    SInteractionState notLanded; // Offset: 0x28
};

// Original name: LandingGearStateModifier
// Size: 0x58
// VTable: 0x1499c1ef8
struct LandingGearStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AttachableStateModifierContextBase context; // Offset: 0x8
    SInteractionState deploying; // Offset: 0x18
    SInteractionState deployed; // Offset: 0x28
    SInteractionState retracting; // Offset: 0x38
    SInteractionState retracted; // Offset: 0x48
};

// Original name: LandingZoneInventory
// Size: 0x80
// VTable: 0x149a9e470
struct LandingZoneInventory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InventoryContainer containerParams; // Offset: 0x8
    DynArray_InventoryLocation* locations; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    DynArray_LandingZoneInventoryRedirect* locationRedirects; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
};

// Original name: LandingZoneInventoryRedirect
// Size: 0x38
// VTable: 0x149a9e348
struct LandingZoneInventoryRedirect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObject location; // Offset: 0x8
    StarMapObject inventoryLocation; // Offset: 0x20
};

// Original name: LawSystemGlobalSettings
// Size: 0x410
// VTable: 0x14996ffd8
struct LawSystemGlobalSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CrimeStatThresholds crimeStatThresholds; // Offset: 0x8
    bool autoPayInfractionFines; // Offset: 0x40
    uint8_t _pad_1[0x3]; // Offset: 0x41
    float earlyFineMultiplier; // Offset: 0x44
    float meritsToCredit; // Offset: 0x48
    float meritsToSentenceMinute; // Offset: 0x4c
    int32_t meritSentenceLimit; // Offset: 0x50
    int32_t meritSentenceCurveStart; // Offset: 0x54
    int32_t maxMeritsValue; // Offset: 0x58
    float removalTimeMaxSeconds; // Offset: 0x5c
    float removalTimeMinSeconds; // Offset: 0x60
    float meritsToRemovalTimeSeconds; // Offset: 0x64
    float defaultPressChargesNotificationTime; // Offset: 0x68
    float arrestTimeMinSeconds; // Offset: 0x6c
    float arrestTimeMaxSeconds; // Offset: 0x70
    float arrestTimeIncreaseStep; // Offset: 0x74
    float arrestSearchAreaInVehicle; // Offset: 0x78
    float arrestSearchAreaOnFoot; // Offset: 0x7c
    float trespassWarningSeconds; // Offset: 0x80
    float trespassWarningSecondsInPrivateProperty; // Offset: 0x84
    float trespassRevokeWarningSeconds; // Offset: 0x88
    float trespassGoodRevokeBeforeShowingInSeconds; // Offset: 0x8c
    JournalEntry criminalRecordJournalEntry; // Offset: 0x90
    JournalEntry firstCrimeStatJournalEntry; // Offset: 0xa8
    ScanEvaluationInfractionSettings foundInOwnStolenShipInfraction; // Offset: 0xc0
    ScanEvaluationInfractionSettings harboringAFelonInfraction; // Offset: 0x118
    ScanEvaluationInfractionSettings stolenGoodsPossessionInfraction; // Offset: 0x170
    ScanEvaluationInfractionSettings stolenGoodsDistributionInfraction; // Offset: 0x1c8
    ScanEvaluationInfractionSettings prohibitedGoodsInfraction; // Offset: 0x220
    ScanEvaluationInfractionSettings arrestedInfraction; // Offset: 0x278
    ScanEvaluationInfractionSettings trespassingInfraction; // Offset: 0x2d0
    InfractionDefinition resistArrestInfraction; // Offset: 0x328
    InfractionDefinition evadeArrestInfraction; // Offset: 0x340
    DynArray_ScanEvaluationInfractionSettings* controlledSubstancePossessionInfractions; // Offset: 0x358 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x360
    DynArray_ScanEvaluationInfractionSettings* controlledSubstanceDistributionInfractions; // Offset: 0x388 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x390
    SplashDamageInfractionSettings splashDamageSettings; // Offset: 0x3b8
    float gracePeriodAfterUndocking; // Offset: 0x3d8
    uint8_t _pad_4[0x4]; // Offset: 0x3dc
    SecurityNetworkManifest privateShipSecurityManifest; // Offset: 0x3e0
    SecurityNetworkManifest privateLocationSecurityManifest; // Offset: 0x3f8
};

// Original name: LeanConnection
// Size: 0x30
// VTable: 0x149aac9e8
struct LeanConnection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool waitUntilFinished; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float delaySeconds; // Offset: 0xc
    CryStringT* waitForEvent; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    LeanState nextState; // Offset: 0x20
};

// Original name: LeanGraph
// Size: 0x38
// VTable: 0x149aacb10
struct LeanGraph {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LeanState* leanStates; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LeanState
// Size: 0x60
// VTable: 0x149aacab8
struct LeanState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* mannequinTags; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* mannequinFragment; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    DynArray_LeanConnection* connections; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
};

// Original name: LegacyCrafterContainerPort
// Size: 0x20
// VTable: 0x149a0f518
struct LegacyCrafterContainerPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef port; // Offset: 0x8
    ARDataType mode; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: LegacyCrafterInteractions
// Size: 0x58
// VTable: 0x149a0f498
struct LegacyCrafterInteractions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams goToIdleInteraction; // Offset: 0x8
    SSharedInteractionParams goToBusyInteraction; // Offset: 0x18
    Tag idleStateTag; // Offset: 0x28
    Tag busyStateTag; // Offset: 0x40
};

// Original name: LegacyCraftingCost_ResourceAmount
// Size: 0x30
// VTable: 0x149a0eee8
struct LegacyCraftingCost_ResourceAmount {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resource; // Offset: 0x8
    SBaseCargoUnit amount; // Offset: 0x20
};

// Original name: LegacyCraftingCost_ResourceAmountDerivedFromAmmoContainer
// Size: 0x20
// VTable: 0x149a0ef40
struct LegacyCraftingCost_ResourceAmountDerivedFromAmmoContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resource; // Offset: 0x8
};

// Original name: LegacyCraftingOutput_Entity
// Size: 0x28
// VTable: 0x149a0eff0
struct LegacyCraftingOutput_Entity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    uint32_t amount; // Offset: 0x20
    bool fillAmmo; // Offset: 0x24
    uint8_t _pad_1[0x3]; // Offset: 0x25
};

// Original name: LegacyCraftingOutput_ResourceAmount
// Size: 0x30
// VTable: 0x149a0f078
struct LegacyCraftingOutput_ResourceAmount {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resource; // Offset: 0x8
    SBaseCargoUnit amount; // Offset: 0x20
};

// Original name: LegalOwnerScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7a08
struct LegalOwnerScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: LegalRegistrationComponentParams
// Size: 0x88
// VTable: 0x1499680e8
struct LegalRegistrationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool doNotTriggerCrimesAgainstThis; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    CryStringT* nameplateOverride; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    CLocIdentifier* nameplateLocalizedOverride; // Offset: 0x30
    bool displayNameplateOverPilotName; // Offset: 0x38
    uint8_t _pad_3[0x7]; // Offset: 0x39
    CryStringT* serialOverride; // Offset: 0x40
    uint8_t _pad_4[0x8]; // Offset: 0x48
    CLocIdentifier* serialLocalizedOverride; // Offset: 0x50
    VehicleSerialNumberFormat serialNumberFormat; // Offset: 0x58
    SecurityNetworkManifest securityNetworkManifest; // Offset: 0x70
};

// Original name: LegalRegistrationLocationComponentParams
// Size: 0x30
// VTable: 0x149968150
struct LegalRegistrationLocationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SecurityNetworkManifest securityNetworkManifest; // Offset: 0x18
};

// Original name: Level
// Size: 0x180
// VTable: 0x1499ae990
struct Level {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType id; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* gameToken; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* thumbnail; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    GameMode defaultGameRules; // Offset: 0x30
    DynArray_GameMode* validGameRules; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x50
    SLoadingScreenInformationDef loadingScreenInfo; // Offset: 0x78
    CLocIdentifier* locDisplayName; // Offset: 0xe8
    CLocIdentifier* description; // Offset: 0xf0
    uint64_t universeLocationUniqueId; // Offset: 0xf8
    SCExtendedLocalizationLevelParams displayFeatures; // Offset: 0x100
    DynArray_StarMapObject* potentialSpawnLocations; // Offset: 0x110 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x118
    DynArray_StarMapObject* potentialDevOnlySpawnLocations; // Offset: 0x140 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x148
    CryStringT* systemImagePath; // Offset: 0x170
    uint8_t _pad_7[0x8]; // Offset: 0x178
};

// Original name: LicensedItemModifier
// Size: 0x30
// VTable: 0x149a3edd8
struct LicensedItemModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition LicensedItem; // Offset: 0x8
    ARDataType Type; // Offset: 0x20
    float PercentageModifier; // Offset: 0x24
    bool DisableDuplicateBadgeCheck; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
};

// Original name: LoadoutDummyComponentParams
// Size: 0x2e8
// VTable: 0x149a57ff0
struct LoadoutDummyComponentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* playerTagPoint; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* playerIdleAnim; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* vehicleTagPoint; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    Vec3 vehicleBoundingBox; // Offset: 0x38
    Ang3 vehicleAngle; // Offset: 0x50
    UIWorldDisplay3DParams playerDisplayParams; // Offset: 0x68
    UIWorldDisplay3DParams vehicleDisplayParams; // Offset: 0x1a8
};

// Original name: LoadoutEditorComponentParams
// Size: 0x410
// VTable: 0x149aaae50
struct LoadoutEditorComponentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LoadoutEditorParams editorParams; // Offset: 0x8
    UIWorldDisplay3DParams displayParams; // Offset: 0x288
    RTTSunlightParams sunlightParams; // Offset: 0x3c8
};

// Original name: LoadoutEditorParams
// Size: 0x280
// VTable: 0x149aaada0
struct LoadoutEditorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LoadoutDummyTransformParams dummyTransformParams; // Offset: 0x8
    LoadoutItemPreviewTransformParams itemPreviewTransformParams; // Offset: 0x80
    LoadoutItemPortViewParams itemPortViewParams; // Offset: 0xf0
    LoadoutItemHighlightParams highlightParams; // Offset: 0x130
    LoadoutRequiredAttachmentsParams requiredAttachmentsParams; // Offset: 0x160
    LoadoutCandidateRootParams candidateRootParams; // Offset: 0x198
    DynArray_LoadoutEditorAdditionalParams* additionalParams; // Offset: 0x1d0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x1d8
    EntityClassDefinition dummyEntityClass; // Offset: 0x200
    float loadoutChangeHideDuration; // Offset: 0x218
    bool alphabeticalSort; // Offset: 0x21c
    bool selfHosting; // Offset: 0x21d
    bool applyAfterSave; // Offset: 0x21e
    bool allowRentalItems; // Offset: 0x21f
    bool allowDuplicateItems; // Offset: 0x220
    uint8_t _pad_2[0x7]; // Offset: 0x221
    DynArray_ARDataType* persistentItemGameModeFlag; // Offset: 0x228 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x230
    CryStringT* idleAnim; // Offset: 0x258
    uint8_t _pad_4[0x8]; // Offset: 0x260
    CryStringT* previewClip; // Offset: 0x268
    uint8_t _pad_5[0x8]; // Offset: 0x270
    bool vehicleSelectDisplay; // Offset: 0x278
    bool showRECWallet; // Offset: 0x279
    uint8_t _pad_6[0x6]; // Offset: 0x27a
};

// Original name: LoadoutKit
// Size: 0x28
// VTable: 0x1499b10a0
struct LoadoutKit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    SItemPortLoadoutBaseParams loadout; // Offset: 0x18
};

// Original name: LocationMissionLimit
// Size: 0xa0
// VTable: 0x149975e30
struct LocationMissionLimit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    float cooldown; // Offset: 0x20
    bool autoConsumeIfPlayerAtLocation; // Offset: 0x24
    uint8_t _pad_1[0x3]; // Offset: 0x25
    float playerAtLocationCooldown; // Offset: 0x28
    int32_t maxMissionInstances; // Offset: 0x2c
    TagList dependentParentTags; // Offset: 0x30
    TagList dependentChildTags; // Offset: 0x68
};

// Original name: LocationPinMarkerProvider
// Size: 0x20
// VTable: 0x149a23480
struct LocationPinMarkerProvider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Marker_Configuration markerConfig; // Offset: 0x8
};

// Original name: LocomotionNavigationLink
// Size: 0x98
// VTable: 0x1499ec9a0
struct LocomotionNavigationLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkValidForAgentType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    NavigationLinkCostCustomization costMultiplierSetup; // Offset: 0x18
    ARDataType linkingType; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    UsableUseChannelInstance useChannel; // Offset: 0x58
    NavLinkLocation startLocation; // Offset: 0x68
    NavLinkLocation endLocation; // Offset: 0x78
    float navlinkWidth; // Offset: 0x88
    int32_t maxAllowedLinks; // Offset: 0x8c
    int32_t maxAllowedCrossLinks; // Offset: 0x90
    uint8_t _pad_3[0x4]; // Offset: 0x94
};

// Original name: LogoutComponentParams
// Size: 0x48
// VTable: 0x149a0fd40
struct LogoutComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_LogoutInteractionParams* logoutInteractions; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: LogoutInteractionParams
// Size: 0x48
// VTable: 0x149a0fce8
struct LogoutInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams logoutInteraction; // Offset: 0x8
    SInteractionPointParams logoutInteractionPoint; // Offset: 0x18
    SSharedInteractionParams respawnInteraction; // Offset: 0x28
    SInteractionPointParams respawnInteractionPoint; // Offset: 0x38
};

// Original name: LootArchetype
// Size: 0xa8
// VTable: 0x1499b3e40
struct LootArchetype {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList excludedTags; // Offset: 0x8
    LootArchetypeOrGroup_Primary primaryOrGroup; // Offset: 0x40
    DynArray_LootArchetypeOrGroup_Secondary* secondaryOrGroups; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x80
};

// Original name: LootArchetypeEntry_Primary
// Size: 0xd0
// VTable: 0x1499b3c30
struct LootArchetypeEntry_Primary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Tag tag; // Offset: 0x18
    TagsDNFTerm additionalTags; // Offset: 0x30
    float weight; // Offset: 0x98
    uint8_t _pad_2[0x4]; // Offset: 0x9c
    DynArray_EntryOptionalData_Base* optionalData; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xa8
};

// Original name: LootArchetypeEntry_Secondary
// Size: 0x28
// VTable: 0x1499b3cb8
struct LootArchetypeEntry_Secondary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    float weight; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: LootArchetypeOrGroup_Primary
// Size: 0x38
// VTable: 0x1499b3d10
struct LootArchetypeOrGroup_Primary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LootArchetypeEntry_Primary* entries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LootArchetypeOrGroup_Secondary
// Size: 0x48
// VTable: 0x1499b3d98
struct LootArchetypeOrGroup_Secondary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* groupName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_LootArchetypeEntry_Secondary* entries; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: LootConfig
// Size: 0x58
// VTable: 0x1499b41d8
struct LootConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LootConstraints lootConstraints; // Offset: 0x8
    LootTable lootTable; // Offset: 0x40
};

// Original name: LootGenerationComponentParams
// Size: 0x70
// VTable: 0x1499f0690
struct LootGenerationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    LootConfig lootConfig; // Offset: 0x18
};

// Original name: LootGenerationGlobalParams
// Size: 0x38
// VTable: 0x1499b4330
struct LootGenerationGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LootGenerationSpecialEventArchetype* specialEventArchetypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LootGenerationSpecialEventArchetype
// Size: 0x40
// VTable: 0x1499b42d0
struct LootGenerationSpecialEventArchetype {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* eventString; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float probabilityPerContainer; // Offset: 0x18
    int32_t minEntriesPerContainer; // Offset: 0x1c
    int32_t maxEntriesPerContainer; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    LootArchetype archetype; // Offset: 0x28
};

// Original name: LootTable
// Size: 0x38
// VTable: 0x1499b3fd0
struct LootTable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_WeightedLootArchetype* lootArchetypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LootingInventoryParams
// Size: 0x48
// VTable: 0x149a9a608
struct LootingInventoryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* defaultTabIconPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_LootingTabParams* tabParams; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: LootingTabParams
// Size: 0x48
// VTable: 0x149a9a588
struct LootingTabParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* iconPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ItemCategory* itemCategories; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: MaelstromShatterBaseEvent
// Size: 0x20
// VTable: 0x1499b9d20
struct MaelstromShatterBaseEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag shatterTag; // Offset: 0x8
};

// Original name: MaelstromShatterDestroyEvent
// Size: 0x20
// VTable: 0x149a17878
struct MaelstromShatterDestroyEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag shatterTag; // Offset: 0x8
};

// Original name: MantleNavigationLink
// Size: 0x90
// VTable: 0x1499ecd00
struct MantleNavigationLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkValidForAgentType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    NavigationLinkCostCustomization costMultiplierSetup; // Offset: 0x18
    ARDataType linkingType; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    UsableUseChannelInstance useChannel; // Offset: 0x58
    NavLinkLocation topAnchor; // Offset: 0x68
    CryStringT* mannequinTags; // Offset: 0x78
    uint8_t _pad_3[0x8]; // Offset: 0x80
    float motionWarpSearchDistance; // Offset: 0x88
    uint8_t _pad_4[0x4]; // Offset: 0x8c
};

// Original name: MapDisplayParamsInteriorMap
// Size: 0x258
// VTable: 0x149a49918
struct MapDisplayParamsInteriorMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool showExterior; // Offset: 0x8
    bool immediateZoneHostOnly; // Offset: 0x9
    bool loadUnstreamedZoneHostAssets; // Offset: 0xa
    uint8_t _pad_1[0x1]; // Offset: 0xb
    float displayScaleMultiplier; // Offset: 0xc
    float markerRelativeScale; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    Vec3 displayPositionOffset; // Offset: 0x18
    InteriorMapWorldUIConfig worldUIConfig; // Offset: 0x30
    BuildingBlocks_Canvas visibleMarkersCanvas; // Offset: 0xa8
    BuildingBlocks_Canvas edgeMarkerCanvas; // Offset: 0xc0
    DegYPR fixedOrientation; // Offset: 0xd8
    MapDisplayControlLimits controlLimits; // Offset: 0xe8
    MapDisplayRenderLayerParams floorRenderLayerParams; // Offset: 0xf8
    MapDisplayRenderLayerParams wallRenderLayerParams; // Offset: 0x118
    MapDisplayRenderLayerParams bulkheadRenderLayerParams; // Offset: 0x138
    MapDisplayRenderLayerParams unlockedDoorRenderLayerParams; // Offset: 0x158
    MapDisplayRenderLayerParams lockedDoorRenderLayerParams; // Offset: 0x178
    MapDisplayRenderLayerParams exteriorRenderLayerParams; // Offset: 0x198
    MapDisplayRenderLayerParams nonplayableRenderLayerParams; // Offset: 0x1b8
    MapDisplayRenderLayerParams nominalRenderLayerParams; // Offset: 0x1d8
    MapDisplayRenderLayerParams moderateRenderLayerParams; // Offset: 0x1f8
    MapDisplayRenderLayerParams criticalRenderLayerParams; // Offset: 0x218
    MapDisplayRenderLayerParams disabledRenderLayerParams; // Offset: 0x238
};

// Original name: MapDisplayParamsStarMap
// Size: 0x58
// VTable: 0x149a49570
struct MapDisplayParamsStarMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MarkerTrackingViewMode* viewModes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    BuildingBlocks_Canvas uiElementsCanvasGUID; // Offset: 0x38
    float displayRegionHeightPixels; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
};

// Original name: MarkerTrackingViewMode
// Size: 0x30
// VTable: 0x149a490e8
struct MarkerTrackingViewMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MarkerTrackingViewModeParameters viewModeConfig; // Offset: 0x8
    SInteractionState state; // Offset: 0x20
};

// Original name: Marker_Configuration
// Size: 0x180
// VTable: 0x149a49dd8
struct Marker_Configuration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* defaultMaterial; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* defaultModel; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* offScreenModel; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* objectiveStyleModel; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
    bool alwaysShowOffScreenModel; // Offset: 0x48
    uint8_t _pad_5[0x3]; // Offset: 0x49
    ARDataType ARcullingCategory; // Offset: 0x4c
    bool useARIcon; // Offset: 0x50
    bool useSmallIcon; // Offset: 0x51
    bool useStandardIcon; // Offset: 0x52
    bool useModel; // Offset: 0x53
    int32_t smallIconIndex; // Offset: 0x54
    int32_t standardIconIndex; // Offset: 0x58
    uint8_t _pad_6[0x4]; // Offset: 0x5c
    CryStringT* smallIcon; // Offset: 0x60
    uint8_t _pad_7[0x8]; // Offset: 0x68
    CryStringT* standardIcon; // Offset: 0x70
    uint8_t _pad_8[0x8]; // Offset: 0x78
    ARDataType mapLabelDisplayType; // Offset: 0x80
    uint8_t _pad_9[0x4]; // Offset: 0x84
    BuildingBlocks_Canvas layoutCanvas; // Offset: 0x88
    DynArray_Marker_AbilityBase* abilities; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0xa8
    DynArray_Marker_ShowRule* showRules; // Offset: 0xd0 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0xd8
    DynArray_Marker_ShowRuleMapDisplayMode* mapShowRules; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x108
    ARDataType stackPositionAlignment; // Offset: 0x130
    uint8_t _pad_13[0x4]; // Offset: 0x134
    DynArray_ARDataType* mapBoxoutSectionTypes; // Offset: 0x138 // Pointer to DynArray struct
    uint8_t _pad_14[0x28]; // Offset: 0x140
    Vec3 markerOffset; // Offset: 0x168
};

// Original name: MassScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7fa8
struct MassScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: MedBedComponentParams
// Size: 0x1f8
// VTable: 0x149a101f8
struct MedBedComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams healInteraction; // Offset: 0x18
    SSharedInteractionParams setRespawnInteraction; // Offset: 0x28
    SSharedInteractionParams cancelRespawnInteraction; // Offset: 0x38
    SSharedInteractionParams cancelAllRespawnsInteraction; // Offset: 0x48
    SSharedInteractionParams respawnInteraction; // Offset: 0x58
    SInteractionPointParams respawnInteractionPoint; // Offset: 0x68
    UsableUseChannelInstance useChannelToHealActor; // Offset: 0x78
    SInteractionState surgerySequenceState; // Offset: 0x88
    float respawnRange; // Offset: 0x98
    float timeToHeal; // Offset: 0x9c
    float delayBeforeHeal; // Offset: 0xa0
    ARDataType medBedTier; // Offset: 0xa4
    MedBedSurgeryNames surgeryNames; // Offset: 0xa8
    MedicalItemTierConfig medicalItemTierConfig; // Offset: 0x1e0
};

// Original name: MegaMap
// Size: 0x140
// VTable: 0x1499aedf0
struct MegaMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Level level; // Offset: 0x8
    GameMode gameMode; // Offset: 0x20
    CryStringT* trackViewIntro; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
    DynArray_SMegaMapSolarSystem* SolarSystems; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    ARDataType singlePlayerOrMultiplayer; // Offset: 0x78
    uint8_t _pad_3[0x4]; // Offset: 0x7c
    CryStringT* subsumptionMission; // Offset: 0x80
    uint8_t _pad_4[0x8]; // Offset: 0x88
    DynArray_AbstractMissionInitParam* subsumptionMissionInitParams; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x98
    ArenaCommanderScenarioParams arenaCommanderScenarioParams; // Offset: 0xc0
    MissionBroker missionBroker; // Offset: 0xd0
    StarMapObject rootLocation; // Offset: 0xe8
    ARDataType streamingMode; // Offset: 0x100
    bool bindCullingEnabled; // Offset: 0x104
    uint8_t _pad_6[0x3]; // Offset: 0x105
    int32_t defaultWinningTeamOverride; // Offset: 0x108
    uint8_t _pad_7[0x4]; // Offset: 0x10c
    CLocIdentifier* displayName; // Offset: 0x110
    bool appearsInS42LevelSelect; // Offset: 0x118
    uint8_t _pad_8[0x7]; // Offset: 0x119
    MegaMap chapter; // Offset: 0x120
    bool skipLoadScreen; // Offset: 0x138
    uint8_t _pad_9[0x7]; // Offset: 0x139
};

// Original name: MinCompletionTags
// Size: 0x28
// VTable: 0x149972138
struct MinCompletionTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredTag; // Offset: 0x8
    int32_t minRequired; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: MinRequiredMissions
// Size: 0x80
// VTable: 0x14996c058
struct MinRequiredMissions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t minRequiredCompletedMissions; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    TagList completionTags; // Offset: 0x10
    DynArray_MissionBrokerEntry* requiredMissions; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    CLocIdentifier* journalEntryLabel; // Offset: 0x78
};

// Original name: MineableCommoditiesScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7d40
struct MineableCommoditiesScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: MineableComposition
// Size: 0x48
// VTable: 0x149a0bc80
struct MineableComposition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* depositName; // Offset: 0x8
    int32_t minimumDistinctElements; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_MineableCompositionPart* compositionArray; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: MineableCompositionPart
// Size: 0x30
// VTable: 0x149a0bbd0
struct MineableCompositionPart {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MineableElement mineableElement; // Offset: 0x8
    float minPercentage; // Offset: 0x20
    float maxPercentage; // Offset: 0x24
    float probability; // Offset: 0x28
    float curveExponent; // Offset: 0x2c
};

// Original name: MineableElement
// Size: 0x40
// VTable: 0x149a0bad8
struct MineableElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType resourceType; // Offset: 0x8
    float elementInstability; // Offset: 0x20
    float elementResistance; // Offset: 0x24
    float elementOptimalWindowMidpoint; // Offset: 0x28
    float elementOptimalWindowMidpointRandomness; // Offset: 0x2c
    float elementOptimalWindowThinness; // Offset: 0x30
    float elementExplosionMultiplier; // Offset: 0x34
    float elementClusterFactor; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: MineableExplosionParams
// Size: 0x1d0
// VTable: 0x149a0b0f0
struct MineableExplosionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ExplosionParams defaultExplosionParams; // Offset: 0x8
    float dangerPoolFactor; // Offset: 0x1c8
    float defaultVolume; // Offset: 0x1cc
};

// Original name: MineableParams
// Size: 0x80
// VTable: 0x149a0bda8
struct MineableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    MiningGlobalParams globalParams; // Offset: 0x18
    MiningAudioParams audioParams; // Offset: 0x30
    MineableComposition composition; // Offset: 0x48
    SDamageCurveParams glowCurvePoints; // Offset: 0x60
    float glowCurvePower; // Offset: 0x78
    float glowLerpSpeed; // Offset: 0x7c
};

// Original name: MiningGlobalParams
// Size: 0x2f8
// VTable: 0x149a0b728
struct MiningGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float powerCapacityPerMass; // Offset: 0x8
    float decayPerMass; // Offset: 0xc
    float optimalWindowSize; // Offset: 0x10
    float optimalWindowFactor; // Offset: 0x14
    float resistanceCurveFactor; // Offset: 0x18
    float optimalWindowThinnessCurveFactor; // Offset: 0x1c
    float optimalWindowMaxSize; // Offset: 0x20
    float controlledBreakingFillRate; // Offset: 0x24
    float controlledBreakingFillRateDanger; // Offset: 0x28
    float controlledBreakingDecayRate; // Offset: 0x2c
    float dangerBreakingFillRate; // Offset: 0x30
    float dangerBreakingFillRateExponent; // Offset: 0x34
    float dangerBreakingDecayRate; // Offset: 0x38
    float absorbableVolumeThreshold; // Offset: 0x3c
    MineableInstabilityParams mineableInstabilityParams; // Offset: 0x40
    MineableExplosionParams mineableExplosionParams; // Offset: 0x58
    float childRockInvulnerabilityTime; // Offset: 0x228
    float cSCUPerVolume; // Offset: 0x22c
    float defaultMass; // Offset: 0x230
    uint8_t _pad_1[0x4]; // Offset: 0x234
    GlobalResourceParticle fractureParticleEffect; // Offset: 0x238
    GlobalResourceParticle explosionParticleEffect; // Offset: 0x250
    GlobalResourceParticle centerRockDestroyParticleEffect; // Offset: 0x268
    GlobalResourceParticle fullyExtractedRockParticleEffect; // Offset: 0x280
    HitConsistencyParams hitConsistencyParams; // Offset: 0x298
    float modifierPersistenceTime; // Offset: 0x2b8
    float childRockLifeTimer; // Offset: 0x2bc
    float childRockZeroGDamping; // Offset: 0x2c0
    float terrainFactorStaticThreshold; // Offset: 0x2c4
    bool showExplosionFXForSurplusChild; // Offset: 0x2c8
    uint8_t _pad_2[0x3]; // Offset: 0x2c9
    float childRockInactivityLifetime; // Offset: 0x2cc
    float gadgetDetachThreshold; // Offset: 0x2d0
    float gadgetDestroyThreshold; // Offset: 0x2d4
    float dangerToGadgetDamage; // Offset: 0x2d8
    uint8_t _pad_3[0x4]; // Offset: 0x2dc
    ResourceType wasteResourceType; // Offset: 0x2e0
};

// Original name: MissionBroker
// Size: 0xb0
// VTable: 0x14996bce8
struct MissionBroker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionBrokerEntry* missions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_DynamicMissionLocation* dynamicLocations; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_MissionLocationValidation* locationValidation; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    Jurisdiction defaultJurisdictionForPlayerCrimeStats; // Offset: 0x98
};

// Original name: MissionBrokerEntry
// Size: 0x5b8
// VTable: 0x14996bc18
struct MissionBrokerEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool notForRelease; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DevOwner owner; // Offset: 0x10
    CryStringT* missionModule; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* playerFacingDebugName; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    CLocIdentifier* title; // Offset: 0x48
    CLocIdentifier* titleHUD; // Offset: 0x50
    CLocIdentifier* description; // Offset: 0x58
    CLocIdentifier* missionGiver; // Offset: 0x60
    CLocIdentifier* commsChannelName; // Offset: 0x68
    MissionType type_; /* type */ // Offset: 0x70
    DynArray_MissionBrokerEntry* associatedMissions; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x90
    int32_t missionDifficulty; // Offset: 0xb8
    uint8_t _pad_5[0x4]; // Offset: 0xbc
    MissionLocality localityAvailable; // Offset: 0xc0
    StarMapObject locationMissionAvailable; // Offset: 0xd8
    DynArray_DateTimeSchedule* availableDateSchedule; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xf8
    DynArray_MissionBrokerEntry* onlyAvailableIfAllMissionsNotAvailable; // Offset: 0x120 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x128
    MissionReward missionReward; // Offset: 0x150
    PartialContractRewards partialRewardPayout; // Offset: 0x180
    DynArray_SReputationAmountListParams* missionResultReputationRewards; // Offset: 0x190 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x198
    DynArray_JournalEntry* journalEntriesToAddOnComplete; // Offset: 0x1c0 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x1c8
    DynArray_JournalEntry* journalEntriesToRemoveOnComplete; // Offset: 0x1f0 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x1f8
    bool initiallyActive; // Offset: 0x220
    bool notifyOnAvailable; // Offset: 0x221
    bool preShowObjectives; // Offset: 0x222
    bool showAsOffer; // Offset: 0x223
    int32_t missionBuyInAmount; // Offset: 0x224
    bool refundBuyInOnWithdraw; // Offset: 0x228
    bool hasCompleteButton; // Offset: 0x229
    bool onlyOwnerCanComplete; // Offset: 0x22a
    bool handlesAbandonRequest; // Offset: 0x22b
    bool missionModulePerPlayer; // Offset: 0x22c
    uint8_t _pad_11[0x3]; // Offset: 0x22d
    int32_t maxInstances; // Offset: 0x230
    int32_t maxPlayersPerInstance; // Offset: 0x234
    int32_t maxInstancesPerPlayer; // Offset: 0x238
    bool canBeShared; // Offset: 0x23c
    bool onceOnly; // Offset: 0x23d
    bool tutorial; // Offset: 0x23e
    uint8_t _pad_12[0x1]; // Offset: 0x23f
    MissionDeadline missionDeadline; // Offset: 0x240
    bool displayAlliedMarkers; // Offset: 0x260
    bool availableInPrison; // Offset: 0x261
    bool failIfSentToPrison; // Offset: 0x262
    bool failIfBecameCriminal; // Offset: 0x263
    bool failIfLeavePrison; // Offset: 0x264
    uint8_t _pad_13[0x3]; // Offset: 0x265
    TagList completionTags; // Offset: 0x268
    bool applyCompletionTagsOnFailed; // Offset: 0x2a0
    bool applyCompletionTagsOnAbandoned; // Offset: 0x2a1
    bool requestOnly; // Offset: 0x2a2
    uint8_t _pad_14[0x1]; // Offset: 0x2a3
    float respawnTime; // Offset: 0x2a4
    float respawnTimeVariation; // Offset: 0x2a8
    bool instanceHasLifeTime; // Offset: 0x2ac
    bool showLifeTimeInMobiGlas; // Offset: 0x2ad
    uint8_t _pad_15[0x2]; // Offset: 0x2ae
    float instanceLifeTime; // Offset: 0x2b0
    float instanceLifeTimeVariation; // Offset: 0x2b4
    bool canReacceptAfterAbandoning; // Offset: 0x2b8
    uint8_t _pad_16[0x3]; // Offset: 0x2b9
    float abandonedCooldownTime; // Offset: 0x2bc
    float abandonedCooldownTimeVariation; // Offset: 0x2c0
    bool canReacceptAfterFailing; // Offset: 0x2c4
    bool hasPersonalCooldown; // Offset: 0x2c5
    uint8_t _pad_17[0x2]; // Offset: 0x2c6
    float personalCooldownTime; // Offset: 0x2c8
    float personalCooldownTimeVariation; // Offset: 0x2cc
    bool moduleHandlesOwnShutdown; // Offset: 0x2d0
    uint8_t _pad_18[0x7]; // Offset: 0x2d1
    MissionBrokerEntry linkedMission; // Offset: 0x2d8
    MissionCompletePerkBaseDef missionCompletePerk; // Offset: 0x2f0
    DynArray_BaseMissionModifier* modifiers; // Offset: 0x300 // Pointer to DynArray struct
    uint8_t _pad_19[0x28]; // Offset: 0x308
    bool lawfulMission; // Offset: 0x330
    uint8_t _pad_20[0x7]; // Offset: 0x331
    MissionGiver missionGiverRecord; // Offset: 0x338
    MissionBrokerEntry invitationMission; // Offset: 0x350
    CryStringT* missionGiverFragmentTags; // Offset: 0x368
    uint8_t _pad_21[0x8]; // Offset: 0x370
    DynArray_Tag* missionTags; // Offset: 0x378 // Pointer to DynArray struct
    uint8_t _pad_22[0x28]; // Offset: 0x380
    ReputationPrerequisites reputationPrerequisites; // Offset: 0x3a8
    SReputationMissionRequirementsParams reputationRequirements; // Offset: 0x3d8
    DynArray_MinRequiredMissions* minRequiredMissions; // Offset: 0x3e8 // Pointer to DynArray struct
    uint8_t _pad_23[0x28]; // Offset: 0x3f0
    DynArray_MissionBrokerEntry* requiredMissions; // Offset: 0x418 // Pointer to DynArray struct
    uint8_t _pad_24[0x28]; // Offset: 0x420
    DynArray_TagSearchTerm* requiredCompletedMissionTags; // Offset: 0x448 // Pointer to DynArray struct
    uint8_t _pad_25[0x28]; // Offset: 0x450
    DynArray_JournalEntry* requiredJournalEntries; // Offset: 0x478 // Pointer to DynArray struct
    uint8_t _pad_26[0x28]; // Offset: 0x480
    TagList requiredAreaTags; // Offset: 0x4a8
    TagList excludedAreaTags; // Offset: 0x4e0
    DynArray_MissionProperty* properties; // Offset: 0x518 // Pointer to DynArray struct
    uint8_t _pad_27[0x28]; // Offset: 0x520
    DynArray_ObjectiveToken* objectiveTokens; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_28[0x28]; // Offset: 0x550
    MissionFlow missionFlow; // Offset: 0x578
    uint8_t _pad_29[0x8]; // Offset: 0x5b0
};

// Original name: MissionFailConditionParams
// Size: 0x38
// VTable: 0x149a3c3b8
struct MissionFailConditionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TriggerConditionDataDef triggerCondition; // Offset: 0x8
    int32_t warningLevel; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CLocIdentifier* displayText; // Offset: 0x28
    bool useAutomaticFailureScreen; // Offset: 0x30
    uint8_t _pad_2[0x7]; // Offset: 0x31
};

// Original name: MissionFailConditionsList
// Size: 0x38
// VTable: 0x149a3c410
struct MissionFailConditionsList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionFailConditionParams* failureConditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionFlowAction_PickRandomMissionPhase
// Size: 0x38
// VTable: 0x149970460
struct MissionFlowAction_PickRandomMissionPhase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionRandomPhaseEntry* missionPhases; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionFlowAction_TokenStateChange
// Size: 0x20
// VTable: 0x149970388
struct MissionFlowAction_TokenStateChange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectiveToken objectiveToken; // Offset: 0x8
    ARDataType toState; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: MissionFlowCondition_TokenState
// Size: 0x20
// VTable: 0x149970068
struct MissionFlowCondition_TokenState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectiveToken objectiveToken; // Offset: 0x8
    ARDataType tokenState; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: MissionGiver
// Size: 0xf8
// VTable: 0x14996bf20
struct MissionGiver {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    FactionReputation reputation; // Offset: 0x20
    CLocIdentifier* displayName; // Offset: 0x38
    CLocIdentifier* description; // Offset: 0x40
    CLocIdentifier* headquarters; // Offset: 0x48
    float invitationTimeout; // Offset: 0x50
    float visitTimeout; // Offset: 0x54
    float shortCooldown; // Offset: 0x58
    float mediumCooldown; // Offset: 0x5c
    float longCooldown; // Offset: 0x60
    uint8_t _pad_1[0x4]; // Offset: 0x64
    DynArray_CLocIdentifier* Allies; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x70
    DynArray_CLocIdentifier* Enemies; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xa0
    DynArray_SReputationContextBBPropertyParams* propertiesBB; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xd0
};

// Original name: MissionInitParamTag
// Size: 0x80
// VTable: 0x149975aa0
struct MissionInitParamTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    TagSearchTerm value; // Offset: 0x18
};

// Original name: MissionItem
// Size: 0x90
// VTable: 0x149975c88
struct MissionItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MissionStringVariants stringVariants; // Offset: 0x38
    float weighting; // Offset: 0x70
    uint8_t _pad_2[0x4]; // Offset: 0x74
    EntityClassDefinition entityClass; // Offset: 0x78
};

// Original name: MissionLocality
// Size: 0x38
// VTable: 0x14996af60
struct MissionLocality {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_StarMapObject* availableLocations; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionLocationData
// Size: 0x258
// VTable: 0x149976140
struct MissionLocationData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLocationTags generalTags; // Offset: 0x8
    TagSearchTerm producesTags; // Offset: 0x40
    TagSearchTerm consumesTags; // Offset: 0xa8
    TagList aiSpawnTags; // Offset: 0x110
    MissionStringVariants stringVariants; // Offset: 0x148
    DynArray_SMissionLocationModule* missionModules; // Offset: 0x180 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x188
    bool allowPartialOCStreamingForInit; // Offset: 0x1b0
    uint8_t _pad_2[0x7]; // Offset: 0x1b1
    DynArray_LocationMissionLimit* missionLimits; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1c0
    DynArray_AutoSpawnSettings* autoSpawnSettings; // Offset: 0x1e8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x1f0
    bool isSecurityNetworkHost; // Offset: 0x218
    uint8_t _pad_5[0x7]; // Offset: 0x219
    SecurityNetworkManifest defaultSecurityNetworkManifest; // Offset: 0x220
    bool disabled; // Offset: 0x238
    uint8_t _pad_6[0x7]; // Offset: 0x239
    EntityClusterMember entityClusterMember; // Offset: 0x240
};

// Original name: MissionLocationParams
// Size: 0x288
// VTable: 0x149976250
struct MissionLocationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLocationTemplate template_; /* template */ // Offset: 0x8
    MissionLocationData additionalData; // Offset: 0x20
    CryStringT* actionArea; // Offset: 0x278
    uint8_t _pad_1[0x8]; // Offset: 0x280
};

// Original name: MissionLocationTags
// Size: 0x38
// VTable: 0x149975ce0
struct MissionLocationTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionLocationTemplate
// Size: 0x260
// VTable: 0x1499761a0
struct MissionLocationTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLocationData locationData; // Offset: 0x8
};

// Original name: MissionLocationValidation_EntityTags
// Size: 0x58
// VTable: 0x1499763b8
struct MissionLocationValidation_EntityTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag generalTag; // Offset: 0x8
    TagList requiredEntityTags; // Offset: 0x20
};

// Original name: MissionLogEntry
// Size: 0x50
// VTable: 0x149970b90
struct MissionLogEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* title; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    MissionType type_; /* type */ // Offset: 0x18
    bool silentUpdate; // Offset: 0x30
    uint8_t _pad_1[0x7]; // Offset: 0x31
    S42MissionLogEntryParams s42MissionParams; // Offset: 0x38
};

// Original name: MissionLogEntryList
// Size: 0x38
// VTable: 0x149970db0
struct MissionLogEntryList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionLogEntry* missions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionModifier_FactionHostility
// Size: 0x60
// VTable: 0x1499668e8
struct MissionModifier_FactionHostility {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* modifierName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x1f]; // Offset: 0x19
    Faction_LEGACY faction; // Offset: 0x38
    ARDataType myReaction; // Offset: 0x50
    ARDataType theirReaction; // Offset: 0x54
    bool ignoreCriminalHostility; // Offset: 0x58
    uint8_t _pad_3[0x7]; // Offset: 0x59
};

// Original name: MissionModifier_HostileMission
// Size: 0x58
// VTable: 0x149966968
struct MissionModifier_HostileMission {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* modifierName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x1f]; // Offset: 0x19
    MissionBrokerEntry missionBrokerEntry; // Offset: 0x38
    bool legalToAttack; // Offset: 0x50
    uint8_t _pad_3[0x7]; // Offset: 0x51
};

// Original name: MissionModifier_IgnoreMissionPlayerCriminality
// Size: 0x50
// VTable: 0x1499669c0
struct MissionModifier_IgnoreMissionPlayerCriminality {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* modifierName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x1f]; // Offset: 0x19
    MissionBrokerEntry missionBrokerEntry; // Offset: 0x38
};

// Original name: MissionModifier_RequestRentShip
// Size: 0x58
// VTable: 0x14996c940
struct MissionModifier_RequestRentShip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* modifierName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x1f]; // Offset: 0x19
    EntityClassDefinition itemRecordGUID; // Offset: 0x38
    int32_t durationSeconds; // Offset: 0x50
    bool clearRentalOnFail; // Offset: 0x54
    uint8_t _pad_3[0x3]; // Offset: 0x55
};

// Original name: MissionModifier_SecurityClearance
// Size: 0x60
// VTable: 0x149967e98
struct MissionModifier_SecurityClearance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* modifierName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x1f]; // Offset: 0x19
    SecurityClearanceToken clearanceToken; // Offset: 0x38
    MissionProperty locationProperty; // Offset: 0x50
};

// Original name: MissionModifier_ShipKioskFilter
// Size: 0xa0
// VTable: 0x14996c890
struct MissionModifier_ShipKioskFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* modifierName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x1f]; // Offset: 0x19
    TagsDNF kioskFilterType; // Offset: 0x38
};

// Original name: MissionModifier_ShopItemPerksDef
// Size: 0x68
// VTable: 0x14996c9a0
struct MissionModifier_ShopItemPerksDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* modifierName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x1f]; // Offset: 0x19
    DynArray_SPerkShopItemCategoryBase* itemCategory; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x40
};

// Original name: MissionModuleHierarchy
// Size: 0x48
// VTable: 0x14996dc78
struct MissionModuleHierarchy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* missionModule; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_MissionModuleHierarchySubMission* subMissionModules; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: MissionModuleHierarchySubMission
// Size: 0x30
// VTable: 0x14996dbf8
struct MissionModuleHierarchySubMission {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* subMissionModule; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    MissionModuleHierarchy subModuleHierarchy; // Offset: 0x18
};

// Original name: MissionObjective
// Size: 0x78
// VTable: 0x149970d58
struct MissionObjective {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLogEntry missionLogEntry; // Offset: 0x8
    MissionObjective parentObjective; // Offset: 0x20
    CLocIdentifier* shortDescription; // Offset: 0x38
    CLocIdentifier* longDescription; // Offset: 0x40
    ARDataType category; // Offset: 0x48
    int32_t group; // Offset: 0x4c
    bool silentUpdate; // Offset: 0x50
    bool showInLog; // Offset: 0x51
    uint8_t _pad_1[0x6]; // Offset: 0x52
    Tag objectiveType; // Offset: 0x58
    bool showInteriorMapWaypoint; // Offset: 0x70
    uint8_t _pad_2[0x7]; // Offset: 0x71
};

// Original name: MissionOrganization
// Size: 0x90
// VTable: 0x149976328
struct MissionOrganization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionLocationTags* organizationTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MissionStringVariants stringVariants; // Offset: 0x38
    float weighting; // Offset: 0x70
    uint8_t _pad_2[0x4]; // Offset: 0x74
    FactionReputation factionReputation; // Offset: 0x78
};

// Original name: MissionPropertyValueOption_Float
// Size: 0x50
// VTable: 0x1499693e8
struct MissionPropertyValueOption_Float {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* textId; // Offset: 0x8
    float weighting; // Offset: 0x10
    bool DEBUG_forceChooseThisOption; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    DynArray_DependentMissionProperty* dependentProperties; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    float value; // Offset: 0x48
    float variation; // Offset: 0x4c
};

// Original name: MissionPropertyValueOption_Integer
// Size: 0x50
// VTable: 0x149969308
struct MissionPropertyValueOption_Integer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* textId; // Offset: 0x8
    float weighting; // Offset: 0x10
    bool DEBUG_forceChooseThisOption; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    DynArray_DependentMissionProperty* dependentProperties; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    int32_t value; // Offset: 0x48
    int32_t variation; // Offset: 0x4c
};

// Original name: MissionPropertyValueOption_StringHash
// Size: 0x58
// VTable: 0x149969500
struct MissionPropertyValueOption_StringHash {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* textId; // Offset: 0x8
    float weighting; // Offset: 0x10
    bool DEBUG_forceChooseThisOption; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    DynArray_DependentMissionProperty* dependentProperties; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    CryStringT* value; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
};

// Original name: MissionPropertyValueOption_Tags
// Size: 0xb8
// VTable: 0x1499697b8
struct MissionPropertyValueOption_Tags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* textId; // Offset: 0x8
    float weighting; // Offset: 0x10
    bool DEBUG_forceChooseThisOption; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    DynArray_DependentMissionProperty* dependentProperties; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    TagList tags; // Offset: 0x48
    TagList negativeTags; // Offset: 0x80
};

// Original name: MissionPropertyValue_EntitySpawnDescriptions
// Size: 0x38
// VTable: 0x14996a440
struct MissionPropertyValue_EntitySpawnDescriptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SpawnDescription_EntityGroup* spawnDescriptions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionPropertyValue_Float
// Size: 0x38
// VTable: 0x149969440
struct MissionPropertyValue_Float {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionPropertyValueOption_Float* options; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionPropertyValue_Integer
// Size: 0x38
// VTable: 0x149969360
struct MissionPropertyValue_Integer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionPropertyValueOption_Integer* options; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionPropertyValue_Investigation
// Size: 0x98
// VTable: 0x14996abd0
struct MissionPropertyValue_Investigation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_JournalEntry* startingJournalEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_Investigation_Suspect* suspects; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_Investigation_Location* locations; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: MissionPropertyValue_Location
// Size: 0x78
// VTable: 0x149969df8
struct MissionPropertyValue_Location {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t minLocationsToFind; // Offset: 0x8
    int32_t maxLocationsToFind; // Offset: 0xc
    DynArray_BaseDataSetMatchCondition* matchConditions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    DynArray_Tag* resourceTags; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
    ARDataType resourcePriority; // Offset: 0x70
    bool logErrorOnSearchFail; // Offset: 0x74
    uint8_t _pad_3[0x3]; // Offset: 0x75
};

// Original name: MissionPropertyValue_MissionItem
// Size: 0x58
// VTable: 0x149969cd8
struct MissionPropertyValue_MissionItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t minItemsToFind; // Offset: 0x8
    int32_t maxItemsToFind; // Offset: 0xc
    DynArray_BaseDataSetMatchCondition* matchConditions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    MissionItem debugForceChosenItem; // Offset: 0x40
};

// Original name: MissionPropertyValue_NPCSpawnDescriptions
// Size: 0x38
// VTable: 0x14996a730
struct MissionPropertyValue_NPCSpawnDescriptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SpawnDescription_NPC_Group* spawnDescriptions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionPropertyValue_Organization
// Size: 0x50
// VTable: 0x149969e78
struct MissionPropertyValue_Organization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BaseDataSetMatchCondition* matchConditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MissionOrganization debugForceChosenOrganization; // Offset: 0x38
};

// Original name: MissionPropertyValue_Reward
// Size: 0x38
// VTable: 0x1499695c0
struct MissionPropertyValue_Reward {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionReward rewardDef; // Offset: 0x8
};

// Original name: MissionPropertyValue_ShipSpawnDescriptions
// Size: 0x38
// VTable: 0x14996a1e0
struct MissionPropertyValue_ShipSpawnDescriptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SpawnDescription_ShipGroup* spawnDescriptions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionPropertyValue_StringHash
// Size: 0x38
// VTable: 0x149969560
struct MissionPropertyValue_StringHash {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionPropertyValueOption_StringHash* options; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionPropertyValue_Tags
// Size: 0xa8
// VTable: 0x149969860
struct MissionPropertyValue_Tags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList tags; // Offset: 0x8
    TagList negativeTags; // Offset: 0x40
    DynArray_MissionPropertyValueOption_Tags* options; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x80
};

// Original name: MissionRandomPhaseEntry
// Size: 0x20
// VTable: 0x149970408
struct MissionRandomPhaseEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectiveToken objective; // Offset: 0x8
    float probability; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: MissionReward
// Size: 0x30
// VTable: 0x149969120
struct MissionReward {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t reward; // Offset: 0x8
    int32_t max; // Offset: 0xc
    bool plusBonuses; // Offset: 0x10
    ARDataType currencyType; // Offset: 0x11
    uint8_t _pad_1[0x6]; // Offset: 0x12
    SReputationMissionRewardBonusParams reputationBonus; // Offset: 0x18
};

// Original name: MissionStringVariant
// Size: 0x28
// VTable: 0x14996c4b8
struct MissionStringVariant {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    CLocIdentifier* string; // Offset: 0x20
};

// Original name: MissionStringVariants
// Size: 0x38
// VTable: 0x14996c510
struct MissionStringVariants {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionStringVariant* variants; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MobiGlasAfterActionReportGenerationRules
// Size: 0x100
// VTable: 0x149a36ee0
struct MobiGlasAfterActionReportGenerationRules {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLogEntry missionLogEntry; // Offset: 0x8
    DynArray_MobiGlasAfterActionReportRankRules* ranks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    DynArray_MobiGlasAfterActionReportStatsBlock* statsDisplay; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
    S42CommendationRules commendationRules; // Offset: 0x80
    CLocIdentifier* CORank; // Offset: 0x98
    CLocIdentifier* COName; // Offset: 0xa0
    CryStringT* COImage; // Offset: 0xa8
    uint8_t _pad_3[0x8]; // Offset: 0xb0
    Tag medPenTag; // Offset: 0xb8
    DynArray_MissionObjective* optionalObjectives; // Offset: 0xd0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xd8
};

// Original name: MobiGlasAfterActionReportRankRules
// Size: 0x98
// VTable: 0x149a368e0
struct MobiGlasAfterActionReportRankRules {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Time maxTime; // Offset: 0x8
    int32_t maxMedpens; // Offset: 0x20
    float maxShipDamage; // Offset: 0x24
    DynArray_MissionObjective* requiredObjectives; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    CLocIdentifier* coDebrief; // Offset: 0x58
    CLocIdentifier* oldManDebrief; // Offset: 0x60
    DynArray_AfterActionReportReputationImpact* reputationImpacts; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x70
};

// Original name: MobiGlasAfterActionReportStat
// Size: 0xa0
// VTable: 0x149a36a08
struct MobiGlasAfterActionReportStat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    S42StatId statIdentifier; // Offset: 0x20
    DynArray_S42StatOperationBase* operations; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x68
    CLocIdentifier* suffix; // Offset: 0x90
    int32_t decimalPlaces; // Offset: 0x98
    uint8_t _pad_3[0x4]; // Offset: 0x9c
};

// Original name: MobiGlasAfterActionReportStatsBlock
// Size: 0x40
// VTable: 0x149a36a88
struct MobiGlasAfterActionReportStatsBlock {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    DynArray_MobiGlasAfterActionReportStat* stats; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: MobiGlasAppContent
// Size: 0x68
// VTable: 0x149a361c0
struct MobiGlasAppContent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* textContent; // Offset: 0x8
    CryStringT* imageContent; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    SMobiGlasAppLink appLink; // Offset: 0x20
};

// Original name: MobiGlasMissionBriefing
// Size: 0x218
// VTable: 0x149a372c8
struct MobiGlasMissionBriefing {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLogEntry briefingMissionLogEntry; // Offset: 0x8
    CryStringT* missionImage; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CLocIdentifier* missionSummary; // Offset: 0x30
    MobiGlasMissionAuthorization authorization; // Offset: 0x38
    CLocIdentifier* areaOfOperation; // Offset: 0x50
    DynArray_CLocIdentifier* targets; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
    DynArray_CLocIdentifier* hazards; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x90
    DynArray_CLocIdentifier* pointsOfInterest; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xc0
    DynArray_CLocIdentifier* enemyForces; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xf0
    DynArray_CLocIdentifier* friendlyForces; // Offset: 0x118 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x120
    DynArray_CLocIdentifier* civilianConsiderations; // Offset: 0x148 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x150
    DynArray_CLocIdentifier* rulesOfEngagement; // Offset: 0x178 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x180
    DynArray_CLocIdentifier* tasks; // Offset: 0x1a8 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x1b0
    DynArray_CLocIdentifier* logistics; // Offset: 0x1d8 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x1e0
    CLocIdentifier* commandAndSignal; // Offset: 0x208
    CLocIdentifier* supplementaryIntel; // Offset: 0x210
};

// Original name: MobiGlasMissionManagerSummaryUpdate
// Size: 0x28
// VTable: 0x149a373f8
struct MobiGlasMissionManagerSummaryUpdate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLogEntry missionLogEntry; // Offset: 0x8
    CLocIdentifier* additionalText; // Offset: 0x20
};

// Original name: MobiGlasMissionNote
// Size: 0x88
// VTable: 0x149a37370
struct MobiGlasMissionNote {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* noteTitle; // Offset: 0x8
    DynArray_CLocIdentifier* noteContent; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    SMobiGlasAppLink appLink; // Offset: 0x40
};

// Original name: MobiGlasPersonalMessage_Message
// Size: 0x90
// VTable: 0x149a366c0
struct MobiGlasPersonalMessage_Message {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DateTime dateTime; // Offset: 0x8
    CLocIdentifier* senderName; // Offset: 0x40
    CLocIdentifier* subject; // Offset: 0x48
    DynArray_MobiGlasAppContent* content; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* displayIcon; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
};

// Original name: MonitoredZoneControllerParams
// Size: 0x38
// VTable: 0x149967b78
struct MonitoredZoneControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SInteractionState stateToEnable; // Offset: 0x18
    SInteractionState stateToDisable; // Offset: 0x28
};

// Original name: MotionConnection
// Size: 0x30
// VTable: 0x149aacbe8
struct MotionConnection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool waitUntillFinished; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float delaySeconds; // Offset: 0xc
    CryStringT* waitForEvent; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    MotionState nextState; // Offset: 0x20
};

// Original name: MotionGraph
// Size: 0x168
// VTable: 0x149aad520
struct MotionGraph {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MotionState* motionStates; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MotionSmoothingParams motionSmoothingConfig; // Offset: 0x38
    MotionJukeParams jukeConfig; // Offset: 0x58
    ProceduralIdleToMoveParams idleToMoveProcParamsForward; // Offset: 0x70
    ProceduralIdleToMoveParams idleToMoveProcParamsBack; // Offset: 0x98
    ProceduralIdleToMoveParams idleToMoveProcParamsLeft; // Offset: 0xc0
    ProceduralIdleToMoveParams idleToMoveProcParamsRight; // Offset: 0xe8
    MotionTurnSetupList turnConfig; // Offset: 0x110
    MotionFootPinningParams footPinningParams; // Offset: 0x148
};

// Original name: MotionState
// Size: 0x70
// VTable: 0x149aacd30
struct MotionState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* mannequinTags; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* mannequinFragment; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    ARDataType motionTypeFP; // Offset: 0x30
    ARDataType motionTypeTP; // Offset: 0x34
    ARDataType motionTypeRemote; // Offset: 0x38
    uint8_t _pad_4[0x4]; // Offset: 0x3c
    DynArray_MotionConnection* connections; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x48
};

// Original name: MusicAreaComponentParams
// Size: 0x108
// VTable: 0x1499e2040
struct MusicAreaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float radius; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 bounds; // Offset: 0x20
    GlobalResourceAudio onEnterWwiseEvent; // Offset: 0x38
    GlobalResourceAudio onLeaveWwiseEvent; // Offset: 0x58
    MusicLogicSwitchValue onEnterSecondarySwitch; // Offset: 0x78
    MusicLogicSwitchValue onLeaveSecondarySwitch; // Offset: 0x90
    MusicLogicParameter distToCentreParameter; // Offset: 0xa8
    AudioRtpc distToCentreRtpc; // Offset: 0xc0
    MusicLogicSwitchValue onEnterCueSwitch; // Offset: 0xe0
    int32_t maxRetriggerCount; // Offset: 0xf8
    float retriggerDelaySecs; // Offset: 0xfc
    bool retriggerDelayOnlyOnEnter; // Offset: 0x100
    bool stopMusicOnExit; // Offset: 0x101
    uint8_t _pad_2[0x6]; // Offset: 0x102
};

// Original name: MusicLogicConfig
// Size: 0x118
// VTable: 0x1499b5890
struct MusicLogicConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CinematicConfig cinematicConfig; // Offset: 0x8
    AttackDetectionConfig shipAttackDetectionConfig; // Offset: 0x20
    AttackDetectionConfig fpsAttackDetectionConfig; // Offset: 0x38
    PlaylistRNGConfig playlistRNGConfig; // Offset: 0x50
    LocationMusicConfig locationMusicConfig; // Offset: 0x90
    EnemyAwarenessConfig enemyAwarenessConfig; // Offset: 0xd8
    bool triggerParentMusicAreaOnLeave; // Offset: 0x110
    uint8_t _pad_1[0x7]; // Offset: 0x111
};

// Original name: MusicLogicIncrement
// Size: 0x58
// VTable: 0x1499b5ae8
struct MusicLogicIncrement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MusicLogicNode* children; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MusicLogicParameter parameter; // Offset: 0x38
    float value; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
};

// Original name: MusicLogicParameter
// Size: 0xa0
// VTable: 0x1499b5380
struct MusicLogicParameter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float min; // Offset: 0x18
    float max; // Offset: 0x1c
    float defaultValue; // Offset: 0x20
    float decayRate; // Offset: 0x24
    bool decayIsPercentage; // Offset: 0x28
    uint8_t _pad_2[0x3]; // Offset: 0x29
    float scaleModifier; // Offset: 0x2c
    float shiftModifier; // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
    CryStringT* rtpc; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
    bool rtpcIsGlobal; // Offset: 0x48
    bool inverted; // Offset: 0x49
    uint8_t _pad_5[0x6]; // Offset: 0x4a
    DynArray_MusicLogicParameter* contributors; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x58
    RGB debugColour; // Offset: 0x80
    uint8_t _pad_7[0x8]; // Offset: 0x98
};

// Original name: MusicLogicParameterMultiply
// Size: 0x20
// VTable: 0x1499b5a60
struct MusicLogicParameterMultiply {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicParameter parameter; // Offset: 0x8
};

// Original name: MusicLogicSetValue
// Size: 0x28
// VTable: 0x1499b5b68
struct MusicLogicSetValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicParameter parameter; // Offset: 0x8
    float value; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: MusicLogicSuite
// Size: 0x60
// VTable: 0x1499b5940
struct MusicLogicSuite {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_MusicLogicNode* nodes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    MusicLogicConfig musicLogicConfig; // Offset: 0x48
};

// Original name: NameScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7d48
struct NameScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: NavPointSpawnInformation
// Size: 0x58
// VTable: 0x14996db70
struct NavPointSpawnInformation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClassDefinition; // Offset: 0x8
    CLocIdentifier* name; // Offset: 0x20
    DynArray_CryStringT* extendedTextTokens; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: NavigationCostVolumeComponentParams
// Size: 0x60
// VTable: 0x14997fad8
struct NavigationCostVolumeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    TraversalCostConfig costConfig; // Offset: 0x18
    DynArray_INavigationCostVolumeExtender* extensions; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
};

// Original name: NavigationLinkComponentParams
// Size: 0x60
// VTable: 0x1499ecf90
struct NavigationLinkComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enabledForAI; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    DynArray_NavigationLinkType* navLinks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    NavigationLinkController controller; // Offset: 0x50
};

// Original name: NavigationLinkCostCustomization
// Size: 0x38
// VTable: 0x1499ec7d0
struct NavigationLinkCostCustomization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_NavigationLinkTagCost* tagCosts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: NavigationLinkTagCost
// Size: 0x78
// VTable: 0x1499ec770
struct NavigationLinkTagCost {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF conditionTags; // Offset: 0x8
    float costMultiplier; // Offset: 0x70
    bool unavailableIfConditionIsMet; // Offset: 0x74
    uint8_t _pad_1[0x3]; // Offset: 0x75
};

// Original name: NavigationLinkType
// Size: 0x68
// VTable: 0x1499ec8a8
struct NavigationLinkType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkValidForAgentType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    NavigationLinkCostCustomization costMultiplierSetup; // Offset: 0x18
    ARDataType linkingType; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    UsableUseChannelInstance useChannel; // Offset: 0x58
};

// Original name: NavigationWaypointMarkerProvider
// Size: 0x20
// VTable: 0x149a234e0
struct NavigationWaypointMarkerProvider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Marker_Configuration markerConfig; // Offset: 0x8
};

// Original name: NotificationDef
// Size: 0xc8
// VTable: 0x149a56bb0
struct NotificationDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Canvas canvasOverride; // Offset: 0x8
    CLocIdentifier* title; // Offset: 0x20
    CLocIdentifier* body; // Offset: 0x28
    CLocIdentifier* buttonAcceptText; // Offset: 0x30
    CLocIdentifier* buttonDeclineText; // Offset: 0x38
    SMobiGlasAppLink appLink; // Offset: 0x40
    ARDataType notificationType; // Offset: 0x88
    uint8_t _pad_1[0x4]; // Offset: 0x8c
    CryStringT* audioEvent; // Offset: 0x90
    uint8_t _pad_2[0x8]; // Offset: 0x98
    CryStringT* iconPath; // Offset: 0xa0
    uint8_t _pad_3[0x8]; // Offset: 0xa8
    int32_t displayValue; // Offset: 0xb0
    float screenTime; // Offset: 0xb4
    bool buttonAcceptDisplay; // Offset: 0xb8
    bool buttonDeclineDisplay; // Offset: 0xb9
    bool combineDisplayValue; // Offset: 0xba
    bool displayAcceptDeclineControlHint; // Offset: 0xbb
    bool hideIcon; // Offset: 0xbc
    bool isTutorial; // Offset: 0xbd
    bool isObjective; // Offset: 0xbe
    bool isHostility; // Offset: 0xbf
    bool isLowPriorityNotification; // Offset: 0xc0
    bool removeThisUniqueID; // Offset: 0xc1
    uint8_t _pad_4[0x6]; // Offset: 0xc2
};

// Original name: ObjectContainerModifierParams
// Size: 0x40
// VTable: 0x14999e040
struct ObjectContainerModifierParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float ExternalWear; // Offset: 0x18
    float ExternalDirt; // Offset: 0x1c
    float InternalWear; // Offset: 0x20
    float InternalDirt; // Offset: 0x24
    TintPaletteTree TintPaletteOverride; // Offset: 0x28
};

// Original name: ObjectiveHandler_Deliveries
// Size: 0x98
// VTable: 0x14996e160
struct ObjectiveHandler_Deliveries {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DeliveryTarget* pickUpTargetTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_DeliveryTarget* dropOffTargetTypes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    ObjectivePropertyBase pickUpLocations; // Offset: 0x68
    ObjectivePropertyBase dropOffLocations; // Offset: 0x78
    ObjectivePropertyBase deliveryItems; // Offset: 0x88
};

// Original name: ObjectiveHandler_EntityAttached
// Size: 0xb0
// VTable: 0x14996dfb0
struct ObjectiveHandler_EntityAttached {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* module; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    MissionModuleHierarchy moduleHierarchy; // Offset: 0x18
    bool disableTravelObjectives; // Offset: 0x30
    uint8_t _pad_2[0x3]; // Offset: 0x31
    float travelRadiusKM; // Offset: 0x34
    ObjectiveDisplayInfo travelObjectiveInfo; // Offset: 0x38
    ObjectiveDisplayInfo returnObjectiveInfo; // Offset: 0x60
    NavPointSpawnInformation navPointSpawnInfo; // Offset: 0x88
    uint8_t _pad_3[0x8]; // Offset: 0x98
    ObjectivePropertyBase targetObject; // Offset: 0xa0
};

// Original name: ObjectiveHandler_EventModule
// Size: 0xd0
// VTable: 0x14996df50
struct ObjectiveHandler_EventModule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* module; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    MissionModuleHierarchy moduleHierarchy; // Offset: 0x18
    bool disableTravelObjectives; // Offset: 0x30
    uint8_t _pad_2[0x3]; // Offset: 0x31
    float travelRadiusKM; // Offset: 0x34
    ObjectiveDisplayInfo travelObjectiveInfo; // Offset: 0x38
    ObjectiveDisplayInfo returnObjectiveInfo; // Offset: 0x60
    NavPointSpawnInformation navPointSpawnInfo; // Offset: 0x88
    uint8_t _pad_3[0x8]; // Offset: 0x98
    DynArray_ObjectivePropertyBase* locations; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa8
};

// Original name: ObjectiveHandler_Local
// Size: 0xb8
// VTable: 0x14996de48
struct ObjectiveHandler_Local {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* module; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    MissionModuleHierarchy moduleHierarchy; // Offset: 0x18
    bool disableTravelObjectives; // Offset: 0x30
    uint8_t _pad_2[0x3]; // Offset: 0x31
    float travelRadiusKM; // Offset: 0x34
    ObjectiveDisplayInfo travelObjectiveInfo; // Offset: 0x38
    ObjectiveDisplayInfo returnObjectiveInfo; // Offset: 0x60
    NavPointSpawnInformation navPointSpawnInfo; // Offset: 0x88
    uint8_t _pad_3[0x8]; // Offset: 0x98
    bool travelRadiusOverridesActionArea; // Offset: 0xa0
    uint8_t _pad_4[0x7]; // Offset: 0xa1
    ObjectivePropertyBase location; // Offset: 0xa8
};

// Original name: ObjectiveHandler_NearLocation
// Size: 0xb8
// VTable: 0x14996def0
struct ObjectiveHandler_NearLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* module; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    MissionModuleHierarchy moduleHierarchy; // Offset: 0x18
    bool disableTravelObjectives; // Offset: 0x30
    uint8_t _pad_2[0x3]; // Offset: 0x31
    float travelRadiusKM; // Offset: 0x34
    ObjectiveDisplayInfo travelObjectiveInfo; // Offset: 0x38
    ObjectiveDisplayInfo returnObjectiveInfo; // Offset: 0x60
    NavPointSpawnInformation navPointSpawnInfo; // Offset: 0x88
    uint8_t _pad_3[0x8]; // Offset: 0x98
    ObjectivePropertyBase location; // Offset: 0xa0
    float maxDistance; // Offset: 0xb0
    float minDistance; // Offset: 0xb4
};

// Original name: ObjectiveHandler_PlayerAttached
// Size: 0xa0
// VTable: 0x14996df58
struct ObjectiveHandler_PlayerAttached {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* module; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    MissionModuleHierarchy moduleHierarchy; // Offset: 0x18
    bool disableTravelObjectives; // Offset: 0x30
    uint8_t _pad_2[0x3]; // Offset: 0x31
    float travelRadiusKM; // Offset: 0x34
    ObjectiveDisplayInfo travelObjectiveInfo; // Offset: 0x38
    ObjectiveDisplayInfo returnObjectiveInfo; // Offset: 0x60
    NavPointSpawnInformation navPointSpawnInfo; // Offset: 0x88
    uint8_t _pad_3[0x8]; // Offset: 0x98
};

// Original name: ObjectiveHandler_WithModule
// Size: 0xa0
// VTable: 0x14996ddc0
struct ObjectiveHandler_WithModule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* module; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    MissionModuleHierarchy moduleHierarchy; // Offset: 0x18
    bool disableTravelObjectives; // Offset: 0x30
    uint8_t _pad_2[0x3]; // Offset: 0x31
    float travelRadiusKM; // Offset: 0x34
    ObjectiveDisplayInfo travelObjectiveInfo; // Offset: 0x38
    ObjectiveDisplayInfo returnObjectiveInfo; // Offset: 0x60
    NavPointSpawnInformation navPointSpawnInfo; // Offset: 0x88
    uint8_t _pad_3[0x8]; // Offset: 0x98
};

// Original name: ObjectiveToken
// Size: 0x108
// VTable: 0x14996ec30
struct ObjectiveToken {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* debugName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool startsActive; // Offset: 0x28
    uint8_t _pad_3[0x7]; // Offset: 0x29
    ObjectiveHandlerBase objectiveHandler; // Offset: 0x30
    ObjectiveRewardContributionBase rewardContribution; // Offset: 0x40
    ObjectiveDisplayInfo displayInfo; // Offset: 0x50
    DynArray_CommsNotificationSelector* commsNotifications; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x80
    DynArray_ObjectivePropertyBase* properties; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xb0
    DynArray_ChildMissionPhase* childMissionPhases; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xe0
};

// Original name: OperatorModeStateModifier
// Size: 0x88
// VTable: 0x1499c20c0
struct OperatorModeStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AttachableStateModifierContextBase context; // Offset: 0x8
    SInteractionState inactive; // Offset: 0x18
    SInteractionState combat; // Offset: 0x28
    SInteractionState turret; // Offset: 0x38
    SInteractionState scanning; // Offset: 0x48
    SInteractionState mining; // Offset: 0x58
    SInteractionState quantumNavigation; // Offset: 0x68
    SInteractionState refuel; // Offset: 0x78
};

// Original name: OperatorSeatAlignmentSlot
// Size: 0xb8
// VTable: 0x149a92140
struct OperatorSeatAlignmentSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* name; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool available; // Offset: 0x28
    bool canPlayerUse; // Offset: 0x29
    uint8_t _pad_3[0x6]; // Offset: 0x2a
    DynArray_SInteractionPointParams* interactionPoints; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
    CryStringT* fragmentTag; // Offset: 0x60
    uint8_t _pad_5[0x8]; // Offset: 0x68
    DynArray_Tag* optionalGameTags; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x78
    CryStringT* slottedFragmentTag; // Offset: 0xa0
    uint8_t _pad_7[0x10]; // Offset: 0xa8
};

// Original name: OptimalPowerWindowScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7d30
struct OptimalPowerWindowScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: OrganizationRelationshipParams
// Size: 0x50
// VTable: 0x149a976d0
struct OrganizationRelationshipParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition organization; // Offset: 0x8
    SReputationScopeParams scope; // Offset: 0x20
    SReputationStandingParams standing; // Offset: 0x38
};

// Original name: OutfitParams
// Size: 0x28
// VTable: 0x1499d4858
struct OutfitParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag outfitTag; // Offset: 0x8
    CLocIdentifier* outfitName; // Offset: 0x20
};

// Original name: PassengerScanProcedureParams
// Size: 0x70
// VTable: 0x1499c7ea0
struct PassengerScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    CLocIdentifier* displayForUninjured; // Offset: 0x30
    CLocIdentifier* displayForDead; // Offset: 0x38
    DynArray_PassengerScanStatusMappings* conditions; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
};

// Original name: PersonalThoughtInventoryCategoryFilter
// Size: 0x58
// VTable: 0x149a9a470
struct PersonalThoughtInventoryCategoryFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayIconPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* name; // Offset: 0x18
    bool disableForFPSKiosk; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
    DynArray_PersonalThoughtInventorySingleFilter* filters; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x30
};

// Original name: PersonalThoughtInventoryGridParams
// Size: 0x78
// VTable: 0x149a9a200
struct PersonalThoughtInventoryGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float panelWidth; // Offset: 0x8
    float panelPadding; // Offset: 0xc
    int32_t numberOfGrids; // Offset: 0x10
    float itemPadding; // Offset: 0x14
    float paddingWidth; // Offset: 0x18
    float paddingHeight; // Offset: 0x1c
    float tabsNavHeight; // Offset: 0x20
    float containerTitleHeight; // Offset: 0x24
    float spaceBetweenContainers; // Offset: 0x28
    float sizeMultiplicatorForPit; // Offset: 0x2c
    float sizeMultiplicatorForKiosk; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
    SBaseCargoUnit bigContainerCapacity; // Offset: 0x38
    DynArray_InventoryContainerParams* inventoryContainers; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: PersonalThoughtInventoryItemOrientationOffset
// Size: 0x50
// VTable: 0x149a9a288
struct PersonalThoughtInventoryItemOrientationOffset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 orientationOffset; // Offset: 0x8
    DynArray_ItemCategory* itemCategories; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: PersonalThoughtInventoryParams
// Size: 0x260
// VTable: 0x149a9a988
struct PersonalThoughtInventoryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PersonalThoughtLootingScreenParams lootingScreenParams; // Offset: 0x8
    InteractionConditionPreset inventoryDropInteractionConditions; // Offset: 0x88
    CLocIdentifier* inventoryTitle; // Offset: 0xa0
    CLocIdentifier* capacityBarTitle; // Offset: 0xa8
    CryStringT* defaultItemDisplayThumbnail; // Offset: 0xb0
    uint8_t _pad_1[0x8]; // Offset: 0xb8
    CLocIdentifier* emptyInventoryMessage; // Offset: 0xc0
    CLocIdentifier* fullInventoryMessage; // Offset: 0xc8
    CLocIdentifier* noSpaceForItemInInventoryMessage; // Offset: 0xd0
    CLocIdentifier* itemCantFitInInventoryMessage; // Offset: 0xd8
    CLocIdentifier* genericInvalidMovementMessage; // Offset: 0xe0
    DynArray_PersonalThoughtInventoryFilter* filters; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xf0
    PersonalThoughtInventoryActionsParams inventoryActionsParams; // Offset: 0x118
    PersonalThoughtPopWindowParams emptyBackpackPopWindowParams; // Offset: 0x140
    PersonalThoughtInventoryGridParams inventoryGridParams; // Offset: 0x160
    Vec3 defaultOrientation; // Offset: 0x1d8
    DynArray_PersonalThoughtInventoryItemOrientationOffset* listOfItemsOrientationOffset; // Offset: 0x1f0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1f8
    CryStringT* defaultDisplayIconType; // Offset: 0x220
    uint8_t _pad_4[0x8]; // Offset: 0x228
    DynArray_PersonalThoughtInventoryItemUIIcon* itemClassUIIconsList; // Offset: 0x230 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x238
};

// Original name: PersonalThoughtInventorySingleFilter
// Size: 0x58
// VTable: 0x149a9a410
struct PersonalThoughtInventorySingleFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayIconPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* name; // Offset: 0x18
    bool disableForFPSKiosk; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
    DynArray_ItemCategory* categories; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x30
};

// Original name: PersonalThoughtLootingScreenParams
// Size: 0x80
// VTable: 0x149a9a688
struct PersonalThoughtLootingScreenParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LootingItemPortSizeClass* itemPortClasses; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    LootingInventoryParams lootingInventoryParams; // Offset: 0x38
};

// Original name: PersonalThoughtStateModifier
// Size: 0x68
// VTable: 0x1499c2828
struct PersonalThoughtStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState InventoryOpenedState; // Offset: 0x8
    SInteractionState InventoryClosedState; // Offset: 0x18
    SInteractionState InventoryToLootingState; // Offset: 0x28
    SInteractionState LootingToInventoryState; // Offset: 0x38
    SInteractionState LootingOpenedState; // Offset: 0x48
    SInteractionState LootingClosedState; // Offset: 0x58
};

// Original name: PersonalTransportParams
// Size: 0xb8
// VTable: 0x149a169b8
struct PersonalTransportParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType serviceBeaconType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* serviceBeaconName; // Offset: 0x20
    int32_t beaconTaxPercentage; // Offset: 0x28
    int32_t beaconMaxPaymentAmount; // Offset: 0x2c
    MissionPropertyValue_AIName npcRequesterNameDef; // Offset: 0x30
    SServiceBeaconCreatorParams playerCreatorParams; // Offset: 0x78
    SServiceBeaconCreatorParamsBase npcCreatorParams; // Offset: 0x88
    CLocIdentifier* pickUpObjectiveTitle; // Offset: 0x98
    CLocIdentifier* pickUpObjectiveDescription; // Offset: 0xa0
    CLocIdentifier* deliveryObjectiveTitle; // Offset: 0xa8
    CLocIdentifier* deliveryObjectiveDescription; // Offset: 0xb0
};

// Original name: PlacedSurfaceEffectsComponentParams
// Size: 0x98
// VTable: 0x1499982f8
struct PlacedSurfaceEffectsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enable; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    SurfaceParticleRTTParams surfaceParticleRtt; // Offset: 0x20
    float lodDistanceScale; // Offset: 0x58
    float inactiveDuration; // Offset: 0x5c
    float staticWetnessAmount; // Offset: 0x60
    uint8_t _pad_2[0x4]; // Offset: 0x64
    DynArray_PlacedSurfaceEffects_EmitterEntry* placedEmitters; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: PlacedSurfaceEffects_Emitter
// Size: 0x68
// VTable: 0x149998158
struct PlacedSurfaceEffects_Emitter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Tag tag; // Offset: 0x18
    GlobalResourceParticle particleEffect; // Offset: 0x30
    Vec3 emitterPosition; // Offset: 0x48
    bool linkedToSdf; // Offset: 0x60
    uint8_t _pad_2[0x3]; // Offset: 0x61
    float fadeOutDuration; // Offset: 0x64
};

// Original name: PlacedSurfaceEffects_EmitterEntry
// Size: 0x28
// VTable: 0x1499981d8
struct PlacedSurfaceEffects_EmitterEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float emitterStrength; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    PlacedSurfaceEffects_Emitter emitterReference; // Offset: 0x10
};

// Original name: PlanetOceanAudioComponentParams
// Size: 0x30
// VTable: 0x1499eed30
struct PlanetOceanAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    PlanetOceanAudioData planetOceanAudioData; // Offset: 0x18
};

// Original name: PlanetOceanAudioData
// Size: 0x128
// VTable: 0x1499eecd0
struct PlanetOceanAudioData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PlanetOceanAudioCheckpoint* checkpoints; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_PlanetOceanDepthAssignment* assignments; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    GlobalResourceAudio waterStartTrigger; // Offset: 0x68
    GlobalResourceAudio waterStopTrigger; // Offset: 0x88
    AudioRtpc oceanOffsetRtpc; // Offset: 0xa8
    AudioRtpc windRTPC; // Offset: 0xc8
    AudioRtpc waveHeightRTPC; // Offset: 0xe8
    Tag atmosphereTag; // Offset: 0x108
    int32_t terrainChecksPerFrame; // Offset: 0x120
    bool checkOnListenerPosition; // Offset: 0x124
    bool listenerPositionUsesAssignment; // Offset: 0x125
    uint8_t _pad_3[0x2]; // Offset: 0x126
};

// Original name: PlayerChoiceMenu
// Size: 0x98
// VTable: 0x149a9f328
struct PlayerChoiceMenu {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    InnerThought_ColorParams blockedSelectedColor; // Offset: 0x38
    InnerThought_ColorParams blockedUnselectedColor; // Offset: 0x50
    DynArray_PlayerChoiceMenuOption* options; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x70
};

// Original name: PlayerChoiceMenuItem
// Size: 0x40
// VTable: 0x149a9f170
struct PlayerChoiceMenuItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    Tag tag; // Offset: 0x10
    EntityClassDefinition entityClass; // Offset: 0x28
};

// Original name: PlayerChoiceMenuItems
// Size: 0x38
// VTable: 0x149a9f400
struct PlayerChoiceMenuItems {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PlayerChoiceMenuItem* allAvailableItems; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: PlayerChoiceMenuOptionItem
// Size: 0x20
// VTable: 0x149a9f1d0
struct PlayerChoiceMenuOptionItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlayerChoiceMenuItem item; // Offset: 0x8
};

// Original name: PlayerChoiceMenuType
// Size: 0x40
// VTable: 0x149a9f3a8
struct PlayerChoiceMenuType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool focusedConversation; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_PlayerChoiceMenu* menus; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: PlayerChoice_PITConfig
// Size: 0x5d8
// VTable: 0x149a9b478
struct PlayerChoice_PITConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PersonalThoughtContextualActionsMenusParams contextualActionsMenus; // Offset: 0x8
    int32_t maxMenuSize; // Offset: 0x70
    bool showDisabledActions; // Offset: 0x74
    uint8_t _pad_1[0x3]; // Offset: 0x75
    DynArray_PersonalThoughtCameraEffectsParams* cameraEffects; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x80
    PersonalThoughtForceCloseActionsParams forceCloseActions; // Offset: 0xa8
    PersonalThoughtHologramActionsList hologramActionsList; // Offset: 0x130
    PersonalThoughtHologramParams hologramParams; // Offset: 0x168
    HUDSilhouetteParams softAttachColourParams; // Offset: 0x1e0
    PersonalThoughtCategoryAction root; // Offset: 0x210
    PersonalThoughtActionDescriptionsList actionDescriptionsList; // Offset: 0x288
    PersonalThoughtInventoryParams inventoryParams; // Offset: 0x2c0
    PersonalThoughtQuickAccessWheels quickAccessWheelsParams; // Offset: 0x520
    PersonalThoughtActionsRulesParams actionRulesParams; // Offset: 0x570
    DynArray_InventoryDropDetachRules* dropDetachRules; // Offset: 0x5a8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x5b0
};

// Original name: PlayerGroupMemberComponentParams
// Size: 0x38
// VTable: 0x149a22038
struct PlayerGroupMemberComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams inviteToPartyInteraction; // Offset: 0x18
    SSharedInteractionParams AddToContactsInteraction; // Offset: 0x28
};

// Original name: PlayerInventory
// Size: 0x20
// VTable: 0x149a9fdf0
struct PlayerInventory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LandingZoneInventory landingZoneInventory; // Offset: 0x8
};

// Original name: PlayerMarkerProvider
// Size: 0x38
// VTable: 0x149a23568
struct PlayerMarkerProvider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Marker_Configuration fpsMarkerConfig; // Offset: 0x8
    Marker_Configuration vehicleSeatMarkerConfig; // Offset: 0x20
};

// Original name: PlayerUsableInteractionPoint
// Size: 0x38
// VTable: 0x1499cd8d0
struct PlayerUsableInteractionPoint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams interactionPoint; // Offset: 0x8
    SSharedInteractionParams useInteraction; // Offset: 0x18
    CryStringT* fragmentTag; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
};

// Original name: PlayerUsableItemPort
// Size: 0x28
// VTable: 0x1499cd958
struct PlayerUsableItemPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x8
    SSharedInteractionParams useInteraction; // Offset: 0x18
};

// Original name: PlayerUsableSlot
// Size: 0x78
// VTable: 0x1499cda00
struct PlayerUsableSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    UsableUseSlot useSlot; // Offset: 0x8
    DynArray_PlayerUsableInteractionPoint* playerUsableInteractionPoints; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_PlayerUsableItemPort* playerUsableItemPorts; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: PlayerUsableUseChannelInstance
// Size: 0x50
// VTable: 0x1499cdab0
struct PlayerUsableUseChannelInstance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    UsableUseChannelInstance useChannelInstance; // Offset: 0x8
    ARDataType delinkOnEnterComplete; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_UsableChannelInputActionGroup* availableActionGroups; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: PlaylistRNGConfig
// Size: 0x40
// VTable: 0x1499b5748
struct PlaylistRNGConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MusicLogicParameter* parameters; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float maxDeviation; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: PointAlignmentSlot
// Size: 0x270
// VTable: 0x149a92388
struct PointAlignmentSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* name; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool available; // Offset: 0x28
    bool canPlayerUse; // Offset: 0x29
    uint8_t _pad_3[0x6]; // Offset: 0x2a
    DynArray_SInteractionPointParams* interactionPoints; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
    CryStringT* fragmentTag; // Offset: 0x60
    uint8_t _pad_5[0x8]; // Offset: 0x68
    DynArray_Tag* optionalGameTags; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x78
    CryStringT* slottedFragmentTag; // Offset: 0xa0
    uint8_t _pad_7[0x10]; // Offset: 0xa8
    CryStringT* helperName; // Offset: 0xb8
    uint8_t _pad_8[0x8]; // Offset: 0xc0
    QuatT relativeTransform; // Offset: 0xc8
    bool entityRelativeRotation; // Offset: 0x120
    bool entityRelativeTranslation; // Offset: 0x121
    uint8_t _pad_9[0x2]; // Offset: 0x122
    ARDataType linkMode; // Offset: 0x124
    ARDataType stance; // Offset: 0x128
    bool useHandIK; // Offset: 0x12c
    bool useADIK; // Offset: 0x12d
    uint8_t _pad_10[0x2]; // Offset: 0x12e
    SUsableViewParams viewParams; // Offset: 0x130
    SUsableEnterTransitionParams enterParams; // Offset: 0x148
    SUsableExitTransitionParams exitParams; // Offset: 0x1b0
    SUsableIdleParams usableIdleParams; // Offset: 0x228
    SUsableAttachFlagParams additionalAttachmentFlags; // Offset: 0x260
};

// Original name: PortRefillData
// Size: 0x20
// VTable: 0x149a40638
struct PortRefillData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef Port; // Offset: 0x8
    float Delay; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: PowerConnectionStateModifier
// Size: 0x58
// VTable: 0x1499c2198
struct PowerConnectionStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AttachableStateModifierContextBase context; // Offset: 0x8
    SInteractionState off; // Offset: 0x18
    SInteractionState normal; // Offset: 0x28
    SInteractionState warning; // Offset: 0x38
    SInteractionState failed; // Offset: 0x48
};

// Original name: PowerScanProcedureParams
// Size: 0x58
// VTable: 0x1499c7fa0
struct PowerScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    CLocIdentifier* displayUnknown; // Offset: 0x30
    CLocIdentifier* displayForTurnedOn; // Offset: 0x38
    CLocIdentifier* displayForTurnedOff; // Offset: 0x40
    CLocIdentifier* displayForUnpowered; // Offset: 0x48
    CLocIdentifier* displayForPowered; // Offset: 0x50
};

// Original name: PowerTransferResistanceScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7d38
struct PowerTransferResistanceScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: ProceduralLayoutGlobalOptions
// Size: 0x158
// VTable: 0x1499b66f8
struct ProceduralLayoutGlobalOptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag StraightRoutingElementsTag; // Offset: 0x8
    Tag RightAngledRoutingElementsTag; // Offset: 0x20
    Tag LeftAngledRoutingElementsTag; // Offset: 0x38
    Tag TJunctionRoutingElementsTag; // Offset: 0x50
    Tag CrossSectionRoutingElementsTag; // Offset: 0x68
    Tag PaddingRoutingElementsTag; // Offset: 0x80
    Tag EntryRoutingElementsTag; // Offset: 0x98
    Tag HalfConnectorsTag; // Offset: 0xb0
    Tag FullConnectorsTag; // Offset: 0xc8
    Tag PortalsTag; // Offset: 0xe0
    Tag GatesTag; // Offset: 0xf8
    Tag CapsTag; // Offset: 0x110
    Tag DefaultPurposeTag; // Offset: 0x128
    Tag DefaultThemeTag; // Offset: 0x140
};

// Original name: ProceduralLayoutGraph
// Size: 0x1d0
// VTable: 0x1499b6a10
struct ProceduralLayoutGraph {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* ElementsLibraries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_CryStringT* RoutingElementsLibraries; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_CryStringT* ConnectorsLibraries; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_CryStringT* CapsLibraries; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_CryStringT* SecondaryElementsLibraries; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
    DynArray_TagList* DefaultRoutingElementsTags; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x100
    DynArray_ProceduralLayout_TagFilter* GlobalTagFiltering; // Offset: 0x128 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x130
    DynArray_TagList* GlobalAddOnElementsTags; // Offset: 0x158 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x160
    float GlobalAddOnElementsGenerationChance; // Offset: 0x188
    uint8_t _pad_9[0x4]; // Offset: 0x18c
    CryStringT* TintPalettePath; // Offset: 0x190
    uint8_t _pad_10[0x8]; // Offset: 0x198
    DynArray_ProceduralLayoutNode_Base* Nodes; // Offset: 0x1a0 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x1a8
};

// Original name: ProceduralLayoutGraphNode_AlternateElement
// Size: 0xd0
// VTable: 0x1499b60e0
struct ProceduralLayoutGraphNode_AlternateElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t MinDistance; // Offset: 0x8
    int32_t MaxDistance; // Offset: 0xc
    DynArray_TagList* SpecificRoutingElementsTags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    float ChanceOfDoor; // Offset: 0x40
    float ChanceOfGeneration; // Offset: 0x44
    bool Mandatory; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
    CryStringT* LayerSuffix; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    CryStringT* TintPalettePath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    DynArray_ProceduralLayoutNode_Base* outputLinks; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x78
    DynArray_ProceduralLayoutNode_AlternateElementProperties* AlternateElements; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xa8
};

// Original name: ProceduralLayoutGraphNode_AlternateSubGraph
// Size: 0xd0
// VTable: 0x1499b6220
struct ProceduralLayoutGraphNode_AlternateSubGraph {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t MinDistance; // Offset: 0x8
    int32_t MaxDistance; // Offset: 0xc
    DynArray_TagList* SpecificRoutingElementsTags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    float ChanceOfDoor; // Offset: 0x40
    float ChanceOfGeneration; // Offset: 0x44
    bool Mandatory; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
    CryStringT* LayerSuffix; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    CryStringT* TintPalettePath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    DynArray_ProceduralLayoutNode_Base* outputLinks; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x78
    DynArray_ProceduralLayoutNode_AlternateSubGraphProperties* AlternateSubGraphs; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xa8
};

// Original name: ProceduralLayoutGraphNode_Base
// Size: 0xa0
// VTable: 0x1499b5f40
struct ProceduralLayoutGraphNode_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t MinDistance; // Offset: 0x8
    int32_t MaxDistance; // Offset: 0xc
    DynArray_TagList* SpecificRoutingElementsTags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    float ChanceOfDoor; // Offset: 0x40
    float ChanceOfGeneration; // Offset: 0x44
    bool Mandatory; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
    CryStringT* LayerSuffix; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    CryStringT* TintPalettePath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    DynArray_ProceduralLayoutNode_Base* outputLinks; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x78
};

// Original name: ProceduralLayoutGraphNode_CorridorElement
// Size: 0x108
// VTable: 0x1499b6140
struct ProceduralLayoutGraphNode_CorridorElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t MinDistance; // Offset: 0x8
    int32_t MaxDistance; // Offset: 0xc
    DynArray_TagList* SpecificRoutingElementsTags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    float ChanceOfDoor; // Offset: 0x40
    float ChanceOfGeneration; // Offset: 0x44
    bool Mandatory; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
    CryStringT* LayerSuffix; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    CryStringT* TintPalettePath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    DynArray_ProceduralLayoutNode_Base* outputLinks; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x78
    ProceduralLayoutNode_ElementProperties ElementProperties; // Offset: 0xa0
};

// Original name: ProceduralLayoutGraphNode_Element
// Size: 0x108
// VTable: 0x1499b6020
struct ProceduralLayoutGraphNode_Element {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t MinDistance; // Offset: 0x8
    int32_t MaxDistance; // Offset: 0xc
    DynArray_TagList* SpecificRoutingElementsTags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    float ChanceOfDoor; // Offset: 0x40
    float ChanceOfGeneration; // Offset: 0x44
    bool Mandatory; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
    CryStringT* LayerSuffix; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    CryStringT* TintPalettePath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    DynArray_ProceduralLayoutNode_Base* outputLinks; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x78
    ProceduralLayoutNode_ElementProperties ElementProperties; // Offset: 0xa0
};

// Original name: ProceduralLayoutGraphNode_MultiElement
// Size: 0x118
// VTable: 0x1499b6490
struct ProceduralLayoutGraphNode_MultiElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t MinDistance; // Offset: 0x8
    int32_t MaxDistance; // Offset: 0xc
    DynArray_TagList* SpecificRoutingElementsTags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    float ChanceOfDoor; // Offset: 0x40
    float ChanceOfGeneration; // Offset: 0x44
    bool Mandatory; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
    CryStringT* LayerSuffix; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    CryStringT* TintPalettePath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    DynArray_ProceduralLayoutNode_Base* outputLinks; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x78
    ProceduralLayoutNode_ElementProperties ElementProperties; // Offset: 0xa0
    int32_t MinElementsToGenerate; // Offset: 0x108
    int32_t MaxElementsToGenerate; // Offset: 0x10c
    bool GenerateUniqueElements; // Offset: 0x110
    uint8_t _pad_6[0x7]; // Offset: 0x111
};

// Original name: ProceduralLayoutGraphNode_VerticalElement
// Size: 0x2c0
// VTable: 0x1499b63e8
struct ProceduralLayoutGraphNode_VerticalElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t MinDistance; // Offset: 0x8
    int32_t MaxDistance; // Offset: 0xc
    DynArray_TagList* SpecificRoutingElementsTags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    float ChanceOfDoor; // Offset: 0x40
    float ChanceOfGeneration; // Offset: 0x44
    bool Mandatory; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
    CryStringT* LayerSuffix; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    CryStringT* TintPalettePath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    DynArray_ProceduralLayoutNode_Base* outputLinks; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x78
    ProceduralLayoutNode_ElementProperties ElementProperties; // Offset: 0xa0
    ARDataType Direction; // Offset: 0x108
    uint8_t _pad_6[0x4]; // Offset: 0x10c
    DynArray_ProceduralLayoutNode_Base* outputLinks_Floor1; // Offset: 0x110 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x118
    DynArray_ProceduralLayoutNode_Base* outputLinks_Floor2; // Offset: 0x140 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x148
    DynArray_ProceduralLayoutNode_Base* outputLinks_Floor3; // Offset: 0x170 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x178
    DynArray_ProceduralLayoutNode_Base* outputLinks_Floor4; // Offset: 0x1a0 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x1a8
    DynArray_ProceduralLayoutNode_Base* outputLinks_Floor5; // Offset: 0x1d0 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x1d8
    DynArray_ProceduralLayoutNode_Base* outputLinks_Floor6; // Offset: 0x200 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x208
    DynArray_ProceduralLayoutNode_Base* outputLinks_Floor7; // Offset: 0x230 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x238
    DynArray_ProceduralLayoutNode_Base* outputLinks_Floor8; // Offset: 0x260 // Pointer to DynArray struct
    uint8_t _pad_14[0x28]; // Offset: 0x268
    DynArray_ProceduralLayoutNode_Base* outputLinks_Floor9; // Offset: 0x290 // Pointer to DynArray struct
    uint8_t _pad_15[0x28]; // Offset: 0x298
};

// Original name: ProceduralLayoutNode_AlternateElementProperties
// Size: 0x70
// VTable: 0x1499b6080
struct ProceduralLayoutNode_AlternateElementProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* ElementTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_Tag* ElementThemes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    float Weight; // Offset: 0x68
    uint8_t _pad_3[0x4]; // Offset: 0x6c
};

// Original name: ProceduralLayoutNode_AlternateSubGraphProperties
// Size: 0x28
// VTable: 0x1499b61c8
struct ProceduralLayoutNode_AlternateSubGraphProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ProceduralLayoutGraph SubGraphReference; // Offset: 0x8
    int32_t Seed; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: ProceduralLayoutNode_ElementProperties
// Size: 0x68
// VTable: 0x1499b5fc8
struct ProceduralLayoutNode_ElementProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* ElementTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_Tag* ElementThemes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: ProceduralLayout_SupplementaryElementTagsOptions
// Size: 0x40
// VTable: 0x1499b6778
struct ProceduralLayout_SupplementaryElementTagsOptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* SupplementaryElementTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    int32_t MaxElementsToGenerate; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: ProceduralLayout_TagFilter
// Size: 0x70
// VTable: 0x1499b6820
struct ProceduralLayout_TagFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TagList* GraphNodeTagsToFilter; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ARDataType TagFilteringMode; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    DynArray_ProceduralLayout_SupplementaryElementTagsOptions* SupplementaryElementTagsList; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: ProceduralPlanetAudioAlgorithmAveragePosition
// Size: 0xa0
// VTable: 0x149a10b80
struct ProceduralPlanetAudioAlgorithmAveragePosition {
    uint8_t _pad_0[0x48]; // Offset: 0x0
    AudioRtpc countRtpc; // Offset: 0x48
    AudioRtpc avgScaleRtpc; // Offset: 0x68
    ProceduralPlanetAudioTagAndEventsDef definition; // Offset: 0x88
};

// Original name: ProceduralPlanetAudioAlgorithmClosestObjects
// Size: 0xc8
// VTable: 0x149a10ad8
struct ProceduralPlanetAudioAlgorithmClosestObjects {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_AudioRtpc* countRtpcs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x18
    uint32_t maxInstances; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    AudioRtpc scaleRtpc; // Offset: 0x50
    ProceduralPlanetAudioTagAndEventsDef definitionSingle; // Offset: 0x70
    ProceduralPlanetAudioTagAndEventsDef definitionCrowd; // Offset: 0x88
    AudioRtpc countCrowdRtpc; // Offset: 0xa0
    bool crowdIsMultipoint; // Offset: 0xc0
    uint8_t _pad_3[0x7]; // Offset: 0xc1
};

// Original name: ProceduralPlanetAudioComponentParams
// Size: 0x48
// VTable: 0x149a11168
struct ProceduralPlanetAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ProceduralPlanetAudioData planetAudioData; // Offset: 0x18
    ProceduralPlanetAudioRiverData riverAudioData; // Offset: 0x30
};

// Original name: ProceduralPlanetAudioData
// Size: 0x158
// VTable: 0x149a11010
struct ProceduralPlanetAudioData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ProceduralPlanetAudioEntry* entries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    AudioRtpc pressureRtpc; // Offset: 0x38
    AudioRtpc temperatureRtpc; // Offset: 0x58
    AudioRtpc humidityRtpc; // Offset: 0x78
    AudioRtpc breathabilityRtpc; // Offset: 0x98
    AudioRtpc firstRoomIsPlanetRoomRtpc; // Offset: 0xb8
    DynArray_ProceduralPlanetAudioTagAndRtpc* effectTagMovementRtpcs; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xe0
    DynArray_ProceduralPlanetAudioDisturbanceList* disturbanceLists; // Offset: 0x108 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x110
    AudioRtpc disturbanceVelocityRtpc; // Offset: 0x138
};

// Original name: ProceduralPlanetAudioTagAndEvent
// Size: 0x80
// VTable: 0x149a10878
struct ProceduralPlanetAudioTagAndEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    AudioRtpc movementRtpc; // Offset: 0x20
    GlobalResourceAudio loopStart; // Offset: 0x40
    GlobalResourceAudio loopStop; // Offset: 0x60
};

// Original name: ProceduralPlanetAudioTagAndEventsDef
// Size: 0x38
// VTable: 0x149a10950
struct ProceduralPlanetAudioTagAndEventsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ProceduralPlanetAudioTagAndEvent* tagAndEvents; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ProceduralPlanetAudioTagAndRtpc
// Size: 0x40
// VTable: 0x149a108f8
struct ProceduralPlanetAudioTagAndRtpc {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    AudioRtpc rtpc; // Offset: 0x20
};

// Original name: ProjectileDetonationParams
// Size: 0x1d8
// VTable: 0x1499ce788
struct ProjectileDetonationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float armTime; // Offset: 0x8
    float destructDelay; // Offset: 0xc
    float safeDistance; // Offset: 0x10
    bool explodeOnImpact; // Offset: 0x14
    bool explodeOnFinalImpact; // Offset: 0x15
    bool explodeOnExpire; // Offset: 0x16
    bool explodeOnTargetRange; // Offset: 0x17
    ExplosionParams explosionParams; // Offset: 0x18
};

// Original name: ProjectileParams
// Size: 0x28
// VTable: 0x1499ce8b8
struct ProjectileParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ProjectileDetonationParams detonationParams; // Offset: 0x8
    ProjectileProximityTriggerParams proximityTriggerParams; // Offset: 0x18
};

// Original name: ProjectileTestParams
// Size: 0x38
// VTable: 0x1499cebd0
struct ProjectileTestParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enabled; // Offset: 0x18
    bool showBB; // Offset: 0x19
    uint8_t _pad_1[0x6]; // Offset: 0x1a
    AmmoParams ammoType; // Offset: 0x20
};

// Original name: QuantumDriveAudioParams
// Size: 0x5e0
// VTable: 0x149a53280
struct QuantumDriveAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio spoolStartAudioTrigger; // Offset: 0x8
    GlobalResourceAudio spoolStopAudioTrigger; // Offset: 0x28
    GlobalResourceAudio spoolCancelAudioTrigger; // Offset: 0x48
    GlobalResourceAudio spoolFailAudioTrigger; // Offset: 0x68
    GlobalResourceAudio alignStartAudioTrigger; // Offset: 0x88
    GlobalResourceAudio alignStopAudioTrigger; // Offset: 0xa8
    GlobalResourceAudio preRampUpStartAudioTrigger; // Offset: 0xc8
    GlobalResourceAudio preRampUpStopAudioTrigger; // Offset: 0xe8
    GlobalResourceAudio rampUpStartAudioTrigger; // Offset: 0x108
    GlobalResourceAudio rampUpStopAudioTrigger; // Offset: 0x128
    GlobalResourceAudio flightInProgressStartAudioTrigger; // Offset: 0x148
    GlobalResourceAudio flightInProgressStopAudioTrigger; // Offset: 0x168
    GlobalResourceAudio rampDownStartAudioTrigger; // Offset: 0x188
    GlobalResourceAudio rampDownStopAudioTrigger; // Offset: 0x1a8
    GlobalResourceAudio postRampDownStartAudioTrigger; // Offset: 0x1c8
    GlobalResourceAudio postRampDownStopAudioTrigger; // Offset: 0x1e8
    GlobalResourceAudio coolDownStartAudioTrigger; // Offset: 0x208
    GlobalResourceAudio coolDownStopAudioTrigger; // Offset: 0x228
    AudioRtpc spoolTimeRTPC; // Offset: 0x248
    AudioRtpc fuelExpendedRTPC; // Offset: 0x268
    AudioRtpc timeSpentTravellingRTPC; // Offset: 0x288
    AudioRtpc shortRangeRTPC; // Offset: 0x2a8
    AudioRtpc totalTravelTimeRTPC; // Offset: 0x2c8
    AudioRtpc speedNormalizedCurTripRTPC; // Offset: 0x2e8
    AudioRtpc speedNormalizedOverallRTPC; // Offset: 0x308
    GlobalResourceAudio uiStartAudioTrigger; // Offset: 0x328
    GlobalResourceAudio uiStopAudioTrigger; // Offset: 0x348
    GlobalResourceAudio uiSpoolStartAudioTrigger; // Offset: 0x368
    GlobalResourceAudio uiSpoolCancelAudioTrigger; // Offset: 0x388
    GlobalResourceAudio uiSpoolDoneAudioTrigger; // Offset: 0x3a8
    GlobalResourceAudio uiSpoolStartAudioTriggerLoop; // Offset: 0x3c8
    GlobalResourceAudio uiSpoolStopAudioTriggerLoop; // Offset: 0x3e8
    GlobalResourceAudio uiCalibrationRunStartAudioTrigger; // Offset: 0x408
    GlobalResourceAudio uiCalibrationRunStopAudioTrigger; // Offset: 0x428
    GlobalResourceAudio uiCalibrationWarningStartAudioTrigger; // Offset: 0x448
    GlobalResourceAudio uiCalibrationWarningStopAudioTrigger; // Offset: 0x468
    GlobalResourceAudio uiCalibrationInterruptAudioTrigger; // Offset: 0x488
    GlobalResourceAudio uiCalibrationBeginAudioTrigger; // Offset: 0x4a8
    GlobalResourceAudio uiCalibrationFailAudioTrigger; // Offset: 0x4c8
    GlobalResourceAudio uiCalibrationDoneAudioTrigger; // Offset: 0x4e8
    GlobalResourceAudio uiPartyAllReady; // Offset: 0x508
    GlobalResourceAudio uiPartyMemberAligned; // Offset: 0x528
    GlobalResourceAudio uiPartyMemberAlignmentLost; // Offset: 0x548
    GlobalResourceAudio uiPartyMemberDrop; // Offset: 0x568
    GlobalResourceAudio uiPartyMemberReady; // Offset: 0x588
    GlobalResourceAudio uiPartyMemberSpooledUp; // Offset: 0x5a8
    Tag activateQTAudioSpline; // Offset: 0x5c8
};

// Original name: QuantumDriveEffectParams
// Size: 0x60
// VTable: 0x149a54888
struct QuantumDriveEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Behavior_CustomQuantumDriveEffectsPreset quantumParticleEffects; // Offset: 0x8
    Behavior_CustomQuantumDriveEffectsPreset quantumTrailEffect; // Offset: 0x18
    float shieldProjectileRelativeTime; // Offset: 0x28
    float boostChargeShieldPulseRelativeTime; // Offset: 0x2c
    float shipBoundsScale; // Offset: 0x30
    float originOffsetDistance; // Offset: 0x34
    float castingOffsetDistance; // Offset: 0x38
    float interiorTransitExitOffsetDistance; // Offset: 0x3c
    float effectScaling; // Offset: 0x40
    float shieldPulseEffectScale; // Offset: 0x44
    float shieldPulseEmissionScale; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
    Range chromaticShiftVelocityRange; // Offset: 0x50
};

// Original name: QuantumDriveGlobalParams
// Size: 0xad8
// VTable: 0x149a53498
struct QuantumDriveGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuantumDriveSplineTraversalParams splineTraversalParams; // Offset: 0x8
    QuantumDriveNotifications notifications; // Offset: 0xe0
    QuantumDriveAudioParams audioParams; // Offset: 0x180
    QuantumMusicParams musicParams; // Offset: 0x760
    float maxRaycastDist; // Offset: 0xaa0
    float maxLinkingRange; // Offset: 0xaa4
    float maxIconScaleRange; // Offset: 0xaa8
    float minimumAltitudeForQuantum; // Offset: 0xaac
    float maximumAtmosphericPressureForQuantum; // Offset: 0xab0
    uint8_t _pad_1[0x4]; // Offset: 0xab4
    EntityClassDefinition interdictionNavPointClass; // Offset: 0xab8
    float scatterScale; // Offset: 0xad0
    float inputDelay; // Offset: 0xad4
};

// Original name: QuantumDriveStateModifier
// Size: 0x38
// VTable: 0x1499c2e90
struct QuantumDriveStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuantumTravelPreparationStates calibrationStates; // Offset: 0x8
    QuantumTravelPreparationStates spoolStates; // Offset: 0x18
    QuantumTravelStates travelStates; // Offset: 0x28
};

// Original name: QuantumRefuelService
// Size: 0x70
// VTable: 0x149a90368
struct QuantumRefuelService {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    CLocIdentifier* productName; // Offset: 0x18
    CryStringT* icon; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float serviceDelayTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    CLocIdentifier* hudMessage; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    bool instantRefuel; // Offset: 0x48
    uint8_t _pad_4[0x3]; // Offset: 0x49
    int32_t refuelUnitPerSecond; // Offset: 0x4c
    ResourceType fuelCommodity; // Offset: 0x50
    uint8_t _pad_5[0x8]; // Offset: 0x68
};

// Original name: QuantumTravelPreparationStates
// Size: 0x38
// VTable: 0x1499c2cc0
struct QuantumTravelPreparationStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState idle; // Offset: 0x8
    SInteractionState inProgress; // Offset: 0x18
    SInteractionState complete; // Offset: 0x28
};

// Original name: QuantumTravelStates
// Size: 0x68
// VTable: 0x1499c2de8
struct QuantumTravelStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState idle; // Offset: 0x8
    SInteractionState inProgress; // Offset: 0x18
    SInteractionState complete; // Offset: 0x28
    SInteractionState interrupted; // Offset: 0x38
    SInteractionState cooldown; // Offset: 0x48
    SInteractionState blocked; // Offset: 0x58
};

// Original name: QuickAccessWheelAttachableSlotsDef
// Size: 0x78
// VTable: 0x149a9ac78
struct QuickAccessWheelAttachableSlotsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool openContextMenuAsFolder; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_CryStringT* itemPortNames; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_ItemCategory* itemCategories; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
    bool clenchPreviousItem; // Offset: 0x70
    uint8_t _pad_4[0x3]; // Offset: 0x71
    ARDataType postUnstowAction; // Offset: 0x74
};

// Original name: QuickAccessWheelInventoryItemDef
// Size: 0x48
// VTable: 0x149a9af60
struct QuickAccessWheelInventoryItemDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool openContextMenuAsFolder; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_ItemCategory* itemCategories; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    bool clenchPreviousItem; // Offset: 0x40
    uint8_t _pad_3[0x3]; // Offset: 0x41
    ARDataType postUnstowAction; // Offset: 0x44
};

// Original name: RadarContactGroupArray
// Size: 0x38
// VTable: 0x1499c3db0
struct RadarContactGroupArray {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_RadarContactGroupEntry* groups; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: RadarContactGroupDefinition
// Size: 0x38
// VTable: 0x1499c3d50
struct RadarContactGroupDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_RadarContactGroupEntry* groups; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: RadarContactGroupEntry
// Size: 0x78
// VTable: 0x1499c3cf0
struct RadarContactGroupEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_RadarContactTypeEntry* types; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_RadarContactSubGroupEntry* children; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
};

// Original name: RadarContactSubGroupEntry
// Size: 0x48
// VTable: 0x1499c3c48
struct RadarContactSubGroupEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_RadarContactTypeEntry* types; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: RadarContactTypeDefinition
// Size: 0x68
// VTable: 0x1499c3bc0
struct RadarContactTypeDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RadarContactTypeEntry unknownType; // Offset: 0x8
    RadarContactTypeEntry defaultAudioType; // Offset: 0x20
    DynArray_RadarContactTypeEntry* types; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: RadarContactTypeEntry
// Size: 0x90
// VTable: 0x1499c3b10
struct RadarContactTypeEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
    Tag tag; // Offset: 0x20
    ScanInformationDef scanDef; // Offset: 0x38
    RadarContactGamePlayProperties gameplayProperties; // Offset: 0x50
    Marker_Configuration markerConfig; // Offset: 0x60
    ARDataType trackerType; // Offset: 0x78
    float contactHoloMinScreenSize; // Offset: 0x7c
    ARDataType contactHighlightCategory; // Offset: 0x80
    ARDataType contactTaggingCategory; // Offset: 0x81
    bool isObjectOfInterest; // Offset: 0x82
    uint8_t _pad_2[0xd]; // Offset: 0x83
};

// Original name: RadarDisplay3DPreset
// Size: 0x330
// VTable: 0x149aaa578
struct RadarDisplay3DPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    UIDataBankDisplay3DParams displayParams; // Offset: 0x8
    DynArray_UIWorldDisplayPathParams* quantumPathDisplaySettings; // Offset: 0x300 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x308
};

// Original name: RadarJammerComponentParams
// Size: 0x40
// VTable: 0x1499c6628
struct RadarJammerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool activateOnSpawn; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float jammingRadius; // Offset: 0x1c
    SSharedInteractionParams turnOnInteraction; // Offset: 0x20
    SSharedInteractionParams turnOffInteraction; // Offset: 0x30
};

// Original name: RadarSystemSharedParams
// Size: 0x148
// VTable: 0x1499c5fc0
struct RadarSystemSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint32_t paramsVersion; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_float* focusAngles; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    RadarSharedParams radarParams; // Offset: 0x40
    ScanSharedParams scanParams; // Offset: 0x50
    PingSharedParams pingParams; // Offset: 0x60
    ContactHighlightSharedParams highlightParams; // Offset: 0x70
    ContactTaggingSharedParams taggingParams; // Offset: 0x80
    OcclusionCheckSharedParams occlusionParams; // Offset: 0x90
    bool displayRadarContactMarkers; // Offset: 0xa0
    uint8_t _pad_3[0x7]; // Offset: 0xa1
    RadarJammerSharedParams radarJammerParams; // Offset: 0xa8
    DynArray_RadarDeltaSignatureDetectionParams* deltaSignatureDetectionParams; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xc0
    DynArray_DeltaSignatureSpikeParams* deltaSignatureBaseSpike; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xf0
    DynArray_DeltaSignatureSensitivityParams* deltaSignatureSensitivityParams; // Offset: 0x118 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x120
};

// Original name: RadiationEmitterComponentParams
// Size: 0x50
// VTable: 0x149a82e68
struct RadiationEmitterComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Tag radiationReceiverTag; // Offset: 0x18
    bool enabled; // Offset: 0x30
    uint8_t _pad_1[0x3]; // Offset: 0x31
    float emissionRangeMinimum; // Offset: 0x34
    float emissionRangeMaximum; // Offset: 0x38
    float emissionStrength; // Offset: 0x3c
    ARDataType falloffCurve; // Offset: 0x40
    uint8_t _pad_2[0x3]; // Offset: 0x41
    float emissionRangeHeightMinimum; // Offset: 0x44
    float emissionRangeHeightMaximum; // Offset: 0x48
    uint8_t _pad_3[0x4]; // Offset: 0x4c
};

// Original name: RastarLocationParams
// Size: 0x48
// VTable: 0x14999d770
struct RastarLocationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float actionAreaRadius; // Offset: 0x18
    float locationSize; // Offset: 0x1c
    float externalWear; // Offset: 0x20
    float externalDirt; // Offset: 0x24
    float internalWear; // Offset: 0x28
    float internalDirt; // Offset: 0x2c
    TintPaletteTree tintPalette; // Offset: 0x30
};

// Original name: RecordRefUserVariableTypeCanvasRecord
// Size: 0x20
// VTable: 0x149994510
struct RecordRefUserVariableTypeCanvasRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Canvas value; // Offset: 0x8
};

// Original name: RefuelBaseService
// Size: 0x70
// VTable: 0x149a90360
struct RefuelBaseService {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    CLocIdentifier* productName; // Offset: 0x18
    CryStringT* icon; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float serviceDelayTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    CLocIdentifier* hudMessage; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    bool instantRefuel; // Offset: 0x48
    uint8_t _pad_4[0x3]; // Offset: 0x49
    int32_t refuelUnitPerSecond; // Offset: 0x4c
    ResourceType fuelCommodity; // Offset: 0x50
    uint8_t _pad_5[0x8]; // Offset: 0x68
};

// Original name: RefuelParams
// Size: 0xa8
// VTable: 0x149a16b38
struct RefuelParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType serviceBeaconType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* serviceBeaconName; // Offset: 0x20
    int32_t beaconTaxPercentage; // Offset: 0x28
    int32_t beaconMaxPaymentAmount; // Offset: 0x2c
    MissionPropertyValue_AIName npcRequesterNameDef; // Offset: 0x30
    SServiceBeaconCreatorParams playerCreatorParams; // Offset: 0x78
    SServiceBeaconCreatorParamsBase npcCreatorParams; // Offset: 0x88
    CLocIdentifier* objectiveTitle; // Offset: 0x98
    CLocIdentifier* objectiveDescription; // Offset: 0xa0
};

// Original name: RepairService
// Size: 0x68
// VTable: 0x149a902b0
struct RepairService {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    CLocIdentifier* productName; // Offset: 0x18
    CryStringT* icon; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float serviceDelayTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    CLocIdentifier* hudMessage; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    int32_t commodityToHitPoints; // Offset: 0x48
    int32_t commodityToDegradationLifetime; // Offset: 0x4c
    ResourceType repairCommodity; // Offset: 0x50
};

// Original name: ReputationPrerequisites
// Size: 0x30
// VTable: 0x14996ad88
struct ReputationPrerequisites {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Jurisdiction wantedLevelJurisdictionOverride; // Offset: 0x8
    ReputationPrerequisiteRange wantedLevel; // Offset: 0x20
};

// Original name: ReputationRewardFaction
// Size: 0x50
// VTable: 0x149a977b0
struct ReputationRewardFaction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationScopeParams scope; // Offset: 0x8
    SReputationRewardAmount reward; // Offset: 0x20
    FactionReputation factionReputation; // Offset: 0x38
};

// Original name: ResourceContainer
// Size: 0x128
// VTable: 0x1499624e0
struct ResourceContainer {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SBaseCargoUnit capacity; // Offset: 0x18
    float mass; // Offset: 0x28
    bool immutable; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    DynArray_ResourceType* inclusiveResources; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
    DynArray_ResourceType* exclusiveResources; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x68
    DynArray_ResourceTypeGroup* inclusiveGroups; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x98
    DynArray_ResourceTypeGroup* exclusiveGroups; // Offset: 0xc0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xc8
    DynArray_ResourceContainerDefaultCompositionEntry* defaultComposition; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xf8
    float defaultCompositionFillFactor; // Offset: 0x120
    uint8_t _pad_7[0x4]; // Offset: 0x124
};

// Original name: ResourceContainerDefaultCompositionEntry
// Size: 0x28
// VTable: 0x149962348
struct ResourceContainerDefaultCompositionEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType entry; // Offset: 0x8
    float weight; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: ResourceLinkedInteractionState
// Size: 0x20
// VTable: 0x1499a7568
struct ResourceLinkedInteractionState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState linkedInteractionState; // Offset: 0x8
    bool changeInteractionState; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: ResourceType
// Size: 0x98
// VTable: 0x149962168
struct ResourceType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    ResourceTypeDensityType densityType; // Offset: 0x18
    CryStringT* defaultThumbnailPath; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    DynArray_ResourceTypeProperties* properties; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    ResourceType refinedVersion; // Offset: 0x68
    bool validateDefaultCargoBox; // Offset: 0x80
    uint8_t _pad_3[0x7]; // Offset: 0x81
    SResourceTypeDefaultCargoContainers defaultCargoContainers; // Offset: 0x88
};

// Original name: ResourceTypeDatabase
// Size: 0x38
// VTable: 0x1499622c0
struct ResourceTypeDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ResourceTypeGroup* groups; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ResourceTypeGroup
// Size: 0x88
// VTable: 0x149962260
struct ResourceTypeGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    CryStringT* defaultThumbnailPath; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    DynArray_ResourceTypeGroup* groups; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    DynArray_ResourceType* resources; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
};

// Original name: RestockService
// Size: 0x60
// VTable: 0x149a903d0
struct RestockService {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    CLocIdentifier* productName; // Offset: 0x18
    CryStringT* icon; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float serviceDelayTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    CLocIdentifier* hudMessage; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    ResourceType AmmoCommodity; // Offset: 0x48
};

// Original name: RestrictedAreaComponentParams
// Size: 0x58
// VTable: 0x149a1cc88
struct RestrictedAreaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType state; // Offset: 0x18
    float timeToDespawn; // Offset: 0x1c
    bool affectShips; // Offset: 0x20
    bool affectGroundVehicles; // Offset: 0x21
    bool affectActorsOnFoot; // Offset: 0x22
    uint8_t _pad_1[0x5]; // Offset: 0x23
    DynArray_Tag* allowTagsOnLoad; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: RestrictedAreaKillParams
// Size: 0x40
// VTable: 0x149a1c508
struct RestrictedAreaKillParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool killActorsOnFoot; // Offset: 0x8
    bool killGroundVehicles; // Offset: 0x9
    bool killShips; // Offset: 0xa
    bool despawnObjects; // Offset: 0xb
    float despawnDelay; // Offset: 0xc
    DynArray_Tag* allowTagsOnLoad; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: RestrictedAreaParams
// Size: 0xe8
// VTable: 0x149a1c748
struct RestrictedAreaParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    RestrictedAreaRedoutParams redoutParams; // Offset: 0x18
    RestrictedAreaAutopilotParams autopilotParams; // Offset: 0x30
    RestrictedAreaKillParams killParams; // Offset: 0x40
    RestrictedAreaHUDMessageParams hudMessageParams; // Offset: 0x80
};

// Original name: ReviveParams
// Size: 0xa8
// VTable: 0x149a16bb8
struct ReviveParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType serviceBeaconType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* serviceBeaconName; // Offset: 0x20
    int32_t beaconTaxPercentage; // Offset: 0x28
    int32_t beaconMaxPaymentAmount; // Offset: 0x2c
    MissionPropertyValue_AIName npcRequesterNameDef; // Offset: 0x30
    SServiceBeaconCreatorParams playerCreatorParams; // Offset: 0x78
    SServiceBeaconCreatorParamsBase npcCreatorParams; // Offset: 0x88
    CLocIdentifier* objectiveTitle; // Offset: 0x98
    CLocIdentifier* objectiveDescription; // Offset: 0xa0
};

// Original name: RttLoadoutPreviewEntityComponentParams
// Size: 0xd8
// VTable: 0x1499f1738
struct RttLoadoutPreviewEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* entityClipName; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* starMarineEntityClipName; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    QuatTS transform; // Offset: 0x38
    EntityClassDefinition geometryRecord; // Offset: 0x98
    EntityClassDefinition starMarineGeometryRecord; // Offset: 0xb0
    Vec2 previewWindowDimensions; // Offset: 0xc8
};

// Original name: S42CommendationRequirementStat
// Size: 0x80
// VTable: 0x149a36c68
struct S42CommendationRequirementStat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    S42StatId statIdentifier; // Offset: 0x8
    DynArray_S42StatOperationBase* operations; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x50
    ARDataType comparison; // Offset: 0x78
    float value; // Offset: 0x7c
};

// Original name: S42CommendationRequirementTriggerCondition
// Size: 0x20
// VTable: 0x149a36b90
struct S42CommendationRequirementTriggerCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TriggerConditionDataDef triggerConditionRecord; // Offset: 0x8
};

// Original name: S42MissionLogEntryParams
// Size: 0xe8
// VTable: 0x149a35c90
struct S42MissionLogEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLogEntry parentMission; // Offset: 0x8
    DynArray_EntityClassDefinition* playerShips; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    DynArray_MissionObjective* missionObjectives; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
    MegaMap megamapRecord; // Offset: 0x80
    CryStringT* imagePath; // Offset: 0x98
    uint8_t _pad_3[0x8]; // Offset: 0xa0
    int32_t maxCollectibles; // Offset: 0xa8
    int32_t maxOptionalObjectives; // Offset: 0xac
    int32_t maxGalactapediaEntries; // Offset: 0xb0
    bool restingMission; // Offset: 0xb4
    uint8_t _pad_4[0x3]; // Offset: 0xb5
    Tag nextFrontendTagOnStarted; // Offset: 0xb8
    Tag nextFrontendTagOnCompleted; // Offset: 0xd0
};

// Original name: S42PersonalStatusAppParams
// Size: 0x98
// VTable: 0x149a378d0
struct S42PersonalStatusAppParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SS42PersonalStatusDrugBuffEffectString* drugEffectStrings; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SMobiGlasPersonalStatusWeaponItem* firingRangeWeaponTypes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_SMobiGlasPersonalStatusSkillsEntry* playerSkills; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: S42ShipStatusAllowedShipParams
// Size: 0x28
// VTable: 0x149a37b70
struct S42ShipStatusAllowedShipParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition shipClass; // Offset: 0x8
    bool showShields; // Offset: 0x20
    bool showFuel; // Offset: 0x21
    bool showOrdnance; // Offset: 0x22
    bool showAmmo; // Offset: 0x23
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: S42ShipStatusAppParams
// Size: 0x70
// VTable: 0x149a37c30
struct S42ShipStatusAppParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    mobiGlasApp linkedStarMap; // Offset: 0x8
    float shipHoloRotationSpeed; // Offset: 0x20
    float shipHoloRotationSmoothTime; // Offset: 0x24
    float lowAmmoThreshold; // Offset: 0x28
    float lowOrdnanceThreshold; // Offset: 0x2c
    float lowHydrogenFuelThreshold; // Offset: 0x30
    float lowQuantumFuelThreshold; // Offset: 0x34
    float shipRecallRetryTime; // Offset: 0x38
    bool requirePermissionForShipRecall; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
    DynArray_S42ShipStatusAllowedShipParams* playerShips; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
};

// Original name: S42StatId
// Size: 0x40
// VTable: 0x149a399a8
struct S42StatId {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType S42StatType; // Offset: 0x8
    ARDataType S42StatPlayerState; // Offset: 0xc
    EntityClassDefinition entityClass; // Offset: 0x10
    Tag entityTag; // Offset: 0x28
};

// Original name: S42StatOperationStat
// Size: 0x50
// VTable: 0x149a39a60
struct S42StatOperationStat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType operationType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    S42StatId statIdRight; // Offset: 0x10
};

// Original name: SAISkillsComponentParams
// Size: 0x48
// VTable: 0x1499ed338
struct SAISkillsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SkillDefinitions skills; // Offset: 0x18
    AIProfile profile; // Offset: 0x30
};

// Original name: SAccoladeRequirementWatchedStat
// Size: 0x28
// VTable: 0x149a23a20
struct SAccoladeRequirementWatchedStat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statsType; // Offset: 0x8
    ARDataType playerState; // Offset: 0xc
    EntityClassDefinition entityClassGUID; // Offset: 0x10
};

// Original name: SActionAreaComponentParams
// Size: 0x118
// VTable: 0x149a44f58
struct SActionAreaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool triggerOnce; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    DynArray_Tag* requiredTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    DynArray_Tag* excludedTags; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
    DynArray_Tag* applyTagsToContainedEntities; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x88
    CryStringT* enterEvent; // Offset: 0xb0
    uint8_t _pad_5[0x8]; // Offset: 0xb8
    CryStringT* exitEvent; // Offset: 0xc0
    uint8_t _pad_6[0x8]; // Offset: 0xc8
    bool sendEventsToEntity; // Offset: 0xd0
    uint8_t _pad_7[0x3]; // Offset: 0xd1
    ARDataType eventTriggerMask; // Offset: 0xd4
    DynArray_ActionAreaExtensionType* areaExtensions; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0xe0
    ActionAreaAudioFilter audioFilter; // Offset: 0x108
};

// Original name: SActorCarryConfigTagSwitch
// Size: 0x40
// VTable: 0x149a9fbf0
struct SActorCarryConfigTagSwitch {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag existingTag; // Offset: 0x8
    Tag replaceWithTag; // Offset: 0x20
    ARDataType onState; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: SActorComponentParams
// Size: 0x4f0
// VTable: 0x149ab1470
struct SActorComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Character character; // Offset: 0x18
    bool isAIControlled; // Offset: 0x30
    bool flyInGroundState; // Offset: 0x31
    uint8_t _pad_1[0x2]; // Offset: 0x32
    float aimFOV; // Offset: 0x34
    float maxLookAimAngle; // Offset: 0x38
    float maxDeltaAngleRateNormal; // Offset: 0x3c
    int32_t aimIKLayer; // Offset: 0x40
    int32_t lookIKLayer; // Offset: 0x44
    CharacterNameData characterNameData; // Offset: 0x48
    ActorSkeletonConfig skeletonConfig; // Offset: 0x60
    JumpFallLandParams jumpFallLandParams; // Offset: 0x78
    LedgeGrabbingParams ledgeGrabbingParams; // Offset: 0x90
    JumpFallLandConfig jumpFallLandConfig; // Offset: 0xa8
    CarryConfig carryConfig; // Offset: 0xc0
    LadderConfig ladderConfig; // Offset: 0xd8
    LadderConfig ladderConfigV2; // Offset: 0xf0
    WeaponProceduralAnimation proceduralAnimationRecord; // Offset: 0x108
    ActorMovementModifiers movementModifiersRecord; // Offset: 0x120
    ActorMovementSetsConfig movementSetsRecord; // Offset: 0x138
    PlayerAnimatedInteractionConfig playerAnimatedInteractionConfig; // Offset: 0x150
    bool isMinimal; // Offset: 0x168
    uint8_t _pad_2[0x3]; // Offset: 0x169
    ARDataType aiDefaultStance; // Offset: 0x16c
    ARDataType actorType; // Offset: 0x170
    uint8_t _pad_3[0x4]; // Offset: 0x174
    ActorStanceConfig stancesDataRecord; // Offset: 0x178
    ActorStatusComponent actorStatusRecord; // Offset: 0x190
    ActorStatusComponent actorStatusRecordEA; // Offset: 0x1a8
    ActorStatusComponent actorStatusRecordSQ42; // Offset: 0x1c0
    TakeDownConfig takeDownConfig; // Offset: 0x1d8
    WeaponMisfireFixConfig misfireFixConfig; // Offset: 0x1f0
    SActorHitReactionsDef hitReactionsDefRecord; // Offset: 0x208
    SActorForceReactionsDef forceReactionsDefRecord; // Offset: 0x220
    SActorExternalForceResponseCameraShakeDef shakeRecordFirstPerson; // Offset: 0x238
    SActorExternalForceResponseCameraShakeDef shakeRecordThirdPerson; // Offset: 0x250
    ActorAimLimits actorAimLimits; // Offset: 0x268
    ActorLookLimits actorLookLimits; // Offset: 0x280
    ActorTurnAngles turnAngles; // Offset: 0x298
    HazardAwarenessParams hazardParams; // Offset: 0x2b0
    ActorDuckingParams duckingParams; // Offset: 0x2c8
    ActorGForceComponent gforceParamsRecord; // Offset: 0x2e0
    ActorGForceComponent gforceParamsRecordMasterModes; // Offset: 0x2f8
    ActorGForceHeadBob gforceHeadBobRecord; // Offset: 0x310
    ActorGForceCameraEffects gforceCameraEffectsRecord; // Offset: 0x328
    AdsCameraParams adsCameraDefaultParams; // Offset: 0x340
    ActorAbilityComponent abilityParamsRecord; // Offset: 0x350
    AudioBreathDefinition breathingParamsRecord; // Offset: 0x368
    ActorStaminaComponent staminaParamsRecord; // Offset: 0x380
    ActorEnvironmentComponent actorEnvironmentRecord; // Offset: 0x398
    ActorLookAheadVehicle defaultLookAheadRecord; // Offset: 0x3b0
    ActorLocomotionPersonality locomotionPersonalityRecord; // Offset: 0x3c8
    CLocIdentifier* actorSpecies; // Offset: 0x3e0
    WeaponPortsParams weaponPortsParams; // Offset: 0x3e8
    SSharedInteractionParams swapOutfitInteraction; // Offset: 0x440
    WingmanOrderList wingmanOrders; // Offset: 0x450
    ActorTargetedParams actorTargetedParams; // Offset: 0x468
    ActorSlidingParams actorSlidingParams; // Offset: 0x480
    ActorZeroGTraversalParams actorZeroGTraversalParams; // Offset: 0x498
    FoleyDefinition baseFoleyDef; // Offset: 0x4b0
    FoleyFootstepDefinition baseFootstepDef; // Offset: 0x4c8
    SActorDeathBehaviour deathBehaviour; // Offset: 0x4e0
};

// Original name: SActorStaticColliderDeathBehaviour
// Size: 0x50
// VTable: 0x149ab0af8
struct SActorStaticColliderDeathBehaviour {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition deadColliderClass; // Offset: 0x8
    DynArray_SActorDeathPoseVariant* deathPoseVariants; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SActorUsableParams
// Size: 0x1d0
// VTable: 0x149a80f78
struct SActorUsableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    UsableArchetype archetype; // Offset: 0x18
    CryStringT* fragmentTag; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x38
    DynArray_Camera* views; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
    DynArray_ARDataType* abilityLocks; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x78
    DynArray_UsableUseSlot* useSlots; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa8
    DynArray_AlignmentSlotBase* alignmentSlots; // Offset: 0xd0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd8
    DynArray_AlignmentSlotExclusivityGroup* exclusivityGroups; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x108
    DynArray_UsableSlottingSetup* slottingSetups; // Offset: 0x130 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x138
    DynArray_SSequencerUsableTask* usableSequencerTasks; // Offset: 0x160 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x168
    SSpecializedData specializedData; // Offset: 0x190
    bool isExterior; // Offset: 0x1c8
    bool allowDeadOrUnconscious; // Offset: 0x1c9
    uint8_t _pad_9[0x6]; // Offset: 0x1ca
};

// Original name: SAmmoContainerComponentParams
// Size: 0xf8
// VTable: 0x149a68ff8
struct SAmmoContainerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t initialAmmoCount; // Offset: 0x18
    int32_t maxAmmoCount; // Offset: 0x1c
    uint32_t maxRestockCount; // Offset: 0x20
    float lowAmmoWarningPercentage; // Offset: 0x24
    AmmoParams ammoParamsRecord; // Offset: 0x28
    AmmoParams secondaryAmmoParamsRecord; // Offset: 0x40
    ARDataType ammoContainerType; // Offset: 0x58
    bool despawnEmptyAmmoContainer; // Offset: 0x5c
    bool allowAmmoRepool; // Offset: 0x5d
    uint8_t _pad_1[0x2]; // Offset: 0x5e
    CryStringT* emptyGeometryTag; // Offset: 0x60
    uint8_t _pad_2[0x8]; // Offset: 0x68
    SFragmentParams ammoCountFragment; // Offset: 0x70
    float ammoCountAnimationBlendTime; // Offset: 0x90
    uint8_t _pad_3[0x4]; // Offset: 0x94
    DynArray_SHideAmmoAttachmentParams* hideAttachments; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_SAttachableEntityParams* attachableEntities; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
};

// Original name: SApplicationFormVoiceParams
// Size: 0x78
// VTable: 0x149a0eca0
struct SApplicationFormVoiceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_GlobalResourceAudio* voiceSampleAudioTriggers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_SModelVoiceTagPair* modelVoiceTagPairs; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
};

// Original name: SArmouryManagerParams
// Size: 0xf8
// VTable: 0x1499dd0c0
struct SArmouryManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ArmouryData armouryData; // Offset: 0x18
    EntityReferenceDef armourer; // Offset: 0x30
    DynArray_EntityReferenceDef* weaponRacks; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x50
    DynArray_EntityReferenceDef* inventories; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x80
    EntityReferenceDef locker; // Offset: 0xa8
    DynArray_EntityReferenceDef* spawnerLocations; // Offset: 0xc0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xc8
    float requestInteractionRadius; // Offset: 0xf0
    uint8_t _pad_4[0x4]; // Offset: 0xf4
};

// Original name: SAsteroids
// Size: 0xb0
// VTable: 0x149a47288
struct SAsteroids {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 textureSize; // Offset: 0x8
    DynArray_SMiniGameSpriteParams* gameSprites; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    int32_t playerMaxLives; // Offset: 0x48
    float playerRotationSpeed; // Offset: 0x4c
    float playerMoveSpeedMax; // Offset: 0x50
    float playerAccel; // Offset: 0x54
    float playerBrake; // Offset: 0x58
    float playerShotDelayAuto; // Offset: 0x5c
    float playerShotDelayMin; // Offset: 0x60
    float playerProjectileSpeed; // Offset: 0x64
    float asteroidMaxSpeed; // Offset: 0x68
    float asteroidMaxRotationSpeed; // Offset: 0x6c
    int32_t largeScore; // Offset: 0x70
    int32_t midScore; // Offset: 0x74
    int32_t smallScore; // Offset: 0x78
    uint8_t _pad_2[0x4]; // Offset: 0x7c
    Tag playerFireTag; // Offset: 0x80
    Tag enemyExplosionTag; // Offset: 0x98
};

// Original name: SAtmosphericEffectsComponentParams
// Size: 0xa0
// VTable: 0x149a1daf8
struct SAtmosphericEffectsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SAtmosphericHeatingParams atmosphericHeatingSettings; // Offset: 0x18
    SAtmosphericEffectTestsParams atmosphericEffectTestSettings; // Offset: 0x88
};

// Original name: SAtmosphericHeatingParams
// Size: 0x70
// VTable: 0x149a1d9a0
struct SAtmosphericHeatingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Tag controlTag; // Offset: 0x10
    Tag exitTag; // Offset: 0x28
    Tag strengthParameter; // Offset: 0x40
    Tag exitStrengthParameter; // Offset: 0x58
};

// Original name: SAttachableComponentParams
// Size: 0x228
// VTable: 0x1499a3300
struct SAttachableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SItemDefinition AttachDef; // Offset: 0x18
    ARDataType attachToTileItemPort; // Offset: 0x210
    uint8_t _pad_1[0x4]; // Offset: 0x214
    SEntityAttachParams entityAttachParams; // Offset: 0x218
};

// Original name: SAttachableItemModifierStateModifier
// Size: 0x38
// VTable: 0x1499f7370
struct SAttachableItemModifierStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState inUseState; // Offset: 0x8
    SInteractionState hasChargesState; // Offset: 0x18
    SInteractionState noChargesState; // Offset: 0x28
};

// Original name: SAttachableStateModifier
// Size: 0x38
// VTable: 0x1499a8730
struct SAttachableStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* portTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SInteractionState onSetItemPortState; // Offset: 0x18
    SInteractionState onClearItemPortState; // Offset: 0x28
};

// Original name: SAuxiliaryWeaponActionComponentParams
// Size: 0x148
// VTable: 0x149a697b8
struct SAuxiliaryWeaponActionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool pausable; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    DynArray_SWeaponParticleEffectParams* particleEffects; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    GlobalResourceAudio startAudioTriggerOneshot; // Offset: 0x50
    GlobalResourceAudio startAudioTriggerLoop; // Offset: 0x70
    GlobalResourceAudio stopAudioTrigger; // Offset: 0x90
    GlobalResourceAudio endOfUseAudioTrigger; // Offset: 0xb0
    SAuxiliaryWeaponActionParams auxiliaryWeaponAction; // Offset: 0xd0
    SFragmentParams idleAnimation; // Offset: 0xe0
    SFragmentParams supplementaryFireAnimation; // Offset: 0x100
    float supplementaryFireTime; // Offset: 0x120
    uint8_t _pad_3[0x4]; // Offset: 0x124
    SWeaponSpinAnimationParams fireSpinAnimationParams; // Offset: 0x128
    AuxiliaryWeaponActionMisfireParams misfireParams; // Offset: 0x138
};

// Original name: SBurstMisfireEffect
// Size: 0x48
// VTable: 0x149a096a0
struct SBurstMisfireEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag effectTrigger; // Offset: 0x8
    Tag effectTag; // Offset: 0x20
    float forcedThrottle; // Offset: 0x38
    float signatureModifier; // Offset: 0x3c
    float offlineTimeToFix; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
};

// Original name: SCActorRestrainableParams
// Size: 0x50
// VTable: 0x149a57b60
struct SCActorRestrainableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams restrainInteraction; // Offset: 0x18
    SSharedInteractionParams unrestrainInteraction; // Offset: 0x28
    ActorRestrainConfig restrainConfig; // Offset: 0x38
};

// Original name: SCAirTrafficControllerDataManagerParams
// Size: 0x120
// VTable: 0x149a3eb30
struct SCAirTrafficControllerDataManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isVehicleATC; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float timeToLand; // Offset: 0x1c
    float timeToTakeOff; // Offset: 0x20
    float timeToUndock; // Offset: 0x24
    float distanceForManualComms; // Offset: 0x28
    float timeReservedToCancelDock; // Offset: 0x2c
    float timeToTakeOffMin; // Offset: 0x30
    float stayTime; // Offset: 0x34
    float stayTimeMin; // Offset: 0x38
    float timeToRemoveIllegal; // Offset: 0x3c
    float timeToNotifyQueue; // Offset: 0x40
    float timeToRepeatWaitingMessage; // Offset: 0x44
    float reservationTime; // Offset: 0x48
    float warningTimeBeforeDespawn; // Offset: 0x4c
    float timeToDespawn; // Offset: 0x50
    float timeObstructionAllowed; // Offset: 0x54
    float timeToConsiderVehicleLeft; // Offset: 0x58
    float occupancyLimit; // Offset: 0x5c
    bool controlDoorsAutomatically; // Offset: 0x60
    uint8_t _pad_2[0x7]; // Offset: 0x61
    CLocIdentifier* greetingMessage; // Offset: 0x68
    float greetingTime; // Offset: 0x70
    float timeToForgiveObstruction; // Offset: 0x74
    float timeAllowedToChangeShips; // Offset: 0x78
    bool disableObstructionDespawn; // Offset: 0x7c
    uint8_t _pad_3[0x3]; // Offset: 0x7d
    int32_t maxCrimeStatAllowed; // Offset: 0x80
    bool canDespawnShips; // Offset: 0x84
    uint8_t _pad_4[0x3]; // Offset: 0x85
    DynArray_TimeToTakeOffMinOverrideByDockingClass* timeToTakeOffMinOverrideByDockingClass; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x90
    DynArray_StayTimeMinOverrideByDockingClass* stayTimeMinOverrideByDockingClass; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xc0
    TagList noStoreItemTags; // Offset: 0xe8
};

// Original name: SCEntityActorMovableParams
// Size: 0xc0
// VTable: 0x149a45d78
struct SCEntityActorMovableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams moveInteraction; // Offset: 0x18
    SSharedInteractionParams exitInteraction; // Offset: 0x28
    DynArray_SMovableGrip* grips; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
    SMovableLimits limits; // Offset: 0x68
    CryStringT* IntroFragmentId; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    CryStringT* IntroFragTag; // Offset: 0x90
    uint8_t _pad_3[0x8]; // Offset: 0x98
    CryStringT* OutroFragmentId; // Offset: 0xa0
    uint8_t _pad_4[0x8]; // Offset: 0xa8
    CryStringT* OutroFragTag; // Offset: 0xb0
    uint8_t _pad_5[0x8]; // Offset: 0xb8
};

// Original name: SCEntityComponentDragDropUsableUserParams
// Size: 0x48
// VTable: 0x149a82cf0
struct SCEntityComponentDragDropUsableUserParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SDragDropUsableUserConfig* dragDropUserConfigs; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SCEntityDraggableParams
// Size: 0xc8
// VTable: 0x149a45c08
struct SCEntityDraggableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams dragInteraction; // Offset: 0x18
    SSharedInteractionParams dropInteraction; // Offset: 0x28
    SSharedInteractionParams turnoverInteraction; // Offset: 0x38
    Grip defaultGrip; // Offset: 0x48
    DynArray_Grip* overrideGrips; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x68
    float weightModifier; // Offset: 0x90
    bool usingBespokeSetup; // Offset: 0x94
    uint8_t _pad_2[0x3]; // Offset: 0x95
    DynArray_SSequencerEntityDragTaskParams* dragTasks; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xa0
};

// Original name: SCEntityWeaponMountParams
// Size: 0x170
// VTable: 0x149a46118
struct SCEntityWeaponMountParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams useInteraction; // Offset: 0x18
    SSharedInteractionParams exitInteraction; // Offset: 0x28
    DynArray_SWeaponMountGrip* grips; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
    SCMountRotationAxisParams pitchAxis; // Offset: 0x68
    SCMountRotationAxisParams yawAxis; // Offset: 0x78
    SItemPortDef WeaponItemPort; // Offset: 0x88
    bool FreeRotateYaw; // Offset: 0x98
    uint8_t _pad_2[0x7]; // Offset: 0x99
    CryStringT* IntroFragmentId; // Offset: 0xa0
    uint8_t _pad_3[0x8]; // Offset: 0xa8
    CryStringT* IntroFragTag; // Offset: 0xb0
    uint8_t _pad_4[0x8]; // Offset: 0xb8
    CryStringT* OutroFragmentId; // Offset: 0xc0
    uint8_t _pad_5[0x8]; // Offset: 0xc8
    CryStringT* OutroFragTag; // Offset: 0xd0
    uint8_t _pad_6[0x8]; // Offset: 0xd8
    CryStringT* enslavementAnimationDatabase; // Offset: 0xe0
    uint8_t _pad_7[0x8]; // Offset: 0xe8
    AudioRtpc pitchAxisRtpc; // Offset: 0xf0
    AudioRtpc yawAxisRtpc; // Offset: 0x110
    GlobalResourceAudio useStartTrigger; // Offset: 0x130
    GlobalResourceAudio useStopTrigger; // Offset: 0x150
};

// Original name: SCInteractionEffectsMapEntryParams
// Size: 0x78
// VTable: 0x1499f6790
struct SCInteractionEffectsMapEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams Interaction; // Offset: 0x8
    DynArray_Tag* enableEffectTags; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_Tag* disableEffectTags; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: SCInteractionGeometryMapEntryParams
// Size: 0x28
// VTable: 0x1499f6878
struct SCInteractionGeometryMapEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams Interaction; // Offset: 0x8
    CryStringT* GeometryTag; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: SCInteractionJournalEntryParams
// Size: 0x30
// VTable: 0x1499ee558
struct SCInteractionJournalEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams Interaction; // Offset: 0x8
    JournalEntry Journal; // Offset: 0x18
};

// Original name: SCInteractionStateGameplayTriggerComponentParams
// Size: 0xa8
// VTable: 0x1499e9790
struct SCInteractionStateGameplayTriggerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SOnInteractionStateChangeTriggers* onInteractionStateChangeTriggers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_SOnInteractionTriggers* onInteractionSuccessTriggers; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_SOnInteractionTriggers* onInteractionFailedTriggers; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
};

// Original name: SCItemBoatControllerParams
// Size: 0x78
// VTable: 0x149a2ebd0
struct SCItemBoatControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams disableEngineInteraction; // Offset: 0x18
    SSharedInteractionParams enableEngineInteraction; // Offset: 0x28
    SCBoatMovementParams boatMovementParams; // Offset: 0x38
    IntoxicationBoatModifierParams intoxicationModifierRef; // Offset: 0x50
    CryStringT* propellerHelper; // Offset: 0x68
    uint8_t _pad_1[0x8]; // Offset: 0x70
};

// Original name: SCItemBombParams
// Size: 0x2f8
// VTable: 0x149a245d0
struct SCItemBombParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SOrdnanceAudioParams audioParams; // Offset: 0x18
    bool requiresLauncher; // Offset: 0xa0
    bool enableLifetime; // Offset: 0xa1
    uint8_t _pad_1[0x2]; // Offset: 0xa2
    float maxLifetime; // Offset: 0xa4
    float armTime; // Offset: 0xa8
    int32_t maxArmableOverride; // Offset: 0xac
    float igniteTime; // Offset: 0xb0
    float collisionDelayTime; // Offset: 0xb4
    float explosionSafetyDistance; // Offset: 0xb8
    float projectileProximity; // Offset: 0xbc
    ExplosionParams explosionParams; // Offset: 0xc0
    SOrdnanceClusterParams clusterParams; // Offset: 0x280
    DynArray_SOrdnanceEmissionsParams* emissionsParams; // Offset: 0x290 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x298
    float dragAreaRadius; // Offset: 0x2c0
    float centreOfPressureOffsetY; // Offset: 0x2c4
    float maximumDropAngleFromFlatFlight; // Offset: 0x2c8
    uint8_t _pad_3[0x4]; // Offset: 0x2cc
    AudioRtpc altitudeRtpc; // Offset: 0x2d0
    float maxAltitudeForAudioRtpc; // Offset: 0x2f0
    uint8_t _pad_4[0x4]; // Offset: 0x2f4
};

// Original name: SCItemCargoGridParams
// Size: 0x58
// VTable: 0x149a415e8
struct SCItemCargoGridParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Vec3 dimensions; // Offset: 0x18
    float crateGenPercentageOnDestroy; // Offset: 0x30
    int32_t crateMaxOnDestroy; // Offset: 0x34
    bool invisible; // Offset: 0x38
    bool miningOnly; // Offset: 0x39
    bool transformDependant; // Offset: 0x3a
    uint8_t _pad_1[0x1]; // Offset: 0x3b
    float minVolatilePowerToExplode; // Offset: 0x3c
    CommodityDamageConfiguration damageConfiguration; // Offset: 0x40
};

// Original name: SCItemClothingMeshChunkParams
// Size: 0x78
// VTable: 0x149aa1948
struct SCItemClothingMeshChunkParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType MeshChunk; // Offset: 0x8
    int32_t Layer; // Offset: 0xc
    DynArray_int32_t* VisibleLayers; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    DynArray_SCItemClothingVisibilityConditionParams* VisibilityConditions; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x30]; // Offset: 0x48
};

// Original name: SCItemClothingParams
// Size: 0x150
// VTable: 0x1499fa9f0
struct SCItemClothingParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    TagList OverlayTags; // Offset: 0x18
    DynArray_SCItemClothingHiddenPartsParams* HiddenParts; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    DynArray_SCItemClothingMeshChunkParams* Chunks; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x88
    ClothingType Type; // Offset: 0xb0
    FoleyDefinition FoleyDef; // Offset: 0xc0
    FoleyDefinition FoleyDefNLPC; // Offset: 0xd8
    FoleyFootstepDefinition FootstepDef; // Offset: 0xf0
    FoleyFootstepDefinition FootstepDefNLPC; // Offset: 0x108
    CryStringT* DressFragmentTags; // Offset: 0x120
    uint8_t _pad_3[0x8]; // Offset: 0x128
    SCItemClothingTemperatureResistanceParams TemperatureResistance; // Offset: 0x130
    SCItemClothingRadiationResistanceParams RadiationResistance; // Offset: 0x140
};

// Original name: SCItemClothingPortVisibilityConditionParams
// Size: 0xc8
// VTable: 0x149aa1818
struct SCItemClothingPortVisibilityConditionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* Ports; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_Tag* DisableTags; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_Tag* SkipTags; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_Tag* ActiveTags; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
};

// Original name: SCItemClothingVisibilityConditionParams
// Size: 0x38
// VTable: 0x149aa1870
struct SCItemClothingVisibilityConditionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCItemClothingPortVisibilityConditionParams* PortVisibility; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCItemCommsControllerParams
// Size: 0x58
// VTable: 0x149a33518
struct SCItemCommsControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams hailTargetInteraction; // Offset: 0x18
    SSharedInteractionParams acceptIncomingCallInteraction; // Offset: 0x28
    SSharedInteractionParams declineIncomingCallInteraction; // Offset: 0x38
    SSharedInteractionParams hangUpCallInteraction; // Offset: 0x48
};

// Original name: SCItemConsumableParams
// Size: 0x1c0
// VTable: 0x149a25d10
struct SCItemConsumableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SBaseCargoUnit consumableVolume; // Offset: 0x18
    DynArray_ConsumableContent* defaultContents; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    SSharedInteractionParams consumeInteraction; // Offset: 0x58
    DynArray_SSharedInteractionParams* consumedInteractionLocks; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x70
    CryStringT* consumeFragmentId; // Offset: 0x98
    uint8_t _pad_3[0x8]; // Offset: 0xa0
    CryStringT* containerTypeTag; // Offset: 0xa8
    uint8_t _pad_4[0x8]; // Offset: 0xb0
    CryStringT* lidTypeTag; // Offset: 0xb8
    uint8_t _pad_5[0x8]; // Offset: 0xc0
    CryStringT* utensilTypeTag; // Offset: 0xc8
    uint8_t _pad_6[0x8]; // Offset: 0xd0
    bool oneShotConsume; // Offset: 0xd8
    bool containerClosed; // Offset: 0xd9
    bool canBeReclosed; // Offset: 0xda
    bool discardWhenConsumed; // Offset: 0xdb
    bool isPropAnimated; // Offset: 0xdc
    uint8_t _pad_7[0x3]; // Offset: 0xdd
    CryStringT* fillTargetHelper; // Offset: 0xe0
    uint8_t _pad_8[0x8]; // Offset: 0xe8
    bool isTwoHandedConsume; // Offset: 0xf0
    bool canConsumeInProne; // Offset: 0xf1
    bool canSkipConsumeAnimLoop; // Offset: 0xf2
    uint8_t _pad_9[0x5]; // Offset: 0xf3
    DynArray_CryStringT* chunkNames; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x100
    DynArray_ConsumableHelpers* helpersMap; // Offset: 0x128 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x130
    ConsumableAttachment lidAttachment; // Offset: 0x158
    ConsumableAttachment utensilAttachment; // Offset: 0x168
    ConsumableFoodAttachment foodAttachment; // Offset: 0x178
    AudioSwitch consumptionAudioSwitch; // Offset: 0x188
};

// Original name: SCItemControlTerminalParamsDef
// Size: 0x38
// VTable: 0x149a2d8e8
struct SCItemControlTerminalParamsDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams captureInteraction; // Offset: 0x18
    SSharedInteractionParams stopCaptureInteraction; // Offset: 0x28
};

// Original name: SCItemDisplayScreenComponentParams
// Size: 0x190
// VTable: 0x149a08df8
struct SCItemDisplayScreenComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCItemDisplayScreenPowerParams powerParams; // Offset: 0x18
    SCItemDisplayScreenUISourceParams uiSourceParams; // Offset: 0x28
    SCItemDisplayScreenGlobalLightParams lightParams; // Offset: 0x100
    DynArray_SCItemDisplayScreenStateParams* screenStates; // Offset: 0x160 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x168
};

// Original name: SCItemDisplayScreenStateParams
// Size: 0x60
// VTable: 0x149a08d20
struct SCItemDisplayScreenStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* statename; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SInteractionState state; // Offset: 0x18
    float stateWear; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    SCItemDisplayScreenStateLightParams stateLightParams; // Offset: 0x30
    bool linkToProvider; // Offset: 0x58
    bool operational; // Offset: 0x59
    bool transitionEffectOn; // Offset: 0x5a
    uint8_t _pad_3[0x5]; // Offset: 0x5b
};

// Original name: SCItemDockingTubeParams
// Size: 0x120
// VTable: 0x149a41180
struct SCItemDockingTubeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool IgnoreRootEntityGeometry; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float CaptureRadius; // Offset: 0x1c
    float MaximumPreDockingAutopilotOffset; // Offset: 0x20
    bool AutoRegisterWithATC; // Offset: 0x24
    bool PreventsQuantumTravel; // Offset: 0x25
    uint8_t _pad_2[0x2]; // Offset: 0x26
    ARDataType CanBeUsedBy; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
    CLocIdentifier* HUDDisplayName; // Offset: 0x30
    int32_t ATCPriority; // Offset: 0x38
    bool ExtendDockeeLandingGear; // Offset: 0x3c
    uint8_t _pad_4[0x3]; // Offset: 0x3d
    float AutodockTiltOffset; // Offset: 0x40
    uint8_t _pad_5[0x4]; // Offset: 0x44
    GlobalResourceAudio dockedPlayEvent; // Offset: 0x48
    GlobalResourceAudio undockInitiatedPlayEvent; // Offset: 0x68
    GlobalResourceAudio undockedPlayEvent; // Offset: 0x88
    GlobalResourceAudio undockedAndShipFreePlayEvent; // Offset: 0xa8
    GlobalResourceAudio autoDockingEngaged; // Offset: 0xc8
    GlobalResourceAudio autoDockingDisengaged; // Offset: 0xe8
    Tag stateTagWhenAvailable; // Offset: 0x108
};

// Original name: SCItemDoorControllerParams
// Size: 0x68
// VTable: 0x149a59d10
struct SCItemDoorControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams OpenAllInteraction; // Offset: 0x18
    SSharedInteractionParams HalfOpenAllInteraction; // Offset: 0x28
    SSharedInteractionParams CloseAllInteraction; // Offset: 0x38
    SSharedInteractionParams LockAllInteraction; // Offset: 0x48
    SSharedInteractionParams UnlockAllInteraction; // Offset: 0x58
};

// Original name: SCItemDoorEffectParams
// Size: 0x158
// VTable: 0x1499f25b8
struct SCItemDoorEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag openTrigger; // Offset: 0x8
    Tag closeTrigger; // Offset: 0x20
    Tag openedTrigger; // Offset: 0x38
    Tag closedTrigger; // Offset: 0x50
    Tag openingTag; // Offset: 0x68
    Tag closingTag; // Offset: 0x80
    Tag overrideOpenTrigger; // Offset: 0x98
    Tag overrideCloseTrigger; // Offset: 0xb0
    Tag overrideOpenedTrigger; // Offset: 0xc8
    Tag overrideClosedTrigger; // Offset: 0xe0
    Tag overrideOpeningTag; // Offset: 0xf8
    Tag overrideClosingTag; // Offset: 0x110
    Tag lockedTrigger; // Offset: 0x128
    Tag unlockedTrigger; // Offset: 0x140
};

// Original name: SCItemDoorParams
// Size: 0x3b8
// VTable: 0x1499f2d30
struct SCItemDoorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool UseAutoCloseDelay; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float AutoCloseDelay; // Offset: 0x1c
    float DoorAnimationSpeed; // Offset: 0x20
    float BreachingDoorAnimationSpeed; // Offset: 0x24
    float BreachedDoorAnimationSpeed; // Offset: 0x28
    float BreachedDoorOpenAmount; // Offset: 0x2c
    bool IsOpened; // Offset: 0x30
    bool IsLocked; // Offset: 0x31
    bool IsIgnoredByDoorController; // Offset: 0x32
    uint8_t _pad_2[0x5]; // Offset: 0x33
    SDoorCollisionReactionBaseParams CollisionReaction; // Offset: 0x38
    ARDataType DestructionBehavior; // Offset: 0x48
    uint8_t _pad_3[0x4]; // Offset: 0x4c
    CryStringT* FragName; // Offset: 0x50
    uint8_t _pad_4[0x8]; // Offset: 0x58
    SCItemDoorAnimationParams AnimationParams; // Offset: 0x60
    SSharedInteractionParams OpenInteraction; // Offset: 0x70
    SSharedInteractionParams SecondaryOpenInteraction; // Offset: 0x80
    SSharedInteractionParams OpenFinishedInteraction; // Offset: 0x90
    SSharedInteractionParams CloseInteraction; // Offset: 0xa0
    SSharedInteractionParams CloseFinishedInteraction; // Offset: 0xb0
    SSharedInteractionParams ToggleInteraction; // Offset: 0xc0
    SSharedInteractionParams LockInteraction; // Offset: 0xd0
    SSharedInteractionParams UnlockInteraction; // Offset: 0xe0
    SSharedInteractionParams OverrideOpenInteraction; // Offset: 0xf0
    SSharedInteractionParams OverrideCloseInteraction; // Offset: 0x100
    SCItemDoorEffectParams EffectParams; // Offset: 0x110
    CryStringT* OpenEffectGroup; // Offset: 0x268
    uint8_t _pad_5[0x8]; // Offset: 0x270
    CryStringT* CloseEffectGroup; // Offset: 0x278
    uint8_t _pad_6[0x8]; // Offset: 0x280
    CryStringT* OpenedEffectGroup; // Offset: 0x288
    uint8_t _pad_7[0x8]; // Offset: 0x290
    CryStringT* ClosedEffectGroup; // Offset: 0x298
    uint8_t _pad_8[0x8]; // Offset: 0x2a0
    CryStringT* OpeningEffectGroup; // Offset: 0x2a8
    uint8_t _pad_9[0x8]; // Offset: 0x2b0
    CryStringT* ClosingEffectGroup; // Offset: 0x2b8
    uint8_t _pad_10[0x8]; // Offset: 0x2c0
    CryStringT* OverrideOpenEffectGroup; // Offset: 0x2c8
    uint8_t _pad_11[0x8]; // Offset: 0x2d0
    CryStringT* OverrideCloseEffectGroup; // Offset: 0x2d8
    uint8_t _pad_12[0x8]; // Offset: 0x2e0
    CryStringT* OverrideOpenedEffectGroup; // Offset: 0x2e8
    uint8_t _pad_13[0x8]; // Offset: 0x2f0
    CryStringT* OverrideClosedEffectGroup; // Offset: 0x2f8
    uint8_t _pad_14[0x8]; // Offset: 0x300
    CryStringT* OverrideOpeningEffectGroup; // Offset: 0x308
    uint8_t _pad_15[0x8]; // Offset: 0x310
    CryStringT* OverrideClosingEffectGroup; // Offset: 0x318
    uint8_t _pad_16[0x8]; // Offset: 0x320
    CryStringT* LockedEffectGroup; // Offset: 0x328
    uint8_t _pad_17[0x8]; // Offset: 0x330
    CryStringT* UnlockedEffectGroup; // Offset: 0x338
    uint8_t _pad_18[0x8]; // Offset: 0x340
    SCItemDoorPortalModeParams PortalMode; // Offset: 0x348
    SCItemDoorConnectVisAreas ConnectVisAreas; // Offset: 0x358
    DynArray_SSequencerItemDoorTaskParams* DoorTasks; // Offset: 0x368 // Pointer to DynArray struct
    uint8_t _pad_19[0x28]; // Offset: 0x370
    ItemResourceState idleState; // Offset: 0x398
    ItemResourceState activeState; // Offset: 0x3a8
};

// Original name: SCItemEMPParams
// Size: 0x170
// VTable: 0x149a29c10
struct SCItemEMPParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float chargeTime; // Offset: 0x18
    float distortionDamage; // Offset: 0x1c
    float empRadius; // Offset: 0x20
    float minEmpRadius; // Offset: 0x24
    float physRadius; // Offset: 0x28
    float minPhysRadius; // Offset: 0x2c
    float pressure; // Offset: 0x30
    float unleashTime; // Offset: 0x34
    float cooldownTime; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    GlobalResourceParticle ChargingParticle; // Offset: 0x40
    GlobalResourceParticle ChargedParticle; // Offset: 0x58
    Tag ChargingTag; // Offset: 0x70
    Tag ChargedTag; // Offset: 0x88
    Tag StartChargingTrigger; // Offset: 0xa0
    Tag StopChargingTrigger; // Offset: 0xb8
    Tag StartChargedTrigger; // Offset: 0xd0
    Tag StopChargedTrigger; // Offset: 0xe8
    Tag StartUnleashTrigger; // Offset: 0x100
    Tag StopUnleashTrigger; // Offset: 0x118
    ItemResourceState idleState; // Offset: 0x130
    ItemResourceState chargingState; // Offset: 0x140
    ItemResourceState chargedState; // Offset: 0x150
    ItemResourceState releasingState; // Offset: 0x160
};

// Original name: SCItemElevatorParams
// Size: 0x168
// VTable: 0x1499f33f8
struct SCItemElevatorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float MaxSpeed; // Offset: 0x18
    float EasingDistance; // Offset: 0x1c
    float IdlingPeriod; // Offset: 0x20
    float OpenWaitTime; // Offset: 0x24
    float QueueWaitTime; // Offset: 0x28
    bool SlowDownAtBends; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    SElevatorBaseCollisionParams Collision; // Offset: 0x30
    SSharedInteractionParams OpenInnerDoorInteraction; // Offset: 0x40
    SSharedInteractionParams OpenInnerDoorFinishedInteraction; // Offset: 0x50
    SSharedInteractionParams CloseAllDoorsInteraction; // Offset: 0x60
    SSharedInteractionParams CloseInnerDoorFinishedInteraction; // Offset: 0x70
    ElevatorEffectParams Effects; // Offset: 0x80
    ItemResourceState idleState; // Offset: 0x148
    ItemResourceState activeState; // Offset: 0x158
};

// Original name: SCItemElevatorPathNodeParams
// Size: 0x90
// VTable: 0x1499f3920
struct SCItemElevatorPathNodeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType Type; // Offset: 0x18
    float TeleportTimeScale; // Offset: 0x1c
    SSharedInteractionParams doorOpenInteraction; // Offset: 0x20
    SSharedInteractionParams doorCloseInteraction; // Offset: 0x30
    SSharedInteractionParams ascentRequestInteraction; // Offset: 0x40
    SSharedInteractionParams descentRequestInteraction; // Offset: 0x50
    SSharedInteractionParams cancelStopInteraction; // Offset: 0x60
    ElevatorPathNodeGatewayParams gatewayParams; // Offset: 0x70
    AccessibilityBaseParams accessibilityParams; // Offset: 0x80
};

// Original name: SCItemExplosiveParams
// Size: 0x298
// VTable: 0x149a23968
struct SCItemExplosiveParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    BlinkingLightParams blinkingLightParams; // Offset: 0x18
    ExplosionParams explosionParams; // Offset: 0x30
    float maxLifeTime; // Offset: 0x1f0
    bool detonateOnImpact; // Offset: 0x1f4
    uint8_t _pad_1[0x3]; // Offset: 0x1f5
    GlobalResourceAudio startCookAudioTrigger; // Offset: 0x1f8
    GlobalResourceAudio stopCookAudioTrigger; // Offset: 0x218
    AudioRtpc cookingProgressRtpc; // Offset: 0x238
    AudioRtpc grenadeLightIntensityRtpc; // Offset: 0x258
    CryStringT* markerShapePath; // Offset: 0x278
    uint8_t _pad_2[0x8]; // Offset: 0x280
    CryStringT* markerModelPath; // Offset: 0x288
    uint8_t _pad_3[0x8]; // Offset: 0x290
};

// Original name: SCItemFlashlightParams
// Size: 0x118
// VTable: 0x1499e2bb0
struct SCItemFlashlightParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceMaterial lightCookie; // Offset: 0x18
    SRGB8 color; // Offset: 0x30
    float diffuseMult; // Offset: 0x40
    float attenuationBulbSize; // Offset: 0x44
    float distance; // Offset: 0x48
    float fov; // Offset: 0x4c
    uint8_t viewDistRatio; // Offset: 0x50
    uint8_t _pad_1[0x3]; // Offset: 0x51
    int32_t style; // Offset: 0x54
    float animspeed; // Offset: 0x58
    bool focusedBeam; // Offset: 0x5c
    bool bounceLight; // Offset: 0x5d
    uint8_t _pad_2[0x2]; // Offset: 0x5e
    float bounceProjectorRadius; // Offset: 0x60
    float fogMultiplier; // Offset: 0x64
    float glowMultiplier; // Offset: 0x68
    uint8_t _pad_3[0x4]; // Offset: 0x6c
    Tag activationTag; // Offset: 0x70
    CryStringT* helperName; // Offset: 0x88
    uint8_t _pad_4[0x8]; // Offset: 0x90
    bool useDirectionAsXYZRotation; // Offset: 0x98
    uint8_t _pad_5[0x7]; // Offset: 0x99
    Vec3 helperDirection; // Offset: 0xa0
    Vec3 helperOffset; // Offset: 0xb8
    GlobalResourceAudio Light_On_SFX; // Offset: 0xd0
    GlobalResourceAudio Light_Off_SFX; // Offset: 0xf0
    float EM_Signature_On; // Offset: 0x110
    float IR_Signature_On; // Offset: 0x114
};

// Original name: SCItemFlightControllerParams
// Size: 0x1c0
// VTable: 0x149a2f240
struct SCItemFlightControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams engineOnInteraction; // Offset: 0x18
    SSharedInteractionParams engineOffInteraction; // Offset: 0x28
    SSharedInteractionParams enableCoupledModeInteraction; // Offset: 0x38
    SSharedInteractionParams disableCoupledModeInteraction; // Offset: 0x48
    SSharedInteractionParams enableGSafetyInteraction; // Offset: 0x58
    SSharedInteractionParams disableGSafetyInteraction; // Offset: 0x68
    SSharedInteractionParams enableESPInteraction; // Offset: 0x78
    SSharedInteractionParams disableESPInteraction; // Offset: 0x88
    SSharedInteractionParams enableCruiseControlInteraction; // Offset: 0x98
    SSharedInteractionParams disableCruiseControlInteraction; // Offset: 0xa8
    SSharedInteractionParams enableVTOLInteraction; // Offset: 0xb8
    SSharedInteractionParams disableVTOLInteraction; // Offset: 0xc8
    SSharedInteractionParams enableProximityAssistInteraction; // Offset: 0xd8
    SSharedInteractionParams disableProximityAssistInteraction; // Offset: 0xe8
    SSharedInteractionParams deployTransformInteraction; // Offset: 0xf8
    SSharedInteractionParams retractTransformInteraction; // Offset: 0x108
    SSharedInteractionParams cycleTransformInteraction; // Offset: 0x118
    float fuelWarningDisplayTime; // Offset: 0x128
    float passiveRefuelWarningThresholdPercentage; // Offset: 0x12c
    float hoverAnimPlaybackDuration; // Offset: 0x130
    bool hoverAnimPlayInLandingMode; // Offset: 0x134
    uint8_t _pad_1[0x3]; // Offset: 0x135
    Tag PowerOnEffectTag; // Offset: 0x138
    Tag PowerOffEffectTag; // Offset: 0x150
    ShipRecallParams ShipRecall; // Offset: 0x168
    SProjectedHudParams hudParamsOverride; // Offset: 0x178
    SVehicleHudParams vehicleHudParamsOverride; // Offset: 0x190
    VehicleCollisionParams collisionDetection; // Offset: 0x1a8
};

// Original name: SCItemFuelNozzleParams
// Size: 0xe0
// VTable: 0x149a80030
struct SCItemFuelNozzleParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float fuelMaxFlowMultiplier; // Offset: 0x18
    float fuelTankCapacityMultiplier; // Offset: 0x1c
    float fuelSafeSpeed; // Offset: 0x20
    float fuelSafeSpeedRN; // Offset: 0x24
    float fuelDamageMultiplier; // Offset: 0x28
    float waveModifier; // Offset: 0x2c
    float waveModifierRN; // Offset: 0x30
    float frequency; // Offset: 0x34
    float flowSpeedModifier; // Offset: 0x38
    float fuelPodMultiplier; // Offset: 0x3c
    GlobalResourceAudio fuelFlowLoopStartAudioTrigger; // Offset: 0x40
    GlobalResourceAudio fuelFlowLoopStopAudioTrigger; // Offset: 0x60
    DynArray_AudioRtpc* fuelFlowRateAudioRtpcs; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x88
    AudioRtpc fuelSpillAudioRtpc; // Offset: 0xb0
    SInteractionState stateToPowerOff; // Offset: 0xd0
};

// Original name: SCItemFuelTankParams
// Size: 0xc8
// VTable: 0x149a29840
struct SCItemFuelTankParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SInteractionState openState; // Offset: 0x18
    SInteractionState closedState; // Offset: 0x28
    SInteractionState pumpingState; // Offset: 0x38
    GlobalResourceAudio fuelFlowLoopStartAudioTrigger; // Offset: 0x48
    GlobalResourceAudio fuelFlowLoopStopAudioTrigger; // Offset: 0x68
    AudioRtpc fuelFillDrainRateAudioRtpc; // Offset: 0x88
    AudioRtpc fuelFillLevelAudioRtpc; // Offset: 0xa8
};

// Original name: SCItemHoloDisplayParams
// Size: 0x78
// VTable: 0x149a30370
struct SCItemHoloDisplayParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType activation; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    BaseHoloDisplayProvider startUpMainProvider; // Offset: 0x20
    HoloDisplayBackgroundEffects backgroundEffectSettings; // Offset: 0x30
    RadarDisplay3DPreset displayPreset; // Offset: 0x48
    WorldDisplayEnvironment environmentSettings; // Offset: 0x60
};

// Original name: SCItemHydraulicLeverSwitchParams
// Size: 0x80
// VTable: 0x1499d7e90
struct SCItemHydraulicLeverSwitchParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams PumpInteraction; // Offset: 0x18
    SSharedInteractionParams FullChargeInteraction; // Offset: 0x28
    Tag StartChargingEffectTag; // Offset: 0x38
    Tag StartDecayingEffectTag; // Offset: 0x50
    Tag FinishChargingEffectTag; // Offset: 0x68
};

// Original name: SCItemInspectableParams
// Size: 0xc8
// VTable: 0x149a5cb50
struct SCItemInspectableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams inspectInteraction; // Offset: 0x18
    SSharedInteractionParams stopInspectInteraction; // Offset: 0x28
    SSharedInteractionParams flipInteraction; // Offset: 0x38
    DynArray_SInspectAnimationParams* inspectAnimations; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x50
    float inspectRotateScaleX; // Offset: 0x78
    float inspectRotateScaleY; // Offset: 0x7c
    Vec2 inspectRotateLimitsX; // Offset: 0x80
    Vec2 inspectRotateLimitsY; // Offset: 0x90
    SFirstSelect firstSelect; // Offset: 0xa0
};

// Original name: SCItemInteractionEffectsMapParams
// Size: 0x48
// VTable: 0x1499f67f0
struct SCItemInteractionEffectsMapParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SCInteractionEffectsMapEntryParams* Entries; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SCItemInteractionGeometryMapParams
// Size: 0x48
// VTable: 0x1499f68d0
struct SCItemInteractionGeometryMapParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SCInteractionGeometryMapEntryParams* Entries; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SCItemInteractionJournalParams
// Size: 0x48
// VTable: 0x1499ee5b0
struct SCItemInteractionJournalParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SCInteractionJournalEntryParams* Entries; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SCItemInventoryContainerComponentParams
// Size: 0x58
// VTable: 0x149a0af28
struct SCItemInventoryContainerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams openInventoryInteraction; // Offset: 0x18
    SSharedInteractionParams openLootingInteraction; // Offset: 0x28
    InventoryContainer containerParams; // Offset: 0x38
    bool canAutoStoreRestrictedItems; // Offset: 0x50
    uint8_t _pad_1[0x7]; // Offset: 0x51
};

// Original name: SCItemJumpDriveParams
// Size: 0x128
// VTable: 0x1499f6068
struct SCItemJumpDriveParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float alignmentRate; // Offset: 0x18
    float alignmentDecayRate; // Offset: 0x1c
    float tuningRate; // Offset: 0x20
    float tuningDecayRate; // Offset: 0x24
    float fuelUsageEfficiencyMultiplier; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    ItemResourceState idleState; // Offset: 0x30
    ItemResourceState transitingState; // Offset: 0x40
    JumpDriveEffectParams jumpDriveEffectParams; // Offset: 0x50
    JumpDriveFlightParams flightTuning; // Offset: 0xf8
    JumpTunnelForcesParams tunnelForces; // Offset: 0x110
};

// Original name: SCItemLandingDockControllerParams
// Size: 0x148
// VTable: 0x149a54e60
struct SCItemLandingDockControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* fragment; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* fragmentDeploy; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* fragmentRetract; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    CryStringT* fragmentCompress; // Offset: 0x48
    uint8_t _pad_4[0x8]; // Offset: 0x50
    SSharedInteractionParams deployInteraction; // Offset: 0x58
    SSharedInteractionParams retractInteraction; // Offset: 0x68
    float hideSelectorRatio; // Offset: 0x78
    uint8_t _pad_5[0x4]; // Offset: 0x7c
    DockingHUDMessagesParams hudMessagesParams; // Offset: 0x80
    DockingAutodockingParams dockingAutodockingParams; // Offset: 0x120
};

// Original name: SCItemLensDisplayParams
// Size: 0xf0
// VTable: 0x149a22848
struct SCItemLensDisplayParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float minimapAspectRatioOnLens; // Offset: 0x18
    float minimapAspectRatioOnVisor; // Offset: 0x1c
    bool inheritVehicleStyle; // Offset: 0x20
    bool inheritHelmetStyle; // Offset: 0x21
    bool animateHandover; // Offset: 0x22
    uint8_t _pad_1[0x5]; // Offset: 0x23
    SCLensAnimationParams animationParams; // Offset: 0x28
    BuildingBlocks_Style defaultStyle; // Offset: 0x60
    BuildingBlocks_Style defaultVisorStyle; // Offset: 0x78
    DynArray_Tag* minimalModeTags; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x98
    DynArray_Tag* displayModeTags; // Offset: 0xc0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xc8
};

// Original name: SCItemManufacturer
// Size: 0x140
// VTable: 0x1499af248
struct SCItemManufacturer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCItemLocalization Localization; // Offset: 0x8
    CryStringT* Logo; // Offset: 0xb8
    uint8_t _pad_1[0x8]; // Offset: 0xc0
    CryStringT* LogoFullColor; // Offset: 0xc8
    uint8_t _pad_2[0x8]; // Offset: 0xd0
    CryStringT* LogoSimplifiedWhite; // Offset: 0xd8
    uint8_t _pad_3[0x8]; // Offset: 0xe0
    CryStringT* Code; // Offset: 0xe8
    uint8_t _pad_4[0x8]; // Offset: 0xf0
    SCItemUIView_DashboardCanvasDef DashboardCanvasConfig; // Offset: 0xf8
    BuildingBlocks_Style BuildingBlocksStyle; // Offset: 0x110
    Tag AudioManufacturerTag; // Offset: 0x128
};

// Original name: SCItemMissileParams
// Size: 0x438
// VTable: 0x149a24c70
struct SCItemMissileParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SOrdnanceAudioParams audioParams; // Offset: 0x18
    bool requiresLauncher; // Offset: 0xa0
    bool enableLifetime; // Offset: 0xa1
    uint8_t _pad_1[0x2]; // Offset: 0xa2
    float maxLifetime; // Offset: 0xa4
    float armTime; // Offset: 0xa8
    int32_t maxArmableOverride; // Offset: 0xac
    float igniteTime; // Offset: 0xb0
    float collisionDelayTime; // Offset: 0xb4
    float explosionSafetyDistance; // Offset: 0xb8
    float projectileProximity; // Offset: 0xbc
    ExplosionParams explosionParams; // Offset: 0xc0
    SOrdnanceClusterParams clusterParams; // Offset: 0x280
    DynArray_SOrdnanceEmissionsParams* emissionsParams; // Offset: 0x290 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x298
    SGuidanceAndControlParams GCSParams; // Offset: 0x2c0
    STargetingParams targetingParams; // Offset: 0x3c8
    SShakeParams shakeParams; // Offset: 0x428
};

// Original name: SCItemMissileRackParams
// Size: 0xb0
// VTable: 0x149a24e60
struct SCItemMissileRackParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float launchDelay; // Offset: 0x18
    float detachVelocityRight; // Offset: 0x1c
    float detachVelocityForward; // Offset: 0x20
    float detachVelocityUp; // Offset: 0x24
    ARDataType relativeDetachType; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    Tag detachTrigger; // Offset: 0x30
    CryStringT* rackTag; // Offset: 0x48
    uint8_t _pad_2[0x8]; // Offset: 0x50
    DynArray_CryStringT* slotTags; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
    CryStringT* fragReadyUp; // Offset: 0x88
    uint8_t _pad_4[0x8]; // Offset: 0x90
    CryStringT* fragStowAway; // Offset: 0x98
    uint8_t _pad_5[0x8]; // Offset: 0xa0
    bool igniteOnPylon; // Offset: 0xa8
    uint8_t _pad_6[0x7]; // Offset: 0xa9
};

// Original name: SCItemMobiGlasProviderParams
// Size: 0x50
// VTable: 0x149a36318
struct SCItemMobiGlasProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_mobiGlasDefaultAppEntry* defaultInstalledApps; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    float appTransitionTime; // Offset: 0x48
    bool onlyAllowUserInteractions; // Offset: 0x4c
    bool startOpen; // Offset: 0x4d
    uint8_t _pad_2[0x2]; // Offset: 0x4e
};

// Original name: SCItemPowerPlantParams
// Size: 0x38
// VTable: 0x1499f4328
struct SCItemPowerPlantParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams turnOnInteraction; // Offset: 0x18
    SSharedInteractionParams turnOffInteraction; // Offset: 0x28
};

// Original name: SCItemProximitySensorParams
// Size: 0x78
// VTable: 0x1499f3c70
struct SCItemProximitySensorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool considerActorVelocity; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float exitDelay; // Offset: 0x1c
    Tag activeOnEnterTag; // Offset: 0x20
    SSharedInteractionParams EnteredInteraction; // Offset: 0x38
    SSharedInteractionParams ExitedInteraction; // Offset: 0x48
    SCItemProximitySensorShapeParams SensorShape; // Offset: 0x58
    bool allowCloseWithStationaryActors; // Offset: 0x68
    uint8_t _pad_2[0x3]; // Offset: 0x69
    float stationaryActorCloseMinDist; // Offset: 0x6c
    bool isHelper; // Offset: 0x70
    uint8_t _pad_3[0x7]; // Offset: 0x71
};

// Original name: SCItemPurchasableParams
// Size: 0xf0
// VTable: 0x1499f8e18
struct SCItemPurchasableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    PurchasableDisplayBase Display; // Offset: 0x18
    CLocIdentifier* displayName; // Offset: 0x28
    CLocIdentifier* displayType; // Offset: 0x30
    CryStringT* displayThumbnail; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
    bool allowTryOn; // Offset: 0x48
    bool allowQuickBuy; // Offset: 0x49
    uint8_t _pad_2[0x6]; // Offset: 0x4a
    CLocIdentifier* tryOnInteractionText; // Offset: 0x50
    CryStringT* defaultAttachToPortName; // Offset: 0x58
    uint8_t _pad_3[0x8]; // Offset: 0x60
    InteractionPointTemplate interactionPointTemplate; // Offset: 0x68
    DynArray_DisabledLoadoutInteraction* disabledLoadoutInteractions; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x88
    SCItemTutorialParams tutorialParams; // Offset: 0xb0
    DynArray_SInteractionPointParams* interactionPoints; // Offset: 0xc0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xc8
};

// Original name: SCItemQuantumDriveParams
// Size: 0xa68
// VTable: 0x149a54128
struct SCItemQuantumDriveParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SQuantumDriveParams params; // Offset: 0x18
    SQuantumDriveParams splineJumpParams; // Offset: 0xd8
    QuantumDriveHeatParams heatParams; // Offset: 0x198
    CryStringT* tracePoint; // Offset: 0x1b8
    uint8_t _pad_1[0x8]; // Offset: 0x1c0
    float quantumFuelRequirement; // Offset: 0x1c8
    float jumpRange; // Offset: 0x1cc
    float disconnectRange; // Offset: 0x1d0
    uint8_t _pad_2[0x4]; // Offset: 0x1d4
    SQuantumBoostParams quantumBoostParams; // Offset: 0x1d8
};

// Original name: SCItemQuantumDriveParams_NEW
// Size: 0x18b0
// VTable: 0x149a54cc0
struct SCItemQuantumDriveParams_NEW {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SQuantumMovementParams linearParams; // Offset: 0x18
    SQuantumMovementParams boostParams; // Offset: 0x7f0
    SQuantumMovementParams splineParams; // Offset: 0xfc8
    QuantumDriveHeatParams heatParams; // Offset: 0x17a0
    QuantumDriveEffectParams effectParams; // Offset: 0x17c0
    SQuantumDriveEffectBaseParams effectTags; // Offset: 0x1820
    SQuantumResourceNetworkParams resourceNetworkParams; // Offset: 0x1830
    CryStringT* tracePoint; // Offset: 0x1868
    uint8_t _pad_1[0x8]; // Offset: 0x1870
    float spoolUpTime; // Offset: 0x1878
    float quantumFuelRequirement; // Offset: 0x187c
    float disableCharge; // Offset: 0x1880
    float jumpRange; // Offset: 0x1884
    float disconnectRange; // Offset: 0x1888
    uint8_t _pad_2[0x4]; // Offset: 0x188c
    EntityClassDefinition trailEntityClass; // Offset: 0x1890
    CLocIdentifier* blindBoostDisabledMessage; // Offset: 0x18a8
};

// Original name: SCItemQuantumInterdictionGeneratorParams
// Size: 0xb8
// VTable: 0x149a55898
struct SCItemQuantumInterdictionGeneratorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCItemQuantumJammerParams jammerSettings; // Offset: 0x18
    SCItemQuantumInterdictionPulseParams quantumInterdictionPulseSettings; // Offset: 0x28
    float basePowerDrawFraction; // Offset: 0x38
    float pulsePowerFraction; // Offset: 0x3c
    float jammerPowerFraction; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    SQedVisualGraphParams visualGraphParams; // Offset: 0x48
    SSharedInteractionParams mainDeviceSwitchOn; // Offset: 0x98
    SSharedInteractionParams mainDeviceSwitchOff; // Offset: 0xa8
};

// Original name: SCItemQuantumInterdictionPulseParams
// Size: 0x70
// VTable: 0x149a55720
struct SCItemQuantumInterdictionPulseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float chargeTimeSecs; // Offset: 0x8
    float dischargeTimeSecs; // Offset: 0xc
    float cooldownTimeSecs; // Offset: 0x10
    float radiusMeters; // Offset: 0x14
    float decreaseChargeRateTimeSeconds; // Offset: 0x18
    float increaseChargeRateTimeSeconds; // Offset: 0x1c
    float activationPhaseDuration_seconds; // Offset: 0x20
    float disperseChargeTimeSeconds; // Offset: 0x24
    float maxPowerDraw; // Offset: 0x28
    float stopChargingPowerDrawFraction; // Offset: 0x2c
    float maxChargeRatePowerDrawFraction; // Offset: 0x30
    float activePowerDrawFraction; // Offset: 0x34
    float tetheringPowerDrawFraction; // Offset: 0x38
    float greenZoneCheckRange; // Offset: 0x3c
    SSharedInteractionParams startChargingIP; // Offset: 0x40
    SSharedInteractionParams cancelChargingIP; // Offset: 0x50
    SSharedInteractionParams disperseChargeIP; // Offset: 0x60
};

// Original name: SCItemQuantumJammerParams
// Size: 0x38
// VTable: 0x149a55440
struct SCItemQuantumJammerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float jammerRange; // Offset: 0x8
    float maxPowerDraw; // Offset: 0xc
    float greenZoneCheckRange; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    SSharedInteractionParams setJammerSwitchOn; // Offset: 0x18
    SSharedInteractionParams setJammerSwitchOff; // Offset: 0x28
};

// Original name: SCItemRadarComponentParams
// Size: 0x170
// VTable: 0x1499c6528
struct SCItemRadarComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    TagList scanTags; // Offset: 0x18
    RadarContactGroupArray contactGroups; // Offset: 0x50
    DynArray_SCItemRadarSignatureDetection* signatureDetection; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x90
    DynArray_SCItemRadarSensitivityModifier* sensitivityModifiers; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xc0
    SCItemRadarPingProperties pingProperties; // Offset: 0xe8
    SCItemRadarAIProperties aiProperties; // Offset: 0xf8
    DynArray_DeltaSignatureSpikeParams* deltaSignatureSpike; // Offset: 0x108 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x110
    RadarSystemSharedParams sharedParams; // Offset: 0x138
    RadarSystemSharedParams sharedExperimentalParams; // Offset: 0x150
    bool forceActiveAIControlled; // Offset: 0x168
    uint8_t _pad_4[0x7]; // Offset: 0x169
};

// Original name: SCItemRadarSensitivityModifierTypeContactGroups
// Size: 0x38
// VTable: 0x1499c6020
struct SCItemRadarSensitivityModifierTypeContactGroups {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_RadarContactGroupEntry* contactGroups; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCItemRadarSensitivityModifierTypeContacts
// Size: 0x38
// VTable: 0x1499c6080
struct SCItemRadarSensitivityModifierTypeContacts {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_RadarContactTypeEntry* contactTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCItemRestraintParams
// Size: 0x38
// VTable: 0x149a57aa8
struct SCItemRestraintParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType restraintStyle; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    EntityClassDefinition cosmeticEntityClass; // Offset: 0x20
};

// Original name: SCItemSalvageControllerParams
// Size: 0xd0
// VTable: 0x149a7f390
struct SCItemSalvageControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSalvageArmParams armParams; // Offset: 0x18
    SSalvageScrapingParams scrapingParams; // Offset: 0x28
    SSalvageStructuralParams structuralParams; // Offset: 0x38
    SSalvageCargoParams cargoParams; // Offset: 0x48
    SSalvageTractorParams tractorParams; // Offset: 0x58
    float sensorRaycastArmingDistance; // Offset: 0x68
    int32_t numSupportedSalvageHeads; // Offset: 0x6c
    SSalvageAudioParams salvageAudioParams; // Offset: 0x70
    bool useControllerToInitalizeControlComponent; // Offset: 0xc8
    bool usesCargoGrid; // Offset: 0xc9
    bool autoEjectRequireManualStart; // Offset: 0xca
    uint8_t _pad_1[0x5]; // Offset: 0xcb
};

// Original name: SCItemSeatAccessParams
// Size: 0xb8
// VTable: 0x149a5d948
struct SCItemSeatAccessParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* humanPassageADB; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    DynArray_SCSeatAccessGatewayInteractionParams* gateways; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    DynArray_SCSeatAccessEntranceInteractionParams* entrances; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
    DynArray_SCSeatAccessPassageInteractionParams* passages; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x90
};

// Original name: SCItemSeatDashboardMFDParams
// Size: 0xa0
// VTable: 0x149a5b950
struct SCItemSeatDashboardMFDParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool setupEnabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* innerThoughtGeometryName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    SMFD defaultCommsCallMFD; // Offset: 0x20
    SMFD primaryMFD; // Offset: 0x30
    SMFDViewList availableViews; // Offset: 0x40
    SMFDModeConfig modeConfiguration; // Offset: 0x58
    DynArray_SMFD* MFDs; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x78
};

// Original name: SCItemSeatDashboardParams
// Size: 0x2e8
// VTable: 0x149a5bd18
struct SCItemSeatDashboardParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t PowerOnline; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    SDashboardInteractionParams dashboardInteractions; // Offset: 0x20
    SDashboardSeatInteractionParams seatInteractions; // Offset: 0xa0
    SDashboardPowerInteractionParams powerInteractions; // Offset: 0xf8
    SDashboardEngineInteractionParams engineInteractions; // Offset: 0x110
    SDashboardSystemInteractionParams systemInteractions; // Offset: 0x128
    SDashboardWeaponInteractionParams weaponInteractions; // Offset: 0x160
    SDashboardConsumableInteractionParams consumableInteractions; // Offset: 0x198
    SDashboardQuantumInterdictionParams quantumInterdictionInteractions; // Offset: 0x1b0
    SDashboardEffectParams effects; // Offset: 0x1d8
    SCItemSeatDashboardUIDesc uiDescription; // Offset: 0x1f8
    SCItemSeatDashboardMFDParams MFDParams; // Offset: 0x208
    SCItemSeatDashboardPhysicalScreenParams PhysicalScreenParams; // Offset: 0x2a8
    bool canTogglePowerForObservedItems; // Offset: 0x2e0
    uint8_t _pad_2[0x7]; // Offset: 0x2e1
};

// Original name: SCItemSeatDashboardPhysicalScreenParams
// Size: 0x38
// VTable: 0x149a5ba30
struct SCItemSeatDashboardPhysicalScreenParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SPhysicalScreen* Screens; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCItemSeatEjectParams
// Size: 0x50
// VTable: 0x149a7db90
struct SCItemSeatEjectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxLinearVelocity; // Offset: 0x8
    float maxLinearAcceleration; // Offset: 0xc
    float maxAngularVelocity; // Offset: 0x10
    float maxAngularAcceleration; // Offset: 0x14
    float ejectionLoopTime; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    SSharedInteractionParams ejectionInteraction; // Offset: 0x20
    Deg3 offsetAngles; // Offset: 0x30
};

// Original name: SCItemSeatParams
// Size: 0x300
// VTable: 0x149a7e4d0
struct SCItemSeatParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    OperatorModeAvailabilityParams availableOperatorModes; // Offset: 0x18
    ARDataType seatType; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
    CryStringT* controlTemplate; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    CryStringT* transitionTemplate; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
    float minYaw; // Offset: 0x58
    float maxYaw; // Offset: 0x5c
    float minPitch; // Offset: 0x60
    float maxPitch; // Offset: 0x64
    bool setYawPitchLimits; // Offset: 0x68
    uint8_t _pad_4[0x7]; // Offset: 0x69
    CryStringT* dashboardAnimationDatabase; // Offset: 0x70
    uint8_t _pad_5[0x8]; // Offset: 0x78
    CryStringT* dashboardScopeContext; // Offset: 0x80
    uint8_t _pad_6[0x8]; // Offset: 0x88
    CryStringT* userAnimationDatabase; // Offset: 0x90
    uint8_t _pad_7[0x8]; // Offset: 0x98
    CryStringT* userScopeContext; // Offset: 0xa0
    uint8_t _pad_8[0x8]; // Offset: 0xa8
    CryStringT* userSyncedScopeContext; // Offset: 0xb0
    uint8_t _pad_9[0x8]; // Offset: 0xb8
    CryStringT* vehicleFragmentOverride; // Offset: 0xc0
    uint8_t _pad_10[0x8]; // Offset: 0xc8
    CryStringT* vehicleScopeContext; // Offset: 0xd0
    uint8_t _pad_11[0x8]; // Offset: 0xd8
    bool useSyncedEnslavement; // Offset: 0xe0
    bool useAnimationBasedTransition; // Offset: 0xe1
    bool supportPlayerAnimatedActions; // Offset: 0xe2
    bool allowRelaxedPose; // Offset: 0xe3
    bool allowDeadOrUnconscious; // Offset: 0xe4
    bool keepUserControlContextActive; // Offset: 0xe5
    uint8_t _pad_12[0x2]; // Offset: 0xe6
    SCSeatActorAttachmentParams actorAttachment; // Offset: 0xe8
    DynArray_Camera* views; // Offset: 0x110 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x118
    DynArray_Camera* QTViews; // Offset: 0x140 // Pointer to DynArray struct
    uint8_t _pad_14[0x28]; // Offset: 0x148
    Camera landingView; // Offset: 0x170
    SeatAdsDef adsOverwriteRecord; // Offset: 0x188
    AdsCameraParams adsCameraOverride; // Offset: 0x1a0
    SuggestedFOVSetup seatFOV; // Offset: 0x1b0
    SCItemSeatEjectParams ejection; // Offset: 0x1c8
    SSharedInteractionParams usableInteraction; // Offset: 0x1d8
    SSharedInteractionParams enterDefaultModeInteraction; // Offset: 0x1e8
    SSharedInteractionParams enterScanModeInteraction; // Offset: 0x1f8
    SSharedInteractionParams enterQuantumModeInteraction; // Offset: 0x208
    SCSeatHeadPosAdjustSetup fpHeadAdjustmentRecord; // Offset: 0x218
    ActorLookAheadVehicle lookAheadOverwriteRecord; // Offset: 0x230
    ActorGForceHeadBob gforceHeadBobOverwriteRecord; // Offset: 0x248
    ActorGForceCameraEffects gforceCameraEffectsOverwriteRecord; // Offset: 0x260
    SCItemSeatHeadTrackingPositionLimitParams headTrackingPositionLimitOverwriteRecord; // Offset: 0x278
    ArmorMoveViewRestrictions armorMoveViewRestrictions; // Offset: 0x290
    SeatUserActorCDIKRecord userCDIKRecord; // Offset: 0x2a8
    GlobalResourceAudio enterAdsAudioTrigger; // Offset: 0x2c0
    GlobalResourceAudio exitAdsAudioTrigger; // Offset: 0x2e0
};

// Original name: SCItemShieldEmitterParams
// Size: 0xc8
// VTable: 0x1499f66d0
struct SCItemShieldEmitterParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType FaceType; // Offset: 0x18
    float MaxReallocation; // Offset: 0x1c
    CapacitorAssignmentInputOutputDef capacitorAssignmentInputOutputRegen; // Offset: 0x20
    CapacitorAssignmentInputOutputDef capacitorAssignmentInputOutputRegenNavMode; // Offset: 0x38
    CapacitorAssignmentInputOutputDef capacitorAssignmentInputOutputResistance; // Offset: 0x50
    float ReconfigurationCooldown; // Offset: 0x68
    float MaxElectricalChargeDamageRate; // Offset: 0x6c
    GlobalResourceMaterial ShieldMaterial; // Offset: 0x70
    Tag regenerateEffectTag; // Offset: 0x88
    CryStringT* shieldMeshDeprecated; // Offset: 0xa0
    uint8_t _pad_1[0x8]; // Offset: 0xa8
    ShieldTypeParams shieldEffectType; // Offset: 0xb0
};

// Original name: SCItemShipComputerParams
// Size: 0x30
// VTable: 0x149a292b0
struct SCItemShipComputerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ShipComputerDefinition definition; // Offset: 0x18
};

// Original name: SCItemShipCoursePredictionParams
// Size: 0x98
// VTable: 0x149a29578
struct SCItemShipCoursePredictionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t sampleSize; // Offset: 0x18
    float segmentLookAhead; // Offset: 0x1c
    float segmentDistance; // Offset: 0x20
    float pathLength; // Offset: 0x24
    float defaultAlignmentAccuracy; // Offset: 0x28
    float defaultAlignmentTime; // Offset: 0x2c
    Vec3 predictionOffset; // Offset: 0x30
    TagList collisionTags; // Offset: 0x48
    bool forceEnabled; // Offset: 0x80
    bool hackDisableIfcsActions; // Offset: 0x81
    bool straighteningEnabled; // Offset: 0x82
    uint8_t _pad_1[0x1]; // Offset: 0x83
    float straighteningStart; // Offset: 0x84
    float straighteningEnd; // Offset: 0x88
    float pathSmoothing; // Offset: 0x8c
    float highlightCursorWidth; // Offset: 0x90
    float highlightSpeedModifier; // Offset: 0x94
};

// Original name: SCItemShopRackParams
// Size: 0x60
// VTable: 0x1499ee3f0
struct SCItemShopRackParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool bundle; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    SItemShopARParams arParams; // Offset: 0x20
    DynArray_SItemShopARItemPortParams* itemPortOverrides; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
};

// Original name: SCItemSpaceMineParams
// Size: 0x2c0
// VTable: 0x149a245d8
struct SCItemSpaceMineParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SOrdnanceAudioParams audioParams; // Offset: 0x18
    bool requiresLauncher; // Offset: 0xa0
    bool enableLifetime; // Offset: 0xa1
    uint8_t _pad_1[0x2]; // Offset: 0xa2
    float maxLifetime; // Offset: 0xa4
    float armTime; // Offset: 0xa8
    int32_t maxArmableOverride; // Offset: 0xac
    float igniteTime; // Offset: 0xb0
    float collisionDelayTime; // Offset: 0xb4
    float explosionSafetyDistance; // Offset: 0xb8
    float projectileProximity; // Offset: 0xbc
    ExplosionParams explosionParams; // Offset: 0xc0
    SOrdnanceClusterParams clusterParams; // Offset: 0x280
    DynArray_SOrdnanceEmissionsParams* emissionsParams; // Offset: 0x290 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x298
};

// Original name: SCItemSuitFuelParams
// Size: 0xb8
// VTable: 0x149a62aa0
struct SCItemSuitFuelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType fuelResourcePrimary; // Offset: 0x8
    ResourceType fuelResourceSecondary; // Offset: 0x20
    SBaseCargoUnit primaryFuelBurnRateMicroSCU; // Offset: 0x38
    float secondaryFuelBurnRateGrams; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
    SBaseCargoUnit fuelRefillRateFromTankMicroSCU; // Offset: 0x50
    SBaseCargoUnit fuelRefillRateFromAtmosphereMicroSCU; // Offset: 0x60
    SBaseCargoUnit fuelRefillRateFromInjectionMicroSCU; // Offset: 0x70
    DynArray_SCItemSuitAtmosphereFuelConversionParams* gasConversionRatios; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x88
    CLocIdentifier* usingSecondaryFuelMessage; // Offset: 0xb0
};

// Original name: SCItemSuitHelmetParams
// Size: 0xc8
// VTable: 0x149a00960
struct SCItemSuitHelmetParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float dofActive; // Offset: 0x18
    float dofMinZ; // Offset: 0x1c
    float dofBlurAmount; // Offset: 0x20
    float dofMinZScale; // Offset: 0x24
    float dofFocusMin; // Offset: 0x28
    float dofFocusMax; // Offset: 0x2c
    float minFOV; // Offset: 0x30
    float maxFOV; // Offset: 0x34
    float motionModifier; // Offset: 0x38
    float atmosphereCapacity; // Offset: 0x3c
    double punctureMaxArea; // Offset: 0x40
    int32_t punctureMaxNumber; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
    CryStringT* punctureVFX; // Offset: 0x50
    uint8_t _pad_2[0x8]; // Offset: 0x58
    float fStop; // Offset: 0x60
    float focalDistance; // Offset: 0x64
    float transparencyPostEffectsExclusionRegion; // Offset: 0x68
    bool enableMFDCasts; // Offset: 0x6c
    uint8_t _pad_3[0x3]; // Offset: 0x6d
    ActorLookLimits actorLookLimits; // Offset: 0x70
    MoveViewRestrictionPenalty restrictedMoveViewPenalty; // Offset: 0x88
    AnimatedHelmetParams animationParams; // Offset: 0xa0
    InteractableHelmetParams interactableParams; // Offset: 0xb8
};

// Original name: SCItemSuitThrusterPackParams
// Size: 0x298
// VTable: 0x149a632e0
struct SCItemSuitThrusterPackParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCLegacyThrustParams LegacyThrustParams; // Offset: 0x18
    SCThrustParams DefaultThrustParams; // Offset: 0xb0
    DynArray_SCOptionalThrustParams* OptionalThrustParams; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x1c0
    GlobalResourceAudio StartAudioTrigger; // Offset: 0x1e8
    GlobalResourceAudio StopAudioTrigger; // Offset: 0x208
    GlobalResourceParticle ThrusterEffect; // Offset: 0x228
    DynArray_SCItemSuitThrusterParams* Thrusters; // Offset: 0x240 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x248
    float VFXThrusterThreshold; // Offset: 0x270
    float SFXThrusterAngularThreshold; // Offset: 0x274
    float SFXThrusterLinearThreshold; // Offset: 0x278
    uint8_t _pad_3[0x4]; // Offset: 0x27c
    SCItemSuitFuelParams fuelParams; // Offset: 0x280
};

// Original name: SCItemThrusterParams
// Size: 0x1d8
// VTable: 0x149a1c278
struct SCItemThrusterParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ThrusterGimbal gimbal; // Offset: 0x18
    DynArray_ThrusterGimbalState* gimbalInteractionStateOverrides; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0xa0
    float thrustCapacity; // Offset: 0xc8
    uint8_t _pad_2[0x4]; // Offset: 0xcc
    BezierCurve atmosphericEfficiencyCurve; // Offset: 0xd0
    float minHealthThrustMultiplier; // Offset: 0x160
    float fuelBurnRatePer10KNewton; // Offset: 0x164
    SBaseResourceUnit fuelBurnRatePer10KNewtonRN; // Offset: 0x168
    ARDataType thrusterType; // Offset: 0x178
    bool onlyActiveInVTOL; // Offset: 0x17c
    uint8_t _pad_3[0x3]; // Offset: 0x17d
    CryStringT* nozzleAnimation; // Offset: 0x180
    uint8_t _pad_4[0x8]; // Offset: 0x188
    ARDataType thrusterAnimDriver; // Offset: 0x190
    float thrusterStrengthSmooth; // Offset: 0x194
    bool toggleThrusterBackwash; // Offset: 0x198
    bool automateBackwashSize; // Offset: 0x199
    uint8_t _pad_5[0x6]; // Offset: 0x19a
    Vec3 thrusterBackwashSize; // Offset: 0x1a0
    float thrusterBackwashMaxSpeed; // Offset: 0x1b8
    float thrusterBackwashMaxDensity; // Offset: 0x1bc
    float thrusterBackwashMaxResistance; // Offset: 0x1c0
    float thrusterBackwashAfterburnerMultiplier; // Offset: 0x1c4
    SSCSignatureEmitterParams signatureEmitterParams; // Offset: 0x1c8
};

// Original name: SCItemTurretCustomAngleLimitParams
// Size: 0x78
// VTable: 0x149a5a120
struct SCItemTurretCustomAngleLimitParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* RelativeJointName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SCItemTurretCustomAngleLimit* AngleLimits; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_SCItemTurretCustomAngleLimitTagOverwriteParams* limitOverwrites; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
};

// Original name: SCItemTurretCustomAngleLimitTagOverwriteParams
// Size: 0x50
// VTable: 0x149a5a078
struct SCItemTurretCustomAngleLimitTagOverwriteParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag limiterTag; // Offset: 0x8
    DynArray_SCItemTurretCustomAngleLimit* AngleLimits; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SCItemTurretGyroParams
// Size: 0x20
// VTable: 0x149a5a7d8
struct SCItemTurretGyroParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool defaultGyroStabilize; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    SSharedInteractionParams toggleGyroStabilizeModeInteraction; // Offset: 0x10
};

// Original name: SCItemTurretJointMovementParams
// Size: 0x68
// VTable: 0x149a5a5d8
struct SCItemTurretJointMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag movementTag; // Offset: 0x8
    CryStringT* jointName; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    bool slavedOnly; // Offset: 0x30
    bool restrictTargetAngles; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
    SCItemTurretJointMovementAxisParams pitchAxis; // Offset: 0x38
    SCItemTurretJointMovementAxisParams rollAxis; // Offset: 0x48
    SCItemTurretJointMovementAxisParams yawAxis; // Offset: 0x58
};

// Original name: SCItemTurretMovementParams
// Size: 0x20
// VTable: 0x149a5a4b0
struct SCItemTurretMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag movementTag; // Offset: 0x8
};

// Original name: SCItemTurretMovementTagName
// Size: 0x28
// VTable: 0x149a5a8b8
struct SCItemTurretMovementTagName {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag movementTag; // Offset: 0x8
    CLocIdentifier* movementName; // Offset: 0x20
};

// Original name: SCItemTurretParams
// Size: 0x2b8
// VTable: 0x149a5ad48
struct SCItemTurretParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType rotationStyle; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    SSequencerTurretRecenterTaskParams recenterTask; // Offset: 0x20
    SSequencerTurretResumeControlTaskParams resumeControlTask; // Offset: 0x30
    DynArray_SSequencerTurretSetMovementTagTaskParams* setMovementTagTasks; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
    DynArray_SSequencerTurretSetLimiterTagTaskParams* setLimiterTagTasks; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x78
    DynArray_float* maxSpeedPerGimbalMode; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa8
    DynArray_float* weaponModifierInterpolationFactor; // Offset: 0xd0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd8
    DynArray_bool* disableTrackingPerGimbalMode; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x108
    bool recenterIfUnused; // Offset: 0x130
    uint8_t _pad_7[0x7]; // Offset: 0x131
    SSharedInteractionParams toggleTurretPositionInteraction; // Offset: 0x138
    Tag defaultMovementTag; // Offset: 0x148
    DynArray_SCItemTurretMovementTagName* movementTagNames; // Offset: 0x160 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x168
    DynArray_SCItemTurretMovementParams* movementList; // Offset: 0x190 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x198
    SCItemTurretGyroParams gyroStabilize; // Offset: 0x1c0
    SCItemTurretRemoteParams remoteTurret; // Offset: 0x1d0
    STurretHealthModifierDef healthModifierRecord; // Offset: 0x1e0
    SCItemTurretSensitivityParams turretSensitivity; // Offset: 0x1f8
    float powerRequirement; // Offset: 0x238
    bool switchToCachedOperatorModeOnExit; // Offset: 0x23c
    uint8_t _pad_10[0x3]; // Offset: 0x23d
    ARDataType operatorModeOnEnter; // Offset: 0x240
    uint8_t _pad_11[0x4]; // Offset: 0x244
    CryStringT* jointConvergence; // Offset: 0x248
    uint8_t _pad_12[0x8]; // Offset: 0x250
    float fixedAssistRadiusInner; // Offset: 0x258
    float fixedAssistRadiusOuter; // Offset: 0x25c
    AudioRtpc audioRtpcHealthRatio; // Offset: 0x260
    IntoxicationTurretModifierParams intoxicationModifierRef; // Offset: 0x280
    SProjectedHudParams hudParamsOverride; // Offset: 0x298
    bool autoDeployHelmetTargetingMode; // Offset: 0x2b0
    bool runsSafetyChecks; // Offset: 0x2b1
    uint8_t _pad_13[0x6]; // Offset: 0x2b2
};

// Original name: SCItemTurretRemoteParams
// Size: 0x38
// VTable: 0x149a5a750
struct SCItemTurretRemoteParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams interaction; // Offset: 0x8
    Camera remoteCamera; // Offset: 0x18
    bool turretOnlyUsableInRemoteCamera; // Offset: 0x30
    uint8_t _pad_1[0x7]; // Offset: 0x31
};

// Original name: SCItemTurretSensitivityParams
// Size: 0x40
// VTable: 0x149a5a6a8
struct SCItemTurretSensitivityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams increaseSensitivityInteraction; // Offset: 0x8
    SSharedInteractionParams decreaseSensitivityInteraction; // Offset: 0x18
    SSharedInteractionParams resetSensitivityInteraction; // Offset: 0x28
    float sensitivityDelta; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: SCItemTurretStandardAngleLimitParams
// Size: 0x40
// VTable: 0x149a59f40
struct SCItemTurretStandardAngleLimitParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float LowestAngle; // Offset: 0x8
    float HighestAngle; // Offset: 0xc
    DynArray_SCItemTurretStandardAngleLimitTagOverwriteParams* limitOverwrites; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: SCItemTurretStandardAngleLimitTagOverwriteParams
// Size: 0x28
// VTable: 0x149a59e90
struct SCItemTurretStandardAngleLimitTagOverwriteParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag limiterTag; // Offset: 0x8
    float LowestAngle; // Offset: 0x20
    float HighestAngle; // Offset: 0x24
};

// Original name: SCItemUIViewOwnerParams
// Size: 0x50
// VTable: 0x149a336b8
struct SCItemUIViewOwnerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCItemUIView_DashboardCanvasDef dashboardCanvasConfig; // Offset: 0x18
    UIElement element; // Offset: 0x30
    float loadDistance; // Offset: 0x48
    bool enableInS42; // Offset: 0x4c
    uint8_t _pad_1[0x3]; // Offset: 0x4d
};

// Original name: SCItemUIView_DashboardCanvasDef
// Size: 0x38
// VTable: 0x149a335e0
struct SCItemUIView_DashboardCanvasDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCItemUIView_DashboardCanvasViewDef* views; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCItemUIView_DashboardCanvasViewDef
// Size: 0x38
// VTable: 0x149a33580
struct SCItemUIView_DashboardCanvasViewDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_Canvas* screens; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCItemVehicleLandingGearSystemParams
// Size: 0x108
// VTable: 0x149a56590
struct SCItemVehicleLandingGearSystemParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams deployInteraction; // Offset: 0x18
    SSharedInteractionParams retractInteraction; // Offset: 0x28
    float hideSelectorRatio; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    DockingHUDMessagesParams hudMessagesParams; // Offset: 0x40
    DockingAutodockingParams dockingAutodockingParams; // Offset: 0xe0
};

// Original name: SCItemWeaponComponentParams
// Size: 0x1a40
// VTable: 0x149a72ae0
struct SCItemWeaponComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SWeaponReticleParams reticleParams; // Offset: 0x18
    CryStringT* geometryTags; // Offset: 0x48
    uint8_t _pad_1[0x8]; // Offset: 0x50
    Vec3 defaultAdsCameraOffset; // Offset: 0x58
    DynArray_SWeaponOnAttachParams* onAttachParams; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x78
    float supplementaryFireTime; // Offset: 0xa0
    uint8_t _pad_3[0x4]; // Offset: 0xa4
    EntityClassDefinition ammoContainerRecord; // Offset: 0xa8
    DynArray_SSecondaryAmmoContainerParams* secondaryAmmoContainers; // Offset: 0xc0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xc8
    bool ShouldIgnorePrimaryAmmoContainer; // Offset: 0xf0
    uint8_t _pad_5[0x7]; // Offset: 0xf1
    WeaponProceduralAnimation proceduralAnimationRecord; // Offset: 0xf8
    ActorProceduralRecoilConfig actorProceduralRecoilConfig; // Offset: 0x110
    SWeaponAIDataParams weaponAIData; // Offset: 0x128
    SWeaponConnectionParams connectionParams; // Offset: 0x2d0
    SWeaponRegenConsumerParams weaponRegenConsumerParams; // Offset: 0x1690
    bool fireOnAim; // Offset: 0x16a0
    uint8_t _pad_6[0x7]; // Offset: 0x16a1
    BezierCurve scopeZoomCurve; // Offset: 0x16a8
    SWeaponActionParams aimAction; // Offset: 0x1738
    DynArray_SWeaponActionParams* fireActions; // Offset: 0x1748 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x1750
    SWeaponAudioParams audioParams; // Offset: 0x1778
    SWeaponAudioReportEnvironmentParams audioReportEnvironmentParams; // Offset: 0x1848
    DynArray_SWeaponParticleEffectParamsArray* specialEffectsParams; // Offset: 0x1888 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x1890
    DynArray_SWeaponParticleEffectParams* turnedOnEffects; // Offset: 0x18b8 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x18c0
    SWeaponSpinAnimationParams fireSpinAnimationParams; // Offset: 0x18e8
    DynArray_SWeaponSpinAnimationParams* fireSpinAnimations; // Offset: 0x18f8 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x1900
    float autoAimMuzzleAngleOverwrite; // Offset: 0x1928
    uint8_t _pad_11[0x4]; // Offset: 0x192c
    WeaponAimableAnglesDef aimableAnglesRecord; // Offset: 0x1930
    WeaponGimbalModeModifierDef gimbalModeModifierRecord; // Offset: 0x1948
    WeaponARModifier arModifierRecord; // Offset: 0x1960
    SWeaponModifierParams weaponDegradationModifier; // Offset: 0x1978
    SWeaponMisfireParams misfireParams; // Offset: 0x1988
    bool useAdsHelper; // Offset: 0x19f0
    bool isAllowedInGreenZones; // Offset: 0x19f1
    bool uncollapseOnTurnedOn; // Offset: 0x19f2
    bool allowFiringDuringFiremodeSwitch; // Offset: 0x19f3
    uint8_t _pad_12[0x4]; // Offset: 0x19f4
    DynArray_float* overrideDisplayStats; // Offset: 0x19f8 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x1a00
    SWeaponAmmoRepoolParams ammoRepoolParams; // Offset: 0x1a28
};

// Original name: SCItemWeaponControllerParams
// Size: 0xf8
// VTable: 0x149a7f7c8
struct SCItemWeaponControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCItemInputAutoAimParams AutoAim; // Offset: 0x18
    SCItemWeaponControllerStaggeredFiring StaggeredMode; // Offset: 0x40
    bool allowAllGunsGroup; // Offset: 0x50
    uint8_t _pad_1[0x3]; // Offset: 0x51
    int32_t numberOfCustomizablePresets; // Offset: 0x54
    SSharedInteractionParams enableWeaponsInteraction; // Offset: 0x58
    SSharedInteractionParams disableWeaponsInteraction; // Offset: 0x68
    SSharedInteractionParams fireWeaponGroupOneInteraction; // Offset: 0x78
    SSharedInteractionParams fireWeaponGroupTwoInteraction; // Offset: 0x88
    SSharedInteractionParams setLagPipsInteraction; // Offset: 0x98
    SSharedInteractionParams setLeadPipsInteraction; // Offset: 0xa8
    SSharedInteractionParams setFixedGimbalInteraction; // Offset: 0xb8
    SSharedInteractionParams setFreeGimbalInteraction; // Offset: 0xc8
    SSharedInteractionParams setAutoGimbalInteraction; // Offset: 0xd8
    SSharedInteractionParams setSynchronousFireInteraction; // Offset: 0xe8
};

// Original name: SCItemWeaponControllerStaggeredFiring
// Size: 0x20
// VTable: 0x149a7f418
struct SCItemWeaponControllerStaggeredFiring {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams ToggleWeaponFireModeInteraction; // Offset: 0x8
    bool DefaultStaggerFire; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: SCItemWheeledControllerParams
// Size: 0x58
// VTable: 0x149a2f318
struct SCItemWheeledControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams engineOnInteraction; // Offset: 0x18
    SSharedInteractionParams engineOffInteraction; // Offset: 0x28
    float MinimumPowerAmount; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    IntoxicationWheeledModifierParams intoxicationModifierRef; // Offset: 0x40
};

// Original name: SCLinkedInteractiveControllerParams
// Size: 0xd8
// VTable: 0x1499f79e8
struct SCLinkedInteractiveControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_IntInteractiveVariable* ints; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_ControlIntInteractiveVariable* controlIntVariables; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_FloatInteractiveVariable* floats; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
    DynArray_ControlFloatInteractiveVariable* controlFloatVariables; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xb0
};

// Original name: SCLoadingPlatformEffectParams
// Size: 0x128
// VTable: 0x149a41ad8
struct SCLoadingPlatformEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* raisingLoadingPlatformTrigger; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_Tag* openingLoadingGateTrigger; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_Tag* openingFrontGateTrigger; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_Tag* loweringLoadingPlatformTrigger; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_Tag* closingLoadingGateTrigger; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
    DynArray_Tag* closingFrontGateTrigger; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x100
};

// Original name: SCLoadingPlatformManagerParams
// Size: 0x1f0
// VTable: 0x149a41ec8
struct SCLoadingPlatformManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCLoadingPlatformEffectParams effectParams; // Offset: 0x18
    SCLoadingPlatformLightGroupParams lightGroupParams; // Offset: 0x140
    SCLoadingPlatformEntityReferences loadingPlatformEntityReferences; // Offset: 0x168
    SCLoadingPlatformTrackviewParams trackviewParams; // Offset: 0x1c0
    bool hasFrontGate; // Offset: 0x1e8
    bool hasLoadingGate; // Offset: 0x1e9
    bool hasCargoGrid; // Offset: 0x1ea
    bool hasLandingArea; // Offset: 0x1eb
    uint8_t _pad_1[0x4]; // Offset: 0x1ec
};

// Original name: SCOptionalThrustParams
// Size: 0x60
// VTable: 0x149a630f0
struct SCOptionalThrustParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag activationTag; // Offset: 0x8
    SCMaxLinearVelocityParams MaxLinearVelocityParams; // Offset: 0x20
    SCLinearMovementParams LinearMovementParams; // Offset: 0x30
    SCAngularMovementParams AngularMovementParams; // Offset: 0x40
    SCBoostScaleParam BoostScaleParam; // Offset: 0x50
};

// Original name: SCOptionalZeroGTraversalParams
// Size: 0x30
// VTable: 0x149a9c708
struct SCOptionalZeroGTraversalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag activationTag; // Offset: 0x8
    SCZeroGLaunchParams zeroGLaunchParams; // Offset: 0x20
};

// Original name: SCPlayer
// Size: 0x238
// VTable: 0x149a86000
struct SCPlayer {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    PlayerInventory playerInventory; // Offset: 0x18
    SPlayerSkillsParams playerSkillsParams; // Offset: 0x38
    PlayerMarkerSubscription playerMarkerSubscriptionParams; // Offset: 0x220
};

// Original name: SCSeatAccessEntranceInteractionParams
// Size: 0xe8
// VTable: 0x149a5d6d8
struct SCSeatAccessEntranceInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SCSeatAccessInteractionConditionParams conditions; // Offset: 0x18
    SCSeatConnectionParams seatConnection; // Offset: 0x40
    SCDashboardConnectionParams dashboardConnection; // Offset: 0x70
    SCTurretSeatRotationParams seatEnterExitAngleParams; // Offset: 0x88
    SCSeatAccessEntranceInteractionStateParams enterState; // Offset: 0x98
    SCSeatAccessEntranceInteractionStateParams exitState; // Offset: 0xa8
    DynArray_SCSeatAccessLinkedGatewayParams* linkedGateways; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xc0
};

// Original name: SCSeatAccessEntranceInteractionStateParams
// Size: 0x68
// VTable: 0x149a5d3b0
struct SCSeatAccessEntranceInteractionStateParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    SSharedInteractionParams interaction; // Offset: 0x20
    CryStringT* fragmentTags; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x38
    CryStringT* deployRetractFragmentTags; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    SCSeatActorAttachmentParams attachment; // Offset: 0x50
    ARDataType skipState; // Offset: 0x60
    bool interiorEntrance; // Offset: 0x64
    uint8_t _pad_3[0x3]; // Offset: 0x65
};

// Original name: SCSeatAccessGatewayInteractionParams
// Size: 0xa0
// VTable: 0x149a5d1e8
struct SCSeatAccessGatewayInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SCSeatAccessInteractionConditionParams conditions; // Offset: 0x18
    CryStringT* fragmentOverride; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    SCSeatAccessGatewayInteractionStateParams openState; // Offset: 0x50
    SCSeatAccessGatewayInteractionStateParams closeState; // Offset: 0x60
    bool audioCanopyTreatment; // Offset: 0x70
    uint8_t _pad_3[0x3]; // Offset: 0x71
    float openDuration; // Offset: 0x74
    float closeDuration; // Offset: 0x78
    float audioThreshold; // Offset: 0x7c
    AudioRtpc isShipCanopyOpen; // Offset: 0x80
};

// Original name: SCSeatAccessGatewayInteractionStateParams
// Size: 0x40
// VTable: 0x149a5d070
struct SCSeatAccessGatewayInteractionStateParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    SSharedInteractionParams interaction; // Offset: 0x20
    CryStringT* fragmentTags; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x38
};

// Original name: SCSeatAccessLinkedGatewayParams
// Size: 0x50
// VTable: 0x149a5d5b0
struct SCSeatAccessLinkedGatewayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCSeatAccessGatewayInteractionParams gateway; // Offset: 0x8
    bool syncToEntranceState; // Offset: 0x18
    bool oneWaySequencer; // Offset: 0x19
    bool ignoreCloseOnEnter; // Offset: 0x1a
    bool ignoreCloseOnExit; // Offset: 0x1b
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    SCSeatAccessLinkedGatewaySequenceParams openSequenceParams; // Offset: 0x20
    SCSeatAccessLinkedGatewaySequenceParams closeSequenceParams; // Offset: 0x38
};

// Original name: SCSeatAccessPassageInteractionParams
// Size: 0xa0
// VTable: 0x149a5d878
struct SCSeatAccessPassageInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SCSeatAccessInteractionConditionParams conditions; // Offset: 0x18
    CryStringT* fragmentOverride; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    SCSeatAccessPassageInteractionStateParams enterState; // Offset: 0x50
    SCSeatAccessPassageInteractionStateParams exitState; // Offset: 0x60
    DynArray_SCSeatAccessLinkedGatewayParams* linkedGateways; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x78
};

// Original name: SCSeatAccessPassageInteractionStateParams
// Size: 0x58
// VTable: 0x149a5d7a8
struct SCSeatAccessPassageInteractionStateParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    SSharedInteractionParams interaction; // Offset: 0x20
    CryStringT* fragmentTags; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x38
    ARDataType condition; // Offset: 0x40
    uint8_t _pad_2[0x3]; // Offset: 0x41
    float distance; // Offset: 0x44
    SCSeatActorAttachmentParams attachment; // Offset: 0x48
};

// Original name: SCSeatConnectionParams
// Size: 0x30
// VTable: 0x149a5ce48
struct SCSeatConnectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCSeatItemPort seatItemPort; // Offset: 0x8
    Tag seatTag; // Offset: 0x18
};

// Original name: SCargoGridSpawnedStateModifier
// Size: 0x18
// VTable: 0x1499e2190
struct SCargoGridSpawnedStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState defaultStateOverride; // Offset: 0x8
};

// Original name: SCarryableSequenceRef
// Size: 0x50
// VTable: 0x149a8ee70
struct SCarryableSequenceRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType sequenceAction; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_Tag* tags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    SSequencerDefSequenceParams carryableSequence; // Offset: 0x40
};

// Original name: SCarryableStatesParams
// Size: 0xb8
// VTable: 0x149a8e748
struct SCarryableStatesParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SInteractionState settledState; // Offset: 0x18
    SInteractionState carriedState; // Offset: 0x28
    SInteractionState equippedToSuitState; // Offset: 0x38
    SInteractionState inspectingState; // Offset: 0x48
    SInteractionState droppedState; // Offset: 0x58
    SInteractionState offeredState; // Offset: 0x68
    SInteractionState heldReadyState; // Offset: 0x78
    SInteractionState equippedWornState; // Offset: 0x88
    SInteractionState storedState; // Offset: 0x98
    SInteractionState hangingOnOutfitHangerState; // Offset: 0xa8
};

// Original name: SChangeFactionTrigger
// Size: 0x20
// VTable: 0x14996d6b0
struct SChangeFactionTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Faction_LEGACY faction; // Offset: 0x8
};

// Original name: SChangeHoloEntityStateModifier
// Size: 0x18
// VTable: 0x149a702c0
struct SChangeHoloEntityStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState holoEntityState; // Offset: 0x8
};

// Original name: SChangeInteractionStateGameplayTrigger
// Size: 0x18
// VTable: 0x1499faab0
struct SChangeInteractionStateGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState targetState; // Offset: 0x8
};

// Original name: SCharacterCustomizerAllowedClasses
// Size: 0x38
// VTable: 0x149a0e3c0
struct SCharacterCustomizerAllowedClasses {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* classes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCharacterCustomizerBodyTypeParams
// Size: 0xa8
// VTable: 0x149a0d9f0
struct SCharacterCustomizerBodyTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    EntityClassDefinition bodyTypeDummyClass; // Offset: 0x20
    EntityReferenceDef bodyTypeTagPoint; // Offset: 0x38
    SGeometryModelTagBase overrideModelTag; // Offset: 0x50
    Vec3 bodyTypeOffset; // Offset: 0x60
    DynArray_SCharacterCustomizerRandomizationOverrideParams* randomizationOverrideParams; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x80
};

// Original name: SCharacterCustomizerDNARegionParams
// Size: 0x68
// VTable: 0x149a0d820
struct SCharacterCustomizerDNARegionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    bool visible; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
    ARDataType symmetryRegion; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
    DynArray_SCharacterCustomizerVertexParams* shapingVertices; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
    float shapingUIWeight; // Offset: 0x60
    uint8_t _pad_5[0x4]; // Offset: 0x64
};

// Original name: SCharacterCustomizerFeatureBase
// Size: 0xb0
// VTable: 0x149a0bfa0
struct SCharacterCustomizerFeatureBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    CryStringT* idString; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    DynArray_SCharacterCustomizerFeatureBase* subFeatures; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    CryStringT* iconPath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    SCharacterCustomizerRandomizationParams randomizationParams; // Offset: 0x70
    SCharacterValidationParams validationParams; // Offset: 0x80
    ARDataType featureType; // Offset: 0x90
    uint8_t _pad_5[0x4]; // Offset: 0x94
    SCustomizableMaterialParams materialParams; // Offset: 0x98
    bool precacheSkinMaterials; // Offset: 0xa8
    bool supportsSubFeatureSelection; // Offset: 0xa9
    uint8_t _pad_6[0x6]; // Offset: 0xaa
};

// Original name: SCharacterCustomizerFeatureBodyTypeSelect
// Size: 0xb0
// VTable: 0x149a0cf10
struct SCharacterCustomizerFeatureBodyTypeSelect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    CryStringT* idString; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    DynArray_SCharacterCustomizerFeatureBase* subFeatures; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    CryStringT* iconPath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    SCharacterCustomizerRandomizationParams randomizationParams; // Offset: 0x70
    SCharacterValidationParams validationParams; // Offset: 0x80
    ARDataType featureType; // Offset: 0x90
    uint8_t _pad_5[0x4]; // Offset: 0x94
    SCustomizableMaterialParams materialParams; // Offset: 0x98
    bool precacheSkinMaterials; // Offset: 0xa8
    bool supportsSubFeatureSelection; // Offset: 0xa9
    uint8_t _pad_6[0x6]; // Offset: 0xaa
};

// Original name: SCharacterCustomizerFeatureDNA
// Size: 0xb8
// VTable: 0x149a0cf70
struct SCharacterCustomizerFeatureDNA {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    CryStringT* idString; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    DynArray_SCharacterCustomizerFeatureBase* subFeatures; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    CryStringT* iconPath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    SCharacterCustomizerRandomizationParams randomizationParams; // Offset: 0x70
    SCharacterValidationParams validationParams; // Offset: 0x80
    ARDataType featureType; // Offset: 0x90
    uint8_t _pad_5[0x4]; // Offset: 0x94
    SCustomizableMaterialParams materialParams; // Offset: 0x98
    bool precacheSkinMaterials; // Offset: 0xa8
    bool supportsSubFeatureSelection; // Offset: 0xa9
    uint8_t _pad_6[0x6]; // Offset: 0xaa
    ARDataType editType; // Offset: 0xb0
    uint8_t _pad_7[0x4]; // Offset: 0xb4
};

// Original name: SCharacterCustomizerFeatureItemEquip
// Size: 0x170
// VTable: 0x149a0d190
struct SCharacterCustomizerFeatureItemEquip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    CryStringT* idString; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    DynArray_SCharacterCustomizerFeatureBase* subFeatures; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    CryStringT* iconPath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    SCharacterCustomizerRandomizationParams randomizationParams; // Offset: 0x70
    SCharacterValidationParams validationParams; // Offset: 0x80
    ARDataType featureType; // Offset: 0x90
    uint8_t _pad_5[0x4]; // Offset: 0x94
    SCustomizableMaterialParams materialParams; // Offset: 0x98
    bool precacheSkinMaterials; // Offset: 0xa8
    bool supportsSubFeatureSelection; // Offset: 0xa9
    uint8_t _pad_6[0x6]; // Offset: 0xaa
    SCharacterCustomizerClippingVolumeParams clippingVolumeParams; // Offset: 0xb0
    SCharacterCustomizerClippingVolumeParams advancedModeClippingVolumeParams; // Offset: 0xd8
    bool addEmptyEntry; // Offset: 0x100
    uint8_t _pad_7[0x7]; // Offset: 0x101
    Vec3 featureLibOffset; // Offset: 0x108
    Vec3 advancedModeLibOffset; // Offset: 0x120
    float featureLibScrollTrim; // Offset: 0x138
    float advancedModeFeatureLibScrollTrim; // Offset: 0x13c
    ARDataType itemSelectMode; // Offset: 0x140
    uint8_t _pad_8[0x4]; // Offset: 0x144
    ARDataType itemType; // Offset: 0x148
    uint8_t _pad_9[0x4]; // Offset: 0x14c
    CryStringT* requiredPortTag; // Offset: 0x150
    uint8_t _pad_10[0x8]; // Offset: 0x158
    CryStringT* requiredTags; // Offset: 0x160
    uint8_t _pad_11[0x8]; // Offset: 0x168
};

// Original name: SCharacterCustomizerFeatureShaderEdit
// Size: 0xe0
// VTable: 0x149a0d370
struct SCharacterCustomizerFeatureShaderEdit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    CryStringT* idString; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    DynArray_SCharacterCustomizerFeatureBase* subFeatures; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    CryStringT* iconPath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    SCharacterCustomizerRandomizationParams randomizationParams; // Offset: 0x70
    SCharacterValidationParams validationParams; // Offset: 0x80
    ARDataType featureType; // Offset: 0x90
    uint8_t _pad_5[0x4]; // Offset: 0x94
    SCustomizableMaterialParams materialParams; // Offset: 0x98
    bool precacheSkinMaterials; // Offset: 0xa8
    bool supportsSubFeatureSelection; // Offset: 0xa9
    uint8_t _pad_6[0x6]; // Offset: 0xaa
    DynArray_int32_t* subMaterialsToEdit; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0xb8
};

// Original name: SCharacterCustomizerFeatureTextureSelect
// Size: 0x1b8
// VTable: 0x149a0d240
struct SCharacterCustomizerFeatureTextureSelect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    CryStringT* idString; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    DynArray_SCharacterCustomizerFeatureBase* subFeatures; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    CryStringT* iconPath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    SCharacterCustomizerRandomizationParams randomizationParams; // Offset: 0x70
    SCharacterValidationParams validationParams; // Offset: 0x80
    ARDataType featureType; // Offset: 0x90
    uint8_t _pad_5[0x4]; // Offset: 0x94
    SCustomizableMaterialParams materialParams; // Offset: 0x98
    bool precacheSkinMaterials; // Offset: 0xa8
    bool supportsSubFeatureSelection; // Offset: 0xa9
    uint8_t _pad_6[0x6]; // Offset: 0xaa
    SCharacterCustomizerClippingVolumeParams clippingVolumeParams; // Offset: 0xb0
    SCharacterCustomizerClippingVolumeParams advancedModeClippingVolumeParams; // Offset: 0xd8
    bool addEmptyEntry; // Offset: 0x100
    uint8_t _pad_7[0x7]; // Offset: 0x101
    Vec3 featureLibOffset; // Offset: 0x108
    Vec3 advancedModeLibOffset; // Offset: 0x120
    float featureLibScrollTrim; // Offset: 0x138
    float advancedModeFeatureLibScrollTrim; // Offset: 0x13c
    ARDataType itemSelectMode; // Offset: 0x140
    uint8_t _pad_8[0x4]; // Offset: 0x144
    ARDataType slot; // Offset: 0x148
    uint8_t _pad_9[0x4]; // Offset: 0x14c
    DynArray_int32_t* subMaterialsToEdit; // Offset: 0x150 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x158
    SCharacterCustomizerTextureList textures; // Offset: 0x180
};

// Original name: SCharacterCustomizerHairLengthEntry
// Size: 0x28
// VTable: 0x149a0df78
struct SCharacterCustomizerHairLengthEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition hairClass; // Offset: 0x8
    float hairLength; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SCharacterCustomizerHeadLibraryParams
// Size: 0x80
// VTable: 0x149a0e2e8
struct SCharacterCustomizerHeadLibraryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityReferenceDef libraryRoot; // Offset: 0x8
    int32_t columns; // Offset: 0x20
    float columnSpacing; // Offset: 0x24
    float rowSpacing; // Offset: 0x28
    float libraryScrollingIncrement; // Offset: 0x2c
    float libraryTrimAmount; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
    EntityClassDefinition sourceHeadClass; // Offset: 0x38
    DynArray_EntityReferenceDef* additionalEntities; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
};

// Original name: SCharacterCustomizerItemSelect
// Size: 0x148
// VTable: 0x149a0d0e8
struct SCharacterCustomizerItemSelect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    CryStringT* idString; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    DynArray_SCharacterCustomizerFeatureBase* subFeatures; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    CryStringT* iconPath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    SCharacterCustomizerRandomizationParams randomizationParams; // Offset: 0x70
    SCharacterValidationParams validationParams; // Offset: 0x80
    ARDataType featureType; // Offset: 0x90
    uint8_t _pad_5[0x4]; // Offset: 0x94
    SCustomizableMaterialParams materialParams; // Offset: 0x98
    bool precacheSkinMaterials; // Offset: 0xa8
    bool supportsSubFeatureSelection; // Offset: 0xa9
    uint8_t _pad_6[0x6]; // Offset: 0xaa
    SCharacterCustomizerClippingVolumeParams clippingVolumeParams; // Offset: 0xb0
    SCharacterCustomizerClippingVolumeParams advancedModeClippingVolumeParams; // Offset: 0xd8
    bool addEmptyEntry; // Offset: 0x100
    uint8_t _pad_7[0x7]; // Offset: 0x101
    Vec3 featureLibOffset; // Offset: 0x108
    Vec3 advancedModeLibOffset; // Offset: 0x120
    float featureLibScrollTrim; // Offset: 0x138
    float advancedModeFeatureLibScrollTrim; // Offset: 0x13c
    ARDataType itemSelectMode; // Offset: 0x140
    uint8_t _pad_8[0x4]; // Offset: 0x144
};

// Original name: SCharacterCustomizerLoadoutItemReplacementMapping
// Size: 0x38
// VTable: 0x149a0e470
struct SCharacterCustomizerLoadoutItemReplacementMapping {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool networkOnly; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* oldItemGUID; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    EntityClassDefinition newItem; // Offset: 0x20
};

// Original name: SCharacterCustomizerMakeupSlot
// Size: 0x208
// VTable: 0x149a0d318
struct SCharacterCustomizerMakeupSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    CryStringT* idString; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    DynArray_SCharacterCustomizerFeatureBase* subFeatures; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    CryStringT* iconPath; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    SCharacterCustomizerRandomizationParams randomizationParams; // Offset: 0x70
    SCharacterValidationParams validationParams; // Offset: 0x80
    ARDataType featureType; // Offset: 0x90
    uint8_t _pad_5[0x4]; // Offset: 0x94
    SCustomizableMaterialParams materialParams; // Offset: 0x98
    bool precacheSkinMaterials; // Offset: 0xa8
    bool supportsSubFeatureSelection; // Offset: 0xa9
    uint8_t _pad_6[0x6]; // Offset: 0xaa
    SCharacterCustomizerClippingVolumeParams clippingVolumeParams; // Offset: 0xb0
    SCharacterCustomizerClippingVolumeParams advancedModeClippingVolumeParams; // Offset: 0xd8
    bool addEmptyEntry; // Offset: 0x100
    uint8_t _pad_7[0x7]; // Offset: 0x101
    Vec3 featureLibOffset; // Offset: 0x108
    Vec3 advancedModeLibOffset; // Offset: 0x120
    float featureLibScrollTrim; // Offset: 0x138
    float advancedModeFeatureLibScrollTrim; // Offset: 0x13c
    ARDataType itemSelectMode; // Offset: 0x140
    uint8_t _pad_8[0x4]; // Offset: 0x144
    ARDataType slot; // Offset: 0x148
    uint8_t _pad_9[0x4]; // Offset: 0x14c
    DynArray_int32_t* subMaterialsToEdit; // Offset: 0x150 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x158
    SCharacterCustomizerTextureList textures; // Offset: 0x180
    SCharacterCustomizerClampedValueParams smoothLimits; // Offset: 0x1b8
    SCharacterCustomizerClampedValueParams metalLimits; // Offset: 0x1d0
    SCharacterCustomizerClampedValueParams opacityLimits; // Offset: 0x1e8
    int32_t basicModeChannel; // Offset: 0x200
    uint8_t _pad_11[0x4]; // Offset: 0x204
};

// Original name: SCharacterCustomizerMakeupSlotRandomizationParams
// Size: 0x20
// VTable: 0x149a0c6e8
struct SCharacterCustomizerMakeupSlotRandomizationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float noMakeupProbability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SCharacterCustomizerMakeupSlot makeupSlot; // Offset: 0x10
};

// Original name: SCharacterCustomizerMaterialEditParams
// Size: 0xa0
// VTable: 0x149a0e048
struct SCharacterCustomizerMaterialEditParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCharacterCustomizerBlemishMapParams* blemishMaps; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SCharacterCustomizerSkinBaseMaterialList* baseSkinMaterials; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    float hairDyeShiftMinFadeOut; // Offset: 0x68
    uint8_t _pad_3[0x4]; // Offset: 0x6c
    DynArray_SCharacterCustomizerHairLengthEntry* hairLengths; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x78
};

// Original name: SCharacterCustomizerRandomizationOverrideParams
// Size: 0x28
// VTable: 0x149a0d8a8
struct SCharacterCustomizerRandomizationOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCharacterCustomizerFeatureBase feature; // Offset: 0x8
    SCharacterCustomizerRandomizationParams randomizationParams; // Offset: 0x18
};

// Original name: SCharacterCustomizerStep
// Size: 0x70
// VTable: 0x149a0cf08
struct SCharacterCustomizerStep {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    DynArray_SCharacterCustomizerFeatureBase* features; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    bool isVisible; // Offset: 0x50
    bool uiVisible; // Offset: 0x51
    uint8_t _pad_3[0x6]; // Offset: 0x52
    CryStringT* iconPath; // Offset: 0x58
    uint8_t _pad_4[0x8]; // Offset: 0x60
    bool playerDummyVisible; // Offset: 0x68
    bool allowFlowgraphTransition; // Offset: 0x69
    uint8_t _pad_5[0x6]; // Offset: 0x6a
};

// Original name: SCharacterCustomizerTattooRandomizationParams
// Size: 0x30
// VTable: 0x149a0c870
struct SCharacterCustomizerTattooRandomizationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float noTattooProbability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec2 tattooAgeLimits; // Offset: 0x10
    SCharacterCustomizerFeatureTextureSelect tattooFeatureParams; // Offset: 0x20
};

// Original name: SCharacterCustomizerVertexParams
// Size: 0x58
// VTable: 0x149a0d6c8
struct SCharacterCustomizerVertexParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t vertexId; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    DynArray_SCharacterCustomizerVertexParams* ignoreList; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    float shapingTolerance; // Offset: 0x50
    uint8_t _pad_4[0x4]; // Offset: 0x54
};

// Original name: SCharacterCustomizerVoiceParams
// Size: 0x48
// VTable: 0x149a0e368
struct SCharacterCustomizerVoiceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SModelVoiceTagPair* modelVoiceTagPairs; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SChargeDrainPrimeParams
// Size: 0xe8
// VTable: 0x149a76f50
struct SChargeDrainPrimeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool allowPriming; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t minPrimeAmount; // Offset: 0xc
    int32_t maxPrimeAmount; // Offset: 0x10
    float minToMaxChargeTime; // Offset: 0x14
    float resourceRatePrimeScalar; // Offset: 0x18
    float unstablePrimingModifier; // Offset: 0x1c
    float baseStorageTime; // Offset: 0x20
    float additionalStorageTimePerVolt; // Offset: 0x24
    float minigameRadius; // Offset: 0x28
    float secondsToFail; // Offset: 0x2c
    float recoilInterval; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    WeaponProceduralRecoilConfigDef boostingRecoil; // Offset: 0x38
    WeaponProceduralRecoilConfigDef voltBoostStateRecoil; // Offset: 0x50
    WeaponProceduralRecoilConfigDef voltBoostUnleashRecoil; // Offset: 0x68
    WeaponProceduralRecoilConfigDef voltBoostDumpRecoil; // Offset: 0x80
    DamageBase damage; // Offset: 0x98
    float hitRadius; // Offset: 0xa8
    uint8_t _pad_3[0x4]; // Offset: 0xac
    CryStringT* hitType; // Offset: 0xb0
    uint8_t _pad_4[0x8]; // Offset: 0xb8
    float minChargeLossPercentage; // Offset: 0xc0
    float maxChargeLossPercentage; // Offset: 0xc4
    float lowerRandomLossLimitPercentage; // Offset: 0xc8
    float upperRandomLossLimitPercentage; // Offset: 0xcc
    Tag chargeFireActionTag; // Offset: 0xd0
};

// Original name: SCommunicationUserComponentParams
// Size: 0x70
// VTable: 0x14997e038
struct SCommunicationUserComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CommunicationConfig communicationConfig; // Offset: 0x18
    VoiceBundle voiceBundle; // Offset: 0x30
    VoiceSingle voiceSingle; // Offset: 0x48
    CryStringT* contextualDialog; // Offset: 0x60
    uint8_t _pad_1[0x8]; // Offset: 0x68
};

// Original name: SConditionalWeaponAction
// Size: 0x28
// VTable: 0x149a6ecc8
struct SConditionalWeaponAction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SWeaponConditionBase condition; // Offset: 0x8
    SWeaponActionParams weaponAction; // Offset: 0x18
};

// Original name: SControlledEntityDynamicTransformParams
// Size: 0x228
// VTable: 0x1499cf928
struct SControlledEntityDynamicTransformParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityReferenceDef* dynamicTargets; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_EntityClassDefinition* classTargets; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_EntityReferenceDef* dynamicNoGrabTargets; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_EntityClassDefinition* classNoGrabTargets; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    Vec3 projectionDirection; // Offset: 0xc8
    Vec3 attachmentOffset; // Offset: 0xe0
    Vec3 pullRange; // Offset: 0xf8
    float pullStrength; // Offset: 0x110
    uint8_t _pad_5[0x4]; // Offset: 0x114
    EntityReferenceDef pullReferenceEntity; // Offset: 0x118
    float grabRange; // Offset: 0x130
    bool canGrab; // Offset: 0x134
    uint8_t _pad_6[0x3]; // Offset: 0x135
    SControlledEntityAutoCraneData autoCraneData; // Offset: 0x138
};

// Original name: SControlledEntityGroupCondition
// Size: 0x28
// VTable: 0x1499cf250
struct SControlledEntityGroupCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TriggerConditionDataDef condition; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: SControlledEntityParams
// Size: 0x2d8
// VTable: 0x1499cfc68
struct SControlledEntityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    EntityReferenceDef entity; // Offset: 0x18
    SControlledEntityTransformParams transformParams; // Offset: 0x30
    bool toggleKinematicPhysics; // Offset: 0x2b8
    bool forceAwake; // Offset: 0x2b9
    uint8_t _pad_2[0x6]; // Offset: 0x2ba
    SControlledEntityIFCSParams ifcsParams; // Offset: 0x2c0
};

// Original name: SControlledEntityTransformParams
// Size: 0x288
// VTable: 0x1499cfa70
struct SControlledEntityTransformParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 axisMovementSpeed; // Offset: 0x8
    float axisRotationSpeed; // Offset: 0x20
    float scaleSpeed; // Offset: 0x24
    float minScale; // Offset: 0x28
    float maxScale; // Offset: 0x2c
    DynArray_SControlledEntityStaticTransformParams* staticTargets; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
    SControlledEntityDynamicTransformParams dynamicTargetParams; // Offset: 0x60
};

// Original name: SCraftingDictionary
// Size: 0x38
// VTable: 0x149a91e20
struct SCraftingDictionary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCraftingDictionaryEntry* dictionaryEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCraftingDictionaryEntry
// Size: 0x48
// VTable: 0x149a91dc8
struct SCraftingDictionaryEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* itemTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    CryStringT* mannequinFragmentTag; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
};

// Original name: SCriminalRecordHackingStateModifier
// Size: 0x40
// VTable: 0x149968840
struct SCriminalRecordHackingStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t maxUnchallengedRemovals; // Offset: 0x8
    float detectionChance; // Offset: 0xc
    SInteractionState onCrimeHackingDetectedState; // Offset: 0x10
    SItemPortDef itemPort; // Offset: 0x20
    CryStringT* detectionChanceMultiplierName; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x38
};

// Original name: SCriminalRecordStateModifier
// Size: 0x58
// VTable: 0x149968740
struct SCriminalRecordStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onInfractionSelectedState; // Offset: 0x8
    SInteractionState onInfractionAddedState; // Offset: 0x18
    SInteractionState onInfractionRemovedState; // Offset: 0x28
    SInteractionState onInfractionPaidState; // Offset: 0x38
    SInteractionState onInfractionRemoveTimeEndState; // Offset: 0x48
};

// Original name: SCriticalMalfunctionStates
// Size: 0x38
// VTable: 0x149a097d0
struct SCriticalMalfunctionStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState safeState; // Offset: 0x8
    SInteractionState selfDestructState; // Offset: 0x18
    SInteractionState criticalMalfunctionState; // Offset: 0x28
};

// Original name: SCustomizableMaterialParams
// Size: 0xb0
// VTable: 0x149a0c9c0
struct SCustomizableMaterialParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* attachmentName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    ARDataType itemType; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
    DynArray_int32_t* submaterialsToEdit; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
    DynArray_SCustomizableMaterialParams* linkedMaterials; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x68
    CryStringT* additionalFlags; // Offset: 0x90
    uint8_t _pad_6[0x8]; // Offset: 0x98
    SCharacterValidationParams validationParams; // Offset: 0xa0
};

// Original name: SCuttableState
// Size: 0x30
// VTable: 0x1499d7ab0
struct SCuttableState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState state; // Offset: 0x8
    SCuttableShapeDefinition cuttableShape; // Offset: 0x18
};

// Original name: SCuttableStateModifier
// Size: 0x40
// VTable: 0x1499d7b38
struct SCuttableStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCuttableState cuttableState; // Offset: 0x8
    bool detachOnCuttablesCompleted; // Offset: 0x38
    uint8_t _pad_1[0x7]; // Offset: 0x39
};

// Original name: SDamageMapStateModifier
// Size: 0x38
// VTable: 0x149a172e8
struct SDamageMapStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRangeStateLevel* stateRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SDamageMisfireEffect
// Size: 0x48
// VTable: 0x149a095f0
struct SDamageMisfireEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag effectTrigger; // Offset: 0x8
    Tag effectTag; // Offset: 0x20
    SMisfireDamage damageValue; // Offset: 0x38
};

// Original name: SDashboardConsumableInteractionParams
// Size: 0x18
// VTable: 0x149a59830
struct SDashboardConsumableInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams consumableIP; // Offset: 0x8
};

// Original name: SDashboardEffectParams
// Size: 0x20
// VTable: 0x149a59b60
struct SDashboardEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag usedEffectTag; // Offset: 0x8
};

// Original name: SDashboardEngineInteractionParams
// Size: 0x18
// VTable: 0x149a59720
struct SDashboardEngineInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams engineIP; // Offset: 0x8
};

// Original name: SDashboardInteractionParams
// Size: 0x80
// VTable: 0x149a59b00
struct SDashboardInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams flightReady; // Offset: 0x8
    SSharedInteractionParams powerOn; // Offset: 0x18
    SSharedInteractionParams powerOff; // Offset: 0x28
    SSharedInteractionParams saveQuitInteraction; // Offset: 0x38
    SSharedInteractionParams atcOpenDoorsInteraction; // Offset: 0x48
    SSharedInteractionParams atcCloseDoorsInteraction; // Offset: 0x58
    SSharedInteractionParams ejectCargo; // Offset: 0x68
    bool hasSimpleStartupSequence; // Offset: 0x78
    bool closeDoorsWhenFlightReady; // Offset: 0x79
    uint8_t _pad_1[0x6]; // Offset: 0x7a
};

// Original name: SDashboardPowerInteractionParams
// Size: 0x18
// VTable: 0x149a596c0
struct SDashboardPowerInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams powerIP; // Offset: 0x8
};

// Original name: SDashboardQuantumInterdictionParams
// Size: 0x28
// VTable: 0x149a598b8
struct SDashboardQuantumInterdictionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams quantumInterdictionIP; // Offset: 0x8
    SInteractionPointParams toggleJammingIP; // Offset: 0x18
};

// Original name: SDashboardSeatInteractionParams
// Size: 0x58
// VTable: 0x149a59660
struct SDashboardSeatInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams closeIP; // Offset: 0x8
    SInteractionPointParams openIP; // Offset: 0x18
    SInteractionPointParams exitIP; // Offset: 0x28
    SInteractionPointParams ejectionIP; // Offset: 0x38
    SInteractionPointParams cycleHUDIP; // Offset: 0x48
};

// Original name: SDashboardSystemInteractionParams
// Size: 0x38
// VTable: 0x149a597d0
struct SDashboardSystemInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams doorsIP; // Offset: 0x8
    SInteractionPointParams landingIP; // Offset: 0x18
    SInteractionPointParams cargoIP; // Offset: 0x28
};

// Original name: SDashboardWeaponInteractionParams
// Size: 0x38
// VTable: 0x149a59960
struct SDashboardWeaponInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams weaponIP; // Offset: 0x8
    SInteractionPointParams turretIP; // Offset: 0x18
    SInteractionPointParams remoteCameraIP; // Offset: 0x28
};

// Original name: SDegradationStateModifier
// Size: 0x50
// VTable: 0x1499d7708
struct SDegradationStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRangeStateLevel* stateRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ARDataType accumulator; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
    SInteractionState expiredState; // Offset: 0x40
};

// Original name: SDespawnerParams
// Size: 0x80
// VTable: 0x1499ed470
struct SDespawnerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SItemPortDef* despawningPorts; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    float delay; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    DynArray_SSequencerDespawnerTaskParams* despawnerTasks; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
};

// Original name: SDestroyAttachedItemGameplayTrigger
// Size: 0x80
// VTable: 0x1499fabf8
struct SDestroyAttachedItemGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x8
    DynArray_ARDataType* itemTypes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_ARDataType* itemSubTypes; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    bool damageAttachedItem; // Offset: 0x78
    uint8_t _pad_3[0x7]; // Offset: 0x79
};

// Original name: SDetachItemGameplayTrigger
// Size: 0x38
// VTable: 0x1499facb0
struct SDetachItemGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x8
    Vec3 impulseDirection; // Offset: 0x18
    float impulseStrength; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
};

// Original name: SDragDropUsableUserConfig
// Size: 0x40
// VTable: 0x149a82c90
struct SDragDropUsableUserConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    UseChannelArchetype useChannelArchetype; // Offset: 0x8
    SSharedInteractionParams interactionDragOut; // Offset: 0x20
    SSharedInteractionParams interactionDropIn; // Offset: 0x30
};

// Original name: SDummyPlayerComponentParams
// Size: 0x4f0
// VTable: 0x149a340b0
struct SDummyPlayerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Character character; // Offset: 0x18
    bool isAIControlled; // Offset: 0x30
    bool flyInGroundState; // Offset: 0x31
    uint8_t _pad_1[0x2]; // Offset: 0x32
    float aimFOV; // Offset: 0x34
    float maxLookAimAngle; // Offset: 0x38
    float maxDeltaAngleRateNormal; // Offset: 0x3c
    int32_t aimIKLayer; // Offset: 0x40
    int32_t lookIKLayer; // Offset: 0x44
    CharacterNameData characterNameData; // Offset: 0x48
    ActorSkeletonConfig skeletonConfig; // Offset: 0x60
    JumpFallLandParams jumpFallLandParams; // Offset: 0x78
    LedgeGrabbingParams ledgeGrabbingParams; // Offset: 0x90
    JumpFallLandConfig jumpFallLandConfig; // Offset: 0xa8
    CarryConfig carryConfig; // Offset: 0xc0
    LadderConfig ladderConfig; // Offset: 0xd8
    LadderConfig ladderConfigV2; // Offset: 0xf0
    WeaponProceduralAnimation proceduralAnimationRecord; // Offset: 0x108
    ActorMovementModifiers movementModifiersRecord; // Offset: 0x120
    ActorMovementSetsConfig movementSetsRecord; // Offset: 0x138
    PlayerAnimatedInteractionConfig playerAnimatedInteractionConfig; // Offset: 0x150
    bool isMinimal; // Offset: 0x168
    uint8_t _pad_2[0x3]; // Offset: 0x169
    ARDataType aiDefaultStance; // Offset: 0x16c
    ARDataType actorType; // Offset: 0x170
    uint8_t _pad_3[0x4]; // Offset: 0x174
    ActorStanceConfig stancesDataRecord; // Offset: 0x178
    ActorStatusComponent actorStatusRecord; // Offset: 0x190
    ActorStatusComponent actorStatusRecordEA; // Offset: 0x1a8
    ActorStatusComponent actorStatusRecordSQ42; // Offset: 0x1c0
    TakeDownConfig takeDownConfig; // Offset: 0x1d8
    WeaponMisfireFixConfig misfireFixConfig; // Offset: 0x1f0
    SActorHitReactionsDef hitReactionsDefRecord; // Offset: 0x208
    SActorForceReactionsDef forceReactionsDefRecord; // Offset: 0x220
    SActorExternalForceResponseCameraShakeDef shakeRecordFirstPerson; // Offset: 0x238
    SActorExternalForceResponseCameraShakeDef shakeRecordThirdPerson; // Offset: 0x250
    ActorAimLimits actorAimLimits; // Offset: 0x268
    ActorLookLimits actorLookLimits; // Offset: 0x280
    ActorTurnAngles turnAngles; // Offset: 0x298
    HazardAwarenessParams hazardParams; // Offset: 0x2b0
    ActorDuckingParams duckingParams; // Offset: 0x2c8
    ActorGForceComponent gforceParamsRecord; // Offset: 0x2e0
    ActorGForceComponent gforceParamsRecordMasterModes; // Offset: 0x2f8
    ActorGForceHeadBob gforceHeadBobRecord; // Offset: 0x310
    ActorGForceCameraEffects gforceCameraEffectsRecord; // Offset: 0x328
    AdsCameraParams adsCameraDefaultParams; // Offset: 0x340
    ActorAbilityComponent abilityParamsRecord; // Offset: 0x350
    AudioBreathDefinition breathingParamsRecord; // Offset: 0x368
    ActorStaminaComponent staminaParamsRecord; // Offset: 0x380
    ActorEnvironmentComponent actorEnvironmentRecord; // Offset: 0x398
    ActorLookAheadVehicle defaultLookAheadRecord; // Offset: 0x3b0
    ActorLocomotionPersonality locomotionPersonalityRecord; // Offset: 0x3c8
    CLocIdentifier* actorSpecies; // Offset: 0x3e0
    WeaponPortsParams weaponPortsParams; // Offset: 0x3e8
    SSharedInteractionParams swapOutfitInteraction; // Offset: 0x440
    WingmanOrderList wingmanOrders; // Offset: 0x450
    ActorTargetedParams actorTargetedParams; // Offset: 0x468
    ActorSlidingParams actorSlidingParams; // Offset: 0x480
    ActorZeroGTraversalParams actorZeroGTraversalParams; // Offset: 0x498
    FoleyDefinition baseFoleyDef; // Offset: 0x4b0
    FoleyFootstepDefinition baseFootstepDef; // Offset: 0x4c8
    SActorDeathBehaviour deathBehaviour; // Offset: 0x4e0
};

// Original name: SEAFPSGunGameArmorLevel
// Size: 0x68
// VTable: 0x149a3b9b8
struct SEAFPSGunGameArmorLevel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition armorArms; // Offset: 0x8
    EntityClassDefinition armorHelmet; // Offset: 0x20
    EntityClassDefinition armorLegs; // Offset: 0x38
    EntityClassDefinition armorTorso; // Offset: 0x50
};

// Original name: SEAFPSGunGameArmorSet
// Size: 0x38
// VTable: 0x149a3ba10
struct SEAFPSGunGameArmorSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEAFPSGunGameArmorLevel* armorLevels; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SEAFPSGunGameWeaponLists
// Size: 0x40
// VTable: 0x149a3ba98
struct SEAFPSGunGameWeaponLists {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t badgeId; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_SEAFPSGunGameWeaponSetup* weaponList; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SEAFPSGunGameWeaponSetup
// Size: 0x80
// VTable: 0x149a3b8e8
struct SEAFPSGunGameWeaponSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* weaponVariants; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    EntityClassDefinition barrelAttachment; // Offset: 0x38
    EntityClassDefinition ironSightAttachment; // Offset: 0x50
    EntityClassDefinition underBarrelAttachment; // Offset: 0x68
};

// Original name: SEAGlobalEventLoadouts
// Size: 0x38
// VTable: 0x149a3b790
struct SEAGlobalEventLoadouts {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEAGlobalSpecialLoadout* loadouts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SEAGlobalSpecialLoadout
// Size: 0x68
// VTable: 0x149a3b738
struct SEAGlobalSpecialLoadout {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEALoadoutSet* sharedLoadouts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SEALoadoutCollection* teamLoadouts; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SEALoadoutAttachment
// Size: 0x28
// VTable: 0x149a3b458
struct SEALoadoutAttachment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType attachmentSlot; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    EntityClassDefinition attachementClass; // Offset: 0x10
};

// Original name: SEALoadoutCollection
// Size: 0x38
// VTable: 0x149a3b6b0
struct SEALoadoutCollection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEALoadoutSet* availableLoadouts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SEALoadoutExplicit
// Size: 0x30
// VTable: 0x149a3b4d8
struct SEALoadoutExplicit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPort; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    EntityClassDefinition itemClass; // Offset: 0x18
};

// Original name: SEALoadoutFPSGunGameSetup
// Size: 0x100
// VTable: 0x149a3bcd0
struct SEALoadoutFPSGunGameSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool loadCustomizationSnapshot; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    SEAGlobalSpecialLoadout forcedLoadout; // Offset: 0x10
    EntityClassDefinition defaultMelee; // Offset: 0x28
    DynArray_SEAFPSGunGameWeaponLists* weaponLists; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
    DynArray_SEAFPSGunGameArmorSet* armorSets; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x78
    DynArray_EntityClassDefinition* lastKillHelmets; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa8
    ARDataType startingArmorLevel; // Offset: 0xd0
    int8_t armorDeathsForLevelPromotion; // Offset: 0xd4
    int8_t armorKillsForLevelDemotion; // Offset: 0xd5
    int8_t startCatchupMax; // Offset: 0xd6
    uint8_t _pad_5[0x1]; // Offset: 0xd7
    float rankMessageTime; // Offset: 0xd8
    uint8_t _pad_6[0x4]; // Offset: 0xdc
    CLocIdentifier* locIdRankUp; // Offset: 0xe0
    CLocIdentifier* locIdRankDown; // Offset: 0xe8
    CLocIdentifier* locIdArmorUp; // Offset: 0xf0
    CLocIdentifier* locIdArmorDown; // Offset: 0xf8
};

// Original name: SEALoadoutItem
// Size: 0x88
// VTable: 0x149a3b5a8
struct SEALoadoutItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemSlot; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    EntityClassDefinition itemClass; // Offset: 0x10
    DynArray_SEALoadoutAttachment* itemAttachements; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    DynArray_SEALoadoutExplicit* itemExplicit; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
};

// Original name: SEALoadoutSet
// Size: 0x50
// VTable: 0x149a3b650
struct SEALoadoutSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CryStringT* icon; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    DynArray_SEALoadoutItem* itemSlots; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: SEALoadoutSetup
// Size: 0x28
// VTable: 0x149a3b818
struct SEALoadoutSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool loadCustomizationSnapshot; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    SEAGlobalSpecialLoadout forcedLoadout; // Offset: 0x10
};

// Original name: SEAPlayerLoadoutSnapshotEntry
// Size: 0x18
// VTable: 0x149a3bd30
struct SEAPlayerLoadoutSnapshotEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortLoadoutBaseParams loadout; // Offset: 0x8
};

// Original name: SEAPlayerLoadoutSnapshots
// Size: 0x38
// VTable: 0x149a3bd90
struct SEAPlayerLoadoutSnapshots {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEAPlayerLoadoutSnapshotEntry* entries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SEAPlayerSpawnProperties
// Size: 0xb0
// VTable: 0x149a3aea8
struct SEAPlayerSpawnProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool autoEquipDefaultWeapon; // Offset: 0x8
    bool enableAllCarrableInteractions; // Offset: 0x9
    bool enableAllGrenadePickups; // Offset: 0xa
    bool importingPlayerCustomization; // Offset: 0xb
    float rezOutLoadoutTime; // Offset: 0xc
    DynArray_SLoadoutInventoryItem* inventoryItems; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    SEALoadoutSetup loadoutSetup; // Offset: 0x40
    DynArray_ARDataType* abilityLocks; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
    SEAGlobalEventLoadouts eventLoadouts; // Offset: 0x80
    SCustomizableMaterialLookupTable customizableMaterialsLookupTable; // Offset: 0x98
};

// Original name: SEASimpodSpawning
// Size: 0x160
// VTable: 0x149a86680
struct SEASimpodSpawning {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float spawnScreenForceSpawnTime; // Offset: 0x18
    float respawnInvulnerableTime; // Offset: 0x1c
    bool swapSpawnsOnNewRound; // Offset: 0x20
    bool hideRespawnPrompt; // Offset: 0x21
    bool playerCanSuicide; // Offset: 0x22
    bool ejectingIsDeath; // Offset: 0x23
    bool autoEnterRemoteTurret; // Offset: 0x24
    ARDataType spawnScreenMode; // Offset: 0x25
    bool forceSpawnOnGameStart; // Offset: 0x26
    bool forceRespawnOnGameStart; // Offset: 0x27
    SEASpawningLocalization localization; // Offset: 0x28
    SEASpawnRespawnSchedulerParams respawnScheduler; // Offset: 0x58
    SEASpawnLivesGovernor livesGovernor; // Offset: 0x68
    SEAPlayerSpawnProperties playerSpawnProperties; // Offset: 0x78
    SEAVehicleSpawnProperties vehicleSpawnProperties; // Offset: 0x128
};

// Original name: SEASpawnLocationParamsDef
// Size: 0xb0
// VTable: 0x149a284b0
struct SEASpawnLocationParamsDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* locationName; // Offset: 0x18
    CLocIdentifier* locationTextIcon; // Offset: 0x20
    CryStringT* locationImageIcon; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    Faction_LEGACY team; // Offset: 0x38
    DynArray_SEASpawnLocationVehicleSeatSlot* vehicleSeatSlots; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
    EAEntityEntitlement vehicleEntitlementFilter; // Offset: 0x80
    int32_t phase; // Offset: 0x90
    bool defaultLocation; // Offset: 0x94
    bool autoActivate; // Offset: 0x95
    bool abandonedVehicleCheck; // Offset: 0x96
    uint8_t _pad_3[0x1]; // Offset: 0x97
    float abandonedRange; // Offset: 0x98
    float abandonedTime; // Offset: 0x9c
    float delaySpawnsTime; // Offset: 0xa0
    bool invisibleLocation; // Offset: 0xa4
    uint8_t _pad_4[0x3]; // Offset: 0xa5
    float unlockReminderTime; // Offset: 0xa8
    bool allowUserRequestSpawn; // Offset: 0xac
    bool allowOnFoot; // Offset: 0xad
    uint8_t _pad_5[0x2]; // Offset: 0xae
};

// Original name: SEASpawnLocationVehicleSeatSlot
// Size: 0x88
// VTable: 0x149a281d0
struct SEASpawnLocationVehicleSeatSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF tagsDNF; // Offset: 0x8
    CryStringT* icon; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    CLocIdentifier* name; // Offset: 0x80
};

// Original name: SEASpawning
// Size: 0x160
// VTable: 0x149a3b3d0
struct SEASpawning {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float spawnScreenForceSpawnTime; // Offset: 0x18
    float respawnInvulnerableTime; // Offset: 0x1c
    bool swapSpawnsOnNewRound; // Offset: 0x20
    bool hideRespawnPrompt; // Offset: 0x21
    bool playerCanSuicide; // Offset: 0x22
    bool ejectingIsDeath; // Offset: 0x23
    bool autoEnterRemoteTurret; // Offset: 0x24
    ARDataType spawnScreenMode; // Offset: 0x25
    bool forceSpawnOnGameStart; // Offset: 0x26
    bool forceRespawnOnGameStart; // Offset: 0x27
    SEASpawningLocalization localization; // Offset: 0x28
    SEASpawnRespawnSchedulerParams respawnScheduler; // Offset: 0x58
    SEASpawnLivesGovernor livesGovernor; // Offset: 0x68
    SEAPlayerSpawnProperties playerSpawnProperties; // Offset: 0x78
    SEAVehicleSpawnProperties vehicleSpawnProperties; // Offset: 0x128
};

// Original name: SEAUISpawnScreenComponentParams
// Size: 0xe8
// VTable: 0x149a200b0
struct SEAUISpawnScreenComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* vehicleSlotLocString; // Offset: 0x18
    CryStringT* onFootSpawnIcon; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* defaultVehicleIcon; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
    bool generalSeating; // Offset: 0x40
    bool allSeatsSelectable; // Offset: 0x41
    uint8_t maxDisplayedSquadmates; // Offset: 0x42
    uint8_t _pad_3[0x1]; // Offset: 0x43
    float locationIconRadius; // Offset: 0x44
    float spawnDoubleClickTime; // Offset: 0x48
    uint8_t _pad_4[0x4]; // Offset: 0x4c
    SEAUISpawnScreenFPSEquipmentParams FPSEquipmentParams; // Offset: 0x50
    DynArray_EAUIMulticrewTypeOptionParams* multicrewTypeOption; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x90
    DynArray_SelectionTab* selectionTabs; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xc0
};

// Original name: SEAUISpawnScreenFPSEquipmentCategoryParams
// Size: 0x80
// VTable: 0x149a1fd10
struct SEAUISpawnScreenFPSEquipmentCategoryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayNameLoc; // Offset: 0x8
    ARDataType itemSlot; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    TagsDNF equipmentTags; // Offset: 0x18
};

// Original name: SEAUISpawnScreenFPSEquipmentParams
// Size: 0x38
// VTable: 0x149a1fe40
struct SEAUISpawnScreenFPSEquipmentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEAUISpawnScreenFPSEquipmentSlotParams* slots; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SEAUISpawnScreenFPSEquipmentSlotParams
// Size: 0x58
// VTable: 0x149a1fde8
struct SEAUISpawnScreenFPSEquipmentSlotParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* slotName; // Offset: 0x8
    CLocIdentifier* slotSelectionText; // Offset: 0x10
    CryStringT* icon; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    DynArray_SEAUISpawnScreenFPSEquipmentCategoryParams* categories; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: SEAVehicleSpawnProperties
// Size: 0x38
// VTable: 0x149a3b040
struct SEAVehicleSpawnProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableVehicleSpawnLocations; // Offset: 0x8
    bool spawnWithLandingOffset; // Offset: 0x9
    bool explosionOnSelfDestruct; // Offset: 0xa
    bool overrideSelfDestructTimer; // Offset: 0xb
    bool allowVehicleSelectionScreen; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float selfDestructTimer; // Offset: 0x10
    float rezOutDestructTime; // Offset: 0x14
    EAEntityEntitlement ownedEntitlement; // Offset: 0x18
    EAEntityEntitlement communalEntitlement; // Offset: 0x28
};

// Original name: SEffectParamsNodeParticle
// Size: 0x158
// VTable: 0x14999b820
struct SEffectParamsNodeParticle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* GeomTags; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SEffectParamParticle ParticleParams; // Offset: 0x18
    DynArray_SEffectParamsNodeParticle* SubNodes; // Offset: 0x128 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x130
};

// Original name: SEffectParamsNodeSound
// Size: 0x158
// VTable: 0x14999b8d0
struct SEffectParamsNodeSound {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* GeomTags; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SEffectParamSound SoundParams; // Offset: 0x18
    DynArray_SEffectParamsNodeSound* SubNodes; // Offset: 0x128 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x130
};

// Original name: SEntitityEffectSystem_System
// Size: 0x98
// VTable: 0x149999250
struct SEntitityEffectSystem_System {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityEffectSystem_ParticleCategory particleEffects; // Offset: 0x8
    EntityEffectSystem_MaterialCategory materialEffects; // Offset: 0x18
    SEntityEffectSystem_SoundCategory soundEffects; // Offset: 0x28
    SEntityEffectSystem_AudioEnvironmentCategory audioEnvironmentEffects; // Offset: 0x38
    EntityEffectSystem_LightCategory lightEffects; // Offset: 0x48
    SEntityEffectSystem_UIOwnerCategory uiOwnerEffects; // Offset: 0x58
    DynArray_EntityEffectSystem_BaseSequencerTask* sequencerTags; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x70
};

// Original name: SEntityAttachStateModifier
// Size: 0x28
// VTable: 0x1499a87b8
struct SEntityAttachStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onAttachState; // Offset: 0x8
    SInteractionState onDetachState; // Offset: 0x18
};

// Original name: SEntityAudioControllerParams
// Size: 0xa0
// VTable: 0x1499a94f0
struct SEntityAudioControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType audioControllerEntityType; // Offset: 0x18
    int32_t randomSeedCount; // Offset: 0x1c
    float offLODDistance; // Offset: 0x20
    float fullLODDistance; // Offset: 0x24
    float offToLowLODDistance; // Offset: 0x28
    float fullToLowLODDistance; // Offset: 0x2c
    float occlusionAttenuationScaler; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
    TagList tags; // Offset: 0x38
    DynArray_TagTrigger* tagTriggers; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x78
};

// Original name: SEntityComponentAtmosphereContainerParams
// Size: 0x68
// VTable: 0x14997a290
struct SEntityComponentAtmosphereContainerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType atmosphereType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    AtmosphereStateBase state; // Offset: 0x20
    SAtmosphericCompositionBaseParams atmosphericComposition; // Offset: 0x30
    AtmosphereBehavior behavior; // Offset: 0x40
    AtmosphereLifeSupportParams lifeSupport; // Offset: 0x58
};

// Original name: SEntityComponentCIGTestBParams
// Size: 0x818
// VTable: 0x1499dc2e8
struct SEntityComponentCIGTestBParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCIGTestBase wpTestBase_0; // Offset: 0x18
    SCIGTestBase wpTestBase_1; // Offset: 0x28
    DynArray_SCIGTestBase* wpTestBase_2; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
    DynArray_SCIGTestBase* wpTestBase_3; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x70
    SCIGTestB wpTestB_0; // Offset: 0x98
    SCIGTestB wpTestB_1; // Offset: 0xa8
    DynArray_SCIGTestB* wpTestB_2; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xc0
    DynArray_SCIGTestB* wpTestB_3; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xf0
    UnitTest refUnitTest_0; // Offset: 0x118
    UnitTest refUnitTest_1; // Offset: 0x130
    DynArray_UnitTest* refUnitTest_2; // Offset: 0x148 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x150
    DynArray_UnitTest* refUnitTest_3; // Offset: 0x178 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x180
    FactionPalette refPalette_0; // Offset: 0x1a8
    FactionPalette refPalette_1; // Offset: 0x1c0
    DynArray_FactionPalette* refPalette_2; // Offset: 0x1d8 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x1e0
    DynArray_FactionPalette* refPalette_3; // Offset: 0x208 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x210
    EntityClassDefinition refEntity_0; // Offset: 0x238
    EntityClassDefinition refEntity_1; // Offset: 0x250
    DynArray_EntityClassDefinition* refEntity_2; // Offset: 0x268 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x270
    DynArray_EntityClassDefinition* refEntity_3; // Offset: 0x298 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x2a0
    Tag refTag_0; // Offset: 0x2c8
    Tag refTag_1; // Offset: 0x2e0
    DynArray_Tag* refTag_2; // Offset: 0x2f8 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x300
    DynArray_Tag* refTag_3; // Offset: 0x328 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x330
    Vec3 Vec3_0; // Offset: 0x358
    Vec3 Vec3_1; // Offset: 0x370
    DynArray_Vec3* Vec3_2; // Offset: 0x388 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x390
    DynArray_Vec3* Vec3_3; // Offset: 0x3b8 // Pointer to DynArray struct
    uint8_t _pad_14[0x28]; // Offset: 0x3c0
    QuatT QuatT_0; // Offset: 0x3e8
    QuatT QuatT_1; // Offset: 0x440
    DynArray_QuatT* QuatT_2; // Offset: 0x498 // Pointer to DynArray struct
    uint8_t _pad_15[0x28]; // Offset: 0x4a0
    DynArray_QuatT* QuatT_3; // Offset: 0x4c8 // Pointer to DynArray struct
    uint8_t _pad_16[0x28]; // Offset: 0x4d0
    RGB8 LRGB__8_0; // Offset: 0x4f8
    RGB8 LRGB__8_1; // Offset: 0x508
    DynArray_RGB8* LRGB__8_2; // Offset: 0x518 // Pointer to DynArray struct
    uint8_t _pad_17[0x28]; // Offset: 0x520
    DynArray_RGB8* LRGB__8_3; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_18[0x28]; // Offset: 0x550
    RGBA8 LRGBA_8_0; // Offset: 0x578
    RGBA8 LRGBA_8_1; // Offset: 0x588
    DynArray_RGBA8* LRGBA_8_2; // Offset: 0x598 // Pointer to DynArray struct
    uint8_t _pad_19[0x28]; // Offset: 0x5a0
    DynArray_RGBA8* LRGBA_8_3; // Offset: 0x5c8 // Pointer to DynArray struct
    uint8_t _pad_20[0x28]; // Offset: 0x5d0
    RGB LRGB__F_0; // Offset: 0x5f8
    RGB LRGB__F_1; // Offset: 0x610
    DynArray_RGB* LRGB__F_2; // Offset: 0x628 // Pointer to DynArray struct
    uint8_t _pad_21[0x28]; // Offset: 0x630
    DynArray_RGB* LRGB__F_3; // Offset: 0x658 // Pointer to DynArray struct
    uint8_t _pad_22[0x28]; // Offset: 0x660
    RGBA LRGBA_F_0; // Offset: 0x688
    RGBA LRGBA_F_1; // Offset: 0x6a0
    DynArray_RGBA* LRGBA_F_2; // Offset: 0x6b8 // Pointer to DynArray struct
    uint8_t _pad_23[0x28]; // Offset: 0x6c0
    DynArray_RGBA* LRGBA_F_3; // Offset: 0x6e8 // Pointer to DynArray struct
    uint8_t _pad_24[0x28]; // Offset: 0x6f0
    SRGB8 SRGB__8_0; // Offset: 0x718
    SRGB8 SRGB__8_1; // Offset: 0x728
    DynArray_SRGB8* SRGB__8_2; // Offset: 0x738 // Pointer to DynArray struct
    uint8_t _pad_25[0x28]; // Offset: 0x740
    DynArray_SRGB8* SRGB__8_3; // Offset: 0x768 // Pointer to DynArray struct
    uint8_t _pad_26[0x28]; // Offset: 0x770
    SRGBA8 SRGBA_8_0; // Offset: 0x798
    SRGBA8 SRGBA_8_1; // Offset: 0x7a8
    DynArray_SRGBA8* SRGBA_8_2; // Offset: 0x7b8 // Pointer to DynArray struct
    uint8_t _pad_27[0x28]; // Offset: 0x7c0
    DynArray_SRGBA8* SRGBA_8_3; // Offset: 0x7e8 // Pointer to DynArray struct
    uint8_t _pad_28[0x28]; // Offset: 0x7f0
};

// Original name: SEntityComponentCarryableParams
// Size: 0x4d8
// VTable: 0x149a6b7b0
struct SEntityComponentCarryableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams carryInteraction; // Offset: 0x18
    SSharedInteractionParams placeInteraction; // Offset: 0x28
    SSharedInteractionParams dropInteraction; // Offset: 0x38
    SSharedInteractionParams equipToItemportInteraction; // Offset: 0x48
    SSharedInteractionParams offHandEquipToItemportInteraction; // Offset: 0x58
    SSharedInteractionParams storeInteraction; // Offset: 0x68
    SSharedInteractionParams offHandStoreInteraction; // Offset: 0x78
    SSharedInteractionParams holdReadyInteraction; // Offset: 0x88
    SSharedInteractionParams equipWearableInteraction; // Offset: 0x98
    SSharedInteractionParams inspectInteraction; // Offset: 0xa8
    SSharedInteractionParams flipInteraction; // Offset: 0xb8
    SSharedInteractionParams swapAttachmentsInteraction; // Offset: 0xc8
    SSharedInteractionParams attachToHeldItemInteraction; // Offset: 0xd8
    SCarryableStatesParams carryableStatesParams; // Offset: 0xe8
    CryStringT* enslavementAnimationDatabase; // Offset: 0x1a0
    uint8_t _pad_1[0x8]; // Offset: 0x1a8
    SGripContainer gripData; // Offset: 0x1b0
    DynArray_ARDataType* abilityLocks; // Offset: 0x1f0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x1f8
    DynArray_SSequencerCarryableTaskParams* carryableTasks; // Offset: 0x220 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x228
    SThrowableParams throwableParams; // Offset: 0x250
    SCEquipableParams equipWearableParams; // Offset: 0x350
    SInteractionPointParams interactionPointToMoveOnEquip; // Offset: 0x368
    SCarryableIKInteractionList ikInteractionsRecord; // Offset: 0x378
    DynArray_SCarryableSequenceRef* carryableSequences; // Offset: 0x390 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x398
    SCarryableInteractionPointOffsets interactionPointOffsets; // Offset: 0x3c0
    bool canBeCarriedInProne; // Offset: 0x4d0
    uint8_t _pad_5[0x7]; // Offset: 0x4d1
};

// Original name: SEntityComponentCorpseMarkerParams
// Size: 0x30
// VTable: 0x149a4aae0
struct SEntityComponentCorpseMarkerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Marker_Configuration markerConfig; // Offset: 0x18
};

// Original name: SEntityComponentCrewManifestParams
// Size: 0x30
// VTable: 0x149a5d9c0
struct SEntityComponentCrewManifestParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CrewManifest crewManifest; // Offset: 0x18
};

// Original name: SEntityComponentDefaultLoadoutParams
// Size: 0x28
// VTable: 0x1499a6a50
struct SEntityComponentDefaultLoadoutParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SItemPortLoadoutBaseParams loadout; // Offset: 0x18
};

// Original name: SEntityComponentEffects
// Size: 0x170
// VTable: 0x149999450
struct SEntityComponentEffects {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntitityEffectSystem_System entityEffects; // Offset: 0x18
    DynArray_EntitityEffectSystem_StaticFloat* staticValues; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0xb8
    DynArray_EntitityEffectSystem_StaticColor* staticColors; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xe8
    DynArray_Tag* tagsToEnableOnLoad; // Offset: 0x110 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x118
    DynArray_Tag* triggersToEnableOnLoad; // Offset: 0x140 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x148
};

// Original name: SEntityComponentEffects_Test
// Size: 0xd8
// VTable: 0x149999798
struct SEntityComponentEffects_Test {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_EntityComponentEffects_Test_Tag* tags; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_EntityComponentEffects_Test_Trigger* triggers; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_EntityComponentEffects_Test_Link* parameters; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
    DynArray_EntityComponentEffects_Test_ColorLink* colorParameters; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xb0
};

// Original name: SEntityComponentHostilityCompositeParams
// Size: 0x60
// VTable: 0x149966818
struct SEntityComponentHostilityCompositeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Faction emptyFactionSC; // Offset: 0x18
    Faction_LEGACY emptyFaction; // Offset: 0x30
    SHostilityWantedLevelParams wantedLevelHostility; // Offset: 0x48
    bool useOnlyPrimaryChildForHostility; // Offset: 0x58
    uint8_t _pad_1[0x7]; // Offset: 0x59
};

// Original name: SEntityComponentHostilityParams
// Size: 0x58
// VTable: 0x1499666c0
struct SEntityComponentHostilityParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Faction factionSC; // Offset: 0x18
    Faction_LEGACY faction; // Offset: 0x30
    SHostilityWantedLevelParams wantedLevelHostility; // Offset: 0x48
};

// Original name: SEntityComponentOutfitHangerParams
// Size: 0xe0
// VTable: 0x149a468d0
struct SEntityComponentOutfitHangerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams equipInteraction; // Offset: 0x18
    SSharedInteractionParams hangInteraction; // Offset: 0x28
    SSharedInteractionParams swapInteraction; // Offset: 0x38
    SSharedInteractionParams swapAllInteraction; // Offset: 0x48
    SSharedInteractionParams equipAllInteraction; // Offset: 0x58
    SSharedInteractionParams hangAllInteraction; // Offset: 0x68
    SSharedInteractionParams disguiseSwapAllInteraction; // Offset: 0x78
    DynArray_TypeSubtypeParams* itemPortTypeSubtypes; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x90
    SAnimatedOutfitSwapData animatedOutfitSwap; // Offset: 0xb8
    SAnimatedOutfitSwapData animatedOutfitHang; // Offset: 0xc8
    bool destroyPlayerItems; // Offset: 0xd8
    uint8_t _pad_2[0x7]; // Offset: 0xd9
};

// Original name: SEntityComponentProceduralOCModifierParams
// Size: 0x58
// VTable: 0x1499d1808
struct SEntityComponentProceduralOCModifierParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float ExteriorWearFactor; // Offset: 0x18
    float ExteriorDirtFactor; // Offset: 0x1c
    float InteriorWearFactor; // Offset: 0x20
    float InteriorDirtFactor; // Offset: 0x24
    FactionPalette OCFactionPalette; // Offset: 0x28
    TintPaletteTree OverrideTintPalette; // Offset: 0x40
};

// Original name: SEntityComponentSequencerParams
// Size: 0x58
// VTable: 0x1499a59e8
struct SEntityComponentSequencerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SSequencerDefSequenceParams* sequences; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    SSequencerDefSequenceParams resetSequence; // Offset: 0x48
};

// Original name: SEntityComponentUnattendedVehicleMarkerParams
// Size: 0x30
// VTable: 0x149a4ab50
struct SEntityComponentUnattendedVehicleMarkerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Marker_Configuration markerConfig; // Offset: 0x18
};

// Original name: SEntityEffectSystem_Attachment
// Size: 0x78
// VTable: 0x149998f58
struct SEntityEffectSystem_Attachment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT offset; // Offset: 0x8
    Tag offsetParameter; // Offset: 0x60
};

// Original name: SEntityEffectSystem_Attachment_BoneAttachment
// Size: 0x90
// VTable: 0x149998fe8
struct SEntityEffectSystem_Attachment_BoneAttachment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT offset; // Offset: 0x8
    Tag offsetParameter; // Offset: 0x60
    ARDataType attachmentZone; // Offset: 0x78
    uint8_t _pad_1[0x4]; // Offset: 0x7c
    CryStringT* boneAttachment; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
};

// Original name: SEntityEffectSystem_Attachment_BoneListAttachment
// Size: 0xb0
// VTable: 0x149999068
struct SEntityEffectSystem_Attachment_BoneListAttachment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT offset; // Offset: 0x8
    Tag offsetParameter; // Offset: 0x60
    ARDataType attachmentZone; // Offset: 0x78
    uint8_t _pad_1[0x4]; // Offset: 0x7c
    DynArray_CryStringT* boneAttachments; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x88
};

// Original name: SEntityEffectSystem_Attachment_EntitySlot
// Size: 0x78
// VTable: 0x149998f60
struct SEntityEffectSystem_Attachment_EntitySlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT offset; // Offset: 0x8
    Tag offsetParameter; // Offset: 0x60
};

// Original name: SEntityEffectSystem_AudioEnvironmentCategory
// Size: 0x70
// VTable: 0x149999d88
struct SEntityEffectSystem_AudioEnvironmentCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool allowMultipleTags; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect* tagEffects; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect* triggerEffects; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: SEntityEffectSystem_AudioEnvironmentFeedbackZone
// Size: 0x180
// VTable: 0x149999c48
struct SEntityEffectSystem_AudioEnvironmentFeedbackZone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    AudioEnvironmentFeedbackZoneSetup zone; // Offset: 0x20
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x38
    uint8_t _pad_3[0x138]; // Offset: 0x48
};

// Original name: SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect
// Size: 0x198
// VTable: 0x149999d00
struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTagEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    AudioEnvironmentFeedbackZoneSetup zone; // Offset: 0x20
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x38
    uint8_t _pad_3[0x138]; // Offset: 0x48
    Tag tag; // Offset: 0x180
};

// Original name: SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect
// Size: 0x198
// VTable: 0x149999ca0
struct SEntityEffectSystem_AudioEnvironmentFeedbackZoneTriggerEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    AudioEnvironmentFeedbackZoneSetup zone; // Offset: 0x20
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x38
    uint8_t _pad_3[0x138]; // Offset: 0x48
    Tag trigger; // Offset: 0x180
};

// Original name: SEntityEffectSystem_ParticleCategory
// Size: 0x70
// VTable: 0x14999abe8
struct SEntityEffectSystem_ParticleCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool allowMultipleTags; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    DynArray_SEntityEffectSystem_ParticleTagEffect* tagEffects; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_SEntityEffectSystem_ParticleTriggerEffect* triggerEffects; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: SEntityEffectSystem_ParticleEffect
// Size: 0x190
// VTable: 0x14999aaa8
struct SEntityEffectSystem_ParticleEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    GlobalResourceParticle particleEffect; // Offset: 0x20
    bool primed; // Offset: 0x38
    bool holographic; // Offset: 0x39
    bool updateEntityBounds; // Offset: 0x3a
    uint8_t _pad_3[0x1]; // Offset: 0x3b
    ARDataType clipToVisArea; // Offset: 0x3c
    ARDataType gpuVisAreaCullingMode; // Offset: 0x40
    uint8_t _pad_4[0x4]; // Offset: 0x44
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x48
    DynArray_SEntityEffectSystem_ParticlePropertyLink* propertyLinks; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_5[0x130]; // Offset: 0x60
};

// Original name: SEntityEffectSystem_ParticlePropertyLink
// Size: 0x60
// VTable: 0x14999a930
struct SEntityEffectSystem_ParticlePropertyLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEntityEffectSystem_PropertyModifier* modifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Tag parameterName; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x50
    ARDataType particleProperty; // Offset: 0x58
    uint8_t _pad_3[0x4]; // Offset: 0x5c
};

// Original name: SEntityEffectSystem_ParticleTagEffect
// Size: 0x1a8
// VTable: 0x14999ab60
struct SEntityEffectSystem_ParticleTagEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    GlobalResourceParticle particleEffect; // Offset: 0x20
    bool primed; // Offset: 0x38
    bool holographic; // Offset: 0x39
    bool updateEntityBounds; // Offset: 0x3a
    uint8_t _pad_3[0x1]; // Offset: 0x3b
    ARDataType clipToVisArea; // Offset: 0x3c
    ARDataType gpuVisAreaCullingMode; // Offset: 0x40
    uint8_t _pad_4[0x4]; // Offset: 0x44
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x48
    DynArray_SEntityEffectSystem_ParticlePropertyLink* propertyLinks; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_5[0x130]; // Offset: 0x60
    Tag tag; // Offset: 0x190
};

// Original name: SEntityEffectSystem_ParticleTriggerEffect
// Size: 0x1a8
// VTable: 0x14999ab00
struct SEntityEffectSystem_ParticleTriggerEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    GlobalResourceParticle particleEffect; // Offset: 0x20
    bool primed; // Offset: 0x38
    bool holographic; // Offset: 0x39
    bool updateEntityBounds; // Offset: 0x3a
    uint8_t _pad_3[0x1]; // Offset: 0x3b
    ARDataType clipToVisArea; // Offset: 0x3c
    ARDataType gpuVisAreaCullingMode; // Offset: 0x40
    uint8_t _pad_4[0x4]; // Offset: 0x44
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x48
    DynArray_SEntityEffectSystem_ParticlePropertyLink* propertyLinks; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_5[0x130]; // Offset: 0x60
    Tag trigger; // Offset: 0x190
};

// Original name: SEntityEffectSystem_PropertyLink
// Size: 0x58
// VTable: 0x1499990f8
struct SEntityEffectSystem_PropertyLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEntityEffectSystem_PropertyModifier* modifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Tag parameterName; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x50
};

// Original name: SEntityEffectSystem_SoundCategory
// Size: 0x70
// VTable: 0x14999ae88
struct SEntityEffectSystem_SoundCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool allowMultipleTags; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    DynArray_SEntityEffectSystem_SoundTagEffect* tagEffects; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_SEntityEffectSystem_SoundTriggerEffect* triggerEffects; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: SEntityEffectSystem_SoundEffect
// Size: 0x180
// VTable: 0x14999ad40
struct SEntityEffectSystem_SoundEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    GlobalResourceAudio soundEffect; // Offset: 0x20
    bool multiPosition; // Offset: 0x40
    bool useDefaultProxy; // Offset: 0x41
    uint8_t _pad_3[0x6]; // Offset: 0x42
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x48
    DynArray_SEntityEffectSystem_SoundPropertyLink* propertyLinks; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_4[0x120]; // Offset: 0x60
};

// Original name: SEntityEffectSystem_SoundPropertyLink
// Size: 0x78
// VTable: 0x14999ac40
struct SEntityEffectSystem_SoundPropertyLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEntityEffectSystem_PropertyModifier* modifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Tag parameterName; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x50
    AudioRtpc rtpc; // Offset: 0x58
};

// Original name: SEntityEffectSystem_SoundTagEffect
// Size: 0x198
// VTable: 0x14999ae00
struct SEntityEffectSystem_SoundTagEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    GlobalResourceAudio soundEffect; // Offset: 0x20
    bool multiPosition; // Offset: 0x40
    bool useDefaultProxy; // Offset: 0x41
    uint8_t _pad_3[0x6]; // Offset: 0x42
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x48
    DynArray_SEntityEffectSystem_SoundPropertyLink* propertyLinks; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_4[0x120]; // Offset: 0x60
    Tag tag; // Offset: 0x180
};

// Original name: SEntityEffectSystem_SoundTriggerEffect
// Size: 0x198
// VTable: 0x14999ada0
struct SEntityEffectSystem_SoundTriggerEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    GlobalResourceAudio soundEffect; // Offset: 0x20
    bool multiPosition; // Offset: 0x40
    bool useDefaultProxy; // Offset: 0x41
    uint8_t _pad_3[0x6]; // Offset: 0x42
    SEntityEffectSystem_Attachment attachmentSettings; // Offset: 0x48
    DynArray_SEntityEffectSystem_SoundPropertyLink* propertyLinks; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_4[0x120]; // Offset: 0x60
    Tag trigger; // Offset: 0x180
};

// Original name: SEntityEffectSystem_UIOwnerCategory
// Size: 0x70
// VTable: 0x14999b0c8
struct SEntityEffectSystem_UIOwnerCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool allowMultipleTags; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    DynArray_SEntityEffectSystem_UIOwnerTagEffect* tagEffects; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_SEntityEffectSystem_UIOwnerTriggerEffect* triggerEffects; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: SEntityEffectSystem_UIOwnerTagEffect
// Size: 0x120
// VTable: 0x14999b040
struct SEntityEffectSystem_UIOwnerTagEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0xcf]; // Offset: 0x19
    EntityEffectSystem_UIOwnerEvent_Goto uiOwnerStartEvent; // Offset: 0xe8
    EntityEffectSystem_UIOwnerEvent_Goto uiOwnerStopEvent; // Offset: 0xf8
    Tag tag; // Offset: 0x108
};

// Original name: SEntityEffectSystem_UIOwnerTriggerEffect
// Size: 0x118
// VTable: 0x14999af90
struct SEntityEffectSystem_UIOwnerTriggerEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0xcf]; // Offset: 0x19
    float duration; // Offset: 0xe8
    uint8_t _pad_3[0x4]; // Offset: 0xec
    EntityEffectSystem_UIOwnerEvent_Goto uiOwnerStartEvent; // Offset: 0xf0
    Tag trigger; // Offset: 0x100
};

// Original name: SEntityFireMisfireEffect
// Size: 0x40
// VTable: 0x149a09728
struct SEntityFireMisfireEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag effectTrigger; // Offset: 0x8
    Tag effectTag; // Offset: 0x20
    float strength; // Offset: 0x38
    float flashStrength; // Offset: 0x3c
};

// Original name: SEntityHoverPhysicsControllerComponentParams
// Size: 0x138
// VTable: 0x1499e8880
struct SEntityHoverPhysicsControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntityBasePhysicsControllerParams PhysType; // Offset: 0x18
    SEntityHoverPhysicsControllerParams hover; // Offset: 0x28
};

// Original name: SEntityHoverPhysicsControllerParams
// Size: 0x110
// VTable: 0x1499e8820
struct SEntityHoverPhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams interactionActivate; // Offset: 0x8
    SSharedInteractionParams interactionDeactivate; // Offset: 0x18
    bool activateHoverByDefault; // Offset: 0x28
    bool activateHoverOnGripAttached; // Offset: 0x29
    bool deactivateHoverOnGripDetached; // Offset: 0x2a
    uint8_t _pad_1[0x1]; // Offset: 0x2b
    float blendInDuration; // Offset: 0x2c
    float blendOutDuration; // Offset: 0x30
    float powerOffDesiredHoverHeight; // Offset: 0x34
    float maxHoverMass; // Offset: 0x38
    float maxRotationalAdjustmentTorque; // Offset: 0x3c
    float basePlaneHalfWidth; // Offset: 0x40
    float basePlaneHalfLength; // Offset: 0x44
    Vec3 basePlaneOriginOffset; // Offset: 0x48
    SEntityHoverPhysicsPartialParams hoverPhysicsIdle; // Offset: 0x60
    SEntityHoverPhysicsPartialParams hoverPhysicsGripAttached; // Offset: 0xb8
};

// Original name: SEntityInsuranceDisplayParams
// Size: 0x40
// VTable: 0x1499ba8f0
struct SEntityInsuranceDisplayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    CLocIdentifier* role; // Offset: 0x10
    int32_t crewSize; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* career; // Offset: 0x20
    SCItemManufacturer manufacturer; // Offset: 0x28
};

// Original name: SEntityInsuranceProperties
// Size: 0x78
// VTable: 0x1499ba9a0
struct SEntityInsuranceProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool restoreOnClaim; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    ShipInsuranceParams shipInsuranceParams; // Offset: 0x10
    SEntityInsuranceDisplayParams displayParams; // Offset: 0x38
};

// Original name: SEntityInteractableParams
// Size: 0x120
// VTable: 0x1499a5b70
struct SEntityInteractableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SInteractableParams Interactable; // Offset: 0x18
};

// Original name: SEntityLootableContainerParams
// Size: 0x2a0
// VTable: 0x149a45a80
struct SEntityLootableContainerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool initialLocalPlayerAccess; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float radius; // Offset: 0x1c
    Vec3 maxOffsetTranslation; // Offset: 0x20
    Ang3 maxOffsetRotation; // Offset: 0x38
    DynArray_SSharedInteractionParams* mainInteractions; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
    SLootableMainInteractionsTarget mainInteractionAnimTarget; // Offset: 0x80
    bool infiniteLootable; // Offset: 0x90
    bool smartRefillAmmo; // Offset: 0x91
    bool smartRefillGrenadesAndAmmo; // Offset: 0x92
    uint8_t _pad_3[0x5]; // Offset: 0x93
    SInteractionPointParams mainInteractionPoint; // Offset: 0x98
    CryStringT* validTagsOnSwapOutfit; // Offset: 0xa8
    uint8_t _pad_4[0x8]; // Offset: 0xb0
    CryStringT* blockingTagsOnSwapOutfit; // Offset: 0xb8
    uint8_t _pad_5[0x8]; // Offset: 0xc0
    DynArray_SOutfitPlacingRule* placeOutfitRules; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xd0
    DynArray_SItemPortDef* takeExclussionRules; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x100
    CryStringT* fragmentTags; // Offset: 0x128
    uint8_t _pad_8[0x8]; // Offset: 0x130
    bool forceFirstSelect; // Offset: 0x138
    uint8_t _pad_9[0x7]; // Offset: 0x139
    DynArray_SLootableItemPortRuleParams* itemPortRules; // Offset: 0x140 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x148
    SLootableInventoryParams lootInventoryParams; // Offset: 0x170
    DynArray_Tag* tagsOnAllItemPortsEmpty; // Offset: 0x180 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x188
    SSharedInteractionParams placeIntoPortInteraction; // Offset: 0x1b0
    bool bespokePlace; // Offset: 0x1c0
    uint8_t _pad_12[0x7]; // Offset: 0x1c1
    DynArray_Tag* bespokePlaceTags; // Offset: 0x1c8 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x1d0
    bool bespokeTake; // Offset: 0x1f8
    uint8_t _pad_14[0x7]; // Offset: 0x1f9
    DynArray_Tag* bespokeTakeTags; // Offset: 0x200 // Pointer to DynArray struct
    uint8_t _pad_15[0x28]; // Offset: 0x208
    SItemPortDef exactPlaceIntoPort; // Offset: 0x230
    DynArray_SOutfitHangerGroup* outfitHangerGroups; // Offset: 0x240 // Pointer to DynArray struct
    uint8_t _pad_16[0x28]; // Offset: 0x248
    DynArray_SCoreInventoryItem* coreInventoryItems; // Offset: 0x270 // Pointer to DynArray struct
    uint8_t _pad_17[0x28]; // Offset: 0x278
};

// Original name: SEntityOnlineStateModifier
// Size: 0x28
// VTable: 0x1499a8628
struct SEntityOnlineStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onEntityOnlineState; // Offset: 0x8
    SInteractionState onEntityOfflineState; // Offset: 0x18
};

// Original name: SEntityParticlePhysicsControllerParams
// Size: 0x90
// VTable: 0x1499e6da8
struct SEntityParticlePhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
    float radius; // Offset: 0x30
    float thickness; // Offset: 0x34
    float accThrust; // Offset: 0x38
    float airResistance; // Offset: 0x3c
    uint32_t pierceability; // Offset: 0x40
    float length; // Offset: 0x44
    ResourceType resourceType; // Offset: 0x48
    bool rayCollision; // Offset: 0x60
    bool traceable; // Offset: 0x61
    bool singleContact; // Offset: 0x62
    bool constantOrientation; // Offset: 0x63
    bool noRoll; // Offset: 0x64
    bool noSpin; // Offset: 0x65
    bool noPathAlignment; // Offset: 0x66
    bool noSelfCollision; // Offset: 0x67
    bool noImpulse; // Offset: 0x68
    bool decoupleHeading; // Offset: 0x69
    bool disableGravity; // Offset: 0x6a
    uint8_t _pad_2[0x1]; // Offset: 0x6b
    ARDataType aiNavigationType; // Offset: 0x6c
    CryStringT* surfaceIdName; // Offset: 0x70
    uint8_t _pad_3[0x18]; // Offset: 0x78
};

// Original name: SEntityRigidPhysicsControllerParams
// Size: 0x1c8
// VTable: 0x1499e6778
struct SEntityRigidPhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
    DynArray_ARDataType* PhysFlagsOverride; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
    DynArray_ARDataType* PhysFlagsColliderOverride; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x68
    int32_t maxLoggedCollisions; // Offset: 0x90
    float Damping; // Offset: 0x94
    float DampingFreefall; // Offset: 0x98
    bool PushableByPlayers; // Offset: 0x9c
    bool NeverAffectTriggers; // Offset: 0x9d
    bool UseManualGridTransition; // Offset: 0x9e
    uint8_t _pad_4[0x1]; // Offset: 0x9f
    SEntityGridProperty grid; // Offset: 0xa0
    SDFSetParams shieldSDFParams; // Offset: 0xb0
    ARDataType aiNavigationType; // Offset: 0xc0
    bool Kinematic; // Offset: 0xc4
    bool EnableCrossGridChecks; // Offset: 0xc5
    bool Resting; // Offset: 0xc6
    bool physicalizeAllSlots; // Offset: 0xc7
    bool enableExteriorShadow; // Offset: 0xc8
    uint8_t _pad_5[0x7]; // Offset: 0xc9
    SEntityBuoyancyParams buoyancyParams; // Offset: 0xd0
    EntityTemperature temperature; // Offset: 0xe0
};

// Original name: SEntitySpaceShipPhysicsControllerParams
// Size: 0x1c8
// VTable: 0x1499e6780
struct SEntitySpaceShipPhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
    DynArray_ARDataType* PhysFlagsOverride; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
    DynArray_ARDataType* PhysFlagsColliderOverride; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x68
    int32_t maxLoggedCollisions; // Offset: 0x90
    float Damping; // Offset: 0x94
    float DampingFreefall; // Offset: 0x98
    bool PushableByPlayers; // Offset: 0x9c
    bool NeverAffectTriggers; // Offset: 0x9d
    bool UseManualGridTransition; // Offset: 0x9e
    uint8_t _pad_4[0x1]; // Offset: 0x9f
    SEntityGridProperty grid; // Offset: 0xa0
    SDFSetParams shieldSDFParams; // Offset: 0xb0
    ARDataType aiNavigationType; // Offset: 0xc0
    bool Kinematic; // Offset: 0xc4
    bool EnableCrossGridChecks; // Offset: 0xc5
    bool Resting; // Offset: 0xc6
    bool physicalizeAllSlots; // Offset: 0xc7
    bool enableExteriorShadow; // Offset: 0xc8
    uint8_t _pad_5[0x7]; // Offset: 0xc9
    SEntityBuoyancyParams buoyancyParams; // Offset: 0xd0
    EntityTemperature temperature; // Offset: 0xe0
};

// Original name: SEntityTraversalNodeReferenceContext
// Size: 0x18
// VTable: 0x1499a6850
struct SEntityTraversalNodeReferenceContext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityTraversingNodeBase traversingNode; // Offset: 0x8
};

// Original name: SEntityTraversalTargetPathContext
// Size: 0x18
// VTable: 0x1499a68b0
struct SEntityTraversalTargetPathContext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityTraversingTarget targetPath; // Offset: 0x8
};

// Original name: SEntityTraversingNodeBase
// Size: 0x98
// VTable: 0x14999eb50
struct SEntityTraversingNodeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SEntityTraversingNodeUniqueId id; // Offset: 0x18
    SEntityTraversingNodeTypeParams entityTraversingType; // Offset: 0x28
    DynArray_SEntityTraversingExecuteNodeBase* executeNodes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_SEntityTraversingNodeBase* nextNodes; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: SEntityTraversingNodeTypeChildTag
// Size: 0x28
// VTable: 0x14999e9d8
struct SEntityTraversingNodeTypeChildTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag filterTag; // Offset: 0x8
    bool recursive; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: SEntityTraversingNodeTypeEntityLink
// Size: 0x20
// VTable: 0x14999e820
struct SEntityTraversingNodeTypeEntityLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag entityTag; // Offset: 0x8
};

// Original name: SEntityTraversingNodeTypeInteractionLink
// Size: 0x20
// VTable: 0x14999e880
struct SEntityTraversingNodeTypeInteractionLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag entityTag; // Offset: 0x8
};

// Original name: SEntityTraversingNodeTypeUserControl
// Size: 0x20
// VTable: 0x14999e950
struct SEntityTraversingNodeTypeUserControl {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag listenedForItemComponent; // Offset: 0x8
};

// Original name: SEntityTraversingTarget
// Size: 0x48
// VTable: 0x14999ec38
struct SEntityTraversingTarget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SEntityTraversingTargetPath* paths; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SEntityTraversingTargetPath
// Size: 0x18
// VTable: 0x14999ebb0
struct SEntityTraversingTargetPath {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityTraversingNodeBase node; // Offset: 0x8
};

// Original name: SEntityTraversingTreeParams
// Size: 0x78
// VTable: 0x14999ecf8
struct SEntityTraversingTreeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SEntityTraversingNodeBase* TraversingNodes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_SEntityTraversingTarget* TraversingTargets; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: SExplosionComponentParams
// Size: 0x38
// VTable: 0x1499e5150
struct SExplosionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float damage; // Offset: 0x18
    ARDataType damageType; // Offset: 0x1c
    float minRadius; // Offset: 0x20
    float maxRadius; // Offset: 0x24
    ExplosionParams explosion; // Offset: 0x28
};

// Original name: SExplosiveOrdnanceParams
// Size: 0x2c0
// VTable: 0x149a244d0
struct SExplosiveOrdnanceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SOrdnanceAudioParams audioParams; // Offset: 0x18
    bool requiresLauncher; // Offset: 0xa0
    bool enableLifetime; // Offset: 0xa1
    uint8_t _pad_1[0x2]; // Offset: 0xa2
    float maxLifetime; // Offset: 0xa4
    float armTime; // Offset: 0xa8
    int32_t maxArmableOverride; // Offset: 0xac
    float igniteTime; // Offset: 0xb0
    float collisionDelayTime; // Offset: 0xb4
    float explosionSafetyDistance; // Offset: 0xb8
    float projectileProximity; // Offset: 0xbc
    ExplosionParams explosionParams; // Offset: 0xc0
    SOrdnanceClusterParams clusterParams; // Offset: 0x280
    DynArray_SOrdnanceEmissionsParams* emissionsParams; // Offset: 0x290 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x298
};

// Original name: SFireMisfireEffect
// Size: 0x38
// VTable: 0x149a096a8
struct SFireMisfireEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag effectTrigger; // Offset: 0x8
    Tag effectTag; // Offset: 0x20
};

// Original name: SFirstSelect
// Size: 0x28
// VTable: 0x149a5c908
struct SFirstSelect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType firstSelectMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Tag itemTag; // Offset: 0x10
};

// Original name: SFlightsuitHangerGroup
// Size: 0xd8
// VTable: 0x149a92ef8
struct SFlightsuitHangerGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SItemPortDef* groupPorts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SSharedInteractionParams equipAllInteraction; // Offset: 0x38
    SSharedInteractionParams swapAllInteraction; // Offset: 0x48
    DynArray_SItemPortDef* armorPorts; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
    SSharedInteractionParams swapAllClothesInteraction; // Offset: 0x88
    SSharedInteractionParams swapAllUndersuitInteraction; // Offset: 0x98
    SSharedInteractionParams swapAllHelmetInteraction; // Offset: 0xa8
    SSharedInteractionParams swapAllCoreInteraction; // Offset: 0xb8
    SSharedInteractionParams swapUndersuitClothesInteraction; // Offset: 0xc8
};

// Original name: SFreightElevatorUIProviderParams
// Size: 0x48
// VTable: 0x149a419b0
struct SFreightElevatorUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isItemBank; // Offset: 0x18
    bool canBeLoweredWithItem; // Offset: 0x19
    bool canBeRaisedManually; // Offset: 0x1a
    uint8_t _pad_1[0x5]; // Offset: 0x1b
    SSharedInteractionParams openInteraction; // Offset: 0x20
    Camera gearStorageCamera; // Offset: 0x30
};

// Original name: SGasTankFillerStateModifier
// Size: 0x28
// VTable: 0x1499c1bd8
struct SGasTankFillerStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onGasTankFullState; // Offset: 0x8
    SInteractionState onGasTankFillerEmptyState; // Offset: 0x18
};

// Original name: SGeometryActorModelTag
// Size: 0x20
// VTable: 0x1499a30d0
struct SGeometryActorModelTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
};

// Original name: SGeometryDataParams
// Size: 0x110
// VTable: 0x1499a1c38
struct SGeometryDataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry Geometry; // Offset: 0x8
    ARDataType Slot; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* MaterialAttachments; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    GlobalResourceMaterial Material; // Offset: 0x38
    SSoftbodyGeometryParams SimulationGeometry; // Offset: 0x50
    TintPaletteRef Palette; // Offset: 0x60
    SViewDistanceRatioParams viewDistRatio; // Offset: 0x90
    CryStringT* ProxyCDFPath; // Offset: 0xa8
    uint8_t _pad_3[0x8]; // Offset: 0xb0
    CryStringT* ModifiersPath; // Offset: 0xb8
    uint8_t _pad_4[0x8]; // Offset: 0xc0
    uint32_t AttachFlags; // Offset: 0xc8
    ARDataType DeformerType; // Offset: 0xcc
    uint16_t ProtosBShapeExclude; // Offset: 0xd0
    bool VisTP; // Offset: 0xd2
    bool VisFP; // Offset: 0xd3
    bool VisShadow; // Offset: 0xd4
    bool VisSecondaryViews; // Offset: 0xd5
    bool WrinkleMap; // Offset: 0xd6
    bool EnableDecalProjection; // Offset: 0xd7
    CryStringT* BBoxJoint; // Offset: 0xd8
    uint8_t _pad_5[0x8]; // Offset: 0xe0
    float BBoxRadius; // Offset: 0xe8
    float Wear; // Offset: 0xec
    float Dirt; // Offset: 0xf0
    float Interference; // Offset: 0xf4
    float Damage; // Offset: 0xf8
    ARDataType RenderLayer; // Offset: 0xfc
    uint8_t _pad_6[0x3]; // Offset: 0xfd
    ARDataType VisAreaMode; // Offset: 0x100
    ARDataType SunShadowMode; // Offset: 0x104
    uint8_t LodRatio; // Offset: 0x108
    uint8_t _pad_7[0x7]; // Offset: 0x109
};

// Original name: SGeometryNodeParams
// Size: 0x160
// VTable: 0x1499a1d08
struct SGeometryNodeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Tags; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SGeometryDataParams Geometry; // Offset: 0x18
    float ScaleMultiplier; // Offset: 0x128
    uint8_t _pad_2[0x4]; // Offset: 0x12c
    DynArray_SGeometryNodeParams* SubGeometry; // Offset: 0x130 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x138
};

// Original name: SGeometryResourceParams
// Size: 0x228
// VTable: 0x1499a1f08
struct SGeometryResourceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SGeometryModelTagBase ModelTag; // Offset: 0x18
    bool cacheResources; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
    SGeometryNodeParams Geometry; // Offset: 0x30
    SMaterialNodeParams Material; // Offset: 0x190
    bool rootOverridePaint; // Offset: 0x220
    bool inheritModelTagFromHost; // Offset: 0x221
    uint8_t _pad_2[0x6]; // Offset: 0x222
};

// Original name: SGiveClearanceTokenGameplayTrigger
// Size: 0x20
// VTable: 0x149968640
struct SGiveClearanceTokenGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SecurityClearanceToken securityToken; // Offset: 0x8
};

// Original name: SGlobalCrosshairParams
// Size: 0xc8
// VTable: 0x149a72538
struct SGlobalCrosshairParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    float lerpSpeed; // Offset: 0x20
    float positionSmoothFactor; // Offset: 0x24
    float distanceSmoothFactor; // Offset: 0x28
    float range; // Offset: 0x2c
    float hitmarkerTimeForHit; // Offset: 0x30
    float hitmarkerTimeForKill; // Offset: 0x34
    bool killInterruptsPreviousHit; // Offset: 0x38
    uint8_t _pad_1[0x3]; // Offset: 0x39
    ARDataType hitmarkerPositionMethod; // Offset: 0x3c
    float crosshairInCombatTime; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
    GlobalResourceAudio hitMarkerSoundHead; // Offset: 0x48
    GlobalResourceAudio hitMarkerSoundBody; // Offset: 0x68
    AudioRtpc timeSinceLastHitmarkerRTPC; // Offset: 0x88
    AudioRtpc killHitmarkerRTPC; // Offset: 0xa8
};

// Original name: SGlobalElectronParams
// Size: 0x3a0
// VTable: 0x149a80be8
struct SGlobalElectronParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float time; // Offset: 0x8
    float damagePerCharge; // Offset: 0xc
    float metersPerCharge; // Offset: 0x10
    float damageScalePerJump; // Offset: 0x14
    float cooldownBetweenJumps; // Offset: 0x18
    float residualChargeMultiplier; // Offset: 0x1c
    float residualChargeInterference; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    ExplosionParams explosionParams; // Offset: 0x28
    Tag chargedTag; // Offset: 0x1e8
    GlobalResourceParticle chainLightningParticleEffect; // Offset: 0x200
    float chainLightningEffectDuration; // Offset: 0x218
    uint8_t _pad_2[0x4]; // Offset: 0x21c
    CryStringT* chainLightningJoint; // Offset: 0x220
    uint8_t _pad_3[0x8]; // Offset: 0x228
    CryStringT* explosionJoint; // Offset: 0x230
    uint8_t _pad_4[0x8]; // Offset: 0x238
    GlobalResourceAudio residualChargeAudioStartTrigger; // Offset: 0x240
    GlobalResourceAudio residualChargeAudioStopTrigger; // Offset: 0x260
    AudioRtpc residualChargeTimeRemainingRtpc; // Offset: 0x280
    AudioRtpc residualChargeDamageRtpc; // Offset: 0x2a0
    GlobalResourceAudio chainLightningSourceAudioStartTrigger; // Offset: 0x2c0
    GlobalResourceAudio chainLightningSourceAudioStopTrigger; // Offset: 0x2e0
    GlobalResourceAudio chainLightningTargetAudioStartTrigger; // Offset: 0x300
    GlobalResourceAudio chainLightningTargetAudioStopTrigger; // Offset: 0x320
    AudioRtpc chainLightningTimeRemainingRtpc; // Offset: 0x340
    AudioRtpc chainLightningParticleStrengthRtpc; // Offset: 0x360
    CryStringT* audioBoneName; // Offset: 0x380
    uint8_t _pad_5[0x18]; // Offset: 0x388
};

// Original name: SGlobalHealingBeamParams
// Size: 0x1a8
// VTable: 0x149a76b80
struct SGlobalHealingBeamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    Tag medgunTag; // Offset: 0x20
    DynArray_SHealingBeamBodyPartParams* bodyParts; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
    float cardDisplayTimeout; // Offset: 0x68
    float limbSwitchTime; // Offset: 0x6c
    float cardPosLerpSpeed; // Offset: 0x70
    float cardClosingLerpSpeedScalar; // Offset: 0x74
    SHealingBeamBoneEntryParams targetModeActorCardBoneEntry; // Offset: 0x78
    SHealingBeamBoneEntryParams selfHealModeActorCardBoneEntry; // Offset: 0xc0
    SHealingBeamBoneEntryParams selfHealModeLimbCardBoneEntry; // Offset: 0x108
    GlobalResourceMaterial transparentMaterial; // Offset: 0x150
    DynArray_RGB* injuryHighlightColors; // Offset: 0x168 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x170
    float highlightOccludedAlpha; // Offset: 0x198
    float highlightOutlineWidth; // Offset: 0x19c
    bool highlightOutlineOnly; // Offset: 0x1a0
    uint8_t _pad_3[0x7]; // Offset: 0x1a1
};

// Original name: SGlobalSalvageRepairBeamParams
// Size: 0x1a8
// VTable: 0x149a7b1b8
struct SGlobalSalvageRepairBeamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    SSalvageRepairCardParams cardParams; // Offset: 0x20
    SSalvageRepairHighlightParams highlightParams; // Offset: 0x50
    SSalvageRepairLocalizationParams localizationParams; // Offset: 0x100
    SSalvageRepairMaterialParams materialParams; // Offset: 0x148
    SSalvageRepairAudioParams globalSalvageAudioParams; // Offset: 0x170
    float hitsPerSecond; // Offset: 0x1a0
    float hitDuration; // Offset: 0x1a4
};

// Original name: SGroupedLoadouts
// Size: 0x50
// VTable: 0x1499a7270
struct SGroupedLoadouts {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Group; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SLoadoutRequirementBase Requirement; // Offset: 0x10
    DynArray_SItemPortLoadoutBaseParams* Loadouts; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: SHackableStateModifier
// Size: 0x38
// VTable: 0x149a2cd10
struct SHackableStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onHackingSuccessState; // Offset: 0x8
    SInteractionState onHackingErrorState; // Offset: 0x18
    SInteractionState onHackingResetState; // Offset: 0x28
};

// Original name: SHealthComponentParams
// Size: 0x1a8
// VTable: 0x149a17d80
struct SHealthComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float Health; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DamageResistanceBase DamageResistances; // Offset: 0x20
    SInitialDamage InitialDamage; // Offset: 0x30
    CryStringT* SerializedDamageMapPath; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    bool UseDirtShaderForDamage; // Offset: 0x50
    bool ClientOnly; // Offset: 0x51
    bool UnlockInteractionsOnDeath; // Offset: 0x52
    bool PushDamageUpPartsHeirarchyWhenDead; // Offset: 0x53
    bool DetachFromItemPortOnDeath; // Offset: 0x54
    bool DetachFromEntityOnDeath; // Offset: 0x55
    bool DestroyChildrenOnDeath; // Offset: 0x56
    bool PropagateExplosionDamageToChildren; // Offset: 0x57
    bool UpdateObservableStatus; // Offset: 0x58
    uint8_t _pad_3[0x7]; // Offset: 0x59
    DynArray_HealthDamageState* HealthLevelStates; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x68
    CryStringT* DestroyedGeometryTag; // Offset: 0x90
    uint8_t _pad_5[0x8]; // Offset: 0x98
    CryStringT* ExplodedGeometryTag; // Offset: 0xa0
    uint8_t _pad_6[0x8]; // Offset: 0xa8
    CryStringT* DebrisGeometryTag; // Offset: 0xb0
    uint8_t _pad_7[0x8]; // Offset: 0xb8
    float ExplosionDelayTime; // Offset: 0xc0
    float ExplosionRandomDelayRange; // Offset: 0xc4
    CryStringT* ExplosionBone; // Offset: 0xc8
    uint8_t _pad_8[0x8]; // Offset: 0xd0
    ExplosionParams DeathExplosionParams; // Offset: 0xd8
    DynArray_SGasMass* DeathGasComposition; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0xf0
    DynArray_SHealthInteractionLockParams* InteractionLocks; // Offset: 0x118 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x120
    bool IsSalvagable; // Offset: 0x148
    bool IsRepairable; // Offset: 0x149
    bool MirrorSalvageHit; // Offset: 0x14a
    bool DisableMaterialDamage; // Offset: 0x14b
    uint8_t _pad_11[0x4]; // Offset: 0x14c
    DynArray_EntityComponentHealth_SBaseSequencerTask* sequencerTasks; // Offset: 0x150 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x158
    MaelstromShatterDestroyEvent shatterDestroyEvent; // Offset: 0x180
    EntityClassCraftingData craftingData; // Offset: 0x190
    bool alwaysPropagateHitToParent; // Offset: 0x1a0
    uint8_t _pad_13[0x7]; // Offset: 0x1a1
};

// Original name: SHealthInteractionLockParams
// Size: 0x20
// VTable: 0x149a17400
struct SHealthInteractionLockParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams Interaction; // Offset: 0x8
    float MinHealthRatio; // Offset: 0x18
    float MaxHealthRatio; // Offset: 0x1c
};

// Original name: SHealthStateModifier
// Size: 0x40
// VTable: 0x149a172e0
struct SHealthStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRangeStateLevel* stateRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool useHealthRatio; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
};

// Original name: SHighlightBehaviorNode
// Size: 0x48
// VTable: 0x1499a5ce8
struct SHighlightBehaviorNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SHighlightBehaviorNodeParams HighlightBehaviorNodeParams; // Offset: 0x8
    DynArray_SHighlightBehaviorNode* nextNodes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SHostExplosionEffect
// Size: 0x80
// VTable: 0x149a098a8
struct SHostExplosionEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag effectTrigger; // Offset: 0x8
    Tag effectTag; // Offset: 0x20
    float explosionChance; // Offset: 0x38
    float explosionCountdown; // Offset: 0x3c
    float degradationAdditionalRollsFactor; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    SCriticalMalfunctionStates criticalMalfunctionStates; // Offset: 0x48
};

// Original name: SHostilityRules
// Size: 0x58
// VTable: 0x14996d850
struct SHostilityRules {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    bool useReputationHostility; // Offset: 0x20
    bool usePersonalHostility; // Offset: 0x21
    bool useFactionHostility; // Offset: 0x22
    bool policesLawfulTrespass; // Offset: 0x23
    bool hostileToCriminals; // Offset: 0x24
    bool hostileToStolenVehicles; // Offset: 0x25
    uint8_t _pad_1[0x2]; // Offset: 0x26
    Faction_LEGACY factionOverride; // Offset: 0x28
    Faction factionToOverride; // Offset: 0x40
};

// Original name: SHydraulicPumpableComponentParams
// Size: 0x98
// VTable: 0x1499d7ce0
struct SHydraulicPumpableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float PumpPercentagePerSecondPerLever; // Offset: 0x18
    float DecayPercentagePerSecond; // Offset: 0x1c
    SSharedInteractionParams EnabledInteractionWhenFullyCharged; // Offset: 0x20
    Tag StartChargingEffectTag; // Offset: 0x30
    Tag StartDecayingEffectTag; // Offset: 0x48
    Tag FinishChargingEffectTag; // Offset: 0x60
    AudioRtpc CurrentChargeRTPC; // Offset: 0x78
};

// Original name: SInspectAnimationParams
// Size: 0x38
// VTable: 0x149a5c9b0
struct SInspectAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams interaction; // Offset: 0x8
    CryStringT* fragmentId; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* tagId; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: SInstancedInteriorGatewayParams
// Size: 0x38
// VTable: 0x149a40ca8
struct SInstancedInteriorGatewayParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t gatewaySize; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    EntityClassDefinition instance; // Offset: 0x20
};

// Original name: SInteractableParams
// Size: 0x108
// VTable: 0x1499a5b18
struct SInteractableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSharedInteractionParams* SharedInteractions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SInteractionPointParams* InteractionPoints; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_SSequencerInteractionTask* interactionTasks; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_SSequencerActorActionHandlerTask* actionHandlerTasks; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_SSequencerItemActionTask* itemActionTasks; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
    SInteractableMenuTitleParams menuTitle; // Offset: 0xf8
};

// Original name: SInteractionConditionMovableMover
// Size: 0x20
// VTable: 0x149a45de0
struct SInteractionConditionMovableMover {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
    bool requireMover; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: SInteractionConditionPlayerVehicleNotInArmisticeZone
// Size: 0x18
// VTable: 0x149a8e0a8
struct SInteractionConditionPlayerVehicleNotInArmisticeZone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConditionDisplayParams conditionDisplay; // Offset: 0x8
};

// Original name: SInteractionLinkExecuteCreateInteractionLinkNode
// Size: 0x28
// VTable: 0x1499a6468
struct SInteractionLinkExecuteCreateInteractionLinkNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkedInteractionName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SSharedInteractionParams localInteraction; // Offset: 0x18
};

// Original name: SInteractionLinkParams
// Size: 0x78
// VTable: 0x1499a92e8
struct SInteractionLinkParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SVehicleItemportInteractionLink* vehicleItemPortInteractionLinks; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_Tag* linkPlugs; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: SInteractionLockGameplayTrigger
// Size: 0x40
// VTable: 0x1499fad38
struct SInteractionLockGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSharedInteractionParams* interactions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool lockInteraction; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
};

// Original name: SInteractionParams
// Size: 0x28
// VTable: 0x1499a08c0
struct SInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams Interaction; // Offset: 0x8
    CLocIdentifier* DisplayName; // Offset: 0x18
    bool IsPrimary; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: SInteractionPointModifier
// Size: 0x38
// VTable: 0x1499a66b0
struct SInteractionPointModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_InteractionConditionParams* conditionParams; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SInteractionPointModifierApplyActorOffsetByGravity
// Size: 0x68
// VTable: 0x1499a6710
struct SInteractionPointModifierApplyActorOffsetByGravity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_InteractionConditionParams* conditionParams; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_float* directionalOffsets; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SInteractionPointModifierReplaceByBoneTransform
// Size: 0x48
// VTable: 0x1499a6770
struct SInteractionPointModifierReplaceByBoneTransform {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_InteractionConditionParams* conditionParams; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    CryStringT* boneName; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
};

// Original name: SInteractionPointParams
// Size: 0x280
// VTable: 0x1499a6380
struct SInteractionPointParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool FirstInteractionPrimary; // Offset: 0x8
    bool UseHelperLocation; // Offset: 0x9
    bool ShowHighlight; // Offset: 0xa
    bool ApplyToEntireSkeleton; // Offset: 0xb
    bool longRangeIP; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    CryStringT* HelperName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    DynArray_Tag* Tags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    DynArray_SHighlightBehaviorNode* HighlightBehaviors; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x58
    DynArray_CryStringT* AdditionalCollisionBones; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x88
    DynArray_SInteractionPointModifier* InteractionPointModifiers; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xb8
    QuatT Offset; // Offset: 0xe0
    bool ScalePromptOffsetWithEntity; // Offset: 0x138
    uint8_t _pad_7[0x7]; // Offset: 0x139
    QuatT InteractionPromptOffset; // Offset: 0x140
    ARDataType TextJustification; // Offset: 0x198
    ARDataType TextOrientation; // Offset: 0x19c
    float TextScale; // Offset: 0x1a0
    float Radius; // Offset: 0x1a4
    bool UseHorizontalDistance; // Offset: 0x1a8
    uint8_t _pad_8[0x3]; // Offset: 0x1a9
    float MaxCursorScreenDistance; // Offset: 0x1ac
    bool ShowInnerThoughtsOffScreen; // Offset: 0x1b0
    bool OnlySelectableInLookDir; // Offset: 0x1b1
    bool ShowInteractionTextAtCursorPos; // Offset: 0x1b2
    uint8_t _pad_9[0x5]; // Offset: 0x1b3
    SAngleConstraint AngleConstraint; // Offset: 0x1b8
    float InteractionPromptScale; // Offset: 0x1e0
    float InteractionPromptLabelVerticalOffset; // Offset: 0x1e4
    ARDataType InteractionPromptBound; // Offset: 0x1e8
    uint8_t _pad_10[0x4]; // Offset: 0x1ec
    SInteractionPointPrimitiveParams Primitive; // Offset: 0x1f0
    PlayerAnimatedInteractionBase PlayerAnimatedInteractionParams; // Offset: 0x200
    DynArray_SInteractionParams* Interactions; // Offset: 0x210 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x218
    bool HighlightOnRayHitEntity; // Offset: 0x240
    uint8_t _pad_12[0x7]; // Offset: 0x241
    uint8_t InteractionPointInternalSettingTemplateRef[0x18]; // Opaque struct field (type resolution failed) // Offset: 0x248
    uint8_t _pad_13[0x20]; // Offset: 0x260
};

// Original name: SInteractionState
// Size: 0x208
// VTable: 0x1499a5248
struct SInteractionState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* StateName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* EnterStateEffectGroup; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* ExitStateEffectGroup; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    DynArray_Tag* enterStateEffectTags; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x40
    DynArray_Tag* exitStateEffectTags; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x70
    DynArray_EventDispatcher* EnterEventDispatchers; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xa0
    SSequencerDefSequenceParams EnterStatePlaySequence; // Offset: 0xc8
    SSequencerDefSequenceParams ExitStatePlaySequence; // Offset: 0xd8
    SStateAutoChange StateAutoChange; // Offset: 0xe8
    DynArray_SInteractionStateTransition* Interactions; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x100
    DynArray_SInteractionPointParams* interactionPoints; // Offset: 0x128 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x130
    TagList stateTags; // Offset: 0x158
    CryStringT* enterGeometryTags; // Offset: 0x190
    uint8_t _pad_9[0x8]; // Offset: 0x198
    TagList entityTags; // Offset: 0x1a0
    uint8_t _pad_10[0x30]; // Offset: 0x1d8
};

// Original name: SInteractionStateMachineParams
// Size: 0x48
// VTable: 0x1499a53f0
struct SInteractionStateMachineParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SInteractionStateType* StateTypes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SInteractionStateTransition
// Size: 0x28
// VTable: 0x1499a4fe8
struct SInteractionStateTransition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams Interaction; // Offset: 0x8
    SInteractionState NextState; // Offset: 0x18
};

// Original name: SInteractionStateType
// Size: 0xb0
// VTable: 0x1499a5390
struct SInteractionStateType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* StateTypeName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType bindingsMethod; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    SInteractionState DefaultState; // Offset: 0x20
    bool asopReset; // Offset: 0x30
    ARDataType networkAuthority; // Offset: 0x31
    uint8_t _pad_3[0x6]; // Offset: 0x32
    DynArray_SInteractionState* States; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x40
    DynArray_SStateModifier* StateModifiers; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_5[0x40]; // Offset: 0x70
};

// Original name: SInternalResourceLink
// Size: 0x28
// VTable: 0x1499b0608
struct SInternalResourceLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef port1; // Offset: 0x8
    SItemPortDef port2; // Offset: 0x18
};

// Original name: SInverseInteractionLinkExecuteCreateInteractionLinkNode
// Size: 0x2b8
// VTable: 0x1499a64e8
struct SInverseInteractionLinkExecuteCreateInteractionLinkNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionPointParams interactionPointParams; // Offset: 0x8
    DynArray_SInverseInteractionLinkParams* inverseInteractionEntries; // Offset: 0x288 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x290
};

// Original name: SInverseInteractionLinkParams
// Size: 0x140
// VTable: 0x1499a5d68
struct SInverseInteractionLinkParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* targetInteractionName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SSharedInteractionParams interactionEntry; // Offset: 0x18
    uint8_t _pad_2[0x30]; // Offset: 0x110
};

// Original name: SItemDefinition
// Size: 0x1f8
// VTable: 0x1499af520
struct SItemDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Type; // Offset: 0x8
    ARDataType SubType; // Offset: 0xc
    int32_t Size; // Offset: 0x10
    int32_t Grade; // Offset: 0x14
    SCItemManufacturer Manufacturer; // Offset: 0x18
    bool inheritParentManufacturer; // Offset: 0x30
    uint8_t _pad_1[0x7]; // Offset: 0x31
    CryStringT* Tags; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    CryStringT* RequiredTags; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
    CryStringT* DisplayType; // Offset: 0x58
    uint8_t _pad_4[0x8]; // Offset: 0x60
    SCItemLocalization Localization; // Offset: 0x68
    SCItemMannequinTags mannequinTags; // Offset: 0x118
    SBaseCargoUnit inventoryOccupancyVolume; // Offset: 0x160
    Vec3 inventoryOccupancyDimensions; // Offset: 0x170
    Vec3 inventoryOccupancyLocalBoundsMin; // Offset: 0x188
    Vec3 inventoryOccupancyLocalBoundsMax; // Offset: 0x1a0
    Vec3 inventoryOccupancyDimensionsUIOverride; // Offset: 0x1b8
    ARDataType ignoredAttachAxis; // Offset: 0x1c8
    uint8_t _pad_5[0x2c]; // Offset: 0x1cc
};

// Original name: SItemPerkListParams
// Size: 0x78
// VTable: 0x149a97300
struct SItemPerkListParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CLocIdentifier* displayName; // Offset: 0x28
    CLocIdentifier* displayDescription; // Offset: 0x30
    CryStringT* icon; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    DynArray_SPerkShopItemCategoryBase* discountedItems; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x50
};

// Original name: SItemPortActorRecordParams
// Size: 0xa0
// VTable: 0x1499a6e58
struct SItemPortActorRecordParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range WearRange; // Offset: 0x8
    Range DirtRange; // Offset: 0x18
    DynArray_SLoadoutInventoryItem* InventoryItems; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    EntityClassDefinition actorRecord; // Offset: 0x58
    DynArray_Tag* OutfitNameTags; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x78
};

// Original name: SItemPortContainerComponentParams
// Size: 0x160
// VTable: 0x1499a2fe0
struct SItemPortContainerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SItemPortMasterControllerParams masterController; // Offset: 0x18
    DynArray_SItemPortDef* Ports; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    CryStringT* PortFlags; // Offset: 0x58
    uint8_t _pad_2[0x8]; // Offset: 0x60
    CryStringT* PortTags; // Offset: 0x68
    uint8_t _pad_3[0x8]; // Offset: 0x70
    CryStringT* RequiredItemTags; // Offset: 0x78
    uint8_t _pad_4[0x8]; // Offset: 0x80
    DynArray_SInternalResourceLink* InternalResourceLinks; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x90
    DynArray_SInternalHardpointLink* InternalHardpointLinks; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xc0
    bool LinkAllItemsToResourceNetwork; // Offset: 0xe8
    bool cheatResourceNetworkUpdate; // Offset: 0xe9
    uint8_t _pad_7[0x6]; // Offset: 0xea
    DynArray_SItemPortDef* destroyEntitiesOnItemportList; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0xf8
    ResourceNetworkPowerPoolSetup resourceNetworkPowerPools; // Offset: 0x120
};

// Original name: SItemPortDef
// Size: 0x600
// VTable: 0x1499b0528
struct SItemPortDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* DisplayName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* PortTags; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* RequiredPortTags; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
    CryStringT* Flags; // Offset: 0x48
    uint8_t _pad_5[0x8]; // Offset: 0x50
    DynArray_Tag* Tags; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x60
    CryStringT* controllableTag; // Offset: 0x88
    uint8_t _pad_7[0x8]; // Offset: 0x90
    int32_t MinSize; // Offset: 0x98
    int32_t MaxSize; // Offset: 0x9c
    Vec2 PitchLimit; // Offset: 0xa0
    Vec2 YawLimit; // Offset: 0xb0
    Vec2 RollLimit; // Offset: 0xc0
    float InteractionPointSize; // Offset: 0xd0
    uint8_t _pad_8[0x4]; // Offset: 0xd4
    Vec3 InteractionPointOffset; // Offset: 0xd8
    ARDataType DefaultWeaponGroup; // Offset: 0xf0
    uint8_t _pad_9[0x4]; // Offset: 0xf4
    DynArray_SItemPortAttachmentPoints* AttachmentPoints; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x100
    DynArray_SItemPortDefTypes* Types; // Offset: 0x128 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x130
    SItemPortDefExtensionBase Extension; // Offset: 0x158
    SItemPortDefAttachmentImplementationBase AttachmentImplementation; // Offset: 0x168
    SItemPortBreakable Breakable; // Offset: 0x178
    DynArray_SItemPortConnectionParam* Connections; // Offset: 0x198 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x1a0
    SCItemControlBaseParams control; // Offset: 0x1c8
    DynArray_SItemPortDef* linkedItemPorts; // Offset: 0x1d8 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x1e0
    bool resourceLinkToParent; // Offset: 0x208
    bool useHelperAsInteractionPointName; // Offset: 0x209
    uint8_t _pad_14[0x6]; // Offset: 0x20a
    DynArray_SItemPortRuleDef* itemPortRules; // Offset: 0x210 // Pointer to DynArray struct
    uint8_t _pad_15[0x28]; // Offset: 0x218
    Vec3 detachDirection; // Offset: 0x240
    SItemPortDefaultItemDef defaultItem; // Offset: 0x258
    ARDataType gridBehavior; // Offset: 0x2b8
    uint8_t _pad_16[0x4]; // Offset: 0x2bc
    SItemPortInteractionsParams interactions; // Offset: 0x2c0
    uint8_t _pad_17[0x318]; // Offset: 0x2e8
};

// Original name: SItemPortDefAttachmentImplementationBone
// Size: 0x170
// VTable: 0x1499afb20
struct SItemPortDefAttachmentImplementationBone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDefHelperNode Helper; // Offset: 0x8
};

// Original name: SItemPortDefAttachmentImplementationEntity
// Size: 0x1c8
// VTable: 0x1499afdb8
struct SItemPortDefAttachmentImplementationEntity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool usePhysicalAttachment; // Offset: 0x8
    bool useEntityAttachment; // Offset: 0x9
    bool useExteriorAttachment; // Offset: 0xa
    bool usePhysicalParent; // Offset: 0xb
    bool useLogicalAttachment; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SAttachmentConstraintParams constraintParams; // Offset: 0x10
    bool hangarPort; // Offset: 0x58
    uint8_t _pad_2[0x7]; // Offset: 0x59
    SItemPortDefHelperNode Helper; // Offset: 0x60
};

// Original name: SItemPortDefAttachmentImplementationFace
// Size: 0x170
// VTable: 0x1499afbe0
struct SItemPortDefAttachmentImplementationFace {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDefHelperNode Helper; // Offset: 0x8
};

// Original name: SItemPortDefAttachmentImplementationSkin
// Size: 0x170
// VTable: 0x1499afc40
struct SItemPortDefAttachmentImplementationSkin {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDefHelperNode Helper; // Offset: 0x8
};

// Original name: SItemPortDefAttachmentImplementationStatObj
// Size: 0x170
// VTable: 0x1499afb80
struct SItemPortDefAttachmentImplementationStatObj {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDefHelperNode Helper; // Offset: 0x8
};

// Original name: SItemPortDefHelperNode
// Size: 0x168
// VTable: 0x1499afac0
struct SItemPortDefHelperNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Tags; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SItemPortDefHelper Helper; // Offset: 0x18
    DynArray_SItemPortDefHelperNode* SubHelpers; // Offset: 0x138 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x140
};

// Original name: SItemPortDefaultItemDef
// Size: 0x60
// VTable: 0x1499af900
struct SItemPortDefaultItemDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPort; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    EntityClassDefinition entityClass; // Offset: 0x18
    DynArray_SItemPortDefaultItemDef* childItems; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
};

// Original name: SItemPortEntityOnlineStateModifier
// Size: 0x38
// VTable: 0x1499a8680
struct SItemPortEntityOnlineStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onEntityOnlineState; // Offset: 0x8
    SInteractionState onEntityOfflineState; // Offset: 0x18
    SItemPortDef itemPort; // Offset: 0x28
};

// Original name: SItemPortInteractionsParams
// Size: 0x28
// VTable: 0x1499b0040
struct SItemPortInteractionsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams detach; // Offset: 0x8
    bool allowPlaceInteractionFromInventory; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    CLocIdentifier* placeInteractionBlockText; // Offset: 0x20
};

// Original name: SItemPortLoadoutBaseParams
// Size: 0x58
// VTable: 0x1499a6d10
struct SItemPortLoadoutBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range WearRange; // Offset: 0x8
    Range DirtRange; // Offset: 0x18
    DynArray_SLoadoutInventoryItem* InventoryItems; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: SItemPortLoadoutEntryParams
// Size: 0x60
// VTable: 0x1499a6c60
struct SItemPortLoadoutEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPortName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* entityClassName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    EntityClassDefinition entityClassReference; // Offset: 0x28
    SLoadoutInventoryContainer inventoryContainer; // Offset: 0x40
    SItemPortLoadoutBaseParams loadout; // Offset: 0x50
};

// Original name: SItemPortLoadoutManualParams
// Size: 0x88
// VTable: 0x1499a6d70
struct SItemPortLoadoutManualParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range WearRange; // Offset: 0x8
    Range DirtRange; // Offset: 0x18
    DynArray_SLoadoutInventoryItem* InventoryItems; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    DynArray_SItemPortLoadoutEntryParams* entries; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
};

// Original name: SItemPortLoadoutOutfitParams
// Size: 0x98
// VTable: 0x1499a7018
struct SItemPortLoadoutOutfitParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range WearRange; // Offset: 0x8
    Range DirtRange; // Offset: 0x18
    DynArray_SLoadoutInventoryItem* InventoryItems; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    SItemPortLoadoutBaseParams BaseLoadout; // Offset: 0x58
    DynArray_SItemPortLoadoutOutfitTagParams* Outfits; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x70
};

// Original name: SItemPortLoadoutOutfitTagParams
// Size: 0x68
// VTable: 0x1499a6f98
struct SItemPortLoadoutOutfitTagParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* OutfitNameTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SItemPortLoadoutBaseParams* Loadouts; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SItemPortLoadoutRandomGeneratedParams
// Size: 0x90
// VTable: 0x1499a7378
struct SItemPortLoadoutRandomGeneratedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range WearRange; // Offset: 0x8
    Range DirtRange; // Offset: 0x18
    DynArray_SLoadoutInventoryItem* InventoryItems; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    int32_t GenerationSeed; // Offset: 0x58
    uint8_t _pad_2[0x4]; // Offset: 0x5c
    DynArray_SLoadoutAssortment* LoadoutAssortments; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x68
};

// Original name: SItemPortLoadoutRecordParams
// Size: 0x70
// VTable: 0x1499a6f10
struct SItemPortLoadoutRecordParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range WearRange; // Offset: 0x8
    Range DirtRange; // Offset: 0x18
    DynArray_SLoadoutInventoryItem* InventoryItems; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    EntityDefaultLoadoutParams loadoutRecord; // Offset: 0x58
};

// Original name: SItemPortLoadoutXMLParams
// Size: 0x68
// VTable: 0x1499a6dd0
struct SItemPortLoadoutXMLParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range WearRange; // Offset: 0x8
    Range DirtRange; // Offset: 0x18
    DynArray_SLoadoutInventoryItem* InventoryItems; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    CryStringT* loadoutPath; // Offset: 0x58
    uint8_t _pad_2[0x8]; // Offset: 0x60
};

// Original name: SItemPortRule_TriggerSequenceDef
// Size: 0x18
// VTable: 0x149a92fc0
struct SItemPortRule_TriggerSequenceDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSequencerDefSequenceParams triggerSequence; // Offset: 0x8
};

// Original name: SItemPortStateModifier
// Size: 0xa8
// VTable: 0x1499a85a8
struct SItemPortStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x8
    SInteractionState onEntityAttachedState; // Offset: 0x18
    SInteractionState onEntityDetachedState; // Offset: 0x28
    SInteractionState onPortDestroyedState; // Offset: 0x38
    DynArray_ARDataType* itemTypes; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x50
    DynArray_ARDataType* itemSubTypes; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x80
};

// Original name: SItemResourceContainerStateModifier
// Size: 0x58
// VTable: 0x1499a8848
struct SItemResourceContainerStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRangeStateLevel* stateRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ResourceType containerResource; // Offset: 0x38
    bool useActualOccupancyValue; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
};

// Original name: SItemShopARItemPortParams
// Size: 0xb0
// VTable: 0x1499ee348
struct SItemShopARItemPortParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x8
    SItemShopARParams arParams; // Offset: 0x18
};

// Original name: SJumpTunnelGenerationParams
// Size: 0x300
// VTable: 0x149a14480
struct SJumpTunnelGenerationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float tunnelRadius; // Offset: 0x8
    float tunnelRadiusGameplayBuffer; // Offset: 0xc
    float tunnelLength; // Offset: 0x10
    float entranceLength; // Offset: 0x14
    float exitLength; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    SJumpTunnelEllipticalParams entranceEllipticalParams; // Offset: 0x20
    SJumpTunnelEllipticalParams exitEllipticalParams; // Offset: 0x160
    DynArray_SJumpTunnelSectionProbabilityParams* firstSectionProbabilities; // Offset: 0x2a0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x2a8
    DynArray_SJumpTunnelSectionGenerationParams* genParams; // Offset: 0x2d0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x2d8
};

// Original name: SJumpTunnelSectionGenerationParams
// Size: 0x210
// VTable: 0x149a142e8
struct SJumpTunnelSectionGenerationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float defaultSectionLength; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    DynArray_SJumpTunnelSectionControlPointGenerationParams* controlPoints; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    DynArray_SJumpTunnelSectionProbabilityParams* nextSectionProbabilities; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x58
    float chanceOfObstacles; // Offset: 0x80
    uint8_t _pad_5[0x4]; // Offset: 0x84
    Range numberOfObstacles; // Offset: 0x88
    SJumpTunnelObstacleGenerationParams obstacleGeneration; // Offset: 0x98
    SJumpTunnelEllipticalParams ellipticalParams; // Offset: 0xd0
};

// Original name: SJumpTunnelSectionProbabilityParams
// Size: 0x20
// VTable: 0x149a13ec8
struct SJumpTunnelSectionProbabilityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SJumpTunnelSectionGenerationParams section; // Offset: 0x8
    float probability; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SJurisdictionRoomExtensionParams
// Size: 0x60
// VTable: 0x149967c78
struct SJurisdictionRoomExtensionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Jurisdiction jurisdiction; // Offset: 0x18
    DynArray_InfractionDefinition* extraInfractions; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
};

// Original name: SKeypadStateModifier
// Size: 0x30
// VTable: 0x1499688f0
struct SKeypadStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t keycode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SInteractionState onKeycodeSuccessState; // Offset: 0x10
    SInteractionState onKeycodeFailState; // Offset: 0x20
};

// Original name: SKioskInteractionStateModifier
// Size: 0x28
// VTable: 0x1499c1d18
struct SKioskInteractionStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onKioskInteractionOpen; // Offset: 0x8
    SInteractionState onKioskInteractionClose; // Offset: 0x18
};

// Original name: SLawComponentParams
// Size: 0x68
// VTable: 0x149967db8
struct SLawComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool lightweight; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    int32_t minCrimeStat; // Offset: 0x1c
    int32_t maxCrimeStat; // Offset: 0x20
    float warningUpdateTime; // Offset: 0x24
    DynArray_SecurityClearanceToken* defaultSecurityTokens; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    SSharedInteractionParams copyTokenInteraction; // Offset: 0x58
};

// Original name: SLegacyMisfireEventParams
// Size: 0x58
// VTable: 0x149a09ab8
struct SLegacyMisfireEventParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag effectTrigger; // Offset: 0x8
    Tag effectTag; // Offset: 0x20
    CLocIdentifier* warningLocId; // Offset: 0x38
    float duration; // Offset: 0x40
    ARDataType uiSeverity; // Offset: 0x44
    SLegacyItemMisfireParams itemParams; // Offset: 0x48
};

// Original name: SLightGroupComponentParams
// Size: 0xa0
// VTable: 0x1499a57e8
struct SLightGroupComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float offEnvironmentProbeScale; // Offset: 0x18
    bool auxiliaryWhenDisabled; // Offset: 0x1c
    bool affectedByDayNight; // Offset: 0x1d
    bool attachViaObjectLink; // Offset: 0x1e
    uint8_t _pad_1[0x1]; // Offset: 0x1f
    ARDataType nightTimeState; // Offset: 0x20
    ARDataType dayTimeState; // Offset: 0x24
    CryStringT* helper; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    ARDataType currentState; // Offset: 0x38
    uint8_t _pad_3[0x4]; // Offset: 0x3c
    DynArray_SLightStatePreset* lightStatePresets; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x48
    DynArray_SLightStateOverride* lightStateOverrides; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x78
};

// Original name: SLightStateOverride
// Size: 0x20
// VTable: 0x1499a5628
struct SLightStateOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState interactionState; // Offset: 0x8
    ARDataType lightState; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SLinkedInteractionStateChangedStateModifier
// Size: 0x58
// VTable: 0x1499a69e0
struct SLinkedInteractionStateChangedStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityContextBase context; // Offset: 0x8
    DynArray_SLinkedInteractionStateTags* onChangeStateTagStates; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    SInteractionState nullEntityState; // Offset: 0x48
};

// Original name: SLinkedInteractionStateTags
// Size: 0x50
// VTable: 0x1499a6938
struct SLinkedInteractionStateTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList stateTags; // Offset: 0x8
    SInteractionState state; // Offset: 0x40
};

// Original name: SLoadoutAssortment
// Size: 0x48
// VTable: 0x1499a72f8
struct SLoadoutAssortment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SLoadoutRequirementBase Requirement; // Offset: 0x8
    DynArray_SGroupedLoadouts* GroupedLoadouts; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SLoadoutInventoryContainer
// Size: 0x38
// VTable: 0x1499a6b60
struct SLoadoutInventoryContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SLoadoutInventoryItem* inventoryItems; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SLoadoutInventoryItem
// Size: 0x38
// VTable: 0x1499a6b00
struct SLoadoutInventoryItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* entityClassName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    EntityClassDefinition entityClassReference; // Offset: 0x18
    int32_t amount; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: SLoadoutRequirementTags
// Size: 0x68
// VTable: 0x1499a71c8
struct SLoadoutRequirementTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* RequiredTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_Tag* BannedTags; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SLockCameraViewAreaParams
// Size: 0x40
// VTable: 0x149a002a0
struct SLockCameraViewAreaParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool lockFirstPerson; // Offset: 0x18
    bool lockThirdPerson; // Offset: 0x19
    bool lockToDefaultView; // Offset: 0x1a
    bool lockToEnterExitView; // Offset: 0x1b
    float cameraEnterToggleSecondsDelay; // Offset: 0x1c
    float cameraExitToggleSecondsDelay; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    Tag exitAreaTag; // Offset: 0x28
};

// Original name: SLootableInventoryParams
// Size: 0x30
// VTable: 0x149a45610
struct SLootableInventoryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams lootOpenInventoryViewInteraction; // Offset: 0x8
    SSharedInteractionParams lootOpenLootingViewInteraction; // Offset: 0x18
    bool allowStorageInteractions; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
};

// Original name: SLootableItemPortRuleParams
// Size: 0xb0
// VTable: 0x149a45560
struct SLootableItemPortRuleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x8
    Ang3 maxOffsetRotation; // Offset: 0x18
    Vec3 maxOffsetTranslation; // Offset: 0x30
    CryStringT* extraFragTags; // Offset: 0x48
    uint8_t _pad_1[0x8]; // Offset: 0x50
    SInteractionStateDef itemState; // Offset: 0x58
};

// Original name: SMFDView
// Size: 0xc0
// VTable: 0x149a5b508
struct SMFDView {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    BuildingBlocks_Canvas landscapeCanvas; // Offset: 0x10
    DynArray_SManufacturerMFDView* landscapeCanvasStyleOverride; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    bool castsUsePortrait; // Offset: 0x58
    uint8_t _pad_2[0x7]; // Offset: 0x59
    BuildingBlocks_Canvas portraitCanvas; // Offset: 0x60
    DynArray_SManufacturerMFDView* portraitCanvasStyleOverride; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
    ARDataType viewType; // Offset: 0xa8
    uint8_t _pad_4[0x4]; // Offset: 0xac
    CryStringT* urlpostfix; // Offset: 0xb0
    uint8_t _pad_5[0x8]; // Offset: 0xb8
};

// Original name: SMFDViewList
// Size: 0x38
// VTable: 0x149a5b560
struct SMFDViewList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SMFDView* views; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SMannequinHangerGroup
// Size: 0x58
// VTable: 0x149a92f00
struct SMannequinHangerGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SItemPortDef* groupPorts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SSharedInteractionParams equipAllInteraction; // Offset: 0x38
    SSharedInteractionParams swapAllInteraction; // Offset: 0x48
};

// Original name: SManufacturerMFDView
// Size: 0x38
// VTable: 0x149a5b398
struct SManufacturerMFDView {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Style manufacturerStyle; // Offset: 0x8
    BuildingBlocks_Canvas canvas; // Offset: 0x20
};

// Original name: SMaterialNodeParams
// Size: 0x90
// VTable: 0x1499a1dd8
struct SMaterialNodeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Tags; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    GlobalResourceMaterial Material; // Offset: 0x18
    TintPaletteRef Palette; // Offset: 0x30
    DynArray_SMaterialNodeParams* materialVariants; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x68
};

// Original name: SMegaMapSolarSystem
// Size: 0x50
// VTable: 0x1499aeb18
struct SMegaMapSolarSystem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSolarSystem Record; // Offset: 0x8
    DynArray_CryStringT* ObjectContainers; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SMisfireCriticalItemStateCondition
// Size: 0x68
// VTable: 0x149a094c8
struct SMisfireCriticalItemStateCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* criticalConditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SMisfireEffect* misfireArray; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SMisfireEffect
// Size: 0x38
// VTable: 0x149a08ff8
struct SMisfireEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag effectTrigger; // Offset: 0x8
    Tag effectTag; // Offset: 0x20
};

// Original name: SMisfireFunctionalityCondition
// Size: 0x48
// VTable: 0x149a09448
struct SMisfireFunctionalityCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float functionalityMin; // Offset: 0x8
    float minTimeForTrigger; // Offset: 0xc
    float meanTimeForCondition; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_SMisfireEffect* misfireArray; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SMisfireLevelParams
// Size: 0x38
// VTable: 0x149a090d0
struct SMisfireLevelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SMisfireProbabilityParams* misfireProbabilityArray; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SMisfireMeanTimeCondition
// Size: 0x40
// VTable: 0x149a09370
struct SMisfireMeanTimeCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minDegradation; // Offset: 0x8
    float meanTimeBetweenMisfire; // Offset: 0xc
    DynArray_SMisfireEffect* misfireArray; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: SMisfireProbabilityParams
// Size: 0x40
// VTable: 0x149a09078
struct SMisfireProbabilityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float weight; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_SMisfireEffect* misfireArray; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SMissionGiverStaticProperties
// Size: 0x20
// VTable: 0x14996bf80
struct SMissionGiverStaticProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionGiver missionGiverProperties; // Offset: 0x8
};

// Original name: SMissionLocationObjectMetadataParams
// Size: 0x48
// VTable: 0x1499e8240
struct SMissionLocationObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionLocationTemplate template_; /* template */ // Offset: 0x8
    CryStringT* actionArea; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    EntityClusterId entityClusterId; // Offset: 0x30
};

// Original name: SMobiGlasAppLink
// Size: 0x48
// VTable: 0x149a36110
struct SMobiGlasAppLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    mobiGlasApp targetApp; // Offset: 0x8
    MobiGlasAppData targetDataEntry; // Offset: 0x20
    CryStringT* displayIcon; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
};

// Original name: SMobiGlasPersonalStatusWeaponItem
// Size: 0x90
// VTable: 0x149a37758
struct SMobiGlasPersonalStatusWeaponItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* weaponTypeName; // Offset: 0x8
    DynArray_SecurityClearanceToken* tokensToBecomeUnlocked; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    FiringRangeScenarioDef basicScenario; // Offset: 0x40
    FiringRangeScenarioDef advancedScenario; // Offset: 0x58
    CLocIdentifier* description; // Offset: 0x70
    EntityClassDefinition displayClass; // Offset: 0x78
};

// Original name: SMobiGlasSetUniqueShip
// Size: 0x20
// VTable: 0x149a37bd0
struct SMobiGlasSetUniqueShip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition shipClass; // Offset: 0x8
};

// Original name: SModelVoiceTagPair
// Size: 0x38
// VTable: 0x149a0c028
struct SModelVoiceTagPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag modelTag; // Offset: 0x8
    Tag voiceTag; // Offset: 0x20
};

// Original name: SMovableGrip
// Size: 0x150
// VTable: 0x149a9cb70
struct SMovableGrip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* gripName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType canBeUsedBy; // Offset: 0x18
    ARDataType handMode; // Offset: 0x1c
    SGrip handGrip; // Offset: 0x20
    SGrip offHandGrip; // Offset: 0xd0
    QuatT userOffset; // Offset: 0xe0
    float width; // Offset: 0x138
    bool AllowStrafe; // Offset: 0x13c
    bool AllowPush; // Offset: 0x13d
    bool AllowPull; // Offset: 0x13e
    uint8_t _pad_2[0x1]; // Offset: 0x13f
    SInteractionPointParams interactionPoint; // Offset: 0x140
};

// Original name: SMultiMissionCompleteReward
// Size: 0x58
// VTable: 0x149a973d8
struct SMultiMissionCompleteReward {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MinRequiredMissions* minRequiredMissions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    EntityClassDefinition rentalEntityClass; // Offset: 0x38
    int32_t durationSeconds; // Offset: 0x50
    ARDataType badgeToAward; // Offset: 0x54
};

// Original name: SMultiMissionCompleteRewardParams
// Size: 0x20
// VTable: 0x149a97490
struct SMultiMissionCompleteRewardParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SMultiMissionCompleteRewardRecord multiMissionCompleteRewardRecord; // Offset: 0x8
};

// Original name: SMultiMissionCompleteRewardRecord
// Size: 0x38
// VTable: 0x149a97430
struct SMultiMissionCompleteRewardRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SMultiMissionCompleteReward* multiMissionCompleteRewards; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SMusicComponentParams
// Size: 0xa8
// VTable: 0x149a2ac00
struct SMusicComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SMusicEventTagMap* events; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_SMusicValueTagMap* values; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_SMusicTagBehaviour* tagBehaviours; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
};

// Original name: SMusicEventTagMap
// Size: 0x60
// VTable: 0x149a2aa08
struct SMusicEventTagMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    SMusicEvent event; // Offset: 0x20
};

// Original name: SMusicTagBehaviour
// Size: 0xe0
// VTable: 0x149a2ab58
struct SMusicTagBehaviour {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    SMusicEvent onAdded; // Offset: 0x20
    SMusicEvent onRemoved; // Offset: 0x60
    SMusicValue stateValue; // Offset: 0xa0
};

// Original name: SMusicValue
// Size: 0x40
// VTable: 0x149a2a908
struct SMusicValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicParameter parameter; // Offset: 0x8
    AudioRtpc rtpc; // Offset: 0x20
};

// Original name: SMusicValueTagMap
// Size: 0x60
// VTable: 0x149a2aa88
struct SMusicValueTagMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    SMusicValue value; // Offset: 0x20
};

// Original name: SNavPointObjectMetadataParams
// Size: 0x38
// VTable: 0x1499e8170
struct SNavPointObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObject starmapRecord; // Offset: 0x8
    CryStringT* locationActionArea; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    bool permanent; // Offset: 0x30
    bool showInAllZones; // Offset: 0x31
    bool allowHierarchyDuplicates; // Offset: 0x32
    bool saveToLocalPlayerObjectDataBank; // Offset: 0x33
    bool moveable; // Offset: 0x34
    uint8_t _pad_2[0x3]; // Offset: 0x35
};

// Original name: SOnInteractionStateChangeTriggers
// Size: 0x48
// VTable: 0x1499e9668
struct SOnInteractionStateChangeTriggers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState targetState; // Offset: 0x8
    DynArray_SBaseInteractionGameplayTrigger* gameplayTriggers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SOnInteractionTriggers
// Size: 0x48
// VTable: 0x1499e96e8
struct SOnInteractionTriggers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams targetInteraction; // Offset: 0x8
    DynArray_SBaseInteractionGameplayTrigger* gameplayTriggers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SOrganizationProperties
// Size: 0x210
// VTable: 0x149a97cc0
struct SOrganizationProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* DisplayName; // Offset: 0x18
    CLocIdentifier* Description; // Offset: 0x20
    CLocIdentifier* Headquarters; // Offset: 0x28
    uint64_t GEID; // Offset: 0x30
    CryStringT* Logo; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    SReputationContextUI ReputationContextPropertiesUI; // Offset: 0x48
    bool Lawful; // Offset: 0x60
    bool DisableReputationTracking; // Offset: 0x61
    uint8_t _pad_3[0x6]; // Offset: 0x62
    DynArray_OrganizationRelationshipParams* Allies; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x70
    DynArray_OrganizationRelationshipParams* Enemies; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xa0
    RelationStandingParams hostilityParams; // Offset: 0xc8
    RelationStandingParams alliedParams; // Offset: 0x120
    int32_t MemberCount; // Offset: 0x178
    uint8_t _pad_6[0x4]; // Offset: 0x17c
    DynArray_SReputationContextBBPropertyParams* propertiesBB; // Offset: 0x180 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x188
    DynArray_SPerkReputationListParams* perkReputationRewardList; // Offset: 0x1b0 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x1b8
    DynArray_SandboxTriggerBaseDef* sandboxTriggers; // Offset: 0x1e0 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x1e8
};

// Original name: SOrganizationRelationships
// Size: 0x58
// VTable: 0x149a97f80
struct SOrganizationRelationships {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    OrganizationRelationshipParams primaryOrganization; // Offset: 0x8
};

// Original name: SOutfitHangerGroup
// Size: 0x58
// VTable: 0x149a92dd0
struct SOutfitHangerGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SItemPortDef* groupPorts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SSharedInteractionParams equipAllInteraction; // Offset: 0x38
    SSharedInteractionParams swapAllInteraction; // Offset: 0x48
};

// Original name: SOutfitPlacingRule
// Size: 0x30
// VTable: 0x149a452e8
struct SOutfitPlacingRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Type; // Offset: 0x8
    ARDataType SubType; // Offset: 0xc
    SItemPortDef Port; // Offset: 0x10
    SInteractionPointParams InteractionPoint; // Offset: 0x20
};

// Original name: SPUHostility
// Size: 0x588
// VTable: 0x149966600
struct SPUHostility {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enableReputationHostility; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    PlayerHostilityParams playerHostilityParams; // Offset: 0x20
    RammingTrackerParams rammingParams; // Offset: 0xb8
    BountyParams bountyParams; // Offset: 0xd8
    LawSystemGlobalSettings lawSystemSettings; // Offset: 0x178
};

// Original name: SPVPBountyContractGenerators
// Size: 0x38
// VTable: 0x149970918
struct SPVPBountyContractGenerators {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObject locationAvailable; // Offset: 0x8
    ContractGenerator contractGenerator; // Offset: 0x20
};

// Original name: SPerkDiscountItemCategory
// Size: 0x58
// VTable: 0x149a972a0
struct SPerkDiscountItemCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ShopFranchise franchise; // Offset: 0x18
    ARDataType type_; /* type */ // Offset: 0x30
    ARDataType subType; // Offset: 0x34
    Tag requiredTag; // Offset: 0x38
    float discountPercentage; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
};

// Original name: SPerkEnabledItemCategory
// Size: 0x50
// VTable: 0x149a972a8
struct SPerkEnabledItemCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ShopFranchise franchise; // Offset: 0x18
    ARDataType type_; /* type */ // Offset: 0x30
    ARDataType subType; // Offset: 0x34
    Tag requiredTag; // Offset: 0x38
};

// Original name: SPerkParamsItem
// Size: 0x60
// VTable: 0x149a97030
struct SPerkParamsItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CLocIdentifier* displayName; // Offset: 0x28
    CLocIdentifier* displayDescription; // Offset: 0x30
    CryStringT* icon; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    EntityClassDefinition rewardItem; // Offset: 0x48
};

// Original name: SPerkShopItemCategoryBase
// Size: 0x50
// VTable: 0x149a97240
struct SPerkShopItemCategoryBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ShopFranchise franchise; // Offset: 0x18
    ARDataType type_; /* type */ // Offset: 0x30
    ARDataType subType; // Offset: 0x34
    Tag requiredTag; // Offset: 0x38
};

// Original name: SPhysicalScreen
// Size: 0x30
// VTable: 0x149a5b9d8
struct SPhysicalScreen {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* geometryName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_Canvas canvas; // Offset: 0x18
};

// Original name: SPlayerLoadoutOverride
// Size: 0x38
// VTable: 0x149a3c4a8
struct SPlayerLoadoutOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    EntityClassDefinition standinRecord; // Offset: 0x20
};

// Original name: SPlayerUsableParams
// Size: 0x110
// VTable: 0x1499cdc60
struct SPlayerUsableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_PlayerUsableSlot* playerUsableSlots; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_PlayerUsableUseChannelInstance* playerUseChannels; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_SSequencerPlayerUsableTaskParams* sequencerTasks; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
    SSpecializedData specializedData; // Offset: 0xa8
    DynArray_PlayerUsableView* views; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xe8
};

// Original name: SPlayerUsableSearchRouteUsable
// Size: 0x178
// VTable: 0x1499cd600
struct SPlayerUsableSearchRouteUsable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList searchUsableTags; // Offset: 0x8
    TagList searchUsableItemProviderTags; // Offset: 0x40
    SUsableRoutingSettings routingSettings; // Offset: 0x78
    uint8_t _pad_1[0x60]; // Offset: 0x118
};

// Original name: SPowerSourceStateModifier
// Size: 0x38
// VTable: 0x149a46520
struct SPowerSourceStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onOnlineState; // Offset: 0x8
    SInteractionState onOfflineState; // Offset: 0x18
    SInteractionState onInoperableState; // Offset: 0x28
};

// Original name: SPowerUserState
// Size: 0x20
// VTable: 0x149a07c30
struct SPowerUserState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState state; // Offset: 0x8
    bool isFailing; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: SPowerUserStateModifier
// Size: 0x38
// VTable: 0x149a07c90
struct SPowerUserStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SPowerUserState* powerUserStates; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SPrimeableAnimationState
// Size: 0x40
// VTable: 0x149a461d0
struct SPrimeableAnimationState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState animatedState; // Offset: 0x8
    CryStringT* fragmentId; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* fragTag; // Offset: 0x28
    uint8_t _pad_2[0x10]; // Offset: 0x30
};

// Original name: SPrimeableComponentParams
// Size: 0xe0
// VTable: 0x149a46410
struct SPrimeableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SPrimeableAnimationState primedState; // Offset: 0x18
    SPrimeableAnimationState unprimedState; // Offset: 0x28
    SPrimeableAnimationState settledState; // Offset: 0x38
    SPrimeableAnimationState pickedUpState; // Offset: 0x48
    SSharedInteractionParams onPrimeInteraction; // Offset: 0x58
    SSharedInteractionParams onUnprimeInteraction; // Offset: 0x68
    DynArray_SPrimeableAnimationState* primeableAnimatedStates; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x80
    bool unprimeOnTake; // Offset: 0xa8
    bool primeOnTake; // Offset: 0xa9
    bool primeOnPlace; // Offset: 0xaa
    bool primeOnPlaceAttach; // Offset: 0xab
    bool primeOnThrow; // Offset: 0xac
    bool primeOnAttach; // Offset: 0xad
    uint8_t _pad_2[0x32]; // Offset: 0xae
};

// Original name: SPrisonSentenceStateModifier
// Size: 0x28
// VTable: 0x149968978
struct SPrisonSentenceStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onFinishSentenceSuccess; // Offset: 0x8
    SInteractionState onFinishSentenceFail; // Offset: 0x18
};

// Original name: SQedVisualGraphEffectParams
// Size: 0x40
// VTable: 0x149a55080
struct SQedVisualGraphEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag entityEffectTag; // Offset: 0x8
    Tag entityEffectTrigger; // Offset: 0x20
    float strength; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: SQedVisualGraphParams
// Size: 0x50
// VTable: 0x149a55348
struct SQedVisualGraphParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag effectStrengthLink; // Offset: 0x8
    DynArray_SQedVisualGraphStateParams* states; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SQedVisualGraphStateParams
// Size: 0xa8
// VTable: 0x149a552c0
struct SQedVisualGraphStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SQedVisualGraphAnimationParams animationParams; // Offset: 0x8
    SQedVisualGraphEffectParams effectParams; // Offset: 0x38
    DynArray_SQedVisualGraphTransitionParams* transitions; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x80
};

// Original name: SQuantumBoostEffectParams_LEGACY
// Size: 0x158
// VTable: 0x149a538d0
struct SQuantumBoostEffectParams_LEGACY {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag spoolEffectTag; // Offset: 0x8
    Tag spoolStrengthTag; // Offset: 0x20
    BezierCurve spoolStrengthCurve; // Offset: 0x38
    Tag trailsEffectTag; // Offset: 0xc8
    Tag trailsEffectStrengthTag; // Offset: 0xe0
    Tag travelEffectTag; // Offset: 0xf8
    Tag enterFlashEffectTag; // Offset: 0x110
    Tag exitFlashEffectTag; // Offset: 0x128
    Tag forcedDropoutEffectTag; // Offset: 0x140
};

// Original name: SQuantumBoostParams
// Size: 0x890
// VTable: 0x149a53fb0
struct SQuantumBoostParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxBoostSpeed; // Offset: 0x8
    float timeToMaxBoostSpeed; // Offset: 0xc
    float boostUseTime; // Offset: 0x10
    float boostRechargeTime; // Offset: 0x14
    float minJumpDistance; // Offset: 0x18
    float stopTime; // Offset: 0x1c
    BezierCurve vibrationPreparing; // Offset: 0x20
    BezierCurve vibrationSpeed; // Offset: 0xb0
    BezierCurve vibrationCancel; // Offset: 0x140
    float ifcsHandoverDownTime; // Offset: 0x1d0
    float ifcsHandoverRespoolTime; // Offset: 0x1d4
    SQuantumBoostAudioParams audio; // Offset: 0x1d8
    SQuantumBoostEffectParams_LEGACY effects_LEGACY; // Offset: 0x300
    SQuantumBoostRotationParams rotation; // Offset: 0x458
    SQuantumBoostBubbleIntegrityParams bubbleIntegrity; // Offset: 0x590
};

// Original name: SQuantumDriveEffectParams_LEGACY
// Size: 0x128
// VTable: 0x149a51368
struct SQuantumDriveEffectParams_LEGACY {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag alignEffectTag; // Offset: 0x8
    Tag pinchEffectTag; // Offset: 0x20
    Tag travelEffectTag; // Offset: 0x38
    Tag enterFlashEffectTag; // Offset: 0x50
    Tag exitFlashEffectTag; // Offset: 0x68
    Tag spoolEffectTag; // Offset: 0x80
    Tag pinchStrengthTag; // Offset: 0x98
    Tag spoolStrengthTag; // Offset: 0xb0
    Tag trailsTag; // Offset: 0xc8
    Tag trailsStrTag; // Offset: 0xe0
    Tag interdictionEffectTag; // Offset: 0xf8
    Tag interdictionExitFlashTag; // Offset: 0x110
};

// Original name: SQuantumDriveEffectTemplate
// Size: 0x130
// VTable: 0x149a513c0
struct SQuantumDriveEffectTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SQuantumDriveEffectParams_LEGACY tags; // Offset: 0x8
};

// Original name: SQuantumDriveEffectTemplateRef
// Size: 0x20
// VTable: 0x149a514f0
struct SQuantumDriveEffectTemplateRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SQuantumDriveEffectTemplate tagRecord; // Offset: 0x8
};

// Original name: SQuantumDriveParams
// Size: 0xc0
// VTable: 0x149a51150
struct SQuantumDriveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float driveSpeed; // Offset: 0x8
    float cooldownTime; // Offset: 0xc
    float stageOneAccelRate; // Offset: 0x10
    float stageTwoAccelRate; // Offset: 0x14
    float engageSpeed; // Offset: 0x18
    float VFXSpoolEndVelocity; // Offset: 0x1c
    float VFXPinchEffectTime; // Offset: 0x20
    float VFXPinchMaxVelocity; // Offset: 0x24
    float VFXEntryFlashVelocity; // Offset: 0x28
    float VFXTrailStartVelocity; // Offset: 0x2c
    float VFXTravelEffectStartVelocity; // Offset: 0x30
    float VFXTravelEffectEndVelocity; // Offset: 0x34
    float VFXExitEffectVelocity; // Offset: 0x38
    float ShaderNodeEngageVelocity; // Offset: 0x3c
    float ShaderNodeShutdownVelocity; // Offset: 0x40
    float ShaderNodeMaxStrengthVelocity; // Offset: 0x44
    float interdictionEffectTime; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
    SQuantumDriveEffectBaseParams effectTags; // Offset: 0x50
    float calibrationRate; // Offset: 0x60
    float minCalibrationRequirement; // Offset: 0x64
    float maxCalibrationRequirement; // Offset: 0x68
    float calibrationProcessAngleLimit; // Offset: 0x6c
    float calibrationWarningAngleLimit; // Offset: 0x70
    float calibrationDelayInSeconds; // Offset: 0x74
    float spoolUpTime; // Offset: 0x78
    uint8_t _pad_2[0x4]; // Offset: 0x7c
    SSharedInteractionParams beginQuantumTravelInteraction; // Offset: 0x80
    SSharedInteractionParams abortQuantumTravelInteraction; // Offset: 0x90
    ItemResourceState idleState; // Offset: 0xa0
    ItemResourceState travellingState; // Offset: 0xb0
};

// Original name: SQuantumResourceNetworkParams
// Size: 0x38
// VTable: 0x149a54930
struct SQuantumResourceNetworkParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceState idleState; // Offset: 0x8
    ItemResourceState spoolingState; // Offset: 0x18
    ItemResourceState travellingState; // Offset: 0x28
};

// Original name: SQuantumTracePointParams
// Size: 0x38
// VTable: 0x149a54ef8
struct SQuantumTracePointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Marker_Configuration markerConfig; // Offset: 0x18
    float lifeTime; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
};

// Original name: SRadarDisplayStateModifier
// Size: 0x38
// VTable: 0x1499c2250
struct SRadarDisplayStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onRadarPoweredOff; // Offset: 0x8
    SInteractionState onSmallRadarEnabled; // Offset: 0x18
    SInteractionState onFullScreenRadarEnabled; // Offset: 0x28
};

// Original name: SRangeStateLevel
// Size: 0x20
// VTable: 0x1499a4f68
struct SRangeStateLevel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState state; // Offset: 0x8
    float min; // Offset: 0x18
    float max; // Offset: 0x1c
};

// Original name: SRangeStateModifier
// Size: 0x38
// VTable: 0x1499a5450
struct SRangeStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRangeStateLevel* stateRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SRemoteRigidEntityControlledEntitiesParams
// Size: 0x108
// VTable: 0x1499cff58
struct SRemoteRigidEntityControlledEntitiesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SControlledEntityParams* entities; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SAutoCraneParams autoCraneData; // Offset: 0x38
    SOverrideControlledEntityCameraParams cameraOverrideData; // Offset: 0x80
    SControlledEntityGroupCondition accessCondition; // Offset: 0xe0
};

// Original name: SRemoteRigidEntityControllerControlledGroupParams
// Size: 0x38
// VTable: 0x1499cffb0
struct SRemoteRigidEntityControllerControlledGroupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRemoteRigidEntityControlledEntitiesParams* entityGroups; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SRemoteRigidEntityControllerParams
// Size: 0x280
// VTable: 0x1499d04c8
struct SRemoteRigidEntityControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams animStartInteraction; // Offset: 0x18
    SSharedInteractionParams oneHandedAnimStartInteraction; // Offset: 0x28
    SSharedInteractionParams animStopInteraction; // Offset: 0x38
    SSharedInteractionParams startUsingInteraction; // Offset: 0x48
    SSharedInteractionParams action1Interaction; // Offset: 0x58
    SSharedInteractionParams action2Interaction; // Offset: 0x68
    SSharedInteractionParams grabInteraction; // Offset: 0x78
    SSharedInteractionParams releaseInteraction; // Offset: 0x88
    SSharedInteractionParams exitInteraction; // Offset: 0x98
    SInteractionState functionalState; // Offset: 0xa8
    SInteractionState brokenState; // Offset: 0xb8
    SInteractionState preventGrabbingState; // Offset: 0xc8
    SInteractionState preventDroppingState; // Offset: 0xd8
    SRemoteRigidEntityControllerControlledGroupParams controlledGroups; // Offset: 0xe8
    SControlledEntityCameraParams cameraData; // Offset: 0x120
    float movementLerpSpeed; // Offset: 0x170
    float rotationLerpSpeed; // Offset: 0x174
    float scaleLerpSpeed; // Offset: 0x178
    uint8_t _pad_1[0x4]; // Offset: 0x17c
    SRemoteRigidEntityControllerOneHandedParams oneHandedParams; // Offset: 0x180
    Vec3 forwardBackwardMovement; // Offset: 0x1a8
    Vec3 sideToSideMovement; // Offset: 0x1c0
    Vec3 upDownMovement; // Offset: 0x1d8
    Vec3 keyboardRotation; // Offset: 0x1f0
    Vec3 mouseLeftRightRotation; // Offset: 0x208
    Vec3 mouseUpDownRotation; // Offset: 0x220
    float rotationDeadzone; // Offset: 0x238
    uint8_t _pad_2[0x4]; // Offset: 0x23c
    SControlledEntityRopeAttachmentPairs relevantRopeAttachments; // Offset: 0x240
    float objectSearchRange; // Offset: 0x278
    uint8_t _pad_3[0x4]; // Offset: 0x27c
};

// Original name: SReplicatedSequencerDefSequenceParams
// Size: 0x58
// VTable: 0x1499a0528
struct SReplicatedSequencerDefSequenceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SSequencerSequenceTaskEntryParams* taskEntries; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    SSharedInteractionParams interaction; // Offset: 0x48
};

// Original name: SReputationAmountListParams
// Size: 0x38
// VTable: 0x149a96640
struct SReputationAmountListParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SReputationAmountParams* reputationAmounts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SReputationAmountParams
// Size: 0x50
// VTable: 0x149a965e0
struct SReputationAmountParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FactionReputation factionReputation; // Offset: 0x8
    SReputationScopeParams reputationScope; // Offset: 0x20
    SReputationRewardAmount reward; // Offset: 0x38
};

// Original name: SReputationJournalEntriesParams
// Size: 0x68
// VTable: 0x149a96e70
struct SReputationJournalEntriesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FactionReputation factionReputation; // Offset: 0x8
    SReputationScopeParams reputationScope; // Offset: 0x20
    DynArray_SReputationJournalGroupParams* journalGroups; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: SReputationJournalEntryHandlerParams
// Size: 0x38
// VTable: 0x149a96ed0
struct SReputationJournalEntryHandlerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SReputationJournalEntriesParams* reputationTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SReputationMissionGiverRequirementParams
// Size: 0x58
// VTable: 0x149a96c28
struct SReputationMissionGiverRequirementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FactionReputation factionReputation; // Offset: 0x8
    SReputationScopeParams reputationScope; // Offset: 0x20
    ARDataType comparison; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    SReputationStandingParams standing; // Offset: 0x40
};

// Original name: SReputationMissionGiverRewardBonusParams
// Size: 0x68
// VTable: 0x149a96770
struct SReputationMissionGiverRewardBonusParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FactionReputation factionReputation; // Offset: 0x8
    SReputationScopeParams reputationScope; // Offset: 0x20
    DynArray_SReputationStandingRewardBonusParams* rewardBonuses; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: SReputationMissionRewardBonusParams
// Size: 0x38
// VTable: 0x149a967d0
struct SReputationMissionRewardBonusParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SReputationMissionGiverRewardBonusParams* missionGiverBonuses; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SResourceContainerStateModifier
// Size: 0x58
// VTable: 0x1499c22d8
struct SResourceContainerStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRangeStateLevel* stateRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ResourceType containerResource; // Offset: 0x38
    bool useActualOccupancyValue; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
};

// Original name: SResourceTypeDefaultCargoContainers
// Size: 0xf8
// VTable: 0x149961d88
struct SResourceTypeDefaultCargoContainers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition one_eighthSCU; // Offset: 0x8
    EntityClassDefinition one_quarterSCU; // Offset: 0x20
    EntityClassDefinition one_halfSCU; // Offset: 0x38
    EntityClassDefinition oneSCU; // Offset: 0x50
    EntityClassDefinition twoSCU; // Offset: 0x68
    EntityClassDefinition fourSCU; // Offset: 0x80
    EntityClassDefinition eightSCU; // Offset: 0x98
    EntityClassDefinition sixteenSCU; // Offset: 0xb0
    EntityClassDefinition twentyFourSCU; // Offset: 0xc8
    EntityClassDefinition thirtyTwoSCU; // Offset: 0xe0
};

// Original name: SRewardGeneratorComponentParams
// Size: 0xa8
// VTable: 0x149a0a7c0
struct SRewardGeneratorComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams selectRandomRewardInteraction; // Offset: 0x18
    SSharedInteractionParams claimInteraction; // Offset: 0x28
    SSharedInteractionParams retrieveInteraction; // Offset: 0x38
    SSharedInteractionParams cleanupInteraction; // Offset: 0x48
    bool allowCleanupInSameRevolution; // Offset: 0x58
    uint8_t _pad_1[0x7]; // Offset: 0x59
    MissionScenario missionScenario; // Offset: 0x60
    DynArray_SWeightedRewardEntry* rewardPool; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x80
};

// Original name: SS42Spawning
// Size: 0x88
// VTable: 0x149a3c550
struct SS42Spawning {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float respawnTimeKilled; // Offset: 0x18
    bool pressXToRespawn; // Offset: 0x1c
    bool allowForceRespawnSuicide; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    SCustomizableMaterialLookupTable customizableMaterialsLookupTable; // Offset: 0x20
    DynArray_SPlayerLoadoutOverride* loadoutOverrides; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    CryStringT* defaultPlayerCharacterMale; // Offset: 0x68
    uint8_t _pad_3[0x8]; // Offset: 0x70
    CryStringT* defaultPlayerCharacterFemale; // Offset: 0x78
    uint8_t _pad_4[0x8]; // Offset: 0x80
};

// Original name: SSCItemSelfDestructComponentParams
// Size: 0x50
// VTable: 0x149a296f8
struct SSCItemSelfDestructComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float damage; // Offset: 0x18
    float minRadius; // Offset: 0x1c
    float radius; // Offset: 0x20
    float minPhysRadius; // Offset: 0x24
    float physRadius; // Offset: 0x28
    float time; // Offset: 0x2c
    SSharedInteractionParams engageSelfDestructInteraction; // Offset: 0x30
    SSharedInteractionParams disengageSelfDestructInteraction; // Offset: 0x40
};

// Original name: SSCItemTargetSelectorComponentParams
// Size: 0x148
// VTable: 0x149a56490
struct SSCItemTargetSelectorComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    STargetSelectorGlobalTargetingParams globalTargetingParams; // Offset: 0x18
    int32_t maxPinnedTargets; // Offset: 0x30
    float outerAngle; // Offset: 0x34
    float innerAngle; // Offset: 0x38
    float autoSelectionTimer; // Offset: 0x3c
    STargetableItemTypesRecord targetableItemTypesRecord; // Offset: 0x40
    SSharedInteractionParams cycleFriendlyTargetInteraction; // Offset: 0x58
    SSharedInteractionParams cycleHostileTargetInteraction; // Offset: 0x68
    SSharedInteractionParams cycleAllTargetsInteraction; // Offset: 0x78
    SSharedInteractionParams cyclePinnedTargetInteraction; // Offset: 0x88
    SSharedInteractionParams cycleSubTargetInteraction; // Offset: 0x98
    SSharedInteractionParams beginSubTargetingInteraction; // Offset: 0xa8
    SSharedInteractionParams endSubTargetingInteraction; // Offset: 0xb8
    SSharedInteractionParams pinTargetInteraction; // Offset: 0xc8
    SSharedInteractionParams unpinTargetInteraction; // Offset: 0xd8
    SARMarkersParams arMarkersParams; // Offset: 0xe8
    SARTrailParams arTrailParams; // Offset: 0xf8
    OcclusionBindingsParams occlusionParams; // Offset: 0x118
    STargetSelectorHudParams hudParamsOverride; // Offset: 0x130
};

// Original name: SSCRadarContactProperites
// Size: 0x60
// VTable: 0x1499e9f30
struct SSCRadarContactProperites {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RadarContactTypeEntry contactType; // Offset: 0x8
    SSCSignatureParamsBase baseSignatureParams; // Offset: 0x20
    SSCSignatureSystemCrossSectionParams crossSectionParams; // Offset: 0x30
    SSCSignatureEmissionBaseModifier emissionModifierParams; // Offset: 0x40
    SSCSignatureSystemScanBounds scanBounds; // Offset: 0x50
};

// Original name: SSCShipStatusAppParams
// Size: 0x48
// VTable: 0x149a38060
struct SSCShipStatusAppParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    mobiGlasApp linkedStarMap; // Offset: 0x8
    float shipHoloRotationSpeed; // Offset: 0x20
    float shipHoloRotationSmoothTime; // Offset: 0x24
    float lowAmmoThreshold; // Offset: 0x28
    float lowOrdnanceThreshold; // Offset: 0x2c
    float lowHydrogenFuelThreshold; // Offset: 0x30
    float lowQuantumFuelThreshold; // Offset: 0x34
    float shipRecallRetryTime; // Offset: 0x38
    bool requirePermissionForShipRecall; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
    bool ignoreUnspawnedShips; // Offset: 0x40
    uint8_t _pad_2[0x7]; // Offset: 0x41
};

// Original name: SSCSignatureSystemAudioTriggerTagRule
// Size: 0x60
// VTable: 0x1499ea290
struct SSCSignatureSystemAudioTriggerTagRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSCSignatureSystemAudioSubRule* subRules; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SSCSignatureSystemAudioModifier modifier; // Offset: 0x38
    Tag triggerTag; // Offset: 0x48
};

// Original name: SSCSignatureSystemBaseSignatureParams
// Size: 0x98
// VTable: 0x1499e9d10
struct SSCSignatureSystemBaseSignatureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_STaggedSignaturesEntry* taggedSignatures; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SSignaturesCategoryEntry* signatureCategories; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_float* signatures; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: SSCSignatureSystemParams
// Size: 0xe0
// VTable: 0x1499ea568
struct SSCSignatureSystemParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* bindingURLPrefix; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    SSCRadarContactProperites radarProperties; // Offset: 0x28
    SSCSignatureSystemAudioParams audioParams; // Offset: 0x38
    ScanCustomDataDef scanCustomData; // Offset: 0x48
    ScanCustomDataInfo embeddedScanInfo; // Offset: 0x60
    ScanDisplayLayoutParams scanDisplayLayoutOverride; // Offset: 0x70
    DynArray_Tag* detectionTags; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x90
    bool isOverridden; // Offset: 0xb8
    uint8_t _pad_3[0x7]; // Offset: 0xb9
    Vec3 overriddenSize; // Offset: 0xc0
    bool enableDetectionOnItemPort; // Offset: 0xd8
    bool isObjectOfInterest; // Offset: 0xd9
    bool ignoreHighlightWhenDetectorInsideBounds; // Offset: 0xda
    uint8_t _pad_4[0x5]; // Offset: 0xdb
};

// Original name: SSalvageCargoParams
// Size: 0xb8
// VTable: 0x149a3d5f8
struct SSalvageCargoParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conveyorRetractedStateTag; // Offset: 0x8
    Tag conveyorDeployedStateTag; // Offset: 0x20
    CryStringT* ejectCargoBoxInteration; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
    CryStringT* conveyorResetInteration; // Offset: 0x48
    uint8_t _pad_2[0x8]; // Offset: 0x50
    SSalvageAreaBoxParams obstructionArea; // Offset: 0x58
    CLocIdentifier* cargoTabLocString; // Offset: 0x90
    CLocIdentifier* createTabLocString; // Offset: 0x98
    float extractionRateUpdateInterval; // Offset: 0xa0
    float extractionRateAveragingInterval; // Offset: 0xa4
    float minCargoBoxSize; // Offset: 0xa8
    float maxCargoBoxSize; // Offset: 0xac
    float boxFillingTimePerSCU; // Offset: 0xb0
    uint8_t _pad_3[0x4]; // Offset: 0xb4
};

// Original name: SSalvageGlobalStructuralVFXParams
// Size: 0x100
// VTable: 0x1499b9f60
struct SSalvageGlobalStructuralVFXParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag sourceResonateTag; // Offset: 0x8
    Tag sourceDisintegrateTag; // Offset: 0x20
    Tag sourceDisintegrateBeamTag; // Offset: 0x38
    Tag sourceFieldMaterialsTag; // Offset: 0x50
    float sourceIdleFieldStrengthValue; // Offset: 0x68
    float sourceMinEngagedFieldStrengthValue; // Offset: 0x6c
    Tag sourceFieldStrengthLinkTag; // Offset: 0x70
    float targetDisintegrateDissolveTime; // Offset: 0x88
    uint8_t _pad_1[0x4]; // Offset: 0x8c
    GlobalResourceParticle targetResonateParticle; // Offset: 0x90
    GlobalResourceParticle targetBreakParticle; // Offset: 0xa8
    GlobalResourceParticle targetDisintegrateParticle; // Offset: 0xc0
    GlobalResourceParticle targetDisintegrateDebrisParticle; // Offset: 0xd8
    CryStringT* vectorFieldPath; // Offset: 0xf0
    uint8_t _pad_2[0x8]; // Offset: 0xf8
};

// Original name: SSalvageRepairGlowParams
// Size: 0x30
// VTable: 0x149a79f20
struct SSalvageRepairGlowParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stableGlow; // Offset: 0x8
    float unstableGlow; // Offset: 0xc
    float idleGlow; // Offset: 0x10
    float inactiveGlow; // Offset: 0x14
    Tag glowTag; // Offset: 0x18
};

// Original name: SSalvageRepairMaterialParams
// Size: 0x28
// VTable: 0x149a7afc0
struct SSalvageRepairMaterialParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hullThicknessMeters; // Offset: 0x8
    float ammoToMaterialFactor; // Offset: 0xc
    ResourceType RMCResourceType; // Offset: 0x10
};

// Original name: SSalvageScrapingParams
// Size: 0x20
// VTable: 0x149a3de30
struct SSalvageScrapingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ResourceType scrapingResourceType; // Offset: 0x8
};

// Original name: SSalvageStructuralParams
// Size: 0xf8
// VTable: 0x149a3ddd8
struct SSalvageStructuralParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t numFieldSupportersRequired; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SSalvageAreaBoxParams fieldEmitterArea; // Offset: 0x10
    SSalvageAreaBoxParams vectorFieldAreaVFX; // Offset: 0x48
    float fractureTimePerRadiusMetre; // Offset: 0x80
    float minFracturableRadius; // Offset: 0x84
    float maxFracturableRadius; // Offset: 0x88
    float minDisintegratableRadius; // Offset: 0x8c
    float maxDisintegratableRadius; // Offset: 0x90
    float disintegrationTimePerRadiusMetre; // Offset: 0x94
    float disintegrationSCUPerCubicMetre; // Offset: 0x98
    uint8_t _pad_2[0x4]; // Offset: 0x9c
    ResourceType disintegrationResourceType; // Offset: 0xa0
    CryStringT* startGrinderInteraction; // Offset: 0xb8
    uint8_t _pad_3[0x8]; // Offset: 0xc0
    CryStringT* stopGrinderInteraction; // Offset: 0xc8
    uint8_t _pad_4[0x8]; // Offset: 0xd0
    bool fieldAlignmentSpeedMultiplierEnabledFracture; // Offset: 0xd8
    bool fieldAlignmentSpeedMultiplierEnabledDisintegration; // Offset: 0xd9
    bool fieldAlignmentYieldMultiplierEnabledDisintegration; // Offset: 0xda
    uint8_t _pad_5[0x1]; // Offset: 0xdb
    float fieldAlignmentFalloffDistanceForward; // Offset: 0xdc
    float fieldAlignmentFalloffDistanceRadial; // Offset: 0xe0
    float fieldAlignmentSweetSpotForwardFactor; // Offset: 0xe4
    float fieldAlignmentMaxSpeedMultiplier; // Offset: 0xe8
    float fieldAlignmentMaxYieldMultiplier; // Offset: 0xec
    float fieldAlignmentBaselineFactor; // Offset: 0xf0
    uint8_t _pad_6[0x4]; // Offset: 0xf4
};

// Original name: SSecondaryAmmoContainerParams
// Size: 0x30
// VTable: 0x149a61558
struct SSecondaryAmmoContainerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SWeaponConditionBase condition; // Offset: 0x8
    EntityClassDefinition ammoContainerRecord; // Offset: 0x18
};

// Original name: SSecurityNetworkRoomExtensionParams
// Size: 0x30
// VTable: 0x149966b70
struct SSecurityNetworkRoomExtensionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SecurityNetworkRoomSettings settings; // Offset: 0x18
};

// Original name: SSequencerDefInteractionTaskParams
// Size: 0x30
// VTable: 0x1499a09e0
struct SSequencerDefInteractionTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    SSharedInteractionParams interaction; // Offset: 0x20
};

// Original name: SSequencerDefSequenceParams
// Size: 0x58
// VTable: 0x1499a0520
struct SSequencerDefSequenceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SSequencerSequenceTaskEntryParams* taskEntries; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    SSharedInteractionParams interaction; // Offset: 0x48
};

// Original name: SSequencerImmediateDespawnDespawnerTaskParams
// Size: 0x50
// VTable: 0x1499ed3c0
struct SSequencerImmediateDespawnDespawnerTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    DynArray_SItemPortDef* immediateDespawnPorts; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SSequencerPlayerUsableReserveSlotTaskParams
// Size: 0x1b8
// VTable: 0x1499cd828
struct SSequencerPlayerUsableReserveSlotTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* name; // Offset: 0x20
    uint8_t _pad_1[0x10]; // Offset: 0x28
    SPlayerUsableSearchRouteUsable searchUsableRoute; // Offset: 0x38
    bool reserveSlot; // Offset: 0x1b0
    uint8_t _pad_2[0x7]; // Offset: 0x1b1
};

// Original name: SSequencerPlayerUsableScoochTaskParams
// Size: 0x1b0
// VTable: 0x1499cd740
struct SSequencerPlayerUsableScoochTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* name; // Offset: 0x20
    uint8_t _pad_1[0x10]; // Offset: 0x28
    SPlayerUsableSearchRouteUsable searchUsableRoute; // Offset: 0x38
};

// Original name: SSequencerPlayerUsableSwitchChannelTaskParams
// Size: 0x78
// VTable: 0x1499cd6e8
struct SSequencerPlayerUsableSwitchChannelTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* name; // Offset: 0x20
    uint8_t _pad_1[0x10]; // Offset: 0x28
    CryStringT* useChannelName; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    UseChannelArchetype userOnChannel; // Offset: 0x48
    uint8_t _pad_3[0x18]; // Offset: 0x60
};

// Original name: SSequencerPlayerUsableUseChannelTaskParams
// Size: 0x48
// VTable: 0x1499cd7a0
struct SSequencerPlayerUsableUseChannelTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* name; // Offset: 0x20
    uint8_t _pad_1[0x10]; // Offset: 0x28
    PlayerUsableItemPort playerUsablePort; // Offset: 0x38
};

// Original name: SSequencerSetInteractionStateCarryableTaskParams
// Size: 0x30
// VTable: 0x149a8eb80
struct SSequencerSetInteractionStateCarryableTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    SInteractionState state; // Offset: 0x20
};

// Original name: SSequencerTurretSetLimiterTagTaskParams
// Size: 0x38
// VTable: 0x149a59de0
struct SSequencerTurretSetLimiterTagTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    Tag limiterTag; // Offset: 0x20
};

// Original name: SSequencerTurretSetMovementTagTaskParams
// Size: 0x38
// VTable: 0x149a59d80
struct SSequencerTurretSetMovementTagTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    Tag movementTag; // Offset: 0x20
};

// Original name: SSequencerUsableDisableUseChannelTask
// Size: 0x58
// VTable: 0x149a82ad0
struct SSequencerUsableDisableUseChannelTask {
    uint8_t _pad_0[0x28]; // Offset: 0x0
    DynArray_UsableUseChannelInstance* useChannelInstancesToDisable; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: SSequencerUsableEnableUseChannelTask
// Size: 0x58
// VTable: 0x149a82a70
struct SSequencerUsableEnableUseChannelTask {
    uint8_t _pad_0[0x28]; // Offset: 0x0
    DynArray_UsableUseChannelInstance* useChannelInstancesToEnable; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: SServiceBeaconCreatorParams
// Size: 0x20
// VTable: 0x149aae5a0
struct SServiceBeaconCreatorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionBrokerEntry missionEntry; // Offset: 0x8
};

// Original name: SServiceBeaconCreatorParamsWithDifficulty
// Size: 0x38
// VTable: 0x149aae6b0
struct SServiceBeaconCreatorParamsWithDifficulty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SServiceBeaconDifficultyEntry* missionEntriesByDifficulty; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SServiceBeaconDifficultyEntry
// Size: 0x38
// VTable: 0x149aae650
struct SServiceBeaconDifficultyEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t difficulty; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    MissionBrokerEntry missionEntry; // Offset: 0x10
    SServiceBeaconNotificationOverride beaconDetectedNotificationOverride; // Offset: 0x28
};

// Original name: SSetInteractionStateInItemportedGameplayTrigger
// Size: 0x60
// VTable: 0x1499fb508
struct SSetInteractionStateInItemportedGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool bApplyToAllChildren; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_SItemPortDef* itemPorts; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    CryStringT* stateTypeName; // Offset: 0x40
    uint8_t _pad_3[0x8]; // Offset: 0x48
    CryStringT* stateName; // Offset: 0x50
    uint8_t _pad_4[0x8]; // Offset: 0x58
};

// Original name: SSetSecurityNetworkVariableTrigger
// Size: 0x38
// VTable: 0x1499685e0
struct SSetSecurityNetworkVariableTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SecurityNetworkVariable variable; // Offset: 0x8
};

// Original name: SSharedInteractionParams
// Size: 0xf8
// VTable: 0x1499a0810
struct SSharedInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x28]; // Offset: 0x10
    CLocIdentifier* DisplayName; // Offset: 0x38
    ARDataType DisplayType; // Offset: 0x40
    ARDataType GenericCursor; // Offset: 0x44
    bool FocusModeOnly; // Offset: 0x48
    bool Sendable; // Offset: 0x49
    bool Linkable; // Offset: 0x4a
    bool LockedByLinks; // Offset: 0x4b
    bool RequiresAuthorizedUser; // Offset: 0x4c
    bool available; // Offset: 0x4d
    bool InheritsConditionDisplaysThroughLinks; // Offset: 0x4e
    uint8_t _pad_2[0x11]; // Offset: 0x4f
    DynArray_Tag* QueryTags; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x68
    Tag RoomTag; // Offset: 0x90
    Tag UsableTag; // Offset: 0xa8
    Tag LinkingTag; // Offset: 0xc0
    InteractionConditionList conditionList; // Offset: 0xd8
    PlayerAnimatedInteractionBase playerAnimatedInteractionBase; // Offset: 0xe8
};

// Original name: SShipStatusAppParams
// Size: 0x40
// VTable: 0x149a37a70
struct SShipStatusAppParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    mobiGlasApp linkedStarMap; // Offset: 0x8
    float shipHoloRotationSpeed; // Offset: 0x20
    float shipHoloRotationSmoothTime; // Offset: 0x24
    float lowAmmoThreshold; // Offset: 0x28
    float lowOrdnanceThreshold; // Offset: 0x2c
    float lowHydrogenFuelThreshold; // Offset: 0x30
    float lowQuantumFuelThreshold; // Offset: 0x34
    float shipRecallRetryTime; // Offset: 0x38
    bool requirePermissionForShipRecall; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
};

// Original name: SSimpodComponentParams
// Size: 0x88
// VTable: 0x1499d0748
struct SSimpodComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams startUsingInteraction; // Offset: 0x18
    SSharedInteractionParams exitInteraction; // Offset: 0x28
    int32_t screenLayerIndex; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    CryStringT* screenViewName; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    DynArray_SSimpodSimulation* availableSimulations; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
    float cameraExposure; // Offset: 0x80
    uint8_t _pad_4[0x4]; // Offset: 0x84
};

// Original name: SSimpodSimulation
// Size: 0x88
// VTable: 0x1499d0620
struct SSimpodSimulation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* programCategory; // Offset: 0x8
    CLocIdentifier* simulationTitle; // Offset: 0x10
    CLocIdentifier* simulationDescription; // Offset: 0x18
    DynArray_CLocIdentifier* rankDescriptions; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    Tag scenarioTag; // Offset: 0x50
    CryStringT* gameMode; // Offset: 0x68
    uint8_t _pad_2[0x8]; // Offset: 0x70
    CryStringT* megaMap; // Offset: 0x78
    uint8_t _pad_3[0x8]; // Offset: 0x80
};

// Original name: SSolarSystem
// Size: 0x78
// VTable: 0x1499aea90
struct SSolarSystem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    LandingZoneInventory landingZoneInventory; // Offset: 0x18
    StarMapObject DefaultLocation; // Offset: 0x30
    StarMapObject SolarSystemRecord; // Offset: 0x48
    Vec3 galacticPosition; // Offset: 0x60
};

// Original name: SSpawnEntity
// Size: 0x58
// VTable: 0x149a40988
struct SSpawnEntity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entity; // Offset: 0x8
    Vec3 spawnOffset; // Offset: 0x20
    bool attachToItemPort; // Offset: 0x38
    uint8_t _pad_1[0x7]; // Offset: 0x39
    CryStringT* itemPortName; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    bool vehicleSpawnFlightReady; // Offset: 0x50
    bool vehicleSpawnDeployLandingGears; // Offset: 0x51
    bool infiniteMissiles; // Offset: 0x52
    bool triggerAreas; // Offset: 0x53
    uint8_t _pad_3[0x4]; // Offset: 0x54
};

// Original name: SSpawnProtectionBarrierParams
// Size: 0x38
// VTable: 0x149a2d3f0
struct SSpawnProtectionBarrierParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Faction_LEGACY team; // Offset: 0x18
    int32_t phase; // Offset: 0x30
    int32_t deadZoneInactiveTime; // Offset: 0x34
};

// Original name: SSpawnerParams
// Size: 0x118
// VTable: 0x149a40c10
struct SSpawnerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSpawnRules spawnRules; // Offset: 0x18
    SDespawnRules despawnRules; // Offset: 0x28
    bool spawnOnGameStart; // Offset: 0x68
    bool spawnWithinPlayerRange; // Offset: 0x69
    uint8_t _pad_1[0x2]; // Offset: 0x6a
    float clampSpawnPlayerCheckTime; // Offset: 0x6c
    DynArray_SSpawnEntity* entitiesToSpawn; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x78
    BasePortRefillData portRefillData; // Offset: 0xa0
    BaseSpawnerPrerequisite prerequisite; // Offset: 0xb0
    bool startActive; // Offset: 0xc0
    uint8_t _pad_3[0x3]; // Offset: 0xc1
    int32_t groupIndex; // Offset: 0xc4
    Faction_LEGACY faction; // Offset: 0xc8
    bool onRequestSpawn; // Offset: 0xe0
    bool spawnInMovement; // Offset: 0xe1
    bool untrackOnDetach; // Offset: 0xe2
    uint8_t _pad_4[0x5]; // Offset: 0xe3
    DynArray_SItemPortDef* wildcardPorts; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xf0
};

// Original name: SSpreadMisfireEffect
// Size: 0x38
// VTable: 0x149a095f8
struct SSpreadMisfireEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag effectTrigger; // Offset: 0x8
    Tag effectTag; // Offset: 0x20
};

// Original name: SStandardParams
// Size: 0x3a8
// VTable: 0x1499d6730
struct SStandardParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    MusicLogicSuite musicSuite; // Offset: 0x18
    ARModeSettings arModeSettings; // Offset: 0x30
    DynArray_CryStringT* audioSwitchStates; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x50
    ARDataType moduleType; // Offset: 0x78
    uint8_t _pad_2[0x4]; // Offset: 0x7c
    GameModule gameModule; // Offset: 0x80
    MegaMap fallbackMegamap; // Offset: 0x98
    ARDataType persistentDataPolicy; // Offset: 0xb0
    uint8_t _pad_3[0x4]; // Offset: 0xb4
    CLocIdentifier* locDisclaimer; // Offset: 0xb8
    CryStringT* feedbackHyperlink; // Offset: 0xc0
    uint8_t _pad_4[0x8]; // Offset: 0xc8
    bool ignoreHighlight; // Offset: 0xd0
    uint8_t _pad_5[0x3]; // Offset: 0xd1
    int32_t maxSquadSize; // Offset: 0xd4
    int32_t maxTeamSize; // Offset: 0xd8
    int32_t maxTotalPlayerSize; // Offset: 0xdc
    bool newGameMode; // Offset: 0xe0
    uint8_t _pad_6[0x3]; // Offset: 0xe1
    float audioOcclusionMaxDist; // Offset: 0xe4
    uint8_t maxUnattendedVehicleMarkers; // Offset: 0xe8
    bool spawnInSpaceship; // Offset: 0xe9
    bool enableQuantumTravel; // Offset: 0xea
    bool enableMasterModes; // Offset: 0xeb
    bool enableQuantumBoost; // Offset: 0xec
    bool enableWingmanCommands; // Offset: 0xed
    uint8_t _pad_7[0x2]; // Offset: 0xee
    ARDataType controlSurfaceEnabledMode; // Offset: 0xf0
    uint8_t _pad_8[0x4]; // Offset: 0xf4
    SAimableGameModeParams aimableParams; // Offset: 0xf8
    bool enableVehicleAds; // Offset: 0x110
    bool enableVehicleWeaponPresetSystem; // Offset: 0x111
    bool enableTargeting2; // Offset: 0x112
    bool enableAutoTargetingOnlyOnTrackedTargets; // Offset: 0x113
    bool enablePlayerTargetingOnlyOnTrackedTargets; // Offset: 0x114
    bool enableAutoTargetingOnContactLoss; // Offset: 0x115
    bool enableTurretHud; // Offset: 0x116
    bool enableNewHudAR; // Offset: 0x117
    bool enableNewSpaceshipThrottleBehaviour; // Offset: 0x118
    bool enableShipRecall; // Offset: 0x119
    bool disableOrbitalMarkers; // Offset: 0x11a
    bool isSurvivalMode; // Offset: 0x11b
    bool useSelfDestructPenalty; // Offset: 0x11c
    bool selfDestructOnEject; // Offset: 0x11d
    uint8_t _pad_9[0x2]; // Offset: 0x11e
    float recentHitTime; // Offset: 0x120
    bool allowVehicleExit; // Offset: 0x124
    bool allowEditLoadoutWhenDead; // Offset: 0x125
    uint8_t _pad_10[0x2]; // Offset: 0x126
    LegacyUIOptionsParams legacyUIOptions; // Offset: 0x128
    bool requiresBuildingBlocksRoundTimer; // Offset: 0x138
    bool allowIngameMenu; // Offset: 0x139
    bool allShipsModifiable; // Offset: 0x13a
    bool canJoinLobbies; // Offset: 0x13b
    bool canAccessMobiGlass; // Offset: 0x13c
    uint8_t _pad_11[0x3]; // Offset: 0x13d
    int32_t planetMaxPatchesOverride; // Offset: 0x140
    int32_t planetPatchTimeoutOverride; // Offset: 0x144
    SGameRulesAnnouncerParams announcerParams; // Offset: 0x148
    SPlayerCameraTypeAllowedParams playerCamerasAllowed; // Offset: 0x178
    bool restrictGasExchanges; // Offset: 0x188
    bool showGreenZoneWeaponsOnlineOffline; // Offset: 0x189
    bool allowPartyInvite; // Offset: 0x18a
    bool joinOpenChannelOnStartup; // Offset: 0x18b
    float commsMaxValidRange; // Offset: 0x18c
    ARDataType shipComputerMode; // Offset: 0x190
    bool canHaveTakeDownLethalOption; // Offset: 0x194
    bool canTakeDownsFail; // Offset: 0x195
    bool canRestrain; // Offset: 0x196
    bool canPlayerUnrestrain; // Offset: 0x197
    bool canRestrainFriendly; // Offset: 0x198
    bool canTakedownFriendly; // Offset: 0x199
    bool canApplyForcesToFriendly; // Offset: 0x19a
    bool showDeathInfo; // Offset: 0x19b
    bool hasPlanetaryEffects; // Offset: 0x19c
    bool missionsWaitForSpawn; // Offset: 0x19d
    bool persistSubsumptionVariables; // Offset: 0x19e
    bool showNonPlayerJoinFeed; // Offset: 0x19f
    bool allowQuickFromInventory; // Offset: 0x1a0
    bool enableRigidGForceApplication; // Offset: 0x1a1
    bool enableRigidTimeout; // Offset: 0x1a2
    bool enableMaelstrom; // Offset: 0x1a3
    uint8_t _pad_12[0x4]; // Offset: 0x1a4
    SReputationJournalEntryHandlerParams reputationJournalEntryParams; // Offset: 0x1a8
    JournalEntry shopInventoryAlertsJournalEntry; // Offset: 0x1c0
    FireParams fireParams; // Offset: 0x1d8
    ActorMechanicsParams actorMechanics; // Offset: 0x218
    AIActorLocomotionParams AIActorLocomotion; // Offset: 0x270
    PlayerInteractionParams playerInteractionParams; // Offset: 0x280
    PlayerForceReactionParams playerForceReactionParams; // Offset: 0x2a8
    UIV2Markers uiV2MarkerParams; // Offset: 0x2b8
    RadarOptionParams radarOptionParams; // Offset: 0x328
    QuantumParams quantumParams; // Offset: 0x338
    ResourceNetworkParams resourceNetworkParams; // Offset: 0x348
    QuantumDriveGlobalParams quantumDriveGlobalParams; // Offset: 0x358
    bool allowQuickPlayerChoiceSelection; // Offset: 0x370
    bool showQuickPlayerChoiceShortcuts; // Offset: 0x371
    bool allowSwapOutfit; // Offset: 0x372
    bool usePrototypeMobiGlas; // Offset: 0x373
    bool allowDensityManagement; // Offset: 0x374
    bool allowFullscreenTutorials; // Offset: 0x375
    bool allowFPSCrosshair; // Offset: 0x376
    bool allowFPSHitmarker; // Offset: 0x377
    bool allowPlayerSkills; // Offset: 0x378
    bool enableDegradationThroughUsage; // Offset: 0x379
    bool enableDegradationArmorMitigationLoss; // Offset: 0x37a
    bool enableWeaponMisfires; // Offset: 0x37b
    bool ignoreDisplayPriorityForObjectives; // Offset: 0x37c
    bool useShortStringForHUDObjectives; // Offset: 0x37d
    bool useNewNotificationSystem; // Offset: 0x37e
    bool useNewEVAMarker; // Offset: 0x37f
    bool useEVAAttachMarker; // Offset: 0x380
    bool disableOldMFDs; // Offset: 0x381
    bool disableUIViewForAllUsers; // Offset: 0x382
    bool enableMFDCast; // Offset: 0x383
    bool allowHarvestables; // Offset: 0x384
    bool useNewVisorLens; // Offset: 0x385
    bool useNewChat; // Offset: 0x386
    bool useNewHudAR; // Offset: 0x387
    bool enableMobiGlasForRemoteActors; // Offset: 0x388
    bool enableMobiGlasForNPCs; // Offset: 0x389
    bool restrictedAreaOnlyDespawn; // Offset: 0x38a
    uint8_t _pad_13[0x1]; // Offset: 0x38b
    int32_t multicrewOverride; // Offset: 0x38c
    mobiGlasAppTable mobiGlasAppTableRecord; // Offset: 0x390
};

// Original name: SStarGala
// Size: 0x1f8
// VTable: 0x149a47b20
struct SStarGala {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 textureSize; // Offset: 0x8
    DynArray_SMiniGameSpriteParams* gameSprites; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_SStarGalaStageParams* formationStages; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_SStarGalaStageParams* challengeStages; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
    int32_t playerMaxLives; // Offset: 0xa8
    int32_t playerMaxStartLives; // Offset: 0xac
    float playerMoveSpeedMax; // Offset: 0xb0
    float playerShotDelayAuto; // Offset: 0xb4
    float playerShotDelayMin; // Offset: 0xb8
    float playerProjectileSpeed; // Offset: 0xbc
    float enemyMoveSpeedMin; // Offset: 0xc0
    float enemyMoveSpeedMax; // Offset: 0xc4
    float captureBeamTotalTime; // Offset: 0xc8
    float captureBeamOnOffTime; // Offset: 0xcc
    float enemyFireDelayTimeMin; // Offset: 0xd0
    float enemyFireDelayTimeMax; // Offset: 0xd4
    int32_t difficultyIncreaseStages; // Offset: 0xd8
    int32_t extraLifeTarget; // Offset: 0xdc
    int32_t bossFormationScore; // Offset: 0xe0
    int32_t bossDiveScore; // Offset: 0xe4
    int32_t bossDiveOneScore; // Offset: 0xe8
    int32_t bossDiveTwoScore; // Offset: 0xec
    int32_t butterflyFormationScore; // Offset: 0xf0
    int32_t butterflyScore; // Offset: 0xf4
    int32_t beeFormationScore; // Offset: 0xf8
    int32_t beeScore; // Offset: 0xfc
    int32_t bonusMultiplier; // Offset: 0x100
    int32_t bonusHitsPerfect; // Offset: 0x104
    int32_t continuousDiveMin; // Offset: 0x108
    int32_t continuousDiveMax; // Offset: 0x10c
    int32_t continuousDiveStartMin; // Offset: 0x110
    int32_t continuousDiveStartMax; // Offset: 0x114
    int32_t highScore; // Offset: 0x118
    uint8_t _pad_4[0x4]; // Offset: 0x11c
    Tag playerFireTag; // Offset: 0x120
    Tag enemyFireTag; // Offset: 0x138
    Tag playerExplosionTag; // Offset: 0x150
    Tag enemyExplosionTag; // Offset: 0x168
    Tag diveTag; // Offset: 0x180
    Tag captureBeamTag; // Offset: 0x198
    Tag bossHitTag; // Offset: 0x1b0
    Tag stageMedalTag; // Offset: 0x1c8
    Tag bonusTickTag; // Offset: 0x1e0
};

// Original name: SStartHackingGameplayTrigger
// Size: 0x40
// VTable: 0x1499fae18
struct SStartHackingGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useChip; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    SItemPortDef itemPort; // Offset: 0x10
    CryStringT* durationMultiplierName; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    CryStringT* errorChanceMultiplierName; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
};

// Original name: SStateAutoChange
// Size: 0x20
// VTable: 0x1499a4e80
struct SStateAutoChange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState NextState; // Offset: 0x8
    float Delay; // Offset: 0x18
    bool RunWhenStreamedOut; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
};

// Original name: SStateLevel
// Size: 0x18
// VTable: 0x1499a4ee0
struct SStateLevel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState state; // Offset: 0x8
};

// Original name: SStateModifierMovableMover
// Size: 0x28
// VTable: 0x149a45e68
struct SStateModifierMovableMover {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState hasMoverState; // Offset: 0x8
    SInteractionState noMoverState; // Offset: 0x18
};

// Original name: SSubsumptionMission
// Size: 0xa0
// VTable: 0x149a16d68
struct SSubsumptionMission {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool useNewMissionSystem; // Offset: 0x18
    bool startOnIntialCountdown; // Offset: 0x19
    uint8_t _pad_1[0x6]; // Offset: 0x1a
    TagList spawningTagFilter; // Offset: 0x20
    SkillDefinitions defaultNPCSkillDefinition; // Offset: 0x58
    RewardScale uecCurve; // Offset: 0x70
    RewardScale repCurve; // Offset: 0x88
};

// Original name: STaggedInverseInteractionLinkExecuteCreateInteractionLinkNode
// Size: 0xa0
// VTable: 0x1499a6568
struct STaggedInverseInteractionLinkExecuteCreateInteractionLinkNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF matchTags; // Offset: 0x8
    DynArray_SSharedInteractionParams* linkInteractions; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x78
};

// Original name: STaggedSignaturesEntry
// Size: 0x80
// VTable: 0x1499e9c60
struct STaggedSignaturesEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tagToMatch; // Offset: 0x8
    DynArray_SSignaturesCategoryEntry* signatureCategories; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    DynArray_float* signatures; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
};

// Original name: STrackViewOutfitExternalSwapData
// Size: 0x40
// VTable: 0x149a466e0
struct STrackViewOutfitExternalSwapData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList selectionTags; // Offset: 0x8
};

// Original name: STrackViewOutfitInteractionSwapData
// Size: 0x50
// VTable: 0x149a46688
struct STrackViewOutfitInteractionSwapData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams interaction; // Offset: 0x8
    TagList selectionTags; // Offset: 0x18
};

// Original name: STransferCreditGameplayTrigger
// Size: 0x28
// VTable: 0x1499faf28
struct STransferCreditGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x8
    CryStringT* name; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: STriggerableDevicesBehaviorActorStatusParams
// Size: 0xa8
// VTable: 0x149a70758
struct STriggerableDevicesBehaviorActorStatusParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool shouldBeDestroyed; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    SSequencerDefSequenceParams startSequence; // Offset: 0x50
    SSequencerDefSequenceParams endSequence; // Offset: 0x60
    float radius; // Offset: 0x70
    ARDataType angleCurve; // Offset: 0x74
    ARDataType rangeCurve; // Offset: 0x75
    uint8_t _pad_4[0x2]; // Offset: 0x76
    DynArray_ActorStatusAddBuff* actorStatusBuffs; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x80
};

// Original name: STriggerableDevicesBehaviorDetachParams
// Size: 0x70
// VTable: 0x149a70760
struct STriggerableDevicesBehaviorDetachParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool shouldBeDestroyed; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    SSequencerDefSequenceParams startSequence; // Offset: 0x50
    SSequencerDefSequenceParams endSequence; // Offset: 0x60
};

// Original name: STriggerableDevicesBehaviorExplosionParams
// Size: 0x230
// VTable: 0x149a707c0
struct STriggerableDevicesBehaviorExplosionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool shouldBeDestroyed; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    SSequencerDefSequenceParams startSequence; // Offset: 0x50
    SSequencerDefSequenceParams endSequence; // Offset: 0x60
    ExplosionParams explosionParams; // Offset: 0x70
};

// Original name: STriggerableDevicesBehaviorParams
// Size: 0x70
// VTable: 0x149a70470
struct STriggerableDevicesBehaviorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool shouldBeDestroyed; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    SSequencerDefSequenceParams startSequence; // Offset: 0x50
    SSequencerDefSequenceParams endSequence; // Offset: 0x60
};

// Original name: STriggerableDevicesBehaviorUnprimeParams
// Size: 0x70
// VTable: 0x149a707c8
struct STriggerableDevicesBehaviorUnprimeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool shouldBeDestroyed; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    SSequencerDefSequenceParams startSequence; // Offset: 0x50
    SSequencerDefSequenceParams endSequence; // Offset: 0x60
};

// Original name: STriggerableDevicesTriggerAllAnyParams
// Size: 0xd8
// VTable: 0x149a70848
struct STriggerableDevicesTriggerAllAnyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool isAuthoritative; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    STriggerableDevicesBlinking blinkingParams; // Offset: 0x50
    CryStringT* markerShapePath; // Offset: 0x70
    uint8_t _pad_4[0x8]; // Offset: 0x78
    CryStringT* markerModelPath; // Offset: 0x80
    uint8_t _pad_5[0x8]; // Offset: 0x88
    STriggerableDevicesBehaviorParams behavior; // Offset: 0x90
    DynArray_STriggerableDevicesTriggerParams* subTriggers; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xa8
    bool finishAll; // Offset: 0xd0
    uint8_t _pad_7[0x7]; // Offset: 0xd1
};

// Original name: STriggerableDevicesTriggerGravityParams
// Size: 0xa8
// VTable: 0x149a708a0
struct STriggerableDevicesTriggerGravityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool isAuthoritative; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    STriggerableDevicesBlinking blinkingParams; // Offset: 0x50
    CryStringT* markerShapePath; // Offset: 0x70
    uint8_t _pad_4[0x8]; // Offset: 0x78
    CryStringT* markerModelPath; // Offset: 0x80
    uint8_t _pad_5[0x8]; // Offset: 0x88
    STriggerableDevicesBehaviorParams behavior; // Offset: 0x90
    float angle; // Offset: 0xa0
    uint8_t _pad_6[0x4]; // Offset: 0xa4
};

// Original name: STriggerableDevicesTriggerImpactParams
// Size: 0xa8
// VTable: 0x149a70900
struct STriggerableDevicesTriggerImpactParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool isAuthoritative; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    STriggerableDevicesBlinking blinkingParams; // Offset: 0x50
    CryStringT* markerShapePath; // Offset: 0x70
    uint8_t _pad_4[0x8]; // Offset: 0x78
    CryStringT* markerModelPath; // Offset: 0x80
    uint8_t _pad_5[0x8]; // Offset: 0x88
    STriggerableDevicesBehaviorParams behavior; // Offset: 0x90
    bool ignoreWaterCollision; // Offset: 0xa0
    uint8_t _pad_6[0x7]; // Offset: 0xa1
};

// Original name: STriggerableDevicesTriggerLaserTripParams
// Size: 0x110
// VTable: 0x149a70aa0
struct STriggerableDevicesTriggerLaserTripParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool isAuthoritative; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    STriggerableDevicesBlinking blinkingParams; // Offset: 0x50
    CryStringT* markerShapePath; // Offset: 0x70
    uint8_t _pad_4[0x8]; // Offset: 0x78
    CryStringT* markerModelPath; // Offset: 0x80
    uint8_t _pad_5[0x8]; // Offset: 0x88
    STriggerableDevicesBehaviorParams behavior; // Offset: 0x90
    Tag laserEffectTag; // Offset: 0xa0
    Tag laserImpactEffectTag; // Offset: 0xb8
    Tag laserImpactOffsetParameter; // Offset: 0xd0
    float laserLength; // Offset: 0xe8
    float laserRadius; // Offset: 0xec
    CryStringT* helperName; // Offset: 0xf0
    uint8_t _pad_6[0x8]; // Offset: 0xf8
    float laserSweepAngle; // Offset: 0x100
    float laserSweepDuration; // Offset: 0x104
    float laserCornerDuration; // Offset: 0x108
    uint8_t _pad_7[0x4]; // Offset: 0x10c
};

// Original name: STriggerableDevicesTriggerParams
// Size: 0xa0
// VTable: 0x149a70620
struct STriggerableDevicesTriggerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool isAuthoritative; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    STriggerableDevicesBlinking blinkingParams; // Offset: 0x50
    CryStringT* markerShapePath; // Offset: 0x70
    uint8_t _pad_4[0x8]; // Offset: 0x78
    CryStringT* markerModelPath; // Offset: 0x80
    uint8_t _pad_5[0x8]; // Offset: 0x88
    STriggerableDevicesBehaviorParams behavior; // Offset: 0x90
};

// Original name: STriggerableDevicesTriggerTimerParams
// Size: 0xa8
// VTable: 0x149a70b00
struct STriggerableDevicesTriggerTimerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool isAuthoritative; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_Tag* effectTags; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    STriggerableDevicesBlinking blinkingParams; // Offset: 0x50
    CryStringT* markerShapePath; // Offset: 0x70
    uint8_t _pad_4[0x8]; // Offset: 0x78
    CryStringT* markerModelPath; // Offset: 0x80
    uint8_t _pad_5[0x8]; // Offset: 0x88
    STriggerableDevicesBehaviorParams behavior; // Offset: 0x90
    float duration; // Offset: 0xa0
    uint8_t _pad_6[0x4]; // Offset: 0xa4
};

// Original name: SUIEntityGeometryResourceParams
// Size: 0x228
// VTable: 0x1499a3138
struct SUIEntityGeometryResourceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SGeometryModelTagBase ModelTag; // Offset: 0x18
    bool cacheResources; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
    SGeometryNodeParams Geometry; // Offset: 0x30
    SMaterialNodeParams Material; // Offset: 0x190
    bool rootOverridePaint; // Offset: 0x220
    bool inheritModelTagFromHost; // Offset: 0x221
    uint8_t _pad_2[0x6]; // Offset: 0x222
};

// Original name: SUsableEnterTransitionParams
// Size: 0x68
// VTable: 0x149a91a28
struct SUsableEnterTransitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio transitionAudioTrigger; // Offset: 0x8
    CryStringT* aiSignal; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    CryStringT* additionalTags; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    ARDataType eventTriggerMask; // Offset: 0x48
    uint8_t _pad_3[0x4]; // Offset: 0x4c
    bool holsterWeapon; // Offset: 0x50
    uint8_t _pad_4[0x7]; // Offset: 0x51
    SSharedInteractionParams enterInteraction; // Offset: 0x58
};

// Original name: SUsableExitTransitionParams
// Size: 0x78
// VTable: 0x149a91b48
struct SUsableExitTransitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio transitionAudioTrigger; // Offset: 0x8
    CryStringT* aiSignal; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    CryStringT* additionalTags; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    ARDataType eventTriggerMask; // Offset: 0x48
    uint8_t _pad_3[0x4]; // Offset: 0x4c
    bool inputExit; // Offset: 0x50
    bool exitOnMovement; // Offset: 0x51
    bool exitOnJump; // Offset: 0x52
    bool exitOnDamageTaken; // Offset: 0x53
    uint8_t _pad_4[0x4]; // Offset: 0x54
    SSharedInteractionParams exitInteraction; // Offset: 0x58
    SSequencerDefSequenceParams exitSequence; // Offset: 0x68
};

// Original name: SUsableRoutingSettings
// Size: 0xa0
// VTable: 0x149a91808
struct SUsableRoutingSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* useChannelName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    TagList slotGameTags; // Offset: 0x18
    ARDataType selectionType; // Offset: 0x50
    bool skipEntry; // Offset: 0x54
    bool verifyNavMesh; // Offset: 0x55
    uint8_t _pad_2[0x2]; // Offset: 0x56
    Tag interactionTag; // Offset: 0x58
    uint8_t _pad_3[0x30]; // Offset: 0x70
};

// Original name: SVanduulInvaders
// Size: 0x130
// VTable: 0x149a46fd0
struct SVanduulInvaders {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 textureSize; // Offset: 0x8
    DynArray_SMiniGameSpriteParams* gameSprites; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    float roundTime; // Offset: 0x48
    float deathImmunityTime; // Offset: 0x4c
    int32_t playerMaxLives; // Offset: 0x50
    int32_t playerMaxHealth; // Offset: 0x54
    float playerRotationSpeed; // Offset: 0x58
    float playerMaxRotation; // Offset: 0x5c
    float playerShotDelayAuto; // Offset: 0x60
    float playerShotDelayMin; // Offset: 0x64
    float playerProjectileSpeed; // Offset: 0x68
    float invaderShotDelayMin; // Offset: 0x6c
    float invaderShotDelayMax; // Offset: 0x70
    float invaderShotDelayDecreasePerRound; // Offset: 0x74
    float invaderMoveSpeedMin; // Offset: 0x78
    float invaderMoveSpeedMax; // Offset: 0x7c
    float oneInvaderMoveSpeedMax; // Offset: 0x80
    float invaderRotationLimit; // Offset: 0x84
    float invaderMaxRadius; // Offset: 0x88
    float invaderMinRadius; // Offset: 0x8c
    float invaderMinSpacing; // Offset: 0x90
    float invaderMaxSpacing; // Offset: 0x94
    float invaderRowSpaceOffset; // Offset: 0x98
    float invaderRowScale; // Offset: 0x9c
    float invaderProjectileSpeed; // Offset: 0xa0
    int32_t row1Score; // Offset: 0xa4
    int32_t row2Score; // Offset: 0xa8
    int32_t row3Score; // Offset: 0xac
    int32_t projectileScore; // Offset: 0xb0
    uint8_t _pad_2[0x4]; // Offset: 0xb4
    Tag explosionTag; // Offset: 0xb8
    Tag playerFireTag; // Offset: 0xd0
    Tag invaderFireTag; // Offset: 0xe8
    Tag gameOnTag; // Offset: 0x100
    Tag gameOverTag; // Offset: 0x118
};

// Original name: SVehicleItemportInteractionLink
// Size: 0x38
// VTable: 0x1499a9260
struct SVehicleItemportInteractionLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSharedInteractionParams sourceInteraction; // Offset: 0x8
    CryStringT* itemPort; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* targetInteraction; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: SVendingMachineItem
// Size: 0x48
// VTable: 0x149a2d538
struct SVendingMachineItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityToSpawn; // Offset: 0x8
    CLocIdentifier* name; // Offset: 0x20
    CryStringT* imagePath; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    float detachTimeSeconds; // Offset: 0x38
    float despawnTimeSeconds; // Offset: 0x3c
    float cooldownSeconds; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: SVendingMachineStateModifier
// Size: 0x98
// VTable: 0x1499c2650
struct SVendingMachineStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState onCooldownEnd; // Offset: 0x8
    SInteractionState onItemSpawned; // Offset: 0x18
    SInteractionState onItemDespawned; // Offset: 0x28
    SInteractionState onItemDetached; // Offset: 0x38
    SInteractionState onItemInteracted; // Offset: 0x48
    SInteractionState onTransactionComplete; // Offset: 0x58
    SInteractionState onHatchShouldOpen; // Offset: 0x68
    SInteractionState onHatchShouldClose; // Offset: 0x78
    SInteractionState onTransactionShouldClose; // Offset: 0x88
};

// Original name: SVolatileCargoHealthStateModifier
// Size: 0x38
// VTable: 0x149a0f9f0
struct SVolatileCargoHealthStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SRangeStateLevel* stateRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SWeaponActionAimSimpleParams
// Size: 0x250
// VTable: 0x149a6ec40
struct SWeaponActionAimSimpleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    float zoomScale; // Offset: 0xe8
    float zoomTime; // Offset: 0xec
    bool toggleZoomOverride; // Offset: 0xf0
    uint8_t _pad_4[0x7]; // Offset: 0xf1
    SWeaponAimDofSettings dofSettings; // Offset: 0xf8
    SWeaponModifierParams aimModifier; // Offset: 0x108
    SWeaponGeometryTagsParams aimGeometryTags; // Offset: 0x118
    DynArray_SMannequinTagParams* mannequinTags; // Offset: 0x128 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x130
    AudioRtpc aimRTPC; // Offset: 0x158
    GlobalResourceAudio aimStart; // Offset: 0x178
    GlobalResourceAudio aimStop; // Offset: 0x198
    AudioRtpc timeSinceLastAimStartRtpc; // Offset: 0x1b8
    AudioRtpc timeSinceLastAimStopRtpc; // Offset: 0x1d8
    AudioRtpc timeSinceLastZoomInRtpc; // Offset: 0x1f8
    AudioRtpc timeSinceLastZoomOutRtpc; // Offset: 0x218
    Tag glintTag; // Offset: 0x238
};

// Original name: SWeaponActionConditionParams
// Size: 0x128
// VTable: 0x149a6ed48
struct SWeaponActionConditionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    DynArray_SConditionalWeaponAction* conditionalWeaponActions; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xf0
    SWeaponActionParams defaultWeaponAction; // Offset: 0x118
};

// Original name: SWeaponActionDynamicConditionParams
// Size: 0x218
// VTable: 0x149a6eee0
struct SWeaponActionDynamicConditionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    DynArray_SConditionalWeaponAction* conditionalWeaponActions; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xf0
    SWeaponActionParams defaultWeaponAction; // Offset: 0x118
    SFragmentParams startFragment; // Offset: 0x128
    SFragmentParams loopingFragment; // Offset: 0x148
    SFragmentParams stopFragment; // Offset: 0x168
    GlobalResourceAudio startAudioTrigger; // Offset: 0x188
    GlobalResourceAudio stopAudioTrigger; // Offset: 0x1a8
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x1c8
    DynArray_SWeaponParticleEffectParams* effects; // Offset: 0x1e8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x1f0
};

// Original name: SWeaponActionFireBeamParams
// Size: 0x2e8
// VTable: 0x149a76110
struct SWeaponActionFireBeamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    CryStringT* fireHelper; // Offset: 0xe8
    uint8_t _pad_4[0x8]; // Offset: 0xf0
    bool toggle; // Offset: 0xf8
    uint8_t _pad_5[0x3]; // Offset: 0xf9
    ARDataType ammoType; // Offset: 0xfc
    float minEnergyDraw; // Offset: 0x100
    float maxEnergyDraw; // Offset: 0x104
    DamageBase damagePerSecond; // Offset: 0x108
    float fullDamageRange; // Offset: 0x118
    float zeroDamageRange; // Offset: 0x11c
    float heatPerSecond; // Offset: 0x120
    float wearPerSecond; // Offset: 0x124
    WeaponProceduralRecoilConfigDef recoil; // Offset: 0x128
    float recoilInterval; // Offset: 0x140
    float soundRadius; // Offset: 0x144
    float soundEmittingInterval; // Offset: 0x148
    uint8_t _pad_6[0x4]; // Offset: 0x14c
    WeaponMisfireDef misfire; // Offset: 0x150
    float minorMisfireDuration; // Offset: 0x168
    float hitRadius; // Offset: 0x16c
    CryStringT* hitType; // Offset: 0x170
    uint8_t _pad_7[0x8]; // Offset: 0x178
    bool ignoreSkiplist; // Offset: 0x180
    bool shouldDryFireInGreenZones; // Offset: 0x181
    uint8_t _pad_8[0x6]; // Offset: 0x182
    SSpreadParams spreadParams; // Offset: 0x188
    bool fireDuringChargeUp; // Offset: 0x198
    uint8_t _pad_9[0x3]; // Offset: 0x199
    float chargeUpTime; // Offset: 0x19c
    float chargeDownTime; // Offset: 0x1a0
    uint8_t _pad_10[0x4]; // Offset: 0x1a4
    SWeaponActionFireBeamChainParams chainParams; // Offset: 0x1a8
    SFragmentParams fireFragment; // Offset: 0x1b8
    SFragmentParams stopFireFragment; // Offset: 0x1d8
    GlobalResourceAudio startFireOneShotAudioTrigger; // Offset: 0x1f8
    GlobalResourceAudio startFireLoopAudioTrigger; // Offset: 0x218
    GlobalResourceAudio stopFireAudioTrigger; // Offset: 0x238
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x258
    AudioRtpc timeSinceLastFireRTPC; // Offset: 0x278
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x298 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x2a0
    SBeamGroupParams beamGroup; // Offset: 0x2c8
    SSCSignatureEmitterParams signatureEmitterParams; // Offset: 0x2d8
};

// Original name: SWeaponActionFireBurstParams
// Size: 0x2a0
// VTable: 0x149a6f990
struct SWeaponActionFireBurstParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    SLauncherBase launchParams; // Offset: 0xe8
    uint8_t shotCount; // Offset: 0xf8
    uint8_t _pad_4[0x3]; // Offset: 0xf9
    int32_t fireRate; // Offset: 0xfc
    float heatPerShot; // Offset: 0x100
    float wearPerShot; // Offset: 0x104
    float cooldownTime; // Offset: 0x108
    uint8_t _pad_5[0x4]; // Offset: 0x10c
    WeaponProceduralRecoilConfigDef recoil; // Offset: 0x110
    WeaponMisfireDef misfire; // Offset: 0x128
    SFragmentParams fireFragment; // Offset: 0x140
    GlobalResourceAudio startFireAudioTrigger; // Offset: 0x160
    GlobalResourceAudio startFireOneShotAudioTrigger; // Offset: 0x180
    GlobalResourceAudio stopFireAudioTrigger; // Offset: 0x1a0
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x1c0
    AudioRtpc burstSizeRTPC; // Offset: 0x1e0
    AudioRtpc fireRateRTPC; // Offset: 0x200
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x220 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x228
    DynArray_SWeaponParticleEffectParams* stopFireEffects; // Offset: 0x250 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x258
    SWeaponVibrationParams vibrationParams; // Offset: 0x280
    SSCSignatureEmitterParams signatureEmitterParams; // Offset: 0x290
};

// Original name: SWeaponActionFireChargeDrainParams
// Size: 0x6e0
// VTable: 0x149a77830
struct SWeaponActionFireChargeDrainParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    CLocIdentifier* localisedFunctionalityName; // Offset: 0xe8
    Tag functionalityTag; // Offset: 0xf0
    CryStringT* fireHelper; // Offset: 0x108
    uint8_t _pad_4[0x8]; // Offset: 0x110
    bool toggle; // Offset: 0x118
    uint8_t _pad_5[0x7]; // Offset: 0x119
    SChargeDrainRangeParams rangeParams; // Offset: 0x120
    float maxAimRadius; // Offset: 0x138
    float resourceRate; // Offset: 0x13c
    ARDataType chargeDrainMode; // Offset: 0x140
    ARDataType ammoType; // Offset: 0x144
    float wearPerSecond; // Offset: 0x148
    float recoilInterval; // Offset: 0x14c
    WeaponProceduralRecoilConfigDef recoil; // Offset: 0x150
    SChargeDrainPrimeParams primeParams; // Offset: 0x168
    float overloadDuration; // Offset: 0x250
    uint8_t _pad_6[0x4]; // Offset: 0x254
    ResourceType targetResource; // Offset: 0x258
    bool shouldDryFireInGreenZones; // Offset: 0x270
    uint8_t _pad_7[0x7]; // Offset: 0x271
    SFragmentParams fireFragment; // Offset: 0x278
    SFragmentParams stopFireFragment; // Offset: 0x298
    SFragmentParams primingFragment; // Offset: 0x2b8
    SFragmentParams primedFragment; // Offset: 0x2d8
    SFragmentParams overloadFragment; // Offset: 0x2f8
    GlobalResourceAudio startFireOneShotAudioTrigger; // Offset: 0x318
    GlobalResourceAudio startFireLoopAudioTrigger; // Offset: 0x338
    GlobalResourceAudio stopFireAudioTrigger; // Offset: 0x358
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x378
    GlobalResourceAudio startOverloadAudioTrigger; // Offset: 0x398
    GlobalResourceAudio stopOverloadAudioTrigger; // Offset: 0x3b8
    GlobalResourceAudio overloadFireAttemptAudioTrigger; // Offset: 0x3d8
    GlobalResourceAudio startPrimingLoopAudioTrigger; // Offset: 0x3f8
    GlobalResourceAudio stopPrimingLoopAudioTrigger; // Offset: 0x418
    GlobalResourceAudio startPrimingUnstableLoopAudioTrigger; // Offset: 0x438
    GlobalResourceAudio stopPrimingUnstableLoopAudioTrigger; // Offset: 0x458
    GlobalResourceAudio primingUnstableAudioTrigger; // Offset: 0x478
    float primeUnstableAudioRetriggerTime; // Offset: 0x498
    uint8_t _pad_8[0x4]; // Offset: 0x49c
    GlobalResourceAudio startPrimedLoopAudioTrigger; // Offset: 0x4a0
    GlobalResourceAudio stopPrimedLoopAudioTrigger; // Offset: 0x4c0
    GlobalResourceAudio onJumpstartAudioTrigger; // Offset: 0x4e0
    GlobalResourceAudio postJumpstartAudioTrigger; // Offset: 0x500
    GlobalResourceAudio dumpPrimedChargeAudioTrigger; // Offset: 0x520
    AudioRtpc weaponBatteryLevelRTPC; // Offset: 0x540
    AudioRtpc weaponPrimedPercentageRTPC; // Offset: 0x560
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x580 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x588
    DynArray_SWeaponParticleEffectParams* overloadEffects; // Offset: 0x5b0 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x5b8
    DynArray_SWeaponParticleEffectParams* overloadFireAttemptEffects; // Offset: 0x5e0 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x5e8
    DynArray_SWeaponParticleEffectParams* primedEffects; // Offset: 0x610 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x618
    DynArray_SWeaponParticleEffectParams* postJumpstartEffects; // Offset: 0x640 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x648
    DynArray_SWeaponParticleEffectParams* dumpPrimedChargeEffects; // Offset: 0x670 // Pointer to DynArray struct
    uint8_t _pad_14[0x28]; // Offset: 0x678
    SBeamGroupParams beamGroup; // Offset: 0x6a0
    SBeamGroupParams jumpstartBeamGroup; // Offset: 0x6b0
    SWeaponConditionBase updateCondition; // Offset: 0x6c0
    SSCSignatureEmitterParams signatureEmitterParams; // Offset: 0x6d0
};

// Original name: SWeaponActionFireChargedParams
// Size: 0x6f8
// VTable: 0x149a6e5d8
struct SWeaponActionFireChargedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    float chargeTime; // Offset: 0xe8
    float overchargeTime; // Offset: 0xec
    float overchargedTime; // Offset: 0xf0
    float cooldownTime; // Offset: 0xf4
    float maxGlow; // Offset: 0xf8
    uint8_t _pad_4[0x4]; // Offset: 0xfc
    ActorStatusAddBuff chargingBuff; // Offset: 0x100
    bool interpolateChargeBonus; // Offset: 0x110
    bool fireAutomaticallyOnFullCharge; // Offset: 0x111
    bool fireOnlyOnFullCharge; // Offset: 0x112
    bool chargeAutomatically; // Offset: 0x113
    uint8_t _pad_5[0x4]; // Offset: 0x114
    SWeaponStats maxChargeModifier; // Offset: 0x118
    SWeaponActionParams weaponAction; // Offset: 0x4e0
    SFragmentParams chargeFragment; // Offset: 0x4f0
    SFragmentParams overchargedFragment; // Offset: 0x510
    Tag glowTag; // Offset: 0x530
    GlobalResourceAudio startChargeAudioTrigger; // Offset: 0x548
    GlobalResourceAudio stopChargeAudioTrigger; // Offset: 0x568
    GlobalResourceAudio fullyChargedAudioTrigger; // Offset: 0x588
    GlobalResourceAudio overChargedAudioTrigger; // Offset: 0x5a8
    GlobalResourceAudio overChargeEndedAudioTrigger; // Offset: 0x5c8
    AudioRtpc chargeLevelRTPC; // Offset: 0x5e8
    DynArray_SWeaponParticleEffectParams* chargingEffects; // Offset: 0x608 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x610
    DynArray_SWeaponParticleEffectParams* chargedEffects; // Offset: 0x638 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x640
    DynArray_SWeaponParticleEffectParams* overchargedEffects; // Offset: 0x668 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x670
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x698 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x6a0
    DynArray_SWeaponParticleEffectParams* maxChargeFireEffects; // Offset: 0x6c8 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x6d0
};

// Original name: SWeaponActionFireExtinguisherParams
// Size: 0x2f0
// VTable: 0x149a7b920
struct SWeaponActionFireExtinguisherParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    bool toggle; // Offset: 0xe8
    uint8_t _pad_4[0x7]; // Offset: 0xe9
    CryStringT* fireHelper; // Offset: 0xf0
    uint8_t _pad_5[0x8]; // Offset: 0xf8
    float extinguishingRange; // Offset: 0x100
    float sensorRange; // Offset: 0x104
    float fireDetectionRange; // Offset: 0x108
    float fireDetectionIntervalTime; // Offset: 0x10c
    float extinguishStrengthFalloffDistance; // Offset: 0x110
    float coneAngle; // Offset: 0x114
    float maxRadius; // Offset: 0x118
    float minRadius; // Offset: 0x11c
    float extinguishStrength; // Offset: 0x120
    float maxRangeExtinguishStrength; // Offset: 0x124
    float ammoPerSecond; // Offset: 0x128
    float wearPerSecond; // Offset: 0x12c
    STemperatureReadOutParams temperatureReadOutParams; // Offset: 0x130
    EntityClassDefinition roomHelperClass; // Offset: 0x148
    SExtinguisherVectorFieldParams vectorFieldParams; // Offset: 0x160
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x1c0
    SExtinguisherImpactParams impactEffect; // Offset: 0x1e8
    SFragmentParams fireFragment; // Offset: 0x210
    SFragmentParams stopFireFragment; // Offset: 0x230
    GlobalResourceAudio startFireOneShotAudioTrigger; // Offset: 0x250
    GlobalResourceAudio startFireLoopAudioTrigger; // Offset: 0x270
    GlobalResourceAudio stopFireAudioTrigger; // Offset: 0x290
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x2b0
    SWeaponConditionBase updateCondition; // Offset: 0x2d0
    ARDataType aimFireDetectionMode; // Offset: 0x2e0
    float aimFireDetectionTemperature; // Offset: 0x2e4
    float aimFireDetectionRadius; // Offset: 0x2e8
    uint8_t _pad_7[0x4]; // Offset: 0x2ec
};

// Original name: SWeaponActionFireHealingBeamParams
// Size: 0x348
// VTable: 0x149a766f0
struct SWeaponActionFireHealingBeamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    ARDataType healingMode; // Offset: 0xe8
    bool externalHealingMode; // Offset: 0xec
    uint8_t _pad_4[0x3]; // Offset: 0xed
    CryStringT* fireHelper; // Offset: 0xf0
    uint8_t _pad_5[0x8]; // Offset: 0xf8
    bool toggle; // Offset: 0x100
    uint8_t _pad_6[0x3]; // Offset: 0x101
    float maxDistance; // Offset: 0x104
    float maxSensorDistance; // Offset: 0x108
    ARDataType medicalAmmoType; // Offset: 0x10c
    float mSCUPerSec; // Offset: 0x110
    float ammoPerMSCU; // Offset: 0x114
    float wearPerSec; // Offset: 0x118
    ARDataType batteryAmmoType; // Offset: 0x11c
    float batteryDrainPerSec; // Offset: 0x120
    float autoDosageTargetBDLModifier; // Offset: 0x124
    float healingBreakTime; // Offset: 0x128
    float maxDoseForAutoAdjustment; // Offset: 0x12c
    CryStringT* hitType; // Offset: 0x130
    uint8_t _pad_7[0x8]; // Offset: 0x138
    DynArray_SHealingBeamConsumableType* consumableTypes; // Offset: 0x140 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x148
    WeaponProceduralRecoilConfigDef recoil; // Offset: 0x170
    float recoilInterval; // Offset: 0x188
    uint8_t _pad_9[0x4]; // Offset: 0x18c
    SFragmentParams fireFragment; // Offset: 0x190
    SFragmentParams stopFireFragment; // Offset: 0x1b0
    GlobalResourceAudio startFireOneShotAudioTrigger; // Offset: 0x1d0
    GlobalResourceAudio startFireLoopAudioTrigger; // Offset: 0x1f0
    GlobalResourceAudio stopFireAudioTrigger; // Offset: 0x210
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x230
    AudioRtpc timeSinceLastFireRTPC; // Offset: 0x250
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x270 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x278
    SBeamGroupParams beamGroup; // Offset: 0x2a0
    SWeaponConditionBase updateCondition; // Offset: 0x2b0
    AudioRtpc isHealingRTPC; // Offset: 0x2c0
    AudioRtpc targetPlayerHealthRTPC; // Offset: 0x2e0
    ActorStatusGlobalParams globalActorStatusParams; // Offset: 0x300
    DynArray_ARDataType* abilityTypesToHideCards; // Offset: 0x318 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x320
};

// Original name: SWeaponActionFireRapidParams
// Size: 0x380
// VTable: 0x149a6f378
struct SWeaponActionFireRapidParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    SLauncherBase launchParams; // Offset: 0xe8
    int32_t fireRate; // Offset: 0xf8
    float heatPerShot; // Offset: 0xfc
    float wearPerShot; // Offset: 0x100
    float spinUpTime; // Offset: 0x104
    float spinDownTime; // Offset: 0x108
    bool fireDuringSpinUp; // Offset: 0x10c
    uint8_t _pad_4[0x3]; // Offset: 0x10d
    WeaponProceduralRecoilConfigDef recoil; // Offset: 0x110
    WeaponMisfireDef misfire; // Offset: 0x128
    SFragmentParams fireFragment; // Offset: 0x140
    SFragmentParams stopFireFragment; // Offset: 0x160
    SFragmentParams oneShotFireFragment; // Offset: 0x180
    SFragmentParams spinFragment; // Offset: 0x1a0
    CryStringT* spinParam; // Offset: 0x1c0
    uint8_t _pad_5[0x8]; // Offset: 0x1c8
    float audioLoopTimeBetweenFirstShots; // Offset: 0x1d0
    uint8_t _pad_6[0x4]; // Offset: 0x1d4
    GlobalResourceAudio startFireAudioTrigger; // Offset: 0x1d8
    GlobalResourceAudio startFireAudioTriggerOneShot; // Offset: 0x1f8
    GlobalResourceAudio stopFireAudioTrigger; // Offset: 0x218
    GlobalResourceAudio startRotationAudioTrigger; // Offset: 0x238
    GlobalResourceAudio stopRotationAudioTrigger; // Offset: 0x258
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x278
    AudioRtpc spinRTPC; // Offset: 0x298
    AudioRtpc loadRTPC; // Offset: 0x2b8
    AudioRtpc fireRateRTPC; // Offset: 0x2d8
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x2f8 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x300
    DynArray_SWeaponParticleEffectParams* stopFireEffects; // Offset: 0x328 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x330
    SWeaponVibrationParams vibrationParams; // Offset: 0x358
    SSCSignatureEmitterParams signatureEmitterParams; // Offset: 0x368
    uint8_t _pad_9[0x8]; // Offset: 0x378
};

// Original name: SWeaponActionFireSalvageRepairParams
// Size: 0x520
// VTable: 0x149a7aa10
struct SWeaponActionFireSalvageRepairParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    CLocIdentifier* localisedFunctionalityName; // Offset: 0xe8
    Tag functionalityTag; // Offset: 0xf0
    ARDataType salvageRepairMode; // Offset: 0x108
    uint8_t _pad_4[0x4]; // Offset: 0x10c
    CryStringT* fireHelper; // Offset: 0x110
    uint8_t _pad_5[0x8]; // Offset: 0x118
    bool toggle; // Offset: 0x120
    bool salvageCanFireOnFull; // Offset: 0x121
    uint8_t _pad_6[0x2]; // Offset: 0x122
    ARDataType salvageRepairAmmoType; // Offset: 0x124
    ARDataType batteryAmmoType; // Offset: 0x128
    float minEnergyDraw; // Offset: 0x12c
    float maxEnergyDraw; // Offset: 0x130
    float materialEfficiency; // Offset: 0x134
    float maxVehicleDamageRatio; // Offset: 0x138
    uint8_t _pad_7[0x4]; // Offset: 0x13c
    Vec4 maxRepairRatio; // Offset: 0x140
    Vec4 minRepairRatio; // Offset: 0x158
    float repairedMaterialRatio; // Offset: 0x170
    float maxHealthRepairRate; // Offset: 0x174
    float healthToAmmoRatio; // Offset: 0x178
    uint8_t _pad_8[0x4]; // Offset: 0x17c
    SSalvageRepairRangeParams rangeParams; // Offset: 0x180
    float heatPerSecond; // Offset: 0x198
    float wearPerSecond; // Offset: 0x19c
    float hitRadius; // Offset: 0x1a0
    float materialGatheringGracePeriod; // Offset: 0x1a4
    float aimPointThicknessDamageThreshold; // Offset: 0x1a8
    uint8_t _pad_9[0x4]; // Offset: 0x1ac
    Vec4 startDamageScales; // Offset: 0x1b0
    Vec4 endDamageScales; // Offset: 0x1c8
    float rampUpTime; // Offset: 0x1e0
    float rampDownTime; // Offset: 0x1e4
    float damageThreshold; // Offset: 0x1e8
    uint8_t _pad_10[0x4]; // Offset: 0x1ec
    SDamageMapShaderValues damageMapValues; // Offset: 0x1f0
    SSalvageRepairGlowParams glowParams; // Offset: 0x260
    CryStringT* hitType; // Offset: 0x290
    uint8_t _pad_11[0x8]; // Offset: 0x298
    bool ignoreSkiplist; // Offset: 0x2a0
    bool shouldDryFireInGreenZones; // Offset: 0x2a1
    uint8_t _pad_12[0x6]; // Offset: 0x2a2
    WeaponProceduralRecoilConfigDef recoil; // Offset: 0x2a8
    float recoilInterval; // Offset: 0x2c0
    uint8_t _pad_13[0x4]; // Offset: 0x2c4
    SFragmentParams fireFragment; // Offset: 0x2c8
    SFragmentParams stopFireFragment; // Offset: 0x2e8
    GlobalResourceAudio startFireOneShotAudioTrigger; // Offset: 0x308
    GlobalResourceAudio startFireLoopAudioTrigger; // Offset: 0x328
    GlobalResourceAudio stopFireAudioTrigger; // Offset: 0x348
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x368
    GlobalResourceAudio startBeamImpactAudioTrigger; // Offset: 0x388
    GlobalResourceAudio stopBeamImpactAudioTrigger; // Offset: 0x3a8
    AudioRtpc timeSinceLastFireRTPC; // Offset: 0x3c8
    AudioRtpc salvageRadiusRTPC; // Offset: 0x3e8
    AudioRtpc salvageStateRTPC; // Offset: 0x408
    AudioRtpc salvageExtractionIntensityRTPC; // Offset: 0x428
    AudioRtpc salvageRemainingMaterialRTPC; // Offset: 0x448
    AudioRtpc targetShieldedRTPC; // Offset: 0x468
    AudioRtpc beamActiveRTPC; // Offset: 0x488
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x4a8 // Pointer to DynArray struct
    uint8_t _pad_14[0x28]; // Offset: 0x4b0
    SBeamGroupParams beamGroup; // Offset: 0x4d8
    SWeaponConditionBase updateCondition; // Offset: 0x4e8
    SWeaponActionFireSalvageRepairBeamStrengthValueParams beamStrengthValueParams; // Offset: 0x4f8
    bool highlightTargetPart; // Offset: 0x508
    bool enableProximityCheck; // Offset: 0x509
    uint8_t _pad_15[0x6]; // Offset: 0x50a
    SSCSignatureEmitterParams signatureEmitterParams; // Offset: 0x510
};

// Original name: SWeaponActionFireSingleParams
// Size: 0x238
// VTable: 0x149a73840
struct SWeaponActionFireSingleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    SLauncherBase launchParams; // Offset: 0xe8
    int32_t fireRate; // Offset: 0xf8
    float heatPerShot; // Offset: 0xfc
    float wearPerShot; // Offset: 0x100
    uint8_t _pad_4[0x4]; // Offset: 0x104
    WeaponProceduralRecoilConfigDef recoil; // Offset: 0x108
    WeaponMisfireDef misfire; // Offset: 0x120
    SFragmentParams fireFragment; // Offset: 0x138
    GlobalResourceAudio fireAudioTrigger; // Offset: 0x158
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x178
    GlobalResourceAudio cooldownStartTrigger; // Offset: 0x198
    GlobalResourceAudio cooldownStopTrigger; // Offset: 0x1b8
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x1d8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x1e0
    SWeaponVibrationParams vibrationParams; // Offset: 0x208
    ExplosionParams explosionParams; // Offset: 0x218
    SSCSignatureEmitterParams signatureEmitterParams; // Offset: 0x228
};

// Original name: SWeaponActionFireTractorBeamAttachDetachParams
// Size: 0x208
// VTable: 0x149a78488
struct SWeaponActionFireTractorBeamAttachDetachParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minAlignmentValidHolo; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    RGB validHoloColor; // Offset: 0x10
    RGB warningHoloColor; // Offset: 0x28
    RGB invalidHoloColor; // Offset: 0x40
    RGBA cargoHoloPreviewColor; // Offset: 0x58
    float minOutlineWidth; // Offset: 0x70
    float maxOutlineWidth; // Offset: 0x74
    float outlineOpacity; // Offset: 0x78
    float holoOpacity; // Offset: 0x7c
    GlobalResourceMaterial holoMaterial; // Offset: 0x80
    float detachAccelerationPopAmount; // Offset: 0x98
    float detachAimRange; // Offset: 0x9c
    float itemPortDetachForceModifier; // Offset: 0xa0
    float attachHoloDefaultRange; // Offset: 0xa4
    float attachHoloRangeModifier; // Offset: 0xa8
    uint8_t _pad_2[0x4]; // Offset: 0xac
    CryStringT* requiredPortTagsCarryable; // Offset: 0xb0
    uint8_t _pad_3[0x8]; // Offset: 0xb8
    DynArray_SItemPortDefTypes* allowedDetachTypes; // Offset: 0xc0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xc8
    DynArray_SItemPortDefTypes* displayPortSizeTypes; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xf8
    DynArray_CryStringT* portFlagBlacklist; // Offset: 0x120 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x128
    DynArray_Tag* entityTagBlacklist; // Offset: 0x150 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x158
    bool isDetachMode; // Offset: 0x180
    bool isCargoMode; // Offset: 0x181
    uint8_t _pad_8[0x2]; // Offset: 0x182
    float releaseDistancePlacement; // Offset: 0x184
    float releaseDistanceCargoAttachment; // Offset: 0x188
    float aimRigDistance; // Offset: 0x18c
    float minThrowForce; // Offset: 0x190
    float maxThrowForce; // Offset: 0x194
    float throwChargeTime; // Offset: 0x198
    float noTetherBreakingDistanceMultiplier; // Offset: 0x19c
    float visionFieldMultiplier; // Offset: 0x1a0
    float holoPreviewScrollValue; // Offset: 0x1a4
    bool useBufferZoneRaycast; // Offset: 0x1a8
    uint8_t _pad_9[0x3]; // Offset: 0x1a9
    float boxBufferZoneMultiplier; // Offset: 0x1ac
    float boxBufferZoneRayCastLength; // Offset: 0x1b0
    bool useSuitTransformForPlacement; // Offset: 0x1b4
    bool useSuitTransformForRotation; // Offset: 0x1b5
    uint8_t _pad_10[0x2]; // Offset: 0x1b6
    SWeaponActionFireTractorBeamCargoModeOverrideParams cargoModeOverrideParams; // Offset: 0x1b8
    bool allowGrappleInDetach; // Offset: 0x200
    uint8_t _pad_11[0x7]; // Offset: 0x201
};

// Original name: SWeaponActionFireTractorBeamParams
// Size: 0x938
// VTable: 0x149a79c88
struct SWeaponActionFireTractorBeamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    CLocIdentifier* localisedLiftingFunctionalityName; // Offset: 0xe8
    CLocIdentifier* localisedRotationFunctionalityName; // Offset: 0xf0
    Tag liftingFunctionalityTag; // Offset: 0xf8
    Tag rotationFunctionalityTag; // Offset: 0x110
    CryStringT* fireHelper; // Offset: 0x128
    uint8_t _pad_4[0x8]; // Offset: 0x130
    bool toggle; // Offset: 0x138
    uint8_t _pad_5[0x3]; // Offset: 0x139
    float minForce; // Offset: 0x13c
    float maxForce; // Offset: 0x140
    float additionalForceDuringZeroGHandholding; // Offset: 0x144
    float minDistance; // Offset: 0x148
    float maxDistance; // Offset: 0x14c
    float fullStrengthDistance; // Offset: 0x150
    float maxAngle; // Offset: 0x154
    float maxVolume; // Offset: 0x158
    float volumeForceCoefficient; // Offset: 0x15c
    float heatPerSecond; // Offset: 0x160
    float wearPerSecond; // Offset: 0x164
    float hitRadius; // Offset: 0x168
    float tetherBreakTime; // Offset: 0x16c
    float safeRangeValueFactor; // Offset: 0x170
    float maxPlayerLookRotationScale; // Offset: 0x174
    bool allowScrollingIntoBreakingRange; // Offset: 0x178
    bool shouldDryFireInGreenZones; // Offset: 0x179
    bool shouldFireInHangars; // Offset: 0x17a
    bool shouldTractorSelf; // Offset: 0x17b
    uint8_t _pad_6[0x4]; // Offset: 0x17c
    DynArray_Tag* entityTagBlacklist; // Offset: 0x180 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x188
    ARDataType ammoType; // Offset: 0x1b0
    float minEnergyDraw; // Offset: 0x1b4
    float maxEnergyDraw; // Offset: 0x1b8
    uint8_t _pad_8[0x4]; // Offset: 0x1bc
    CryStringT* hitType; // Offset: 0x1c0
    uint8_t _pad_9[0x8]; // Offset: 0x1c8
    ActorStatusAddBuff actorStatusBuff; // Offset: 0x1d0
    WeaponProceduralRecoilConfigDef recoil; // Offset: 0x1e0
    WeaponProceduralRecoilConfigDef recoilGrappling; // Offset: 0x1f8
    float recoilInterval; // Offset: 0x210
    uint8_t _pad_10[0x4]; // Offset: 0x214
    SFragmentParams fireFragment; // Offset: 0x218
    SFragmentParams stopFireFragment; // Offset: 0x238
    SFragmentParams shootTargetFragment; // Offset: 0x258
    GlobalResourceAudio startFireOneShotAudioTrigger; // Offset: 0x278
    GlobalResourceAudio startFireLoopAudioTrigger; // Offset: 0x298
    GlobalResourceAudio stopFireOneShotAudioTrigger; // Offset: 0x2b8
    GlobalResourceAudio stopFireLoopAudioTrigger; // Offset: 0x2d8
    GlobalResourceAudio beamBrokenOneShotAudioTrigger; // Offset: 0x2f8
    GlobalResourceAudio beamAttachedOneShotAudioTrigger; // Offset: 0x318
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x338
    GlobalResourceAudio startRotationModeAudioTrigger; // Offset: 0x358
    GlobalResourceAudio stopRotationModeAudioTrigger; // Offset: 0x378
    GlobalResourceAudio startGrappleAudioTrigger; // Offset: 0x398
    GlobalResourceAudio stopGrappleAudioTrigger; // Offset: 0x3b8
    GlobalResourceAudio shootTargetAudioTrigger; // Offset: 0x3d8
    AudioRtpc timeSinceLastFireRTPC; // Offset: 0x3f8
    AudioRtpc tractorBeamAccelerationRTPC; // Offset: 0x418
    AudioRtpc tractorBeamSpeedRTPC; // Offset: 0x438
    AudioRtpc rotationModeAmountRTPC; // Offset: 0x458
    AudioRtpc tetherWarningStateRTPC; // Offset: 0x478
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x498 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x4a0
    AudioRtpc tractorBeamNormDistanceRTPC; // Offset: 0x4c8
    AudioRtpc tractorBeamNormForceRTPC; // Offset: 0x4e8
    AudioRtpc tractorBeamObjectHeldRTPC; // Offset: 0x508
    DynArray_SWeaponParticleEffectParams* shootTargetEffects; // Offset: 0x528 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x530
    SBeamGroupParams beamGroup; // Offset: 0x558
    SWeaponActionFireTractorBeamStrengthValueParams beamStrengthValues; // Offset: 0x568
    SWeaponActionFireTractorBeamInputParams inputParams; // Offset: 0x5a0
    SWeaponActionFireTractorBeamMovementParams movementParams; // Offset: 0x5b8
    SWeaponActionFireTractorBeamAttachDetachParams attachDetachParams; // Offset: 0x5e0
    SWeaponActionFireTractorBeamRotationParams rotationParams; // Offset: 0x7e8
    SWeaponActionFireTractorBeamGrappleParams grappleParams; // Offset: 0x808
    SWeaponActionFireTractorBeamVehicleBased vehicleParams; // Offset: 0x828
    SWeaponActionFireTractorBeamMultitractorParams multitractorParams; // Offset: 0x848
    SWeaponActionFireTractorBeamTowingParams towingBeamParams; // Offset: 0x870
    SWeaponConditionBase updateCondition; // Offset: 0x880
    Tag ignoreActorStandingOnEntityTag; // Offset: 0x890
    Tag ignoreVolumeTag; // Offset: 0x8a8
    Tag ignoreEntityTag; // Offset: 0x8c0
    Tag beingTractorBeamedTag; // Offset: 0x8d8
    Tag contractedTag; // Offset: 0x8f0
    Tag showLifetimeTag; // Offset: 0x908
    bool checkParentForIgnoreTag; // Offset: 0x920
    uint8_t _pad_13[0x7]; // Offset: 0x921
    SSCSignatureEmitterParams signatureEmitterParams; // Offset: 0x928
};

// Original name: SWeaponActionGatheringBeamParams
// Size: 0x258
// VTable: 0x149a6fd40
struct SWeaponActionGatheringBeamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    ARDataType inventoryType; // Offset: 0xe8
    uint8_t _pad_4[0x4]; // Offset: 0xec
    Tag queryTag; // Offset: 0xf0
    double minimumDistance; // Offset: 0x108
    double maximumDistance; // Offset: 0x110
    double beamRadius; // Offset: 0x118
    float energyDraw; // Offset: 0x120
    uint8_t _pad_5[0x4]; // Offset: 0x124
    Tag miningExtractorTag; // Offset: 0x128
    float collectionRate; // Offset: 0x140
    uint8_t _pad_6[0x4]; // Offset: 0x144
    CryStringT* fireHelper; // Offset: 0x148
    uint8_t _pad_7[0x8]; // Offset: 0x150
    SFragmentParams fireFragment; // Offset: 0x158
    SFragmentParams stopFireFragment; // Offset: 0x178
    GlobalResourceAudio startFireOneShotTrigger; // Offset: 0x198
    GlobalResourceAudio startFireLoopTrigger; // Offset: 0x1b8
    GlobalResourceAudio stopFireTrigger; // Offset: 0x1d8
    AudioRtpc timeSinceLastFireRTPC; // Offset: 0x1f8
    DynArray_SWeaponParticleEffectParams* particleEffects; // Offset: 0x218 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x220
    SBeamGroupParams beamGroups; // Offset: 0x248
};

// Original name: SWeaponActionGrappleParams
// Size: 0x1c0
// VTable: 0x149a6ff80
struct SWeaponActionGrappleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    CryStringT* firePosHelper; // Offset: 0xe8
    uint8_t _pad_4[0x8]; // Offset: 0xf0
    float maxGrappleRange; // Offset: 0xf8
    float minGrappleRange; // Offset: 0xfc
    float grappleStrength; // Offset: 0x100
    float maxGrappleStrength; // Offset: 0x104
    int32_t energyRate; // Offset: 0x108
    float cooldownTime; // Offset: 0x10c
    float maxGrappleTime; // Offset: 0x110
    uint8_t _pad_5[0x4]; // Offset: 0x114
    WeaponProceduralRecoilConfigDef recoil; // Offset: 0x118
    SFragmentParams fireFragment; // Offset: 0x130
    GlobalResourceAudio fireAudioTrigger; // Offset: 0x150
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x170
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x190 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x198
};

// Original name: SWeaponActionHighlightCuttablesParams
// Size: 0xe8
// VTable: 0x149a6f9f8
struct SWeaponActionHighlightCuttablesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
};

// Original name: SWeaponActionLockOnParams
// Size: 0x2a8
// VTable: 0x149a73a30
struct SWeaponActionLockOnParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    STargetingParams targetingParams; // Offset: 0xe8
    SFragmentParams lockingFragment; // Offset: 0x148
    SFragmentParams lockedFragment; // Offset: 0x168
    SFragmentParams lostLockFragment; // Offset: 0x188
    GlobalResourceAudio startLockAudioTrigger; // Offset: 0x1a8
    GlobalResourceAudio stopLockAudioTrigger; // Offset: 0x1c8
    GlobalResourceAudio lockedAudioTrigger; // Offset: 0x1e8
    GlobalResourceAudio lostLockAudioTrigger; // Offset: 0x208
    AudioRtpc lockLevelRTPC; // Offset: 0x228
    DynArray_SWeaponParticleEffectParams* lockingEffects; // Offset: 0x248 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x250
    DynArray_SWeaponParticleEffectParams* lockedEffects; // Offset: 0x278 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x280
};

// Original name: SWeaponActionMeleeParams
// Size: 0xe8
// VTable: 0x149a6fa00
struct SWeaponActionMeleeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
};

// Original name: SWeaponActionMiningParams
// Size: 0xf0
// VTable: 0x149a6fa60
struct SWeaponActionMiningParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    bool scanningAlwaysActive; // Offset: 0xe8
    uint8_t _pad_4[0x7]; // Offset: 0xe9
};

// Original name: SWeaponActionParallelParams
// Size: 0x118
// VTable: 0x149a6f9f0
struct SWeaponActionParallelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    DynArray_SWeaponActionParams* weaponActions; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xf0
};

// Original name: SWeaponActionParams
// Size: 0xe8
// VTable: 0x1499df038
struct SWeaponActionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
};

// Original name: SWeaponActionSequenceParams
// Size: 0x230
// VTable: 0x149a6f608
struct SWeaponActionSequenceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    ARDataType mode; // Offset: 0xe8
    uint8_t _pad_4[0x4]; // Offset: 0xec
    DynArray_SWeaponSequenceEntryParams* sequenceEntries; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xf8
    SFragmentParams startFragment; // Offset: 0x120
    SFragmentParams loopingFragment; // Offset: 0x140
    SFragmentParams stopFragment; // Offset: 0x160
    GlobalResourceAudio startAudioTrigger; // Offset: 0x180
    GlobalResourceAudio stopAudioTrigger; // Offset: 0x1a0
    GlobalResourceAudio dryFireAudioTrigger; // Offset: 0x1c0
    AudioRtpc fireRateRTPC; // Offset: 0x1e0
    DynArray_SWeaponParticleEffectParams* effects; // Offset: 0x200 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x208
};

// Original name: SWeaponActionToggleAimStanceParams
// Size: 0xe8
// VTable: 0x149a6f668
struct SWeaponActionToggleAimStanceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
};

// Original name: SWeaponActionToggleParams
// Size: 0xf8
// VTable: 0x149a6f660
struct SWeaponActionToggleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* localisedName; // Offset: 0x18
    SMannequinTagParams mannequinTag; // Offset: 0x20
    Tag entityTag; // Offset: 0x40
    TagList entityTags; // Offset: 0x58
    Tag uiBindingsTag; // Offset: 0x90
    ARDataType aiShootingMode; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0xb0
    SWeaponConditionBase selectableCondition; // Offset: 0xd0
    bool hasReloadModesOnUI; // Offset: 0xe0
    uint8_t _pad_3[0x7]; // Offset: 0xe1
    SWeaponActionParams weaponAction; // Offset: 0xe8
};

// Original name: SWeaponAttachmentIconPair
// Size: 0x40
// VTable: 0x149a6de38
struct SWeaponAttachmentIconPair {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    EntityClassDefinition attachmentEntity; // Offset: 0x10
    GlobalResourceTexture iconPath; // Offset: 0x28
};

// Original name: SWeaponAttachmentUIComponentParams
// Size: 0x120
// VTable: 0x149a6e190
struct SWeaponAttachmentUIComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* removeAttachmentName; // Offset: 0x18
    GlobalResourceTexture removeAttachmentIconPath; // Offset: 0x20
    CLocIdentifier* dropAttachmentPromptCaption; // Offset: 0x38
    int32_t pageSize; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    GlobalResourceMaterial previewMaterial; // Offset: 0x48
    DynArray_CryStringT* modelAttachmentsToIgnoreForPreview; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x68
    float inspectAnimationBlendTime; // Offset: 0x90
    float inspectDampenAmmount; // Offset: 0x94
    float fovScale; // Offset: 0x98
    float dofDistanceOffset; // Offset: 0x9c
    float dofFStop; // Offset: 0xa0
    float dofFocalRange; // Offset: 0xa4
    Vec3 panelRotation; // Offset: 0xa8
    DynArray_SWeaponAttachmentItemPort* portsToShow; // Offset: 0xc0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xc8
    DynArray_SWeaponAttachmentIconPair* iconPairList; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xf8
};

// Original name: SWeaponConditionHasTags
// Size: 0x38
// VTable: 0x149a701a0
struct SWeaponConditionHasTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SWeaponConnectionParams
// Size: 0x13c0
// VTable: 0x149a60848
struct SWeaponConnectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float powerActiveCooldown; // Offset: 0x8
    float heatRateOnline; // Offset: 0xc
    float maxGlow; // Offset: 0x10
    bool lockOnOnverheat; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    SWeaponSimplifiedHeatParams simplifiedHeatParams; // Offset: 0x18
    SWeaponStats noPowerStats; // Offset: 0x28
    SWeaponStats underpowerStats; // Offset: 0x3f0
    SWeaponStats overpowerStats; // Offset: 0x7b8
    SWeaponStats overclockStats; // Offset: 0xb80
    SWeaponStats heatStats; // Offset: 0xf48
    DynArray_SRangedWeaponStats* rangedHeatStats; // Offset: 0x1310 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x1318
    SWeaponStats overheatLockedStats; // Offset: 0x1340
    SMannequinTagParams overheatTag; // Offset: 0x1350
    DynArray_SWeaponParticleEffectParams* overheatEffects; // Offset: 0x1370 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1378
    Tag glowTag; // Offset: 0x13a0
    float heatReduceWhenOverheatIsFixed; // Offset: 0x13b8
    uint8_t _pad_4[0x4]; // Offset: 0x13bc
};

// Original name: SWeaponMisfireParams
// Size: 0x68
// VTable: 0x149a614d8
struct SWeaponMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SWeaponParticleEffectParams* majorMisfireEffects; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SWeaponParticleEffectParams* criticalMisfireEffects; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SWeaponModifierComponentParams
// Size: 0x4f0
// VTable: 0x149a69438
struct SWeaponModifierComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SWeaponModifierParams modifier; // Offset: 0x18
    Tag tag; // Offset: 0x3e8
    int32_t uiReticleIndex; // Offset: 0x400
    uint8_t _pad_1[0x4]; // Offset: 0x404
    SWeaponZeroingParams zeroingParams; // Offset: 0x408
    SWeaponReticleParams reticleParams; // Offset: 0x418
    Vec3 adsCameraOffset; // Offset: 0x428
    float aimHelperYOffset; // Offset: 0x438
    float adsNearClipPlaneMultiplier; // Offset: 0x43c
    float barrelEffectsStrength; // Offset: 0x440
    uint8_t _pad_2[0x4]; // Offset: 0x444
    DynArray_UserRTPC* userRTPCs; // Offset: 0x448 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x450
    DynArray_SWeaponParticleEffectParams* fireEffects; // Offset: 0x478 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x480
    SWeaponModifierBeamEffectParams beamEffect; // Offset: 0x4a8
    SScopeAttachmentParams scopeAttachmentParams; // Offset: 0x4b8
    SMannequinTagParams mannequinTag; // Offset: 0x4c8
    bool activateOnAttach; // Offset: 0x4e8
    bool ignoreWear; // Offset: 0x4e9
    uint8_t _pad_5[0x6]; // Offset: 0x4ea
};

// Original name: SWeaponMountGrip
// Size: 0x150
// VTable: 0x149a9d1d8
struct SWeaponMountGrip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* gripName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType canBeUsedBy; // Offset: 0x18
    ARDataType handMode; // Offset: 0x1c
    SGrip handGrip; // Offset: 0x20
    SGrip offHandGrip; // Offset: 0xd0
    QuatT userOffset; // Offset: 0xe0
    float width; // Offset: 0x138
    uint8_t _pad_2[0x4]; // Offset: 0x13c
    SInteractionPointParams interactionPoint; // Offset: 0x140
};

// Original name: SWeaponParticleEffectParams
// Size: 0x70
// VTable: 0x149a5fee0
struct SWeaponParticleEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle firstPerson; // Offset: 0x8
    GlobalResourceParticle thirdPerson; // Offset: 0x20
    Tag triggerTag; // Offset: 0x38
    CryStringT* helper; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    ARDataType modifierSource; // Offset: 0x60
    float delay; // Offset: 0x64
    float scale; // Offset: 0x68
    bool retriggerOnViewModeChange; // Offset: 0x6c
    bool isMuzzleFlash; // Offset: 0x6d
    uint8_t _pad_2[0x2]; // Offset: 0x6e
};

// Original name: SWeaponParticleEffectParamsArray
// Size: 0x38
// VTable: 0x149a5ff40
struct SWeaponParticleEffectParamsArray {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SWeaponParticleEffectParams* effects; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SWeaponSequenceEntryParams
// Size: 0x28
// VTable: 0x149a6f448
struct SWeaponSequenceEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float delay; // Offset: 0x8
    ARDataType unit; // Offset: 0xc
    int32_t repetitions; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    SWeaponActionParams weaponAction; // Offset: 0x18
};

// Original name: SWeightedRewardEntry
// Size: 0x28
// VTable: 0x149a0a678
struct SWeightedRewardEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition rewardEntityRecord; // Offset: 0x8
    float weight; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: ScanCustomDataDef
// Size: 0x40
// VTable: 0x1499c76c0
struct ScanCustomDataDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ScanCustomDataInfo info; // Offset: 0x8
};

// Original name: ScanCustomDataInfo
// Size: 0x38
// VTable: 0x1499c7660
struct ScanCustomDataInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CustomScanProcedureParams* scanProcedures; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ScanCustomDataTagEntry
// Size: 0x80
// VTable: 0x1499c7528
struct ScanCustomDataTagEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNFTerm tagsToMatch; // Offset: 0x8
    ScanCustomValue value; // Offset: 0x70
};

// Original name: ScanCustomDataTagToggle
// Size: 0x58
// VTable: 0x1499c75a8
struct ScanCustomDataTagToggle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    ARDataType displaySection; // Offset: 0x10
    bool addToBoxoutDisplay; // Offset: 0x11
    bool displayInSameRowAsHeader; // Offset: 0x12
    uint8_t _pad_1[0x5]; // Offset: 0x13
    ScanCustomValue defaultValue; // Offset: 0x18
    DynArray_ScanCustomDataTagEntry* tagEntries; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: ScanEvaluationInfractionSettings
// Size: 0x58
// VTable: 0x14996f8b8
struct ScanEvaluationInfractionSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InfractionDefinition infraction; // Offset: 0x8
    TagList taskOutputTags; // Offset: 0x20
};

// Original name: ScanInformationDef
// Size: 0x60
// VTable: 0x1499c7030
struct ScanInformationDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ScanDisplayLayoutParams scanDisplayLayout; // Offset: 0x18
    DynArray_ScanProcedureParams* scanProcedures; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
};

// Original name: ScanInformationTable
// Size: 0x38
// VTable: 0x1499c7090
struct ScanInformationTable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ScanInformationDef* defs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ScanOverrideParams
// Size: 0x68
// VTable: 0x1499c7250
struct ScanOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ScanCustomDataDef scanCustomData; // Offset: 0x8
    ScanDisplayLayoutParams scanDisplayLayout; // Offset: 0x20
    DynArray_ScanOverrideDisplayBaseParams* scanDisplayOverrides; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: ScanProcedureParams
// Size: 0x30
// VTable: 0x1499c6f88
struct ScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: ScreenEffects_Debug
// Size: 0x38
// VTable: 0x14999c4e0
struct ScreenEffects_Debug {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ScreenEffects_DebugEffect* effectList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ScreenEffects_DebugEffect
// Size: 0x58
// VTable: 0x14999c480
struct ScreenEffects_DebugEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag name; // Offset: 0x8
    bool enable; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    DynArray_ScreenEffects_DebugParam* parameters; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: ScreenEffects_DebugParam
// Size: 0x28
// VTable: 0x14999c3d8
struct ScreenEffects_DebugParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag strengthTag; // Offset: 0x8
    float strength; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: ScreenEffects_Effect
// Size: 0x68
// VTable: 0x14999bdc8
struct ScreenEffects_Effect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag name; // Offset: 0x8
    bool disableInThirdPerson; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    ScreenEffects_Pattern sharedPattern; // Offset: 0x28
    DynArray_ScreenEffects_Param* parameters; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: ScreenEffects_Library
// Size: 0x38
// VTable: 0x14999bcf0
struct ScreenEffects_Library {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ScreenEffects_Effect* effectList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ScreenEffects_Param
// Size: 0x30
// VTable: 0x14999bed0
struct ScreenEffects_Param {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    ScreenEffects_ParamValue value; // Offset: 0x10
    ScreenEffects_ParamStrengthBehavior strengthBehavior; // Offset: 0x20
};

// Original name: ScreenEffects_ParamStrengthBehavior
// Size: 0x20
// VTable: 0x14999bf30
struct ScreenEffects_ParamStrengthBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag strengthTag; // Offset: 0x8
};

// Original name: ScreenEffects_ParamStrengthBehavior_RangeEnable
// Size: 0x28
// VTable: 0x14999c2a8
struct ScreenEffects_ParamStrengthBehavior_RangeEnable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag strengthTag; // Offset: 0x8
    float rangeStart; // Offset: 0x20
    float rangeEnd; // Offset: 0x24
};

// Original name: ScreenEffects_ParamStrengthBehavior_RangeFade
// Size: 0x30
// VTable: 0x14999c350
struct ScreenEffects_ParamStrengthBehavior_RangeFade {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag strengthTag; // Offset: 0x8
    float rangeStart; // Offset: 0x20
    float rangeEnd; // Offset: 0x24
    bool useSharedPattern; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
};

// Original name: SecurityAccessTokenStateModifier
// Size: 0x38
// VTable: 0x149968ad0
struct SecurityAccessTokenStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_StateTypeStateTokenRequirements* stateTypeStateTokenRequirements; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SecurityClearanceConditions
// Size: 0x38
// VTable: 0x14996f7d0
struct SecurityClearanceConditions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SecurityClearanceToken* tokens; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SecurityClearanceGiverComponentParams
// Size: 0x50
// VTable: 0x149966a80
struct SecurityClearanceGiverComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SecurityClearanceToken* securityTokens; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    bool grantWhenInsideHostedZone; // Offset: 0x48
    bool grantWhenInsideLinkedArea; // Offset: 0x49
    uint8_t _pad_2[0x6]; // Offset: 0x4a
};

// Original name: SecurityClearanceToken
// Size: 0x48
// VTable: 0x14996f778
struct SecurityClearanceToken {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SecurityClearanceTokenData customCondition; // Offset: 0x8
    SecurityManualInput manualInput; // Offset: 0x18
    MobiGlasMissionNote missionNote; // Offset: 0x28
    SecurityNotifications notifications; // Offset: 0x38
};

// Original name: SecurityClearanceTokenData
// Size: 0x20
// VTable: 0x149974180
struct SecurityClearanceTokenData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
};

// Original name: SecurityClearanceTokenData_AND
// Size: 0x50
// VTable: 0x1499742a0
struct SecurityClearanceTokenData_AND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
    DynArray_SecurityClearanceTokenData* conditions; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SecurityClearanceTokenData_NOT
// Size: 0x30
// VTable: 0x149974360
struct SecurityClearanceTokenData_NOT {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
    SecurityClearanceTokenData condition; // Offset: 0x20
};

// Original name: SecurityClearanceTokenData_NeutralZone
// Size: 0x20
// VTable: 0x149974240
struct SecurityClearanceTokenData_NeutralZone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
};

// Original name: SecurityClearanceTokenData_OR
// Size: 0x50
// VTable: 0x149974300
struct SecurityClearanceTokenData_OR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
    DynArray_SecurityClearanceTokenData* conditions; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SecurityClearanceTokenData_OtherToken
// Size: 0x38
// VTable: 0x1499743c0
struct SecurityClearanceTokenData_OtherToken {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
    SecurityClearanceToken token; // Offset: 0x20
};

// Original name: SecurityClearanceTokenData_OutfitRequirementDef
// Size: 0x30
// VTable: 0x149974660
struct SecurityClearanceTokenData_OutfitRequirementDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
    SecurityClearance_OutfitRequirementDef outfitRequirement; // Offset: 0x20
};

// Original name: SecurityClearanceTokenData_Ownership
// Size: 0x20
// VTable: 0x149974238
struct SecurityClearanceTokenData_Ownership {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
};

// Original name: SecurityClearanceTokenData_PrisonInmate
// Size: 0x20
// VTable: 0x149974188
struct SecurityClearanceTokenData_PrisonInmate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
};

// Original name: SecurityClearanceTokenData_Reputation
// Size: 0x68
// VTable: 0x149974230
struct SecurityClearanceTokenData_Reputation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
    FactionReputation factionReputation; // Offset: 0x20
    SReputationScopeParams scope; // Offset: 0x38
    SReputationStandingParams standing; // Offset: 0x50
};

// Original name: SecurityClearanceTokenData_UnarmedDef
// Size: 0x20
// VTable: 0x1499743c8
struct SecurityClearanceTokenData_UnarmedDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
};

// Original name: SecurityClearanceTokenData_WeaponDrawn
// Size: 0x20
// VTable: 0x1499743d0
struct SecurityClearanceTokenData_WeaponDrawn {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag conditionFailedTag; // Offset: 0x8
};

// Original name: SecurityClearance_OutfitRequirement_TagRequirementDef
// Size: 0x58
// VTable: 0x149974480
struct SecurityClearance_OutfitRequirement_TagRequirementDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* outfitPiecesToCheck; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Tag requiredTag; // Offset: 0x38
    bool allowMissingOutfitPieces; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
};

// Original name: SecurityNetworkManifest
// Size: 0x148
// VTable: 0x149974c60
struct SecurityNetworkManifest {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SecurityNetworkProtocol defaultProtocol; // Offset: 0x8
    DynArray_SecurityNetworkProtocolOverride* roomProtocols; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x88
    DynArray_SecurityNetworkVariable* variables; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xb8
    DynArray_SHostilityRules* hostilityRules; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xe8
    DynArray_SecurityNetworkVariableEffects* variableEffects; // Offset: 0x110 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x118
    bool isNeutralTerritory; // Offset: 0x140
    bool teleportPlayerOut; // Offset: 0x141
    uint8_t _pad_5[0x6]; // Offset: 0x142
};

// Original name: SecurityNetworkMemberComponentParams
// Size: 0x60
// VTable: 0x149966b18
struct SecurityNetworkMemberComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Tag hostilityRulesTag; // Offset: 0x18
    DynArray_SecurityNetworkVariableEffects* variableEffects; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
};

// Original name: SecurityNetworkProtocol
// Size: 0x78
// VTable: 0x1499749c8
struct SecurityNetworkProtocol {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SecurityNetworkPermissions permissionsWithClearance; // Offset: 0x8
    SecurityNetworkPermissions permissionsWithoutClearance; // Offset: 0x18
    SecurityClearanceConditions acceptedClearance; // Offset: 0x28
    Faction ownerFaction; // Offset: 0x60
};

// Original name: SecurityNetworkProtocolOverride
// Size: 0xb8
// VTable: 0x149974b18
struct SecurityNetworkProtocolOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList roomIdentifiers; // Offset: 0x8
    SecurityNetworkProtocol protocol; // Offset: 0x40
};

// Original name: SecurityNetworkRoomSettings
// Size: 0xa0
// VTable: 0x149974a98
struct SecurityNetworkRoomSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SecurityNetworkProtocol defaultProtocol; // Offset: 0x8
    Tag roomIdentifier; // Offset: 0x80
    float trespassWarningSeconds; // Offset: 0x98
    float trespassRevokeWarningSeconds; // Offset: 0x9c
};

// Original name: SecurityNetworkVariable
// Size: 0x30
// VTable: 0x1499747a8
struct SecurityNetworkVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    SecurityNetworkVariableValue_Base value; // Offset: 0x20
};

// Original name: SecurityNetworkVariableEffect_SetHostilityRules
// Size: 0x60
// VTable: 0x149974870
struct SecurityNetworkVariableEffect_SetHostilityRules {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SHostilityRules rules; // Offset: 0x8
};

// Original name: SecurityNetworkVariableEffect_SetInteractionState
// Size: 0x18
// VTable: 0x149974810
struct SecurityNetworkVariableEffect_SetInteractionState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState state; // Offset: 0x8
};

// Original name: SecurityNetworkVariableEffects
// Size: 0x68
// VTable: 0x1499748f8
struct SecurityNetworkVariableEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SecurityNetworkVariable variableValue; // Offset: 0x8
    DynArray_SecurityNetworkVariableEffect_Base* effects; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: SecurityTokenNotificationRecordReference
// Size: 0x38
// VTable: 0x14996f6a0
struct SecurityTokenNotificationRecordReference {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_NotificationDef* notifications; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SelfDestructStateModifier
// Size: 0x58
// VTable: 0x1499c23b8
struct SelfDestructStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AttachableStateModifierContextBase context; // Offset: 0x8
    SInteractionState offlineState; // Offset: 0x18
    SInteractionState primedState; // Offset: 0x28
    SInteractionState idleState; // Offset: 0x38
    SInteractionState detonatedState; // Offset: 0x48
};

// Original name: SendSetAmmoRegenRateEvent
// Size: 0x20
// VTable: 0x149a7b9a8
struct SendSetAmmoRegenRateEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float regenRate; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SItemPortDef itemPort; // Offset: 0x10
};

// Original name: ServiceBeaconBaseParams
// Size: 0x98
// VTable: 0x149aae800
struct ServiceBeaconBaseParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType serviceBeaconType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* serviceBeaconName; // Offset: 0x20
    int32_t beaconTaxPercentage; // Offset: 0x28
    int32_t beaconMaxPaymentAmount; // Offset: 0x2c
    MissionPropertyValue_AIName npcRequesterNameDef; // Offset: 0x30
    SServiceBeaconCreatorParams playerCreatorParams; // Offset: 0x78
    SServiceBeaconCreatorParamsBase npcCreatorParams; // Offset: 0x88
};

// Original name: ServiceBeaconGlobalParams
// Size: 0x3f0
// VTable: 0x149aaef38
struct ServiceBeaconGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition quantumTravelPointClass; // Offset: 0x8
    MissionType missionTypeRecord; // Offset: 0x20
    ServiceBeaconNotificationParams personalTransportDetectedNotification; // Offset: 0x38
    ServiceBeaconNotificationParams combatAssistanceDetectedNotification; // Offset: 0x70
    ServiceBeaconNotificationParams escortDetectedNotification; // Offset: 0xa8
    ServiceBeaconNotificationParams refuelDetectedNotification; // Offset: 0xe0
    ServiceBeaconNotificationParams reviveDetectedNotification; // Offset: 0x118
    ServiceBeaconNotificationParams healDetectedNotification; // Offset: 0x150
    ServiceBeaconNotificationParams contractAcceptedNotification; // Offset: 0x188
    ServiceBeaconNotificationParams contractCancelledNotification; // Offset: 0x1c0
    ServiceBeaconNotificationParams contractNoLongerAvailableNotification; // Offset: 0x1f8
    ServiceBeaconNotificationParams contractCompletedInitiatorNotification; // Offset: 0x230
    ServiceBeaconNotificationParams contractCompletedProviderNotification; // Offset: 0x268
    ServiceBeaconNotificationParams providerWithinRangeNotification; // Offset: 0x2a0
    ServiceBeaconNotificationParams spoofedContractOfferedNotification; // Offset: 0x2d8
    CLocIdentifier* contractProviderName; // Offset: 0x310
    CLocIdentifier* vehicleLocationChosenForPersonalTransport; // Offset: 0x318
    CryStringT* providerNameToken; // Offset: 0x320
    uint8_t _pad_1[0x8]; // Offset: 0x328
    CryStringT* initiatorNameToken; // Offset: 0x330
    uint8_t _pad_2[0x8]; // Offset: 0x338
    CryStringT* selectedDestinationToken; // Offset: 0x340
    uint8_t _pad_3[0x8]; // Offset: 0x348
    CryStringT* contractTypeToken; // Offset: 0x350
    uint8_t _pad_4[0x8]; // Offset: 0x358
    CryStringT* distanceToInitiatorToken; // Offset: 0x360
    uint8_t _pad_5[0x8]; // Offset: 0x368
    CryStringT* initiatorLocationToken; // Offset: 0x370
    uint8_t _pad_6[0x8]; // Offset: 0x378
    CryStringT* paymentAmountToken; // Offset: 0x380
    uint8_t _pad_7[0x8]; // Offset: 0x388
    CLocIdentifier* openSpaceLocationName; // Offset: 0x390
    CLocIdentifier* allReputationsLabel; // Offset: 0x398
    CLocIdentifier* oneStarReputationLabel; // Offset: 0x3a0
    CLocIdentifier* twoStarReputationLabel; // Offset: 0x3a8
    CLocIdentifier* threeStarReputationLabel; // Offset: 0x3b0
    CLocIdentifier* fourStarReputationLabel; // Offset: 0x3b8
    CLocIdentifier* fiveStarReputationLabel; // Offset: 0x3c0
    CLocIdentifier* invalidTypeErrorMessage; // Offset: 0x3c8
    CLocIdentifier* invalidReputationErrorMessage; // Offset: 0x3d0
    CLocIdentifier* priceIsZeroErrorMessage; // Offset: 0x3d8
    CLocIdentifier* insufficientFundsErrorMessage; // Offset: 0x3e0
    CLocIdentifier* invalidLocationSelectedErrorMessage; // Offset: 0x3e8
};

// Original name: ServiceBeaconParams
// Size: 0x18
// VTable: 0x149aae860
struct ServiceBeaconParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ServiceBeaconBaseParams params; // Offset: 0x8
};

// Original name: ShipAudioComponentParams
// Size: 0x540
// VTable: 0x149a19a38
struct ShipAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Tag shipManufacturerTag; // Offset: 0x18
    AudioRtpc shipBuildQualityRtpc; // Offset: 0x30
    float shipBuildQualityRtpcValue; // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
    AudioSwitch shipSizeSwitch; // Offset: 0x58
    AudioRtpc isClientDrivingRtpc; // Offset: 0x90
    GlobalResourceAudio landedSweetener; // Offset: 0xb0
    GlobalResourceAudio contactSweetener; // Offset: 0xd0
    GlobalResourceAudio shipMovementRealisticStart; // Offset: 0xf0
    GlobalResourceAudio shipMovementRealisticStop; // Offset: 0x110
    GlobalResourceAudio shipMovementSoundSimStart; // Offset: 0x130
    GlobalResourceAudio shipMovementSoundSimStop; // Offset: 0x150
    GlobalResourceAudio masterModeSpoolingStartedAudioTrigger; // Offset: 0x170
    GlobalResourceAudio masterModeSpoolingFinishedAudioTrigger; // Offset: 0x190
    Ang3 offsetRotation; // Offset: 0x1b0
    Vec3 offsetTranslation; // Offset: 0x1c8
    bool useDeprecatedIfcsOutputsToRtpcs; // Offset: 0x1e0
    uint8_t _pad_2[0x7]; // Offset: 0x1e1
    DynArray_IFCSOutputToRtpcList* ifcsOutputsToRtpcsDEPRECATED; // Offset: 0x1e8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1f0
    DynArray_IFCSOutputToRtpcList* ifcsOutputsToRtpcs; // Offset: 0x218 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x220
    DynArray_ShipWideAudioObject* shipWideAudioObjects; // Offset: 0x248 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x250
    float vibrationModifierTranslation; // Offset: 0x278
    float vibrationModifierRotation; // Offset: 0x27c
    float vibrationModifierLift; // Offset: 0x280
    float vibrationModifierDrag; // Offset: 0x284
    float expectedCombinedThrusterSize; // Offset: 0x288
    uint8_t _pad_6[0x4]; // Offset: 0x28c
    AudioRtpc shipHealthRtpc; // Offset: 0x290
    AudioRtpc thrustersSpoolStateRtpc; // Offset: 0x2b0
    AudioRtpc thrusterHealthRtpc; // Offset: 0x2d0
    AudioRtpc thrustersTemperatureRatioRtpc; // Offset: 0x2f0
    AudioRtpc thrustersOverheatRtpc; // Offset: 0x310
    AudioRtpc misfireRtpc; // Offset: 0x330
    AudioRtpc techLevelRtpc; // Offset: 0x350
    AudioRtpc civilianLowRtpc; // Offset: 0x370
    AudioRtpc civilianMedRtpc; // Offset: 0x390
    AudioRtpc civilianHighRtpc; // Offset: 0x3b0
    AudioRtpc industrialRtpc; // Offset: 0x3d0
    AudioRtpc militaryRtpc; // Offset: 0x3f0
    AudioRtpc racingRtpc; // Offset: 0x410
    AudioRtpc stealthRtpc; // Offset: 0x430
    AudioRtpc degradationRtpc; // Offset: 0x450
    GlobalResourceAudio shipCollisionFeedback; // Offset: 0x470
    AudioRtpc shipCollisionRelShieldDamageRtpc; // Offset: 0x490
    AudioRtpc shipCollisionRelHullDamageRtpc; // Offset: 0x4b0
    AudioRtpc shipCollisionTotalDeliverableDamageRtpc; // Offset: 0x4d0
    GlobalResourceAudio shipGasCloudFeedback; // Offset: 0x4f0
    AudioRtpc gasCloudDensityRtpc; // Offset: 0x510
    ShipAudioTrackviewParams trackviewParams; // Offset: 0x530
};

// Original name: ShipComputerDefinition
// Size: 0x48
// VTable: 0x149a29258
struct ShipComputerDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float preBootUpTime; // Offset: 0x8
    float bootUpTime; // Offset: 0xc
    CommunicationConfig communicationConfig; // Offset: 0x10
    AudioRtpc timeSinceLastHitMarkerSfx; // Offset: 0x28
};

// Original name: ShipRecallParams
// Size: 0x38
// VTable: 0x149a2ed20
struct ShipRecallParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float HoverHeightAtDestination; // Offset: 0x8
    float ForwardOffset; // Offset: 0xc
    float ObstructionDetectionRange; // Offset: 0x10
    float DefaultPlatformDetectionRange; // Offset: 0x14
    float MinimumRecallDistance; // Offset: 0x18
    float BrakingDistanceOffset; // Offset: 0x1c
    Tag AIModuleTag; // Offset: 0x20
};

// Original name: ShopInteractionData
// Size: 0xc0
// VTable: 0x1499f8c08
struct ShopInteractionData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InteractionConditionList quickBuyConditionList; // Offset: 0x8
    CLocIdentifier* quickBuyInteractionText; // Offset: 0xa0
    CryStringT* quickBuyPriceStringToken; // Offset: 0xa8
    uint8_t _pad_1[0x8]; // Offset: 0xb0
    CLocIdentifier* moreInfoInteractionText; // Offset: 0xb8
};

// Original name: ShoppingProviderEntityComponentParams
// Size: 0x48
// VTable: 0x1499f8ef8
struct ShoppingProviderEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType variant; // Offset: 0x18
    ARDataType shopType; // Offset: 0x1c
    ItemKioskBrand brand; // Offset: 0x20
    SItemPortDef globalInventoryPersistentQueryDef; // Offset: 0x38
};

// Original name: Skill
// Size: 0x70
// VTable: 0x1499b7930
struct Skill {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isSkill; // Offset: 0x8
    bool optional; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    ARDataType skillType; // Offset: 0xc
    float skillLevel; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    Tag skillTag; // Offset: 0x18
    CryStringT* categoryName; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
    DynArray_Skill* skills; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x48
};

// Original name: SkillDefinitions
// Size: 0xa8
// VTable: 0x1499b79e0
struct SkillDefinitions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList descriptionTags; // Offset: 0x8
    TagList traits; // Offset: 0x40
    DynArray_Skill* skills; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x80
};

// Original name: SkinInteractableTemplate
// Size: 0x40
// VTable: 0x1499a65f8
struct SkinInteractableTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Type; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_SInteractionPointParams* InteractionPoints; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SkinInteractableTemplates
// Size: 0x38
// VTable: 0x1499a6650
struct SkinInteractableTemplates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SkinInteractableTemplate* Templates; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SpawnDescription_Entity
// Size: 0xf0
// VTable: 0x14996a308
struct SpawnDescription_Entity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList tags; // Offset: 0x8
    TagList negativeTags; // Offset: 0x40
    TagList markupTags; // Offset: 0x78
    TagList entityTags; // Offset: 0xb0
    int32_t amount; // Offset: 0xe8
    float weight; // Offset: 0xec
};

// Original name: SpawnDescription_EntityGroup
// Size: 0x48
// VTable: 0x14996a3e8
struct SpawnDescription_EntityGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SpawnDescription_EntityOptions* entities; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SpawnDescription_EntityOptions
// Size: 0x38
// VTable: 0x14996a360
struct SpawnDescription_EntityOptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SpawnDescription_Entity* options; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SpawnDescription_NPCOption
// Size: 0x300
// VTable: 0x14996a650
struct SpawnDescription_NPCOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AutoSpawnSettings autoSpawnSettings; // Offset: 0x8
    TagList identifierTags; // Offset: 0x298
    int32_t priority; // Offset: 0x2d0
    bool includeLocationAISpawnTags; // Offset: 0x2d4
    uint8_t _pad_1[0x3]; // Offset: 0x2d5
    MissionProperty nameProperty; // Offset: 0x2d8
    MissionPropertyValue_AIName embeddedName; // Offset: 0x2e8
    float weight; // Offset: 0x2f8
    uint8_t _pad_2[0x4]; // Offset: 0x2fc
};

// Original name: SpawnDescription_NPC_Group
// Size: 0x48
// VTable: 0x14996a6d8
struct SpawnDescription_NPC_Group {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SpawnDescription_NPCOption* options; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SpawnDescription_Ship
// Size: 0x120
// VTable: 0x14996a070
struct SpawnDescription_Ship {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagList tags; // Offset: 0x8
    TagList negativeTags; // Offset: 0x40
    TagList markupTags; // Offset: 0x78
    TagList entityTags; // Offset: 0xb0
    int32_t concurrentAmount; // Offset: 0xe8
    bool includeLocationAISpawnTags; // Offset: 0xec
    uint8_t _pad_1[0x3]; // Offset: 0xed
    MissionProperty nameProperty; // Offset: 0xf0
    float weight; // Offset: 0x100
    uint8_t _pad_2[0x4]; // Offset: 0x104
    InitialDamageOverride initialDamageSettings; // Offset: 0x108
};

// Original name: SpawnDescription_ShipGroup
// Size: 0x58
// VTable: 0x14996a180
struct SpawnDescription_ShipGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    MissionPropertyValue_AIName embeddedName; // Offset: 0x18
    DynArray_SpawnDescription_ShipOptions* ships; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: SpawnDescription_ShipOptions
// Size: 0x38
// VTable: 0x14996a0d0
struct SpawnDescription_ShipOptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SpawnDescription_Ship* options; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SpawnPointComponentParams
// Size: 0x60
// VTable: 0x149a0a5e0
struct SpawnPointComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Faction_LEGACY faction; // Offset: 0x18
    int32_t groupIndex; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
    CryStringT* interactionPoint; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    CryStringT* interactionName; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
    bool initialSpawn; // Offset: 0x58
    bool allowChildActors; // Offset: 0x59
    bool registerWithGameRules; // Offset: 0x5a
    uint8_t _pad_4[0x5]; // Offset: 0x5b
};

// Original name: SpawnSettingsInventoryItem
// Size: 0x30
// VTable: 0x1499e40f8
struct SpawnSettingsInventoryItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition entityClass; // Offset: 0x8
    int32_t quantity; // Offset: 0x20
    int32_t amountInventoriesToFill; // Offset: 0x24
    bool markAsMissionItem; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
};

// Original name: SpawnerPrerequisite_InteractionState
// Size: 0x18
// VTable: 0x149a40810
struct SpawnerPrerequisite_InteractionState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState state; // Offset: 0x8
};

// Original name: SpeciesScanProcedureParams
// Size: 0x30
// VTable: 0x1499c76c8
struct SpeciesScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: SpectatorPointParams
// Size: 0x30
// VTable: 0x1499e5270
struct SpectatorPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Faction_LEGACY faction; // Offset: 0x18
};

// Original name: StarMapObject
// Size: 0x230
// VTable: 0x149a8fcb8
struct StarMapObject {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StarMapObjectType type_; /* type */ // Offset: 0x8
    SSCRadarContactProperites radarProperties; // Offset: 0x20
    ARDataType navIcon; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
    StarMapObject parent; // Offset: 0x38
    bool isScannable; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
    double size; // Offset: 0x58
    bool hideInStarmap; // Offset: 0x60
    bool hideInWorld; // Offset: 0x61
    bool hideWhenInAdoptionRadius; // Offset: 0x62
    bool blockTravel; // Offset: 0x63
    bool onlyShowWhenParentSelected; // Offset: 0x64
    uint8_t _pad_3[0x3]; // Offset: 0x65
    ARDataType overrideShowInAllZones; // Offset: 0x68
    ARDataType overridePermanent; // Offset: 0x6c
    float minimumDisplaySize; // Offset: 0x70
    bool overrideRotationSpeed; // Offset: 0x74
    uint8_t _pad_4[0x3]; // Offset: 0x75
    float overrideRotationSpeedValue; // Offset: 0x78
    bool showOrbitLine; // Offset: 0x7c
    bool useHoloMaterial; // Offset: 0x7d
    bool noAutoBodyRecovery; // Offset: 0x7e
    uint8_t _pad_5[0x1]; // Offset: 0x7f
    CryStringT* starMapGeomPath; // Offset: 0x80
    uint8_t _pad_6[0x8]; // Offset: 0x88
    CryStringT* starMapMaterialPath; // Offset: 0x90
    uint8_t _pad_7[0x8]; // Offset: 0x98
    CryStringT* starMapShapePath; // Offset: 0xa0
    uint8_t _pad_8[0x8]; // Offset: 0xa8
    StarMapAssetManagerLocationParams assetManagerLocationParams; // Offset: 0xb0
    CLocIdentifier* name; // Offset: 0xd8
    Faction_LEGACY affiliation; // Offset: 0xe0
    CLocIdentifier* description; // Offset: 0xf8
    CLocIdentifier* callout1; // Offset: 0x100
    CLocIdentifier* callout2; // Offset: 0x108
    CLocIdentifier* callout3; // Offset: 0x110
    ARDataType respawnLocationType; // Offset: 0x118
    uint8_t _pad_9[0x4]; // Offset: 0x11c
    Jurisdiction jurisdiction; // Offset: 0x120
    Tag locationHierarchyTag; // Offset: 0x138
    DynArray_StarMapAsteroidRing* asteroidRings; // Offset: 0x150 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x158
    StarMapQuantumTravelDataParams quantumTravelData; // Offset: 0x180
    StarMapObjectLocationParams locationParams; // Offset: 0x190
    CryStringT* locationImagePath; // Offset: 0x1a0
    uint8_t _pad_11[0x8]; // Offset: 0x1a8
    CryStringT* locationMedicalImagePath; // Offset: 0x1b0
    uint8_t _pad_12[0x8]; // Offset: 0x1b8
    GlobalResourceAudio locationAudioPlayTrigger; // Offset: 0x1c0
    GlobalResourceAudio locationAudioStopTrigger; // Offset: 0x1e0
    DynArray_StarMapAmenityTypeEntry* amenities; // Offset: 0x200 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x208
};

// Original name: StarMapObjectType
// Size: 0x88
// VTable: 0x149a8f128
struct StarMapObjectType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* classification; // Offset: 0x18
    ARDataType facingMode; // Offset: 0x20
    float minimumDisplaySize; // Offset: 0x24
    float rotationSpeed; // Offset: 0x28
    bool selectable; // Offset: 0x2c
    bool fadeBehindParent; // Offset: 0x2d
    bool onParentSurface; // Offset: 0x2e
    bool spawnNavPoints; // Offset: 0x2f
    bool showAsNeighbor; // Offset: 0x30
    bool validQuantumTravelDestination; // Offset: 0x31
    bool innerCulling; // Offset: 0x32
    bool showInMapSelectList; // Offset: 0x33
    uint8_t _pad_2[0x4]; // Offset: 0x34
    Marker_Configuration markerConfig; // Offset: 0x38
    GlobalResourceGeometry geometry; // Offset: 0x50
    GlobalResourceMaterial material; // Offset: 0x68
    uint8_t _pad_3[0x8]; // Offset: 0x80
};

// Original name: StarMapObjectTypes
// Size: 0x38
// VTable: 0x149a8f180
struct StarMapObjectTypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_StarMapObjectType* types; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: Stat
// Size: 0x58
// VTable: 0x1499b7b10
struct Stat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag statTag; // Offset: 0x8
    float minimumValue; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    DynArray_StatInfluence* influences; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: StatDefinitions
// Size: 0x38
// VTable: 0x1499b7b70
struct StatDefinitions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Stat* stats; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: StatInfluence
// Size: 0x28
// VTable: 0x1499b7a68
struct StatInfluence {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag skillTag; // Offset: 0x8
    int32_t percentage; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: StateModifierHoverPowerStage
// Size: 0x48
// VTable: 0x1499e89b8
struct StateModifierHoverPowerStage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState poweredOff; // Offset: 0x8
    SInteractionState poweringOff; // Offset: 0x18
    SInteractionState poweringOn; // Offset: 0x28
    SInteractionState poweredOn; // Offset: 0x38
};

// Original name: StateTokenRequirements
// Size: 0x48
// VTable: 0x1499689f8
struct StateTokenRequirements {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState state; // Offset: 0x8
    DynArray_SecurityClearanceToken* requiredTokens; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: StateTypeStateTokenRequirements
// Size: 0x48
// VTable: 0x149968a78
struct StateTypeStateTokenRequirements {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionStateType stateType; // Offset: 0x8
    DynArray_StateTokenRequirements* stateTokenRequirements; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: StolenScanProcedureParams
// Size: 0x38
// VTable: 0x1499c79f0
struct StolenScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    CLocIdentifier* strolenString; // Offset: 0x30
};

// Original name: SubContract
// Size: 0x180
// VTable: 0x1499739d8
struct SubContract {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ContractStringParam* stringParamOverrides; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ContractBoolParam* boolParamOverrides; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_ContractIntParam* intParamOverrides; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_ContractPropertyTagReplacement* propertyTagReplacement; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_MissionProperty* propertyOverrides; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
    DynArray_BaseMissionModifier* modifierOverrides; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x100
    MissionType missionTypeOverride; // Offset: 0x128
    CryGUID* id; // Offset: 0x140
    uint8_t _pad_7[0x8]; // Offset: 0x148
    DynArray_ContractPrerequisiteBase* additionalPrerequisites; // Offset: 0x150 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x158
};

// Original name: SubHarvestableConfig
// Size: 0x58
// VTable: 0x1499ef688
struct SubHarvestableConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float initialSlotsProbability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    OptionalProbability initialSlotsProbabilityDeepest; // Offset: 0x10
    float configRespawnTimeMultiplier; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    DynArray_SubHarvestableSlot* subHarvestables; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x30
};

// Original name: SubHarvestableConfigManual
// Size: 0x60
// VTable: 0x1499ef900
struct SubHarvestableConfigManual {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SubHarvestableConfig subConfigManual; // Offset: 0x8
};

// Original name: SubHarvestableConfigRecord
// Size: 0x60
// VTable: 0x1499ef8a0
struct SubHarvestableConfigRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SubHarvestableConfig subConfig; // Offset: 0x8
};

// Original name: SubHarvestableConfigRef
// Size: 0x20
// VTable: 0x1499ef960
struct SubHarvestableConfigRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SubHarvestableConfigRecord subConfigRef; // Offset: 0x8
};

// Original name: SubHarvestableConfigSingleManual
// Size: 0x60
// VTable: 0x1499ef9c0
struct SubHarvestableConfigSingleManual {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SubHarvestableConfig subConfigManual; // Offset: 0x8
};

// Original name: SubHarvestableConfigSingleRef
// Size: 0x20
// VTable: 0x1499efa20
struct SubHarvestableConfigSingleRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SubHarvestableConfigRecord subConfigRef; // Offset: 0x8
};

// Original name: SubHarvestableSlot
// Size: 0x80
// VTable: 0x1499ef5b8
struct SubHarvestableSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    HarvestablePreset harvestable; // Offset: 0x8
    float relativeProbability; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    OptionalProbability relativeProbabilityDeepest; // Offset: 0x28
    float harvestableRespawnTimeMultiplier; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    DynArray_HarvestableGeometry* geometries; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
    LootConfig lootConfig; // Offset: 0x70
};

// Original name: SubItemsScanProcedureParams
// Size: 0x68
// VTable: 0x1499c8148
struct SubItemsScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    CLocIdentifier* displayForMissingItem; // Offset: 0x30
    DynArray_SubItemScanStatusMappings* statusMappings; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SubsumptionPlatformComponentParams
// Size: 0x58
// VTable: 0x149a04708
struct SubsumptionPlatformComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    MissionLocationParams missionLocation; // Offset: 0x18
    DynArray_MissionLocationParams* additionalLocations; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: SurfaceRaindropsComponentParams
// Size: 0x1c0
// VTable: 0x149998908
struct SurfaceRaindropsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enable; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    SurfaceParticleRTTParams surfaceParticleRtt; // Offset: 0x20
    DynArray_SurfaceRaindrops_Emitter* customEmitters; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
    GlobalResourceParticle wipeEffect; // Offset: 0x88
    float inactiveDuration; // Offset: 0xa0
    float maximumSpeed; // Offset: 0xa4
    Range waterSprayHeightRange; // Offset: 0xa8
    float waterSprayBaseDensity; // Offset: 0xb8
    uint8_t _pad_3[0x4]; // Offset: 0xbc
    SurfaceRaindrops_Acceleration acceleration; // Offset: 0xc0
    SurfaceRaindrops_Occluder occluderSettings; // Offset: 0x168
    SurfaceRaindrops_Override overrideControls; // Offset: 0x178
    DynArray_SItemPortLoadoutEntryParams* renderNodeLoadoutEntries; // Offset: 0x190 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x198
};

// Original name: TQSEmbeddedOption
// Size: 0x168
// VTable: 0x149980388
struct TQSEmbeddedOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    TQSOptionContent content; // Offset: 0x70
    DynArray_TQSOption* optionOverrides; // Offset: 0x138 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x140
};

// Original name: TQSInput
// Size: 0x80
// VTable: 0x14997fbb8
struct TQSInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
};

// Original name: TQSInputBoolValue
// Size: 0xb8
// VTable: 0x14997fc38
struct TQSInputBoolValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    bool value; // Offset: 0x80
    uint8_t _pad_2[0x7]; // Offset: 0x81
    DynArray_TQSInputBoolValue* overrides; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x90
};

// Original name: TQSInputDynamicVariableValue
// Size: 0xc0
// VTable: 0x14997fd38
struct TQSInputDynamicVariableValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    CryStringT* value; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    DynArray_TQSInputDynamicVariableValue* overrides; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x98
};

// Original name: TQSInputFloatValue
// Size: 0xb8
// VTable: 0x14997fdb8
struct TQSInputFloatValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    float value; // Offset: 0x80
    uint8_t _pad_2[0x4]; // Offset: 0x84
    DynArray_TQSInputFloatValue* overrides; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x90
};

// Original name: TQSInputIntValue
// Size: 0xb8
// VTable: 0x14997fcb8
struct TQSInputIntValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    int32_t value; // Offset: 0x80
    uint8_t _pad_2[0x4]; // Offset: 0x84
    DynArray_TQSInputIntValue* overrides; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x90
};

// Original name: TQSInputStringValue
// Size: 0xc0
// VTable: 0x14997fe38
struct TQSInputStringValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    CryStringT* value; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    DynArray_TQSInputStringValue* overrides; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x98
};

// Original name: TQSInputTagValue
// Size: 0x118
// VTable: 0x14997feb8
struct TQSInputTagValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    TagsDNF value; // Offset: 0x80
    DynArray_TQSInputTagValue* overrides; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xf0
};

// Original name: TQSOption
// Size: 0x70
// VTable: 0x149980300
struct TQSOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
};

// Original name: TQSOptionContent
// Size: 0xc8
// VTable: 0x149980248
struct TQSOptionContent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TQSInput* parameters; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_TQSInput* generation; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_TQSInput* conditions; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_TQSWeightInput* weights; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
};

// Original name: TQSOptionContentRecord
// Size: 0xd0
// VTable: 0x1499802a0
struct TQSOptionContentRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TQSOptionContent content; // Offset: 0x8
};

// Original name: TQSOptionReference
// Size: 0xb8
// VTable: 0x149980408
struct TQSOptionReference {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    TQSOptionContentRecord content; // Offset: 0x70
    DynArray_TQSOption* optionOverrides; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x90
};

// Original name: TQSWeightDynamicVariableValue
// Size: 0xc8
// VTable: 0x149980178
struct TQSWeightDynamicVariableValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    float weight; // Offset: 0x80
    uint8_t _pad_2[0x4]; // Offset: 0x84
    CryStringT* value; // Offset: 0x88
    uint8_t _pad_3[0x8]; // Offset: 0x90
    DynArray_TQSWeightDynamicVariableValue* overrides; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
};

// Original name: TQSWeightInput
// Size: 0x88
// VTable: 0x14997ff10
struct TQSWeightInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    float weight; // Offset: 0x80
    uint8_t _pad_2[0x4]; // Offset: 0x84
};

// Original name: TQSWeightInputFloatValue
// Size: 0xc0
// VTable: 0x149980078
struct TQSWeightInputFloatValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    float weight; // Offset: 0x80
    uint8_t _pad_2[0x4]; // Offset: 0x84
    float value; // Offset: 0x88
    uint8_t _pad_3[0x4]; // Offset: 0x8c
    DynArray_TQSWeightInputFloatValue* overrides; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x98
};

// Original name: TQSWeightInputIntValue
// Size: 0xc0
// VTable: 0x14997fff8
struct TQSWeightInputIntValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    float weight; // Offset: 0x80
    uint8_t _pad_2[0x4]; // Offset: 0x84
    int32_t value; // Offset: 0x88
    uint8_t _pad_3[0x4]; // Offset: 0x8c
    DynArray_TQSWeightInputIntValue* overrides; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x98
};

// Original name: TQSWeightInputTagValue
// Size: 0x120
// VTable: 0x1499800f8
struct TQSWeightInputTagValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    float weight; // Offset: 0x80
    uint8_t _pad_2[0x4]; // Offset: 0x84
    TagsDNF value; // Offset: 0x88
    DynArray_TQSWeightInputTagValue* overrides; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xf8
};

// Original name: TQSWeightInputValue
// Size: 0xb8
// VTable: 0x14997ff70
struct TQSWeightInputValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF requirements; // Offset: 0x8
    CryStringT* condition; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
    float weight; // Offset: 0x80
    uint8_t _pad_2[0x4]; // Offset: 0x84
    DynArray_TQSWeightInputValue* overrides; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x90
};

// Original name: TachyonProjectileParams
// Size: 0x90
// VTable: 0x149a61958
struct TachyonProjectileParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ProjectileDetonationParams detonationParams; // Offset: 0x8
    ProjectileProximityTriggerParams proximityTriggerParams; // Offset: 0x18
    CryStringT* hitType; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    CryStringT* hitEffect; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    DamageBase damage; // Offset: 0x48
    float fullDamageRange; // Offset: 0x58
    float zeroDamageRange; // Offset: 0x5c
    DynArray_SBeamEffectParams* beamEffects; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x68
};

// Original name: TacticalQuery
// Size: 0x50
// VTable: 0x1499804b0
struct TacticalQuery {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType type_; /* type */ // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_TQSOption* options; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: Tag
// Size: 0x58
// VTable: 0x149ac4650
struct Tag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint32_t legacyGUID; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* tagName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    DynArray_Tag* children; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x30]; // Offset: 0x28
};

// Original name: TagDatabase
// Size: 0x38
// VTable: 0x149ac4810
struct TagDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: TagList
// Size: 0x38
// VTable: 0x149ac4790
struct TagList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: TagSearchTerm
// Size: 0x68
// VTable: 0x149969028
struct TagSearchTerm {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* positiveTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_Tag* negativeTags; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: TagToAudioRtpc
// Size: 0x38
// VTable: 0x149af2d80
struct TagToAudioRtpc {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    CryStringT* rtpcName; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float rtpcValue; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: TagToAudioRtpcList
// Size: 0x38
// VTable: 0x149af2de0
struct TagToAudioRtpcList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TagToAudioRtpc* TagsToRtpcs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: TagTrigger
// Size: 0x70
// VTable: 0x1499b0d68
struct TagTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    GlobalResourceAudio startTrigger; // Offset: 0x20
    GlobalResourceAudio stopTrigger; // Offset: 0x40
    CryStringT* boneName; // Offset: 0x60
    uint8_t _pad_1[0x8]; // Offset: 0x68
};

// Original name: TagsDNF
// Size: 0x68
// VTable: 0x149ac4730
struct TagsDNF {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TagsDNFTerm* terms; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x58]; // Offset: 0x10
};

// Original name: TagsDNFTerm
// Size: 0x68
// VTable: 0x149ac46d8
struct TagsDNFTerm {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Tag* positiveTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_Tag* negativeTags; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: TargetSelectorCycleTargetStates
// Size: 0x28
// VTable: 0x1499c30b8
struct TargetSelectorCycleTargetStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState cycleForward; // Offset: 0x8
    SInteractionState cycleBackward; // Offset: 0x18
};

// Original name: TargetSelectorRootTargetingStates
// Size: 0x48
// VTable: 0x1499c2f68
struct TargetSelectorRootTargetingStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState noTarget; // Offset: 0x8
    SInteractionState friendlyTarget; // Offset: 0x18
    SInteractionState hostileTarget; // Offset: 0x28
    SInteractionState neutralTarget; // Offset: 0x38
};

// Original name: TargetSelectorStateModifier
// Size: 0x38
// VTable: 0x1499c3160
struct TargetSelectorStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TargetSelectorRootTargetingStates rootTargetingStates; // Offset: 0x8
    TargetSelectorSubTargetingStates subTargetingStates; // Offset: 0x18
    TargetSelectorCycleTargetStates cycleTargetStates; // Offset: 0x28
};

// Original name: TargetSelectorSubTargetingStates
// Size: 0x48
// VTable: 0x1499c3038
struct TargetSelectorSubTargetingStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState noTarget; // Offset: 0x8
    SInteractionState validTarget; // Offset: 0x18
    SInteractionState enginesTargeted; // Offset: 0x28
    SInteractionState turretTargeted; // Offset: 0x38
};

// Original name: TelevisionScreenParams
// Size: 0x50
// VTable: 0x1499dd290
struct TelevisionScreenParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SSharedInteractionParams nextInteraction; // Offset: 0x18
    SSharedInteractionParams previousInteraction; // Offset: 0x28
    TVMovieList movieList; // Offset: 0x38
};

// Original name: TestArrays
// Size: 0x368
// VTable: 0x149a88d58
struct TestArrays {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* myStringArray; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_int8_t* myInt8Array; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_int16_t* myInt16Array; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_int32_t* myInt32Array; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_int64_t* myInt64Array; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
    DynArray_uint8_t* myUInt8Array; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x100
    DynArray_uint16_t* myUInt16Array; // Offset: 0x128 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x130
    DynArray_uint32_t* myUInt32Array; // Offset: 0x158 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x160
    DynArray_uint64_t* myUInt64Array; // Offset: 0x188 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x190
    DynArray_bool* myBooleanArray; // Offset: 0x1b8 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x1c0
    DynArray_float* myFloatArray; // Offset: 0x1e8 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x1f0
    DynArray_double* myDoubleArray; // Offset: 0x218 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x220
    DynArray_TestAtomics* myStructArray; // Offset: 0x248 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x250
    DynArray_TestAtomics* myWeakPtrArray; // Offset: 0x278 // Pointer to DynArray struct
    uint8_t _pad_14[0x28]; // Offset: 0x280
    DynArray_UnitTest* myReferenceArray; // Offset: 0x2a8 // Pointer to DynArray struct
    uint8_t _pad_15[0x28]; // Offset: 0x2b0
    DynArray_ARDataType* myEnumArray; // Offset: 0x2d8 // Pointer to DynArray struct
    uint8_t _pad_16[0x28]; // Offset: 0x2e0
    DynArray_CLocIdentifier* localeArray; // Offset: 0x308 // Pointer to DynArray struct
    uint8_t _pad_17[0x28]; // Offset: 0x310
    DynArray_CryStringT* enumFixedArray; // Offset: 0x338 // Pointer to DynArray struct
    uint8_t _pad_18[0x28]; // Offset: 0x340
};

// Original name: ThrusterAudioComponentParams
// Size: 0x590
// VTable: 0x149a1d6e0
struct ThrusterAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    AudioThrusterProperties properties; // Offset: 0x18
    GlobalResourceAudio spoolStart; // Offset: 0x80
    GlobalResourceAudio spoolStop; // Offset: 0xa0
    GlobalResourceAudio spoolUpStarted; // Offset: 0xc0
    GlobalResourceAudio spoolUpCompleted; // Offset: 0xe0
    GlobalResourceAudio spoolDownStarted; // Offset: 0x100
    GlobalResourceAudio spoolDownCompleted; // Offset: 0x120
    AudioRtpc timeSinceLastOneshotAtSpoolBegin; // Offset: 0x140
    AudioRtpc timeSinceLastOneshotAtSpoolEnd; // Offset: 0x160
    float spoolTime; // Offset: 0x180
    uint8_t _pad_1[0x4]; // Offset: 0x184
    AudioRtpc spoolRTPC; // Offset: 0x188
    bool avoidSpoolOneshotsOnLowRankShips; // Offset: 0x1a8
    uint8_t _pad_2[0x7]; // Offset: 0x1a9
    GlobalResourceAudio thrusterLoopStart; // Offset: 0x1b0
    GlobalResourceAudio thrusterLoopStop; // Offset: 0x1d0
    GlobalResourceAudio afterburnerEnabledLoopStart; // Offset: 0x1f0
    GlobalResourceAudio afterburnerEnabledLoopStop; // Offset: 0x210
    GlobalResourceAudio afterburnerEnabledOneShot; // Offset: 0x230
    AudioRtpc timeSinceLastAfterburnerEnabledRtpc; // Offset: 0x250
    GlobalResourceAudio afterburnerDisabledOneShot; // Offset: 0x270
    bool avoidAfterburnerOneShotsOnLowRankShips; // Offset: 0x290
    uint8_t _pad_3[0x7]; // Offset: 0x291
    AudioRtpc timeSinceLastAfterburnerDisabledRtpc; // Offset: 0x298
    GlobalResourceAudio thrusterOnOneShot; // Offset: 0x2b8
    AudioRtpc timeSinceLastThrusterOnRtpc; // Offset: 0x2d8
    GlobalResourceAudio thrusterOffOneShot; // Offset: 0x2f8
    AudioRtpc timeSinceLastThrusterOffRtpc; // Offset: 0x318
    float thrusterFireStartedThreshold; // Offset: 0x338
    bool avoidThrusterFireOneShotsOnLowRankShips; // Offset: 0x33c
    uint8_t _pad_4[0x3]; // Offset: 0x33d
    GlobalResourceAudio misfireLoopStart; // Offset: 0x340
    GlobalResourceAudio misfireLoopStop; // Offset: 0x360
    GlobalResourceAudio misfireOnOneshot; // Offset: 0x380
    AudioRtpc timeSinceLastMisfireOnRtpc; // Offset: 0x3a0
    GlobalResourceAudio misfireOffOneshot; // Offset: 0x3c0
    AudioRtpc timeSinceLastMisfireOffRtpc; // Offset: 0x3e0
    bool avoidMisfireOneShotsOnLowRankShips; // Offset: 0x400
    uint8_t _pad_5[0x7]; // Offset: 0x401
    DynArray_ThrusterOutputToRtpcList* thrustersOutputsToRtpcs; // Offset: 0x408 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x410
    AudioRtpc thrusterDegradationRtpc; // Offset: 0x438
    bool isMultiposition; // Offset: 0x458
    uint8_t _pad_7[0x7]; // Offset: 0x459
    CryStringT* boneName; // Offset: 0x460
    uint8_t _pad_8[0x8]; // Offset: 0x468
    Ang3 offsetRotation; // Offset: 0x470
    Vec3 offsetTranslation; // Offset: 0x488
    bool updateLocalPosition; // Offset: 0x4a0
    uint8_t _pad_9[0x3]; // Offset: 0x4a1
    float vibrationModifier; // Offset: 0x4a4
    AudioSwitch manufacturerAudioSwitch; // Offset: 0x4a8
    AudioSwitch sizeAudioSwitch; // Offset: 0x4e0
    AudioSwitch classAudioSwitch; // Offset: 0x518
    AudioSwitch thrusterPanningAudioSwitch; // Offset: 0x550
    float motionToThrustCrossover; // Offset: 0x588
    uint8_t _pad_10[0x4]; // Offset: 0x58c
};

// Original name: ThrusterGimbalState
// Size: 0x98
// VTable: 0x149a1bf28
struct ThrusterGimbalState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState interactionState; // Offset: 0x8
    ThrusterGimbal gimbalParams; // Offset: 0x18
};

// Original name: TintPalette
// Size: 0x130
// VTable: 0x149afd460
struct TintPalette {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TintPalette* children; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    CryStringT* name; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    bool inheritsParams; // Offset: 0x48
    uint8_t _pad_3[0x7]; // Offset: 0x49
    TintEntry entryA; // Offset: 0x50
    TintEntry entryB; // Offset: 0x80
    TintEntry entryC; // Offset: 0xb0
    SRGB8 glassColor; // Offset: 0xe0
    CryStringT* decalTexture; // Offset: 0xf0
    uint8_t _pad_4[0x8]; // Offset: 0xf8
    SRGB8 decalColorR; // Offset: 0x100
    SRGB8 decalColorG; // Offset: 0x110
    SRGB8 decalColorB; // Offset: 0x120
};

// Original name: TintPaletteRef
// Size: 0x30
// VTable: 0x149afd568
struct TintPaletteRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TintPaletteTree RootRecord; // Offset: 0x8
    CryStringT* ChildPath; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
};

// Original name: TintPaletteTree
// Size: 0x150
// VTable: 0x149afd4e8
struct TintPaletteTree {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TintPalette root; // Offset: 0x8
    TintPaletteTree templateTree; // Offset: 0x138
};

// Original name: TransitCarriageAudio
// Size: 0x128
// VTable: 0x1499d8258
struct TransitCarriageAudio {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio startTriggerID; // Offset: 0x8
    GlobalResourceAudio stopTriggerID; // Offset: 0x28
    GlobalResourceAudio startTriggerIDOneShot; // Offset: 0x48
    GlobalResourceAudio stopTriggerIDOneShot; // Offset: 0x68
    GlobalResourceAudio stoppingTriggerID; // Offset: 0x88
    float maxStoppingTime; // Offset: 0xa8
    uint8_t _pad_1[0x4]; // Offset: 0xac
    AudioRtpc speedRTPC; // Offset: 0xb0
    AudioRtpc turnRTPC; // Offset: 0xd0
    float turnRTPCScaler; // Offset: 0xf0
    uint8_t _pad_2[0x4]; // Offset: 0xf4
    DynArray_TransitNodeDialogueContext* dialogueContexts; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x100
};

// Original name: TransitCarriageEffects
// Size: 0x20
// VTable: 0x1499d82b0
struct TransitCarriageEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag inTransitTag; // Offset: 0x8
};

// Original name: TransitCarriageParams
// Size: 0x1e0
// VTable: 0x1499d84f0
struct TransitCarriageParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceObjectContainer defaultInteriorOC; // Offset: 0x18
    TransitCarriageAudio audio; // Offset: 0x30
    TransitCarriageEffects effects; // Offset: 0x158
    bool hasExternalAnimations; // Offset: 0x178
    uint8_t _pad_1[0x3]; // Offset: 0x179
    float animationLength; // Offset: 0x17c
    CryStringT* fragment; // Offset: 0x180
    uint8_t _pad_2[0x8]; // Offset: 0x188
    CryStringT* fragmentArrived; // Offset: 0x190
    uint8_t _pad_3[0x8]; // Offset: 0x198
    CryStringT* fragmentArriving; // Offset: 0x1a0
    uint8_t _pad_4[0x8]; // Offset: 0x1a8
    CryStringT* fragmentDeparting; // Offset: 0x1b0
    uint8_t _pad_5[0x8]; // Offset: 0x1b8
    CryStringT* fragmentDeparted; // Offset: 0x1c0
    uint8_t _pad_6[0x8]; // Offset: 0x1c8
    bool causesCertainDeath; // Offset: 0x1d0
    uint8_t _pad_7[0x3]; // Offset: 0x1d1
    float collisionDamage; // Offset: 0x1d4
    bool matchSplineOrientation; // Offset: 0x1d8
    uint8_t _pad_8[0x7]; // Offset: 0x1d9
};

// Original name: TransitManagerParams
// Size: 0x120
// VTable: 0x1499d8f70
struct TransitManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    EntityClassDefinition carriageType; // Offset: 0x18
    CLocIdentifier* carriageDisplayTypeId; // Offset: 0x30
    GlobalResourceObjectContainer carriageInterior; // Offset: 0x38
    TagsDNFTerm tagFilter; // Offset: 0x50
    float carriageWaitTime; // Offset: 0xb8
    float carriageDoorTimeout; // Offset: 0xbc
    float carriageAcceleration; // Offset: 0xc0
    float idealTimeBetweenArrivals; // Offset: 0xc4
    float pauseDistance; // Offset: 0xc8
    bool forceStreamableTransit; // Offset: 0xcc
    bool forceCarriageAttachToParent; // Offset: 0xcd
    bool onByDefault; // Offset: 0xce
    bool enabledForAI; // Offset: 0xcf
    bool sortDestinationsByName; // Offset: 0xd0
    bool sortDestinationsByPriority; // Offset: 0xd1
    bool reverseDisplayIndexOrder; // Offset: 0xd2
    bool ignoreDoorProximity; // Offset: 0xd3
    bool carriageDoorOpenByDefault; // Offset: 0xd4
    uint8_t _pad_1[0x3]; // Offset: 0xd5
    float doorFindDistance; // Offset: 0xd8
    bool automateTransit; // Offset: 0xdc
    bool updateDestinationsForDistantTrains; // Offset: 0xdd
    bool persistDestinationEnabledState; // Offset: 0xde
    bool allowOneDestination; // Offset: 0xdf
    CryStringT* turnOnInteractionName; // Offset: 0xe0
    uint8_t _pad_2[0x8]; // Offset: 0xe8
    CryStringT* turnOffInteractionName; // Offset: 0xf0
    uint8_t _pad_3[0x8]; // Offset: 0xf8
    int8_t displayIndexOffset; // Offset: 0x100
    uint8_t _pad_4[0x7]; // Offset: 0x101
    SCItemManufacturer manufacturer; // Offset: 0x108
};

// Original name: TransitNavigationLink
// Size: 0x68
// VTable: 0x1499ece70
struct TransitNavigationLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkValidForAgentType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    NavigationLinkCostCustomization costMultiplierSetup; // Offset: 0x18
    ARDataType linkingType; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    UsableUseChannelInstance useChannel; // Offset: 0x58
};

// Original name: TransitNodeDialogueContext
// Size: 0x30
// VTable: 0x1499d8098
struct TransitNodeDialogueContext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* triggerName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DialogueContext dialogueContext; // Offset: 0x18
};

// Original name: TransportDestinationParams
// Size: 0x80
// VTable: 0x1499d8ff0
struct TransportDestinationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    TagsDNFTerm tagFilter; // Offset: 0x18
};

// Original name: TransportGatewayParams
// Size: 0x80
// VTable: 0x1499d9050
struct TransportGatewayParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    TagsDNFTerm tagFilter; // Offset: 0x18
};

// Original name: TraversalCostConditionTags
// Size: 0x78
// VTable: 0x14997f870
struct TraversalCostConditionTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TagsDNF tags; // Offset: 0x8
    float costMultiplier; // Offset: 0x70
    bool blocksTraversability; // Offset: 0x74
    uint8_t _pad_1[0x3]; // Offset: 0x75
};

// Original name: TraversalCostConfig
// Size: 0x50
// VTable: 0x14997f9c8
struct TraversalCostConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    DynArray_CostModifierPerAgentType* costs; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: TrespassAreaComponentParams
// Size: 0x58
// VTable: 0x149968468
struct TrespassAreaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SecurityClearanceConditions securityClearanceConditions; // Offset: 0x18
    bool isFelony; // Offset: 0x50
    bool filterOnFootOrEVA; // Offset: 0x51
    bool filterInShip; // Offset: 0x52
    bool filterInDockedShip; // Offset: 0x53
    bool filterInGroundVehicle; // Offset: 0x54
    uint8_t _pad_1[0x3]; // Offset: 0x55
};

// Original name: TriggerConditionDataDef
// Size: 0x38
// VTable: 0x149a8a4c0
struct TriggerConditionDataDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TriggerConditionDef* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: TriggerConditionDef
// Size: 0xf0
// VTable: 0x149a8a460
struct TriggerConditionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool enabled; // Offset: 0x28
    bool inverted; // Offset: 0x29
    uint8_t _pad_3[0x6]; // Offset: 0x2a
    Tag tag; // Offset: 0x30
    DynArray_TriggerSubConditionDef* subconditions; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x50
    SConversationIconParams iconParams; // Offset: 0x78
};

// Original name: TriggerSubConditionS42StatsDef
// Size: 0x58
// VTable: 0x149a89d10
struct TriggerSubConditionS42StatsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statType; // Offset: 0x8
    ARDataType playerState; // Offset: 0xc
    CryStringT* comparisonType; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    float statValue; // Offset: 0x20
    bool useRelativeOffset; // Offset: 0x24
    bool useCooldown; // Offset: 0x25
    uint8_t _pad_2[0x2]; // Offset: 0x26
    float cooldownTime; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
    CryStringT* uniqueEntityClassGUID; // Offset: 0x30
    uint8_t _pad_4[0x8]; // Offset: 0x38
    Tag tag; // Offset: 0x40
};

// Original name: UIAudioComponentEntityComponentParams
// Size: 0x120
// VTable: 0x1499d3f40
struct UIAudioComponentEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    UIAudioDefinition UIAudioDef; // Offset: 0x18
    DynArray_UIAudioManufacturer* UIAudioManufacturers; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
    EntityClassDefinition useEntityClass; // Offset: 0x60
    UIAudioComponent_Offset offset; // Offset: 0x78
    GlobalResourceAudio videoAudioPlayTrigger; // Offset: 0x88
    GlobalResourceAudio videoAudioStopTrigger; // Offset: 0xa8
    GlobalResourceAudio videoAudioPauseTrigger; // Offset: 0xc8
    GlobalResourceAudio videoAudioResumeTrigger; // Offset: 0xe8
    DialogueContext dialogueContext; // Offset: 0x108
};

// Original name: UIAudioDefinition
// Size: 0x110
// VTable: 0x1499d3cc0
struct UIAudioDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_UIAudioEvent* events; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_UIAudioParameter* parameters; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    uint8_t* dialogueEvents; // Offset: 0x68 // Pointer to array of opaque structs
    uint8_t _pad_3[0xa0]; // Offset: 0x70
};

// Original name: UIAudioEvent
// Size: 0x40
// VTable: 0x1499d3b98
struct UIAudioEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    GlobalResourceAudio audioTrigger; // Offset: 0x20
};

// Original name: UIAudioManufacturer
// Size: 0x38
// VTable: 0x1499d3da8
struct UIAudioManufacturer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag AudioManufacturerTag; // Offset: 0x8
    UIAudioDefinition AudioDef; // Offset: 0x20
};

// Original name: UIAudioParameter
// Size: 0x40
// VTable: 0x1499d3c18
struct UIAudioParameter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    AudioRtpc rtpc; // Offset: 0x20
};

// Original name: UIBuildingBlocksEntityComponentParams
// Size: 0x80
// VTable: 0x149a163b8
struct UIBuildingBlocksEntityComponentParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    DynArray_BuildingBlocksLayer* layers; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    bool enableFullScreenMouse; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
    BuildingBlocks_Style defaultStyle; // Offset: 0x58
    BuildingBlocks_PreviewScreenBase defaultPreviewScene; // Offset: 0x70
};

// Original name: UICanvasDecalDescriptorEntityComponentParams
// Size: 0x30
// VTable: 0x1499935f0
struct UICanvasDecalDescriptorEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    BuildingBlocks_Canvas canvas; // Offset: 0x18
};

// Original name: UIConfig
// Size: 0xb8
// VTable: 0x149aa6a50
struct UIConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Flash_Palette DamageColours; // Offset: 0x8
    UIStateColor ColorStates; // Offset: 0x18
    InnerThought_Config InnerThought; // Offset: 0x28
    FPSReticle_Config FPSReticleConfig; // Offset: 0x38
    EVAReticle_Config EVAReticleConfig; // Offset: 0x48
    PlayerChoice_IMConfig playerChoiceIMConfig; // Offset: 0x58
    VisorHUD_Config visorHUDConfig; // Offset: 0x70
    PlayerChoice_PITConfig playerChoicePITConfig; // Offset: 0x88
    FlightHUDUIView_Config flightHUDUIViewConfig; // Offset: 0xa0
};

// Original name: UIDataBankDisplay3DParams
// Size: 0x2f8
// VTable: 0x149aaa2a8
struct UIDataBankDisplay3DParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT offset; // Offset: 0x8
    double renderRadius; // Offset: 0x60
    GlobalResourceMaterial renderNodeMaterial; // Offset: 0x68
    UI3DDisplayInputParams inputParams; // Offset: 0x80
    UIWorldDisplayHolographicSettings holographicSettings; // Offset: 0xd0
    UIWorldDisplayRotationModeParams rotationModeSettings; // Offset: 0xe0
    bool centerToSelf; // Offset: 0x100
    uint8_t _pad_1[0x3]; // Offset: 0x101
    float focusChangeDuration; // Offset: 0x104
    float extraZoomScale; // Offset: 0x108
    float childlessExtraZoomScale; // Offset: 0x10c
    float youAreHereZoomDiameter; // Offset: 0x110
    float maxZoomScalingPerUpdate; // Offset: 0x114
    UIWorldDisplayAutoRotationParams autoRotationSettings; // Offset: 0x118
    UIWorldDisplaySoundParams soundSettings; // Offset: 0x128
    float loadoutDummyCameraOffset; // Offset: 0x138
    uint8_t _pad_2[0x4]; // Offset: 0x13c
    bool showSpaceDust; // Offset: 0x140
    uint8_t _pad_3[0x7]; // Offset: 0x141
    double collapseDistance; // Offset: 0x148
    float labelScale; // Offset: 0x150
    float labelOffsetMultiplier; // Offset: 0x154
    uint32_t overlaySize; // Offset: 0x158
    float maxRelativeHideSize; // Offset: 0x15c
    float minimumDisplaySizeMultiplier; // Offset: 0x160
    uint8_t _pad_4[0x4]; // Offset: 0x164
    UIDataBankDisplay3DInterpolateParams interpolateSettings; // Offset: 0x168
    Vec2 orbitLineUVStart; // Offset: 0x210
    Vec2 orbitLineUVSize; // Offset: 0x220
    SRGBA8 overlayGrayedOutColor; // Offset: 0x230
    SRGBA8 overlayDefaultColor; // Offset: 0x240
    SRGBA8 overlayHighlightedColor; // Offset: 0x250
    SRGBA8 overlaySelectedColor; // Offset: 0x260
    SRGBA8 overlaySelectedHighlightedColor; // Offset: 0x270
    float orbitLineWidth; // Offset: 0x280
    uint8_t _pad_5[0x4]; // Offset: 0x284
    SRGBA8 orbitLineDefaultColor; // Offset: 0x288
    SRGBA8 orbitLineHighlightedColor; // Offset: 0x298
    UIDataBankDisplay3DSpaceDustParams spaceDustSettings; // Offset: 0x2a8
    GlobalResourceGeometry backdropGeometry; // Offset: 0x2c0
    GlobalResourceMaterial backdropMaterial; // Offset: 0x2d8
    float backdropScale; // Offset: 0x2f0
    uint8_t _pad_6[0x4]; // Offset: 0x2f4
};

// Original name: UIGraph_BuildingBlocksContextComponent
// Size: 0x28
// VTable: 0x149a58148
struct UIGraph_BuildingBlocksContextComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Canvas canvas; // Offset: 0x8
    bool isSystemViewInstance; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: UIGraph_DockingGroup
// Size: 0x80
// VTable: 0x149aa7338
struct UIGraph_DockingGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CtxGraph_Context* contexts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    CryStringT* name; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    DynArray_UIGraph_Group* childGroups; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    bool indexContexts; // Offset: 0x78
    uint8_t _pad_4[0x7]; // Offset: 0x79
};

// Original name: UIGraph_Group
// Size: 0x80
// VTable: 0x149aa7330
struct UIGraph_Group {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CtxGraph_Context* contexts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    CryStringT* name; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    DynArray_UIGraph_Group* childGroups; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    bool indexContexts; // Offset: 0x78
    uint8_t _pad_4[0x7]; // Offset: 0x79
};

// Original name: UIGraph_ItemPreviewContextComponentDef
// Size: 0x28
// VTable: 0x149a16448
struct UIGraph_ItemPreviewContextComponentDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LoadoutEditorComponentParams loadoutEditorComponentParams; // Offset: 0x8
    int32_t maxPreviewsLoaded; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: UIGraph_KioskMainComponent
// Size: 0x620
// VTable: 0x149a582d0
struct UIGraph_KioskMainComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool buyMode; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* name; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    SItemPortDef categoryItemPort; // Offset: 0x20
};

// Original name: UIGraph_LoadoutEditorComponent
// Size: 0x58
// VTable: 0x149a580c8
struct UIGraph_LoadoutEditorComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LoadoutEditorComponentParams loadoutEditorComponentParams; // Offset: 0x8
    EntityClassDefinition geometryRecord; // Offset: 0x20
    CryStringT* entityClipName; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
    Vec2 entityClipDimensions; // Offset: 0x48
};

// Original name: UIGraph_LoadoutItemPortDockContextComponent
// Size: 0x20
// VTable: 0x149a309b0
struct UIGraph_LoadoutItemPortDockContextComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LoadoutEditorComponentParams loadoutEditorComponentParams; // Offset: 0x8
};

// Original name: UIGraph_SMLoadoutContextComponent
// Size: 0x20
// VTable: 0x149a581a0
struct UIGraph_SMLoadoutContextComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LoadoutEditorComponentParams loadoutEditorComponentParams; // Offset: 0x8
};

// Original name: UIMapEntityComponentParams
// Size: 0xf8
// VTable: 0x149a16190
struct UIMapEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    MapDisplayParamsGalacticMap galacticMapParams; // Offset: 0x18
    MapDisplayParamsStarMap starMapParams; // Offset: 0x28
    MapDisplayParamsInteriorMap interiorMapParams; // Offset: 0x38
    MapDisplayOverrideParams displayParams; // Offset: 0x48
    bool startEnabled; // Offset: 0x90
    uint8_t _pad_1[0x3]; // Offset: 0x91
    ARDataType frameType; // Offset: 0x94
    float aspectRatio; // Offset: 0x98
    int32_t viewDistance; // Offset: 0x9c
    float viewAngle; // Offset: 0xa0
    uint8_t _pad_2[0x4]; // Offset: 0xa4
    CryStringT* displayMaterialPath; // Offset: 0xa8
    uint8_t _pad_3[0x8]; // Offset: 0xb0
    CryStringT* mapBindingsNamespace; // Offset: 0xb8
    uint8_t _pad_4[0x8]; // Offset: 0xc0
    MarkerDeclutteringCullingOrder declutteringParams; // Offset: 0xc8
    mobiGlasApp linkedContractApp; // Offset: 0xe0
};

// Original name: UIOwnerEntityComponentParams
// Size: 0xd0
// VTable: 0x1499f15f8
struct UIOwnerEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool startOpen; // Offset: 0x18
    bool areScreens3D; // Offset: 0x19
    bool areSounds3D; // Offset: 0x1a
    bool hasActions; // Offset: 0x1b
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    UIElement element; // Offset: 0x20
    CryStringT* domainName; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    CtxGraph graph; // Offset: 0x48
    float loadDistance; // Offset: 0x60
    uint8_t _pad_3[0x4]; // Offset: 0x64
    CryStringT* moviePath; // Offset: 0x68
    uint8_t _pad_4[0x8]; // Offset: 0x70
    CryStringT* variantName; // Offset: 0x78
    uint8_t _pad_5[0x8]; // Offset: 0x80
    CryStringT* invariantName; // Offset: 0x88
    uint8_t _pad_6[0x8]; // Offset: 0x90
    bool movieAutoPlay; // Offset: 0x98
    bool loopMovie; // Offset: 0x99
    bool forceFlashColourCorrection; // Offset: 0x9a
    bool ignoreTrackviewUnloadRequests; // Offset: 0x9b
    bool reflectLocalStateMachine; // Offset: 0x9c
    bool reflectLinkedStateMachines; // Offset: 0x9d
    uint8_t _pad_7[0x2]; // Offset: 0x9e
    DynArray_Tag* visibiltyTags; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0xa8
};

// Original name: UIRenderToTextureEntityComponentParams
// Size: 0xa0
// VTable: 0x149993e58
struct UIRenderToTextureEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* fallbackTextureOnOnload; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* compositeMaterialName; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    Tag pickableTag; // Offset: 0x38
    GrabCameraControlParams grabCameraControlParams; // Offset: 0x50
    UIRenderToTextureTarget secondaryTarget; // Offset: 0x68
    ARDataType renderType; // Offset: 0x78
    ARDataType directRenderStage; // Offset: 0x79
    ARDataType pickableCollision; // Offset: 0x7a
    uint8_t _pad_3[0x1]; // Offset: 0x7b
    float aspectRatioOverride; // Offset: 0x7c
    float fieldOfView; // Offset: 0x80
    float nearClip; // Offset: 0x84
    float farClip; // Offset: 0x88
    float interactionDistance; // Offset: 0x8c
    float transparentListDepthBias; // Offset: 0x90
    bool hideRenderNodeOnUnload; // Offset: 0x94
    bool renderFlashBeforeCamera; // Offset: 0x95
    uint8_t _pad_4[0x2]; // Offset: 0x96
    ARDataType runtimeImageSource; // Offset: 0x98
    bool runtimeImageToAggregate; // Offset: 0x9c
    uint8_t _pad_5[0x3]; // Offset: 0x9d
};

// Original name: UIWorldDisplay3DParams
// Size: 0x140
// VTable: 0x149aa9da0
struct UIWorldDisplay3DParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT offset; // Offset: 0x8
    double renderRadius; // Offset: 0x60
    GlobalResourceMaterial renderNodeMaterial; // Offset: 0x68
    UI3DDisplayInputParams inputParams; // Offset: 0x80
    UIWorldDisplayHolographicSettings holographicSettings; // Offset: 0xd0
    UIWorldDisplayRotationModeParams rotationModeSettings; // Offset: 0xe0
    bool centerToSelf; // Offset: 0x100
    uint8_t _pad_1[0x3]; // Offset: 0x101
    float focusChangeDuration; // Offset: 0x104
    float extraZoomScale; // Offset: 0x108
    float childlessExtraZoomScale; // Offset: 0x10c
    float youAreHereZoomDiameter; // Offset: 0x110
    float maxZoomScalingPerUpdate; // Offset: 0x114
    UIWorldDisplayAutoRotationParams autoRotationSettings; // Offset: 0x118
    UIWorldDisplaySoundParams soundSettings; // Offset: 0x128
    float loadoutDummyCameraOffset; // Offset: 0x138
    uint8_t _pad_2[0x4]; // Offset: 0x13c
};

// Original name: UIWorldDisplayInputSoundParams
// Size: 0x80
// VTable: 0x149aa9a60
struct UIWorldDisplayInputSoundParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    UIWorldDisplayInputSoundRtpcParam rtpcParamX; // Offset: 0x8
    UIWorldDisplayInputSoundRtpcParam rtpcParamY; // Offset: 0x38
    Tag eventTag; // Offset: 0x68
};

// Original name: UIWorldDisplaySoundParams
// Size: 0x68
// VTable: 0x149aa9b10
struct UIWorldDisplaySoundParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_UIWorldDisplayInputSoundParams* inputSounds; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Tag highlightChangeEventTag; // Offset: 0x38
    Tag selectionChangeEventTag; // Offset: 0x50
};

// Original name: UnitTest
// Size: 0x568
// VTable: 0x149a89168
struct UnitTest {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TestAtomics atomics; // Offset: 0x8
    TestArrays arrays; // Offset: 0x58
    UnitTest reference; // Offset: 0x3c0
    TestAtomics weakptr; // Offset: 0x3d8
    TestAtomics weakptrnull; // Offset: 0x3e8
    TestAtomics strongptr; // Offset: 0x3f8
    TestAtomics strongptrnull; // Offset: 0x408
    UnitTest_Inheritance inheritance; // Offset: 0x418
    CLocIdentifier* locale; // Offset: 0x460
    RGB8 colour; // Offset: 0x468
    BezierCurve curve; // Offset: 0x478
    uint8_t baseOverrideDefault[0x10]; // Opaque struct field (type resolution failed) // Offset: 0x508
    UnitTestSubRecord recordReference; // Offset: 0x518
    DynArray_UnitTestSubRecord* embeddedRecordArray; // Offset: 0x530 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x538
};

// Original name: UsableAlignmentSlot
// Size: 0x270
// VTable: 0x149a92380
struct UsableAlignmentSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* id; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* name; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool available; // Offset: 0x28
    bool canPlayerUse; // Offset: 0x29
    uint8_t _pad_3[0x6]; // Offset: 0x2a
    DynArray_SInteractionPointParams* interactionPoints; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
    CryStringT* fragmentTag; // Offset: 0x60
    uint8_t _pad_5[0x8]; // Offset: 0x68
    DynArray_Tag* optionalGameTags; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x78
    CryStringT* slottedFragmentTag; // Offset: 0xa0
    uint8_t _pad_7[0x10]; // Offset: 0xa8
    CryStringT* helperName; // Offset: 0xb8
    uint8_t _pad_8[0x8]; // Offset: 0xc0
    QuatT relativeTransform; // Offset: 0xc8
    bool entityRelativeRotation; // Offset: 0x120
    bool entityRelativeTranslation; // Offset: 0x121
    uint8_t _pad_9[0x2]; // Offset: 0x122
    ARDataType linkMode; // Offset: 0x124
    ARDataType stance; // Offset: 0x128
    bool useHandIK; // Offset: 0x12c
    bool useADIK; // Offset: 0x12d
    uint8_t _pad_10[0x2]; // Offset: 0x12e
    SUsableViewParams viewParams; // Offset: 0x130
    SUsableEnterTransitionParams enterParams; // Offset: 0x148
    SUsableExitTransitionParams exitParams; // Offset: 0x1b0
    SUsableIdleParams usableIdleParams; // Offset: 0x228
    SUsableAttachFlagParams additionalAttachmentFlags; // Offset: 0x260
};

// Original name: UsableArchetype
// Size: 0x60
// VTable: 0x149a91680
struct UsableArchetype {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_UseChannelArchetype* useChannels; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    CryStringT* name; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    Tag tag; // Offset: 0x48
};

// Original name: UsableArchetypes
// Size: 0x38
// VTable: 0x149a916e0
struct UsableArchetypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_UsableArchetype* archetypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: UsableChannelInputAction
// Size: 0x48
// VTable: 0x149a91228
struct UsableChannelInputAction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputAction inputAction; // Offset: 0x8
    SSharedInteractionParams interactionOnAction; // Offset: 0x38
};

// Original name: UsableChannelInputActionGroup
// Size: 0x60
// VTable: 0x149a91508
struct UsableChannelInputActionGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag tag; // Offset: 0x8
    CLocIdentifier* hintDescription; // Offset: 0x20
    ARDataType activationMode; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    DynArray_UsableChannelInputAction* actions; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
};

// Original name: UsableChannelInputAction_ConsumeWithUsable
// Size: 0xf0
// VTable: 0x149a91430
struct UsableChannelInputAction_ConsumeWithUsable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputAction inputAction; // Offset: 0x8
    SSharedInteractionParams interactionOnAction; // Offset: 0x38
    CryStringT* consumableItemPortTag; // Offset: 0x48
    uint8_t _pad_1[0x8]; // Offset: 0x50
    CryStringT* cutleryItemPortTag; // Offset: 0x58
    uint8_t _pad_2[0x8]; // Offset: 0x60
    bool searchOnSocketUsable; // Offset: 0x68
    uint8_t _pad_3[0x7]; // Offset: 0x69
    CryStringT* usableItemPortTag; // Offset: 0x70
    uint8_t _pad_4[0x8]; // Offset: 0x78
    ARDataType usableItemType; // Offset: 0x80
    ARDataType usableItemSubType; // Offset: 0x84
    TagsDNFTerm usableItemTags; // Offset: 0x88
};

// Original name: UsableChannelInputAction_ControlInteractive
// Size: 0x58
// VTable: 0x149a91280
struct UsableChannelInputAction_ControlInteractive {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputAction inputAction; // Offset: 0x8
    SSharedInteractionParams interactionOnAction; // Offset: 0x38
    ControlInteractiveVariable controlVariable; // Offset: 0x48
};

// Original name: UsableChannelInputAction_TriggerSequence
// Size: 0x58
// VTable: 0x149a912e0
struct UsableChannelInputAction_TriggerSequence {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputAction inputAction; // Offset: 0x8
    SSharedInteractionParams interactionOnAction; // Offset: 0x38
    SSequencerDefSequenceParams playSequence; // Offset: 0x48
};

// Original name: UsableItemPort
// Size: 0x98
// VTable: 0x149a92808
struct UsableItemPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x8
    CryStringT* itemPortFragmentTag; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    TagsDNF conditionTags; // Offset: 0x28
    bool recurseThroughInventoryWhenFindingItemProvider; // Offset: 0x90
    uint8_t _pad_2[0x7]; // Offset: 0x91
};

// Original name: UsableSlottingAlignmentSlot
// Size: 0x18
// VTable: 0x149a92b60
struct UsableSlottingAlignmentSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AlignmentSlotBase alignmentSlot; // Offset: 0x8
};

// Original name: UsableSlottingReferenceItemPort
// Size: 0x18
// VTable: 0x149a92aa0
struct UsableSlottingReferenceItemPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x8
};

// Original name: UsableSlottingReferenceLoadoutEntry
// Size: 0x18
// VTable: 0x149a92b00
struct UsableSlottingReferenceLoadoutEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortLoadoutEntryParams loadoutEntry; // Offset: 0x8
};

// Original name: UsableSlottingSetup
// Size: 0x98
// VTable: 0x149a92c60
struct UsableSlottingSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    UsableSlottingReferenceElementBase routingElement; // Offset: 0x18
    DynArray_UsableAlignmentSlot* orderedAlignmentSlotsToBeOverriden; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    DynArray_UsableUseSlot* useSlots; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
    CryStringT* fragmentTagsForSlot; // Offset: 0x88
    uint8_t _pad_4[0x8]; // Offset: 0x90
};

// Original name: UsableStateModifier
// Size: 0x58
// VTable: 0x1499c24b0
struct UsableStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    UsableUseChannelInstance useChannel; // Offset: 0x8
    SInteractionState onStartUsing; // Offset: 0x18
    SInteractionState onIdle; // Offset: 0x28
    SInteractionState onStopUsing; // Offset: 0x38
    SInteractionState onDormant; // Offset: 0x48
};

// Original name: UsableUseChannelInstance
// Size: 0x1c0
// VTable: 0x149a92738
struct UsableUseChannelInstance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    UseChannelArchetype useChannelArchetype; // Offset: 0x8
    DynArray_AlignmentSlotBase* alignmentSlots; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    InteractionConditionList conditionList; // Offset: 0x50
    DynArray_UsableUseChannelInstance* useChannelInstancesToEnable; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x68
    DynArray_UsableUseChannelInstance* useChannelInstancesToDisable; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x98
    SSharedInteractionParams interaction; // Offset: 0xc0
    bool triggerInteractionOnSlottedUsables; // Offset: 0xd0
    uint8_t _pad_4[0x3]; // Offset: 0xd1
    ARDataType stance; // Offset: 0xd4
    bool isEnabled; // Offset: 0xd8
    bool isAvailableOnlyForRouting; // Offset: 0xd9
    bool isAvailableWhenHoldingTheUsable; // Offset: 0xda
    bool shouldValidateExitAnimations; // Offset: 0xdb
    uint8_t _pad_5[0x4]; // Offset: 0xdc
    CryStringT* fragmentTag; // Offset: 0xe0
    uint8_t _pad_6[0x8]; // Offset: 0xe8
    SSequencerDefSequenceParams preparationSequence; // Offset: 0xf0
    DynArray_Tag* tagsToAddOnEnter; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x108
    DynArray_Tag* tagsToRemoveOnEnter; // Offset: 0x130 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x138
    DynArray_Tag* tagsToAddOnExit; // Offset: 0x160 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x168
    DynArray_Tag* tagsToRemoveOnExit; // Offset: 0x190 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x198
};

// Original name: UsableUseSlot
// Size: 0x158
// VTable: 0x149a92a40
struct UsableUseSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool available; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_UsableUseChannelInstance* useChannelInstances; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    DynArray_UsableItemPort* usableItemPorts; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x58
    DynArray_UsableUseSlot* useSlotsToDisable; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x88
    ARDataType useSlotReenablePoint; // Offset: 0xb0
    ARDataType stance; // Offset: 0xb4
    QuatT relativeTransform; // Offset: 0xb8
    CryStringT* additionalFragmentTags; // Offset: 0x110
    uint8_t _pad_6[0x8]; // Offset: 0x118
    DynArray_Tag* optionalGameTags; // Offset: 0x120 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x128
    bool isScoochable; // Offset: 0x150
    bool alignWithGravity; // Offset: 0x151
    bool syncAnimationWithUser; // Offset: 0x152
    uint8_t _pad_8[0x5]; // Offset: 0x153
};

// Original name: UseChannelArchetype
// Size: 0x68
// VTable: 0x149a915d8
struct UseChannelArchetype {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* onItemPortOccupiedFragmentTag; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    Tag tag; // Offset: 0x38
    uint8_t _pad_4[0x18]; // Offset: 0x50
};

// Original name: UserArrayElement
// Size: 0x58
// VTable: 0x149993f60
struct UserArrayElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t intVar; // Offset: 0x8
    float floatVar; // Offset: 0xc
    CryStringT* stringVar; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    CLocIdentifier* locVar; // Offset: 0x20
    DynArray_UserArrayElement* array; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: UserArraysComponentParams
// Size: 0x90
// VTable: 0x149994038
struct UserArraysComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* name; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    int32_t itemsPerPage; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    DynArray_UserArrayElement* array; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
    DynArray_BuildingBlocks_StaticVariableArray* alternateArray; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x68
};

// Original name: VaultNavigationLink
// Size: 0x90
// VTable: 0x1499ece60
struct VaultNavigationLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkValidForAgentType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    NavigationLinkCostCustomization costMultiplierSetup; // Offset: 0x18
    ARDataType linkingType; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    UsableUseChannelInstance useChannel; // Offset: 0x58
    NavLinkLocation topAnchor; // Offset: 0x68
    CryStringT* mannequinTags; // Offset: 0x78
    uint8_t _pad_3[0x8]; // Offset: 0x80
    float motionWarpSearchDistance; // Offset: 0x88
    uint8_t _pad_4[0x4]; // Offset: 0x8c
};

// Original name: VehicleComponentParams
// Size: 0x238
// VTable: 0x1499ab218
struct VehicleComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool maelstromVehicle; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    CryStringT* vehicleDefinition; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    CryStringT* modification; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
    ARDataType movementClass; // Offset: 0x40
    bool dogfightEnabled; // Offset: 0x44
    bool allowSoftDestruction; // Offset: 0x45
    bool ignoreHostility; // Offset: 0x46
    bool unmoveable; // Offset: 0x47
    bool isGravlevVehicle; // Offset: 0x48
    uint8_t _pad_4[0x3]; // Offset: 0x49
    ARDataType vehicleElevatorBehavior; // Offset: 0x4c
    float vehicleHullDamageNormalizationValue; // Offset: 0x50
    bool isAugmentedRealityVehicle; // Offset: 0x54
    uint8_t _pad_5[0x3]; // Offset: 0x55
    GlobalResourceMaterial augmentedRealityMaterial; // Offset: 0x58
    SVehicleAiDamageModifiers aiDamageModifiers; // Offset: 0x70
    float emergencyStatusDamageThreshold; // Offset: 0x88
    float emergencyStatusChargeThreshold; // Offset: 0x8c
    Vec3 maxBoundingBoxSize; // Offset: 0x90
    Vec2 cargoEntrySize; // Offset: 0xa8
    VehicleAIPropertiesParams aiProperties; // Offset: 0xb8
    SCItemManufacturer manufacturer; // Offset: 0xc8
    int32_t crewSize; // Offset: 0xe0
    uint8_t _pad_6[0x4]; // Offset: 0xe4
    CLocIdentifier* vehicleRole; // Offset: 0xe8
    VehicleRole vehicleRoleRef; // Offset: 0xf0
    CLocIdentifier* vehicleCareer; // Offset: 0x108
    VehicleCareer vehicleCareerRef; // Offset: 0x110
    CLocIdentifier* vehicleName; // Offset: 0x128
    CLocIdentifier* vehicleDescription; // Offset: 0x130
    CryStringT* vehicleImagePath; // Offset: 0x138
    uint8_t _pad_7[0x8]; // Offset: 0x140
    VehicleLandingGearSystem landingSystem; // Offset: 0x148
    DynArray_SVehicleObjectContainerParams* objectContainers; // Offset: 0x160 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0x168
    SVehiclePhysicsGridParams physicsGrid; // Offset: 0x190
    SDFSetParams shieldSDFParams; // Offset: 0x1f0
    SCItemUIView_DashboardCanvasDef DashboardCanvasConfig; // Offset: 0x200
    InventoryContainer inventoryContainerParams; // Offset: 0x218
    uint8_t _pad_9[0x8]; // Offset: 0x230
};

// Original name: VehicleEditorAutoEquipData
// Size: 0xa0
// VTable: 0x149a58b50
struct VehicleEditorAutoEquipData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SItemPortDefTypes* containerItemTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SItemPortDefTypes* innerItemTypes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_VehicleEditorItemData* containerItemList; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    bool recursiveItemPortIteration; // Offset: 0x98
    bool showContainerItems; // Offset: 0x99
    uint8_t _pad_4[0x6]; // Offset: 0x9a
};

// Original name: VehicleEditorAvailableItemsData
// Size: 0x38
// VTable: 0x149a58a50
struct VehicleEditorAvailableItemsData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VehicleEditorItemData* items; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: VehicleEditorAvailableVehiclesData
// Size: 0x68
// VTable: 0x149a58998
struct VehicleEditorAvailableVehiclesData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* vehicles; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_EntityClassDefinition* uneditableVehicles; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: VehicleEditorGroupData
// Size: 0xc0
// VTable: 0x149a58cd8
struct VehicleEditorGroupData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    VehicleEditorPortsWithItemData mainItem; // Offset: 0x8
    DynArray_VehicleEditorPortsWithItemData* groupedItems; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x98
};

// Original name: VehicleEditorGroupEquipData
// Size: 0xd8
// VTable: 0x149a58dd0
struct VehicleEditorGroupEquipData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityClassDefinition* allowedVehicles; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    VehicleEditorPortsData visibleItemPorts; // Offset: 0x38
    bool forceExposingItemPorts; // Offset: 0xa0
    bool showOtherItems; // Offset: 0xa1
    uint8_t _pad_2[0x6]; // Offset: 0xa2
    DynArray_VehicleEditorGroupData* availableGroups; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xb0
};

// Original name: VehicleEditorItemData
// Size: 0x20
// VTable: 0x149a58760
struct VehicleEditorItemData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition item; // Offset: 0x8
};

// Original name: VehicleEditorItemOffsets
// Size: 0x98
// VTable: 0x149a58838
struct VehicleEditorItemOffsets {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 orientationOffset; // Offset: 0x8
    Vec3 scaleOffset; // Offset: 0x20
    DynArray_EntityClassDefinition* items; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
    DynArray_SItemPortDefTypes* itemTypes; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x70
};

// Original name: VehicleEditorManagerParams
// Size: 0xc8
// VTable: 0x149a58ef8
struct VehicleEditorManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    VehicleEditorAvailableVehiclesData offlineVehicles; // Offset: 0x18
    VehicleEditorEditableCategoriesData editableCategories; // Offset: 0x30
    VehicleEditorAvailableItemsData offlineItems; // Offset: 0x48
    DynArray_VehicleEditorAutoEquipData* autoEquipData; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x68
    DynArray_VehicleEditorGroupEquipData* groupEquipData; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x98
    bool recursiveItemPortIteration; // Offset: 0xc0
    uint8_t _pad_3[0x7]; // Offset: 0xc1
};

// Original name: VehicleEditorPortsWithItemData
// Size: 0x88
// VTable: 0x149a58c58
struct VehicleEditorPortsWithItemData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassDefinition item; // Offset: 0x8
    VehicleEditorPortsData itemPorts; // Offset: 0x20
};

// Original name: VehicleEditorTerminalParams
// Size: 0x38
// VTable: 0x149a58fe8
struct VehicleEditorTerminalParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    VehicleEditorUIData uiData; // Offset: 0x18
    bool autoSelectLonelyVehicle; // Offset: 0x30
    bool autoSelectFirstCategory; // Offset: 0x31
    uint8_t _pad_1[0x2]; // Offset: 0x32
    ARDataType selectionBehaviour; // Offset: 0x34
};

// Original name: VehicleEditorUIData
// Size: 0xd8
// VTable: 0x149a58908
struct VehicleEditorUIData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VehicleEditorStat* stats; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_VehicleEditorCapabilities* vehicleCapabilities; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_VehicleEditorItemStatData* itemStats; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_VehicleEditorItemOffsets* itemOffsets; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x38]; // Offset: 0xa0
};

// Original name: VehicleEntranceMarkerProvider
// Size: 0x20
// VTable: 0x149a235c0
struct VehicleEntranceMarkerProvider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Marker_Configuration markerConfig; // Offset: 0x8
};

// Original name: VehicleMasterModeScanProcedureParams
// Size: 0x40
// VTable: 0x1499c8048
struct VehicleMasterModeScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    CLocIdentifier* displayForSCM; // Offset: 0x30
    CLocIdentifier* displayForNAV; // Offset: 0x38
};

// Original name: VehicleModelScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7fb0
struct VehicleModelScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: VehicleRoleScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7fb8
struct VehicleRoleScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: VehicleSalvageGlobalParams
// Size: 0x1a0
// VTable: 0x1499ba180
struct VehicleSalvageGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float vehicleFractureForceScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SSalvageGlobalStructuralVFXParams structuralVFX; // Offset: 0x10
    SSalvageGlobalStructuralHighlightParams structuralHighlights; // Offset: 0x110
};

// Original name: VehicleSelfDestructScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7fc0
struct VehicleSelfDestructScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: VendingMachineParams
// Size: 0x70
// VTable: 0x149a2d680
struct VendingMachineParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SItemPortDef itemPort; // Offset: 0x18
    float updateTimeSeconds; // Offset: 0x28
    float detachTimeSeconds; // Offset: 0x2c
    float despawnTimeSeconds; // Offset: 0x30
    float cooldownSeconds; // Offset: 0x34
    float defaultItemLifetimeSeconds; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    DynArray_SVendingMachineItem* items; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
};

// Original name: VisorLens_Layout
// Size: 0x38
// VTable: 0x149a221e0
struct VisorLens_Layout {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VisorLens_Region* regions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: VisorLens_Region
// Size: 0xc0
// VTable: 0x149a223a8
struct VisorLens_Region {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Deg3 orientation; // Offset: 0x18
    Vec3 size; // Offset: 0x38
    Vec3 anchor; // Offset: 0x50
    Vec3 pivot; // Offset: 0x68
    ARDataType flexDirection; // Offset: 0x80
    ARDataType flexAxisJustification; // Offset: 0x84
    ARDataType flexCrossAxisJustification; // Offset: 0x88
    ARDataType flexItemAlignment; // Offset: 0x8c
    DynArray_VisorLens_Widget* widgets; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x98
};

// Original name: VisorLens_Widget
// Size: 0xd8
// VTable: 0x149a22518
struct VisorLens_Widget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* namespace_; /* namespace */ // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    Vec3 size; // Offset: 0x28
    Ang3 orientation; // Offset: 0x40
    int32_t slot; // Offset: 0x58
    uint8_t _pad_3[0x4]; // Offset: 0x5c
    DynArray_Tag* showTags; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x68
    DynArray_Tag* hideTags; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x98
    BuildingBlocks_Canvas canvas; // Offset: 0xc0
};

// Original name: VoiceChatInputParams
// Size: 0x78
// VTable: 0x1499e5358
struct VoiceChatInputParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Tag connectionEstablishedTag; // Offset: 0x18
    Tag connectionLostTag; // Offset: 0x30
    Tag pushToTalkEngagedTag; // Offset: 0x48
    Tag pushToTalkDisengagedTag; // Offset: 0x60
};

// Original name: WantedLevelOwnerScanProcedureParams
// Size: 0x30
// VTable: 0x1499c7a18
struct WantedLevelOwnerScanProcedureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Tag requiredScanTag; // Offset: 0x8
    float emissionBaseline; // Offset: 0x20
    float runtimeDuration; // Offset: 0x24
    bool allowedInAIAutoScan; // Offset: 0x28
    bool allowedInFocalPointScan; // Offset: 0x29
    bool allowedInPassiveScan; // Offset: 0x2a
    bool allowedInPingBroadScan; // Offset: 0x2b
    bool allowedInPingFocusScan; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: WeaponARModifier
// Size: 0x418
// VTable: 0x149a61838
struct WeaponARModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle arMuzzleFlashEffect; // Offset: 0x8
    CryStringT* arMFXImpact; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    Tag arTriggerTag; // Offset: 0x30
    SWeaponModifierParams weaponModifier; // Offset: 0x48
};

// Original name: WeaponControllerArmMissileStates
// Size: 0x48
// VTable: 0x1499c3238
struct WeaponControllerArmMissileStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState noMissilesAvailable; // Offset: 0x8
    SInteractionState noMissilesArmed; // Offset: 0x18
    SInteractionState someMissilesArmed; // Offset: 0x28
    SInteractionState allMissilesArmed; // Offset: 0x38
};

// Original name: WeaponControllerCycleMissileStates
// Size: 0x28
// VTable: 0x1499c32b8
struct WeaponControllerCycleMissileStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState cycleForward; // Offset: 0x8
    SInteractionState cycleBackward; // Offset: 0x18
};

// Original name: WeaponControllerMissileEventStates
// Size: 0x28
// VTable: 0x1499c3338
struct WeaponControllerMissileEventStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInteractionState armMissile; // Offset: 0x8
    SInteractionState fireMissile; // Offset: 0x18
};

// Original name: WeaponControllerStateModifier
// Size: 0x38
// VTable: 0x1499c33e0
struct WeaponControllerStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WeaponControllerArmMissileStates armMissileStates; // Offset: 0x8
    WeaponControllerCycleMissileStates cycleMissileStates; // Offset: 0x18
    WeaponControllerMissileEventStates missileEventStates; // Offset: 0x28
};

// Original name: WebCustomizationDebug
// Size: 0x38
// VTable: 0x1499b1200
struct WebCustomizationDebug {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DebugLoadoutKit* debugLoadoutKits; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: WebCustomizationStaticParams
// Size: 0x48
// VTable: 0x1499b1128
struct WebCustomizationStaticParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemPortLoadoutBaseParams defaultLoadoutKit; // Offset: 0x8
    DynArray_LoadoutKit* loadoutKits; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: WeightedLootArchetype
// Size: 0x38
// VTable: 0x1499b3f70
struct WeightedLootArchetype {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LootArchetype archetype; // Offset: 0x8
    float weight; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    NumResultsConstraints numberOfResultsConstraints; // Offset: 0x28
};

// Original name: ZeroGTraversalConnection
// Size: 0x38
// VTable: 0x149aae330
struct ZeroGTraversalConnection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool waitUntillFinished; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float delaySeconds; // Offset: 0xc
    CryStringT* waitForEvent; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    bool resetViewOnTransition; // Offset: 0x20
    bool playExitAnimation; // Offset: 0x21
    bool allowExitYield; // Offset: 0x22
    uint8_t _pad_3[0x5]; // Offset: 0x23
    ZeroGTraversalState nextState; // Offset: 0x28
};

// Original name: ZeroGTraversalGraph
// Size: 0x38
// VTable: 0x149aae4e0
struct ZeroGTraversalGraph {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ZeroGTraversalState* traversalStates; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ZeroGTraversalState
// Size: 0x68
// VTable: 0x149aae480
struct ZeroGTraversalState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* mannequinTags; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* mannequinFragment; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    bool playEnterAnimation; // Offset: 0x30
    bool canTurnInState; // Offset: 0x31
    bool useAnimMotionControl; // Offset: 0x32
    uint8_t _pad_4[0x5]; // Offset: 0x33
    DynArray_ZeroGTraversalConnection* connections; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x40
};

// Original name: mobiGlasApp
// Size: 0x110
// VTable: 0x149a35f30
struct mobiGlasApp {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* bindingsNamespace; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    BuildingBlocks_Canvas appCanvas; // Offset: 0x28
    BuildingBlocks_Canvas homeCanvas; // Offset: 0x40
    CryStringT* displayIcon; // Offset: 0x58
    uint8_t _pad_3[0x8]; // Offset: 0x60
    CryStringT* displayIcon3d; // Offset: 0x68
    uint8_t _pad_4[0x8]; // Offset: 0x70
    CLocIdentifier* displayName; // Offset: 0x78
    SRGBA8 appColor; // Offset: 0x80
    bool isHidden; // Offset: 0x90
    uint8_t _pad_5[0x7]; // Offset: 0x91
    DynArray_MobiGlasAppData* defaultAppData; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xa0
    SMobiGlasAppParamsBase appParams; // Offset: 0xc8
    DynArray_mobiGlasApp* hostingApps; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0xe0
    bool legacyApp; // Offset: 0x108
    uint8_t _pad_8[0x7]; // Offset: 0x109
};

// Original name: mobiGlasAppRef
// Size: 0x30
// VTable: 0x1499d6ac8
struct mobiGlasAppRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* mobiGlasAppName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    mobiGlasApp appRef; // Offset: 0x18
};

// Original name: mobiGlasAppTable
// Size: 0x38
// VTable: 0x1499d6b20
struct mobiGlasAppTable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_mobiGlasAppRef* mobiGlasAppRefs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: mobiGlasDefaultAppEntry
// Size: 0x50
// VTable: 0x149a36248
struct mobiGlasDefaultAppEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    mobiGlasApp defaultMobiGlasApp; // Offset: 0x8
    DynArray_MobiGlasAppData* defaultAppData; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

/*=========================================================================*/
/*   NON-CYCLIC STRUCT DEFINITIONS (Sorted)                              */
/*=========================================================================*/
/* These structs were topologically sorted based on their dependencies.    */

// Original name: StatusPriorityActorStatus
// Size: 0x18
// VTable: 0x1499c78b8
struct StatusPriorityActorStatus {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType associatedWidget; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    ARDataType actorStatusType; // Offset: 0x10
    ARDataType sourceStatType; // Offset: 0x14
};

// Original name: AISeatQuantumDriveControllerComponentParams
// Size: 0x18
// VTable: 0x149a31818
struct AISeatQuantumDriveControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LinkedStatPassIncreaseToValue
// Size: 0x10
// VTable: 0x1499fd940
struct LinkedStatPassIncreaseToValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float targetValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCItemControlBaseParams
// Size: 0x8
// VTable: 0x149a07038
struct SCItemControlBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EntityComponentCommsChannelParams
// Size: 0x28
// VTable: 0x149a50800
struct EntityComponentCommsChannelParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType channelJoinType; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float channelLeaveTimer; // Offset: 0x1c
    float channelForceLeaveRange; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: CraftingResult_Base
// Size: 0x8
// VTable: 0x1499b8500
struct CraftingResult_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSCActorProceduralRecoilComponentParams
// Size: 0x18
// VTable: 0x149a72af0
struct SSCActorProceduralRecoilComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SIVictoryConditionsModule
// Size: 0x18
// VTable: 0x1499ba518
struct SIVictoryConditionsModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_TRBL
// Size: 0x20
// VTable: 0x1499824b8
struct BuildingBlocks_TRBL {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float top; // Offset: 0x8
    float right; // Offset: 0xc
    float bottom; // Offset: 0x10
    float left; // Offset: 0x14
    float front; // Offset: 0x18
    float back; // Offset: 0x1c
};

// Original name: SSequencerBespokeTakeCarryableTaskParams
// Size: 0x40
// VTable: 0x149a8ea98
struct SSequencerBespokeTakeCarryableTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* fragmentId; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* fragTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: CinematicTriggerMPOptions
// Size: 0x10
// VTable: 0x149a9b940
struct CinematicTriggerMPOptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool networked; // Offset: 0x8
    bool perPlayer; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    int32_t minPlayers; // Offset: 0xc
};

// Original name: SAtmosphericCompositionInheritPlanet
// Size: 0x8
// VTable: 0x14997a020
struct SAtmosphericCompositionInheritPlanet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: LedgeTransitionParams
// Size: 0x40
// VTable: 0x149ab04a8
struct LedgeTransitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minHeight; // Offset: 0x8
    float lowMaxHeight; // Offset: 0xc
    float mediumMaxHeight; // Offset: 0x10
    float highMaxHeight; // Offset: 0x14
    float ultraMaxHeight; // Offset: 0x18
    float lowMinWarpDepth; // Offset: 0x1c
    float mediumMinWarpDepth; // Offset: 0x20
    float highMinWarpDepth; // Offset: 0x24
    float ultraMinWarpDepth; // Offset: 0x28
    float walkSlowTimeScale; // Offset: 0x2c
    float walkFastTimeScale; // Offset: 0x30
    float runSlowTimeScale; // Offset: 0x34
    float runFastTimeScale; // Offset: 0x38
    float sprintTimeScale; // Offset: 0x3c
};

// Original name: MoveViewRestrictionWeighting
// Size: 0x18
// VTable: 0x149a7dce8
struct MoveViewRestrictionWeighting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float HelmetWeighting; // Offset: 0x8
    float CoreWeighting; // Offset: 0xc
    float LegsWeighting; // Offset: 0x10
    float ArmsWeighting; // Offset: 0x14
};

// Original name: DesignerNavigationVolumeParams
// Size: 0x18
// VTable: 0x14997f9d8
struct DesignerNavigationVolumeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: CommsAudioEffect
// Size: 0x20
// VTable: 0x149a9be78
struct CommsAudioEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* busName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType locationId; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_BindingsPathStructure
// Size: 0x18
// VTable: 0x149980580
struct BuildingBlocks_BindingsPathStructure {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SCItemRadarPingProperties
// Size: 0x10
// VTable: 0x1499c62e0
struct SCItemRadarPingProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float cooldownTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SRaceCheckpointObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e8020
struct SRaceCheckpointObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SMisfireSeverityFactors
// Size: 0x18
// VTable: 0x149a07e38
struct SMisfireSeverityFactors {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float degradation; // Offset: 0x8
    float damage; // Offset: 0xc
    float heat; // Offset: 0x10
    float distortion; // Offset: 0x14
};

// Original name: SCItemControllableSimpleParams
// Size: 0x18
// VTable: 0x149a06b70
struct SCItemControllableSimpleParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    uint8_t priority; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: SShieldAbsorption
// Size: 0x10
// VTable: 0x1499f3d98
struct SShieldAbsorption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Max; // Offset: 0x8
    float Min; // Offset: 0xc
};

// Original name: SSequencerBespokePlaceCarryableTaskParams
// Size: 0x40
// VTable: 0x149a8eb18
struct SSequencerBespokePlaceCarryableTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* fragmentId; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* fragTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: CustomFloat
// Size: 0x8
// VTable: 0x1499b3848
struct CustomFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: S42Commendation
// Size: 0x28
// VTable: 0x149a36b30
struct S42Commendation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* imagePath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
    CLocIdentifier* toolTipText; // Offset: 0x20
};

// Original name: BasePortRefillData
// Size: 0x8
// VTable: 0x149a40550
struct BasePortRefillData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEntityTraversingNodeId
// Size: 0x8
// VTable: 0x14999e9f0
struct SEntityTraversingNodeId {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GlobalResourceMaterial
// Size: 0x18
// VTable: 0x1499ae3c0
struct GlobalResourceMaterial {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: CameraDOFFocusDistanceConfig
// Size: 0x18
// VTable: 0x1499b2868
struct CameraDOFFocusDistanceConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float focusDistance; // Offset: 0x8
    float minFocusDistance; // Offset: 0xc
    float maxFocusDistance; // Offset: 0x10
    float focusDistanceSpeed; // Offset: 0x14
};

// Original name: SetCloneLocationMedicalTier
// Size: 0x10
// VTable: 0x149a57150
struct SetCloneLocationMedicalTier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType locationMedicalTier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: TriggerSubConditionInnerThoughtOptionDef
// Size: 0x38
// VTable: 0x149a897d8
struct TriggerSubConditionInnerThoughtOptionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* npcGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* interactionPoint; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CLocIdentifier* optionDisplayName; // Offset: 0x28
    ARDataType cursorType; // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
};

// Original name: SDoorCollisionReactionRetractParams
// Size: 0x10
// VTable: 0x1499f2290
struct SDoorCollisionReactionRetractParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType CollisionReactionDirection; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SActorHitReactionsDef
// Size: 0x30
// VTable: 0x149a4b0a0
struct SActorHitReactionsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float impactAccumulationTime; // Offset: 0x8
    float impactReductionFromMass; // Offset: 0xc
    float physicsImpactScalePlayer; // Offset: 0x10
    float physicsImpactScaleAI; // Offset: 0x14
    float deathAnimationInterruptionDelay; // Offset: 0x18
    bool enableHitReactionsLight; // Offset: 0x1c
    bool enableHitReactionsMedium; // Offset: 0x1d
    bool enableHitReactionsHeavy; // Offset: 0x1e
    uint8_t _pad_1[0x1]; // Offset: 0x1f
    float hitThresholdLight; // Offset: 0x20
    float hitThresholdMedium; // Offset: 0x24
    float hitThresholdHeavy; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: CommodityCrateComponentParams
// Size: 0x18
// VTable: 0x1499e22f8
struct CommodityCrateComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SApplicationFormHead
// Size: 0x38
// VTable: 0x149a0ea40
struct SApplicationFormHead {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayImage; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* selectedDisplayImage; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* customHeadFile; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: SetPowerSourceStateEvent
// Size: 0x10
// VTable: 0x149a46470
struct SetPowerSourceStateEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType newPowerSourceState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SAnalyticShadowComponentParams
// Size: 0x28
// VTable: 0x1499c97b0
struct SAnalyticShadowComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float radius; // Offset: 0x18
    float penumbraWidth; // Offset: 0x1c
    float maxRange; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: StarMapAssetManagerLocationParams
// Size: 0x28
// VTable: 0x149a8f538
struct StarMapAssetManagerLocationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* previewImagePath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* previewIconPath; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: BuildingBlocks_BindingsPathBase
// Size: 0x8
// VTable: 0x149980520
struct BuildingBlocks_BindingsPathBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuffDurationBase
// Size: 0x8
// VTable: 0x1499fc3e0
struct BuffDurationBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SMFDOperatorModeConfig
// Size: 0x28
// VTable: 0x149a5b268
struct SMFDOperatorModeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType leftCastView; // Offset: 0x8
    ARDataType rightCastView; // Offset: 0xc
    ARDataType primaryMFDScreenView; // Offset: 0x10
    ARDataType secondaryMFDScreen1View; // Offset: 0x14
    ARDataType secondaryMFDScreen2View; // Offset: 0x18
    ARDataType secondaryMFDScreen3View; // Offset: 0x1c
    ARDataType secondaryMFDScreen4View; // Offset: 0x20
    ARDataType secondaryMFDScreen5View; // Offset: 0x24
};

// Original name: StanceBreathModifier
// Size: 0x50
// VTable: 0x149a6cb10
struct StanceBreathModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    float modifier; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: HarvestConditionInteraction
// Size: 0x10
// VTable: 0x1499efde8
struct HarvestConditionInteraction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool includeAttachedChildren; // Offset: 0x8
    bool allInteractionsClearSpawnPoint; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: AudioRayOcclusionParams
// Size: 0x30
// VTable: 0x1499a9950
struct AudioRayOcclusionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType occlusionType; // Offset: 0x18
    ARDataType occlusionCalcRule; // Offset: 0x1c
    CryStringT* rayTargetBoneName; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
};

// Original name: WalkToAlignParams
// Size: 0x20
// VTable: 0x149a8c1b0
struct WalkToAlignParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float reachDistance; // Offset: 0x8
    float minDistance; // Offset: 0xc
    float maxWalkToTakeTime; // Offset: 0x10
    float maxStuckTakeTime; // Offset: 0x14
    float minimumLookAtTargetDistance; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SGlobalHitBehaviorParams
// Size: 0x10
// VTable: 0x1499e0a38
struct SGlobalHitBehaviorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float damagePerTickUpperLimit; // Offset: 0x8
    float timeUpperLimit; // Offset: 0xc
};

// Original name: ActorLookAheadTargetTracking
// Size: 0x18
// VTable: 0x149a64420
struct ActorLookAheadTargetTracking {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float trackingThresholdNormal; // Offset: 0x8
    float trackingThresholdExtended; // Offset: 0xc
    float trackingThresholdGracePeriod; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: VehicleEditorCapability
// Size: 0x10
// VTable: 0x149a585f8
struct VehicleEditorCapability {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statType; // Offset: 0x8
    float sumWeight; // Offset: 0xc
};

// Original name: RentalNotificationParams
// Size: 0x30
// VTable: 0x149a90030
struct RentalNotificationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* timeToRentalExpireMessage; // Offset: 0x8
    CryStringT* rentedItemNameToken; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    CryStringT* rentalDurationToken; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
};

// Original name: FireHazardFireProperties
// Size: 0x20
// VTable: 0x14997c2d8
struct FireHazardFireProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fireUnderlyingGlow; // Offset: 0x8
    float fireIntensityMultiplier; // Offset: 0xc
    float fireFlowmapMovementSpeed; // Offset: 0x10
    float fireSwirlSpeed; // Offset: 0x14
    float fireMovementSpeed; // Offset: 0x18
    float maximumLuminance; // Offset: 0x1c
};

// Original name: ControlHints_KeyInput
// Size: 0x20
// VTable: 0x149a67528
struct ControlHints_KeyInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType deviceType; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: VehicleHUDMessagingParams
// Size: 0x18
// VTable: 0x149a08f60
struct VehicleHUDMessagingParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSCSignatureSystemAudioSubRule
// Size: 0x8
// VTable: 0x1499ea058
struct SSCSignatureSystemAudioSubRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEffectParamsNodeBase
// Size: 0x8
// VTable: 0x14999b778
struct SEffectParamsNodeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SAnimatedOutfitSwapData
// Size: 0x8
// VTable: 0x149a46600
struct SAnimatedOutfitSwapData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlacementValidatorMines
// Size: 0x8
// VTable: 0x149a80d68
struct PlacementValidatorMines {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeSliderMode
// Size: 0x10
// VTable: 0x14998bf70
struct BuildingBlocks_FieldModifierEnumeratedTypeSliderMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSequencerSkeletonAnimationTaskParams
// Size: 0x48
// VTable: 0x1499a23e0
struct SSequencerSkeletonAnimationTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* animationName; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    int32_t layerId; // Offset: 0x30
    bool looping; // Offset: 0x34
    uint8_t _pad_2[0x3]; // Offset: 0x35
    float playbackSpeed; // Offset: 0x38
    float blendIn; // Offset: 0x3c
    float normalizedStartTime; // Offset: 0x40
    ARDataType transitionType; // Offset: 0x44
};

// Original name: SActorForceReactionStumbleConfigDef
// Size: 0x10
// VTable: 0x149a4d428
struct SActorForceReactionStumbleConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minAdditionalSpeed; // Offset: 0x8
    float maxAdditionalSpeed; // Offset: 0xc
};

// Original name: ActorTurnAngles
// Size: 0x18
// VTable: 0x149aac710
struct ActorTurnAngles {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float defaultTurnAngle; // Offset: 0x8
    float proneTurnAngle; // Offset: 0xc
    float unarmedCombatTurnAngle; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: FacialTrackingParams
// Size: 0x18
// VTable: 0x1499a9308
struct FacialTrackingParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SActorForceReactionBlockADSConfig
// Size: 0x18
// VTable: 0x149a4c7f0
struct SActorForceReactionBlockADSConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool blockADS; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float triggerADSBlockDuration; // Offset: 0xc
    float heldADSBlockDuration; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: MovementSpeedOverride
// Size: 0x10
// VTable: 0x149a8c448
struct MovementSpeedOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType speedCategory; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float speedOverride; // Offset: 0xc
};

// Original name: AIGroupEntityParams
// Size: 0x18
// VTable: 0x149a01d50
struct AIGroupEntityParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ActorStateSkeletonFilter
// Size: 0x10
// VTable: 0x149a8ac40
struct ActorStateSkeletonFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType filterBySkeleton; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SNPCObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e7f80
struct SNPCObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GlobalResourceTextureDDS
// Size: 0x18
// VTable: 0x1499ae480
struct GlobalResourceTextureDDS {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SAtmosphericEffectTestsParams
// Size: 0x18
// VTable: 0x149a1da78
struct SAtmosphericEffectTestsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool overrideAtmosphericTrails; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float overrideAtmosphericTrailValue; // Offset: 0xc
    bool overrideAtmosphericHeating; // Offset: 0x10
    uint8_t _pad_2[0x3]; // Offset: 0x11
    float overrideAtmosphericHeatingValue; // Offset: 0x14
};

// Original name: SActorForceReactionAnimationTwitchConfig
// Size: 0x10
// VTable: 0x149a4c2e0
struct SActorForceReactionAnimationTwitchConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendspaceMin; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCDynamicRigLightEnabledParams
// Size: 0x10
// VTable: 0x1499e0ab0
struct SCDynamicRigLightEnabledParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: StatusPriorityStamina
// Size: 0x18
// VTable: 0x1499c77b8
struct StatusPriorityStamina {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType associatedWidget; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float thresholdValue; // Offset: 0x10
    ARDataType comparison; // Offset: 0x14
};

// Original name: SHackingEntitySpawnParams
// Size: 0x20
// VTable: 0x149a2bf28
struct SHackingEntitySpawnParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float initialSpawnDelay; // Offset: 0x8
    float spawnDuration; // Offset: 0xc
    float despawnDurationDefault; // Offset: 0x10
    float despawnDurationVictory; // Offset: 0x14
    float despawnDurationFailure; // Offset: 0x18
    float despawnDurationAbort; // Offset: 0x1c
};

// Original name: SSelfHintActivator
// Size: 0x10
// VTable: 0x1499fb2a8
struct SSelfHintActivator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType hint; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ItemResourceControlConditionBase
// Size: 0x8
// VTable: 0x1499a74e8
struct ItemResourceControlConditionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_TimingFunctionBase
// Size: 0x8
// VTable: 0x14998d068
struct BuildingBlocks_TimingFunctionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_OptInEventState
// Size: 0x10
// VTable: 0x149a67210
struct ControlHintCondition_OptInEventState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType optInEventState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BuildingBlocks_TriggerDirectHyperLink
// Size: 0x18
// VTable: 0x14998d480
struct BuildingBlocks_TriggerDirectHyperLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* link; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SPartyMemberMarkerObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e8188
struct SPartyMemberMarkerObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_TimingFunctionPreset
// Size: 0x10
// VTable: 0x14998d0c0
struct BuildingBlocks_TimingFunctionPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType preset; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SCharacterCustomizerWildlineSubconditionFeature
// Size: 0x10
// VTable: 0x149a0ca80
struct SCharacterCustomizerWildlineSubconditionFeature {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType feature; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SZoneHostEntityHighlightNode
// Size: 0x8
// VTable: 0x1499a5c68
struct SZoneHostEntityHighlightNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierInteger
// Size: 0x18
// VTable: 0x14998aff8
struct BuildingBlocks_FieldModifierInteger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType field; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    int64_t value; // Offset: 0x10
};

// Original name: ScreenEffects_Pattern_Linear
// Size: 0x18
// VTable: 0x14999bf90
struct ScreenEffects_Pattern_Linear {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float duration; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    bool mirrored; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
};

// Original name: UIGraph_FlashDockingStationComponent
// Size: 0x18
// VTable: 0x149a2f720
struct UIGraph_FlashDockingStationComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ItemPortViewInformationByItemType
// Size: 0x10
// VTable: 0x149aaa880
struct ItemPortViewInformationByItemType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SEntityComponentManagedEntityZoneParams
// Size: 0x18
// VTable: 0x14999e120
struct SEntityComponentManagedEntityZoneParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SPowerPlantMisfireParams
// Size: 0x10
// VTable: 0x1499f4138
struct SPowerPlantMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool reducesPower; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float powerReductionRatio; // Offset: 0xc
};

// Original name: AtmosphereStateBase
// Size: 0x8
// VTable: 0x14997a298
struct AtmosphereStateBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCSeatItemPort
// Size: 0x18
// VTable: 0x149a5cdc0
struct SCSeatItemPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPortName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SCProneMotionGraphDef
// Size: 0x10
// VTable: 0x149a69c30
struct SCProneMotionGraphDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float turnTriggerYawThreshold; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BoolUserVariableTask
// Size: 0x20
// VTable: 0x149994098
struct BoolUserVariableTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: TriggeredHealth
// Size: 0x8
// VTable: 0x1499faf30
struct TriggeredHealth {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_RadialTransform
// Size: 0x18
// VTable: 0x149983cd0
struct BuildingBlocks_RadialTransform {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float transformMultiplier; // Offset: 0x8
    ARDataType curvatureAxis; // Offset: 0xc
    bool mouseTestShape; // Offset: 0x10
    uint8_t polyResolution; // Offset: 0x11
    uint8_t _pad_1[0x2]; // Offset: 0x12
    float conicSlantFactor; // Offset: 0x14
};

// Original name: SDespawnRule_OnStreamOut
// Size: 0x10
// VTable: 0x149a404c8
struct SDespawnRule_OnStreamOut {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float ruleDelaySeconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: VehicleSerialNumberCharacterType
// Size: 0x18
// VTable: 0x149967ef0
struct VehicleSerialNumberCharacterType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* possibleCharacters; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SCharacterCustomizerBlemishMapParams
// Size: 0x28
// VTable: 0x149a0ddf8
struct SCharacterCustomizerBlemishMapParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* blemishMask; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* blemishIdMask; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: Marker_AbilityNavpoint
// Size: 0x18
// VTable: 0x149a4a4a0
struct Marker_AbilityNavpoint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* selectedModel; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ResourceNetworkParams
// Size: 0x10
// VTable: 0x1499d5558
struct ResourceNetworkParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableItemResourceNetwork; // Offset: 0x8
    bool enableSalvageItemRepair; // Offset: 0x9
    bool enableMisfires; // Offset: 0xa
    bool enableCriticalMisfires; // Offset: 0xb
    bool doorsIgnoreRN; // Offset: 0xc
    bool enableExperimentalArmorPenetration; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
};

// Original name: GasCloudOverrideCubeVolumeParams
// Size: 0x20
// VTable: 0x1499cd0a8
struct GasCloudOverrideCubeVolumeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float sizeX; // Offset: 0x8
    float sizeY; // Offset: 0xc
    float sizeZ; // Offset: 0x10
    float fadeX; // Offset: 0x14
    float fadeY; // Offset: 0x18
    float fadeZ; // Offset: 0x1c
};

// Original name: GlobalJumpDriveTuningEffectParams
// Size: 0x10
// VTable: 0x149a130a8
struct GlobalJumpDriveTuningEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float interferenceStrength; // Offset: 0x8
    float midPointForInterferencePercentage; // Offset: 0xc
};

// Original name: LightGroupParams
// Size: 0x18
// VTable: 0x1499a45f8
struct LightGroupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool flickerOn; // Offset: 0x8
    bool temperatureTransition; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    int32_t transitionDelayId; // Offset: 0xc
    bool useRandomDelayId; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
};

// Original name: HarvestableTagListBase
// Size: 0x8
// VTable: 0x1499efa28
struct HarvestableTagListBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DissolveParams
// Size: 0x20
// VTable: 0x1499d1c88
struct DissolveParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float dissolveDuration; // Offset: 0x18
    bool startDissolved; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
};

// Original name: ShipRecallBannedAreaParams
// Size: 0x18
// VTable: 0x149a1cca8
struct ShipRecallBannedAreaParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEntityComponentTrackViewParams
// Size: 0x18
// VTable: 0x1499a2cb0
struct SEntityComponentTrackViewParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_TextFormatModifierBase
// Size: 0x8
// VTable: 0x149981b00
struct BuildingBlocks_TextFormatModifierBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: RadiationBehavior_AsteroidInverseSquareSurfaceRadiationParams
// Size: 0x20
// VTable: 0x14997af30
struct RadiationBehavior_AsteroidInverseSquareSurfaceRadiationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float scaleOnLargestAsteroid; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float radiusScale; // Offset: 0x10
    float intensityScale; // Offset: 0x14
    float intensityCutoff; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SItemPortDefExtensionFPS
// Size: 0x18
// VTable: 0x1499af960
struct SItemPortDefExtensionFPS {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* SelectTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: UIGraph_MarkerARProviderComponent
// Size: 0x8
// VTable: 0x1499f17d0
struct UIGraph_MarkerARProviderComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SimpleRotationComponentOscillation
// Size: 0x18
// VTable: 0x1499e23b0
struct SimpleRotationComponentOscillation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float rotationMaxAngle; // Offset: 0x8
    float smoothness; // Offset: 0xc
    float delay; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: PlayerGroupManagerObjectsLocStringParams
// Size: 0x10
// VTable: 0x149aa1fa0
struct PlayerGroupManagerObjectsLocStringParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* partyName; // Offset: 0x8
};

// Original name: CockpitRuleFloat
// Size: 0x28
// VTable: 0x1499b3780
struct CockpitRuleFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float priority; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    float value; // Offset: 0x20
    uint8_t _pad_3[0x4]; // Offset: 0x24
};

// Original name: EntityComponentDockingHubParams
// Size: 0x18
// VTable: 0x149a265c8
struct EntityComponentDockingHubParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEntityLinkedContext
// Size: 0x8
// VTable: 0x1499a6790
struct SEntityLinkedContext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCItemCoolerParams
// Size: 0x28
// VTable: 0x1499f6250
struct SCItemCoolerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float CoolingRate; // Offset: 0x18
    float SuppressionIRFactor; // Offset: 0x1c
    float SuppressionHeatFactor; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SEntityComponentUpdateProxyParams
// Size: 0x18
// VTable: 0x149ac4258
struct SEntityComponentUpdateProxyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SArmouryItemFilter
// Size: 0x20
// VTable: 0x1499dc808
struct SArmouryItemFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* filterName; // Offset: 0x8
    CryStringT* tags; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
};

// Original name: UIGraph_MissionDockComponent
// Size: 0x10
// VTable: 0x149a30a10
struct UIGraph_MissionDockComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType tab; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: MagLaunchNoiseParams
// Size: 0x18
// VTable: 0x149a75878
struct MagLaunchNoiseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float amplitude; // Offset: 0x8
    float frequency; // Offset: 0xc
    float octaves; // Offset: 0x10
    float stillness; // Offset: 0x14
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeTextFieldWidgetStylePreset
// Size: 0x10
// VTable: 0x14998c298
struct BuildingBlocks_FieldModifierEnumeratedTypeTextFieldWidgetStylePreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    ARDataType paramField; // Offset: 0xc
};

// Original name: PurchasableDisplayBase
// Size: 0x8
// VTable: 0x149aa1c60
struct PurchasableDisplayBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EASpawnNotifierParams
// Size: 0x18
// VTable: 0x149a3c2b0
struct EASpawnNotifierParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LedgeShapeComponentParams
// Size: 0x18
// VTable: 0x149ac4a78
struct LedgeShapeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsNumberComponentParameter
// Size: 0x70
// VTable: 0x1499811b0
struct BuildingBlocks_BindingsNumberComponentParameter {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    CryStringT* name; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    ARDataType parameter; // Offset: 0x60
    float defaultValue; // Offset: 0x64
    uint8_t _pad_2[0x8]; // Offset: 0x68
};

// Original name: SimpleSpriteSheet
// Size: 0x20
// VTable: 0x149a882e0
struct SimpleSpriteSheet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* textureName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    uint8_t rowCount; // Offset: 0x18
    uint8_t columnCount; // Offset: 0x19
    uint8_t _pad_2[0x6]; // Offset: 0x1a
};

// Original name: SPlayerCameraTypeAllowedParams
// Size: 0x10
// VTable: 0x1499d4600
struct SPlayerCameraTypeAllowedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool firstPersonAllowed; // Offset: 0x8
    bool chaseAllowed; // Offset: 0x9
    bool orbitAllowed; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
};

// Original name: ScanCustomData
// Size: 0x18
// VTable: 0x1499c7448
struct ScanCustomData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    ARDataType displaySection; // Offset: 0x10
    bool addToBoxoutDisplay; // Offset: 0x11
    bool displayInSameRowAsHeader; // Offset: 0x12
    uint8_t _pad_1[0x5]; // Offset: 0x13
};

// Original name: MapDisplayParamsGalacticMap
// Size: 0x10
// VTable: 0x149a49970
struct MapDisplayParamsGalacticMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float displayRegionHeightPixels; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AccessibilityExteriorZoneParams
// Size: 0x10
// VTable: 0x1499f2f30
struct AccessibilityExteriorZoneParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float accessibleTimingInTransit; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SWeaponActionAIParams
// Size: 0x20
// VTable: 0x149a608c8
struct SWeaponActionAIParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType aiShootingMode; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: GameModeFilter
// Size: 0x18
// VTable: 0x1499b4ea0
struct GameModeFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType id; // Offset: 0x8
    bool visibleToPlayers; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    CLocIdentifier* displayName; // Offset: 0x10
};

// Original name: SMissileEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a20
struct SMissileEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeSegmentEasing
// Size: 0x10
// VTable: 0x14998bd30
struct BuildingBlocks_FieldModifierEnumeratedTypeSegmentEasing {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BuildingBlocks_ColorStyle
// Size: 0x10
// VTable: 0x1499820c8
struct BuildingBlocks_ColorStyle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType color; // Offset: 0x8
    float alpha; // Offset: 0xc
};

// Original name: SCItemControlPriorityNoControlValue
// Size: 0x8
// VTable: 0x149a071d8
struct SCItemControlPriorityNoControlValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CraftingGameplayPropertyImpl_Base
// Size: 0x8
// VTable: 0x1499b91e8
struct CraftingGameplayPropertyImpl_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ActionAreaExtensionType
// Size: 0x8
// VTable: 0x149a44910
struct ActionAreaExtensionType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: StatusSweatingParams
// Size: 0x28
// VTable: 0x1499ffa40
struct StatusSweatingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float sweatingStaminaThreshold; // Offset: 0x8
    float sweatMinAccumulationPerSecond; // Offset: 0xc
    float sweatMaxAccumulationPerSecond; // Offset: 0x10
    float sweatDecayDelay; // Offset: 0x14
    float sweatDecayRate; // Offset: 0x18
    float sweatToHygieneMinDecayMultiplier; // Offset: 0x1c
    float sweatToHygieneMaxDecayMultiplier; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: LightMiscParams
// Size: 0x28
// VTable: 0x1499a4890
struct LightMiscParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float specularMultiplier; // Offset: 0x8
    float fogMultiplier; // Offset: 0xc
    float glowMultiplier; // Offset: 0x10
    float planeSoftness; // Offset: 0x14
    bool linkIgnoresColor; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float attenuationTweak; // Offset: 0x1c
    bool forceKeepEntity; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
};

// Original name: AnnouncementGameToken
// Size: 0x20
// VTable: 0x1499d6d58
struct AnnouncementGameToken {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* gameToken; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType gameTokenType; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: VisibilityConditionDef
// Size: 0x8
// VTable: 0x149a4a650
struct VisibilityConditionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: QuantumColorShiftParams
// Size: 0x28
// VTable: 0x1499977a0
struct QuantumColorShiftParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enabled; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float strength; // Offset: 0x1c
    float startDistance; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: LocalPlayerMusicParams
// Size: 0x18
// VTable: 0x149a2a000
struct LocalPlayerMusicParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: PlayerTradeNotification
// Size: 0x78
// VTable: 0x1499e49a0
struct PlayerTradeNotification {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* title; // Offset: 0x8
    CLocIdentifier* sendSuccessMessage; // Offset: 0x10
    CLocIdentifier* receiveSuccessMessage; // Offset: 0x18
    CLocIdentifier* sendFailedMessage; // Offset: 0x20
    CryStringT* traderNameToken; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    CryStringT* currencyTypeTokenUEC; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    CryStringT* currencyTypeTokenMER; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
    CryStringT* currencyValueTokenUEC; // Offset: 0x58
    uint8_t _pad_4[0x8]; // Offset: 0x60
    CryStringT* currencyValueTokenMER; // Offset: 0x68
    uint8_t _pad_5[0x8]; // Offset: 0x70
};

// Original name: LightFlickerWaveSphereParams
// Size: 0x18
// VTable: 0x1499e10f0
struct LightFlickerWaveSphereParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool expanding; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float maxRadius; // Offset: 0xc
    float radiusPerSecond; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SEntityLinkHighlightNode
// Size: 0x8
// VTable: 0x1499a5c50
struct SEntityLinkHighlightNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_ActorLocomotionSet
// Size: 0x10
// VTable: 0x149a65ed0
struct ControlHintCondition_ActorLocomotionSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType locomotionSet; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SBaseLevelStats
// Size: 0x10
// VTable: 0x149a84860
struct SBaseLevelStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xpValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: TriggerSubConditionInterruptTimerDef
// Size: 0x30
// VTable: 0x149a89650
struct TriggerSubConditionInterruptTimerDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* sequenceSuperGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* state; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float timer; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
};

// Original name: AIDynamicCoverSurfaceComponentParams
// Size: 0x20
// VTable: 0x14997dcb0
struct AIDynamicCoverSurfaceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enable; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: SMissionEntityParams
// Size: 0x18
// VTable: 0x14996c5a0
struct SMissionEntityParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: IncapacitatedPlayerMarkerParams
// Size: 0x30
// VTable: 0x149a20770
struct IncapacitatedPlayerMarkerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float markerHeightOffset; // Offset: 0x8
    float corpseMarkerMaxDistance; // Offset: 0xc
    float unconsciousMarkerMaxDistance; // Offset: 0x10
    float downedMarkerMaxDistance; // Offset: 0x14
    CLocIdentifier* corpseMarkerLabel; // Offset: 0x18
    CLocIdentifier* unconsciousMarkerLabel; // Offset: 0x20
    CLocIdentifier* downedMarkerLabel; // Offset: 0x28
};

// Original name: PlanetEffectLODDistance
// Size: 0x18
// VTable: 0x14999ba70
struct PlanetEffectLODDistance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minCameraDistance; // Offset: 0x8
    float maxCameraDistance; // Offset: 0xc
    float subPatchLength; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SMicroResourceUnit
// Size: 0x10
// VTable: 0x1499a1580
struct SMicroResourceUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t microResourceUnits; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: EMPoolParams
// Size: 0x20
// VTable: 0x1499f1c78
struct EMPoolParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float overrideEmValue; // Offset: 0x18
    bool distortionAffectsRoot; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
};

// Original name: SSequencerTurretResumeControlTaskParams
// Size: 0x20
// VTable: 0x149a59d28
struct SSequencerTurretResumeControlTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: SpawnHelperComponentParams
// Size: 0x18
// VTable: 0x149a04720
struct SpawnHelperComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: STeamChannel
// Size: 0x8
// VTable: 0x149a9c800
struct STeamChannel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BoolUserVariableSetValueTask
// Size: 0x38
// VTable: 0x149994228
struct BoolUserVariableSetValueTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* name; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    bool value; // Offset: 0x30
    uint8_t _pad_2[0x7]; // Offset: 0x31
};

// Original name: SStopFillingGasTankGameplayTrigger
// Size: 0x8
// VTable: 0x1499fae20
struct SStopFillingGasTankGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EntityComponentHealth_SBaseSequencerTask
// Size: 0x20
// VTable: 0x149a172f0
struct EntityComponentHealth_SBaseSequencerTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: BuffValueOverride
// Size: 0x10
// VTable: 0x1499fc4a0
struct BuffValueOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float valueOverride; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SLoadoutRequirementBase
// Size: 0x8
// VTable: 0x1499a7020
struct SLoadoutRequirementBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_VehicleHealthState
// Size: 0x10
// VTable: 0x149a66f10
struct ControlHintCondition_VehicleHealthState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType vehicleHealthState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: RestrictedAreaPatchTypes
// Size: 0x10
// VTable: 0x149a1c818
struct RestrictedAreaPatchTypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool killPatch; // Offset: 0x8
    bool autopilotPatch; // Offset: 0x9
    bool redoutPatch; // Offset: 0xa
    bool permissionPatch; // Offset: 0xb
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PlayerChoice_MarkerNearestFace
// Size: 0x18
// VTable: 0x149a80340
struct PlayerChoice_MarkerNearestFace {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType easeType; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float flipAngle; // Offset: 0xc
    float flipTime; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SRadiationEmitterGameplayTrigger
// Size: 0x10
// VTable: 0x1499fb430
struct SRadiationEmitterGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableEmitter; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: MarkerTrackingActionParameters
// Size: 0x10
// VTable: 0x149a48d08
struct MarkerTrackingActionParameters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType leftClickAction; // Offset: 0x8
    ARDataType leftDoubleClickAction; // Offset: 0xc
};

// Original name: EntityComponentHealth_SApplyDamageMapTask
// Size: 0x30
// VTable: 0x149a17350
struct EntityComponentHealth_SApplyDamageMapTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* damageMapPath; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
};

// Original name: ControlHintCondition_VehiclePinnedTarget
// Size: 0x10
// VTable: 0x149a66c70
struct ControlHintCondition_VehiclePinnedTarget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType pinnedTarget; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: GlobalResourceTexture
// Size: 0x18
// VTable: 0x1499ae420
struct GlobalResourceTexture {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: AerodynamicTrailCalculation
// Size: 0x8
// VTable: 0x14997a658
struct AerodynamicTrailCalculation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsStringBase
// Size: 0x50
// VTable: 0x1499804f0
struct BuildingBlocks_BindingsStringBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: ControlHintCondition_VehicleQuantumTravel
// Size: 0x10
// VTable: 0x149a66b50
struct ControlHintCondition_VehicleQuantumTravel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType quantumTravelState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SPerkParamsBase
// Size: 0x48
// VTable: 0x149a96fd0
struct SPerkParamsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CLocIdentifier* displayName; // Offset: 0x28
    CLocIdentifier* displayDescription; // Offset: 0x30
    CryStringT* icon; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
};

// Original name: GoToPointComponentParams
// Size: 0x38
// VTable: 0x1499d7158
struct GoToPointComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* pointName; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* description; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: EntityComponentRttAspectFocusVehicleParams
// Size: 0x18
// VTable: 0x149a29c20
struct EntityComponentRttAspectFocusVehicleParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCIGTestAA
// Size: 0x20
// VTable: 0x1499daa50
struct SCIGTestAA {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool bBase; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool bA; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
    bool bAA; // Offset: 0x18
    uint8_t _pad_3[0x7]; // Offset: 0x19
};

// Original name: DefaultActionsEntityEntryCondition_Customisable
// Size: 0x10
// VTable: 0x149a8bd20
struct DefaultActionsEntityEntryCondition_Customisable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isCustomisable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: MusicLogicEvent
// Size: 0x20
// VTable: 0x1499b5408
struct MusicLogicEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float retriggerDelay; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SActorDefaultDeathBehaviour
// Size: 0x8
// VTable: 0x149ab09c8
struct SActorDefaultDeathBehaviour {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_ComponentParameterInputBoolean
// Size: 0x18
// VTable: 0x14998ad00
struct BuildingBlocks_ComponentParameterInputBoolean {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    bool value; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
};

// Original name: BuildingBlocks_BindingsBooleanBase
// Size: 0x50
// VTable: 0x1499804d8
struct BuildingBlocks_BindingsBooleanBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: MissionVariableBase
// Size: 0x28
// VTable: 0x1499715b8
struct MissionVariableBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeDraggablePolicy
// Size: 0x10
// VTable: 0x14998bb50
struct BuildingBlocks_FieldModifierEnumeratedTypeDraggablePolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: EntityEffectSystem_LightType_PointLight
// Size: 0x18
// VTable: 0x149999ec8
struct EntityEffectSystem_LightType_PointLight {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float attenuationBulbSize; // Offset: 0x10
    float attenuationTweak; // Offset: 0x14
};

// Original name: DamageMapExplosionParams
// Size: 0x10
// VTable: 0x149937408
struct DamageMapExplosionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float temperatureMultiplier; // Offset: 0x8
    float volumeThreshold; // Offset: 0xc
};

// Original name: ContextMenuOption
// Size: 0x18
// VTable: 0x149a1faf8
struct ContextMenuOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CLocIdentifier* textLoc; // Offset: 0x10
};

// Original name: HoldExhaleDuration
// Size: 0x18
// VTable: 0x149a6cbc0
struct HoldExhaleDuration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float breathHeldRatioMin; // Offset: 0x8
    float breathHeldRatioMax; // Offset: 0xc
    float duration; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SStrengthXPGains
// Size: 0x20
// VTable: 0x149a84c50
struct SStrengthXPGains {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeRunningWithMass; // Offset: 0x8
    float meleeHit; // Offset: 0xc
    float crouchToggle; // Offset: 0x10
    float knockedDown; // Offset: 0x14
    float vaulting; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SCharacterCustomizerRegionParams
// Size: 0x28
// VTable: 0x149a0d770
struct SCharacterCustomizerRegionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayNameLocId; // Offset: 0x18
    bool visible; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
};

// Original name: SMissionStagingAreaComponentParams
// Size: 0x18
// VTable: 0x14996c5c0
struct SMissionStagingAreaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ItemPortViewInformation
// Size: 0x8
// VTable: 0x149aaa7c8
struct ItemPortViewInformation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCItemNavigationParams
// Size: 0x18
// VTable: 0x149a38488
struct SCItemNavigationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: GlobalResourceCAF
// Size: 0x18
// VTable: 0x1499ae5a0
struct GlobalResourceCAF {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SActorProceduralAnimationComponentParams
// Size: 0x18
// VTable: 0x149a6a618
struct SActorProceduralAnimationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MissionPropertyValue_Boolean
// Size: 0x10
// VTable: 0x1499694a0
struct MissionPropertyValue_Boolean {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool value; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: InteriorMapWorldUICursorPointParams
// Size: 0x8
// VTable: 0x149a49368
struct InteriorMapWorldUICursorPointParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SActorForceReactionsProceduralLeanOverride
// Size: 0x38
// VTable: 0x149a4e350
struct SActorForceReactionsProceduralLeanOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x3]; // Offset: 0x19
    float maxLeanForward; // Offset: 0x1c
    float maxLeanBackward; // Offset: 0x20
    float maxLeanLeft; // Offset: 0x24
    float maxLeanRight; // Offset: 0x28
    bool moveHips; // Offset: 0x2c
    bool lockHands; // Offset: 0x2d
    uint8_t _pad_3[0x2]; // Offset: 0x2e
    ARDataType pose; // Offset: 0x30
    uint8_t _pad_4[0x4]; // Offset: 0x34
};

// Original name: CraftingRecipeResults_Base
// Size: 0x8
// VTable: 0x1499b8818
struct CraftingRecipeResults_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: StatusPriorityStatType
// Size: 0x20
// VTable: 0x1499c7838
struct StatusPriorityStatType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType associatedWidget; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float thresholdValue; // Offset: 0x10
    ARDataType comparison; // Offset: 0x14
    ARDataType statType; // Offset: 0x18
    bool useStatRatio; // Offset: 0x1c
    uint8_t _pad_2[0x3]; // Offset: 0x1d
};

// Original name: VibrationTypeData
// Size: 0x10
// VTable: 0x149a15078
struct VibrationTypeData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxValue; // Offset: 0x8
    float fallOffTime; // Offset: 0xc
};

// Original name: TransitNavSplineDataParams
// Size: 0x18
// VTable: 0x1499d8f78
struct TransitNavSplineDataParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: DefaultActionsEntityState_EntityIsAttachedToOtherActor
// Size: 0x8
// VTable: 0x149a8c098
struct DefaultActionsEntityState_EntityIsAttachedToOtherActor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CtxGraph_Node
// Size: 0x8
// VTable: 0x149a9c878
struct CtxGraph_Node {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_VehicleAvailableOperatorMode
// Size: 0x10
// VTable: 0x149a66730
struct ControlHintCondition_VehicleAvailableOperatorMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType operatorMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCDashboardConnectionParams
// Size: 0x18
// VTable: 0x149a7d860
struct SCDashboardConnectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPort; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: StatusPriorityFloat
// Size: 0x18
// VTable: 0x1499c77a8
struct StatusPriorityFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType associatedWidget; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float thresholdValue; // Offset: 0x10
    ARDataType comparison; // Offset: 0x14
};

// Original name: OnFootWeaponRangeCategoryScore
// Size: 0x18
// VTable: 0x1499b70f0
struct OnFootWeaponRangeCategoryScore {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float shortWeaponRange; // Offset: 0x8
    float mediumWeaponRange; // Offset: 0xc
    float longWeaponRange; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: JournalEntryAudioLog
// Size: 0x28
// VTable: 0x149975820
struct JournalEntryAudioLog {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* AudioLogName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* Description; // Offset: 0x18
    CLocIdentifier* Transcript; // Offset: 0x20
};

// Original name: MissionCompletePerkBaseDef
// Size: 0x8
// VTable: 0x149a97308
struct MissionCompletePerkBaseDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ReadySystemParams
// Size: 0x18
// VTable: 0x149a3a4b0
struct ReadySystemParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t requiredPlayers; // Offset: 0xc
    float forceReadyTime; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SLandingCommunicationParams
// Size: 0x18
// VTable: 0x149a055f8
struct SLandingCommunicationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: JumpDriveOpeningParams
// Size: 0x10
// VTable: 0x149a13320
struct JumpDriveOpeningParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float shieldPulseMaxTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SPowerSegmentResourceUnit
// Size: 0x10
// VTable: 0x1499a15e0
struct SPowerSegmentResourceUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t units; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SQedVisualGraphTransitionTypeParams
// Size: 0x8
// VTable: 0x149a55088
struct SQedVisualGraphTransitionTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SQuantumServiceBeaconQTPointParams
// Size: 0x18
// VTable: 0x149a54f08
struct SQuantumServiceBeaconQTPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MissionVariableBoolean
// Size: 0x30
// VTable: 0x149971610
struct MissionVariableBoolean {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool value; // Offset: 0x28
    uint8_t _pad_3[0x7]; // Offset: 0x29
};

// Original name: BuildingBlocks_TriggerModifyInt
// Size: 0x20
// VTable: 0x14998d298
struct BuildingBlocks_TriggerModifyInt {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* variableName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int64_t value; // Offset: 0x18
};

// Original name: SSpreadParams
// Size: 0x20
// VTable: 0x149a601f0
struct SSpreadParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float min; // Offset: 0x8
    float max; // Offset: 0xc
    float firstAttack; // Offset: 0x10
    float attack; // Offset: 0x14
    float decay; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: AreaAlignmentSlotTypeParams
// Size: 0x8
// VTable: 0x149a91e88
struct AreaAlignmentSlotTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_VehicleLandingGearState
// Size: 0x10
// VTable: 0x149a66a90
struct ControlHintCondition_VehicleLandingGearState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType landingGearState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BuildingBlocks_ComponentLabelProperties
// Size: 0x20
// VTable: 0x14998c748
struct BuildingBlocks_ComponentLabelProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool show; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CLocIdentifier* label; // Offset: 0x10
    ARDataType style; // Offset: 0x18
    ARDataType caseModifier; // Offset: 0x1c
};

// Original name: BaseMissionModifier
// Size: 0x38
// VTable: 0x14996af08
struct BaseMissionModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* modifierName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x1f]; // Offset: 0x19
};

// Original name: BuildingBlocks_FlashRendererPolicy
// Size: 0x10
// VTable: 0x149984eb8
struct BuildingBlocks_FlashRendererPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useFlashRenderThreadUpdate; // Offset: 0x8
    bool transformFrom3D; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: PersonalThoughtHologramAnimationParams
// Size: 0x20
// VTable: 0x149a999f0
struct PersonalThoughtHologramAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float selectedMaxScaling; // Offset: 0x8
    float scalingAnimationDuration; // Offset: 0xc
    float selectedMaxYaw; // Offset: 0x10
    float rotationAnimationRate; // Offset: 0x14
    float rotationRampDuration; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: EntityComponentRefineryUIProviderParams
// Size: 0x20
// VTable: 0x1499e1df0
struct EntityComponentRefineryUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t jobDescriptionLength; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SelectionTab
// Size: 0x18
// VTable: 0x149a1fc68
struct SelectionTab {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    bool vehicleTab; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: SJournalComponentParams
// Size: 0x18
// VTable: 0x14996c068
struct SJournalComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: Marker_AbilityAboveBelowIndicator
// Size: 0x10
// VTable: 0x149a4a638
struct Marker_AbilityAboveBelowIndicator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float aboveThreshold; // Offset: 0x8
    float belowThreshold; // Offset: 0xc
};

// Original name: ElectricalStateTemplateInternal
// Size: 0x10
// VTable: 0x149979550
struct ElectricalStateTemplateInternal {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType chargeMod; // Offset: 0x8
    float charge; // Offset: 0xc
};

// Original name: DownedConfig
// Size: 0x28
// VTable: 0x1499ff030
struct DownedConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float excessDamageToInstaKill; // Offset: 0x8
    float damageToInstaKillFromDowned; // Offset: 0xc
    float downedReviveTempFOVFadeInSpeed; // Offset: 0x10
    float downedReviveTempFOVFadeOutSpeed; // Offset: 0x14
    float downedReviveTempFOVDuration; // Offset: 0x18
    float downedReviveTempFOVScaleAdjustment; // Offset: 0x1c
    float landingZoneRescueTime; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SCItemControlPriorityExclusiveValue
// Size: 0x8
// VTable: 0x149a071d0
struct SCItemControlPriorityExclusiveValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCLoadingPlatformEntityReferences
// Size: 0x58
// VTable: 0x149a41d50
struct SCLoadingPlatformEntityReferences {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* loadingGate; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* loadingPlatform; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* frontGate; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* kiosk; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
    CryStringT* obstructionCheckBounds; // Offset: 0x48
    uint8_t _pad_5[0x8]; // Offset: 0x50
};

// Original name: SVectorFieldParams
// Size: 0x28
// VTable: 0x149a7b3e0
struct SVectorFieldParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float radius; // Offset: 0x18
    float width; // Offset: 0x1c
    float falloff; // Offset: 0x20
    float maxStrength; // Offset: 0x24
};

// Original name: PlayerChoiceMenuOption
// Size: 0x8
// VTable: 0x149a9f178
struct PlayerChoiceMenuOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DisplayState
// Size: 0x20
// VTable: 0x1499f9370
struct DisplayState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumValue; // Offset: 0x8
    float maximumValue; // Offset: 0xc
    float displayDuration; // Offset: 0x10
    ARDataType activeRange; // Offset: 0x14
    bool enabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: BuildingBlocks_Node
// Size: 0x30
// VTable: 0x1499804c8
struct BuildingBlocks_Node {
    uint8_t _pad_0[0x30]; // Offset: 0x0
};

// Original name: ExtinguishType_Base
// Size: 0x8
// VTable: 0x14997b1e0
struct ExtinguishType_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DrugEfficacy
// Size: 0x18
// VTable: 0x149a72bc8
struct DrugEfficacy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxDose; // Offset: 0x8
    float BDLMultiplier; // Offset: 0xc
    float minsPerDosageMultiplier; // Offset: 0x10
    float ValuePerDosageMultiplier; // Offset: 0x14
};

// Original name: ControlHints_HintDisplayInfo
// Size: 0x38
// VTable: 0x149a67440
struct ControlHints_HintDisplayInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool overrideName; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CLocIdentifier* name; // Offset: 0x10
    bool includeSeparator; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    CLocIdentifier* separatorInputName; // Offset: 0x20
    CryStringT* separatorIconPath; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: EntityEffectSystem_LightType
// Size: 0x10
// VTable: 0x149999e40
struct EntityEffectSystem_LightType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: LadderLookAroundParams
// Size: 0x10
// VTable: 0x149a9ee48
struct LadderLookAroundParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendBackToClimbingLerpSpeed; // Offset: 0x8
    float blendBackToClimbingLimitAngle; // Offset: 0xc
};

// Original name: SMissionLocationComponentParams
// Size: 0x18
// VTable: 0x14996c9d0
struct SMissionLocationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SkylineComponentParams
// Size: 0x18
// VTable: 0x149a4ab68
struct SkylineComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AILookComponentParams
// Size: 0x18
// VTable: 0x149a640a0
struct AILookComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MissionLocationValidation
// Size: 0x8
// VTable: 0x149976330
struct MissionLocationValidation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_VehicleMiningLaserMode
// Size: 0x10
// VTable: 0x149a66df0
struct ControlHintCondition_VehicleMiningLaserMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType miningLaserMode; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SInteractionStateDef
// Size: 0x58
// VTable: 0x149a45468
struct SInteractionStateDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* stateTypeName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* stateName; // Offset: 0x18
    uint8_t _pad_2[0x38]; // Offset: 0x20
};

// Original name: SActorLocomotionFeatureDef_Slope
// Size: 0x10
// VTable: 0x149ab1d30
struct SActorLocomotionFeatureDef_Slope {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableStairAnimSet; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: PersonalThoughtInventoryFilter
// Size: 0x28
// VTable: 0x149a9a3b0
struct PersonalThoughtInventoryFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayIconPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* name; // Offset: 0x18
    bool disableForFPSKiosk; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
};

// Original name: FixedSizedCircleTraversalCostShapeConfig
// Size: 0x10
// VTable: 0x1499eca10
struct FixedSizedCircleTraversalCostShapeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCSeatActorAttachmentParams
// Size: 0x28
// VTable: 0x149a7d7a0
struct SCSeatActorAttachmentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* boneName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    ARDataType stance; // Offset: 0x20
    uint8_t _pad_3[0x4]; // Offset: 0x24
};

// Original name: PatrolPointComponentParams
// Size: 0x18
// VTable: 0x1499c85f8
struct PatrolPointComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: HierarchicalContextualData
// Size: 0x10
// VTable: 0x1499b48d8
struct HierarchicalContextualData {
    uint8_t _pad_0[0x10]; // Offset: 0x0
};

// Original name: SDespawnRule_OnFallBelow
// Size: 0x18
// VTable: 0x149a404c0
struct SDespawnRule_OnFallBelow {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float ruleDelaySeconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float distance; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SWetnessAccumulatorParams
// Size: 0x38
// VTable: 0x1499d7a08
struct SWetnessAccumulatorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float InitialAccumulationRatio; // Offset: 0x8
    bool AccumulateWhenUnstreamed; // Offset: 0xc
    bool AccumulateOnlyAfterTractorBeam; // Offset: 0xd
    bool AccumulateOnlyWhenAttached; // Offset: 0xe
    bool StopAccumulationWhenAttached; // Offset: 0xf
    float AccumulationEventThreshold; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    CryStringT* PortTags; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* RequiredPortTags; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: BuildingBlocks_ColorBase
// Size: 0x8
// VTable: 0x149981f88
struct BuildingBlocks_ColorBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: VolumeShape_Sphere
// Size: 0x10
// VTable: 0x14997b170
struct VolumeShape_Sphere {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_BindingsListIndex
// Size: 0x50
// VTable: 0x149980ee8
struct BuildingBlocks_BindingsListIndex {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: BuildingBlocks_PreviewSceneAugmentedRealityRtt
// Size: 0x20
// VTable: 0x1499948b8
struct BuildingBlocks_PreviewSceneAugmentedRealityRtt {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType renderLayer; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    bool cardsUseStageRadius; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: BuildingBlocks_BindingsNumberBuiltInVariable
// Size: 0x58
// VTable: 0x149980f40
struct BuildingBlocks_BindingsNumberBuiltInVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
};

// Original name: SCIGTestB
// Size: 0x18
// VTable: 0x1499dab60
struct SCIGTestB {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool bBase; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool bB; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
};

// Original name: SEntityDynamicLocationProperties
// Size: 0x10
// VTable: 0x149a8f4b0
struct SEntityDynamicLocationProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool dynamicallyUpdatePersistanceLocation; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SModHealth
// Size: 0x8
// VTable: 0x1499fb638
struct SModHealth {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCSeatAccessInteractionConditionParams
// Size: 0x28
// VTable: 0x149a5cf90
struct SCSeatAccessInteractionConditionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType idle; // Offset: 0x8
    ARDataType landed; // Offset: 0xc
    ARDataType docked; // Offset: 0x10
    ARDataType zeroG; // Offset: 0x14
    ARDataType landingGearDown; // Offset: 0x18
    ARDataType landingGearUp; // Offset: 0x1c
    ARDataType inQuantum; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: MissionScenarioCyclePhase
// Size: 0x30
// VTable: 0x1499717e0
struct MissionScenarioCyclePhase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    uint32_t duration_seconds; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
};

// Original name: SNonTeamHostility
// Size: 0x18
// VTable: 0x1499c8bf0
struct SNonTeamHostility {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AnimationComponentParams
// Size: 0x18
// VTable: 0x1499cc050
struct AnimationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: UIGraph_BindingsArrayDockComponent
// Size: 0x28
// VTable: 0x149a5bf98
struct UIGraph_BindingsArrayDockComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* tagName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* arrayName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: Ang3
// Size: 0x18
// VTable: 0x1499ad180
struct Ang3 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float x; // Offset: 0x8
    float y; // Offset: 0xc
    float z; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SLocalPlayerHapticParams
// Size: 0x18
// VTable: 0x149a68b08
struct SLocalPlayerHapticParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LinkedStatRulePassAlways
// Size: 0x8
// VTable: 0x1499fd950
struct LinkedStatRulePassAlways {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CraftingRecipeCosts_Base
// Size: 0x8
// VTable: 0x1499b8640
struct CraftingRecipeCosts_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: HintMarkerParams
// Size: 0x18
// VTable: 0x149a12708
struct HintMarkerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: CommonTargetVisibilityScore
// Size: 0x10
// VTable: 0x1499b6f98
struct CommonTargetVisibilityScore {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float isVisible; // Offset: 0x8
    float isNotVisible; // Offset: 0xc
};

// Original name: SCItemInputAutoAimParams
// Size: 0x28
// VTable: 0x149a7f560
struct SCItemInputAutoAimParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float BaseMuzzleAngleThreshold; // Offset: 0x8
    float AutoAimMuzzleAngleThreshold; // Offset: 0xc
    float AutoAimGimbalAngleThreshold; // Offset: 0x10
    float AutoGimbalMaxAllowedTurretSpeed; // Offset: 0x14
    float AutoGimbalLimitedTurretSpeedInnerAngle; // Offset: 0x18
    float AutoGimbalLimitedTurretSpeedOuterAngle; // Offset: 0x1c
    float AutoAimPowerDrawRatio; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SServiceBeaconNotificationOverride
// Size: 0x10
// VTable: 0x149aae540
struct SServiceBeaconNotificationOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* message; // Offset: 0x8
};

// Original name: ServiceBeaconInterfaceParams
// Size: 0x18
// VTable: 0x1499cf1e8
struct ServiceBeaconInterfaceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AIMeleeAttack
// Size: 0x38
// VTable: 0x149a027c8
struct AIMeleeAttack {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType attackType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* globalFragmentTags; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    float minDistanceToTarget2d; // Offset: 0x20
    float maxDistanceToTarget2d; // Offset: 0x24
    float minRelativeTargetHeight; // Offset: 0x28
    float maxRelativeTargetHeight; // Offset: 0x2c
    float maxAngleToTarget; // Offset: 0x30
    bool ignoreAttackObstructionClearance; // Offset: 0x34
    uint8_t _pad_3[0x3]; // Offset: 0x35
};

// Original name: VendingMachineItemParams
// Size: 0x18
// VTable: 0x149a2d688
struct VendingMachineItemParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCDynamicRigIntensityParams
// Size: 0x20
// VTable: 0x1499e0c88
struct SCDynamicRigIntensityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float referenceLightMinIntensity; // Offset: 0x8
    float referenceLightMaxIntensity; // Offset: 0xc
    float rigLightMinIntensity; // Offset: 0x10
    float rigLightMaxIntensity; // Offset: 0x14
    float backupIntensity; // Offset: 0x18
    float maxSaturation; // Offset: 0x1c
};

// Original name: BodyPart
// Size: 0x28
// VTable: 0x149a81020
struct BodyPart {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType partHealthStat; // Offset: 0x8
    ARDataType partWearStat; // Offset: 0xc
    CryStringT* jointName; // Offset: 0x10
    uint8_t _pad_1[0x10]; // Offset: 0x18
};

// Original name: MissionPropertyValue_DeliveryOrder
// Size: 0x8
// VTable: 0x14996a738
struct MissionPropertyValue_DeliveryOrder {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeDropTargetPolicy
// Size: 0x10
// VTable: 0x14998baf0
struct BuildingBlocks_FieldModifierEnumeratedTypeDropTargetPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: TriggeredWarningClear
// Size: 0x18
// VTable: 0x1499fb188
struct TriggeredWarningClear {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    ARDataType messageState; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: AudioBreathStyleBaseNode
// Size: 0x8
// VTable: 0x149a6d390
struct AudioBreathStyleBaseNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: STurretGlobalParams
// Size: 0x38
// VTable: 0x149a5b0f0
struct STurretGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool pointerModeAllowed; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float pointerModeInputSmoothing; // Offset: 0xc
    float pointerModeInnerAngle; // Offset: 0x10
    float pointerModeInnerAngleTurretSmoothing; // Offset: 0x14
    float pointerModeInnerAngleMaxSpeedModifier; // Offset: 0x18
    float pointerModeMiddleAngle; // Offset: 0x1c
    float pointerModeOuterAngle; // Offset: 0x20
    float pointerModeOuterAngleTurretSmoothing; // Offset: 0x24
    float pointerModeMaxDegPerSec; // Offset: 0x28
    bool relativeInputAllowed; // Offset: 0x2c
    uint8_t _pad_2[0x3]; // Offset: 0x2d
    float relativeInputSmoothing; // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
};

// Original name: SphereAreaAlignmentSlotTypeParams
// Size: 0x10
// VTable: 0x149a91f60
struct SphereAreaAlignmentSlotTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AtmosphereBehavior_TurbulenceParams
// Size: 0x18
// VTable: 0x14997a920
struct AtmosphereBehavior_TurbulenceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float frequencyMultiplier; // Offset: 0x8
    float amplitudeMultiplier; // Offset: 0xc
    float vibrationMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: UIWorldDisplayRotationModeParams
// Size: 0x20
// VTable: 0x149aa9868
struct UIWorldDisplayRotationModeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType defaultPlaneAlignment; // Offset: 0x8
    float defaultPitchRotation; // Offset: 0xc
    ARDataType defaultFollowRotationMode; // Offset: 0x10
    bool defaultUseInputRotation; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    float transitionDuration; // Offset: 0x18
    ARDataType transitionInterpolationMode; // Offset: 0x1c
    uint8_t _pad_2[0x3]; // Offset: 0x1d
};

// Original name: SSpecializedDataEntry
// Size: 0x8
// VTable: 0x149a91ce0
struct SSpecializedDataEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AlignmentSlotAreaHelperComponentParams
// Size: 0x18
// VTable: 0x149a82bd8
struct AlignmentSlotAreaHelperComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AudioSwitch
// Size: 0x38
// VTable: 0x149a88500
struct AudioSwitch {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* switch_; /* switch */ // Offset: 0x8
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LinkedStatRulePassAlwaysPositive
// Size: 0x8
// VTable: 0x1499fd958
struct LinkedStatRulePassAlwaysPositive {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: UnitTest_ClassB
// Size: 0x38
// VTable: 0x149a88e80
struct UnitTest_ClassB {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* myBaseString; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* myClassA; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* myClassB; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: ItemTypeModifier
// Size: 0x18
// VTable: 0x149a3ebe0
struct ItemTypeModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Type; // Offset: 0x8
    ARDataType SubType; // Offset: 0xc
    float matchPercentage; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SuggestedFOVSetup
// Size: 0x10
// VTable: 0x1499b2f38
struct SuggestedFOVSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float suggestedFOV; // Offset: 0x8
    ARDataType mode; // Offset: 0xc
};

// Original name: ItemPortViewInformationByName
// Size: 0x18
// VTable: 0x149aaa820
struct ItemPortViewInformationByName {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: DamageResistanceEntry
// Size: 0x10
// VTable: 0x1499adc88
struct DamageResistanceEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Multiplier; // Offset: 0x8
    float Threshold; // Offset: 0xc
};

// Original name: LightBoxComponentParams
// Size: 0x18
// VTable: 0x1499a4dd0
struct LightBoxComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ControlHintCondition_ActorAimStanceState
// Size: 0x10
// VTable: 0x149a65d50
struct ControlHintCondition_ActorAimStanceState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType aimStanceState; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AttentionTargetComponentParams
// Size: 0x20
// VTable: 0x149a02490
struct AttentionTargetComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float attackerScore; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: TimeValue_Base
// Size: 0x8
// VTable: 0x1499b31f0
struct TimeValue_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AISpecialRangedAttackConfig
// Size: 0x30
// VTable: 0x149a02d10
struct AISpecialRangedAttackConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* attackName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float maxElevationDeg; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    CryStringT* verticalAttackFragmentTag; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
};

// Original name: Vec2
// Size: 0x10
// VTable: 0x1499acf58
struct Vec2 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float x; // Offset: 0x8
    float y; // Offset: 0xc
};

// Original name: RestrictedAreaAutopilotParams
// Size: 0x10
// VTable: 0x149a1c3e0
struct RestrictedAreaAutopilotParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumSpeed; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SEntityContextBase
// Size: 0x8
// VTable: 0x1499a6788
struct SEntityContextBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEntityBuoyancyParams
// Size: 0x18
// VTable: 0x1499e6478
struct SEntityBuoyancyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool buoyantInAir; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float waterDamping; // Offset: 0xc
    float waterDensity; // Offset: 0x10
    float waterResistance; // Offset: 0x14
};

// Original name: LightStateParams_Off
// Size: 0x18
// VTable: 0x1499a3e20
struct LightStateParams_Off {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* presetTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SBBDynamicPropertyBool
// Size: 0x10
// VTable: 0x149a95ff0
struct SBBDynamicPropertyBool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool value; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SignatureTypeGlobalParams
// Size: 0x18
// VTable: 0x1499c4138
struct SignatureTypeGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    bool allowDampening; // Offset: 0x10
    bool allowGenerateUnknownContacts; // Offset: 0x11
    bool allowVisibleContacts; // Offset: 0x12
    bool allowGenerateBlobs; // Offset: 0x13
    float nearbyAmbientMultiplier; // Offset: 0x14
};

// Original name: BuildingBlocks_BindingsLocalizedComponentParameter
// Size: 0x78
// VTable: 0x149981310
struct BuildingBlocks_BindingsLocalizedComponentParameter {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    CryStringT* name; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    ARDataType parameter; // Offset: 0x60
    uint8_t _pad_2[0x4]; // Offset: 0x64
    CLocIdentifier* defaultValue; // Offset: 0x68
    uint8_t _pad_3[0x8]; // Offset: 0x70
};

// Original name: CraftingResearch_Base_NonRef
// Size: 0x8
// VTable: 0x1499b8b78
struct CraftingResearch_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: LegacyCraftingRecipe_Base
// Size: 0x8
// VTable: 0x149a0f080
struct LegacyCraftingRecipe_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: Marker_AbilityDistanceVisibility
// Size: 0x8
// VTable: 0x149a4a938
struct Marker_AbilityDistanceVisibility {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ConstantDOFGrid
// Size: 0x18
// VTable: 0x149a7ccf8
struct ConstantDOFGrid {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t verticalGridSize; // Offset: 0x8
    int32_t horizontalGridSize; // Offset: 0xc
    float verticalSpacing; // Offset: 0x10
    float horizontalSpacing; // Offset: 0x14
};

// Original name: SRemoteRigidEntityControllerOneHandedParams
// Size: 0x28
// VTable: 0x1499d0038
struct SRemoteRigidEntityControllerOneHandedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* boneToIgnore; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* animationVariableToBlock; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: LadderJumpParams
// Size: 0x20
// VTable: 0x149a9edc8
struct LadderJumpParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float yawCutoffAngle; // Offset: 0x8
    float minForwardVelocity; // Offset: 0xc
    float maxForwardVelocity; // Offset: 0x10
    float pitchCutoffAngle; // Offset: 0x14
    float minUpVelocity; // Offset: 0x18
    float maxUpVelocity; // Offset: 0x1c
};

// Original name: SDebrisEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a68
struct SDebrisEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SItemPortDefExtensionBase
// Size: 0x8
// VTable: 0x1499af908
struct SItemPortDefExtensionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCLoadingPlatformLightGroupParams
// Size: 0x28
// VTable: 0x149a41c50
struct SCLoadingPlatformLightGroupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* lightGroupEntityReference; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType platformIdleClosedLightState; // Offset: 0x18
    ARDataType platformInTransitLightState; // Offset: 0x1c
    ARDataType platformIdleOpenLightState; // Offset: 0x20
    ARDataType platformObstructedLightState; // Offset: 0x24
};

// Original name: FireHazardAfterglowProperties
// Size: 0x30
// VTable: 0x14997c470
struct FireHazardAfterglowProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maximumTemperature; // Offset: 0x8
    float temperatureMultiplier; // Offset: 0xc
    float burnMaskEdgesStart; // Offset: 0x10
    float burnMaskEdgesEnd; // Offset: 0x14
    float incandescenceStrength; // Offset: 0x18
    float edgesGlowStrength; // Offset: 0x1c
    float edgesPerimeterStrength; // Offset: 0x20
    float edgesEmbersStrength; // Offset: 0x24
    float maximumLuminance; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: ControlHintCondition_VehicleSystems
// Size: 0x10
// VTable: 0x149a667f0
struct ControlHintCondition_VehicleSystems {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType systems; // Offset: 0x8
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: SWeaponConditionBase
// Size: 0x8
// VTable: 0x149a6e5e0
struct SWeaponConditionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GameRulesStateBaseParams
// Size: 0x18
// VTable: 0x149a39440
struct GameRulesStateBaseParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ItemResourceConversionModifierBase
// Size: 0x8
// VTable: 0x1499a73e8
struct ItemResourceConversionModifierBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCloseKioskInteractionGameplayTrigger
// Size: 0x8
// VTable: 0x1499faab8
struct SCloseKioskInteractionGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SQuantumDriveEffectBaseParams
// Size: 0x8
// VTable: 0x149a51158
struct SQuantumDriveEffectBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SWeaponActionFireTractorBeamVehicleBased
// Size: 0x20
// VTable: 0x149a78a18
struct SWeaponActionFireTractorBeamVehicleBased {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool aggregatedShields; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float shieldToForceRatio; // Offset: 0xc
    float maxShield; // Offset: 0x10
    float impactRadius; // Offset: 0x14
    float thrusterPassModifierLinear; // Offset: 0x18
    float thrusterPassModifierAngular; // Offset: 0x1c
};

// Original name: PersonalThoughtInventoryActionsParams
// Size: 0x28
// VTable: 0x149a99f18
struct PersonalThoughtInventoryActionsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* dropItemActionThumbnail; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* emptyBackpackActionThumbnail; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: LightStateParams
// Size: 0x8
// VTable: 0x1499a3dc0
struct LightStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ElectricalState
// Size: 0x10
// VTable: 0x149979548
struct ElectricalState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType chargeMod; // Offset: 0x8
    float charge; // Offset: 0xc
};

// Original name: SINotificationsModule
// Size: 0x18
// VTable: 0x1499ba1b8
struct SINotificationsModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ApplyStatusBuff
// Size: 0x8
// VTable: 0x1499fc508
struct ApplyStatusBuff {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FPSReticle_Config
// Size: 0x38
// VTable: 0x149aa8118
struct FPSReticle_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t AimAveragePoints; // Offset: 0x8
    uint8_t _pad_1[0x1]; // Offset: 0x9
    uint16_t FlashWidth; // Offset: 0xa
    uint16_t FlashHeight; // Offset: 0xc
    uint8_t _pad_2[0x2]; // Offset: 0xe
    float SpreadSize; // Offset: 0x10
    float SpreadScaleMax; // Offset: 0x14
    float SpreadScaleInterpNeg; // Offset: 0x18
    float SpreadScaleInterpPos; // Offset: 0x1c
    float SpreadAlphaInterpNeg; // Offset: 0x20
    float SpreadAlphaInterpPos; // Offset: 0x24
    float HiddenAlphaInterpNeg; // Offset: 0x28
    float MoveAlphaMinimum; // Offset: 0x2c
    float MoveAlphaRange; // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
};

// Original name: BuildingBlocks_BindingsStringComponentParameter
// Size: 0x80
// VTable: 0x149981260
struct BuildingBlocks_BindingsStringComponentParameter {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    CryStringT* name; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    ARDataType parameter; // Offset: 0x60
    uint8_t _pad_2[0x4]; // Offset: 0x64
    CryStringT* defaultValue; // Offset: 0x68
    uint8_t _pad_3[0x10]; // Offset: 0x70
};

// Original name: ScanCustomValue
// Size: 0x8
// VTable: 0x1499c7258
struct ScanCustomValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CinematicConversationSettings
// Size: 0x18
// VTable: 0x149a8ff88
struct CinematicConversationSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float widthAspectRatio; // Offset: 0x8
    float heightAspectRatio; // Offset: 0xc
    float lerpInTime; // Offset: 0x10
    float lerpOutTime; // Offset: 0x14
};

// Original name: ControlHints_Input
// Size: 0x10
// VTable: 0x149a674a0
struct ControlHints_Input {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType activationMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_ActorHeldItemInteractionState
// Size: 0x58
// VTable: 0x149a662b8
struct ControlHintCondition_ActorHeldItemInteractionState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* heldItemPrimaryActionName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* heldItemSecondaryActionName; // Offset: 0x18
    uint8_t _pad_2[0x38]; // Offset: 0x20
};

// Original name: Burst
// Size: 0x20
// VTable: 0x1499b6e18
struct Burst {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float minRateOfFire; // Offset: 0xc
    float minBurstLength; // Offset: 0x10
    float minShotCount; // Offset: 0x14
    float gapLengthMultiplier; // Offset: 0x18
    float burstVariationMultiplier; // Offset: 0x1c
};

// Original name: CollisionMFXEntityParams
// Size: 0x18
// VTable: 0x149998980
struct CollisionMFXEntityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* customEffect; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ControlHintCondition_VehicleMasterMode
// Size: 0x10
// VTable: 0x149a66cd0
struct ControlHintCondition_VehicleMasterMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType masterMode; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: DialogueContextEntry
// Size: 0x8
// VTable: 0x149a8cb08
struct DialogueContextEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: InnerThought_CycleAnimRotateZ
// Size: 0x20
// VTable: 0x149a98738
struct InnerThought_CycleAnimRotateZ {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    float length; // Offset: 0x10
    float amount; // Offset: 0x14
    float stagger; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SSequencerInteractionTask
// Size: 0x38
// VTable: 0x1499a0a68
struct SSequencerInteractionTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* interaction; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    ARDataType triggerType; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: SInteractionLinkHighlightNode
// Size: 0x8
// VTable: 0x1499a5c58
struct SInteractionLinkHighlightNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ScreenEffects_ParamValue_Float
// Size: 0x10
// VTable: 0x14999c0f8
struct ScreenEffects_ParamValue_Float {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    bool limitStacking; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: ClothingTypeHeadWear
// Size: 0x10
// VTable: 0x149aa19d8
struct ClothingTypeHeadWear {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType HairTag; // Offset: 0x8
    bool maskFacialHair; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: AtmosphereStateHumidityTemplate
// Size: 0x10
// VTable: 0x14997a5a0
struct AtmosphereStateHumidityTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float humidity; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeStrokeJointStyle
// Size: 0x10
// VTable: 0x14998bc10
struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeJointStyle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_ActorSkeleton
// Size: 0x10
// VTable: 0x149a65e70
struct ControlHintCondition_ActorSkeleton {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType skeleton; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SecurityNetworkPermissions
// Size: 0x10
// VTable: 0x149974128
struct SecurityNetworkPermissions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType access; // Offset: 0x8
    ARDataType trespass; // Offset: 0xc
};

// Original name: EAUIMulticrewTypeOptionParams
// Size: 0x18
// VTable: 0x149a1fec8
struct EAUIMulticrewTypeOptionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    ARDataType type_; /* type */ // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: BasicStatusEffectApplicationType
// Size: 0x10
// VTable: 0x1499fc770
struct BasicStatusEffectApplicationType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType valueType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SWeaponAmmoRepoolParams
// Size: 0x18
// VTable: 0x149a5f750
struct SWeaponAmmoRepoolParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t bulletsPerSecond; // Offset: 0x8
    float unstowMagDuration; // Offset: 0xc
    float fullMagMergeDuration; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: AreaEllipsoidComponentParams
// Size: 0x28
// VTable: 0x149ac4a28
struct AreaEllipsoidComponentParams {
    uint8_t _pad_0[0x28]; // Offset: 0x0
};

// Original name: UIGraph_ArenaCommanderVehicleLoadoutEditorContextComponent
// Size: 0x8
// VTable: 0x149a581b0
struct UIGraph_ArenaCommanderVehicleLoadoutEditorContextComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: InteriorMapSectionDefinition
// Size: 0x18
// VTable: 0x149a49218
struct InteriorMapSectionDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    bool restrictViewBounds; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: ControlHintCondition_ActorHeldItemType
// Size: 0x10
// VTable: 0x149a65e10
struct ControlHintCondition_ActorHeldItemType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType heldItem; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SThrusterMisfireParams
// Size: 0x18
// VTable: 0x149a1dba0
struct SThrusterMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxThrustRatio; // Offset: 0x8
    float minThrustRatio; // Offset: 0xc
    float misfireThrustToOffTimeRatio; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: EntityComponentRttAspectMFDShieldsParams
// Size: 0x28
// VTable: 0x1499c9c70
struct EntityComponentRttAspectMFDShieldsParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType targetRttSlot; // Offset: 0x18
    float aspectRatio; // Offset: 0x1c
    float labelRelativeProximityThreshold; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: TriggerSubConditionInteractionStateDef
// Size: 0x48
// VTable: 0x149a89f18
struct TriggerSubConditionInteractionStateDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* entitySuperGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* siblingFailRule; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* stateType; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* requiredState; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
};

// Original name: NavSplineAnchorPointComponentParams
// Size: 0x18
// VTable: 0x149a04ac0
struct NavSplineAnchorPointComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: StatusMaskedRetriggerSetupBase
// Size: 0x8
// VTable: 0x1499fd568
struct StatusMaskedRetriggerSetupBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AudioGroupComponentParams
// Size: 0x18
// VTable: 0x1499a9d10
struct AudioGroupComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ItemFuelControllerParams
// Size: 0x20
// VTable: 0x149a7fda0
struct ItemFuelControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* message; // Offset: 0x18
};

// Original name: SEntityDensityClassOverwritesBase
// Size: 0x8
// VTable: 0x149ac44e8
struct SEntityDensityClassOverwritesBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: VehicleRole
// Size: 0x10
// VTable: 0x1499aaa40
struct VehicleRole {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
};

// Original name: BindingsOperations_WaveformShapeSquare
// Size: 0x10
// VTable: 0x1499888a0
struct BindingsOperations_WaveformShapeSquare {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float interval; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AIActorLocomotionParams
// Size: 0x10
// VTable: 0x1499d4c50
struct AIActorLocomotionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useSplineTransitions; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SViewDistanceRatioParams
// Size: 0x10
// VTable: 0x1499a16c0
struct SViewDistanceRatioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t viewDistRatio; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: LinkedStatBase
// Size: 0x10
// VTable: 0x1499fdce0
struct LinkedStatBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType linkedStat; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: LightFlickerWaveLinearParams
// Size: 0x18
// VTable: 0x1499e11a0
struct LightFlickerWaveLinearParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxDistance; // Offset: 0x8
    float speed; // Offset: 0xc
    bool startFromEntity; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: SHackingThreatLevelConditionNodeSwapped
// Size: 0x10
// VTable: 0x149a2cc00
struct SHackingThreatLevelConditionNodeSwapped {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isIntruder; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t pointsAdded; // Offset: 0xc
};

// Original name: CameraBlendConfig
// Size: 0x10
// VTable: 0x1499b1740
struct CameraBlendConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool allowBlendFrom; // Offset: 0x8
    bool allowBlendTo; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float blendingToTime; // Offset: 0xc
};

// Original name: SInteractableEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a90
struct SInteractableEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MissionInitParamActivity
// Size: 0x28
// VTable: 0x149975b60
struct MissionInitParamActivity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* value; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: HarvestableClusterParams
// Size: 0x20
// VTable: 0x1499eeeb0
struct HarvestableClusterParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float relativeProbability; // Offset: 0x8
    int32_t minSize; // Offset: 0xc
    int32_t maxSize; // Offset: 0x10
    float minProximity; // Offset: 0x14
    float maxProximity; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: ControlHintAlwaysDisplayCondition
// Size: 0x8
// VTable: 0x149a672d8
struct ControlHintAlwaysDisplayCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_StyleSelectorConditionType
// Size: 0x18
// VTable: 0x14998d060
struct BuildingBlocks_StyleSelectorConditionType {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: LightFadeParams
// Size: 0x18
// VTable: 0x1499a4748
struct LightFadeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minDistance; // Offset: 0x8
    float minFade; // Offset: 0xc
    float maxDistance; // Offset: 0x10
    float maxFade; // Offset: 0x14
};

// Original name: PersonalThoughtFavoriteSlot
// Size: 0x18
// VTable: 0x149a99de8
struct PersonalThoughtFavoriteSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
};

// Original name: PersonalThoughtInventoryMissionFilter
// Size: 0x28
// VTable: 0x149a9a480
struct PersonalThoughtInventoryMissionFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayIconPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* name; // Offset: 0x18
    bool disableForFPSKiosk; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
};

// Original name: BuildingBlocks_TriggerModifyBool
// Size: 0x20
// VTable: 0x14998d398
struct BuildingBlocks_TriggerModifyBool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* variableName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool value; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeModularKitCaseModifier
// Size: 0x10
// VTable: 0x14998c498
struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitCaseModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    ARDataType paramField; // Offset: 0xc
};

// Original name: SReputationStandingParams
// Size: 0x60
// VTable: 0x149a95de0
struct SReputationStandingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CLocIdentifier* displayName; // Offset: 0x28
    CLocIdentifier* perkDescription; // Offset: 0x30
    CryStringT* icon; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    int64_t minReputation; // Offset: 0x48
    int64_t driftReputation; // Offset: 0x50
    float driftTimeHours; // Offset: 0x58
    bool gated; // Offset: 0x5c
    uint8_t _pad_4[0x3]; // Offset: 0x5d
};

// Original name: CodeDrivenChatProviderSettings
// Size: 0x8
// VTable: 0x1499f9928
struct CodeDrivenChatProviderSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AtmosphereStateTemperatureTemplate
// Size: 0x10
// VTable: 0x14997a540
struct AtmosphereStateTemperatureTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float temperature; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCPlayerPUSpawningComponentParams
// Size: 0x18
// VTable: 0x149a7e650
struct SCPlayerPUSpawningComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ModifierInterpolator
// Size: 0x10
// VTable: 0x1499f6968
struct ModifierInterpolator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float startTime; // Offset: 0x8
    float duration; // Offset: 0xc
};

// Original name: EAWinOrLossAwardParams
// Size: 0x20
// VTable: 0x149a39820
struct EAWinOrLossAwardParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    int32_t winAward; // Offset: 0x10
    int32_t lossAward; // Offset: 0x14
    bool isTeamAward; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: RadarDeltaSignatureNotificationParams
// Size: 0x30
// VTable: 0x1499c3eb0
struct RadarDeltaSignatureNotificationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool requireLockedTarget; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CLocIdentifier* message; // Offset: 0x10
    CryStringT* iconPath; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float globalCooldown; // Offset: 0x28
    float individualCooldown; // Offset: 0x2c
};

// Original name: ItemAwardBase
// Size: 0x10
// VTable: 0x149972580
struct ItemAwardBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t amountToAward; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SRenderToTextureViewBaseParams
// Size: 0x18
// VTable: 0x1499f81d0
struct SRenderToTextureViewBaseParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BoidsCylindricalLimiterRule
// Size: 0x20
// VTable: 0x1499ec008
struct BoidsCylindricalLimiterRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float minRadius; // Offset: 0x10
    float maxRadius; // Offset: 0x14
    float height; // Offset: 0x18
    float effectDistance; // Offset: 0x1c
};

// Original name: ObjectiveRewardContribution_PercentOfMission
// Size: 0x10
// VTable: 0x14996e9c8
struct ObjectiveRewardContribution_PercentOfMission {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float percentContribution; // Offset: 0x8
    bool doPartialRewardPayout; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: VendingMachineShopParams
// Size: 0x18
// VTable: 0x149a42210
struct VendingMachineShopParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: RestrictedAreaHandlerParams
// Size: 0x18
// VTable: 0x149a1cc98
struct RestrictedAreaHandlerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SInteractionPointEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a88
struct SInteractionPointEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SShieldStunParams
// Size: 0x18
// VTable: 0x1499f3e68
struct SShieldStunParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minAlphaDamageRatio; // Offset: 0x8
    float maxAlphaDamageRatio; // Offset: 0xc
    float minStunTime; // Offset: 0x10
    float maxStunTime; // Offset: 0x14
};

// Original name: JumpTunnelCameraEffectParam
// Size: 0x10
// VTable: 0x1499f45c0
struct JumpTunnelCameraEffectParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float referenceValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PatrolGraphLinkComponentParams
// Size: 0x18
// VTable: 0x1499c8600
struct PatrolGraphLinkComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_StaticVariableBoolean
// Size: 0x20
// VTable: 0x14998a4e0
struct BuildingBlocks_StaticVariableBoolean {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool value; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: BlockedCursorParams
// Size: 0x10
// VTable: 0x149a8d410
struct BlockedCursorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType blockedCursor; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: CommunicationName
// Size: 0x18
// VTable: 0x14997e800
struct CommunicationName {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ExponentialDamage
// Size: 0x10
// VTable: 0x1499e19b0
struct ExponentialDamage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float exponent; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCLocalPlayerSocialConnectionComponentParams
// Size: 0x28
// VTable: 0x149a82950
struct SCLocalPlayerSocialConnectionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t maxSpeakersProximity; // Offset: 0x18
    int32_t maxSpeakersPrimary; // Offset: 0x1c
    bool reverseSpeakersList; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: BuildingBlocks_BindingsIntegerBuiltInVariable
// Size: 0x58
// VTable: 0x149980fa0
struct BuildingBlocks_BindingsIntegerBuiltInVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
};

// Original name: SFrontendGameModeButton
// Size: 0x48
// VTable: 0x1499f9b38
struct SFrontendGameModeButton {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType buttonEnum; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* buttonTitle; // Offset: 0x10
    CLocIdentifier* buttonDescription; // Offset: 0x18
    CryStringT* imagePath; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    CryStringT* moviePath; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
    bool isActive; // Offset: 0x40
    uint8_t _pad_4[0x7]; // Offset: 0x41
};

// Original name: SCItemCoolerControllerParams
// Size: 0x30
// VTable: 0x149a08f50
struct SCItemCoolerControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float ThermalConductivity; // Offset: 0x18
    float ThermalEmissivity; // Offset: 0x1c
    float SpecificHeatCapacity; // Offset: 0x20
    float Mass; // Offset: 0x24
    float SurfaceArea; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: ForceFeedbackEnvelope
// Size: 0x28
// VTable: 0x1499b4678
struct ForceFeedbackEnvelope {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* samples; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: CommunicationVariableBase
// Size: 0x20
// VTable: 0x14997f348
struct CommunicationVariableBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool global; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: SHazardAreaShapeParams
// Size: 0x8
// VTable: 0x149a2d050
struct SHazardAreaShapeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: S42CommendationRequirementBase
// Size: 0x8
// VTable: 0x149a36b38
struct S42CommendationRequirementBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FlightHUDUIMessage
// Size: 0x18
// VTable: 0x149aa1ee8
struct FlightHUDUIMessage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* message; // Offset: 0x8
    uint8_t priority; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: SEntityComponentAttachmentClusterParams
// Size: 0x18
// VTable: 0x149992ea8
struct SEntityComponentAttachmentClusterParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BreathingHelperComponentParams
// Size: 0x18
// VTable: 0x1499e7db0
struct BreathingHelperComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_StaticVariableString
// Size: 0x28
// VTable: 0x14998a600
struct BuildingBlocks_StaticVariableString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* value; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: ControlHintCondition_ActorStatusType
// Size: 0x10
// VTable: 0x149a65ff0
struct ControlHintCondition_ActorStatusType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType actorStatusType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_TransformerBase
// Size: 0x8
// VTable: 0x149991008
struct BuildingBlocks_TransformerBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BoidsOceanSurfaceRepelRule
// Size: 0x18
// VTable: 0x1499ec1c8
struct BoidsOceanSurfaceRepelRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float effectDistance; // Offset: 0x10
    bool belowOcean; // Offset: 0x14
    uint8_t _pad_2[0x3]; // Offset: 0x15
};

// Original name: BuildingBlocks_BindingsOperationBase
// Size: 0x50
// VTable: 0x1499804d0
struct BuildingBlocks_BindingsOperationBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: SObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e7f70
struct SObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: UIElementSoundEntry
// Size: 0x28
// VTable: 0x1499bb278
struct UIElementSoundEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* SoundID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* SoundPath; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SITeamsModule
// Size: 0x18
// VTable: 0x1499ba510
struct SITeamsModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SICamerasModule
// Size: 0x18
// VTable: 0x1499ba190
struct SICamerasModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ActorFootJointPairDef
// Size: 0x30
// VTable: 0x149ab07d8
struct ActorFootJointPairDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* leftFootJoint; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* rightFootJoint; // Offset: 0x18
    uint8_t _pad_2[0x10]; // Offset: 0x20
};

// Original name: BuildingBlocks_VirtualCursorPolicy
// Size: 0x10
// VTable: 0x149984e28
struct BuildingBlocks_VirtualCursorPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool hoverFrictionEnabled; // Offset: 0x8
    bool hoverStateEnabled; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: BuildingBlocks_ScrollPolicyBase
// Size: 0x8
// VTable: 0x149982160
struct BuildingBlocks_ScrollPolicyBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_Overflow
// Size: 0x20
// VTable: 0x149983bd0
struct BuildingBlocks_Overflow {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType overflow; // Offset: 0x8
    float widthFadeThreshold; // Offset: 0xc
    float heightFadeThreshold; // Offset: 0x10
    float depthFadeThreshold; // Offset: 0x14
    bool fadeXAxis; // Offset: 0x18
    bool fadeYAxis; // Offset: 0x19
    bool fadeZAxis; // Offset: 0x1a
    uint8_t _pad_1[0x5]; // Offset: 0x1b
};

// Original name: SCItemSeatHeadTrackingPositionLimitParams
// Size: 0x20
// VTable: 0x149a7e5d0
struct SCItemSeatHeadTrackingPositionLimitParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float leftRight; // Offset: 0x8
    float up; // Offset: 0xc
    float down; // Offset: 0x10
    float forward; // Offset: 0x14
    float backward; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: CraftingGameplayPropertyImpl_Base_Float
// Size: 0x8
// VTable: 0x1499b91f8
struct CraftingGameplayPropertyImpl_Base_Float {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SMovableLimits
// Size: 0x58
// VTable: 0x149a9cea0
struct SMovableLimits {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float veloctiyForwardClamp; // Offset: 0x8
    float veloctiyBackwardClamp; // Offset: 0xc
    float veloctiySideClamp; // Offset: 0x10
    float maxYawSpeed; // Offset: 0x14
    float maxLinearAcceleration; // Offset: 0x18
    float maxAngularAcceleration; // Offset: 0x1c
    float linearAccelerationEasingPower; // Offset: 0x20
    float linearAccelerationEasingMinSpeed; // Offset: 0x24
    float linearAccelerationEasingMaxSpeed; // Offset: 0x28
    float angularAccelerationEasingPower; // Offset: 0x2c
    float angularAccelerationEasingMinSpeed; // Offset: 0x30
    float angularAccelerationEasingMaxSpeed; // Offset: 0x34
    float rotLinModifier; // Offset: 0x38
    float lateralDamping; // Offset: 0x3c
    float yawDamping; // Offset: 0x40
    float leanMaxSlopeAngle; // Offset: 0x44
    float leanMultiplier; // Offset: 0x48
    bool allowSprint; // Offset: 0x4c
    uint8_t _pad_1[0x3]; // Offset: 0x4d
    float velocitySprintClamp; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
};

// Original name: SEAUIMessageComponentParams
// Size: 0x38
// VTable: 0x149a1f058
struct SEAUIMessageComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float lifetime; // Offset: 0x18
    int32_t maxAmountOfMessages; // Offset: 0x1c
    CryStringT* messageQueueIdentifier; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float fadeoutTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: SIntNumberComparer
// Size: 0x10
// VTable: 0x149a70008
struct SIntNumberComparer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t value; // Offset: 0x8
    ARDataType mode; // Offset: 0xc
};

// Original name: ObjectiveDisplayInfo
// Size: 0x28
// VTable: 0x14996dac0
struct ObjectiveDisplayInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* shortDescription; // Offset: 0x8
    CLocIdentifier* longDescription; // Offset: 0x10
    CLocIdentifier* objectiveMarkerLabel; // Offset: 0x18
    ARDataType category; // Offset: 0x20
    bool hideOnHUD; // Offset: 0x24
    uint8_t _pad_1[0x3]; // Offset: 0x25
};

// Original name: InventoryContainerGridCellSizeBase
// Size: 0x8
// VTable: 0x149a9df50
struct InventoryContainerGridCellSizeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DynamicInstancePropertiesParams
// Size: 0x18
// VTable: 0x149ac4248
struct DynamicInstancePropertiesParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCharacterCustomizerItemRandomizationParams
// Size: 0x10
// VTable: 0x149a0c5e0
struct SCharacterCustomizerItemRandomizationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float noItemProbability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: EntityComponentSpawnClosetAreaParams
// Size: 0x28
// VTable: 0x1499e4730
struct EntityComponentSpawnClosetAreaParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float spawnBoxSize; // Offset: 0x18
    float zMargin; // Offset: 0x1c
    float despawnTimeoutSeconds; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SDespawnRule
// Size: 0x10
// VTable: 0x149a403f0
struct SDespawnRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float ruleDelaySeconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_PreviewScreenWorldOrigin
// Size: 0x18
// VTable: 0x1499948a8
struct BuildingBlocks_PreviewScreenWorldOrigin {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType renderLayer; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: ObjectiveHandlerBase
// Size: 0x8
// VTable: 0x14996dac8
struct ObjectiveHandlerBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DirectRTT_PixelGridParams
// Size: 0x28
// VTable: 0x14993a388
struct DirectRTT_PixelGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* TexturePath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float Intensity; // Offset: 0x18
    float Tiling; // Offset: 0x1c
    float ScrollSpeed; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: BuildingBlocks_TriggerSubsumptionBroadcast
// Size: 0x28
// VTable: 0x14998d648
struct BuildingBlocks_TriggerSubsumptionBroadcast {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float eventRange; // Offset: 0x18
    uint8_t _pad_2[0xc]; // Offset: 0x1c
};

// Original name: SFlowGraphProxyParams
// Size: 0x28
// VTable: 0x149ac4970
struct SFlowGraphProxyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* flowgraphPath; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: InteriorMapWorldUIFocusPointPlanarGridParams
// Size: 0x20
// VTable: 0x149a49360
struct InteriorMapWorldUIFocusPointPlanarGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* materialPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float numDivisions; // Offset: 0x18
    float opacity; // Offset: 0x1c
};

// Original name: SecurityLoginInput
// Size: 0x28
// VTable: 0x14996f638
struct SecurityLoginInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* loginUsername; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* loginPassword; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: ItemResourceDynamicAmountThrusterFuel
// Size: 0x8
// VTable: 0x1499a8a70
struct ItemResourceDynamicAmountThrusterFuel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ThrowParams
// Size: 0x18
// VTable: 0x149a9fae0
struct ThrowParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float force; // Offset: 0x8
    float minSpeed; // Offset: 0xc
    float maxSpeed; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: CockpitRuleString
// Size: 0x30
// VTable: 0x1499b3840
struct CockpitRuleString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float priority; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    CryStringT* value; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
};

// Original name: ItemResourceNetworkDefaultPowerDistributionParams
// Size: 0x20
// VTable: 0x1499a1298
struct ItemResourceNetworkDefaultPowerDistributionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool powerDistPoolsFillMin; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float powerDistCoolerMin; // Offset: 0xc
    float powerDistPoolsProportion; // Offset: 0x10
    float poolDefaultWeapons; // Offset: 0x14
    float poolDefaultEngines; // Offset: 0x18
    float poolDefaultShields; // Offset: 0x1c
};

// Original name: DegradationTemperatureMultiplier
// Size: 0x10
// VTable: 0x1499e5b28
struct DegradationTemperatureMultiplier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumRatio; // Offset: 0x8
    float heatMultiplier; // Offset: 0xc
};

// Original name: SEntityTraversingNodeExecuteLinkAllTaggedInteractions
// Size: 0x8
// VTable: 0x1499a6570
struct SEntityTraversingNodeExecuteLinkAllTaggedInteractions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ForceFeedbackPattern
// Size: 0x28
// VTable: 0x1499b45f8
struct ForceFeedbackPattern {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* samples; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: Aiming
// Size: 0x50
// VTable: 0x1499b6cf0
struct Aiming {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float accuracyConeAngle; // Offset: 0x8
    float maxTargetAngle; // Offset: 0xc
    float maxTargetAngleInfluence; // Offset: 0x10
    float chanceOfHittingTarget; // Offset: 0x14
    float missileCooldownMin; // Offset: 0x18
    float missileCooldownMax; // Offset: 0x1c
    float countermeasureReactionDelayMin; // Offset: 0x20
    float countermeasureReactionDelayMax; // Offset: 0x24
    float countermeasureCooldownMin; // Offset: 0x28
    float countermeasureCooldownMax; // Offset: 0x2c
    float countermeasureLaunchChanceMin; // Offset: 0x30
    float countermeasureLaunchChanceIncreaseRatio; // Offset: 0x34
    float flareBurstSizeMultiplierMin; // Offset: 0x38
    float flareBurstSizeMultiplierMax; // Offset: 0x3c
    float defaultInAimAngleThreshold; // Offset: 0x40
    float disciplinedInAimAngleThreshold; // Offset: 0x44
    float unDisciplinedInAimAngleThreshold; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
};

// Original name: VoiceSingle
// Size: 0x18
// VTable: 0x14997eac0
struct VoiceSingle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* mannequinTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: AudioValueOutputBehaviourMicrophone
// Size: 0x18
// VTable: 0x149a95b30
struct AudioValueOutputBehaviourMicrophone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ProjectileProximityTriggerParams
// Size: 0x18
// VTable: 0x1499ce830
struct ProjectileProximityTriggerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float armTime; // Offset: 0x8
    float safeDistance; // Offset: 0xc
    float radius; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: DragCurveParams
// Size: 0x18
// VTable: 0x149a1ae08
struct DragCurveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float multiplier; // Offset: 0x8
    float dragForwardLevelFlight; // Offset: 0xc
    float dragMaximum; // Offset: 0x10
    float dragReverseFlight; // Offset: 0x14
};

// Original name: ActorFrostedVisorParams
// Size: 0x28
// VTable: 0x149a3d270
struct ActorFrostedVisorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float suitTemperatureMaxFrost; // Offset: 0x8
    float suitTemperatureMinFrost; // Offset: 0xc
    float visorWipeRemainingFrost; // Offset: 0x10
    float visorWipeTime; // Offset: 0x14
    float visorWipeFrostRegenDelayMin; // Offset: 0x18
    float visorWipeFrostRegenDelayMax; // Offset: 0x1c
    float visorIsFrostedThreshold; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SMissileLauncher
// Size: 0x20
// VTable: 0x149a73ba8
struct SMissileLauncher {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float soundRadius; // Offset: 0x8
    float detachVelocityRight; // Offset: 0xc
    float detachVelocityForward; // Offset: 0x10
    float detachVelocityUp; // Offset: 0x14
    float detachVelocityRoll; // Offset: 0x18
    bool canFireWithoutLock; // Offset: 0x1c
    bool igniteOnPylon; // Offset: 0x1d
    bool showHitIndicator; // Offset: 0x1e
    uint8_t _pad_1[0x1]; // Offset: 0x1f
};

// Original name: ActorStateData_LadderValidationParams
// Size: 0x10
// VTable: 0x149aad7f8
struct ActorStateData_LadderValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stateTimeout; // Offset: 0x8
    float divergeDistance; // Offset: 0xc
};

// Original name: EntityComponentFireArea
// Size: 0x20
// VTable: 0x14997cbb8
struct EntityComponentFireArea {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float repairRate; // Offset: 0x18
    float combustibility; // Offset: 0x1c
};

// Original name: SActorPhysicsCollisionParams
// Size: 0x10
// VTable: 0x149a69d18
struct SActorPhysicsCollisionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool damageActorsOnCollision; // Offset: 0x8
    bool damageVehiclesOnCollision; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: ScannableComponentParams
// Size: 0x18
// VTable: 0x1499c37b0
struct ScannableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SJumpPointAccessParams
// Size: 0x90
// VTable: 0x149a12a18
struct SJumpPointAccessParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float distanceForManualComms; // Offset: 0x18
    float distanceAllowedToJumpPoint; // Offset: 0x1c
    float timeGivenForInitiatingJump; // Offset: 0x20
    float timeBetweenJumps; // Offset: 0x24
    float timeForCompletePartyJump; // Offset: 0x28
    float timeGivenForCancellingJump; // Offset: 0x2c
    float timeShowingHUDMessages; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
    CLocIdentifier* greetingMessage; // Offset: 0x38
    CLocIdentifier* approachingJumpZoneMessage; // Offset: 0x40
    CLocIdentifier* inQueueMessage; // Offset: 0x48
    CLocIdentifier* partyLeaderEnteredQueueMessage; // Offset: 0x50
    CLocIdentifier* queuingOnlyForLeaderMessage; // Offset: 0x58
    CLocIdentifier* partyAlreadyInQueueMessage; // Offset: 0x60
    CLocIdentifier* startJumpMessage; // Offset: 0x68
    CLocIdentifier* lingeringMessage; // Offset: 0x70
    CLocIdentifier* removedPermissionMessage; // Offset: 0x78
    CLocIdentifier* illegalJumpMessage; // Offset: 0x80
    CLocIdentifier* partyInitiateJumpingMessage; // Offset: 0x88
};

// Original name: SJumpTunnelHostParams
// Size: 0x18
// VTable: 0x149a14940
struct SJumpTunnelHostParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: FireVoxelSelectionShape_Sphere
// Size: 0x10
// VTable: 0x14997cc48
struct FireVoxelSelectionShape_Sphere {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    float falloffExponent; // Offset: 0xc
};

// Original name: EAPlayableAreaMovementTypeParamsDef
// Size: 0x28
// VTable: 0x149a27d20
struct EAPlayableAreaMovementTypeParamsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType onExit; // Offset: 0x8
    float onExitDelay; // Offset: 0xc
    float onExitDelayPhaseChange; // Offset: 0x10
    float maxRedoutPercent; // Offset: 0x14
    float timeToMaxRedout; // Offset: 0x18
    float timeToMaxRedoutPhaseChange; // Offset: 0x1c
    bool ignoreAI; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: BuildingBlocks_StaticArrayDataBase
// Size: 0x18
// VTable: 0x14998a420
struct BuildingBlocks_StaticArrayDataBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SCItemDoorUserAnimationParams
// Size: 0x30
// VTable: 0x1499f1ed0
struct SCItemDoorUserAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useSyncedEnslavement; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* userAnimationDatabase; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* userScopeContext; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
};

// Original name: AIDebugDrawComponentParams
// Size: 0x18
// VTable: 0x149a38de0
struct AIDebugDrawComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeBorderTopLeftRadiusBehavior
// Size: 0x10
// VTable: 0x14998b4f0
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderTopLeftRadiusBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: EnvironmentLightFadeParams
// Size: 0x18
// VTable: 0x1499a39a8
struct EnvironmentLightFadeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minDistance; // Offset: 0x8
    float minFade; // Offset: 0xc
    float maxDistance; // Offset: 0x10
    float maxFade; // Offset: 0x14
};

// Original name: SCItemCapacitorAssignmentControllerParams
// Size: 0x20
// VTable: 0x1499f62e8
struct SCItemCapacitorAssignmentControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float minAssignment; // Offset: 0x18
    float maxAssignment; // Offset: 0x1c
};

// Original name: UserRTPC
// Size: 0x20
// VTable: 0x149a67fa0
struct UserRTPC {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* userRTPCName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float userRTPCValue; // Offset: 0x18
    float userRTPCResetValue; // Offset: 0x1c
};

// Original name: UnitTestSubRecord
// Size: 0x8
// VTable: 0x149a88d60
struct UnitTestSubRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: HudColor_HoloMatTextures
// Size: 0x18
// VTable: 0x149aa0ec0
struct HudColor_HoloMatTextures {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* DiffuseName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ContractClass_PVPBounty
// Size: 0x8
// VTable: 0x149971218
struct ContractClass_PVPBounty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: QuickAccessWheelAutoWingmanCommandsDef
// Size: 0x10
// VTable: 0x149a9adb0
struct QuickAccessWheelAutoWingmanCommandsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool openContextMenuAsFolder; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: DefaultAction_CarryableInteractionDef
// Size: 0x10
// VTable: 0x149a8b790
struct DefaultAction_CarryableInteractionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType carryableInteraction; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: S42StatOperationBase
// Size: 0x10
// VTable: 0x149a39a00
struct S42StatOperationBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType operationType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PlayerGroupManagerLocStringParams
// Size: 0x98
// VTable: 0x149aa22a8
struct PlayerGroupManagerLocStringParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* partyNameFormat; // Offset: 0x8
    CLocIdentifier* groupNameFormat; // Offset: 0x10
    CLocIdentifier* channelNameFormat; // Offset: 0x18
    CLocIdentifier* inviteSent; // Offset: 0x20
    CLocIdentifier* inviteReceived; // Offset: 0x28
    CLocIdentifier* memberJoined; // Offset: 0x30
    CLocIdentifier* inviteDeclined; // Offset: 0x38
    CLocIdentifier* localPlayerJoined; // Offset: 0x40
    CLocIdentifier* localPlayerJoinedAuto; // Offset: 0x48
    CLocIdentifier* localPlayerLeft; // Offset: 0x50
    CLocIdentifier* localPlayerKicked; // Offset: 0x58
    CLocIdentifier* groupDisbanded; // Offset: 0x60
    CLocIdentifier* groupCreated; // Offset: 0x68
    CLocIdentifier* leaderChanged; // Offset: 0x70
    CLocIdentifier* memberLeft; // Offset: 0x78
    CLocIdentifier* memberKicked; // Offset: 0x80
    CLocIdentifier* inviteTimeout; // Offset: 0x88
    CLocIdentifier* invitationFailed; // Offset: 0x90
};

// Original name: PatrolGraphComponentParams
// Size: 0x18
// VTable: 0x1499c8610
struct PatrolGraphComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSequencerActorActionHandlerTask
// Size: 0x28
// VTable: 0x1499a0ac0
struct SSequencerActorActionHandlerTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    ARDataType actionType; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SUsableIdlePoseOverride
// Size: 0x20
// VTable: 0x149a91bf0
struct SUsableIdlePoseOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* idlePoseTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float weight; // Offset: 0x18
    bool overrideForPlayer; // Offset: 0x1c
    uint8_t _pad_2[0x3]; // Offset: 0x1d
};

// Original name: SEntityComponentPartyMarkerParams
// Size: 0x18
// VTable: 0x149a4aaf0
struct SEntityComponentPartyMarkerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SDecayCurveMaxValueParams
// Size: 0x18
// VTable: 0x149a5e238
struct SDecayCurveMaxValueParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxValue; // Offset: 0x8
    float minScalingFactor; // Offset: 0xc
    bool useDecayScaling; // Offset: 0x10
    bool useWeaponOrientation; // Offset: 0x11
    uint8_t _pad_1[0x6]; // Offset: 0x12
};

// Original name: BuildingBlocks_FieldModifierRecordRefTypeBase
// Size: 0x8
// VTable: 0x14998aef8
struct BuildingBlocks_FieldModifierRecordRefTypeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeDepthBehavior
// Size: 0x10
// VTable: 0x14998b310
struct BuildingBlocks_FieldModifierEnumeratedTypeDepthBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SParentEntityHighlightNode
// Size: 0x8
// VTable: 0x1499a5c60
struct SParentEntityHighlightNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeProgressMeterState
// Size: 0x10
// VTable: 0x14998c198
struct BuildingBlocks_FieldModifierEnumeratedTypeProgressMeterState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    ARDataType paramField; // Offset: 0xc
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeTickBoxMode
// Size: 0x10
// VTable: 0x14998bfd0
struct BuildingBlocks_FieldModifierEnumeratedTypeTickBoxMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeFillStyle
// Size: 0x10
// VTable: 0x14998c118
struct BuildingBlocks_FieldModifierEnumeratedTypeFillStyle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    ARDataType paramField; // Offset: 0xc
};

// Original name: ExtraLegalBounds
// Size: 0x20
// VTable: 0x149a74ab8
struct ExtraLegalBounds {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minX; // Offset: 0x8
    float maxX; // Offset: 0xc
    float minY; // Offset: 0x10
    float maxY; // Offset: 0x14
    float minZ; // Offset: 0x18
    float maxZ; // Offset: 0x1c
};

// Original name: RadarQuantumOverrideParams
// Size: 0x10
// VTable: 0x1499c4410
struct RadarQuantumOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float arrivalRadius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SEASpawnRespawnIndividualSchedulerParams
// Size: 0x10
// VTable: 0x149a3be48
struct SEASpawnRespawnIndividualSchedulerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float forceRespawnTimer; // Offset: 0x8
    float signalRespawnTimer; // Offset: 0xc
};

// Original name: GlobalJumpPointClosingParams
// Size: 0x18
// VTable: 0x149a12cd0
struct GlobalJumpPointClosingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float closingTime; // Offset: 0x8
    float shrinkTime; // Offset: 0xc
    float closingTriggerDelay; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SShopUIProviderCategoryIcon
// Size: 0x20
// VTable: 0x149a42158
struct SShopUIProviderCategoryIcon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType category; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* icon; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: CIGAudioParams
// Size: 0x20
// VTable: 0x1499a95b0
struct CIGAudioParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType namingStrategy; // Offset: 0x18
    bool enableBones; // Offset: 0x19
    bool enableAnimStart; // Offset: 0x1a
    uint8_t _pad_1[0x5]; // Offset: 0x1b
};

// Original name: SpawningManagerNotifierComponentParams
// Size: 0x18
// VTable: 0x149a04718
struct SpawningManagerNotifierComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: UIGraph_LauncherScreenComponent
// Size: 0x8
// VTable: 0x149a4ab58
struct UIGraph_LauncherScreenComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: UIStateDisplay_Threshold
// Size: 0x28
// VTable: 0x149aa8868
struct UIStateDisplay_Threshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CryStringT* timelineLabel; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    float minThresholdValue; // Offset: 0x20
    ARDataType stateColor; // Offset: 0x24
    uint8_t _pad_2[0x2]; // Offset: 0x26
};

// Original name: SAtmosphericCompositionBaseParams
// Size: 0x8
// VTable: 0x149979fb0
struct SAtmosphericCompositionBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EmotionDescription
// Size: 0x28
// VTable: 0x149aa47e8
struct EmotionDescription {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* emotionName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* facialEmotionTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: StatusBuffTypeBase
// Size: 0x8
// VTable: 0x1499fc4a8
struct StatusBuffTypeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeFlexDirection
// Size: 0x10
// VTable: 0x14998b6d0
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexDirection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: Marker_AbilityIncapacitatedActor
// Size: 0x8
// VTable: 0x149a4a448
struct Marker_AbilityIncapacitatedActor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCItemPriorityTagParam
// Size: 0x38
// VTable: 0x149a06a68
struct SCItemPriorityTagParam {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    uint8_t priority; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    CryStringT* tag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: GasCloudVDBGamePlayParams
// Size: 0x10
// VTable: 0x1499cc818
struct GasCloudVDBGamePlayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float densityMultiplier; // Offset: 0x8
    float falloffStepDistance; // Offset: 0xc
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeContentBoxPosition
// Size: 0x10
// VTable: 0x14998c218
struct BuildingBlocks_FieldModifierEnumeratedTypeContentBoxPosition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    ARDataType paramField; // Offset: 0xc
};

// Original name: SBBDynamicPropertyBase
// Size: 0x8
// VTable: 0x149a95f98
struct SBBDynamicPropertyBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FiringRangePenaltyDef
// Size: 0x20
// VTable: 0x1499dcac0
struct FiringRangePenaltyDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType penaltyType; // Offset: 0x18
    float timePenalty; // Offset: 0x1c
};

// Original name: SEntityTraversingNodeExecuteLinkUIVendor
// Size: 0x8
// VTable: 0x14999e9e8
struct SEntityTraversingNodeExecuteLinkUIVendor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: HazardAwarenessParams
// Size: 0x48
// VTable: 0x149a652a0
struct HazardAwarenessParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float windHazardMinSpeed; // Offset: 0x8
    float handRaiseYawMin; // Offset: 0xc
    float handRaiseYawMax; // Offset: 0x10
    float handRaiseYawHysteresis; // Offset: 0x14
    float handFollowYawMin; // Offset: 0x18
    float handFollowYawMax; // Offset: 0x1c
    float handFollowYawSmoothing; // Offset: 0x20
    float handPitchOffset; // Offset: 0x24
    float handIKDistanceOffset; // Offset: 0x28
    float handIKStrength; // Offset: 0x2c
    float handResumeDelay; // Offset: 0x30
    float handRaiseDelay; // Offset: 0x34
    float handSwitchDelay; // Offset: 0x38
    float handLowerDelay; // Offset: 0x3c
    float handHazardStopDelay; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
};

// Original name: ItemCarryParams
// Size: 0x10
// VTable: 0x149a9fb40
struct ItemCarryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxCarryableMass; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SUniqueEntityClass
// Size: 0x10
// VTable: 0x149a8ae50
struct SUniqueEntityClass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint64_t fixed_geid; // Offset: 0x8
};

// Original name: EntityComponentCommLinkProviderParams
// Size: 0x88
// VTable: 0x1499f9278
struct EntityComponentCommLinkProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t accountSearchDelayInMilliSeconds; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* ableToJoinPartyServerPopUpMenuOptionText; // Offset: 0x20
    CLocIdentifier* notAbleToJoinPartyServerPopUpMenuOptionText; // Offset: 0x28
    CLocIdentifier* notAbleToJoinPartyStowedOnServerPopUpMenuOptionText; // Offset: 0x30
    CLocIdentifier* leavePartyPopUpMenuOptionText; // Offset: 0x38
    CLocIdentifier* disbandPartyPopUpMenuOptionText; // Offset: 0x40
    CLocIdentifier* transferLeadershipToPartyMemberPopUpMenuOptionText; // Offset: 0x48
    CLocIdentifier* kickPartyMemberPopUpMenuOptionText; // Offset: 0x50
    CLocIdentifier* sendFriendRequestToPartyMemberPopUpMenuOptionText; // Offset: 0x58
    CLocIdentifier* inviteToPartyPopUpMenuOptionText; // Offset: 0x60
    CLocIdentifier* ableToJoinFriendServerPopUpMenuOptionText; // Offset: 0x68
    CLocIdentifier* notAbleToJoinFriendServerPopUpMenuOptionText; // Offset: 0x70
    CLocIdentifier* removeFriendPopUpMenuOptionText; // Offset: 0x78
    CLocIdentifier* inviteToLobbyPopUpMenuOptionText; // Offset: 0x80
};

// Original name: SLayerEntitiesGroupManager
// Size: 0x18
// VTable: 0x149a39b60
struct SLayerEntitiesGroupManager {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEntityComponentConstraintPartnerComponentParams
// Size: 0x18
// VTable: 0x1499c9340
struct SEntityComponentConstraintPartnerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SVehicleObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e7f88
struct SVehicleObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCBoostScaleParam
// Size: 0x10
// VTable: 0x149a62f20
struct SCBoostScaleParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float BoostScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: GlobalResourceParticle
// Size: 0x18
// VTable: 0x1499ae300
struct GlobalResourceParticle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: CommunicationVariableBool
// Size: 0x28
// VTable: 0x14997f3a0
struct CommunicationVariableBool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool global; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    bool value; // Offset: 0x20
    uint8_t _pad_3[0x7]; // Offset: 0x21
};

// Original name: SMissionBrokerInterfaceComponentParams
// Size: 0x18
// VTable: 0x14996c9b8
struct SMissionBrokerInterfaceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SHudTapeParams
// Size: 0x18
// VTable: 0x149a38c30
struct SHudTapeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float range; // Offset: 0x8
    float mainTickIncrement; // Offset: 0xc
    int32_t subTicks; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SReputationMissionRequirementExpression_Or
// Size: 0x8
// VTable: 0x149a96c38
struct SReputationMissionRequirementExpression_Or {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GroupEntityParams
// Size: 0x20
// VTable: 0x1499e3e20
struct GroupEntityParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool syncToClients; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: MedBedProviderParams
// Size: 0x18
// VTable: 0x149a10200
struct MedBedProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_StyleSelectorConditionBase
// Size: 0x10
// VTable: 0x1499819a0
struct BuildingBlocks_StyleSelectorConditionBase {
    uint8_t _pad_0[0x10]; // Offset: 0x0
};

// Original name: SDespawnRule_OnDestroyed
// Size: 0x10
// VTable: 0x149a403f8
struct SDespawnRule_OnDestroyed {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float ruleDelaySeconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ActorStatusStatModifier
// Size: 0x10
// VTable: 0x1499fc710
struct ActorStatusStatModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType affectedStatType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ExtendedNameEntryTextRandomizedLocalizedSequence
// Size: 0x20
// VTable: 0x149a93258
struct ExtendedNameEntryTextRandomizedLocalizedSequence {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* entryPrefix; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t numEntries; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: LinkedStatRuleHasCrossedBelowThreshold
// Size: 0x10
// VTable: 0x1499fdba0
struct LinkedStatRuleHasCrossedBelowThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_FieldModifierBase
// Size: 0x8
// VTable: 0x14998aee8
struct BuildingBlocks_FieldModifierBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MedBedSurgeryNamesInjurySeverity
// Size: 0x30
// VTable: 0x149a0fe70
struct MedBedSurgeryNamesInjurySeverity {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* injuryName; // Offset: 0x18
    CLocIdentifier* majorInjuryName; // Offset: 0x20
    CLocIdentifier* deadlyInjuryName; // Offset: 0x28
};

// Original name: SHandsRecoilCurveNoiseModifer
// Size: 0x18
// VTable: 0x149a71160
struct SHandsRecoilCurveNoiseModifer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xNoiseModifier; // Offset: 0x8
    float yNoiseModifier; // Offset: 0xc
    float zNoiseModifier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SMisfireDamageRatio
// Size: 0x10
// VTable: 0x149a09590
struct SMisfireDamageRatio {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float health; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: MobiGlasAuthorizationEntry
// Size: 0x30
// VTable: 0x149a36fb8
struct MobiGlasAuthorizationEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* characterImage; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* characterName; // Offset: 0x18
    CLocIdentifier* characterRank; // Offset: 0x20
    CLocIdentifier* characterAssignment; // Offset: 0x28
};

// Original name: EVAReticle_Config
// Size: 0x10
// VTable: 0x149aa81e8
struct EVAReticle_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool EnableFixedReticle; // Offset: 0x8
    bool EnableLookReticle; // Offset: 0x9
    bool EnableVelocityVector; // Offset: 0xa
    bool EnableControlFrameReticle; // Offset: 0xb
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SActorForceReactionAnimationFlinchConfig
// Size: 0x10
// VTable: 0x149a4c340
struct SActorForceReactionAnimationFlinchConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendspaceMin; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: TestAtomics
// Size: 0x50
// VTable: 0x149a88a50
struct TestAtomics {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* myString; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType myEnum; // Offset: 0x18
    int8_t myInt8; // Offset: 0x1c
    uint8_t _pad_2[0x1]; // Offset: 0x1d
    int16_t myInt16; // Offset: 0x1e
    int32_t myInt32; // Offset: 0x20
    uint8_t _pad_3[0x4]; // Offset: 0x24
    int64_t myInt64; // Offset: 0x28
    uint8_t myUInt8; // Offset: 0x30
    uint8_t _pad_4[0x1]; // Offset: 0x31
    uint16_t myUInt16; // Offset: 0x32
    uint32_t myUInt32; // Offset: 0x34
    uint64_t myUInt64; // Offset: 0x38
    bool myBooleanTrue; // Offset: 0x40
    uint8_t _pad_5[0x3]; // Offset: 0x41
    float myFloat; // Offset: 0x44
    double myDouble; // Offset: 0x48
};

// Original name: ControlHintCondition_MobiglasMapState
// Size: 0x10
// VTable: 0x149a672d0
struct ControlHintCondition_MobiglasMapState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType mobiglasMapState; // Offset: 0x8
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: DefaultActionsEntityState_CanAttachToHeldWeapon
// Size: 0x8
// VTable: 0x149a8c080
struct DefaultActionsEntityState_CanAttachToHeldWeapon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CommunicationAudioRTPC
// Size: 0x20
// VTable: 0x14997ec48
struct CommunicationAudioRTPC {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float value; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: ItemResourceControlParameterBase
// Size: 0x8
// VTable: 0x1499a7400
struct ItemResourceControlParameterBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EATransportBaseTransitionParams
// Size: 0x8
// VTable: 0x149a284e0
struct EATransportBaseTransitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DefaultActionsEntityEntryCondition_EntityTypes
// Size: 0x10
// VTable: 0x149a8bcc0
struct DefaultActionsEntityEntryCondition_EntityTypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ScanWaveDetectionParams
// Size: 0x10
// VTable: 0x1499c5b68
struct ScanWaveDetectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool requireFullChargeDetection; // Offset: 0x8
    bool reflectScanWaveChargeLevel; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: FoleySuitAmbienceDefinition
// Size: 0x28
// VTable: 0x149a685c8
struct FoleySuitAmbienceDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* playTrigger; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* stopTrigger; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SLayerEntitiesGroupComponentParams
// Size: 0x20
// VTable: 0x1499f0b80
struct SLayerEntitiesGroupComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool allowPhysicsChange; // Offset: 0x18
    bool allowStreaming; // Offset: 0x19
    bool useLayerData; // Offset: 0x1a
    bool startStreamedOut; // Offset: 0x1b
    bool startHidden; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
};

// Original name: SCentiResourceUnit
// Size: 0x10
// VTable: 0x1499a1520
struct SCentiResourceUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t centiResourceUnits; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: GameModule
// Size: 0x28
// VTable: 0x1499b4f28
struct GameModule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* moduleCode; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* rankTexturePrefix; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SSCSignatureSystemAudioOffset
// Size: 0x10
// VTable: 0x1499ea050
struct SSCSignatureSystemAudioOffset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SRadarSenseComponentParams
// Size: 0x18
// VTable: 0x149a167f0
struct SRadarSenseComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ContractDifficultyProfile
// Size: 0x18
// VTable: 0x149971c58
struct ContractDifficultyProfile {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float mechanicalSkillWeight; // Offset: 0x8
    float mentalLoadWeight; // Offset: 0xc
    float riskOfLossWeight; // Offset: 0x10
    float gameKnowledgeWeight; // Offset: 0x14
};

// Original name: ControlInteractiveVariable
// Size: 0x28
// VTable: 0x1499f77c8
struct ControlInteractiveVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SCItemControlCondition_Tag
// Size: 0x30
// VTable: 0x149a06c30
struct SCItemControlCondition_Tag {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* tag; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
};

// Original name: ScreenEffects_ParamValue_Vec4Base
// Size: 0x8
// VTable: 0x14999c100
struct ScreenEffects_ParamValue_Vec4Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: StarMapAmenityTypeEntry
// Size: 0x30
// VTable: 0x149a8f5e0
struct StarMapAmenityTypeEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
    CryStringT* icon; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
};

// Original name: ControlHintCondition_VehicleEnvironment
// Size: 0x10
// VTable: 0x149a66970
struct ControlHintCondition_VehicleEnvironment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType environment; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: LightningTargetMode
// Size: 0x8
// VTable: 0x149979160
struct LightningTargetMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SDoorCollisionReactionNoneParams
// Size: 0x8
// VTable: 0x1499f2220
struct SDoorCollisionReactionNoneParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SRootEntityHighlightNode
// Size: 0x8
// VTable: 0x1499a5c48
struct SRootEntityHighlightNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SLandingAreaObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e8178
struct SLandingAreaObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: RelationMarkerParams
// Size: 0x20
// VTable: 0x149a97578
struct RelationMarkerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* description; // Offset: 0x8
    CryStringT* icon; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
};

// Original name: DefaultActionsEntityState_InTakedownRange
// Size: 0x8
// VTable: 0x149a8c078
struct DefaultActionsEntityState_InTakedownRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlanetDayNightTemperatureParams
// Size: 0x18
// VTable: 0x14999d110
struct PlanetDayNightTemperatureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DayNightCoolingBaseRate; // Offset: 0x8
    float DayNightCoolingHumidityModifier; // Offset: 0xc
    float DayNightCoolingHumidityMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: UIGraph_MouseControlComponent
// Size: 0x10
// VTable: 0x1499f1830
struct UIGraph_MouseControlComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool autoHandleInput; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeSegmentProgressBehavior
// Size: 0x10
// VTable: 0x14998bcd0
struct BuildingBlocks_FieldModifierEnumeratedTypeSegmentProgressBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: QueueingBehaviour
// Size: 0x10
// VTable: 0x1499b33d0
struct QueueingBehaviour {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool canInterrupt; // Offset: 0x8
    bool canBeInterrupted; // Offset: 0x9
    bool canBeQueued; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
};

// Original name: PlayerInteractionParams
// Size: 0x28
// VTable: 0x1499d5070
struct PlayerInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool allowPITMenu; // Offset: 0x8
    bool allowPITLootingScreen; // Offset: 0x9
    bool allowPITInventory; // Offset: 0xa
    bool allowPITSwapWheel; // Offset: 0xb
    bool allowPISWheel; // Offset: 0xc
    bool allowQuickInteractImprovements; // Offset: 0xd
    bool allowDefaultActions; // Offset: 0xe
    bool allowControlHints; // Offset: 0xf
    bool allowInteractionPrompts; // Offset: 0x10
    bool allowDistantInteractionIndicator; // Offset: 0x11
    bool allowInteractionPromptsInCockpitWhileFreelook; // Offset: 0x12
    bool allowPISAngularSelection; // Offset: 0x13
    bool allowQSAngularSelection; // Offset: 0x14
    bool allowPlayerAnimatedInteractions; // Offset: 0x15
    bool allowPlayerAnimatedWeaponCustomization; // Offset: 0x16
    bool allowItemDropsToSwapBackToWeapon; // Offset: 0x17
    bool allowBuildingBlocksHints; // Offset: 0x18
    bool allowRelaxedPoseInSeats; // Offset: 0x19
    bool allowPersonalInventoryReload; // Offset: 0x1a
    bool allowAmmoRepool; // Offset: 0x1b
    bool allowDashboardActionInteractionOverrides; // Offset: 0x1c
    bool useV2WheelCanvases; // Offset: 0x1d
    bool allowAmmoHoover; // Offset: 0x1e
    bool allowInputPrompt; // Offset: 0x1f
    bool allowQTERequest; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: ExtendedNameEntryTextRaw
// Size: 0x18
// VTable: 0x149a930b0
struct ExtendedNameEntryTextRaw {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* text; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: CraftingResearchUnlock
// Size: 0x8
// VTable: 0x1499b8b68
struct CraftingResearchUnlock {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_TimelineTypeBase
// Size: 0x8
// VTable: 0x149986670
struct BuildingBlocks_TimelineTypeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SBBDynamicPropertyString
// Size: 0x18
// VTable: 0x149a96110
struct SBBDynamicPropertyString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* value; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: VisibilityConditionDef_EntryFlag
// Size: 0x10
// VTable: 0x149a4a6d8
struct VisibilityConditionDef_EntryFlag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType flag; // Offset: 0x8
    bool invert; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: UIEntityServiceEntityComponentParams
// Size: 0x20
// VTable: 0x149993660
struct UIEntityServiceEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool immediateTransforms; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: InteriorMapWorldUIZoneHostPlanarGridParams
// Size: 0x8
// VTable: 0x149a492b0
struct InteriorMapWorldUIZoneHostPlanarGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlayerECGGraph_Config
// Size: 0x28
// VTable: 0x149aa7f00
struct PlayerECGGraph_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float idleAmpRangeMax; // Offset: 0x8
    uint8_t spikeFrameDuration; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float spikeFrameDurationRandFactor; // Offset: 0x10
    uint8_t waveFreq; // Offset: 0x14
    uint8_t _pad_2[0x3]; // Offset: 0x15
    float pulseAmpMin; // Offset: 0x18
    float pulseAmpMax; // Offset: 0x1c
    uint8_t updateRate; // Offset: 0x20
    uint8_t _pad_3[0x7]; // Offset: 0x21
};

// Original name: SecurityNotifications
// Size: 0x8
// VTable: 0x14996f640
struct SecurityNotifications {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_UnidirectionalScroller
// Size: 0x30
// VTable: 0x149983460
struct BuildingBlocks_UnidirectionalScroller {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scrollBehavior; // Offset: 0x8
    ARDataType scrollDirection; // Offset: 0xc
    float scrollPixelIncrement; // Offset: 0x10
    float scrollEasingTime; // Offset: 0x14
    ARDataType scrollEasingType; // Offset: 0x18
    bool autoScroll; // Offset: 0x19
    uint8_t _pad_1[0x2]; // Offset: 0x1a
    ARDataType autoScrollBehavior; // Offset: 0x1c
    float autoScrollSpeed; // Offset: 0x20
    float autoScrollStartPause; // Offset: 0x24
    float autoScrollEndPause; // Offset: 0x28
    float autoScrollFadeSpeed; // Offset: 0x2c
};

// Original name: SAddHealthValue
// Size: 0x10
// VTable: 0x1499fb690
struct SAddHealthValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float healthValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: WorldDisplayEnvironmentColor
// Size: 0x8
// VTable: 0x149a30380
struct WorldDisplayEnvironmentColor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: LegacyCraftingCost_Base
// Size: 0x8
// VTable: 0x149a0ee60
struct LegacyCraftingCost_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: JumpThrusterPackConfig
// Size: 0x38
// VTable: 0x149a634f8
struct JumpThrusterPackConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useJumpThrusters; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float jumpBoosterFuel; // Offset: 0xc
    float jumpBoosterFuelConsumptionSpeed; // Offset: 0x10
    float jumpBoosterFuelAirRestoreSpeed; // Offset: 0x14
    float jumpBoosterFuelGroundRestoreSpeed; // Offset: 0x18
    float jumpThrustersImpulseStrenght; // Offset: 0x1c
    bool useLandThrusters; // Offset: 0x20
    uint8_t _pad_2[0x3]; // Offset: 0x21
    float landThrustersImpulseStrenght; // Offset: 0x24
    float landThrustersMinThresholdDistance; // Offset: 0x28
    float landThrustersMaxThresholdDistance; // Offset: 0x2c
    float landThrustersMinSpeed; // Offset: 0x30
    float landThrustersMinTime; // Offset: 0x34
};

// Original name: ControlHintCondition_ActorLadderState
// Size: 0x10
// VTable: 0x149a663d0
struct ControlHintCondition_ActorLadderState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType ladderState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: S42FieldManualCategory
// Size: 0x10
// VTable: 0x149a37450
struct S42FieldManualCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* categoryName; // Offset: 0x8
};

// Original name: SWeaponProceduralBodyRecoilConfigDef
// Size: 0x28
// VTable: 0x149a5efe0
struct SWeaponProceduralBodyRecoilConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hipsPushForce; // Offset: 0x8
    float hipsDampStrength; // Offset: 0xc
    float hipsDampStrengthEnd; // Offset: 0x10
    float spinePushForceFirst; // Offset: 0x14
    float spinePushForce; // Offset: 0x18
    float spineDampStrength; // Offset: 0x1c
    float spineDampStrengthEnd; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: EnvironmentLightGroupParams
// Size: 0x10
// VTable: 0x1499a3800
struct EnvironmentLightGroupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t transitionDelayId; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSetInteractionStateOnParentItemportGameplayTrigger
// Size: 0x28
// VTable: 0x1499fb898
struct SSetInteractionStateOnParentItemportGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* stateTypeName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* stateName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: UIGraph_ChatComponent
// Size: 0x8
// VTable: 0x149a43f80
struct UIGraph_ChatComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TriggerSubConditionNumberOfInterruptsDef
// Size: 0x30
// VTable: 0x149a89700
struct TriggerSubConditionNumberOfInterruptsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* sequenceSuperGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t numInterrupts; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    CryStringT* comparisonType; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
};

// Original name: SSequencerUsableAssignLoadoutTask
// Size: 0x40
// VTable: 0x149a82a10
struct SSequencerUsableAssignLoadoutTask {
    uint8_t _pad_0[0x28]; // Offset: 0x0
    CryStringT* loadoutId; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    bool matchHierarchy; // Offset: 0x38
    bool shouldDestroyAttachedEntitiesBeforeAssigningNewLoadout; // Offset: 0x39
    uint8_t _pad_2[0x6]; // Offset: 0x3a
};

// Original name: AmmoPenetrationParams
// Size: 0x10
// VTable: 0x149a17e08
struct AmmoPenetrationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float basePenetrationDistance; // Offset: 0x8
    float angle; // Offset: 0xc
};

// Original name: FireRepairerType_Raycast
// Size: 0x10
// VTable: 0x14997cf20
struct FireRepairerType_Raycast {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maximumDistance; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: DefaultActionsEntityEntryCondition_AttachableItems
// Size: 0x10
// VTable: 0x149a8bc68
struct DefaultActionsEntityEntryCondition_AttachableItems {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    ARDataType subType; // Offset: 0xc
};

// Original name: DefaultActionsEntityState_CarryableState
// Size: 0x10
// VTable: 0x149a8c010
struct DefaultActionsEntityState_CarryableState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType state; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeFlexCrossAxisJustification
// Size: 0x10
// VTable: 0x14998b7f0
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexCrossAxisJustification {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: NavSplineComponentParams
// Size: 0x18
// VTable: 0x14997e2e0
struct NavSplineComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SActorAnimationComponentParams
// Size: 0x20
// VTable: 0x149a6a608
struct SActorAnimationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool gripIKEnabled; // Offset: 0x18
    bool weaponCamAdjustEnabled; // Offset: 0x19
    bool weaponTermAdjustEnabled; // Offset: 0x1a
    bool consumeIKEnabled; // Offset: 0x1b
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: AreaSphereComponentParams
// Size: 0x28
// VTable: 0x149ac4a20
struct AreaSphereComponentParams {
    uint8_t _pad_0[0x28]; // Offset: 0x0
};

// Original name: QuadGeometryEntityComponentParams
// Size: 0x18
// VTable: 0x149a22058
struct QuadGeometryEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SLegacyShieldGeneratorMisfireParams
// Size: 0x10
// VTable: 0x149a099e8
struct SLegacyShieldGeneratorMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float regenReductionRatio; // Offset: 0x8
    float healthReductionRatio; // Offset: 0xc
};

// Original name: CraftingBlueprint_Base
// Size: 0x8
// VTable: 0x1499b8e78
struct CraftingBlueprint_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BoidsBehaviorRule
// Size: 0x10
// VTable: 0x1499eadb0
struct BoidsBehaviorRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AttachableStateModifierContext_Immediate_Parent
// Size: 0x8
// VTable: 0x1499c1628
struct AttachableStateModifierContext_Immediate_Parent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SGameCollisionClass
// Size: 0x10
// VTable: 0x1499e59f0
struct SGameCollisionClass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType gameCollisionClass; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SMisfireStatCondition
// Size: 0x18
// VTable: 0x149a092c8
struct SMisfireStatCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float degradation; // Offset: 0x8
    float damage; // Offset: 0xc
    float heat; // Offset: 0x10
    float distortion; // Offset: 0x14
};

// Original name: SActorForceReactionsVehicleForceDampeningDef
// Size: 0x20
// VTable: 0x149a4dca0
struct SActorForceReactionsVehicleForceDampeningDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minMass; // Offset: 0x8
    float gForceCutoff; // Offset: 0xc
    float gForceScale; // Offset: 0x10
    float externalImpulseCutoff; // Offset: 0x14
    float externalImpulseScale; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: ControlHintCondition_ActorToolState
// Size: 0x10
// VTable: 0x149a66170
struct ControlHintCondition_ActorToolState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType toolState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: MobiGlasEffectParams
// Size: 0x10
// VTable: 0x149aa1c58
struct MobiGlasEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float projectionFadeInDuration; // Offset: 0x8
    float projectionFadeOutDuration; // Offset: 0xc
};

// Original name: ItemDashboardScreenMFDParams
// Size: 0x20
// VTable: 0x149a33720
struct ItemDashboardScreenMFDParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isHolographic; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: GlobalJumpTunnelProbeParams
// Size: 0x10
// VTable: 0x149a139e0
struct GlobalJumpTunnelProbeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float probeRadius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: WeaponPortsParams
// Size: 0x58
// VTable: 0x149aac350
struct WeaponPortsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* sidearmItemPortName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* primaryItemPortName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* secondaryItemPortName; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* meleeItemPortName; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
    CryStringT* gadgetItemPortName; // Offset: 0x48
    uint8_t _pad_5[0x8]; // Offset: 0x50
};

// Original name: RParticleFieldNodeDebugParams
// Size: 0x28
// VTable: 0x149997968
struct RParticleFieldNodeDebugParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool drawBoundingBox; // Offset: 0x8
    bool drawAdvanced; // Offset: 0x9
    bool densityPerMeter; // Offset: 0xa
    uint8_t _pad_1[0x1]; // Offset: 0xb
    float density; // Offset: 0xc
    float minMagnitude; // Offset: 0x10
    float maxMagnitude; // Offset: 0x14
    float arrowScale; // Offset: 0x18
    float renderThreshold; // Offset: 0x1c
    float renderTolerance; // Offset: 0x20
    bool renderInverted; // Offset: 0x24
    uint8_t _pad_2[0x3]; // Offset: 0x25
};

// Original name: STrackviewInterruptComponentParams
// Size: 0x18
// VTable: 0x1499c85d0
struct STrackviewInterruptComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ItemResourceDynamicCompositionBase
// Size: 0x8
// VTable: 0x1499a73f0
struct ItemResourceDynamicCompositionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_WidgetLightSetting
// Size: 0x18
// VTable: 0x14998f1f0
struct BuildingBlocks_WidgetLightSetting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float pitchAngle; // Offset: 0xc
    float yawAngle; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: TacticPlayerDistance
// Size: 0x10
// VTable: 0x1499b7308
struct TacticPlayerDistance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float shortDistanceTreshold; // Offset: 0x8
    float mediumDistanceTreshhold; // Offset: 0xc
};

// Original name: SAccumulatorParams
// Size: 0x38
// VTable: 0x1499d7678
struct SAccumulatorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float InitialAccumulationRatio; // Offset: 0x8
    bool AccumulateWhenUnstreamed; // Offset: 0xc
    bool AccumulateOnlyAfterTractorBeam; // Offset: 0xd
    bool AccumulateOnlyWhenAttached; // Offset: 0xe
    bool StopAccumulationWhenAttached; // Offset: 0xf
    float AccumulationEventThreshold; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    CryStringT* PortTags; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* RequiredPortTags; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: WeaponProceduralClipBase
// Size: 0x10
// VTable: 0x149aab1a0
struct WeaponProceduralClipBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSequencerUsableDelinkTask
// Size: 0x28
// VTable: 0x149a82a18
struct SSequencerUsableDelinkTask {
    uint8_t _pad_0[0x28]; // Offset: 0x0
};

// Original name: ProjectileSpawnerParams
// Size: 0x18
// VTable: 0x1499ce1a8
struct ProjectileSpawnerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AtmosphericFlightDataParams
// Size: 0x18
// VTable: 0x1499f1bf0
struct AtmosphericFlightDataParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MiningShopProviderEntityComponentParams
// Size: 0x18
// VTable: 0x149a42220
struct MiningShopProviderEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LiteralStringUserVariable
// Size: 0x28
// VTable: 0x1499938f8
struct LiteralStringUserVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* defaultValue; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SSequencerFirstSelectCarryableTaskParams
// Size: 0x20
// VTable: 0x149a8eb20
struct SSequencerFirstSelectCarryableTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: JumpDriveApproachRingsParams
// Size: 0x18
// VTable: 0x1499f5370
struct JumpDriveApproachRingsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float firstRingDistance; // Offset: 0x8
    float lastRingDistance; // Offset: 0xc
    float largestRingDiameter; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: MusicLogicTrigger
// Size: 0x18
// VTable: 0x1499b5bc0
struct MusicLogicTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* trigger; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SGeomCacheEntityComponentParams
// Size: 0x98
// VTable: 0x1499c9580
struct SGeomCacheEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* GeomCacheFile; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    bool PlayOnStart; // Offset: 0x28
    bool Loop; // Offset: 0x29
    bool Physicalize; // Offset: 0x2a
    uint8_t _pad_2[0x1]; // Offset: 0x2b
    float StartTime; // Offset: 0x2c
    float StreamInDistance; // Offset: 0x30
    float StandInDistance; // Offset: 0x34
    CryStringT* StandInObject; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    CryStringT* StandInMaterial; // Offset: 0x48
    uint8_t _pad_4[0x8]; // Offset: 0x50
    CryStringT* FirstFrameStandInObject; // Offset: 0x58
    uint8_t _pad_5[0x8]; // Offset: 0x60
    CryStringT* FirstFrameStandInMaterial; // Offset: 0x68
    uint8_t _pad_6[0x8]; // Offset: 0x70
    CryStringT* LastFrameStandInObject; // Offset: 0x78
    uint8_t _pad_7[0x8]; // Offset: 0x80
    CryStringT* LastFrameStandInMaterial; // Offset: 0x88
    uint8_t _pad_8[0x8]; // Offset: 0x90
};

// Original name: SLandingAreaEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a08
struct SLandingAreaEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: LightFlareParams
// Size: 0x30
// VTable: 0x1499a4990
struct LightFlareParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool flareEnabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* flare; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    float flareFOV; // Offset: 0x20
    float flareScale; // Offset: 0x24
    bool attachToSun; // Offset: 0x28
    uint8_t _pad_3[0x7]; // Offset: 0x29
};

// Original name: InteractiveVariable_BackToDefaultParams
// Size: 0x10
// VTable: 0x1499f7480
struct InteractiveVariable_BackToDefaultParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float waitTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SIDifficultyModule
// Size: 0x18
// VTable: 0x1499ba1a0
struct SIDifficultyModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: DamageMapChannels
// Size: 0x18
// VTable: 0x149937308
struct DamageMapChannels {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float thickness; // Offset: 0x8
    float deformation; // Offset: 0xc
    float burn; // Offset: 0x10
    float temperature; // Offset: 0x14
};

// Original name: AngYPR
// Size: 0x18
// VTable: 0x1499ad230
struct AngYPR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float yaw; // Offset: 0x8
    float pitch; // Offset: 0xc
    float roll; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: ProcBreathingHoldBreathNoise
// Size: 0x10
// VTable: 0x149a6c888
struct ProcBreathingHoldBreathNoise {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float noiseAng; // Offset: 0x8
    float noiseSpeed; // Offset: 0xc
};

// Original name: CustomMaterialEntryParams
// Size: 0x20
// VTable: 0x1499e7e38
struct CustomMaterialEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float percentage; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* surfaceType; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: TriggerSubConditionFocusDef
// Size: 0x38
// VTable: 0x149a89aa0
struct TriggerSubConditionFocusDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* entitySuperGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float time; // Offset: 0x18
    float focusAmount; // Offset: 0x1c
    bool inverted; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
    CryStringT* siblingFailRule; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: STemperatureReadOutParams
// Size: 0x18
// VTable: 0x149a7b2e0
struct STemperatureReadOutParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float updateIntervalTime; // Offset: 0x8
    float smoothingFactor; // Offset: 0xc
    int32_t smoothingSamples; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: EntityClusterId
// Size: 0x8
// VTable: 0x149975190
struct EntityClusterId {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SActivityThresholds
// Size: 0x18
// VTable: 0x149a84fb8
struct SActivityThresholds {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float equipmentMass; // Offset: 0x8
    float adsHitTimeWindow; // Offset: 0xc
    float hungerThreshold; // Offset: 0x10
    float thirstThreshold; // Offset: 0x14
};

// Original name: SAnimatedCharacterComponentParams
// Size: 0x50
// VTable: 0x149a62198
struct SAnimatedCharacterComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* actionController; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* animDatabase3P; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* soundDatabase; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    ARDataType defaultColliderBehaviour; // Offset: 0x48
    uint8_t _pad_4[0x4]; // Offset: 0x4c
};

// Original name: RaSTaRLibraryElement
// Size: 0x30
// VTable: 0x14999d4f8
struct RaSTaRLibraryElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filePath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* displayName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool isMainModule; // Offset: 0x28
    bool isIndependantModule; // Offset: 0x29
    uint8_t _pad_3[0x6]; // Offset: 0x2a
};

// Original name: CounterMeasureBaseParams
// Size: 0x8
// VTable: 0x1499cebd8
struct CounterMeasureBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MissionFlowActionBase
// Size: 0x8
// VTable: 0x14996ffe8
struct MissionFlowActionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SAutoLoadingBoxSizeLoadingTime
// Size: 0x30
// VTable: 0x149a75238
struct SAutoLoadingBoxSizeLoadingTime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float one_eighthSCU; // Offset: 0x8
    float one_quarterSCU; // Offset: 0xc
    float one_halfSCU; // Offset: 0x10
    float oneSCU; // Offset: 0x14
    float twoSCU; // Offset: 0x18
    float fourSCU; // Offset: 0x1c
    float eightSCU; // Offset: 0x20
    float sixteenSCU; // Offset: 0x24
    float twentyFourSCU; // Offset: 0x28
    float thirtyTwoSCU; // Offset: 0x2c
};

// Original name: VehicleEditorStat
// Size: 0x40
// VTable: 0x149a584f0
struct VehicleEditorStat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    ARDataType unit; // Offset: 0x10
    uint8_t decimalPlaces; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    ARDataType compareMode; // Offset: 0x18
    float minActualValue; // Offset: 0x1c
    float maxActualValue; // Offset: 0x20
    bool interpolateToDisplayValues; // Offset: 0x24
    uint8_t _pad_2[0x3]; // Offset: 0x25
    float minDisplayValue; // Offset: 0x28
    float maxDisplayValue; // Offset: 0x2c
    bool clampValuesToMinMax; // Offset: 0x30
    uint8_t _pad_3[0x7]; // Offset: 0x31
    ARDataType statType; // Offset: 0x38
    uint8_t _pad_4[0x4]; // Offset: 0x3c
};

// Original name: LinkedStatRuleBase
// Size: 0x8
// VTable: 0x1499fd948
struct LinkedStatRuleBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SStopHackingGameplayTrigger
// Size: 0x10
// VTable: 0x1499faea8
struct SStopHackingGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool reset; // Offset: 0x8
    bool changeState; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: ReverseTrailsSetting
// Size: 0x10
// VTable: 0x149a19e48
struct ReverseTrailsSetting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float disabledAngle; // Offset: 0x8
    float disabledFadeAngle; // Offset: 0xc
};

// Original name: GlobalEnvironmentEffectSettings
// Size: 0x10
// VTable: 0x149a1a238
struct GlobalEnvironmentEffectSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float cullDistance; // Offset: 0x8
    float cullDistanceRange; // Offset: 0xc
};

// Original name: SCMountRotationAxisParams
// Size: 0x40
// VTable: 0x149a9d068
struct SCMountRotationAxisParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* jointName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float minRot; // Offset: 0x18
    float maxRot; // Offset: 0x1c
    float maxSpeedDelta; // Offset: 0x20
    float rotSpeedDamping; // Offset: 0x24
    float minRotADS; // Offset: 0x28
    float maxRotADS; // Offset: 0x2c
    float maxSpeedDeltaADS; // Offset: 0x30
    float rotSpeedDampingADS; // Offset: 0x34
    float speed; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: EnvironmentLightStateParams
// Size: 0x8
// VTable: 0x1499a34e0
struct EnvironmentLightStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SBlobContactEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a80
struct SBlobContactEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: VideoComms
// Size: 0x38
// VTable: 0x149a93048
struct VideoComms {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filename169; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* filename43; // Offset: 0x18
    uint8_t _pad_2[0x18]; // Offset: 0x20
};

// Original name: SSquadChannel
// Size: 0x8
// VTable: 0x149a9c7f8
struct SSquadChannel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ShipInsuranceEntityComponentParams
// Size: 0x28
// VTable: 0x149a33430
struct ShipInsuranceEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* selectionFilter; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: DeliveryItemPortComponentParams
// Size: 0x18
// VTable: 0x14996c438
struct DeliveryItemPortComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: FixedFloat
// Size: 0x10
// VTable: 0x1499b38a0
struct FixedFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SEntityDensityClassOverwrites
// Size: 0x18
// VTable: 0x149ac4488
struct SEntityDensityClassOverwrites {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float densityMultiplier_clusterUpperObjectCountDGS; // Offset: 0x8
    float densityMultiplier_clusterUpperObjectCountPersistence; // Offset: 0xc
    float densityMultiplier_clusterPersistenceTimeout; // Offset: 0x10
    float timeMultiplier_vehicleUnattendedCleanup; // Offset: 0x14
};

// Original name: SInternalHardpointLink
// Size: 0x28
// VTable: 0x1499b0688
struct SInternalHardpointLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* port1; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* port2; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SAuxiliaryWeaponActionParams
// Size: 0x8
// VTable: 0x149a69448
struct SAuxiliaryWeaponActionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DialogueExternalSource
// Size: 0x40
// VTable: 0x149a8c730
struct DialogueExternalSource {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* filename; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool localized; // Offset: 0x28
    uint8_t _pad_3[0x17]; // Offset: 0x29
};

// Original name: EAScenarioComponentParams
// Size: 0x20
// VTable: 0x149a3c0b0
struct EAScenarioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float precachingRadius; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_FlexItem
// Size: 0x10
// VTable: 0x149983908
struct BuildingBlocks_FlexItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float growProportion; // Offset: 0x8
    float shrinkProportion; // Offset: 0xc
};

// Original name: Vec4
// Size: 0x18
// VTable: 0x1499ad0d8
struct Vec4 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float x; // Offset: 0x8
    float y; // Offset: 0xc
    float z; // Offset: 0x10
    float w; // Offset: 0x14
};

// Original name: RttPreviewManagerEntityComponentParams
// Size: 0x20
// VTable: 0x149a22180
struct RttPreviewManagerEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float mipSelectionBias; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: QuantumDriveSplineFXNode
// Size: 0x10
// VTable: 0x149a51de0
struct QuantumDriveSplineFXNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float normAge; // Offset: 0x8
    bool splitSegment; // Offset: 0xc
    bool cornerPoint; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
};

// Original name: EntityComponentRttAspectMFDSelfStatusParams
// Size: 0x28
// VTable: 0x1499c9980
struct EntityComponentRttAspectMFDSelfStatusParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType targetRttSlot; // Offset: 0x18
    float aspectRatio; // Offset: 0x1c
    float labelRelativeProximityThreshold; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: WeaponAIAimingMethod
// Size: 0x8
// VTable: 0x149a60aa8
struct WeaponAIAimingMethod {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BaseDataSetMatchCondition
// Size: 0x8
// VTable: 0x149969868
struct BaseDataSetMatchCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlayerNotificationBannerOptionsParams
// Size: 0x10
// VTable: 0x149aa02f0
struct PlayerNotificationBannerOptionsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float autoExpireInSeconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_BindingsColorBase
// Size: 0x50
// VTable: 0x149980500
struct BuildingBlocks_BindingsColorBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: SStateModifier
// Size: 0x8
// VTable: 0x1499a53f8
struct SStateModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SecurityNetworkVariableValue_Base
// Size: 0x8
// VTable: 0x149974668
struct SecurityNetworkVariableValue_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AnimationGraph_Timer
// Size: 0x28
// VTable: 0x149aa5fe8
struct AnimationGraph_Timer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float timeStart; // Offset: 0x18
    float timeEnd; // Offset: 0x1c
    uint32_t count; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: SecurityNetworkVariableValue_Bool
// Size: 0x10
// VTable: 0x1499746c0
struct SecurityNetworkVariableValue_Bool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool value; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SSCActorRotationComponentParams
// Size: 0x18
// VTable: 0x149a80530
struct SSCActorRotationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCharacterCustomizerBaseMaterialSet
// Size: 0x28
// VTable: 0x149a0de78
struct SCharacterCustomizerBaseMaterialSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* headSkinBaseMaterial; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* bodySkinBaseMaterial; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SCItemSeatDashboardScreenStyle
// Size: 0x20
// VTable: 0x149a59468
struct SCItemSeatDashboardScreenStyle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Template; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType Type; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: MissionFlowAction_StateChange
// Size: 0x10
// VTable: 0x149970300
struct MissionFlowAction_StateChange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType toState; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_VehicleState
// Size: 0x10
// VTable: 0x149a66670
struct ControlHintCondition_VehicleState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType state; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: MonitoredZoneParams
// Size: 0x28
// VTable: 0x149967af0
struct MonitoredZoneParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enabledByDefault; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float radiusKm; // Offset: 0x1c
    float strength; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: SCharacterCustomizerWildlineSubconditionBase
// Size: 0x8
// VTable: 0x149a0c9c8
struct SCharacterCustomizerWildlineSubconditionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeBase
// Size: 0x8
// VTable: 0x14998aef0
struct BuildingBlocks_FieldModifierEnumeratedTypeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: HarvestConditionDamageMap
// Size: 0x10
// VTable: 0x1499eff00
struct HarvestConditionDamageMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float damageRatio; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SItemPortDefAttachmentImplementationLogical
// Size: 0x8
// VTable: 0x1499afdc0
struct SItemPortDefAttachmentImplementationLogical {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TriggerSubConditionUsableDef
// Size: 0x40
// VTable: 0x149a89b78
struct TriggerSubConditionUsableDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool usableUserIsPlayer; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* usableUserSuperGUID; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* usableSuperGUID; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    CryStringT* stateName; // Offset: 0x30
    uint8_t _pad_4[0x8]; // Offset: 0x38
};

// Original name: AudioAreaEntityComponentParams
// Size: 0x40
// VTable: 0x1499c85c0
struct AudioAreaEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isEnabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    CryStringT* audioEnvironment; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    float environmentFadeDistance; // Offset: 0x30
    float fadeDistance; // Offset: 0x34
    int32_t soundObstructionType; // Offset: 0x38
    uint8_t _pad_3[0x4]; // Offset: 0x3c
};

// Original name: CraftingGameplayPropertyImpl_Base_Int
// Size: 0x8
// VTable: 0x1499b91f0
struct CraftingGameplayPropertyImpl_Base_Int {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCIGTestC
// Size: 0x18
// VTable: 0x1499dac70
struct SCIGTestC {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool bBase; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool bC; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
};

// Original name: PlayerFormationParams
// Size: 0x30
// VTable: 0x149a94708
struct PlayerFormationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float targetRadius; // Offset: 0x8
    float innerRadius; // Offset: 0xc
    float outerRadius; // Offset: 0x10
    float breakRadius; // Offset: 0x14
    float influenceAtInnerRadius; // Offset: 0x18
    float influenceAtOuterRadius; // Offset: 0x1c
    bool abandonFormationAtBreakRadius; // Offset: 0x20
    uint8_t _pad_1[0x3]; // Offset: 0x21
    ARDataType matchVelocityRadius; // Offset: 0x24
    ARDataType matchRotationRadius; // Offset: 0x28
    float targetVelocityTolerance; // Offset: 0x2c
};

// Original name: TriggerSubConditionDef
// Size: 0x8
// VTable: 0x149a89478
struct TriggerSubConditionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SHackingAbilitySlowdownParams
// Size: 0x20
// VTable: 0x149a2b3e0
struct SHackingAbilitySlowdownParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float chargeUpTime; // Offset: 0x8
    float duration; // Offset: 0xc
    float cooldown; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    float speedPenalty; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SARTrailParams
// Size: 0x20
// VTable: 0x149a55df0
struct SARTrailParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float quatLifetime; // Offset: 0x8
    float quatDistance; // Offset: 0xc
    float maxFadeDistance; // Offset: 0x10
    float minFadeDistance; // Offset: 0x14
    float startDistance; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: HolographicVolumeSphereParams
// Size: 0x10
// VTable: 0x1499d1870
struct HolographicVolumeSphereParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SElevatorBaseCollisionParams
// Size: 0x10
// VTable: 0x1499f2f48
struct SElevatorBaseCollisionParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeStrokeCapStyle
// Size: 0x10
// VTable: 0x14998bbb0
struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeCapStyle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_SpacerContainer
// Size: 0x20
// VTable: 0x149983730
struct BuildingBlocks_SpacerContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float pushSpeed; // Offset: 0x8
    float spacing; // Offset: 0xc
    float boundsScale; // Offset: 0x10
    float recoveryScale; // Offset: 0x14
    bool useSphere; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: SCLoadingPlatformTrackviewParams
// Size: 0x28
// VTable: 0x149a41b58
struct SCLoadingPlatformTrackviewParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* openingLoadingPlatformTrack; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* closingLoadingPlatformTrack; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SJumpPointATCParams
// Size: 0x18
// VTable: 0x149a14cf0
struct SJumpPointATCParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SpeedThrottleConfiguration
// Size: 0x38
// VTable: 0x149a61da0
struct SpeedThrottleConfiguration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType activeMode; // Offset: 0x8
    ARDataType defaultSpeed; // Offset: 0xc
    ARDataType defaultSpeedWithWeapon; // Offset: 0x10
    float mouseWheelSpeedStep; // Offset: 0x14
    float holdTime; // Offset: 0x18
    float durationAccelerateToFastRun; // Offset: 0x1c
    float durationBoostToSprint; // Offset: 0x20
    float durationUnboostFromSprint; // Offset: 0x24
    float durationDecelerateToDefault; // Offset: 0x28
    float withWeaponDurationModifier; // Offset: 0x2c
    ARDataType defaultTutorialSpeed; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
};

// Original name: BuildingBlocks_BindingsVariableInput
// Size: 0x18
// VTable: 0x149981f80
struct BuildingBlocks_BindingsVariableInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* binding; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SChargeDrainRangeParams
// Size: 0x18
// VTable: 0x149a77000
struct SChargeDrainRangeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxBeamDistance; // Offset: 0x8
    float maxSensorDistance; // Offset: 0xc
    float maxVoltBoostDistance; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SandboxInfractionBaseDef
// Size: 0x8
// VTable: 0x149a977b8
struct SandboxInfractionBaseDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: JournalEntryText
// Size: 0x10
// VTable: 0x1499754c0
struct JournalEntryText {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* BodyText; // Offset: 0x8
};

// Original name: SecurityClearance_OutfitRequirementDef
// Size: 0x8
// VTable: 0x1499743d8
struct SecurityClearance_OutfitRequirementDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: STerminalLoginGameplayTrigger
// Size: 0x10
// VTable: 0x1499fab20
struct STerminalLoginGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool login; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SIObjectives
// Size: 0x18
// VTable: 0x1499ba1c0
struct SIObjectives {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SendLandingGearObstructedEvent
// Size: 0x10
// VTable: 0x149a51cb0
struct SendLandingGearObstructedEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool obstructed; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SMannequinActionDef_PowerSuit
// Size: 0x10
// VTable: 0x149a69c90
struct SMannequinActionDef_PowerSuit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float turnOnSpotTriggerAimYaw; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PlayerTradeInterfaceParams
// Size: 0x18
// VTable: 0x1499e4c10
struct PlayerTradeInterfaceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SBindingTriggerGameplayTrigger
// Size: 0x18
// VTable: 0x1499fb3d0
struct SBindingTriggerGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* triggerName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: AnimationControlActorIK
// Size: 0x30
// VTable: 0x1499a20d8
struct AnimationControlActorIK {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* limb; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* bone; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float blendTime; // Offset: 0x28
    bool alignEndEffector; // Offset: 0x2c
    uint8_t _pad_3[0x3]; // Offset: 0x2d
};

// Original name: SCItemControlPriorityCustomValue
// Size: 0x10
// VTable: 0x149a07230
struct SCItemControlPriorityCustomValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t priority; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: ControlHintCondition_ActorAbilityActive
// Size: 0x10
// VTable: 0x149a66050
struct ControlHintCondition_ActorAbilityActive {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType ability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSCMusicAreaTriggerComponentParams
// Size: 0x18
// VTable: 0x1499e2050
struct SSCMusicAreaTriggerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ActorObservableExtender
// Size: 0x8
// VTable: 0x149a01bc8
struct ActorObservableExtender {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SNodeSwapExpansionParams
// Size: 0x18
// VTable: 0x149a2cb98
struct SNodeSwapExpansionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t priority; // Offset: 0x8
    float chance; // Offset: 0xc
    float cooldown; // Offset: 0x10
    bool cooldownOnFailure; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
};

// Original name: SDamageCurveParams
// Size: 0x18
// VTable: 0x1499e7998
struct SDamageCurveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType curveStartPoint; // Offset: 0x8
    ARDataType curveEndPoint; // Offset: 0xc
    float startPointOffset; // Offset: 0x10
    float endPointOffset; // Offset: 0x14
};

// Original name: VehicleAITargetingParams
// Size: 0x10
// VTable: 0x1499aa988
struct VehicleAITargetingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float shipAttackerScore; // Offset: 0x8
    float turretAttackerScore; // Offset: 0xc
};

// Original name: TimeValue_Partitioned
// Size: 0x18
// VTable: 0x1499b3328
struct TimeValue_Partitioned {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t days; // Offset: 0x8
    int32_t hours; // Offset: 0xc
    int32_t minutes; // Offset: 0x10
    float seconds; // Offset: 0x14
};

// Original name: UnitTest_ClassA
// Size: 0x28
// VTable: 0x149a88e20
struct UnitTest_ClassA {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* myBaseString; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* myClassA; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: IObservableExtender
// Size: 0x8
// VTable: 0x149a01b60
struct IObservableExtender {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_ComponentParameterInputNumber
// Size: 0x18
// VTable: 0x14998adc0
struct BuildingBlocks_ComponentParameterInputNumber {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float value; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: UIInteriorMapLabelParams
// Size: 0x28
// VTable: 0x149a15d10
struct UIInteriorMapLabelParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x18
    float textScale; // Offset: 0x20
    float maxWidth; // Offset: 0x24
};

// Original name: AISeatDashboardControllerComponentParams
// Size: 0x18
// VTable: 0x149a38e58
struct AISeatDashboardControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ConsumableEffectResource
// Size: 0x18
// VTable: 0x149a25658
struct ConsumableEffectResource {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* effectDescription; // Offset: 0x8
    ARDataType consumableResourceType; // Offset: 0x10
    float amount; // Offset: 0x14
};

// Original name: SLocomotionPersonalityStateFilter
// Size: 0x60
// VTable: 0x149ab1530
struct SLocomotionPersonalityStateFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ARDataType filterByLocomotionSet; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    CryStringT* filterByMannequinGlobalTags; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
};

// Original name: AISeatShieldControllerComponentParams
// Size: 0x18
// VTable: 0x149a073d0
struct AISeatShieldControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeLayoutPolicy
// Size: 0x10
// VTable: 0x14998b670
struct BuildingBlocks_FieldModifierEnumeratedTypeLayoutPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: RadarDisplayEntryEffects_Config
// Size: 0x20
// VTable: 0x149aa8ee0
struct RadarDisplayEntryEffects_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float activatePingDuration; // Offset: 0x8
    float activatePingMaxSize; // Offset: 0xc
    float activatePingRelativeColorChange; // Offset: 0x10
    float fadeOutDuration; // Offset: 0x14
    float fadeOutLineOutStart; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: ResourceTypeMolarMass
// Size: 0x10
// VTable: 0x149961ff0
struct ResourceTypeMolarMass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float molarMass; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: Vec3
// Size: 0x18
// VTable: 0x1499ad000
struct Vec3 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float x; // Offset: 0x8
    float y; // Offset: 0xc
    float z; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: RadarSharedParams
// Size: 0x10
// VTable: 0x1499c4738
struct RadarSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxPassiveDistance; // Offset: 0x8
    bool useRoomGraphForPassiveDetection; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: SJumpTunnelVisualParams
// Size: 0x30
// VTable: 0x149afcb48
struct SJumpTunnelVisualParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool quantumEffect; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float portalExternalViewDistRatio; // Offset: 0xc
    float portalInternalViewDistRatio; // Offset: 0x10
    float visAreaViewDistRatio; // Offset: 0x14
    float probeIntensity; // Offset: 0x18
    float internalDrawDistance; // Offset: 0x1c
    float externalDrawDistance; // Offset: 0x20
    float openingHiddenTime; // Offset: 0x24
    float closingHiddenTime; // Offset: 0x28
    float exitPortalCullingDistance; // Offset: 0x2c
};

// Original name: BuildingBlocks_StaticVariableInteger
// Size: 0x20
// VTable: 0x14998a540
struct BuildingBlocks_StaticVariableInteger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int64_t value; // Offset: 0x18
};

// Original name: ExtendedNameEntryTextLocalized
// Size: 0x10
// VTable: 0x149a93110
struct ExtendedNameEntryTextLocalized {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
};

// Original name: DefaultActionsEntityState_HasAvailableCommsTap
// Size: 0x8
// VTable: 0x149a8c088
struct DefaultActionsEntityState_HasAvailableCommsTap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MusicLogicSwitchValue
// Size: 0x28
// VTable: 0x1499b5460
struct MusicLogicSwitchValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* switchValue; // Offset: 0x8
    uint8_t _pad_1[0x18]; // Offset: 0x10
};

// Original name: SPlayerObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e7f78
struct SPlayerObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SMisfireCondition
// Size: 0x8
// VTable: 0x149a08f70
struct SMisfireCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCLensAnimationParams
// Size: 0x38
// VTable: 0x149a22688
struct SCLensAnimationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float wakeUpDelayTime; // Offset: 0x18
    float sleepDelayTime; // Offset: 0x1c
    float activateLensDelayTime; // Offset: 0x20
    float deactivateLensDelayTime; // Offset: 0x24
    float activateVisorDelayTime; // Offset: 0x28
    float deactivateVisorDelayTime; // Offset: 0x2c
    float dashboardStartUseDelayTime; // Offset: 0x30
    float dashboardStopUseDelayTime; // Offset: 0x34
};

// Original name: SMobiGlasAppDataPacketBase
// Size: 0x8
// VTable: 0x149a35f40
struct SMobiGlasAppDataPacketBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SWeaponReticleParams
// Size: 0x30
// VTable: 0x149a61388
struct SWeaponReticleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* defaultReticle; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* adsReticle; // Offset: 0x18
    uint8_t _pad_2[0x10]; // Offset: 0x20
};

// Original name: LegacyCraftingOutput_Base
// Size: 0x8
// VTable: 0x149a0ef48
struct LegacyCraftingOutput_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_EntityRendererPolicy
// Size: 0x10
// VTable: 0x149984fb8
struct BuildingBlocks_EntityRendererPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool sortViaPivot; // Offset: 0x8
    bool includeInGroundingEffects; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: CraftingResearchUnlock_Base_NonRef
// Size: 0x8
// VTable: 0x1499b8b60
struct CraftingResearchUnlock_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SOrdnanceEmissionsParams
// Size: 0x20
// VTable: 0x149a241c0
struct SOrdnanceEmissionsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool active; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float minValue; // Offset: 0xc
    float maxValue; // Offset: 0x10
    float riseRate; // Offset: 0x14
    float decayRate; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SWeaponActionFireTractorBeamTowingParams
// Size: 0x50
// VTable: 0x149a788f8
struct SWeaponActionFireTractorBeamTowingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float towingForce; // Offset: 0x8
    float towingMaxAcceleration; // Offset: 0xc
    float towingMaxDistance; // Offset: 0x10
    float towDeflectionPlayerCoef; // Offset: 0x14
    float towDeflectionMaxForce; // Offset: 0x18
    float towDeflectionAllPushAngle; // Offset: 0x1c
    float towDeflectionBlendFactor; // Offset: 0x20
    float towDeflectionMaxAngleForce; // Offset: 0x24
    float towPivotMaxForceCoef; // Offset: 0x28
    float towPivotStaticDampForce; // Offset: 0x2c
    float towPivotBlendFactor; // Offset: 0x30
    float towPivotAllPushAngle; // Offset: 0x34
    float towPivotMaxAngleForce; // Offset: 0x38
    float towPivotPushMaxAngularVelocity; // Offset: 0x3c
    float towForceRamp; // Offset: 0x40
    float towForceTetherOverMax; // Offset: 0x44
    float towForcePlaneDecel; // Offset: 0x48
    float quantumTowMassLimit; // Offset: 0x4c
};

// Original name: GlobalResourceSkin
// Size: 0x18
// VTable: 0x1499ae240
struct GlobalResourceSkin {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SCItemControllableParams
// Size: 0x10
// VTable: 0x149a06b18
struct SCItemControllableParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
};

// Original name: GeomFont_LetterNode
// Size: 0x20
// VTable: 0x1499949e8
struct GeomFont_LetterNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    uint16_t code; // Offset: 0x18
    uint8_t _pad_2[0x6]; // Offset: 0x1a
};

// Original name: BuildingBlocks_NumberTextFormatModifier
// Size: 0x10
// VTable: 0x149981c08
struct BuildingBlocks_NumberTextFormatModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType field; // Offset: 0x8
    float value; // Offset: 0xc
};

// Original name: CargoInterfaceParams
// Size: 0x18
// VTable: 0x149964270
struct CargoInterfaceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: HospitalCheckinScreenComponentParams
// Size: 0x18
// VTable: 0x149a0fb48
struct HospitalCheckinScreenComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSCActorInteractorComponentParams
// Size: 0x18
// VTable: 0x149a14d08
struct SSCActorInteractorComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: HitConsistencyParams
// Size: 0x20
// VTable: 0x149a0b048
struct HitConsistencyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hitHistoryWindow; // Offset: 0x8
    float standardDeviationMultiplier; // Offset: 0xc
    float timeExponent; // Offset: 0x10
    float minDeviation; // Offset: 0x14
    float extractionMagnitude; // Offset: 0x18
    float maxEffectOnInstability; // Offset: 0x1c
};

// Original name: SSCLocalPlayerAimControlComponentParams
// Size: 0x18
// VTable: 0x149a74488
struct SSCLocalPlayerAimControlComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SExitInteractionGameplayTrigger
// Size: 0x8
// VTable: 0x1499facb8
struct SExitInteractionGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ItemPreview_LightIntensities
// Size: 0x20
// VTable: 0x149a94cf8
struct ItemPreview_LightIntensities {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float keyLightTopIntensity; // Offset: 0x8
    float fillLightTopIntensity; // Offset: 0xc
    float rimLightTopIntensity; // Offset: 0x10
    float keyLightBottomIntensity; // Offset: 0x14
    float fillLightBottomIntensity; // Offset: 0x18
    float rimLightBottomIntensity; // Offset: 0x1c
};

// Original name: GameTokenContainerParams
// Size: 0x18
// VTable: 0x1499ac4d8
struct GameTokenContainerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BindingsOperations_WaveformShapeSine
// Size: 0x8
// VTable: 0x149988838
struct BindingsOperations_WaveformShapeSine {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: LinkedStatSetupBase
// Size: 0x8
// VTable: 0x1499fdba8
struct LinkedStatSetupBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ExtinguishType_Sphere
// Size: 0x10
// VTable: 0x14997b2c0
struct ExtinguishType_Sphere {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCItemClothingTemperatureResistanceParams
// Size: 0x10
// VTable: 0x149aa16c8
struct SCItemClothingTemperatureResistanceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float MinResistance; // Offset: 0x8
    float MaxResistance; // Offset: 0xc
};

// Original name: BuildingBlocks_FieldModifierNumber
// Size: 0x10
// VTable: 0x14998b078
struct BuildingBlocks_FieldModifierNumber {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType field; // Offset: 0x8
    float value; // Offset: 0xc
};

// Original name: SMobiGlasPersonalStatusSkillsEntry
// Size: 0x30
// VTable: 0x149a37828
struct SMobiGlasPersonalStatusSkillsEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    ARDataType displayType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CryStringT* displayImage; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
};

// Original name: FoleyBone
// Size: 0x18
// VTable: 0x149a67e90
struct FoleyBone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ControlHintCondition_ActorEnvironment
// Size: 0x10
// VTable: 0x149a65f30
struct ControlHintCondition_ActorEnvironment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType environmentState; // Offset: 0x8
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: SSCDamageHandling
// Size: 0x28
// VTable: 0x149a4e410
struct SSCDamageHandling {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool damageDisabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    bool bulletsInstaKillActors; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
};

// Original name: BaseService
// Size: 0x48
// VTable: 0x149a90158
struct BaseService {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    CLocIdentifier* productName; // Offset: 0x18
    CryStringT* icon; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float serviceDelayTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    CLocIdentifier* hudMessage; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
};

// Original name: DrugEfficacyConfigForItemSubTypeBase
// Size: 0x10
// VTable: 0x149a72d50
struct DrugEfficacyConfigForItemSubTypeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemSubType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: FloatFactorRange
// Size: 0x10
// VTable: 0x1499b39a8
struct FloatFactorRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float min; // Offset: 0x8
    float max; // Offset: 0xc
};

// Original name: FoleyAxis
// Size: 0x18
// VTable: 0x149a67ef0
struct FoleyAxis {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ResourceHealthHandlerParams
// Size: 0x18
// VTable: 0x149a103d0
struct ResourceHealthHandlerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AttachableStateModifierContext_Self
// Size: 0x8
// VTable: 0x1499c15c0
struct AttachableStateModifierContext_Self {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MedicalSkeletonUIProviderParams
// Size: 0x18
// VTable: 0x149a571c0
struct MedicalSkeletonUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: CraftingCost_Base_Material
// Size: 0x8
// VTable: 0x1499b80f0
struct CraftingCost_Base_Material {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AtmosphereState
// Size: 0x20
// VTable: 0x14997a3b8
struct AtmosphereState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType pressureMod; // Offset: 0x8
    float pressure; // Offset: 0xc
    ARDataType temperatureMod; // Offset: 0x10
    float temperature; // Offset: 0x14
    ARDataType humidityMod; // Offset: 0x18
    float humidity; // Offset: 0x1c
};

// Original name: BuildingBlocks_BindingsIntegerComponentParameter
// Size: 0x78
// VTable: 0x149981100
struct BuildingBlocks_BindingsIntegerComponentParameter {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    CryStringT* name; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    ARDataType parameter; // Offset: 0x60
    uint8_t _pad_2[0x4]; // Offset: 0x64
    int64_t defaultValue; // Offset: 0x68
    uint8_t _pad_3[0x8]; // Offset: 0x70
};

// Original name: RadiationStateBase
// Size: 0x8
// VTable: 0x14997ab90
struct RadiationStateBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ProcAimBaseJointTypeConfig
// Size: 0x18
// VTable: 0x149aaf390
struct ProcAimBaseJointTypeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* jointName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: VisualStateParams
// Size: 0x18
// VTable: 0x1499d19f8
struct VisualStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float wear; // Offset: 0x8
    float dirt; // Offset: 0xc
    float interference; // Offset: 0x10
    float damage; // Offset: 0x14
};

// Original name: SSequencerEntityDragTaskParams
// Size: 0x20
// VTable: 0x149a9c888
struct SSequencerEntityDragTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: SSequencerDespawnerTaskParams
// Size: 0x20
// VTable: 0x1499ed360
struct SSequencerDespawnerTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: SCActorDNAComponentParams
// Size: 0x38
// VTable: 0x1499d1278
struct SCActorDNAComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* DNA; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* customizationFile; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: SHackingAIDecisionParams
// Size: 0x18
// VTable: 0x149a2b4b8
struct SHackingAIDecisionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t priority; // Offset: 0x8
    float chance; // Offset: 0xc
    float cooldown; // Offset: 0x10
    bool cooldownOnFailure; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
};

// Original name: DynamicPowerPool
// Size: 0x10
// VTable: 0x1499a2d78
struct DynamicPowerPool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: MarkerTrackingBoxoutParameters
// Size: 0x30
// VTable: 0x149a4a1d0
struct MarkerTrackingBoxoutParameters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxLifetime; // Offset: 0x8
    float maxTargetedLifetime; // Offset: 0xc
    float outroTime; // Offset: 0x10
    float edgeTransitionTime; // Offset: 0x14
    float transitionCooldownTime; // Offset: 0x18
    float edgeBounds; // Offset: 0x1c
    float fpsPreviewZoneSize; // Offset: 0x20
    float vehiclePreviewZoneSize; // Offset: 0x24
    uint8_t maxPreviews; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
};

// Original name: SecurityNetworkVariableValue_Int
// Size: 0x10
// VTable: 0x149974720
struct SecurityNetworkVariableValue_Int {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SAverageValue
// Size: 0x10
// VTable: 0x149a88690
struct SAverageValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t frameCount; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SWeaponVibrationParams
// Size: 0x10
// VTable: 0x149a60278
struct SWeaponVibrationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float normalVibration; // Offset: 0x8
    float playerVibration; // Offset: 0xc
};

// Original name: GlobalResourceDBA
// Size: 0x18
// VTable: 0x1499ae360
struct GlobalResourceDBA {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: LightStatusMultiplier
// Size: 0x10
// VTable: 0x149a44ab8
struct LightStatusMultiplier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType status; // Offset: 0x8
    float multiplier; // Offset: 0xc
};

// Original name: VLKCombatData
// Size: 0x90
// VTable: 0x1499bb940
struct VLKCombatData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float chaseEmergeRange; // Offset: 0x8
    float chaseTimeoutDuration; // Offset: 0xc
    CryStringT* wanderTPSQueryName; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    float maxMeleeRange; // Offset: 0x20
    float maxAttackRange; // Offset: 0x24
    int32_t maxNumAttackTokenUsers; // Offset: 0x28
    bool isMeleeEnabled; // Offset: 0x2c
    uint8_t _pad_2[0x3]; // Offset: 0x2d
    float targetProximityForRelocationSubmerge; // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
    CryStringT* combatRelocationTPSQueryName; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
    CryStringT* targetQueryName; // Offset: 0x48
    uint8_t _pad_5[0x8]; // Offset: 0x50
    CryStringT* targetQueryNameNoMelee; // Offset: 0x58
    uint8_t _pad_6[0x8]; // Offset: 0x60
    bool requiresGroundTarget; // Offset: 0x68
    uint8_t _pad_7[0x3]; // Offset: 0x69
    float postAttackIdleDuration; // Offset: 0x6c
    float meleeCooldownDuration; // Offset: 0x70
    float spinAttackProbability; // Offset: 0x74
    bool hasSecondaryAttack; // Offset: 0x78
    uint8_t _pad_8[0x3]; // Offset: 0x79
    float targetPredictionTime; // Offset: 0x7c
    int32_t aerialNormalTargetRangedAttackFireMode; // Offset: 0x80
    int32_t aerialLargeTargetRangedAttackFireMode; // Offset: 0x84
    int32_t groundTargetRangedAttackFireMode; // Offset: 0x88
    int32_t minLargeShipSizeCategory; // Offset: 0x8c
};

// Original name: SHackingAbilityParams
// Size: 0x18
// VTable: 0x149a2b320
struct SHackingAbilityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float chargeUpTime; // Offset: 0x8
    float duration; // Offset: 0xc
    float cooldown; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: UIDataBankDisplay3DSpaceDustParams
// Size: 0x18
// VTable: 0x149aa9f00
struct UIDataBankDisplay3DSpaceDustParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float sizeMultiplier; // Offset: 0x8
    float minimumSize; // Offset: 0xc
    float maximumSize; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: PurchasableVehicleProviderParams
// Size: 0x20
// VTable: 0x1499f8f50
struct PurchasableVehicleProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType vehicleUsageTypes; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: AerodynamicTrailCalculationDefault
// Size: 0x8
// VTable: 0x14997a660
struct AerodynamicTrailCalculationDefault {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: LinkedStatPassValueBase
// Size: 0x8
// VTable: 0x1499fd6a8
struct LinkedStatPassValueBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeSvgScalingBehavior
// Size: 0x10
// VTable: 0x14998bd90
struct BuildingBlocks_FieldModifierEnumeratedTypeSvgScalingBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SShieldGeneratorMisfireParams
// Size: 0x10
// VTable: 0x1499f4268
struct SShieldGeneratorMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float regenReductionRatio; // Offset: 0x8
    float healthReductionRatio; // Offset: 0xc
};

// Original name: DirectRTT_InterferenceParams
// Size: 0x18
// VTable: 0x14993a458
struct DirectRTT_InterferenceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Amount; // Offset: 0x8
    float Speed; // Offset: 0xc
    float Tiling; // Offset: 0x10
    float Brightness; // Offset: 0x14
};

// Original name: SubsumptionMissionAudioComponentParams
// Size: 0x18
// VTable: 0x1499d6cd8
struct SubsumptionMissionAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ToxiInputModifierDelay
// Size: 0x18
// VTable: 0x149a64c20
struct ToxiInputModifierDelay {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float minSpeed; // Offset: 0xc
    float maxSpeed; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SSCLocalPlayerPersonalThoughtComponentParams
// Size: 0x18
// VTable: 0x1499ee130
struct SSCLocalPlayerPersonalThoughtComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ItemModifierLifetime
// Size: 0x8
// VTable: 0x1499f69d8
struct ItemModifierLifetime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_VehicleAutoLand
// Size: 0x10
// VTable: 0x149a66af0
struct ControlHintCondition_VehicleAutoLand {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType autoLandState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SDFSetParams
// Size: 0x20
// VTable: 0x1499e60b0
struct SDFSetParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType setType; // Offset: 0x8
    float isoOverride; // Offset: 0xc
    CryStringT* surfaceIdName; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
};

// Original name: SSphereHazardAreaShapeParams
// Size: 0x10
// VTable: 0x149a2d0b0
struct SSphereHazardAreaShapeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ScanDisplayVariableParams
// Size: 0x20
// VTable: 0x1499c6770
struct ScanDisplayVariableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t truncateSize; // Offset: 0x8
    bool displayIsHidden; // Offset: 0x9
    bool displayInBrackets; // Offset: 0xa
    bool suffixArrayIndex; // Offset: 0xb
    bool suffixSemiColon; // Offset: 0xc
    ARDataType auxiliaryFlag; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    ScanDisplayVariableParams fallback_; /* fallback */ // Offset: 0x10
};

// Original name: RoomExtension
// Size: 0x8
// VTable: 0x14997d140
struct RoomExtension {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FireHazardGlobalDamageToHealthParams
// Size: 0x18
// VTable: 0x14997b8b8
struct FireHazardGlobalDamageToHealthParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumDamageTemperature; // Offset: 0x8
    float baseDamage; // Offset: 0xc
    float curveAngle; // Offset: 0x10
    float curveOffset; // Offset: 0x14
};

// Original name: PlacementValidator
// Size: 0x8
// VTable: 0x149a80d58
struct PlacementValidator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TransitDynamicDestinationParams
// Size: 0x28
// VTable: 0x1499d86b8
struct TransitDynamicDestinationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* Name; // Offset: 0x18
    float radius; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SMobiGlasSetShipRecallAllowed
// Size: 0x10
// VTable: 0x149a38000
struct SMobiGlasSetShipRecallAllowed {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool allowed; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SWeaponRegenConsumerParams
// Size: 0x28
// VTable: 0x149a61060
struct SWeaponRegenConsumerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float initialRegenPerSec; // Offset: 0x8
    float requestedAmmoLoad; // Offset: 0xc
    float requestedRegenPerSec; // Offset: 0x10
    float regenerationCooldown; // Offset: 0x14
    float regenerationCostPerBullet; // Offset: 0x18
    float maxAmmoLoad; // Offset: 0x1c
    float maxRegenPerSec; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: BuffDurationOverride
// Size: 0x10
// VTable: 0x1499fc440
struct BuffDurationOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float durationOverride; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: FloatUserVariableSetValueTask
// Size: 0x38
// VTable: 0x149994128
struct FloatUserVariableSetValueTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* name; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float value; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: SApplicationFormRelationParams
// Size: 0x20
// VTable: 0x149a0ebf8
struct SApplicationFormRelationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CryStringT* mannequinTag; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
};

// Original name: BindingsOperations_WaveformShapeRandom
// Size: 0x10
// VTable: 0x1499889d8
struct BindingsOperations_WaveformShapeRandom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float startInterpolation; // Offset: 0x8
    uint8_t elementCount; // Offset: 0xc
    uint8_t elementOffset; // Offset: 0xd
    ARDataType interpolation; // Offset: 0xe
    uint8_t _pad_1[0x1]; // Offset: 0xf
};

// Original name: SAnimationScopeContext
// Size: 0x20
// VTable: 0x1499a2158
struct SAnimationScopeContext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* scopeContext; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType type_; /* type */ // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: LoadoutEditorAdditionalParams
// Size: 0x8
// VTable: 0x149aaaa78
struct LoadoutEditorAdditionalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AtmosphereStatePressureTemplate
// Size: 0x10
// VTable: 0x14997a4e0
struct AtmosphereStatePressureTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float pressure; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_LayoutPolicyBase
// Size: 0x8
// VTable: 0x149982150
struct BuildingBlocks_LayoutPolicyBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SFPSMineableEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a10
struct SFPSMineableEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MusicLogicSwitch
// Size: 0x28
// VTable: 0x1499b5c48
struct MusicLogicSwitch {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* switch_; /* switch */ // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* value; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: UvInset
// Size: 0x18
// VTable: 0x149a30708
struct UvInset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float top; // Offset: 0x8
    float right; // Offset: 0xc
    float bottom; // Offset: 0x10
    float left; // Offset: 0x14
};

// Original name: ControlHintCondition_RemoteTurret
// Size: 0x10
// VTable: 0x149a668b0
struct ControlHintCondition_RemoteTurret {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType remoteTurret; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: ActorMotionStateFilter
// Size: 0x50
// VTable: 0x149a8abe0
struct ActorMotionStateFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ARDataType filterByLocomotionSet; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: EATransportSplineTransitionParams
// Size: 0x10
// VTable: 0x149a28610
struct EATransportSplineTransitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    bool flyToStart; // Offset: 0x9
    bool useAfterburner; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
};

// Original name: BuildingBlocks_PrimitiveRendererPolicy
// Size: 0x10
// VTable: 0x149984f38
struct BuildingBlocks_PrimitiveRendererPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool sortViaPivot; // Offset: 0x8
    bool includeInGroundingEffects; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: SActorProceduralBodyRecoilModifiers
// Size: 0x28
// VTable: 0x149a71d10
struct SActorProceduralBodyRecoilModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hipsPushForce; // Offset: 0x8
    float hipsDampStrength; // Offset: 0xc
    float hipsDampStrengthEnd; // Offset: 0x10
    float spinePushForceFirst; // Offset: 0x14
    float spinePushForce; // Offset: 0x18
    float spineDampStrength; // Offset: 0x1c
    float spineDampStrengthEnd; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: PersonalThoughtPopWindowParams
// Size: 0x20
// VTable: 0x149a99e90
struct PersonalThoughtPopWindowParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* message; // Offset: 0x8
    CLocIdentifier* acceptButtonText; // Offset: 0x10
    CLocIdentifier* cancelButtonText; // Offset: 0x18
};

// Original name: SEACriticalMessageDef
// Size: 0x18
// VTable: 0x149a1f600
struct SEACriticalMessageDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t messagePriority; // Offset: 0x8
    float messageDuration; // Offset: 0xc
    CLocIdentifier* message; // Offset: 0x10
};

// Original name: TriggeredWarningAdd
// Size: 0x20
// VTable: 0x1499fb180
struct TriggeredWarningAdd {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    ARDataType messageState; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    float duration; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: ReputationProviderParams
// Size: 0x18
// VTable: 0x149a22040
struct ReputationProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BindingsOperations_WaveformShapeSawtooth
// Size: 0x10
// VTable: 0x149988900
struct BindingsOperations_WaveformShapeSawtooth {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isReversed; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: ControlHintCondition_ActorWeaponState
// Size: 0x10
// VTable: 0x149a661d0
struct ControlHintCondition_ActorWeaponState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType weaponState; // Offset: 0x8
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: RewardScale
// Size: 0x18
// VTable: 0x149970e60
struct RewardScale {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float i; // Offset: 0x8
    float k; // Offset: 0xc
    float m; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: ContractGeneration
// Size: 0x20
// VTable: 0x149973708
struct ContractGeneration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t maxInstances; // Offset: 0x8
    int32_t maxInstancesPerPlayer; // Offset: 0xc
    bool tutorial; // Offset: 0x10
    bool requestOnly; // Offset: 0x11
    uint8_t _pad_1[0x2]; // Offset: 0x12
    float respawnTime; // Offset: 0x14
    float respawnTimeVariation; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: CraftingRecipe_Base
// Size: 0x8
// VTable: 0x1499b89a8
struct CraftingRecipe_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEntityTraversingNodeTypeItemPort
// Size: 0x18
// VTable: 0x14999e760
struct SEntityTraversingNodeTypeItemPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPortName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SurfaceRaindrops_Occluder
// Size: 0x10
// VTable: 0x1499986f8
struct SurfaceRaindrops_Occluder {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float distanceToVisor; // Offset: 0x8
    int32_t numberOfWaveSamples; // Offset: 0xc
};

// Original name: SCLedgeEntityParams
// Size: 0x10
// VTable: 0x149a9f068
struct SCLedgeEntityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool excludeLeft; // Offset: 0x8
    bool excludeRight; // Offset: 0x9
    bool excludeBack; // Offset: 0xa
    bool excludeFront; // Offset: 0xb
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ContractIntParam
// Size: 0x10
// VTable: 0x1499731f8
struct ContractIntParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType param; // Offset: 0x8
    int32_t value; // Offset: 0xc
};

// Original name: SObjectDataBankParams
// Size: 0x18
// VTable: 0x1499c8240
struct SObjectDataBankParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SActorForceReactionLeanBoneDef
// Size: 0x10
// VTable: 0x149a4d628
struct SActorForceReactionLeanBoneDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float leanWeightFB; // Offset: 0x8
    float leanWeightLR; // Offset: 0xc
};

// Original name: BaseHoloDisplayProvider
// Size: 0x18
// VTable: 0x149a30378
struct BaseHoloDisplayProvider {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEntityTraversingNodeTypeZoneHostVehicle
// Size: 0x10
// VTable: 0x14999e8f0
struct SEntityTraversingNodeTypeZoneHostVehicle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool RootVehicle; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: LocationManagerParams
// Size: 0x18
// VTable: 0x149a0fd48
struct LocationManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: UIRenderToTextureTarget
// Size: 0x20
// VTable: 0x149993b58
struct UIRenderToTextureTarget {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float aspectRatio; // Offset: 0x18
    bool usePrimaryTargetBounds; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
};

// Original name: BuildingBlocks_StaticVariableIntegerConstant
// Size: 0x20
// VTable: 0x14998a6c0
struct BuildingBlocks_StaticVariableIntegerConstant {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType value; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SpawnNotifierEntityComponentParams
// Size: 0x18
// VTable: 0x1499e25c0
struct SpawnNotifierEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SDoorCollisionReactionParams
// Size: 0x10
// VTable: 0x1499f2280
struct SDoorCollisionReactionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType CollisionReactionDirection; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ContractClassBase
// Size: 0x8
// VTable: 0x149971138
struct ContractClassBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FireRepairerType_Base
// Size: 0x8
// VTable: 0x14997cec0
struct FireRepairerType_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_TriggerNavigation
// Size: 0x28
// VTable: 0x14998d5c8
struct BuildingBlocks_TriggerNavigation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* layerName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType type_; /* type */ // Offset: 0x18
    uint8_t _pad_2[0xc]; // Offset: 0x1c
};

// Original name: BuildingBlocks_NumberCompareCondition
// Size: 0x10
// VTable: 0x149986f58
struct BuildingBlocks_NumberCompareCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    ARDataType comparison; // Offset: 0xc
};

// Original name: STriggerableDevicesBlinking
// Size: 0x20
// VTable: 0x149a704d0
struct STriggerableDevicesBlinking {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float minFrequency; // Offset: 0xc
    float maxFrequency; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    float rampUpTime; // Offset: 0x18
    uint8_t _pad_3[0x4]; // Offset: 0x1c
};

// Original name: TriggerSubConditionDistanceDef
// Size: 0x40
// VTable: 0x149a899a0
struct TriggerSubConditionDistanceDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* approachingNpcGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* npcGUID; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* checkType; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    float distance; // Offset: 0x38
    float minLookAngleScale; // Offset: 0x3c
};

// Original name: SHackingAbilityPingParams
// Size: 0x20
// VTable: 0x149a2b380
struct SHackingAbilityPingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float chargeUpTime; // Offset: 0x8
    float duration; // Offset: 0xc
    float cooldown; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    float pingRadius; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SCItemDoorStatusLightsParams
// Size: 0x48
// VTable: 0x1499f39d0
struct SCItemDoorStatusLightsParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* PoweredAndIntactEffectGroup; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* EmergencyPowerEffectGroup; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* OfflineEffectGroup; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
};

// Original name: EASerializedCarrier
// Size: 0x18
// VTable: 0x149a3ace0
struct EASerializedCarrier {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCItemMissileControllerParams
// Size: 0x28
// VTable: 0x149a7fd38
struct SCItemMissileControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float lockAngleAtMin; // Offset: 0x18
    float lockAngleAtMax; // Offset: 0x1c
    int32_t maxArmedMissiles; // Offset: 0x20
    float launchCooldownTime; // Offset: 0x24
};

// Original name: SDistortionParams
// Size: 0x38
// VTable: 0x1499f1dd0
struct SDistortionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float DecayDelay; // Offset: 0x18
    float DecayRate; // Offset: 0x1c
    float Maximum; // Offset: 0x20
    float WarningRatio; // Offset: 0x24
    float RecoveryRatio; // Offset: 0x28
    float PowerRatioAtMaxDistortion; // Offset: 0x2c
    bool PowerChangeOnlyAtMaxDistortion; // Offset: 0x30
    uint8_t _pad_1[0x7]; // Offset: 0x31
};

// Original name: SCEquipableParams
// Size: 0x18
// VTable: 0x149a8e580
struct SCEquipableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPort; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ProceduralLayoutNode_Base
// Size: 0x8
// VTable: 0x1499b5d40
struct ProceduralLayoutNode_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlanetDayNightTemperatureBaseParams
// Size: 0x8
// VTable: 0x14999d068
struct PlanetDayNightTemperatureBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SRemoveCrimesGameplayTrigger
// Size: 0x10
// VTable: 0x149968580
struct SRemoveCrimesGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool removeSelectedInfractionOnly; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: WeatherEffects_Asteroid
// Size: 0x8
// VTable: 0x149997c78
struct WeatherEffects_Asteroid {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SGreenZoneObedienceComponentParams
// Size: 0x18
// VTable: 0x149967bf0
struct SGreenZoneObedienceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SRaceCheckpointEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a48
struct SRaceCheckpointEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ItemResourceNetworkPowerModifier
// Size: 0x10
// VTable: 0x1499a1110
struct ItemResourceNetworkPowerModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t additiveModifier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: LightFlickerWaveParams
// Size: 0x8
// VTable: 0x1499e1048
struct LightFlickerWaveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ItemModifierTimedLife
// Size: 0x10
// VTable: 0x1499f6a30
struct ItemModifierTimedLife {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lifetime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCharacterValidationParams
// Size: 0x8
// VTable: 0x149a0d378
struct SCharacterValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CraftingRecipeResults_Base_NonRef
// Size: 0x8
// VTable: 0x1499b8820
struct CraftingRecipeResults_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCItemTurretAngleLimitParams
// Size: 0x8
// VTable: 0x149a59de8
struct SCItemTurretAngleLimitParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeHorizontalAlignment
// Size: 0x10
// VTable: 0x14998be50
struct BuildingBlocks_FieldModifierEnumeratedTypeHorizontalAlignment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSpreadModifier
// Size: 0x20
// VTable: 0x1499de7b8
struct SSpreadModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minMultiplier; // Offset: 0x8
    float maxMultiplier; // Offset: 0xc
    float firstAttackMultiplier; // Offset: 0x10
    float attackMultiplier; // Offset: 0x14
    float decayMultiplier; // Offset: 0x18
    float additiveModifier; // Offset: 0x1c
};

// Original name: DoorNavigationLinkController
// Size: 0x8
// VTable: 0x1499ecf98
struct DoorNavigationLinkController {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: UIGraph_SkyLineWDComponent
// Size: 0x8
// VTable: 0x149a38cc0
struct UIGraph_SkyLineWDComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GreenZoneFlagsDef
// Size: 0x18
// VTable: 0x149967340
struct GreenZoneFlagsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool noFPSWeapons; // Offset: 0x8
    bool noShipWeapons; // Offset: 0x9
    bool noMelee; // Offset: 0xa
    bool noTakedown; // Offset: 0xb
    bool walkOnly; // Offset: 0xc
    bool softLockFPSWeapons; // Offset: 0xd
    bool noShipSelfDestruct; // Offset: 0xe
    bool unlawfulZone; // Offset: 0xf
    bool noTractorBeam; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: HarvestConditionMovement
// Size: 0x10
// VTable: 0x1499efe40
struct HarvestConditionMovement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float distance; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: InnerThought_AnimBase
// Size: 0x18
// VTable: 0x149a983a8
struct InnerThought_AnimBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float glyphStagger; // Offset: 0x8
    float length; // Offset: 0xc
    bool randomStagger; // Offset: 0x10
    ARDataType interpolationMode; // Offset: 0x11
    uint8_t _pad_1[0x6]; // Offset: 0x12
};

// Original name: ParticleEffectNoneTintingParams
// Size: 0x8
// VTable: 0x149997060
struct ParticleEffectNoneTintingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ImpactForceResistance
// Size: 0x10
// VTable: 0x1499ade30
struct ImpactForceResistance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float impactForceResistance; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ScreenEffects_ParamValue
// Size: 0x8
// VTable: 0x14999bed8
struct ScreenEffects_ParamValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEntityComponentNavPointParams
// Size: 0x18
// VTable: 0x1499c97d8
struct SEntityComponentNavPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: CraftingGameplayProperty_Base
// Size: 0x8
// VTable: 0x1499b9520
struct CraftingGameplayProperty_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AtmosphereLifeSupportParams
// Size: 0x80
// VTable: 0x14997a190
struct AtmosphereLifeSupportParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* maintainingResourceState; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* storingResourceState; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* purgingResourceState; // Offset: 0x28
    uint8_t _pad_3[0x50]; // Offset: 0x30
};

// Original name: RadiationBehavior_SurfaceRadiationParams
// Size: 0x10
// VTable: 0x14997ae00
struct RadiationBehavior_SurfaceRadiationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float scaleOnLargestAsteroid; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSetParticleEnabledStateGameplayTrigger
// Size: 0x10
// VTable: 0x1499fb630
struct SSetParticleEnabledStateGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool Enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SRegenConsumerModifier
// Size: 0x18
// VTable: 0x1499de960
struct SRegenConsumerModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float powerRatioMultiplier; // Offset: 0x8
    float maxAmmoLoadMultiplier; // Offset: 0xc
    float maxRegenPerSecMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SEntityEffectSystem_Effect
// Size: 0x20
// VTable: 0x149998ed8
struct SEntityEffectSystem_Effect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: SEntityEffectSystem_Category
// Size: 0x10
// VTable: 0x149998e58
struct SEntityEffectSystem_Category {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool allowMultipleTags; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: SFitnessXPGains
// Size: 0x18
// VTable: 0x149a84b50
struct SFitnessXPGains {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeRunning; // Offset: 0x8
    float timeSprinting; // Offset: 0xc
    float timeGForce; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: PersonalThoughtOption
// Size: 0x18
// VTable: 0x149a99cb8
struct PersonalThoughtOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
};

// Original name: BlueprintCategoryAvailability_Base
// Size: 0x8
// VTable: 0x1499b8d48
struct BlueprintCategoryAvailability_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PurchasableDisplayClothing
// Size: 0x38
// VTable: 0x149aa1d60
struct PurchasableDisplayClothing {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* FashionType; // Offset: 0x8
    CLocIdentifier* FabricMaterial; // Offset: 0x10
    CLocIdentifier* Style; // Offset: 0x18
    CryStringT* Gender; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CLocIdentifier* Color; // Offset: 0x30
};

// Original name: EntityComponentNetworkParams
// Size: 0x18
// VTable: 0x1499aa898
struct EntityComponentNetworkParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSubsumptionMissionComponentParams
// Size: 0x18
// VTable: 0x14996c098
struct SSubsumptionMissionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: VolumeShape
// Size: 0x8
// VTable: 0x14997b0b0
struct VolumeShape {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SISpawning
// Size: 0x18
// VTable: 0x1499ba4f0
struct SISpawning {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SUnknownEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a78
struct SUnknownEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SObjectiveMarkerComponentParams
// Size: 0x18
// VTable: 0x14996c5d8
struct SObjectiveMarkerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: RestrictedAreaSplineParams
// Size: 0x28
// VTable: 0x149a1c9e8
struct RestrictedAreaSplineParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float captureRadius; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* autopilotMessage; // Offset: 0x20
};

// Original name: CockpitRuleBase
// Size: 0x20
// VTable: 0x1499b3458
struct CockpitRuleBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float priority; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalScrollDirection
// Size: 0x10
// VTable: 0x14998b9d0
struct BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalScrollDirection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: TriggeredHealthRatio
// Size: 0x10
// VTable: 0x1499faff0
struct TriggeredHealthRatio {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float healthRatio; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SVendingMachineSpawnGameplayTrigger
// Size: 0x8
// VTable: 0x1499fb058
struct SVendingMachineSpawnGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: VehicleCollisionParams
// Size: 0x18
// VTable: 0x149a2edd0
struct VehicleCollisionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float collisionWarnSpeed; // Offset: 0x8
    float collisionWarnTime; // Offset: 0xc
    float collisionDangerCloseWarnTime; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SPhysicalProxyComponentParams
// Size: 0x18
// VTable: 0x149ac48f8
struct SPhysicalProxyComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_ComponentCaptionProperties
// Size: 0x20
// VTable: 0x14998c818
struct BuildingBlocks_ComponentCaptionProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool show; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CLocIdentifier* caption; // Offset: 0x10
    ARDataType style; // Offset: 0x18
    ARDataType caseModifier; // Offset: 0x1c
};

// Original name: TriggerSubConditionSubsumptionEventDef
// Size: 0x28
// VTable: 0x149a894f8
struct TriggerSubConditionSubsumptionEventDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* npcGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* eventNameHash; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SItemPipeSystemParams
// Size: 0x18
// VTable: 0x1499a1648
struct SItemPipeSystemParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SHelmetLinkedState
// Size: 0x10
// VTable: 0x149a00338
struct SHelmetLinkedState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType stateMachine; // Offset: 0x8
    ARDataType stateToEnter; // Offset: 0xc
};

// Original name: PopupDef
// Size: 0x60
// VTable: 0x149aa95d8
struct PopupDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* title; // Offset: 0x8
    CLocIdentifier* message1; // Offset: 0x10
    CLocIdentifier* message2; // Offset: 0x18
    CLocIdentifier* message3; // Offset: 0x20
    bool hasCancelButton; // Offset: 0x28
    bool hasConfirmButton; // Offset: 0x29
    uint8_t _pad_1[0x6]; // Offset: 0x2a
    CLocIdentifier* cancelOverrideString; // Offset: 0x30
    CLocIdentifier* confirmOverrideString; // Offset: 0x38
    CryStringT* popupFrame; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    CryStringT* popupHeaderFrame; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
};

// Original name: SLightFlickerFilteringParams
// Size: 0x10
// VTable: 0x1499e14f0
struct SLightFlickerFilteringParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool ignoreOnlyFogLights; // Offset: 0x8
    bool filterByVisArea; // Offset: 0x9
    bool ignoreEnvironmentProbes; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
};

// Original name: SActorForceReactionStaggerTagConfig
// Size: 0x20
// VTable: 0x149a4c448
struct SActorForceReactionStaggerTagConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* mannequinTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float minDistance; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: DefaultActionDescriptionOverride
// Size: 0x20
// VTable: 0x149a8b968
struct DefaultActionDescriptionOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* action; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* actionsDescription; // Offset: 0x18
};

// Original name: BuildingBlocks_BindingsBooleanComponentParameter
// Size: 0x70
// VTable: 0x149981050
struct BuildingBlocks_BindingsBooleanComponentParameter {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    CryStringT* name; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    ARDataType parameter; // Offset: 0x60
    bool defaultValue; // Offset: 0x64
    uint8_t _pad_2[0xb]; // Offset: 0x65
};

// Original name: SWeaponAimableAnglesParams
// Size: 0x28
// VTable: 0x149a616a0
struct SWeaponAimableAnglesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float assistInnerAngle; // Offset: 0x8
    float assistOuterAngle; // Offset: 0xc
    float maxNudgeAngle; // Offset: 0x10
    float distanceAssistFarRange; // Offset: 0x14
    float distanceAssistCloseRange; // Offset: 0x18
    float distanceAssistOuterAngle; // Offset: 0x1c
    float distanceAssistInnerAngle; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: ActorLocomotionAvoidanceParams
// Size: 0x30
// VTable: 0x149ab1ad8
struct ActorLocomotionAvoidanceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableForceStrafe; // Offset: 0x8
    bool enableAvoidanceTwist; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float twistAllowedHalfFOV; // Offset: 0xc
    float minTwistDistance; // Offset: 0x10
    float maxTwistDistance; // Offset: 0x14
    float blendWeightAtMinTwist; // Offset: 0x18
    float blendWeightAtMaxTwist; // Offset: 0x1c
    float twistBlendTime; // Offset: 0x20
    float twistBlendOutTime; // Offset: 0x24
    float maxDistanceFromPath; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: SLauncherBase
// Size: 0x8
// VTable: 0x1499c84b8
struct SLauncherBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PingBlobLifeTime
// Size: 0x10
// VTable: 0x1499c4b58
struct PingBlobLifeTime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lifeTimeMin; // Offset: 0x8
    float lifeTimeMax; // Offset: 0xc
};

// Original name: TransportAlignmentPointParams
// Size: 0x18
// VTable: 0x1499d9058
struct TransportAlignmentPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: DegYPR
// Size: 0x20
// VTable: 0x1499ad5a0
struct DegYPR {
    uint8_t _pad_0[0x14]; // Offset: 0x0
    float yaw; // Offset: 0x14
    float pitch; // Offset: 0x18
    float roll; // Offset: 0x1c
};

// Original name: UIGraph_ControllerComponent
// Size: 0x18
// VTable: 0x1499ed8f0
struct UIGraph_ControllerComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: EABettingModuleParams
// Size: 0x20
// VTable: 0x149a39c38
struct EABettingModuleParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType bettingFormat; // Offset: 0x18
    ARDataType bettingCurrency; // Offset: 0x19
    bool disconnectionProtection; // Offset: 0x1a
    bool alsoProtectDisconnecter; // Offset: 0x1b
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomRightRadiusBehavior
// Size: 0x10
// VTable: 0x14998b5b0
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomRightRadiusBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ActorSignatureMultiplierGlobalParams
// Size: 0x18
// VTable: 0x1499c43b8
struct ActorSignatureMultiplierGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float bodyTemperatureToIRMultiplier; // Offset: 0x8
    float staminaToIRMultiplier; // Offset: 0xc
    float staminaToIRDecayDelay; // Offset: 0x10
    float staminaToIRDecayRate; // Offset: 0x14
};

// Original name: ActorStateData_JumpFallValidationParams
// Size: 0x10
// VTable: 0x149aad770
struct ActorStateData_JumpFallValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stateTimeout; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AINavigationObstacleParams
// Size: 0x18
// VTable: 0x14997e2c8
struct AINavigationObstacleParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ControlHintCondition_VehicleJumpDriveState
// Size: 0x10
// VTable: 0x149a67090
struct ControlHintCondition_VehicleJumpDriveState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType vehicleJumpDriveState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SIParamsModule
// Size: 0x18
// VTable: 0x1499adbf0
struct SIParamsModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEASpawningLocalization
// Size: 0x30
// VTable: 0x149a3b140
struct SEASpawningLocalization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* locTimeToRespawn; // Offset: 0x8
    CLocIdentifier* locPressOpenSpawnScreen; // Offset: 0x10
    CLocIdentifier* locHoldToRespawn; // Offset: 0x18
    CLocIdentifier* locPressToRespawn; // Offset: 0x20
    CLocIdentifier* locRespawning; // Offset: 0x28
};

// Original name: ActionAreaAudioNoiseExtension
// Size: 0x10
// VTable: 0x149a44970
struct ActionAreaAudioNoiseExtension {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float defaultAudioNoiseLevel; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SEntityComponentPersistentEntityEntitlementSpawnerParams
// Size: 0x18
// VTable: 0x1499d7d00
struct SEntityComponentPersistentEntityEntitlementSpawnerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCItemRadarAIProperties
// Size: 0x10
// VTable: 0x1499c6368
struct SCItemRadarAIProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool forceActiveWhenAIControlled; // Offset: 0x8
    bool allowPingWave; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: SUsableMovementAlignmentData
// Size: 0x18
// VTable: 0x1499b0a30
struct SUsableMovementAlignmentData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: InstancedInteriorManagerComponentParams
// Size: 0x20
// VTable: 0x1499e4d20
struct InstancedInteriorManagerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float doorTimeoutSeconds; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SUsableGroupParams
// Size: 0x30
// VTable: 0x149a5c800
struct SUsableGroupParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType selectionMethod; // Offset: 0x18
    ARDataType condition; // Offset: 0x1c
    bool resetOnCoordinator; // Offset: 0x20
    uint8_t _pad_1[0x3]; // Offset: 0x21
    int32_t maxNPCs; // Offset: 0x24
    int32_t numberOfUses; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: CraftingBlueprintTier_Base
// Size: 0x8
// VTable: 0x1499b8c00
struct CraftingBlueprintTier_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SAILedgeParams
// Size: 0x10
// VTable: 0x149a9f0c0
struct SAILedgeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float navigationLinksSpacing; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: HarvestDespawnTimerParams
// Size: 0x10
// VTable: 0x1499eff88
struct HarvestDespawnTimerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t despawnTimeSeconds; // Offset: 0x8
    int32_t additionalWaitForNearbyPlayersSeconds; // Offset: 0xc
};

// Original name: GlobalResourceCharacter
// Size: 0x18
// VTable: 0x1499ae1e0
struct GlobalResourceCharacter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SSalvageRepairRangeParams
// Size: 0x18
// VTable: 0x149a79da8
struct SSalvageRepairRangeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxBeamDistance; // Offset: 0x8
    float maxSensorDistance; // Offset: 0xc
    float aimPointSensorRadius; // Offset: 0x10
    float aimPointIntegritySmoothTime; // Offset: 0x14
};

// Original name: QuantumParams
// Size: 0x10
// VTable: 0x1499d5438
struct QuantumParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableLeaderDependence; // Offset: 0x8
    bool enableBlindBoost; // Offset: 0x9
    bool useQBoostDataDuringRampup; // Offset: 0xa
    bool enforceGroupQT; // Offset: 0xb
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCItemControlPriorityValue
// Size: 0x8
// VTable: 0x149a071c8
struct SCItemControlPriorityValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEntityTraversingNodeTypeItemType
// Size: 0x10
// VTable: 0x14999e7c0
struct SEntityTraversingNodeTypeItemType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: CockpitRuleInt
// Size: 0x28
// VTable: 0x1499b37e0
struct CockpitRuleInt {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float priority; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    int32_t value; // Offset: 0x20
    uint8_t _pad_3[0x4]; // Offset: 0x24
};

// Original name: SQedVisualGraphAnimationParams
// Size: 0x30
// VTable: 0x149a54fd8
struct SQedVisualGraphAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fragmentName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float playbackBias; // Offset: 0x28
    bool loop; // Offset: 0x2c
    uint8_t _pad_3[0x3]; // Offset: 0x2d
};

// Original name: AIPerceptionMeterThresholds
// Size: 0x18
// VTable: 0x149a01e28
struct AIPerceptionMeterThresholds {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float low; // Offset: 0x8
    float medium; // Offset: 0xc
    float high; // Offset: 0x10
    float combat; // Offset: 0x14
};

// Original name: SpecialEventManufacturer
// Size: 0x8
// VTable: 0x149aa5c00
struct SpecialEventManufacturer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SandboxTriggerBaseDef
// Size: 0x8
// VTable: 0x149a97878
struct SandboxTriggerBaseDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: InterferenceParams_Continuous
// Size: 0x18
// VTable: 0x149996e08
struct InterferenceParams_Continuous {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fallOffDistance; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float energyPerSecond; // Offset: 0x10
    float increaseDuration; // Offset: 0x14
};

// Original name: BuildingBlocks_FieldModifierBoolean
// Size: 0x10
// VTable: 0x14998af78
struct BuildingBlocks_FieldModifierBoolean {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType field; // Offset: 0x8
    bool value; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: IntUserVariableTask
// Size: 0x20
// VTable: 0x149994090
struct IntUserVariableTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: HintUIData
// Size: 0x48
// VTable: 0x149aa0758
struct HintUIData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* TitleText; // Offset: 0x8
    CLocIdentifier* BodyText; // Offset: 0x10
    CLocIdentifier* BodyTextGamePad; // Offset: 0x18
    CLocIdentifier* BodyTextJoystick; // Offset: 0x20
    CryStringT* TitleImagePath; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    CryStringT* BodyImagePath; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
};

// Original name: SScoreboardStat
// Size: 0x18
// VTable: 0x149a1f9c8
struct SScoreboardStat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    ARDataType statType; // Offset: 0x10
    bool greaterValueBetter; // Offset: 0x11
    bool visible; // Offset: 0x12
    uint8_t _pad_1[0x5]; // Offset: 0x13
};

// Original name: AudioEnvironment
// Size: 0x48
// VTable: 0x149aa4a90
struct AudioEnvironment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* wwiseEnvironmentName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float interiorityMinimum; // Offset: 0x18
    float interiorityMaximum; // Offset: 0x1c
    float sizeMinimum; // Offset: 0x20
    float sizeMaximum; // Offset: 0x24
    CryStringT* primarySurfaceType; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* secondarySurfaceType; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
};

// Original name: CommunicationChannelName
// Size: 0x18
// VTable: 0x14997e860
struct CommunicationChannelName {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SurfaceRaindropsTargetComponentParams
// Size: 0x18
// VTable: 0x149998910
struct SurfaceRaindropsTargetComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCItemUserParams
// Size: 0x18
// VTable: 0x149a5d960
struct SCItemUserParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSpawnOnTimer
// Size: 0x18
// VTable: 0x149a40390
struct SSpawnOnTimer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeBetweenSpawns; // Offset: 0x8
    int32_t maxEntities; // Offset: 0xc
    int32_t maxLifetimeEntities; // Offset: 0x10
    bool dontOverlap; // Offset: 0x14
    bool startTimerOnDone; // Offset: 0x15
    uint8_t _pad_1[0x2]; // Offset: 0x16
};

// Original name: ControlHintCondition_VehicleLandingArea
// Size: 0x10
// VTable: 0x149a669d0
struct ControlHintCondition_VehicleLandingArea {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType landingArea; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: RaceRingComponentParams
// Size: 0x70
// VTable: 0x149a29180
struct RaceRingComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float radius; // Offset: 0x18
    float openSpeed; // Offset: 0x1c
    float closeSpeed; // Offset: 0x20
    float openAmount; // Offset: 0x24
    float closeAmount; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    CryStringT* innerRingModel; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
    CryStringT* outerRingModel; // Offset: 0x40
    uint8_t _pad_3[0x8]; // Offset: 0x48
    CryStringT* irisModel; // Offset: 0x50
    uint8_t _pad_4[0x8]; // Offset: 0x58
    CryStringT* openAnimName; // Offset: 0x60
    uint8_t _pad_5[0x8]; // Offset: 0x68
};

// Original name: GlobalResourceGeometry
// Size: 0x18
// VTable: 0x1499ae2a0
struct GlobalResourceGeometry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: BuildingBlocks_BindingsPathArrayIndexNumber
// Size: 0x18
// VTable: 0x1499805e0
struct BuildingBlocks_BindingsPathArrayIndexNumber {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint16_t index; // Offset: 0x8
    uint8_t _pad_1[0xe]; // Offset: 0xa
};

// Original name: BuildingBlocks_FontStyle
// Size: 0x40
// VTable: 0x1499923e8
struct BuildingBlocks_FontStyle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* font; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool isBold; // Offset: 0x18
    uint8_t _pad_2[0x3]; // Offset: 0x19
    float imageSizePercent; // Offset: 0x1c
    float scaleModifier; // Offset: 0x20
    float leadingModifier; // Offset: 0x24
    float topMarginModifier; // Offset: 0x28
    float leftMarginModifier; // Offset: 0x2c
    int32_t numImageReplacementSpaces; // Offset: 0x30
    uint8_t _pad_3[0xc]; // Offset: 0x34
};

// Original name: DeltaSignatureSpikeParams
// Size: 0x10
// VTable: 0x1499c5d88
struct DeltaSignatureSpikeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType operationType; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float spikeValue; // Offset: 0xc
};

// Original name: SFloatNumberComparer
// Size: 0x10
// VTable: 0x149a70088
struct SFloatNumberComparer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    ARDataType mode; // Offset: 0xc
};

// Original name: EntityComponentRttAspectBoxoutParams
// Size: 0x28
// VTable: 0x1499c98c8
struct EntityComponentRttAspectBoxoutParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType targetRttSlot; // Offset: 0x18
    float aspectRatio; // Offset: 0x1c
    float maximumScreenSizeRatio; // Offset: 0x20
    float noShieldScaleAdjustment; // Offset: 0x24
};

// Original name: SEntityComponentATCSpawnableParams
// Size: 0x18
// VTable: 0x149a0a488
struct SEntityComponentATCSpawnableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MissionFlowCondition_OnMissionStart
// Size: 0x8
// VTable: 0x149970188
struct MissionFlowCondition_OnMissionStart {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SDespawnRule_OnPartsDetached
// Size: 0x10
// VTable: 0x149a40400
struct SDespawnRule_OnPartsDetached {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float ruleDelaySeconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ProceduralConnectionLinkController
// Size: 0x10
// VTable: 0x1499ecff0
struct ProceduralConnectionLinkController {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float zOffsetForRaycastCheck; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SAttachmentConstraintParams
// Size: 0x48
// VTable: 0x1499af788
struct SAttachmentConstraintParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float damping; // Offset: 0x8
    bool noSelfCollisions; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float maxPullForce; // Offset: 0x10
    float maxBendTorque; // Offset: 0x14
    bool constrainToLine; // Offset: 0x18
    bool constrainToPlane; // Offset: 0x19
    bool constrainFully; // Offset: 0x1a
    bool noRotation; // Offset: 0x1b
    bool useWorldConstraintPosition; // Offset: 0x1c
    uint8_t _pad_2[0x3]; // Offset: 0x1d
    float xMin; // Offset: 0x20
    float xMax; // Offset: 0x24
    float yzMax; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
    CryStringT* constraintHelper; // Offset: 0x30
    uint8_t _pad_4[0x8]; // Offset: 0x38
    bool constraintMaintainOrientation; // Offset: 0x40
    uint8_t _pad_5[0x7]; // Offset: 0x41
};

// Original name: TimeValue_LongSeconds
// Size: 0x10
// VTable: 0x1499b3250
struct TimeValue_LongSeconds {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    double seconds; // Offset: 0x8
};

// Original name: SReflexXPGains
// Size: 0x18
// VTable: 0x149a84d00
struct SReflexXPGains {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeStealth; // Offset: 0x8
    float adsHit; // Offset: 0xc
    float takeDown; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: BoneCounterRotateConfig
// Size: 0x20
// VTable: 0x149a9bef8
struct BoneCounterRotateConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* boneName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t smoothingChainLength; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: GlobalResourceADB
// Size: 0x18
// VTable: 0x1499ae4e0
struct GlobalResourceADB {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SARDataGenericComponentParams
// Size: 0x18
// VTable: 0x149a03c48
struct SARDataGenericComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EAScoringComponentParamsDef
// Size: 0x28
// VTable: 0x149a27fc8
struct EAScoringComponentParamsDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t totalScore; // Offset: 0x18
    float timeSinceLastHitForAssist; // Offset: 0x1c
    int32_t awardKill; // Offset: 0x20
    int32_t awardKillAssist; // Offset: 0x24
};

// Original name: SEntityComponentManagedEntityRegionParams
// Size: 0x18
// VTable: 0x14999e128
struct SEntityComponentManagedEntityRegionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ContractStringParam
// Size: 0x18
// VTable: 0x1499730f8
struct ContractStringParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType param; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* value; // Offset: 0x10
};

// Original name: SubHarvestableConfigBase
// Size: 0x8
// VTable: 0x1499ef8a8
struct SubHarvestableConfigBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SAccoladeRequirement
// Size: 0x8
// VTable: 0x149a23978
struct SAccoladeRequirement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ItemTypeCategory
// Size: 0x10
// VTable: 0x149aa7aa0
struct ItemTypeCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
};

// Original name: Range
// Size: 0x10
// VTable: 0x1499adb88
struct Range {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimum; // Offset: 0x8
    float maximum; // Offset: 0xc
};

// Original name: EntityComponentRttAspectMFDIFCSParams
// Size: 0x20
// VTable: 0x1499c9b38
struct EntityComponentRttAspectMFDIFCSParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType targetRttSlot; // Offset: 0x18
    float aspectRatio; // Offset: 0x1c
};

// Original name: SurfaceRaindrops_Override
// Size: 0x18
// VTable: 0x149998670
struct SurfaceRaindrops_Override {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool useFlatVisor; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float density; // Offset: 0xc
    bool rainEnabled; // Offset: 0x10
    bool snowEnabled; // Offset: 0x11
    uint8_t _pad_2[0x6]; // Offset: 0x12
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeWidthBehavior
// Size: 0x10
// VTable: 0x14998b250
struct BuildingBlocks_FieldModifierEnumeratedTypeWidthBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_VehicleAutoSelectedContact
// Size: 0x10
// VTable: 0x149a66bb0
struct ControlHintCondition_VehicleAutoSelectedContact {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType autoSelectedContact; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: Marker_AbilityComms
// Size: 0x8
// VTable: 0x149a4a438
struct Marker_AbilityComms {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SUsableGroupCoordinatorParams
// Size: 0x20
// VTable: 0x149a5c870
struct SUsableGroupCoordinatorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool loopCoordinator; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: ContractGenerationParams_Legacy
// Size: 0x18
// VTable: 0x1499735d8
struct ContractGenerationParams_Legacy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t maxInstances; // Offset: 0x8
    int32_t maxInstancesPerPlayer; // Offset: 0xc
    float respawnTime; // Offset: 0x10
    float respawnTimeVariation; // Offset: 0x14
};

// Original name: SSCPlayerGameRulesNetworkComponentParams
// Size: 0x18
// VTable: 0x1499ee2a8
struct SSCPlayerGameRulesNetworkComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: CraftingOptionEffect_MaterialStats
// Size: 0x8
// VTable: 0x1499b8410
struct CraftingOptionEffect_MaterialStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: WearMovementMultipliers
// Size: 0x18
// VTable: 0x1499fbb20
struct WearMovementMultipliers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float walkMultiplier; // Offset: 0x8
    float runMultiplier; // Offset: 0xc
    float sprintMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: HoloDisplayBackgroundEffects
// Size: 0x18
// VTable: 0x149a30278
struct HoloDisplayBackgroundEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool darkenBackgroundWhenFocussed; // Offset: 0x8
    bool darkenBackgroundWhenCentered; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float centerDarkenScreenSizeRatio; // Offset: 0xc
    float centerDarkenScreenCenterDistance; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: DefaultActionsEntityState_CanActorBeLooted
// Size: 0x8
// VTable: 0x149a8c090
struct DefaultActionsEntityState_CanActorBeLooted {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DifficultyModifierRange
// Size: 0x10
// VTable: 0x149a09e88
struct DifficultyModifierRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float min; // Offset: 0x8
    float max; // Offset: 0xc
};

// Original name: SActorForceReactionStateConfig
// Size: 0x10
// VTable: 0x149a4b338
struct SActorForceReactionStateConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool delayStaggersWhileInState; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float staggerDelayTimeout; // Offset: 0xc
};

// Original name: ContextualCommunicationCondition
// Size: 0x40
// VTable: 0x14997ddb0
struct ContextualCommunicationCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType criteriaType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* customCriteria; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    float numberValue; // Offset: 0x20
    uint8_t _pad_3[0x4]; // Offset: 0x24
    CryStringT* stringValue; // Offset: 0x28
    uint8_t _pad_4[0x8]; // Offset: 0x30
    ARDataType operation; // Offset: 0x38
    uint8_t _pad_5[0x4]; // Offset: 0x3c
};

// Original name: ScreenEffects_ParamValue_Bool
// Size: 0x10
// VTable: 0x14999bff0
struct ScreenEffects_ParamValue_Bool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: OptionalProbability
// Size: 0x10
// VTable: 0x1499ef490
struct OptionalProbability {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float probability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BindingsOperations_WaveformShapeTriangle
// Size: 0x8
// VTable: 0x149988840
struct BindingsOperations_WaveformShapeTriangle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AsteroidStateBase
// Size: 0x8
// VTable: 0x149979818
struct AsteroidStateBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: VehicleItem
// Size: 0x8
// VTable: 0x149aa0230
struct VehicleItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: VoiceChatRxParams
// Size: 0x18
// VTable: 0x1499a98a0
struct VoiceChatRxParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MissionModifier_LawLicense
// Size: 0x40
// VTable: 0x149967e10
struct MissionModifier_LawLicense {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* modifierName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0x1f]; // Offset: 0x19
    ARDataType licenseType; // Offset: 0x38
    uint8_t _pad_3[0x4]; // Offset: 0x3c
};

// Original name: HealthIconStatusEffect
// Size: 0x10
// VTable: 0x1499fe3d8
struct HealthIconStatusEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statusEffectType; // Offset: 0x8
    int32_t index; // Offset: 0xc
};

// Original name: TimeTrialSplit
// Size: 0x10
// VTable: 0x14996a4a0
struct TimeTrialSplit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float targetSplit; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: EntityComponentRttAspectOwnVehicleParams
// Size: 0x18
// VTable: 0x1499c97f0
struct EntityComponentRttAspectOwnVehicleParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ConsumableHelpers
// Size: 0x30
// VTable: 0x149a257b0
struct ConsumableHelpers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t gripIndex; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* lipHelperName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* lidHelperName; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
};

// Original name: SRGB8
// Size: 0x10
// VTable: 0x1499ad7d0
struct SRGB8 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t r; // Offset: 0x8
    uint8_t g; // Offset: 0x9
    uint8_t b; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
};

// Original name: SCItemVehicleDebrisParams
// Size: 0x18
// VTable: 0x1499f6260
struct SCItemVehicleDebrisParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EntryOptionalData_StackSize
// Size: 0x10
// VTable: 0x1499b3a38
struct EntryOptionalData_StackSize {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t min; // Offset: 0x8
    int32_t max; // Offset: 0xc
};

// Original name: SToolArmDeployCondition_Base
// Size: 0x8
// VTable: 0x1499e9818
struct SToolArmDeployCondition_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DeliveryMissionHelperComponentParams
// Size: 0x18
// VTable: 0x14996c538
struct DeliveryMissionHelperComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SClipVolumeProxyParams
// Size: 0x18
// VTable: 0x149ac47b0
struct SClipVolumeProxyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ResourceTypeProperties
// Size: 0x18
// VTable: 0x149961de0
struct ResourceTypeProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: LookAtType
// Size: 0x20
// VTable: 0x149a941a8
struct LookAtType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendIn; // Offset: 0x8
    float blendInVariation; // Offset: 0xc
    float blendOut; // Offset: 0x10
    float blendOutVariation; // Offset: 0x14
    float duration; // Offset: 0x18
    float durationVariation; // Offset: 0x1c
};

// Original name: SDespawnRule_OnMoved
// Size: 0x18
// VTable: 0x149a40460
struct SDespawnRule_OnMoved {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float ruleDelaySeconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float distance; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SCItemRadarSensitivityModifierType
// Size: 0x8
// VTable: 0x1499c5fc8
struct SCItemRadarSensitivityModifierType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_ActorSuitState
// Size: 0x10
// VTable: 0x149a66370
struct ControlHintCondition_ActorSuitState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType suitState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: ArmorPenetrationResistanceParams
// Size: 0x10
// VTable: 0x1499fbdc0
struct ArmorPenetrationResistanceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float basePenetrationReduction; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: StatusEffectSetupBase
// Size: 0x8
// VTable: 0x1499fd448
struct StatusEffectSetupBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: LinkedStatPassExcessBelowThreshold
// Size: 0x18
// VTable: 0x1499fd880
struct LinkedStatPassExcessBelowThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    float multiplier; // Offset: 0xc
    ARDataType reverseSignFlag; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SSequencerMoveToAnimateCarryableTaskParams
// Size: 0x40
// VTable: 0x149a8ea18
struct SSequencerMoveToAnimateCarryableTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* fragmentId; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* fragTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: FireHazardGlobalExtinguishing
// Size: 0x38
// VTable: 0x14997b9b0
struct FireHazardGlobalExtinguishing {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float oxygenReduction; // Offset: 0x8
    float heatTransferMultiplier; // Offset: 0xc
    float radiationAbsorption; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    CryStringT* vectorFieldPathSpray; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* vectorFieldPathSphere; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: BoidsTerrainSurfaceRepelRule
// Size: 0x18
// VTable: 0x1499ec220
struct BoidsTerrainSurfaceRepelRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float effectDistance; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SSequencerAnimationTaskParams
// Size: 0x48
// VTable: 0x1499a2210
struct SSequencerAnimationTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* fragmentId; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* fragTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
    bool looping; // Offset: 0x40
    uint8_t _pad_3[0x7]; // Offset: 0x41
};

// Original name: LadderAnimationOffset
// Size: 0x20
// VTable: 0x149a9e828
struct LadderAnimationOffset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stopClimbDistanceFromTopBack; // Offset: 0x8
    float stopClimbDistanceFromTopLeft; // Offset: 0xc
    float stopClimbDistanceFromTopRight; // Offset: 0x10
    float stopClimbDistanceFromBottom; // Offset: 0x14
    float mountClimbDistanceFromBottom; // Offset: 0x18
    float animationTravelDistance; // Offset: 0x1c
};

// Original name: FireHazardGlobalRoomConnectorParams
// Size: 0x40
// VTable: 0x14997c068
struct FireHazardGlobalRoomConnectorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float igniteThreshold; // Offset: 0x8
    float maxVolumeRadius; // Offset: 0xc
    CryStringT* vectorFieldPath; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    float vectorFieldRotation; // Offset: 0x20
    float vectorFieldRadius; // Offset: 0x24
    float vectorFieldFalloff; // Offset: 0x28
    float vectorFieldThreshold; // Offset: 0x2c
    float vectorFieldMaxHeatReleaseRateDiff; // Offset: 0x30
    float vectorFieldMaxStrength; // Offset: 0x34
    float vectorFieldDepth; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: SubsumptionAssignmentComponentParams
// Size: 0x18
// VTable: 0x14997e238
struct SubsumptionAssignmentComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EntityComponentFuelConnection
// Size: 0x18
// VTable: 0x1499ed488
struct EntityComponentFuelConnection {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: UIGraph_JournalEntryDockComponent
// Size: 0x8
// VTable: 0x149a2f868
struct UIGraph_JournalEntryDockComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ExplosionFlashbangParams
// Size: 0x10
// VTable: 0x149a9d258
struct ExplosionFlashbangParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blindAmount; // Offset: 0x8
    float flashbangBaseTime; // Offset: 0xc
};

// Original name: SWeaponActionFireTractorBeamMultitractorParams
// Size: 0x28
// VTable: 0x149a785f8
struct SWeaponActionFireTractorBeamMultitractorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float leadBeamDeadzoneBlendStart; // Offset: 0x8
    float leadBeamDeadzoneEnd; // Offset: 0xc
    float followBeamDeadzoneBlendStart; // Offset: 0x10
    float followBeamDeadzoneEnd; // Offset: 0x14
    float followBeamDeadzoneAlignment; // Offset: 0x18
    float followBeamDeadzoneMisalignment; // Offset: 0x1c
    float enterLeadForceThresholdModifier; // Offset: 0x20
    float beamAlignmentSlopeCoefficient; // Offset: 0x24
};

// Original name: Marker_AbilityClosure
// Size: 0x10
// VTable: 0x149a4a430
struct Marker_AbilityClosure {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool onlyWhenLocked; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: PostGameScoreboardParams
// Size: 0x18
// VTable: 0x149a3a7a0
struct PostGameScoreboardParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float scoreboardTime; // Offset: 0xc
    float postScoreboardLogoTime; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: BaseItem
// Size: 0x8
// VTable: 0x149a9e478
struct BaseItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AudioValueOutputBehaviour
// Size: 0x18
// VTable: 0x149a958c0
struct AudioValueOutputBehaviour {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: CargoGridOccupantFace
// Size: 0x10
// VTable: 0x149963f88
struct CargoGridOccupantFace {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool faceUpwardAllowed; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    ARDataType stackingSupport; // Offset: 0xc
};

// Original name: BuildingBlocks_LayoutPolicyItemBase
// Size: 0x8
// VTable: 0x149982158
struct BuildingBlocks_LayoutPolicyItemBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SHackingThreatLevelConditionParams
// Size: 0x10
// VTable: 0x149a2b838
struct SHackingThreatLevelConditionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isIntruder; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t pointsAdded; // Offset: 0xc
};

// Original name: RGB
// Size: 0x18
// VTable: 0x1499ad950
struct RGB {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float r; // Offset: 0x8
    float g; // Offset: 0xc
    float b; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SGlobalShopErrors
// Size: 0x1f8
// VTable: 0x149a3f838
struct SGlobalShopErrors {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* confirmation_success; // Offset: 0x8
    CLocIdentifier* confirmation_fail; // Offset: 0x10
    CLocIdentifier* confirmation_fail_AuthorityError; // Offset: 0x18
    CLocIdentifier* confirmation_fail_TransactionServiceError; // Offset: 0x20
    CLocIdentifier* confirmation_fail_InvalidLocation; // Offset: 0x28
    CLocIdentifier* confirmation_fail_InvalidPlayerInventoryId; // Offset: 0x30
    CLocIdentifier* confirmation_fail_InventoryContainerRequestFail; // Offset: 0x38
    CLocIdentifier* confirmation_fail_InventoryItemFail; // Offset: 0x40
    CLocIdentifier* confirmation_fail_InventoryItemContentFail; // Offset: 0x48
    CLocIdentifier* confirmation_fail_InvalidQuantityError; // Offset: 0x50
    CLocIdentifier* confirmation_fail_QuickBuyRestockingError; // Offset: 0x58
    CLocIdentifier* confirmation_fail_InvalidTransactionFlow; // Offset: 0x60
    CLocIdentifier* confirmation_fail_InvalidLocationSource; // Offset: 0x68
    CLocIdentifier* confirmation_fail_InvalidShop; // Offset: 0x70
    CLocIdentifier* confirmation_fail_InvalidShopType; // Offset: 0x78
    CLocIdentifier* confirmation_fail_InternalError; // Offset: 0x80
    CLocIdentifier* confirmation_fail_InvalidRentalOption; // Offset: 0x88
    CLocIdentifier* confirmation_fail_ShipNotInValidLocation; // Offset: 0x90
    CLocIdentifier* confirmation_fail_NoItemsInSaleError; // Offset: 0x98
    CLocIdentifier* confirmation_fail_WaitingForPendingResult; // Offset: 0xa0
    CLocIdentifier* confirmation_fail_ActorDoesNotOwnSaleItem; // Offset: 0xa8
    CLocIdentifier* confirmation_fail_TransactionCostMismatch; // Offset: 0xb0
    CLocIdentifier* confirmation_fail_ItemMaxStockError; // Offset: 0xb8
    CLocIdentifier* confirmation_fail_ItemNotSellable; // Offset: 0xc0
    CLocIdentifier* confirmation_fail_ItemNotBuyable; // Offset: 0xc8
    CLocIdentifier* confirmation_fail_TimedOut; // Offset: 0xd0
    CLocIdentifier* confirmation_fail_InsuffientStock; // Offset: 0xd8
    CLocIdentifier* confirmation_fail_ServiceError; // Offset: 0xe0
    CLocIdentifier* confirmation_fail_DatabaseError; // Offset: 0xe8
    CLocIdentifier* confirmation_fail_InvalidBuyer; // Offset: 0xf0
    CLocIdentifier* confirmation_fail_InvalidItem; // Offset: 0xf8
    CLocIdentifier* confirmation_fail_InvalidRequest; // Offset: 0x100
    CLocIdentifier* confirmation_fail_InsufficentFunds; // Offset: 0x108
    CLocIdentifier* confirmation_fail_InvalidEntityClassGUID; // Offset: 0x110
    CLocIdentifier* confirmation_fail_InvalidResourceTypeGUID; // Offset: 0x118
    CLocIdentifier* confirmation_fail_InvalidKioskId; // Offset: 0x120
    CLocIdentifier* confirmation_fail_InvalidSellPrice; // Offset: 0x128
    CLocIdentifier* confirmation_fail_InvalidMineableEntry; // Offset: 0x130
    CLocIdentifier* confirmation_fail_InvalidParentState; // Offset: 0x138
    CLocIdentifier* confirmation_fail_PlayerIdMismatch; // Offset: 0x140
    CLocIdentifier* confirmation_fail_CargoCreationFailed; // Offset: 0x148
    CLocIdentifier* confirmation_fail_CargoRemovalFailed; // Offset: 0x150
    CLocIdentifier* confirmation_fail_WalletNotFound; // Offset: 0x158
    CLocIdentifier* confirmation_fail_WalletUpdateFailed; // Offset: 0x160
    CLocIdentifier* confirmation_fail_ResourceContainerQueryFailed; // Offset: 0x168
    CLocIdentifier* confirmation_fail_MissingResourceDataType; // Offset: 0x170
    CLocIdentifier* confirmation_fail_PricePerUnitMismatch; // Offset: 0x178
    CLocIdentifier* confirmation_fail_InvalidContainer; // Offset: 0x180
    CLocIdentifier* confirmation_fail_EntityQueryFailed; // Offset: 0x188
    CLocIdentifier* confirmation_fail_PlayerInVehicleDuringCargoTransaction; // Offset: 0x190
    CLocIdentifier* confirmation_fail_MissingSnapshot; // Offset: 0x198
    CLocIdentifier* confirmation_fail_MissingSnapshotData; // Offset: 0x1a0
    CLocIdentifier* confirmation_fail_SnapshotGetFail; // Offset: 0x1a8
    CLocIdentifier* confirmation_fail_ExceededBuyLimit; // Offset: 0x1b0
    CLocIdentifier* confirmation_fail_LicenseError; // Offset: 0x1b8
    CLocIdentifier* confirmation_fail_InvalidPlayerState; // Offset: 0x1c0
    CLocIdentifier* confirmation_fail_InvalidBoxSize; // Offset: 0x1c8
    CLocIdentifier* confirmation_fail_InvalidBoxClass; // Offset: 0x1d0
    CLocIdentifier* confirmation_fail_MissingAutoLoadRate; // Offset: 0x1d8
    CLocIdentifier* confirmation_fail_AutoLoadPriceMismatch; // Offset: 0x1e0
    CLocIdentifier* confirmation_fail_AutoLoadTimeMismatch; // Offset: 0x1e8
    CLocIdentifier* confirmation_fail_AutoLoadStartFailed; // Offset: 0x1f0
};

// Original name: NavLinkLocation
// Size: 0x8
// VTable: 0x1499ec588
struct NavLinkLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SQedVisualGraphTransitionTypeParams_ValueBased
// Size: 0x10
// VTable: 0x149a55168
struct SQedVisualGraphTransitionTypeParams_ValueBased {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType variable; // Offset: 0x8
    ARDataType context; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeHeightBehavior
// Size: 0x10
// VTable: 0x14998b2b0
struct BuildingBlocks_FieldModifierEnumeratedTypeHeightBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_StyleSelectorConditionCount
// Size: 0x18
// VTable: 0x14998cec0
struct BuildingBlocks_StyleSelectorConditionCount {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x10
    uint8_t count; // Offset: 0x14
    uint8_t offset; // Offset: 0x15
    uint8_t _pad_1[0x2]; // Offset: 0x16
};

// Original name: MotionFootPinningParams
// Size: 0x20
// VTable: 0x149aad388
struct MotionFootPinningParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float footShiftDuration; // Offset: 0x8
    float animationDuration; // Offset: 0xc
    float animationWeight; // Offset: 0x10
    float animationBlendInDuration; // Offset: 0x14
    float animationBlendOutDuration; // Offset: 0x18
    float autoRepositionDistance; // Offset: 0x1c
};

// Original name: BuildingBlocks_ComponentTextureProperties
// Size: 0x18
// VTable: 0x14998ca68
struct BuildingBlocks_ComponentTextureProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float alpha; // Offset: 0x8
    bool flipH; // Offset: 0xc
    bool flipV; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    ARDataType orientation; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SActorForceReactionProceduralLeanPose
// Size: 0x20
// VTable: 0x149a4d720
struct SActorForceReactionProceduralLeanPose {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hipOffsetScaleFB; // Offset: 0x8
    float hipOffsetScaleLR; // Offset: 0xc
    float footOffsetScale; // Offset: 0x10
    float firstPersonLeanPitchScale; // Offset: 0x14
    float firstPersonLeanRollScale; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: PlayerDockingHubControllerParams
// Size: 0x18
// VTable: 0x149a7cea0
struct PlayerDockingHubControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SNodeSwapUnstuckParams
// Size: 0x18
// VTable: 0x149a2cb90
struct SNodeSwapUnstuckParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t priority; // Offset: 0x8
    float chance; // Offset: 0xc
    float cooldown; // Offset: 0x10
    bool cooldownOnFailure; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
};

// Original name: SReputationStateModifierDecrement
// Size: 0x10
// VTable: 0x149a968f0
struct SReputationStateModifierDecrement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSensorMineTriggerType
// Size: 0x10
// VTable: 0x1499f0750
struct SSensorMineTriggerType {
    uint8_t _pad_0[0x10]; // Offset: 0x0
};

// Original name: SWeaponActionFireTractorBeamCargoModeOverrideParams
// Size: 0x48
// VTable: 0x149a77e60
struct SWeaponActionFireTractorBeamCargoModeOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minForceOverride; // Offset: 0x8
    float maxForceOverride; // Offset: 0xc
    float minAccelerationOverride; // Offset: 0x10
    float maxAccelerationOverride; // Offset: 0x14
    float minSpeedOverride; // Offset: 0x18
    float maxSpeedOverride; // Offset: 0x1c
    float accelerationFactorOverride; // Offset: 0x20
    float degreesPerActionOverride; // Offset: 0x24
    float maxAngularAccelerationOverride; // Offset: 0x28
    float maxAngularVelocityOverride; // Offset: 0x2c
    float degreesPerActionScrollWheelOverride; // Offset: 0x30
    float forceFractionRotationOverride; // Offset: 0x34
    float minDistanceOverride; // Offset: 0x38
    float maxDistanceOverride; // Offset: 0x3c
    float fullStrengthDistanceOverride; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
};

// Original name: ActorStanceSpeeds
// Size: 0x48
// VTable: 0x149aadc80
struct ActorStanceSpeeds {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float defaultSpeed; // Offset: 0x8
    float walkSlowSpeed; // Offset: 0xc
    float walkMidSpeed; // Offset: 0x10
    float walkFastSpeed; // Offset: 0x14
    float runSlowSpeed; // Offset: 0x18
    float runFastSpeed; // Offset: 0x1c
    float sprintSpeed; // Offset: 0x20
    float greenZoneWalkSpeed; // Offset: 0x24
    float greenZoneSprintSpeed; // Offset: 0x28
    float aimDownSightSpeed; // Offset: 0x2c
    float leanSpeed; // Offset: 0x30
    float conversationSpeed; // Offset: 0x34
    float defaultLinearAcceleration; // Offset: 0x38
    float defaultRotationSpeed; // Offset: 0x3c
    float defaultRotationSmoothDuration; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
};

// Original name: MissionFlowCondition_AnyTokensState
// Size: 0x10
// VTable: 0x149970120
struct MissionFlowCondition_AnyTokensState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType tokenState; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSendSeatReadyPoseLockedEvent
// Size: 0x10
// VTable: 0x149a7e630
struct SSendSeatReadyPoseLockedEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool locked; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: STurnOnItemGameplayTrigger
// Size: 0x8
// VTable: 0x1499faac0
struct STurnOnItemGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSalvageRepairHighlightOutlineValues
// Size: 0x18
// VTable: 0x149a7ab40
struct SSalvageRepairHighlightOutlineValues {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float occludedAlpha; // Offset: 0x8
    float outlineWidth; // Offset: 0xc
    bool outlineOnly; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: UIGraph_BlockingMessagePopUpComponent
// Size: 0x20
// VTable: 0x149a23128
struct UIGraph_BlockingMessagePopUpComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* errorFormat; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType provider; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: HarvestableAreaTypeBase
// Size: 0x8
// VTable: 0x1499ef1c8
struct HarvestableAreaTypeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SAimModifier
// Size: 0x20
// VTable: 0x1499de8b0
struct SAimModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float zoomScale; // Offset: 0x8
    float secondZoomScale; // Offset: 0xc
    float zoomTimeScale; // Offset: 0x10
    bool hideWeaponInADS; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    float fstopMultiplier; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: BoidAgentComponentParams
// Size: 0x38
// VTable: 0x1499eaeb8
struct BoidAgentComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* deathMannequinTag; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* deathMannequinFragment; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: Marker_AbilityBase
// Size: 0x8
// VTable: 0x149a4a3d0
struct Marker_AbilityBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SReputationRewardAmount
// Size: 0x20
// VTable: 0x149a96538
struct SReputationRewardAmount {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* editorName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t reputationAmount; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SDynamicDifficultyPointsPerEvent
// Size: 0x10
// VTable: 0x149a0a098
struct SDynamicDifficultyPointsPerEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t eventCount; // Offset: 0x8
    int32_t points; // Offset: 0xc
};

// Original name: BuildingBlocks_PreviewSceneRttWindow
// Size: 0x18
// VTable: 0x149994950
struct BuildingBlocks_PreviewSceneRttWindow {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType renderLayer; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: BaseBuildingParams
// Size: 0x18
// VTable: 0x14999d608
struct BaseBuildingParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ItemResourceDynamicAmountExample
// Size: 0x10
// VTable: 0x1499a89d0
struct ItemResourceDynamicAmountExample {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float frequency; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BaseDensityUnit
// Size: 0x8
// VTable: 0x149961e70
struct BaseDensityUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ActorStatusUIWarningEntry
// Size: 0x18
// VTable: 0x1499fe0e0
struct ActorStatusUIWarningEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float statValue; // Offset: 0x8
    float cooldownValue; // Offset: 0xc
    CLocIdentifier* warningString; // Offset: 0x10
};

// Original name: SAuxiliaryWeaponActionFlashlightParams
// Size: 0x10
// VTable: 0x149a69838
struct SAuxiliaryWeaponActionFlashlightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float EM_Signature_On; // Offset: 0x8
    float IR_Signature_On; // Offset: 0xc
};

// Original name: SQuantumTravelEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a40
struct SQuantumTravelEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: STurnOffItemGameplayTrigger
// Size: 0x8
// VTable: 0x1499faac8
struct STurnOffItemGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DefaultSphereGeom
// Size: 0x10
// VTable: 0x1499e8a48
struct DefaultSphereGeom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool disable; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float radiusInflation; // Offset: 0xc
};

// Original name: UIGraph_KioskBackgroundComponent
// Size: 0x20
// VTable: 0x149a33808
struct UIGraph_KioskBackgroundComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemKioskMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* name; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: SHeadRecoilNoiseParams
// Size: 0x20
// VTable: 0x149a5f108
struct SHeadRecoilNoiseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xNoise; // Offset: 0x8
    bool canXInvert; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float yNoise; // Offset: 0x10
    bool canYInvert; // Offset: 0x14
    uint8_t _pad_2[0x3]; // Offset: 0x15
    float zNoise; // Offset: 0x18
    bool canZInvert; // Offset: 0x1c
    uint8_t _pad_3[0x3]; // Offset: 0x1d
};

// Original name: ItemResourceDynamicAmountBase
// Size: 0x8
// VTable: 0x1499a7380
struct ItemResourceDynamicAmountBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SDirtAccumulatorParams
// Size: 0x40
// VTable: 0x1499d7a00
struct SDirtAccumulatorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float InitialAccumulationRatio; // Offset: 0x8
    bool AccumulateWhenUnstreamed; // Offset: 0xc
    bool AccumulateOnlyAfterTractorBeam; // Offset: 0xd
    bool AccumulateOnlyWhenAttached; // Offset: 0xe
    bool StopAccumulationWhenAttached; // Offset: 0xf
    float AccumulationEventThreshold; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    CryStringT* PortTags; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* RequiredPortTags; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    float InitialDirtRatio; // Offset: 0x38
    uint8_t _pad_4[0x4]; // Offset: 0x3c
};

// Original name: BoidsAlertPointRepelRule
// Size: 0x18
// VTable: 0x1499ec358
struct BoidsAlertPointRepelRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float decayCoefficient; // Offset: 0x10
    float maxAcceleration; // Offset: 0x14
};

// Original name: StatusCost
// Size: 0x10
// VTable: 0x1499fe608
struct StatusCost {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statType; // Offset: 0x8
    float cost; // Offset: 0xc
};

// Original name: BuildingBlocks_StaticVariableBase
// Size: 0x18
// VTable: 0x14998a3c0
struct BuildingBlocks_StaticVariableBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SSCSignatureSystemAudioModifier
// Size: 0x8
// VTable: 0x1499e9f38
struct SSCSignatureSystemAudioModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSubsumptionActionAreaTrackerParams
// Size: 0x18
// VTable: 0x14997e228
struct SSubsumptionActionAreaTrackerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: DriftingDrunkBDLEffects
// Size: 0x40
// VTable: 0x1499fedc8
struct DriftingDrunkBDLEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stumbleMinCooldown; // Offset: 0x8
    float stumbleMaxCooldown; // Offset: 0xc
    float stumbleMinDuration; // Offset: 0x10
    float stumbleMaxDuration; // Offset: 0x14
    float stumbleFrequency; // Offset: 0x18
    float stumbleMinMagnitude; // Offset: 0x1c
    float stumbleMaxMagnitude; // Offset: 0x20
    float minValue; // Offset: 0x24
    float maxValue; // Offset: 0x28
    float fadeSpeedMin; // Offset: 0x2c
    float fadeSpeedMax; // Offset: 0x30
    float fadeFrequency; // Offset: 0x34
    float fovScaleAdjust; // Offset: 0x38
    float breathingAmplifier; // Offset: 0x3c
};

// Original name: SendAttemptWirelessLinkEvent
// Size: 0x8
// VTable: 0x1499a8908
struct SendAttemptWirelessLinkEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: StatusEffectValueAbsolute
// Size: 0x10
// VTable: 0x1499fca20
struct StatusEffectValueAbsolute {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_ActorMotionSpeed
// Size: 0x10
// VTable: 0x149a65c30
struct ControlHintCondition_ActorMotionSpeed {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType motionSpeed; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ScreenEffects_Pattern
// Size: 0x10
// VTable: 0x14999be20
struct ScreenEffects_Pattern {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float duration; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ItemResourceDynamicAmountJumpTravelFuel
// Size: 0x8
// VTable: 0x1499a8a68
struct ItemResourceDynamicAmountJumpTravelFuel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EntityAudioControllerTypeManagementParams
// Size: 0x18
// VTable: 0x1499b13b0
struct EntityAudioControllerTypeManagementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType audioControllerEntityType; // Offset: 0x8
    int32_t maxFullLODs; // Offset: 0xc
    int32_t maxLowLODs; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SSequencerMoveToAnimateItemDoorTaskParams
// Size: 0x40
// VTable: 0x1499f2648
struct SSequencerMoveToAnimateItemDoorTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* fragmentId; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* fragTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: InteriorMapWorldUISectionLabelsParams
// Size: 0x8
// VTable: 0x149a49220
struct InteriorMapWorldUISectionLabelsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: LocationMusicConfig
// Size: 0x48
// VTable: 0x1499b5598
struct LocationMusicConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* wwiseEventPrefix; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* musicEventPrefix; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* wwiseEventPrefixStarSystem; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* musicEventPrefixStarSystem; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
};

// Original name: EAPatchNoteParams
// Size: 0x18
// VTable: 0x1499f9f28
struct EAPatchNoteParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* note; // Offset: 0x8
    bool bold; // Offset: 0x10
    bool underlined; // Offset: 0x11
    bool italic; // Offset: 0x12
    uint8_t _pad_1[0x5]; // Offset: 0x13
};

// Original name: PersonalThoughtActionsMenu
// Size: 0x18
// VTable: 0x149a99de0
struct PersonalThoughtActionsMenu {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
};

// Original name: SSequencerStowHeldEntityCarryableTaskParams
// Size: 0x20
// VTable: 0x149a8eb28
struct SSequencerStowHeldEntityCarryableTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: JumpFallLandParams
// Size: 0x18
// VTable: 0x149aa0580
struct JumpFallLandParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useJump; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float jumpHeight; // Offset: 0xc
    float jumpDistance; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SCTurretSeatRotationParams
// Size: 0x18
// VTable: 0x149a5d2b8
struct SCTurretSeatRotationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float preEnterAngle; // Offset: 0x8
    float postEnterAngle; // Offset: 0xc
    float preExitAngle; // Offset: 0x10
    float postExitAngle; // Offset: 0x14
};

// Original name: PlanetKillVolumeComponentParams
// Size: 0x30
// VTable: 0x149a0fb38
struct PlanetKillVolumeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float planetRadius; // Offset: 0x18
    float killRadius; // Offset: 0x1c
    float warningRadius; // Offset: 0x20
    float shakeRadius; // Offset: 0x24
    float shadowPenumbraWidth; // Offset: 0x28
    float shadowMaxRange; // Offset: 0x2c
};

// Original name: SStandardPlayerSetup
// Size: 0x18
// VTable: 0x149a17270
struct SStandardPlayerSetup {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EASpawnRezParams
// Size: 0x18
// VTable: 0x149a3c2c0
struct EASpawnRezParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierLocalization
// Size: 0x18
// VTable: 0x14998b178
struct BuildingBlocks_FieldModifierLocalization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType field; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* value; // Offset: 0x10
};

// Original name: ActorEnvironmentalModifierConfig
// Size: 0x18
// VTable: 0x149aa3cf0
struct ActorEnvironmentalModifierConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minAffectedRatioForSlowdown; // Offset: 0x8
    float environmentalSlowdownSpeedMultiplier; // Offset: 0xc
    float minAffectedRatioToDisableSprint; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: EnvironmentLightProjectionParams
// Size: 0x18
// VTable: 0x1499a38d8
struct EnvironmentLightProjectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool boxProject; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float boxSizeZ; // Offset: 0xc
    float boxSizeX; // Offset: 0x10
    float boxSizeY; // Offset: 0x14
};

// Original name: StaminaCost
// Size: 0x10
// VTable: 0x149a3c7e0
struct StaminaCost {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float flatCost; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: MatchCycleParams
// Size: 0x10
// VTable: 0x149a3a6f8
struct MatchCycleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float matchCycleTimeout; // Offset: 0xc
};

// Original name: SCItemControlCondition_Base
// Size: 0x8
// VTable: 0x149a06bd8
struct SCItemControlCondition_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GlobalJumpPointTuningParams
// Size: 0x10
// VTable: 0x149a12a80
struct GlobalJumpPointTuningParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float requiredTuningAmount; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AttackDetectionConfig
// Size: 0x18
// VTable: 0x1499b5640
struct AttackDetectionConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t numHitsToClassAsAnAttack; // Offset: 0x8
    float attackDetectionTimeWindow; // Offset: 0xc
    float attackDetectionTimeout; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: CameraFOVConfig
// Size: 0x28
// VTable: 0x1499b21c0
struct CameraFOVConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lensSizeTransitionTime; // Offset: 0x8
    ARDataType defaultLensSizePreset; // Offset: 0xc
    float fStopTransitionTime; // Offset: 0x10
    ARDataType defaultFStop; // Offset: 0x14
    float nearPlane; // Offset: 0x18
    float farPlane; // Offset: 0x1c
    float focalDistance; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: AtmosphereStateTemplateInternal
// Size: 0x20
// VTable: 0x14997a3c0
struct AtmosphereStateTemplateInternal {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType pressureMod; // Offset: 0x8
    float pressure; // Offset: 0xc
    ARDataType temperatureMod; // Offset: 0x10
    float temperature; // Offset: 0x14
    ARDataType humidityMod; // Offset: 0x18
    float humidity; // Offset: 0x1c
};

// Original name: SDynamicLaunchZoneDef
// Size: 0x20
// VTable: 0x1499e2dd0
struct SDynamicLaunchZoneDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float width; // Offset: 0x8
    float length; // Offset: 0xc
    float cutoutAngle; // Offset: 0x10
    float ellipsoidOffsetY; // Offset: 0x14
    float coneOffsetY; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: EATransportQTravelTransitionParams
// Size: 0x10
// VTable: 0x149a28568
struct EATransportQTravelTransitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float spoolUpTime; // Offset: 0xc
};

// Original name: ControlHintCondition_GameOptionState
// Size: 0x18
// VTable: 0x149a671b0
struct ControlHintCondition_GameOptionState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* gameOptionAttributeName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SEntityEffectSystem_PropertyModifier
// Size: 0x8
// VTable: 0x149999070
struct SEntityEffectSystem_PropertyModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ActorActionHandler_LadderValidationParams
// Size: 0x18
// VTable: 0x149aad5f8
struct ActorActionHandler_LadderValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float nearDistance; // Offset: 0x8
    float mountTimeout; // Offset: 0xc
    float slideTimeout; // Offset: 0x10
    float dismountTimeout; // Offset: 0x14
};

// Original name: BaseJournalEntry
// Size: 0x8
// VTable: 0x1499752a8
struct BaseJournalEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SS42SubsumptionMissionComponentParams
// Size: 0x18
// VTable: 0x14996c828
struct SS42SubsumptionMissionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ApparentTemperatureParams
// Size: 0x38
// VTable: 0x149979c18
struct ApparentTemperatureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    double heatIndexBlendThreshold; // Offset: 0x8
    double heatIndexHardThreshold; // Offset: 0x10
    double windChillBlendThreshold; // Offset: 0x18
    double windChillHardThreshold; // Offset: 0x20
    double maxPressureForScaling; // Offset: 0x28
    double defaultTemperatureForPressureScaling; // Offset: 0x30
};

// Original name: StanceCheckConfig
// Size: 0x10
// VTable: 0x149aa3128
struct StanceCheckConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool standCheckEnabled; // Offset: 0x8
    bool crouchCheckEnabled; // Offset: 0x9
    bool proneCheckEnabled; // Offset: 0xa
    bool ragdollEnabled; // Offset: 0xb
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: STeamHostility
// Size: 0x18
// VTable: 0x1499eeda8
struct STeamHostility {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: FloatModifierMultiplicative
// Size: 0x18
// VTable: 0x1499f6190
struct FloatModifierMultiplicative {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool showInUI; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    float value; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: StatusEffectValueLinear
// Size: 0x18
// VTable: 0x1499fcaf8
struct StatusEffectValueLinear {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectMax; // Offset: 0x8
    float effectMin; // Offset: 0xc
    float valueAtMin; // Offset: 0x10
    float valueAtMax; // Offset: 0x14
};

// Original name: GasCloudLightFadeParams
// Size: 0x18
// VTable: 0x1499ccc48
struct GasCloudLightFadeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minDistance; // Offset: 0x8
    float minFade; // Offset: 0xc
    float maxDistance; // Offset: 0x10
    float maxFade; // Offset: 0x14
};

// Original name: DynamicCameraEffectsRendererParams
// Size: 0x20
// VTable: 0x149a7c308
struct DynamicCameraEffectsRendererParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float bloomIntensity; // Offset: 0x8
    float chromaticAberration; // Offset: 0xc
    float filmGrainSize; // Offset: 0x10
    float filmGrainStrength; // Offset: 0x14
    float shutterSpeed; // Offset: 0x18
    float vignetting; // Offset: 0x1c
};

// Original name: EntityComponentHeatConnection
// Size: 0x68
// VTable: 0x149a08750
struct EntityComponentHeatConnection {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float TemperatureToIR; // Offset: 0x18
    float StartIRTemperature; // Offset: 0x1c
    float OverpowerHeat; // Offset: 0x20
    float OverclockThresholdMinHeat; // Offset: 0x24
    float OverclockThresholdMaxHeat; // Offset: 0x28
    float ThermalEnergyBase; // Offset: 0x2c
    float ThermalEnergyDraw; // Offset: 0x30
    float ThermalConductivity; // Offset: 0x34
    float SpecificHeatCapacity; // Offset: 0x38
    float Mass; // Offset: 0x3c
    float SurfaceArea; // Offset: 0x40
    float StartCoolingTemperature; // Offset: 0x44
    float MaxCoolingRate; // Offset: 0x48
    float MaxTemperature; // Offset: 0x4c
    float OverheatTemperature; // Offset: 0x50
    float RecoveryTemperature; // Offset: 0x54
    float MinTemperature; // Offset: 0x58
    float MisfireMinTemperature; // Offset: 0x5c
    float MisfireMaxTemperature; // Offset: 0x60
    uint8_t _pad_1[0x4]; // Offset: 0x64
};

// Original name: CraftingNameInfo
// Size: 0x20
// VTable: 0x1499b80d8
struct CraftingNameInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
};

// Original name: UIOwnerContextTransitionPair
// Size: 0x28
// VTable: 0x149a484d8
struct UIOwnerContextTransitionPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* layerName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* viewName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SHintActivator
// Size: 0x10
// VTable: 0x1499fb2a0
struct SHintActivator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType hint; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SContextualTakedownFragmentTag
// Size: 0x18
// VTable: 0x149a91e80
struct SContextualTakedownFragmentTag {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fragmentTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SNavPointEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a30
struct SNavPointEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TransitLimboNodeParams
// Size: 0x18
// VTable: 0x1499d8af8
struct TransitLimboNodeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: RestrictedAreaBoundaryMeshParams
// Size: 0x18
// VTable: 0x149a1c958
struct RestrictedAreaBoundaryMeshParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_ComponentIconProperties
// Size: 0x20
// VTable: 0x14998c8c0
struct BuildingBlocks_ComponentIconProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool show; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    ARDataType iconPreset; // Offset: 0xc
    CryStringT* customIcon; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: BiomeAccumulationParams
// Size: 0x18
// VTable: 0x1499d7d10
struct BiomeAccumulationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: TriggeredVisorMessage
// Size: 0x18
// VTable: 0x1499fb1e0
struct TriggeredVisorMessage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    float duration; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: S42StatOperationValue
// Size: 0x18
// VTable: 0x149a39ac0
struct S42StatOperationValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType operationType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float valueRight; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SVehicleEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a58
struct SVehicleEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SReputationStateModifierSet
// Size: 0x10
// VTable: 0x149a96950
struct SReputationStateModifierSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_BindingsNumberBase
// Size: 0x50
// VTable: 0x1499804e8
struct BuildingBlocks_BindingsNumberBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: AttachableStateModifierContext_Parent
// Size: 0x8
// VTable: 0x1499c15c8
struct AttachableStateModifierContext_Parent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ScanDisplaySortInfoParams
// Size: 0x10
// VTable: 0x1499c6bf8
struct ScanDisplaySortInfoParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType sortVariable; // Offset: 0x8
    ARDataType sortType; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: StatusPriorityBase
// Size: 0x10
// VTable: 0x1499c7720
struct StatusPriorityBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType associatedWidget; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SReputationMissionRequirementExpressionElement
// Size: 0x8
// VTable: 0x149a96b58
struct SReputationMissionRequirementExpressionElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TakeDownMaxDistances
// Size: 0x18
// VTable: 0x149a9fec8
struct TakeDownMaxDistances {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxDistanceFront; // Offset: 0x8
    float maxDistanceBack; // Offset: 0xc
    float maxDistanceRight; // Offset: 0x10
    float maxDistanceLeft; // Offset: 0x14
};

// Original name: SCLocalPlayerGroupVideoCallComponentParams
// Size: 0x18
// VTable: 0x149a828a8
struct SCLocalPlayerGroupVideoCallComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SAddHealthRatio
// Size: 0x10
// VTable: 0x1499fb750
struct SAddHealthRatio {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float healthRatio; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ItemResourceDynamicAmountLifeSupport
// Size: 0x8
// VTable: 0x1499a8a88
struct ItemResourceDynamicAmountLifeSupport {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SBBDynamicPropertyLocString
// Size: 0x10
// VTable: 0x149a96170
struct SBBDynamicPropertyLocString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* value; // Offset: 0x8
};

// Original name: DockingSensitivity
// Size: 0x10
// VTable: 0x149a519f8
struct DockingSensitivity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DockingUIRotationalSensitivity; // Offset: 0x8
    float DockingUILinearSensitivity; // Offset: 0xc
};

// Original name: SResourceNetworItemType
// Size: 0x10
// VTable: 0x1499a73e0
struct SResourceNetworItemType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType resourceNetworkItemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: EntityEventCallbackComponentParams
// Size: 0x18
// VTable: 0x149af2ab8
struct EntityEventCallbackComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SOrdnanceClusterParams
// Size: 0x28
// VTable: 0x149a240c8
struct SOrdnanceClusterParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float launchDetachTime; // Offset: 0x8
    float impactDetachTime; // Offset: 0xc
    bool detachAngleRelativeToGravity; // Offset: 0x10
    uint8_t _pad_1[0x3]; // Offset: 0x11
    float detachAngleInitial; // Offset: 0x14
    float detachAngleIncrement; // Offset: 0x18
    int32_t detachAngleResetCount; // Offset: 0x1c
    float detachDelay; // Offset: 0x20
    float detachSpeed; // Offset: 0x24
};

// Original name: CraftingCost_Base
// Size: 0x8
// VTable: 0x1499b80e0
struct CraftingCost_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: StickyFilterRotationParams
// Size: 0x20
// VTable: 0x149a88018
struct StickyFilterRotationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float outerRotationSpeed; // Offset: 0x8
    float innerRotationSpeed; // Offset: 0xc
    float minRadiusAngle; // Offset: 0x10
    float maxRadiusAngle; // Offset: 0x14
    float breakRadiusAngle; // Offset: 0x18
    float deadZoneRadiusAngle; // Offset: 0x1c
};

// Original name: DevTeam
// Size: 0x18
// VTable: 0x149a910e8
struct DevTeam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: StatusEntityComponentParams
// Size: 0x28
// VTable: 0x1499f9550
struct StatusEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* bindingsPrefix; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: ItemResourceDynamicAmountFunctionalityRatio
// Size: 0x10
// VTable: 0x1499a8a58
struct ItemResourceDynamicAmountFunctionalityRatio {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    ARDataType resource; // Offset: 0xc
};

// Original name: SMineableResourceObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e8180
struct SMineableResourceObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: LightClipBoxParams
// Size: 0x10
// VTable: 0x1499a4678
struct LightClipBoxParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useClipBox; // Offset: 0x8
    bool autoDetectClipBox; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: CameraKillerDeathCamParams
// Size: 0x40
// VTable: 0x1499b31e8
struct CameraKillerDeathCamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t angleToApplyVerticalOffset; // Offset: 0x8
    float verticalOffset; // Offset: 0xc
    float smoothTime; // Offset: 0x10
    float smoothTimeVehicleFast; // Offset: 0x14
    float smoothTimeVehicleSlow; // Offset: 0x18
    float smoothTimeVehicleMaxDistanceSquared; // Offset: 0x1c
    float innerRadius; // Offset: 0x20
    float outerRadius; // Offset: 0x24
    float collisionRadius; // Offset: 0x28
    bool collisionsEnabled; // Offset: 0x2c
    bool followsKiller; // Offset: 0x2d
    bool inVehicle; // Offset: 0x2e
    uint8_t _pad_1[0x1]; // Offset: 0x2f
    int32_t vehicleTopDownAngle; // Offset: 0x30
    float vehicleTopDownDistance; // Offset: 0x34
    float footTopDownDistance; // Offset: 0x38
    float swapTimeBodyToVehicle; // Offset: 0x3c
};

// Original name: SInitialDamageSpecifierBase
// Size: 0x8
// VTable: 0x149a17490
struct SInitialDamageSpecifierBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SReputationStateModifierSetBool
// Size: 0x10
// VTable: 0x149a969b0
struct SReputationStateModifierSetBool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool value; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: ActorViewLimits
// Size: 0x28
// VTable: 0x149a9e700
struct ActorViewLimits {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minYaw; // Offset: 0x8
    float maxYaw; // Offset: 0xc
    float minPitch; // Offset: 0x10
    float maxPitch; // Offset: 0x14
    float minRoll; // Offset: 0x18
    float maxRoll; // Offset: 0x1c
    bool useEllipse; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: VoteBaseParams
// Size: 0x10
// VTable: 0x149a3abb0
struct VoteBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* bodyLocId; // Offset: 0x8
};

// Original name: InventoryContainerGridCellSizeCentimeters
// Size: 0x10
// VTable: 0x149a9dfb0
struct InventoryContainerGridCellSizeCentimeters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t centimeters; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_VehicleEjectorSeat
// Size: 0x10
// VTable: 0x149a66d90
struct ControlHintCondition_VehicleEjectorSeat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType ejectorSeat; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: RGBA8
// Size: 0x10
// VTable: 0x1499ad728
struct RGBA8 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t r; // Offset: 0x8
    uint8_t g; // Offset: 0x9
    uint8_t b; // Offset: 0xa
    uint8_t a; // Offset: 0xb
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SubHarvestableConfigSingleBase
// Size: 0x8
// VTable: 0x1499ef968
struct SubHarvestableConfigSingleBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SLocalPlayerShoppingNotificationConfiguration
// Size: 0x38
// VTable: 0x149a56cb0
struct SLocalPlayerShoppingNotificationConfiguration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float screenTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* audioEvent; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* iconPath; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    bool showIcon; // Offset: 0x30
    bool isLowPriority; // Offset: 0x31
    uint8_t _pad_4[0x6]; // Offset: 0x32
};

// Original name: HospitalEmergencyScreenComponentParams
// Size: 0x38
// VTable: 0x149a0fc08
struct HospitalEmergencyScreenComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* openDoorsInteraction; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* closeDoorsInteraction; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: S42StateParams
// Size: 0x18
// VTable: 0x149a3c560
struct S42StateParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LegacyCraftingRecipeList_Base
// Size: 0x8
// VTable: 0x149a0f2a8
struct LegacyCraftingRecipeList_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SBaseCargoUnit
// Size: 0x8
// VTable: 0x14999ed40
struct SBaseCargoUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEntityTraversingExecuteNodeBase
// Size: 0x8
// VTable: 0x14999e9e0
struct SEntityTraversingExecuteNodeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: HandholdGripType
// Size: 0x20
// VTable: 0x149a030b8
struct HandholdGripType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* mannequinTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType handholdType; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: AIPathComponentParams
// Size: 0x18
// VTable: 0x1499ed348
struct AIPathComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SAudioProxyParams
// Size: 0x18
// VTable: 0x149ac47a0
struct SAudioProxyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LightFlickerWaveRandomParams
// Size: 0x20
// VTable: 0x1499e12a0
struct LightFlickerWaveRandomParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minDelay; // Offset: 0x8
    float maxDelay; // Offset: 0xc
    int32_t minLightsPerActivation; // Offset: 0x10
    int32_t maxLightsPerActivation; // Offset: 0x14
    float maxDuration; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_TriggerBase
// Size: 0x8
// VTable: 0x14998d210
struct BuildingBlocks_TriggerBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEnergyPipeDefinition
// Size: 0x20
// VTable: 0x1499aeed8
struct SEnergyPipeDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType Klass; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SCItemProximitySensorShapeParams
// Size: 0x10
// VTable: 0x1499f39d8
struct SCItemProximitySensorShapeParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
};

// Original name: SSequencerActorAnimationTaskParams
// Size: 0x40
// VTable: 0x1499a2298
struct SSequencerActorAnimationTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* fragmentName; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* fragTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: SLegacyThrusterMisfireParams
// Size: 0x18
// VTable: 0x149a09960
struct SLegacyThrusterMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxThrustRatio; // Offset: 0x8
    float minThrustRatio; // Offset: 0xc
    float misfireThrustToOffTimeRatio; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SCharacterCustomizerWildlineSubconditionFlowStep
// Size: 0x10
// VTable: 0x149a0ca20
struct SCharacterCustomizerWildlineSubconditionFlowStep {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t flowStep; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AnimationGraph_KeyFrame
// Size: 0x18
// VTable: 0x149aa5db8
struct AnimationGraph_KeyFrame {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType timeModifier; // Offset: 0x8
    ARDataType easeType; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    uint32_t frame; // Offset: 0x10
    float value; // Offset: 0x14
};

// Original name: SCItemDisplayScreenPreset
// Size: 0x28
// VTable: 0x149a08838
struct SCItemDisplayScreenPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* material; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* geometryPath; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SEntityEffectSystem_MinMaxModifier
// Size: 0x10
// VTable: 0x149999938
struct SEntityEffectSystem_MinMaxModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimum; // Offset: 0x8
    float maximum; // Offset: 0xc
};

// Original name: HeatDegradation
// Size: 0x10
// VTable: 0x1499d7788
struct HeatDegradation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float NormalTemperatureMultiplier; // Offset: 0x8
    float OverheatTemperatureMultiplier; // Offset: 0xc
};

// Original name: IntUserVariableSetValueTask
// Size: 0x38
// VTable: 0x1499941a8
struct IntUserVariableSetValueTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* name; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    int64_t value; // Offset: 0x30
};

// Original name: AIFireDisciplineSettings
// Size: 0x10
// VTable: 0x149a948d8
struct AIFireDisciplineSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fireConeMinAngle; // Offset: 0x8
    float fireConeMaxAngle; // Offset: 0xc
};

// Original name: LandingAreaServicesParams
// Size: 0x18
// VTable: 0x1499fa798
struct LandingAreaServicesParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: TraversalCostShapeConfig
// Size: 0x8
// VTable: 0x1499ec9b0
struct TraversalCostShapeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TemperatureUIParams
// Size: 0x10
// VTable: 0x149a3cf88
struct TemperatureUIParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minTemperatureDisplay; // Offset: 0x8
    float maxTemperatureDisplay; // Offset: 0xc
};

// Original name: LinkedStatRulePassBelowThreshold
// Size: 0x10
// VTable: 0x1499fdae0
struct LinkedStatRulePassBelowThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SIBettingModule
// Size: 0x18
// VTable: 0x1499ba188
struct SIBettingModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SStatusTriggerThresholdLevelModifier
// Size: 0x20
// VTable: 0x1499fd030
struct SStatusTriggerThresholdLevelModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minThresholdModifier; // Offset: 0x8
    float interpMinThresholdModifier; // Offset: 0xc
    float interpMaxThresholdModifier; // Offset: 0x10
    float guranteedThresholdModifier; // Offset: 0x14
    float maxThresholdModifier; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SHackingCodeErrorEntry
// Size: 0x28
// VTable: 0x149a2c770
struct SHackingCodeErrorEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isDisabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* errorCode; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CLocIdentifier* errorText; // Offset: 0x20
};

// Original name: LoudspeakerComponentParams
// Size: 0x20
// VTable: 0x1499d3b08
struct LoudspeakerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float minRadius; // Offset: 0x18
    float maxRadius; // Offset: 0x1c
};

// Original name: SActorLocomotionFidgetSeverityParams
// Size: 0x20
// VTable: 0x149ab1b58
struct SActorLocomotionFidgetSeverityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fragmentTags; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float severityWeight; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: Investigation_Clue
// Size: 0x18
// VTable: 0x14996a878
struct Investigation_Clue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* objectiveLongDescription; // Offset: 0x8
    CLocIdentifier* objectiveShortDescription; // Offset: 0x10
};

// Original name: ConsumableEffectHealth
// Size: 0x18
// VTable: 0x149a25460
struct ConsumableEffectHealth {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* effectDescription; // Offset: 0x8
    float healthChange; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: CraftingBlueprint_Base_NonRef
// Size: 0x8
// VTable: 0x1499b8e80
struct CraftingBlueprint_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BoidsAreaLimiterRule
// Size: 0x18
// VTable: 0x1499ec060
struct BoidsAreaLimiterRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float effectDistance; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SignatureUIGlobalParams
// Size: 0x20
// VTable: 0x1499c42e0
struct SignatureUIGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float warningUnderStateTime; // Offset: 0x8
    float signatureDisplayTime; // Offset: 0xc
    float signatureFadeTime; // Offset: 0x10
    float emissionDisplayIncrease; // Offset: 0x14
    float emissionMemoryTime; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SolarSystemComponentParams
// Size: 0x18
// VTable: 0x1499a1618
struct SolarSystemComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEntityComponentVehicleSeaterParams
// Size: 0x18
// VTable: 0x149a2d400
struct SEntityComponentVehicleSeaterParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: RevivalFadeInParams
// Size: 0x10
// VTable: 0x1499ff308
struct RevivalFadeInParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fadeinTime; // Offset: 0x8
    float fadeinBlur; // Offset: 0xc
};

// Original name: AIMercyTimerSettings
// Size: 0x18
// VTable: 0x149a735b0
struct AIMercyTimerSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float activationThreshold; // Offset: 0x8
    float coolDownTimeSeconds; // Offset: 0xc
    float durationSeconds; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: EntityEffectSystem_UIOwnerEvent_Goto
// Size: 0x18
// VTable: 0x14999aee0
struct EntityEffectSystem_UIOwnerEvent_Goto {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* timelineName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: AnimationVariableInterpolation
// Size: 0x10
// VTable: 0x1499a25d8
struct AnimationVariableInterpolation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeRange; // Offset: 0x8
    ARDataType type_; /* type */ // Offset: 0xc
};

// Original name: EntityCaptureParams
// Size: 0x18
// VTable: 0x149a2acd8
struct EntityCaptureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float attackerCaptureTime; // Offset: 0x8
    float defenderCaptureTime; // Offset: 0xc
    float propCaptureTime; // Offset: 0x10
    float spawnLocationCaptureTime; // Offset: 0x14
};

// Original name: PlayerScoresUIProviderParams
// Size: 0x18
// VTable: 0x149968218
struct PlayerScoresUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCommodityUIProviderParams
// Size: 0x18
// VTable: 0x149a42208
struct SCommodityUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SScoreEvent
// Size: 0x10
// VTable: 0x1499ba268
struct SScoreEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t points; // Offset: 0x8
    ARDataType type_; /* type */ // Offset: 0xc
};

// Original name: InterferenceParams_OneShot
// Size: 0x18
// VTable: 0x149996d80
struct InterferenceParams_OneShot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fallOffDistance; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float energy; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: ItemResourceDynamicAmountQuantumTravelFuel
// Size: 0x8
// VTable: 0x1499a8a60
struct ItemResourceDynamicAmountQuantumTravelFuel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ResistanceWeightParams
// Size: 0x20
// VTable: 0x1499ff288
struct ResistanceWeightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float headWeighting; // Offset: 0x8
    float bodyWeighting; // Offset: 0xc
    float armsWeighting; // Offset: 0x10
    float handsWeighting; // Offset: 0x14
    float legsWeighting; // Offset: 0x18
    float feetWeighting; // Offset: 0x1c
};

// Original name: SEntityComponentLocationDataParams
// Size: 0x28
// VTable: 0x1499ca460
struct SEntityComponentLocationDataParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* DisplayMesh; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: RemovableChipValue
// Size: 0x20
// VTable: 0x1499f8788
struct RemovableChipValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float value; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_TimingFunctionSteps
// Size: 0x10
// VTable: 0x14998d208
struct BuildingBlocks_TimingFunctionSteps {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t numSteps; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    ARDataType jumpTerm; // Offset: 0xc
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeScrollEasingType
// Size: 0x10
// VTable: 0x14998ba90
struct BuildingBlocks_FieldModifierEnumeratedTypeScrollEasingType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SBBDynamicPropertyInt
// Size: 0x10
// VTable: 0x149a96050
struct SBBDynamicPropertyInt {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_VehicleTurretEquippedComponents
// Size: 0x10
// VTable: 0x149a670f0
struct ControlHintCondition_VehicleTurretEquippedComponents {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType equippedComponents; // Offset: 0x8
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: SAsteroidGasCloudComponentParams
// Size: 0x58
// VTable: 0x14999f938
struct SAsteroidGasCloudComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t rngSeed; // Offset: 0x18
    uint8_t viewDistRatio; // Offset: 0x1c
    uint8_t lodRatio; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    CryStringT* composition; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    float noiseAmplitude; // Offset: 0x30
    float noiseGranularity; // Offset: 0x34
    float noiseRoughness; // Offset: 0x38
    uint8_t _pad_3[0xc]; // Offset: 0x3c
    float densityScale; // Offset: 0x48
    float densityExponent; // Offset: 0x4c
    float densityMinimum; // Offset: 0x50
    float densityMaximum; // Offset: 0x54
};

// Original name: UISimpleRenderNodeEntityComponentParams
// Size: 0x48
// VTable: 0x149993ac8
struct UISimpleRenderNodeEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* materialName; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    float minimumBounds; // Offset: 0x28
    float sortDistance; // Offset: 0x2c
    float fixedScaleMin; // Offset: 0x30
    float fixedScaleMax; // Offset: 0x34
    float cardStageRadius; // Offset: 0x38
    ARDataType flattenBehavior; // Offset: 0x3c
    uint8_t _pad_2[0x3]; // Offset: 0x3d
    float interference; // Offset: 0x40
    uint8_t _pad_3[0x4]; // Offset: 0x44
};

// Original name: LoadoutProviderEntityComponentParams
// Size: 0x18
// VTable: 0x149a38348
struct LoadoutProviderEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeBorderTopRightRadiusBehavior
// Size: 0x10
// VTable: 0x14998b550
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderTopRightRadiusBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SObjectDataBankEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a00
struct SObjectDataBankEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FrontendControllerProviderParams
// Size: 0x18
// VTable: 0x149a22858
struct FrontendControllerProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: GlobalJumpDriveExitEffectParams
// Size: 0x10
// VTable: 0x149a13160
struct GlobalJumpDriveExitEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float trailStrengthDelay; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ExtinguishType_Spray
// Size: 0x10
// VTable: 0x14997b268
struct ExtinguishType_Spray {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maximumDistance; // Offset: 0x8
    float coneAngle; // Offset: 0xc
};

// Original name: GrabCameraControlParams
// Size: 0x40
// VTable: 0x149992d70
struct GrabCameraControlParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float responsiveness; // Offset: 0x8
    float rotationSpeed; // Offset: 0xc
    float rotationSlowdown; // Offset: 0x10
    float zoomSpeed; // Offset: 0x14
    float zoomSlowdown; // Offset: 0x18
    float minimumZoomDistance; // Offset: 0x1c
    float maximumZoomDistance; // Offset: 0x20
    float maximumZoomSpeed; // Offset: 0x24
    bool isGrabbableOutOfBounds; // Offset: 0x28
    uint8_t _pad_1[0x3]; // Offset: 0x29
    ARDataType grabRotationMode; // Offset: 0x2c
    float panResponsiveness; // Offset: 0x30
    float panSpeed; // Offset: 0x34
    float panSlowdown; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: SMovableObjectContainerParams
// Size: 0x8
// VTable: 0x149a8ee78
struct SMovableObjectContainerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TransitInteractionPanelParams
// Size: 0x18
// VTable: 0x1499d8ae8
struct TransitInteractionPanelParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEnemyKnowledgeComponentParams
// Size: 0x18
// VTable: 0x149a025b8
struct SEnemyKnowledgeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: DefaultActionsEntityState_EntityIsAttachedToLootableActor
// Size: 0x8
// VTable: 0x149a8c0a0
struct DefaultActionsEntityState_EntityIsAttachedToLootableActor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MineableInstabilityParams
// Size: 0x18
// VTable: 0x149a0b1a0
struct MineableInstabilityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float instabilityWavePeriod; // Offset: 0x8
    float instabilityWaveVariance; // Offset: 0xc
    float instabilityCurveFactor; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: CommodityType
// Size: 0x38
// VTable: 0x149a8b138
struct CommodityType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* typeName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* name; // Offset: 0x18
    CLocIdentifier* description; // Offset: 0x20
    CryStringT* defaultThumbnailPath; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: SEntityComponentPushPullModificationObjectParams
// Size: 0x38
// VTable: 0x14999d9c0
struct SEntityComponentPushPullModificationObjectParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float size; // Offset: 0x18
    float strength; // Offset: 0x1c
    bool pull; // Offset: 0x20
    uint8_t _pad_1[0x3]; // Offset: 0x21
    float steepness; // Offset: 0x24
    bool elliptical; // Offset: 0x28
    uint8_t _pad_2[0x3]; // Offset: 0x29
    float rimRadius; // Offset: 0x2c
    int32_t sortOrder; // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
};

// Original name: SurfaceMFXEntityParams
// Size: 0x18
// VTable: 0x1499989e0
struct SurfaceMFXEntityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* customEffect; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: LinkedStatusEffectTrigger
// Size: 0x18
// VTable: 0x1499fced0
struct LinkedStatusEffectTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statType; // Offset: 0x8
    float triggerMinThreshold; // Offset: 0xc
    float triggerMaxThreshold; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: Marker_AbilityJumpPoint
// Size: 0x10
// VTable: 0x149a4aa78
struct Marker_AbilityJumpPoint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float iconSwitchDistance; // Offset: 0x8
    float textDisableDistance; // Offset: 0xc
};

// Original name: ItemResourceControlRNParameterExternalPort
// Size: 0x30
// VTable: 0x1499a8c70
struct ItemResourceControlRNParameterExternalPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* name; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* portName; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
};

// Original name: SIStateModule
// Size: 0x18
// VTable: 0x1499ba4f8
struct SIStateModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEAGameFeedEventParams
// Size: 0x48
// VTable: 0x149a1f150
struct SEAGameFeedEventParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isImageEvent; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* image; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    bool isExtraEvent; // Offset: 0x20
    uint8_t _pad_3[0x7]; // Offset: 0x21
    CryStringT* extraImage; // Offset: 0x28
    uint8_t _pad_4[0x8]; // Offset: 0x30
    CryStringT* backgroundImage; // Offset: 0x38
    uint8_t _pad_5[0x8]; // Offset: 0x40
};

// Original name: SDummyLauncher
// Size: 0x8
// VTable: 0x149a7b9b0
struct SDummyLauncher {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: VoteNextLevelParams
// Size: 0x10
// VTable: 0x149a3acd0
struct VoteNextLevelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* bodyLocId; // Offset: 0x8
};

// Original name: SCMaxLinearVelocityParams
// Size: 0x10
// VTable: 0x149a62cc8
struct SCMaxLinearVelocityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float MaxLinearVelocity; // Offset: 0x8
    float MaxLinearVelocityWithBoost; // Offset: 0xc
};

// Original name: SWeaponActionFireTractorBeamInputParams
// Size: 0x18
// VTable: 0x149a78e30
struct SWeaponActionFireTractorBeamInputParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float distanceChangePerAction; // Offset: 0x8
    float distanceAccelerationTimePeriod; // Offset: 0xc
    float distanceAccelerationFactor; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SSpawnOnDestroy
// Size: 0x10
// VTable: 0x149a401d8
struct SSpawnOnDestroy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeAfterDestroy; // Offset: 0x8
    bool spawnOnDone; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: BuildingBlocks_GeomEntityAnimationParams
// Size: 0x20
// VTable: 0x14998d8a8
struct BuildingBlocks_GeomEntityAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float time; // Offset: 0x18
    bool wrapTime; // Offset: 0x1c
    bool normalizeTime; // Offset: 0x1d
    uint8_t _pad_2[0x2]; // Offset: 0x1e
};

// Original name: DiminishingReturnsStatusEffectApplicationType
// Size: 0x18
// VTable: 0x1499fc7d0
struct DiminishingReturnsStatusEffectApplicationType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType valueType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float scalar; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: ControlHintAlwaysDisplay_WhenConditionsPass
// Size: 0x8
// VTable: 0x149a672e0
struct ControlHintAlwaysDisplay_WhenConditionsPass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ShootingParams
// Size: 0x18
// VTable: 0x1499b76e8
struct ShootingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float shortCombatDistanceShootingThreshold; // Offset: 0x8
    float dogfightCloseCombatDistanceThreshold; // Offset: 0xc
    float undisciplinedTriggerFingerMultiplier; // Offset: 0x10
    float triggerDisciplinedMultiplier; // Offset: 0x14
};

// Original name: QuantumDriveSplineRollbackParams
// Size: 0x10
// VTable: 0x149a51d38
struct QuantumDriveSplineRollbackParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float targetAlignmentToBeginRollBack; // Offset: 0x8
    float fullRotationDistance; // Offset: 0xc
};

// Original name: SSpawnRules
// Size: 0x8
// VTable: 0x149a40150
struct SSpawnRules {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeMaxHeightBehavior
// Size: 0x10
// VTable: 0x14998b490
struct BuildingBlocks_FieldModifierEnumeratedTypeMaxHeightBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ItemDashboardScreenPhysicalParams
// Size: 0x20
// VTable: 0x149a33780
struct ItemDashboardScreenPhysicalParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isHolographic; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: SubsumptionMissionLinkComponentParams
// Size: 0x18
// VTable: 0x14996c830
struct SubsumptionMissionLinkComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEntityEffectSystem_MultiplierModifier
// Size: 0x10
// VTable: 0x149999990
struct SEntityEffectSystem_MultiplierModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float multiplier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SAtmosphericCompositionInherit
// Size: 0x8
// VTable: 0x14997a018
struct SAtmosphericCompositionInherit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_ActorState
// Size: 0x10
// VTable: 0x149a65bd0
struct ControlHintCondition_ActorState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType state; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SItemMisfireParams
// Size: 0x8
// VTable: 0x149a07f60
struct SItemMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BindingsOperations_WaveformShapeBase
// Size: 0x8
// VTable: 0x149988830
struct BindingsOperations_WaveformShapeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TriggeredMessage
// Size: 0x10
// VTable: 0x1499fb0c0
struct TriggeredMessage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
};

// Original name: MissionBeaconProviderEntityComponentParams
// Size: 0x18
// VTable: 0x1499f8fa8
struct MissionBeaconProviderEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AbstractMissionInitParam
// Size: 0x18
// VTable: 0x149975980
struct AbstractMissionInitParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: InventoryContainerGridCellSizeMeters
// Size: 0x10
// VTable: 0x149a9e010
struct InventoryContainerGridCellSizeMeters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t meters; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ActorMovementSetTransition
// Size: 0x18
// VTable: 0x149aa3ed8
struct ActorMovementSetTransition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType movementSet; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    ARDataType condition; // Offset: 0xc
    float startDelay; // Offset: 0x10
    float endDelay; // Offset: 0x14
};

// Original name: AudioSignalRtpc
// Size: 0x30
// VTable: 0x1499a9610
struct AudioSignalRtpc {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* rtpc; // Offset: 0x8
    uint8_t _pad_1[0x10]; // Offset: 0x10
    float defaultValue; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    bool global; // Offset: 0x28
    uint8_t _pad_3[0x7]; // Offset: 0x29
};

// Original name: ProbabilisticStatusEffect
// Size: 0x20
// VTable: 0x1499fc350
struct ProbabilisticStatusEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    float value; // Offset: 0xc
    float duration; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    float probability; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: LightningTargetParams
// Size: 0x30
// VTable: 0x149996fb0
struct LightningTargetParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool overrideSurfaceTypeConductivity; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float conductivityOverride; // Offset: 0x1c
    float conductivityMultiplier; // Offset: 0x20
    float resistance; // Offset: 0x24
    float targetRadiusOverride; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: SHandsRecoilCurveNoiseParams
// Size: 0x20
// VTable: 0x149a5e018
struct SHandsRecoilCurveNoiseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xNoise; // Offset: 0x8
    bool canInvertXCurve; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float yNoise; // Offset: 0x10
    bool canInvertYCurve; // Offset: 0x14
    uint8_t _pad_2[0x3]; // Offset: 0x15
    float zNoise; // Offset: 0x18
    bool canInvertZCurve; // Offset: 0x1c
    uint8_t _pad_3[0x3]; // Offset: 0x1d
};

// Original name: SObjectContainerComponentParams
// Size: 0x28
// VTable: 0x1499a5810
struct SObjectContainerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* objectContainer; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: ClothingType
// Size: 0x8
// VTable: 0x149aa1950
struct ClothingType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: Date
// Size: 0x18
// VTable: 0x1499b9890
struct Date {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t day; // Offset: 0x8
    ARDataType month; // Offset: 0xc
    int32_t year; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: STransponderEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a50
struct STransponderEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_PrimitiveVisualState
// Size: 0x10
// VTable: 0x149984ad0
struct BuildingBlocks_PrimitiveVisualState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float interference; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: RestrictedAreaRedoutParams
// Size: 0x18
// VTable: 0x149a1c388
struct RestrictedAreaRedoutParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool redoutInShip; // Offset: 0x8
    bool redoutInGroundVehicle; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float timeToMaxRedout; // Offset: 0xc
    float maxRedout; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: AIVisualFieldParams
// Size: 0x48
// VTable: 0x149a93628
struct AIVisualFieldParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float sightRange; // Offset: 0x8
    float sixthSenseRange; // Offset: 0xc
    float clampDistanceForHorizontalFOV; // Offset: 0x10
    float clampDistanceForVerticalFOV; // Offset: 0x14
    float FOVHorizontal; // Offset: 0x18
    float FOVVertical; // Offset: 0x1c
    float PrimaryFOVHorizontal; // Offset: 0x20
    float PrimaryFOVVertical; // Offset: 0x24
    uint8_t _pad_1[0x20]; // Offset: 0x28
};

// Original name: SChatChannelTypeBase
// Size: 0x8
// VTable: 0x149a9c790
struct SChatChannelTypeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FloatModifier
// Size: 0x10
// VTable: 0x1499f60d0
struct FloatModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool showInUI; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: AudioAllegianceParams
// Size: 0x18
// VTable: 0x149a17260
struct AudioAllegianceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCItemFuelIntakeParams
// Size: 0x20
// VTable: 0x149a2e498
struct SCItemFuelIntakeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float fuelPushRate; // Offset: 0x18
    float minimumRate; // Offset: 0x1c
};

// Original name: JumpPointVibrationParams
// Size: 0x10
// VTable: 0x149a15228
struct JumpPointVibrationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float openStrength; // Offset: 0x8
    float closeStrength; // Offset: 0xc
};

// Original name: SInteractionPointPrimitiveParams
// Size: 0x8
// VTable: 0x1499a5d70
struct SInteractionPointPrimitiveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: RadarSignatureCategoryEntry
// Size: 0x28
// VTable: 0x1499c38a8
struct RadarSignatureCategoryEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SEntityEffectSystem_SmoothnessModifier
// Size: 0x10
// VTable: 0x1499999f0
struct SEntityEffectSystem_SmoothnessModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float smoothnessSpeed; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: HolographicVolumeCubeParams
// Size: 0x18
// VTable: 0x1499d1920
struct HolographicVolumeCubeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float sizeX; // Offset: 0x8
    float sizeY; // Offset: 0xc
    float sizeZ; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: CraterModifierComponentParams
// Size: 0x18
// VTable: 0x14999e100
struct CraterModifierComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: CommsStageUIProviderParams
// Size: 0x18
// VTable: 0x149a81d50
struct CommsStageUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: Marker_AbilityHostility
// Size: 0x8
// VTable: 0x149a4a440
struct Marker_AbilityHostility {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ItemResourceDynamicAmountWeaponRegen
// Size: 0x8
// VTable: 0x1499a8a78
struct ItemResourceDynamicAmountWeaponRegen {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SIVotingModule
// Size: 0x18
// VTable: 0x1499ba520
struct SIVotingModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SVaultingTechniqueGains
// Size: 0x10
// VTable: 0x149a84e80
struct SVaultingTechniqueGains {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float vaulting; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ProceduralIdleToMoveParams
// Size: 0x28
// VTable: 0x149aace80
struct ProceduralIdleToMoveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxMovementSpeed; // Offset: 0x8
    float maxHipTilt; // Offset: 0xc
    float maxHipVerticalOffset; // Offset: 0x10
    float maxHipHorizontalOffset; // Offset: 0x14
    float maxSpineBend; // Offset: 0x18
    float tiltDuration; // Offset: 0x1c
    float tiltRestorationDuration; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: MotionJukeParams
// Size: 0x18
// VTable: 0x149aad050
struct MotionJukeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float jukeTriggerAngle; // Offset: 0xc
    float jukeDetectionDuration; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SItemPortRuleDef
// Size: 0x8
// VTable: 0x149a92f08
struct SItemPortRuleDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SDoorCollisionReactionToggleParams
// Size: 0x10
// VTable: 0x1499f2288
struct SDoorCollisionReactionToggleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType CollisionReactionDirection; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SEntityHighlightNode
// Size: 0x8
// VTable: 0x1499a5b80
struct SEntityHighlightNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SStandardCargoUnit
// Size: 0x10
// VTable: 0x14999eda0
struct SStandardCargoUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float standardCargoUnits; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCItemMannequinTags
// Size: 0x48
// VTable: 0x1499af0d0
struct SCItemMannequinTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* mannequinClassTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* mannequinTypeTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* mannequinBaseTag; // Offset: 0x28
    uint8_t _pad_3[0x18]; // Offset: 0x30
};

// Original name: AudioObservableExtender
// Size: 0x10
// VTable: 0x149a01c20
struct AudioObservableExtender {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hearingRadiusAtFullStrength; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: HearingDisruptionGameplayTrigger
// Size: 0x10
// VTable: 0x1499c1168
struct HearingDisruptionGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t severity; // Offset: 0x8
    float range; // Offset: 0xc
};

// Original name: MotionSmoothingParams
// Size: 0x20
// VTable: 0x149aacfa8
struct MotionSmoothingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float maxJitterRating; // Offset: 0xc
    float jitterSensitivity; // Offset: 0x10
    float jitterDetectionThreshold; // Offset: 0x14
    float jitterDecayDuration; // Offset: 0x18
    float speedSmoothingDuration; // Offset: 0x1c
};

// Original name: Marker_ShowRule
// Size: 0x8
// VTable: 0x149a49978
struct Marker_ShowRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EntityComponentWaterVolumeParams
// Size: 0x18
// VTable: 0x14999e058
struct EntityComponentWaterVolumeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AdvancedLootConstraints
// Size: 0x10
// VTable: 0x1499b4058
struct AdvancedLootConstraints {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType pruningLevel; // Offset: 0x8
    ARDataType fullnessMode; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: AIAimingComponentParams
// Size: 0x18
// VTable: 0x149a640b0
struct AIAimingComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LinkedStatPassFullValue
// Size: 0x10
// VTable: 0x1499fd728
struct LinkedStatPassFullValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float multiplier; // Offset: 0x8
    ARDataType reverseSignFlag; // Offset: 0xc
};

// Original name: InteriorMapWorldUIRoomLabelsParams
// Size: 0x8
// VTable: 0x149a49228
struct InteriorMapWorldUIRoomLabelsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: RammingTrackerParams
// Size: 0x20
// VTable: 0x149968338
struct RammingTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumHitSpeedHostilityThreshold; // Offset: 0x8
    float minimumHitSpeedCrimeThreshold; // Offset: 0xc
    float singleBlameThreshold; // Offset: 0x10
    float sharedResponsibilityThreshold; // Offset: 0x14
    float collisionGracePeriodSeconds; // Offset: 0x18
    float vehicleActorCollisionSpeedThreshold; // Offset: 0x1c
};

// Original name: MoveViewRestrictionPenalty
// Size: 0x10
// VTable: 0x149a7dc18
struct MoveViewRestrictionPenalty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float restrictedMotionPenalty; // Offset: 0x8
    float restrictedViewPenalty; // Offset: 0xc
};

// Original name: BlockedTextParams
// Size: 0x10
// VTable: 0x149a8d3b0
struct BlockedTextParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* blockedText; // Offset: 0x8
};

// Original name: SDisruptionGameplayTriggerType
// Size: 0x8
// VTable: 0x1499c1088
struct SDisruptionGameplayTriggerType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: QuantumDriveHeatParams
// Size: 0x20
// VTable: 0x149a53590
struct QuantumDriveHeatParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float preRampUpThermalEnergyDraw; // Offset: 0x8
    float rampUpThermalEnergyDraw; // Offset: 0xc
    float inFlightThermalEnergyDraw; // Offset: 0x10
    float rampDownThermalEnergyDraw; // Offset: 0x14
    float postRampDownThermalEnergyDraw; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: Marker_AbilityVehicleData
// Size: 0x8
// VTable: 0x149a4a648
struct Marker_AbilityVehicleData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_GhostPrimitiveSettings
// Size: 0x18
// VTable: 0x149984d20
struct BuildingBlocks_GhostPrimitiveSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float alphaFactor; // Offset: 0x8
    float alphaClamp; // Offset: 0xc
    float scaleFactor; // Offset: 0x10
    uint8_t count; // Offset: 0x14
    bool rearOffset; // Offset: 0x15
    uint8_t _pad_1[0x2]; // Offset: 0x16
};

// Original name: SActorForceReactionsStunDef
// Size: 0x20
// VTable: 0x149a4dba8
struct SActorForceReactionsStunDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stunToImpulseRate; // Offset: 0x8
    float minImpulse; // Offset: 0xc
    float maxImpulseScale; // Offset: 0x10
    bool affectsProjectiles; // Offset: 0x14
    bool affectsMelee; // Offset: 0x15
    bool affectsPhysics; // Offset: 0x16
    bool affectsIndirect; // Offset: 0x17
    bool affectsSustainedDelta; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: SFragmentParams
// Size: 0x20
// VTable: 0x1499de078
struct SFragmentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fragment; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool forceWeaponController; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: FunctionalityModifierBase
// Size: 0x8
// VTable: 0x1499a77d0
struct FunctionalityModifierBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SubsumptionConversationLinkComponentParams
// Size: 0x18
// VTable: 0x14997f5f0
struct SubsumptionConversationLinkComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AudioPropagationParams
// Size: 0x30
// VTable: 0x1499a9870
struct AudioPropagationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* audioEnvironment; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    float physicalOcclusionValueWhenClosed; // Offset: 0x28
    float physicalEncapsulationValue; // Offset: 0x2c
};

// Original name: ControlHintCondition_AnyHintTrigger
// Size: 0x8
// VTable: 0x149a67158
struct ControlHintCondition_AnyHintTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ChatSystemOptionsModule
// Size: 0x18
// VTable: 0x149a5c1c0
struct ChatSystemOptionsModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EnvironmentLightSizeParams
// Size: 0x18
// VTable: 0x1499a34d8
struct EnvironmentLightSizeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float sizeX; // Offset: 0x8
    float sizeY; // Offset: 0xc
    float sizeZ; // Offset: 0x10
    bool global; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
};

// Original name: SAutoLoadingBoxSizePrices
// Size: 0x30
// VTable: 0x149a3fb18
struct SAutoLoadingBoxSizePrices {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t one_eighthSCU; // Offset: 0x8
    int32_t one_quarterSCU; // Offset: 0xc
    int32_t one_halfSCU; // Offset: 0x10
    int32_t oneSCU; // Offset: 0x14
    int32_t twoSCU; // Offset: 0x18
    int32_t fourSCU; // Offset: 0x1c
    int32_t eightSCU; // Offset: 0x20
    int32_t sixteenSCU; // Offset: 0x24
    int32_t twentyFourSCU; // Offset: 0x28
    int32_t thirtyTwoSCU; // Offset: 0x2c
};

// Original name: DefaultActionsEntityState_InRestrainRange
// Size: 0x8
// VTable: 0x149a8c0b0
struct DefaultActionsEntityState_InRestrainRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_ContainerModeBase
// Size: 0x8
// VTable: 0x149982b18
struct BuildingBlocks_ContainerModeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DeliveryItemPortPickupComponentParams
// Size: 0x18
// VTable: 0x14996c430
struct DeliveryItemPortPickupComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ReputationPrerequisiteRange
// Size: 0x10
// VTable: 0x14996ad08
struct ReputationPrerequisiteRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minValue; // Offset: 0x8
    float maxValue; // Offset: 0xc
};

// Original name: BuildingBlocks_TriggerHyperLink
// Size: 0x8
// VTable: 0x14998d420
struct BuildingBlocks_TriggerHyperLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ResourceRangeParams
// Size: 0x10
// VTable: 0x1499a8028
struct ResourceRangeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float start; // Offset: 0x8
    float modifier; // Offset: 0xc
};

// Original name: BoidsSphericalLimiterRule
// Size: 0x18
// VTable: 0x1499ec0e8
struct BoidsSphericalLimiterRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float radius; // Offset: 0x10
    float effectDistance; // Offset: 0x14
};

// Original name: ControlHintCondition_ActorStanceState
// Size: 0x10
// VTable: 0x149a65cf0
struct ControlHintCondition_ActorStanceState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType stanceState; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: LifetimeDebugParams
// Size: 0x18
// VTable: 0x149ac4268
struct LifetimeDebugParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: VehicleInteriorObjectContainer
// Size: 0x18
// VTable: 0x1499ab238
struct VehicleInteriorObjectContainer {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EAGameCompletionAwardBaseParams
// Size: 0x10
// VTable: 0x149a39770
struct EAGameCompletionAwardBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: FloatUserVariableTask
// Size: 0x20
// VTable: 0x149994088
struct FloatUserVariableTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: RandomFloat
// Size: 0x10
// VTable: 0x1499b3928
struct RandomFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimum; // Offset: 0x8
    float maximum; // Offset: 0xc
};

// Original name: ActorLocomotionSharpTurnParams
// Size: 0x18
// VTable: 0x149ab1918
struct ActorLocomotionSharpTurnParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    bool enableForWalking; // Offset: 0x9
    bool enableForRunning; // Offset: 0xa
    bool enableForSprinting; // Offset: 0xb
    bool enableForWeapon; // Offset: 0xc
    bool enableForWeaponWalking; // Offset: 0xd
    bool enableForWeaponRunning; // Offset: 0xe
    bool enableForWeaponSprinting; // Offset: 0xf
    bool enableForNW; // Offset: 0x10
    bool enableForNoWeaponWalking; // Offset: 0x11
    bool enableForNoWeaponRunning; // Offset: 0x12
    bool enableForNoWeaponSprinting; // Offset: 0x13
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SSCSignatureDummyParams
// Size: 0x28
// VTable: 0x1499d1dd0
struct SSCSignatureDummyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enable; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    ARDataType type_; /* type */ // Offset: 0x1c
    float value; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: ConversationNode_Base
// Size: 0x8
// VTable: 0x149a8cf48
struct ConversationNode_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EventDispatcher
// Size: 0x8
// VTable: 0x1499b0dc8
struct EventDispatcher {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: InnerThought_CycleAnimBase
// Size: 0x20
// VTable: 0x149a98720
struct InnerThought_CycleAnimBase {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    float length; // Offset: 0x10
    float amount; // Offset: 0x14
    float stagger; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: LoadoutInfo
// Size: 0x28
// VTable: 0x149aaaf00
struct LoadoutInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t loadoutId; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* loadoutName; // Offset: 0x10
    CryStringT* removeTags; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: ObjectivePropertyBase
// Size: 0x8
// VTable: 0x14996d858
struct ObjectivePropertyBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SActorAnimationPoseDeathBehaviour
// Size: 0x8
// VTable: 0x149ab0b00
struct SActorAnimationPoseDeathBehaviour {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ScoreMessage
// Size: 0x18
// VTable: 0x149a28c88
struct ScoreMessage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* message; // Offset: 0x8
    ARDataType type_; /* type */ // Offset: 0x10
    bool allowInPostGame; // Offset: 0x11
    bool shouldIncrement; // Offset: 0x12
    uint8_t _pad_1[0x5]; // Offset: 0x13
};

// Original name: AutopilotParams
// Size: 0x18
// VTable: 0x149a1c280
struct AutopilotParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEntityComponentRoomGroupParams
// Size: 0x18
// VTable: 0x14997d3e8
struct SEntityComponentRoomGroupParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: PlayerAnimatedInteractionHandParams
// Size: 0x10
// VTable: 0x1499a0180
struct PlayerAnimatedInteractionHandParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType handMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCSeatAccessLinkedGatewaySequenceParams
// Size: 0x18
// VTable: 0x149a5d460
struct SCSeatAccessLinkedGatewaySequenceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType dependencyType; // Offset: 0x8
    float enterSequenceDelay; // Offset: 0xc
    float exitSequenceDelay; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SReputationMissionRequirementExpression_And
// Size: 0x8
// VTable: 0x149a96c30
struct SReputationMissionRequirementExpression_And {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SMatchNetworkTypeParams
// Size: 0x20
// VTable: 0x1499f9d80
struct SMatchNetworkTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    ARDataType matchNetworkType; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: SDialogueComponentParams
// Size: 0x18
// VTable: 0x1499a9e30
struct SDialogueComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LongTermPersistenceWhiteListSubTypeEntry
// Size: 0x10
// VTable: 0x1499b9b18
struct LongTermPersistenceWhiteListSubTypeEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType ItemSubType; // Offset: 0x8
    bool NotRemove; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: SActorForceReactionEffectDefaults
// Size: 0x18
// VTable: 0x149a4bb90
struct SActorForceReactionEffectDefaults {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float yieldMagnitudeMinScale; // Offset: 0x8
    float returnYieldDelay; // Offset: 0xc
    float returnYieldMagnitude; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: DialogueBundleWeighted
// Size: 0x20
// VTable: 0x149a8cdc8
struct DialogueBundleWeighted {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool usePooling; // Offset: 0x8
    uint8_t _pad_1[0x17]; // Offset: 0x9
};

// Original name: LongTermPersistenceSubTypeListOption
// Size: 0x8
// VTable: 0x1499b9b20
struct LongTermPersistenceSubTypeListOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlayerChoice_InteractionModifier
// Size: 0x10
// VTable: 0x149aa5858
struct PlayerChoice_InteractionModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float highlightFactor; // Offset: 0x8
    float rangeFactor; // Offset: 0xc
};

// Original name: DefaultActionsEntityEntryCondition_CanActorBeLooted
// Size: 0x8
// VTable: 0x149a8be10
struct DefaultActionsEntityEntryCondition_CanActorBeLooted {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SIHostilityModule
// Size: 0x18
// VTable: 0x1499ba1a8
struct SIHostilityModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_ComponentBadgeProperties
// Size: 0x20
// VTable: 0x14998c998
struct BuildingBlocks_ComponentBadgeProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* badgeLabel; // Offset: 0x8
    ARDataType style; // Offset: 0x10
    ARDataType caseModifier; // Offset: 0x14
    ARDataType fillStyle; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: ItemResourceDeltaNetworkReflection
// Size: 0x10
// VTable: 0x1499a7e78
struct ItemResourceDeltaNetworkReflection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType resource; // Offset: 0x8
    bool binaryEvaluation; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: DeliveryLockerItemComponentParams
// Size: 0x18
// VTable: 0x14996c400
struct DeliveryLockerItemComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_TriggerURL
// Size: 0x18
// VTable: 0x14998d540
struct BuildingBlocks_TriggerURL {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: TriggeredWarning
// Size: 0x18
// VTable: 0x1499fb120
struct TriggeredWarning {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    ARDataType messageState; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: ControlHintCondition_ActorInteractionState
// Size: 0x10
// VTable: 0x149a66230
struct ControlHintCondition_ActorInteractionState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType interactionState; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PlayerAnimatedInteractionBase
// Size: 0x8
// VTable: 0x1499a02e8
struct PlayerAnimatedInteractionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: Marker_AbilityNearestFace
// Size: 0x18
// VTable: 0x149a4a550
struct Marker_AbilityNearestFace {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType easeType; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float flipAngle; // Offset: 0xc
    float flipTime; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SSCElectronicAccessPlayerComponentParams
// Size: 0x28
// VTable: 0x149a34188
struct SSCElectronicAccessPlayerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enableRespawnEffect; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float startSaturation; // Offset: 0x1c
    float endSaturation; // Offset: 0x20
    float saturationSpeed; // Offset: 0x24
};

// Original name: TriggeredHealthValue
// Size: 0x10
// VTable: 0x1499faf90
struct TriggeredHealthValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float healthValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SEntityEffectSystem_UIOwnerEffect
// Size: 0xe8
// VTable: 0x14999aee8
struct SEntityEffectSystem_UIOwnerEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enabled; // Offset: 0x18
    uint8_t _pad_2[0xcf]; // Offset: 0x19
};

// Original name: DoorNavigationTriggerAdapter
// Size: 0x8
// VTable: 0x1499ec580
struct DoorNavigationTriggerAdapter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SElevatorBBoxCollisionParams
// Size: 0x18
// VTable: 0x1499f2fa0
struct SElevatorBBoxCollisionParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    float Scale; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: BuildingBlocks_TriggerSubsumptionCallback
// Size: 0x18
// VTable: 0x14998d6a0
struct BuildingBlocks_TriggerSubsumptionCallback {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* interactionName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: StarMapDisplayProviderParams
// Size: 0x18
// VTable: 0x149a384a0
struct StarMapDisplayProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SAsteroidFieldComponentParams
// Size: 0x48
// VTable: 0x14999f4e0
struct SAsteroidFieldComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t rngSeed; // Offset: 0x18
    uint8_t viewDistRatio; // Offset: 0x1c
    uint8_t lodRatio; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    CryStringT* composition; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    float noiseAmplitude; // Offset: 0x30
    float noiseGranularity; // Offset: 0x34
    float noiseRoughness; // Offset: 0x38
    uint8_t _pad_3[0xc]; // Offset: 0x3c
};

// Original name: OrbitEntityCinematicEvent
// Size: 0x10
// VTable: 0x1499b28e8
struct OrbitEntityCinematicEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float triggerTime; // Offset: 0x8
    int32_t loadViewIndex; // Offset: 0xc
};

// Original name: EASpawnCameraControllerParamsDef
// Size: 0x18
// VTable: 0x149a284d8
struct EASpawnCameraControllerParamsDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MaterialEffectEntry
// Size: 0x28
// VTable: 0x149a9d2d8
struct MaterialEffectEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* libraryName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* effectName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: BuildingBlocks_AutoTypeParams
// Size: 0x48
// VTable: 0x149992508
struct BuildingBlocks_AutoTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* startVariableName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* finishVariableName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* textProgressVariableName; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    float startDelayTime; // Offset: 0x38
    float charactersPerSecond; // Offset: 0x3c
    bool timescaleIndependent; // Offset: 0x40
    uint8_t _pad_4[0x7]; // Offset: 0x41
};

// Original name: SSequencerItemActionTask
// Size: 0x28
// VTable: 0x1499a0b20
struct SSequencerItemActionTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    ARDataType itemActionType; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: InputAction
// Size: 0x30
// VTable: 0x149a8b650
struct InputAction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* actionName; // Offset: 0x8
    uint8_t _pad_1[0x20]; // Offset: 0x10
};

// Original name: SEASpawnRespawnSchedulerParams
// Size: 0x8
// VTable: 0x149a3bdc0
struct SEASpawnRespawnSchedulerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSalvageTractorParams
// Size: 0x10
// VTable: 0x149a3de90
struct SSalvageTractorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool towingController; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: QuantumGridComponentParams
// Size: 0x18
// VTable: 0x1499a1620
struct QuantumGridComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSpawner_SpawnedEntityParams
// Size: 0x18
// VTable: 0x149a40c18
struct SSpawner_SpawnedEntityParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SStandardResourceUnit
// Size: 0x10
// VTable: 0x1499a14c0
struct SStandardResourceUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float standardResourceUnits; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_GridPackContainer
// Size: 0x10
// VTable: 0x149983638
struct BuildingBlocks_GridPackContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType direction; // Offset: 0x8
    float gutter; // Offset: 0xc
};

// Original name: ItemResourceDynamicAmountWeaponAmmo
// Size: 0x8
// VTable: 0x1499a8a80
struct ItemResourceDynamicAmountWeaponAmmo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CommonTargetingSameTargetScore
// Size: 0x20
// VTable: 0x1499b6f10
struct CommonTargetingSameTargetScore {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float targetedByOneNPC; // Offset: 0x8
    float targetedByTwoNPC; // Offset: 0xc
    float targetedByThreeNPC; // Offset: 0x10
    float targetedByFourNPC; // Offset: 0x14
    float targetedByFiveNPC; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: ActorMeleeDef
// Size: 0x20
// VTable: 0x149ab0830
struct ActorMeleeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* headJoint; // Offset: 0x8
    uint8_t _pad_1[0x10]; // Offset: 0x10
};

// Original name: BoidsAlignmentRule
// Size: 0x10
// VTable: 0x1499ebea0
struct BoidsAlignmentRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: UIModeVisibilitySettings
// Size: 0x18
// VTable: 0x149a90da0
struct UIModeVisibilitySettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool itemPortTrackers; // Offset: 0x8
    bool grenadeTrackers; // Offset: 0x9
    bool missionObjectiveTrackers; // Offset: 0xa
    bool unattendedVehicleTrackers; // Offset: 0xb
    bool radarObjectTrackers; // Offset: 0xc
    uint8_t _pad_1[0xb]; // Offset: 0xd
};

// Original name: TileParams
// Size: 0x18
// VTable: 0x1499f17b0
struct TileParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ActorStateData_AnimationValidationParams
// Size: 0x10
// VTable: 0x149aad710
struct ActorStateData_AnimationValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stateTimeout; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SMisfireBandParams
// Size: 0x18
// VTable: 0x149a07d68
struct SMisfireBandParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    float minorProbability; // Offset: 0xc
    float majorProbability; // Offset: 0x10
    float criticalProbability; // Offset: 0x14
};

// Original name: CameraBaseSettingsConfig
// Size: 0x20
// VTable: 0x1499b1690
struct CameraBaseSettingsConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* attachmentName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool defaultCamera; // Offset: 0x18
    bool enterExitCamera; // Offset: 0x19
    bool unregisterAfterEnter; // Offset: 0x1a
    bool backgroundUpdate; // Offset: 0x1b
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: STurbulenceParams
// Size: 0x38
// VTable: 0x149a1aff0
struct STurbulenceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float groundTurbulenceAmplitude; // Offset: 0x8
    float groundTurbulenceAltitudeMin; // Offset: 0xc
    float groundTurbulenceAltitudeMax; // Offset: 0x10
    float groundTurbulenceSpeedMin; // Offset: 0x14
    float groundTurbulenceSpeedMax; // Offset: 0x18
    bool groundTurbulenceEnabled; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
    float windTurbulenceAmplitude; // Offset: 0x20
    float windTurbulenceSpeedMin; // Offset: 0x24
    float windTurbulenceSpeedMax; // Offset: 0x28
    float windTurbulenceCloudDensityModifier; // Offset: 0x2c
    bool windTurbulenceEnabled; // Offset: 0x30
    uint8_t _pad_2[0x7]; // Offset: 0x31
};

// Original name: SecurityClearance_OutfitRequirement_RequiredPieceDef
// Size: 0x10
// VTable: 0x1499744e0
struct SecurityClearance_OutfitRequirement_RequiredPieceDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType requiredPiece; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PostureData
// Size: 0x38
// VTable: 0x14997d9f0
struct PostureData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float Priority; // Offset: 0x18
    ARDataType BodyDirection; // Offset: 0x1c
    bool IsLean; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
    CryStringT* AnimationTag; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: SEAObjectiveMarkerStateSettings
// Size: 0x10
// VTable: 0x149a26eb8
struct SEAObjectiveMarkerStateSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType state; // Offset: 0x8
    float markerFillProgress; // Offset: 0xc
};

// Original name: SCharacterSkinValidationParams
// Size: 0x10
// VTable: 0x149a0d3f8
struct SCharacterSkinValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minHue; // Offset: 0x8
    float maxHue; // Offset: 0xc
};

// Original name: LinearDamage
// Size: 0x10
// VTable: 0x1499e1958
struct LinearDamage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float slope; // Offset: 0x8
    float yIntercept; // Offset: 0xc
};

// Original name: UIStateColor_Threshold
// Size: 0x10
// VTable: 0x149aa8948
struct UIStateColor_Threshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minThresholdValue; // Offset: 0x8
    ARDataType stateColor; // Offset: 0xc
    uint8_t _pad_1[0x2]; // Offset: 0xe
};

// Original name: DeliveryItemPortManagerComponentParams
// Size: 0x18
// VTable: 0x14996c520
struct DeliveryItemPortManagerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SReputationContextBBEntityListParams
// Size: 0x18
// VTable: 0x149a96408
struct SReputationContextBBEntityListParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* entityTabName; // Offset: 0x8
    ARDataType entityType; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: MarkerTrackingLabelParameters
// Size: 0x30
// VTable: 0x149a48ac0
struct MarkerTrackingLabelParameters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float headerTextScale; // Offset: 0x8
    float subTextScale; // Offset: 0xc
    float minimumHeaderTextSize; // Offset: 0x10
    float maximumHeaderTextSize; // Offset: 0x14
    float minimumSize; // Offset: 0x18
    float maximumSize; // Offset: 0x1c
    float minimumFadeOffset; // Offset: 0x20
    float maximumFadeOffset; // Offset: 0x24
    float positionOffsetMultiplier; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: LadderMovementParams
// Size: 0x38
// VTable: 0x149a9eca0
struct LadderMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float movementAcceleration; // Offset: 0x8
    float movementSpeedUpwards; // Offset: 0xc
    float movementSpeedDownwards; // Offset: 0x10
    float movementSprintUpSpeedScale; // Offset: 0x14
    float movementSprintDownSpeedScale; // Offset: 0x18
    float movementQuickSettleSpeedScale; // Offset: 0x1c
    float movementSlideSpeedMaxVel; // Offset: 0x20
    float movementSlideFriction; // Offset: 0x24
    float movementSlideMinGravity; // Offset: 0x28
    float movementSettleSpeed; // Offset: 0x2c
    float movementInertiaDecayRate; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
};

// Original name: SAuthoritativeStatsRecording
// Size: 0x18
// VTable: 0x149a09de8
struct SAuthoritativeStatsRecording {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCItemTutorialParams
// Size: 0x18
// VTable: 0x149aa1e68
struct SCItemTutorialParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool tutorialExclusive; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    double tutorialPricePercent; // Offset: 0x10
};

// Original name: GlobalResourceObjectContainer
// Size: 0x18
// VTable: 0x1499ae600
struct GlobalResourceObjectContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SActorProceduralAimRecoilCurveNoiseModifiersDef
// Size: 0x18
// VTable: 0x149a717e0
struct SActorProceduralAimRecoilCurveNoiseModifiersDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float yawNoiseMaxValueModifier; // Offset: 0x8
    float pitchNoiseMaxValueModifier; // Offset: 0xc
    float rollNoiseMaxValueModifier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SEntityHoverPhysicsPartialParams
// Size: 0x58
// VTable: 0x1499e8590
struct SEntityHoverPhysicsPartialParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float desiredHoverHeight; // Offset: 0x8
    float desiredHoverMinHeight; // Offset: 0xc
    float alignToSurface; // Offset: 0x10
    float alignToSurfaceMaxAngle; // Offset: 0x14
    float alignToSurfaceEasingStartAngle; // Offset: 0x18
    float alignToSurfaceEasingEndAngle; // Offset: 0x1c
    float maxGroundSearchDepth; // Offset: 0x20
    float maxClimbHeight; // Offset: 0x24
    float desiredMaxFallSpeed; // Offset: 0x28
    float desiredFallSpeedEasingStartDepth; // Offset: 0x2c
    float desiredFallSpeedEasingPower; // Offset: 0x30
    float desiredMaxRaiseSpeed; // Offset: 0x34
    float desiredRaiseSpeedEasingStartHeight; // Offset: 0x38
    float desiredRaiseSpeedEasingPower; // Offset: 0x3c
    float desiredMaxRotationalAdjustmentSpeed; // Offset: 0x40
    float desiredAngularSpeedEasingStartAngle; // Offset: 0x44
    float desiredAngularSpeedEasingPower; // Offset: 0x48
    float lateralMoveStopMaxSpeed; // Offset: 0x4c
    float yawStopMaxSpeed; // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
};

// Original name: ItemResourceNetworkTypeUIData
// Size: 0x20
// VTable: 0x1499a0f98
struct ItemResourceNetworkTypeUIData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* typeIcon; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* toolTip; // Offset: 0x18
};

// Original name: PlayerNotificationBannerManagerGlobalParams
// Size: 0x10
// VTable: 0x149aa26c0
struct PlayerNotificationBannerManagerGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float notificationAutoExpirationUpdaterIntervalSeconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: EntitlementItemType
// Size: 0x10
// VTable: 0x1499bb130
struct EntitlementItemType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Type; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ArmouryItemStat
// Size: 0x28
// VTable: 0x1499dc630
struct ArmouryItemStat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* statName; // Offset: 0x8
    CryStringT* debugStatName; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    float value; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: SEntityComponentOrbitalNavPointParams
// Size: 0x18
// VTable: 0x149a38490
struct SEntityComponentOrbitalNavPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCharacterCustomizerClampedValueParams
// Size: 0x18
// VTable: 0x149a0c250
struct SCharacterCustomizerClampedValueParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool clampValue; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float minValue; // Offset: 0xc
    float maxValue; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeModularKitVerticalAlignment
// Size: 0x10
// VTable: 0x14998c418
struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitVerticalAlignment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    ARDataType paramField; // Offset: 0xc
};

// Original name: SResetKeypadInputGameplayTrigger
// Size: 0x8
// VTable: 0x149968588
struct SResetKeypadInputGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: RadarJammerSharedParams
// Size: 0x30
// VTable: 0x1499c4830
struct RadarJammerSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float generalHUDDistortionStrength; // Offset: 0x8
    float minimapDistortionStrength; // Offset: 0xc
    float jammedActiveDetectionRange; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    CLocIdentifier* jammedPingNotificationText; // Offset: 0x18
    CryStringT* jammedPingNotificationAudioTag; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
};

// Original name: ItemAwardWeightingsBase
// Size: 0x8
// VTable: 0x149972648
struct ItemAwardWeightingsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AreaDisruptionGameplayTrigger
// Size: 0x10
// VTable: 0x1499c10e0
struct AreaDisruptionGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t severity; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSalvageRepairItemTypeLocalizationPair
// Size: 0x18
// VTable: 0x149a7ae68
struct SSalvageRepairItemTypeLocalizationPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* typeLoc; // Offset: 0x10
};

// Original name: EnvironmentLightMiscParams
// Size: 0x28
// VTable: 0x1499a3a78
struct EnvironmentLightMiscParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useClipBox; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float specularMultiplier; // Offset: 0xc
    float attenuationFalloffMax; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    CryStringT* cubemapTexture; // Offset: 0x18
    uint8_t _pad_3[0x8]; // Offset: 0x20
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeVerticalAlignment
// Size: 0x10
// VTable: 0x14998beb0
struct BuildingBlocks_FieldModifierEnumeratedTypeVerticalAlignment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SShieldResistance
// Size: 0x10
// VTable: 0x1499f3d18
struct SShieldResistance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Max; // Offset: 0x8
    float Min; // Offset: 0xc
};

// Original name: SMissileObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e7f90
struct SMissileObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GameNotificationDockItemParams
// Size: 0x20
// VTable: 0x149aa9290
struct GameNotificationDockItemParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* notificationPositivePrompt; // Offset: 0x8
    CLocIdentifier* notificationNegativePrompt; // Offset: 0x10
    CLocIdentifier* notificationDismissPrompt; // Offset: 0x18
};

// Original name: SIStatsRecordingModule
// Size: 0x18
// VTable: 0x1499ba500
struct SIStatsRecordingModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LandingAreaParamOverrideParams
// Size: 0x30
// VTable: 0x149a74e78
struct LandingAreaParamOverrideParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* landingAreaOverride; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CLocIdentifier* HUDDisplayName; // Offset: 0x28
};

// Original name: RadiationStatePropertyParams
// Size: 0x10
// VTable: 0x14997ab88
struct RadiationStatePropertyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType modifierType; // Offset: 0x8
    float signatureValue; // Offset: 0xc
};

// Original name: AnnunciatorProviderParams
// Size: 0x20
// VTable: 0x149a836d0
struct AnnunciatorProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float shotAlertTime; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: AsteroidState
// Size: 0x10
// VTable: 0x149979898
struct AsteroidState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType debrisDensityMod; // Offset: 0x8
    float debrisDensity; // Offset: 0xc
};

// Original name: SActorForceReactionLimitDef
// Size: 0x20
// VTable: 0x149a4b2b0
struct SActorForceReactionLimitDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float weaponTwitchMaxOffset; // Offset: 0x8
    float aimPunchMaxAngle; // Offset: 0xc
    float headRecoilMaxAngleHor; // Offset: 0x10
    float headRecoilMaxAngleVert; // Offset: 0x14
    float headRecoilMaxAngleRoll; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: PersonalThoughtInventoryOtherFilter
// Size: 0x28
// VTable: 0x149a9a478
struct PersonalThoughtInventoryOtherFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayIconPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* name; // Offset: 0x18
    bool disableForFPSKiosk; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
};

// Original name: SActorForceReactionBlockConfig
// Size: 0x38
// VTable: 0x149a4c9e0
struct SActorForceReactionBlockConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float directTwitchDisableDuration; // Offset: 0x8
    float directStaggerDisableDuration; // Offset: 0xc
    float directKnockdownDisableDuration; // Offset: 0x10
    float indirectFlinchDisableDuration; // Offset: 0x14
    float indirectStaggerDisableDuration; // Offset: 0x18
    float indirectKnockdownDisableDuration; // Offset: 0x1c
    float sustainedDeltaFlinchDisableDuration; // Offset: 0x20
    float sustainedDeltaStaggerDisableDuration; // Offset: 0x24
    float sustainedDeltaKnockdownDisableDuration; // Offset: 0x28
    float sustainedKnockdownDisableDuration; // Offset: 0x2c
    bool useEffortSetWhileDisablingReactions; // Offset: 0x30
    uint8_t _pad_1[0x7]; // Offset: 0x31
};

// Original name: SRopeProxyParams
// Size: 0x18
// VTable: 0x149ac4908
struct SRopeProxyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MissionType
// Size: 0x38
// VTable: 0x149970a98
struct MissionType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* IconName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* LocalisedTypeName; // Offset: 0x18
    float DisplayTime; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    CryStringT* svgIconPath; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: ShipInsuranceParams
// Size: 0x28
// VTable: 0x1499ba7f8
struct ShipInsuranceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* shipEntityClassName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float baseWaitTimeMinutes; // Offset: 0x18
    float mandatoryWaitTimeMinutes; // Offset: 0x1c
    uint32_t baseExpeditingFee; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: ActivityDataRecord
// Size: 0x8
// VTable: 0x14997e1c0
struct ActivityDataRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SBreakablePhysicsParams
// Size: 0x28
// VTable: 0x1499e5990
struct SBreakablePhysicsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t maxSimultaneousCracks; // Offset: 0x8
    float maxPushForce; // Offset: 0xc
    float maxPullForce; // Offset: 0x10
    float maxShiftForce; // Offset: 0x14
    float maxTwistTorque; // Offset: 0x18
    float maxBendTorque; // Offset: 0x1c
    float crackWeaken; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: TriggerSubConditionInteractionDef
// Size: 0x50
// VTable: 0x149a8a010
struct TriggerSubConditionInteractionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* interactableSuperGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* siblingFailRule; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    uint32_t interaction; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
    CryStringT* successOrFailRule; // Offset: 0x30
    uint8_t _pad_4[0x8]; // Offset: 0x38
    CryStringT* interactorSuperGUID; // Offset: 0x40
    uint8_t _pad_5[0x8]; // Offset: 0x48
};

// Original name: PlanetSpawnedEntityParams
// Size: 0x18
// VTable: 0x14999d5e0
struct PlanetSpawnedEntityParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BlinkingLightParams
// Size: 0x18
// VTable: 0x149a9d380
struct BlinkingLightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float minFrequency; // Offset: 0xc
    float maxFrequency; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SItemPortDefAttachmentImplementationBase
// Size: 0x8
// VTable: 0x1499afac8
struct SItemPortDefAttachmentImplementationBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SReputationStateModifierIncrement
// Size: 0x10
// VTable: 0x149a96890
struct SReputationStateModifierIncrement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: CraftingMaterialStatTypeRecord
// Size: 0x20
// VTable: 0x1499b9078
struct CraftingMaterialStatTypeRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* statName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
};

// Original name: RastarUIParams
// Size: 0x18
// VTable: 0x14999d618
struct RastarUIParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSuperGUIDComponentParams
// Size: 0x18
// VTable: 0x1499a91a8
struct SSuperGUIDComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ContractLifeTime
// Size: 0x10
// VTable: 0x149973788
struct ContractLifeTime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float instanceLifeTime; // Offset: 0x8
    float instanceLifeTimeVariation; // Offset: 0xc
};

// Original name: SCItemRadarSignatureDetection
// Size: 0x20
// VTable: 0x1499c6288
struct SCItemRadarSignatureDetection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float sensitivity; // Offset: 0x8
    float deltaSignatureSensitivity; // Offset: 0xc
    float piercing; // Offset: 0x10
    float deltaSignaturePierce; // Offset: 0x14
    bool permitPassiveDetection; // Offset: 0x18
    bool permitActiveDetection; // Offset: 0x19
    uint8_t _pad_1[0x6]; // Offset: 0x1a
};

// Original name: SCommonDamageHandling
// Size: 0x20
// VTable: 0x1499e3e80
struct SCommonDamageHandling {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool damageDisabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: MissionFlowCondition_AllTokensState
// Size: 0x10
// VTable: 0x1499700c0
struct MissionFlowCondition_AllTokensState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType tokenState; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_ComponentParameterInputString
// Size: 0x20
// VTable: 0x14998ae20
struct BuildingBlocks_ComponentParameterInputString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* value; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: LinkedStatRuleHasCrossedAboveThreshold
// Size: 0x10
// VTable: 0x1499fda80
struct LinkedStatRuleHasCrossedAboveThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PlayerChoice_Option
// Size: 0x18
// VTable: 0x149a90480
struct PlayerChoice_Option {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    int32_t id; // Offset: 0x10
    bool isPrimary; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
};

// Original name: SIPlayerStats
// Size: 0x18
// VTable: 0x1499ba1d8
struct SIPlayerStats {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSequencerPlayerUsableTaskParams
// Size: 0x38
// VTable: 0x1499cd660
struct SSequencerPlayerUsableTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* name; // Offset: 0x20
    uint8_t _pad_1[0x10]; // Offset: 0x28
};

// Original name: SEAActionItemMessageDef
// Size: 0x18
// VTable: 0x149a1f6e8
struct SEAActionItemMessageDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t messagePriority; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* message; // Offset: 0x10
};

// Original name: EAExperimentalModeResetTimeParams
// Size: 0x20
// VTable: 0x1499fa120
struct EAExperimentalModeResetTimeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType weekday; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t hour; // Offset: 0xc
    int32_t minute; // Offset: 0x10
    bool showSecondsInTimer; // Offset: 0x14
    uint8_t _pad_2[0x3]; // Offset: 0x15
    CLocIdentifier* locRestartRequired; // Offset: 0x18
};

// Original name: PrisonDepositKioskParams
// Size: 0x18
// VTable: 0x149a41fb0
struct PrisonDepositKioskParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: CinematicCameraControllerSetup
// Size: 0x10
// VTable: 0x1499b0708
struct CinematicCameraControllerSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float actionHoldTime; // Offset: 0x8
    float expiryLingerTime; // Offset: 0xc
};

// Original name: MapDisplayRenderLayerParams
// Size: 0x20
// VTable: 0x149a48928
struct MapDisplayRenderLayerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool visible; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* materialPath; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: DamageBase
// Size: 0x8
// VTable: 0x1499adbf8
struct DamageBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ScanDisplayConditionCompareParams
// Size: 0x20
// VTable: 0x1499c6880
struct ScanDisplayConditionCompareParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scanCategory; // Offset: 0x8
    ARDataType scanInformation; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float thresholdValue; // Offset: 0xc
    ARDataType comparison; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    CLocIdentifier* displayValue; // Offset: 0x18
};

// Original name: SBaseHealthComponentParams
// Size: 0x18
// VTable: 0x149a17280
struct SBaseHealthComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_RendererPolicyBase
// Size: 0x8
// VTable: 0x149984e30
struct BuildingBlocks_RendererPolicyBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ChatEmoteAnimData
// Size: 0x38
// VTable: 0x149a8a768
struct ChatEmoteAnimData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fragmentID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* tagID; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CLocIdentifier* textToDisplay; // Offset: 0x28
    ARDataType type_; /* type */ // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
};

// Original name: BoidsVehicleRepelRule
// Size: 0x18
// VTable: 0x1499ec3b0
struct BoidsVehicleRepelRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float effectDistance; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: EntityReferenceDef
// Size: 0x18
// VTable: 0x1499adbe0
struct EntityReferenceDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* superGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: STargetByLineIntersection
// Size: 0x10
// VTable: 0x149a55960
struct STargetByLineIntersection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float angle; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ActorStateFilter
// Size: 0x48
// VTable: 0x149a8ab80
struct ActorStateFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
};

// Original name: SSCActorExternalForceResponseComponentParams
// Size: 0x18
// VTable: 0x149a4e1b0
struct SSCActorExternalForceResponseComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AllPortRefillData
// Size: 0x10
// VTable: 0x149a405b0
struct AllPortRefillData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Delay; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: StarMapAsteroidRing
// Size: 0x28
// VTable: 0x149a8f280
struct StarMapAsteroidRing {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float densityScale; // Offset: 0x8
    float sizeScale; // Offset: 0xc
    double innerRadius; // Offset: 0x10
    double outerRadius; // Offset: 0x18
    float depth; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: UIBindingsConsumerEntityComponentParams
// Size: 0x20
// VTable: 0x149992f20
struct UIBindingsConsumerEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool linkToPort; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: ForceFeedbackMotor
// Size: 0x30
// VTable: 0x1499b4720
struct ForceFeedbackMotor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float frequency; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* pattern; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* envelope; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
};

// Original name: AttachableStateModifierContext_Sibling
// Size: 0x10
// VTable: 0x1499c1620
struct AttachableStateModifierContext_Sibling {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SShopDebugHelperComponentParams
// Size: 0x18
// VTable: 0x149a42038
struct SShopDebugHelperComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LightStyleParams
// Size: 0x30
// VTable: 0x1499a4520
struct LightStyleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float animationSpeed; // Offset: 0x8
    int32_t animationPhase; // Offset: 0xc
    bool randomAnimationPhase; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    CryStringT* lightanimation; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float angularSpeed; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
};

// Original name: SAttachableEntityParams
// Size: 0x40
// VTable: 0x149a68d90
struct SAttachableEntityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* sourcePort; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* targetPort; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* entityClassName; // Offset: 0x28
    uint8_t _pad_3[0x10]; // Offset: 0x30
};

// Original name: AudioFootstepSurfaceMapping
// Size: 0x70
// VTable: 0x149a687c0
struct AudioFootstepSurfaceMapping {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* surfaceType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* heelLandAudioTrigger; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* toeLandAudioTrigger; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* footLiftAudioTrigger; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
    CryStringT* turnPlayAudioTrigger; // Offset: 0x48
    uint8_t _pad_5[0x8]; // Offset: 0x50
    CryStringT* turnStopAudioTrigger; // Offset: 0x58
    uint8_t _pad_6[0x8]; // Offset: 0x60
    int32_t fadeSteps; // Offset: 0x68
    uint8_t _pad_7[0x4]; // Offset: 0x6c
};

// Original name: CameraLensChromaticAberration
// Size: 0x10
// VTable: 0x149a90768
struct CameraLensChromaticAberration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Transverse; // Offset: 0x8
    float Axial; // Offset: 0xc
};

// Original name: GasCloudOverrideSphereVolumeParams
// Size: 0x10
// VTable: 0x1499ccf88
struct GasCloudOverrideSphereVolumeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    float fade; // Offset: 0xc
};

// Original name: BreathingComponentParams
// Size: 0x18
// VTable: 0x149a6d830
struct BreathingComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCentiCargoUnit
// Size: 0x10
// VTable: 0x14999ee00
struct SCentiCargoUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t centiSCU; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SPartyMemberEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a38
struct SPartyMemberEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SReputationStateModifierBase
// Size: 0x8
// VTable: 0x149a96838
struct SReputationStateModifierBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SandboxTrigger
// Size: 0x10
// VTable: 0x149a97810
struct SandboxTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType sandboxTrigger; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SubsumptionEventReceiverComponentParams
// Size: 0x18
// VTable: 0x14997e048
struct SubsumptionEventReceiverComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeMinWidthBehavior
// Size: 0x10
// VTable: 0x14998b370
struct BuildingBlocks_FieldModifierEnumeratedTypeMinWidthBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: GlobalResourceCGF
// Size: 0x18
// VTable: 0x1499ae180
struct GlobalResourceCGF {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SReputationMissionRequirementExpression_LeftParenthesis
// Size: 0x8
// VTable: 0x149a96c48
struct SReputationMissionRequirementExpression_LeftParenthesis {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEntitiesGroupComponentParams
// Size: 0x18
// VTable: 0x1499f0a78
struct SEntitiesGroupComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: RadarContactGamePlayProperties
// Size: 0x10
// VTable: 0x1499c3820
struct RadarContactGamePlayProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool perceivedByAISense; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: LinkedStatRulePassCrossingBelowThreshold
// Size: 0x10
// VTable: 0x1499fdb40
struct LinkedStatRulePassCrossingBelowThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: EnvironmentalMissionComponentParams
// Size: 0x18
// VTable: 0x14996c560
struct EnvironmentalMissionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MissionVariableInteger
// Size: 0x30
// VTable: 0x149971670
struct MissionVariableInteger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    int32_t value; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
};

// Original name: UIBindingsVendorEntityComponentParams
// Size: 0x28
// VTable: 0x1499930f0
struct UIBindingsVendorEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* namespace_; /* namespace */ // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: SHideAmmoAttachmentParams
// Size: 0x28
// VTable: 0x149a68ce0
struct SHideAmmoAttachmentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* attachmentName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t ammoThreshold; // Offset: 0x18
    bool visible; // Offset: 0x1c
    uint8_t _pad_2[0xb]; // Offset: 0x1d
};

// Original name: SIPlayerSetupModule
// Size: 0x18
// VTable: 0x1499ba1d0
struct SIPlayerSetupModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: FrontendStateParams
// Size: 0x18
// VTable: 0x149a0a478
struct FrontendStateParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: GreenZoneFlagAdditionalSettingsDef
// Size: 0x10
// VTable: 0x1499673c8
struct GreenZoneFlagAdditionalSettingsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool applyInVacuum; // Offset: 0x8
    bool applyInVehicles; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: VehicleNavigationTriggerAdapter
// Size: 0x10
// VTable: 0x1499ecb40
struct VehicleNavigationTriggerAdapter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minSpeedToBeIgnored; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SThrowableLauncher
// Size: 0x10
// VTable: 0x149a7bba8
struct SThrowableLauncher {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float soundRadius; // Offset: 0x8
    ARDataType throwMode; // Offset: 0xc
};

// Original name: SSequencerUsableFillConsumableTaskParams
// Size: 0x58
// VTable: 0x149a82bd0
struct SSequencerUsableFillConsumableTaskParams {
    uint8_t _pad_0[0x28]; // Offset: 0x0
    CryStringT* itemPortTag; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    bool useReservedContents; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
    CryStringT* contentType; // Offset: 0x40
    uint8_t _pad_3[0x8]; // Offset: 0x48
    float duration; // Offset: 0x50
    float amountToAdd; // Offset: 0x54
};

// Original name: CameraLensDistortion
// Size: 0x18
// VTable: 0x149a906e8
struct CameraLensDistortion {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Radial; // Offset: 0x8
    float Spherical; // Offset: 0xc
    float Coma; // Offset: 0x10
    float Curvature; // Offset: 0x14
};

// Original name: ThrusterGimbalAxis
// Size: 0x38
// VTable: 0x149a1bdf8
struct ThrusterGimbalAxis {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* jointName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* animation; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float angleMin; // Offset: 0x28
    float angleMax; // Offset: 0x2c
    float speed; // Offset: 0x30
    float accel; // Offset: 0x34
};

// Original name: SActorForceReactionEnvelope
// Size: 0x18
// VTable: 0x149a4b960
struct SActorForceReactionEnvelope {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float attackDuration; // Offset: 0x8
    float sustainDuration; // Offset: 0xc
    float releaseDuration; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: MissionInitParamFloat
// Size: 0x20
// VTable: 0x149975b00
struct MissionInitParamFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float value; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SUsableAttachFlagParams
// Size: 0x10
// VTable: 0x149a91cd8
struct SUsableAttachFlagParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool exteriorOnly; // Offset: 0x8
    bool interiorOnly; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: NavigationShapeComponentParams
// Size: 0x18
// VTable: 0x149ac4a88
struct NavigationShapeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: TriggerSubConditionTimerDef
// Size: 0x20
// VTable: 0x149a89e48
struct TriggerSubConditionTimerDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float duration; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* siblingFailRule; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: AIWeaponComponentParams
// Size: 0x20
// VTable: 0x149a73500
struct AIWeaponComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType magazineRules; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: SSCSignatureParamsBase
// Size: 0x8
// VTable: 0x1499e9b08
struct SSCSignatureParamsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCharacterCustomizerDNAHeadParams
// Size: 0x20
// VTable: 0x149a0e0c8
struct SCharacterCustomizerDNAHeadParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t headId; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* customMaterial; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeMaxWidthBehavior
// Size: 0x10
// VTable: 0x14998b430
struct BuildingBlocks_FieldModifierEnumeratedTypeMaxWidthBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: Weapon
// Size: 0x8
// VTable: 0x149aa0298
struct Weapon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHints_QuickSelectWheelInput
// Size: 0x10
// VTable: 0x149a67648
struct ControlHints_QuickSelectWheelInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType activationMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SBBDynamicPropertyFloat
// Size: 0x10
// VTable: 0x149a960b0
struct SBBDynamicPropertyFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SerializedComponentParams
// Size: 0x18
// VTable: 0x1499a91a0
struct SerializedComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SAudioBreathParameters
// Size: 0x10
// VTable: 0x149a6c960
struct SAudioBreathParameters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float BreathHeldExhaleMax; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SStandardNotifications
// Size: 0x20
// VTable: 0x1499d6b80
struct SStandardNotifications {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool showNotifications; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: StaminaComponentParams
// Size: 0x18
// VTable: 0x149a3cf00
struct StaminaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: S42FieldManualContentPiece
// Size: 0x28
// VTable: 0x149a37500
struct S42FieldManualContentPiece {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* contentPieceHeading; // Offset: 0x8
    CLocIdentifier* contentPieceParagraph; // Offset: 0x10
    CryStringT* contentPieceImagePath; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: HandholdAttachPointChoiceParams
// Size: 0x8
// VTable: 0x149a03418
struct HandholdAttachPointChoiceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SQuantumTrailParams
// Size: 0x28
// VTable: 0x1499e9188
struct SQuantumTrailParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float destructionTime; // Offset: 0x18
    float trailLength; // Offset: 0x1c
    float viewableDistance; // Offset: 0x20
    float maxVisibleLength; // Offset: 0x24
};

// Original name: SSubstitutionProxyParams
// Size: 0x18
// VTable: 0x149ac4980
struct SSubstitutionProxyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_ContextMenuItem
// Size: 0x20
// VTable: 0x149985958
struct BuildingBlocks_ContextMenuItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* locString; // Offset: 0x8
    CryStringT* triggerURL; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
};

// Original name: VoiceChatRxAggregatorParams
// Size: 0x18
// VTable: 0x1499a98a8
struct VoiceChatRxAggregatorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EAScoringAssistThreshold
// Size: 0x10
// VTable: 0x149a3a008
struct EAScoringAssistThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t damagePercentage; // Offset: 0x8
    int32_t score; // Offset: 0xc
};

// Original name: BuildingBlocks_PreviewSceneEnhancedRealityRtt
// Size: 0x20
// VTable: 0x1499948c0
struct BuildingBlocks_PreviewSceneEnhancedRealityRtt {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType renderLayer; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    bool cardsUseStageRadius; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: BoidsSeparationRule
// Size: 0x18
// VTable: 0x1499ebf28
struct BoidsSeparationRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float decayCoefficient; // Offset: 0x10
    float maxAcceleration; // Offset: 0x14
};

// Original name: DialogueBundle
// Size: 0x20
// VTable: 0x149a8cd00
struct DialogueBundle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool usePooling; // Offset: 0x8
    uint8_t _pad_1[0x17]; // Offset: 0x9
};

// Original name: ColorGradientComponentParams
// Size: 0x38
// VTable: 0x1499e2128
struct ColorGradientComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* texturePath; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    float fadeInTime; // Offset: 0x28
    int32_t priority; // Offset: 0x2c
    float radius; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: NavigationCostShapeComponentParams
// Size: 0x18
// VTable: 0x149ac4a90
struct NavigationCostShapeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: TinyMachineGraphInstanceComponentParams
// Size: 0x28
// VTable: 0x149ab25b0
struct TinyMachineGraphInstanceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* GraphFilePath; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: PlanetOceanAudioCheckpoint
// Size: 0x18
// VTable: 0x1499eea10
struct PlanetOceanAudioCheckpoint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t beamCount; // Offset: 0x8
    float range; // Offset: 0xc
    bool useDepthAssignment; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: CraftingGameplayPropertyImplValueRange_Int
// Size: 0x18
// VTable: 0x1499b92a0
struct CraftingGameplayPropertyImplValueRange_Int {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t statThreshold; // Offset: 0x8
    int32_t defaultValue; // Offset: 0xc
    int32_t limitValue; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: UIBindingsInteractionsComponentParams
// Size: 0x20
// VTable: 0x149992f80
struct UIBindingsInteractionsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float interactionDistance; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SRGBA8
// Size: 0x10
// VTable: 0x1499ad8a8
struct SRGBA8 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t r; // Offset: 0x8
    uint8_t g; // Offset: 0x9
    uint8_t b; // Offset: 0xa
    uint8_t a; // Offset: 0xb
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SISubsumptionMissionModule
// Size: 0x18
// VTable: 0x1499ba508
struct SISubsumptionMissionModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSequencerAnimationTaskParamsBase
// Size: 0x20
// VTable: 0x1499a2160
struct SSequencerAnimationTaskParamsBase {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: SCItemClothingRadiationResistanceParams
// Size: 0x10
// VTable: 0x149aa1748
struct SCItemClothingRadiationResistanceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float MaximumRadiationCapacity; // Offset: 0x8
    float RadiationDissipationRate; // Offset: 0xc
};

// Original name: EntityComponentSpawnClosetNPCParams
// Size: 0x18
// VTable: 0x1499e4738
struct EntityComponentSpawnClosetNPCParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: StringUserVariableSetValueTask
// Size: 0x40
// VTable: 0x1499942a8
struct StringUserVariableSetValueTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* name; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* value; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: InteriorMapWorldUIDustParticlesParams
// Size: 0x8
// VTable: 0x149a49370
struct InteriorMapWorldUIDustParticlesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DockingHUDMessagesParams
// Size: 0xa0
// VTable: 0x149a51820
struct DockingHUDMessagesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DockingMessageTimer; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* WaitingPermission; // Offset: 0x10
    CLocIdentifier* PermissionDenied; // Offset: 0x18
    CLocIdentifier* NoMatching; // Offset: 0x20
    CLocIdentifier* OutOfRange; // Offset: 0x28
    CLocIdentifier* DockeeLanded; // Offset: 0x30
    CLocIdentifier* NoAvailable; // Offset: 0x38
    CLocIdentifier* InMotion; // Offset: 0x40
    CLocIdentifier* NoQTUndock; // Offset: 0x48
    CLocIdentifier* Undocking; // Offset: 0x50
    CLocIdentifier* EngagingClamps; // Offset: 0x58
    CLocIdentifier* Complete; // Offset: 0x60
    CLocIdentifier* DockerExcessiveLinearMotion; // Offset: 0x68
    CLocIdentifier* DockerExcessiveLinearOffset; // Offset: 0x70
    CLocIdentifier* DockerExcessiveAngularMotion; // Offset: 0x78
    CLocIdentifier* DockerExcessiveAngularOffset; // Offset: 0x80
    CLocIdentifier* DockerAlignedMessage; // Offset: 0x88
    CLocIdentifier* DockerUndockingStartedMessage; // Offset: 0x90
    CLocIdentifier* DockerPathBlocked; // Offset: 0x98
};

// Original name: DefaultAction_LootingInteractionDef
// Size: 0x10
// VTable: 0x149a8b7f0
struct DefaultAction_LootingInteractionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType lootingInteraction; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: LegacyCraftingRecipeDef_Base
// Size: 0x8
// VTable: 0x149a0f188
struct LegacyCraftingRecipeDef_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MissionDataComponentParams
// Size: 0x18
// VTable: 0x14996c598
struct MissionDataComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: FloatModifierAdditive
// Size: 0x18
// VTable: 0x1499f6130
struct FloatModifierAdditive {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool showInUI; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    float value; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: ActorStatusIncapacitatedUIData
// Size: 0x58
// VTable: 0x1499fe358
struct ActorStatusIncapacitatedUIData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* unconsciousStateWarning; // Offset: 0x8
    CLocIdentifier* downedStateWarning; // Offset: 0x10
    CLocIdentifier* overdosedStateWarning; // Offset: 0x18
    CLocIdentifier* timeToRevivalString; // Offset: 0x20
    CLocIdentifier* timeToDeathString; // Offset: 0x28
    CLocIdentifier* downedRevivalBeaconInsufficientFunds; // Offset: 0x30
    CLocIdentifier* downedRevivalBeaconAvailable; // Offset: 0x38
    CLocIdentifier* downedRevivalBeaconRequested; // Offset: 0x40
    CLocIdentifier* downedRevivalBeaconAccepted; // Offset: 0x48
    CLocIdentifier* downedRevivalBeaconAbandoned; // Offset: 0x50
};

// Original name: SCItemFishParams
// Size: 0x30
// VTable: 0x1499d7f18
struct SCItemFishParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* species; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    int32_t count; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: InteractiveVariable
// Size: 0x18
// VTable: 0x1499f7540
struct InteractiveVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SEASpawnLivesGovernor
// Size: 0x10
// VTable: 0x149a3c160
struct SEASpawnLivesGovernor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t numLives; // Offset: 0x8
    bool teamShareLives; // Offset: 0xc
    bool resetEachRound; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
};

// Original name: DriftingConsciousnessConfig
// Size: 0x20
// VTable: 0x1499feb68
struct DriftingConsciousnessConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minValue; // Offset: 0x8
    float maxValue; // Offset: 0xc
    float fadeInSpeed; // Offset: 0x10
    float fadeOutSpeed; // Offset: 0x14
    float fadeInDelay; // Offset: 0x18
    float fadeOutDelay; // Offset: 0x1c
};

// Original name: RTTNameTagParams
// Size: 0x28
// VTable: 0x149a46930
struct RTTNameTagParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* bindingName; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: SCOperatorATCParams
// Size: 0x20
// VTable: 0x1499ee1b8
struct SCOperatorATCParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool handlePlayers; // Offset: 0x18
    bool handleNPCs; // Offset: 0x19
    uint8_t _pad_1[0x6]; // Offset: 0x1a
};

// Original name: ReputationComparisonRange
// Size: 0x20
// VTable: 0x149a90ed0
struct ReputationComparisonRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float min; // Offset: 0x18
    float max; // Offset: 0x1c
};

// Original name: SSCActorShoppingAssistanceParams
// Size: 0x18
// VTable: 0x149a75ab8
struct SSCActorShoppingAssistanceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEntityComponentRttLiveCameraPreviewParams
// Size: 0x30
// VTable: 0x149a28bb0
struct SEntityComponentRttLiveCameraPreviewParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t width; // Offset: 0x18
    int32_t height; // Offset: 0x1c
    int32_t fov; // Offset: 0x20
    float near_; /* near */ // Offset: 0x24
    float far_; /* far */ // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: SBaseObjectContainerComponentParams
// Size: 0x28
// VTable: 0x1499aee50
struct SBaseObjectContainerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* objectContainer; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: SWeaponActionFireSalvageRepairBeamStrengthValueParams
// Size: 0x10
// VTable: 0x149a79e28
struct SWeaponActionFireSalvageRepairBeamStrengthValueParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stable; // Offset: 0x8
    float inactive; // Offset: 0xc
};

// Original name: SHackingCodeCommandParam
// Size: 0x20
// VTable: 0x149a2c5f0
struct SHackingCodeCommandParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType type_; /* type */ // Offset: 0x18
    bool isOptional; // Offset: 0x1c
    uint8_t _pad_2[0x3]; // Offset: 0x1d
};

// Original name: DefaultActionsEntityState_EntityIsAttachedToDraggableBody
// Size: 0x8
// VTable: 0x149a8c0a8
struct DefaultActionsEntityState_EntityIsAttachedToDraggableBody {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EntityComponentRefineryParams
// Size: 0x18
// VTable: 0x1499e1828
struct EntityComponentRefineryParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SHackingThreatLevelConditionAbilityStarted
// Size: 0x18
// VTable: 0x149a2cbf0
struct SHackingThreatLevelConditionAbilityStarted {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isIntruder; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t pointsAdded; // Offset: 0xc
    ARDataType abilityType; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: StatusPriorityOxygen
// Size: 0x18
// VTable: 0x1499c77b0
struct StatusPriorityOxygen {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType associatedWidget; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float thresholdValue; // Offset: 0x10
    ARDataType comparison; // Offset: 0x14
};

// Original name: SJumpTunnelDistortionParams
// Size: 0x10
// VTable: 0x149a14718
struct SJumpTunnelDistortionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float safeAreaRatio; // Offset: 0x8
    float distortionDamageRate; // Offset: 0xc
};

// Original name: ImpoundingDefinition
// Size: 0x20
// VTable: 0x14996f240
struct ImpoundingDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    ARDataType trigger; // Offset: 0x10
    float impoundingTimeSeconds; // Offset: 0x14
    int32_t impoundingFineUEC; // Offset: 0x18
    bool ignoreIfAgainstPartyMember; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
};

// Original name: DirectRTT_BloomParams
// Size: 0x20
// VTable: 0x14993a2b0
struct DirectRTT_BloomParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Cutoff; // Offset: 0x8
    float BloomAdditiveBlendFactor; // Offset: 0xc
    float SaturationFactor; // Offset: 0x10
    float OpacityInBrightScenes; // Offset: 0x14
    float OpacityInDarkScenes; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SSequencerMoveToAnimateEntityDragTaskParams
// Size: 0x40
// VTable: 0x149a9c908
struct SSequencerMoveToAnimateEntityDragTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* fragmentId; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* fragTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: SHoloFieldComponentParams
// Size: 0x70
// VTable: 0x149a28aa8
struct SHoloFieldComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType shape; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CryStringT* model; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    CryStringT* material; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
    float audioMessageDistance; // Offset: 0x40
    float audioMessageDistanceNoVehicle; // Offset: 0x44
    float audioMessageDelay; // Offset: 0x48
    float vehicleDestroyDistance; // Offset: 0x4c
    float hitRadius; // Offset: 0x50
    float hitDuration; // Offset: 0x54
    float repeatHitTime; // Offset: 0x58
    float repeatHitDistance; // Offset: 0x5c
    float damageMultiplier; // Offset: 0x60
    float maxDamage; // Offset: 0x64
    float particleHitScale; // Offset: 0x68
    uint8_t _pad_4[0x4]; // Offset: 0x6c
};

// Original name: EntityEffectSystem_LightType_AreaLight
// Size: 0x20
// VTable: 0x14999a098
struct EntityEffectSystem_LightType_AreaLight {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float fovAngle; // Offset: 0x10
    float planeHeight; // Offset: 0x14
    float planeWidth; // Offset: 0x18
    float softness; // Offset: 0x1c
};

// Original name: ContractPrerequisite_LocationProperty
// Size: 0x30
// VTable: 0x149972c40
struct ContractPrerequisite_LocationProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* propertyVariableName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* propertyExtendedTextToken; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    ARDataType locationLevelType; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
};

// Original name: FireHazardGlobalUpdate
// Size: 0x10
// VTable: 0x14997b4a0
struct FireHazardGlobalUpdate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t fixedFPS; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: CargoGridSpawnedComponentParams
// Size: 0x18
// VTable: 0x1499e2198
struct CargoGridSpawnedComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SISpectatorModule
// Size: 0x18
// VTable: 0x1499b0710
struct SISpectatorModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: GlobalJumpTunnelLightParams
// Size: 0x20
// VTable: 0x149a136c8
struct GlobalJumpTunnelLightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float distanceAhead; // Offset: 0x8
    float intensity; // Offset: 0xc
    float radius; // Offset: 0x10
    float bulbRadius; // Offset: 0x14
    float animSpeed; // Offset: 0x18
    uint8_t lightStyle; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
};

// Original name: SSalvageModifier
// Size: 0x18
// VTable: 0x1499dea10
struct SSalvageModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float salvageSpeedMultiplier; // Offset: 0x8
    float radiusMultiplier; // Offset: 0xc
    float extractionEfficiency; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: ActorStateData_UsableValidationParams
// Size: 0x10
// VTable: 0x149aad850
struct ActorStateData_UsableValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stateTimeout; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AbilityComponentParams
// Size: 0x18
// VTable: 0x149a396b8
struct AbilityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: CinematicConfig
// Size: 0x18
// VTable: 0x1499b54c0
struct CinematicConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* globalState; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: BuildingBlocks_BindingsVectorBase
// Size: 0x50
// VTable: 0x149980508
struct BuildingBlocks_BindingsVectorBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: MusicLogicReset
// Size: 0x8
// VTable: 0x1499b5d38
struct MusicLogicReset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_PreviewSceneEntityRoot
// Size: 0x18
// VTable: 0x1499948b0
struct BuildingBlocks_PreviewSceneEntityRoot {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType renderLayer; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: VehicleLandingUIParams
// Size: 0x18
// VTable: 0x149a319f8
struct VehicleLandingUIParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeScrollBehavior
// Size: 0x10
// VTable: 0x14998b970
struct BuildingBlocks_FieldModifierEnumeratedTypeScrollBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_VehicleSeatTypeState
// Size: 0x10
// VTable: 0x149a66f70
struct ControlHintCondition_VehicleSeatTypeState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType vehicleSeatTypeState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SubsumptionMissionMusicComponentParams
// Size: 0x18
// VTable: 0x1499e0a48
struct SubsumptionMissionMusicComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ItemKioskLoadoutEditorAdditionalParams
// Size: 0x10
// VTable: 0x149aaafc0
struct ItemKioskLoadoutEditorAdditionalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool selectFirstVehicle; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SStreamingDependencyComponentParams
// Size: 0x18
// VTable: 0x1499f0740
struct SStreamingDependencyComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ObjectDataBankMarkerProvider
// Size: 0x8
// VTable: 0x149a234e8
struct ObjectDataBankMarkerProvider {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SubItemScanStatusMappings
// Size: 0x18
// VTable: 0x1499c80c8
struct SubItemScanStatusMappings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType status; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* displayForStatus; // Offset: 0x10
};

// Original name: CraftingOptionalEffect_Base
// Size: 0x8
// VTable: 0x1499b8408
struct CraftingOptionalEffect_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeGridPackDirection
// Size: 0x10
// VTable: 0x14998b8b0
struct BuildingBlocks_FieldModifierEnumeratedTypeGridPackDirection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSpawnOnDropped
// Size: 0x10
// VTable: 0x149a40230
struct SSpawnOnDropped {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeAfterDrop; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSequencerUsableTask
// Size: 0x28
// VTable: 0x149a82968
struct SSequencerUsableTask {
    uint8_t _pad_0[0x28]; // Offset: 0x0
};

// Original name: LargeObservableExtender
// Size: 0x10
// VTable: 0x149a01bc0
struct LargeObservableExtender {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float degreesOfVisualAngleToBeVisible; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCItemEnergyControllerParams
// Size: 0x28
// VTable: 0x149a08e50
struct SCItemEnergyControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* pipe; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: TriggerSubConditionMobiGlasDef
// Size: 0x38
// VTable: 0x149a8a0c0
struct TriggerSubConditionMobiGlasDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* entitySuperGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryGUID* appGUID; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryGUID* appDataGUID; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: SSetScreenShakeAreaEnabledStateGameplayTrigger
// Size: 0x10
// VTable: 0x1499fb5d0
struct SSetScreenShakeAreaEnabledStateGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool Enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: DataForgeComponentParams
// Size: 0x18
// VTable: 0x1499adbe8
struct DataForgeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCItemDoorPortalModeParams
// Size: 0x8
// VTable: 0x1499f2298
struct SCItemDoorPortalModeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GameModeParams
// Size: 0x18
// VTable: 0x149a21fa8
struct GameModeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AICoverSurfaceComponentParams
// Size: 0x18
// VTable: 0x14997dc40
struct AICoverSurfaceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AISeatFlightControllerComponentParams
// Size: 0x18
// VTable: 0x149a44f68
struct AISeatFlightControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCItemObservableScreenViewParams
// Size: 0x20
// VTable: 0x149a06ed0
struct SCItemObservableScreenViewParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool isDefault; // Offset: 0x18
    bool isPrimaryCommsView; // Offset: 0x19
    uint8_t _pad_2[0x6]; // Offset: 0x1a
};

// Original name: SWeaponGeometryTagsParams
// Size: 0x28
// VTable: 0x149a60040
struct SWeaponGeometryTagsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* tags; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float startDelay; // Offset: 0x18
    float stopDelay; // Offset: 0x1c
    bool firstPerson; // Offset: 0x20
    bool thirdPerson; // Offset: 0x21
    uint8_t _pad_2[0x6]; // Offset: 0x22
};

// Original name: EnvironmentLightRuntimeParams
// Size: 0x18
// VTable: 0x1499a3400
struct EnvironmentLightRuntimeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    bool enableShadows; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    int32_t sunShadowCascadeSize; // Offset: 0xc
    int32_t numDiffuseBounce; // Offset: 0x10
    bool runtimeGBuffer; // Offset: 0x14
    uint8_t _pad_2[0x3]; // Offset: 0x15
};

// Original name: ResourceTypeDensityType
// Size: 0x8
// VTable: 0x149961f38
struct ResourceTypeDensityType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SIRoundsModule
// Size: 0x18
// VTable: 0x1499ba1e8
struct SIRoundsModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: WakeMFXEntityParams
// Size: 0x30
// VTable: 0x149998ca8
struct WakeMFXEntityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* customEffect; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float emissionSizeScaleToShipRatio; // Offset: 0x18
    float distanceOffSurface; // Offset: 0x1c
    float raycastLengthMultiplier; // Offset: 0x20
    float sizeScaleMultiplier; // Offset: 0x24
    float strengthDistanceFalloffThreshold; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: ScanCustomValueLocString
// Size: 0x10
// VTable: 0x1499c7310
struct ScanCustomValueLocString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* value; // Offset: 0x8
};

// Original name: SControlledEntityIFCSParams
// Size: 0x18
// VTable: 0x1499cfb48
struct SControlledEntityIFCSParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableIFCSControl; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float boundContainmentForce; // Offset: 0xc
    float alignmentSpeed; // Offset: 0x10
    float alignmentRange; // Offset: 0x14
};

// Original name: StatusEffectValue
// Size: 0x8
// VTable: 0x1499fc9c0
struct StatusEffectValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SUsableViewParams
// Size: 0x18
// VTable: 0x149a918d8
struct SUsableViewParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float viewLimitYawMin; // Offset: 0x8
    float viewLimitYawMax; // Offset: 0xc
    float viewLimitPitchMin; // Offset: 0x10
    float viewLimitPitchMax; // Offset: 0x14
};

// Original name: SCItemAimableComponentParams
// Size: 0x18
// VTable: 0x1499e91a0
struct SCItemAimableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SplashDamageInfractionSettings
// Size: 0x20
// VTable: 0x14996f9b0
struct SplashDamageInfractionSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float explosionTimeFrame; // Offset: 0x8
    float friendlyHitValue; // Offset: 0xc
    float friendlyKillValue; // Offset: 0x10
    float enemyHitValue; // Offset: 0x14
    float enemyKillValue; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: LinkedStatPassExcessAboveThreshold
// Size: 0x18
// VTable: 0x1499fd7d0
struct LinkedStatPassExcessAboveThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    float multiplier; // Offset: 0xc
    ARDataType reverseSignFlag; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: Marker_ShowRuleMapDisplayMode
// Size: 0x10
// VTable: 0x149a49a30
struct Marker_ShowRuleMapDisplayMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType displayModeMap; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: STurretEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a60
struct STurretEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSequencerCarryableTaskParams
// Size: 0x20
// VTable: 0x149a8e938
struct SSequencerCarryableTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: BoidsCohesionRule
// Size: 0x10
// VTable: 0x1499ebf30
struct BoidsCohesionRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCItemDoorPortalModeAutomaticParams
// Size: 0x8
// VTable: 0x1499f22f8
struct SCItemDoorPortalModeAutomaticParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GramsPerCubicCentimeter
// Size: 0x10
// VTable: 0x149961ed0
struct GramsPerCubicCentimeter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float gramsPerCubicCentimeter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: GameShapeComponentParams
// Size: 0x18
// VTable: 0x149ac4a70
struct GameShapeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: FriendlyFireReactionOverride
// Size: 0x10
// VTable: 0x1499d0cb8
struct FriendlyFireReactionOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType reactionType; // Offset: 0x8
    bool shouldAllowFriendlyFire; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: SSCPlayerUINetworkComponentParams
// Size: 0x18
// VTable: 0x1499ee2c0
struct SSCPlayerUINetworkComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ScanCustomValueFloat
// Size: 0x10
// VTable: 0x1499c72b0
struct ScanCustomValueFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_VehicleOperatorMode
// Size: 0x10
// VTable: 0x149a666d0
struct ControlHintCondition_VehicleOperatorMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType operatorMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: UnitTest_BaseTest
// Size: 0x18
// VTable: 0x149a88dc0
struct UnitTest_BaseTest {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* myBaseString; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SHintEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a98
struct SHintEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DefaultActionsEntityEntryCondition_Primed
// Size: 0x10
// VTable: 0x149a8bd80
struct DefaultActionsEntityEntryCondition_Primed {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isPrimed; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: MissionDeadline
// Size: 0x20
// VTable: 0x14996ae80
struct MissionDeadline {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float missionCompletionTime; // Offset: 0x8
    bool missionAutoEnd; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    ARDataType missionResultAfterTimerEnd; // Offset: 0x10
    float remainingTimeToShowTimer; // Offset: 0x14
    CLocIdentifier* missionEndReason; // Offset: 0x18
};

// Original name: SServiceBeaconCreatorParamsBase
// Size: 0x8
// VTable: 0x149aae548
struct SServiceBeaconCreatorParamsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ChatProviderSettingsBase
// Size: 0x8
// VTable: 0x1499f9920
struct ChatProviderSettingsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SDestroySelfGameplayTrigger
// Size: 0x8
// VTable: 0x1499fac00
struct SDestroySelfGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CameraFOVChangeData
// Size: 0x10
// VTable: 0x149aa4948
struct CameraFOVChangeData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fovLerpSpeed; // Offset: 0x8
    float resetFOVLerpSpeed; // Offset: 0xc
};

// Original name: ScanDisplayConditionBaseParams
// Size: 0x8
// VTable: 0x1499c6780
struct ScanDisplayConditionBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ShipListEntityComponentParams
// Size: 0x20
// VTable: 0x149a570e0
struct ShipListEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool allowSpaceships; // Offset: 0x18
    bool allowGroundVehicles; // Offset: 0x19
    bool allowGravLevVehicles; // Offset: 0x1a
    bool allowREC_RentedShips; // Offset: 0x1b
    bool allowUEC_RentedShips; // Offset: 0x1c
    bool setPlayerProfile; // Offset: 0x1d
    bool filterByLocation; // Offset: 0x1e
    uint8_t _pad_1[0x1]; // Offset: 0x1f
};

// Original name: ItemThrottleParamsBase
// Size: 0x8
// VTable: 0x149a076c8
struct ItemThrottleParamsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: UIGraph_ActorLoadoutEditorContextComponent
// Size: 0x8
// VTable: 0x149a581c0
struct UIGraph_ActorLoadoutEditorContextComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TriggerSubConditionAngleDef
// Size: 0x30
// VTable: 0x149a898a8
struct TriggerSubConditionAngleDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* approachingNpcGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* npcGUID; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float amplitude; // Offset: 0x28
    float offset; // Offset: 0x2c
};

// Original name: EntityComponentRoomOccupantParams
// Size: 0x18
// VTable: 0x14997d3f0
struct EntityComponentRoomOccupantParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BreathVolumeParams
// Size: 0x10
// VTable: 0x149a6c9e8
struct BreathVolumeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float defaultVolume; // Offset: 0x8
    float volumeModifier; // Offset: 0xc
};

// Original name: InnerThought_CycleAnimRotateX
// Size: 0x20
// VTable: 0x149a98728
struct InnerThought_CycleAnimRotateX {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    float length; // Offset: 0x10
    float amount; // Offset: 0x14
    float stagger; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: ActorLocomotionTurnOnSpotParams
// Size: 0x18
// VTable: 0x149ab1708
struct ActorLocomotionTurnOnSpotParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minAngle; // Offset: 0x8
    float minAngleForTurnWithoutDelay; // Offset: 0xc
    float maxDelayTime; // Offset: 0x10
    float requeueNormTime; // Offset: 0x14
};

// Original name: SHardPointHighlightNode
// Size: 0x18
// VTable: 0x1499a5c40
struct SHardPointHighlightNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPortName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SWalletParams
// Size: 0x18
// VTable: 0x149a168d8
struct SWalletParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: JournalEntryShopAlertsText
// Size: 0x10
// VTable: 0x1499755a0
struct JournalEntryShopAlertsText {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* BodyText; // Offset: 0x8
};

// Original name: PlayerForceReactionParams
// Size: 0x10
// VTable: 0x1499d50f8
struct PlayerForceReactionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableSustainedForces; // Offset: 0x8
    bool enableSustainedImpulses; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: ScanDisplaySetupParams
// Size: 0x10
// VTable: 0x1499c6a40
struct ScanDisplaySetupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scanTable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SQedVisualGraphTransitionTypeParams_TimeBased
// Size: 0x10
// VTable: 0x149a550e0
struct SQedVisualGraphTransitionTypeParams_TimeBased {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float seconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SMFD
// Size: 0x60
// VTable: 0x149a5b688
struct SMFD {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* geometryName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool backgroundEnabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    SMFD upControlLink; // Offset: 0x20
    SMFD downControlLink; // Offset: 0x30
    SMFD leftControlLink; // Offset: 0x40
    SMFD rightControlLink; // Offset: 0x50
};

// Original name: InteriorMapEntityVisiblityEntityComponentParams
// Size: 0x20
// VTable: 0x149a15c50
struct InteriorMapEntityVisiblityEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool show; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: StarMapQuantumTravelDataParams
// Size: 0x20
// VTable: 0x149a8f380
struct StarMapQuantumTravelDataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float obstructionRadius; // Offset: 0x8
    float arrivalRadius; // Offset: 0xc
    float arrivalPointDetectionOffset; // Offset: 0x10
    float adoptionRadius; // Offset: 0x14
    float subPointRadiusMultiplier; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: LegacyUIOptionsParams
// Size: 0x10
// VTable: 0x1499d4758
struct LegacyUIOptionsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool updateProgressBar; // Offset: 0x8
    bool showFrameProgressBar; // Offset: 0x9
    bool requiresScoreboard; // Offset: 0xa
    bool requiresGameDetails; // Offset: 0xb
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: OcclusionBindingsParams
// Size: 0x18
// VTable: 0x149a55ea0
struct OcclusionBindingsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float supportRayPushInAmount; // Offset: 0x8
    float increasedPrecisionAngularSizeLimit; // Offset: 0xc
    float maximumRayLength; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: AudioBreathStyleCondition
// Size: 0x20
// VTable: 0x149a6cd90
struct AudioBreathStyleCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType whenBreathParameter; // Offset: 0x8
    float isAbove; // Offset: 0xc
    float andBelow; // Offset: 0x10
    float andJumpsUpBy; // Offset: 0x14
    float orDropsBy; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SCBoatMovementBuoyancyParams
// Size: 0x18
// VTable: 0x149a2e5e8
struct SCBoatMovementBuoyancyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float waterDensity; // Offset: 0x8
    float kWaterDensity; // Offset: 0xc
    float waterResistance; // Offset: 0x10
    float kWaterResistance; // Offset: 0x14
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeImageScalingBehavior
// Size: 0x10
// VTable: 0x14998bdf0
struct BuildingBlocks_FieldModifierEnumeratedTypeImageScalingBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ItemResourceDeltaBase
// Size: 0x8
// VTable: 0x1499a7940
struct ItemResourceDeltaBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition
// Size: 0x8
// VTable: 0x149a65a58
struct ControlHintCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ContractGenerationParamsBase
// Size: 0x8
// VTable: 0x149973508
struct ContractGenerationParamsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsIntegerBase
// Size: 0x50
// VTable: 0x1499804e0
struct BuildingBlocks_BindingsIntegerBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: CommunicationSubtitleSettings
// Size: 0x20
// VTable: 0x14997ebc8
struct CommunicationSubtitleSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool allow; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* variableName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: AudioListenerParams
// Size: 0x38
// VTable: 0x1499a9cf8
struct AudioListenerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool primaryListener; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float inputRadius; // Offset: 0x1c
    float outputRadius; // Offset: 0x20
    bool enabled; // Offset: 0x24
    bool entityExclusive; // Offset: 0x25
    uint8_t _pad_2[0x2]; // Offset: 0x26
    CryStringT* bus; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: SSCSignatureSystemActorCrossSectionParams
// Size: 0x8
// VTable: 0x1499e9d28
struct SSCSignatureSystemActorCrossSectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: JournalEntryType
// Size: 0x28
// VTable: 0x1499752a0
struct JournalEntryType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* DisplayName; // Offset: 0x8
    CLocIdentifier* NotificationName; // Offset: 0x10
    CryStringT* IconName; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: CommunicationVariableFloat
// Size: 0x28
// VTable: 0x14997f400
struct CommunicationVariableFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool global; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    float value; // Offset: 0x20
    uint8_t _pad_3[0x4]; // Offset: 0x24
};

// Original name: BuildingBlocks_RadialTransformChild
// Size: 0x10
// VTable: 0x149983d80
struct BuildingBlocks_RadialTransformChild {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool inheritRotation; // Offset: 0x8
    bool inheritShapeWarp; // Offset: 0x9
    bool maintainGapLength; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
};

// Original name: SModifierSignaturesEntry
// Size: 0x10
// VTable: 0x1499e9a98
struct SModifierSignaturesEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType modifierType; // Offset: 0x8
    float value; // Offset: 0xc
};

// Original name: ChatManagerDefaultChannelColor
// Size: 0x20
// VTable: 0x1499e3c48
struct ChatManagerDefaultChannelColor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType global; // Offset: 0x8
    ARDataType party; // Offset: 0xc
    ARDataType gameEntity; // Offset: 0x10
    ARDataType whisper; // Offset: 0x14
    ARDataType team; // Offset: 0x18
    ARDataType squad; // Offset: 0x1c
};

// Original name: CloneLocationMedicalTier
// Size: 0x8
// VTable: 0x149a570f0
struct CloneLocationMedicalTier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ItemResourceDynamicAmountCoolant
// Size: 0x8
// VTable: 0x1499a9050
struct ItemResourceDynamicAmountCoolant {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AttachableStateModifierContextBase
// Size: 0x8
// VTable: 0x1499c15b8
struct AttachableStateModifierContextBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SMobiGlasLauncherApp
// Size: 0x40
// VTable: 0x1499f97e8
struct SMobiGlasLauncherApp {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* appName; // Offset: 0x8
    CryStringT* iconPath; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    CryStringT* appTriggerName; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    CryStringT* notificationURLPath; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
};

// Original name: SCustomizableMaterialEntry
// Size: 0x28
// VTable: 0x149a33f38
struct SCustomizableMaterialEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* guid; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* filePath; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: MissionPropertyValue_StarMapLocation
// Size: 0x8
// VTable: 0x14996a740
struct MissionPropertyValue_StarMapLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SAudioGroupControllerComponentParams
// Size: 0x68
// VTable: 0x1499a9e10
struct SAudioGroupControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* powerLevelRtpc; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* powerOnDefaultSwitchState; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* powerOnAuxiliarySwitchState; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    CryStringT* powerOnEmergencySwitchState; // Offset: 0x48
    uint8_t _pad_4[0x8]; // Offset: 0x50
    CryStringT* powerOffSwitchState; // Offset: 0x58
    uint8_t _pad_5[0x8]; // Offset: 0x60
};

// Original name: SSpecialEventInteractionsParams
// Size: 0x20
// VTable: 0x1499d7f90
struct SSpecialEventInteractionsParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool active; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomLeftRadiusBehavior
// Size: 0x10
// VTable: 0x14998b610
struct BuildingBlocks_FieldModifierEnumeratedTypeBorderBottomLeftRadiusBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SGameRulesS42ReputationParamsDef
// Size: 0x18
// VTable: 0x149a3c420
struct SGameRulesS42ReputationParamsDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: FoleyCollision
// Size: 0x28
// VTable: 0x149a68330
struct FoleyCollision {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* trigger; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float minImpactSpeed; // Offset: 0x18
    float retriggerTimeout; // Offset: 0x1c
    bool applyToClient; // Offset: 0x20
    bool applyToNLPC; // Offset: 0x21
    uint8_t _pad_2[0x6]; // Offset: 0x22
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeMinHeightBehavior
// Size: 0x10
// VTable: 0x14998b3d0
struct BuildingBlocks_FieldModifierEnumeratedTypeMinHeightBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCollectibleCategory
// Size: 0x18
// VTable: 0x149a23cb0
struct SCollectibleCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* categoryName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: FlashVariableObject
// Size: 0x78
// VTable: 0x149aa7178
struct FlashVariableObject {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* linkName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType modeX; // Offset: 0x18
    ARDataType modeY; // Offset: 0x1c
    ARDataType modeZ; // Offset: 0x20
    ARDataType modeRotationX; // Offset: 0x24
    ARDataType modeRotationY; // Offset: 0x28
    ARDataType modeRotationZ; // Offset: 0x2c
    uint32_t currentFrame; // Offset: 0x30
    float alpha; // Offset: 0x34
    float x; // Offset: 0x38
    float y; // Offset: 0x3c
    float z; // Offset: 0x40
    float attachX; // Offset: 0x44
    float attachY; // Offset: 0x48
    float rotationX; // Offset: 0x4c
    float rotationY; // Offset: 0x50
    float rotationZ; // Offset: 0x54
    float scaleX; // Offset: 0x58
    float scaleY; // Offset: 0x5c
    float scaleZ; // Offset: 0x60
    float perspFOV; // Offset: 0x64
    bool visible; // Offset: 0x68
    bool setAlpha; // Offset: 0x69
    bool setCurrentFrame; // Offset: 0x6a
    bool setScaleX; // Offset: 0x6b
    bool setScaleY; // Offset: 0x6c
    bool setScaleZ; // Offset: 0x6d
    bool setVisible; // Offset: 0x6e
    bool setPerspFOV; // Offset: 0x6f
    bool fix2dCoordinates; // Offset: 0x70
    uint8_t _pad_2[0x7]; // Offset: 0x71
};

// Original name: SHackingCodeInputModifiersParams
// Size: 0x18
// VTable: 0x149a2ba38
struct SHackingCodeInputModifiersParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float abilityChargeUpModifier; // Offset: 0x8
    float abilityDurationModifier; // Offset: 0xc
    float abilityCooldownModifier; // Offset: 0x10
    float threatPointsDiscount; // Offset: 0x14
};

// Original name: SMicroCargoUnit
// Size: 0x10
// VTable: 0x14999ee60
struct SMicroCargoUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t microSCU; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AudioCommsSignalComponentParams
// Size: 0x20
// VTable: 0x1499e09b0
struct AudioCommsSignalComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float radius; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SDockingAnimatorStageTriggerParams
// Size: 0x10
// VTable: 0x149a40d88
struct SDockingAnimatorStageTriggerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType dockingAnimationStageTrigger; // Offset: 0x8
    bool triggerVal; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: SEAObjectiveMarkerStatusMessages
// Size: 0x50
// VTable: 0x149a27050
struct SEAObjectiveMarkerStatusMessages {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* captureMessage; // Offset: 0x8
    CLocIdentifier* defendMessage; // Offset: 0x10
    CLocIdentifier* capturedMessage; // Offset: 0x18
    CLocIdentifier* lostMessage; // Offset: 0x20
    CLocIdentifier* capturingMessage; // Offset: 0x28
    CLocIdentifier* boostCapturingMessage; // Offset: 0x30
    CLocIdentifier* contestedMessage; // Offset: 0x38
    CLocIdentifier* resettingMessage; // Offset: 0x40
    CLocIdentifier* offlineMessage; // Offset: 0x48
};

// Original name: MapDisplayControlLimits
// Size: 0x18
// VTable: 0x149a15f58
struct MapDisplayControlLimits {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float pitchMin; // Offset: 0x8
    float pitchMax; // Offset: 0xc
    float yawMin; // Offset: 0x10
    float yawMax; // Offset: 0x14
};

// Original name: CameraComponentOverrideControllerSpawnNotifierComponentParams
// Size: 0x18
// VTable: 0x1499a1638
struct CameraComponentOverrideControllerSpawnNotifierComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MiningTransactionParams
// Size: 0x18
// VTable: 0x149a0fc10
struct MiningTransactionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SGameRulesReputationBaseParamsDef
// Size: 0x18
// VTable: 0x149a39428
struct SGameRulesReputationBaseParamsDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MovementSystemComponentParams
// Size: 0x20
// VTable: 0x149a5c6f8
struct MovementSystemComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType movementProcessor; // Offset: 0x18
    float navmeshPointOffsetDistance; // Offset: 0x1c
};

// Original name: DamageResistanceBase
// Size: 0x8
// VTable: 0x1499adc00
struct DamageResistanceBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EntityComponentRttAspectMFDDiagnosticsParams
// Size: 0x20
// VTable: 0x1499c9bc8
struct EntityComponentRttAspectMFDDiagnosticsParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType targetRttSlot; // Offset: 0x18
    float aspectRatio; // Offset: 0x1c
};

// Original name: CraftingBlueprintTier_Base_NonRef
// Size: 0x8
// VTable: 0x1499b8c08
struct CraftingBlueprintTier_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SActorForceReactionFilterItemDef
// Size: 0x18
// VTable: 0x149a4b150
struct SActorForceReactionFilterItemDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float minImpulse; // Offset: 0xc
    float maxImpulse; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: ItemPowerSegmentThrottleParams
// Size: 0x10
// VTable: 0x149a07980
struct ItemPowerSegmentThrottleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t default_; /* default */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SActorEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a70
struct SActorEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CommonCurrentTargetDistanceScore
// Size: 0x18
// VTable: 0x1499b7040
struct CommonCurrentTargetDistanceScore {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lowDistToTarget; // Offset: 0x8
    float mediumDistToTarget; // Offset: 0xc
    float highDistToTarget; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: ControlHintCondition_VehicleWeaponState
// Size: 0x10
// VTable: 0x149a67030
struct ControlHintCondition_VehicleWeaponState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType vehicleWeaponState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: QuickAccessWheelElement
// Size: 0x10
// VTable: 0x149a9ab20
struct QuickAccessWheelElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool openContextMenuAsFolder; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SHackingThreatLevelConditionLinkPointActivated
// Size: 0x10
// VTable: 0x149a2cbf8
struct SHackingThreatLevelConditionLinkPointActivated {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isIntruder; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t pointsAdded; // Offset: 0xc
};

// Original name: STakedownTechniqueGains
// Size: 0x10
// VTable: 0x149a84ee0
struct STakedownTechniqueGains {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float takedown; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSmoothingWithLerp
// Size: 0x10
// VTable: 0x149a88588
struct SSmoothingWithLerp {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lerpingFactor; // Offset: 0x8
    float clampedBelow; // Offset: 0xc
};

// Original name: TrailFadingSettings
// Size: 0x20
// VTable: 0x149a19dc0
struct TrailFadingSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumVisibleSpeed; // Offset: 0x8
    float speedFadeRatio; // Offset: 0xc
    float lowIdleBound; // Offset: 0x10
    float idleThrustBound; // Offset: 0x14
    float thrustAfterburnBound; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SReputationStateParams
// Size: 0x18
// VTable: 0x149a96830
struct SReputationStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: ControlHintCondition_VehicleWeaponSystems
// Size: 0x10
// VTable: 0x149a66850
struct ControlHintCondition_VehicleWeaponSystems {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType systems; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: TransportDoorParams
// Size: 0x18
// VTable: 0x1499d9060
struct TransportDoorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SActorForceReactionAnimationStaggerConfig
// Size: 0x20
// VTable: 0x149a4c3c8
struct SActorForceReactionAnimationStaggerConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendspaceMin; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* fragmentTag; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: STileSocketParams
// Size: 0x18
// VTable: 0x1499ea618
struct STileSocketParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCItemLightGroupParams
// Size: 0x28
// VTable: 0x1499f3558
struct SCItemLightGroupParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool attachToTile; // Offset: 0x18
    bool controllable; // Offset: 0x19
    uint8_t _pad_1[0x2]; // Offset: 0x1a
    float powerRequirement; // Offset: 0x1c
    bool reactToVehicleEmergency; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
};

// Original name: RangeEventDispatcherComponentParams
// Size: 0x18
// VTable: 0x1499c84b0
struct RangeEventDispatcherComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EntityComponentShipCommsChannelParams
// Size: 0x18
// VTable: 0x149a50808
struct EntityComponentShipCommsChannelParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: RefiningProcess
// Size: 0x18
// VTable: 0x1499e16d0
struct RefiningProcess {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType refiningSpeed; // Offset: 0x8
    ARDataType refiningQuality; // Offset: 0xc
    CLocIdentifier* processName; // Offset: 0x10
};

// Original name: SGameVolumeComponentParams
// Size: 0x18
// VTable: 0x1499abd90
struct SGameVolumeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCuttableShapeDefinition
// Size: 0x20
// VTable: 0x149a0f980
struct SCuttableShapeDefinition {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    CryStringT* shapeNamePrefix; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
};

// Original name: ControlHintCondition_ActorLeanState
// Size: 0x10
// VTable: 0x149a65db0
struct ControlHintCondition_ActorLeanState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType leanState; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SItemPortBreakable
// Size: 0x20
// VTable: 0x1499aff98
struct SItemPortBreakable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    double YoungsModulus; // Offset: 0x8
    float BreakStrain; // Offset: 0x10
    float YieldStrain; // Offset: 0x14
    bool Breakable; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: BuildingBlocks_BooleanTextFormatModifier
// Size: 0x10
// VTable: 0x149981b88
struct BuildingBlocks_BooleanTextFormatModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType field; // Offset: 0x8
    bool value; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeFlexItemAlignment
// Size: 0x10
// VTable: 0x14998b850
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexItemAlignment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SMineableEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a18
struct SMineableEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AITargetableSettings
// Size: 0x18
// VTable: 0x149a95458
struct AITargetableSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float suggestedAttackerCapacity; // Offset: 0x8
    int32_t maxIndividualIncomingMissileSize; // Offset: 0xc
    int32_t maxTotalIncomingMissileSize; // Offset: 0x10
    int32_t maxAttackerShootingTokens; // Offset: 0x14
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeFlexAxisJustification
// Size: 0x10
// VTable: 0x14998b790
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexAxisJustification {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SUIGeometryResourceComponentParams
// Size: 0x18
// VTable: 0x1499dd1e0
struct SUIGeometryResourceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LinkedCloneLocationMedicalTier
// Size: 0x8
// VTable: 0x149a570f8
struct LinkedCloneLocationMedicalTier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SIPickupModule
// Size: 0x18
// VTable: 0x1499ba1c8
struct SIPickupModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSCSignatureSystemAudioMultiplier
// Size: 0x10
// VTable: 0x1499e9f90
struct SSCSignatureSystemAudioMultiplier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SWeaponZeroingParams
// Size: 0x18
// VTable: 0x149a61458
struct SWeaponZeroingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float defaultRange; // Offset: 0x8
    float maxRange; // Offset: 0xc
    float rangeIncrement; // Offset: 0x10
    float autoZeroingTime; // Offset: 0x14
};

// Original name: SItemUserHintActivator
// Size: 0x10
// VTable: 0x1499fb310
struct SItemUserHintActivator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType hint; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ItemSuitArmorSignatureParams
// Size: 0x18
// VTable: 0x1499fba78
struct ItemSuitArmorSignatureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType signatureType; // Offset: 0x8
    float signatureEmission; // Offset: 0xc
    float signatureReductionWeighted; // Offset: 0x10
    float signatureReductionAbsolute; // Offset: 0x14
};

// Original name: TransportGatewayTimerPanelParams
// Size: 0x18
// VTable: 0x1499d9068
struct TransportGatewayTimerPanelParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: FireRepairerType_EntityPos
// Size: 0x8
// VTable: 0x14997cec8
struct FireRepairerType_EntityPos {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EntityEffectSystem_LightType_ProjectorLight
// Size: 0x38
// VTable: 0x149999fc0
struct EntityEffectSystem_LightType_ProjectorLight {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float fovAngle; // Offset: 0x10
    float attenuationBulbSize; // Offset: 0x14
    float attenuationTweak; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    CryStringT* texturePath; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    bool focusedBeam; // Offset: 0x30
    uint8_t _pad_4[0x7]; // Offset: 0x31
};

// Original name: SStartRemoveInfractionTimerGameplayTrigger
// Size: 0x8
// VTable: 0x1499685e8
struct SStartRemoveInfractionTimerGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CtxGraph_Component
// Size: 0x8
// VTable: 0x149a9c880
struct CtxGraph_Component {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: UIGraph_SimpleComponent
// Size: 0x10
// VTable: 0x149aa8340
struct UIGraph_SimpleComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SHackingAIAlertedStateModifiersParams
// Size: 0x18
// VTable: 0x149a2b560
struct SHackingAIAlertedStateModifiersParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float movementSpeedModifier; // Offset: 0x8
    float chargeUpModifier; // Offset: 0xc
    float cooldownModifier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: HoverCollisions
// Size: 0x18
// VTable: 0x149a05300
struct HoverCollisions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float antiSpinThreshold; // Offset: 0x8
    float linearCollisionDamp; // Offset: 0xc
    float angularCollisionDamp; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: BuildingBlocks_SteppedLine
// Size: 0x10
// VTable: 0x149991338
struct BuildingBlocks_SteppedLine {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float angle; // Offset: 0x8
    float midPoint; // Offset: 0xc
};

// Original name: DefaultActionsEntityEntryCondition
// Size: 0x8
// VTable: 0x149a8b7f8
struct DefaultActionsEntityEntryCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TractorBeamTarget
// Size: 0x18
// VTable: 0x1499c97c0
struct TractorBeamTarget {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: CommsNotificationUserParams
// Size: 0x18
// VTable: 0x149a81d48
struct CommsNotificationUserParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EntityEffectSystem_LightLink
// Size: 0x20
// VTable: 0x14999a118
struct EntityEffectSystem_LightLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* subMeshName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool linkIgnoresColor; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: MissionVariableFloat
// Size: 0x30
// VTable: 0x1499716d0
struct MissionVariableFloat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float value; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalAutoScrollBehavior
// Size: 0x10
// VTable: 0x14998ba30
struct BuildingBlocks_FieldModifierEnumeratedTypeUnidirectionalAutoScrollBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SMannequinTagParams
// Size: 0x20
// VTable: 0x1499de0d0
struct SMannequinTagParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* tag; // Offset: 0x8
    uint8_t _pad_1[0x10]; // Offset: 0x10
};

// Original name: ControlHintCondition_ActorCommsState
// Size: 0x10
// VTable: 0x149a66310
struct ControlHintCondition_ActorCommsState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType commsState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: ActorBaseStanceMovementModifiers
// Size: 0x20
// VTable: 0x149aa3958
struct ActorBaseStanceMovementModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float strafeSpeedScale; // Offset: 0x8
    float strafeForwardSpeedScale; // Offset: 0xc
    float turnSpeedScale; // Offset: 0x10
    float backwardSpeedScale; // Offset: 0x14
    float turnMaxAngleVelocity; // Offset: 0x18
    float groundSlopeSpeedScale; // Offset: 0x1c
};

// Original name: SActorStanceDimensionsExtraDef
// Size: 0x8
// VTable: 0x149aadc88
struct SActorStanceDimensionsExtraDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuffDurationOverrideIndefiniteS42
// Size: 0x8
// VTable: 0x1499fc448
struct BuffDurationOverrideIndefiniteS42 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: HangarAreaComponentParams
// Size: 0x28
// VTable: 0x149a048e0
struct HangarAreaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float xDimension; // Offset: 0x18
    float yDimension; // Offset: 0x1c
    float zDimension; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: ActorTargetedParams
// Size: 0x18
// VTable: 0x149ab0628
struct ActorTargetedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float frustumScaleW; // Offset: 0x8
    float frustumScaleH; // Offset: 0xc
    float lookFovAngle; // Offset: 0x10
    float frustumFar; // Offset: 0x14
};

// Original name: AsteroidStateTemplateInternal
// Size: 0x10
// VTable: 0x1499798a0
struct AsteroidStateTemplateInternal {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType debrisDensityMod; // Offset: 0x8
    float debrisDensity; // Offset: 0xc
};

// Original name: SCItemDisplayScreenPowerParams
// Size: 0x10
// VTable: 0x149a087b0
struct SCItemDisplayScreenPowerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool ignorePowerRequirements; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SCharacterCustomizerTextureParams
// Size: 0x30
// VTable: 0x149a0c378
struct SCharacterCustomizerTextureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* texturePath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t numTilesU; // Offset: 0x18
    int32_t numTilesV; // Offset: 0x1c
    int32_t offsetU; // Offset: 0x20
    int32_t offsetV; // Offset: 0x24
    bool supportsHueRotation; // Offset: 0x28
    uint8_t _pad_2[0x7]; // Offset: 0x29
};

// Original name: NavigationLinkController
// Size: 0x8
// VTable: 0x1499ecee0
struct NavigationLinkController {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ActorShudderConfig
// Size: 0x30
// VTable: 0x1499ff5a0
struct ActorShudderConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool shuddersEnabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float frequencyMin; // Offset: 0xc
    float frequencyMax; // Offset: 0x10
    float amplitudeMin; // Offset: 0x14
    float amplitudeMax; // Offset: 0x18
    float durationMin; // Offset: 0x1c
    float durationMax; // Offset: 0x20
    float delayMin; // Offset: 0x24
    float delayMax; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: UIGraph_MarkerARDockComponent
// Size: 0x8
// VTable: 0x149a2f870
struct UIGraph_MarkerARDockComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SProjectedDisplayParams
// Size: 0x18
// VTable: 0x149a38a68
struct SProjectedDisplayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float pitchOffset; // Offset: 0xc
    float yawOffset; // Offset: 0x10
    ARDataType alignmentType; // Offset: 0x14
};

// Original name: SIReputationModule
// Size: 0x18
// VTable: 0x1499ba1e0
struct SIReputationModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: EngineeringStateMessages
// Size: 0x10
// VTable: 0x1499a0f10
struct EngineeringStateMessages {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* message; // Offset: 0x8
};

// Original name: SAsteroidRingComponentParams
// Size: 0x70
// VTable: 0x14999f730
struct SAsteroidRingComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t rngSeed; // Offset: 0x18
    uint8_t viewDistRatio; // Offset: 0x1c
    uint8_t lodRatio; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    CryStringT* composition; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    float noiseAmplitude; // Offset: 0x30
    float noiseGranularity; // Offset: 0x34
    float noiseRoughness; // Offset: 0x38
    uint8_t _pad_3[0xc]; // Offset: 0x3c
    float densityScale; // Offset: 0x48
    uint8_t _pad_4[0x4]; // Offset: 0x4c
    double innerRadiusKm; // Offset: 0x50
    double outerRadiusKm; // Offset: 0x58
    double depthKm; // Offset: 0x60
    float noiseFrequencyRadial; // Offset: 0x68
    uint8_t _pad_5[0x4]; // Offset: 0x6c
};

// Original name: Marker_ShowRuleDisplayMode
// Size: 0x10
// VTable: 0x149a499d0
struct Marker_ShowRuleDisplayMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType displayMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: EntityComponentRttAspectMFDTargetStatusParams
// Size: 0x20
// VTable: 0x1499c9a18
struct EntityComponentRttAspectMFDTargetStatusParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType targetRttSlot; // Offset: 0x18
    float aspectRatio; // Offset: 0x1c
};

// Original name: SProjectedYawLineParams
// Size: 0x40
// VTable: 0x149a38990
struct SProjectedYawLineParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float startAngle; // Offset: 0xc
    float endAngle; // Offset: 0x10
    bool ticksEnabled; // Offset: 0x14
    uint8_t _pad_2[0x3]; // Offset: 0x15
    float tickForwardFadeStartAngle; // Offset: 0x18
    float tickForwardFadeEndAngle; // Offset: 0x1c
    float tickBorderFadeAngle; // Offset: 0x20
    float tickIncrementAngle; // Offset: 0x24
    float tickIncrementVisualAngleRatio; // Offset: 0x28
    ARDataType tickAlignmentType; // Offset: 0x2c
    bool ticksAddCorners; // Offset: 0x30
    bool ticksAsFullCircle; // Offset: 0x31
    bool fixYawLineToAngle; // Offset: 0x32
    uint8_t _pad_3[0x1]; // Offset: 0x33
    float fixedAngle; // Offset: 0x34
    ARDataType anchorType; // Offset: 0x38
    uint8_t _pad_4[0x4]; // Offset: 0x3c
};

// Original name: SActorForceReactionLeanAngleLimitsDef
// Size: 0x18
// VTable: 0x149a4d4f8
struct SActorForceReactionLeanAngleLimitsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float forward; // Offset: 0x8
    float backward; // Offset: 0xc
    float left; // Offset: 0x10
    float right; // Offset: 0x14
};

// Original name: Time
// Size: 0x18
// VTable: 0x1499b9940
struct Time {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t hour; // Offset: 0x8
    int32_t minute; // Offset: 0xc
    int32_t second; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: GlobalResourceBase
// Size: 0x8
// VTable: 0x1499ae120
struct GlobalResourceBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FiringRangeTimeEntry
// Size: 0x18
// VTable: 0x1499dc368
struct FiringRangeTimeEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* entryName; // Offset: 0x8
    float entryTime; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: BulletPierceabilityParams
// Size: 0x18
// VTable: 0x149a17ed8
struct BulletPierceabilityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float damageFalloffLevel1; // Offset: 0x8
    float damageFalloffLevel2; // Offset: 0xc
    float damageFalloffLevel3; // Offset: 0x10
    float maxPenetrationThickness; // Offset: 0x14
};

// Original name: ControlHintCondition_VehicleLockedTarget
// Size: 0x10
// VTable: 0x149a66c10
struct ControlHintCondition_VehicleLockedTarget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType lockedTarget; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BuildingBlocks_CaseModifierTextFormatModifier
// Size: 0x10
// VTable: 0x149981d40
struct BuildingBlocks_CaseModifierTextFormatModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PathingComponentParams
// Size: 0x28
// VTable: 0x14997e2a0
struct PathingComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* navigationType; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: SIDamageHandlingModule
// Size: 0x18
// VTable: 0x1499ba198
struct SIDamageHandlingModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SActorForceReactionFlightDurationConfig
// Size: 0x10
// VTable: 0x149a4c698
struct SActorForceReactionFlightDurationConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float forcePercent; // Offset: 0x8
    float flightDuration; // Offset: 0xc
};

// Original name: EntityComponentSpawnClosetManagerParams
// Size: 0x18
// VTable: 0x1499e4658
struct EntityComponentSpawnClosetManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ObjectiveRewardContributionBase
// Size: 0x8
// VTable: 0x14996e948
struct ObjectiveRewardContributionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCharacterCustomizerRandomizationParams
// Size: 0x8
// VTable: 0x149a0c4b0
struct SCharacterCustomizerRandomizationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCPlayerMissionLogComponentParams
// Size: 0x18
// VTable: 0x14996c738
struct SCPlayerMissionLogComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SNonAuthoritativeClientStatsRecording
// Size: 0x18
// VTable: 0x149a0a3a8
struct SNonAuthoritativeClientStatsRecording {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_TriggerModifyNumber
// Size: 0x20
// VTable: 0x14998d318
struct BuildingBlocks_TriggerModifyNumber {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* variableName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float value; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: CraftingRecipe_Base_NonRef
// Size: 0x8
// VTable: 0x1499b89b0
struct CraftingRecipe_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AreaBoxComponentParams
// Size: 0x28
// VTable: 0x149ac4a18
struct AreaBoxComponentParams {
    uint8_t _pad_0[0x28]; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsLocalizedBase
// Size: 0x50
// VTable: 0x1499804f8
struct BuildingBlocks_BindingsLocalizedBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: ActiveContractSettings
// Size: 0x10
// VTable: 0x149971130
struct ActiveContractSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool hasCompleteButton; // Offset: 0x8
    bool handlesAbandonRequest; // Offset: 0x9
    bool canBeShared; // Offset: 0xa
    bool displayAlliedMarkers; // Offset: 0xb
    bool onlyOwnerCanComplete; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: ControlHintCondition_VehicleScanWaveAvailability
// Size: 0x10
// VTable: 0x149a66d30
struct ControlHintCondition_VehicleScanWaveAvailability {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scanWaveAvailable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: PlayerScoresManagerParams
// Size: 0x28
// VTable: 0x149968210
struct PlayerScoresManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* eliminatedEventString; // Offset: 0x18
    float eventDurationSeconds; // Offset: 0x20
    float updateTimeSeconds; // Offset: 0x24
};

// Original name: ControlHintCondition_VehicleCounterMeasureState
// Size: 0x10
// VTable: 0x149a66fd0
struct ControlHintCondition_VehicleCounterMeasureState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType vehicleCounterMeasureState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: ItemResourceControlParameterUIParameter
// Size: 0x28
// VTable: 0x1499a74d8
struct ItemResourceControlParameterUIParameter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float limitMin; // Offset: 0x18
    float limitMax; // Offset: 0x1c
    float initValue; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: NavigationTriggerAdapter
// Size: 0x8
// VTable: 0x1499ead50
struct NavigationTriggerAdapter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EAPlayerHUDParams
// Size: 0x20
// VTable: 0x1499d4180
struct EAPlayerHUDParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool scoreVScoreActive; // Offset: 0x8
    ARDataType scoreDisplayType; // Offset: 0x9
    bool scoreVScoreFillableActive; // Offset: 0xa
    bool timeElapsedActive; // Offset: 0xb
    bool timeRemainingActive; // Offset: 0xc
    bool lapTimeActive; // Offset: 0xd
    bool lapsActive; // Offset: 0xe
    bool racePlacementActive; // Offset: 0xf
    bool roundsActive; // Offset: 0x10
    bool livesActive; // Offset: 0x11
    bool wavesActive; // Offset: 0x12
    uint8_t _pad_1[0x1]; // Offset: 0x13
    int32_t numScoresToDisplayClient; // Offset: 0x14
    int32_t numScoresToDisplayLeader; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: SMisfireDamageValue
// Size: 0x10
// VTable: 0x149a09530
struct SMisfireDamageValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float health; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ContractGenerationParams_RequestOnly
// Size: 0x8
// VTable: 0x1499735e0
struct ContractGenerationParams_RequestOnly {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PingContactLifeTime
// Size: 0x10
// VTable: 0x1499c4ad8
struct PingContactLifeTime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lifeTimeMin; // Offset: 0x8
    float lifeTimeMax; // Offset: 0xc
};

// Original name: PlayerChoice_HeadLookParams
// Size: 0x18
// VTable: 0x149aa4c38
struct PlayerChoice_HeadLookParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float innerZoneSize; // Offset: 0x8
    float innerZoneFactor; // Offset: 0xc
    float outerZoneFactor; // Offset: 0x10
    bool smoothZones; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
};

// Original name: MobiGlasAppDataBase
// Size: 0x8
// VTable: 0x149a35c98
struct MobiGlasAppDataBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_StaticVariableNumber
// Size: 0x20
// VTable: 0x14998a5a0
struct BuildingBlocks_StaticVariableNumber {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float value; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: ContractBoolParam
// Size: 0x10
// VTable: 0x149973178
struct ContractBoolParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType param; // Offset: 0x8
    bool value; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: SActorForceReactionImpulseAccumulationConfig
// Size: 0x18
// VTable: 0x149a4c618
struct SActorForceReactionImpulseAccumulationConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float decay; // Offset: 0xc
    float accumulationFraction; // Offset: 0x10
    float cooldown; // Offset: 0x14
};

// Original name: SHighlightBehaviorNodeParams
// Size: 0x8
// VTable: 0x1499a5b78
struct SHighlightBehaviorNodeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GasCloudSunShadowParams
// Size: 0x18
// VTable: 0x1499cc618
struct GasCloudSunShadowParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float resScaleXY; // Offset: 0xc
    float resScaleZ; // Offset: 0x10
    float shadowDistanceScale; // Offset: 0x14
};

// Original name: SMobiGlasAppParamsBase
// Size: 0x8
// VTable: 0x149a35cf8
struct SMobiGlasAppParamsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MotionTurnParams
// Size: 0x28
// VTable: 0x149aad1a0
struct MotionTurnParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float rightYawTrigger; // Offset: 0x8
    float leftYawTrigger; // Offset: 0xc
    float turnTriggerOffset; // Offset: 0x10
    float targetOffset; // Offset: 0x14
    float snapOffset; // Offset: 0x18
    float maxTurnSpeed; // Offset: 0x1c
    float delayIdleSeconds; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: HudColor_HoloParam
// Size: 0x30
// VTable: 0x149aa10e8
struct HudColor_HoloParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float Opacity; // Offset: 0x18
    float Glow; // Offset: 0x1c
    float DiffuseOpacity; // Offset: 0x20
    float RimOpacity; // Offset: 0x24
    float SilhouetteOpacity; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: SCObjectDataBankEntryMarkerConfig
// Size: 0x18
// VTable: 0x149aa8418
struct SCObjectDataBankEntryMarkerConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float managedLandingZoneMinimumDist; // Offset: 0x8
    float managedLandingZoneMaximumDist; // Offset: 0xc
    float unmanagedLandingZoneMinimumDist; // Offset: 0x10
    float unmanagedLandingZoneMaximumDist; // Offset: 0x14
};

// Original name: WorldDisplayEnvironmentColor_Manufacturer
// Size: 0x10
// VTable: 0x149a30408
struct WorldDisplayEnvironmentColor_Manufacturer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType color; // Offset: 0x8
    uint8_t _pad_1[0x2]; // Offset: 0xa
    int32_t alpha; // Offset: 0xc
};

// Original name: CounterMeasureFlareParams
// Size: 0x28
// VTable: 0x1499cefa8
struct CounterMeasureFlareParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float StartInfrared; // Offset: 0x8
    float EndInfrared; // Offset: 0xc
    float StartElectromagnetic; // Offset: 0x10
    float EndElectromagnetic; // Offset: 0x14
    float StartCrossSection; // Offset: 0x18
    float EndCrossSection; // Offset: 0x1c
    float StartDecibel; // Offset: 0x20
    float EndDecibel; // Offset: 0x24
};

// Original name: STargetingMethodBase
// Size: 0x8
// VTable: 0x149a558a8
struct STargetingMethodBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlayerTradeProviderParams
// Size: 0x18
// VTable: 0x1499e4800
struct PlayerTradeProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SStandardHostility
// Size: 0x18
// VTable: 0x1499eed98
struct SStandardHostility {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: PowerPool
// Size: 0x10
// VTable: 0x1499a2d10
struct PowerPool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PrisonSentenceUIProviderParams
// Size: 0x20
// VTable: 0x149967be0
struct PrisonSentenceUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float updateTimeSeconds; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SWeaponActionFireTractorBeamStrengthValueParams
// Size: 0x38
// VTable: 0x149a79020
struct SWeaponActionFireTractorBeamStrengthValueParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float noTarget; // Offset: 0x8
    float stable; // Offset: 0xc
    float unstable; // Offset: 0x10
    float breaking; // Offset: 0x14
    float impactInvalidTarget; // Offset: 0x18
    float impactControllingTarget; // Offset: 0x1c
    float impactGrapple; // Offset: 0x20
    float impactSizeScale; // Offset: 0x24
    bool scaleImpactToObject; // Offset: 0x28
    uint8_t _pad_1[0x3]; // Offset: 0x29
    float beamEffectBlendRange; // Offset: 0x2c
    float beamEffectBlendCoeff; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: AreaEventCallbackComponentParams
// Size: 0x18
// VTable: 0x149af2ac0
struct AreaEventCallbackComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MissionFlowConditionBase
// Size: 0x8
// VTable: 0x14996ffe0
struct MissionFlowConditionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: Marker_AbilityScan
// Size: 0x8
// VTable: 0x149a4a640
struct Marker_AbilityScan {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSCSignatureSystemCrossSectionParams
// Size: 0x8
// VTable: 0x1499e9d18
struct SSCSignatureSystemCrossSectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SFortitudeXPGains
// Size: 0x20
// VTable: 0x149a84e28
struct SFortitudeXPGains {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float damageTaken; // Offset: 0x8
    float timeStarving; // Offset: 0xc
    float timeThirsty; // Offset: 0x10
    float decreaseBDL; // Offset: 0x14
    float fitnessXP; // Offset: 0x18
    float strengthXP; // Offset: 0x1c
};

// Original name: ActorForceMovementModifierConfig
// Size: 0x28
// VTable: 0x149aa3bc8
struct ActorForceMovementModifierConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float forceSmoothDuration; // Offset: 0x8
    float minAngleForSlowdown; // Offset: 0xc
    float maxAngleForSlowdown; // Offset: 0x10
    float minMagnitudeForSlowdown; // Offset: 0x14
    float maxMagnitudeForSlowdown; // Offset: 0x18
    float forceSlowdownSpeedMultiplier; // Offset: 0x1c
    float minMagnitudeToDisableSprint; // Offset: 0x20
    float maxAngleToDisableSprint; // Offset: 0x24
};

// Original name: ItemResourceTypeData
// Size: 0x28
// VTable: 0x1499a0e30
struct ItemResourceTypeData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* resourceTypeName; // Offset: 0x8
    CryStringT* resourceTypeDevName; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    ARDataType resourceType; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: DefaultActionsEntityState
// Size: 0x8
// VTable: 0x149a8b800
struct DefaultActionsEntityState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CargoDebugHelperParams
// Size: 0x18
// VTable: 0x149964520
struct CargoDebugHelperParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSequencerBespokeEntityDragTaskParams
// Size: 0x40
// VTable: 0x149a9c988
struct SSequencerBespokeEntityDragTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* fragmentId; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* fragTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: BuildingBlocks_WindowCamera
// Size: 0x10
// VTable: 0x1499929b0
struct BuildingBlocks_WindowCamera {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fieldOfView; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SItemPortAttachmentPoints
// Size: 0x28
// VTable: 0x1499afec8
struct SItemPortAttachmentPoints {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* Bone; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SSmoothingTimeBased
// Size: 0x18
// VTable: 0x149a88630
struct SSmoothingTimeBased {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float attackSlew; // Offset: 0x8
    float releaseSlew; // Offset: 0xc
    float clampedBelow; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: CommunicationVariationRules
// Size: 0x18
// VTable: 0x14997e588
struct CommunicationVariationRules {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeout; // Offset: 0x8
    bool lookAtTarget; // Offset: 0xc
    bool finishAnimation; // Offset: 0xd
    bool finishSound; // Offset: 0xe
    bool finishVoice; // Offset: 0xf
    bool finishTimeout; // Offset: 0x10
    bool blockMovement; // Offset: 0x11
    bool blockFire; // Offset: 0x12
    uint8_t _pad_1[0x5]; // Offset: 0x13
};

// Original name: EntityClassStaticDataParams
// Size: 0x8
// VTable: 0x149a8ac48
struct EntityClassStaticDataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SS42PersonalStatusDrugBuffEffectString
// Size: 0x18
// VTable: 0x149a37638
struct SS42PersonalStatusDrugBuffEffectString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statusEffectType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* buffEffectString; // Offset: 0x10
};

// Original name: SRenderProxyParams
// Size: 0x18
// VTable: 0x149ac4910
struct SRenderProxyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: NumResultsConstraints
// Size: 0x10
// VTable: 0x1499b3ec8
struct NumResultsConstraints {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t minResults; // Offset: 0x8
    int32_t maxResults; // Offset: 0xc
};

// Original name: KilogramsPerCubicMeter
// Size: 0x10
// VTable: 0x149961f30
struct KilogramsPerCubicMeter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float kilogramsPerCubicMeter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SeatReticleArchetype
// Size: 0x10
// VTable: 0x149aa82e0
struct SeatReticleArchetype {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool fixed; // Offset: 0x8
    bool look; // Offset: 0x9
    bool velocity; // Offset: 0xa
    bool control; // Offset: 0xb
    bool atmospheric; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: BuildingBlocks_PreviewScreenBase
// Size: 0x18
// VTable: 0x149994840
struct BuildingBlocks_PreviewScreenBase {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType renderLayer; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: VehicleDifficultyParams
// Size: 0x10
// VTable: 0x149a09f08
struct VehicleDifficultyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float damageModifierFromAiVehicles; // Offset: 0x8
    float damageModifierToAiVehicles; // Offset: 0xc
};

// Original name: SItemPortRule_HideAllInteractionsDef
// Size: 0x8
// VTable: 0x149a92f68
struct SItemPortRule_HideAllInteractionsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlayerAssetManagerProviderParams
// Size: 0x30
// VTable: 0x1499e4018
struct PlayerAssetManagerProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    uint32_t inventoryItemsPerPage; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CryStringT* inventoryPaintGeoTag; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
};

// Original name: PingTypeParams
// Size: 0x18
// VTable: 0x1499c51f8
struct PingTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float pingChargeUIShowTime; // Offset: 0x8
    float pingChargeUIJammedTime; // Offset: 0xc
    float pingChargeUIHideTime; // Offset: 0x10
    float pingChargeUIUnavailableTime; // Offset: 0x14
};

// Original name: SReputationMissionRequirementExpression_Not
// Size: 0x8
// VTable: 0x149a96c40
struct SReputationMissionRequirementExpression_Not {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSequencerDefTaskParams
// Size: 0x20
// VTable: 0x1499a03a8
struct SSequencerDefTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: SHackingThreatLevelConditionTime
// Size: 0x18
// VTable: 0x149a2cc60
struct SHackingThreatLevelConditionTime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isIntruder; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t pointsAdded; // Offset: 0xc
    float timePeriod; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SStarGalaWaveParams
// Size: 0x30
// VTable: 0x149a47420
struct SStarGalaWaveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType enemyType; // Offset: 0x8
    int32_t enemyCount; // Offset: 0xc
    ARDataType waveNum; // Offset: 0x10
    ARDataType thePath; // Offset: 0x14
    int32_t delayStart; // Offset: 0x18
    int32_t delayModifier; // Offset: 0x1c
    float speedAdjustment; // Offset: 0x20
    float pathOffset; // Offset: 0x24
    int32_t group; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: Bindings_SubsumptionBroadcastEvent
// Size: 0x20
// VTable: 0x149993008
struct Bindings_SubsumptionBroadcastEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* eventName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float eventRange; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: WeaponAIAimingMethodHighLowArc
// Size: 0x10
// VTable: 0x149a60b60
struct WeaponAIAimingMethodHighLowArc {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useLowArc; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: WingmanOrderInfo
// Size: 0x28
// VTable: 0x149a65350
struct WingmanOrderInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* LocalisationString; // Offset: 0x8
    CryStringT* EventName; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    ARDataType TargetType; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: SCItemDoorPortalModeManualParams
// Size: 0x18
// VTable: 0x1499f2350
struct SCItemDoorPortalModeManualParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* PortalName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SStreamingObjectContainerComponentParams
// Size: 0x28
// VTable: 0x1499a5900
struct SStreamingObjectContainerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* objectContainer; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: SReputationMissionRequirementExpression_RightParenthesis
// Size: 0x8
// VTable: 0x149a96c50
struct SReputationMissionRequirementExpression_RightParenthesis {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ShipStateMonitorComponentParams
// Size: 0x18
// VTable: 0x149a83b98
struct ShipStateMonitorComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ScreenEffects_ParamValue_Int
// Size: 0x10
// VTable: 0x14999c078
struct ScreenEffects_ParamValue_Int {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t value; // Offset: 0x8
    bool limitStacking; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: SBaseInteractionGameplayTrigger
// Size: 0x8
// VTable: 0x1499e95e0
struct SBaseInteractionGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlayerMissionDataBankManagementComponentParams
// Size: 0x18
// VTable: 0x14996c580
struct PlayerMissionDataBankManagementComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSpawnOnStreamIn
// Size: 0x8
// VTable: 0x149a40398
struct SSpawnOnStreamIn {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SendItemResourceNetworkedStateEvent
// Size: 0x10
// VTable: 0x1499a8960
struct SendItemResourceNetworkedStateEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SCoolerMisfireParams
// Size: 0x18
// VTable: 0x1499f41e0
struct SCoolerMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float coolingRateReduction; // Offset: 0x8
    float minCoolingRateReduction; // Offset: 0xc
    bool hasVariableCoolingRateReduction; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: PlayerMarkerSubscription
// Size: 0x18
// VTable: 0x149a856d8
struct PlayerMarkerSubscription {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t maxOwnedUnattendedVehicle_AR; // Offset: 0x8
    int32_t maxOwnedUnattendedVehicles_StarMap; // Offset: 0xc
    int32_t maxNonOwnedUnattendedVehicle; // Offset: 0x10
    int32_t maxQuantumTracepoints; // Offset: 0x14
};

// Original name: SecurityNetworkVariableEffect_Base
// Size: 0x8
// VTable: 0x1499747b0
struct SecurityNetworkVariableEffect_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ItemResourceControlOutputBase
// Size: 0x8
// VTable: 0x1499a74e0
struct ItemResourceControlOutputBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BulletImpulseFalloffParams
// Size: 0x18
// VTable: 0x149a18030
struct BulletImpulseFalloffParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minDistance; // Offset: 0x8
    float dropFalloff; // Offset: 0xc
    float maxFalloff; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: RestrictedAreaSphereParams
// Size: 0x18
// VTable: 0x149a1c948
struct RestrictedAreaSphereParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCBoatMovementInputParams
// Size: 0x10
// VTable: 0x149a2e518
struct SCBoatMovementInputParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float speedLimiterStep; // Offset: 0x8
    float accelerationLimiterStep; // Offset: 0xc
};

// Original name: SLegacyItemMisfireParams
// Size: 0x8
// VTable: 0x149a098b0
struct SLegacyItemMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: InterferenceParams
// Size: 0x10
// VTable: 0x149996d20
struct InterferenceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fallOffDistance; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: JumpDriveUIConeParams
// Size: 0x18
// VTable: 0x149a14b40
struct JumpDriveUIConeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float range; // Offset: 0x8
    float angle; // Offset: 0xc
    float lookAtAngle; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SWeaponConditionIsHeldEntity
// Size: 0x8
// VTable: 0x149a70148
struct SWeaponConditionIsHeldEntity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AISeatOperatorComponentParams
// Size: 0x18
// VTable: 0x149a38e50
struct AISeatOperatorComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: TileManagerParams
// Size: 0x18
// VTable: 0x1499ea608
struct TileManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: RecordRefUserVariableTypeBase
// Size: 0x8
// VTable: 0x1499944b8
struct RecordRefUserVariableTypeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ItemPortHostComponentParams
// Size: 0x18
// VTable: 0x1499f68e0
struct ItemPortHostComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: MissionPropertyValue_Object
// Size: 0x8
// VTable: 0x149969568
struct MissionPropertyValue_Object {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MissionScenarioScheduleConstraint
// Size: 0x10
// VTable: 0x149971918
struct MissionScenarioScheduleConstraint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t epoch; // Offset: 0xc
};

// Original name: UIWorldDisplayAutoRotationParams
// Size: 0x18
// VTable: 0x149aa9938
struct UIWorldDisplayAutoRotationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float autoRotationRate; // Offset: 0x8
    float autoRotateDelay; // Offset: 0xc
    float autoRotateRampUpDuration; // Offset: 0x10
    float autoRotateRampDownDuration; // Offset: 0x14
};

// Original name: BuildingBlocks_BindingsTransformBase
// Size: 0x50
// VTable: 0x149980518
struct BuildingBlocks_BindingsTransformBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: ChatCommandName
// Size: 0x18
// VTable: 0x149aa6040
struct ChatCommandName {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* commandName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: GlobalAudioSettings
// Size: 0x10
// VTable: 0x1499df0c8
struct GlobalAudioSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enablePropagationPathing; // Offset: 0x8
    bool enablePropagationPathingActorOnly; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: BuildingBlocks_BindingsRotationBase
// Size: 0x50
// VTable: 0x149980510
struct BuildingBlocks_BindingsRotationBase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
};

// Original name: MeleeComboChainLink
// Size: 0x10
// VTable: 0x149a02ab8
struct MeleeComboChainLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType attackType; // Offset: 0x8
    ARDataType classType; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: SStartFillingGasTankGameplayTrigger
// Size: 0x8
// VTable: 0x1499fad40
struct SStartFillingGasTankGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_TryOnState
// Size: 0x10
// VTable: 0x149a67270
struct ControlHintCondition_TryOnState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType tryOnState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: CommunicationATLConfig
// Size: 0x48
// VTable: 0x14997ef88
struct CommunicationATLConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* playTriggerPrefix; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* stopTriggerPrefix; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* speakerVoiceSwitch; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* speakerTypeSwitch; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
};

// Original name: SMisfireDamage
// Size: 0x8
// VTable: 0x149a094d0
struct SMisfireDamage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSCSignatureSystemSDFCrossSectionParams
// Size: 0x8
// VTable: 0x1499e9d20
struct SSCSignatureSystemSDFCrossSectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SDoorCollisionReactionBaseParams
// Size: 0x8
// VTable: 0x1499f2218
struct SDoorCollisionReactionBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BlueprintCategoryRecord
// Size: 0x18
// VTable: 0x1499b8ce0
struct BlueprintCategoryRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* categoryName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SARMarkersParams
// Size: 0x10
// VTable: 0x149a55cf0
struct SARMarkersParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lockedRatioClose; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: PlayerShipRespawnShipInfo
// Size: 0x20
// VTable: 0x149aa2770
struct PlayerShipRespawnShipInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t RespawnWaitTime; // Offset: 0x18
    int32_t InstantRespawnCost; // Offset: 0x1c
};

// Original name: STransponderObjectMetadataParams
// Size: 0x8
// VTable: 0x1499e8190
struct STransponderObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: RearmRefuelTerminalParams
// Size: 0x18
// VTable: 0x149a46940
struct RearmRefuelTerminalParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: GlobalJumpDriveEntryEffectParams
// Size: 0x10
// VTable: 0x149a13100
struct GlobalJumpDriveEntryEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float trailStrengthMaxDistance; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SetTriggerableDeviceActiveEvent
// Size: 0x10
// VTable: 0x149a70680
struct SetTriggerableDeviceActiveEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool active; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: CameraCollisionConfig
// Size: 0x28
// VTable: 0x1499b1c60
struct CameraCollisionConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableCollisionCheck; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float collisionSweepRadius; // Offset: 0xc
    float entityObstructionDistance; // Offset: 0x10
    float collisionPullbackTime; // Offset: 0x14
    bool enableSelfCollisionCheck; // Offset: 0x18
    uint8_t _pad_2[0x3]; // Offset: 0x19
    float selfCollisionSweepRadius; // Offset: 0x1c
    bool disableShakeOnCollision; // Offset: 0x20
    uint8_t _pad_3[0x7]; // Offset: 0x21
};

// Original name: QuantumDriveEffectSettings
// Size: 0x18
// VTable: 0x149a51498
struct QuantumDriveEffectSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float spoolingEffectFadeInDuration; // Offset: 0x8
    float spoolingEffectFadeOutDuration; // Offset: 0xc
    float spoolingEffectMultiplier; // Offset: 0x10
    float spoolingEffectSpeedInput; // Offset: 0x14
};

// Original name: AreaOutdoorMaterialParams
// Size: 0x18
// VTable: 0x1499d1358
struct AreaOutdoorMaterialParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float gridOpacity; // Offset: 0x8
    float gridOuterNoisePower; // Offset: 0xc
    float beamOuterAlpha; // Offset: 0x10
    float beamGlowAmount; // Offset: 0x14
};

// Original name: SInteractorHintActivator
// Size: 0x10
// VTable: 0x1499fb308
struct SInteractorHintActivator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType hint; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SSCSignatureEmissionBaseModifier
// Size: 0x8
// VTable: 0x1499e9aa0
struct SSCSignatureEmissionBaseModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: InteractiveVariable_BackToDefaultIntParams
// Size: 0x10
// VTable: 0x1499f7488
struct InteractiveVariable_BackToDefaultIntParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float waitTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SOrbitComponentParams
// Size: 0x50
// VTable: 0x1499a58e8
struct SOrbitComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    double OrbitalRadius; // Offset: 0x18
    double OrbitalSpeed; // Offset: 0x20
    double OrbitalAngle; // Offset: 0x28
    CryStringT* parentGUID; // Offset: 0x30
    uint8_t _pad_1[0x18]; // Offset: 0x38
};

// Original name: SHackingCodeSystemLogEntry
// Size: 0x18
// VTable: 0x149a2c548
struct SHackingCodeSystemLogEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isDisabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CLocIdentifier* logEntryText; // Offset: 0x10
};

// Original name: ConsumableEffectModifyActorStatus
// Size: 0x20
// VTable: 0x149a25700
struct ConsumableEffectModifyActorStatus {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* effectDescription; // Offset: 0x8
    ARDataType statType; // Offset: 0x10
    float statPointChange; // Offset: 0x14
    float statCooldownChange; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SGasPressureRangeParams
// Size: 0x10
// VTable: 0x149a14e48
struct SGasPressureRangeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minRange; // Offset: 0x8
    float maxRange; // Offset: 0xc
};

// Original name: CameraDistanceConfig
// Size: 0x28
// VTable: 0x1499b1b18
struct CameraDistanceConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool includeBounds; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float initialDistance; // Offset: 0xc
    float minDistance; // Offset: 0x10
    float maxDistance; // Offset: 0x14
    float dollySpeed; // Offset: 0x18
    float automaticDollySpeed; // Offset: 0x1c
    float timeBeforeAutomaticDolly; // Offset: 0x20
    float smoothTime; // Offset: 0x24
};

// Original name: AudioRtpc
// Size: 0x20
// VTable: 0x149a88440
struct AudioRtpc {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* rtpc; // Offset: 0x8
    uint8_t _pad_1[0x10]; // Offset: 0x10
};

// Original name: BuildingBlocks_TriggerCloseContextMenu
// Size: 0x8
// VTable: 0x14998d6a8
struct BuildingBlocks_TriggerCloseContextMenu {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: InnerThought_LayoutBase
// Size: 0x10
// VTable: 0x149a98678
struct InnerThought_LayoutBase {
    uint8_t _pad_0[0x10]; // Offset: 0x0
};

// Original name: LinkedStatRulePassCrossingAboveThreshold
// Size: 0x10
// VTable: 0x1499fda20
struct LinkedStatRulePassCrossingAboveThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SILayerEntitiesGroupManager
// Size: 0x18
// VTable: 0x1499ba1b0
struct SILayerEntitiesGroupManager {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BoidsActorRepelRule
// Size: 0x18
// VTable: 0x1499ec140
struct BoidsActorRepelRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float effectDistance; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: BlueprintCategoryAvailability_Base_NonRef
// Size: 0x8
// VTable: 0x1499b8d50
struct BlueprintCategoryAvailability_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: AccessibilityBaseParams
// Size: 0x8
// VTable: 0x1499f2ed0
struct AccessibilityBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: PlanetNavigationVolumeParams
// Size: 0x18
// VTable: 0x14997f9e8
struct PlanetNavigationVolumeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_PreviewSceneHoloVolume
// Size: 0x18
// VTable: 0x149994958
struct BuildingBlocks_PreviewSceneHoloVolume {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType renderLayer; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: ConstantDOFPosWeights
// Size: 0x10
// VTable: 0x149a7cad8
struct ConstantDOFPosWeights {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t gridDistance; // Offset: 0x8
    float weight; // Offset: 0xc
};

// Original name: SProjectedPitchLadderParams
// Size: 0x40
// VTable: 0x149a38708
struct SProjectedPitchLadderParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float visibleSizeAngle; // Offset: 0x8
    float visibleFadeRatio; // Offset: 0xc
    float incrementAngle; // Offset: 0x10
    bool centersEnabled; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    ARDataType centersAlignmentType; // Offset: 0x18
    bool sidesEnabled; // Offset: 0x1c
    uint8_t _pad_2[0x3]; // Offset: 0x1d
    float sidesHorizontalOffsetAngle; // Offset: 0x20
    ARDataType sidesPositionType; // Offset: 0x24
    ARDataType sidesAlignmentType; // Offset: 0x28
    bool labelsEnabled; // Offset: 0x2c
    uint8_t _pad_3[0x3]; // Offset: 0x2d
    float labelsHorizontalOffsetAngle; // Offset: 0x30
    ARDataType labelsPositionType; // Offset: 0x34
    ARDataType labelsAlignmentType; // Offset: 0x38
    bool enableZeroPitchElements; // Offset: 0x3c
    uint8_t _pad_4[0x3]; // Offset: 0x3d
};

// Original name: UsableSlottingReferenceElementBase
// Size: 0x8
// VTable: 0x149a92a48
struct UsableSlottingReferenceElementBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: Marker_AbilityOverrideDisplayName
// Size: 0x10
// VTable: 0x149a4a5b0
struct Marker_AbilityOverrideDisplayName {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* defaultName; // Offset: 0x8
};

// Original name: LightSizeParams
// Size: 0x18
// VTable: 0x1499a3db8
struct LightSizeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lightRadius; // Offset: 0x8
    float bulbRadius; // Offset: 0xc
    float planeWidth; // Offset: 0x10
    float planeHeight; // Offset: 0x14
};

// Original name: SSCSignatureSystemAudioOverride
// Size: 0x10
// VTable: 0x1499e9ff0
struct SSCSignatureSystemAudioOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_StaticVariableLocalization
// Size: 0x20
// VTable: 0x14998a660
struct BuildingBlocks_StaticVariableLocalization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* value; // Offset: 0x18
};

// Original name: BuildingBlocks_FlexContainer
// Size: 0x28
// VTable: 0x1499835b0
struct BuildingBlocks_FlexContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType direction; // Offset: 0x8
    ARDataType wrap; // Offset: 0xc
    ARDataType axisJustification; // Offset: 0x10
    ARDataType crossAxisJustification; // Offset: 0x14
    ARDataType itemAlignment; // Offset: 0x18
    float columnSpacing; // Offset: 0x1c
    float rowSpacing; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SEntityEffectSystem_OverrideValueModifier
// Size: 0x10
// VTable: 0x1499997f0
struct SEntityEffectSystem_OverrideValueModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float overrideValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: CommsChannelDef
// Size: 0x28
// VTable: 0x149a9bc08
struct CommsChannelDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* channelId; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
    bool canHaveMultipleInstances; // Offset: 0x20
    bool useAreaOfEffect; // Offset: 0x21
    uint8_t _pad_2[0x6]; // Offset: 0x22
};

// Original name: SJumpPointPushAreaParams
// Size: 0x20
// VTable: 0x149a13e40
struct SJumpPointPushAreaParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float areaRadius; // Offset: 0x8
    float softPushAreaDistance; // Offset: 0xc
    float strength; // Offset: 0x10
    float damping; // Offset: 0x14
    float falloffRatio; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: MarkerTrackingDisplayParameters
// Size: 0x30
// VTable: 0x149a48f18
struct MarkerTrackingDisplayParameters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool showPanels; // Offset: 0x8
    bool showEdgeMarkers; // Offset: 0x9
    bool showSmallIconOnly; // Offset: 0xa
    bool enableDynamicRadar; // Offset: 0xb
    ARDataType planeAlignmentMode; // Offset: 0xc
    float minimumRadarRangeInMeters; // Offset: 0x10
    float defaultRadarRangeInMeters; // Offset: 0x14
    float radarPaddingInMeters; // Offset: 0x18
    float playerZoomOffset; // Offset: 0x1c
    float iconOverrideThreshold; // Offset: 0x20
    float standardIconThreshold; // Offset: 0x24
    float modelThreshold; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeDustParticleMovementRestriction
// Size: 0x10
// VTable: 0x14998c090
struct BuildingBlocks_FieldModifierEnumeratedTypeDustParticleMovementRestriction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: WeaponAIAimingMethodDirect
// Size: 0x10
// VTable: 0x149a60b00
struct WeaponAIAimingMethodDirect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableSpread; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BaseSpawnerPrerequisite
// Size: 0x8
// VTable: 0x149a40698
struct BaseSpawnerPrerequisite {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: HaulingMissionHelperComponentParams
// Size: 0x18
// VTable: 0x14996c550
struct HaulingMissionHelperComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeFlexWrap
// Size: 0x10
// VTable: 0x14998b730
struct BuildingBlocks_FieldModifierEnumeratedTypeFlexWrap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHints_ActionInput
// Size: 0x30
// VTable: 0x149a675e0
struct ControlHints_ActionInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType activationMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* actionName; // Offset: 0x10
    uint8_t _pad_2[0x18]; // Offset: 0x18
};

// Original name: SMatchChannel
// Size: 0x8
// VTable: 0x149a9c808
struct SMatchChannel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: HintManagerParams
// Size: 0x18
// VTable: 0x149a126f8
struct HintManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SSpawnOnlyOnRequest
// Size: 0x10
// VTable: 0x149a40290
struct SSpawnOnlyOnRequest {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t maxEntities; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SEntityComponentSmoothingModificationObjectParams
// Size: 0x28
// VTable: 0x14999da98
struct SEntityComponentSmoothingModificationObjectParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float size; // Offset: 0x18
    float rollOff; // Offset: 0x1c
    float strength; // Offset: 0x20
    int32_t sortOrder; // Offset: 0x24
};

// Original name: MissionInitParamBoolean
// Size: 0x20
// VTable: 0x1499759e0
struct MissionInitParamBoolean {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool value; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: SSequencerItemDoorTaskParams
// Size: 0x20
// VTable: 0x1499f25c0
struct SSequencerItemDoorTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: SEntityObjectCharacterComponentParams
// Size: 0x18
// VTable: 0x149ac4238
struct SEntityObjectCharacterComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LinkedStatRulePassAlwaysNegative
// Size: 0x8
// VTable: 0x1499fd960
struct LinkedStatRulePassAlwaysNegative {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: QuickAccessWheelAutoOperatorModeDef
// Size: 0x10
// VTable: 0x149a9ada8
struct QuickAccessWheelAutoOperatorModeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool openContextMenuAsFolder; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: ControlHintCondition_ActorSightZeroMode
// Size: 0x10
// VTable: 0x149a66110
struct ControlHintCondition_ActorSightZeroMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType sightZeroMode; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: EntityTemperatureSignature
// Size: 0x18
// VTable: 0x1499e5aa0
struct EntityTemperatureSignature {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float minimumTemperatureForIR; // Offset: 0xc
    float temperatureToIR; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: SActorDeathPoseVariant
// Size: 0x40
// VTable: 0x149ab0a70
struct SActorDeathPoseVariant {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* variantName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* mannequinTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* geometryTags; // Offset: 0x28
    uint8_t _pad_3[0x10]; // Offset: 0x30
};

// Original name: FireHazardSpawnParams
// Size: 0x18
// VTable: 0x14997c6e8
struct FireHazardSpawnParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float floorMaxAngle; // Offset: 0x8
    float wallsMaxAngle; // Offset: 0xc
    float ceilingMaxAngle; // Offset: 0x10
    float lodTransitionDistance; // Offset: 0x14
};

// Original name: ControlHintCondition_VehicleMainThrustersState
// Size: 0x10
// VTable: 0x149a66910
struct ControlHintCondition_VehicleMainThrustersState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType mainThrustersState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: ControlHintCondition_VehicleDestroyedState
// Size: 0x10
// VTable: 0x149a66790
struct ControlHintCondition_VehicleDestroyedState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType destroyedState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: TriggerSubConditionActionAreaDef
// Size: 0x38
// VTable: 0x149a895a0
struct TriggerSubConditionActionAreaDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* approachingNpcGUID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* actionAreaSuperGUID; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* locationName; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: ExtendedNameEntryTextBase
// Size: 0x8
// VTable: 0x149a93050
struct ExtendedNameEntryTextBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BulletElectronParams
// Size: 0x18
// VTable: 0x149a18230
struct BulletElectronParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float residualChargeMultiplier; // Offset: 0x8
    int32_t maximumJumps; // Offset: 0xc
    float jumpRange; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: DeltaSignatureSensitivityParams
// Size: 0x10
// VTable: 0x1499c5be8
struct DeltaSignatureSensitivityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float sensitivity; // Offset: 0x8
    float pierce; // Offset: 0xc
};

// Original name: SDFMRaceObjectives
// Size: 0x38
// VTable: 0x149a2b1f8
struct SDFMRaceObjectives {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* lapCompletedTime; // Offset: 0x18
    float lapMessageDisplayTime; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CLocIdentifier* onDeathPenaltyMessage; // Offset: 0x28
    float onDeathPenaltyTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: WaterShapeComponentParams
// Size: 0x18
// VTable: 0x149ac4a98
struct WaterShapeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCZeroGLaunchParams
// Size: 0x20
// VTable: 0x149a9c628
struct SCZeroGLaunchParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxLaunchSpeed; // Offset: 0x8
    float launchRotationDuration; // Offset: 0xc
    float launchEdgeCheckRadius; // Offset: 0x10
    float launchEdgeCheckDistance; // Offset: 0x14
    float launchEdgeSurfaceHoverCheckRadius; // Offset: 0x18
    float launchEdgeSurfaceHoverCheckDistance; // Offset: 0x1c
};

// Original name: AutoMountRadiusParams
// Size: 0x18
// VTable: 0x149a6aa78
struct AutoMountRadiusParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radiusWhenWalking; // Offset: 0x8
    float radiusWhenRunning; // Offset: 0xc
    float radiusWhenSprinting; // Offset: 0x10
    float radiusOffset; // Offset: 0x14
};

// Original name: StringUserVariableTask
// Size: 0x20
// VTable: 0x1499940a0
struct StringUserVariableTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: SWeaponAimDofSettings
// Size: 0x18
// VTable: 0x149a6e9b0
struct SWeaponAimDofSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fstop; // Offset: 0x8
    float focalDistance; // Offset: 0xc
    float focalRange; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: BuildingBlocks_StandardContainerMode
// Size: 0x10
// VTable: 0x149982c10
struct BuildingBlocks_StandardContainerMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool borderLeft; // Offset: 0x8
    bool borderTop; // Offset: 0x9
    bool borderRight; // Offset: 0xa
    bool borderBottom; // Offset: 0xb
    bool enableBackground; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: MissionScenarioScheduleRecurrence
// Size: 0x20
// VTable: 0x149971998
struct MissionScenarioScheduleRecurrence {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* cron; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    uint32_t duration_seconds; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: MusicLogicNode
// Size: 0x8
// VTable: 0x1499b59a8
struct MusicLogicNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CraftingCost_Base_NonRef
// Size: 0x8
// VTable: 0x1499b80e8
struct CraftingCost_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCIGTestBase
// Size: 0x10
// VTable: 0x1499da990
struct SCIGTestBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool bBase; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeModularKitHorizontalAlignment
// Size: 0x10
// VTable: 0x14998c398
struct BuildingBlocks_FieldModifierEnumeratedTypeModularKitHorizontalAlignment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    ARDataType paramField; // Offset: 0xc
};

// Original name: PlacementValidatorPlacingOnMineable
// Size: 0x8
// VTable: 0x149a80d60
struct PlacementValidatorPlacingOnMineable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MissionInitParamInteger
// Size: 0x20
// VTable: 0x149975a40
struct MissionInitParamInteger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t value; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_StaticArrayDataIntegerRange
// Size: 0x28
// VTable: 0x14998aad0
struct BuildingBlocks_StaticArrayDataIntegerRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t numElements; // Offset: 0x18
    int32_t rangeStart; // Offset: 0x1c
    int32_t rangeEnd; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: TriggerSubConditionPlayerActionDef
// Size: 0x30
// VTable: 0x149a89dc0
struct TriggerSubConditionPlayerActionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* action; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool isInverted; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    CryStringT* siblingFailRule; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
};

// Original name: ControlHintCondition_VehicleSalvage
// Size: 0x10
// VTable: 0x149a66e50
struct ControlHintCondition_VehicleSalvage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType state; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SendDockingEnableEvent
// Size: 0x10
// VTable: 0x149a40e90
struct SendDockingEnableEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: LongTermPersistenceSubTypeAll
// Size: 0x10
// VTable: 0x1499b9b80
struct LongTermPersistenceSubTypeAll {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool NotRemove; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: DaylightParticleGroupComponentParams
// Size: 0x20
// VTable: 0x149997050
struct DaylightParticleGroupComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType activationBehavior; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: RestrictedAreaATCComponentParams
// Size: 0x18
// VTable: 0x149a1c2b0
struct RestrictedAreaATCComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: PopupParams
// Size: 0x28
// VTable: 0x1499f9e58
struct PopupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* locTitle; // Offset: 0x8
    CLocIdentifier* locBody; // Offset: 0x10
    CLocIdentifier* locConfirm; // Offset: 0x18
    CLocIdentifier* locDecline; // Offset: 0x20
};

// Original name: AreaShapeComponentParams
// Size: 0x18
// VTable: 0x149ac4a68
struct AreaShapeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ControlHintCondition_ActorPoseState
// Size: 0x10
// VTable: 0x149a65c90
struct ControlHintCondition_ActorPoseState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType poseState; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: FireVoxelSelectionShape
// Size: 0x8
// VTable: 0x14997cbc8
struct FireVoxelSelectionShape {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCIGTestA
// Size: 0x18
// VTable: 0x1499da9f0
struct SCIGTestA {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool bBase; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool bA; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
};

// Original name: SSetHazardEnabledStateGameplayTrigger
// Size: 0x10
// VTable: 0x1499fb570
struct SSetHazardEnabledStateGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool Enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeIconWidgetPreset
// Size: 0x10
// VTable: 0x14998c318
struct BuildingBlocks_FieldModifierEnumeratedTypeIconWidgetPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    ARDataType paramField; // Offset: 0xc
};

// Original name: UIGraph_VehicleLoadoutEditorContextComponent
// Size: 0x8
// VTable: 0x149a581a8
struct UIGraph_VehicleLoadoutEditorContextComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SignatureParams
// Size: 0x10
// VTable: 0x1499ff168
struct SignatureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float defaultBodyTemperature; // Offset: 0x8
    float distressIdentitySignature; // Offset: 0xc
};

// Original name: SetDoorAutoCloseGameplayTrigger
// Size: 0x10
// VTable: 0x1499fb9a0
struct SetDoorAutoCloseGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useAutoCloseDelay; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeStrokeAlignment
// Size: 0x10
// VTable: 0x14998bc70
struct BuildingBlocks_FieldModifierEnumeratedTypeStrokeAlignment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BaseItemModifierParams
// Size: 0x8
// VTable: 0x1499f6a38
struct BaseItemModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GravityShapeComponentParams
// Size: 0x18
// VTable: 0x149ac4a80
struct GravityShapeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: JumpDriveWakeParams
// Size: 0x10
// VTable: 0x149a132c0
struct JumpDriveWakeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxPenetration; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SItemPortConnectionParam
// Size: 0x20
// VTable: 0x1499aef58
struct SItemPortConnectionParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType Klass; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: ActorStateData_StateValidationParams
// Size: 0x10
// VTable: 0x149aad6b0
struct ActorStateData_StateValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stateTimeout; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: DefaultAction_InteractionDef
// Size: 0x18
// VTable: 0x149a8b730
struct DefaultAction_InteractionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* interactionName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: LinkedStatRulePassAboveThreshold
// Size: 0x10
// VTable: 0x1499fd9c0
struct LinkedStatRulePassAboveThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ShipServicesProviderParams
// Size: 0x30
// VTable: 0x149a75aa8
struct ShipServicesProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool repairAvailable; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    CryStringT* servicesClass; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
};

// Original name: SPayFinesGameplayTrigger
// Size: 0x10
// VTable: 0x149968520
struct SPayFinesGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool paySelectedInfractionOnly; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BaseCargoFillCapacityValue
// Size: 0x8
// VTable: 0x1499b7d30
struct BaseCargoFillCapacityValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEASpawnRespawnWaveSchedulerParams
// Size: 0x10
// VTable: 0x149a3bea0
struct SEASpawnRespawnWaveSchedulerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t forceRespawnTimer; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ControlHintCondition_ActorAbilityAvailable
// Size: 0x10
// VTable: 0x149a660b0
struct ControlHintCondition_ActorAbilityAvailable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType ability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: VehicleEditorValueData
// Size: 0x38
// VTable: 0x149a58498
struct VehicleEditorValueData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    ARDataType unit; // Offset: 0x10
    uint8_t decimalPlaces; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    ARDataType compareMode; // Offset: 0x18
    float minActualValue; // Offset: 0x1c
    float maxActualValue; // Offset: 0x20
    bool interpolateToDisplayValues; // Offset: 0x24
    uint8_t _pad_2[0x3]; // Offset: 0x25
    float minDisplayValue; // Offset: 0x28
    float maxDisplayValue; // Offset: 0x2c
    bool clampValuesToMinMax; // Offset: 0x30
    uint8_t _pad_3[0x7]; // Offset: 0x31
};

// Original name: GasCloudLightNoiseParams
// Size: 0x18
// VTable: 0x1499ccac8
struct GasCloudLightNoiseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float frequency; // Offset: 0x8
    float octaves; // Offset: 0xc
    float exponent; // Offset: 0x10
    float effect; // Offset: 0x14
};

// Original name: ControlHintCondition_VehicleEquippedComponents
// Size: 0x10
// VTable: 0x149a66eb0
struct ControlHintCondition_VehicleEquippedComponents {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType equippedComponents; // Offset: 0x8
    uint8_t _pad_1[0x6]; // Offset: 0xa
};

// Original name: GasCloudVDBDataParams
// Size: 0x18
// VTable: 0x1499cc670
struct GasCloudVDBDataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* file; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SPersistentComponentParams
// Size: 0x18
// VTable: 0x1499aa900
struct SPersistentComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: LocStringUserVariable
// Size: 0x20
// VTable: 0x1499946c8
struct LocStringUserVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* defaultValue; // Offset: 0x18
};

// Original name: BuildingBlocks_PreviewScreenWorldRoot
// Size: 0x20
// VTable: 0x1499948a0
struct BuildingBlocks_PreviewScreenWorldRoot {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType renderLayer; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    bool cardsUseStageRadius; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
};

// Original name: SActorForceReactionEffectRangeDef
// Size: 0x10
// VTable: 0x149a4ca68
struct SActorForceReactionEffectRangeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectRangeMin; // Offset: 0x8
    float effectRangeMax; // Offset: 0xc
};

// Original name: IMannequinActionDef
// Size: 0x8
// VTable: 0x149ab1478
struct IMannequinActionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ConsumableParams
// Size: 0x18
// VTable: 0x1499ff0e0
struct ConsumableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float liquidOneShotConsumptionRate; // Offset: 0x8
    float liquidOneShotVisualConsumptionTime; // Offset: 0xc
    float liquidContinuousConsumptionRate; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SCarryParams
// Size: 0x18
// VTable: 0x149a8e180
struct SCarryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float width; // Offset: 0x8
    float height; // Offset: 0xc
    float depth; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: SEntitityEffectSystem_SystemBase
// Size: 0x8
// VTable: 0x149999100
struct SEntitityEffectSystem_SystemBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSequencerTurretRecenterTaskParams
// Size: 0x20
// VTable: 0x149a59d20
struct SSequencerTurretRecenterTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: UIGraph_PMAContextComponent
// Size: 0x8
// VTable: 0x1499f17c0
struct UIGraph_PMAContextComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SVehicleHintActivator
// Size: 0x18
// VTable: 0x1499fb300
struct SVehicleHintActivator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType hint; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    bool onlyPilot; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
};

// Original name: CriminalRecordUIProviderParams
// Size: 0x28
// VTable: 0x1499671a0
struct CriminalRecordUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool displayFelonies; // Offset: 0x18
    bool displayMisdemeanors; // Offset: 0x19
    uint8_t _pad_1[0x2]; // Offset: 0x1a
    float warningTime; // Offset: 0x1c
    bool autoStartRemoveTime; // Offset: 0x20
    uint8_t _pad_2[0x3]; // Offset: 0x21
    float removeTimeUpdateSeconds; // Offset: 0x24
};

// Original name: ChatFilter
// Size: 0x20
// VTable: 0x149aa6128
struct ChatFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t tagId; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* localizedString; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: SRtpcBehaviour
// Size: 0x8
// VTable: 0x149a88508
struct SRtpcBehaviour {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TransitPeripheralParams
// Size: 0x18
// VTable: 0x1499d8f80
struct TransitPeripheralParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_ComponentParameterInputLocalization
// Size: 0x18
// VTable: 0x14998ae80
struct BuildingBlocks_ComponentParameterInputLocalization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* value; // Offset: 0x10
};

// Original name: TransportResponsiveGatewayControlPanelParams
// Size: 0x18
// VTable: 0x1499d9070
struct TransportResponsiveGatewayControlPanelParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SCItemRadarDisplayScreenParams
// Size: 0x20
// VTable: 0x149a5bf10
struct SCItemRadarDisplayScreenParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float fullScreenLerpSpeed; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: MovementRecordingParams
// Size: 0x18
// VTable: 0x149a74758
struct MovementRecordingParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SActorDeathBehaviour
// Size: 0x8
// VTable: 0x149ab09c0
struct SActorDeathBehaviour {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CraftingResearchUnlock_Base
// Size: 0x8
// VTable: 0x1499b8b58
struct CraftingResearchUnlock_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FoIPConfigurationProviderParams
// Size: 0x18
// VTable: 0x1499dd2b0
struct FoIPConfigurationProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: ControlHintCondition_ActorMissionOfferReceived
// Size: 0x10
// VTable: 0x149a66590
struct ControlHintCondition_ActorMissionOfferReceived {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType state; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: BuildingBlocks_TriggerModifyString
// Size: 0x28
// VTable: 0x14998d418
struct BuildingBlocks_TriggerModifyString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* variableName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* value; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: BuildingBlocks_StaticArrayDataNumberRangeRandom
// Size: 0x38
// VTable: 0x14998ac48
struct BuildingBlocks_StaticArrayDataNumberRangeRandom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t numElements; // Offset: 0x18
    float rangeStart; // Offset: 0x1c
    float rangeEnd; // Offset: 0x20
    int32_t randomSeed; // Offset: 0x24
    float randomVariance; // Offset: 0x28
    float falloff; // Offset: 0x2c
    bool allowOverlap; // Offset: 0x30
    bool allowOutsideRange; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
};

// Original name: LightProjectorParams
// Size: 0x20
// VTable: 0x1499a42d0
struct LightProjectorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* texture; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float FOV; // Offset: 0x18
    bool focusedBeam; // Offset: 0x1c
    uint8_t _pad_2[0x3]; // Offset: 0x1d
};

// Original name: ContractPrerequisiteBase
// Size: 0x8
// VTable: 0x149972ad8
struct ContractPrerequisiteBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: Deg3
// Size: 0x20
// VTable: 0x1499ad4f0
struct Deg3 {
    uint8_t _pad_0[0x14]; // Offset: 0x0
    float x; // Offset: 0x14
    float y; // Offset: 0x18
    float z; // Offset: 0x1c
};

// Original name: AreaBaseComponentParams
// Size: 0x28
// VTable: 0x149ac4a10
struct AreaBaseComponentParams {
    uint8_t _pad_0[0x28]; // Offset: 0x0
};

// Original name: ShopFranchise
// Size: 0x10
// VTable: 0x149a3ff90
struct ShopFranchise {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* localizedName; // Offset: 0x8
};

// Original name: SMissionEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31a28
struct SMissionEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SCItemClothingHiddenPartsParams
// Size: 0x18
// VTable: 0x149aa1640
struct SCItemClothingHiddenPartsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* PortName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SecurityManualInput
// Size: 0x8
// VTable: 0x14996f5b0
struct SecurityManualInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: HologramParams
// Size: 0x28
// VTable: 0x14999d428
struct HologramParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* ValidMaterial; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* InvalidMaterial; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: SExplosiveEntryTrackerParams
// Size: 0x8
// VTable: 0x149a31aa0
struct SExplosiveEntryTrackerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEntityandAttachmentsHighlightNode
// Size: 0x8
// VTable: 0x1499a5b88
struct SEntityandAttachmentsHighlightNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DevOwnerType_Base
// Size: 0x18
// VTable: 0x149a910e0
struct DevOwnerType_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: EntityEffectSystem_BaseSequencerTask
// Size: 0x20
// VTable: 0x149998cb8
struct EntityEffectSystem_BaseSequencerTask {
    uint8_t _pad_0[0x20]; // Offset: 0x0
};

// Original name: ControlHintCondition_ActorStatusEffectAcive
// Size: 0x10
// VTable: 0x149a65f90
struct ControlHintCondition_ActorStatusEffectAcive {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statusEffect; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SWeaponActionFireTractorBeamRotationParams
// Size: 0x20
// VTable: 0x149a78c80
struct SWeaponActionFireTractorBeamRotationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float degreesPerAction; // Offset: 0x8
    float maxAngularAcceleration; // Offset: 0xc
    float maxAngularVelocity; // Offset: 0x10
    float degreesPerActionScrollWheel; // Offset: 0x14
    float forceFractionRotation; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeScrollPolicy
// Size: 0x10
// VTable: 0x14998b910
struct BuildingBlocks_FieldModifierEnumeratedTypeScrollPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AIFormulaScoreModifiers
// Size: 0x10
// VTable: 0x149a94958
struct AIFormulaScoreModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float exponent; // Offset: 0x8
    float weight; // Offset: 0xc
};

// Original name: ItemResourceDynamicResourceFuelTank
// Size: 0x8
// VTable: 0x1499a9040
struct ItemResourceDynamicResourceFuelTank {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSubstractHealthRatio
// Size: 0x10
// VTable: 0x1499fb7b0
struct SSubstractHealthRatio {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float healthRatio; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ProximityAssistModifierParams
// Size: 0x20
// VTable: 0x149a75a20
struct ProximityAssistModifierParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float strengthModifier; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SActorForceReactionLeanFilterItemDef
// Size: 0x20
// VTable: 0x149a4b1b0
struct SActorForceReactionLeanFilterItemDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float minImpulse; // Offset: 0xc
    float maxImpulse; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    ARDataType defaultLeanPose; // Offset: 0x18
    uint8_t _pad_3[0x4]; // Offset: 0x1c
};

// Original name: SCItemLightGroupControllerParams
// Size: 0x18
// VTable: 0x1499f3c88
struct SCItemLightGroupControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_StringIntegerPair
// Size: 0x20
// VTable: 0x149987428
struct BuildingBlocks_StringIntegerPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* first; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int64_t second; // Offset: 0x18
};

// Original name: BuildingBlocks_FixedOrRelativeValue
// Size: 0x10
// VTable: 0x149982398
struct BuildingBlocks_FixedOrRelativeValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float value; // Offset: 0x8
    ARDataType behavior; // Offset: 0xc
};

// Original name: SSpawningBase
// Size: 0x20
// VTable: 0x149a0a460
struct SSpawningBase {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool team1AlwaysUsesInitialSpawns; // Offset: 0x18
    bool team2AlwaysUsesInitialSpawns; // Offset: 0x19
    bool groupSpawners; // Offset: 0x1a
    uint8_t _pad_1[0x5]; // Offset: 0x1b
};

// Original name: UI3DDisplayInput
// Size: 0x18
// VTable: 0x149a89238
struct UI3DDisplayInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float sensitivity; // Offset: 0x8
    float deceleration; // Offset: 0xc
    bool hasInertia; // Offset: 0x10
    uint8_t _pad_1[0x3]; // Offset: 0x11
    float speedCap; // Offset: 0x14
};

// Original name: SGeometryModelTagBase
// Size: 0x8
// VTable: 0x1499a1de0
struct SGeometryModelTagBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: CommunicationVariableString
// Size: 0x30
// VTable: 0x14997f460
struct CommunicationVariableString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool global; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    CryStringT* value; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
};

// Original name: CraftingResearch_Base
// Size: 0x8
// VTable: 0x1499b8b70
struct CraftingResearch_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_Range
// Size: 0x10
// VTable: 0x149984928
struct BuildingBlocks_Range {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float min; // Offset: 0x8
    float max; // Offset: 0xc
};

// Original name: InnerThought_CycleAnimRotateY
// Size: 0x20
// VTable: 0x149a98730
struct InnerThought_CycleAnimRotateY {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    float length; // Offset: 0x10
    float amount; // Offset: 0x14
    float stagger; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: WeatherEffects_Atmosphere
// Size: 0x8
// VTable: 0x149997d28
struct WeatherEffects_Atmosphere {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TemperatureDamageControl
// Size: 0x8
// VTable: 0x1499e1878
struct TemperatureDamageControl {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: JumpDriveVelocityStrengthParams
// Size: 0x10
// VTable: 0x1499f4768
struct JumpDriveVelocityStrengthParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxStrengthAngle; // Offset: 0x8
    float minStrengthAngle; // Offset: 0xc
};

// Original name: BuildingBlocks_SlicerBase
// Size: 0x8
// VTable: 0x149991c10
struct BuildingBlocks_SlicerBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SWeaponActionFireTractorBeamMovementParams
// Size: 0x28
// VTable: 0x149a78b88
struct SWeaponActionFireTractorBeamMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minAcceleration; // Offset: 0x8
    float maxAcceleration; // Offset: 0xc
    float accelerationFactor; // Offset: 0x10
    float minSpeed; // Offset: 0x14
    float maxSpeed; // Offset: 0x18
    float enterPushPullThreshold; // Offset: 0x1c
    float exitPushPullThreshold; // Offset: 0x20
    int32_t rotationSingleAxisDeadzone; // Offset: 0x24
};

// Original name: STargetByRaycast
// Size: 0x10
// VTable: 0x149a55900
struct STargetByRaycast {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float rayLength; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ContactTaggingSharedParams
// Size: 0x10
// VTable: 0x1499c5a68
struct ContactTaggingSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float viewAngle; // Offset: 0x8
    float maxTaggingDistance; // Offset: 0xc
};

// Original name: SSCSignatureEmitterParams
// Size: 0x10
// VTable: 0x1499ea5e8
struct SSCSignatureEmitterParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float activeSignature; // Offset: 0x8
    float fullDecayTime; // Offset: 0xc
};

// Original name: ReputationValueSetting
// Size: 0x20
// VTable: 0x149a90e28
struct ReputationValueSetting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float value; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: INavigationCostVolumeExtender
// Size: 0x8
// VTable: 0x14997f9f0
struct INavigationCostVolumeExtender {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EntityComponentRttAspectMFDScanningParams
// Size: 0x20
// VTable: 0x1499c9aa8
struct EntityComponentRttAspectMFDScanningParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType targetRttSlot; // Offset: 0x18
    float aspectRatio; // Offset: 0x1c
};

// Original name: LinkedStatPassCustomValue
// Size: 0x10
// VTable: 0x1499fd8e0
struct LinkedStatPassCustomValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float customValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SCarryAnimationParams
// Size: 0x28
// VTable: 0x149a8e208
struct SCarryAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* motionBase; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* handTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: Marker_AbilityProximityVisibility
// Size: 0x10
// VTable: 0x149a4a990
struct Marker_AbilityProximityVisibility {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float visibilityDistance; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: LegacyMobiGlasParams
// Size: 0x30
// VTable: 0x149a38478
struct LegacyMobiGlasParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float baseXOffset; // Offset: 0x18
    float baseXOffsetMultiplier; // Offset: 0x1c
    float baseYOffset; // Offset: 0x20
    float baseYOffsetMultiplier; // Offset: 0x24
    float baseXAngleMultiplier; // Offset: 0x28
    float baseYAngleMultiplier; // Offset: 0x2c
};

// Original name: BuildingBlocks_StackContainer
// Size: 0x10
// VTable: 0x1499837b8
struct BuildingBlocks_StackContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType direction; // Offset: 0x8
    float spacing; // Offset: 0xc
};

// Original name: SWeaponActionFireTractorBeamGrappleParams
// Size: 0x20
// VTable: 0x149a78d80
struct SWeaponActionFireTractorBeamGrappleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float positiveAccelerationLimit; // Offset: 0x8
    float negativeAccelerationLimit; // Offset: 0xc
    float maxSpeed; // Offset: 0x10
    float coastSpeed; // Offset: 0x14
    float lookOrientationInfluenceFactor; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: HarvestableOverrideAreaParams
// Size: 0x20
// VTable: 0x1499f0728
struct HarvestableOverrideAreaParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x18
    float radius; // Offset: 0x1c
};

// Original name: HarvestableTagListString
// Size: 0x18
// VTable: 0x1499efae0
struct HarvestableTagListString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* tags; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: BuildingBlocks_ComponentParameterInputInteger
// Size: 0x18
// VTable: 0x14998ad60
struct BuildingBlocks_ComponentParameterInputInteger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    int64_t value; // Offset: 0x10
};

// Original name: SEntityEffectSystem_BlinkingModifier
// Size: 0x20
// VTable: 0x149999af0
struct SEntityEffectSystem_BlinkingModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float startDelay; // Offset: 0x8
    float minimumValue; // Offset: 0xc
    float minimumDuration; // Offset: 0x10
    float maximumValue; // Offset: 0x14
    float maximumDuration; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: PlayerHostilityAccidentalFireParams
// Size: 0x18
// VTable: 0x149966278
struct PlayerHostilityAccidentalFireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float damagePercentageThreshold; // Offset: 0x8
    float cooldownDamageHalflife; // Offset: 0xc
    int32_t sustainedFireThreshold; // Offset: 0x10
    float cooldownSustainedFireHalflife; // Offset: 0x14
};

// Original name: HarvestConditionHealth
// Size: 0x10
// VTable: 0x1499efea0
struct HarvestConditionHealth {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float healthRatio; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: AerodynamicCurveParams
// Size: 0x30
// VTable: 0x149a1ad30
struct AerodynamicCurveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float multiplier; // Offset: 0x8
    bool flatPlateSurface; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float liftLevelFlight; // Offset: 0x10
    float peakLift; // Offset: 0x14
    float minLift; // Offset: 0x18
    float negativeAoAMultiplier; // Offset: 0x1c
    float flatPlateMultiplier; // Offset: 0x20
    float criticalAngle; // Offset: 0x24
    float fullyStalledAngle; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: ItemResourceDynamicAmountFuelNozzleFuel
// Size: 0x8
// VTable: 0x1499a9048
struct ItemResourceDynamicAmountFuelNozzleFuel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ControlHintCondition_VehicleDocking
// Size: 0x10
// VTable: 0x149a66a30
struct ControlHintCondition_VehicleDocking {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType docking; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: HackingChipParams
// Size: 0x20
// VTable: 0x149a2b270
struct HackingChipParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t maxCharges; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SEntityTraversingNodeTypeParentEntity
// Size: 0x8
// VTable: 0x14999e888
struct SEntityTraversingNodeTypeParentEntity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: EntryOptionalData_Base
// Size: 0x8
// VTable: 0x1499b39b0
struct EntryOptionalData_Base {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEAAnnouncerParamsDef
// Size: 0x38
// VTable: 0x149a27100
struct SEAAnnouncerParamsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* audioSignalName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* globalAnnouncementVO; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* teamAnnouncementVO; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: ControlHintCondition_ActorZeroGEVAState
// Size: 0x10
// VTable: 0x149a66430
struct ControlHintCondition_ActorZeroGEVAState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType zeroGEVAState; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SAsteroidClusterComponentParams
// Size: 0x78
// VTable: 0x14999f630
struct SAsteroidClusterComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t rngSeed; // Offset: 0x18
    uint8_t viewDistRatio; // Offset: 0x1c
    uint8_t lodRatio; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    CryStringT* composition; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    float noiseAmplitude; // Offset: 0x30
    float noiseGranularity; // Offset: 0x34
    float noiseRoughness; // Offset: 0x38
    uint8_t _pad_3[0xc]; // Offset: 0x3c
    float densityScale; // Offset: 0x48
    uint8_t _pad_4[0x4]; // Offset: 0x4c
    double widthKm; // Offset: 0x50
    double lengthKm; // Offset: 0x58
    double heightKm; // Offset: 0x60
    float noiseFrequencyX; // Offset: 0x68
    float noiseFrequencyY; // Offset: 0x6c
    float noiseFrequencyZ; // Offset: 0x70
    uint8_t _pad_5[0x4]; // Offset: 0x74
};

// Original name: CraftingGameplayProperty_Base_NonRef
// Size: 0x8
// VTable: 0x1499b9528
struct CraftingGameplayProperty_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SetDoorPowerStateEvent
// Size: 0x10
// VTable: 0x1499f2d90
struct SetDoorPowerStateEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType newDoorPowerState; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SHostilityWantedLevelParams
// Size: 0x10
// VTable: 0x149966748
struct SHostilityWantedLevelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t wantedLevel; // Offset: 0x8
    ARDataType comparison; // Offset: 0xc
};

// Original name: DeadBodyParams
// Size: 0x20
// VTable: 0x1499d1d18
struct DeadBodyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool awake; // Offset: 0x18
    bool kinematic; // Offset: 0x19
    uint8_t _pad_1[0x6]; // Offset: 0x1a
};

// Original name: CraftingOptionEffect_Time
// Size: 0x10
// VTable: 0x1499b8470
struct CraftingOptionEffect_Time {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeMultiplier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SToolArmDeployCondition_LandingGear
// Size: 0x10
// VTable: 0x1499e9870
struct SToolArmDeployCondition_LandingGear {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool gearUp; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: InteriorMapWorldUIRoutePathLineParams
// Size: 0x20
// VTable: 0x149a492a8
struct InteriorMapWorldUIRoutePathLineParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* materialPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float lineWidthRatio; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: UIGraph_JournalComponent
// Size: 0x8
// VTable: 0x149a26660
struct UIGraph_JournalComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: TypeSubtypeParams
// Size: 0x10
// VTable: 0x149a99528
struct TypeSubtypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    ARDataType itemSubType; // Offset: 0xc
};

// Original name: ElectricalStateBase
// Size: 0x8
// VTable: 0x1499794c8
struct ElectricalStateBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SBaseResourceUnit
// Size: 0x8
// VTable: 0x1499a1468
struct SBaseResourceUnit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: GlobalResourceAudio
// Size: 0x20
// VTable: 0x1499ae540
struct GlobalResourceAudio {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* audioTrigger; // Offset: 0x8
    uint8_t _pad_1[0x10]; // Offset: 0x10
};

// Original name: CraftingRecipeCosts_Base_NonRef
// Size: 0x8
// VTable: 0x1499b8648
struct CraftingRecipeCosts_Base_NonRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BoundingBoxTraversalCostShapeConfig
// Size: 0x8
// VTable: 0x1499ec9b8
struct BoundingBoxTraversalCostShapeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DefaultActionDef
// Size: 0x8
// VTable: 0x149a8b658
struct DefaultActionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: MissionVariableString
// Size: 0x38
// VTable: 0x149971730
struct MissionVariableString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* value; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
};

// Original name: PUStateParams
// Size: 0x18
// VTable: 0x149a16eb8
struct PUStateParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: HarvestConditionBase
// Size: 0x8
// VTable: 0x1499efd68
struct HarvestConditionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierString
// Size: 0x20
// VTable: 0x14998b0f8
struct BuildingBlocks_FieldModifierString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType field; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* value; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
};

// Original name: MissionDataBankManagementComponentParams
// Size: 0x18
// VTable: 0x14996c578
struct MissionDataBankManagementComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SRefuelAtmosphereComponentParams
// Size: 0x20
// VTable: 0x1499f8700
struct SRefuelAtmosphereComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float boostRefuelMultiplier; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: CharacterNameData
// Size: 0x48
// VTable: 0x1499b1598
struct CharacterNameData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* firstNameString; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* nickNameString; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* lastNameString; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    int32_t firstNames; // Offset: 0x38
    int32_t nickNames; // Offset: 0x3c
    int32_t lastNames; // Offset: 0x40
    uint8_t _pad_4[0x4]; // Offset: 0x44
};

// Original name: SGameRulesComponentParams
// Size: 0x18
// VTable: 0x149a86d80
struct SGameRulesComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: BuildingBlocks_TriggerBindingsHyperLink
// Size: 0x18
// VTable: 0x14998d4e0
struct BuildingBlocks_TriggerBindingsHyperLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* url; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
};

// Original name: SGripShapeParams
// Size: 0x28
// VTable: 0x149a8b4a0
struct SGripShapeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* gripShape; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float dimension; // Offset: 0x18
    float wristRotation; // Offset: 0x1c
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: RadarOptionParams
// Size: 0x10
// VTable: 0x1499d5360
struct RadarOptionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useFPSTagging; // Offset: 0x8
    bool useFPSScanMode; // Offset: 0x9
    bool enableScanMode; // Offset: 0xa
    bool useExperimentalFeatures; // Offset: 0xb
    bool allowDeltaSignature; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeCanvasWidgetSizingMethod
// Size: 0x10
// VTable: 0x14998c030
struct BuildingBlocks_FieldModifierEnumeratedTypeCanvasWidgetSizingMethod {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: ConsumableEffect
// Size: 0x10
// VTable: 0x149a25400
struct ConsumableEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* effectDescription; // Offset: 0x8
};

// Original name: RGBA
// Size: 0x18
// VTable: 0x1499ada28
struct RGBA {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float r; // Offset: 0x8
    float g; // Offset: 0xc
    float b; // Offset: 0x10
    float a; // Offset: 0x14
};

// Original name: SCoreInventoryItem
// Size: 0x20
// VTable: 0x149a45368
struct SCoreInventoryItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* entityClassName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t amount; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: LightShadowParams
// Size: 0x28
// VTable: 0x1499a4420
struct LightShadowParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool shadowCasting; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float projectorNearPlane; // Offset: 0xc
    float constantBias; // Offset: 0x10
    float slopeBiasMultiplier; // Offset: 0x14
    float resolutionScale; // Offset: 0x18
    float maxShadowCastDist; // Offset: 0x1c
    bool disableScreenSpaceShadow; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
};

// Original name: ResourceTypeVolatility
// Size: 0x20
// VTable: 0x149961e68
struct ResourceTypeVolatility {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float volatility; // Offset: 0x18
    float healthDecayPerSecond; // Offset: 0x1c
};

// Original name: SubsumptionConversationComponentParams
// Size: 0x18
// VTable: 0x14997f5f8
struct SubsumptionConversationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: AudioRtpcWithDefault
// Size: 0x28
// VTable: 0x149a884a0
struct AudioRtpcWithDefault {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* rtpc; // Offset: 0x8
    uint8_t _pad_1[0x10]; // Offset: 0x10
    float defaultValue; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: GasCloudLightShadowParams
// Size: 0x18
// VTable: 0x1499ccb70
struct GasCloudLightShadowParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool active; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    uint32_t resolution; // Offset: 0xc
    bool opaqueShadows; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
};

// Original name: SCuttableShapeObjectParams
// Size: 0x18
// VTable: 0x149a0f718
struct SCuttableShapeObjectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float cutMargin; // Offset: 0x8
    float autoCompleteThreshold; // Offset: 0xc
    float meleeCompleteThreshold; // Offset: 0x10
    int32_t segmentsPerLine; // Offset: 0x14
};

// Original name: DockingAutodockingParams
// Size: 0x28
// VTable: 0x149a51970
struct DockingAutodockingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DockingMaximumSpeedRequirement; // Offset: 0x8
    float DockingMaximumAngularSpeedRequirement; // Offset: 0xc
    float DockingMinimumAngularAlignmentAngle; // Offset: 0x10
    float DockingHoldForCompletionTime; // Offset: 0x14
    float DockingMaximumAngleFromDockingPoint; // Offset: 0x18
    float DockingAngularTiltForShipGeometry; // Offset: 0x1c
    float DockingMinimumDistance; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: EASpawnModifierParams
// Size: 0x18
// VTable: 0x149a3c2a8
struct EASpawnModifierParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: FunctionalityModifierLinear
// Size: 0x10
// VTable: 0x1499a7858
struct FunctionalityModifierLinear {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minFunctionalityMultiplier; // Offset: 0x8
    float maxFunctionalityMultiplier; // Offset: 0xc
};

// Original name: SCItemTurretCustomAngleLimit
// Size: 0x18
// VTable: 0x149a59ff0
struct SCItemTurretCustomAngleLimit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float TurretRotation; // Offset: 0x8
    float LowestAngle; // Offset: 0xc
    float HighestAngle; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: RefineryNotificationConfiguration
// Size: 0x40
// VTable: 0x1499e1820
struct RefineryNotificationConfiguration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float duration; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* text; // Offset: 0x10
    CLocIdentifier* textMultiple; // Offset: 0x18
    CLocIdentifier* refineryServiceError; // Offset: 0x20
    CLocIdentifier* refineryDeliveryFailed; // Offset: 0x28
    CLocIdentifier* refineryJobCreationFailed; // Offset: 0x30
    CLocIdentifier* refinerySetupError; // Offset: 0x38
};

// Original name: ItemResourceDynamicResourceBase
// Size: 0x8
// VTable: 0x1499a73f8
struct ItemResourceDynamicResourceBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: ItemResourceControlParameterRNParameter
// Size: 0x10
// VTable: 0x1499a8bc0
struct ItemResourceControlParameterRNParameter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BuildingBlocks_FieldModifierEnumeratedTypeCaseModifier
// Size: 0x10
// VTable: 0x14998bf10
struct BuildingBlocks_FieldModifierEnumeratedTypeCaseModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType value; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: BaseMissionPropertyValue
// Size: 0x8
// VTable: 0x149969280
struct BaseMissionPropertyValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SEntityTraversingNodeTypeZoneHostEntity
// Size: 0x8
// VTable: 0x14999e890
struct SEntityTraversingNodeTypeZoneHostEntity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: DamageInfo
// Size: 0x20
// VTable: 0x1499ae038
struct DamageInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DamagePhysical; // Offset: 0x8
    float DamageEnergy; // Offset: 0xc
    float DamageDistortion; // Offset: 0x10
    float DamageThermal; // Offset: 0x14
    float DamageBiochemical; // Offset: 0x18
    float DamageStun; // Offset: 0x1c
};

// Original name: SEntityTraversingNodeTypeParams
// Size: 0x8
// VTable: 0x14999e708
struct SEntityTraversingNodeTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: QuantumDriveNotification
// Size: 0x28
// VTable: 0x149a52470
struct QuantumDriveNotification {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* title; // Offset: 0x8
    CLocIdentifier* message; // Offset: 0x10
    float screenTimer; // Offset: 0x18
    float hurryScreenTimer; // Offset: 0x1c
    bool blocking; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: UIGraph_MissionMgrComponent
// Size: 0x8
// VTable: 0x149a30a18
struct UIGraph_MissionMgrComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: BuildingBlocks_OrbitTransformer
// Size: 0x10
// VTable: 0x1499910c0
struct BuildingBlocks_OrbitTransformer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float distance; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: LinearModifierInterpolator
// Size: 0x10
// VTable: 0x1499f6970
struct LinearModifierInterpolator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float startTime; // Offset: 0x8
    float duration; // Offset: 0xc
};

// Original name: AreaTriggerParams
// Size: 0x28
// VTable: 0x149a04aa8
struct AreaTriggerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enabled; // Offset: 0x18
    bool triggerOnce; // Offset: 0x19
    bool onlyPlayers; // Offset: 0x1a
    bool onlyLocalPlayer; // Offset: 0x1b
    bool onlyAI; // Offset: 0x1c
    bool inVehicleOnly; // Offset: 0x1d
    bool removeEntityOnTrigger; // Offset: 0x1e
    bool perPlayer; // Offset: 0x1f
    float enterDelay; // Offset: 0x20
    float exitDelay; // Offset: 0x24
};

// Original name: AISeatWeaponControllerComponentParams
// Size: 0x18
// VTable: 0x149a74478
struct AISeatWeaponControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SEARounds
// Size: 0x28
// VTable: 0x149a0a368
struct SEARounds {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    uint8_t numberOfRounds; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float timeBetweenRounds; // Offset: 0x1c
    float scoreboardDisplayDelay; // Offset: 0x20
    bool midRoundJoining; // Offset: 0x24
    uint8_t _pad_2[0x3]; // Offset: 0x25
};

// Original name: StatusEffect
// Size: 0x18
// VTable: 0x1499fc2f0
struct StatusEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    float value; // Offset: 0xc
    float duration; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: CraftingGameplayPropertyImplValueRange_Float
// Size: 0x18
// VTable: 0x1499b9430
struct CraftingGameplayPropertyImplValueRange_Float {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t statThreshold; // Offset: 0x8
    float defaultValue; // Offset: 0xc
    float limitValue; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: WeaponAIAimingMethodPreferredHeightArc
// Size: 0x30
// VTable: 0x149a60d00
struct WeaponAIAimingMethodPreferredHeightArc {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minProjectileSpeed; // Offset: 0x8
    float maxProjectileSpeed; // Offset: 0xc
    float preferredHeight; // Offset: 0x10
    float minHeight; // Offset: 0x14
    float maxHeight; // Offset: 0x18
    float angleIncrement; // Offset: 0x1c
    float minAngleDegrees; // Offset: 0x20
    float maxAngleDegrees; // Offset: 0x24
    int32_t searchDepth; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: SpeedThreshold
// Size: 0x10
// VTable: 0x1499fc3d8
struct SpeedThreshold {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float inventoryWeight; // Offset: 0x8
    float speedFactor; // Offset: 0xc
};

// Original name: BuildingBlocks_ComponentParameterInputBase
// Size: 0x10
// VTable: 0x14998aca0
struct BuildingBlocks_ComponentParameterInputBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: SEntityTraversingNodeTypeRootEntity
// Size: 0x8
// VTable: 0x14999e7c8
struct SEntityTraversingNodeTypeRootEntity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: InventoryContainerTypeBase
// Size: 0x8
// VTable: 0x149a9e018
struct InventoryContainerTypeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: FixedPowerPool
// Size: 0x18
// VTable: 0x1499a2d70
struct FixedPowerPool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    int32_t poolSize; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
};

// Original name: BoidsNavmeshEdgeRepelRule
// Size: 0x20
// VTable: 0x1499ec2d0
struct BoidsNavmeshEdgeRepelRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityScale; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float effectDistance; // Offset: 0x10
    float decayCoefficient; // Offset: 0x14
    float maxAcceleration; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
};

// Original name: UIGraph_ShopKioskVehicleLoadoutEditorContextComponent
// Size: 0x8
// VTable: 0x149a581b8
struct UIGraph_ShopKioskVehicleLoadoutEditorContextComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SActorForceReactionProceduralLeanPoseList
// Size: 0x8
// VTable: 0x149a4d848
struct SActorForceReactionProceduralLeanPoseList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: SSubstractHealthValue
// Size: 0x10
// VTable: 0x1499fb6f0
struct SSubstractHealthValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float healthValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
};

// Original name: LoadoutResponseParams
// Size: 0x18
// VTable: 0x1499e2748
struct LoadoutResponseParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: SMastergraphStateOverride
// Size: 0x28
// VTable: 0x14997e0d8
struct SMastergraphStateOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* mastergraphStateName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* subsumptionActivityName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
};

// Original name: Marker_AbilityEntityGeometry
// Size: 0x10
// VTable: 0x149a4a9f0
struct Marker_AbilityEntityGeometry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool showWhenOffScreen; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
};

// Original name: SMissionMarkerObjectMetadataParams
// Size: 0x18
// VTable: 0x1499e8018
struct SMissionMarkerObjectMetadataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* label; // Offset: 0x8
    bool showDistance; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
};

// Original name: UIGraph_SkyLineComponent
// Size: 0x8
// VTable: 0x1499f1840
struct UIGraph_SkyLineComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
};

// Original name: RGB8
// Size: 0x10
// VTable: 0x1499ad650
struct RGB8 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t r; // Offset: 0x8
    uint8_t g; // Offset: 0x9
    uint8_t b; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
};

// Original name: SDamageMapShaderValueDetails
// Size: 0x18
// VTable: 0x149a79fd0
struct SDamageMapShaderValueDetails {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float damage; // Offset: 0x8
    float innerRadius; // Offset: 0xc
    float outerRadius; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
};

// Original name: PlanetWeatherParams
// Size: 0x38
// VTable: 0x14999d060
struct PlanetWeatherParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maximumWindSpeed; // Offset: 0x8
    float airDensity; // Offset: 0xc
    CryStringT* windMapOverride; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    float windMapOffset; // Offset: 0x20
    float windMapRotationSpeed; // Offset: 0x24
    float windGustStrengthRange; // Offset: 0x28
    float windGustSpeedMultiplier; // Offset: 0x2c
    uint16_t windGustRepetitionAmount; // Offset: 0x30
    bool enablePlanetaryGroundEffects; // Offset: 0x32
    uint8_t _pad_2[0x5]; // Offset: 0x33
};

// Original name: EntityComponentResourceNetworkUIProviderParams
// Size: 0x18
// VTable: 0x1499a9190
struct EntityComponentResourceNetworkUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
};

// Original name: DynArray_float
// Generated DynArray for base type: float
// Size: 0x8
struct DynArray_float {
    float* m_data; // Offset: 0x0
};

// Original name: DynArray_bool
// Generated DynArray for base type: bool
// Size: 0x8
struct DynArray_bool {
    bool* m_data; // Offset: 0x0
};

// Original name: DynArray_ARDataType
// Generated DynArray for base type: ARDataType
// Size: 0x8
struct DynArray_ARDataType {
    ARDataType* m_data; // Offset: 0x0
};

// Original name: DynArray_CryStringT
// Generated DynArray for base type: CryStringT
// Size: 0x8
struct DynArray_CryStringT {
    CryStringT* m_data; // Offset: 0x0
};

// Original name: DynArray_CLocIdentifier
// Generated DynArray for base type: CLocIdentifier
// Size: 0x8
struct DynArray_CLocIdentifier {
    CLocIdentifier* m_data; // Offset: 0x0
};

// Original name: DynArray_int64_t
// Generated DynArray for base type: int64_t
// Size: 0x8
struct DynArray_int64_t {
    int64_t* m_data; // Offset: 0x0
};

// Original name: DynArray_int32_t
// Generated DynArray for base type: int32_t
// Size: 0x8
struct DynArray_int32_t {
    int32_t* m_data; // Offset: 0x0
};

// Original name: DynArray_uint32_t
// Generated DynArray for base type: uint32_t
// Size: 0x8
struct DynArray_uint32_t {
    uint32_t* m_data; // Offset: 0x0
};

// Original name: DynArray_int8_t
// Generated DynArray for base type: int8_t
// Size: 0x8
struct DynArray_int8_t {
    int8_t* m_data; // Offset: 0x0
};

// Original name: DynArray_int16_t
// Generated DynArray for base type: int16_t
// Size: 0x8
struct DynArray_int16_t {
    int16_t* m_data; // Offset: 0x0
};

// Original name: DynArray_uint8_t
// Generated DynArray for base type: uint8_t
// Size: 0x8
struct DynArray_uint8_t {
    uint8_t* m_data; // Offset: 0x0
};

// Original name: DynArray_uint16_t
// Generated DynArray for base type: uint16_t
// Size: 0x8
struct DynArray_uint16_t {
    uint16_t* m_data; // Offset: 0x0
};

// Original name: DynArray_uint64_t
// Generated DynArray for base type: uint64_t
// Size: 0x8
struct DynArray_uint64_t {
    uint64_t* m_data; // Offset: 0x0
};

// Original name: DynArray_double
// Generated DynArray for base type: double
// Size: 0x8
struct DynArray_double {
    double* m_data; // Offset: 0x0
};

// Original name: DynArray_CraftingResult_Base
// Generated DynArray for base type: CraftingResult_Base
// Size: 0x8
struct DynArray_CraftingResult_Base {
    CraftingResult_Base* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_SVGContainerMode
// Size: 0x38
// VTable: 0x149982c98
struct BuildingBlocks_SVGContainerMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* svgPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_TRBL nineSliceRect; // Offset: 0x18
};

// Original name: ArmorMoveViewRestrictions
// Size: 0x38
// VTable: 0x149a7dd68
struct ArmorMoveViewRestrictions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MoveViewRestrictionWeighting ViewRestriction; // Offset: 0x8
    MoveViewRestrictionWeighting MoveRestriction; // Offset: 0x20
};

// Original name: DynArray_SShieldAbsorption
// Generated DynArray for base type: SShieldAbsorption
// Size: 0x8
struct DynArray_SShieldAbsorption {
    SShieldAbsorption* m_data; // Offset: 0x0
};

// Original name: SEntityTraversingNodeUniqueId
// Size: 0x20
// VTable: 0x14999ea50
struct SEntityTraversingNodeUniqueId {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityTraversingNodeId id; // Offset: 0x8
};

// Original name: BulletVisualParams
// Size: 0x50
// VTable: 0x149a18180
struct BulletVisualParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceMaterial Material; // Offset: 0x8
    float maxLength; // Offset: 0x20
    float meshOffset; // Offset: 0x24
    float geometryRadius; // Offset: 0x28
    int32_t renderFrequency; // Offset: 0x2c
    float renderProbability; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
    CryStringT* hitEffect; // Offset: 0x38
    uint8_t _pad_2[0x10]; // Offset: 0x40
};

// Original name: DynArray_SApplicationFormHead
// Generated DynArray for base type: SApplicationFormHead
// Size: 0x8
struct DynArray_SApplicationFormHead {
    SApplicationFormHead* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_BindingsPathBase
// Generated DynArray for base type: BuildingBlocks_BindingsPathBase
// Size: 0x8
struct DynArray_BuildingBlocks_BindingsPathBase {
    BuildingBlocks_BindingsPathBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SMFDOperatorModeConfig
// Generated DynArray for base type: SMFDOperatorModeConfig
// Size: 0x8
struct DynArray_SMFDOperatorModeConfig {
    SMFDOperatorModeConfig* m_data; // Offset: 0x0
};

// Original name: DynArray_StanceBreathModifier
// Generated DynArray for base type: StanceBreathModifier
// Size: 0x8
struct DynArray_StanceBreathModifier {
    StanceBreathModifier* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorCapability
// Generated DynArray for base type: VehicleEditorCapability
// Size: 0x8
struct DynArray_VehicleEditorCapability {
    VehicleEditorCapability* m_data; // Offset: 0x0
};

// Original name: DynArray_FireHazardFireProperties
// Generated DynArray for base type: FireHazardFireProperties
// Size: 0x8
struct DynArray_FireHazardFireProperties {
    FireHazardFireProperties* m_data; // Offset: 0x0
};

// Original name: DynArray_ControlHints_KeyInput
// Generated DynArray for base type: ControlHints_KeyInput
// Size: 0x8
struct DynArray_ControlHints_KeyInput {
    ControlHints_KeyInput* m_data; // Offset: 0x0
};

// Original name: DynArray_SSCSignatureSystemAudioSubRule
// Generated DynArray for base type: SSCSignatureSystemAudioSubRule
// Size: 0x8
struct DynArray_SSCSignatureSystemAudioSubRule {
    SSCSignatureSystemAudioSubRule* m_data; // Offset: 0x0
};

// Original name: DynArray_SEffectParamsNodeBase
// Generated DynArray for base type: SEffectParamsNodeBase
// Size: 0x8
struct DynArray_SEffectParamsNodeBase {
    SEffectParamsNodeBase* m_data; // Offset: 0x0
};

// Original name: DynArray_MovementSpeedOverride
// Generated DynArray for base type: MovementSpeedOverride
// Size: 0x8
struct DynArray_MovementSpeedOverride {
    MovementSpeedOverride* m_data; // Offset: 0x0
};

// Original name: ActorRestrainPerAttackerConfig
// Size: 0x20
// VTable: 0x149a57978
struct ActorRestrainPerAttackerConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorStateSkeletonFilter attackerSkeleton; // Offset: 0x8
    float frontalQuadrantAngle; // Offset: 0x18
    bool immuneToRestrain; // Offset: 0x1c
    bool interruptOnHitReaction; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
};

// Original name: JumpTunnelCubeMapParams
// Size: 0x68
// VTable: 0x149a12fa8
struct JumpTunnelCubeMapParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceTextureDDS entrySpecProbe; // Offset: 0x8
    GlobalResourceTextureDDS entryDiffProbe; // Offset: 0x20
    GlobalResourceTextureDDS exitSpecProbe; // Offset: 0x38
    GlobalResourceTextureDDS exitDiffProbe; // Offset: 0x50
};

// Original name: DynArray_SCDynamicRigLightEnabledParams
// Generated DynArray for base type: SCDynamicRigLightEnabledParams
// Size: 0x8
struct DynArray_SCDynamicRigLightEnabledParams {
    SCDynamicRigLightEnabledParams* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemResourceControlConditionBase
// Generated DynArray for base type: ItemResourceControlConditionBase
// Size: 0x8
struct DynArray_ItemResourceControlConditionBase {
    ItemResourceControlConditionBase* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldTransitionBase
// Size: 0x28
// VTable: 0x1499864a0
struct BuildingBlocks_FieldTransitionBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float duration; // Offset: 0x8
    float delay; // Offset: 0xc
    float delayRandomRange; // Offset: 0x10
    bool timescaleIndependent; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    BuildingBlocks_TimingFunctionBase timingFunction; // Offset: 0x18
};

// Original name: BuildingBlocks_LayoutItemCommon
// Size: 0x28
// VTable: 0x149983888
struct BuildingBlocks_LayoutItemCommon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t order; // Offset: 0x8
    float transitionDuration; // Offset: 0x10
    float transitionDelay; // Offset: 0x14
    BuildingBlocks_TimingFunctionBase timingFunction; // Offset: 0x18
};

// Original name: BuildingBlocks_FieldTransitionNumber
// Size: 0x30
// VTable: 0x149986500
struct BuildingBlocks_FieldTransitionNumber {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float duration; // Offset: 0x8
    float delay; // Offset: 0xc
    float delayRandomRange; // Offset: 0x10
    bool timescaleIndependent; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    BuildingBlocks_TimingFunctionBase timingFunction; // Offset: 0x18
    ARDataType field; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: BuildingBlocks_FieldTransitionColor
// Size: 0x30
// VTable: 0x149986560
struct BuildingBlocks_FieldTransitionColor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float duration; // Offset: 0x8
    float delay; // Offset: 0xc
    float delayRandomRange; // Offset: 0x10
    bool timescaleIndependent; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    BuildingBlocks_TimingFunctionBase timingFunction; // Offset: 0x18
    ARDataType field; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: DynArray_BoolUserVariableTask
// Generated DynArray for base type: BoolUserVariableTask
// Size: 0x8
struct DynArray_BoolUserVariableTask {
    BoolUserVariableTask* m_data; // Offset: 0x0
};

// Original name: SSetHealthGameplayTrigger
// Size: 0x18
// VTable: 0x1499fb050
struct SSetHealthGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TriggeredHealth Health; // Offset: 0x8
};

// Original name: DynArray_VehicleSerialNumberCharacterType
// Generated DynArray for base type: VehicleSerialNumberCharacterType
// Size: 0x8
struct DynArray_VehicleSerialNumberCharacterType {
    VehicleSerialNumberCharacterType* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerBlemishMapParams
// Generated DynArray for base type: SCharacterCustomizerBlemishMapParams
// Size: 0x8
struct DynArray_SCharacterCustomizerBlemishMapParams {
    SCharacterCustomizerBlemishMapParams* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_TextFormatModifierBase
// Generated DynArray for base type: BuildingBlocks_TextFormatModifierBase
// Size: 0x8
struct DynArray_BuildingBlocks_TextFormatModifierBase {
    BuildingBlocks_TextFormatModifierBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SArmouryItemFilter
// Generated DynArray for base type: SArmouryItemFilter
// Size: 0x8
struct DynArray_SArmouryItemFilter {
    SArmouryItemFilter* m_data; // Offset: 0x0
};

// Original name: MagLaunchParams
// Size: 0x48
// VTable: 0x149a759c0
struct MagLaunchParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float liftHeight; // Offset: 0x18
    float liftAcceleration; // Offset: 0x1c
    float maxTimeWaitAfterLift; // Offset: 0x20
    float launchAcceleration; // Offset: 0x24
    float launchLength; // Offset: 0x28
    bool automateLandingGear; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    MagLaunchNoiseParams noiseParams; // Offset: 0x30
};

// Original name: SimpleSpriteSlotDouble
// Size: 0x30
// VTable: 0x149aa57d8
struct SimpleSpriteSlotDouble {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SimpleSpriteSheet sheet; // Offset: 0x8
    bool flipU; // Offset: 0x20
    bool flipV; // Offset: 0x21
    uint8_t row; // Offset: 0x22
    uint8_t column; // Offset: 0x23
    uint8_t _pad_1[0x4]; // Offset: 0x24
    uint8_t rowAlt; // Offset: 0x28
    uint8_t columnAlt; // Offset: 0x29
    uint8_t _pad_2[0x6]; // Offset: 0x2a
};

// Original name: SimpleSpriteSlot
// Size: 0x28
// VTable: 0x149a883e0
struct SimpleSpriteSlot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SimpleSpriteSheet sheet; // Offset: 0x8
    bool flipU; // Offset: 0x20
    bool flipV; // Offset: 0x21
    uint8_t row; // Offset: 0x22
    uint8_t column; // Offset: 0x23
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: DynArray_ScanCustomData
// Generated DynArray for base type: ScanCustomData
// Size: 0x8
struct DynArray_ScanCustomData {
    ScanCustomData* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeaponActionAIParams
// Generated DynArray for base type: SWeaponActionAIParams
// Size: 0x8
struct DynArray_SWeaponActionAIParams {
    SWeaponActionAIParams* m_data; // Offset: 0x0
};

// Original name: DynArray_GameModeFilter
// Generated DynArray for base type: GameModeFilter
// Size: 0x8
struct DynArray_GameModeFilter {
    GameModeFilter* m_data; // Offset: 0x0
};

// Original name: DynArray_ActionAreaExtensionType
// Generated DynArray for base type: ActionAreaExtensionType
// Size: 0x8
struct DynArray_ActionAreaExtensionType {
    ActionAreaExtensionType* m_data; // Offset: 0x0
};

// Original name: DynArray_AnnouncementGameToken
// Generated DynArray for base type: AnnouncementGameToken
// Size: 0x8
struct DynArray_AnnouncementGameToken {
    AnnouncementGameToken* m_data; // Offset: 0x0
};

// Original name: VisibilityCondition
// Size: 0x20
// VTable: 0x149a4a7b8
struct VisibilityCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    VisibilityConditionDef condition; // Offset: 0x8
    bool show; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: DynArray_VisibilityConditionDef
// Generated DynArray for base type: VisibilityConditionDef
// Size: 0x8
struct DynArray_VisibilityConditionDef {
    VisibilityConditionDef* m_data; // Offset: 0x0
};

// Original name: PlayerTradeGlobalParams
// Size: 0xf0
// VTable: 0x1499e4c08
struct PlayerTradeGlobalParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float taxRate; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* taxText; // Offset: 0x20
    CLocIdentifier* currencyTextUEC; // Offset: 0x28
    CLocIdentifier* currencyTextREC; // Offset: 0x30
    CLocIdentifier* currencyTextMER; // Offset: 0x38
    CLocIdentifier* searchWindowTitleText; // Offset: 0x40
    CLocIdentifier* resultsListTitleText; // Offset: 0x48
    CLocIdentifier* partyListTitleText; // Offset: 0x50
    CLocIdentifier* contactsListTitleText; // Offset: 0x58
    CLocIdentifier* basketWindowTitleText; // Offset: 0x60
    CLocIdentifier* sendStatusWindowTitleText; // Offset: 0x68
    int32_t searchDelayInMilliSeconds; // Offset: 0x70
    int32_t searchResultListLimit; // Offset: 0x74
    PlayerTradeNotification notification; // Offset: 0x78
};

// Original name: DynArray_PlanetEffectLODDistance
// Generated DynArray for base type: PlanetEffectLODDistance
// Size: 0x8
struct DynArray_PlanetEffectLODDistance {
    PlanetEffectLODDistance* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityComponentHealth_SBaseSequencerTask
// Generated DynArray for base type: EntityComponentHealth_SBaseSequencerTask
// Size: 0x8
struct DynArray_EntityComponentHealth_SBaseSequencerTask {
    EntityComponentHealth_SBaseSequencerTask* m_data; // Offset: 0x0
};

// Original name: ActorStatusAddBuff
// Size: 0x30
// VTable: 0x1499fc930
struct ActorStatusAddBuff {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType buffType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    BuffDurationBase durationOverride; // Offset: 0x10
    BuffValueOverride valueOverride; // Offset: 0x20
};

// Original name: ConsumableEffectAddBuffEffect
// Size: 0x38
// VTable: 0x149a25510
struct ConsumableEffectAddBuffEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* effectDescription; // Offset: 0x8
    ARDataType buffType; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    BuffDurationBase buffDurationOverride; // Offset: 0x18
    BuffValueOverride buffValueOverride; // Offset: 0x28
};

// Original name: SLoadoutRequirementNOT
// Size: 0x18
// VTable: 0x1499a7140
struct SLoadoutRequirementNOT {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SLoadoutRequirementBase RequirementToInvert; // Offset: 0x8
};

// Original name: DynArray_SLoadoutRequirementBase
// Generated DynArray for base type: SLoadoutRequirementBase
// Size: 0x8
struct DynArray_SLoadoutRequirementBase {
    SLoadoutRequirementBase* m_data; // Offset: 0x0
};

// Original name: RestrictedAreaPatchParams
// Size: 0x38
// VTable: 0x149a1c938
struct RestrictedAreaPatchParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    RestrictedAreaPatchTypes patchTypes; // Offset: 0x18
    bool defaultActive; // Offset: 0x28
    uint8_t _pad_1[0x3]; // Offset: 0x29
    int32_t priority; // Offset: 0x2c
    bool affectsShips; // Offset: 0x30
    bool affectsGroundVehicles; // Offset: 0x31
    bool affectsActors; // Offset: 0x32
    uint8_t _pad_2[0x5]; // Offset: 0x33
};

// Original name: ScreenEffects_ParamValue_Texture
// Size: 0x20
// VTable: 0x14999c220
struct ScreenEffects_ParamValue_Texture {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceTexture value; // Offset: 0x8
};

// Original name: DynArray_GlobalResourceTexture
// Generated DynArray for base type: GlobalResourceTexture
// Size: 0x8
struct DynArray_GlobalResourceTexture {
    GlobalResourceTexture* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsColorFromString
// Size: 0x68
// VTable: 0x149985d18
struct BuildingBlocks_BindingsColorFromString {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsStringBase input; // Offset: 0x50
    bool threeChannels; // Offset: 0x60
    uint8_t _pad_1[0x7]; // Offset: 0x61
};

// Original name: BindingsOperation_BooleanFromStringIsEmpty
// Size: 0x60
// VTable: 0x1499818c0
struct BindingsOperation_BooleanFromStringIsEmpty {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsStringBase input; // Offset: 0x50
};

// Original name: BuildingBlocks_StringStringPair
// Size: 0x38
// VTable: 0x1499894c0
struct BuildingBlocks_StringStringPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* first; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* second; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    BuildingBlocks_BindingsStringBase secondOverride; // Offset: 0x28
};

// Original name: BuildingBlocks_NumberStringPair
// Size: 0x30
// VTable: 0x149989570
struct BuildingBlocks_NumberStringPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float first; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* second; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    BuildingBlocks_BindingsStringBase secondOverride; // Offset: 0x20
};

// Original name: BindingsOperation_BooleanFromStringComparison
// Size: 0x130
// VTable: 0x149981998
struct BindingsOperation_BooleanFromStringComparison {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    CryStringT* leftString; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    CryStringT* rightString; // Offset: 0x60
    uint8_t _pad_2[0x8]; // Offset: 0x68
    BuildingBlocks_BindingsStringBase inputLeft; // Offset: 0x70
    BuildingBlocks_BindingsStringBase inputRight; // Offset: 0x80
    uint8_t _pad_3[0xa0]; // Offset: 0x90
};

// Original name: BuildingBlocks_IntegerStringPair
// Size: 0x30
// VTable: 0x149989310
struct BuildingBlocks_IntegerStringPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t first; // Offset: 0x8
    CryStringT* second; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    BuildingBlocks_BindingsStringBase secondOverride; // Offset: 0x20
};

// Original name: BindingsOperations_StringCombine
// Size: 0x128
// VTable: 0x149989978
struct BindingsOperations_StringCombine {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    bool withSpace; // Offset: 0x50
    uint8_t _pad_1[0x7]; // Offset: 0x51
    CryStringT* value; // Offset: 0x58
    uint8_t _pad_2[0x8]; // Offset: 0x60
    BuildingBlocks_BindingsStringBase inputL; // Offset: 0x68
    BuildingBlocks_BindingsStringBase inputR; // Offset: 0x78
    uint8_t _pad_3[0xa0]; // Offset: 0x88
};

// Original name: DynArray_MusicLogicEvent
// Generated DynArray for base type: MusicLogicEvent
// Size: 0x8
struct DynArray_MusicLogicEvent {
    MusicLogicEvent* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsBooleanCompare
// Size: 0x118
// VTable: 0x1499816d8
struct BuildingBlocks_BindingsBooleanCompare {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    bool value; // Offset: 0x50
    uint8_t _pad_1[0x3]; // Offset: 0x51
    ARDataType type_; /* type */ // Offset: 0x54
    BuildingBlocks_BindingsBooleanBase inputL; // Offset: 0x58
    BuildingBlocks_BindingsBooleanBase inputR; // Offset: 0x68
    uint8_t _pad_2[0xa0]; // Offset: 0x78
};

// Original name: BuildingBlocks_BindingsStringFromBoolean
// Size: 0x190
// VTable: 0x1499898a0
struct BuildingBlocks_BindingsStringFromBoolean {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    CryStringT* isTrue; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    CryStringT* isFalse; // Offset: 0x60
    uint8_t _pad_2[0x8]; // Offset: 0x68
    BuildingBlocks_BindingsStringBase inputTrue; // Offset: 0x70
    BuildingBlocks_BindingsStringBase inputFalse; // Offset: 0x80
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0x90
    uint8_t _pad_3[0xf0]; // Offset: 0xa0
};

// Original name: BuildingBlocks_BindingsBooleanInvert
// Size: 0x60
// VTable: 0x149981730
struct BuildingBlocks_BindingsBooleanInvert {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0x50
};

// Original name: DynArray_BuildingBlocks_BindingsBooleanBase
// Generated DynArray for base type: BuildingBlocks_BindingsBooleanBase
// Size: 0x8
struct DynArray_BuildingBlocks_BindingsBooleanBase {
    BuildingBlocks_BindingsBooleanBase* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionVariableBase
// Generated DynArray for base type: MissionVariableBase
// Size: 0x8
struct DynArray_MissionVariableBase {
    MissionVariableBase* m_data; // Offset: 0x0
};

// Original name: DynArray_ContextMenuOption
// Generated DynArray for base type: ContextMenuOption
// Size: 0x8
struct DynArray_ContextMenuOption {
    ContextMenuOption* m_data; // Offset: 0x0
};

// Original name: DynArray_HoldExhaleDuration
// Generated DynArray for base type: HoldExhaleDuration
// Size: 0x8
struct DynArray_HoldExhaleDuration {
    HoldExhaleDuration* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemPortViewInformation
// Generated DynArray for base type: ItemPortViewInformation
// Size: 0x8
struct DynArray_ItemPortViewInformation {
    ItemPortViewInformation* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionsProceduralLeanOverride
// Generated DynArray for base type: SActorForceReactionsProceduralLeanOverride
// Size: 0x8
struct DynArray_SActorForceReactionsProceduralLeanOverride {
    SActorForceReactionsProceduralLeanOverride* m_data; // Offset: 0x0
};

// Original name: DynArray_VibrationTypeData
// Generated DynArray for base type: VibrationTypeData
// Size: 0x8
struct DynArray_VibrationTypeData {
    VibrationTypeData* m_data; // Offset: 0x0
};

// Original name: DynArray_CtxGraph_Node
// Generated DynArray for base type: CtxGraph_Node
// Size: 0x8
struct DynArray_CtxGraph_Node {
    CtxGraph_Node* m_data; // Offset: 0x0
};

// Original name: GameRulesEAStatePreGameParams
// Size: 0x38
// VTable: 0x149a3a678
struct GameRulesEAStatePreGameParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    int32_t requiredPlayers; // Offset: 0xc
    bool enableIntro; // Offset: 0x10
    bool movementEnabled; // Offset: 0x11
    uint8_t _pad_2[0x2]; // Offset: 0x12
    float balanceTeamsCountdown; // Offset: 0x14
    float gameStartCountdown; // Offset: 0x18
    bool announceCountdown; // Offset: 0x1c
    bool restrictJoiningToPreGame; // Offset: 0x1d
    bool saturateScreen; // Offset: 0x1e
    uint8_t _pad_3[0x1]; // Offset: 0x1f
    ReadySystemParams readySystem; // Offset: 0x20
};

// Original name: SQedVisualGraphTransitionParams
// Size: 0x30
// VTable: 0x149a55210
struct SQedVisualGraphTransitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType state; // Offset: 0x8
    uint8_t _pad_1[0x6]; // Offset: 0xa
    SQedVisualGraphTransitionTypeParams animationTransitionType; // Offset: 0x10
    SQedVisualGraphTransitionTypeParams effectTransitionType; // Offset: 0x20
};

// Original name: SProjectileLauncher
// Size: 0x60
// VTable: 0x149a7bb28
struct SProjectileLauncher {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fireHelper; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* muzzleHelper; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    int32_t ammoCost; // Offset: 0x28
    int32_t pelletCount; // Offset: 0x2c
    float damageMultiplier; // Offset: 0x30
    float soundRadius; // Offset: 0x34
    SSpreadParams spreadParams; // Offset: 0x38
    ARDataType projectileType; // Offset: 0x58
    uint8_t _pad_3[0x4]; // Offset: 0x5c
};

// Original name: DynArray_BaseMissionModifier
// Generated DynArray for base type: BaseMissionModifier
// Size: 0x8
struct DynArray_BaseMissionModifier {
    BaseMissionModifier* m_data; // Offset: 0x0
};

// Original name: DynArray_SelectionTab
// Generated DynArray for base type: SelectionTab
// Size: 0x8
struct DynArray_SelectionTab {
    SelectionTab* m_data; // Offset: 0x0
};

// Original name: ElectricalStateTemplate
// Size: 0x18
// VTable: 0x1499795b0
struct ElectricalStateTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ElectricalStateTemplateInternal state; // Offset: 0x8
};

// Original name: SExtinguisherVectorFieldParams
// Size: 0x58
// VTable: 0x149a7b468
struct SExtinguisherVectorFieldParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SVectorFieldParams main; // Offset: 0x8
    SVectorFieldParams spray; // Offset: 0x30
};

// Original name: DynArray_PlayerChoiceMenuOption
// Generated DynArray for base type: PlayerChoiceMenuOption
// Size: 0x8
struct DynArray_PlayerChoiceMenuOption {
    PlayerChoiceMenuOption* m_data; // Offset: 0x0
};

// Original name: DynArray_DisplayState
// Generated DynArray for base type: DisplayState
// Size: 0x8
struct DynArray_DisplayState {
    DisplayState* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_Node
// Generated DynArray for base type: BuildingBlocks_Node
// Size: 0x8
struct DynArray_BuildingBlocks_Node {
    BuildingBlocks_Node* m_data; // Offset: 0x0
};

// Original name: DynArray_MissionLocationValidation
// Generated DynArray for base type: MissionLocationValidation
// Size: 0x8
struct DynArray_MissionLocationValidation {
    MissionLocationValidation* m_data; // Offset: 0x0
};

// Original name: DynArray_PersonalThoughtInventoryFilter
// Generated DynArray for base type: PersonalThoughtInventoryFilter
// Size: 0x8
struct DynArray_PersonalThoughtInventoryFilter {
    PersonalThoughtInventoryFilter* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_ColorIntegerPairDef
// Size: 0x20
// VTable: 0x149986248
struct BuildingBlocks_ColorIntegerPairDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t integer; // Offset: 0x8
    BuildingBlocks_ColorBase color; // Offset: 0x10
};

// Original name: BuildingBlocks_FieldModifierColor
// Size: 0x20
// VTable: 0x14998b1f8
struct BuildingBlocks_FieldModifierColor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType field; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    BuildingBlocks_ColorBase color; // Offset: 0x10
};

// Original name: BuildingBlocks_GeomEntityEffect
// Size: 0x20
// VTable: 0x14998d928
struct BuildingBlocks_GeomEntityEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_ColorBase color; // Offset: 0x8
    float amount; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_EntityEffectBase
// Size: 0x20
// VTable: 0x1499830c8
struct BuildingBlocks_EntityEffectBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_ColorBase color; // Offset: 0x8
    float amount; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: BuildingBlocks_Background
// Size: 0x60
// VTable: 0x149982a38
struct BuildingBlocks_Background {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    BuildingBlocks_ColorBase color; // Offset: 0x10
    BuildingBlocks_ColorBase topLeftColor; // Offset: 0x20
    BuildingBlocks_ColorBase topRightColor; // Offset: 0x30
    BuildingBlocks_ColorBase bottomLeftColor; // Offset: 0x40
    BuildingBlocks_ColorBase bottomRightCColor; // Offset: 0x50
};

// Original name: BuildingBlocks_ColorFromBooleanToggle
// Size: 0x80
// VTable: 0x1499863a0
struct BuildingBlocks_ColorFromBooleanToggle {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_ColorBase colorIfTrue; // Offset: 0x50
    BuildingBlocks_ColorBase colorIfFalse; // Offset: 0x60
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0x70
};

// Original name: BuildingBlocks_BorderSide
// Size: 0x20
// VTable: 0x149982728
struct BuildingBlocks_BorderSide {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float width; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    BuildingBlocks_ColorBase color; // Offset: 0x10
};

// Original name: BuildingBlocks_ExternalColorReference
// Size: 0x18
// VTable: 0x149981fe0
struct BuildingBlocks_ExternalColorReference {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_ColorBase color; // Offset: 0x8
};

// Original name: BuildingBlocks_LightParams
// Size: 0x40
// VTable: 0x149991238
struct BuildingBlocks_LightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lightRadius; // Offset: 0x8
    float bulbRadius; // Offset: 0xc
    float FOV; // Offset: 0x10
    float intensity; // Offset: 0x14
    bool visibleShadows; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    ARDataType importance; // Offset: 0x1c
    BuildingBlocks_ColorBase color; // Offset: 0x20
    CryStringT* image; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: BuildingBlocks_EntityEffectSilhouette
// Size: 0x20
// VTable: 0x149983170
struct BuildingBlocks_EntityEffectSilhouette {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_ColorBase color; // Offset: 0x8
    float width; // Offset: 0x18
    bool enabled; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
};

// Original name: BuildingBlocks_SvgFill
// Size: 0x70
// VTable: 0x149983048
struct BuildingBlocks_SvgFill {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* svgPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_TRBL nineSliceRect; // Offset: 0x18
    bool renderShape; // Offset: 0x38
    bool flipHorizontal; // Offset: 0x39
    bool flipVertical; // Offset: 0x3a
    bool enableColorOverlay; // Offset: 0x3b
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    BuildingBlocks_ColorBase color; // Offset: 0x40
    ARDataType scalingBehavior; // Offset: 0x50
    float containPositionX; // Offset: 0x54
    float containPositionY; // Offset: 0x58
    bool enableNineSliceRect; // Offset: 0x5c
    uint8_t _pad_3[0x3]; // Offset: 0x5d
    float nineSliceScale; // Offset: 0x60
    float strokeExtent; // Offset: 0x64
    float playhead; // Offset: 0x68
    uint8_t _pad_4[0x4]; // Offset: 0x6c
};

// Original name: DynArray_BuildingBlocks_ColorBase
// Generated DynArray for base type: BuildingBlocks_ColorBase
// Size: 0x8
struct DynArray_BuildingBlocks_ColorBase {
    BuildingBlocks_ColorBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SCIGTestB
// Generated DynArray for base type: SCIGTestB
// Size: 0x8
struct DynArray_SCIGTestB {
    SCIGTestB* m_data; // Offset: 0x0
};

// Original name: SModifyHealthGameplayTrigger
// Size: 0x18
// VTable: 0x1499fb810
struct SModifyHealthGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SModHealth Health; // Offset: 0x8
};

// Original name: SCSeatAccessBaseInteractionParams
// Size: 0x40
// VTable: 0x149a5d018
struct SCSeatAccessBaseInteractionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SCSeatAccessInteractionConditionParams conditions; // Offset: 0x18
};

// Original name: DynArray_MissionScenarioCyclePhase
// Generated DynArray for base type: MissionScenarioCyclePhase
// Size: 0x8
struct DynArray_MissionScenarioCyclePhase {
    MissionScenarioCyclePhase* m_data; // Offset: 0x0
};

// Original name: SSalvageArmParams
// Size: 0x30
// VTable: 0x149a7f078
struct SSalvageArmParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* straightenJointName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Ang3 straightenAngleOffset; // Offset: 0x18
};

// Original name: WeaponProceduralClipHandsOverlay
// Size: 0x78
// VTable: 0x149aab880
struct WeaponProceduralClipHandsOverlay {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float amplitude; // Offset: 0x10
    float amplitudeNoiseFactor; // Offset: 0x14
    float frequency; // Offset: 0x18
    float frequencyNoiseFactor; // Offset: 0x1c
    float maxDistance; // Offset: 0x20
    float maxDistanceNoiseFactor; // Offset: 0x24
    float smoothFactor; // Offset: 0x28
    float phase; // Offset: 0x2c
    Ang3 rotation; // Offset: 0x30
    float rotationNoise; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    Ang3 vDisplacementRotation; // Offset: 0x50
    float vDisplacementRotationNoise; // Offset: 0x68
    float minSpeed; // Offset: 0x6c
    float maxSpeed; // Offset: 0x70
    float minTimeModifier; // Offset: 0x74
};

// Original name: CameraRotationConfig
// Size: 0xa0
// VTable: 0x1499b19a8
struct CameraRotationConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Ang3 rotationInitial; // Offset: 0x8
    bool randomRotationInitX; // Offset: 0x20
    bool randomRotationInitZ; // Offset: 0x21
    uint8_t _pad_1[0x6]; // Offset: 0x22
    Ang3 rotationMin; // Offset: 0x28
    Ang3 rotationMax; // Offset: 0x40
    Ang3 additionalRotation; // Offset: 0x58
    bool canRotate; // Offset: 0x70
    uint8_t _pad_2[0x3]; // Offset: 0x71
    float rotationSpeed; // Offset: 0x74
    float maxManualRotationSpeed; // Offset: 0x78
    float rotationSmoothTime; // Offset: 0x7c
    Ang3 automaticRotationSpeed; // Offset: 0x80
    float timeBeforeAutomaticRotation; // Offset: 0x98
    bool followPlanetaryFrame; // Offset: 0x9c
    bool followInitialEntityYDirection; // Offset: 0x9d
    uint8_t _pad_3[0x2]; // Offset: 0x9e
};

// Original name: Quat
// Size: 0x30
// VTable: 0x1499ad290
struct Quat {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Ang3 Rotation; // Offset: 0x18
};

// Original name: SCameraViewStateOrbit
// Size: 0x70
// VTable: 0x149a01160
struct SCameraViewStateOrbit {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    Ang3 cameraRotationAngle; // Offset: 0x10
    float distance; // Offset: 0x28
    ARDataType lensSizePreset; // Offset: 0x2c
    uint8_t _pad_1[0x40]; // Offset: 0x30
};

// Original name: CraftingRecipe
// Size: 0x28
// VTable: 0x1499b8a38
struct CraftingRecipe {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipeCosts_Base costs; // Offset: 0x8
    CraftingRecipeResults_Base results; // Offset: 0x18
};

// Original name: DynArray_AIMeleeAttack
// Generated DynArray for base type: AIMeleeAttack
// Size: 0x8
struct DynArray_AIMeleeAttack {
    AIMeleeAttack* m_data; // Offset: 0x0
};

// Original name: BodyJoint
// Size: 0x38
// VTable: 0x149a810f8
struct BodyJoint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType hitReactionRegion; // Offset: 0x18
    ARDataType hitReactionPart; // Offset: 0x1c
    BodyPart bodyPart; // Offset: 0x20
};

// Original name: DynArray_BodyPart
// Generated DynArray for base type: BodyPart
// Size: 0x8
struct DynArray_BodyPart {
    BodyPart* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioBreathStyleBaseNode
// Generated DynArray for base type: AudioBreathStyleBaseNode
// Size: 0x8
struct DynArray_AudioBreathStyleBaseNode {
    AudioBreathStyleBaseNode* m_data; // Offset: 0x0
};

// Original name: DynArray_SSpecializedDataEntry
// Generated DynArray for base type: SSpecializedDataEntry
// Size: 0x8
struct DynArray_SSpecializedDataEntry {
    SSpecializedDataEntry* m_data; // Offset: 0x0
};

// Original name: ProceduralEntityAudioParams
// Size: 0x40
// VTable: 0x14999d2e0
struct ProceduralEntityAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioSwitch biomeSwitch; // Offset: 0x8
};

// Original name: DynArray_AudioSwitch
// Generated DynArray for base type: AudioSwitch
// Size: 0x8
struct DynArray_AudioSwitch {
    AudioSwitch* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemTypeModifier
// Generated DynArray for base type: ItemTypeModifier
// Size: 0x8
struct DynArray_ItemTypeModifier {
    ItemTypeModifier* m_data; // Offset: 0x0
};

// Original name: DamageResistance
// Size: 0x70
// VTable: 0x1499addd0
struct DamageResistance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool IgnoreMeleeDamage; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DamageResistanceEntry PhysicalResistance; // Offset: 0x10
    DamageResistanceEntry EnergyResistance; // Offset: 0x20
    DamageResistanceEntry DistortionResistance; // Offset: 0x30
    DamageResistanceEntry ThermalResistance; // Offset: 0x40
    DamageResistanceEntry BiochemicalResistance; // Offset: 0x50
    DamageResistanceEntry StunResistance; // Offset: 0x60
};

// Original name: SEntityDensityClass
// Size: 0x30
// VTable: 0x149ac43b0
struct SEntityDensityClass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float clusterDetectionRadius; // Offset: 0x8
    uint32_t clusterUpperObjectCountDGS; // Offset: 0xc
    uint32_t clusterUpperObjectCountPersistence; // Offset: 0x10
    float clusterPersistenceTimeout; // Offset: 0x14
    float entityMaxIdleLifeTime; // Offset: 0x18
    bool entityIdleBuryOnly; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
    TimeValue_Base vehicleUnattendedCleanupTime; // Offset: 0x20
};

// Original name: DynArray_AISpecialRangedAttackConfig
// Generated DynArray for base type: AISpecialRangedAttackConfig
// Size: 0x8
struct DynArray_AISpecialRangedAttackConfig {
    AISpecialRangedAttackConfig* m_data; // Offset: 0x0
};

// Original name: EntityComponentWaterImpactTestParams
// Size: 0x38
// VTable: 0x14999df40
struct EntityComponentWaterImpactTestParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec2 distributionArea; // Offset: 0x20
    float radius; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: SCActorCollisionAvoidanceParams
// Size: 0x70
// VTable: 0x1499ed2b0
struct SCActorCollisionAvoidanceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float passRadiusAgent; // Offset: 0x18
    float passRadiusObstacleMoving; // Offset: 0x1c
    float passRadiusObstacleStatic; // Offset: 0x20
    float baseAgentAvoidanceRange; // Offset: 0x24
    float baseObstacleAvoidanceRange; // Offset: 0x28
    float baseNavmeshEdgeAvoidanceRange; // Offset: 0x2c
    float velocityInfluenceMultiplier; // Offset: 0x30
    float timeHorizonScale; // Offset: 0x34
    float agentAvoidanceTimeHorizon; // Offset: 0x38
    float obstacleAvoidanceTimeHorizon; // Offset: 0x3c
    float navmeshEdgeAvoidanceTimeHorizon; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    Vec2 offsetAgent; // Offset: 0x48
    Vec2 offsetObstacle; // Offset: 0x58
    bool alwaysAnObstacle; // Offset: 0x68
    bool preferMinSpeedDuringAvoidance; // Offset: 0x69
    uint8_t _pad_2[0x6]; // Offset: 0x6a
};

// Original name: BuildingBlocks_ShapeQuad
// Size: 0x28
// VTable: 0x149984098
struct BuildingBlocks_ShapeQuad {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 center; // Offset: 0x8
    bool showBoundsDebug; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    float width; // Offset: 0x20
    float height; // Offset: 0x24
};

// Original name: SCharacterCustomizerHairRandomizationParams
// Size: 0x30
// VTable: 0x149a0c668
struct SCharacterCustomizerHairRandomizationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float noItemProbability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec2 melaninLimits; // Offset: 0x10
    Vec2 rednessLimits; // Offset: 0x20
};

// Original name: SItemPortDefExtensionTurret
// Size: 0x38
// VTable: 0x1499afa10
struct SItemPortDefExtensionTurret {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 YawLimit; // Offset: 0x8
    Vec2 PitchLimit; // Offset: 0x18
    Vec2 RollLimit; // Offset: 0x28
};

// Original name: SPowerTriangleVertices
// Size: 0x38
// VTable: 0x149a5b800
struct SPowerTriangleVertices {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 ThrusterPoint; // Offset: 0x8
    Vec2 WeaponPoint; // Offset: 0x18
    Vec2 ShieldPoint; // Offset: 0x28
};

// Original name: BuildingBlocks_ShapeCircle
// Size: 0x28
// VTable: 0x149984118
struct BuildingBlocks_ShapeCircle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 center; // Offset: 0x8
    bool showBoundsDebug; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    float outerRadius; // Offset: 0x20
    float innerRadius; // Offset: 0x24
};

// Original name: EntityComponentWaterDisturbance_NoiseParams
// Size: 0x20
// VTable: 0x14999dd10
struct EntityComponentWaterDisturbance_NoiseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lacunarity; // Offset: 0x8
    float persistence; // Offset: 0xc
    Vec2 amplitude; // Offset: 0x10
};

// Original name: SCharacterCustomizerControlParams
// Size: 0x68
// VTable: 0x149a0dd70
struct SCharacterCustomizerControlParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float zoomSpeed; // Offset: 0x8
    float rotationRate; // Offset: 0xc
    float keyboardRotationRate; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    Vec2 tiltClamp; // Offset: 0x18
    bool enableTilt; // Offset: 0x28
    uint8_t _pad_2[0x3]; // Offset: 0x29
    float dnaDragRate; // Offset: 0x2c
    float dnaKeyboardEditRate; // Offset: 0x30
    float rotationLerpTime; // Offset: 0x34
    float libraryHeadBBoxScale; // Offset: 0x38
    float wholeHeadRegionBBoxScale; // Offset: 0x3c
    float libraryScrollSpeed; // Offset: 0x40
    float dnaKeyControlSpeed; // Offset: 0x44
    float bodyTypeSelectionLerpTime; // Offset: 0x48
    float faceSculptingControlPointUIScaleFactor; // Offset: 0x4c
    bool enforceSymmetry; // Offset: 0x50
    bool useAllDNAVertices; // Offset: 0x51
    uint8_t _pad_3[0x2]; // Offset: 0x52
    float facesculptingUIRadius; // Offset: 0x54
    float stepChangeDelayTime; // Offset: 0x58
    float faceSculptingOcclusionOffset; // Offset: 0x5c
    bool rotateCamera; // Offset: 0x60
    uint8_t _pad_4[0x3]; // Offset: 0x61
    float stepTransitionTime; // Offset: 0x64
};

// Original name: DirectRTT_ChromaticAberrationParams
// Size: 0x38
// VTable: 0x14993a060
struct DirectRTT_ChromaticAberrationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 RedChannelOffset; // Offset: 0x8
    Vec2 GreenChannelOffset; // Offset: 0x18
    Vec2 BlueChannelOffset; // Offset: 0x28
};

// Original name: ActorLookAheadPoint
// Size: 0x90
// VTable: 0x149a642a0
struct ActorLookAheadPoint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 limitYawMinMax; // Offset: 0x8
    Vec2 limitPitchMinMax; // Offset: 0x18
    Vec2 thresholdYawMinMax; // Offset: 0x28
    Vec2 thresholdPitchMinMax; // Offset: 0x38
    float multiplierYaw; // Offset: 0x48
    float multiplierPitch; // Offset: 0x4c
    float defaultWeight; // Offset: 0x50
    float statusSwapTime; // Offset: 0x54
    bool respectsDampeningZone; // Offset: 0x58
    uint8_t _pad_1[0x3]; // Offset: 0x59
    float dampeningZoneSize; // Offset: 0x5c
    bool enabled; // Offset: 0x60
    uint8_t _pad_2[0x2f]; // Offset: 0x61
};

// Original name: SCharacterCustomizerComplexionRandomizationParams
// Size: 0x48
// VTable: 0x149a0c588
struct SCharacterCustomizerComplexionRandomizationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 frecklesOpacityLimits; // Offset: 0x8
    Vec2 frecklesAmountLimits; // Offset: 0x18
    Vec2 sunspotsOpacityLimits; // Offset: 0x28
    Vec2 sunspotsAmountLimits; // Offset: 0x38
};

// Original name: LandingSplineVisualParams
// Size: 0x48
// VTable: 0x149a1cb58
struct LandingSplineVisualParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float distanceBetweenNodes; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec2 borderDimensions; // Offset: 0x20
    float markerDistanceFromEnds; // Offset: 0x30
    float markerRadius; // Offset: 0x34
    float markerMoveRadius; // Offset: 0x38
    float distanceMinimum; // Offset: 0x3c
    float distanceMaximum; // Offset: 0x40
    float scaleMaximum; // Offset: 0x44
};

// Original name: ActorFOVViewParams
// Size: 0x20
// VTable: 0x149aa48c8
struct ActorFOVViewParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 globalVerticalFOVLimit; // Offset: 0x8
    float globalFOVLerpSpeed; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: SSalvageRepairCardParams
// Size: 0x30
// VTable: 0x149a7ade8
struct SSalvageRepairCardParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float cardLerpSpeed; // Offset: 0x8
    float attachPointLerpSpeed; // Offset: 0xc
    float closingTransitionTime; // Offset: 0x10
    float nearDistance; // Offset: 0x14
    Vec2 defaultScreenPos; // Offset: 0x18
    float maxDistScreenPosScale; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: MarkerAR_ConfigDef
// Size: 0x38
// VTable: 0x149aa9418
struct MarkerAR_ConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxVisibleDistance; // Offset: 0x8
    float minFocusAngle; // Offset: 0xc
    float clipRadius; // Offset: 0x10
    float clipAspect; // Offset: 0x14
    Vec2 clipScreenMin; // Offset: 0x18
    Vec2 clipScreenMax; // Offset: 0x28
};

// Original name: BuildingBlocks_ShapeBase
// Size: 0x20
// VTable: 0x149984018
struct BuildingBlocks_ShapeBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 center; // Offset: 0x8
    bool showBoundsDebug; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: PlayerChoice_SoftwareCursorEntry
// Size: 0x30
// VTable: 0x149a804a0
struct PlayerChoice_SoftwareCursorEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType cursor; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* imagePath; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    Vec2 pivot; // Offset: 0x20
};

// Original name: WeaponProceduralClipRecoil
// Size: 0x90
// VTable: 0x149aabc50
struct WeaponProceduralClipRecoil {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float dampStrength; // Offset: 0x10
    float fireRecoilTime; // Offset: 0x14
    float fireRecoilStrengthFirst; // Offset: 0x18
    float fireRecoilStrength; // Offset: 0x1c
    float angleRecoilStrength; // Offset: 0x20
    bool useRandomRotation; // Offset: 0x24
    uint8_t _pad_2[0x3]; // Offset: 0x25
    Ang3 rotation; // Offset: 0x28
    float randomness; // Offset: 0x40
    float randomnessBackPush; // Offset: 0x44
    float frontalOscillationRotation; // Offset: 0x48
    float frontalOscillationStrength; // Offset: 0x4c
    float frontalOscillationDampStrength; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
    Vec2 max; // Offset: 0x58
    float pull_left_percentage; // Offset: 0x68
    float shot_kick_first; // Offset: 0x6c
    float shot_kick; // Offset: 0x70
    float random; // Offset: 0x74
    float random_z; // Offset: 0x78
    float decay; // Offset: 0x7c
    float end_decay; // Offset: 0x80
    float recoil_time; // Offset: 0x84
    float delay; // Offset: 0x88
    float hipsPushForce; // Offset: 0x8c
};

// Original name: DuckPose
// Size: 0x20
// VTable: 0x149a9c050
struct DuckPose {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float spineMaxBendAngle; // Offset: 0x8
    float spineToHipRatio; // Offset: 0xc
    Vec2 hipHorOffsetScale; // Offset: 0x10
};

// Original name: UIWorldDisplayPathLineParams
// Size: 0x38
// VTable: 0x149aaa428
struct UIWorldDisplayPathLineParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lineWidth; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec2 uvStart; // Offset: 0x10
    Vec2 uvSize; // Offset: 0x20
    int32_t cutOffExtraLengthDivision; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: PointOfInterestData
// Size: 0x40
// VTable: 0x1499f9650
struct PointOfInterestData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CLocIdentifier* displayInfoText; // Offset: 0x10
    CryStringT* imagePath; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    Vec2 position; // Offset: 0x28
    float radius; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: SHackingCameraParams
// Size: 0x60
// VTable: 0x149a2c070
struct SHackingCameraParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 initialAngles; // Offset: 0x8
    Vec2 angleLimits; // Offset: 0x18
    Vec2 angleLimitRotationOffsets; // Offset: 0x28
    Vec2 angleToMouseInputRatios; // Offset: 0x38
    Vec2 rubbernessRatios; // Offset: 0x48
    int32_t minZoomBoardSize; // Offset: 0x58
    int32_t maxZoomBoardSize; // Offset: 0x5c
};

// Original name: BuildingBlocks_ShapeTriangle
// Size: 0x58
// VTable: 0x1499841c0
struct BuildingBlocks_ShapeTriangle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 center; // Offset: 0x8
    bool showBoundsDebug; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    Vec2 vertex0; // Offset: 0x20
    Vec2 vertex1; // Offset: 0x30
    Vec2 vertex2; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x50
};

// Original name: SChargeDrainCardParams
// Size: 0x38
// VTable: 0x149a77b20
struct SChargeDrainCardParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float cardLerpSpeed; // Offset: 0x8
    float attachPointLerpSpeed; // Offset: 0xc
    float closingDelay; // Offset: 0x10
    float closingTransitionTime; // Offset: 0x14
    float nearDistance; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec2 defaultScreenPos; // Offset: 0x20
    float maxDistScreenPosScale; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: SMiniGameData
// Size: 0x18
// VTable: 0x149a46a70
struct SMiniGameData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 textureSize; // Offset: 0x8
};

// Original name: BuildingBlocks_RawSlicer
// Size: 0x28
// VTable: 0x149991c98
struct BuildingBlocks_RawSlicer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 start; // Offset: 0x8
    Vec2 size; // Offset: 0x18
};

// Original name: DynArray_Vec2
// Generated DynArray for base type: Vec2
// Size: 0x8
struct DynArray_Vec2 {
    Vec2* m_data; // Offset: 0x0
};

// Original name: DynArray_SignatureTypeGlobalParams
// Generated DynArray for base type: SignatureTypeGlobalParams
// Size: 0x8
struct DynArray_SignatureTypeGlobalParams {
    SignatureTypeGlobalParams* m_data; // Offset: 0x0
};

// Original name: LegacyCraftingRecipeDefRecord
// Size: 0x18
// VTable: 0x149a0f240
struct LegacyCraftingRecipeDefRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LegacyCraftingRecipe_Base recipe; // Offset: 0x8
};

// Original name: LegacyCraftingRecipeDef_Direct
// Size: 0x18
// VTable: 0x149a0f1e0
struct LegacyCraftingRecipeDef_Direct {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LegacyCraftingRecipe_Base recipe; // Offset: 0x8
};

// Original name: SWeaponSpinAnimationParams
// Size: 0x70
// VTable: 0x1499de248
struct SWeaponSpinAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType activationMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* name; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* fragment; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    CryStringT* spinParam; // Offset: 0x30
    uint8_t _pad_4[0x8]; // Offset: 0x38
    float spinUpTime; // Offset: 0x40
    float spinDownTime; // Offset: 0x44
    float maxActiveTime; // Offset: 0x48
    uint8_t _pad_5[0x4]; // Offset: 0x4c
    SWeaponConditionBase activationCondition; // Offset: 0x50
    uint8_t _pad_6[0x10]; // Offset: 0x60
};

// Original name: DynArray_SWeaponConditionBase
// Generated DynArray for base type: SWeaponConditionBase
// Size: 0x8
struct DynArray_SWeaponConditionBase {
    SWeaponConditionBase* m_data; // Offset: 0x0
};

// Original name: ScanCustomDataDirect
// Size: 0x28
// VTable: 0x1499c74a0
struct ScanCustomDataDirect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    ARDataType displaySection; // Offset: 0x10
    bool addToBoxoutDisplay; // Offset: 0x11
    bool displayInSameRowAsHeader; // Offset: 0x12
    uint8_t _pad_1[0x5]; // Offset: 0x13
    ScanCustomValue value; // Offset: 0x18
};

// Original name: DynArray_ScanCustomValue
// Generated DynArray for base type: ScanCustomValue
// Size: 0x8
struct DynArray_ScanCustomValue {
    ScanCustomValue* m_data; // Offset: 0x0
};

// Original name: DynArray_ControlHints_Input
// Generated DynArray for base type: ControlHints_Input
// Size: 0x8
struct DynArray_ControlHints_Input {
    ControlHints_Input* m_data; // Offset: 0x0
};

// Original name: DialogueBundleEntry
// Size: 0x18
// VTable: 0x149a8cc20
struct DialogueBundleEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DialogueContextEntry dialogue; // Offset: 0x8
};

// Original name: WeightedDialogueBundleEntry
// Size: 0x20
// VTable: 0x149a8cca8
struct WeightedDialogueBundleEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DialogueContextEntry dialogue; // Offset: 0x8
    float weight; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: DynArray_SSequencerInteractionTask
// Generated DynArray for base type: SSequencerInteractionTask
// Size: 0x8
struct DynArray_SSequencerInteractionTask {
    SSequencerInteractionTask* m_data; // Offset: 0x0
};

// Original name: DynArray_EAUIMulticrewTypeOptionParams
// Generated DynArray for base type: EAUIMulticrewTypeOptionParams
// Size: 0x8
struct DynArray_EAUIMulticrewTypeOptionParams {
    EAUIMulticrewTypeOptionParams* m_data; // Offset: 0x0
};

// Original name: StarMapObjectLocationParams
// Size: 0x20
// VTable: 0x149a8f458
struct StarMapObjectLocationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool setEntityLocationOnEnter; // Offset: 0x8
    bool exposeForPlayerCreatedMissions; // Offset: 0x9
    bool excludeFromLevelLoad; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
    SEntityDensityClassOverwritesBase densityClassOverwrites; // Offset: 0x10
};

// Original name: SAreaComponentParams
// Size: 0x28
// VTable: 0x149ac49e0
struct SAreaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntityDensityClassOverwritesBase densityClassOverwrites; // Offset: 0x18
};

// Original name: DynArray_VehicleRole
// Generated DynArray for base type: VehicleRole
// Size: 0x8
struct DynArray_VehicleRole {
    VehicleRole* m_data; // Offset: 0x0
};

// Original name: DynArray_SViewDistanceRatioParams
// Generated DynArray for base type: SViewDistanceRatioParams
// Size: 0x8
struct DynArray_SViewDistanceRatioParams {
    SViewDistanceRatioParams* m_data; // Offset: 0x0
};

// Original name: DynArray_LinkedStatBase
// Generated DynArray for base type: LinkedStatBase
// Size: 0x8
struct DynArray_LinkedStatBase {
    LinkedStatBase* m_data; // Offset: 0x0
};

// Original name: DynArray_HarvestableClusterParams
// Generated DynArray for base type: HarvestableClusterParams
// Size: 0x8
struct DynArray_HarvestableClusterParams {
    HarvestableClusterParams* m_data; // Offset: 0x0
};

// Original name: SReputationStandingRewardBonusParams
// Size: 0x28
// VTable: 0x149a966c8
struct SReputationStandingRewardBonusParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationStandingParams standing; // Offset: 0x8
    float bonusFraction; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: DynArray_SReputationStandingParams
// Generated DynArray for base type: SReputationStandingParams
// Size: 0x8
struct DynArray_SReputationStandingParams {
    SReputationStandingParams* m_data; // Offset: 0x0
};

// Original name: DynArray_ModifierInterpolator
// Generated DynArray for base type: ModifierInterpolator
// Size: 0x8
struct DynArray_ModifierInterpolator {
    ModifierInterpolator* m_data; // Offset: 0x0
};

// Original name: RadarDeltaSignatureEntry
// Size: 0x60
// VTable: 0x1499c3fb0
struct RadarDeltaSignatureEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
    ARDataType priority; // Offset: 0x20
    float expireTime; // Offset: 0x24
    RadarDeltaSignatureNotificationParams notificationParams; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x58
};

// Original name: DynArray_ItemAwardBase
// Generated DynArray for base type: ItemAwardBase
// Size: 0x8
struct DynArray_ItemAwardBase {
    ItemAwardBase* m_data; // Offset: 0x0
};

// Original name: JumpTunnelCameraEffects
// Size: 0x68
// VTable: 0x1499f46e8
struct JumpTunnelCameraEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    JumpTunnelCameraEffectParam blur; // Offset: 0x8
    JumpTunnelCameraEffectParam bloom; // Offset: 0x18
    JumpTunnelCameraEffectParam chromaticAberation; // Offset: 0x28
    JumpTunnelCameraEffectParam shutterSpeed; // Offset: 0x38
    JumpTunnelCameraEffectParam fov; // Offset: 0x48
    JumpTunnelCameraEffectParam fovScale; // Offset: 0x58
};

// Original name: DynArray_SFrontendGameModeButton
// Generated DynArray for base type: SFrontendGameModeButton
// Size: 0x8
struct DynArray_SFrontendGameModeButton {
    SFrontendGameModeButton* m_data; // Offset: 0x0
};

// Original name: DynArray_ForceFeedbackEnvelope
// Generated DynArray for base type: ForceFeedbackEnvelope
// Size: 0x8
struct DynArray_ForceFeedbackEnvelope {
    ForceFeedbackEnvelope* m_data; // Offset: 0x0
};

// Original name: DynArray_CommunicationVariableBase
// Generated DynArray for base type: CommunicationVariableBase
// Size: 0x8
struct DynArray_CommunicationVariableBase {
    CommunicationVariableBase* m_data; // Offset: 0x0
};

// Original name: DynArray_S42CommendationRequirementBase
// Generated DynArray for base type: S42CommendationRequirementBase
// Size: 0x8
struct DynArray_S42CommendationRequirementBase {
    S42CommendationRequirementBase* m_data; // Offset: 0x0
};

// Original name: DynArray_FlightHUDUIMessage
// Generated DynArray for base type: FlightHUDUIMessage
// Size: 0x8
struct DynArray_FlightHUDUIMessage {
    FlightHUDUIMessage* m_data; // Offset: 0x0
};

// Original name: DynArray_SObjectMetadataParams
// Generated DynArray for base type: SObjectMetadataParams
// Size: 0x8
struct DynArray_SObjectMetadataParams {
    SObjectMetadataParams* m_data; // Offset: 0x0
};

// Original name: DynArray_UIElementSoundEntry
// Generated DynArray for base type: UIElementSoundEntry
// Size: 0x8
struct DynArray_UIElementSoundEntry {
    UIElementSoundEntry* m_data; // Offset: 0x0
};

// Original name: CraftingGameplayProperty_Base_Float
// Size: 0x18
// VTable: 0x1499b95e0
struct CraftingGameplayProperty_Base_Float {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingGameplayPropertyImpl_Base_Float implementation; // Offset: 0x8
};

// Original name: CraftingGameplayProperty_Crafter_Speed
// Size: 0x18
// VTable: 0x1499b95e8
struct CraftingGameplayProperty_Crafter_Speed {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingGameplayPropertyImpl_Base_Float implementation; // Offset: 0x8
};

// Original name: SWeaponConditionAmmoCount
// Size: 0x18
// VTable: 0x149a70200
struct SWeaponConditionAmmoCount {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SIntNumberComparer comparer; // Offset: 0x8
};

// Original name: MobiglasDisplayLayoutBase
// Size: 0x30
// VTable: 0x14996e5a0
struct MobiglasDisplayLayoutBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectiveDisplayInfo objectiveTitle; // Offset: 0x8
};

// Original name: MobiglasDisplayCounter
// Size: 0x58
// VTable: 0x14996e680
struct MobiglasDisplayCounter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectiveDisplayInfo objectiveTitle; // Offset: 0x8
    ObjectiveDisplayInfo collectAndDeliverObjective; // Offset: 0x30
};

// Original name: MobiglasDisplayLocation
// Size: 0x80
// VTable: 0x14996e628
struct MobiglasDisplayLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectiveDisplayInfo objectiveTitle; // Offset: 0x8
    ObjectiveDisplayInfo collectObjective; // Offset: 0x30
    ObjectiveDisplayInfo deliveryObjective; // Offset: 0x58
};

// Original name: DynArray_SDespawnRule
// Generated DynArray for base type: SDespawnRule
// Size: 0x8
struct DynArray_SDespawnRule {
    SDespawnRule* m_data; // Offset: 0x0
};

// Original name: DynArray_DegradationTemperatureMultiplier
// Generated DynArray for base type: DegradationTemperatureMultiplier
// Size: 0x8
struct DynArray_DegradationTemperatureMultiplier {
    DegradationTemperatureMultiplier* m_data; // Offset: 0x0
};

// Original name: DynArray_ForceFeedbackPattern
// Generated DynArray for base type: ForceFeedbackPattern
// Size: 0x8
struct DynArray_ForceFeedbackPattern {
    ForceFeedbackPattern* m_data; // Offset: 0x0
};

// Original name: SeatOperatorSkills
// Size: 0x78
// VTable: 0x1499b7618
struct SeatOperatorSkills {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Aiming aiming; // Offset: 0x8
    Burst burst; // Offset: 0x58
};

// Original name: DynArray_VoiceSingle
// Generated DynArray for base type: VoiceSingle
// Size: 0x8
struct DynArray_VoiceSingle {
    VoiceSingle* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_StaticArrayDataBase
// Generated DynArray for base type: BuildingBlocks_StaticArrayDataBase
// Size: 0x8
struct DynArray_BuildingBlocks_StaticArrayDataBase {
    BuildingBlocks_StaticArrayDataBase* m_data; // Offset: 0x0
};

// Original name: SCItemDoorSimpleOpenCloseParams
// Size: 0x40
// VTable: 0x1499f2008
struct SCItemDoorSimpleOpenCloseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DefaultAnimationDurationScale; // Offset: 0x8
    float SecondaryAnimationDurationScale; // Offset: 0xc
    SCItemDoorUserAnimationParams userAnimationParams; // Offset: 0x10
    CryStringT* OpenTag; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* CloseTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
};

// Original name: SCItemDoorFiveWayProceduralParams
// Size: 0x70
// VTable: 0x1499f2160
struct SCItemDoorFiveWayProceduralParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DefaultAnimationDurationScale; // Offset: 0x8
    float SecondaryAnimationDurationScale; // Offset: 0xc
    SCItemDoorUserAnimationParams userAnimationParams; // Offset: 0x10
    CryStringT* OpenIntroTag; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    CryStringT* OpenOutroTag; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
    CryStringT* TransitionTag; // Offset: 0x40
    uint8_t _pad_3[0x8]; // Offset: 0x48
    CryStringT* CloseIntroTag; // Offset: 0x50
    uint8_t _pad_4[0x8]; // Offset: 0x58
    CryStringT* CloseOutroTag; // Offset: 0x60
    uint8_t _pad_5[0x8]; // Offset: 0x68
};

// Original name: SCItemDoorSingleProceduralParams
// Size: 0x30
// VTable: 0x1499f2060
struct SCItemDoorSingleProceduralParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DefaultAnimationDurationScale; // Offset: 0x8
    float SecondaryAnimationDurationScale; // Offset: 0xc
    SCItemDoorUserAnimationParams userAnimationParams; // Offset: 0x10
    CryStringT* TransitionTag; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
};

// Original name: SCItemDoorAnimationParams
// Size: 0x20
// VTable: 0x1499f1f80
struct SCItemDoorAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DefaultAnimationDurationScale; // Offset: 0x8
    float SecondaryAnimationDurationScale; // Offset: 0xc
    SCItemDoorUserAnimationParams userAnimationParams; // Offset: 0x10
};

// Original name: DynArray_UserRTPC
// Generated DynArray for base type: UserRTPC
// Size: 0x8
struct DynArray_UserRTPC {
    UserRTPC* m_data; // Offset: 0x0
};

// Original name: DynArray_UnitTestSubRecord
// Generated DynArray for base type: UnitTestSubRecord
// Size: 0x8
struct DynArray_UnitTestSubRecord {
    UnitTestSubRecord* m_data; // Offset: 0x0
};

// Original name: DynArray_S42StatOperationBase
// Generated DynArray for base type: S42StatOperationBase
// Size: 0x8
struct DynArray_S42StatOperationBase {
    S42StatOperationBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerActorActionHandlerTask
// Generated DynArray for base type: SSequencerActorActionHandlerTask
// Size: 0x8
struct DynArray_SSequencerActorActionHandlerTask {
    SSequencerActorActionHandlerTask* m_data; // Offset: 0x0
};

// Original name: DynArray_SUsableIdlePoseOverride
// Generated DynArray for base type: SUsableIdlePoseOverride
// Size: 0x8
struct DynArray_SUsableIdlePoseOverride {
    SUsableIdlePoseOverride* m_data; // Offset: 0x0
};

// Original name: SDecayCurveMaxValues
// Size: 0x50
// VTable: 0x149a5e2e0
struct SDecayCurveMaxValues {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SDecayCurveMaxValueParams xMaxValueParams; // Offset: 0x8
    SDecayCurveMaxValueParams yMaxValueParams; // Offset: 0x20
    SDecayCurveMaxValueParams zMaxValueParams; // Offset: 0x38
};

// Original name: BuildingBlocks_FieldModifierRecordRef
// Size: 0x18
// VTable: 0x14998c610
struct BuildingBlocks_FieldModifierRecordRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_FieldModifierRecordRefTypeBase field; // Offset: 0x8
};

// Original name: DynArray_SShopUIProviderCategoryIcon
// Generated DynArray for base type: SShopUIProviderCategoryIcon
// Size: 0x8
struct DynArray_SShopUIProviderCategoryIcon {
    SShopUIProviderCategoryIcon* m_data; // Offset: 0x0
};

// Original name: DynArray_UIStateDisplay_Threshold
// Generated DynArray for base type: UIStateDisplay_Threshold
// Size: 0x8
struct DynArray_UIStateDisplay_Threshold {
    UIStateDisplay_Threshold* m_data; // Offset: 0x0
};

// Original name: DynArray_EmotionDescription
// Generated DynArray for base type: EmotionDescription
// Size: 0x8
struct DynArray_EmotionDescription {
    EmotionDescription* m_data; // Offset: 0x0
};

// Original name: ActorStatusBuff
// Size: 0x30
// VTable: 0x1499fc600
struct ActorStatusBuff {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statusEffectType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    StatusBuffTypeBase buffApplication; // Offset: 0x10
    float buffValue; // Offset: 0x20
    float buffDuration; // Offset: 0x24
    float buffDurationCap; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: DynArray_SCItemPriorityTagParam
// Generated DynArray for base type: SCItemPriorityTagParam
// Size: 0x8
struct DynArray_SCItemPriorityTagParam {
    SCItemPriorityTagParam* m_data; // Offset: 0x0
};

// Original name: SReputationContextBBPropertyParams
// Size: 0x28
// VTable: 0x149a961f8
struct SReputationContextBBPropertyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SBBDynamicPropertyBase dynamicProperty; // Offset: 0x18
};

// Original name: SExtinguisherImpactParams
// Size: 0x28
// VTable: 0x149a7b238
struct SExtinguisherImpactParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle particleEffect; // Offset: 0x8
    float distanceFromImpactPoint; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: MistedBreathParams
// Size: 0x30
// VTable: 0x149a6cab8
struct MistedBreathParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float apparentTemperatureTrigger; // Offset: 0x8
    float minStrengthAtTemperature; // Offset: 0xc
    float maxStrengthAtTemperature; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    GlobalResourceParticle particleEffect; // Offset: 0x18
};

// Original name: WeatherEffects_SpaceLoopEffect
// Size: 0x28
// VTable: 0x149997c70
struct WeatherEffects_SpaceLoopEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle effect; // Offset: 0x8
    bool updateStrength; // Offset: 0x20
    bool updateCount; // Offset: 0x21
    uint8_t _pad_1[0x6]; // Offset: 0x22
};

// Original name: DematerializeAnimation
// Size: 0x88
// VTable: 0x149aa4760
struct DematerializeAnimation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float dissolveStartTime; // Offset: 0x8
    float dissolveDuration; // Offset: 0xc
    GlobalResourceParticle headEffect; // Offset: 0x10
    GlobalResourceParticle armEffect; // Offset: 0x28
    GlobalResourceParticle legEffect; // Offset: 0x40
    GlobalResourceParticle torsoEffect; // Offset: 0x58
    GlobalResourceParticle debugEffect; // Offset: 0x70
};

// Original name: SurfaceParticleRTTParams
// Size: 0x38
// VTable: 0x149998038
struct SurfaceParticleRTTParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float cameraFov; // Offset: 0x8
    float aspectRatio; // Offset: 0xc
    GlobalResourceParticle particleEffect; // Offset: 0x10
    CryStringT* sdfTexture; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
};

// Original name: SSCLocalPlayerComponentParams
// Size: 0x30
// VTable: 0x149a67bc0
struct SSCLocalPlayerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceParticle bloodEffect; // Offset: 0x18
};

// Original name: PlanetEffectTestParams
// Size: 0x40
// VTable: 0x14999b9c8
struct PlanetEffectTestParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceParticle planetEffect; // Offset: 0x18
    CryStringT* surfaceType; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x38
};

// Original name: EntityComponentExtinguisher
// Size: 0x58
// VTable: 0x14997b438
struct EntityComponentExtinguisher {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enable; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float strength; // Offset: 0x1c
    ExtinguishType_Base type_; /* type */ // Offset: 0x20
    GlobalResourceParticle extinguishingEffectOverride; // Offset: 0x30
    float vectorFieldRadius; // Offset: 0x48
    float vectorFieldWidth; // Offset: 0x4c
    float vectorFieldFalloff; // Offset: 0x50
    float vectorFieldMaxStrength; // Offset: 0x54
};

// Original name: BlobVFXDistanceParams
// Size: 0x28
// VTable: 0x1499c4d38
struct BlobVFXDistanceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle effect; // Offset: 0x8
    double distance; // Offset: 0x20
};

// Original name: FireHazardGlobalDefaultEffects
// Size: 0xa0
// VTable: 0x14997bb50
struct FireHazardGlobalDefaultEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* voxelFireEffect; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    GlobalResourceParticle voxelFlashIgnitionEffect; // Offset: 0x18
    GlobalResourceParticle entityFireEffect; // Offset: 0x30
    GlobalResourceParticle entitySmokeEffect; // Offset: 0x48
    GlobalResourceParticle defaultSprayExtinguishingEffect; // Offset: 0x60
    GlobalResourceParticle defaultSphereExtinguishingEffect; // Offset: 0x78
    float maximumSmokeEmission; // Offset: 0x90
    float entityReferenceSize; // Offset: 0x94
    float entityMinimumSize; // Offset: 0x98
    uint8_t _pad_2[0x4]; // Offset: 0x9c
};

// Original name: DynArray_GlobalResourceParticle
// Generated DynArray for base type: GlobalResourceParticle
// Size: 0x8
struct DynArray_GlobalResourceParticle {
    GlobalResourceParticle* m_data; // Offset: 0x0
};

// Original name: DynArray_CommunicationVariableBool
// Generated DynArray for base type: CommunicationVariableBool
// Size: 0x8
struct DynArray_CommunicationVariableBool {
    CommunicationVariableBool* m_data; // Offset: 0x0
};

// Original name: SVehicleHudParams
// Size: 0x38
// VTable: 0x149a38cb8
struct SVehicleHudParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SHudTapeParams altitudeTape; // Offset: 0x8
    SHudTapeParams compassTape; // Offset: 0x20
};

// Original name: DynArray_BuildingBlocks_StyleSelectorConditionBase
// Generated DynArray for base type: BuildingBlocks_StyleSelectorConditionBase
// Size: 0x8
struct DynArray_BuildingBlocks_StyleSelectorConditionBase {
    BuildingBlocks_StyleSelectorConditionBase* m_data; // Offset: 0x0
};

// Original name: ActorStatusEffect
// Size: 0x30
// VTable: 0x1499fc880
struct ActorStatusEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BasicStatusEffectApplicationType statusEffectValueType; // Offset: 0x8
    ActorStatusStatModifier affectedStat; // Offset: 0x18
    CLocIdentifier* display; // Offset: 0x28
};

// Original name: BuildingBlocks_KeyframeModifierData
// Size: 0x28
// VTable: 0x1499865e8
struct BuildingBlocks_KeyframeModifierData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_TimingFunctionBase timingFunction; // Offset: 0x8
    BuildingBlocks_FieldModifierBase modifier; // Offset: 0x18
};

// Original name: DynArray_BuildingBlocks_FieldModifierBase
// Generated DynArray for base type: BuildingBlocks_FieldModifierBase
// Size: 0x8
struct DynArray_BuildingBlocks_FieldModifierBase {
    BuildingBlocks_FieldModifierBase* m_data; // Offset: 0x0
};

// Original name: MedBedSurgeryNames
// Size: 0x138
// VTable: 0x149a0ff98
struct MedBedSurgeryNames {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    MedBedSurgeryNamesInjurySeverity headInjuries; // Offset: 0x18
    MedBedSurgeryNamesInjurySeverity torsoInjuries; // Offset: 0x48
    MedBedSurgeryNamesInjurySeverity leftArmInjuries; // Offset: 0x78
    MedBedSurgeryNamesInjurySeverity rightArmInjuries; // Offset: 0xa8
    MedBedSurgeryNamesInjurySeverity leftLegInjuries; // Offset: 0xd8
    MedBedSurgeryNamesInjurySeverity rightLegInjuries; // Offset: 0x108
};

// Original name: DynArray_MobiGlasAuthorizationEntry
// Generated DynArray for base type: MobiGlasAuthorizationEntry
// Size: 0x8
struct DynArray_MobiGlasAuthorizationEntry {
    MobiGlasAuthorizationEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_TestAtomics
// Generated DynArray for base type: TestAtomics
// Size: 0x8
struct DynArray_TestAtomics {
    TestAtomics* m_data; // Offset: 0x0
};

// Original name: ItemResourceControlConditionGravity
// Size: 0x20
// VTable: 0x1499a9038
struct ItemResourceControlConditionGravity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float gravModifier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    ItemResourceControlParameterBase funcionality; // Offset: 0x10
};

// Original name: DynArray_ItemResourceControlParameterBase
// Generated DynArray for base type: ItemResourceControlParameterBase
// Size: 0x8
struct DynArray_ItemResourceControlParameterBase {
    ItemResourceControlParameterBase* m_data; // Offset: 0x0
};

// Original name: EATransportTransitionGroupParams
// Size: 0x30
// VTable: 0x149a28738
struct EATransportTransitionGroupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EATransportBaseTransitionParams transitionTypeParams; // Offset: 0x8
    ARDataType onFinished; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    int32_t nextTransitionOverride; // Offset: 0x1c
    float landingWaitTime; // Offset: 0x20
    float landingWaitTimeForTransfer; // Offset: 0x24
    float timeToDisableSpawnSelection; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: ContractDifficulty
// Size: 0x30
// VTable: 0x149971d50
struct ContractDifficulty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ContractDifficultyProfile difficultyProfile; // Offset: 0x8
    ARDataType mechanicalSkill; // Offset: 0x20
    ARDataType mentalLoad; // Offset: 0x24
    ARDataType riskOfLoss; // Offset: 0x28
    ARDataType gameKnowledge; // Offset: 0x2c
};

// Original name: DynArray_StarMapAmenityTypeEntry
// Generated DynArray for base type: StarMapAmenityTypeEntry
// Size: 0x8
struct DynArray_StarMapAmenityTypeEntry {
    StarMapAmenityTypeEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_LightningTargetMode
// Generated DynArray for base type: LightningTargetMode
// Size: 0x8
struct DynArray_LightningTargetMode {
    LightningTargetMode* m_data; // Offset: 0x0
};

// Original name: PlanetDayNightTemperatureTemplate
// Size: 0x20
// VTable: 0x14999d170
struct PlanetDayNightTemperatureTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlanetDayNightTemperatureParams dayNightTemperatureParams; // Offset: 0x8
};

// Original name: BuildingBlocks_Animation
// Size: 0x48
// VTable: 0x149983f98
struct BuildingBlocks_Animation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_TimelineTypeBase animationTimeline; // Offset: 0x8
    CryStringT* dynamicStartTimeVariableName; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    float duration; // Offset: 0x28
    float delay; // Offset: 0x2c
    float delayRandomRange; // Offset: 0x30
    ARDataType direction; // Offset: 0x34
    ARDataType fillMode; // Offset: 0x38
    uint8_t iterationCount; // Offset: 0x3c
    bool loopIndefinitely; // Offset: 0x3d
    bool timeSync; // Offset: 0x3e
    bool additive; // Offset: 0x3f
    bool timescaleIndependent; // Offset: 0x40
    uint8_t _pad_2[0x7]; // Offset: 0x41
};

// Original name: WorldDisplayEnvironmentBase
// Size: 0x20
// VTable: 0x149a304e8
struct WorldDisplayEnvironmentBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType alignment; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    WorldDisplayEnvironmentColor environmentColor; // Offset: 0x10
};

// Original name: DynArray_LegacyCraftingCost_Base
// Generated DynArray for base type: LegacyCraftingCost_Base
// Size: 0x8
struct DynArray_LegacyCraftingCost_Base {
    LegacyCraftingCost_Base* m_data; // Offset: 0x0
};

// Original name: SCItemJumpThrusterPackParams
// Size: 0x30
// VTable: 0x149a63550
struct SCItemJumpThrusterPackParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    JumpThrusterPackConfig jumpThrusterPackConfig; // Offset: 0x18
};

// Original name: BoidsBehaviorRuleContainer
// Size: 0x20
// VTable: 0x1499eae38
struct BoidsBehaviorRuleContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    BoidsBehaviorRule rule; // Offset: 0x10
};

// Original name: DynArray_SActorForceReactionsVehicleForceDampeningDef
// Generated DynArray for base type: SActorForceReactionsVehicleForceDampeningDef
// Size: 0x8
struct DynArray_SActorForceReactionsVehicleForceDampeningDef {
    SActorForceReactionsVehicleForceDampeningDef* m_data; // Offset: 0x0
};

// Original name: SharedTacticParams
// Size: 0x18
// VTable: 0x1499b74b0
struct SharedTacticParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TacticPlayerDistance distanceToTargetThreshold; // Offset: 0x8
};

// Original name: DynArray_SAccumulatorParams
// Generated DynArray for base type: SAccumulatorParams
// Size: 0x8
struct DynArray_SAccumulatorParams {
    SAccumulatorParams* m_data; // Offset: 0x0
};

// Original name: WeaponProceduralClip
// Size: 0x18
// VTable: 0x149aac190
struct WeaponProceduralClip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WeaponProceduralClipBase weaponProceduralClipBase; // Offset: 0x8
};

// Original name: DynArray_LiteralStringUserVariable
// Generated DynArray for base type: LiteralStringUserVariable
// Size: 0x8
struct DynArray_LiteralStringUserVariable {
    LiteralStringUserVariable* m_data; // Offset: 0x0
};

// Original name: DamageMapDamageTypes
// Size: 0x38
// VTable: 0x149937388
struct DamageMapDamageTypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageMapChannels physical; // Offset: 0x8
    DamageMapChannels energy; // Offset: 0x20
};

// Original name: ProcAimBallJointTypeConfig
// Size: 0x38
// VTable: 0x149aaf418
struct ProcAimBallJointTypeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* jointName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float rotationRange; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    AngYPR rotationRangeOffset; // Offset: 0x20
};

// Original name: DynArray_CustomMaterialEntryParams
// Generated DynArray for base type: CustomMaterialEntryParams
// Size: 0x8
struct DynArray_CustomMaterialEntryParams {
    CustomMaterialEntryParams* m_data; // Offset: 0x0
};

// Original name: DynArray_RaSTaRLibraryElement
// Generated DynArray for base type: RaSTaRLibraryElement
// Size: 0x8
struct DynArray_RaSTaRLibraryElement {
    RaSTaRLibraryElement* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorStat
// Generated DynArray for base type: VehicleEditorStat
// Size: 0x8
struct DynArray_VehicleEditorStat {
    VehicleEditorStat* m_data; // Offset: 0x0
};

// Original name: JournalEntryVideo
// Size: 0x28
// VTable: 0x149975928
struct JournalEntryVideo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    VideoComms videoDef; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x20
};

// Original name: DynArray_VideoComms
// Generated DynArray for base type: VideoComms
// Size: 0x8
struct DynArray_VideoComms {
    VideoComms* m_data; // Offset: 0x0
};

// Original name: SEntityDensityClassOverwritesManual
// Size: 0x20
// VTable: 0x149ac4540
struct SEntityDensityClassOverwritesManual {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityDensityClassOverwrites densityOverwritesManual; // Offset: 0x8
};

// Original name: SEntityDensityClassOverwritesRecord
// Size: 0x20
// VTable: 0x149ac44e0
struct SEntityDensityClassOverwritesRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityDensityClassOverwrites densityOverWrites; // Offset: 0x8
};

// Original name: DynArray_SInternalHardpointLink
// Generated DynArray for base type: SInternalHardpointLink
// Size: 0x8
struct DynArray_SInternalHardpointLink {
    SInternalHardpointLink* m_data; // Offset: 0x0
};

// Original name: DynArray_DialogueExternalSource
// Generated DynArray for base type: DialogueExternalSource
// Size: 0x8
struct DynArray_DialogueExternalSource {
    DialogueExternalSource* m_data; // Offset: 0x0
};

// Original name: ScreenEffects_ParamValue_Vec4
// Size: 0x20
// VTable: 0x14999c160
struct ScreenEffects_ParamValue_Vec4 {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec4 value; // Offset: 0x8
};

// Original name: QuantumDriveSplineFXParams
// Size: 0x58
// VTable: 0x149a51ee0
struct QuantumDriveSplineFXParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle splineParticleEffect; // Offset: 0x8
    QuantumDriveSplineFXNode startNodeParams; // Offset: 0x20
    QuantumDriveSplineFXNode segmentNodeParams; // Offset: 0x30
    int32_t numSegmentNodes; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
    QuantumDriveSplineFXNode endNodeParams; // Offset: 0x48
};

// Original name: DynArray_BaseDataSetMatchCondition
// Generated DynArray for base type: BaseDataSetMatchCondition
// Size: 0x8
struct DynArray_BaseDataSetMatchCondition {
    BaseDataSetMatchCondition* m_data; // Offset: 0x0
};

// Original name: PlayerNotificationBannerParams
// Size: 0x30
// VTable: 0x149aa03c8
struct PlayerNotificationBannerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* title; // Offset: 0x8
    CLocIdentifier* desc; // Offset: 0x10
    CLocIdentifier* prompt; // Offset: 0x18
    PlayerNotificationBannerOptionsParams options; // Offset: 0x20
};

// Original name: DynArray_SStateModifier
// Generated DynArray for base type: SStateModifier
// Size: 0x8
struct DynArray_SStateModifier {
    SStateModifier* m_data; // Offset: 0x0
};

// Original name: DynArray_AnimationGraph_Timer
// Generated DynArray for base type: AnimationGraph_Timer
// Size: 0x8
struct DynArray_AnimationGraph_Timer {
    AnimationGraph_Timer* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerBaseMaterialSet
// Generated DynArray for base type: SCharacterCustomizerBaseMaterialSet
// Size: 0x8
struct DynArray_SCharacterCustomizerBaseMaterialSet {
    SCharacterCustomizerBaseMaterialSet* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerWildlineSubconditionBase
// Generated DynArray for base type: SCharacterCustomizerWildlineSubconditionBase
// Size: 0x8
struct DynArray_SCharacterCustomizerWildlineSubconditionBase {
    SCharacterCustomizerWildlineSubconditionBase* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_FieldModifierEnumerated
// Size: 0x18
// VTable: 0x14998c4f0
struct BuildingBlocks_FieldModifierEnumerated {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_FieldModifierEnumeratedTypeBase field; // Offset: 0x8
};

// Original name: CraftingGameplayProperty_Base_Int
// Size: 0x18
// VTable: 0x1499b9580
struct CraftingGameplayProperty_Base_Int {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingGameplayPropertyImpl_Base_Int implementation; // Offset: 0x8
};

// Original name: DynArray_TriggerSubConditionDef
// Generated DynArray for base type: TriggerSubConditionDef
// Size: 0x8
struct DynArray_TriggerSubConditionDef {
    TriggerSubConditionDef* m_data; // Offset: 0x0
};

// Original name: LocalPlayerSpeedThrottleComponent
// Size: 0x40
// VTable: 0x149a61e00
struct LocalPlayerSpeedThrottleComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SpeedThrottleConfiguration params; // Offset: 0x8
};

// Original name: BuildingBlocks_DropTargetPolicyBase
// Size: 0x20
// VTable: 0x1499821c0
struct BuildingBlocks_DropTargetPolicyBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_BindingsVariableInput IdVariable; // Offset: 0x8
};

// Original name: SecurityClearance_OutfitRequirement_NotDef
// Size: 0x18
// VTable: 0x149974600
struct SecurityClearance_OutfitRequirement_NotDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SecurityClearance_OutfitRequirementDef requirementToInvert; // Offset: 0x8
};

// Original name: DynArray_SecurityClearance_OutfitRequirementDef
// Generated DynArray for base type: SecurityClearance_OutfitRequirementDef
// Size: 0x8
struct DynArray_SecurityClearance_OutfitRequirementDef {
    SecurityClearance_OutfitRequirementDef* m_data; // Offset: 0x0
};

// Original name: DynArray_AnimationControlActorIK
// Generated DynArray for base type: AnimationControlActorIK
// Size: 0x8
struct DynArray_AnimationControlActorIK {
    AnimationControlActorIK* m_data; // Offset: 0x0
};

// Original name: SMiningDamageMapParams
// Size: 0xc8
// VTable: 0x1499e7d10
struct SMiningDamageMapParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec4 damageStrength; // Offset: 0x8
    Vec4 innerRadii; // Offset: 0x20
    Vec4 outerRadii; // Offset: 0x38
    bool isActive; // Offset: 0x50
    uint8_t _pad_1[0x3]; // Offset: 0x51
    float hitTime; // Offset: 0x54
    float laserDamageFullValue; // Offset: 0x58
    float damageStrengthPowerCurveBaseValue; // Offset: 0x5c
    float damageStrengthPowerCurve; // Offset: 0x60
    uint8_t _pad_2[0x4]; // Offset: 0x64
    SDamageCurveParams damageStrengthPowerCurvePoints; // Offset: 0x68
    float innerRadiusPowerCurveBaseValue; // Offset: 0x80
    float innerRadiusPowerCurve; // Offset: 0x84
    SDamageCurveParams innerRadiusPowerCurvePoints; // Offset: 0x88
    float outerRadiusPowerCurveBaseValue; // Offset: 0xa0
    float outerRadiusPowerCurve; // Offset: 0xa4
    SDamageCurveParams outerRadiusPowerCurvePoints; // Offset: 0xa8
    bool strengthAffectedByLaserThrottle; // Offset: 0xc0
    bool strengthAffectedByRockEnergyAmount; // Offset: 0xc1
    bool strengthAffectedByLaserDamage; // Offset: 0xc2
    bool radiusAffectedByLaserThrottle; // Offset: 0xc3
    bool radiusAffectedByRockEnergyAmount; // Offset: 0xc4
    bool radiusAffectedByLaserDamage; // Offset: 0xc5
    uint8_t _pad_3[0x2]; // Offset: 0xc6
};

// Original name: VehicleAIPropertiesParams
// Size: 0x18
// VTable: 0x1499aa9e0
struct VehicleAIPropertiesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    VehicleAITargetingParams aiTargetingParams; // Offset: 0x8
};

// Original name: DynArray_IObservableExtender
// Generated DynArray for base type: IObservableExtender
// Size: 0x8
struct DynArray_IObservableExtender {
    IObservableExtender* m_data; // Offset: 0x0
};

// Original name: CameraTargetOffsetConfig
// Size: 0x58
// VTable: 0x1499b22c0
struct CameraTargetOffsetConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 targetPositionOffset; // Offset: 0x8
    Vec3 userTargetOffsetMin; // Offset: 0x20
    Vec3 userTargetOffsetMax; // Offset: 0x38
    float userTargetOffsetSpeed; // Offset: 0x50
    float smoothTime; // Offset: 0x54
};

// Original name: MobiGlasPositionParams
// Size: 0x30
// VTable: 0x149aa1aa8
struct MobiGlasPositionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 offset; // Offset: 0x8
    float scale; // Offset: 0x20
    float angle; // Offset: 0x24
    float tilt; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: SSimulationParamsPendulum
// Size: 0x78
// VTable: 0x1499bac60
struct SSimulationParamsPendulum {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool UseRedirect; // Offset: 0x8
    bool UseDebugSetup; // Offset: 0x9
    bool UseDebugText; // Offset: 0xa
    bool UseSimulation; // Offset: 0xb
    uint8_t SimFPS; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    Vec3 PivotOffset; // Offset: 0x10
    Vec3 SimulationAxis; // Offset: 0x28
    float Mass; // Offset: 0x40
    float Gravity; // Offset: 0x44
    float Damping; // Offset: 0x48
    float JointSpring; // Offset: 0x4c
    Vec2 SpringTarget; // Offset: 0x50
    float ConeAngle; // Offset: 0x60
    float HingeRotation; // Offset: 0x64
    Vec2 Capsule; // Offset: 0x68
};

// Original name: AeroSurface
// Size: 0xb8
// VTable: 0x149a19cc0
struct AeroSurface {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 offset; // Offset: 0x18
    Vec2 size; // Offset: 0x30
    Vec3 orientation; // Offset: 0x40
    bool flatPlateSurface; // Offset: 0x58
    uint8_t _pad_2[0x3]; // Offset: 0x59
    float liftLevelFlight; // Offset: 0x5c
    float peakLift; // Offset: 0x60
    float minLift; // Offset: 0x64
    float negativeAoAMultiplier; // Offset: 0x68
    float flatPlateMultiplier; // Offset: 0x6c
    float criticalAngle; // Offset: 0x70
    float fullyStalledAngle; // Offset: 0x74
    Vec3 torqueMultiplier; // Offset: 0x78
    CryStringT* detachParentPartName; // Offset: 0x90
    uint8_t _pad_3[0x8]; // Offset: 0x98
    CryStringT* transformParentPartName; // Offset: 0xa0
    uint8_t _pad_4[0x10]; // Offset: 0xa8
};

// Original name: SEntityPhysicsWheel
// Size: 0x48
// VTable: 0x1499e7868
struct SEntityPhysicsWheel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* wheelJoint; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* castorJoint; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float radius; // Offset: 0x28
    uint8_t _pad_3[0x4]; // Offset: 0x2c
    Vec3 offset; // Offset: 0x30
};

// Original name: ARMarkerPlayerOffsetParams
// Size: 0x38
// VTable: 0x149a91028
struct ARMarkerPlayerOffsetParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 offset; // Offset: 0x8
    Vec3 offsetProportionPerMeter; // Offset: 0x20
};

// Original name: SHeadRecoilNoiseModifier
// Size: 0x38
// VTable: 0x149a71d98
struct SHeadRecoilNoiseModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 offsetModifier; // Offset: 0x8
    Vec3 noiseModifier; // Offset: 0x20
};

// Original name: SJumpDriveFlightLinearParams
// Size: 0x58
// VTable: 0x1499f57a8
struct SJumpDriveFlightLinearParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType linearLimiterType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 linearAccelerationPositive; // Offset: 0x10
    Vec3 linearAccelerationNegative; // Offset: 0x28
    bool allowUsingBoost; // Offset: 0x40
    uint8_t _pad_2[0x3]; // Offset: 0x41
    float maxSpeed; // Offset: 0x44
    float maxStrafeInputs; // Offset: 0x48
    float linearAccelDecay; // Offset: 0x4c
    bool useLinearInputs; // Offset: 0x50
    uint8_t _pad_3[0x7]; // Offset: 0x51
};

// Original name: SARDataComponentParams
// Size: 0xb0
// VTable: 0x149a03c40
struct SARDataComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType dataType; // Offset: 0x18
    float rangeMin; // Offset: 0x1c
    float rangeMax; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    Vec3 labelAttachOffset; // Offset: 0x28
    Vec3 queryOffset; // Offset: 0x40
    Vec3 labelScale; // Offset: 0x58
    ARDataType labelMovementType; // Offset: 0x70
    bool visibleThroughWalls; // Offset: 0x74
    uint8_t _pad_2[0x3]; // Offset: 0x75
    float labelZOrientationOffset; // Offset: 0x78
    uint8_t _pad_3[0x4]; // Offset: 0x7c
    CLocIdentifier* title1; // Offset: 0x80
    CLocIdentifier* title2; // Offset: 0x88
    CLocIdentifier* subtitle1; // Offset: 0x90
    CLocIdentifier* subtitle2; // Offset: 0x98
    CLocIdentifier* description; // Offset: 0xa0
    float scaleCapDistance; // Offset: 0xa8
    uint8_t _pad_4[0x4]; // Offset: 0xac
};

// Original name: CrossSectionGlobalParams
// Size: 0x28
// VTable: 0x1499c41e0
struct CrossSectionGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 globalCSFactor; // Offset: 0x8
    float maxDistance; // Offset: 0x20
    float lineOfSightAngle; // Offset: 0x24
};

// Original name: CylinderFieldGeom
// Size: 0x40
// VTable: 0x1499e8c68
struct CylinderFieldGeom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 center; // Offset: 0x8
    Vec3 axis; // Offset: 0x20
    float radius; // Offset: 0x38
    float hh; // Offset: 0x3c
};

// Original name: SSCSignatureSystemManualCrossSectionParams
// Size: 0x20
// VTable: 0x1499e9d80
struct SSCSignatureSystemManualCrossSectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 crossSection; // Offset: 0x8
};

// Original name: SCItemProximitySensorBoxParams
// Size: 0x40
// VTable: 0x1499f3a58
struct SCItemProximitySensorBoxParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    Vec3 Extent; // Offset: 0x10
    Vec3 Offset; // Offset: 0x28
};

// Original name: SEffectInputParamsSound
// Size: 0x78
// VTable: 0x14999b6b0
struct SEffectInputParamsSound {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* VarName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* ParamName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float MinRange; // Offset: 0x28
    float MaxRange; // Offset: 0x2c
    float Multiplier; // Offset: 0x30
    float LerpTime; // Offset: 0x34
    Vec3 VecGoal; // Offset: 0x38
    float DefaultValue; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
    Vec3 Axis; // Offset: 0x58
    ARDataType Type; // Offset: 0x70
    uint8_t _pad_4[0x4]; // Offset: 0x74
};

// Original name: CameraWheeledVehicleConfig
// Size: 0x40
// VTable: 0x1499b2698
struct CameraWheeledVehicleConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool smoothLinearVelocityX; // Offset: 0x8
    bool smoothLinearVelocityY; // Offset: 0x9
    bool smoothLinearVelocityZ; // Offset: 0xa
    uint8_t _pad_1[0x1]; // Offset: 0xb
    int32_t minWheelContacts; // Offset: 0xc
    Vec3 maxAirborneVelocities; // Offset: 0x10
    Vec3 smoothTimes; // Offset: 0x28
};

// Original name: SEntityBasePhysicsGridParams
// Size: 0x38
// VTable: 0x14999e478
struct SEntityBasePhysicsGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool inheritGravity; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 gravity; // Offset: 0x10
    ARDataType gridType; // Offset: 0x28
    float cellSize; // Offset: 0x2c
    bool gridPartsOnly; // Offset: 0x30
    bool portalExclusiveMode; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
};

// Original name: ThrusterMFXEntityParams
// Size: 0x50
// VTable: 0x149998b80
struct ThrusterMFXEntityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* customEffect; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 maxEmissionSizeScale; // Offset: 0x18
    float distanceOffSurface; // Offset: 0x30
    float strengthDistanceFalloffThreshold; // Offset: 0x34
    float thrusterThrottleImportance; // Offset: 0x38
    float directionalEffectAngleThreshold; // Offset: 0x3c
    float omnidirectionalEffectAngleThreshold; // Offset: 0x40
    float minimumEmitAngleScale; // Offset: 0x44
    float maximumEmitAngleScale; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: SCItemDoorConnectVisAreas
// Size: 0x20
// VTable: 0x1499f22f0
struct SCItemDoorConnectVisAreas {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 visAreaOffset; // Offset: 0x8
};

// Original name: SGuidanceAndControlPhaseParams
// Size: 0x48
// VTable: 0x149a24980
struct SGuidanceAndControlPhaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float angularSpeed; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 maxLinearAccelerationPositive; // Offset: 0x10
    Vec3 maxLinearAccelerationNegative; // Offset: 0x28
    float maxRotationAccel; // Offset: 0x40
    float pidAggression; // Offset: 0x44
};

// Original name: WebRTCCommsCallProjectorLightParams
// Size: 0x40
// VTable: 0x149a82810
struct WebRTCCommsCallProjectorLightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float temperature; // Offset: 0x8
    float intensity; // Offset: 0xc
    float radius; // Offset: 0x10
    float bulbRadius; // Offset: 0x14
    float lightFrustumAngle; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 offset; // Offset: 0x20
    bool castShadow; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
};

// Original name: Primitive_Billboard
// Size: 0x68
// VTable: 0x149a9f778
struct Primitive_Billboard {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 QuadCentre; // Offset: 0x8
    Vec2 QuadSize; // Offset: 0x20
    Vec2 ScreenOffset; // Offset: 0x30
    Vec2 UV_Start; // Offset: 0x40
    Vec2 UV_Size; // Offset: 0x50
    bool InScreenSpace; // Offset: 0x60
    uint8_t _pad_1[0x7]; // Offset: 0x61
};

// Original name: CommsNotificationStageActorMark
// Size: 0x38
// VTable: 0x149974d48
struct CommsNotificationStageActorMark {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
    Vec3 rotation; // Offset: 0x20
};

// Original name: StickyFilterAutocenterParams
// Size: 0x50
// VTable: 0x149a88160
struct StickyFilterAutocenterParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float idleTimeBeforeRecenter; // Offset: 0x8
    float timeRecenterAtMinAngle; // Offset: 0xc
    float timeRecenterAtMaxAngle; // Offset: 0x10
    float timeRecenterAtMinAngleMoving; // Offset: 0x14
    float timeRecenterAtMaxAngleMoving; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 eyeOffsetAtMinDistance; // Offset: 0x20
    Vec3 eyeOffsetAtMaxDistance; // Offset: 0x38
};

// Original name: SCItemProximitySensorSphereParams
// Size: 0x30
// VTable: 0x1499f3ad8
struct SCItemProximitySensorSphereParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    float Radius; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    Vec3 Center; // Offset: 0x18
};

// Original name: SCItemDoorHazardLightsParams
// Size: 0x60
// VTable: 0x1499f3788
struct SCItemDoorHazardLightsParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Vec3 ProbeOffset; // Offset: 0x18
    CryStringT* NoHazardEffectGroup; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x38
    CryStringT* MinorHazardEffectGroup; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    CryStringT* MajorHazardEffectGroup; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
};

// Original name: SHealingBeamBoneEntryParams
// Size: 0x48
// VTable: 0x149a767a0
struct SHealingBeamBoneEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* boneName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 boneOffset; // Offset: 0x18
    Vec3 cardOffset; // Offset: 0x30
};

// Original name: SimpleRotationComponentVariation
// Size: 0x28
// VTable: 0x1499e2460
struct SimpleRotationComponentVariation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 rotationAxisVariation; // Offset: 0x8
    float rotationSpeedVariationFactor; // Offset: 0x20
    bool randomizeStartAngle; // Offset: 0x24
    uint8_t _pad_1[0x3]; // Offset: 0x25
};

// Original name: SSalvageAreaBoxParams
// Size: 0x38
// VTable: 0x149a7f0f8
struct SSalvageAreaBoxParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 extents; // Offset: 0x8
    Vec3 offset; // Offset: 0x20
};

// Original name: LandingPadSize
// Size: 0x40
// VTable: 0x149aab070
struct LandingPadSize {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t id; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 shipSize; // Offset: 0x10
    Vec3 groundVehicleSize; // Offset: 0x28
};

// Original name: HeadMotionOffsetParams
// Size: 0x70
// VTable: 0x149a98170
struct HeadMotionOffsetParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 minOffset; // Offset: 0x8
    Vec3 maxOffset; // Offset: 0x20
    float timePeriod; // Offset: 0x38
    float smoothConstant; // Offset: 0x3c
    bool flipShakeVector; // Offset: 0x40
    uint8_t _pad_1[0x3]; // Offset: 0x41
    float flipShakeVectorError; // Offset: 0x44
    bool matchFootstepsCadence; // Offset: 0x48
    uint8_t _pad_2[0x3]; // Offset: 0x49
    float footstepsCycleDelay; // Offset: 0x4c
    Vec3 sineWavesPerCycle; // Offset: 0x50
    float minScaleLookingAway; // Offset: 0x68
    float maxLookingAwayAngle; // Offset: 0x6c
};

// Original name: Texture3DFieldGeom
// Size: 0x60
// VTable: 0x1499e8f38
struct Texture3DFieldGeom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* texture3D; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 size; // Offset: 0x18
    Vec3 posOffset; // Offset: 0x30
    Ang3 rotOffset; // Offset: 0x48
};

// Original name: StickyFilterMovementParams
// Size: 0x58
// VTable: 0x149a87ef0
struct StickyFilterMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool matchNPCSpeed; // Offset: 0x8
    bool constantFOV; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float approachingOuterSpeed; // Offset: 0xc
    float approachingInnerSpeed; // Offset: 0x10
    float retreatOuterSpeed; // Offset: 0x14
    float retreatIntermediateSpeed; // Offset: 0x18
    float innerRadius; // Offset: 0x1c
    float intermediateRadius; // Offset: 0x20
    float outerRadius; // Offset: 0x24
    float breakRadius; // Offset: 0x28
    float nudgeFraction; // Offset: 0x2c
    Vec3 offset; // Offset: 0x30
    bool lockOffsetRotation; // Offset: 0x48
    uint8_t _pad_2[0x3]; // Offset: 0x49
    float lerpTimeToFullSpeedOnStop; // Offset: 0x4c
    float minMovementThreshold; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
};

// Original name: LandingUIParams
// Size: 0x98
// VTable: 0x1499d1188
struct LandingUIParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool hidden; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float timeToLoop; // Offset: 0x1c
    int32_t gridLayerCount; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    Vec3 dimensions; // Offset: 0x28
    float drawFarDistance; // Offset: 0x40
    float gridAreaHeightPerc; // Offset: 0x44
    float baseLineWidthPerc; // Offset: 0x48
    float basePaddingInnerPerc; // Offset: 0x4c
    float baseOffset; // Offset: 0x50
    float gridLineWidthPerc; // Offset: 0x54
    float gridHighlightFeatherPerc; // Offset: 0x58
    float gridFalloffPerc; // Offset: 0x5c
    float gridPaddingInnerPerc; // Offset: 0x60
    uint8_t _pad_3[0x4]; // Offset: 0x64
    CryStringT* baseLineMaterial; // Offset: 0x68
    uint8_t _pad_4[0x8]; // Offset: 0x70
    CryStringT* beamMaterial; // Offset: 0x78
    uint8_t _pad_5[0x8]; // Offset: 0x80
    CryStringT* gridLineMaterial; // Offset: 0x88
    uint8_t _pad_6[0x8]; // Offset: 0x90
};

// Original name: SEntityComponentPlanetAreaParams
// Size: 0x40
// VTable: 0x14999d870
struct SEntityComponentPlanetAreaParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Vec3 size; // Offset: 0x18
    ARDataType areaType; // Offset: 0x30
    ARDataType areaFitting; // Offset: 0x34
    int32_t lodLevel; // Offset: 0x38
    bool bOverride; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
};

// Original name: EAPickupBaseComponentParams
// Size: 0x50
// VTable: 0x149a27970
struct EAPickupBaseComponentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t duration; // Offset: 0x8
    float acquireRadius; // Offset: 0xc
    float spawnRadius; // Offset: 0x10
    float initialScale; // Offset: 0x14
    float beginScalingDistance; // Offset: 0x18
    float rotationSpeed; // Offset: 0x1c
    bool alternativeRotationAxis; // Offset: 0x20
    bool enableCurveOffset; // Offset: 0x21
    uint8_t _pad_1[0x2]; // Offset: 0x22
    float curveOffsetSpeed; // Offset: 0x24
    float curveOffsetAmplitude; // Offset: 0x28
    float maxScale; // Offset: 0x2c
    float multiplierSuppression; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    Vec3 assetRotation; // Offset: 0x38
};

// Original name: SEffectInputParamsDC
// Size: 0x70
// VTable: 0x14999b5f0
struct SEffectInputParamsDC {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* VarName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* ParamName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float MinRange; // Offset: 0x28
    float MaxRange; // Offset: 0x2c
    float Multiplier; // Offset: 0x30
    float LerpTime; // Offset: 0x34
    Vec3 VecGoal; // Offset: 0x38
    float DefaultValue; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
    Vec3 Axis; // Offset: 0x58
};

// Original name: SJumpDriveFlightRotationParams
// Size: 0x88
// VTable: 0x1499f5630
struct SJumpDriveFlightRotationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType pitchYawLimiterType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 maxAngularVelocity; // Offset: 0x10
    Vec3 maxAngularAccelerationPositive; // Offset: 0x28
    Vec3 maxAngularAccelerationNegative; // Offset: 0x40
    float angularAccelerationDecay; // Offset: 0x58
    bool useAngularInputs; // Offset: 0x5c
    bool allowUsingBoost; // Offset: 0x5d
    uint8_t _pad_2[0x2a]; // Offset: 0x5e
};

// Original name: ActorCameraOffsetParams
// Size: 0x30
// VTable: 0x1499b2a10
struct ActorCameraOffsetParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useSkeletonCenter; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 offset; // Offset: 0x10
    float smoothSpeed; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: CommsNotificationStageCamera
// Size: 0x40
// VTable: 0x149974d40
struct CommsNotificationStageCamera {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
    Vec3 rotation; // Offset: 0x20
    float FOV; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: FireHazardIgniteEvent
// Size: 0x30
// VTable: 0x14997cd78
struct FireHazardIgniteEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float ignitionStrength; // Offset: 0x8
    float ignitionRadius; // Offset: 0xc
    float ignitionChance; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    Vec3 offset; // Offset: 0x18
};

// Original name: ClosestOrientationHandholdAttachSpotChoiceParams
// Size: 0x28
// VTable: 0x149a03498
struct ClosestOrientationHandholdAttachSpotChoiceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 desiredUpDirection; // Offset: 0x8
    ARDataType space; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SObservablePointDef
// Size: 0x30
// VTable: 0x149a01b58
struct SObservablePointDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* helperName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 relativePositionOffset; // Offset: 0x18
};

// Original name: SLoadingAreaParams
// Size: 0x58
// VTable: 0x149a75798
struct SLoadingAreaParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    Vec3 dimensions; // Offset: 0x20
    bool autoRegisterWithATC; // Offset: 0x38
    uint8_t _pad_2[0x3]; // Offset: 0x39
    int32_t dockingClassOverride; // Offset: 0x3c
    bool allowGroundVehicles; // Offset: 0x40
    bool allowSpaceships; // Offset: 0x41
    uint8_t _pad_3[0x2]; // Offset: 0x42
    ARDataType canBeUsedBy; // Offset: 0x44
    CLocIdentifier* HUDDisplayName; // Offset: 0x48
    int32_t ATCPriority; // Offset: 0x50
    bool autoGenerateUI; // Offset: 0x54
    uint8_t _pad_4[0x3]; // Offset: 0x55
};

// Original name: HandholdAttachSpotParams
// Size: 0x48
// VTable: 0x149a031c0
struct HandholdAttachSpotParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 offset; // Offset: 0x18
    AngYPR orientation; // Offset: 0x30
};

// Original name: BuildingBlocks_LookAtTransformer
// Size: 0x20
// VTable: 0x149991060
struct BuildingBlocks_LookAtTransformer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
};

// Original name: SCLegacyThrustParams
// Size: 0x98
// VTable: 0x149a62c40
struct SCLegacyThrustParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float MaxLinearVelocity; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 MaxAngularVelocity; // Offset: 0x10
    Vec3 MaxLinearAccelerationPositive; // Offset: 0x28
    Vec3 MaxLinearAccelerationNegative; // Offset: 0x40
    float LinearAccelerationDecay; // Offset: 0x58
    uint8_t _pad_2[0x4]; // Offset: 0x5c
    Vec3 MaxAngularAccelerationPositive; // Offset: 0x60
    Vec3 MaxAngularAccelerationNegative; // Offset: 0x78
    float AngularAccelerationDecay; // Offset: 0x90
    float BoostScale; // Offset: 0x94
};

// Original name: QuatT
// Size: 0x58
// VTable: 0x1499ad318
struct QuatT {
    uint8_t _pad_0[0x28]; // Offset: 0x0
    Ang3 Rotation; // Offset: 0x28
    Vec3 Position; // Offset: 0x40
};

// Original name: SSensorMineProximityTrigger
// Size: 0x70
// VTable: 0x1499f09c0
struct SSensorMineProximityTrigger {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    float Radius; // Offset: 0x10
    float WarningRadius; // Offset: 0x14
    int32_t MaxRaysPerMine; // Offset: 0x18
    float AngleVertical; // Offset: 0x1c
    float AngleHorizontal; // Offset: 0x20
    float GuideLaserLength; // Offset: 0x24
    Vec3 Center; // Offset: 0x28
    Vec3 Front; // Offset: 0x40
    Vec3 Up; // Offset: 0x58
};

// Original name: AirlockAreaParams
// Size: 0x38
// VTable: 0x1499f35d8
struct AirlockAreaParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 AreaOffset; // Offset: 0x8
    Vec3 AreaSize; // Offset: 0x20
};

// Original name: SEntityBoxPhysicsGridParams
// Size: 0x68
// VTable: 0x14999e558
struct SEntityBoxPhysicsGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool inheritGravity; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 gravity; // Offset: 0x10
    ARDataType gridType; // Offset: 0x28
    float cellSize; // Offset: 0x2c
    bool gridPartsOnly; // Offset: 0x30
    bool portalExclusiveMode; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
    Vec3 center; // Offset: 0x38
    Vec3 size; // Offset: 0x50
};

// Original name: TorusFieldGeom
// Size: 0x40
// VTable: 0x1499e8e08
struct TorusFieldGeom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 center; // Offset: 0x8
    Vec3 axis; // Offset: 0x20
    float R; // Offset: 0x38
    float r; // Offset: 0x3c
};

// Original name: VehicleLandingGearSpring
// Size: 0x60
// VTable: 0x149a51b68
struct VehicleLandingGearSpring {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lengthTarget; // Offset: 0x8
    float lengthMin; // Offset: 0xc
    float lengthMax; // Offset: 0x10
    float stiffness; // Offset: 0x14
    float damping; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CryStringT* springBone; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    Vec3 offset; // Offset: 0x30
    Vec3 rotationalOffset; // Offset: 0x48
};

// Original name: SCSeatHeadPosAdjustSetup
// Size: 0x20
// VTable: 0x149a7d800
struct SCSeatHeadPosAdjustSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 fpDesiredHeadPosition; // Offset: 0x8
};

// Original name: ShadowRegionEntityComponentParams
// Size: 0x38
// VTable: 0x1499c8e58
struct ShadowRegionEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float sizeTrigger; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 regionSize; // Offset: 0x20
};

// Original name: SDecalParams
// Size: 0x70
// VTable: 0x149a2d808
struct SDecalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceMaterial material; // Offset: 0x8
    uint8_t sortPriority; // Offset: 0x20
    uint8_t viewDistanceRatio; // Offset: 0x21
    bool affectsThisAreaOnly; // Offset: 0x22
    uint8_t _pad_1[0x1]; // Offset: 0x23
    float alphaCutoff; // Offset: 0x24
    Vec3 offset; // Offset: 0x28
    Ang3 rotationOffset; // Offset: 0x40
    Vec3 scale; // Offset: 0x58
};

// Original name: SSensorMineLaserTrigger
// Size: 0x48
// VTable: 0x1499f0828
struct SSensorMineLaserTrigger {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    float LaserLength; // Offset: 0x10
    float LaserHitOffset; // Offset: 0x14
    Vec3 MineFront; // Offset: 0x18
    Vec3 LaserOffset; // Offset: 0x30
};

// Original name: CommsNotificationStageBase
// Size: 0x38
// VTable: 0x149974ce8
struct CommsNotificationStageBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
    Vec3 rotation; // Offset: 0x20
};

// Original name: EAPickupFPSParams
// Size: 0x50
// VTable: 0x149a27980
struct EAPickupFPSParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t duration; // Offset: 0x8
    float acquireRadius; // Offset: 0xc
    float spawnRadius; // Offset: 0x10
    float initialScale; // Offset: 0x14
    float beginScalingDistance; // Offset: 0x18
    float rotationSpeed; // Offset: 0x1c
    bool alternativeRotationAxis; // Offset: 0x20
    bool enableCurveOffset; // Offset: 0x21
    uint8_t _pad_1[0x2]; // Offset: 0x22
    float curveOffsetSpeed; // Offset: 0x24
    float curveOffsetAmplitude; // Offset: 0x28
    float maxScale; // Offset: 0x2c
    float multiplierSuppression; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    Vec3 assetRotation; // Offset: 0x38
};

// Original name: SInteractionPointCuboidPrimitiveParams
// Size: 0x38
// VTable: 0x1499a5e78
struct SInteractionPointCuboidPrimitiveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 Center; // Offset: 0x8
    Vec3 Size; // Offset: 0x20
};

// Original name: SActorStanceHeadSphereDef
// Size: 0x30
// VTable: 0x149aae1e0
struct SActorStanceHeadSphereDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 defaultOrigin; // Offset: 0x10
    bool keepOriginOffsetInZoneSpace; // Offset: 0x28
    uint8_t _pad_2[0x7]; // Offset: 0x29
};

// Original name: Matrix34
// Size: 0x68
// VTable: 0x1499ad448
struct Matrix34 {
    uint8_t _pad_0[0x38]; // Offset: 0x0
    Ang3 Rotation; // Offset: 0x38
    Vec3 Position; // Offset: 0x50
};

// Original name: SXYZCurvesWithMaxValuesModifer
// Size: 0x60
// VTable: 0x149a71288
struct SXYZCurvesWithMaxValuesModifer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xMaxValueModifier; // Offset: 0x8
    float yMaxValueModifier; // Offset: 0xc
    float zMaxValueModifier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    Vec3 minLimitsModifier; // Offset: 0x18
    Vec3 maxLimitsModifier; // Offset: 0x30
    SHandsRecoilCurveNoiseModifer noiseModifier; // Offset: 0x48
};

// Original name: VolumeShape_Box
// Size: 0x20
// VTable: 0x14997b110
struct VolumeShape_Box {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 size; // Offset: 0x8
};

// Original name: SElevatorCustomCollisionParams
// Size: 0x40
// VTable: 0x1499f3028
struct SElevatorCustomCollisionParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    Vec3 Extent; // Offset: 0x10
    Vec3 Offset; // Offset: 0x28
};

// Original name: SSimulationParamsBase
// Size: 0x28
// VTable: 0x1499baac8
struct SSimulationParamsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool UseRedirect; // Offset: 0x8
    bool UseDebugSetup; // Offset: 0x9
    bool UseDebugText; // Offset: 0xa
    bool UseSimulation; // Offset: 0xb
    uint8_t SimFPS; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    Vec3 PivotOffset; // Offset: 0x10
};

// Original name: GlobalFogVolume
// Size: 0x38
// VTable: 0x14999bb98
struct GlobalFogVolume {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 fogSize; // Offset: 0x8
    float noiseLifeTime; // Offset: 0x20
    float softEdge; // Offset: 0x24
    float hideFarLodThreshold; // Offset: 0x28
    float fadeFarLodThreshold; // Offset: 0x2c
    float maxDistance; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
};

// Original name: HarvestableTransformParams
// Size: 0x48
// VTable: 0x1499ef848
struct HarvestableTransformParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minScale; // Offset: 0x8
    float maxScale; // Offset: 0xc
    float terrainNormalAlignment; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    Vec3 rotationRange; // Offset: 0x18
    float minZOffset; // Offset: 0x30
    float maxZOffset; // Offset: 0x34
    float minSlope; // Offset: 0x38
    float maxSlope; // Offset: 0x3c
    float minElevation; // Offset: 0x40
    float maxElevation; // Offset: 0x44
};

// Original name: ConstraintParams
// Size: 0x100
// VTable: 0x1499c9330
struct ConstraintParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool broken; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float damping; // Offset: 0x1c
    bool noSelfCollisions; // Offset: 0x20
    bool useEntityFrame; // Offset: 0x21
    uint8_t _pad_2[0x2]; // Offset: 0x22
    float maxPullForce; // Offset: 0x24
    float maxBendTorque; // Offset: 0x28
    bool constrainToLine; // Offset: 0x2c
    bool constrainToPlane; // Offset: 0x2d
    bool constrainFully; // Offset: 0x2e
    bool noRotation; // Offset: 0x2f
    float xMin; // Offset: 0x30
    float xMax; // Offset: 0x34
    float yzMax; // Offset: 0x38
    float xTranslationalCompliance; // Offset: 0x3c
    float yzTranslationalCompliance; // Offset: 0x40
    float xTranslationalDampingRate; // Offset: 0x44
    float yzTranslationalDampingRate; // Offset: 0x48
    float xRotationalCompliance; // Offset: 0x4c
    float yzRotationalCompliance; // Offset: 0x50
    float xRotationalDampingRate; // Offset: 0x54
    float yzRotationalDampingRate; // Offset: 0x58
    uint8_t _pad_3[0x4]; // Offset: 0x5c
    Vec3 targetRelativePosition; // Offset: 0x60
    Ang3 targetRelativeRotation; // Offset: 0x78
    Vec3 targetRelativeLinearVelocity; // Offset: 0x90
    float maxMotorForceLin; // Offset: 0xa8
    uint8_t _pad_4[0x4]; // Offset: 0xac
    Vec3 linearMotorInviscosityCoefficient; // Offset: 0xb0
    Vec3 targetRelativeAngularVelocity; // Offset: 0xc8
    float maxMotorForceAng; // Offset: 0xe0
    uint8_t _pad_5[0x4]; // Offset: 0xe4
    Vec3 angularMotorInviscosityCoefficient; // Offset: 0xe8
};

// Original name: CameraGForceShakeConfig
// Size: 0x58
// VTable: 0x1499b1f08
struct CameraGForceShakeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Ang3 offsetAngle; // Offset: 0x8
    Vec3 offsetPosition; // Offset: 0x20
    float timePeriod; // Offset: 0x38
    bool enabled; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
    float frequencyNoiseFactor; // Offset: 0x40
    float translationNoise; // Offset: 0x44
    float rotationNoise; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    float minimumGForce; // Offset: 0x50
    float maximumGForce; // Offset: 0x54
};

// Original name: GravityBoxParams
// Size: 0x60
// VTable: 0x1499c87a8
struct GravityBoxParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool active; // Offset: 0x18
    bool uniform; // Offset: 0x19
    uint8_t _pad_1[0x2]; // Offset: 0x1a
    float fallOffInner; // Offset: 0x1c
    float gravityMagnitude; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    Vec3 gravityDirection; // Offset: 0x28
    bool filled; // Offset: 0x40
    uint8_t _pad_3[0x7]; // Offset: 0x41
    Vec3 size; // Offset: 0x48
};

// Original name: SWeaponAttachmentItemPort
// Size: 0x50
// VTable: 0x149a6df08
struct SWeaponAttachmentItemPort {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec2 listAnchorOverride; // Offset: 0x18
    Vec3 portButtonOffset; // Offset: 0x28
    Vec2 inspectAnimationBlend; // Offset: 0x40
};

// Original name: BreathingHelperParams
// Size: 0x30
// VTable: 0x149a3ccd8
struct BreathingHelperParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* attachBone; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 attachOffset; // Offset: 0x18
};

// Original name: SEffectInputParamsParticle
// Size: 0x78
// VTable: 0x14999b650
struct SEffectInputParamsParticle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* VarName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* ParamName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float MinRange; // Offset: 0x28
    float MaxRange; // Offset: 0x2c
    float Multiplier; // Offset: 0x30
    float LerpTime; // Offset: 0x34
    Vec3 VecGoal; // Offset: 0x38
    float DefaultValue; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
    Vec3 Axis; // Offset: 0x58
    ARDataType Type; // Offset: 0x70
    uint8_t _pad_4[0x4]; // Offset: 0x74
};

// Original name: WeaponProceduralClipRaise
// Size: 0x48
// VTable: 0x149aac080
struct WeaponProceduralClipRaise {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Ang3 weaponRaise; // Offset: 0x10
    Vec3 weaponShift; // Offset: 0x28
    float raiseTime; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: SConversationIconParams
// Size: 0x78
// VTable: 0x149a8a2b0
struct SConversationIconParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useConversationIcon; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* entitySuperGUID; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* iconVisibleGUID; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    float distanceToSwitchToText; // Offset: 0x30
    uint8_t _pad_4[0x4]; // Offset: 0x34
    Vec3 positionOffset; // Offset: 0x38
    Vec3 rotationOffset; // Offset: 0x50
    float iconScale; // Offset: 0x68
    float textScale; // Offset: 0x6c
    bool alwaysFacePlayer; // Offset: 0x70
    bool maintainPosition; // Offset: 0x71
    bool usePlayerAsReferenceEntity; // Offset: 0x72
    uint8_t _pad_5[0x5]; // Offset: 0x73
};

// Original name: WeaponProceduralClipLean
// Size: 0x58
// VTable: 0x149aac130
struct WeaponProceduralClipLean {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Ang3 weaponLean; // Offset: 0x10
    Vec3 weaponLeanAxisOffset; // Offset: 0x28
    Vec3 weaponShift; // Offset: 0x40
};

// Original name: SShakeParams
// Size: 0x48
// VTable: 0x149a24888
struct SShakeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Ang3 offsetAngle; // Offset: 0x8
    Vec3 offsetPosition; // Offset: 0x20
    float randomness; // Offset: 0x38
    float range; // Offset: 0x3c
    float duration; // Offset: 0x40
    float frequency; // Offset: 0x44
};

// Original name: SSafeTeleportPointParams
// Size: 0x40
// VTable: 0x1499ee298
struct SSafeTeleportPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float obstructionSize; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 boxSize; // Offset: 0x20
    bool supportsPlayers; // Offset: 0x38
    bool supportsNPCs; // Offset: 0x39
    uint8_t _pad_2[0x6]; // Offset: 0x3a
};

// Original name: Primitive_Ring
// Size: 0x70
// VTable: 0x149a9f910
struct Primitive_Ring {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 Position; // Offset: 0x8
    Vec3 Rotation; // Offset: 0x20
    Vec2 UV_Start; // Offset: 0x38
    Vec2 UV_Size; // Offset: 0x48
    uint32_t Segments; // Offset: 0x58
    float InnerRadius; // Offset: 0x5c
    float OuterRadius; // Offset: 0x60
    float StartAngle; // Offset: 0x64
    float EndAngle; // Offset: 0x68
    uint8_t _pad_1[0x4]; // Offset: 0x6c
};

// Original name: PlayerAnimatedInteractionWalkingRequestParams
// Size: 0x28
// VTable: 0x149a8c2b8
struct PlayerAnimatedInteractionWalkingRequestParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 offset; // Offset: 0x8
    float speed; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: FireHazardFogNoiseParams
// Size: 0x30
// VTable: 0x14997c7b8
struct FireHazardFogNoiseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 noiseFrequency; // Offset: 0x8
    float noiseScale; // Offset: 0x20
    float noiseSpeed; // Offset: 0x24
    ARDataType noiseTexture; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: FireVoxelSelectionShape_Box
// Size: 0x20
// VTable: 0x14997cca0
struct FireVoxelSelectionShape_Box {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 size; // Offset: 0x8
};

// Original name: VolumeShape_Ellipsoid
// Size: 0x20
// VTable: 0x14997b1d0
struct VolumeShape_Ellipsoid {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 radii; // Offset: 0x8
};

// Original name: LoadoutItemPreviewTransformParams
// Size: 0x70
// VTable: 0x149aaa7c0
struct LoadoutItemPreviewTransformParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 lightPosition; // Offset: 0x8
    Ang3 initialRotation; // Offset: 0x20
    Vec3 rotationChange; // Offset: 0x38
    Vec3 offsetPosition; // Offset: 0x50
    float offsetScale; // Offset: 0x68
    uint8_t _pad_1[0x4]; // Offset: 0x6c
};

// Original name: LandingAreaComponentParams
// Size: 0x90
// VTable: 0x149a74de0
struct LandingAreaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    Vec3 dimensions; // Offset: 0x20
    ExtraLegalBounds extraLegalBounds; // Offset: 0x38
    float HUDOffset; // Offset: 0x58
    bool alignDirection; // Offset: 0x5c
    bool autopilotEnabled; // Offset: 0x5d
    uint8_t _pad_2[0x2]; // Offset: 0x5e
    float approachDistance; // Offset: 0x60
    float touchdownHoverAltitude; // Offset: 0x64
    int32_t dockingClassOverride; // Offset: 0x68
    bool allowGroundVehicles; // Offset: 0x6c
    bool allowSpaceships; // Offset: 0x6d
    bool autoRegisterWithATC; // Offset: 0x6e
    uint8_t _pad_3[0x1]; // Offset: 0x6f
    ARDataType canBeUsedBy; // Offset: 0x70
    uint8_t _pad_4[0x4]; // Offset: 0x74
    CLocIdentifier* HUDDisplayName; // Offset: 0x78
    int32_t ATCPriority; // Offset: 0x80
    bool autoGenerateUI; // Offset: 0x84
    uint8_t _pad_5[0x3]; // Offset: 0x85
    float baseUIScale; // Offset: 0x88
    bool skipObstructionCheck; // Offset: 0x8c
    bool alwaysLowerPlatformBeforeSpawn; // Offset: 0x8d
    uint8_t _pad_6[0x2]; // Offset: 0x8e
};

// Original name: SIFCSAuthoredMotionLimits
// Size: 0x28
// VTable: 0x149a1b498
struct SIFCSAuthoredMotionLimits {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 rotationMaxAcceleration; // Offset: 0x8
    float linearMaxAcceleration; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SItemShopReference
// Size: 0x28
// VTable: 0x1499edee0
struct SItemShopReference {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType reference; // Offset: 0x8
    ARDataType adjustmentMode; // Offset: 0xc
    Vec3 adjustmentValue; // Offset: 0x10
};

// Original name: SAngleConstraint
// Size: 0x28
// VTable: 0x1499a0c00
struct SAngleConstraint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 forwardDirOffset; // Offset: 0x8
    float angleRange; // Offset: 0x20
    float viewAngleLimit; // Offset: 0x24
};

// Original name: ShockwaveParams
// Size: 0x48
// VTable: 0x149a9d520
struct ShockwaveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType primitiveType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 axis; // Offset: 0x10
    float halfHeight; // Offset: 0x28
    float detonationSpeed; // Offset: 0x2c
    float peakPressure; // Offset: 0x30
    float duration; // Offset: 0x34
    float durationScale; // Offset: 0x38
    float density; // Offset: 0x3c
    float resistance; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: SCAngularMovementParams
// Size: 0x70
// VTable: 0x149a62ec0
struct SCAngularMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 MaxAngularVelocityIdle; // Offset: 0x8
    Vec3 MaxAngularVelocityMove; // Offset: 0x20
    Vec3 MaxAngularAccelerationPositive; // Offset: 0x38
    Vec3 MaxAngularAccelerationNegative; // Offset: 0x50
    float AngularAccelerationDecay; // Offset: 0x68
    uint8_t _pad_1[0x4]; // Offset: 0x6c
};

// Original name: SFrontendS42ActionSettings
// Size: 0x40
// VTable: 0x149a22910
struct SFrontendS42ActionSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    Vec3 textOffset; // Offset: 0x10
    Ang3 textRotation; // Offset: 0x28
};

// Original name: MiningCameraShakeConfig
// Size: 0x60
// VTable: 0x149a7f908
struct MiningCameraShakeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Ang3 offsetAngle; // Offset: 0x8
    Vec3 offsetPosition; // Offset: 0x20
    float timePeriod; // Offset: 0x38
    bool enabled; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
    float frequencyNoiseFactor; // Offset: 0x40
    float translationNoise; // Offset: 0x44
    float rotationNoise; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    float maxShakeWhenUnderOptimalWindow; // Offset: 0x50
    float shakeInOptimalWindow; // Offset: 0x54
    float minShakeInDangerWindow; // Offset: 0x58
    float shakeChangeLerpSpeed; // Offset: 0x5c
};

// Original name: SEntityVisAreaPhysicsGridParams
// Size: 0x40
// VTable: 0x14999e690
struct SEntityVisAreaPhysicsGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool inheritGravity; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 gravity; // Offset: 0x10
    ARDataType gridType; // Offset: 0x28
    float cellSize; // Offset: 0x2c
    bool gridPartsOnly; // Offset: 0x30
    bool portalExclusiveMode; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
    bool mergeMeshes; // Offset: 0x38
    uint8_t _pad_3[0x7]; // Offset: 0x39
};

// Original name: Primitive_Quad
// Size: 0x68
// VTable: 0x149a9f650
struct Primitive_Quad {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 Centre; // Offset: 0x8
    Vec2 Size; // Offset: 0x20
    Vec3 Rotation; // Offset: 0x30
    Vec2 UV_Start; // Offset: 0x48
    Vec2 UV_Size; // Offset: 0x58
};

// Original name: CapsuleFieldGeom
// Size: 0x40
// VTable: 0x1499e8d38
struct CapsuleFieldGeom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 center; // Offset: 0x8
    Vec3 axis; // Offset: 0x20
    float radius; // Offset: 0x38
    float hh; // Offset: 0x3c
};

// Original name: SBoxHazardAreaShapeParams
// Size: 0x20
// VTable: 0x149a2d110
struct SBoxHazardAreaShapeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 dimensions; // Offset: 0x8
};

// Original name: LandingAreaGroupParams
// Size: 0x30
// VTable: 0x1499d11f0
struct LandingAreaGroupParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Vec3 dimensions; // Offset: 0x18
};

// Original name: SEntityTargetingProperties
// Size: 0x20
// VTable: 0x149a8adf0
struct SEntityTargetingProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 positionOffset; // Offset: 0x8
};

// Original name: ProceduralAnimationBone
// Size: 0x40
// VTable: 0x149aa2920
struct ProceduralAnimationBone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType bone; // Offset: 0x8
    int32_t chainLength; // Offset: 0xc
    int32_t layer; // Offset: 0x10
    ARDataType operation; // Offset: 0x14
    ARDataType relativeTo; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 values; // Offset: 0x20
    float delay; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: SEntitySpherePhysicsGridParams
// Size: 0x40
// VTable: 0x14999e4d0
struct SEntitySpherePhysicsGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool inheritGravity; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 gravity; // Offset: 0x10
    ARDataType gridType; // Offset: 0x28
    float cellSize; // Offset: 0x2c
    bool gridPartsOnly; // Offset: 0x30
    bool portalExclusiveMode; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
    float radius; // Offset: 0x38
    uint8_t _pad_3[0x4]; // Offset: 0x3c
};

// Original name: CameraSourceShakeParams
// Size: 0xa0
// VTable: 0x1499cc370
struct CameraSourceShakeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 AmplitudeA; // Offset: 0x8
    float AmplitudeAMult; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    Vec3 FrequencyA; // Offset: 0x28
    float FrequencyAMult; // Offset: 0x40
    float NoiseAAmpMult; // Offset: 0x44
    float NoiseAFreqMult; // Offset: 0x48
    float TimeOffsetA; // Offset: 0x4c
    Vec3 AmplitudeB; // Offset: 0x50
    float AmplitudeBMult; // Offset: 0x68
    uint8_t _pad_2[0x4]; // Offset: 0x6c
    Vec3 FrequencyB; // Offset: 0x70
    float FrequencyBMult; // Offset: 0x88
    float NoiseBAmpMult; // Offset: 0x8c
    float NoiseBFreqMult; // Offset: 0x90
    float TimeOffsetB; // Offset: 0x94
    int32_t CameraShakeSeed; // Offset: 0x98
    uint8_t _pad_3[0x4]; // Offset: 0x9c
};

// Original name: ProcAimHingeJointTypeConfig
// Size: 0x38
// VTable: 0x149aaf4c0
struct ProcAimHingeJointTypeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* jointName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float rotationRange; // Offset: 0x18
    float rotationRangeOffset; // Offset: 0x1c
    Vec3 rotationAxis; // Offset: 0x20
};

// Original name: SCItemDisplayScreenGlobalLightParams
// Size: 0x60
// VTable: 0x149a08bd0
struct SCItemDisplayScreenGlobalLightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType lightType; // Offset: 0x8
    float radius; // Offset: 0xc
    float bulbRadius; // Offset: 0x10
    float fov; // Offset: 0x14
    float maxDistance; // Offset: 0x18
    float maxFade; // Offset: 0x1c
    CryStringT* projectorTexture; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    Vec3 rotationOffset; // Offset: 0x30
    Vec3 translationOffset; // Offset: 0x48
};

// Original name: SUnifiedShakeParamsDef
// Size: 0x60
// VTable: 0x149a2a268
struct SUnifiedShakeParamsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 positionAmplitude; // Offset: 0x8
    Vec3 rotationAmplitude; // Offset: 0x20
    float firstPersonScale; // Offset: 0x38
    float thirdPersonScale; // Offset: 0x3c
    float oneShotTimer; // Offset: 0x40
    bool rttShake; // Offset: 0x44
    bool fadeOutShake; // Offset: 0x45
    bool playerGroundOnly; // Offset: 0x46
    bool shipLandedOnly; // Offset: 0x47
    float frequency; // Offset: 0x48
    float frequencyNoiseFactor; // Offset: 0x4c
    float phase; // Offset: 0x50
    float translationNoise; // Offset: 0x54
    float rotationNoise; // Offset: 0x58
    uint8_t _pad_1[0x4]; // Offset: 0x5c
};

// Original name: TransitGatewayParams
// Size: 0x38
// VTable: 0x1499d8ad8
struct TransitGatewayParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float radius; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 safeTeleportOffset; // Offset: 0x20
};

// Original name: SEntityCGFPhysicsGridParams
// Size: 0x50
// VTable: 0x14999e638
struct SEntityCGFPhysicsGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool inheritGravity; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 gravity; // Offset: 0x10
    ARDataType gridType; // Offset: 0x28
    float cellSize; // Offset: 0x2c
    bool gridPartsOnly; // Offset: 0x30
    bool portalExclusiveMode; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
    CryStringT* cgfDataFile; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    bool includeVisareas; // Offset: 0x48
    uint8_t _pad_4[0x7]; // Offset: 0x49
};

// Original name: SInteractionPointSpherePrimitiveParams
// Size: 0x28
// VTable: 0x1499a5df8
struct SInteractionPointSpherePrimitiveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 Center; // Offset: 0x8
    float Radius; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SEntityVoxelPhysicsGridParams
// Size: 0x48
// VTable: 0x14999e5b0
struct SEntityVoxelPhysicsGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool inheritGravity; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 gravity; // Offset: 0x10
    ARDataType gridType; // Offset: 0x28
    float cellSize; // Offset: 0x2c
    bool gridPartsOnly; // Offset: 0x30
    bool portalExclusiveMode; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
    CryStringT* voxelDataFile; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
};

// Original name: ObjectiveMarkerLocation
// Size: 0x50
// VTable: 0x14996c6d0
struct ObjectiveMarkerLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool attachMarker; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    CryStringT* boneName; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    bool useBoundingBoxCenter; // Offset: 0x30
    uint8_t _pad_4[0x7]; // Offset: 0x31
    Vec3 offset; // Offset: 0x38
};

// Original name: CommsNotificationStageListItem
// Size: 0x38
// VTable: 0x149974d50
struct CommsNotificationStageListItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
    Vec3 rotation; // Offset: 0x20
};

// Original name: EAPickupVehicleParams
// Size: 0x50
// VTable: 0x149a27978
struct EAPickupVehicleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t duration; // Offset: 0x8
    float acquireRadius; // Offset: 0xc
    float spawnRadius; // Offset: 0x10
    float initialScale; // Offset: 0x14
    float beginScalingDistance; // Offset: 0x18
    float rotationSpeed; // Offset: 0x1c
    bool alternativeRotationAxis; // Offset: 0x20
    bool enableCurveOffset; // Offset: 0x21
    uint8_t _pad_1[0x2]; // Offset: 0x22
    float curveOffsetSpeed; // Offset: 0x24
    float curveOffsetAmplitude; // Offset: 0x28
    float maxScale; // Offset: 0x2c
    float multiplierSuppression; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    Vec3 assetRotation; // Offset: 0x38
};

// Original name: MarkerTrackingLayoutParameters
// Size: 0x50
// VTable: 0x149a49190
struct MarkerTrackingLayoutParameters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
    Vec3 orientation; // Offset: 0x20
    Vec3 size; // Offset: 0x38
};

// Original name: EAPickupSpecialEventOverrideParams
// Size: 0x48
// VTable: 0x149a27aa8
struct EAPickupSpecialEventOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float assetScaleMultiplier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 overrideAssetRotation; // Offset: 0x10
    bool overrideAlternativeRotationAxis; // Offset: 0x28
    uint8_t _pad_2[0x3]; // Offset: 0x29
    uint32_t badgeId; // Offset: 0x2c
    CryStringT* overrideGeometryTag; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
    ARDataType pickupAwardType; // Offset: 0x40
    uint8_t _pad_4[0x4]; // Offset: 0x44
};

// Original name: SEntityEffectSystem_OverrideVectorValueModifier
// Size: 0x20
// VTable: 0x149999850
struct SEntityEffectSystem_OverrideVectorValueModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 overrideValues; // Offset: 0x8
};

// Original name: LedgeNearbyParams
// Size: 0x48
// VTable: 0x149ab0240
struct LedgeNearbyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxDistanceIdle; // Offset: 0x8
    float maxDistanceMovement; // Offset: 0xc
    float maxDistanceInAirIdle; // Offset: 0x10
    float maxDistanceInAirMovement; // Offset: 0x14
    float minHeight; // Offset: 0x18
    float maxHeightFromGround; // Offset: 0x1c
    float maxHeightInAir; // Offset: 0x20
    float maxSearchAngleDeg; // Offset: 0x24
    float inAirInvalidUpperSearchEdgeHeight; // Offset: 0x28
    float inAirInvalidUpperSearchEdgeDepth; // Offset: 0x2c
    Vec3 searchDir; // Offset: 0x30
};

// Original name: Primitive_Line
// Size: 0x70
// VTable: 0x149a9f550
struct Primitive_Line {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 LineStart; // Offset: 0x8
    Vec3 LineEnd; // Offset: 0x20
    Vec2 ScreenOffset; // Offset: 0x38
    Vec2 UV_Start; // Offset: 0x48
    Vec2 UV_Size; // Offset: 0x58
    float LineThickness; // Offset: 0x68
    bool InScreenSpace; // Offset: 0x6c
    uint8_t _pad_1[0x3]; // Offset: 0x6d
};

// Original name: SEntityComponentRoomConnectorParams
// Size: 0x68
// VTable: 0x14997d3e0
struct SEntityComponentRoomConnectorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Vec3 defaultAreaBounds; // Offset: 0x18
    Vec3 boundsOffset; // Offset: 0x30
    ARDataType orientationMode; // Offset: 0x48
    bool enableConnectorBridging; // Offset: 0x4c
    uint8_t _pad_1[0x3]; // Offset: 0x4d
    SEntityDensityClassOverwritesBase densityClassOverwrites; // Offset: 0x50
    float apertureAnimateTime; // Offset: 0x60
    float audioSoundProofing; // Offset: 0x64
};

// Original name: SCEntranceItem
// Size: 0x40
// VTable: 0x149a837a8
struct SCEntranceItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* entranceName; // Offset: 0x8
    CryStringT* jointName; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    Vec3 positionOffset; // Offset: 0x20
    ARDataType shipState; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: CameraSpeedShakeConfig
// Size: 0x60
// VTable: 0x1499b1e88
struct CameraSpeedShakeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Ang3 offsetAngle; // Offset: 0x8
    Vec3 offsetPosition; // Offset: 0x20
    float timePeriod; // Offset: 0x38
    bool enabled; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
    float frequencyNoiseFactor; // Offset: 0x40
    float translationNoise; // Offset: 0x44
    float rotationNoise; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    float minimumSpeed; // Offset: 0x50
    float maximumSpeed; // Offset: 0x54
    float QDriveScaleFactor; // Offset: 0x58
    float afterburnerScaleFactor; // Offset: 0x5c
};

// Original name: RParticleFieldNodeComponentParams
// Size: 0xd0
// VTable: 0x149997bc8
struct RParticleFieldNodeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enableField; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    CryStringT* texture3D; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    Vec3 size; // Offset: 0x30
    float outerRadius; // Offset: 0x48
    float falloff; // Offset: 0x4c
    float strengthMult; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
    Vec3 posOffset; // Offset: 0x58
    Ang3 rotOffset; // Offset: 0x70
    bool useTransformHelperFile; // Offset: 0x88
    bool matchSizeFromTexture; // Offset: 0x89
    bool mergeSDFs; // Offset: 0x8a
    uint8_t _pad_4[0x1]; // Offset: 0x8b
    float mergedVoxelCountScaleFrac; // Offset: 0x8c
    Vec3 mergedPaddingFrac; // Offset: 0x90
    RParticleFieldNodeDebugParams debugDraw; // Offset: 0xa8
};

// Original name: SphereFieldGeom
// Size: 0x28
// VTable: 0x1499e8ac8
struct SphereFieldGeom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 center; // Offset: 0x8
    float R; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: BoxAreaAlignmentSlotTypeParams
// Size: 0x38
// VTable: 0x149a91f08
struct BoxAreaAlignmentSlotTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 min; // Offset: 0x8
    Vec3 max; // Offset: 0x20
};

// Original name: CameraShakeConfig
// Size: 0x50
// VTable: 0x1499b1db0
struct CameraShakeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Ang3 offsetAngle; // Offset: 0x8
    Vec3 offsetPosition; // Offset: 0x20
    float timePeriod; // Offset: 0x38
    bool enabled; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
    float frequencyNoiseFactor; // Offset: 0x40
    float translationNoise; // Offset: 0x44
    float rotationNoise; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: ItemPreview_TurntableSettings
// Size: 0x38
// VTable: 0x149a95118
struct ItemPreview_TurntableSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Ang3 initialRotation; // Offset: 0x8
    Vec3 rotationChange; // Offset: 0x20
};

// Original name: WindAreaParams
// Size: 0x68
// VTable: 0x1499c96f8
struct WindAreaParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool defaultActive; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    Vec3 size; // Offset: 0x20
    bool ellipsoidal; // Offset: 0x38
    uint8_t _pad_2[0x3]; // Offset: 0x39
    float falloffInner; // Offset: 0x3c
    Vec3 direction; // Offset: 0x40
    float speed; // Offset: 0x58
    float airResistance; // Offset: 0x5c
    float airDensity; // Offset: 0x60
    uint8_t _pad_3[0x4]; // Offset: 0x64
};

// Original name: GravityBaseParams
// Size: 0x40
// VTable: 0x1499c8720
struct GravityBaseParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool active; // Offset: 0x18
    bool uniform; // Offset: 0x19
    uint8_t _pad_1[0x2]; // Offset: 0x1a
    float fallOffInner; // Offset: 0x1c
    float gravityMagnitude; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    Vec3 gravityDirection; // Offset: 0x28
};

// Original name: SJumpDriveFlightTurbulenceNoiseParams
// Size: 0x30
// VTable: 0x1499f5998
struct SJumpDriveFlightTurbulenceNoiseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 frequencies; // Offset: 0x8
    float multiplier; // Offset: 0x20
    float hurstIndex; // Offset: 0x24
    float threshold; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: RaceCheckpointComponentParams
// Size: 0x38
// VTable: 0x1499e5210
struct RaceCheckpointComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t checkpointNumber; // Offset: 0x18
    float radius; // Offset: 0x1c
    Vec3 bounds; // Offset: 0x20
};

// Original name: SCItemDoorCodeProceduralParams
// Size: 0x40
// VTable: 0x1499f2210
struct SCItemDoorCodeProceduralParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float DefaultAnimationDurationScale; // Offset: 0x8
    float SecondaryAnimationDurationScale; // Offset: 0xc
    SCItemDoorUserAnimationParams userAnimationParams; // Offset: 0x10
    Vec3 OpenedOffset; // Offset: 0x20
    float OpenCloseTime; // Offset: 0x38
    float OpenCloseEasing; // Offset: 0x3c
};

// Original name: SWeaponProceduralClipSwayOvershoot
// Size: 0x60
// VTable: 0x149aab2f0
struct SWeaponProceduralClipSwayOvershoot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float velocityInterpolationMultiplier; // Offset: 0x8
    float velocityLowPassFilter; // Offset: 0xc
    float accelerationSmoothing; // Offset: 0x10
    float accelerationFrontAugmentation; // Offset: 0x14
    Vec3 overshootOffset; // Offset: 0x18
    Ang3 sideOvershootRot; // Offset: 0x30
    Ang3 frontOvershootRot; // Offset: 0x48
};

// Original name: HoverPlane
// Size: 0x28
// VTable: 0x149a04f10
struct HoverPlane {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float width; // Offset: 0x8
    float length; // Offset: 0xc
    Vec3 offset; // Offset: 0x10
};

// Original name: ExitCollisionCheckOverrideParams
// Size: 0x28
// VTable: 0x149a6a9a8
struct ExitCollisionCheckOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 offset; // Offset: 0x8
    float scale; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SThrowMode
// Size: 0x40
// VTable: 0x149a8e420
struct SThrowMode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 offset; // Offset: 0x8
    Vec3 angularVelocity; // Offset: 0x20
    ARDataType mode; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: CustomLookAtBB
// Size: 0x38
// VTable: 0x149aa15e8
struct CustomLookAtBB {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 min; // Offset: 0x8
    Vec3 max; // Offset: 0x20
};

// Original name: CameraShopItemOffset
// Size: 0x28
// VTable: 0x1499b2c08
struct CameraShopItemOffset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 positionOffset; // Offset: 0x10
};

// Original name: LoadoutDummyTransformParams
// Size: 0x78
// VTable: 0x149aaa6c0
struct LoadoutDummyTransformParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
    Ang3 rotation; // Offset: 0x20
    Vec3 lightPosition; // Offset: 0x38
    bool boundToBox; // Offset: 0x50
    uint8_t _pad_1[0x3]; // Offset: 0x51
    float scale; // Offset: 0x54
    Vec3 boundingBox; // Offset: 0x58
    bool pivotAboutCenter; // Offset: 0x70
    uint8_t _pad_2[0x7]; // Offset: 0x71
};

// Original name: CameraSpringAxesConfig
// Size: 0xf0
// VTable: 0x1499b2578
struct CameraSpringAxesConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 spaceUndampedFrequency; // Offset: 0x8
    Vec3 spaceDampingRatio; // Offset: 0x20
    float spaceSmoothingTime; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    Vec3 atmosUndampedFrequency; // Offset: 0x40
    Vec3 atmosDampingRatio; // Offset: 0x58
    float atmosSmoothingTime; // Offset: 0x70
    uint8_t _pad_2[0x4]; // Offset: 0x74
    Vec3 minSoftLimits; // Offset: 0x78
    Vec3 maxSoftLimits; // Offset: 0x90
    Vec3 minHardLimits; // Offset: 0xa8
    Vec3 maxHardLimits; // Offset: 0xc0
    float softRotationAngle; // Offset: 0xd8
    float hardRotationAngle; // Offset: 0xdc
    float rotationMultiplier; // Offset: 0xe0
    float softUserTargetOffsetDistance; // Offset: 0xe4
    float hardUserTargetOffsetDistance; // Offset: 0xe8
    float userTargetOffsetMultiplier; // Offset: 0xec
};

// Original name: SCItemDeployableShieldParams
// Size: 0x80
// VTable: 0x1499e2cd8
struct SCItemDeployableShieldParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* shield; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* startupVFX; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* destroyedVFX; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    CryStringT* openAnim; // Offset: 0x48
    uint8_t _pad_4[0x8]; // Offset: 0x50
    CryStringT* closedAnim; // Offset: 0x58
    uint8_t _pad_5[0x8]; // Offset: 0x60
    Vec3 size; // Offset: 0x68
};

// Original name: BlockingHelperComponentParams
// Size: 0xa8
// VTable: 0x149a34318
struct BlockingHelperComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Vec3 offsetL; // Offset: 0x18
    Ang3 orientationL; // Offset: 0x30
    Vec3 scaleL; // Offset: 0x48
    Vec3 offsetR; // Offset: 0x60
    Ang3 orientationR; // Offset: 0x78
    Vec3 scaleR; // Offset: 0x90
};

// Original name: SActorProceduralHandsRecoilCurveDecayModifiersDef
// Size: 0x50
// VTable: 0x149a71330
struct SActorProceduralHandsRecoilCurveDecayModifiersDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 decayTimeMultiplierModifier; // Offset: 0x8
    Vec3 decayMaxValueModifier; // Offset: 0x20
    Vec3 decayMinScalingFactorModifier; // Offset: 0x38
};

// Original name: Looping_Quad
// Size: 0x78
// VTable: 0x149a9fa38
struct Looping_Quad {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 Start; // Offset: 0x8
    Vec2 Repeats; // Offset: 0x20
    Vec2 Size; // Offset: 0x30
    Vec3 Rotation; // Offset: 0x40
    Vec2 UV_Start; // Offset: 0x58
    Vec2 UV_Size; // Offset: 0x68
};

// Original name: EntityLinkTargetingParams
// Size: 0x30
// VTable: 0x1499968a0
struct EntityLinkTargetingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useAsSurfaceTargetEllipsoid; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 surfaceTargetEllipsoidScale; // Offset: 0x10
    bool defaultToArea; // Offset: 0x28
    uint8_t _pad_2[0x7]; // Offset: 0x29
};

// Original name: UIInteriorMapSectionParams
// Size: 0x40
// VTable: 0x149a15dd0
struct UIInteriorMapSectionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x18
    Vec3 size; // Offset: 0x20
    bool restrictViewBounds; // Offset: 0x38
    uint8_t _pad_1[0x7]; // Offset: 0x39
};

// Original name: SCDynamicRigLightParams
// Size: 0x60
// VTable: 0x1499e0e48
struct SCDynamicRigLightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float lightRadius; // Offset: 0x8
    float bulbRadius; // Offset: 0xc
    float FOV; // Offset: 0x10
    ARDataType importance; // Offset: 0x14
    bool shadowCast; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float maxVisDistance; // Offset: 0x1c
    float distanceFadeRange; // Offset: 0x20
    float maxShadowCastDistance; // Offset: 0x24
    Vec3 focusOffset; // Offset: 0x28
    SCDynamicRigIntensityParams intensity; // Offset: 0x40
};

// Original name: SCLinearMovementParams
// Size: 0x70
// VTable: 0x149a62dc0
struct SCLinearMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 MaxLinearAccelerationPositive; // Offset: 0x8
    Vec3 MaxLinearAccelerationNegative; // Offset: 0x20
    Vec3 MaxLinearDecelerationPositive; // Offset: 0x38
    Vec3 MaxLinearDecelerationNegative; // Offset: 0x50
    float LinearAccelerationDecay; // Offset: 0x68
    uint8_t _pad_1[0x4]; // Offset: 0x6c
};

// Original name: ToxiInputModifierAxis
// Size: 0x28
// VTable: 0x149a64a58
struct ToxiInputModifierAxis {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float strength; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 triggerAxes; // Offset: 0x10
};

// Original name: GravityAreaParams
// Size: 0x48
// VTable: 0x1499c8800
struct GravityAreaParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool active; // Offset: 0x18
    bool uniform; // Offset: 0x19
    uint8_t _pad_1[0x2]; // Offset: 0x1a
    float fallOffInner; // Offset: 0x1c
    float gravityMagnitude; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    Vec3 gravityDirection; // Offset: 0x28
    bool roomBased; // Offset: 0x40
    uint8_t _pad_3[0x7]; // Offset: 0x41
};

// Original name: QuatTS
// Size: 0x60
// VTable: 0x1499ad3c0
struct QuatTS {
    uint8_t _pad_0[0x28]; // Offset: 0x0
    Ang3 Rotation; // Offset: 0x28
    Vec3 Position; // Offset: 0x40
    float Scale; // Offset: 0x58
    uint8_t _pad_1[0x4]; // Offset: 0x5c
};

// Original name: SEntityComponentRectangleModificationObjectParams
// Size: 0x40
// VTable: 0x14999dc60
struct SEntityComponentRectangleModificationObjectParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Vec3 size; // Offset: 0x18
    float rollOff; // Offset: 0x30
    float strength; // Offset: 0x34
    float dishEffect; // Offset: 0x38
    int32_t sortOrder; // Offset: 0x3c
};

// Original name: DynArray_Vec3
// Generated DynArray for base type: Vec3
// Size: 0x8
struct DynArray_Vec3 {
    Vec3* m_data; // Offset: 0x0
};

// Original name: DynArray_SMisfireCondition
// Generated DynArray for base type: SMisfireCondition
// Size: 0x8
struct DynArray_SMisfireCondition {
    SMisfireCondition* m_data; // Offset: 0x0
};

// Original name: SMobiGlasAppDataPacket
// Size: 0x18
// VTable: 0x149a36060
struct SMobiGlasAppDataPacket {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SMobiGlasAppDataPacketBase dataPacket; // Offset: 0x8
};

// Original name: DynArray_LegacyCraftingOutput_Base
// Generated DynArray for base type: LegacyCraftingOutput_Base
// Size: 0x8
struct DynArray_LegacyCraftingOutput_Base {
    LegacyCraftingOutput_Base* m_data; // Offset: 0x0
};

// Original name: DynArray_SOrdnanceEmissionsParams
// Generated DynArray for base type: SOrdnanceEmissionsParams
// Size: 0x8
struct DynArray_SOrdnanceEmissionsParams {
    SOrdnanceEmissionsParams* m_data; // Offset: 0x0
};

// Original name: SSCItemControllableManagerParams
// Size: 0x38
// VTable: 0x149a07bc8
struct SSCItemControllableManagerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType defaultMasterMode; // Offset: 0x18
    float masterModeSpoolTimeToNAV; // Offset: 0x1c
    float masterModeSpoolTimeToSCM; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    SCItemControllableParams controllerParams; // Offset: 0x28
};

// Original name: SCItemControlUsableParams
// Size: 0x18
// VTable: 0x149a07090
struct SCItemControlUsableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCItemControllableParams usableControl; // Offset: 0x8
};

// Original name: DynArray_GeomFont_LetterNode
// Generated DynArray for base type: GeomFont_LetterNode
// Size: 0x8
struct DynArray_GeomFont_LetterNode {
    GeomFont_LetterNode* m_data; // Offset: 0x0
};

// Original name: ItemPreview_LightingSettings
// Size: 0x58
// VTable: 0x149a94e90
struct ItemPreview_LightingSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemPreview_LightIntensities lightIntensities; // Offset: 0x8
    float topAngle; // Offset: 0x28
    float bottomAngle; // Offset: 0x2c
    float leftRightAngle; // Offset: 0x30
    float rimOffsetAngle; // Offset: 0x34
    bool useEnvProbe; // Offset: 0x38
    uint8_t _pad_1[0x7]; // Offset: 0x39
    CryStringT* envProbeTexture; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    float envProbeMultiplier; // Offset: 0x50
    float envProbeRadiusMultiplier; // Offset: 0x54
};

// Original name: DynArray_SMobiGlasPersonalStatusSkillsEntry
// Generated DynArray for base type: SMobiGlasPersonalStatusSkillsEntry
// Size: 0x8
struct DynArray_SMobiGlasPersonalStatusSkillsEntry {
    SMobiGlasPersonalStatusSkillsEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_FoleyBone
// Generated DynArray for base type: FoleyBone
// Size: 0x8
struct DynArray_FoleyBone {
    FoleyBone* m_data; // Offset: 0x0
};

// Original name: DynArray_BaseService
// Generated DynArray for base type: BaseService
// Size: 0x8
struct DynArray_BaseService {
    BaseService* m_data; // Offset: 0x0
};

// Original name: DynArray_DrugEfficacyConfigForItemSubTypeBase
// Generated DynArray for base type: DrugEfficacyConfigForItemSubTypeBase
// Size: 0x8
struct DynArray_DrugEfficacyConfigForItemSubTypeBase {
    DrugEfficacyConfigForItemSubTypeBase* m_data; // Offset: 0x0
};

// Original name: DynArray_ProcAimBaseJointTypeConfig
// Generated DynArray for base type: ProcAimBaseJointTypeConfig
// Size: 0x8
struct DynArray_ProcAimBaseJointTypeConfig {
    ProcAimBaseJointTypeConfig* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerEntityDragTaskParams
// Generated DynArray for base type: SSequencerEntityDragTaskParams
// Size: 0x8
struct DynArray_SSequencerEntityDragTaskParams {
    SSequencerEntityDragTaskParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerDespawnerTaskParams
// Generated DynArray for base type: SSequencerDespawnerTaskParams
// Size: 0x8
struct DynArray_SSequencerDespawnerTaskParams {
    SSequencerDespawnerTaskParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SHackingAIDecisionParams
// Generated DynArray for base type: SHackingAIDecisionParams
// Size: 0x8
struct DynArray_SHackingAIDecisionParams {
    SHackingAIDecisionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_LightStatusMultiplier
// Generated DynArray for base type: LightStatusMultiplier
// Size: 0x8
struct DynArray_LightStatusMultiplier {
    LightStatusMultiplier* m_data; // Offset: 0x0
};

// Original name: LinkedStatSetup
// Size: 0x28
// VTable: 0x1499fdc28
struct LinkedStatSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LinkedStatRuleBase ruleForPassingValue; // Offset: 0x8
    LinkedStatPassValueBase valueToPass; // Offset: 0x18
};

// Original name: ItemHeatModifierParams
// Size: 0x20
// VTable: 0x1499f6d40
struct ItemHeatModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    float heatGenerationMultiplier; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: LifetimeControlledItemModifierParams
// Size: 0x18
// VTable: 0x1499f6a90
struct LifetimeControlledItemModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
};

// Original name: ItemMiningBoosterParams
// Size: 0x20
// VTable: 0x1499f6c80
struct ItemMiningBoosterParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    float powerLevelChange; // Offset: 0x18
    bool showInUI; // Offset: 0x1c
    bool isGood; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
};

// Original name: ItemSignatureModifierParams
// Size: 0x20
// VTable: 0x1499f6ce0
struct ItemSignatureModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    float signatureSizeMultiplier; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: TurretModifiersParams
// Size: 0x20
// VTable: 0x1499f70a0
struct TurretModifiersParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    float movmementSpeedMultiplier; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: ScanDisplayScanDataEntryVariableParams
// Size: 0x28
// VTable: 0x1499c69e8
struct ScanDisplayScanDataEntryVariableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t truncateSize; // Offset: 0x8
    bool displayIsHidden; // Offset: 0x9
    bool displayInBrackets; // Offset: 0xa
    bool suffixArrayIndex; // Offset: 0xb
    bool suffixSemiColon; // Offset: 0xc
    ARDataType auxiliaryFlag; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    ScanDisplayVariableParams fallback_; /* fallback */ // Offset: 0x10
    ARDataType scanCategory; // Offset: 0x20
    ARDataType scanInformation; // Offset: 0x21
    uint8_t _pad_2[0x6]; // Offset: 0x22
};

// Original name: ScanDisplayContactTypeVariableParams
// Size: 0x20
// VTable: 0x1499c6778
struct ScanDisplayContactTypeVariableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t truncateSize; // Offset: 0x8
    bool displayIsHidden; // Offset: 0x9
    bool displayInBrackets; // Offset: 0xa
    bool suffixArrayIndex; // Offset: 0xb
    bool suffixSemiColon; // Offset: 0xc
    ARDataType auxiliaryFlag; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    ScanDisplayVariableParams fallback_; /* fallback */ // Offset: 0x10
};

// Original name: ScanDisplayHeaderOnlySetupParams
// Size: 0x58
// VTable: 0x1499c6b70
struct ScanDisplayHeaderOnlySetupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scanTable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool failIfNoBody; // Offset: 0x10
    bool checkDisplaySection; // Offset: 0x11
    uint8_t _pad_2[0x6]; // Offset: 0x12
    ScanDisplayVariableParams headerVariable; // Offset: 0x18
    ScanDisplayVariableParams bodyVariable; // Offset: 0x28
    ScanDisplayVariableParams capacityVariable; // Offset: 0x38
    ScanDisplayVariableParams extensionVariable; // Offset: 0x48
};

// Original name: ScanDisplayDeltaSignatureVariableParams
// Size: 0x20
// VTable: 0x1499c6968
struct ScanDisplayDeltaSignatureVariableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t truncateSize; // Offset: 0x8
    bool displayIsHidden; // Offset: 0x9
    bool displayInBrackets; // Offset: 0xa
    bool suffixArrayIndex; // Offset: 0xb
    bool suffixSemiColon; // Offset: 0xc
    ARDataType auxiliaryFlag; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    ScanDisplayVariableParams fallback_; /* fallback */ // Offset: 0x10
};

// Original name: ScanDisplayStandardSetupParams
// Size: 0x58
// VTable: 0x1499c6b68
struct ScanDisplayStandardSetupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scanTable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool failIfNoBody; // Offset: 0x10
    bool checkDisplaySection; // Offset: 0x11
    uint8_t _pad_2[0x6]; // Offset: 0x12
    ScanDisplayVariableParams headerVariable; // Offset: 0x18
    ScanDisplayVariableParams bodyVariable; // Offset: 0x28
    ScanDisplayVariableParams capacityVariable; // Offset: 0x38
    ScanDisplayVariableParams extensionVariable; // Offset: 0x48
};

// Original name: ScanDisplayHeaderWithBodySetupParams
// Size: 0x58
// VTable: 0x1499c6b78
struct ScanDisplayHeaderWithBodySetupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scanTable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool failIfNoBody; // Offset: 0x10
    bool checkDisplaySection; // Offset: 0x11
    uint8_t _pad_2[0x6]; // Offset: 0x12
    ScanDisplayVariableParams headerVariable; // Offset: 0x18
    ScanDisplayVariableParams bodyVariable; // Offset: 0x28
    ScanDisplayVariableParams capacityVariable; // Offset: 0x38
    ScanDisplayVariableParams extensionVariable; // Offset: 0x48
};

// Original name: ScanDisplayLocStringVariableParams
// Size: 0x28
// VTable: 0x1499c6960
struct ScanDisplayLocStringVariableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t truncateSize; // Offset: 0x8
    bool displayIsHidden; // Offset: 0x9
    bool displayInBrackets; // Offset: 0xa
    bool suffixArrayIndex; // Offset: 0xb
    bool suffixSemiColon; // Offset: 0xc
    ARDataType auxiliaryFlag; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    ScanDisplayVariableParams fallback_; /* fallback */ // Offset: 0x10
    CLocIdentifier* locString; // Offset: 0x20
};

// Original name: ScanDisplaySignatureSetupParams
// Size: 0x20
// VTable: 0x1499c6cb0
struct ScanDisplaySignatureSetupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scanTable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    ScanDisplayVariableParams headerVariable; // Offset: 0x10
};

// Original name: DynArray_RoomExtension
// Generated DynArray for base type: RoomExtension
// Size: 0x8
struct DynArray_RoomExtension {
    RoomExtension* m_data; // Offset: 0x0
};

// Original name: DynArray_PlacementValidator
// Generated DynArray for base type: PlacementValidator
// Size: 0x8
struct DynArray_PlacementValidator {
    PlacementValidator* m_data; // Offset: 0x0
};

// Original name: DynArray_SApplicationFormRelationParams
// Generated DynArray for base type: SApplicationFormRelationParams
// Size: 0x8
struct DynArray_SApplicationFormRelationParams {
    SApplicationFormRelationParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SAnimationScopeContext
// Generated DynArray for base type: SAnimationScopeContext
// Size: 0x8
struct DynArray_SAnimationScopeContext {
    SAnimationScopeContext* m_data; // Offset: 0x0
};

// Original name: DynArray_LoadoutEditorAdditionalParams
// Generated DynArray for base type: LoadoutEditorAdditionalParams
// Size: 0x8
struct DynArray_LoadoutEditorAdditionalParams {
    LoadoutEditorAdditionalParams* m_data; // Offset: 0x0
};

// Original name: AtmosphereStateMultiRef
// Size: 0x50
// VTable: 0x14997a650
struct AtmosphereStateMultiRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AtmosphereStatePressureTemplate pressureTemplate; // Offset: 0x8
    AtmosphereStateTemperatureTemplate temperatureTemplate; // Offset: 0x20
    AtmosphereStateHumidityTemplate humidityTemplate; // Offset: 0x38
};

// Original name: TeamPhaseSettingsDef
// Size: 0x30
// VTable: 0x149a29f98
struct TeamPhaseSettingsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t phaseIncrement; // Offset: 0x8
    int32_t points; // Offset: 0xc
    CLocIdentifier* phaseObjective; // Offset: 0x10
    SEACriticalMessageDef playerSpawnMessage; // Offset: 0x18
};

// Original name: DynArray_SEACriticalMessageDef
// Generated DynArray for base type: SEACriticalMessageDef
// Size: 0x8
struct DynArray_SEACriticalMessageDef {
    SEACriticalMessageDef* m_data; // Offset: 0x0
};

// Original name: DynArray_ContractIntParam
// Generated DynArray for base type: ContractIntParam
// Size: 0x8
struct DynArray_ContractIntParam {
    ContractIntParam* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionLeanBoneDef
// Generated DynArray for base type: SActorForceReactionLeanBoneDef
// Size: 0x8
struct DynArray_SActorForceReactionLeanBoneDef {
    SActorForceReactionLeanBoneDef* m_data; // Offset: 0x0
};

// Original name: EntityComponentFireRepairer
// Size: 0x38
// VTable: 0x14997cff8
struct EntityComponentFireRepairer {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enable; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float repairRate; // Offset: 0x1c
    float radius; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    FireRepairerType_Base type_; /* type */ // Offset: 0x28
};

// Original name: DynArray_BuildingBlocks_NumberCompareCondition
// Generated DynArray for base type: BuildingBlocks_NumberCompareCondition
// Size: 0x8
struct DynArray_BuildingBlocks_NumberCompareCondition {
    BuildingBlocks_NumberCompareCondition* m_data; // Offset: 0x0
};

// Original name: ProceduralLayoutNode_Start
// Size: 0x18
// VTable: 0x1499b5da0
struct ProceduralLayoutNode_Start {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ProceduralLayoutNode_Base next; // Offset: 0x8
};

// Original name: DynArray_ProceduralLayoutNode_Base
// Generated DynArray for base type: ProceduralLayoutNode_Base
// Size: 0x8
struct DynArray_ProceduralLayoutNode_Base {
    ProceduralLayoutNode_Base* m_data; // Offset: 0x0
};

// Original name: PlanetRoomParams
// Size: 0x20
// VTable: 0x14999d280
struct PlanetRoomParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float TemperatureRange; // Offset: 0x8
    float HumidityRange; // Offset: 0xc
    PlanetDayNightTemperatureBaseParams dayNightTemperatureParams; // Offset: 0x10
};

// Original name: DynArray_WeatherEffects_Asteroid
// Generated DynArray for base type: WeatherEffects_Asteroid
// Size: 0x8
struct DynArray_WeatherEffects_Asteroid {
    WeatherEffects_Asteroid* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemResourceNetworkPowerModifier
// Generated DynArray for base type: ItemResourceNetworkPowerModifier
// Size: 0x8
struct DynArray_ItemResourceNetworkPowerModifier {
    ItemResourceNetworkPowerModifier* m_data; // Offset: 0x0
};

// Original name: CraftingRecipeResultsRecord
// Size: 0x18
// VTable: 0x1499b88e0
struct CraftingRecipeResultsRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipeResults_Base_NonRef results; // Offset: 0x8
};

// Original name: InnerThought_Anim
// Size: 0x18
// VTable: 0x149a98670
struct InnerThought_Anim {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InnerThought_AnimBase type_; /* type */ // Offset: 0x8
};

// Original name: DynArray_CraftingGameplayProperty_Base
// Generated DynArray for base type: CraftingGameplayProperty_Base
// Size: 0x8
struct DynArray_CraftingGameplayProperty_Base {
    CraftingGameplayProperty_Base* m_data; // Offset: 0x0
};

// Original name: RadiationBehavior
// Size: 0x18
// VTable: 0x14997af90
struct RadiationBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RadiationBehavior_SurfaceRadiationParams surfaceRadiation; // Offset: 0x8
};

// Original name: DynArray_PersonalThoughtOption
// Generated DynArray for base type: PersonalThoughtOption
// Size: 0x8
struct DynArray_PersonalThoughtOption {
    PersonalThoughtOption* m_data; // Offset: 0x0
};

// Original name: CrafterComponentParams
// Size: 0x28
// VTable: 0x149a0ee10
struct CrafterComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    BlueprintCategoryAvailability_Base blueprintCategoryAvailability; // Offset: 0x18
};

// Original name: EntityComponentRoomFadeVolumeParams
// Size: 0x30
// VTable: 0x14997b0a8
struct EntityComponentRoomFadeVolumeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    VolumeShape areaVolume; // Offset: 0x18
    float fadeZone; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: DynArray_CockpitRuleBase
// Generated DynArray for base type: CockpitRuleBase
// Size: 0x8
struct DynArray_CockpitRuleBase {
    CockpitRuleBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SHelmetLinkedState
// Generated DynArray for base type: SHelmetLinkedState
// Size: 0x8
struct DynArray_SHelmetLinkedState {
    SHelmetLinkedState* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionStaggerTagConfig
// Generated DynArray for base type: SActorForceReactionStaggerTagConfig
// Size: 0x8
struct DynArray_SActorForceReactionStaggerTagConfig {
    SActorForceReactionStaggerTagConfig* m_data; // Offset: 0x0
};

// Original name: DynArray_DefaultActionDescriptionOverride
// Generated DynArray for base type: DefaultActionDescriptionOverride
// Size: 0x8
struct DynArray_DefaultActionDescriptionOverride {
    DefaultActionDescriptionOverride* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeaponAimableAnglesParams
// Generated DynArray for base type: SWeaponAimableAnglesParams
// Size: 0x8
struct DynArray_SWeaponAimableAnglesParams {
    SWeaponAimableAnglesParams* m_data; // Offset: 0x0
};

// Original name: SActorStanceTrailSphereDef
// Size: 0x70
// VTable: 0x149aae138
struct SActorStanceTrailSphereDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 defaultPivot; // Offset: 0x10
    bool keepPivotOffsetInZoneSpace; // Offset: 0x28
    uint8_t _pad_2[0x7]; // Offset: 0x29
    DegYPR defaultTrailDirection; // Offset: 0x30
    bool keepTrailDirectionInZoneSpace; // Offset: 0x50
    bool alignToSurface; // Offset: 0x51
    uint8_t _pad_3[0x2]; // Offset: 0x52
    float minTrailDistance; // Offset: 0x54
    float desiredMinTrailDistance; // Offset: 0x58
    float desiredMaxTrailDistance; // Offset: 0x5c
    float expansionMaxDuration; // Offset: 0x60
    uint8_t _pad_4[0xc]; // Offset: 0x64
};

// Original name: SUsableMovementAlignmentParams
// Size: 0x38
// VTable: 0x1499b0ae0
struct SUsableMovementAlignmentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* EnterTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* ExitTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    SUsableMovementAlignmentData AlignmentSlot; // Offset: 0x28
};

// Original name: DynArray_CraftingBlueprintTier_Base
// Generated DynArray for base type: CraftingBlueprintTier_Base
// Size: 0x8
struct DynArray_CraftingBlueprintTier_Base {
    CraftingBlueprintTier_Base* m_data; // Offset: 0x0
};

// Original name: LedgeObjectComponentParams
// Size: 0x50
// VTable: 0x149a03038
struct LedgeObjectComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isEnabled; // Offset: 0x18
    bool isVault; // Offset: 0x19
    bool isDoubleSided; // Offset: 0x1a
    bool isFlipped; // Offset: 0x1b
    bool autoTransition; // Offset: 0x1c
    bool followTerrain; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    float ledgeMaxDepth; // Offset: 0x20
    float ledgeMaxExitAngle; // Offset: 0x24
    float cornerMaxAngle; // Offset: 0x28
    float cornerEndAdjustAmount; // Offset: 0x2c
    SAILedgeParams aiParams; // Offset: 0x30
    SCLedgeEntityParams pEnityParams; // Offset: 0x40
};

// Original name: SCItemControlPriorityTag
// Size: 0x50
// VTable: 0x149a072b8
struct SCItemControlPriorityTag {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    CryStringT* tag; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    SCItemControlPriorityValue priorityValue; // Offset: 0x30
    uint8_t _pad_2[0x10]; // Offset: 0x40
};

// Original name: DynArray_SpecialEventManufacturer
// Generated DynArray for base type: SpecialEventManufacturer
// Size: 0x8
struct DynArray_SpecialEventManufacturer {
    SpecialEventManufacturer* m_data; // Offset: 0x0
};

// Original name: DynArray_SandboxTriggerBaseDef
// Generated DynArray for base type: SandboxTriggerBaseDef
// Size: 0x8
struct DynArray_SandboxTriggerBaseDef {
    SandboxTriggerBaseDef* m_data; // Offset: 0x0
};

// Original name: DynArray_IntUserVariableTask
// Generated DynArray for base type: IntUserVariableTask
// Size: 0x8
struct DynArray_IntUserVariableTask {
    IntUserVariableTask* m_data; // Offset: 0x0
};

// Original name: DynArray_SScoreboardStat
// Generated DynArray for base type: SScoreboardStat
// Size: 0x8
struct DynArray_SScoreboardStat {
    SScoreboardStat* m_data; // Offset: 0x0
};

// Original name: CommunicationRequest
// Size: 0x38
// VTable: 0x14997f2c8
struct CommunicationRequest {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CommunicationName communication; // Offset: 0x8
    CommunicationChannelName channelName; // Offset: 0x20
};

// Original name: SEntityObjectContainerGridProperty
// Size: 0x48
// VTable: 0x1499e63a8
struct SEntityObjectContainerGridProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry gridGeometry; // Offset: 0x8
    Vec3 gravity; // Offset: 0x20
    ARDataType gridType; // Offset: 0x38
    float cellSize; // Offset: 0x3c
    bool inheritGravity; // Offset: 0x40
    bool gridPartsOnly; // Offset: 0x41
    bool portalExclusiveMode; // Offset: 0x42
    uint8_t _pad_1[0x5]; // Offset: 0x43
};

// Original name: SEntityVoxelGridProperty
// Size: 0x58
// VTable: 0x1499e63a0
struct SEntityVoxelGridProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry gridGeometry; // Offset: 0x8
    Vec3 gravity; // Offset: 0x20
    ARDataType gridType; // Offset: 0x38
    float cellSize; // Offset: 0x3c
    bool inheritGravity; // Offset: 0x40
    bool gridPartsOnly; // Offset: 0x41
    bool portalExclusiveMode; // Offset: 0x42
    uint8_t _pad_1[0x5]; // Offset: 0x43
    CryStringT* voxelDataFile; // Offset: 0x48
    uint8_t _pad_2[0x8]; // Offset: 0x50
};

// Original name: SEntityGridProperty
// Size: 0x48
// VTable: 0x1499e6260
struct SEntityGridProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry gridGeometry; // Offset: 0x8
    Vec3 gravity; // Offset: 0x20
    ARDataType gridType; // Offset: 0x38
    float cellSize; // Offset: 0x3c
    bool inheritGravity; // Offset: 0x40
    bool gridPartsOnly; // Offset: 0x41
    bool portalExclusiveMode; // Offset: 0x42
    uint8_t _pad_1[0x5]; // Offset: 0x43
};

// Original name: StarMapPartyMemberObject
// Size: 0x48
// VTable: 0x149a8feb0
struct StarMapPartyMemberObject {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumDisplaySize; // Offset: 0x8
    float rotationSpeed; // Offset: 0xc
    ARDataType facingMode; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    GlobalResourceGeometry geometry; // Offset: 0x18
    GlobalResourceMaterial material; // Offset: 0x30
};

// Original name: MeshFieldGeom
// Size: 0x20
// VTable: 0x1499e8e60
struct MeshFieldGeom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry geometry; // Offset: 0x8
};

// Original name: SEntityBoxGridProperty
// Size: 0x78
// VTable: 0x1499e6348
struct SEntityBoxGridProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry gridGeometry; // Offset: 0x8
    Vec3 gravity; // Offset: 0x20
    ARDataType gridType; // Offset: 0x38
    float cellSize; // Offset: 0x3c
    bool inheritGravity; // Offset: 0x40
    bool gridPartsOnly; // Offset: 0x41
    bool portalExclusiveMode; // Offset: 0x42
    uint8_t _pad_1[0x5]; // Offset: 0x43
    Vec3 center; // Offset: 0x48
    Vec3 size; // Offset: 0x60
};

// Original name: StarMapMissionObject
// Size: 0x48
// VTable: 0x149a8fdb0
struct StarMapMissionObject {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumDisplaySize; // Offset: 0x8
    float rotationSpeed; // Offset: 0xc
    ARDataType facingMode; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    GlobalResourceGeometry geometry; // Offset: 0x18
    GlobalResourceMaterial material; // Offset: 0x30
};

// Original name: ConsumableFoodAttachment
// Size: 0x50
// VTable: 0x149a258c0
struct ConsumableFoodAttachment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry geometry; // Offset: 0x8
    GlobalResourceMaterial materialOverride; // Offset: 0x20
    CryStringT* attachmentBone; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
    bool attachToUtensil; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
};

// Original name: ConsumableAttachment
// Size: 0x48
// VTable: 0x149a25860
struct ConsumableAttachment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry geometry; // Offset: 0x8
    GlobalResourceMaterial materialOverride; // Offset: 0x20
    CryStringT* attachmentBone; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
};

// Original name: SEntitySphereGridProperty
// Size: 0x50
// VTable: 0x1499e62c0
struct SEntitySphereGridProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry gridGeometry; // Offset: 0x8
    Vec3 gravity; // Offset: 0x20
    ARDataType gridType; // Offset: 0x38
    float cellSize; // Offset: 0x3c
    bool inheritGravity; // Offset: 0x40
    bool gridPartsOnly; // Offset: 0x41
    bool portalExclusiveMode; // Offset: 0x42
    uint8_t _pad_1[0x5]; // Offset: 0x43
    float radius; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: SEntityCgfGridProperty
// Size: 0x48
// VTable: 0x1499e6268
struct SEntityCgfGridProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry gridGeometry; // Offset: 0x8
    Vec3 gravity; // Offset: 0x20
    ARDataType gridType; // Offset: 0x38
    float cellSize; // Offset: 0x3c
    bool inheritGravity; // Offset: 0x40
    bool gridPartsOnly; // Offset: 0x41
    bool portalExclusiveMode; // Offset: 0x42
    uint8_t _pad_1[0x5]; // Offset: 0x43
};

// Original name: BuildingBlocks_FieldModifierRecordRefTypeFontStyleRecord
// Size: 0x20
// VTable: 0x14998c5b0
struct BuildingBlocks_FieldModifierRecordRefTypeFontStyleRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_FontStyle value; // Offset: 0x8
};

// Original name: RecordRefUserVariableTypeFontStyle
// Size: 0x20
// VTable: 0x149994570
struct RecordRefUserVariableTypeFontStyle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_FontStyle value; // Offset: 0x8
};

// Original name: BuildingBlocks_FontReplacementPair
// Size: 0x30
// VTable: 0x149992218
struct BuildingBlocks_FontReplacementPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_FontStyle englishFont; // Offset: 0x8
    CryStringT* replacementFontName; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
};

// Original name: BuildingBlocks_StaticVariableFontStyle
// Size: 0x30
// VTable: 0x14998a780
struct BuildingBlocks_StaticVariableFontStyle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_FontStyle value; // Offset: 0x18
};

// Original name: BindingsOperations_IntegerStringFontStylePair
// Size: 0x28
// VTable: 0x149989418
struct BindingsOperations_IntegerStringFontStylePair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t first; // Offset: 0x8
    BuildingBlocks_FontStyle second; // Offset: 0x10
};

// Original name: DynArray_DeltaSignatureSpikeParams
// Generated DynArray for base type: DeltaSignatureSpikeParams
// Size: 0x8
struct DynArray_DeltaSignatureSpikeParams {
    DeltaSignatureSpikeParams* m_data; // Offset: 0x0
};

// Original name: SWeaponConditionHeatLevel
// Size: 0x18
// VTable: 0x149a70260
struct SWeaponConditionHeatLevel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SFloatNumberComparer comparer; // Offset: 0x8
};

// Original name: DynArray_BoneCounterRotateConfig
// Generated DynArray for base type: BoneCounterRotateConfig
// Size: 0x8
struct DynArray_BoneCounterRotateConfig {
    BoneCounterRotateConfig* m_data; // Offset: 0x0
};

// Original name: EAScoringVehicleComponentParamsDef
// Size: 0x50
// VTable: 0x149a280c0
struct EAScoringVehicleComponentParamsDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    EAScoringComponentParamsDef baseComponent; // Offset: 0x18
    int32_t partDetachedBonus; // Offset: 0x40
    int32_t componentDistortionScore; // Offset: 0x44
    int32_t totalDistortionScoreAward; // Offset: 0x48
    float distortionDisablePercentage; // Offset: 0x4c
};

// Original name: EAScoringActorComponentParamsDef
// Size: 0x40
// VTable: 0x149a28120
struct EAScoringActorComponentParamsDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    EAScoringComponentParamsDef baseComponent; // Offset: 0x18
};

// Original name: DynArray_ContractStringParam
// Generated DynArray for base type: ContractStringParam
// Size: 0x8
struct DynArray_ContractStringParam {
    ContractStringParam* m_data; // Offset: 0x0
};

// Original name: HarvestableParams
// Size: 0x28
// VTable: 0x1499f0180
struct HarvestableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SubHarvestableConfigBase looseSubConfigBase; // Offset: 0x18
};

// Original name: SAccolade
// Size: 0x60
// VTable: 0x149a23c58
struct SAccolade {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    CryStringT* smallIconPath; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* largeIconPath; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* completedIconPath; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    int32_t totalRequired; // Offset: 0x48
    bool startLocked; // Offset: 0x4c
    uint8_t _pad_4[0x3]; // Offset: 0x4d
    SAccoladeRequirement accoladeRequirement; // Offset: 0x50
};

// Original name: DynArray_SAccoladeRequirement
// Generated DynArray for base type: SAccoladeRequirement
// Size: 0x8
struct DynArray_SAccoladeRequirement {
    SAccoladeRequirement* m_data; // Offset: 0x0
};

// Original name: ItemTypeCategoryException
// Size: 0x28
// VTable: 0x149aa7b50
struct ItemTypeCategoryException {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType subType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    ItemTypeCategory category; // Offset: 0x10
    bool showInElectronicAccess; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
};

// Original name: DynArray_ItemTypeCategory
// Generated DynArray for base type: ItemTypeCategory
// Size: 0x8
struct DynArray_ItemTypeCategory {
    ItemTypeCategory* m_data; // Offset: 0x0
};

// Original name: SJumpTunnelFailureParams
// Size: 0x48
// VTable: 0x149a14698
struct SJumpTunnelFailureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float exitAcceleration; // Offset: 0x8
    float exitMaximumSpeed; // Offset: 0xc
    float exitRollAcceleration; // Offset: 0x10
    float exitPitchAcceleration; // Offset: 0x14
    float exitYawAcceleration; // Offset: 0x18
    float exitAngularVelocityMaximum; // Offset: 0x1c
    float ratioOfMaxDistortionDamage; // Offset: 0x20
    float ratioOfMaxJDRVWearDamage; // Offset: 0x24
    float ratioOfMaxQDRVWearDamage; // Offset: 0x28
    float ratioOfMaxHullWearDamage; // Offset: 0x2c
    Range teleportRangeOffset; // Offset: 0x30
    float teleportMaxHeight; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
};

// Original name: JumpDriveExitParams
// Size: 0x20
// VTable: 0x149a13458
struct JumpDriveExitParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float exitTrailTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Range exitSpeedRange; // Offset: 0x10
};

// Original name: GlobalJumpTunnelPassByLightParams
// Size: 0x88
// VTable: 0x149a13980
struct GlobalJumpTunnelPassByLightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range intensityRange; // Offset: 0x8
    Range radiusRange; // Offset: 0x18
    Range bulbRange; // Offset: 0x28
    Range spacingRange; // Offset: 0x38
    Range distanceFromSpline; // Offset: 0x48
    Range speedRange; // Offset: 0x58
    Range colorRandomOffsetRange; // Offset: 0x68
    float entranceOffset; // Offset: 0x78
    float spawnChance; // Offset: 0x7c
    float maxRange; // Offset: 0x80
    float fadeOutDistStart; // Offset: 0x84
};

// Original name: GlobalEngineTrailsSetting
// Size: 0x20
// VTable: 0x149a19ef0
struct GlobalEngineTrailsSetting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float pressureThreshold; // Offset: 0x8
    float contrailPressureFadeRange; // Offset: 0xc
    Range contrailCloudDensityRange; // Offset: 0x10
};

// Original name: GlobalAerodynamicTrailSettings
// Size: 0x30
// VTable: 0x149a1a1b0
struct GlobalAerodynamicTrailSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maximumAngleOfAttack; // Offset: 0x8
    float maximumRollVelocity; // Offset: 0xc
    float maximumDewPointDeviation; // Offset: 0x10
    float speedInfluence; // Offset: 0x14
    float engineTrailReduction; // Offset: 0x18
    float heatingReduction; // Offset: 0x1c
    Range cloudDensityRange; // Offset: 0x20
};

// Original name: ElectricalCalculationPropertyRange
// Size: 0x20
// VTable: 0x149979698
struct ElectricalCalculationPropertyRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Range range; // Offset: 0x10
};

// Original name: SJumpTunnelSectionControlPointGenerationParams
// Size: 0x38
// VTable: 0x149a13f70
struct SJumpTunnelSectionControlPointGenerationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range sectionOffset; // Offset: 0x8
    Range sectionLength; // Offset: 0x18
    Range angleOffset; // Offset: 0x28
};

// Original name: JumpDriveTravelParams
// Size: 0x20
// VTable: 0x149a133d0
struct JumpDriveTravelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float interactionStartDistance; // Offset: 0x8
    float reactionBurstTriggerDistance; // Offset: 0xc
    Range tunnelResponseDistanceAheadRange; // Offset: 0x10
};

// Original name: FireHazardGlobalPropagation
// Size: 0x30
// VTable: 0x14997b710
struct FireHazardGlobalPropagation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fireMassThreshold; // Offset: 0x8
    float radiativeFactor; // Offset: 0xc
    float minimumHeatIntensityOutput; // Offset: 0x10
    float maximumRadiationRadius; // Offset: 0x14
    float maximumConvectionDistance; // Offset: 0x18
    float standardConvectionTemperature; // Offset: 0x1c
    Range oxygenPressureRange; // Offset: 0x20
};

// Original name: SWeaponAIChargedParams
// Size: 0x38
// VTable: 0x149a609f0
struct SWeaponAIChargedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType aiShootingMode; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    Range chargeDurationInterval; // Offset: 0x20
    bool fireOnFullyCharged; // Offset: 0x30
    uint8_t _pad_3[0x3]; // Offset: 0x31
    float chargeDurationBeforeCoverAction; // Offset: 0x34
};

// Original name: VectorFieldParams
// Size: 0x70
// VTable: 0x149994cc8
struct VectorFieldParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* path; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float maxStrength; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    Range speedRange; // Offset: 0x20
    float maxMass; // Offset: 0x30
    float speedBiasController; // Offset: 0x34
    Vec3 posOffset; // Offset: 0x38
    Vec3 size; // Offset: 0x50
    bool respectAspectRatio; // Offset: 0x68
    uint8_t _pad_3[0x7]; // Offset: 0x69
};

// Original name: WeaponFlickerParams
// Size: 0x30
// VTable: 0x149a74750
struct WeaponFlickerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float totalDuration; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Range onRange; // Offset: 0x10
    Range offRange; // Offset: 0x20
};

// Original name: WaterInteractionEffectParams
// Size: 0x38
// VTable: 0x149994d70
struct WaterInteractionEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle effect; // Offset: 0x8
    float maxDuration; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    Range velocityRange; // Offset: 0x28
};

// Original name: GlobalAtmosphericHeatingSettings
// Size: 0x58
// VTable: 0x149a1a068
struct GlobalAtmosphericHeatingSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float flareStartTemperature; // Offset: 0x8
    float gravityDirectionBias; // Offset: 0xc
    Range relativeAltitudeRange; // Offset: 0x10
    float relativeAltitudePeakStrength; // Offset: 0x20
    float minimumSpeed; // Offset: 0x24
    float maximumNonVehicleSpeed; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    Vec3 maximumNonVehicleAngularVelocity; // Offset: 0x30
    Range fadeAngleRange; // Offset: 0x48
};

// Original name: SJumpTunnelObstacleGenerationParams
// Size: 0x38
// VTable: 0x149a14020
struct SJumpTunnelObstacleGenerationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range size; // Offset: 0x8
    Range offset; // Offset: 0x18
    Range angle; // Offset: 0x28
};

// Original name: SWeaponAIRapidParams
// Size: 0x48
// VTable: 0x149a60aa0
struct SWeaponAIRapidParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType aiShootingMode; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    Range duration; // Offset: 0x20
    Range cooldown; // Offset: 0x30
    int32_t minBullets; // Offset: 0x40
    uint8_t _pad_3[0x4]; // Offset: 0x44
};

// Original name: GlobalJumpTunnelFogParams
// Size: 0x30
// VTable: 0x149a13798
struct GlobalJumpTunnelFogParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fogStartOffset; // Offset: 0x8
    float fogEndOffset; // Offset: 0xc
    Range fogEndIntensityDistanceRange; // Offset: 0x10
    Range fogAnimatedIntensityScaleRange; // Offset: 0x20
};

// Original name: LightningStrengthDriver
// Size: 0x68
// VTable: 0x149979158
struct LightningStrengthDriver {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType property; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Range propertyRange; // Offset: 0x10
    bool disableOverMaximum; // Offset: 0x20
    bool disableUnderMinimum; // Offset: 0x21
    uint8_t _pad_2[0x6]; // Offset: 0x22
    Range strikeDensity; // Offset: 0x28
    Range strength; // Offset: 0x38
    Range scaleMultiplier; // Offset: 0x48
    Range intensity; // Offset: 0x58
};

// Original name: SurfaceRaindrops_Emitter
// Size: 0x50
// VTable: 0x149998428
struct SurfaceRaindrops_Emitter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle particleEffect; // Offset: 0x8
    bool linkedToSdf; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    Range humidityRange; // Offset: 0x28
    Range temperatureRange; // Offset: 0x38
    float fadeOutDuration; // Offset: 0x48
    bool enableCloudCondensation; // Offset: 0x4c
    uint8_t _pad_2[0x3]; // Offset: 0x4d
};

// Original name: SActorForceReactionSustainedImpulseDef
// Size: 0x30
// VTable: 0x149a4b670
struct SActorForceReactionSustainedImpulseDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Range sustainedToImpulseRange; // Offset: 0x10
    float forceSmoothingDuration; // Offset: 0x20
    float minForceToTriggerImpulse; // Offset: 0x24
    float predictionUncertaintyPercent; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: CounterMeasureChaffParams
// Size: 0x88
// VTable: 0x1499cee38
struct CounterMeasureChaffParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float volumeSpawnDelay; // Offset: 0x8
    float volumeLifetime; // Offset: 0xc
    GlobalResourceParticle explosionParticles; // Offset: 0x10
    GlobalResourceParticle childExplosionParticles; // Offset: 0x28
    GlobalResourceParticle volumeParticles; // Offset: 0x40
    Range radiusRange; // Offset: 0x58
    float StartInfrared; // Offset: 0x68
    float StartElectromagnetic; // Offset: 0x6c
    float StartCrossSection; // Offset: 0x70
    float StartDecibel; // Offset: 0x74
    float EndInfrared; // Offset: 0x78
    float EndElectromagnetic; // Offset: 0x7c
    float EndCrossSection; // Offset: 0x80
    float EndDecibel; // Offset: 0x84
};

// Original name: HoverHeight
// Size: 0x40
// VTable: 0x149a05188
struct HoverHeight {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float desiredHoverHeight; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Range hoverHeightOffsetRange; // Offset: 0x10
    float hoverHeightOffsetAcceleration; // Offset: 0x20
    float hoverHeightOffsetMaxSpeed; // Offset: 0x24
    Range speedRangeForExtraHeight; // Offset: 0x28
    float maxExtraHoverHeight; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: AerodynamicTrailCalculationGasCloudOpticalDensityRange
// Size: 0x18
// VTable: 0x14997a740
struct AerodynamicTrailCalculationGasCloudOpticalDensityRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range range; // Offset: 0x8
};

// Original name: EntityFireHazard
// Size: 0x20
// VTable: 0x1499e5dc0
struct EntityFireHazard {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    bool dissolveOnBurn; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    Range dissolvePercentageRange; // Offset: 0x10
};

// Original name: SActorForceReactionExternalImpulseDef
// Size: 0x20
// VTable: 0x149a4b6f8
struct SActorForceReactionExternalImpulseDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Range externalCollisionToImpulseRange; // Offset: 0x10
};

// Original name: AerodynamicTrailCalculationPropertyRange
// Size: 0x20
// VTable: 0x14997a6e8
struct AerodynamicTrailCalculationPropertyRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Range range; // Offset: 0x10
};

// Original name: ShockDiamondParams
// Size: 0x38
// VTable: 0x149a1d818
struct ShockDiamondParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float alphaMultiplier; // Offset: 0x8
    float splineOffset; // Offset: 0xc
    Range splineLengthRange; // Offset: 0x10
    float afterburnAlphaMultiplier; // Offset: 0x20
    float afterburnSplineOffset; // Offset: 0x24
    Range afterburnSplineLengthRange; // Offset: 0x28
};

// Original name: DynArray_Range
// Generated DynArray for base type: Range
// Size: 0x8
struct DynArray_Range {
    Range* m_data; // Offset: 0x0
};

// Original name: DynArray_DifficultyModifierRange
// Generated DynArray for base type: DifficultyModifierRange
// Size: 0x8
struct DynArray_DifficultyModifierRange {
    DifficultyModifierRange* m_data; // Offset: 0x0
};

// Original name: DynArray_ContextualCommunicationCondition
// Generated DynArray for base type: ContextualCommunicationCondition
// Size: 0x8
struct DynArray_ContextualCommunicationCondition {
    ContextualCommunicationCondition* m_data; // Offset: 0x0
};

// Original name: DynArray_HealthIconStatusEffect
// Generated DynArray for base type: HealthIconStatusEffect
// Size: 0x8
struct DynArray_HealthIconStatusEffect {
    HealthIconStatusEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_TimeTrialSplit
// Generated DynArray for base type: TimeTrialSplit
// Size: 0x8
struct DynArray_TimeTrialSplit {
    TimeTrialSplit* m_data; // Offset: 0x0
};

// Original name: DynArray_ConsumableHelpers
// Generated DynArray for base type: ConsumableHelpers
// Size: 0x8
struct DynArray_ConsumableHelpers {
    ConsumableHelpers* m_data; // Offset: 0x0
};

// Original name: ShieldTypeParams
// Size: 0x58
// VTable: 0x1499f64e0
struct ShieldTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle impactEffect; // Offset: 0x8
    SRGB8 minHealthColor; // Offset: 0x20
    SRGB8 maxHealthColor; // Offset: 0x30
    float maxDamageStrength; // Offset: 0x40
    float sizeScaleMultiplier; // Offset: 0x44
    float sizeScale1stPerson; // Offset: 0x48
    float alphaScaleDefault; // Offset: 0x4c
    float alphaScale1stPerson; // Offset: 0x50
    int32_t maxHitImpact; // Offset: 0x54
};

// Original name: SunLightComponentParams
// Size: 0x68
// VTable: 0x1499c9ec0
struct SunLightComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SRGB8 lightColor; // Offset: 0x18
    SRGB8 surfaceColor; // Offset: 0x28
    float surfaceIntensity; // Offset: 0x38
    float radius; // Offset: 0x3c
    float dist1; // Offset: 0x40
    float dist2; // Offset: 0x44
    float dist3; // Offset: 0x48
    float dist4; // Offset: 0x4c
    float distCull; // Offset: 0x50
    float intensity1; // Offset: 0x54
    float intensity2; // Offset: 0x58
    float intensity3; // Offset: 0x5c
    float intensity4; // Offset: 0x60
    uint8_t _pad_1[0x4]; // Offset: 0x64
};

// Original name: GasCloudVDBLightingParams
// Size: 0x38
// VTable: 0x1499cc798
struct GasCloudVDBLightingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SRGB8 albedo; // Offset: 0x8
    SRGB8 lightLeakColor; // Offset: 0x18
    float lightLeakScale; // Offset: 0x28
    float density; // Offset: 0x2c
    bool inheritParentDensity; // Offset: 0x30
    uint8_t _pad_1[0x3]; // Offset: 0x31
    float rayStepMultiplier; // Offset: 0x34
};

// Original name: DirectRTT_DropShadowParams
// Size: 0x40
// VTable: 0x14993a1b0
struct DirectRTT_DropShadowParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float SharpShadowIntensity; // Offset: 0x8
    float SoftShadowIntensity; // Offset: 0xc
    float Spread; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    Vec2 Offset; // Offset: 0x18
    SRGB8 Color; // Offset: 0x28
    float OpacityInBrightScenes; // Offset: 0x38
    float OpacityInDarkScenes; // Offset: 0x3c
};

// Original name: HudColor_HoloMatColors
// Size: 0x58
// VTable: 0x149aa0fc0
struct HudColor_HoloMatColors {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SRGB8 Diffuse; // Offset: 0x8
    SRGB8 Emissive; // Offset: 0x18
    SRGB8 RimColor; // Offset: 0x28
    SRGB8 SilhouetteColor; // Offset: 0x38
    HudColor_HoloMatTextures Textures; // Offset: 0x48
};

// Original name: CinematicTriggerParams
// Size: 0x90
// VTable: 0x1499e5050
struct CinematicTriggerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Vec3 dimensions; // Offset: 0x18
    bool enabled; // Offset: 0x30
    bool triggerOnce; // Offset: 0x31
    uint8_t _pad_1[0x2]; // Offset: 0x32
    float minDistance; // Offset: 0x34
    float maxDistance; // Offset: 0x38
    float minVisibleTime; // Offset: 0x3c
    float delay; // Offset: 0x40
    float checkTimer; // Offset: 0x44
    float minZoom; // Offset: 0x48
    bool mustBeFullyVisibleToTrigger; // Offset: 0x4c
    uint8_t _pad_2[0x3]; // Offset: 0x4d
    float scaledFovUsedToTrigger; // Offset: 0x50
    bool mustBeFullyVisibleToMaintain; // Offset: 0x54
    uint8_t _pad_3[0x3]; // Offset: 0x55
    float originalFovFactorUsedToMaintain; // Offset: 0x58
    bool inVehicleOnly; // Offset: 0x5c
    bool requiresDirectLineOfSight; // Offset: 0x5d
    bool checkTransparentMaterials; // Offset: 0x5e
    uint8_t _pad_4[0x1]; // Offset: 0x5f
    SRGB8 debugColorActive; // Offset: 0x60
    SRGB8 debugColorInactive; // Offset: 0x70
    CinematicTriggerMPOptions multiplayerOptions; // Offset: 0x80
};

// Original name: TintEntry
// Size: 0x30
// VTable: 0x149afd270
struct TintEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SRGB8 tintColor; // Offset: 0x8
    SRGB8 specColor; // Offset: 0x18
    uint8_t glossiness; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
};

// Original name: FactionPalette
// Size: 0xe8
// VTable: 0x149a90c40
struct FactionPalette {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool tintingActive; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    GlobalResourceMaterial ExteriorMaterialOverride; // Offset: 0x20
    GlobalResourceMaterial InteriorMaterialOverride; // Offset: 0x38
    GlobalResourceMaterial BrandingMaterialOverride; // Offset: 0x50
    SRGB8 ExteriorPrimaryColor; // Offset: 0x68
    SRGB8 ExteriorSecondaryColor; // Offset: 0x78
    SRGB8 ExteriorTertiaryColor; // Offset: 0x88
    SRGB8 ExteriorGraphicsColor; // Offset: 0x98
    SRGB8 InteriorPrimaryColor; // Offset: 0xa8
    SRGB8 InteriorSecondaryColor; // Offset: 0xb8
    SRGB8 InteriorTertiaryColor; // Offset: 0xc8
    SRGB8 InteriorGraphicsColor; // Offset: 0xd8
};

// Original name: ChatManagerColor
// Size: 0x20
// VTable: 0x1499e3cc8
struct ChatManagerColor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType colorType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SRGB8 color; // Offset: 0x10
};

// Original name: SCommentEntityParams
// Size: 0x50
// VTable: 0x1499e2738
struct SCommentEntityParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* text; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    float size; // Offset: 0x28
    float minScale; // Offset: 0x2c
    bool hidden; // Offset: 0x30
    uint8_t _pad_2[0x3]; // Offset: 0x31
    float maxDistance; // Offset: 0x34
    int32_t charsPerLine; // Offset: 0x38
    bool fixed; // Offset: 0x3c
    uint8_t _pad_3[0x3]; // Offset: 0x3d
    SRGB8 color; // Offset: 0x40
};

// Original name: DynArray_SRGB8
// Generated DynArray for base type: SRGB8
// Size: 0x8
struct DynArray_SRGB8 {
    SRGB8* m_data; // Offset: 0x0
};

// Original name: DynArray_SToolArmDeployCondition_Base
// Generated DynArray for base type: SToolArmDeployCondition_Base
// Size: 0x8
struct DynArray_SToolArmDeployCondition_Base {
    SToolArmDeployCondition_Base* m_data; // Offset: 0x0
};

// Original name: DynArray_ResourceTypeProperties
// Generated DynArray for base type: ResourceTypeProperties
// Size: 0x8
struct DynArray_ResourceTypeProperties {
    ResourceTypeProperties* m_data; // Offset: 0x0
};

// Original name: DynArray_LookAtType
// Generated DynArray for base type: LookAtType
// Size: 0x8
struct DynArray_LookAtType {
    LookAtType* m_data; // Offset: 0x0
};

// Original name: SCItemRadarSensitivityModifier
// Size: 0x20
// VTable: 0x1499c6168
struct SCItemRadarSensitivityModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCItemRadarSensitivityModifierType modifierType; // Offset: 0x8
    float sensitivityAddition; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: DynArray_LadderAnimationOffset
// Generated DynArray for base type: LadderAnimationOffset
// Size: 0x8
struct DynArray_LadderAnimationOffset {
    LadderAnimationOffset* m_data; // Offset: 0x0
};

// Original name: Item
// Size: 0x18
// VTable: 0x149a9e4d0
struct Item {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BaseItem type_; /* type */ // Offset: 0x8
};

// Original name: DynArray_AudioValueOutputBehaviour
// Generated DynArray for base type: AudioValueOutputBehaviour
// Size: 0x8
struct DynArray_AudioValueOutputBehaviour {
    AudioValueOutputBehaviour* m_data; // Offset: 0x0
};

// Original name: CargoGridOccupantProperties
// Size: 0x68
// VTable: 0x1499640a8
struct CargoGridOccupantProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CargoGridOccupantFace Top; // Offset: 0x8
    CargoGridOccupantFace Bottom; // Offset: 0x18
    CargoGridOccupantFace Front; // Offset: 0x28
    CargoGridOccupantFace Back; // Offset: 0x38
    CargoGridOccupantFace Right; // Offset: 0x48
    CargoGridOccupantFace Left; // Offset: 0x58
};

// Original name: DynArray_SHackingThreatLevelConditionParams
// Generated DynArray for base type: SHackingThreatLevelConditionParams
// Size: 0x8
struct DynArray_SHackingThreatLevelConditionParams {
    SHackingThreatLevelConditionParams* m_data; // Offset: 0x0
};

// Original name: SSilhouetteParamsDef
// Size: 0x48
// VTable: 0x1499b4a98
struct SSilhouetteParamsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool Enable; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    ARDataType ColourSource; // Offset: 0xc
    RGB TintColour; // Offset: 0x10
    float TintStrength; // Offset: 0x28
    float Brightness; // Offset: 0x2c
    float EdgeWidth; // Offset: 0x30
    float EdgeIntensity; // Offset: 0x34
    float FillIntensity; // Offset: 0x38
    float BlurRadius; // Offset: 0x3c
    float EdgeGradient; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: LightStateParams_Aux
// Size: 0x40
// VTable: 0x1499a4020
struct LightStateParams_Aux {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float intensity; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* presetTag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    int32_t lightStyle; // Offset: 0x38
    float temperature; // Offset: 0x3c
};

// Original name: FogVolumeComponentParams
// Size: 0xb8
// VTable: 0x1499c8be0
struct FogVolumeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool active; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    int32_t volumeType; // Offset: 0x1c
    Vec3 size; // Offset: 0x20
    RGB color; // Offset: 0x38
    float hdrDynamic; // Offset: 0x50
    bool useGlobalFogColor; // Offset: 0x54
    uint8_t _pad_2[0x3]; // Offset: 0x55
    float globalDensity; // Offset: 0x58
    float densityOffset; // Offset: 0x5c
    float fallOffDirLong; // Offset: 0x60
    float fallOffDirLati; // Offset: 0x64
    float fallOffShift; // Offset: 0x68
    float fallOffScale; // Offset: 0x6c
    float softEdges; // Offset: 0x70
    float rampStart; // Offset: 0x74
    float rampEnd; // Offset: 0x78
    float rampInfluence; // Offset: 0x7c
    float densityNoiseScale; // Offset: 0x80
    float densityNoiseOffset; // Offset: 0x84
    float densityNoiseTimeFrequency; // Offset: 0x88
    uint8_t _pad_3[0x4]; // Offset: 0x8c
    Vec3 densityNoiseSize; // Offset: 0x90
    float densityNoiseWindInfluence; // Offset: 0xa8
    bool affectsThisAreaOnly; // Offset: 0xac
    uint8_t _pad_4[0x3]; // Offset: 0xad
    float maxDistance; // Offset: 0xb0
    uint8_t _pad_5[0x4]; // Offset: 0xb4
};

// Original name: SSalvageRepairHighlightColorParams
// Size: 0x28
// VTable: 0x149a7aa98
struct SSalvageRepairHighlightColorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float hullThreshold; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: LightStateParams_Default
// Size: 0x40
// VTable: 0x1499a3f20
struct LightStateParams_Default {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float intensity; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* presetTag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    int32_t lightStyle; // Offset: 0x38
    float temperature; // Offset: 0x3c
};

// Original name: ParticleEffectFixedTintingParams
// Size: 0x20
// VTable: 0x1499970c0
struct ParticleEffectFixedTintingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
};

// Original name: ExplosiveOrdnancePingVFX
// Size: 0x58
// VTable: 0x149a246a8
struct ExplosiveOrdnancePingVFX {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry pingSphereGeometry; // Offset: 0x8
    GlobalResourceMaterial pingMaterial; // Offset: 0x20
    RGB pingColor; // Offset: 0x38
    float pingBrightness; // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
};

// Original name: STargetSelectorColorHighlighting
// Size: 0x40
// VTable: 0x149a55fa0
struct STargetSelectorColorHighlighting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB highlightColor; // Offset: 0x8
    float occludedAlpha; // Offset: 0x20
    bool outlineOnly; // Offset: 0x24
    uint8_t _pad_1[0x3]; // Offset: 0x25
    float outlineWidth; // Offset: 0x28
    bool useHostilityColor; // Offset: 0x2c
    uint8_t _pad_2[0x13]; // Offset: 0x2d
};

// Original name: SChargeDrainHighlightOutlineValues
// Size: 0x30
// VTable: 0x149a77908
struct SChargeDrainHighlightOutlineValues {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float occludedAlpha; // Offset: 0x20
    float outlineWidth; // Offset: 0x24
    bool outlineOnly; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
};

// Original name: CameraLensGhostInstance
// Size: 0x38
// VTable: 0x149a90838
struct CameraLensGhostInstance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float Position; // Offset: 0x18
    float Intensity; // Offset: 0x1c
    RGB Tint; // Offset: 0x20
};

// Original name: EnvironmentLightStateParams_Default
// Size: 0x38
// VTable: 0x1499a3590
struct EnvironmentLightStateParams_Default {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float intensity; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* presetTag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: ParticleEffectRandomTintingParams
// Size: 0x28
// VTable: 0x149997170
struct ParticleEffectRandomTintingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float random; // Offset: 0x20
    bool randomHue; // Offset: 0x24
    uint8_t _pad_1[0x3]; // Offset: 0x25
};

// Original name: SCharacterCustomizerRandomColorDef
// Size: 0x28
// VTable: 0x149a0c768
struct SCharacterCustomizerRandomColorDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float probability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    RGB color; // Offset: 0x10
};

// Original name: FireHazardGlobalLightParams
// Size: 0x80
// VTable: 0x14997bea8
struct FireHazardGlobalLightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB lightColor; // Offset: 0x8
    int32_t maxLights; // Offset: 0x20
    float selectionRadius; // Offset: 0x24
    float teleportCooldown; // Offset: 0x28
    float animMoveSpeed; // Offset: 0x2c
    float animGrowSpeed; // Offset: 0x30
    float radius; // Offset: 0x34
    Range bulbRadiusRange; // Offset: 0x38
    Range lightIntensityRange; // Offset: 0x48
    float fogMultiplier; // Offset: 0x58
    float fogOcclusionFalloff; // Offset: 0x5c
    float specularMultiplier; // Offset: 0x60
    uint8_t lightAnimStyle; // Offset: 0x64
    uint8_t _pad_1[0x3]; // Offset: 0x65
    float lightAnimSpeed; // Offset: 0x68
    float softness; // Offset: 0x6c
    float maxHeatReleaseRate; // Offset: 0x70
    float lightTemperature; // Offset: 0x74
    bool useTemperature; // Offset: 0x78
    bool affectsFog; // Offset: 0x79
    bool shadowMap; // Offset: 0x7a
    uint8_t _pad_2[0x5]; // Offset: 0x7b
};

// Original name: EnvironmentLightStateParams_Emergency
// Size: 0x38
// VTable: 0x1499a36f0
struct EnvironmentLightStateParams_Emergency {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float intensity; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* presetTag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: EntityComponentConsumableLiquidSourceParams
// Size: 0x48
// VTable: 0x149a237a0
struct EntityComponentConsumableLiquidSourceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* fillSourceHelper; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* fillVFXPath; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    RGB fillVFXTintOverride; // Offset: 0x38
};

// Original name: STintParamsDef
// Size: 0x28
// VTable: 0x1499b4cd8
struct STintParamsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB Colour; // Offset: 0x8
    float Strength; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: PooledLightData
// Size: 0x58
// VTable: 0x149aa4198
struct PooledLightData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* flareName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    RGB diffuseColor; // Offset: 0x18
    float radius; // Offset: 0x30
    float diffuseMultiplier; // Offset: 0x34
    float specularMultiplier; // Offset: 0x38
    float attenuationBulbSize; // Offset: 0x3c
    float animSpeed; // Offset: 0x40
    float flareScale; // Offset: 0x44
    float rampTime; // Offset: 0x48
    bool fake; // Offset: 0x4c
    bool autoClip; // Offset: 0x4d
    uint8_t style; // Offset: 0x4e
    uint8_t animPhase; // Offset: 0x4f
    uint8_t flareLensOpticsFrustumAngle; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
};

// Original name: SSalvageGlobalStructuralHighlightParams
// Size: 0x90
// VTable: 0x1499ba0d8
struct SSalvageGlobalStructuralHighlightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float highlightOccludedAlpha; // Offset: 0x8
    float highlightOutlineWidth; // Offset: 0xc
    bool highlightOutlineOnly; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    RGB fractureValidHighlightColor; // Offset: 0x18
    RGB fractureErrorHighlightColor; // Offset: 0x30
    RGB disintegrationValidHighlightColor; // Offset: 0x48
    RGB disintegrationWarningHighlightColor; // Offset: 0x60
    RGB disintegrationErrorHighlightColor; // Offset: 0x78
};

// Original name: CameraLensStreak
// Size: 0x28
// VTable: 0x149a90610
struct CameraLensStreak {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Intensity; // Offset: 0x8
    float Width; // Offset: 0xc
    RGB Tint; // Offset: 0x10
};

// Original name: SGlobalCuttableShapeParams
// Size: 0x78
// VTable: 0x149a0f928
struct SGlobalCuttableShapeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float heatRequiredPerSegment; // Offset: 0x8
    float heatDissipationPerSecond; // Offset: 0xc
    GlobalResourceParticle particleEffect; // Offset: 0x10
    GlobalResourceParticle finishedEffect; // Offset: 0x28
    float hitRadiusMin; // Offset: 0x40
    float hitRadiusMax; // Offset: 0x44
    float damageMultiplier; // Offset: 0x48
    float impactParticleLifeTime; // Offset: 0x4c
    RGB highlightColor; // Offset: 0x50
    float highlightOccludedAlpha; // Offset: 0x68
    float highlightOutlineWidth; // Offset: 0x6c
    bool highlightOutlineOnly; // Offset: 0x70
    uint8_t _pad_1[0x7]; // Offset: 0x71
};

// Original name: EnvironmentLightStateParams_Cinematic
// Size: 0x38
// VTable: 0x1499a37a0
struct EnvironmentLightStateParams_Cinematic {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float intensity; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* presetTag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: LightStateParams_Cinematic
// Size: 0x40
// VTable: 0x1499a4220
struct LightStateParams_Cinematic {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float intensity; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* presetTag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    int32_t lightStyle; // Offset: 0x38
    float temperature; // Offset: 0x3c
};

// Original name: SObjectSilhouetteParamsDef
// Size: 0x48
// VTable: 0x1499b4c58
struct SObjectSilhouetteParamsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t SilhouettePriority; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    RGB SilhouetteColour; // Offset: 0x10
    float SilhouetteAlpha; // Offset: 0x28
    float OccludedAlpha; // Offset: 0x2c
    bool OutlineOnly; // Offset: 0x30
    uint8_t _pad_2[0x3]; // Offset: 0x31
    float OutlineWidth; // Offset: 0x34
    float InterferenceAmount; // Offset: 0x38
    float InterferenceSpeed; // Offset: 0x3c
    float InterferenceTiling; // Offset: 0x40
    float InterferenceBrightness; // Offset: 0x44
};

// Original name: EntityEffectSystem_OverrideColorModifier
// Size: 0x20
// VTable: 0x1499998b0
struct EntityEffectSystem_OverrideColorModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB overrideColor; // Offset: 0x8
};

// Original name: GasParams
// Size: 0x50
// VTable: 0x149979f28
struct GasParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB debugColor; // Offset: 0x8
    CLocIdentifier* chemicalSymbol; // Offset: 0x20
    float fogDensity; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    RGB fogColor; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x48
};

// Original name: JumpTunnelEffectTintingParams
// Size: 0x60
// VTable: 0x149a12ed0
struct JumpTunnelEffectTintingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB startColor; // Offset: 0x8
    RGB midColor; // Offset: 0x20
    RGB endColor; // Offset: 0x38
    float startGlow; // Offset: 0x50
    float endGlow; // Offset: 0x54
    float distanceBeforeMidPoint; // Offset: 0x58
    float distanceAfterMidPoint; // Offset: 0x5c
};

// Original name: EnvironmentLightStateParams_Aux
// Size: 0x38
// VTable: 0x1499a3640
struct EnvironmentLightStateParams_Aux {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float intensity; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* presetTag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
};

// Original name: LightStateParams_Emergency
// Size: 0x40
// VTable: 0x1499a4120
struct LightStateParams_Emergency {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB color; // Offset: 0x8
    float intensity; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    CryStringT* presetTag; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    int32_t lightStyle; // Offset: 0x38
    float temperature; // Offset: 0x3c
};

// Original name: InnerThought_ColorParams
// Size: 0x80
// VTable: 0x149a98568
struct InnerThought_ColorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGB diffuseColor; // Offset: 0x8
    RGB emissiveColor; // Offset: 0x20
    RGB rimColor; // Offset: 0x38
    RGB silhouetteColor; // Offset: 0x50
    float opacity; // Offset: 0x68
    float glow; // Offset: 0x6c
    float diffuseOpacity; // Offset: 0x70
    float rimOpacity; // Offset: 0x74
    float silhouetteOpacity; // Offset: 0x78
    float silhouetteThickness; // Offset: 0x7c
};

// Original name: DynArray_RGB
// Generated DynArray for base type: RGB
// Size: 0x8
struct DynArray_RGB {
    RGB* m_data; // Offset: 0x0
};

// Original name: SSensorMineComponentParams
// Size: 0x48
// VTable: 0x1499f0a70
struct SSensorMineComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool FriendlyFire; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    SSensorMineTriggerType TriggerType; // Offset: 0x20
    GlobalResourceParticle LaserVFX; // Offset: 0x30
};

// Original name: ActorStanceSpeedsInfo
// Size: 0xa0
// VTable: 0x149aadef8
struct ActorStanceSpeedsInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorMotionStateFilter stateFilter; // Offset: 0x8
    ActorStanceSpeeds speeds; // Offset: 0x58
};

// Original name: DynArray_Marker_AbilityBase
// Generated DynArray for base type: Marker_AbilityBase
// Size: 0x8
struct DynArray_Marker_AbilityBase {
    Marker_AbilityBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SDynamicDifficultyPointsPerEvent
// Generated DynArray for base type: SDynamicDifficultyPointsPerEvent
// Size: 0x8
struct DynArray_SDynamicDifficultyPointsPerEvent {
    SDynamicDifficultyPointsPerEvent* m_data; // Offset: 0x0
};

// Original name: ResourceTypeDensity
// Size: 0x18
// VTable: 0x149961f90
struct ResourceTypeDensity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BaseDensityUnit densityUnit; // Offset: 0x8
};

// Original name: DynArray_ActorStatusUIWarningEntry
// Generated DynArray for base type: ActorStatusUIWarningEntry
// Size: 0x8
struct DynArray_ActorStatusUIWarningEntry {
    ActorStatusUIWarningEntry* m_data; // Offset: 0x0
};

// Original name: SVecWithNoiseParams
// Size: 0x40
// VTable: 0x149a5f188
struct SVecWithNoiseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 offset; // Offset: 0x8
    SHeadRecoilNoiseParams noise; // Offset: 0x20
};

// Original name: DynArray_StatusCost
// Generated DynArray for base type: StatusCost
// Size: 0x8
struct DynArray_StatusCost {
    StatusCost* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_StaticVariableBase
// Generated DynArray for base type: BuildingBlocks_StaticVariableBase
// Size: 0x8
struct DynArray_BuildingBlocks_StaticVariableBase {
    BuildingBlocks_StaticVariableBase* m_data; // Offset: 0x0
};

// Original name: DriftingDrunkConfig
// Size: 0x98
// VTable: 0x1499feee8
struct DriftingDrunkConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float stumbleForwardWeight; // Offset: 0x8
    float stumbleBackwardWeight; // Offset: 0xc
    float stumbleLeftWeight; // Offset: 0x10
    float stumbleRightWeight; // Offset: 0x14
    DriftingDrunkBDLEffects minBDLEffects; // Offset: 0x18
    DriftingDrunkBDLEffects maxBDLEffects; // Offset: 0x58
};

// Original name: DynArray_EntityAudioControllerTypeManagementParams
// Generated DynArray for base type: EntityAudioControllerTypeManagementParams
// Size: 0x8
struct DynArray_EntityAudioControllerTypeManagementParams {
    EntityAudioControllerTypeManagementParams* m_data; // Offset: 0x0
};

// Original name: DynArray_EAPatchNoteParams
// Generated DynArray for base type: EAPatchNoteParams
// Size: 0x8
struct DynArray_EAPatchNoteParams {
    EAPatchNoteParams* m_data; // Offset: 0x0
};

// Original name: ActorEnvironmentalMovementModifiers
// Size: 0x20
// VTable: 0x149aa3d50
struct ActorEnvironmentalMovementModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorEnvironmentalModifierConfig water; // Offset: 0x8
};

// Original name: AbilityStaminaStates
// Size: 0x80
// VTable: 0x149a3c930
struct AbilityStaminaStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ARDataType ability; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    StaminaCost lastingStaminaCost; // Offset: 0x50
    StaminaCost instantStaminaCost; // Offset: 0x60
    float staminaToStart; // Offset: 0x70
    float staminaToInterrupt; // Offset: 0x74
    float staminaUsageCap; // Offset: 0x78
    float staminaRegenModifier; // Offset: 0x7c
};

// Original name: ActionStaminaCosts
// Size: 0x38
// VTable: 0x149a3ca08
struct ActionStaminaCosts {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType actionCategory; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    StaminaCost instantStaminaCost; // Offset: 0x10
    StaminaCost blockedStaminaCost; // Offset: 0x20
    float staminaToStart; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: GameRulesEAStatePostGameParams
// Size: 0x40
// VTable: 0x149a3a8f0
struct GameRulesEAStatePostGameParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool enableOutro; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float outroDuration; // Offset: 0xc
    float shutdownDelay; // Offset: 0x10
    float awardsDisplayTime; // Offset: 0x14
    PostGameScoreboardParams scoreboard; // Offset: 0x18
    MatchCycleParams matchCycle; // Offset: 0x30
};

// Original name: SCItemConditionalPriority
// Size: 0x30
// VTable: 0x149a06dc8
struct SCItemConditionalPriority {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t defaultPriority; // Offset: 0xc
    uint8_t priorityWhenConditionMet; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    SCItemControlCondition_Base condition; // Offset: 0x10
    uint8_t _pad_2[0x10]; // Offset: 0x20
};

// Original name: DynArray_SCItemControlCondition_Base
// Generated DynArray for base type: SCItemControlCondition_Base
// Size: 0x8
struct DynArray_SCItemControlCondition_Base {
    SCItemControlCondition_Base* m_data; // Offset: 0x0
};

// Original name: AtmosphereStateTemplate
// Size: 0x28
// VTable: 0x14997a420
struct AtmosphereStateTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AtmosphereStateTemplateInternal state; // Offset: 0x8
};

// Original name: STargetingParams
// Size: 0x60
// VTable: 0x1499e30b0
struct STargetingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType trackingSignalType; // Offset: 0x8
    float trackingSignalMin; // Offset: 0xc
    float lockSignalAmplifier; // Offset: 0x10
    float lockTime; // Offset: 0x14
    float lockingAngle; // Offset: 0x18
    float minRatioForLock; // Offset: 0x1c
    float lockIncreaseRate; // Offset: 0x20
    float lockDecreaseRate; // Offset: 0x24
    float lockRangeMin; // Offset: 0x28
    float lockRangeMax; // Offset: 0x2c
    float lockResolutionRadius; // Offset: 0x30
    float lockResolutionFalloffPower; // Offset: 0x34
    float signalResilienceMin; // Offset: 0x38
    float signalResilienceMax; // Offset: 0x3c
    bool allowDumbFiring; // Offset: 0x40
    uint8_t _pad_1[0x3]; // Offset: 0x41
    int32_t maxTimesCanMiss; // Offset: 0x44
    SDynamicLaunchZoneDef dynamicLaunchZoneRecord; // Offset: 0x48
};

// Original name: DynArray_SEntityEffectSystem_PropertyModifier
// Generated DynArray for base type: SEntityEffectSystem_PropertyModifier
// Size: 0x8
struct DynArray_SEntityEffectSystem_PropertyModifier {
    SEntityEffectSystem_PropertyModifier* m_data; // Offset: 0x0
};

// Original name: ActorActionHandler_ValidationParams
// Size: 0x20
// VTable: 0x149aad650
struct ActorActionHandler_ValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorActionHandler_LadderValidationParams ladderValidationParams; // Offset: 0x8
};

// Original name: GlobalGasParams
// Size: 0xa0
// VTable: 0x149979e50
struct GlobalGasParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    double transferRatePerAtmosphereSquareMetre; // Offset: 0x8
    double minimumTransferRate; // Offset: 0x10
    double mixRatePerSquareMetre; // Offset: 0x18
    double mixAbsPressureDifferenceThreshold; // Offset: 0x20
    double massAdditionRatePerCubicMetre_MatchingGases; // Offset: 0x28
    double massSubtractionRatePerCubicMetre_MatchingGases; // Offset: 0x30
    double massSubtractionRatePerCubicMetre_ForeignGases; // Offset: 0x38
    double resourceCostPerKilogramCorrected; // Offset: 0x40
    double thermalEnergyCorrectionRatePerCubicMetre; // Offset: 0x48
    double resourceCostPerJoule; // Offset: 0x50
    double humidityCorrectionRate; // Offset: 0x58
    double resourceCostPerHumidity; // Offset: 0x60
    ApparentTemperatureParams apparentTemperatureParams; // Offset: 0x68
};

// Original name: DynamicCameraEffects
// Size: 0x78
// VTable: 0x149a7c680
struct DynamicCameraEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fov; // Offset: 0x8
    float fStop; // Offset: 0xc
    float focalDistance; // Offset: 0x10
    float focalRange; // Offset: 0x14
    float focusRange; // Offset: 0x18
    float focusMin; // Offset: 0x1c
    float focusMinScale; // Offset: 0x20
    float blurAmount; // Offset: 0x24
    float lerpToSpeed; // Offset: 0x28
    float lerpBackTime; // Offset: 0x2c
    float lerpBackTimeBreak; // Offset: 0x30
    float transparencyPostEffectsExclusionRegion; // Offset: 0x34
    float circleOfConfusion; // Offset: 0x38
    float focalRangePadding; // Offset: 0x3c
    float multipleTargetFStop; // Offset: 0x40
    bool manualExposure; // Offset: 0x44
    uint8_t _pad_1[0x3]; // Offset: 0x45
    float targetExposureValue; // Offset: 0x48
    float exposureCompensation; // Offset: 0x4c
    float outOfFocusMaxLuminance; // Offset: 0x50
    bool applyRendererParams; // Offset: 0x54
    uint8_t _pad_2[0x3]; // Offset: 0x55
    DynamicCameraEffectsRendererParams rendererParams; // Offset: 0x58
};

// Original name: DynArray_UIOwnerContextTransitionPair
// Generated DynArray for base type: UIOwnerContextTransitionPair
// Size: 0x8
struct DynArray_UIOwnerContextTransitionPair {
    UIOwnerContextTransitionPair* m_data; // Offset: 0x0
};

// Original name: SHintGameplayTrigger
// Size: 0x18
// VTable: 0x1499fb370
struct SHintGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SHintActivator hintTrigger; // Offset: 0x8
};

// Original name: BuildingBlocks_BindingsLocalizedCurrencyFromNumber
// Size: 0x70
// VTable: 0x149987b08
struct BuildingBlocks_BindingsLocalizedCurrencyFromNumber {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    uint8_t numSignificantFigures; // Offset: 0x50
    uint8_t numDecimalPlaces; // Offset: 0x51
    bool withSeparators; // Offset: 0x52
    uint8_t _pad_1[0x1]; // Offset: 0x53
    ARDataType currencyType; // Offset: 0x54
    bool showFullValue; // Offset: 0x58
    uint8_t _pad_2[0x7]; // Offset: 0x59
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x60
};

// Original name: BuildingBlocks_BindingsColorFromNumberRGBA
// Size: 0x1e0
// VTable: 0x149986058
struct BuildingBlocks_BindingsColorFromNumberRGBA {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    float defaultRedValue; // Offset: 0x50
    float defaultGreenValue; // Offset: 0x54
    float defaultBlueValue; // Offset: 0x58
    float defaultAlphaValue; // Offset: 0x5c
    BuildingBlocks_BindingsNumberBase inputRed; // Offset: 0x60
    BuildingBlocks_BindingsNumberBase inputGreen; // Offset: 0x70
    BuildingBlocks_BindingsNumberBase inputBlue; // Offset: 0x80
    BuildingBlocks_BindingsNumberBase inputAlpha; // Offset: 0x90
    uint8_t _pad_1[0x140]; // Offset: 0xa0
};

// Original name: BuildingBlocks_BindingsNumberArithmatic
// Size: 0x118
// VTable: 0x1499887a8
struct BuildingBlocks_BindingsNumberArithmatic {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    float amount; // Offset: 0x50
    ARDataType type_; /* type */ // Offset: 0x54
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x58
    BuildingBlocks_BindingsNumberBase inputB; // Offset: 0x68
    uint8_t _pad_1[0xa0]; // Offset: 0x78
};

// Original name: BuildingBlocks_BindingsNumberFunction
// Size: 0x68
// VTable: 0x149988bc8
struct BuildingBlocks_BindingsNumberFunction {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x58
};

// Original name: BuildingBlocks_BindingsNumberRound
// Size: 0x70
// VTable: 0x149988f98
struct BuildingBlocks_BindingsNumberRound {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    uint8_t amount; // Offset: 0x50
    uint8_t _pad_1[0x7]; // Offset: 0x51
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x58
    uint8_t _pad_2[0x8]; // Offset: 0x68
};

// Original name: BindingsOperations_LocalizationTimeFormatDuration
// Size: 0x68
// VTable: 0x149987dc0
struct BindingsOperations_LocalizationTimeFormatDuration {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int32_t significantFigures; // Offset: 0x50
    bool useClockFormatting; // Offset: 0x54
    uint8_t _pad_1[0x3]; // Offset: 0x55
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x58
};

// Original name: BuildingBlocks_BindingsNumberEase
// Size: 0x70
// VTable: 0x149988d98
struct BuildingBlocks_BindingsNumberEase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    float startValue; // Offset: 0x50
    float endValue; // Offset: 0x54
    ARDataType type_; /* type */ // Offset: 0x58
    uint8_t _pad_1[0x7]; // Offset: 0x59
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x60
};

// Original name: BuildingBlocks_IntegerNumberPair
// Size: 0x28
// VTable: 0x1499886d0
struct BuildingBlocks_IntegerNumberPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t first; // Offset: 0x8
    float second; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    BuildingBlocks_BindingsNumberBase secondOverride; // Offset: 0x18
};

// Original name: BuildingBlocks_BindingsLocalizationTimeFormat
// Size: 0x70
// VTable: 0x149987d18
struct BuildingBlocks_BindingsLocalizationTimeFormat {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int32_t significantFigures; // Offset: 0x50
    bool useClockFormatting; // Offset: 0x54
    bool hideLeadingZeros; // Offset: 0x55
    bool timeOfDay; // Offset: 0x56
    bool years; // Offset: 0x57
    bool months; // Offset: 0x58
    bool weeks; // Offset: 0x59
    bool days; // Offset: 0x5a
    bool hours; // Offset: 0x5b
    bool minutes; // Offset: 0x5c
    bool seconds; // Offset: 0x5d
    uint8_t _pad_1[0x2]; // Offset: 0x5e
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x60
};

// Original name: BuildingBlocks_BindingsNumberClamp
// Size: 0x178
// VTable: 0x149988cc0
struct BuildingBlocks_BindingsNumberClamp {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    float minValue; // Offset: 0x50
    float maxValue; // Offset: 0x54
    BuildingBlocks_BindingsNumberBase inputMinValue; // Offset: 0x58
    BuildingBlocks_BindingsNumberBase inputMaxValue; // Offset: 0x68
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x78
    uint8_t _pad_1[0xf0]; // Offset: 0x88
};

// Original name: BuildingBlocks_BindingsIntegerFromNumber
// Size: 0x60
// VTable: 0x149986ed0
struct BuildingBlocks_BindingsIntegerFromNumber {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x50
};

// Original name: BuildingBlocks_BindingsNumberFromBoolean
// Size: 0x178
// VTable: 0x149989110
struct BuildingBlocks_BindingsNumberFromBoolean {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    float isTrue; // Offset: 0x50
    float isFalse; // Offset: 0x54
    BuildingBlocks_BindingsNumberBase inputTrue; // Offset: 0x58
    BuildingBlocks_BindingsNumberBase inputFalse; // Offset: 0x68
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0x78
    uint8_t _pad_1[0xf0]; // Offset: 0x88
};

// Original name: BuildingBlocks_BindingsNumberAtan2
// Size: 0x110
// VTable: 0x149989018
struct BuildingBlocks_BindingsNumberAtan2 {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsNumberBase inputY; // Offset: 0x50
    BuildingBlocks_BindingsNumberBase inputX; // Offset: 0x60
    uint8_t _pad_1[0xa0]; // Offset: 0x70
};

// Original name: BuildingBlocks_BindingsNumberInterpolate
// Size: 0x178
// VTable: 0x149988e90
struct BuildingBlocks_BindingsNumberInterpolate {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    float startValue; // Offset: 0x50
    float endValue; // Offset: 0x54
    BuildingBlocks_BindingsNumberBase inputStartValue; // Offset: 0x58
    BuildingBlocks_BindingsNumberBase inputEndValue; // Offset: 0x68
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x78
    uint8_t _pad_1[0xf0]; // Offset: 0x88
};

// Original name: BuildingBlocks_BindingsLocalizationFromTemperature
// Size: 0x68
// VTable: 0x1499882e0
struct BuildingBlocks_BindingsLocalizationFromTemperature {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    uint8_t numDecimalPlaces; // Offset: 0x50
    bool inputAsKelvin; // Offset: 0x51
    uint8_t _pad_1[0x6]; // Offset: 0x52
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x58
};

// Original name: BuildingBlocks_BindingsBooleanFromNumber
// Size: 0x118
// VTable: 0x149981808
struct BuildingBlocks_BindingsBooleanFromNumber {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    float number; // Offset: 0x50
    ARDataType type_; /* type */ // Offset: 0x54
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x58
    BuildingBlocks_BindingsNumberBase inputB; // Offset: 0x68
    uint8_t _pad_1[0xa0]; // Offset: 0x78
};

// Original name: BuildingBlocks_BindingsLocalizedFromNumber
// Size: 0x78
// VTable: 0x149987890
struct BuildingBlocks_BindingsLocalizedFromNumber {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    uint8_t nPlaces; // Offset: 0x50
    uint8_t nZeros; // Offset: 0x51
    bool withSeparators; // Offset: 0x52
    bool trailingZeros; // Offset: 0x53
    uint8_t _pad_1[0x4]; // Offset: 0x54
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x58
    uint8_t _pad_2[0x10]; // Offset: 0x68
};

// Original name: BuildingBlocks_BindingsColorFromNumberInterpolate
// Size: 0x1a0
// VTable: 0x1499861c8
struct BuildingBlocks_BindingsColorFromNumberInterpolate {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_ColorBase defaultColorA; // Offset: 0x50
    BuildingBlocks_ColorBase defaultColorB; // Offset: 0x60
    float amount; // Offset: 0x70
    uint8_t _pad_1[0x4]; // Offset: 0x74
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x78
    BuildingBlocks_BindingsColorBase inputColorA; // Offset: 0x88
    BuildingBlocks_BindingsColorBase inputColorB; // Offset: 0x98
    bool hsvMode; // Offset: 0xa8
    bool threeChannels; // Offset: 0xa9
    uint8_t _pad_2[0xf6]; // Offset: 0xaa
};

// Original name: BuildingBlocks_BindingsLocalizationFromDistance
// Size: 0x78
// VTable: 0x149988230
struct BuildingBlocks_BindingsLocalizationFromDistance {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    uint8_t numDecimalPlaces; // Offset: 0x50
    bool displayBelowKilometer; // Offset: 0x51
    uint8_t _pad_1[0x2]; // Offset: 0x52
    float displayKmThreshold; // Offset: 0x54
    bool withSpace; // Offset: 0x58
    uint8_t _pad_2[0x3]; // Offset: 0x59
    int32_t maxCharacters; // Offset: 0x5c
    bool displayNegative; // Offset: 0x60
    uint8_t _pad_3[0x7]; // Offset: 0x61
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x68
};

// Original name: BuildingBlocks_BindingsVectorFromNumber
// Size: 0x60
// VTable: 0x14998a360
struct BuildingBlocks_BindingsVectorFromNumber {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x50
};

// Original name: DynArray_BuildingBlocks_BindingsNumberBase
// Generated DynArray for base type: BuildingBlocks_BindingsNumberBase
// Size: 0x8
struct DynArray_BuildingBlocks_BindingsNumberBase {
    BuildingBlocks_BindingsNumberBase* m_data; // Offset: 0x0
};

// Original name: DynArray_ScanDisplaySortInfoParams
// Generated DynArray for base type: ScanDisplaySortInfoParams
// Size: 0x8
struct DynArray_ScanDisplaySortInfoParams {
    ScanDisplaySortInfoParams* m_data; // Offset: 0x0
};

// Original name: DynArray_StatusPriorityBase
// Generated DynArray for base type: StatusPriorityBase
// Size: 0x8
struct DynArray_StatusPriorityBase {
    StatusPriorityBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SReputationMissionRequirementExpressionElement
// Generated DynArray for base type: SReputationMissionRequirementExpressionElement
// Size: 0x8
struct DynArray_SReputationMissionRequirementExpressionElement {
    SReputationMissionRequirementExpressionElement* m_data; // Offset: 0x0
};

// Original name: TakeDownParams
// Size: 0x60
// VTable: 0x149aa0150
struct TakeDownParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorStateSkeletonFilter attackerSkeletonFilter; // Offset: 0x8
    TakeDownMaxDistances maxDistances; // Offset: 0x18
    float angleRange; // Offset: 0x30
    float surpriseDelay; // Offset: 0x34
    float maxHeightDiffUp; // Offset: 0x38
    float maxHeightDiffDown; // Offset: 0x3c
    ARDataType victimStance; // Offset: 0x40
    ARDataType attackerQuadrant; // Offset: 0x44
    bool isTakeDownAlwaysLethal; // Offset: 0x48
    bool interruptOnHitReaction; // Offset: 0x49
    bool isDodgeable; // Offset: 0x4a
    uint8_t _pad_1[0x1]; // Offset: 0x4b
    float animSpeedupOnDodge; // Offset: 0x4c
    float maxSpeedForRangeBoost; // Offset: 0x50
    float minSpeedForRangeBoost; // Offset: 0x54
    float RangeBoostForSpeed; // Offset: 0x58
    uint8_t _pad_2[0x4]; // Offset: 0x5c
};

// Original name: DynArray_CraftingCost_Base
// Generated DynArray for base type: CraftingCost_Base
// Size: 0x8
struct DynArray_CraftingCost_Base {
    CraftingCost_Base* m_data; // Offset: 0x0
};

// Original name: SInitialDamage
// Size: 0x70
// VTable: 0x149a17760
struct SInitialDamage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t RandomSeed; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SInitialDamageSpecifierBase Damage; // Offset: 0x10
    Vec3 BoundingBoxScale; // Offset: 0x20
    float MaxDamageRatio; // Offset: 0x38
    int32_t MinHitCount; // Offset: 0x3c
    int32_t MaxHitCount; // Offset: 0x40
    float MinHitRadiusFraction; // Offset: 0x44
    float MaxHitRadiusFraction; // Offset: 0x48
    float HitDamageVariationFactor; // Offset: 0x4c
    float DamageMapDamageScale; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    DamageMapChannels DamageMapNoiseStrength; // Offset: 0x58
};

// Original name: ActorViewLimitPreset
// Size: 0x68
// VTable: 0x149aac600
struct ActorViewLimitPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ActorViewLimits lookLimits; // Offset: 0x18
    ActorViewLimits aimLimits; // Offset: 0x40
};

// Original name: ActorAimAndLookLimitsStateFilter
// Size: 0x98
// VTable: 0x149aac498
struct ActorAimAndLookLimitsStateFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ActorViewLimits aimLimits; // Offset: 0x48
    ActorViewLimits lookLimits; // Offset: 0x70
};

// Original name: ActorLookLimitsStateFilter
// Size: 0x70
// VTable: 0x149aac410
struct ActorLookLimitsStateFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ActorViewLimits lookLimits; // Offset: 0x48
};

// Original name: ActorAimLimitsStateFilter
// Size: 0x70
// VTable: 0x149aac3b0
struct ActorAimLimitsStateFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ActorViewLimits aimLimits; // Offset: 0x48
};

// Original name: DynArray_RGBA8
// Generated DynArray for base type: RGBA8
// Size: 0x8
struct DynArray_RGBA8 {
    RGBA8* m_data; // Offset: 0x0
};

// Original name: TaggedSubHarvestableConfig
// Size: 0x38
// VTable: 0x1499efb90
struct TaggedSubHarvestableConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    HarvestableTagListBase tagList; // Offset: 0x18
    SubHarvestableConfigSingleBase subConfig; // Offset: 0x28
};

// Original name: SInventoryParams
// Size: 0x28
// VTable: 0x14999eec0
struct SInventoryParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SBaseCargoUnit capacity; // Offset: 0x18
};

// Original name: InventoryClosedContainerType
// Size: 0x18
// VTable: 0x149a9e070
struct InventoryClosedContainerType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SBaseCargoUnit capacity; // Offset: 0x8
};

// Original name: DefaultActionsEntityEntryConditionDef_InventoryContainerCapacity
// Size: 0x28
// VTable: 0x149a8be98
struct DefaultActionsEntityEntryConditionDef_InventoryContainerCapacity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SBaseCargoUnit minCapacity; // Offset: 0x8
    SBaseCargoUnit maxCapacity; // Offset: 0x18
};

// Original name: DynArray_SEntityTraversingExecuteNodeBase
// Generated DynArray for base type: SEntityTraversingExecuteNodeBase
// Size: 0x8
struct DynArray_SEntityTraversingExecuteNodeBase {
    SEntityTraversingExecuteNodeBase* m_data; // Offset: 0x0
};

// Original name: DynArray_HandholdGripType
// Generated DynArray for base type: HandholdGripType
// Size: 0x8
struct DynArray_HandholdGripType {
    HandholdGripType* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_TriggerBase
// Generated DynArray for base type: BuildingBlocks_TriggerBase
// Size: 0x8
struct DynArray_BuildingBlocks_TriggerBase {
    BuildingBlocks_TriggerBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SEnergyPipeDefinition
// Generated DynArray for base type: SEnergyPipeDefinition
// Size: 0x8
struct DynArray_SEnergyPipeDefinition {
    SEnergyPipeDefinition* m_data; // Offset: 0x0
};

// Original name: DynArray_AnimationGraph_KeyFrame
// Generated DynArray for base type: AnimationGraph_KeyFrame
// Size: 0x8
struct DynArray_AnimationGraph_KeyFrame {
    AnimationGraph_KeyFrame* m_data; // Offset: 0x0
};

// Original name: EnvironmentTemperatureParams
// Size: 0x38
// VTable: 0x149a3d120
struct EnvironmentTemperatureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float bodyDefaultMinTemperatureThreshold; // Offset: 0x8
    float bodyDefaultMaxTemperatureThreshold; // Offset: 0xc
    float suitTempLossRateModifier; // Offset: 0x10
    float bodyTempIncreaseRateModifier; // Offset: 0x14
    float bodyTempDecreaseRateModifier; // Offset: 0x18
    float suitTempRegenRateModifier; // Offset: 0x1c
    float bodyTempRegenRateModifier; // Offset: 0x20
    float minRegenRate; // Offset: 0x24
    TemperatureUIParams temperatureUIParams; // Offset: 0x28
};

// Original name: DynArray_SStatusTriggerThresholdLevelModifier
// Generated DynArray for base type: SStatusTriggerThresholdLevelModifier
// Size: 0x8
struct DynArray_SStatusTriggerThresholdLevelModifier {
    SStatusTriggerThresholdLevelModifier* m_data; // Offset: 0x0
};

// Original name: DynArray_SHackingCodeErrorEntry
// Generated DynArray for base type: SHackingCodeErrorEntry
// Size: 0x8
struct DynArray_SHackingCodeErrorEntry {
    SHackingCodeErrorEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorLocomotionFidgetSeverityParams
// Generated DynArray for base type: SActorLocomotionFidgetSeverityParams
// Size: 0x8
struct DynArray_SActorLocomotionFidgetSeverityParams {
    SActorLocomotionFidgetSeverityParams* m_data; // Offset: 0x0
};

// Original name: DynArray_Investigation_Clue
// Generated DynArray for base type: Investigation_Clue
// Size: 0x8
struct DynArray_Investigation_Clue {
    Investigation_Clue* m_data; // Offset: 0x0
};

// Original name: CraftingBlueprintRecord
// Size: 0x18
// VTable: 0x1499b8f90
struct CraftingBlueprintRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingBlueprint_Base_NonRef blueprint; // Offset: 0x8
};

// Original name: AnimationScalarVariable
// Size: 0x40
// VTable: 0x1499a26b0
struct AnimationScalarVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Range range; // Offset: 0x18
    float defaultValue; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    AnimationVariableInterpolation defaultInterpolation; // Offset: 0x30
};

// Original name: AnimationPlayerInputVariable
// Size: 0x40
// VTable: 0x1499a26c0
struct AnimationPlayerInputVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Range range; // Offset: 0x18
    float defaultValue; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    AnimationVariableInterpolation defaultInterpolation; // Offset: 0x30
};

// Original name: AnimationFloatVariable
// Size: 0x40
// VTable: 0x1499a26b8
struct AnimationFloatVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Range range; // Offset: 0x18
    float defaultValue; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    AnimationVariableInterpolation defaultInterpolation; // Offset: 0x30
};

// Original name: AnimationVariable
// Size: 0x40
// VTable: 0x1499a26a8
struct AnimationVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Range range; // Offset: 0x18
    float defaultValue; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    AnimationVariableInterpolation defaultInterpolation; // Offset: 0x30
};

// Original name: DynArray_SScoreEvent
// Generated DynArray for base type: SScoreEvent
// Size: 0x8
struct DynArray_SScoreEvent {
    SScoreEvent* m_data; // Offset: 0x0
};

// Original name: DynArray_RemovableChipValue
// Generated DynArray for base type: RemovableChipValue
// Size: 0x8
struct DynArray_RemovableChipValue {
    RemovableChipValue* m_data; // Offset: 0x0
};

// Original name: EntityUIDisplayParams
// Size: 0x68
// VTable: 0x149a8ad90
struct EntityUIDisplayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CLocIdentifier* displayDescription; // Offset: 0x10
    CryStringT* displayThumbnail; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* displayImage; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* displayIcon; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    CryStringT* sortString; // Offset: 0x48
    uint8_t _pad_4[0x8]; // Offset: 0x50
    SObjectDataBankEntryTrackerParams trackerProperties; // Offset: 0x58
};

// Original name: DynArray_CommodityType
// Generated DynArray for base type: CommodityType
// Size: 0x8
struct DynArray_CommodityType {
    CommodityType* m_data; // Offset: 0x0
};

// Original name: SEAGameFeedParams
// Size: 0x6f8
// VTable: 0x149a1f548
struct SEAGameFeedParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float lifetime; // Offset: 0x18
    int32_t maxAmountOfMessages; // Offset: 0x1c
    CryStringT* messageQueueIdentifier; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float fadeoutTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    SEAGameFeedEventParams genericEvent; // Offset: 0x38
    SEAGameFeedEventParams suicideEvent; // Offset: 0x80
    SEAGameFeedEventParams collisionEvent; // Offset: 0xc8
    SEAGameFeedEventParams vehicleExplosionEvent; // Offset: 0x110
    SEAGameFeedEventParams vehicleWeaponKillEvent; // Offset: 0x158
    SEAGameFeedEventParams weaponKillEvent; // Offset: 0x1a0
    SEAGameFeedEventParams headshotKillEvent; // Offset: 0x1e8
    SEAGameFeedEventParams grenadeKillEvent; // Offset: 0x230
    SEAGameFeedEventParams meleeEvent; // Offset: 0x278
    SEAGameFeedEventParams crashEvent; // Offset: 0x2c0
    SEAGameFeedEventParams takeDownEvent; // Offset: 0x308
    SEAGameFeedEventParams punishEvent; // Offset: 0x350
    SEAGameFeedEventParams normalEvent; // Offset: 0x398
    SEAGameFeedEventParams fireEvent; // Offset: 0x3e0
    SEAGameFeedEventParams damageEvent; // Offset: 0x428
    SEAGameFeedEventParams bleedOutEvent; // Offset: 0x470
    SEAGameFeedEventParams electricEvent; // Offset: 0x4b8
    SEAGameFeedEventParams repairEvent; // Offset: 0x500
    SEAGameFeedEventParams suffocateEvent; // Offset: 0x548
    SEAGameFeedEventParams boundaryViolationEvent; // Offset: 0x590
    SEAGameFeedEventParams drownEvent; // Offset: 0x5d8
    SEAGameFeedEventParams damageOverTimeEvent; // Offset: 0x620
    SEAGameFeedEventParams hazardEvent; // Offset: 0x668
    SEAGameFeedEventParams extractionEvent; // Offset: 0x6b0
};

// Original name: SMisfireEventParams
// Size: 0x30
// VTable: 0x149a08060
struct SMisfireEventParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* warningLocId; // Offset: 0x8
    float duration; // Offset: 0x10
    float ageRatioInflicted; // Offset: 0x14
    float healthRatioInflicted; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    SItemMisfireParams ItemParams; // Offset: 0x20
};

// Original name: BuildingBlocks_BindingsNumberWaveform
// Size: 0x88
// VTable: 0x149988b48
struct BuildingBlocks_BindingsNumberWaveform {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    float frequency; // Offset: 0x50
    float offset; // Offset: 0x54
    float min; // Offset: 0x58
    float max; // Offset: 0x5c
    float rangeLow; // Offset: 0x60
    float rangeHigh; // Offset: 0x64
    BindingsOperations_WaveformShapeBase shape; // Offset: 0x68
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x78
};

// Original name: SUIWarningGameplayTrigger
// Size: 0x18
// VTable: 0x1499fb240
struct SUIWarningGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TriggeredMessage warning; // Offset: 0x8
};

// Original name: DynArray_AbstractMissionInitParam
// Generated DynArray for base type: AbstractMissionInitParam
// Size: 0x8
struct DynArray_AbstractMissionInitParam {
    AbstractMissionInitParam* m_data; // Offset: 0x0
};

// Original name: DynArray_ActorMovementSetTransition
// Generated DynArray for base type: ActorMovementSetTransition
// Size: 0x8
struct DynArray_ActorMovementSetTransition {
    ActorMovementSetTransition* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioSignalRtpc
// Generated DynArray for base type: AudioSignalRtpc
// Size: 0x8
struct DynArray_AudioSignalRtpc {
    AudioSignalRtpc* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_PrimitiveSettings
// Size: 0x50
// VTable: 0x149984c20
struct BuildingBlocks_PrimitiveSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* primitiveMaterialPath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec2 UVStart; // Offset: 0x18
    Vec2 UVSize; // Offset: 0x28
    bool isUValuePerPixel; // Offset: 0x38
    bool isVValuePerPixel; // Offset: 0x39
    bool isGrouped; // Offset: 0x3a
    uint8_t _pad_2[0x5]; // Offset: 0x3b
    BuildingBlocks_PrimitiveVisualState visualState; // Offset: 0x40
};

// Original name: DynArray_AIVisualFieldParams
// Generated DynArray for base type: AIVisualFieldParams
// Size: 0x8
struct DynArray_AIVisualFieldParams {
    AIVisualFieldParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SChatChannelTypeBase
// Generated DynArray for base type: SChatChannelTypeBase
// Size: 0x8
struct DynArray_SChatChannelTypeBase {
    SChatChannelTypeBase* m_data; // Offset: 0x0
};

// Original name: MiningLaserModifiers
// Size: 0x80
// VTable: 0x1499f04a8
struct MiningLaserModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FloatModifier laserInstability; // Offset: 0x8
    FloatModifier optimalChargeWindowSizeModifier; // Offset: 0x18
    FloatModifier resistanceModifier; // Offset: 0x28
    FloatModifier shatterdamageModifier; // Offset: 0x38
    FloatModifier clusterFactorModifier; // Offset: 0x48
    FloatModifier optimalChargeWindowRateModifier; // Offset: 0x58
    bool isOptimalRateGood; // Offset: 0x68
    uint8_t _pad_1[0x7]; // Offset: 0x69
    FloatModifier catastrophicChargeWindowRateModifier; // Offset: 0x70
};

// Original name: MiningFilterParams
// Size: 0x18
// VTable: 0x1499f0500
struct MiningFilterParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FloatModifier filterModifier; // Offset: 0x8
};

// Original name: SSignaturesCategoryEntry
// Size: 0x30
// VTable: 0x1499e9bb0
struct SSignaturesCategoryEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType signatureType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    RadarSignatureCategoryEntry signatureCategory; // Offset: 0x10
    float signatureValue; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: DynArray_RadarSignatureCategoryEntry
// Generated DynArray for base type: RadarSignatureCategoryEntry
// Size: 0x8
struct DynArray_RadarSignatureCategoryEntry {
    RadarSignatureCategoryEntry* m_data; // Offset: 0x0
};

// Original name: HolographicVolumeParams
// Size: 0x78
// VTable: 0x1499d1bb8
struct HolographicVolumeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType holoVolumeType; // Offset: 0x18
    ARDataType holoRenderType; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
    float objectFadeDist; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    HolographicVolumeSphereParams sphereVolume; // Offset: 0x28
    HolographicVolumeCubeParams cubeVolume; // Offset: 0x38
    bool controlledByComms; // Offset: 0x50
    uint8_t _pad_3[0x7]; // Offset: 0x51
    VisualStateParams visualState; // Offset: 0x58
    bool enableSSDO; // Offset: 0x70
    bool enableSubsurfaceScattering; // Offset: 0x71
    bool enableTAA; // Offset: 0x72
    uint8_t _pad_4[0x5]; // Offset: 0x73
};

// Original name: DynArray_SItemPortRuleDef
// Generated DynArray for base type: SItemPortRuleDef
// Size: 0x8
struct DynArray_SItemPortRuleDef {
    SItemPortRuleDef* m_data; // Offset: 0x0
};

// Original name: DynArray_Marker_ShowRule
// Generated DynArray for base type: Marker_ShowRule
// Size: 0x8
struct DynArray_Marker_ShowRule {
    Marker_ShowRule* m_data; // Offset: 0x0
};

// Original name: LootConstraints
// Size: 0x38
// VTable: 0x1499b4150
struct LootConstraints {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FloatFactorRange fullnessFactorRange; // Offset: 0x8
    int32_t totalResultsLimit; // Offset: 0x18
    float chanceToGenerate; // Offset: 0x1c
    float chanceToGenerateAdditionalAttachedInventories; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    AdvancedLootConstraints advanced; // Offset: 0x28
};

// Original name: ActionRuleDisplayParams
// Size: 0x20
// VTable: 0x149a99728
struct ActionRuleDisplayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool exclusiveDisplay; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    BlockedTextParams blockedText; // Offset: 0x10
};

// Original name: SDisruptionGameplayTrigger
// Size: 0x18
// VTable: 0x1499c11c0
struct SDisruptionGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SDisruptionGameplayTriggerType disruptionTriggerType; // Offset: 0x8
};

// Original name: FunctionalityModifiers
// Size: 0x28
// VTable: 0x1499a7938
struct FunctionalityModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FunctionalityModifierBase damageFunctionalityModifierParams; // Offset: 0x8
    FunctionalityModifierBase degradationFunctionalityModifierParams; // Offset: 0x18
};

// Original name: DynArray_ResourceRangeParams
// Generated DynArray for base type: ResourceRangeParams
// Size: 0x8
struct DynArray_ResourceRangeParams {
    ResourceRangeParams* m_data; // Offset: 0x0
};

// Original name: DynArray_FloatUserVariableTask
// Generated DynArray for base type: FloatUserVariableTask
// Size: 0x8
struct DynArray_FloatUserVariableTask {
    FloatUserVariableTask* m_data; // Offset: 0x0
};

// Original name: ConversationNode_BaseNext
// Size: 0x18
// VTable: 0x149a8cfa0
struct ConversationNode_BaseNext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConversationNode_Base next; // Offset: 0x8
};

// Original name: ConversationNode_VariableGameToken
// Size: 0x28
// VTable: 0x149a8d0e0
struct ConversationNode_VariableGameToken {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConversationNode_Base next; // Offset: 0x8
    CryStringT* setVariable; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: ConversationNode_Start
// Size: 0x18
// VTable: 0x149a8cfa8
struct ConversationNode_Start {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConversationNode_Base next; // Offset: 0x8
};

// Original name: ConversationNode_ConditionalGameToken
// Size: 0x28
// VTable: 0x149a8d080
struct ConversationNode_ConditionalGameToken {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConversationNode_Base next; // Offset: 0x8
    CryStringT* condition; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: ConversationNode_FlowGraphEvent
// Size: 0x40
// VTable: 0x149a8d2f0
struct ConversationNode_FlowGraphEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConversationNode_Base next; // Offset: 0x8
    CryStringT* name; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* value; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    bool waitForDone; // Offset: 0x38
    uint8_t _pad_3[0x7]; // Offset: 0x39
};

// Original name: ConversationNode_Wait
// Size: 0x20
// VTable: 0x149a8d350
struct ConversationNode_Wait {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConversationNode_Base next; // Offset: 0x8
    float waitTime; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: DynArray_ConversationNode_Base
// Generated DynArray for base type: ConversationNode_Base
// Size: 0x8
struct DynArray_ConversationNode_Base {
    ConversationNode_Base* m_data; // Offset: 0x0
};

// Original name: DynArray_EventDispatcher
// Generated DynArray for base type: EventDispatcher
// Size: 0x8
struct DynArray_EventDispatcher {
    EventDispatcher* m_data; // Offset: 0x0
};

// Original name: DynArray_InnerThought_CycleAnimBase
// Generated DynArray for base type: InnerThought_CycleAnimBase
// Size: 0x8
struct DynArray_InnerThought_CycleAnimBase {
    InnerThought_CycleAnimBase* m_data; // Offset: 0x0
};

// Original name: DynArray_LoadoutInfo
// Generated DynArray for base type: LoadoutInfo
// Size: 0x8
struct DynArray_LoadoutInfo {
    LoadoutInfo* m_data; // Offset: 0x0
};

// Original name: CommsNotificationSelector
// Size: 0x28
// VTable: 0x14996ea98
struct CommsNotificationSelector {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType trigger; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    ObjectivePropertyBase communicationTags; // Offset: 0x10
    ARDataType commsTiming; // Offset: 0x20
    float delay; // Offset: 0x24
};

// Original name: HaulingOrderBase
// Size: 0x28
// VTable: 0x14996e1e8
struct HaulingOrderBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectivePropertyBase pickUpLocation; // Offset: 0x8
    ObjectivePropertyBase dropOffLocation; // Offset: 0x18
};

// Original name: MissionFlowCondition_PropertyIsSet
// Size: 0x18
// VTable: 0x149970180
struct MissionFlowCondition_PropertyIsSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectivePropertyBase property; // Offset: 0x8
};

// Original name: DynArray_ObjectivePropertyBase
// Generated DynArray for base type: ObjectivePropertyBase
// Size: 0x8
struct DynArray_ObjectivePropertyBase {
    ObjectivePropertyBase* m_data; // Offset: 0x0
};

// Original name: DynArray_ScoreMessage
// Generated DynArray for base type: ScoreMessage
// Size: 0x8
struct DynArray_ScoreMessage {
    ScoreMessage* m_data; // Offset: 0x0
};

// Original name: DynArray_SMatchNetworkTypeParams
// Generated DynArray for base type: SMatchNetworkTypeParams
// Size: 0x8
struct DynArray_SMatchNetworkTypeParams {
    SMatchNetworkTypeParams* m_data; // Offset: 0x0
};

// Original name: DynArray_LongTermPersistenceWhiteListSubTypeEntry
// Generated DynArray for base type: LongTermPersistenceWhiteListSubTypeEntry
// Size: 0x8
struct DynArray_LongTermPersistenceWhiteListSubTypeEntry {
    LongTermPersistenceWhiteListSubTypeEntry* m_data; // Offset: 0x0
};

// Original name: LongTermPersistenceWhiteListEntry
// Size: 0x20
// VTable: 0x1499b9c68
struct LongTermPersistenceWhiteListEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType ItemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    LongTermPersistenceSubTypeListOption SubTypeListOption; // Offset: 0x10
};

// Original name: DynArray_PlayerChoice_InteractionModifier
// Generated DynArray for base type: PlayerChoice_InteractionModifier
// Size: 0x8
struct DynArray_PlayerChoice_InteractionModifier {
    PlayerChoice_InteractionModifier* m_data; // Offset: 0x0
};

// Original name: DynArray_OrbitEntityCinematicEvent
// Generated DynArray for base type: OrbitEntityCinematicEvent
// Size: 0x8
struct DynArray_OrbitEntityCinematicEvent {
    OrbitEntityCinematicEvent* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerItemActionTask
// Generated DynArray for base type: SSequencerItemActionTask
// Size: 0x8
struct DynArray_SSequencerItemActionTask {
    SSequencerItemActionTask* m_data; // Offset: 0x0
};

// Original name: PersonalThoughtInventoryMenu
// Size: 0x48
// VTable: 0x149a99dd8
struct PersonalThoughtInventoryMenu {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    InputAction inputAction; // Offset: 0x18
};

// Original name: PersonalThoughtAction
// Size: 0x48
// VTable: 0x149a99d10
struct PersonalThoughtAction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    InputAction inputAction; // Offset: 0x18
};

// Original name: PersonalThoughtActionDescription
// Size: 0x40
// VTable: 0x149a99b78
struct PersonalThoughtActionDescription {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputAction inputAction; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x38
};

// Original name: DefaultAction_ActionDef
// Size: 0x40
// VTable: 0x149a8b6d8
struct DefaultAction_ActionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputAction name; // Offset: 0x8
    bool trigger; // Offset: 0x38
    uint8_t _pad_1[0x7]; // Offset: 0x39
};

// Original name: AnimatedAction
// Size: 0x40
// VTable: 0x149a8c238
struct AnimatedAction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputAction name; // Offset: 0x8
    ARDataType playerActionAnimType; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: PersonalThoughtPlayerItem
// Size: 0x50
// VTable: 0x149a9b4f8
struct PersonalThoughtPlayerItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    InputAction inputAction; // Offset: 0x18
    ARDataType type_; /* type */ // Offset: 0x48
    ARDataType subType; // Offset: 0x4c
};

// Original name: QuickAccessWheelActionDef
// Size: 0x50
// VTable: 0x149a9acf8
struct QuickAccessWheelActionDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool openContextMenuAsFolder; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    InputAction inputAction; // Offset: 0x10
    CryStringT* iconPathOverride; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
};

// Original name: QuickAccessWheelActionStateDef
// Size: 0x68
// VTable: 0x149a9ada0
struct QuickAccessWheelActionStateDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool openContextMenuAsFolder; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    InputAction inputAction; // Offset: 0x10
    CryStringT* actionStateName; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    CryStringT* iconPathOverride; // Offset: 0x50
    uint8_t _pad_3[0x10]; // Offset: 0x58
};

// Original name: DynArray_InputAction
// Generated DynArray for base type: InputAction
// Size: 0x8
struct DynArray_InputAction {
    InputAction* m_data; // Offset: 0x0
};

// Original name: SMisfireGenerationParams
// Size: 0x70
// VTable: 0x149a07f58
struct SMisfireGenerationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxWindowLength; // Offset: 0x8
    float minWindowLength; // Offset: 0xc
    SMisfireSeverityFactors severityFactors; // Offset: 0x10
    SMisfireBandParams minorBand; // Offset: 0x28
    SMisfireBandParams majorBand; // Offset: 0x40
    SMisfireBandParams criticalBand; // Offset: 0x58
};

// Original name: CameraDockingConfig
// Size: 0x60
// VTable: 0x149a59338
struct CameraDockingConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
};

// Original name: CameraViewFirstPersonSpectatorParams
// Size: 0x60
// VTable: 0x149a00c50
struct CameraViewFirstPersonSpectatorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
};

// Original name: CameraBaseConfig
// Size: 0x60
// VTable: 0x1499b2b20
struct CameraBaseConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
};

// Original name: CameraSimple3PConfig
// Size: 0x60
// VTable: 0x149a01008
struct CameraSimple3PConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
};

// Original name: CameraTrackviewConfig
// Size: 0x60
// VTable: 0x149a017d8
struct CameraTrackviewConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
};

// Original name: DynArray_PostureData
// Generated DynArray for base type: PostureData
// Size: 0x8
struct DynArray_PostureData {
    PostureData* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAObjectiveMarkerStateSettings
// Generated DynArray for base type: SEAObjectiveMarkerStateSettings
// Size: 0x8
struct DynArray_SEAObjectiveMarkerStateSettings {
    SEAObjectiveMarkerStateSettings* m_data; // Offset: 0x0
};

// Original name: DynArray_UIStateColor_Threshold
// Generated DynArray for base type: UIStateColor_Threshold
// Size: 0x8
struct DynArray_UIStateColor_Threshold {
    UIStateColor_Threshold* m_data; // Offset: 0x0
};

// Original name: DynArray_SReputationContextBBEntityListParams
// Generated DynArray for base type: SReputationContextBBEntityListParams
// Size: 0x8
struct DynArray_SReputationContextBBEntityListParams {
    SReputationContextBBEntityListParams* m_data; // Offset: 0x0
};

// Original name: MarkerTrackingCommonMapParameters
// Size: 0x60
// VTable: 0x149a48c88
struct MarkerTrackingCommonMapParameters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minimumDistanceMultiplierCosmeticScaling; // Offset: 0x8
    float maximumDistanceMultiplierCosmeticScaling; // Offset: 0xc
    float cosmeticScalingSmoothingDistanceMultiplier; // Offset: 0x10
    float framingRatioOfScreenSize; // Offset: 0x14
    float focusZoomDistanceMultiplier; // Offset: 0x18
    float childlessMarkerRadiusMultiplier; // Offset: 0x1c
    float lightScaleModifier; // Offset: 0x20
    float zoomIncrement; // Offset: 0x24
    float cameraBlendTimeInSeconds; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    MarkerTrackingLabelParameters labelParams; // Offset: 0x30
};

// Original name: SCItemAttachableObjectContainerParams
// Size: 0x30
// VTable: 0x1499f17a0
struct SCItemAttachableObjectContainerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceObjectContainer objectContainer; // Offset: 0x18
};

// Original name: SActorProceduralAimRecoilCurveModifiersDef
// Size: 0x78
// VTable: 0x149a719d0
struct SActorProceduralAimRecoilCurveModifiersDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float yawMaxDegreesModifier; // Offset: 0x8
    float pitchMaxDegreesModifier; // Offset: 0xc
    float rollMaxDegreesModifier; // Offset: 0x10
    float maxFireTimeModifier; // Offset: 0x14
    float recoilSmoothTimeModifier; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 minLimitsModifier; // Offset: 0x20
    Vec3 maxLimitsModifier; // Offset: 0x38
    float decayStartTimeModifier; // Offset: 0x50
    float minDecayTimeModifier; // Offset: 0x54
    float maxDecayTimeModifier; // Offset: 0x58
    uint8_t _pad_2[0x4]; // Offset: 0x5c
    SActorProceduralAimRecoilCurveNoiseModifiersDef noiseCurvesModifier; // Offset: 0x60
};

// Original name: DynArray_ItemResourceNetworkTypeUIData
// Generated DynArray for base type: ItemResourceNetworkTypeUIData
// Size: 0x8
struct DynArray_ItemResourceNetworkTypeUIData {
    ItemResourceNetworkTypeUIData* m_data; // Offset: 0x0
};

// Original name: DynArray_EntitlementItemType
// Generated DynArray for base type: EntitlementItemType
// Size: 0x8
struct DynArray_EntitlementItemType {
    EntitlementItemType* m_data; // Offset: 0x0
};

// Original name: DynArray_ArmouryItemStat
// Generated DynArray for base type: ArmouryItemStat
// Size: 0x8
struct DynArray_ArmouryItemStat {
    ArmouryItemStat* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemAwardWeightingsBase
// Generated DynArray for base type: ItemAwardWeightingsBase
// Size: 0x8
struct DynArray_ItemAwardWeightingsBase {
    ItemAwardWeightingsBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SSalvageRepairItemTypeLocalizationPair
// Generated DynArray for base type: SSalvageRepairItemTypeLocalizationPair
// Size: 0x8
struct DynArray_SSalvageRepairItemTypeLocalizationPair {
    SSalvageRepairItemTypeLocalizationPair* m_data; // Offset: 0x0
};

// Original name: DynArray_SShieldResistance
// Generated DynArray for base type: SShieldResistance
// Size: 0x8
struct DynArray_SShieldResistance {
    SShieldResistance* m_data; // Offset: 0x0
};

// Original name: CargoLoadingNotificationParams
// Size: 0x38
// VTable: 0x149a75070
struct CargoLoadingNotificationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* message; // Offset: 0x8
    float screenTimer; // Offset: 0x10
    float hurryScreenTimer; // Offset: 0x14
    bool disabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    GameNotificationDockItemParams dockNotificationParamsOverride; // Offset: 0x20
};

// Original name: ServiceBeaconNotificationParams
// Size: 0x38
// VTable: 0x149aae960
struct ServiceBeaconNotificationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* message; // Offset: 0x8
    float screenTimer; // Offset: 0x10
    float hurryScreenTimer; // Offset: 0x14
    bool blocking; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    GameNotificationDockItemParams dockNotificationParamsOverride; // Offset: 0x20
};

// Original name: PlayerDockContextComponentGlobalParams
// Size: 0x20
// VTable: 0x149aa92f0
struct PlayerDockContextComponentGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GameNotificationDockItemParams gameNotificationDockItemParams; // Offset: 0x8
};

// Original name: RadiationState
// Size: 0x48
// VTable: 0x14997ace0
struct RadiationState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType distortionMod; // Offset: 0x8
    float distortion; // Offset: 0xc
    RadiationStatePropertyParams IR; // Offset: 0x10
    RadiationStatePropertyParams EM; // Offset: 0x20
    RadiationStatePropertyParams CS; // Offset: 0x30
    ARDataType hazardousRadiationMod; // Offset: 0x40
    float hazardousRadiationRate; // Offset: 0x44
};

// Original name: RadiationStateTemplateInternal
// Size: 0x48
// VTable: 0x14997ace8
struct RadiationStateTemplateInternal {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType distortionMod; // Offset: 0x8
    float distortion; // Offset: 0xc
    RadiationStatePropertyParams IR; // Offset: 0x10
    RadiationStatePropertyParams EM; // Offset: 0x20
    RadiationStatePropertyParams CS; // Offset: 0x30
    ARDataType hazardousRadiationMod; // Offset: 0x40
    float hazardousRadiationRate; // Offset: 0x44
};

// Original name: DynArray_ActivityDataRecord
// Generated DynArray for base type: ActivityDataRecord
// Size: 0x8
struct DynArray_ActivityDataRecord {
    ActivityDataRecord* m_data; // Offset: 0x0
};

// Original name: SEntityArticulatedPhysicsControllerParams
// Size: 0x60
// VTable: 0x1499e6998
struct SEntityArticulatedPhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
    bool IsRagdoll; // Offset: 0x30
    uint8_t _pad_2[0x3]; // Offset: 0x31
    float Stiffness; // Offset: 0x34
    float MaxTimeStep; // Offset: 0x38
    int32_t MaxLoggedCollisions; // Offset: 0x3c
    float SleepSpeed; // Offset: 0x40
    float Damping; // Offset: 0x44
    float DampingFreefall; // Offset: 0x48
    int32_t LyingModeNColls; // Offset: 0x4c
    float LyingDamping; // Offset: 0x50
    float LyingSleepSpeed; // Offset: 0x54
    bool Resting; // Offset: 0x58
    uint8_t _pad_3[0x3]; // Offset: 0x59
    ARDataType aiNavigationType; // Offset: 0x5c
};

// Original name: SEntityBasePhysicsControllerParams
// Size: 0x30
// VTable: 0x1499e6008
struct SEntityBasePhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
};

// Original name: SEntityStaticPhysicsControllerParams
// Size: 0x38
// VTable: 0x1499e69f0
struct SEntityStaticPhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
    ARDataType aiNavigationType; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: SEntitySoftExPhysicsControllerParams
// Size: 0xb8
// VTable: 0x1499e7790
struct SEntitySoftExPhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
    float damping; // Offset: 0x30
    float stretchStiffness; // Offset: 0x34
    float compressStiffness; // Offset: 0x38
    float bendingStiffness; // Offset: 0x3c
    float cosseratShearXStiffness; // Offset: 0x40
    float cosseratShearYStiffness; // Offset: 0x44
    float cosseratStretchStiffness; // Offset: 0x48
    float cosseratBendXStiffness; // Offset: 0x4c
    float cosseratBendYStiffness; // Offset: 0x50
    float cosseratTwistingStiffness; // Offset: 0x54
    float attachmentInfluence; // Offset: 0x58
    float maxDisplacementInfluence; // Offset: 0x5c
    float maxStretchAttach; // Offset: 0x60
    float tetraVolStiffness; // Offset: 0x64
    float collisionGap; // Offset: 0x68
    float collisionThicknessFactor; // Offset: 0x6c
    float staticFriction; // Offset: 0x70
    float dynamicFriction; // Offset: 0x74
    float fixedStep; // Offset: 0x78
    float totalMass; // Offset: 0x7c
    float relativeDeltaScale; // Offset: 0x80
    float bindingOffset; // Offset: 0x84
    bool enforceLength; // Offset: 0x88
    bool enforceBending; // Offset: 0x89
    bool enforceAttachment; // Offset: 0x8a
    bool enforceCosseratStrechShear; // Offset: 0x8b
    bool enforceCosseratBendTwist; // Offset: 0x8c
    bool enforceMaxDisplacement; // Offset: 0x8d
    bool enforceTetraVol; // Offset: 0x8e
    bool enableCollisions; // Offset: 0x8f
    bool enableFriction; // Offset: 0x90
    bool enableSelfCollision; // Offset: 0x91
    bool normalizeParticleSize; // Offset: 0x92
    bool maxDisplacementRestrictToPositiveHemisphere; // Offset: 0x93
    int32_t iterations; // Offset: 0x94
    int32_t gridDim; // Offset: 0x98
    float lift; // Offset: 0x9c
    float drag; // Offset: 0xa0
    float windVariance; // Offset: 0xa4
    float airResistance; // Offset: 0xa8
    float waterResistance; // Offset: 0xac
    ARDataType substepMode; // Offset: 0xb0
    ARDataType visualBindingMode; // Offset: 0xb4
};

// Original name: SEntitySoftDeprecatedPhysicsControllerParams
// Size: 0x70
// VTable: 0x1499e70a8
struct SEntitySoftDeprecatedPhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
    float damping; // Offset: 0x30
    float maxTimeStep; // Offset: 0x34
    int32_t maxIters; // Offset: 0x38
    float windVariance; // Offset: 0x3c
    float accuracy; // Offset: 0x40
    float impulseScale; // Offset: 0x44
    float explosionScale; // Offset: 0x48
    float sleepSpeed; // Offset: 0x4c
    float thickness; // Offset: 0x50
    float friction; // Offset: 0x54
    float hardness; // Offset: 0x58
    float airResistance; // Offset: 0x5c
    float waterResistance; // Offset: 0x60
    float massDecay; // Offset: 0x64
    bool collideWithTerrain; // Offset: 0x68
    bool collideWithStatics; // Offset: 0x69
    bool collideWithRigid; // Offset: 0x6a
    bool collideWithActors; // Offset: 0x6b
    uint8_t _pad_2[0x4]; // Offset: 0x6c
};

// Original name: SEntityActorPhysicsControllerParams
// Size: 0x130
// VTable: 0x149a6a1a8
struct SEntityActorPhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
    float stiffnessScale; // Offset: 0x30
    float airResistance; // Offset: 0x34
    float airControl; // Offset: 0x38
    float inertia; // Offset: 0x3c
    float inertiaAccel; // Offset: 0x40
    float maxVelGround; // Offset: 0x44
    float minSlideAngle; // Offset: 0x48
    float maxClimbAngle; // Offset: 0x4c
    float minFallAngle; // Offset: 0x50
    float timeImpulseRecover; // Offset: 0x54
    CryStringT* colliderMat; // Offset: 0x58
    uint8_t _pad_2[0x8]; // Offset: 0x60
    float minColSpeedForExternalForceEvent; // Offset: 0x68
    float minSpeedForChargeCollisionDamage; // Offset: 0x6c
    float chargeAttackDamage; // Offset: 0x70
    ARDataType initialPhysicalizationProfile; // Offset: 0x74
    ARDataType defaultHostedAEProfile; // Offset: 0x78
    uint8_t _pad_3[0x4]; // Offset: 0x7c
    Vec3 pivot; // Offset: 0x80
    Vec3 sizeCollider; // Offset: 0x98
    float heightCollider; // Offset: 0xb0
    uint8_t _pad_4[0x4]; // Offset: 0xb4
    Vec3 dirUnproj; // Offset: 0xb8
    float maxUnproj; // Offset: 0xd0
    int32_t bSkipUnproj; // Offset: 0xd4
    float groundContactEps; // Offset: 0xd8
    uint8_t _pad_5[0x4]; // Offset: 0xdc
    Vec3 groundTraceSpreadSizes; // Offset: 0xe0
    float geomScale; // Offset: 0xf8
    uint8_t _pad_6[0x4]; // Offset: 0xfc
    Vec3 capsuleAxis; // Offset: 0x100
    uint32_t upAlignMode; // Offset: 0x118
    uint8_t _pad_7[0x4]; // Offset: 0x11c
    SActorPhysicsCollisionParams collisionParams; // Offset: 0x120
};

// Original name: SEntityDummyPhysicsControllerParams
// Size: 0x38
// VTable: 0x1499e6a50
struct SEntityDummyPhysicsControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float Mass; // Offset: 0x8
    bool compoundingAllowed; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    SBreakablePhysicsParams breakableParams; // Offset: 0x10
    SGameCollisionClass gameCollisionClass; // Offset: 0x20
    ARDataType aiNavigationType; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
};

// Original name: CraftingMaterialStatEntry
// Size: 0x28
// VTable: 0x1499b9180
struct CraftingMaterialStatEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingMaterialStatTypeRecord statType; // Offset: 0x8
    int32_t min; // Offset: 0x20
    int32_t max; // Offset: 0x24
};

// Original name: DynArray_CraftingMaterialStatTypeRecord
// Generated DynArray for base type: CraftingMaterialStatTypeRecord
// Size: 0x8
struct DynArray_CraftingMaterialStatTypeRecord {
    CraftingMaterialStatTypeRecord* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemRadarSignatureDetection
// Generated DynArray for base type: SCItemRadarSignatureDetection
// Size: 0x8
struct DynArray_SCItemRadarSignatureDetection {
    SCItemRadarSignatureDetection* m_data; // Offset: 0x0
};

// Original name: DynArray_PlayerChoice_Option
// Generated DynArray for base type: PlayerChoice_Option
// Size: 0x8
struct DynArray_PlayerChoice_Option {
    PlayerChoice_Option* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerPlayerUsableTaskParams
// Generated DynArray for base type: SSequencerPlayerUsableTaskParams
// Size: 0x8
struct DynArray_SSequencerPlayerUsableTaskParams {
    SSequencerPlayerUsableTaskParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SEAActionItemMessageDef
// Generated DynArray for base type: SEAActionItemMessageDef
// Size: 0x8
struct DynArray_SEAActionItemMessageDef {
    SEAActionItemMessageDef* m_data; // Offset: 0x0
};

// Original name: BulletDamageDropParams
// Size: 0x38
// VTable: 0x149a17f80
struct BulletDamageDropParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageBase damageDropMinDistance; // Offset: 0x8
    DamageBase damageDropPerMeter; // Offset: 0x18
    DamageBase damageDropMinDamage; // Offset: 0x28
};

// Original name: HitBehaviorDamageOverTime
// Size: 0x28
// VTable: 0x1499c8dd0
struct HitBehaviorDamageOverTime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageBase damagePerSecond; // Offset: 0x8
    float duration; // Offset: 0x18
    float damagePeriod; // Offset: 0x1c
    bool ignoreShields; // Offset: 0x20
    bool applyToHealthPool; // Offset: 0x21
    uint8_t _pad_1[0x6]; // Offset: 0x22
};

// Original name: SWeaponActionFireBeamChainParams
// Size: 0x20
// VTable: 0x149a75b60
struct SWeaponActionFireBeamChainParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float jumpDistance; // Offset: 0x8
    int32_t maximumJumps; // Offset: 0xc
    DamageBase damagePerSecond; // Offset: 0x10
};

// Original name: SInitialDamageSpecifierFixed
// Size: 0x18
// VTable: 0x149a174f0
struct SInitialDamageSpecifierFixed {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageBase Damage; // Offset: 0x8
};

// Original name: HazardComponentParams
// Size: 0x58
// VTable: 0x149a2d288
struct HazardComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DamageBase damagePerHit; // Offset: 0x18
    DamageBase damageInShipScalar; // Offset: 0x28
    float damagePeriod; // Offset: 0x38
    bool ignoreShields; // Offset: 0x3c
    bool useRadialFalloff; // Offset: 0x3d
    uint8_t _pad_1[0x2]; // Offset: 0x3e
    float falloffStartRadius; // Offset: 0x40
    bool ignoreVerticalFalloff; // Offset: 0x44
    uint8_t _pad_2[0x3]; // Offset: 0x45
    SHazardAreaShapeParams hazardAreaShape; // Offset: 0x48
};

// Original name: SCItemVehicleArmorParams
// Size: 0x48
// VTable: 0x1499fbec0
struct SCItemVehicleArmorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float signalInfrared; // Offset: 0x18
    float signalElectromagnetic; // Offset: 0x1c
    float signalCrossSection; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    DamageBase damageMultiplier; // Offset: 0x28
    ArmorPenetrationResistanceParams armorPenetrationResistance; // Offset: 0x38
};

// Original name: SControlledEntityRopeAttachmentPair
// Size: 0x38
// VTable: 0x1499cf2d8
struct SControlledEntityRopeAttachmentPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityReferenceDef ropeEntity; // Offset: 0x8
    EntityReferenceDef attachedEntity; // Offset: 0x20
};

// Original name: SAutoCraneParams
// Size: 0x48
// VTable: 0x1499cfd38
struct SAutoCraneParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool autoCrane; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    EntityReferenceDef positionReference; // Offset: 0x10
    Vec3 aiCheckDirection; // Offset: 0x28
    float checkRadius; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: SControlledEntityStaticTransformParams
// Size: 0x48
// VTable: 0x1499cf4d0
struct SControlledEntityStaticTransformParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityReferenceDef targetTransform; // Offset: 0x8
    bool canLockPosition; // Offset: 0x20
    bool canLockRotation; // Offset: 0x21
    bool canLockScale; // Offset: 0x22
    uint8_t _pad_1[0x1]; // Offset: 0x23
    float movementSnapThreshold; // Offset: 0x24
    float rotationSnapThreshold; // Offset: 0x28
    float scaleSnapThreshold; // Offset: 0x2c
    float uiMaxDistance; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    CryStringT* uiIcon; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
};

// Original name: UsableGroupCoordinatorDataParams
// Size: 0x38
// VTable: 0x14996c7b8
struct UsableGroupCoordinatorDataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityReferenceDef usableGroupCoordinator; // Offset: 0x8
    EntityReferenceDef actionAreaTrigger; // Offset: 0x20
};

// Original name: SCharacterCustomizerClippingVolumeParams
// Size: 0x28
// VTable: 0x149a0cd90
struct SCharacterCustomizerClippingVolumeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityReferenceDef area; // Offset: 0x8
    float transitionTime; // Offset: 0x20
    float fadeDistance; // Offset: 0x24
};

// Original name: DynArray_EntityReferenceDef
// Generated DynArray for base type: EntityReferenceDef
// Size: 0x8
struct DynArray_EntityReferenceDef {
    EntityReferenceDef* m_data; // Offset: 0x0
};

// Original name: ActorSomaticShakeConfig
// Size: 0x60
// VTable: 0x1499ff400
struct ActorSomaticShakeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorStateFilter filter; // Offset: 0x8
    float weaponOffsetCm; // Offset: 0x50
    float weaponRotationAngle; // Offset: 0x54
    float armRotationAngle; // Offset: 0x58
    float handRotationAngle; // Offset: 0x5c
};

// Original name: DynArray_StarMapAsteroidRing
// Generated DynArray for base type: StarMapAsteroidRing
// Size: 0x8
struct DynArray_StarMapAsteroidRing {
    StarMapAsteroidRing* m_data; // Offset: 0x0
};

// Original name: ForceFeedbackEffect
// Size: 0x50
// VTable: 0x1499b4820
struct ForceFeedbackEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float time; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    ForceFeedbackMotor MotorAB; // Offset: 0x20
    ForceFeedbackMotor MotorA; // Offset: 0x30
    ForceFeedbackMotor MotorB; // Offset: 0x40
};

// Original name: DynArray_SAttachableEntityParams
// Generated DynArray for base type: SAttachableEntityParams
// Size: 0x8
struct DynArray_SAttachableEntityParams {
    SAttachableEntityParams* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioFootstepSurfaceMapping
// Generated DynArray for base type: AudioFootstepSurfaceMapping
// Size: 0x8
struct DynArray_AudioFootstepSurfaceMapping {
    AudioFootstepSurfaceMapping* m_data; // Offset: 0x0
};

// Original name: GasCloudOverrideVolumeParams
// Size: 0x90
// VTable: 0x1499cd268
struct GasCloudOverrideVolumeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType volumeType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    GasCloudOverrideSphereVolumeParams sphereVolume; // Offset: 0x20
    GasCloudOverrideCubeVolumeParams cubeVolume; // Offset: 0x30
    bool overrideAlbedo; // Offset: 0x50
    bool overrideLightLeak; // Offset: 0x51
    bool overrideDensity; // Offset: 0x52
    uint8_t _pad_2[0x5]; // Offset: 0x53
    RGB albedo; // Offset: 0x58
    RGB lightLeakColor; // Offset: 0x70
    float lightLeakScale; // Offset: 0x88
    float density; // Offset: 0x8c
};

// Original name: SVehiclePhysicsGridParams
// Size: 0x60
// VTable: 0x1499aab80
struct SVehiclePhysicsGridParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool inheritGravity; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 gravity; // Offset: 0x10
    ARDataType gridType; // Offset: 0x28
    float cellSize; // Offset: 0x2c
    bool gridPartsOnly; // Offset: 0x30
    bool portalExclusiveMode; // Offset: 0x31
    uint8_t _pad_2[0x6]; // Offset: 0x32
    CryStringT* voxelDataFile; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    GlobalResourceCGF physicsProxy; // Offset: 0x48
};

// Original name: AsteroidProcedural
// Size: 0x68
// VTable: 0x14999f060
struct AsteroidProcedural {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minScale; // Offset: 0x8
    float maxScale; // Offset: 0xc
    float minRotationSpeed; // Offset: 0x10
    float maxRotationSpeed; // Offset: 0x14
    float distributionA; // Offset: 0x18
    float distributionB; // Offset: 0x1c
    RGB tint; // Offset: 0x20
    GlobalResourceCGF mesh; // Offset: 0x38
    GlobalResourceMaterial material; // Offset: 0x50
};

// Original name: GeometryInstancer_Serialized
// Size: 0x88
// VTable: 0x14999e2f8
struct GeometryInstancer_Serialized {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t Version; // Offset: 0x8
    int32_t Flags; // Offset: 0xc
    GlobalResourceCGF Geometry; // Offset: 0x10
    GlobalResourceMaterial Material; // Offset: 0x28
    Vec3 MinAABB; // Offset: 0x40
    Vec3 MaxAABB; // Offset: 0x58
    int32_t EncodedSize; // Offset: 0x70
    uint8_t _pad_1[0x4]; // Offset: 0x74
    CryStringT* EncodedBase64; // Offset: 0x78
    uint8_t _pad_2[0x8]; // Offset: 0x80
};

// Original name: DynArray_SHideAmmoAttachmentParams
// Generated DynArray for base type: SHideAmmoAttachmentParams
// Size: 0x8
struct DynArray_SHideAmmoAttachmentParams {
    SHideAmmoAttachmentParams* m_data; // Offset: 0x0
};

// Original name: ThrusterGimbal
// Size: 0x80
// VTable: 0x149a1bea0
struct ThrusterGimbal {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isFlex; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    ThrusterGimbalAxis pitchAxis; // Offset: 0x10
    ThrusterGimbalAxis yawAxis; // Offset: 0x48
};

// Original name: SActorForceReactionFOVScaleConfig
// Size: 0x30
// VTable: 0x149a4c288
struct SActorForceReactionFOVScaleConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float adsZoomScaleFactor; // Offset: 0x8
    float FOVScaleAtMinImpulse; // Offset: 0xc
    float FOVScaleAtMaxImpulse; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    SActorForceReactionEnvelope envelope; // Offset: 0x18
};

// Original name: DynArray_SCharacterCustomizerDNAHeadParams
// Generated DynArray for base type: SCharacterCustomizerDNAHeadParams
// Size: 0x8
struct DynArray_SCharacterCustomizerDNAHeadParams {
    SCharacterCustomizerDNAHeadParams* m_data; // Offset: 0x0
};

// Original name: DynArray_S42FieldManualContentPiece
// Generated DynArray for base type: S42FieldManualContentPiece
// Size: 0x8
struct DynArray_S42FieldManualContentPiece {
    S42FieldManualContentPiece* m_data; // Offset: 0x0
};

// Original name: HandholdAttachmentTriggerParams
// Size: 0x90
// VTable: 0x149a035e8
struct HandholdAttachmentTriggerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* entityLinkName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* handholdName; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    HandholdAttachPointChoiceParams attachPointChoiceParams; // Offset: 0x38
    uint8_t _pad_4[0x48]; // Offset: 0x48
};

// Original name: DynArray_BuildingBlocks_ContextMenuItem
// Generated DynArray for base type: BuildingBlocks_ContextMenuItem
// Size: 0x8
struct DynArray_BuildingBlocks_ContextMenuItem {
    BuildingBlocks_ContextMenuItem* m_data; // Offset: 0x0
};

// Original name: DynArray_EAScoringAssistThreshold
// Generated DynArray for base type: EAScoringAssistThreshold
// Size: 0x8
struct DynArray_EAScoringAssistThreshold {
    EAScoringAssistThreshold* m_data; // Offset: 0x0
};

// Original name: DynArray_PlanetOceanAudioCheckpoint
// Generated DynArray for base type: PlanetOceanAudioCheckpoint
// Size: 0x8
struct DynArray_PlanetOceanAudioCheckpoint {
    PlanetOceanAudioCheckpoint* m_data; // Offset: 0x0
};

// Original name: DynArray_CraftingGameplayPropertyImplValueRange_Int
// Generated DynArray for base type: CraftingGameplayPropertyImplValueRange_Int
// Size: 0x8
struct DynArray_CraftingGameplayPropertyImplValueRange_Int {
    CraftingGameplayPropertyImplValueRange_Int* m_data; // Offset: 0x0
};

// Original name: SFaceHighlightingParams
// Size: 0x28
// VTable: 0x149a0d5e8
struct SFaceHighlightingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float wireFrameMaskPow; // Offset: 0x8
    float pulseSpeed; // Offset: 0xc
    bool highlightSymmetrical; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    SRGBA8 wireFrameColour; // Offset: 0x18
};

// Original name: BuildingBlocks_ColorSolid
// Size: 0x18
// VTable: 0x149982040
struct BuildingBlocks_ColorSolid {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SRGBA8 color; // Offset: 0x8
};

// Original name: BuildingBlocks_ComponentParameterInputColor
// Size: 0x20
// VTable: 0x14998aee0
struct BuildingBlocks_ComponentParameterInputColor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType parameter; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SRGBA8 color; // Offset: 0x10
};

// Original name: RTTSunlightParams
// Size: 0x48
// VTable: 0x149a22128
struct RTTSunlightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool applySunlight; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 sunPos; // Offset: 0x10
    SRGBA8 sunColor; // Offset: 0x28
    SRGBA8 ambientColor; // Offset: 0x38
};

// Original name: WorldDisplayEnvironmentColor_Custom
// Size: 0x18
// VTable: 0x149a30460
struct WorldDisplayEnvironmentColor_Custom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SRGBA8 color; // Offset: 0x8
};

// Original name: BuildingBlocks_BindingsColorComponentParameter
// Size: 0x80
// VTable: 0x1499813c0
struct BuildingBlocks_BindingsColorComponentParameter {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    CryStringT* name; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    ARDataType parameter; // Offset: 0x60
    uint8_t _pad_2[0x4]; // Offset: 0x64
    SRGBA8 defaultValue; // Offset: 0x68
    uint8_t _pad_3[0x8]; // Offset: 0x78
};

// Original name: SCharacterCustomizerMakeupChannelParams
// Size: 0x20
// VTable: 0x149a0c0d0
struct SCharacterCustomizerMakeupChannelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SRGBA8 color; // Offset: 0x8
    float smooth; // Offset: 0x18
    float metal; // Offset: 0x1c
};

// Original name: ItemKioskBrand
// Size: 0x38
// VTable: 0x1499f88e0
struct ItemKioskBrand {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* logoPath; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    SRGBA8 color; // Offset: 0x28
};

// Original name: LoadoutItemHighlightParams
// Size: 0x30
// VTable: 0x149aaa9b0
struct LoadoutItemHighlightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    SRGBA8 baseColor; // Offset: 0x10
    SRGBA8 highlightColor; // Offset: 0x20
};

// Original name: FireHazardSurfaceProperties
// Size: 0x58
// VTable: 0x14997c1b0
struct FireHazardSurfaceProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SRGBA8 albedoTintStart; // Offset: 0x8
    SRGBA8 albedoTintEnd; // Offset: 0x18
    SRGBA8 specularTint; // Offset: 0x28
    SRGBA8 smoothnessTint; // Offset: 0x38
    float edgesIntensity; // Offset: 0x48
    float embersIntensity; // Offset: 0x4c
    float burnSharpness; // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
};

// Original name: Flash_PaletteEntry
// Size: 0x28
// VTable: 0x149aa1378
struct Flash_PaletteEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SRGBA8 FlashColor; // Offset: 0x18
};

// Original name: SCItemDisplayScreenStateLightParams
// Size: 0x28
// VTable: 0x149a08a30
struct SCItemDisplayScreenStateLightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SRGBA8 color; // Offset: 0x8
    float intensity; // Offset: 0x18
    bool lightOn; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
    int32_t lightStyle; // Offset: 0x20
    float animationSpeed; // Offset: 0x24
};

// Original name: CommsNotificationStageLight
// Size: 0x70
// VTable: 0x149974f00
struct CommsNotificationStageLight {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
    Vec3 rotation; // Offset: 0x20
    float lightRadius; // Offset: 0x38
    float bulbRadius; // Offset: 0x3c
    float FOV; // Offset: 0x40
    float intensity; // Offset: 0x44
    bool visibleShadows; // Offset: 0x48
    uint8_t _pad_1[0x7]; // Offset: 0x49
    SRGBA8 color; // Offset: 0x50
    CryStringT* image; // Offset: 0x60
    uint8_t _pad_2[0x8]; // Offset: 0x68
};

// Original name: DynArray_SRGBA8
// Generated DynArray for base type: SRGBA8
// Size: 0x8
struct DynArray_SRGBA8 {
    SRGBA8* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerAnimationTaskParamsBase
// Generated DynArray for base type: SSequencerAnimationTaskParamsBase
// Size: 0x8
struct DynArray_SSequencerAnimationTaskParamsBase {
    SSequencerAnimationTaskParamsBase* m_data; // Offset: 0x0
};

// Original name: DynArray_LegacyCraftingRecipeDef_Base
// Generated DynArray for base type: LegacyCraftingRecipeDef_Base
// Size: 0x8
struct DynArray_LegacyCraftingRecipeDef_Base {
    LegacyCraftingRecipeDef_Base* m_data; // Offset: 0x0
};

// Original name: DynArray_ReputationComparisonRange
// Generated DynArray for base type: ReputationComparisonRange
// Size: 0x8
struct DynArray_ReputationComparisonRange {
    ReputationComparisonRange* m_data; // Offset: 0x0
};

// Original name: DynArray_SHackingCodeCommandParam
// Generated DynArray for base type: SHackingCodeCommandParam
// Size: 0x8
struct DynArray_SHackingCodeCommandParam {
    SHackingCodeCommandParam* m_data; // Offset: 0x0
};

// Original name: DynArray_ImpoundingDefinition
// Generated DynArray for base type: ImpoundingDefinition
// Size: 0x8
struct DynArray_ImpoundingDefinition {
    ImpoundingDefinition* m_data; // Offset: 0x0
};

// Original name: DynArray_SubItemScanStatusMappings
// Generated DynArray for base type: SubItemScanStatusMappings
// Size: 0x8
struct DynArray_SubItemScanStatusMappings {
    SubItemScanStatusMappings* m_data; // Offset: 0x0
};

// Original name: CraftingOptionalEntry
// Size: 0x28
// VTable: 0x1499b84f8
struct CraftingOptionalEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingCost_Base optionalCost; // Offset: 0x8
    CraftingOptionalEffect_Base effect; // Offset: 0x18
};

// Original name: DynArray_SSequencerUsableTask
// Generated DynArray for base type: SSequencerUsableTask
// Size: 0x8
struct DynArray_SSequencerUsableTask {
    SSequencerUsableTask* m_data; // Offset: 0x0
};

// Original name: ComponentMigration
// Size: 0x28
// VTable: 0x1499b0908
struct ComponentMigration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DataForgeComponentParams Source; // Offset: 0x8
    DataForgeComponentParams Target; // Offset: 0x18
};

// Original name: DynArray_DataForgeComponentParams
// Generated DynArray for base type: DataForgeComponentParams
// Size: 0x8
struct DynArray_DataForgeComponentParams {
    DataForgeComponentParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemObservableScreenViewParams
// Generated DynArray for base type: SCItemObservableScreenViewParams
// Size: 0x8
struct DynArray_SCItemObservableScreenViewParams {
    SCItemObservableScreenViewParams* m_data; // Offset: 0x0
};

// Original name: StatusEffectMultipleTrigger
// Size: 0x40
// VTable: 0x1499fcf30
struct StatusEffectMultipleTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statusEffectType; // Offset: 0x8
    float triggerMinThreshold; // Offset: 0xc
    float triggerMaxThreshold; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    StatusEffectValue value; // Offset: 0x18
    LinkedStatusEffectTrigger linkedStatTrigger; // Offset: 0x28
};

// Original name: StatusEffectTrigger
// Size: 0x28
// VTable: 0x1499fce28
struct StatusEffectTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statusEffectType; // Offset: 0x8
    float triggerMinThreshold; // Offset: 0xc
    float triggerMaxThreshold; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    StatusEffectValue value; // Offset: 0x18
};

// Original name: DynArray_Marker_ShowRuleMapDisplayMode
// Generated DynArray for base type: Marker_ShowRuleMapDisplayMode
// Size: 0x8
struct DynArray_Marker_ShowRuleMapDisplayMode {
    Marker_ShowRuleMapDisplayMode* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerCarryableTaskParams
// Generated DynArray for base type: SSequencerCarryableTaskParams
// Size: 0x8
struct DynArray_SSequencerCarryableTaskParams {
    SSequencerCarryableTaskParams* m_data; // Offset: 0x0
};

// Original name: DynArray_FriendlyFireReactionOverride
// Generated DynArray for base type: FriendlyFireReactionOverride
// Size: 0x8
struct DynArray_FriendlyFireReactionOverride {
    FriendlyFireReactionOverride* m_data; // Offset: 0x0
};

// Original name: DynArray_UnitTest_BaseTest
// Generated DynArray for base type: UnitTest_BaseTest
// Size: 0x8
struct DynArray_UnitTest_BaseTest {
    UnitTest_BaseTest* m_data; // Offset: 0x0
};

// Original name: ContractAutoFinishSettings
// Size: 0x30
// VTable: 0x149971038
struct ContractAutoFinishSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionDeadline contractDeadline; // Offset: 0x8
    bool failIfSentToPrison; // Offset: 0x28
    bool failIfBecameCriminal; // Offset: 0x29
    bool failIfLeavePrison; // Offset: 0x2a
    uint8_t _pad_1[0x5]; // Offset: 0x2b
};

// Original name: EntityComponentChatProviderParams
// Size: 0x30
// VTable: 0x1499f9a08
struct EntityComponentChatProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* allChannelText; // Offset: 0x18
    ChatProviderSettingsBase settings; // Offset: 0x20
};

// Original name: DynArray_ScanDisplayConditionBaseParams
// Generated DynArray for base type: ScanDisplayConditionBaseParams
// Size: 0x8
struct DynArray_ScanDisplayConditionBaseParams {
    ScanDisplayConditionBaseParams* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemThrottleParamsBase
// Generated DynArray for base type: ItemThrottleParamsBase
// Size: 0x8
struct DynArray_ItemThrottleParamsBase {
    ItemThrottleParamsBase* m_data; // Offset: 0x0
};

// Original name: NpcBreathingParams
// Size: 0x28
// VTable: 0x149a3cdd0
struct NpcBreathingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BreathVolumeParams breathVolumeParams; // Offset: 0x8
    float minStaminaVolumeRatio; // Offset: 0x18
    float maxStaminaVolumeRatio; // Offset: 0x1c
    float minStaminaBreathDuration; // Offset: 0x20
    float maxStaminaBreathDuration; // Offset: 0x24
};

// Original name: ScanDisplayInstanceParams
// Size: 0x28
// VTable: 0x1499c6d38
struct ScanDisplayInstanceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ScanDisplaySetupParams boxoutSetup; // Offset: 0x8
    ScanDisplaySetupParams displaySetup; // Offset: 0x18
};

// Original name: DynArray_SMFD
// Generated DynArray for base type: SMFD
// Size: 0x8
struct DynArray_SMFD {
    SMFD* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioBreathStyleCondition
// Generated DynArray for base type: AudioBreathStyleCondition
// Size: 0x8
struct DynArray_AudioBreathStyleCondition {
    AudioBreathStyleCondition* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemResourceDeltaBase
// Generated DynArray for base type: ItemResourceDeltaBase
// Size: 0x8
struct DynArray_ItemResourceDeltaBase {
    ItemResourceDeltaBase* m_data; // Offset: 0x0
};

// Original name: ControlHintCondition_NOT
// Size: 0x18
// VTable: 0x149a65b70
struct ControlHintCondition_NOT {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ControlHintCondition condition; // Offset: 0x8
};

// Original name: ControlHintAlwaysDisplay_WhenBaseAndAdditionalConditionsPass
// Size: 0x18
// VTable: 0x149a67340
struct ControlHintAlwaysDisplay_WhenBaseAndAdditionalConditionsPass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ControlHintCondition additionalCondition; // Offset: 0x8
};

// Original name: DynArray_ControlHintCondition
// Generated DynArray for base type: ControlHintCondition
// Size: 0x8
struct DynArray_ControlHintCondition {
    ControlHintCondition* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsLocalizedFromInteger
// Size: 0x130
// VTable: 0x149987e98
struct BuildingBlocks_BindingsLocalizedFromInteger {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int64_t defaultNZeros; // Offset: 0x50
    BuildingBlocks_BindingsIntegerBase nZeros; // Offset: 0x58
    bool withSeparators; // Offset: 0x68
    uint8_t _pad_1[0x7]; // Offset: 0x69
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x70
    uint8_t _pad_2[0xb0]; // Offset: 0x80
};

// Original name: BuildingBlocks_BindingsIntegerArithmatic
// Size: 0x120
// VTable: 0x149987328
struct BuildingBlocks_BindingsIntegerArithmatic {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int64_t amount; // Offset: 0x50
    ARDataType type_; /* type */ // Offset: 0x58
    uint8_t _pad_1[0x4]; // Offset: 0x5c
    BuildingBlocks_BindingsIntegerBase inputL; // Offset: 0x60
    BuildingBlocks_BindingsIntegerBase inputR; // Offset: 0x70
    uint8_t _pad_2[0xa0]; // Offset: 0x80
};

// Original name: BuildingBlocks_IntegerIntegerPair
// Size: 0x28
// VTable: 0x149986e70
struct BuildingBlocks_IntegerIntegerPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t first; // Offset: 0x8
    int64_t second; // Offset: 0x10
    BuildingBlocks_BindingsIntegerBase secondOverride; // Offset: 0x18
};

// Original name: BuildingBlocks_LocalizationDateFromIntegerTimeStamp
// Size: 0x60
// VTable: 0x149988410
struct BuildingBlocks_LocalizationDateFromIntegerTimeStamp {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x50
};

// Original name: BuildingBlocks_BindingsColorFromIntegerRGBA
// Size: 0x1f0
// VTable: 0x149985e88
struct BuildingBlocks_BindingsColorFromIntegerRGBA {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int64_t defaultRedValue; // Offset: 0x50
    int64_t defaultGreenValue; // Offset: 0x58
    int64_t defaultBlueValue; // Offset: 0x60
    int64_t defaultAlphaValue; // Offset: 0x68
    BuildingBlocks_BindingsIntegerBase inputRed; // Offset: 0x70
    BuildingBlocks_BindingsIntegerBase inputGreen; // Offset: 0x80
    BuildingBlocks_BindingsIntegerBase inputBlue; // Offset: 0x90
    BuildingBlocks_BindingsIntegerBase inputAlpha; // Offset: 0xa0
    uint8_t _pad_1[0x140]; // Offset: 0xb0
};

// Original name: BuildingBlocks_BindingsIntegerFunction
// Size: 0x68
// VTable: 0x1499876e8
struct BuildingBlocks_BindingsIntegerFunction {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x58
};

// Original name: BuildingBlocks_BindingsIntegerFromBoolean
// Size: 0x180
// VTable: 0x149987250
struct BuildingBlocks_BindingsIntegerFromBoolean {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int64_t isTrue; // Offset: 0x50
    int64_t isFalse; // Offset: 0x58
    BuildingBlocks_BindingsIntegerBase inputTrue; // Offset: 0x60
    BuildingBlocks_BindingsIntegerBase inputFalse; // Offset: 0x70
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0x80
    uint8_t _pad_1[0xf0]; // Offset: 0x90
};

// Original name: BuildingBlocks_BindingsLocalizedRandomFromInteger
// Size: 0x90
// VTable: 0x149988628
struct BuildingBlocks_BindingsLocalizedRandomFromInteger {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int32_t length; // Offset: 0x50
    bool withConsonants; // Offset: 0x54
    bool withConsonantsUppercase; // Offset: 0x55
    bool withVowels; // Offset: 0x56
    bool withVowelsUppercase; // Offset: 0x57
    bool withSymbols; // Offset: 0x58
    bool withNumbers; // Offset: 0x59
    uint8_t numberBase; // Offset: 0x5a
    uint8_t _pad_1[0x1]; // Offset: 0x5b
    int32_t seedOffset; // Offset: 0x5c
    CLocIdentifier* prefix; // Offset: 0x60
    CLocIdentifier* suffix; // Offset: 0x68
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x70
    uint8_t _pad_2[0x10]; // Offset: 0x80
};

// Original name: BuildingBlocks_BindingsBooleanFromInteger
// Size: 0x120
// VTable: 0x149981608
struct BuildingBlocks_BindingsBooleanFromInteger {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int64_t value; // Offset: 0x50
    ARDataType type_; /* type */ // Offset: 0x58
    uint8_t _pad_1[0x4]; // Offset: 0x5c
    BuildingBlocks_BindingsIntegerBase inputL; // Offset: 0x60
    BuildingBlocks_BindingsIntegerBase inputR; // Offset: 0x70
    uint8_t _pad_2[0xa0]; // Offset: 0x80
};

// Original name: BuildingBlocks_BindingsNumberFromInteger
// Size: 0x68
// VTable: 0x149989198
struct BuildingBlocks_BindingsNumberFromInteger {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    bool asSeconds; // Offset: 0x50
    uint8_t _pad_1[0x7]; // Offset: 0x51
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x58
};

// Original name: BuildingBlocks_BindingsLocalizedSIUnitFromNumber
// Size: 0x188
// VTable: 0x1499879e0
struct BuildingBlocks_BindingsLocalizedSIUnitFromNumber {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    uint8_t nPlaces; // Offset: 0x50
    uint8_t _pad_1[0x7]; // Offset: 0x51
    BuildingBlocks_BindingsIntegerBase nPlacesBinding; // Offset: 0x58
    bool withSeparators; // Offset: 0x68
    uint8_t _pad_2[0x3]; // Offset: 0x69
    ARDataType unitSuffix; // Offset: 0x6c
    BuildingBlocks_BindingsIntegerBase unitSuffixBinding; // Offset: 0x70
    ARDataType forcedSIPrefix; // Offset: 0x80
    uint8_t _pad_3[0x4]; // Offset: 0x84
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x88
    uint8_t _pad_4[0xf0]; // Offset: 0x98
};

// Original name: BuildingBlocks_BindingsColorFromIntegerPacked
// Size: 0x60
// VTable: 0x149985ee0
struct BuildingBlocks_BindingsColorFromIntegerPacked {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x50
};

// Original name: DynArray_BuildingBlocks_BindingsIntegerBase
// Generated DynArray for base type: BuildingBlocks_BindingsIntegerBase
// Size: 0x8
struct DynArray_BuildingBlocks_BindingsIntegerBase {
    BuildingBlocks_BindingsIntegerBase* m_data; // Offset: 0x0
};

// Original name: JournalEntry
// Size: 0x58
// VTable: 0x149975468
struct JournalEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* Title; // Offset: 0x8
    CLocIdentifier* ShortTitle; // Offset: 0x10
    CLocIdentifier* SubHeading; // Offset: 0x18
    bool autoOpenMobiGlas; // Offset: 0x20
    bool showNotification; // Offset: 0x21
    bool missionSpecificContent; // Offset: 0x22
    bool removeOnMissionEnd; // Offset: 0x23
    uint8_t _pad_1[0x4]; // Offset: 0x24
    JournalEntryType Style; // Offset: 0x28
    BaseJournalEntry type_; /* type */ // Offset: 0x40
    bool tutorialEntry; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
};

// Original name: DynArray_SModifierSignaturesEntry
// Generated DynArray for base type: SModifierSignaturesEntry
// Size: 0x8
struct DynArray_SModifierSignaturesEntry {
    SModifierSignaturesEntry* m_data; // Offset: 0x0
};

// Original name: CloneLocationUIProviderParams
// Size: 0x28
// VTable: 0x149a571b0
struct CloneLocationUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CloneLocationMedicalTier medicalTier; // Offset: 0x18
};

// Original name: AttachableStateModifierBase
// Size: 0x18
// VTable: 0x1499c1680
struct AttachableStateModifierBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AttachableStateModifierContextBase context; // Offset: 0x8
};

// Original name: LandingSystemStateModifierBase
// Size: 0x18
// VTable: 0x1499c1e28
struct LandingSystemStateModifierBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AttachableStateModifierContextBase context; // Offset: 0x8
};

// Original name: DynArray_SMobiGlasLauncherApp
// Generated DynArray for base type: SMobiGlasLauncherApp
// Size: 0x8
struct DynArray_SMobiGlasLauncherApp {
    SMobiGlasLauncherApp* m_data; // Offset: 0x0
};

// Original name: DynArray_SCustomizableMaterialEntry
// Generated DynArray for base type: SCustomizableMaterialEntry
// Size: 0x8
struct DynArray_SCustomizableMaterialEntry {
    SCustomizableMaterialEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_FoleyCollision
// Generated DynArray for base type: FoleyCollision
// Size: 0x8
struct DynArray_FoleyCollision {
    FoleyCollision* m_data; // Offset: 0x0
};

// Original name: SCollectible
// Size: 0x78
// VTable: 0x149a23dd8
struct SCollectible {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCollectibleCategory category; // Offset: 0x8
    CLocIdentifier* name; // Offset: 0x20
    CLocIdentifier* description; // Offset: 0x28
    CLocIdentifier* foundInLocationName; // Offset: 0x30
    CryStringT* collectibleGeometryPath; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
    CryStringT* collectibleIcon; // Offset: 0x48
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: DynArray_FlashVariableObject
// Generated DynArray for base type: FlashVariableObject
// Size: 0x8
struct DynArray_FlashVariableObject {
    FlashVariableObject* m_data; // Offset: 0x0
};

// Original name: DynArray_SDockingAnimatorStageTriggerParams
// Generated DynArray for base type: SDockingAnimatorStageTriggerParams
// Size: 0x8
struct DynArray_SDockingAnimatorStageTriggerParams {
    SDockingAnimatorStageTriggerParams* m_data; // Offset: 0x0
};

// Original name: SeatedTacticScores
// Size: 0x80
// VTable: 0x1499b7280
struct SeatedTacticScores {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* tacticName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CommonTargetingSameTargetScore amountOfEntitiesTargetingSameTargetScore; // Offset: 0x18
    CommonTargetVisibilityScore isCurrentTargetVisibleScore; // Offset: 0x38
    CommonCurrentTargetDistanceScore currentDistanceToTargetScore; // Offset: 0x48
    uint8_t _pad_2[0x18]; // Offset: 0x60
    float emptyTest; // Offset: 0x78
    uint8_t _pad_3[0x4]; // Offset: 0x7c
};

// Original name: OnFootTacticScores
// Size: 0x90
// VTable: 0x1499b7220
struct OnFootTacticScores {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* tacticName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CommonTargetingSameTargetScore amountOfEntitiesTargetingSameTargetScore; // Offset: 0x18
    CommonTargetVisibilityScore isCurrentTargetVisibleScore; // Offset: 0x38
    CommonCurrentTargetDistanceScore currentDistanceToTargetScore; // Offset: 0x48
    uint8_t _pad_2[0x18]; // Offset: 0x60
    OnFootWeaponRangeCategoryScore idealWeaponCombatRangeScore; // Offset: 0x78
};

// Original name: CommonTacticScores
// Size: 0x78
// VTable: 0x1499b71c8
struct CommonTacticScores {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* tacticName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CommonTargetingSameTargetScore amountOfEntitiesTargetingSameTargetScore; // Offset: 0x18
    CommonTargetVisibilityScore isCurrentTargetVisibleScore; // Offset: 0x38
    CommonCurrentTargetDistanceScore currentDistanceToTargetScore; // Offset: 0x48
    uint8_t _pad_2[0x18]; // Offset: 0x60
};

// Original name: DynArray_QuickAccessWheelElement
// Generated DynArray for base type: QuickAccessWheelElement
// Size: 0x8
struct DynArray_QuickAccessWheelElement {
    QuickAccessWheelElement* m_data; // Offset: 0x0
};

// Original name: SReputationStateModifierParams
// Size: 0x30
// VTable: 0x149a96a98
struct SReputationStateModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationStateParams state; // Offset: 0x8
    SReputationStateModifierBase modifier; // Offset: 0x20
};

// Original name: SReputationStateModifierSetToState
// Size: 0x20
// VTable: 0x149a96a10
struct SReputationStateModifierSetToState {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationStateParams modifierState; // Offset: 0x8
};

// Original name: DynArray_ItemSuitArmorSignatureParams
// Generated DynArray for base type: ItemSuitArmorSignatureParams
// Size: 0x8
struct DynArray_ItemSuitArmorSignatureParams {
    ItemSuitArmorSignatureParams* m_data; // Offset: 0x0
};

// Original name: CtxGraph_Dependency
// Size: 0x30
// VTable: 0x149aa6b00
struct CtxGraph_Dependency {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType reason; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CtxGraph_Component first; // Offset: 0x10
    CtxGraph_Component second; // Offset: 0x20
};

// Original name: DynArray_CtxGraph_Component
// Generated DynArray for base type: CtxGraph_Component
// Size: 0x8
struct DynArray_CtxGraph_Component {
    CtxGraph_Component* m_data; // Offset: 0x0
};

// Original name: DefaultActionsEntityEntryCondition_NOT
// Size: 0x18
// VTable: 0x149a8bbe0
struct DefaultActionsEntityEntryCondition_NOT {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DefaultActionsEntityEntryCondition condition; // Offset: 0x8
};

// Original name: DynArray_DefaultActionsEntityEntryCondition
// Generated DynArray for base type: DefaultActionsEntityEntryCondition
// Size: 0x8
struct DynArray_DefaultActionsEntityEntryCondition {
    DefaultActionsEntityEntryCondition* m_data; // Offset: 0x0
};

// Original name: DynArray_SMannequinTagParams
// Generated DynArray for base type: SMannequinTagParams
// Size: 0x8
struct DynArray_SMannequinTagParams {
    SMannequinTagParams* m_data; // Offset: 0x0
};

// Original name: ActorBaseMovementModifiers
// Size: 0xa8
// VTable: 0x149aa3a50
struct ActorBaseMovementModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorBaseStanceMovementModifiers standing; // Offset: 0x8
    ActorBaseStanceMovementModifiers crouched; // Offset: 0x28
    ActorBaseStanceMovementModifiers prone; // Offset: 0x48
    ActorBaseStanceMovementModifiers swimming; // Offset: 0x68
    ActorBaseStanceMovementModifiers other; // Offset: 0x88
};

// Original name: DynArray_SActorStanceDimensionsExtraDef
// Generated DynArray for base type: SActorStanceDimensionsExtraDef
// Size: 0x8
struct DynArray_SActorStanceDimensionsExtraDef {
    SActorStanceDimensionsExtraDef* m_data; // Offset: 0x0
};

// Original name: AsteroidStateTemplate
// Size: 0x18
// VTable: 0x149979900
struct AsteroidStateTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AsteroidStateTemplateInternal state; // Offset: 0x8
};

// Original name: DynArray_SCharacterCustomizerTextureParams
// Generated DynArray for base type: SCharacterCustomizerTextureParams
// Size: 0x8
struct DynArray_SCharacterCustomizerTextureParams {
    SCharacterCustomizerTextureParams* m_data; // Offset: 0x0
};

// Original name: DynArray_EngineeringStateMessages
// Generated DynArray for base type: EngineeringStateMessages
// Size: 0x8
struct DynArray_EngineeringStateMessages {
    EngineeringStateMessages* m_data; // Offset: 0x0
};

// Original name: SActorForceReactionLeanFilterDef
// Size: 0x78
// VTable: 0x149a4d5a0
struct SActorForceReactionLeanFilterDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorMotionStateFilter filter; // Offset: 0x8
    SActorForceReactionLeanAngleLimitsDef leanAngleLimits; // Offset: 0x58
    float hipVOffset; // Offset: 0x70
    uint8_t _pad_1[0x4]; // Offset: 0x74
};

// Original name: DateTime
// Size: 0x38
// VTable: 0x1499b99c8
struct DateTime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Date date; // Offset: 0x8
    Time time; // Offset: 0x20
};

// Original name: DynArray_FiringRangeTimeEntry
// Generated DynArray for base type: FiringRangeTimeEntry
// Size: 0x8
struct DynArray_FiringRangeTimeEntry {
    FiringRangeTimeEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionFlightDurationConfig
// Generated DynArray for base type: SActorForceReactionFlightDurationConfig
// Size: 0x8
struct DynArray_SActorForceReactionFlightDurationConfig {
    SActorForceReactionFlightDurationConfig* m_data; // Offset: 0x0
};

// Original name: CraftingRecipeRecord
// Size: 0x18
// VTable: 0x1499b8a90
struct CraftingRecipeRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipe_Base_NonRef recipe; // Offset: 0x8
};

// Original name: CraftingRecipe_Ref
// Size: 0x18
// VTable: 0x1499b8b50
struct CraftingRecipe_Ref {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipe_Base_NonRef recipeReference; // Offset: 0x8
};

// Original name: BuildingBlocks_IntegerLocalizedPair
// Size: 0x28
// VTable: 0x149987790
struct BuildingBlocks_IntegerLocalizedPair {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t first; // Offset: 0x8
    CLocIdentifier* second; // Offset: 0x10
    BuildingBlocks_BindingsLocalizedBase secondOverride; // Offset: 0x18
};

// Original name: BuildingBlocks_BindingsLocalizedFromBoolean
// Size: 0x180
// VTable: 0x149988060
struct BuildingBlocks_BindingsLocalizedFromBoolean {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    CLocIdentifier* isTrue; // Offset: 0x50
    CLocIdentifier* isFalse; // Offset: 0x58
    BuildingBlocks_BindingsLocalizedBase inputTrue; // Offset: 0x60
    BuildingBlocks_BindingsLocalizedBase inputFalse; // Offset: 0x70
    BuildingBlocks_BindingsBooleanBase input; // Offset: 0x80
    uint8_t _pad_1[0xf0]; // Offset: 0x90
};

// Original name: BindingsOperations_LocalizationCombine
// Size: 0x120
// VTable: 0x1499883b8
struct BindingsOperations_LocalizationCombine {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    bool withSpace; // Offset: 0x50
    uint8_t _pad_1[0x7]; // Offset: 0x51
    CLocIdentifier* value; // Offset: 0x58
    BuildingBlocks_BindingsLocalizedBase inputL; // Offset: 0x60
    BuildingBlocks_BindingsLocalizedBase inputR; // Offset: 0x70
    uint8_t _pad_2[0xa0]; // Offset: 0x80
};

// Original name: BuildingBlocks_BindingsLocalizedModifyCase
// Size: 0x68
// VTable: 0x1499880e8
struct BuildingBlocks_BindingsLocalizedModifyCase {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    ARDataType caseModifier; // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
    BuildingBlocks_BindingsLocalizedBase input; // Offset: 0x58
};

// Original name: BindingsOperation_BooleanFromLocalizationIsEmpty
// Size: 0x60
// VTable: 0x149981860
struct BindingsOperation_BooleanFromLocalizationIsEmpty {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsLocalizedBase input; // Offset: 0x50
};

// Original name: DynArray_NavigationTriggerAdapter
// Generated DynArray for base type: NavigationTriggerAdapter
// Size: 0x8
struct DynArray_NavigationTriggerAdapter {
    NavigationTriggerAdapter* m_data; // Offset: 0x0
};

// Original name: MobiGlasAppData
// Size: 0x18
// VTable: 0x149a35cf0
struct MobiGlasAppData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MobiGlasAppDataBase appData; // Offset: 0x8
};

// Original name: DynArray_MobiGlasAppDataBase
// Generated DynArray for base type: MobiGlasAppDataBase
// Size: 0x8
struct DynArray_MobiGlasAppDataBase {
    MobiGlasAppDataBase* m_data; // Offset: 0x0
};

// Original name: DynArray_ContractBoolParam
// Generated DynArray for base type: ContractBoolParam
// Size: 0x8
struct DynArray_ContractBoolParam {
    ContractBoolParam* m_data; // Offset: 0x0
};

// Original name: MotionTurnSetupFiltered
// Size: 0x78
// VTable: 0x149aad200
struct MotionTurnSetupFiltered {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ARDataType filterByLocomotionSet; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    MotionTurnParams params; // Offset: 0x50
};

// Original name: DynArray_HudColor_HoloParam
// Generated DynArray for base type: HudColor_HoloParam
// Size: 0x8
struct DynArray_HudColor_HoloParam {
    HudColor_HoloParam* m_data; // Offset: 0x0
};

// Original name: STargetingMethodRecord
// Size: 0x18
// VTable: 0x149a559c0
struct STargetingMethodRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    STargetingMethodBase targetingMethod; // Offset: 0x8
};

// Original name: DynArray_PowerPool
// Generated DynArray for base type: PowerPool
// Size: 0x8
struct DynArray_PowerPool {
    PowerPool* m_data; // Offset: 0x0
};

// Original name: MissionFlowCondition_NOT
// Size: 0x18
// VTable: 0x1499701e0
struct MissionFlowCondition_NOT {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionFlowConditionBase condition; // Offset: 0x8
};

// Original name: MissionFlowTrigger
// Size: 0x38
// VTable: 0x149970510
struct MissionFlowTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* description; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    MissionFlowConditionBase condition; // Offset: 0x18
    MissionFlowActionBase action; // Offset: 0x28
};

// Original name: DynArray_MissionFlowConditionBase
// Generated DynArray for base type: MissionFlowConditionBase
// Size: 0x8
struct DynArray_MissionFlowConditionBase {
    MissionFlowConditionBase* m_data; // Offset: 0x0
};

// Original name: ActorExternalForceMovementModifiers
// Size: 0x58
// VTable: 0x149aa3c48
struct ActorExternalForceMovementModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorForceMovementModifierConfig gForce; // Offset: 0x8
    ActorForceMovementModifierConfig wind; // Offset: 0x30
};

// Original name: DynArray_ItemResourceTypeData
// Generated DynArray for base type: ItemResourceTypeData
// Size: 0x8
struct DynArray_ItemResourceTypeData {
    ItemResourceTypeData* m_data; // Offset: 0x0
};

// Original name: DefaultActionsEntityState_NOT
// Size: 0x18
// VTable: 0x149a8bfb0
struct DefaultActionsEntityState_NOT {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DefaultActionsEntityState state; // Offset: 0x8
};

// Original name: DynArray_DefaultActionsEntityState
// Generated DynArray for base type: DefaultActionsEntityState
// Size: 0x8
struct DynArray_DefaultActionsEntityState {
    DefaultActionsEntityState* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemPortAttachmentPoints
// Generated DynArray for base type: SItemPortAttachmentPoints
// Size: 0x8
struct DynArray_SItemPortAttachmentPoints {
    SItemPortAttachmentPoints* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityClassStaticDataParams
// Generated DynArray for base type: EntityClassStaticDataParams
// Size: 0x8
struct DynArray_EntityClassStaticDataParams {
    EntityClassStaticDataParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SS42PersonalStatusDrugBuffEffectString
// Generated DynArray for base type: SS42PersonalStatusDrugBuffEffectString
// Size: 0x8
struct DynArray_SS42PersonalStatusDrugBuffEffectString {
    SS42PersonalStatusDrugBuffEffectString* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_PreviewScreenBase
// Generated DynArray for base type: BuildingBlocks_PreviewScreenBase
// Size: 0x8
struct DynArray_BuildingBlocks_PreviewScreenBase {
    BuildingBlocks_PreviewScreenBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SSequencerDefTaskParams
// Generated DynArray for base type: SSequencerDefTaskParams
// Size: 0x8
struct DynArray_SSequencerDefTaskParams {
    SSequencerDefTaskParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SStarGalaWaveParams
// Generated DynArray for base type: SStarGalaWaveParams
// Size: 0x8
struct DynArray_SStarGalaWaveParams {
    SStarGalaWaveParams* m_data; // Offset: 0x0
};

// Original name: DynArray_Bindings_SubsumptionBroadcastEvent
// Generated DynArray for base type: Bindings_SubsumptionBroadcastEvent
// Size: 0x8
struct DynArray_Bindings_SubsumptionBroadcastEvent {
    Bindings_SubsumptionBroadcastEvent* m_data; // Offset: 0x0
};

// Original name: DynArray_WingmanOrderInfo
// Generated DynArray for base type: WingmanOrderInfo
// Size: 0x8
struct DynArray_WingmanOrderInfo {
    WingmanOrderInfo* m_data; // Offset: 0x0
};

// Original name: DynArray_SBaseInteractionGameplayTrigger
// Generated DynArray for base type: SBaseInteractionGameplayTrigger
// Size: 0x8
struct DynArray_SBaseInteractionGameplayTrigger {
    SBaseInteractionGameplayTrigger* m_data; // Offset: 0x0
};

// Original name: DynArray_SecurityNetworkVariableEffect_Base
// Generated DynArray for base type: SecurityNetworkVariableEffect_Base
// Size: 0x8
struct DynArray_SecurityNetworkVariableEffect_Base {
    SecurityNetworkVariableEffect_Base* m_data; // Offset: 0x0
};

// Original name: ItemResourceControlConditionThrottle
// Size: 0x28
// VTable: 0x1499a8fb8
struct ItemResourceControlConditionThrottle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceControlOutputBase controlOutput; // Offset: 0x8
    ItemResourceControlParameterBase controlParameter; // Offset: 0x18
};

// Original name: ItemResourceControlConditionLimitParameter
// Size: 0x40
// VTable: 0x1499a8f38
struct ItemResourceControlConditionLimitParameter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceControlOutputBase controlOutput; // Offset: 0x8
    ItemResourceControlParameterBase controlParameter; // Offset: 0x18
    ItemResourceControlParameterBase limitParameter; // Offset: 0x28
    bool min; // Offset: 0x38
    uint8_t _pad_1[0x7]; // Offset: 0x39
};

// Original name: ItemResourceControlConditionLimit
// Size: 0x30
// VTable: 0x1499a8e68
struct ItemResourceControlConditionLimit {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceControlOutputBase controlOutput; // Offset: 0x8
    ItemResourceControlParameterBase controlParameter; // Offset: 0x18
    float limitMax; // Offset: 0x28
    float limitMin; // Offset: 0x2c
};

// Original name: DynArray_ItemResourceControlOutputBase
// Generated DynArray for base type: ItemResourceControlOutputBase
// Size: 0x8
struct DynArray_ItemResourceControlOutputBase {
    ItemResourceControlOutputBase* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsTransformMultiply
// Size: 0x110
// VTable: 0x14998a2a8
struct BuildingBlocks_BindingsTransformMultiply {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsTransformBase input; // Offset: 0x50
    BuildingBlocks_BindingsTransformBase inputB; // Offset: 0x60
    uint8_t _pad_1[0xa0]; // Offset: 0x70
};

// Original name: BuildingBlocks_BindingsTransformInvert
// Size: 0x60
// VTable: 0x14998a300
struct BuildingBlocks_BindingsTransformInvert {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsTransformBase input; // Offset: 0x50
};

// Original name: DynArray_ChatCommandName
// Generated DynArray for base type: ChatCommandName
// Size: 0x8
struct DynArray_ChatCommandName {
    ChatCommandName* m_data; // Offset: 0x0
};

// Original name: DynArray_MeleeComboChainLink
// Generated DynArray for base type: MeleeComboChainLink
// Size: 0x8
struct DynArray_MeleeComboChainLink {
    MeleeComboChainLink* m_data; // Offset: 0x0
};

// Original name: DynArray_BlueprintCategoryRecord
// Generated DynArray for base type: BlueprintCategoryRecord
// Size: 0x8
struct DynArray_BlueprintCategoryRecord {
    BlueprintCategoryRecord* m_data; // Offset: 0x0
};

// Original name: DynArray_PlayerShipRespawnShipInfo
// Generated DynArray for base type: PlayerShipRespawnShipInfo
// Size: 0x8
struct DynArray_PlayerShipRespawnShipInfo {
    PlayerShipRespawnShipInfo* m_data; // Offset: 0x0
};

// Original name: GlobalJumpDriveEffectParams
// Size: 0x40
// VTable: 0x149a13260
struct GlobalJumpDriveEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float failureBuildUpTime; // Offset: 0x8
    float failureDissipationTime; // Offset: 0xc
    GlobalJumpDriveTuningEffectParams tuningParams; // Offset: 0x10
    GlobalJumpDriveEntryEffectParams entryParams; // Offset: 0x20
    GlobalJumpDriveExitEffectParams exitParams; // Offset: 0x30
};

// Original name: CaptureAreaUIParams
// Size: 0xd0
// VTable: 0x1499d16e0
struct CaptureAreaUIParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool hidden; // Offset: 0x18
    bool outdoorAreaUI; // Offset: 0x19
    uint8_t _pad_1[0x2]; // Offset: 0x1a
    float timeToLoop; // Offset: 0x1c
    int32_t gridLayerCount; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    Vec3 dimensions; // Offset: 0x28
    float drawFarDistance; // Offset: 0x40
    float gridAreaHeightPerc; // Offset: 0x44
    float baseLineWidthPerc; // Offset: 0x48
    float basePaddingInnerPerc; // Offset: 0x4c
    float baseOffset; // Offset: 0x50
    float baseAlpha; // Offset: 0x54
    float baseNoisePower; // Offset: 0x58
    float gridLineWidthPerc; // Offset: 0x5c
    float gridHighlightFeatherPerc; // Offset: 0x60
    float gridFalloffPerc; // Offset: 0x64
    float gridPaddingInnerPerc; // Offset: 0x68
    uint8_t _pad_3[0x4]; // Offset: 0x6c
    AreaOutdoorMaterialParams indoorAreaParams; // Offset: 0x70
    AreaOutdoorMaterialParams outdoorAreaParams; // Offset: 0x88
    CryStringT* baseLineMaterial; // Offset: 0xa0
    uint8_t _pad_4[0x8]; // Offset: 0xa8
    CryStringT* beamMaterial; // Offset: 0xb0
    uint8_t _pad_5[0x8]; // Offset: 0xb8
    CryStringT* gridLineMaterial; // Offset: 0xc0
    uint8_t _pad_6[0x8]; // Offset: 0xc8
};

// Original name: IntInteractiveVariable
// Size: 0x38
// VTable: 0x1499f7640
struct IntInteractiveVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t defaultValue; // Offset: 0x18
    int32_t minValue; // Offset: 0x1c
    int32_t maxValue; // Offset: 0x20
    ARDataType loopType; // Offset: 0x24
    InteractiveVariable_BackToDefaultIntParams backToDefaultParams; // Offset: 0x28
};

// Original name: DynArray_SHackingCodeSystemLogEntry
// Generated DynArray for base type: SHackingCodeSystemLogEntry
// Size: 0x8
struct DynArray_SHackingCodeSystemLogEntry {
    SHackingCodeSystemLogEntry* m_data; // Offset: 0x0
};

// Original name: CameraLookBehindConfig
// Size: 0xe0
// VTable: 0x149a01550
struct CameraLookBehindConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraDistanceConfig distanceConfig; // Offset: 0x60
    float heightOverride; // Offset: 0x88
    uint8_t _pad_1[0x4]; // Offset: 0x8c
    CryStringT* screenOverlayTextureName; // Offset: 0x90
    uint8_t _pad_2[0x8]; // Offset: 0x98
    CryStringT* introEffectLibrary; // Offset: 0xa0
    uint8_t _pad_3[0x8]; // Offset: 0xa8
    CryStringT* introEffectName; // Offset: 0xb0
    uint8_t _pad_4[0x8]; // Offset: 0xb8
    CryStringT* outroEffectLibrary; // Offset: 0xc0
    uint8_t _pad_5[0x8]; // Offset: 0xc8
    CryStringT* outroEffectName; // Offset: 0xd0
    uint8_t _pad_6[0x8]; // Offset: 0xd8
};

// Original name: VideoCommsAudioParams
// Size: 0x48
// VTable: 0x149a9bb38
struct VideoCommsAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc lowTechInterferenceAudioRTPC; // Offset: 0x8
    AudioRtpc highTechInterferenceAudioRTPC; // Offset: 0x28
};

// Original name: MiningLaserGlobalParams
// Size: 0x80
// VTable: 0x1499f0330
struct MiningLaserGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool blockThrottleChangeWhenNotFiring; // Offset: 0x8
    bool throttleResetOnStopFire; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float throttleChangePerAction; // Offset: 0xc
    float throttleAccPeriod; // Offset: 0x10
    float throttleAccFactor; // Offset: 0x14
    float throttleHoldAccFactor; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    AudioRtpc throttleRTPC; // Offset: 0x20
    AudioRtpc mineableGlowStrengthRTPC; // Offset: 0x40
    AudioRtpc mineableOptimalBreakZoneRTPC; // Offset: 0x60
};

// Original name: SSalvageRepairAudioParams
// Size: 0x30
// VTable: 0x149a7b048
struct SSalvageRepairAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc salvageCargoOccupancyFactorRTPC; // Offset: 0x8
    float friendlyFireMessageCooldownScale; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: JumpDriveAudioMovementParams
// Size: 0x328
// VTable: 0x1499f4da0
struct JumpDriveAudioMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc shipLinearAccelerationRL; // Offset: 0x8
    AudioRtpc shipLinearAccelerationFB; // Offset: 0x28
    AudioRtpc shipLinearAccelerationUD; // Offset: 0x48
    AudioRtpc shipAngularAccelerationPitch; // Offset: 0x68
    AudioRtpc shipAngularAccelerationRoll; // Offset: 0x88
    AudioRtpc shipAngularAccelerationYaw; // Offset: 0xa8
    AudioRtpc shipAngularTurbulencePitch; // Offset: 0xc8
    AudioRtpc shipAngularTurbulenceRoll; // Offset: 0xe8
    AudioRtpc shipAngularTurbulenceYaw; // Offset: 0x108
    AudioRtpc shipLinearVelocityRL; // Offset: 0x128
    AudioRtpc shipLinearVelocityFB; // Offset: 0x148
    AudioRtpc shipLinearVelocityUD; // Offset: 0x168
    AudioRtpc tunnelLinearAccelerationRL; // Offset: 0x188
    AudioRtpc tunnelLinearAccelerationFB; // Offset: 0x1a8
    AudioRtpc tunnelLinearAccelerationUD; // Offset: 0x1c8
    AudioRtpc tunnelAngularAccelerationPitch; // Offset: 0x1e8
    AudioRtpc tunnelAngularAccelerationRoll; // Offset: 0x208
    AudioRtpc tunnelAngularAccelerationYaw; // Offset: 0x228
    AudioRtpc playerInputPitch; // Offset: 0x248
    AudioRtpc playerInputYaw; // Offset: 0x268
    AudioRtpc playerInputRoll; // Offset: 0x288
    AudioRtpc playerInputStrafeRL; // Offset: 0x2a8
    AudioRtpc playerInputStrafeFB; // Offset: 0x2c8
    AudioRtpc playerInputStrafeUD; // Offset: 0x2e8
    AudioRtpc afterburnerRequestedRtpc; // Offset: 0x308
};

// Original name: SSCSignatureSystemAudioRtpcSubRule
// Size: 0x38
// VTable: 0x1499ea150
struct SSCSignatureSystemAudioRtpcSubRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc Rtpc; // Offset: 0x8
    float RTPCValue1; // Offset: 0x28
    float SignatureMultiplier1; // Offset: 0x2c
    float RTPCValue2; // Offset: 0x30
    float SignatureMultiplier2; // Offset: 0x34
};

// Original name: MiningControllerAudioParams
// Size: 0x28
// VTable: 0x149a7f830
struct MiningControllerAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc scanningProgressRtpc; // Offset: 0x8
};

// Original name: AudioAllegianceSwitches
// Size: 0x38
// VTable: 0x149a17258
struct AudioAllegianceSwitches {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc allegianceRTPC; // Offset: 0x8
    float neutralRtpcValue; // Offset: 0x28
    float friendlyRtpcValue; // Offset: 0x2c
    float hostileRtpcValue; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
};

// Original name: ParticleEffectAudioParams
// Size: 0x38
// VTable: 0x149997270
struct ParticleEffectAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableAudio; // Offset: 0x8
    bool isManagedAudioObject; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    AudioRtpc audioRTPC; // Offset: 0x10
    float attenuationScale; // Offset: 0x30
    float volume; // Offset: 0x34
};

// Original name: UIWorldDisplayInputSoundRtpcParam
// Size: 0x30
// VTable: 0x149aa99b8
struct UIWorldDisplayInputSoundRtpcParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc id; // Offset: 0x8
    float threshold; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
};

// Original name: EntityComponentLocalPlayerVisorAudioParams
// Size: 0xa0
// VTable: 0x149a0ae50
struct EntityComponentLocalPlayerVisorAudioParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    AudioRtpc visorRtpc; // Offset: 0x18
    AudioRtpc visorPriorityRtpc; // Offset: 0x38
    AudioRtpc soundSimOnRtpc; // Offset: 0x58
    AudioRtpc weaponHasActiveVisorAudioRtpc; // Offset: 0x78
    float fireRateThresholdForPrioritySwap; // Offset: 0x98
    uint8_t _pad_1[0x4]; // Offset: 0x9c
};

// Original name: DynArray_AudioRtpc
// Generated DynArray for base type: AudioRtpc
// Size: 0x8
struct DynArray_AudioRtpc {
    AudioRtpc* m_data; // Offset: 0x0
};

// Original name: InnerThought_LayoutStates
// Size: 0x28
// VTable: 0x149a98ea8
struct InnerThought_LayoutStates {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    InnerThought_LayoutBase layout; // Offset: 0x18
};

// Original name: BlueprintCategoryAvailabilityRecord
// Size: 0x18
// VTable: 0x1499b8e10
struct BlueprintCategoryAvailabilityRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BlueprintCategoryAvailability_Base_NonRef categoryAvailability; // Offset: 0x8
};

// Original name: DynArray_ConstantDOFPosWeights
// Generated DynArray for base type: ConstantDOFPosWeights
// Size: 0x8
struct DynArray_ConstantDOFPosWeights {
    ConstantDOFPosWeights* m_data; // Offset: 0x0
};

// Original name: SProjectedHudParams
// Size: 0xb0
// VTable: 0x149a38b88
struct SProjectedHudParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SProjectedPitchLadderParams pitchLadder; // Offset: 0x8
    SProjectedYawLineParams yawLine; // Offset: 0x48
    SProjectedDisplayParams display; // Offset: 0x88
    bool coilArrowShow; // Offset: 0xa0
    uint8_t _pad_1[0x3]; // Offset: 0xa1
    float coilArrowOffsetAngle; // Offset: 0xa4
    bool coilArrowRotatesToTarget; // Offset: 0xa8
    uint8_t _pad_2[0x7]; // Offset: 0xa9
};

// Original name: DynArray_CommsChannelDef
// Generated DynArray for base type: CommsChannelDef
// Size: 0x8
struct DynArray_CommsChannelDef {
    CommsChannelDef* m_data; // Offset: 0x0
};

// Original name: SJumpTunnelExitParams
// Size: 0x40
// VTable: 0x149a147c0
struct SJumpTunnelExitParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range defaultDistanceRange; // Offset: 0x8
    float defaultMaxHeight; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    SJumpPointPushAreaParams exitPushArea; // Offset: 0x20
};

// Original name: MarkerTrackingViewModeParameters
// Size: 0x50
// VTable: 0x149a49060
struct MarkerTrackingViewModeParameters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isFullScreen; // Offset: 0x8
    bool rotateVertical; // Offset: 0x9
    bool rotateHorizontal; // Offset: 0xa
    bool pan; // Offset: 0xb
    bool zoom; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    MarkerTrackingActionParameters markerActions; // Offset: 0x10
    MarkerTrackingDisplayParameters displaySettings; // Offset: 0x20
};

// Original name: SpawnerPrerequisite_NOT
// Size: 0x18
// VTable: 0x149a407b0
struct SpawnerPrerequisite_NOT {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BaseSpawnerPrerequisite prerequisite; // Offset: 0x8
};

// Original name: DynArray_BaseSpawnerPrerequisite
// Generated DynArray for base type: BaseSpawnerPrerequisite
// Size: 0x8
struct DynArray_BaseSpawnerPrerequisite {
    BaseSpawnerPrerequisite* m_data; // Offset: 0x0
};

// Original name: SEntityComponentNoisySmoothingModificationObjectParams
// Size: 0x50
// VTable: 0x14999db68
struct SEntityComponentNoisySmoothingModificationObjectParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntityComponentSmoothingModificationObjectParams smoothingParams; // Offset: 0x18
    float noiseAmount; // Offset: 0x40
    float noiseFrequency; // Offset: 0x44
    int32_t seed; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
};

// Original name: DynArray_SSequencerItemDoorTaskParams
// Generated DynArray for base type: SSequencerItemDoorTaskParams
// Size: 0x8
struct DynArray_SSequencerItemDoorTaskParams {
    SSequencerItemDoorTaskParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorDeathPoseVariant
// Generated DynArray for base type: SActorDeathPoseVariant
// Size: 0x8
struct DynArray_SActorDeathPoseVariant {
    SActorDeathPoseVariant* m_data; // Offset: 0x0
};

// Original name: DynArray_ExtendedNameEntryTextBase
// Generated DynArray for base type: ExtendedNameEntryTextBase
// Size: 0x8
struct DynArray_ExtendedNameEntryTextBase {
    ExtendedNameEntryTextBase* m_data; // Offset: 0x0
};

// Original name: DynArray_DeltaSignatureSensitivityParams
// Generated DynArray for base type: DeltaSignatureSensitivityParams
// Size: 0x8
struct DynArray_DeltaSignatureSensitivityParams {
    DeltaSignatureSensitivityParams* m_data; // Offset: 0x0
};

// Original name: SCDefaultZeroGTraversalParams
// Size: 0x28
// VTable: 0x149a9c680
struct SCDefaultZeroGTraversalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCZeroGLaunchParams zeroGLaunchParams; // Offset: 0x8
};

// Original name: DynArray_StringUserVariableTask
// Generated DynArray for base type: StringUserVariableTask
// Size: 0x8
struct DynArray_StringUserVariableTask {
    StringUserVariableTask* m_data; // Offset: 0x0
};

// Original name: MissionScenarioSchedule
// Size: 0x40
// VTable: 0x149971a68
struct MissionScenarioSchedule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    MissionScenarioScheduleConstraint start_constraint; // Offset: 0x10
    MissionScenarioScheduleConstraint end_constraint; // Offset: 0x20
    MissionScenarioScheduleRecurrence recurrence; // Offset: 0x30
};

// Original name: DynArray_MusicLogicNode
// Generated DynArray for base type: MusicLogicNode
// Size: 0x8
struct DynArray_MusicLogicNode {
    MusicLogicNode* m_data; // Offset: 0x0
};

// Original name: CraftingCost_Ref
// Size: 0x20
// VTable: 0x1499b8258
struct CraftingCost_Ref {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float multiplier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CraftingCost_Base_NonRef costReference; // Offset: 0x10
};

// Original name: CraftingCostRecord
// Size: 0x18
// VTable: 0x1499b8150
struct CraftingCostRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingCost_Base_NonRef cost; // Offset: 0x8
};

// Original name: SCIGTestAAA
// Size: 0x38
// VTable: 0x1499dab00
struct SCIGTestAAA {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool bBase; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool bA; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
    bool bAA; // Offset: 0x18
    uint8_t _pad_3[0x7]; // Offset: 0x19
    bool bAAA; // Offset: 0x20
    uint8_t _pad_4[0x3]; // Offset: 0x21
    int32_t nAAA; // Offset: 0x24
    SCIGTestBase osAAATestBase; // Offset: 0x28
};

// Original name: DynArray_SCIGTestBase
// Generated DynArray for base type: SCIGTestBase
// Size: 0x8
struct DynArray_SCIGTestBase {
    SCIGTestBase* m_data; // Offset: 0x0
};

// Original name: DynArray_PopupParams
// Generated DynArray for base type: PopupParams
// Size: 0x8
struct DynArray_PopupParams {
    PopupParams* m_data; // Offset: 0x0
};

// Original name: EntityComponentFireFilter
// Size: 0x30
// VTable: 0x14997cdf8
struct EntityComponentFireFilter {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType mode; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    FireVoxelSelectionShape shape; // Offset: 0x20
};

// Original name: EntityComponentFireIgniter
// Size: 0x30
// VTable: 0x14997ceb0
struct EntityComponentFireIgniter {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool igniteOnLoad; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float strength; // Offset: 0x1c
    FireVoxelSelectionShape shape; // Offset: 0x20
};

// Original name: DynArray_SCIGTestA
// Generated DynArray for base type: SCIGTestA
// Size: 0x8
struct DynArray_SCIGTestA {
    SCIGTestA* m_data; // Offset: 0x0
};

// Original name: DelayedModifierTriggerParams
// Size: 0x20
// VTable: 0x1499f6b18
struct DelayedModifierTriggerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float delay; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    BaseItemModifierParams modifier; // Offset: 0x10
};

// Original name: DynArray_BaseItemModifierParams
// Generated DynArray for base type: BaseItemModifierParams
// Size: 0x8
struct DynArray_BaseItemModifierParams {
    BaseItemModifierParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemPortConnectionParam
// Generated DynArray for base type: SItemPortConnectionParam
// Size: 0x8
struct DynArray_SItemPortConnectionParam {
    SItemPortConnectionParam* m_data; // Offset: 0x0
};

// Original name: ActorStateData_ValidationParams
// Size: 0x60
// VTable: 0x149aad978
struct ActorStateData_ValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    ActorStateData_StateValidationParams stateValidationParams; // Offset: 0x10
    ActorStateData_AnimationValidationParams animationValidationParams; // Offset: 0x20
    ActorStateData_JumpFallValidationParams jumpFallValidationParams; // Offset: 0x30
    ActorStateData_LadderValidationParams ladderValidationParams; // Offset: 0x40
    ActorStateData_UsableValidationParams usableValidationParams; // Offset: 0x50
};

// Original name: DynArray_LocStringUserVariable
// Generated DynArray for base type: LocStringUserVariable
// Size: 0x8
struct DynArray_LocStringUserVariable {
    LocStringUserVariable* m_data; // Offset: 0x0
};

// Original name: SMannequinActionDefRecord
// Size: 0x18
// VTable: 0x149ab14d0
struct SMannequinActionDefRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    IMannequinActionDef actionDef; // Offset: 0x8
};

// Original name: DynArray_ChatFilter
// Generated DynArray for base type: ChatFilter
// Size: 0x8
struct DynArray_ChatFilter {
    ChatFilter* m_data; // Offset: 0x0
};

// Original name: SAudioCapacitor
// Size: 0x28
// VTable: 0x149a88790
struct SAudioCapacitor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float capacity; // Offset: 0x8
    float chargeSpeed; // Offset: 0xc
    float dischargeSpeed; // Offset: 0x10
    float inputThreshold; // Offset: 0x14
    SRtpcBehaviour behavior; // Offset: 0x18
};

// Original name: AudioRtpcWithBehaviour
// Size: 0x38
// VTable: 0x149a88818
struct AudioRtpcWithBehaviour {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc rtpc; // Offset: 0x8
    SRtpcBehaviour behavior; // Offset: 0x28
};

// Original name: CraftingResearch
// Size: 0x28
// VTable: 0x1499b8bf8
struct CraftingResearch {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingResearchUnlock_Base unlockRequirements; // Offset: 0x8
    CraftingRecipeCosts_Base researchCosts; // Offset: 0x18
};

// Original name: DynArray_ContractPrerequisiteBase
// Generated DynArray for base type: ContractPrerequisiteBase
// Size: 0x8
struct DynArray_ContractPrerequisiteBase {
    ContractPrerequisiteBase* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_PreviewSceneRttRoot
// Size: 0x40
// VTable: 0x149994948
struct BuildingBlocks_PreviewSceneRttRoot {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    ARDataType renderLayer; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    float entityScale; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    Deg3 entityOrientation; // Offset: 0x20
};

// Original name: MapDisplayOverrideParams
// Size: 0x48
// VTable: 0x149a15e80
struct MapDisplayOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float radius; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Deg3 orientation; // Offset: 0x10
    Vec3 position; // Offset: 0x30
};

// Original name: SSCSignatureSystemScanBounds
// Size: 0x58
// VTable: 0x1499e9e30
struct SSCSignatureSystemScanBounds {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Deg3 localRotation; // Offset: 0x8
    Vec3 min; // Offset: 0x28
    Vec3 max; // Offset: 0x40
};

// Original name: SShopComponentParams
// Size: 0x68
// VTable: 0x149a40130
struct SShopComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* offlineInventoryJSON; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    float eventSignalRadius; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    SpecialEventManufacturer specialEventManufacturer; // Offset: 0x30
    ShopFranchise franchise; // Offset: 0x48
    ARDataType acceptedCurrency; // Offset: 0x60
    ARDataType shopInventoryType; // Offset: 0x61
    bool allowTransactionsForPlayerInventory; // Offset: 0x62
    bool allowTransactionsForLocationInventory; // Offset: 0x63
    bool allowTransactionsForVehicleInventory; // Offset: 0x64
    uint8_t _pad_3[0x3]; // Offset: 0x65
};

// Original name: DynArray_SCItemClothingHiddenPartsParams
// Generated DynArray for base type: SCItemClothingHiddenPartsParams
// Size: 0x8
struct DynArray_SCItemClothingHiddenPartsParams {
    SCItemClothingHiddenPartsParams* m_data; // Offset: 0x0
};

// Original name: DevOwner
// Size: 0x18
// VTable: 0x149a911a0
struct DevOwner {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DevOwnerType_Base type_; /* type */ // Offset: 0x8
};

// Original name: DynArray_EntityEffectSystem_BaseSequencerTask
// Generated DynArray for base type: EntityEffectSystem_BaseSequencerTask
// Size: 0x8
struct DynArray_EntityEffectSystem_BaseSequencerTask {
    EntityEffectSystem_BaseSequencerTask* m_data; // Offset: 0x0
};

// Original name: AITargetingFormulaSettings
// Size: 0x60
// VTable: 0x149a94af0
struct AITargetingFormulaSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float onFootRangeMultiplier; // Offset: 0x8
    float inVehicleRangeMultiplier; // Offset: 0xc
    float selfDefenceMaxHealthMultiplier; // Offset: 0x10
    float protectedMaxHealthMultiplier; // Offset: 0x14
    float recentDamageDecayFactorPerSecond; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    AIFormulaScoreModifiers attackerCapacityScore; // Offset: 0x20
    AIFormulaScoreModifiers distanceScore; // Offset: 0x30
    AIFormulaScoreModifiers selfDefenceScore; // Offset: 0x40
    AIFormulaScoreModifiers protectionScore; // Offset: 0x50
};

// Original name: SActorForceReactionFilterDef
// Size: 0x140
// VTable: 0x149a4b570
struct SActorForceReactionFilterDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SActorForceReactionStateConfig stateConfig; // Offset: 0x8
    SActorForceReactionFilterItemDef twitches; // Offset: 0x18
    SActorForceReactionFilterItemDef directStaggers; // Offset: 0x30
    SActorForceReactionFilterItemDef directKnockdowns; // Offset: 0x48
    SActorForceReactionFilterItemDef flinches; // Offset: 0x60
    SActorForceReactionFilterItemDef indirectStaggers; // Offset: 0x78
    SActorForceReactionFilterItemDef indirectKnockdowns; // Offset: 0x90
    SActorForceReactionFilterItemDef sustainedDeltaFlinches; // Offset: 0xa8
    SActorForceReactionFilterItemDef sustainedDeltaStaggers; // Offset: 0xc0
    SActorForceReactionFilterItemDef sustainedDeltaKnockdowns; // Offset: 0xd8
    SActorForceReactionFilterItemDef sustainedStumble; // Offset: 0xf0
    SActorForceReactionFilterItemDef sustainedKnockdowns; // Offset: 0x108
    SActorForceReactionLeanFilterItemDef lean; // Offset: 0x120
};

// Original name: DynArray_BuildingBlocks_StringIntegerPair
// Generated DynArray for base type: BuildingBlocks_StringIntegerPair
// Size: 0x8
struct DynArray_BuildingBlocks_StringIntegerPair {
    BuildingBlocks_StringIntegerPair* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BorderRadiusCorner
// Size: 0x20
// VTable: 0x1499827a8
struct BuildingBlocks_BorderRadiusCorner {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_FixedOrRelativeValue radius; // Offset: 0x8
    bool chamfer; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
};

// Original name: BuildingBlocks_Size
// Size: 0x80
// VTable: 0x1499826a0
struct BuildingBlocks_Size {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_FixedOrRelativeValue width; // Offset: 0x8
    BuildingBlocks_FixedOrRelativeValue height; // Offset: 0x18
    BuildingBlocks_FixedOrRelativeValue depth; // Offset: 0x28
    BuildingBlocks_FixedOrRelativeValue minWidth; // Offset: 0x38
    BuildingBlocks_FixedOrRelativeValue minHeight; // Offset: 0x48
    BuildingBlocks_FixedOrRelativeValue maxWidth; // Offset: 0x58
    BuildingBlocks_FixedOrRelativeValue maxHeight; // Offset: 0x68
    bool enableMinWidth; // Offset: 0x78
    bool enableMinHeight; // Offset: 0x79
    bool enableMaxWidth; // Offset: 0x7a
    bool enableMaxHeight; // Offset: 0x7b
    uint8_t _pad_1[0x4]; // Offset: 0x7c
};

// Original name: BuildingBlocks_SegmentedFill
// Size: 0x50
// VTable: 0x149982de0
struct BuildingBlocks_SegmentedFill {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    BuildingBlocks_FixedOrRelativeValue segmentSize; // Offset: 0x10
    BuildingBlocks_FixedOrRelativeValue spaceSize; // Offset: 0x20
    float angle; // Offset: 0x30
    float xOffset; // Offset: 0x34
    BuildingBlocks_ColorBase segmentColor; // Offset: 0x38
    bool barFill; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
};

// Original name: DynArray_UI3DDisplayInput
// Generated DynArray for base type: UI3DDisplayInput
// Size: 0x8
struct DynArray_UI3DDisplayInput {
    UI3DDisplayInput* m_data; // Offset: 0x0
};

// Original name: CraftingBlueprintTier
// Size: 0x28
// VTable: 0x1499b8c88
struct CraftingBlueprintTier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipe_Base recipe; // Offset: 0x8
    CraftingResearch_Base research; // Offset: 0x18
};

// Original name: BuildingBlocks_GrabControlsPolicy
// Size: 0x40
// VTable: 0x149984a70
struct BuildingBlocks_GrabControlsPolicy {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType grabBounds; // Offset: 0x8
    float grabRotationSpeed; // Offset: 0xc
    float grabRotationSlowdown; // Offset: 0x10
    float grabResponsiveness; // Offset: 0x14
    BuildingBlocks_Range pitchRestrictions; // Offset: 0x18
    BuildingBlocks_Range yawRestrictions; // Offset: 0x28
    ARDataType grabRotationMode; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: DynArray_WeatherEffects_Atmosphere
// Generated DynArray for base type: WeatherEffects_Atmosphere
// Size: 0x8
struct DynArray_WeatherEffects_Atmosphere {
    WeatherEffects_Atmosphere* m_data; // Offset: 0x0
};

// Original name: CommodityTemperatureTolerance
// Size: 0x28
// VTable: 0x1499e1a88
struct CommodityTemperatureTolerance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float optimalTempMin; // Offset: 0x8
    float optimalTempMax; // Offset: 0xc
    float OptimalTempFallOff; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    TemperatureDamageControl damageCurveControl; // Offset: 0x18
};

// Original name: DynArray_ReputationValueSetting
// Generated DynArray for base type: ReputationValueSetting
// Size: 0x8
struct DynArray_ReputationValueSetting {
    ReputationValueSetting* m_data; // Offset: 0x0
};

// Original name: DynArray_INavigationCostVolumeExtender
// Generated DynArray for base type: INavigationCostVolumeExtender
// Size: 0x8
struct DynArray_INavigationCostVolumeExtender {
    INavigationCostVolumeExtender* m_data; // Offset: 0x0
};

// Original name: PlayerHostilityParams
// Size: 0x98
// VTable: 0x149966500
struct PlayerHostilityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableFriendlyFactionsHostility; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    PlayerHostilityAccidentalFireParams accidentalFireAIActorParams; // Offset: 0x10
    PlayerHostilityAccidentalFireParams accidentalFirePlayerActorParams; // Offset: 0x28
    PlayerHostilityAccidentalFireParams accidentalFireAIShipParams; // Offset: 0x40
    PlayerHostilityAccidentalFireParams accidentalFirePlayerShipParams; // Offset: 0x58
    float enemyRepHostilityThresholdMultiplier; // Offset: 0x70
    float allyRepHostilityThresholdMultiplier; // Offset: 0x74
    float nonTargetedHostilityThresholdMultiplier; // Offset: 0x78
    float criminalHostilityThresholdMultiplier; // Offset: 0x7c
    int32_t criminalWantedLevelThreshold; // Offset: 0x80
    bool changeHostilityOnFriendlyFire; // Offset: 0x84
    uint8_t _pad_2[0x3]; // Offset: 0x85
    float hostilityTimerMinSeconds; // Offset: 0x88
    float hostilityTimerMaxSeconds; // Offset: 0x8c
    float hostilityTimerIncreaseStep; // Offset: 0x90
    float neutralZoneExclusionTime; // Offset: 0x94
};

// Original name: DynArray_EntryOptionalData_Base
// Generated DynArray for base type: EntryOptionalData_Base
// Size: 0x8
struct DynArray_EntryOptionalData_Base {
    EntryOptionalData_Base* m_data; // Offset: 0x0
};

// Original name: SObjectiveAnnouncerSettingsDef
// Size: 0x78
// VTable: 0x149a27250
struct SObjectiveAnnouncerSettingsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEAAnnouncerParamsDef beginCapturingObjective; // Offset: 0x8
    SEAAnnouncerParamsDef objectiveGainedLocal; // Offset: 0x18
    SEAAnnouncerParamsDef objectiveGainedRemote; // Offset: 0x28
    SEAAnnouncerParamsDef objectiveLost; // Offset: 0x38
    SEAAnnouncerParamsDef objectiveLostNeutral; // Offset: 0x48
    SEAAnnouncerParamsDef objectiveContested; // Offset: 0x58
    SEAAnnouncerParamsDef finalObjective; // Offset: 0x68
};

// Original name: CraftingGameplayPropertyRecord
// Size: 0x18
// VTable: 0x1499b9640
struct CraftingGameplayPropertyRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingGameplayProperty_Base_NonRef gameplayProperty; // Offset: 0x8
};

// Original name: InteriorMapWorldUIConfig
// Size: 0x78
// VTable: 0x149a494c0
struct InteriorMapWorldUIConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InteriorMapWorldUISectionLabelsParams sectionLabels; // Offset: 0x8
    InteriorMapWorldUIRoomLabelsParams roomLabels; // Offset: 0x18
    InteriorMapWorldUIRoutePathLineParams routePathLine; // Offset: 0x28
    InteriorMapWorldUIZoneHostPlanarGridParams zoneHostPlanarGrid; // Offset: 0x38
    InteriorMapWorldUIFocusPointPlanarGridParams focusPointPlanarGrid; // Offset: 0x48
    InteriorMapWorldUICursorPointParams cursorPoint; // Offset: 0x58
    InteriorMapWorldUIDustParticlesParams dustParticles; // Offset: 0x68
};

// Original name: DynArray_TypeSubtypeParams
// Generated DynArray for base type: TypeSubtypeParams
// Size: 0x8
struct DynArray_TypeSubtypeParams {
    TypeSubtypeParams* m_data; // Offset: 0x0
};

// Original name: ItemResourceDeltaAmount
// Size: 0x20
// VTable: 0x1499a7748
struct ItemResourceDeltaAmount {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType resource; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SBaseResourceUnit resourceAmountPerSecond; // Offset: 0x10
};

// Original name: QuantumDriveLocTypeMusicMap
// Size: 0x48
// VTable: 0x149a52710
struct QuantumDriveLocTypeMusicMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicEvent musicLogicEvent; // Offset: 0x8
    GlobalResourceAudio musicWwiseEvent; // Offset: 0x20
    ARDataType type_; /* type */ // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
};

// Original name: LightningTargetMode_Internal
// Size: 0x70
// VTable: 0x1499793e8
struct LightningTargetMode_Internal {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float strikeDensity; // Offset: 0x8
    float scaleMultiplier; // Offset: 0xc
    Range length; // Offset: 0x10
    Range distanceRange; // Offset: 0x20
    GlobalResourceAudio audioEmitterTrigger; // Offset: 0x30
    GlobalResourceAudio audioTargetTrigger; // Offset: 0x50
};

// Original name: SScopeAttachmentParams
// Size: 0x58
// VTable: 0x149a69188
struct SScopeAttachmentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scopeType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    GlobalResourceAudio transitionInSound; // Offset: 0x10
    GlobalResourceAudio transitionOutSound; // Offset: 0x30
    bool activateByDefault; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
};

// Original name: SWeaponAudioParams
// Size: 0xd0
// VTable: 0x149a611b0
struct SWeaponAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool visorAudioAvailable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    AudioRtpc ammoCountRTPC; // Offset: 0x10
    GlobalResourceAudio switchFireModeAudioTrigger; // Offset: 0x30
    AudioRtpc weaponPowerRTPC; // Offset: 0x50
    AudioRtpc weaponHeatRTPC; // Offset: 0x70
    GlobalResourceAudio overheatAudioTrigger; // Offset: 0x90
    GlobalResourceAudio overheatEndAudioTrigger; // Offset: 0xb0
};

// Original name: TransitStationAnnouncement
// Size: 0x50
// VTable: 0x1499d8770
struct TransitStationAnnouncement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* stationName; // Offset: 0x8
    GlobalResourceAudio preArrival; // Offset: 0x10
    GlobalResourceAudio postDeparture; // Offset: 0x30
};

// Original name: WheelAudioParams
// Size: 0x48
// VTable: 0x149a11658
struct WheelAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio loopStart; // Offset: 0x8
    GlobalResourceAudio loopStop; // Offset: 0x28
};

// Original name: DialogueRealm
// Size: 0x48
// VTable: 0x149a8c688
struct DialogueRealm {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio defaultTrigger; // Offset: 0x8
    GlobalResourceAudio defaultFemaleTrigger; // Offset: 0x28
};

// Original name: AudioAreaAmbienceComponentParams
// Size: 0xf8
// VTable: 0x1499e0948
struct AudioAreaAmbienceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isEnabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    GlobalResourceAudio audioPlayTrigger; // Offset: 0x20
    GlobalResourceAudio audioStopTrigger; // Offset: 0x40
    AudioRtpc areaFadeRTPC; // Offset: 0x60
    CryStringT* audioEnvironment; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    CryStringT* audioSwitch; // Offset: 0x90
    uint8_t _pad_3[0x8]; // Offset: 0x98
    CryStringT* audioSwitchStateInside; // Offset: 0xa0
    uint8_t _pad_4[0x8]; // Offset: 0xa8
    CryStringT* audioSwitchStateNear; // Offset: 0xb0
    uint8_t _pad_5[0x8]; // Offset: 0xb8
    CryStringT* audioSwitchStateFar; // Offset: 0xc0
    uint8_t _pad_6[0x8]; // Offset: 0xc8
    int32_t soundObstructionType; // Offset: 0xd0
    float fadeDistance; // Offset: 0xd4
    float environmentFadeDistance; // Offset: 0xd8
    float audioSignature; // Offset: 0xdc
    float positionFadeDistance; // Offset: 0xe0
    float pitch; // Offset: 0xe4
    float volume; // Offset: 0xe8
    float atsVolumeOffset; // Offset: 0xec
    bool isManagedAudioObject; // Offset: 0xf0
    uint8_t _pad_7[0x7]; // Offset: 0xf1
};

// Original name: MiningAudioParams
// Size: 0x190
// VTable: 0x149a0b960
struct MiningAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc mineablePowerLevelRtpc; // Offset: 0x8
    AudioRtpc mineableDangerBreakingRtpc; // Offset: 0x28
    AudioRtpc mineableOptimalBreakingRtpc; // Offset: 0x48
    AudioRtpc mineableMassRtpc; // Offset: 0x68
    AudioRtpc mineablePowerIncreasingRtpc; // Offset: 0x88
    AudioRtpc mineableCrackGlowStrengthRtpc; // Offset: 0xa8
    AudioRtpc mineableBreakZoneIndicatorRtpc; // Offset: 0xc8
    float mineablePowerIncreasingFallOff; // Offset: 0xe8
    uint8_t _pad_1[0x4]; // Offset: 0xec
    GlobalResourceAudio miningStartTrigger; // Offset: 0xf0
    GlobalResourceAudio miningStopTrigger; // Offset: 0x110
    GlobalResourceAudio goodFracturedTrigger; // Offset: 0x130
    GlobalResourceAudio badFracturedTrigger; // Offset: 0x150
    GlobalResourceAudio extractedTrigger; // Offset: 0x170
};

// Original name: QuantumDriveStateMusicMap
// Size: 0x48
// VTable: 0x149a52650
struct QuantumDriveStateMusicMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicEvent musicLogicEvent; // Offset: 0x8
    GlobalResourceAudio musicWwiseEvent; // Offset: 0x20
    ARDataType state; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
};

// Original name: SCItemTurretJointMovementAxisParams
// Size: 0x150
// VTable: 0x149a5a450
struct SCItemTurretJointMovementAxisParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableIKRotationalSpeed; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    AudioRtpc audioRtpcMoveToTarget; // Offset: 0x10
    AudioRtpc audioRtpcMoveToTargetDistance; // Offset: 0x30
    AudioRtpc audioRtpcRotationSpeedAveraged; // Offset: 0x50
    GlobalResourceAudio startRotateAudioTrigger; // Offset: 0x70
    GlobalResourceAudio stopRotateAudioTrigger; // Offset: 0x90
    GlobalResourceAudio rotateStartedAudioOneShotTrigger; // Offset: 0xb0
    GlobalResourceAudio rotateStoppedAudioOneShotTrigger; // Offset: 0xd0
    GlobalResourceAudio rotationDirectionChangedAudioTrigger; // Offset: 0xf0
    float rotateStartedAudioCooldown; // Offset: 0x110
    float rotateStoppedAudioCooldown; // Offset: 0x114
    float rotationDirectionChangedAudioCooldown; // Offset: 0x118
    int32_t rotationSpeedAudioAveragingFrames; // Offset: 0x11c
    float minMovementAngleForAudio; // Offset: 0x120
    float speed; // Offset: 0x124
    float acceleration_timeToFullSpeed; // Offset: 0x128
    float jerk_timeToFullAcceleration; // Offset: 0x12c
    float accelerationDecay; // Offset: 0x130
    uint8_t _pad_2[0x4]; // Offset: 0x134
    SCItemTurretAngleLimitParams angleLimits; // Offset: 0x138
    uint8_t _pad_3[0x8]; // Offset: 0x148
};

// Original name: SSalvageStructuralAudioParams
// Size: 0x318
// VTable: 0x149a3da38
struct SSalvageStructuralAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio sourcePlayResonanceFieldOneshot; // Offset: 0x8
    GlobalResourceAudio sourcePlayResonanceField; // Offset: 0x28
    GlobalResourceAudio sourceStopResonanceField; // Offset: 0x48
    GlobalResourceAudio sourcePlayDisintegrationFieldOneshot; // Offset: 0x68
    GlobalResourceAudio sourcePlayDisintegrationField; // Offset: 0x88
    GlobalResourceAudio sourceStopDisintegrationField; // Offset: 0xa8
    GlobalResourceAudio sourcePlayVacuum; // Offset: 0xc8
    GlobalResourceAudio sourceStopVacuum; // Offset: 0xe8
    GlobalResourceAudio sourcePlayGrinding; // Offset: 0x108
    GlobalResourceAudio sourceStopGrinding; // Offset: 0x128
    GlobalResourceAudio targetPlayResonanceStress; // Offset: 0x148
    GlobalResourceAudio targetStopResonanceStress; // Offset: 0x168
    GlobalResourceAudio targetPlayDisintegrationStress; // Offset: 0x188
    GlobalResourceAudio targetStopDisintegrationStress; // Offset: 0x1a8
    GlobalResourceAudio targetPlayResonanceBreakOneshot; // Offset: 0x1c8
    GlobalResourceAudio targetPlayDisintegrationBreakOneshot; // Offset: 0x1e8
    float targetAuxProxyLifetime; // Offset: 0x208
    uint8_t _pad_1[0x4]; // Offset: 0x20c
    AudioRtpc sourceAverageResonanceStrengthRtpc; // Offset: 0x210
    AudioRtpc targetResonanceStrengthRtpc; // Offset: 0x230
    AudioRtpc sourceAverageDisintegrationStrengthRtpc; // Offset: 0x250
    AudioRtpc targetDisintegrationStrengthRtpc; // Offset: 0x270
    AudioRtpc sourceIsGatheringMaterialRtpc; // Offset: 0x290
    float isGatheringMaterialHoldTime; // Offset: 0x2b0
    uint8_t _pad_2[0x4]; // Offset: 0x2b4
    AudioRtpc targetSizeRtpc; // Offset: 0x2b8
    AudioRtpc targetValueRtpc; // Offset: 0x2d8
    AudioRtpc selectedFieldRtpc; // Offset: 0x2f8
};

// Original name: LocalPlayerAudioEnvironmentParams
// Size: 0x420
// VTable: 0x149a2a870
struct LocalPlayerAudioEnvironmentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceAudio dynamicAmbienceStart; // Offset: 0x18
    AudioRtpc listenerUnderwaterRtpc; // Offset: 0x38
    GlobalResourceAudio dynamicWallaFriendlyStart; // Offset: 0x58
    GlobalResourceAudio dynamicWallaHostileStart; // Offset: 0x78
    GlobalResourceAudio dynamicWallaFriendlyStop; // Offset: 0x98
    GlobalResourceAudio dynamicWallaHostileStop; // Offset: 0xb8
    GlobalResourceAudio dynamicWallaBedFriendlyStart; // Offset: 0xd8
    GlobalResourceAudio dynamicWallaBedHostileStart; // Offset: 0xf8
    GlobalResourceAudio dynamicWallaBedFriendlyStop; // Offset: 0x118
    GlobalResourceAudio dynamicWallaBedHostileStop; // Offset: 0x138
    AudioRtpc dynamicWallaBedPropagationVolumeRTPC; // Offset: 0x158
    AudioRtpc dynamicWallaNPCCountRtpc; // Offset: 0x178
    AudioRtpc dynamicWallaFemalePercentageRtpc; // Offset: 0x198
    AudioRtpc dynamicWallaRoomSizeRtpc; // Offset: 0x1b8
    AudioSwitch dynamicWallaUnthreatenedAudioSwitch; // Offset: 0x1d8
    AudioSwitch dynamicWallaThreatenedAudioSwitch; // Offset: 0x210
    int32_t minimumActorsForWalla; // Offset: 0x248
    float wallaGroupCatchmentArea; // Offset: 0x24c
    GlobalResourceAudio spaceAmbienceStartTrigger; // Offset: 0x250
    GlobalResourceAudio spaceAmbienceStopTrigger; // Offset: 0x270
    GlobalResourceAudio rainStartTrigger; // Offset: 0x290
    GlobalResourceAudio rainStopTrigger; // Offset: 0x2b0
    GlobalResourceAudio rainOnRoofStartTrigger; // Offset: 0x2d0
    GlobalResourceAudio rainOnRoofStopTrigger; // Offset: 0x2f0
    AudioRtpc rainAmountRtpc; // Offset: 0x310
    AudioRtpc distanceToOutsideRtpc; // Offset: 0x330
    AudioRtpc outsideDoorOpenAmountRtpc; // Offset: 0x350
    AudioRtpc shipVelocityThroughRain; // Offset: 0x370
    GlobalResourceAudio fireSpreadAudioTrigger; // Offset: 0x390
    GlobalResourceAudio firePointAudioTrigger; // Offset: 0x3b0
    AudioRtpc fireRadiusRtpc; // Offset: 0x3d0
    AudioRtpc fireStrengthRtpc; // Offset: 0x3f0
    float fireMaxAudioRadius; // Offset: 0x410
    float fireRoomConnectionRadius; // Offset: 0x414
    int32_t maxFirePointsWithAudio; // Offset: 0x418
    uint8_t _pad_1[0x4]; // Offset: 0x41c
};

// Original name: SCExtendedLocalizationLevelParams
// Size: 0x90
// VTable: 0x149a87c60
struct SCExtendedLocalizationLevelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* LogoSimplifiedWhite; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* FrontendBackground; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CLocIdentifier* History; // Offset: 0x28
    CLocIdentifier* Callout1; // Offset: 0x30
    CLocIdentifier* Callout2; // Offset: 0x38
    CLocIdentifier* Callout3; // Offset: 0x40
    int32_t UIPriority; // Offset: 0x48
    uint8_t _pad_3[0x4]; // Offset: 0x4c
    GlobalResourceAudio locationAudioPlayTrigger; // Offset: 0x50
    GlobalResourceAudio locationAudioStopTrigger; // Offset: 0x70
};

// Original name: GPUParticleAudio
// Size: 0x108
// VTable: 0x1499a9fa8
struct GPUParticleAudio {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio emissionStartTriggerOneShot; // Offset: 0x8
    GlobalResourceAudio emissionStopTriggerOneShot; // Offset: 0x28
    GlobalResourceAudio emissionStartTriggerLoop; // Offset: 0x48
    GlobalResourceAudio emissionStopTriggerLoop; // Offset: 0x68
    AudioRtpc pulseDurationRtpc; // Offset: 0x88
    AudioRtpc normPulseTimeRtpc; // Offset: 0xa8
    AudioRtpc strengthValRtpc; // Offset: 0xc8
    AudioRtpc scalingFactorRtpc; // Offset: 0xe8
};

// Original name: AudioTriggerSpotParams
// Size: 0x160
// VTable: 0x1499e0550
struct AudioTriggerSpotParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    GlobalResourceAudio audioTriggerPlayTriggerName; // Offset: 0x20
    GlobalResourceAudio audioTriggerStopTriggerName; // Offset: 0x40
    float attenuationScalingFactor; // Offset: 0x60
    float volume; // Offset: 0x64
    float pitch; // Offset: 0x68
    float lowPassFilter; // Offset: 0x6c
    float highPassFilter; // Offset: 0x70
    float pitchRandomRange; // Offset: 0x74
    float volumeRandomRange; // Offset: 0x78
    bool playRandom; // Offset: 0x7c
    uint8_t _pad_2[0x3]; // Offset: 0x7d
    float minDelay; // Offset: 0x80
    float maxDelay; // Offset: 0x84
    bool delayIsFromEnd; // Offset: 0x88
    uint8_t _pad_3[0x3]; // Offset: 0x89
    float radiusRandom; // Offset: 0x8c
    bool playOnX; // Offset: 0x90
    bool playOnY; // Offset: 0x91
    bool playOnZ; // Offset: 0x92
    uint8_t _pad_4[0x5]; // Offset: 0x93
    AudioRtpc audioRTPCUserRtpc1Name; // Offset: 0x98
    float userRtpc1Value; // Offset: 0xb8
    uint8_t _pad_5[0x4]; // Offset: 0xbc
    AudioRtpc audioRTPCUserRtpc2Name; // Offset: 0xc0
    float userRtpc2Value; // Offset: 0xe0
    uint8_t _pad_6[0x4]; // Offset: 0xe4
    AudioRtpc audioRTPCUserRtpc3Name; // Offset: 0xe8
    float userRtpc3Value; // Offset: 0x108
    int32_t soundObstructionType; // Offset: 0x10c
    int32_t voiceStealingRule; // Offset: 0x110
    int32_t voiceCount; // Offset: 0x114
    int32_t multiPositionType; // Offset: 0x118
    uint8_t _pad_7[0x4]; // Offset: 0x11c
    AudioRtpc audioRTPCAreaFadeRtpc; // Offset: 0x120
    bool enablePropagationAndSoundsim; // Offset: 0x140
    uint8_t _pad_8[0x7]; // Offset: 0x141
    CommsChannelDef commsChannel; // Offset: 0x148
};

// Original name: PingSFXSharedParams
// Size: 0x88
// VTable: 0x1499c4e88
struct PingSFXSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio invokePing; // Offset: 0x8
    GlobalResourceAudio invokePingCharged; // Offset: 0x28
    GlobalResourceAudio invokePingBlocked; // Offset: 0x48
    GlobalResourceAudio invokePingCooldown; // Offset: 0x68
};

// Original name: SMusicEvent
// Size: 0x40
// VTable: 0x149a2a988
struct SMusicEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicEvent musicLogicEvent; // Offset: 0x8
    GlobalResourceAudio musicWwiseEvent; // Offset: 0x20
};

// Original name: JumpDriveStateAudioMap
// Size: 0x70
// VTable: 0x1499f4988
struct JumpDriveStateAudioMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio enterStateLoop; // Offset: 0x8
    GlobalResourceAudio enterStateOneShot; // Offset: 0x28
    GlobalResourceAudio exitStateLoop; // Offset: 0x48
    ARDataType jumpDriveState; // Offset: 0x68
    uint8_t _pad_1[0x4]; // Offset: 0x6c
};

// Original name: SCItemCommsComponentSetup
// Size: 0x118
// VTable: 0x149a9bdf0
struct SCItemCommsComponentSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool showInContactsList; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float broadcastRange; // Offset: 0xc
    GlobalResourceAudio startIncomingCallSound; // Offset: 0x10
    GlobalResourceAudio stopIncomingCallSound; // Offset: 0x30
    GlobalResourceAudio startOutgoingCallSound; // Offset: 0x50
    GlobalResourceAudio stopOutgoingCallSound; // Offset: 0x70
    GlobalResourceAudio introTrigger; // Offset: 0x90
    GlobalResourceAudio outroTrigger; // Offset: 0xb0
    GlobalResourceAudio joinTrigger; // Offset: 0xd0
    GlobalResourceAudio leaveTrigger; // Offset: 0xf0
    bool renderParticles; // Offset: 0x110
    uint8_t _pad_2[0x7]; // Offset: 0x111
};

// Original name: PlanetOceanDepthAssignment
// Size: 0x58
// VTable: 0x1499eeae8
struct PlanetOceanDepthAssignment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float waterDepth; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    GlobalResourceAudio assignmentStartTrigger; // Offset: 0x10
    GlobalResourceAudio assignmentStopTrigger; // Offset: 0x30
    float recalculationDistance; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
};

// Original name: RewardNotification
// Size: 0xa0
// VTable: 0x149972400
struct RewardNotification {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool enablePrompt; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    CLocIdentifier* awardNotification; // Offset: 0x10
    CLocIdentifier* multiAwardNotification; // Offset: 0x18
    CLocIdentifier* selectionPrompt; // Offset: 0x20
    CLocIdentifier* shipKioskDestination; // Offset: 0x28
    CLocIdentifier* freightElevatorDestination; // Offset: 0x30
    CLocIdentifier* freightElevatorCannotRetrieve; // Offset: 0x38
    CryStringT* rewardExtendedTextToken; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    CryStringT* destinationLocationExtendedTextToken; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    CryStringT* kioskDestinationExtendedTextToken; // Offset: 0x60
    uint8_t _pad_4[0x8]; // Offset: 0x68
    CryStringT* rewardAmountExtendedTextToken; // Offset: 0x70
    uint8_t _pad_5[0x8]; // Offset: 0x78
    GlobalResourceAudio musicWwiseEvent; // Offset: 0x80
};

// Original name: SPowerSourceComponentParams
// Size: 0x48
// VTable: 0x149a465f8
struct SPowerSourceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType initialState; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    int32_t requiredJumpstartVoltage; // Offset: 0x1c
    bool isInfinitePowerSource; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
    GlobalResourceAudio objectJumpstartAudioOneShot; // Offset: 0x28
};

// Original name: SWeaponAudioReportEnvironment
// Size: 0x80
// VTable: 0x149a61288
struct SWeaponAudioReportEnvironment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* wwiseEnvironmentName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    GlobalResourceAudio reportAudioTrigger; // Offset: 0x18
    GlobalResourceAudio reportAudioTriggerStopLoop; // Offset: 0x38
    AudioRtpc reportLoopMixAmountRTPC; // Offset: 0x58
    uint8_t _pad_2[0x8]; // Offset: 0x78
};

// Original name: ShipWideAudioObject
// Size: 0x90
// VTable: 0x149a190d8
struct ShipWideAudioObject {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* boneName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 attachOffset; // Offset: 0x18
    Ang3 attachOffsetRotation; // Offset: 0x30
    GlobalResourceAudio loopStart; // Offset: 0x48
    GlobalResourceAudio loopStop; // Offset: 0x68
    bool updatePosition; // Offset: 0x88
    uint8_t _pad_2[0x7]; // Offset: 0x89
};

// Original name: SUsableTransitionParams
// Size: 0x50
// VTable: 0x149a919a8
struct SUsableTransitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio transitionAudioTrigger; // Offset: 0x8
    CryStringT* aiSignal; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    CryStringT* additionalTags; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    ARDataType eventTriggerMask; // Offset: 0x48
    uint8_t _pad_3[0x4]; // Offset: 0x4c
};

// Original name: ProceduralPlanetAudioRiverData
// Size: 0x88
// VTable: 0x149a110e8
struct ProceduralPlanetAudioRiverData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio riverLoopStart; // Offset: 0x8
    AudioRtpc riverFlowSpeedRtpc; // Offset: 0x28
    AudioRtpc riverWidthRtpc; // Offset: 0x48
    AudioRtpc distanceFromRiverEdgeRtpc; // Offset: 0x68
};

// Original name: TransitDisplayPanelGenericAnnouncements
// Size: 0x50
// VTable: 0x1499d88a8
struct TransitDisplayPanelGenericAnnouncements {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio preDepartureTriggerID; // Offset: 0x8
    GlobalResourceAudio preArrivalTriggerID; // Offset: 0x28
    float preArrivalAlertTime; // Offset: 0x48
    float preDepartureAlertTime; // Offset: 0x4c
};

// Original name: EAPlayableAreaControllerComponentParamsDef
// Size: 0xc8
// VTable: 0x149a27ee8
struct EAPlayableAreaControllerComponentParamsDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    EAPlayableAreaMovementTypeParamsDef paramsOnFoot; // Offset: 0x18
    EAPlayableAreaMovementTypeParamsDef paramsGroundVehicle; // Offset: 0x28
    EAPlayableAreaMovementTypeParamsDef paramsSpaceship; // Offset: 0x38
    float despawnDelay; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
    CLocIdentifier* OOBAttackingTeamMessage; // Offset: 0x50
    CLocIdentifier* OOBDefendingTeamMessage; // Offset: 0x58
    CLocIdentifier* OOBGeneralMessage; // Offset: 0x60
    GlobalResourceAudio audiotriggerOutOfBounds; // Offset: 0x68
    AudioRtpc dangerLevelRtpc; // Offset: 0x88
    AudioRtpc outOfBoundsTimeRemainingRtpc; // Offset: 0xa8
};

// Original name: SCJukeboxParams
// Size: 0x58
// VTable: 0x149a2f398
struct SCJukeboxParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceAudio startTrigger; // Offset: 0x18
    GlobalResourceAudio stopTrigger; // Offset: 0x38
};

// Original name: LightAudioComponentParams
// Size: 0x188
// VTable: 0x1499a9bb8
struct LightAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enableAudio; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    GlobalResourceAudio playTrigger; // Offset: 0x20
    GlobalResourceAudio stopTrigger; // Offset: 0x40
    GlobalResourceAudio lightGroupStateDefaultPlayTrigger; // Offset: 0x60
    GlobalResourceAudio lightGroupStateDefaultStopTrigger; // Offset: 0x80
    GlobalResourceAudio lightGroupStateAuxiliaryPlayTrigger; // Offset: 0xa0
    GlobalResourceAudio lightGroupStateAuxiliaryStopTrigger; // Offset: 0xc0
    GlobalResourceAudio lightGroupStateEmergencyPlayTrigger; // Offset: 0xe0
    GlobalResourceAudio lightGroupStateEmergencyStopTrigger; // Offset: 0x100
    GlobalResourceAudio lightGroupStateCinematicPlayTrigger; // Offset: 0x120
    GlobalResourceAudio lightGroupStateCinematicStopTrigger; // Offset: 0x140
    AudioRtpc luminanceRtpc; // Offset: 0x160
    float attenuationScale; // Offset: 0x180
    float volume_db; // Offset: 0x184
};

// Original name: PhysicalAudioCollisionTrigger
// Size: 0x30
// VTable: 0x1499df430
struct PhysicalAudioCollisionTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio trigger; // Offset: 0x8
    float oneShotMinPlayTime; // Offset: 0x28
    bool attachToObject; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
};

// Original name: ScanSFXSharedParams
// Size: 0x68
// VTable: 0x1499c48e0
struct ScanSFXSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio startScan; // Offset: 0x8
    GlobalResourceAudio stopScan; // Offset: 0x28
    GlobalResourceAudio infoPopulate; // Offset: 0x48
};

// Original name: SurfaceAudioProperties
// Size: 0x1a0
// VTable: 0x1499df328
struct SurfaceAudioProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* surfaceType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float damping; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    GlobalResourceAudio collisionTrigger; // Offset: 0x20
    float collisionTriggerMinPlayTime; // Offset: 0x40
    uint8_t _pad_3[0x4]; // Offset: 0x44
    GlobalResourceAudio slideStartTrigger; // Offset: 0x48
    GlobalResourceAudio rollStartTrigger; // Offset: 0x68
    GlobalResourceAudio slideStopTrigger; // Offset: 0x88
    GlobalResourceAudio rollStopTrigger; // Offset: 0xa8
    AudioRtpc rtpcSlideVelocity; // Offset: 0xc8
    AudioRtpc rtpcRollVelocity; // Offset: 0xe8
    AudioRtpc rtpcMassOther; // Offset: 0x108
    AudioRtpc rtpcTimeSinceLastOneshot; // Offset: 0x128
    AudioRtpc rtpcMomentum; // Offset: 0x148
    AudioSwitch surfaceSwitchAndState; // Offset: 0x168
};

// Original name: ShipAudioTrackviewParams
// Size: 0xa8
// VTable: 0x149a192d0
struct ShipAudioTrackviewParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio startShipTrackviewMovement; // Offset: 0x8
    GlobalResourceAudio stopShipTrackviewMovement; // Offset: 0x28
    AudioRtpc shipTrackviewVelRtpc; // Offset: 0x48
    AudioRtpc shipTrackviewAccelRtpc; // Offset: 0x68
    AudioRtpc shipDistanceFromCameraRtpc; // Offset: 0x88
};

// Original name: GasCloudLightAudioParams
// Size: 0x48
// VTable: 0x1499cccc8
struct GasCloudLightAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio gasCloudLoop; // Offset: 0x8
    AudioRtpc gasCloudNormIntensityRtpc; // Offset: 0x28
};

// Original name: GroundVehicleAudioComponentParams
// Size: 0x4a8
// VTable: 0x149a11f58
struct GroundVehicleAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* engineSoundPosition; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    GlobalResourceAudio engineStartupOneShot; // Offset: 0x28
    GlobalResourceAudio engineRunLoopStart; // Offset: 0x48
    GlobalResourceAudio engineRunLoopStop; // Offset: 0x68
    CryStringT* hornSoundPosition; // Offset: 0x88
    uint8_t _pad_2[0x8]; // Offset: 0x90
    GlobalResourceAudio hornLoopStart; // Offset: 0x98
    GlobalResourceAudio hornLoopStop; // Offset: 0xb8
    GlobalResourceAudio suspensionBumpSound; // Offset: 0xd8
    GlobalResourceAudio gearChangeSound; // Offset: 0xf8
    GlobalResourceAudio throttleOnSound; // Offset: 0x118
    GlobalResourceAudio throttleOffSound; // Offset: 0x138
    GlobalResourceAudio damagedSound; // Offset: 0x158
    GlobalResourceAudio destroyedSound; // Offset: 0x178
    GlobalResourceAudio boostStartTrigger; // Offset: 0x198
    GlobalResourceAudio boostStopTrigger; // Offset: 0x1b8
    AudioRtpc speedRtpc; // Offset: 0x1d8
    AudioRtpc throttleRtpc; // Offset: 0x1f8
    AudioRtpc throttleLoadRtpc; // Offset: 0x218
    AudioRtpc throttleOnAtLoadRtpc; // Offset: 0x238
    AudioRtpc throttleOffAtLoadRtpc; // Offset: 0x258
    AudioRtpc rpmRtpc; // Offset: 0x278
    AudioRtpc rpmLoadRtpc; // Offset: 0x298
    AudioRtpc rpmAccelerationRtpc; // Offset: 0x2b8
    AudioRtpc slipRtpc; // Offset: 0x2d8
    AudioRtpc slipForwardsRtpc; // Offset: 0x2f8
    AudioRtpc slipLateralRtpc; // Offset: 0x318
    AudioRtpc steerRtpc; // Offset: 0x338
    AudioRtpc steerStrainRtpc; // Offset: 0x358
    AudioRtpc groundContactsRtpc; // Offset: 0x378
    AudioRtpc airTimeRtpc; // Offset: 0x398
    AudioRtpc suspensionCompressionRtpc; // Offset: 0x3b8
    AudioRtpc suspensionStrokeRtpc; // Offset: 0x3d8
    AudioRtpc bumpCompressionRtpc; // Offset: 0x3f8
    AudioRtpc surfaceRoughnessRtpc; // Offset: 0x418
    AudioRtpc boostDurationRtpc; // Offset: 0x438
    AudioRtpc remainingBoostRtpc; // Offset: 0x458
    float bumpMinSusp; // Offset: 0x478
    float bumpMinSpeed; // Offset: 0x47c
    float bumpIntensityMult; // Offset: 0x480
    float bumpMinTime; // Offset: 0x484
    float throttleLoadLerpUpTime; // Offset: 0x488
    float throttleLoadLerpDownTime; // Offset: 0x48c
    float skidLerpSpeed; // Offset: 0x490
    float skidCentrifugalFactor; // Offset: 0x494
    float skidBrakeFactor; // Offset: 0x498
    float skidPowerLockFactor; // Offset: 0x49c
    float skidLateralFactor; // Offset: 0x4a0
    float skidForwardFactor; // Offset: 0x4a4
};

// Original name: JumpDriveMusicEvent
// Size: 0x40
// VTable: 0x1499f5178
struct JumpDriveMusicEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicEvent musicLogicEvent; // Offset: 0x8
    GlobalResourceAudio musicWwiseEvent; // Offset: 0x20
};

// Original name: EACapturableEntityComponentDef
// Size: 0x208
// VTable: 0x149a26d18
struct EACapturableEntityComponentDef {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType capturableType; // Offset: 0x18
    bool skipNeutral; // Offset: 0x1c
    bool instantReset; // Offset: 0x1d
    bool allowOwnerChange; // Offset: 0x1e
    bool enableOnCompleteCapture; // Offset: 0x1f
    bool allowTeamAssistBoost; // Offset: 0x20
    bool defendersAffectInfluence; // Offset: 0x21
    uint8_t _pad_1[0x6]; // Offset: 0x22
    GlobalResourceAudio audioTriggerAmbienceLoop; // Offset: 0x28
    GlobalResourceAudio audioTriggerHackingStarted; // Offset: 0x48
    GlobalResourceAudio audioTriggerHackingStopped; // Offset: 0x68
    GlobalResourceAudio audioTriggerHackingInterrupted; // Offset: 0x88
    GlobalResourceAudio audioTriggerHackingStartReversal; // Offset: 0xa8
    GlobalResourceAudio audioTriggerHackingComplete; // Offset: 0xc8
    GlobalResourceAudio audioTriggerAttackerEnter; // Offset: 0xe8
    GlobalResourceAudio audioTriggerAttackerExit; // Offset: 0x108
    GlobalResourceAudio audioTriggerDefenderEnter; // Offset: 0x128
    GlobalResourceAudio audioTriggerDefenderExit; // Offset: 0x148
    AudioRtpc audioRtpcControl; // Offset: 0x168
    AudioRtpc audioRtpcCaptureProcess; // Offset: 0x188
    AudioRtpc audioRtpcCaptureRate; // Offset: 0x1a8
    AudioRtpc audioRtpcAttackerCount; // Offset: 0x1c8
    AudioRtpc audioRtpcDefenderCount; // Offset: 0x1e8
};

// Original name: SGalactapediaEntry
// Size: 0x80
// VTable: 0x149a37dd0
struct SGalactapediaEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* indexName; // Offset: 0x8
    CLocIdentifier* name; // Offset: 0x10
    CLocIdentifier* dataSummary; // Offset: 0x18
    CLocIdentifier* contentText; // Offset: 0x20
    CryStringT* imagePath; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    GlobalResourceAudio audioTrigger; // Offset: 0x38
    bool defaultUnlocked; // Offset: 0x58
    uint8_t _pad_2[0x7]; // Offset: 0x59
    SGalactapediaEntry tierBase; // Offset: 0x60
    int32_t tierIndex; // Offset: 0x78
    uint8_t _pad_3[0x4]; // Offset: 0x7c
};

// Original name: HackableParams
// Size: 0x1d0
// VTable: 0x149a2d040
struct HackableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float baseDuration; // Offset: 0x18
    float baseErrorChance; // Offset: 0x1c
    uint32_t numErrorChecks; // Offset: 0x20
    float maxPauseDuration; // Offset: 0x24
    float updateProgressDeltaTime; // Offset: 0x28
    bool resetAfterHackSuccess; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    GlobalResourceAudio audioTriggerProgressLoopStart; // Offset: 0x30
    GlobalResourceAudio audioTriggerProgressLoopStop; // Offset: 0x50
    GlobalResourceAudio audioTriggerStart; // Offset: 0x70
    GlobalResourceAudio audioTriggerPause; // Offset: 0x90
    GlobalResourceAudio audioTriggerResume; // Offset: 0xb0
    GlobalResourceAudio audioTriggerError; // Offset: 0xd0
    GlobalResourceAudio audioTriggerPartSuccess; // Offset: 0xf0
    GlobalResourceAudio audioTriggerSuccess; // Offset: 0x110
    GlobalResourceAudio audioTriggerReset; // Offset: 0x130
    AudioRtpc audioRtpcOverallProgress; // Offset: 0x150
    AudioRtpc audioRtpcPartProgress; // Offset: 0x170
    AudioRtpc audioRtpcTotalDuration; // Offset: 0x190
    AudioRtpc audioRtpcRemainingDuration; // Offset: 0x1b0
};

// Original name: QuantumStateMusicMap
// Size: 0x48
// VTable: 0x149a526b0
struct QuantumStateMusicMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicEvent musicLogicEvent; // Offset: 0x8
    GlobalResourceAudio musicWwiseEvent; // Offset: 0x20
    ARDataType state; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
};

// Original name: SThrowAudioParams
// Size: 0x70
// VTable: 0x149a8e520
struct SThrowAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio onThrownAudioTrigger; // Offset: 0x8
    AudioRtpc collisionSpeedAudioRTPC; // Offset: 0x28
    GlobalResourceAudio onCollisionAudioTrigger; // Offset: 0x48
    ARDataType onCollisionAudioPerceptionInfo; // Offset: 0x68
    float onCollisionAudioPerceptionRadius; // Offset: 0x6c
};

// Original name: SSCLocalPlayerAudioComponentParams
// Size: 0x778
// VTable: 0x149a826c0
struct SSCLocalPlayerAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceAudio buffEarRingingStart; // Offset: 0x18
    GlobalResourceAudio buffEarRingingStop; // Offset: 0x38
    GlobalResourceAudio buffTempAudioLossStart; // Offset: 0x58
    GlobalResourceAudio buffTempAudioLossStop; // Offset: 0x78
    GlobalResourceAudio buffMuffledAudioStart; // Offset: 0x98
    GlobalResourceAudio buffMuffledAudioStop; // Offset: 0xb8
    GlobalResourceAudio shiveringStart; // Offset: 0xd8
    GlobalResourceAudio shiveringStop; // Offset: 0xf8
    GlobalResourceAudio headacheAudioStart; // Offset: 0x118
    GlobalResourceAudio headacheAudioStop; // Offset: 0x138
    GlobalResourceAudio stomachGroanAudioStart; // Offset: 0x158
    GlobalResourceAudio stomachGroanAudioStop; // Offset: 0x178
    GlobalResourceAudio heartPulse; // Offset: 0x198
    GlobalResourceAudio vacuumStart; // Offset: 0x1b8
    GlobalResourceAudio vacuumStop; // Offset: 0x1d8
    GlobalResourceAudio wantedLevelUp; // Offset: 0x1f8
    GlobalResourceAudio wantedLevelDown; // Offset: 0x218
    GlobalResourceAudio wantedLevelMax; // Offset: 0x238
    GlobalResourceAudio remoteTurretOn; // Offset: 0x258
    GlobalResourceAudio remoteTurretOff; // Offset: 0x278
    GlobalResourceAudio remoteTurretLoopStart; // Offset: 0x298
    GlobalResourceAudio remoteTurretLoopStop; // Offset: 0x2b8
    GlobalResourceAudio geigerCounterAudioStart; // Offset: 0x2d8
    GlobalResourceAudio geigerCounterAudioStop; // Offset: 0x2f8
    AudioRtpc helmetRtpc; // Offset: 0x318
    AudioRtpc buffEarRingRtpc; // Offset: 0x338
    AudioRtpc tempAudioLossRtpc; // Offset: 0x358
    AudioRtpc muffledAudioRtpc; // Offset: 0x378
    AudioRtpc shiveringRtpc; // Offset: 0x398
    AudioRtpc headacheAudioRtpc; // Offset: 0x3b8
    AudioRtpc stomachGroanAudioRtpc; // Offset: 0x3d8
    AudioRtpc heartPulseDurationRtpc; // Offset: 0x3f8
    AudioRtpc heartPulseBpmRtpc; // Offset: 0x418
    AudioRtpc bodyTempRtpc; // Offset: 0x438
    AudioRtpc suitTempRtpc; // Offset: 0x458
    AudioRtpc weaponAdsLocalPlayerRtpc; // Offset: 0x478
    AudioRtpc localPerspectiveRtpc; // Offset: 0x498
    AudioRtpc playerActorContainedRtpc; // Offset: 0x4b8
    AudioRtpc targetedByPlayerRtpc; // Offset: 0x4d8
    AudioRtpc isAttackingPlayerShipRtpc; // Offset: 0x4f8
    AudioRtpc localPlayerInThisOCRtpc; // Offset: 0x518
    AudioRtpc globalSoundSimEnabledRtpc; // Offset: 0x538
    AudioRtpc globalAdsLocalPlayerRtpc; // Offset: 0x558
    AudioRtpc globalPlayerActorInActiveVehicleSeatRtpc; // Offset: 0x578
    AudioRtpc globalTimeOfDayRtpc; // Offset: 0x598
    AudioRtpc globalEMRtpc; // Offset: 0x5b8
    AudioRtpc globalIRRtpc; // Offset: 0x5d8
    AudioRtpc globalDistortionRtpc; // Offset: 0x5f8
    AudioRtpc armsLockRtpc; // Offset: 0x618
    AudioRtpc heldItemWeightRtpc; // Offset: 0x638
    AudioRtpc heldItemTooHeavyRtpc; // Offset: 0x658
    AudioRtpc shakeRtpc; // Offset: 0x678
    AudioRtpc torsoWearRtpc; // Offset: 0x698
    AudioRtpc geigerCounterFrequencyRtpc; // Offset: 0x6b8
    AudioRtpc globalAmbienceRoomSizeRtpc; // Offset: 0x6d8
    AudioRtpc globalShipRoomSizeRtpc; // Offset: 0x6f8
    AudioRtpc globalRoomUniformityRtpc; // Offset: 0x718
    AudioRtpc globalRealisticModeRtpc; // Offset: 0x738
    AudioRtpc globalIsInNonShipRoomRtpc; // Offset: 0x758
};

// Original name: AudioWaterInteractions
// Size: 0x230
// VTable: 0x149a126e8
struct AudioWaterInteractions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio waterCollisionOneShot; // Offset: 0x8
    GlobalResourceAudio waterBulletOneShot; // Offset: 0x28
    GlobalResourceAudio waterHitLoopStart; // Offset: 0x48
    GlobalResourceAudio waterHitLoopStop; // Offset: 0x68
    GlobalResourceAudio waterForceLoopStart; // Offset: 0x88
    GlobalResourceAudio waterForceLoopStop; // Offset: 0xa8
    GlobalResourceAudio waterNPCLoopStart; // Offset: 0xc8
    GlobalResourceAudio waterNPCLoopStop; // Offset: 0xe8
    GlobalResourceAudio waterPlayerLoopStart; // Offset: 0x108
    GlobalResourceAudio waterPlayerLoopStop; // Offset: 0x128
    AudioRtpc splashSimSizeRtpc; // Offset: 0x148
    AudioRtpc splashRadiusRtpc; // Offset: 0x168
    AudioRtpc splashDisplacementRtpc; // Offset: 0x188
    AudioRtpc splashVolumeRtpc; // Offset: 0x1a8
    AudioRtpc smallestSplashDimensionRtpc; // Offset: 0x1c8
    AudioRtpc impactSpeedRtpc; // Offset: 0x1e8
    AudioRtpc waterDepthRtpc; // Offset: 0x208
    int32_t framesBeforeLoopStop; // Offset: 0x228
    uint8_t _pad_1[0x4]; // Offset: 0x22c
};

// Original name: SQuantumBoostAudioParams
// Size: 0x128
// VTable: 0x149a53730
struct SQuantumBoostAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio bubbleStart; // Offset: 0x8
    GlobalResourceAudio bubbleStop; // Offset: 0x28
    AudioRtpc bubbleRtpc; // Offset: 0x48
    GlobalResourceAudio boostStart; // Offset: 0x68
    GlobalResourceAudio boostStop; // Offset: 0x88
    AudioRtpc boostRtpc; // Offset: 0xa8
    GlobalResourceAudio enterBoost; // Offset: 0xc8
    GlobalResourceAudio exitBoost; // Offset: 0xe8
    AudioRtpc angleOffsetRtpc; // Offset: 0x108
};

// Original name: GPUParticleAudioStruct
// Size: 0x108
// VTable: 0x1499aa118
struct GPUParticleAudioStruct {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio emissionStartTriggerOneShot; // Offset: 0x8
    GlobalResourceAudio emissionStopTriggerOneShot; // Offset: 0x28
    GlobalResourceAudio emissionStartTriggerLoop; // Offset: 0x48
    GlobalResourceAudio emissionStopTriggerLoop; // Offset: 0x68
    AudioRtpc pulseDurationRtpc; // Offset: 0x88
    AudioRtpc normPulseTimeRtpc; // Offset: 0xa8
    AudioRtpc strengthValRtpc; // Offset: 0xc8
    AudioRtpc scalingFactorRtpc; // Offset: 0xe8
};

// Original name: QuantumMusicEventBase
// Size: 0x40
// VTable: 0x149a525f8
struct QuantumMusicEventBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MusicLogicEvent musicLogicEvent; // Offset: 0x8
    GlobalResourceAudio musicWwiseEvent; // Offset: 0x20
};

// Original name: SOrdnanceAudioParams
// Size: 0x88
// VTable: 0x149a24298
struct SOrdnanceAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio trailAudioTrigger; // Offset: 0x8
    GlobalResourceAudio trailStopAudioTrigger; // Offset: 0x28
    GlobalResourceAudio engineIgniteAudioTrigger; // Offset: 0x48
    GlobalResourceAudio releaseAudioTrigger; // Offset: 0x68
};

// Original name: ProceduralPlanetAudioDisturbanceDef
// Size: 0xb0
// VTable: 0x149a10d48
struct ProceduralPlanetAudioDisturbanceDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool byActor; // Offset: 0x8
    bool byWheeledVehicle; // Offset: 0x9
    bool bySpaceship; // Offset: 0xa
    bool byOther; // Offset: 0xb
    float idleTimeThreshold; // Offset: 0xc
    GlobalResourceAudio enterSound; // Offset: 0x10
    GlobalResourceAudio disturbedLoopStart; // Offset: 0x30
    GlobalResourceAudio disturbedLoopStop; // Offset: 0x50
    GlobalResourceAudio redisturbSound; // Offset: 0x70
    GlobalResourceAudio exitSound; // Offset: 0x90
};

// Original name: DynArray_GlobalResourceAudio
// Generated DynArray for base type: GlobalResourceAudio
// Size: 0x8
struct DynArray_GlobalResourceAudio {
    GlobalResourceAudio* m_data; // Offset: 0x0
};

// Original name: CraftingRecipeCostsRecord
// Size: 0x18
// VTable: 0x1499b8750
struct CraftingRecipeCostsRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipeCosts_Base_NonRef costs; // Offset: 0x8
};

// Original name: CraftingRecipeCosts_Ref
// Size: 0x18
// VTable: 0x1499b8810
struct CraftingRecipeCosts_Ref {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipeCosts_Base_NonRef costsReference; // Offset: 0x8
};

// Original name: CraftingRecipeResults_Ref
// Size: 0x18
// VTable: 0x1499b89a0
struct CraftingRecipeResults_Ref {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipeCosts_Base_NonRef resultsReference; // Offset: 0x8
};

// Original name: DynArray_DefaultActionDef
// Generated DynArray for base type: DefaultActionDef
// Size: 0x8
struct DynArray_DefaultActionDef {
    DefaultActionDef* m_data; // Offset: 0x0
};

// Original name: DynArray_HarvestConditionBase
// Generated DynArray for base type: HarvestConditionBase
// Size: 0x8
struct DynArray_HarvestConditionBase {
    HarvestConditionBase* m_data; // Offset: 0x0
};

// Original name: MissionPropertyValue_AIName
// Size: 0x48
// VTable: 0x149969738
struct MissionPropertyValue_AIName {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool randomName; // Offset: 0x8
    bool randomLastName; // Offset: 0x9
    bool randomNickName; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
    CLocIdentifier* characterGivenName; // Offset: 0x10
    CLocIdentifier* characterGivenLastName; // Offset: 0x18
    CLocIdentifier* characterGivenNickName; // Offset: 0x20
    CharacterNameData characterNameData; // Offset: 0x28
    float chanceOfNickName; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: DynArray_ConsumableEffect
// Generated DynArray for base type: ConsumableEffect
// Size: 0x8
struct DynArray_ConsumableEffect {
    ConsumableEffect* m_data; // Offset: 0x0
};

// Original name: ContactHighlightStateBaseParams
// Size: 0x20
// VTable: 0x1499c5610
struct ContactHighlightStateBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGBA color; // Offset: 0x8
};

// Original name: ContactHighlightShaderParams
// Size: 0x40
// VTable: 0x1499c5760
struct ContactHighlightShaderParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGBA color; // Offset: 0x8
    float outlineWidth; // Offset: 0x20
    float alpha; // Offset: 0x24
    bool outlineOnly; // Offset: 0x28
    uint8_t _pad_1[0x3]; // Offset: 0x29
    float interferenceAmount; // Offset: 0x2c
    float interferenceSpeed; // Offset: 0x30
    float interferenceTiling; // Offset: 0x34
    float interferenceBrightness; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: PersonalThoughtHologramParams
// Size: 0x78
// VTable: 0x149a99af0
struct PersonalThoughtHologramParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGBA mainColour; // Offset: 0x8
    RGBA selectedColour; // Offset: 0x20
    CryStringT* defaultHoloMaterialName; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
    CryStringT* selectedHoloMaterialName; // Offset: 0x48
    uint8_t _pad_2[0x8]; // Offset: 0x50
    PersonalThoughtHologramAnimationParams animationParams; // Offset: 0x58
};

// Original name: UIWorldDisplayPathStateParams
// Size: 0x40
// VTable: 0x149aaa350
struct UIWorldDisplayPathStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceMaterial renderNodeMaterial; // Offset: 0x8
    RGBA color; // Offset: 0x20
    float scrollUvSpeed; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: ContactHighlightMaterialParams
// Size: 0x40
// VTable: 0x1499c57c0
struct ContactHighlightMaterialParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGBA color; // Offset: 0x8
    GlobalResourceMaterial material; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x38
};

// Original name: ScreenEffects_ParamValue_Color
// Size: 0x20
// VTable: 0x14999c1c0
struct ScreenEffects_ParamValue_Color {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGBA value; // Offset: 0x8
};

// Original name: HUDSilhouetteParams
// Size: 0x30
// VTable: 0x149a994a0
struct HUDSilhouetteParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGBA color; // Offset: 0x8
    float occludedAlpha; // Offset: 0x20
    float outlineWidth; // Offset: 0x24
    bool outlineOnly; // Offset: 0x28
    bool tintObject; // Offset: 0x29
    uint8_t _pad_1[0x6]; // Offset: 0x2a
};

// Original name: DynArray_RGBA
// Generated DynArray for base type: RGBA
// Size: 0x8
struct DynArray_RGBA {
    RGBA* m_data; // Offset: 0x0
};

// Original name: DynArray_SCoreInventoryItem
// Generated DynArray for base type: SCoreInventoryItem
// Size: 0x8
struct DynArray_SCoreInventoryItem {
    SCoreInventoryItem* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioRtpcWithDefault
// Generated DynArray for base type: AudioRtpcWithDefault
// Size: 0x8
struct DynArray_AudioRtpcWithDefault {
    AudioRtpcWithDefault* m_data; // Offset: 0x0
};

// Original name: SCuttableComponentParams
// Size: 0x30
// VTable: 0x149a0f9e0
struct SCuttableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCuttableShapeObjectParams cuttableShapeParams; // Offset: 0x18
};

// Original name: DynArray_SCItemTurretCustomAngleLimit
// Generated DynArray for base type: SCItemTurretCustomAngleLimit
// Size: 0x8
struct DynArray_SCItemTurretCustomAngleLimit {
    SCItemTurretCustomAngleLimit* m_data; // Offset: 0x0
};

// Original name: SpawnDescriptionEntry
// Size: 0x28
// VTable: 0x149a94b78
struct SpawnDescriptionEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* description; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BaseMissionPropertyValue spawnGroup; // Offset: 0x18
};

// Original name: MissionProperty
// Size: 0x38
// VTable: 0x14996ac80
struct MissionProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* missionVariableName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* extendedTextToken; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    BaseMissionPropertyValue value; // Offset: 0x28
};

// Original name: AttackCategoryParamsBase
// Size: 0x28
// VTable: 0x149aa41f0
struct AttackCategoryParamsBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageInfo damageInfo; // Offset: 0x8
};

// Original name: DamageMacro
// Size: 0x28
// VTable: 0x1499ae090
struct DamageMacro {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageInfo damageInfo; // Offset: 0x8
};

// Original name: QuantumDriveNotifications
// Size: 0xa0
// VTable: 0x149a52570
struct QuantumDriveNotifications {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuantumDriveNotification calibrationStarted; // Offset: 0x8
    QuantumDriveNotification calibrationCompleted; // Offset: 0x30
    QuantumDriveNotification calibrationFailed; // Offset: 0x58
    CryStringT* playerNameToken; // Offset: 0x80
    uint8_t _pad_1[0x8]; // Offset: 0x88
    CryStringT* selectedDestinationToken; // Offset: 0x90
    uint8_t _pad_2[0x8]; // Offset: 0x98
};

// Original name: DynArray_CraftingGameplayPropertyImplValueRange_Float
// Generated DynArray for base type: CraftingGameplayPropertyImplValueRange_Float
// Size: 0x8
struct DynArray_CraftingGameplayPropertyImplValueRange_Float {
    CraftingGameplayPropertyImplValueRange_Float* m_data; // Offset: 0x0
};

// Original name: DynArray_SpeedThreshold
// Generated DynArray for base type: SpeedThreshold
// Size: 0x8
struct DynArray_SpeedThreshold {
    SpeedThreshold* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_ComponentParameterInputBase
// Generated DynArray for base type: BuildingBlocks_ComponentParameterInputBase
// Size: 0x8
struct DynArray_BuildingBlocks_ComponentParameterInputBase {
    BuildingBlocks_ComponentParameterInputBase* m_data; // Offset: 0x0
};

// Original name: DynArray_SMastergraphStateOverride
// Generated DynArray for base type: SMastergraphStateOverride
// Size: 0x8
struct DynArray_SMastergraphStateOverride {
    SMastergraphStateOverride* m_data; // Offset: 0x0
};

// Original name: DynArray_RGB8
// Generated DynArray for base type: RGB8
// Size: 0x8
struct DynArray_RGB8 {
    RGB8* m_data; // Offset: 0x0
};

// Original name: SDamageMapShaderValues
// Size: 0x70
// VTable: 0x149a7a0f8
struct SDamageMapShaderValues {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float damageMapMultiplier; // Offset: 0x8
    float visualHitRadius; // Offset: 0xc
    SDamageMapShaderValueDetails thickness; // Offset: 0x10
    SDamageMapShaderValueDetails deformation; // Offset: 0x28
    SDamageMapShaderValueDetails burn; // Offset: 0x40
    SDamageMapShaderValueDetails temperature; // Offset: 0x58
};

// Original name: SFortitudeLevelStats
// Size: 0x40
// VTable: 0x149a849e0
struct SFortitudeLevelStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xpValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_float* modifiers; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: STakedownTechniqueLevelStats
// Size: 0x40
// VTable: 0x149a84aa0
struct STakedownTechniqueLevelStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xpValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_float* modifiers; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SReflexLevelStats
// Size: 0x40
// VTable: 0x149a84980
struct SReflexLevelStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xpValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_float* modifiers; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SPlayerRoleShakeMultipliers
// Size: 0x38
// VTable: 0x149a4dd00
struct SPlayerRoleShakeMultipliers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_float* multipliers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SStrengthLevelStats
// Size: 0x40
// VTable: 0x149a84920
struct SStrengthLevelStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xpValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_float* modifiers; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SLightStatePreset
// Size: 0x58
// VTable: 0x1499a55a0
struct SLightStatePreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* tag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_float* transitionDelays; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    float transitionLength; // Offset: 0x48
    bool transitionReverse; // Offset: 0x4c
    uint8_t transitionStyle; // Offset: 0x4d
    bool fadeFromBlack; // Offset: 0x4e
    uint8_t _pad_3[0x1]; // Offset: 0x4f
    float delayWhileBlack; // Offset: 0x50
    uint8_t _pad_4[0x4]; // Offset: 0x54
};

// Original name: BuildingBlocks_StaticArrayDataNumber
// Size: 0x48
// VTable: 0x14998a900
struct BuildingBlocks_StaticArrayDataNumber {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_float* values; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: PingDetectionLevelParams
// Size: 0x98
// VTable: 0x1499c4c00
struct PingDetectionLevelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_float* contactSensitivityFactors; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_float* blobSensitivityFactors; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_float* pierceFactors; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: SVaultingTechniqueLevelStats
// Size: 0x40
// VTable: 0x149a84a40
struct SVaultingTechniqueLevelStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xpValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_float* modifiers; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SFitnessLevelStats
// Size: 0x40
// VTable: 0x149a848c0
struct SFitnessLevelStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xpValue; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_float* modifiers; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: FireHazardGlobalIgnition
// Size: 0xd8
// VTable: 0x14997b5c8
struct FireHazardGlobalIgnition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float globalIgnitionChanceMultiplier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_float* explosionChanceMultiplier; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_float* projectileChanceMultiplier; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
    DynArray_float* collisionChanceMultiplier; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x78
    float globalFlashIgnitionThresholdMultiplier; // Offset: 0xa0
    uint8_t _pad_5[0x4]; // Offset: 0xa4
    DynArray_float* damageTypeIgnitionModifiers; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xb0
};

// Original name: SVehicleAiDamageModifiers
// Size: 0x38
// VTable: 0x1499aac90
struct SVehicleAiDamageModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_float* modifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: HudFeedbackParams
// Size: 0x98
// VTable: 0x149a3cc50
struct HudFeedbackParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_float* staminaWarning; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_float* atmosphereQualityWarning; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_float* atmospherePressureWarning; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: AIHealthThresholdsConfig
// Size: 0x38
// VTable: 0x149a02c60
struct AIHealthThresholdsConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_float* healthThresholds; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ContractResult_RefundBuyIn
// Size: 0x40
// VTable: 0x149971fd0
struct ContractResult_RefundBuyIn {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float refundMultiplier; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: OcclusionCheckSharedParams
// Size: 0x40
// VTable: 0x1499c5ae8
struct OcclusionCheckSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enablePassiveDetectionOcclusion; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_bool* enableActiveDetectionOcclusion; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: ContractResult_CompletionBounty
// Size: 0x38
// VTable: 0x1499721c0
struct ContractResult_CompletionBounty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: UIV2Markers
// Size: 0x70
// VTable: 0x1499d5268
struct UIV2Markers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool useNewMarkers; // Offset: 0x8
    bool showBoxouts; // Offset: 0x9
    bool showBoxoutRTT; // Offset: 0xa
    bool useOnlyStandaloneObjectiveMarkers; // Offset: 0xb
    bool navpointsIgnoreShowInAllZones; // Offset: 0xc
    bool usePUObjectiveLinking; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    DynArray_bool* useV2Provider; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_bool* useV2TrackerType; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: SAimableGameModeRoleParams
// Size: 0x50
// VTable: 0x1499e57e0
struct SAimableGameModeRoleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* gimbalModeVariants; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float autoGimbalTrackingAngle; // Offset: 0x38
    bool autoGimbalsActAsManualWithoutTrack; // Offset: 0x3c
    uint8_t _pad_2[0x3]; // Offset: 0x3d
    float assistMinTrackingAngle; // Offset: 0x40
    float assistTrackingAngleBuffer; // Offset: 0x44
    bool adsDisableAimAssistForFixedMountedWeapons; // Offset: 0x48
    bool adsTriggersAdsModes; // Offset: 0x49
    bool manualGimbalsAllowAimAssist; // Offset: 0x4a
    bool preferAssistedModesOnStart; // Offset: 0x4b
    bool preferManualModesOnStart; // Offset: 0x4c
    bool preferAutoGimbalIfAvailable; // Offset: 0x4d
    uint8_t _pad_3[0x2]; // Offset: 0x4e
};

// Original name: ContractResult_CalculatedReward
// Size: 0x38
// VTable: 0x149971e18
struct ContractResult_CalculatedReward {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: OperatorModeAvailability
// Size: 0x40
// VTable: 0x149a07458
struct OperatorModeAvailability {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType defaultMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_bool* availableModes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: RelayFilterParams
// Size: 0x38
// VTable: 0x1499a8280
struct RelayFilterParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* allowedResources; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: FireParams
// Size: 0x40
// VTable: 0x1499d47d8
struct FireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType enabledMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_bool* behaviors; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: ContractResultBase
// Size: 0x38
// VTable: 0x149971db0
struct ContractResultBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BuildingBlocks_StaticArrayDataBoolean
// Size: 0x48
// VTable: 0x14998a840
struct BuildingBlocks_StaticArrayDataBoolean {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_bool* values; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: GlobalShopTerminalParams
// Size: 0x248
// VTable: 0x149a3f958
struct GlobalShopTerminalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t displayedItemsPerPage; // Offset: 0x8
    float confirmationAutoCloseTime; // Offset: 0xc
    int32_t maxBuyingMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_ARDataType* inventoryQueryItemsType; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    CLocIdentifier* all_items_category; // Offset: 0x48
    SGlobalShopErrors shopErrors; // Offset: 0x50
};

// Original name: SDFMVictoryConditionsLives
// Size: 0xa0
// VTable: 0x1499d6ca8
struct SDFMVictoryConditionsLives {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float timeLimit; // Offset: 0x18
    float timeRemainingNoNewPlayers; // Offset: 0x1c
    int32_t scoreLimit; // Offset: 0x20
    bool checkScore; // Offset: 0x24
    bool checkTime; // Offset: 0x25
    bool checkScoreAsTime; // Offset: 0x26
    bool decideRoundWinnerUsingRoundPoints; // Offset: 0x27
    bool decideGameWinnerWithTeamScore; // Offset: 0x28
    bool playHalfwaySound; // Offset: 0x29
    bool playHalfwaySoundAfterUpdatingTimeLimit; // Offset: 0x2a
    bool playTimeAnnouncements; // Offset: 0x2b
    bool canPlayMusicMoods; // Offset: 0x2c
    bool doOpponentDisconnectedCheck; // Offset: 0x2d
    uint8_t _pad_1[0x2]; // Offset: 0x2e
    float narrowMatchWinRatio; // Offset: 0x30
    float bigRoundWinRatio; // Offset: 0x34
    float narrowMatchDefeatRatio; // Offset: 0x38
    float bigRoundDefeatRatio; // Offset: 0x3c
    bool endOnKill; // Offset: 0x40
    bool endOnAllOthersRanOutOfLives; // Offset: 0x41
    bool winAwardToTeamTopScorersOnly; // Offset: 0x42
    uint8_t _pad_2[0x1]; // Offset: 0x43
    int32_t winAwardPlayerCount; // Offset: 0x44
    DynArray_ARDataType* winAwardIds; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    EAPlayerHUDParams playerHUDParams; // Offset: 0x78
    ARDataType scoringType; // Offset: 0x98
    bool nextKillWins; // Offset: 0x9c
    uint8_t _pad_4[0x3]; // Offset: 0x9d
};

// Original name: SDFMVictoryConditionsTeam
// Size: 0xa0
// VTable: 0x1499d6c98
struct SDFMVictoryConditionsTeam {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float timeLimit; // Offset: 0x18
    float timeRemainingNoNewPlayers; // Offset: 0x1c
    int32_t scoreLimit; // Offset: 0x20
    bool checkScore; // Offset: 0x24
    bool checkTime; // Offset: 0x25
    bool checkScoreAsTime; // Offset: 0x26
    bool decideRoundWinnerUsingRoundPoints; // Offset: 0x27
    bool decideGameWinnerWithTeamScore; // Offset: 0x28
    bool playHalfwaySound; // Offset: 0x29
    bool playHalfwaySoundAfterUpdatingTimeLimit; // Offset: 0x2a
    bool playTimeAnnouncements; // Offset: 0x2b
    bool canPlayMusicMoods; // Offset: 0x2c
    bool doOpponentDisconnectedCheck; // Offset: 0x2d
    uint8_t _pad_1[0x2]; // Offset: 0x2e
    float narrowMatchWinRatio; // Offset: 0x30
    float bigRoundWinRatio; // Offset: 0x34
    float narrowMatchDefeatRatio; // Offset: 0x38
    float bigRoundDefeatRatio; // Offset: 0x3c
    bool endOnKill; // Offset: 0x40
    bool endOnAllOthersRanOutOfLives; // Offset: 0x41
    bool winAwardToTeamTopScorersOnly; // Offset: 0x42
    uint8_t _pad_2[0x1]; // Offset: 0x43
    int32_t winAwardPlayerCount; // Offset: 0x44
    DynArray_ARDataType* winAwardIds; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    EAPlayerHUDParams playerHUDParams; // Offset: 0x78
    ARDataType scoringType; // Offset: 0x98
    bool nextKillWins; // Offset: 0x9c
    uint8_t _pad_4[0x3]; // Offset: 0x9d
};

// Original name: SSimulationParamsTranslationalProjection
// Size: 0x88
// VTable: 0x1499bb0d0
struct SSimulationParamsTranslationalProjection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool UseRedirect; // Offset: 0x8
    bool UseDebugSetup; // Offset: 0x9
    bool UseDebugText; // Offset: 0xa
    bool UseSimulation; // Offset: 0xb
    uint8_t SimFPS; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    Vec3 PivotOffset; // Offset: 0x10
    ARDataType ProjectionType; // Offset: 0x28
    float Radius; // Offset: 0x2c
    Vec3 TranslationAxis; // Offset: 0x30
    Vec2 Capsule; // Offset: 0x48
    DynArray_ARDataType* AvailableCollisionProxies; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
};

// Original name: WebCustomizationItemTypeName
// Size: 0x40
// VTable: 0x1499b1288
struct WebCustomizationItemTypeName {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    DynArray_ARDataType* itemTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: ItemPreview_CameraSettings
// Size: 0x60
// VTable: 0x149a95010
struct ItemPreview_CameraSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* bones; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    Vec3 offset; // Offset: 0x38
    float distanceScaler; // Offset: 0x50
    float fieldOfView; // Offset: 0x54
    float pitch; // Offset: 0x58
    uint8_t _pad_2[0x4]; // Offset: 0x5c
};

// Original name: MaskStatusBuff
// Size: 0x40
// VTable: 0x1499fc500
struct MaskStatusBuff {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* maskIfCausedByStatus; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x10
};

// Original name: SHealingBeamBodyPartHighlightingParams
// Size: 0x58
// VTable: 0x149a76828
struct SHealingBeamBodyPartHighlightingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* characterAttachmentName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ARDataType* zonesToShow; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x38]; // Offset: 0x20
};

// Original name: SGroupChannel
// Size: 0x40
// VTable: 0x149a9c7f0
struct SGroupChannel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* groupType; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x10
};

// Original name: AudioWhitelist
// Size: 0x38
// VTable: 0x1499b1470
struct AudioWhitelist {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* triggerTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: GameModeCustomSetting
// Size: 0x70
// VTable: 0x1499b50c0
struct GameModeCustomSetting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType type_; /* type */ // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_ARDataType* controlledTypes; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    CLocIdentifier* displayName; // Offset: 0x50
    CLocIdentifier* description; // Offset: 0x58
    float min; // Offset: 0x60
    float max; // Offset: 0x64
    float step; // Offset: 0x68
    float defaultValueOverride; // Offset: 0x6c
};

// Original name: ItemPreview_SkinnedLoadoutOverride
// Size: 0x48
// VTable: 0x149a94f18
struct ItemPreview_SkinnedLoadoutOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* skinnedLoadout; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ARDataType* itemTypes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: STargetableItemType
// Size: 0x40
// VTable: 0x149a55a48
struct STargetableItemType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* subItemTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ARDataType type_; /* type */ // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: MasterModeExclusion
// Size: 0x40
// VTable: 0x149a07a08
struct MasterModeExclusion {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ARDataType* masterModeExclusions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SyncedAttackCategoryParams
// Size: 0x88
// VTable: 0x149a029b8
struct SyncedAttackCategoryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageInfo damageInfo; // Offset: 0x8
    DynArray_ARDataType* comboBrokenSuccess; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    DynArray_ARDataType* comboBrokenFailure; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
};

// Original name: ItemThrottleParams
// Size: 0x48
// VTable: 0x149a07920
struct ItemThrottleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float min; // Offset: 0x8
    float max; // Offset: 0xc
    float default_; /* default */ // Offset: 0x10
    bool scalingMinimum; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    DynArray_ARDataType* affectedResources; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: InventoryContainer
// Size: 0x68
// VTable: 0x149a9e2c0
struct InventoryContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 interiorDimensions; // Offset: 0x8
    InventoryContainerTypeBase inventoryType; // Offset: 0x20
    DynArray_ARDataType* excludedItemTypes; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x38
};

// Original name: InventoryContainerItemTypeFilter
// Size: 0x40
// VTable: 0x149a9dcb8
struct InventoryContainerItemTypeFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ARDataType* itemSubTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: StatusEffectAbilityLock
// Size: 0x40
// VTable: 0x1499fe7b8
struct StatusEffectAbilityLock {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statusEffectType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ARDataType* abilitiesToLock; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: ConsumableEffectClearBuffEffect
// Size: 0x40
// VTable: 0x149a25570
struct ConsumableEffectClearBuffEffect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* effectDescription; // Offset: 0x8
    DynArray_ARDataType* buffTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: SItemTypeFilter
// Size: 0x40
// VTable: 0x149a7abc8
struct SItemTypeFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ARDataType* itemSubTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: OrificeBloodParams
// Size: 0x48
// VTable: 0x1499ffb18
struct OrificeBloodParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType bloodStatTriggerType; // Offset: 0x8
    bool probabilistic; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float bloodChance; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    DynArray_ARDataType* orifices; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x20
};

// Original name: SocialTab
// Size: 0x40
// VTable: 0x1499fa028
struct SocialTab {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    DynArray_ARDataType* activeNetworkTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: SSimulationParamsSpringEllipsoid
// Size: 0xb0
// VTable: 0x1499bafd0
struct SSimulationParamsSpringEllipsoid {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool UseRedirect; // Offset: 0x8
    bool UseDebugSetup; // Offset: 0x9
    bool UseDebugText; // Offset: 0xa
    bool UseSimulation; // Offset: 0xb
    uint8_t SimFPS; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    Vec3 PivotOffset; // Offset: 0x10
    float Mass; // Offset: 0x28
    float Gravity; // Offset: 0x2c
    float Damping; // Offset: 0x30
    float Stiffness; // Offset: 0x34
    Vec3 StiffnessTarget; // Offset: 0x38
    float DiskRadius; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    Vec2 SphereScale; // Offset: 0x58
    Vec2 DiskRotation; // Offset: 0x68
    ARDataType ProjectionType; // Offset: 0x78
    float Radius; // Offset: 0x7c
    DynArray_ARDataType* AvailableCollisionProxies; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x88
};

// Original name: SDFMVictoryConditionsPlayer
// Size: 0xa0
// VTable: 0x1499d6c08
struct SDFMVictoryConditionsPlayer {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float timeLimit; // Offset: 0x18
    float timeRemainingNoNewPlayers; // Offset: 0x1c
    int32_t scoreLimit; // Offset: 0x20
    bool checkScore; // Offset: 0x24
    bool checkTime; // Offset: 0x25
    bool checkScoreAsTime; // Offset: 0x26
    bool decideRoundWinnerUsingRoundPoints; // Offset: 0x27
    bool decideGameWinnerWithTeamScore; // Offset: 0x28
    bool playHalfwaySound; // Offset: 0x29
    bool playHalfwaySoundAfterUpdatingTimeLimit; // Offset: 0x2a
    bool playTimeAnnouncements; // Offset: 0x2b
    bool canPlayMusicMoods; // Offset: 0x2c
    bool doOpponentDisconnectedCheck; // Offset: 0x2d
    uint8_t _pad_1[0x2]; // Offset: 0x2e
    float narrowMatchWinRatio; // Offset: 0x30
    float bigRoundWinRatio; // Offset: 0x34
    float narrowMatchDefeatRatio; // Offset: 0x38
    float bigRoundDefeatRatio; // Offset: 0x3c
    bool endOnKill; // Offset: 0x40
    bool endOnAllOthersRanOutOfLives; // Offset: 0x41
    bool winAwardToTeamTopScorersOnly; // Offset: 0x42
    uint8_t _pad_2[0x1]; // Offset: 0x43
    int32_t winAwardPlayerCount; // Offset: 0x44
    DynArray_ARDataType* winAwardIds; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    EAPlayerHUDParams playerHUDParams; // Offset: 0x78
    ARDataType scoringType; // Offset: 0x98
    bool nextKillWins; // Offset: 0x9c
    uint8_t _pad_4[0x3]; // Offset: 0x9d
};

// Original name: MasterModeExclusionsOverride
// Size: 0x38
// VTable: 0x149a07720
struct MasterModeExclusionsOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* masterModeExclusions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MarkerDeclutteringCullingOrder
// Size: 0x58
// VTable: 0x149a4a018
struct MarkerDeclutteringCullingOrder {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t systemLimit; // Offset: 0x8
    int32_t standardLimit; // Offset: 0xc
    int32_t revealedLimit; // Offset: 0x10
    float revealDuration; // Offset: 0x14
    float referenceDistance; // Offset: 0x18
    float distanceWeight; // Offset: 0x1c
    float screenDistanceWeight; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    DynArray_ARDataType* categories; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: TransformationInterpolatorParams
// Size: 0xd8
// VTable: 0x149aa8610
struct TransformationInterpolatorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 startOffsetValues; // Offset: 0x8
    Vec3 endOffsetValues; // Offset: 0x20
    DynArray_ARDataType* offsetInterpolationModes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
    Ang3 startRotationValues; // Offset: 0x68
    Ang3 endRotationValues; // Offset: 0x80
    DynArray_ARDataType* rotationInterpolationModes; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xa0
    float startScaleValue; // Offset: 0xc8
    float endScaleValue; // Offset: 0xcc
    ARDataType scaleInterpolationMode; // Offset: 0xd0
    uint8_t _pad_3[0x7]; // Offset: 0xd1
};

// Original name: PlayerLimitationsProfile
// Size: 0x38
// VTable: 0x149a39710
struct PlayerLimitationsProfile {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* abilitiesToBlock; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SUninsuredItem
// Size: 0x40
// VTable: 0x149a16878
struct SUninsuredItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Type; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ARDataType* SubTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: DefaultEntitlementRecord
// Size: 0x40
// VTable: 0x1499b0e48
struct DefaultEntitlementRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* Entitlements; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool subscribersOnly; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
};

// Original name: SStandardVictoryConditionsTeam
// Size: 0x98
// VTable: 0x1499d4550
struct SStandardVictoryConditionsTeam {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float timeLimit; // Offset: 0x18
    float timeRemainingNoNewPlayers; // Offset: 0x1c
    int32_t scoreLimit; // Offset: 0x20
    bool checkScore; // Offset: 0x24
    bool checkTime; // Offset: 0x25
    bool checkScoreAsTime; // Offset: 0x26
    bool decideRoundWinnerUsingRoundPoints; // Offset: 0x27
    bool decideGameWinnerWithTeamScore; // Offset: 0x28
    bool playHalfwaySound; // Offset: 0x29
    bool playHalfwaySoundAfterUpdatingTimeLimit; // Offset: 0x2a
    bool playTimeAnnouncements; // Offset: 0x2b
    bool canPlayMusicMoods; // Offset: 0x2c
    bool doOpponentDisconnectedCheck; // Offset: 0x2d
    uint8_t _pad_1[0x2]; // Offset: 0x2e
    float narrowMatchWinRatio; // Offset: 0x30
    float bigRoundWinRatio; // Offset: 0x34
    float narrowMatchDefeatRatio; // Offset: 0x38
    float bigRoundDefeatRatio; // Offset: 0x3c
    bool endOnKill; // Offset: 0x40
    bool endOnAllOthersRanOutOfLives; // Offset: 0x41
    bool winAwardToTeamTopScorersOnly; // Offset: 0x42
    uint8_t _pad_2[0x1]; // Offset: 0x43
    int32_t winAwardPlayerCount; // Offset: 0x44
    DynArray_ARDataType* winAwardIds; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    EAPlayerHUDParams playerHUDParams; // Offset: 0x78
};

// Original name: SFPSVictoryConditionsTeamLives
// Size: 0x98
// VTable: 0x1499d6cc8
struct SFPSVictoryConditionsTeamLives {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float timeLimit; // Offset: 0x18
    float timeRemainingNoNewPlayers; // Offset: 0x1c
    int32_t scoreLimit; // Offset: 0x20
    bool checkScore; // Offset: 0x24
    bool checkTime; // Offset: 0x25
    bool checkScoreAsTime; // Offset: 0x26
    bool decideRoundWinnerUsingRoundPoints; // Offset: 0x27
    bool decideGameWinnerWithTeamScore; // Offset: 0x28
    bool playHalfwaySound; // Offset: 0x29
    bool playHalfwaySoundAfterUpdatingTimeLimit; // Offset: 0x2a
    bool playTimeAnnouncements; // Offset: 0x2b
    bool canPlayMusicMoods; // Offset: 0x2c
    bool doOpponentDisconnectedCheck; // Offset: 0x2d
    uint8_t _pad_1[0x2]; // Offset: 0x2e
    float narrowMatchWinRatio; // Offset: 0x30
    float bigRoundWinRatio; // Offset: 0x34
    float narrowMatchDefeatRatio; // Offset: 0x38
    float bigRoundDefeatRatio; // Offset: 0x3c
    bool endOnKill; // Offset: 0x40
    bool endOnAllOthersRanOutOfLives; // Offset: 0x41
    bool winAwardToTeamTopScorersOnly; // Offset: 0x42
    uint8_t _pad_2[0x1]; // Offset: 0x43
    int32_t winAwardPlayerCount; // Offset: 0x44
    DynArray_ARDataType* winAwardIds; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    EAPlayerHUDParams playerHUDParams; // Offset: 0x78
};

// Original name: ItemResourceNetworkMapTriggerEntry
// Size: 0x48
// VTable: 0x1499a0eb8
struct ItemResourceNetworkMapTriggerEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* key; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ARDataType* affectedLayers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SCItemSuitThrusterParams
// Size: 0x50
// VTable: 0x149a62888
struct SCItemSuitThrusterParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* HelperName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ARDataType* ActivationInputs; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x30]; // Offset: 0x20
};

// Original name: SItemPortDefTypes
// Size: 0x40
// VTable: 0x1499afe48
struct SItemPortDefTypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Type; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ARDataType* SubTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SDFMVictoryConditionsRace
// Size: 0xa0
// VTable: 0x149a28fe0
struct SDFMVictoryConditionsRace {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float timeLimit; // Offset: 0x18
    float timeRemainingNoNewPlayers; // Offset: 0x1c
    int32_t scoreLimit; // Offset: 0x20
    bool checkScore; // Offset: 0x24
    bool checkTime; // Offset: 0x25
    bool checkScoreAsTime; // Offset: 0x26
    bool decideRoundWinnerUsingRoundPoints; // Offset: 0x27
    bool decideGameWinnerWithTeamScore; // Offset: 0x28
    bool playHalfwaySound; // Offset: 0x29
    bool playHalfwaySoundAfterUpdatingTimeLimit; // Offset: 0x2a
    bool playTimeAnnouncements; // Offset: 0x2b
    bool canPlayMusicMoods; // Offset: 0x2c
    bool doOpponentDisconnectedCheck; // Offset: 0x2d
    uint8_t _pad_1[0x2]; // Offset: 0x2e
    float narrowMatchWinRatio; // Offset: 0x30
    float bigRoundWinRatio; // Offset: 0x34
    float narrowMatchDefeatRatio; // Offset: 0x38
    float bigRoundDefeatRatio; // Offset: 0x3c
    bool endOnKill; // Offset: 0x40
    bool endOnAllOthersRanOutOfLives; // Offset: 0x41
    bool winAwardToTeamTopScorersOnly; // Offset: 0x42
    uint8_t _pad_2[0x1]; // Offset: 0x43
    int32_t winAwardPlayerCount; // Offset: 0x44
    DynArray_ARDataType* winAwardIds; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    EAPlayerHUDParams playerHUDParams; // Offset: 0x78
    ARDataType scoringType; // Offset: 0x98
    bool nextKillWins; // Offset: 0x9c
    uint8_t _pad_4[0x3]; // Offset: 0x9d
};

// Original name: LoadoutCandidateRootParams
// Size: 0x38
// VTable: 0x149aaaa70
struct LoadoutCandidateRootParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* candidateRootTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AIObservableFilterFlags
// Size: 0x38
// VTable: 0x149a933f0
struct AIObservableFilterFlags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* typeFlags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SBadgeCompleteReward
// Size: 0x38
// VTable: 0x149a974f0
struct SBadgeCompleteReward {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* badgesToAward; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SSimulationParamsPendulumHingePlane
// Size: 0xb0
// VTable: 0x1499bade8
struct SSimulationParamsPendulumHingePlane {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool UseRedirect; // Offset: 0x8
    bool UseDebugSetup; // Offset: 0x9
    bool UseDebugText; // Offset: 0xa
    bool UseSimulation; // Offset: 0xb
    uint8_t SimFPS; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    Vec3 PivotOffset; // Offset: 0x10
    Vec3 SimulationAxis; // Offset: 0x28
    float Mass; // Offset: 0x40
    float Gravity; // Offset: 0x44
    float Damping; // Offset: 0x48
    float JointSpring; // Offset: 0x4c
    Vec2 SpringTarget; // Offset: 0x50
    float ConeAngle; // Offset: 0x60
    float HingeRotation; // Offset: 0x64
    Vec2 Capsule; // Offset: 0x68
    ARDataType ProjectionType; // Offset: 0x78
    uint8_t _pad_2[0x4]; // Offset: 0x7c
    DynArray_ARDataType* AvailableCollisionProxies; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x88
};

// Original name: SEAFriendlyFireKickParams
// Size: 0x60
// VTable: 0x149a30f40
struct SEAFriendlyFireKickParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* kickableOffences; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    int32_t scoreKickThreshold; // Offset: 0x38
    int32_t shieldScore; // Offset: 0x3c
    float infractionPercentage; // Offset: 0x40
    float infractionCooldownTime; // Offset: 0x44
    float teamDamageCautionPercentage; // Offset: 0x48
    float teamDamageWarningPercentage; // Offset: 0x4c
    CLocIdentifier* teamDamageCaution; // Offset: 0x50
    CLocIdentifier* teamDamageWarning; // Offset: 0x58
};

// Original name: SSimulationParamsPendulumHalfCone
// Size: 0xb0
// VTable: 0x1499bad68
struct SSimulationParamsPendulumHalfCone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool UseRedirect; // Offset: 0x8
    bool UseDebugSetup; // Offset: 0x9
    bool UseDebugText; // Offset: 0xa
    bool UseSimulation; // Offset: 0xb
    uint8_t SimFPS; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    Vec3 PivotOffset; // Offset: 0x10
    Vec3 SimulationAxis; // Offset: 0x28
    float Mass; // Offset: 0x40
    float Gravity; // Offset: 0x44
    float Damping; // Offset: 0x48
    float JointSpring; // Offset: 0x4c
    Vec2 SpringTarget; // Offset: 0x50
    float ConeAngle; // Offset: 0x60
    float HingeRotation; // Offset: 0x64
    Vec2 Capsule; // Offset: 0x68
    ARDataType ProjectionType; // Offset: 0x78
    uint8_t _pad_2[0x4]; // Offset: 0x7c
    DynArray_ARDataType* AvailableCollisionProxies; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x88
};

// Original name: SSimulationParamsPendulumCone
// Size: 0xb0
// VTable: 0x1499bace8
struct SSimulationParamsPendulumCone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool UseRedirect; // Offset: 0x8
    bool UseDebugSetup; // Offset: 0x9
    bool UseDebugText; // Offset: 0xa
    bool UseSimulation; // Offset: 0xb
    uint8_t SimFPS; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    Vec3 PivotOffset; // Offset: 0x10
    Vec3 SimulationAxis; // Offset: 0x28
    float Mass; // Offset: 0x40
    float Gravity; // Offset: 0x44
    float Damping; // Offset: 0x48
    float JointSpring; // Offset: 0x4c
    Vec2 SpringTarget; // Offset: 0x50
    float ConeAngle; // Offset: 0x60
    float HingeRotation; // Offset: 0x64
    Vec2 Capsule; // Offset: 0x68
    ARDataType ProjectionType; // Offset: 0x78
    uint8_t _pad_2[0x4]; // Offset: 0x7c
    DynArray_ARDataType* AvailableCollisionProxies; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x88
};

// Original name: ArmsLockSingleAbility
// Size: 0x40
// VTable: 0x1499fe838
struct ArmsLockSingleAbility {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType ability; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ARDataType* exclusions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SFPSVictoryConditionsTeam
// Size: 0x98
// VTable: 0x1499d6cb0
struct SFPSVictoryConditionsTeam {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float timeLimit; // Offset: 0x18
    float timeRemainingNoNewPlayers; // Offset: 0x1c
    int32_t scoreLimit; // Offset: 0x20
    bool checkScore; // Offset: 0x24
    bool checkTime; // Offset: 0x25
    bool checkScoreAsTime; // Offset: 0x26
    bool decideRoundWinnerUsingRoundPoints; // Offset: 0x27
    bool decideGameWinnerWithTeamScore; // Offset: 0x28
    bool playHalfwaySound; // Offset: 0x29
    bool playHalfwaySoundAfterUpdatingTimeLimit; // Offset: 0x2a
    bool playTimeAnnouncements; // Offset: 0x2b
    bool canPlayMusicMoods; // Offset: 0x2c
    bool doOpponentDisconnectedCheck; // Offset: 0x2d
    uint8_t _pad_1[0x2]; // Offset: 0x2e
    float narrowMatchWinRatio; // Offset: 0x30
    float bigRoundWinRatio; // Offset: 0x34
    float narrowMatchDefeatRatio; // Offset: 0x38
    float bigRoundDefeatRatio; // Offset: 0x3c
    bool endOnKill; // Offset: 0x40
    bool endOnAllOthersRanOutOfLives; // Offset: 0x41
    bool winAwardToTeamTopScorersOnly; // Offset: 0x42
    uint8_t _pad_2[0x1]; // Offset: 0x43
    int32_t winAwardPlayerCount; // Offset: 0x44
    DynArray_ARDataType* winAwardIds; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    EAPlayerHUDParams playerHUDParams; // Offset: 0x78
};

// Original name: OperatorModeDefinitions
// Size: 0x40
// VTable: 0x149a075b0
struct OperatorModeDefinitions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType modeName; // Offset: 0x8
    ARDataType parentModeName; // Offset: 0xc
    DynArray_ARDataType* controllerTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: PassengerScanStatusMappings
// Size: 0x48
// VTable: 0x1499c7df0
struct PassengerScanStatusMappings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* statuses; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float healthThreshold; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    CLocIdentifier* displayForCondition; // Offset: 0x40
};

// Original name: SObjectiveVictoryConditionsTeam
// Size: 0x98
// VTable: 0x1499d6a40
struct SObjectiveVictoryConditionsTeam {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float timeLimit; // Offset: 0x18
    float timeRemainingNoNewPlayers; // Offset: 0x1c
    int32_t scoreLimit; // Offset: 0x20
    bool checkScore; // Offset: 0x24
    bool checkTime; // Offset: 0x25
    bool checkScoreAsTime; // Offset: 0x26
    bool decideRoundWinnerUsingRoundPoints; // Offset: 0x27
    bool decideGameWinnerWithTeamScore; // Offset: 0x28
    bool playHalfwaySound; // Offset: 0x29
    bool playHalfwaySoundAfterUpdatingTimeLimit; // Offset: 0x2a
    bool playTimeAnnouncements; // Offset: 0x2b
    bool canPlayMusicMoods; // Offset: 0x2c
    bool doOpponentDisconnectedCheck; // Offset: 0x2d
    uint8_t _pad_1[0x2]; // Offset: 0x2e
    float narrowMatchWinRatio; // Offset: 0x30
    float bigRoundWinRatio; // Offset: 0x34
    float narrowMatchDefeatRatio; // Offset: 0x38
    float bigRoundDefeatRatio; // Offset: 0x3c
    bool endOnKill; // Offset: 0x40
    bool endOnAllOthersRanOutOfLives; // Offset: 0x41
    bool winAwardToTeamTopScorersOnly; // Offset: 0x42
    uint8_t _pad_2[0x1]; // Offset: 0x43
    int32_t winAwardPlayerCount; // Offset: 0x44
    DynArray_ARDataType* winAwardIds; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    EAPlayerHUDParams playerHUDParams; // Offset: 0x78
};

// Original name: ActionAreaAudioFilter
// Size: 0x38
// VTable: 0x149a44a30
struct ActionAreaAudioFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* ignoredAudioTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: HarvestableAreaTypeObjectPreset
// Size: 0x38
// VTable: 0x1499ef220
struct HarvestableAreaTypeObjectPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* objectPresetPaths; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BuildingBlocks_StaticArrayDataString
// Size: 0x48
// VTable: 0x14998a960
struct BuildingBlocks_StaticArrayDataString {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_CryStringT* values; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SBonesHighlightNode
// Size: 0x38
// VTable: 0x1499a5be0
struct SBonesHighlightNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* boneNames; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LocomotionAnimSyncConfig
// Size: 0x58
// VTable: 0x149ab06a8
struct LocomotionAnimSyncConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* footJoints; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ARDataType syncMethod; // Offset: 0x38
    uint8_t _pad_2[0x1f]; // Offset: 0x39
};

// Original name: LoadoutRequiredAttachmentsParams
// Size: 0x38
// VTable: 0x149aaaa10
struct LoadoutRequiredAttachmentsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* requiredAttachments; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: PersonalThoughtForceCloseActionList
// Size: 0x50
// VTable: 0x149a9b110
struct PersonalThoughtForceCloseActionList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* actions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x40]; // Offset: 0x10
};

// Original name: RagdollRecoveryConfig
// Size: 0x70
// VTable: 0x149ab0750
struct RagdollRecoveryConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    AngYPR physRootAdjust; // Offset: 0x10
    DynArray_CryStringT* defaultRecoveryAnims; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x40]; // Offset: 0x30
};

// Original name: FragmentRequiredInfo
// Size: 0x48
// VTable: 0x149aa2cb8
struct FragmentRequiredInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fragment; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_CryStringT* additionalTags; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: DockingSlotVisibilityTagSet
// Size: 0x38
// VTable: 0x149a2f780
struct DockingSlotVisibilityTagSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: FragmentInfo
// Size: 0x48
// VTable: 0x149aa2bb8
struct FragmentInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fragment; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_CryStringT* additionalTags; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SetItemportActiveEvent
// Size: 0x40
// VTable: 0x1499a3068
struct SetItemportActiveEvent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_CryStringT* itemPorts; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: ActorUndergroundEffects
// Size: 0x40
// VTable: 0x149994b58
struct ActorUndergroundEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_CryStringT* helpersToDisableUnderground; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: UndergroundCreatureHelpersComponent
// Size: 0xa8
// VTable: 0x149aaf040
struct UndergroundCreatureHelpersComponent {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_CryStringT* spineJoints; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_CryStringT* tailJoints; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    CryStringT* surfaceVFXJoint; // Offset: 0x78
    uint8_t _pad_3[0x8]; // Offset: 0x80
    CryStringT* groundExitVFXJoint; // Offset: 0x88
    uint8_t _pad_4[0x8]; // Offset: 0x90
    CryStringT* groundEntryVFXJoint; // Offset: 0x98
    uint8_t _pad_5[0x8]; // Offset: 0xa0
};

// Original name: GameTokens
// Size: 0x68
// VTable: 0x1499ba5a8
struct GameTokens {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* GameTokenLibraries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_CryStringT* FlowGraphs; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SWeaponOnAttachParams
// Size: 0x88
// VTable: 0x149a600f0
struct SWeaponOnAttachParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* itemPort; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SMannequinTagParams mannequinTag; // Offset: 0x18
    DynArray_CryStringT* attachmentsToHide; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x48]; // Offset: 0x40
};

// Original name: SItemPortRule_HideInteractionsDef
// Size: 0x38
// VTable: 0x149a92f60
struct SItemPortRule_HideInteractionsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* interactionNames; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SSCActorInteractionHelperParams
// Size: 0x48
// VTable: 0x149a03840
struct SSCActorInteractionHelperParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_CryStringT* initiallyLockedInteractions; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: DisabledLoadoutInteraction
// Size: 0x40
// VTable: 0x149aa1de8
struct DisabledLoadoutInteraction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_CryStringT* lockedInteractionNames; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SCItemControlCondition_AllowedByRemoteTurretView
// Size: 0x50
// VTable: 0x149a06c90
struct SCItemControlCondition_AllowedByRemoteTurretView {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* turretTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x40]; // Offset: 0x10
};

// Original name: DurationTags
// Size: 0x40
// VTable: 0x149aa2c38
struct DurationTags {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* tags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float minDuration; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: Fidget
// Size: 0x40
// VTable: 0x149a9db60
struct Fidget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* FragmentTags; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float IntervalMin; // Offset: 0x38
    float IntervalMax; // Offset: 0x3c
};

// Original name: PlayerAnimatedInteraction
// Size: 0x68
// VTable: 0x1499a0280
struct PlayerAnimatedInteraction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_CryStringT* fragTags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    bool supportWalkToAlign; // Offset: 0x40
    uint8_t _pad_3[0x7]; // Offset: 0x41
    CryStringT* CDIKTargetName; // Offset: 0x48
    uint8_t _pad_4[0x8]; // Offset: 0x50
    PlayerAnimatedInteractionHandParams handModeParams; // Offset: 0x58
};

// Original name: PersonalThoughtContextualActionsMenu
// Size: 0x38
// VTable: 0x149a9a9e0
struct PersonalThoughtContextualActionsMenu {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* enabledActionMaps; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: EntityComponentFrontendPUUIProviderParams
// Size: 0xa8
// VTable: 0x1499fa788
struct EntityComponentFrontendPUUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* introTitleLocId; // Offset: 0x18
    CLocIdentifier* introDescriptionLocId; // Offset: 0x20
    CLocIdentifier* hangarLocId; // Offset: 0x28
    CLocIdentifier* hangarDescriptionLocId; // Offset: 0x30
    CryStringT* hangarSystemImagePath; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
    DynArray_CLocIdentifier* regionLocalizationIdentifiers; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    CLocIdentifier* soloplayWarningLocId; // Offset: 0x78
    CLocIdentifier* soloplayWarningConfirmLocId; // Offset: 0x80
    CLocIdentifier* soloplayWarningCancelLocId; // Offset: 0x88
    CLocIdentifier* firstSpawnWarningLocId; // Offset: 0x90
    CLocIdentifier* firstSpawnWarningConfirmLocId; // Offset: 0x98
    CLocIdentifier* firstSpawnWarningCancelLocId; // Offset: 0xa0
};

// Original name: ActorStatusLocalisation
// Size: 0x98
// VTable: 0x1499fc6b0
struct ActorStatusLocalisation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CLocIdentifier* hospitalisationReasonNames; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_CLocIdentifier* deathReasonNames; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_CLocIdentifier* damageTypeNames; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: SMasterModeLabels
// Size: 0x68
// VTable: 0x149a07af8
struct SMasterModeLabels {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CLocIdentifier* fullNames; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_CLocIdentifier* shortNames; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: VoteGenericLocParams
// Size: 0x38
// VTable: 0x149a3ac40
struct VoteGenericLocParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CLocIdentifier* locIds; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SLoadingScreenInformationDef
// Size: 0x70
// VTable: 0x1499ae750
struct SLoadingScreenInformationDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType loadingScreenType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* imagePath; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CLocIdentifier* primaryTitle; // Offset: 0x20
    CLocIdentifier* secondaryTitle; // Offset: 0x28
    CLocIdentifier* subtitle; // Offset: 0x30
    CLocIdentifier* description; // Offset: 0x38
    DynArray_CLocIdentifier* tips; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: ContractDisplayInfo
// Size: 0x58
// VTable: 0x149970f60
struct ContractDisplayInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CLocIdentifier* displayString; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MissionType type_; /* type */ // Offset: 0x38
    bool illegal; // Offset: 0x50
    bool showLifeTimeInMobiGlas; // Offset: 0x51
    bool preShowObjectives; // Offset: 0x52
    uint8_t _pad_2[0x5]; // Offset: 0x53
};

// Original name: GlobalTutorialParams
// Size: 0x38
// VTable: 0x1499f9010
struct GlobalTutorialParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CLocIdentifier* validStartingAreas; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SOperatorModeLabels
// Size: 0x68
// VTable: 0x149a5bab8
struct SOperatorModeLabels {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CLocIdentifier* fullNames; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_CLocIdentifier* shortNames; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: ChatEmoteData
// Size: 0x80
// VTable: 0x149a8a860
struct ChatEmoteData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* emoteType; // Offset: 0x8
    DynArray_CLocIdentifier* alternateEmoteTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    bool enabled; // Offset: 0x40
    bool isInterruptable; // Offset: 0x41
    uint8_t _pad_2[0x6]; // Offset: 0x42
    ChatEmoteAnimData animData; // Offset: 0x48
};

// Original name: InfractionParameters
// Size: 0x80
// VTable: 0x14996ef90
struct InfractionParameters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t isFelony; // Offset: 0x8
    int32_t graceAllowance; // Offset: 0xc
    float graceAllowanceCooldown; // Offset: 0x10
    float gracePeriod; // Offset: 0x14
    float graceCooloffScale; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_CLocIdentifier* graceWarnings; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    int32_t displayGraceTime; // Offset: 0x50
    float earlyPaymentPeriod; // Offset: 0x54
    float escalatedPaymentFineMultiplier; // Offset: 0x58
    float lifetime; // Offset: 0x5c
    float coolOffTime; // Offset: 0x60
    float pressChargesNotificationTime; // Offset: 0x64
    float removeTimeSeconds; // Offset: 0x68
    int32_t felonyMerits; // Offset: 0x6c
    int32_t ignoreIfAgainstPartyMember; // Offset: 0x70
    int32_t hideCrimeNotification; // Offset: 0x74
    int32_t hideCrimeInJournal; // Offset: 0x78
    uint8_t _pad_3[0x4]; // Offset: 0x7c
};

// Original name: BuildingBlocks_StaticArrayDataLocalization
// Size: 0x48
// VTable: 0x14998a9c0
struct BuildingBlocks_StaticArrayDataLocalization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_CLocIdentifier* values; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SHackingCodeWindowParams
// Size: 0x48
// VTable: 0x149a2c148
struct SHackingCodeWindowParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t maxLogSize; // Offset: 0x8
    int32_t maxCommandHistorySize; // Offset: 0xc
    CLocIdentifier* errorPrefixText; // Offset: 0x10
    DynArray_CLocIdentifier* paramTypeNames; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SAimableGimbalModeLabels
// Size: 0x68
// VTable: 0x1499e9418
struct SAimableGimbalModeLabels {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CLocIdentifier* fullNames; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_CLocIdentifier* shortNames; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: RestrictedAreaHUDMessageParams
// Size: 0x68
// VTable: 0x149a1c678
struct RestrictedAreaHUDMessageParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float proximityWarningMinDistance; // Offset: 0x8
    float proximityWarningMaxTime; // Offset: 0xc
    float proximityWarningDetectionConeAngle; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_CLocIdentifier* proximityWarningMessages; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    CLocIdentifier* autopilotMessage; // Offset: 0x48
    float proximityMessageTimer; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
    CLocIdentifier* nearWarningMessage; // Offset: 0x58
    CLocIdentifier* leaveWarningMessage; // Offset: 0x60
};

// Original name: BuildingBlocks_StaticArrayDataInteger
// Size: 0x48
// VTable: 0x14998a8a0
struct BuildingBlocks_StaticArrayDataInteger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_int64_t* values; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: BuildingBlocks_BindingsBooleanFromIntegerSwitch
// Size: 0x98
// VTable: 0x149981470
struct BuildingBlocks_BindingsBooleanFromIntegerSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_int64_t* exceptions; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    bool defaultValue; // Offset: 0x80
    uint8_t _pad_2[0x7]; // Offset: 0x81
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x88
};

// Original name: SLightFlickerAnimParams
// Size: 0x68
// VTable: 0x1499e1440
struct SLightFlickerAnimParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minAnimTime; // Offset: 0x8
    float maxAnimTime; // Offset: 0xc
    float minSpeedMultiplier; // Offset: 0x10
    float maxSpeedMultiplier; // Offset: 0x14
    DynArray_int32_t* lightStyles; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    SRGB8 endColor; // Offset: 0x48
    float restoreOriginalAfterTime; // Offset: 0x58
    bool keepActiveAfterWaveFinished; // Offset: 0x5c
    uint8_t _pad_2[0x3]; // Offset: 0x5d
    float trackviewTime; // Offset: 0x60
    uint8_t _pad_3[0x4]; // Offset: 0x64
};

// Original name: EAScoreboardPlacementAwardParams
// Size: 0x48
// VTable: 0x149a398d0
struct EAScoreboardPlacementAwardParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_int32_t* placementAwards; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    int32_t participationAward; // Offset: 0x40
    bool isLosingTeamEligible; // Offset: 0x44
    uint8_t _pad_3[0x3]; // Offset: 0x45
};

// Original name: CrimeStatThresholds
// Size: 0x38
// VTable: 0x14996f830
struct CrimeStatThresholds {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_int32_t* meritThresholds; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AwardService_Award
// Size: 0x70
// VTable: 0x149a8a610
struct AwardService_Award {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* triggerId; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CLocIdentifier* displayTitle; // Offset: 0x20
    CLocIdentifier* displayMessage; // Offset: 0x28
    uint32_t badgeId; // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
    DynArray_uint32_t* prerequisiteBadgeIds; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x40
    bool pushCommLinkNotification; // Offset: 0x68
    uint8_t _pad_5[0x7]; // Offset: 0x69
};

// Original name: CraftingRecipeResults
// Size: 0x38
// VTable: 0x1499b8880
struct CraftingRecipeResults {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CraftingResult_Base* results; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SEntityTraversalNodeContext
// Size: 0x18
// VTable: 0x1499a67f0
struct SEntityTraversalNodeContext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityTraversingNodeUniqueId entityTraversalNode; // Offset: 0x8
};

// Original name: SApplicationFormBodyTypeOption
// Size: 0x38
// VTable: 0x149a0eaa0
struct SApplicationFormBodyTypeOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SApplicationFormHead* availableHeads; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BuildingBlocks_BindingsIntegerVariable
// Size: 0xa8
// VTable: 0x1499807e0
struct BuildingBlocks_BindingsIntegerVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsPathBase* path; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* binding; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    bool inheritsNamespace; // Offset: 0x90
    bool isPulled; // Offset: 0x91
    bool isWatched; // Offset: 0x92
    uint8_t _pad_3[0x15]; // Offset: 0x93
};

// Original name: BuildingBlocks_BindingsBooleanVariable
// Size: 0xa8
// VTable: 0x1499806e0
struct BuildingBlocks_BindingsBooleanVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsPathBase* path; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* binding; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    bool inheritsNamespace; // Offset: 0x90
    bool isPulled; // Offset: 0x91
    bool isWatched; // Offset: 0x92
    uint8_t _pad_3[0x15]; // Offset: 0x93
};

// Original name: BuildingBlocks_BindingsVectorVariable
// Size: 0xa8
// VTable: 0x149980be0
struct BuildingBlocks_BindingsVectorVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsPathBase* path; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* binding; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    bool inheritsNamespace; // Offset: 0x90
    bool isPulled; // Offset: 0x91
    bool isWatched; // Offset: 0x92
    uint8_t _pad_3[0x15]; // Offset: 0x93
};

// Original name: BuildingBlocks_BindingsTransformVariable
// Size: 0xa8
// VTable: 0x149980de0
struct BuildingBlocks_BindingsTransformVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsPathBase* path; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* binding; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    bool inheritsNamespace; // Offset: 0x90
    bool isPulled; // Offset: 0x91
    bool isWatched; // Offset: 0x92
    uint8_t _pad_3[0x15]; // Offset: 0x93
};

// Original name: BuildingBlocks_BindingsRotationVariable
// Size: 0xa8
// VTable: 0x149980ce0
struct BuildingBlocks_BindingsRotationVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsPathBase* path; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* binding; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    bool inheritsNamespace; // Offset: 0x90
    bool isPulled; // Offset: 0x91
    bool isWatched; // Offset: 0x92
    uint8_t _pad_3[0x15]; // Offset: 0x93
};

// Original name: BuildingBlocks_BindingsNumberVariable
// Size: 0xa8
// VTable: 0x1499808e0
struct BuildingBlocks_BindingsNumberVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsPathBase* path; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* binding; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    bool inheritsNamespace; // Offset: 0x90
    bool isPulled; // Offset: 0x91
    bool isWatched; // Offset: 0x92
    uint8_t _pad_3[0x15]; // Offset: 0x93
};

// Original name: BuildingBlocks_BindingsLocalizedVariable
// Size: 0xa8
// VTable: 0x149980ae0
struct BuildingBlocks_BindingsLocalizedVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsPathBase* path; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* binding; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    bool inheritsNamespace; // Offset: 0x90
    bool isPulled; // Offset: 0x91
    bool isWatched; // Offset: 0x92
    uint8_t _pad_3[0x15]; // Offset: 0x93
};

// Original name: BuildingBlocks_BindingsIntegerTimestamp
// Size: 0xa8
// VTable: 0x149980ee0
struct BuildingBlocks_BindingsIntegerTimestamp {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsPathBase* path; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* binding; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    bool inheritsNamespace; // Offset: 0x90
    bool isPulled; // Offset: 0x91
    bool isWatched; // Offset: 0x92
    uint8_t _pad_3[0x15]; // Offset: 0x93
};

// Original name: BuildingBlocks_BindingsStringVariable
// Size: 0xa8
// VTable: 0x1499809e0
struct BuildingBlocks_BindingsStringVariable {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsPathBase* path; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    CryStringT* binding; // Offset: 0x80
    uint8_t _pad_2[0x8]; // Offset: 0x88
    bool inheritsNamespace; // Offset: 0x90
    bool isPulled; // Offset: 0x91
    bool isWatched; // Offset: 0x92
    uint8_t _pad_3[0x15]; // Offset: 0x93
};

// Original name: SMFDModeConfig
// Size: 0x90
// VTable: 0x149a5b310
struct SMFDModeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SMFDOperatorModeConfig defaultConfiguration; // Offset: 0x8
    DynArray_SMFDOperatorModeConfig* operatorModeViewConfigurations; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
    DynArray_SMFDOperatorModeConfig* operatorModeViewConfigurationsNoCasts; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x68
};

// Original name: VehicleEditorCapabilities
// Size: 0x68
// VTable: 0x149a58650
struct VehicleEditorCapabilities {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    ARDataType unit; // Offset: 0x10
    uint8_t decimalPlaces; // Offset: 0x14
    uint8_t _pad_1[0x3]; // Offset: 0x15
    ARDataType compareMode; // Offset: 0x18
    float minActualValue; // Offset: 0x1c
    float maxActualValue; // Offset: 0x20
    bool interpolateToDisplayValues; // Offset: 0x24
    uint8_t _pad_2[0x3]; // Offset: 0x25
    float minDisplayValue; // Offset: 0x28
    float maxDisplayValue; // Offset: 0x2c
    bool clampValuesToMinMax; // Offset: 0x30
    uint8_t _pad_3[0x7]; // Offset: 0x31
    DynArray_VehicleEditorCapability* stats; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x40
};

// Original name: ControlHints_LocalizedKeyInput
// Size: 0x60
// VTable: 0x149a67580
struct ControlHints_LocalizedKeyInput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType activationMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ControlHints_KeyInput* keynames; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x48]; // Offset: 0x18
};

// Original name: SSCSignatureSystemAudioTriggerTypeRule
// Size: 0x50
// VTable: 0x1499ea230
struct SSCSignatureSystemAudioTriggerTypeRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSCSignatureSystemAudioSubRule* subRules; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SSCSignatureSystemAudioModifier modifier; // Offset: 0x38
    ARDataType triggerType; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: SSCSignatureSystemAudioRule
// Size: 0x48
// VTable: 0x1499ea1d8
struct SSCSignatureSystemAudioRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSCSignatureSystemAudioSubRule* subRules; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SSCSignatureSystemAudioModifier modifier; // Offset: 0x38
};

// Original name: SSCSignatureSystemAudioRuleAlways
// Size: 0x48
// VTable: 0x1499ea298
struct SSCSignatureSystemAudioRuleAlways {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSCSignatureSystemAudioSubRule* subRules; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SSCSignatureSystemAudioModifier modifier; // Offset: 0x38
};

// Original name: SEntityEffectCoreParams
// Size: 0x48
// VTable: 0x14999b930
struct SEntityEffectCoreParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SEffectParamsNodeBase* EffectParams; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: Character
// Size: 0xc8
// VTable: 0x149a8c608
struct Character {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float nicknameChance; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    CryStringT* audioSwitchStateName; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    DynArray_CryStringT* aliases; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
    CryStringT* animationRemapAlias; // Offset: 0x60
    uint8_t _pad_5[0x8]; // Offset: 0x68
    CryStringT* characterMannequinTag; // Offset: 0x70
    uint8_t _pad_6[0x8]; // Offset: 0x78
    CryStringT* styleMannequinTag; // Offset: 0x80
    uint8_t _pad_7[0x8]; // Offset: 0x88
    ARDataType combatStyle; // Offset: 0x90
    ARDataType gender; // Offset: 0x94
    DynArray_MovementSpeedOverride* characterSpeedOverrides; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0xa0
};

// Original name: DynArray_ActorRestrainPerAttackerConfig
// Generated DynArray for base type: ActorRestrainPerAttackerConfig
// Size: 0x8
struct DynArray_ActorRestrainPerAttackerConfig {
    ActorRestrainPerAttackerConfig* m_data; // Offset: 0x0
};

// Original name: SJumpTunnelMeshParams
// Size: 0xe0
// VTable: 0x149a13d48
struct SJumpTunnelMeshParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Range widthRange; // Offset: 0x18
    Range heightRange; // Offset: 0x28
    float entryExitRadius; // Offset: 0x38
    float obstacleScale; // Offset: 0x3c
    int32_t numObstacles; // Offset: 0x40
    bool matchFirstSpline; // Offset: 0x44
    uint8_t _pad_1[0x3]; // Offset: 0x45
    SJumpTunnelVisualParams visualParams; // Offset: 0x48
    JumpTunnelCubeMapParams cubeMapParams; // Offset: 0x78
};

// Original name: DynArray_BuildingBlocks_FieldTransitionBase
// Generated DynArray for base type: BuildingBlocks_FieldTransitionBase
// Size: 0x8
struct DynArray_BuildingBlocks_FieldTransitionBase {
    BuildingBlocks_FieldTransitionBase* m_data; // Offset: 0x0
};

// Original name: BoolUserVariable
// Size: 0x50
// VTable: 0x1499944b0
struct BoolUserVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool defaultValue; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    DynArray_BoolUserVariableTask* tasks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: VehicleSerialNumberFormat
// Size: 0x68
// VTable: 0x149967f78
struct VehicleSerialNumberFormat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VehicleSerialNumberCharacterType* characterTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_VehicleSerialNumberCharacterType* format; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: BuildingBlocks_TextEmphasisModifierList
// Size: 0x38
// VTable: 0x149981ce0
struct BuildingBlocks_TextEmphasisModifierList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_TextFormatModifierBase* textEmphasis; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: WorldDisplay_2DLocalEntityEnvironment
// Size: 0x50
// VTable: 0x149a30568
struct WorldDisplay_2DLocalEntityEnvironment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType alignment; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    WorldDisplayEnvironmentColor environmentColor; // Offset: 0x10
    float size; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    SimpleSpriteSlot spriteSlot; // Offset: 0x28
};

// Original name: WorldDisplayRadar_Icon
// Size: 0x38
// VTable: 0x149a04170
struct WorldDisplayRadar_Icon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float size; // Offset: 0xc
    SimpleSpriteSlot spriteSlot; // Offset: 0x10
};

// Original name: RadarPlate_Config
// Size: 0x120
// VTable: 0x149aa8de8
struct RadarPlate_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Color; // Offset: 0x8
    uint8_t _pad_1[0x6]; // Offset: 0xa
    SimpleSpriteSlot MainPlateSprite; // Offset: 0x10
    SimpleSpriteSlot CenterIconSprite; // Offset: 0x38
    Vec2 InnerRingUV_Start; // Offset: 0x60
    Vec2 InnerRingUV_Size; // Offset: 0x70
    Vec2 TopRingUV_Start; // Offset: 0x80
    Vec2 TopRingUV_Size; // Offset: 0x90
    Vec2 BottomARingUV_Start; // Offset: 0xa0
    Vec2 BottomARingUV_Size; // Offset: 0xb0
    Vec2 BottomBRingUV_Start; // Offset: 0xc0
    Vec2 BottomBRingUV_Size; // Offset: 0xd0
    float Rotation; // Offset: 0xe0
    float InnerRingThickness; // Offset: 0xe4
    float CenterIconScale; // Offset: 0xe8
    float TopRingElevation; // Offset: 0xec
    float TopRingThickness; // Offset: 0xf0
    float BottomARingElevation; // Offset: 0xf4
    float BottomARingSizeMultiplier; // Offset: 0xf8
    float BottomARingGapAngle; // Offset: 0xfc
    float BottomARingThickness; // Offset: 0x100
    float BottomBRingElevation; // Offset: 0x104
    float BottomBRingSizeMultiplier; // Offset: 0x108
    float BottomBRingGapAngle; // Offset: 0x10c
    float BottomBRingThickness; // Offset: 0x110
    int32_t Segments; // Offset: 0x114
    int32_t MainPlateInnerRings; // Offset: 0x118
    uint8_t _pad_2[0x4]; // Offset: 0x11c
};

// Original name: WorldDisplay_PlaneEnvironment_Ring
// Size: 0x68
// VTable: 0x149a30878
struct WorldDisplay_PlaneEnvironment_Ring {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float relativeRadius; // Offset: 0x8
    float width; // Offset: 0xc
    float elevation; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    SimpleSpriteSlot spriteSlot; // Offset: 0x18
    UvInset uvInset; // Offset: 0x40
    uint8_t innerRings; // Offset: 0x58
    uint8_t _pad_2[0x3]; // Offset: 0x59
    float gapAngle; // Offset: 0x5c
    float rotation; // Offset: 0x60
    uint8_t _pad_3[0x4]; // Offset: 0x64
};

// Original name: WorldDisplayRadar_Line
// Size: 0x38
// VTable: 0x149a04220
struct WorldDisplayRadar_Line {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float width; // Offset: 0xc
    SimpleSpriteSlot spriteSlot; // Offset: 0x10
};

// Original name: DynArray_VisibilityCondition
// Generated DynArray for base type: VisibilityCondition
// Size: 0x8
struct DynArray_VisibilityCondition {
    VisibilityCondition* m_data; // Offset: 0x0
};

// Original name: VisibilityConditionDef_AND
// Size: 0x38
// VTable: 0x149a4a730
struct VisibilityConditionDef_AND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VisibilityConditionDef* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_ActorStatusAddBuff
// Generated DynArray for base type: ActorStatusAddBuff
// Size: 0x8
struct DynArray_ActorStatusAddBuff {
    ActorStatusAddBuff* m_data; // Offset: 0x0
};

// Original name: SLoadoutRequirementAND
// Size: 0x38
// VTable: 0x1499a7080
struct SLoadoutRequirementAND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SLoadoutRequirementBase* Requirements; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SLoadoutRequirementOR
// Size: 0x38
// VTable: 0x1499a70e0
struct SLoadoutRequirementOR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SLoadoutRequirementBase* Requirements; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_BuildingBlocks_StringStringPair
// Generated DynArray for base type: BuildingBlocks_StringStringPair
// Size: 0x8
struct DynArray_BuildingBlocks_StringStringPair {
    BuildingBlocks_StringStringPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_NumberStringPair
// Generated DynArray for base type: BuildingBlocks_NumberStringPair
// Size: 0x8
struct DynArray_BuildingBlocks_NumberStringPair {
    BuildingBlocks_NumberStringPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_IntegerStringPair
// Generated DynArray for base type: BuildingBlocks_IntegerStringPair
// Size: 0x8
struct DynArray_BuildingBlocks_IntegerStringPair {
    BuildingBlocks_IntegerStringPair* m_data; // Offset: 0x0
};

// Original name: MusicLogicEventList
// Size: 0x38
// VTable: 0x1499b59a0
struct MusicLogicEventList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MusicLogicEvent* events; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BuildingBlocks_BindingsBooleanEvaluateOr
// Size: 0x80
// VTable: 0x1499814d0
struct BuildingBlocks_BindingsBooleanEvaluateOr {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsBooleanBase* inputs; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
};

// Original name: BuildingBlocks_IntegerFromBitFlagDef
// Size: 0x80
// VTable: 0x149987660
struct BuildingBlocks_IntegerFromBitFlagDef {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsBooleanBase* inputs; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
};

// Original name: BuildingBlocks_BindingsBooleanEvaluateAnd
// Size: 0x80
// VTable: 0x149981530
struct BuildingBlocks_BindingsBooleanEvaluateAnd {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BuildingBlocks_BindingsBooleanBase* inputs; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
};

// Original name: EntityClusterMember
// Size: 0x38
// VTable: 0x1499751f0
struct EntityClusterMember {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionVariableBase* variables; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ContextMenu
// Size: 0x38
// VTable: 0x149a1fb50
struct ContextMenu {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ContextMenuOption* options; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BreathDurationParams
// Size: 0x48
// VTable: 0x149a6cc98
struct BreathDurationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float defaultDuration; // Offset: 0x8
    float durationModifier; // Offset: 0xc
    float holdBreathInhaleTime; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_HoldExhaleDuration* holdBreathExhaleTimes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: LoadoutItemPortViewParams
// Size: 0x40
// VTable: 0x149aaa908
struct LoadoutItemPortViewParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ItemPortViewInformation* list; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool enableSelectingModelItemPort; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
};

// Original name: SActorForceReactionsPresetRecord
// Size: 0x48
// VTable: 0x149a4e3b0
struct SActorForceReactionsPresetRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SActorForceReactionsProceduralLeanOverride* procLeanOverrides; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x38]; // Offset: 0x10
};

// Original name: SVibrationDef
// Size: 0x40
// VTable: 0x149a15148
struct SVibrationDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VibrationTypeData* vibrationTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool listensToPhysics; // Offset: 0x38
    bool listensToDamage; // Offset: 0x39
    bool listensToHits; // Offset: 0x3a
    uint8_t _pad_2[0x5]; // Offset: 0x3b
};

// Original name: DynArray_SQedVisualGraphTransitionParams
// Generated DynArray for base type: SQedVisualGraphTransitionParams
// Size: 0x8
struct DynArray_SQedVisualGraphTransitionParams {
    SQedVisualGraphTransitionParams* m_data; // Offset: 0x0
};

// Original name: ElectricalStateRef
// Size: 0x20
// VTable: 0x149979610
struct ElectricalStateRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ElectricalStateTemplate stateTemplate; // Offset: 0x8
};

// Original name: PlayerChoiceMenuOptionSubMenu
// Size: 0x40
// VTable: 0x149a9f258
struct PlayerChoiceMenuOptionSubMenu {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    DynArray_PlayerChoiceMenuOption* options; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: StatusWidgetDisplayPreset
// Size: 0x50
// VTable: 0x1499f94e8
struct StatusWidgetDisplayPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DisplayState* ranges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float incrementDisplayDuration; // Offset: 0x38
    float incrementStep; // Offset: 0x3c
    float maximumChangePerSecond; // Offset: 0x40
    int32_t historySeconds; // Offset: 0x44
    int32_t historySamplesPerSecond; // Offset: 0x48
    bool shownOnLens; // Offset: 0x4c
    bool shownOnVisor; // Offset: 0x4d
    uint8_t _pad_2[0x2]; // Offset: 0x4e
};

// Original name: DynArray_BuildingBlocks_ColorIntegerPairDef
// Generated DynArray for base type: BuildingBlocks_ColorIntegerPairDef
// Size: 0x8
struct DynArray_BuildingBlocks_ColorIntegerPairDef {
    BuildingBlocks_ColorIntegerPairDef* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_ColorRecordReference
// Size: 0x28
// VTable: 0x149982148
struct BuildingBlocks_ColorRecordReference {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_ExternalColorReference color; // Offset: 0x8
    float alpha; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SBuildingBlocks_EntityEffects
// Size: 0x40
// VTable: 0x149983270
struct SBuildingBlocks_EntityEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_EntityEffectBase glow; // Offset: 0x8
    BuildingBlocks_EntityEffectBase tint; // Offset: 0x18
    BuildingBlocks_EntityEffectSilhouette silhouette; // Offset: 0x28
    float interferenceAmount; // Offset: 0x38
    float dissolveOpacity; // Offset: 0x3c
};

// Original name: MissionScenarioCycle
// Size: 0x58
// VTable: 0x149971890
struct MissionScenarioCycle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    DynArray_MissionScenarioCyclePhase* phases; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x30
};

// Original name: InnerThought_LayoutGridSetThought
// Size: 0x58
// VTable: 0x149a98900
struct InnerThought_LayoutGridSetThought {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType justification; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 offset; // Offset: 0x10
    Quat angle; // Offset: 0x28
};

// Original name: BoxFieldGeom
// Size: 0x70
// VTable: 0x1499e8b98
struct BoxFieldGeom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 center; // Offset: 0x8
    bool oriented; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    Quat basis; // Offset: 0x28
    Vec3 size; // Offset: 0x58
};

// Original name: DynArray_SCameraViewStateOrbit
// Generated DynArray for base type: SCameraViewStateOrbit
// Size: 0x8
struct DynArray_SCameraViewStateOrbit {
    SCameraViewStateOrbit* m_data; // Offset: 0x0
};

// Original name: DynArray_BodyJoint
// Generated DynArray for base type: BodyJoint
// Size: 0x8
struct DynArray_BodyJoint {
    BodyJoint* m_data; // Offset: 0x0
};

// Original name: StatusEffectDamageOverTime
// Size: 0x50
// VTable: 0x1499fccf8
struct StatusEffectDamageOverTime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectMax; // Offset: 0x8
    float effectMin; // Offset: 0xc
    bool ignoresMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    DynArray_BodyPart* damagedParts; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    float damageAtMin; // Offset: 0x48
    float damageAtMax; // Offset: 0x4c
};

// Original name: BodyPartConfig
// Size: 0x50
// VTable: 0x149a812e8
struct BodyPartConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BodyPart* bodyParts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float damageMultiplier; // Offset: 0x38
    float nakedDamageMultiplier; // Offset: 0x3c
    float stunMultiplier; // Offset: 0x40
    float impactForceMultiplier; // Offset: 0x44
    bool isHeadShot; // Offset: 0x48
    bool isFallDamageTarget; // Offset: 0x49
    bool isFPViewOccluder; // Offset: 0x4a
    uint8_t _pad_2[0x5]; // Offset: 0x4b
};

// Original name: StatusEffectDamageToDeathOverTime
// Size: 0x50
// VTable: 0x1499fcd50
struct StatusEffectDamageToDeathOverTime {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectMax; // Offset: 0x8
    float effectMin; // Offset: 0xc
    bool ignoresMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    DynArray_BodyPart* damagedParts; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    float damageCurveMultiplier; // Offset: 0x48
    uint8_t _pad_3[0x4]; // Offset: 0x4c
};

// Original name: StatusEffectDamage
// Size: 0x48
// VTable: 0x1499fcbc8
struct StatusEffectDamage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectMax; // Offset: 0x8
    float effectMin; // Offset: 0xc
    bool ignoresMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    DynArray_BodyPart* damagedParts; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: StatusEffectDamageNonLinear
// Size: 0x58
// VTable: 0x1499fcc70
struct StatusEffectDamageNonLinear {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectMax; // Offset: 0x8
    float effectMin; // Offset: 0xc
    bool ignoresMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    DynArray_BodyPart* damagedParts; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    float baseDamage; // Offset: 0x48
    float minDamage; // Offset: 0x4c
    float damageFalloff; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
};

// Original name: SSpecializedData
// Size: 0x38
// VTable: 0x149a91d40
struct SSpecializedData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSpecializedDataEntry* specializedDataEntry; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: GlobalShopSellingParams
// Size: 0xa8
// VTable: 0x149a3ed08
struct GlobalShopSellingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float matchPercentage; // Offset: 0x8
    float noMatchPercentage; // Offset: 0xc
    float missionItemSellPriceReductionPercentage; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_float* maxInventoryCurve; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_float* wearCurve; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    DynArray_ItemTypeModifier* itemTypeModifiers; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x80
};

// Original name: DamageResistanceMacro
// Size: 0x88
// VTable: 0x1499adeb8
struct DamageResistanceMacro {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageResistance damageResistance; // Offset: 0x8
    ImpactForceResistance impactForceResistance; // Offset: 0x78
};

// Original name: AIAvailableSpecialRangedAttacksConfig
// Size: 0x38
// VTable: 0x149a02d70
struct AIAvailableSpecialRangedAttacksConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AISpecialRangedAttackConfig* availableSpecialRangedAttacks; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: EntityComponentWaterDisturbanceParams
// Size: 0x70
// VTable: 0x14999de88
struct EntityComponentWaterDisturbanceParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType style; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec2 distributionArea; // Offset: 0x20
    float hitSize; // Offset: 0x30
    float depth; // Offset: 0x34
    float pressure; // Offset: 0x38
    float foamAmount; // Offset: 0x3c
    Vec2 frequency; // Offset: 0x40
    EntityComponentWaterDisturbance_NoiseParams noiseParams; // Offset: 0x50
};

// Original name: DynArray_ActorLookAheadPoint
// Generated DynArray for base type: ActorLookAheadPoint
// Size: 0x8
struct DynArray_ActorLookAheadPoint {
    ActorLookAheadPoint* m_data; // Offset: 0x0
};

// Original name: EALockedSpawnMarkerTracker
// Size: 0x50
// VTable: 0x149a20590
struct EALockedSpawnMarkerTracker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MarkerAR_ConfigDef ARMarkerConfig; // Offset: 0x8
    CLocIdentifier* distanceUnits; // Offset: 0x20
    float ARMarkerAlpha; // Offset: 0x28
    bool scaleMarkerByDistance; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    float minScaleDistance; // Offset: 0x30
    float maxScaleDistance; // Offset: 0x34
    float minSize; // Offset: 0x38
    float maxSize; // Offset: 0x3c
    bool allowClipping; // Offset: 0x40
    uint8_t _pad_2[0x7]; // Offset: 0x41
    float maxClipRange; // Offset: 0x48
    uint8_t _pad_3[0x4]; // Offset: 0x4c
};

// Original name: EAMarkerTrackerBase
// Size: 0x48
// VTable: 0x149a20260
struct EAMarkerTrackerBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MarkerAR_ConfigDef ARMarkerConfig; // Offset: 0x8
    CLocIdentifier* distanceUnits; // Offset: 0x20
    float ARMarkerAlpha; // Offset: 0x28
    bool scaleMarkerByDistance; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    float minScaleDistance; // Offset: 0x30
    float maxScaleDistance; // Offset: 0x34
    float minSize; // Offset: 0x38
    float maxSize; // Offset: 0x3c
    bool allowClipping; // Offset: 0x40
    uint8_t _pad_2[0x7]; // Offset: 0x41
};

// Original name: EAUIMarkerBaseComponent
// Size: 0x58
// VTable: 0x149a1f8e0
struct EAUIMarkerBaseComponent {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    MarkerAR_ConfigDef ARMarkerConfig; // Offset: 0x18
    CLocIdentifier* distanceUnits; // Offset: 0x30
    float ARMarkerAlpha; // Offset: 0x38
    bool scaleMarkerByDistance; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
    float minScaleDistance; // Offset: 0x40
    float maxScaleDistance; // Offset: 0x44
    float minSize; // Offset: 0x48
    float maxSize; // Offset: 0x4c
    bool allowClipping; // Offset: 0x50
    uint8_t _pad_2[0x7]; // Offset: 0x51
};

// Original name: EAEntityMarkerTracker
// Size: 0x48
// VTable: 0x149a20268
struct EAEntityMarkerTracker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MarkerAR_ConfigDef ARMarkerConfig; // Offset: 0x8
    CLocIdentifier* distanceUnits; // Offset: 0x20
    float ARMarkerAlpha; // Offset: 0x28
    bool scaleMarkerByDistance; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    float minScaleDistance; // Offset: 0x30
    float maxScaleDistance; // Offset: 0x34
    float minSize; // Offset: 0x38
    float maxSize; // Offset: 0x3c
    bool allowClipping; // Offset: 0x40
    uint8_t _pad_2[0x7]; // Offset: 0x41
};

// Original name: EAObjectiveMarkerTracker
// Size: 0x70
// VTable: 0x149a20528
struct EAObjectiveMarkerTracker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MarkerAR_ConfigDef ARMarkerConfig; // Offset: 0x8
    CLocIdentifier* distanceUnits; // Offset: 0x20
    float ARMarkerAlpha; // Offset: 0x28
    bool scaleMarkerByDistance; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    float minScaleDistance; // Offset: 0x30
    float maxScaleDistance; // Offset: 0x34
    float minSize; // Offset: 0x38
    float maxSize; // Offset: 0x3c
    bool allowClipping; // Offset: 0x40
    uint8_t _pad_2[0x7]; // Offset: 0x41
    float activeHUDAlpha; // Offset: 0x48
    float inactiveHUDAlpha; // Offset: 0x4c
    float hudMarkerSize; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
    CLocIdentifier* contestedObjectiveString; // Offset: 0x58
    CLocIdentifier* multipleContestedObjectivesString; // Offset: 0x60
    CLocIdentifier* objectiveSeparatorString; // Offset: 0x68
};

// Original name: EAPlayableAreaMarkerTracker
// Size: 0x58
// VTable: 0x149a20618
struct EAPlayableAreaMarkerTracker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MarkerAR_ConfigDef ARMarkerConfig; // Offset: 0x8
    CLocIdentifier* distanceUnits; // Offset: 0x20
    float ARMarkerAlpha; // Offset: 0x28
    bool scaleMarkerByDistance; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    float minScaleDistance; // Offset: 0x30
    float maxScaleDistance; // Offset: 0x34
    float minSize; // Offset: 0x38
    float maxSize; // Offset: 0x3c
    bool allowClipping; // Offset: 0x40
    uint8_t _pad_2[0x7]; // Offset: 0x41
    CLocIdentifier* helperText; // Offset: 0x48
    int32_t maxDistance; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
};

// Original name: DynArray_PlayerChoice_SoftwareCursorEntry
// Generated DynArray for base type: PlayerChoice_SoftwareCursorEntry
// Size: 0x8
struct DynArray_PlayerChoice_SoftwareCursorEntry {
    PlayerChoice_SoftwareCursorEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_PointOfInterestData
// Generated DynArray for base type: PointOfInterestData
// Size: 0x8
struct DynArray_PointOfInterestData {
    PointOfInterestData* m_data; // Offset: 0x0
};

// Original name: MiniGameRecordDef
// Size: 0x18
// VTable: 0x149a47b80
struct MiniGameRecordDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SMiniGameData MiniGameData; // Offset: 0x8
};

// Original name: SMiniGameSpriteParams
// Size: 0x68
// VTable: 0x149a46a18
struct SMiniGameSpriteParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* spriteName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_Vec2* uvStart; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    Vec2 uvSize; // Offset: 0x48
    Vec2 size; // Offset: 0x58
};

// Original name: BezierCurve
// Size: 0x90
// VTable: 0x1499adaa8
struct BezierCurve {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Vec2* points; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool useLUT; // Offset: 0x38
    uint8_t _pad_2[0x57]; // Offset: 0x39
};

// Original name: LegacyCraftingRecipeDef_Record
// Size: 0x20
// VTable: 0x149a0f2a0
struct LegacyCraftingRecipeDef_Record {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LegacyCraftingRecipeDefRecord recipeRecord; // Offset: 0x8
};

// Original name: DynArray_SWeaponSpinAnimationParams
// Generated DynArray for base type: SWeaponSpinAnimationParams
// Size: 0x8
struct DynArray_SWeaponSpinAnimationParams {
    SWeaponSpinAnimationParams* m_data; // Offset: 0x0
};

// Original name: SWeaponConditionAll
// Size: 0x38
// VTable: 0x149a700e0
struct SWeaponConditionAll {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SWeaponConditionBase* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SWeaponConditionAny
// Size: 0x38
// VTable: 0x149a70140
struct SWeaponConditionAny {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SWeaponConditionBase* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ScanCustomValueArray
// Size: 0x38
// VTable: 0x1499c7370
struct ScanCustomValueArray {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ScanCustomValue* value; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ControlHints_HintDisplayInfoAction
// Size: 0x68
// VTable: 0x149a676a0
struct ControlHints_HintDisplayInfoAction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool overrideName; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CLocIdentifier* name; // Offset: 0x10
    bool includeSeparator; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    CLocIdentifier* separatorInputName; // Offset: 0x20
    CryStringT* separatorIconPath; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    DynArray_ControlHints_Input* actions; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x40
};

// Original name: DynArray_DialogueBundleEntry
// Generated DynArray for base type: DialogueBundleEntry
// Size: 0x8
struct DynArray_DialogueBundleEntry {
    DialogueBundleEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_WeightedDialogueBundleEntry
// Generated DynArray for base type: WeightedDialogueBundleEntry
// Size: 0x8
struct DynArray_WeightedDialogueBundleEntry {
    WeightedDialogueBundleEntry* m_data; // Offset: 0x0
};

// Original name: VehicleCareer
// Size: 0x40
// VTable: 0x1499aaac8
struct VehicleCareer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    DynArray_VehicleRole* roleList; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: SGeometryViewDistanceRatioCategories
// Size: 0x38
// VTable: 0x1499a1720
struct SGeometryViewDistanceRatioCategories {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SViewDistanceRatioParams* categories; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ActorStatData
// Size: 0x80
// VTable: 0x1499fe030
struct ActorStatData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statType; // Offset: 0x8
    float initialValue; // Offset: 0xc
    float minimumStatValue; // Offset: 0x10
    float maximumStatValue; // Offset: 0x14
    float decayRate; // Offset: 0x18
    float baseDecayCooldown; // Offset: 0x1c
    float initialCooldown; // Offset: 0x20
    ARDataType cooldownType; // Offset: 0x24
    bool decayToCurrentStatus; // Offset: 0x28
    bool mutuallyExclusiveStatuses; // Offset: 0x29
    bool remoteClientPredicted; // Offset: 0x2a
    bool useIdealStatValue; // Offset: 0x2b
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    DynArray_LinkedStatBase* linkedStats; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
    StatusEffectSetupBase effectSetup; // Offset: 0x60
    StatusMaskedRetriggerSetupBase maskedRetriggerSetup; // Offset: 0x70
};

// Original name: HarvestableClusterPreset
// Size: 0x40
// VTable: 0x1499eef38
struct HarvestableClusterPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float probabilityOfClustering; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_HarvestableClusterParams* clusterParamsArray; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: DynArray_SReputationStandingRewardBonusParams
// Generated DynArray for base type: SReputationStandingRewardBonusParams
// Size: 0x8
struct DynArray_SReputationStandingRewardBonusParams {
    SReputationStandingRewardBonusParams* m_data; // Offset: 0x0
};

// Original name: SReputationStandingMapParams
// Size: 0x48
// VTable: 0x149a95e90
struct SReputationStandingMapParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int64_t reputationCeiling; // Offset: 0x8
    int64_t initialReputation; // Offset: 0x10
    DynArray_SReputationStandingParams* standings; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: ItemWeaponBeamVFXStrengthOverrideParams
// Size: 0x40
// VTable: 0x1499f6df0
struct ItemWeaponBeamVFXStrengthOverrideParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ModifierInterpolator* interpolators; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float strength; // Offset: 0x38
    float alpha; // Offset: 0x3c
};

// Original name: RadarDeltaSignatureDetectionParams
// Size: 0x38
// VTable: 0x1499c5d08
struct RadarDeltaSignatureDetectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RadarDeltaSignatureEntry deltaSignatureDetection; // Offset: 0x8
    bool alwaysDetect; // Offset: 0x20
    bool markActiveDetection; // Offset: 0x21
    ARDataType detectionChargeLevel; // Offset: 0x22
    uint8_t _pad_1[0x1]; // Offset: 0x23
    float emissionModifier; // Offset: 0x24
    ScanWaveDetectionParams scanWaveDetectionParams; // Offset: 0x28
};

// Original name: MasterModeSwitchDeltaSignatureTypes
// Size: 0x38
// VTable: 0x1499c4498
struct MasterModeSwitchDeltaSignatureTypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RadarDeltaSignatureEntry navToScm; // Offset: 0x8
    RadarDeltaSignatureEntry scmToNav; // Offset: 0x20
};

// Original name: DynArray_RadarDeltaSignatureEntry
// Generated DynArray for base type: RadarDeltaSignatureEntry
// Size: 0x8
struct DynArray_RadarDeltaSignatureEntry {
    RadarDeltaSignatureEntry* m_data; // Offset: 0x0
};

// Original name: ItemAwardWeightings
// Size: 0x40
// VTable: 0x1499726c8
struct ItemAwardWeightings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float weighting; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ItemAwardBase* awards; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: GlobalJumpTunnelCameraEffectParams
// Size: 0x288
// VTable: 0x1499f48b0
struct GlobalJumpTunnelCameraEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    JumpTunnelCameraEffects alignmentToSpline; // Offset: 0x8
    JumpTunnelCameraEffects distortionRatio; // Offset: 0x70
    JumpTunnelCameraEffects openingProximity; // Offset: 0xd8
    JumpTunnelCameraEffects wallProximity; // Offset: 0x140
    JumpTunnelCameraEffects failureState; // Offset: 0x1a8
    JumpTunnelCameraEffects velocityStrength; // Offset: 0x210
    JumpDriveVelocityStrengthParams velocityStrengthParams; // Offset: 0x278
};

// Original name: S42CommendationRulesEntry
// Size: 0x50
// VTable: 0x149a36ce8
struct S42CommendationRulesEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    S42Commendation commendation; // Offset: 0x8
    DynArray_S42CommendationRequirementBase* requirements; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: FlightHUDUIView_Config
// Size: 0x38
// VTable: 0x149aa1f40
struct FlightHUDUIView_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_FlightHUDUIMessage* messages; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SEntityComponentObjectMetadataParams
// Size: 0x58
// VTable: 0x1499e7f68
struct SEntityComponentObjectMetadataParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x18
    DynArray_SObjectMetadataParams* metadata; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    bool hasLocalBounds; // Offset: 0x50
    bool isDynamic; // Offset: 0x51
    uint8_t _pad_2[0x6]; // Offset: 0x52
};

// Original name: UIElementSoundsRecord
// Size: 0x38
// VTable: 0x1499bb2d0
struct UIElementSoundsRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_UIElementSoundEntry* SoundDBs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: Hauling_ObjectiveSettings
// Size: 0x108
// VTable: 0x14996e848
struct Hauling_ObjectiveSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectiveDisplayInfo collectObjective; // Offset: 0x8
    ObjectiveDisplayInfo resourceDeliverObjective; // Offset: 0x30
    ObjectiveDisplayInfo collectAndDeliverObjective; // Offset: 0x58
    ObjectiveDisplayInfo itemDeliverObjective; // Offset: 0x80
    CryStringT* itemExtendedTextToken; // Offset: 0xa8
    uint8_t _pad_1[0x8]; // Offset: 0xb0
    CryStringT* pickupLocationExtendedTextToken; // Offset: 0xb8
    uint8_t _pad_2[0x8]; // Offset: 0xc0
    CryStringT* amountExtendedTextToken; // Offset: 0xc8
    uint8_t _pad_3[0x8]; // Offset: 0xd0
    CryStringT* totalExtendedTextToken; // Offset: 0xd8
    uint8_t _pad_4[0x8]; // Offset: 0xe0
    CryStringT* dropOffLocationExtendedTextToken; // Offset: 0xe8
    uint8_t _pad_5[0x8]; // Offset: 0xf0
    MobiglasDisplayLayoutBase mobiglasDisplayLayout; // Offset: 0xf8
};

// Original name: SDespawnRules
// Size: 0x40
// VTable: 0x149a40548
struct SDespawnRules {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SDespawnRule* rules; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float despawnDelaySeconds; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: VoiceBundle
// Size: 0x48
// VTable: 0x14997eb48
struct VoiceBundle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_VoiceSingle* voices; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: BuildingBlocks_StaticArrayEntry
// Size: 0x38
// VTable: 0x14998a480
struct BuildingBlocks_StaticArrayEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_StaticArrayDataBase* structureVariables; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: FoleyLoop
// Size: 0x60
// VTable: 0x149a680c8
struct FoleyLoop {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* playTrigger; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* stopTrigger; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    float threshold; // Offset: 0x28
    bool applyToClient; // Offset: 0x2c
    bool applyToNLPC; // Offset: 0x2d
    uint8_t _pad_3[0x2]; // Offset: 0x2e
    DynArray_UserRTPC* userRTPCs; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x38
};

// Original name: FoleyOneShot
// Size: 0x78
// VTable: 0x149a68238
struct FoleyOneShot {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* trigger; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float threshold; // Offset: 0x18
    float actorSpeedThreshold; // Offset: 0x1c
    bool playOnRising; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
    FoleyAxis axis; // Offset: 0x28
    bool applyToClient; // Offset: 0x40
    bool applyToNLPC; // Offset: 0x41
    uint8_t _pad_3[0x6]; // Offset: 0x42
    DynArray_UserRTPC* userRTPCs; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x50
};

// Original name: SUsableIdleParams
// Size: 0x38
// VTable: 0x149a91c50
struct SUsableIdleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SUsableIdlePoseOverride* idlePoseOverrides; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SShopUIProviderParams
// Size: 0x60
// VTable: 0x149a42200
struct SShopUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SShopUIProviderCategoryIcon* categoryIcons; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    bool defaultModeBuying; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
    CryStringT* degradationIcon; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
};

// Original name: UIStateDisplay
// Size: 0x38
// VTable: 0x149aa88c0
struct UIStateDisplay {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_UIStateDisplay_Threshold* thresholds; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: EmotionList
// Size: 0x38
// VTable: 0x149aa4840
struct EmotionList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EmotionDescription* emotions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_ActorStatusBuff
// Generated DynArray for base type: ActorStatusBuff
// Size: 0x8
struct DynArray_ActorStatusBuff {
    ActorStatusBuff* m_data; // Offset: 0x0
};

// Original name: SCItemPriorityGroupParam
// Size: 0x58
// VTable: 0x149a06b10
struct SCItemPriorityGroupParam {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t defaultPriority; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    DynArray_SCItemPriorityTagParam* tags; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x40]; // Offset: 0x18
};

// Original name: DynArray_SReputationContextBBPropertyParams
// Generated DynArray for base type: SReputationContextBBPropertyParams
// Size: 0x8
struct DynArray_SReputationContextBBPropertyParams {
    SReputationContextBBPropertyParams* m_data; // Offset: 0x0
};

// Original name: WeatherEffects_Atmosphere_PropertyValue
// Size: 0x48
// VTable: 0x149997dd0
struct WeatherEffects_Atmosphere_PropertyValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType propertyType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    WeatherEffects_SpaceLoopEffect spaceLoopEffect; // Offset: 0x10
    Range interpolationRange; // Offset: 0x38
};

// Original name: WeatherEffects_Asteroid_PropertyValue
// Size: 0x48
// VTable: 0x149997d20
struct WeatherEffects_Asteroid_PropertyValue {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType propertyType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    WeatherEffects_SpaceLoopEffect spaceLoopEffect; // Offset: 0x10
    Range interpolationRange; // Offset: 0x38
};

// Original name: WeatherEffects_Atmosphere_WaterDepth
// Size: 0x40
// VTable: 0x149997f58
struct WeatherEffects_Atmosphere_WaterDepth {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WeatherEffects_SpaceLoopEffect spaceLoopEffect; // Offset: 0x8
    Range interpolationRange; // Offset: 0x30
};

// Original name: WeatherEffects_Atmosphere_VolumetricCloudDensity
// Size: 0x40
// VTable: 0x149997e58
struct WeatherEffects_Atmosphere_VolumetricCloudDensity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WeatherEffects_SpaceLoopEffect spaceLoopEffect; // Offset: 0x8
    Range interpolationRange; // Offset: 0x30
};

// Original name: WeatherEffects_Atmosphere_GasCloudOpticalDensity
// Size: 0x40
// VTable: 0x149997ed8
struct WeatherEffects_Atmosphere_GasCloudOpticalDensity {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WeatherEffects_SpaceLoopEffect spaceLoopEffect; // Offset: 0x8
    Range interpolationRange; // Offset: 0x30
};

// Original name: DynArray_BlobVFXDistanceParams
// Generated DynArray for base type: BlobVFXDistanceParams
// Size: 0x8
struct DynArray_BlobVFXDistanceParams {
    BlobVFXDistanceParams* m_data; // Offset: 0x0
};

// Original name: PingWaveVFXParams
// Size: 0xc0
// VTable: 0x1499c5070
struct PingWaveVFXParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_GlobalResourceParticle* waveParticle; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    GlobalResourceGeometry pulseSphereGeometry; // Offset: 0x38
    GlobalResourceGeometry pulseHalfSphereGeometry; // Offset: 0x50
    GlobalResourceGeometry pulseConeGeometry; // Offset: 0x68
    GlobalResourceMaterial pulseMaterial; // Offset: 0x80
    GlobalResourceMaterial conePulseMaterial; // Offset: 0x98
    float visualMaxDistance; // Offset: 0xb0
    float visualAcceleration; // Offset: 0xb4
    bool snapWaveTimescaleToLifetime; // Offset: 0xb8
    bool use360PingwaveEffectForAllLevels; // Offset: 0xb9
    bool attachPingwaveEffectToHost; // Offset: 0xba
    uint8_t _pad_2[0x5]; // Offset: 0xbb
};

// Original name: CommunicationVariableConfig
// Size: 0x38
// VTable: 0x14997f4c0
struct CommunicationVariableConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CommunicationVariableBool* variables; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BuildingBlocks_StyleSelectorConditionAnyOfCondition
// Size: 0x40
// VTable: 0x14998cd50
struct BuildingBlocks_StyleSelectorConditionAnyOfCondition {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: BuildingBlocks_StyleSelectorConditionAllOfCondition
// Size: 0x40
// VTable: 0x14998ce10
struct BuildingBlocks_StyleSelectorConditionAllOfCondition {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: BuildingBlocks_StyleSelectorConditionParent
// Size: 0x40
// VTable: 0x14998cfa0
struct BuildingBlocks_StyleSelectorConditionParent {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: BuildingBlocks_StyleSelectorConditionChild
// Size: 0x40
// VTable: 0x14998d000
struct BuildingBlocks_StyleSelectorConditionChild {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: BuildingBlocks_StyleConditionList
// Size: 0x50
// VTable: 0x149981a28
struct BuildingBlocks_StyleConditionList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x30]; // Offset: 0x20
};

// Original name: BuildingBlocks_StyleSelectorConditionAncestor
// Size: 0x70
// VTable: 0x14998cf48
struct BuildingBlocks_StyleSelectorConditionAncestor {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_BuildingBlocks_StyleSelectorConditionBase* breakConditions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    DynArray_BuildingBlocks_StyleSelectorConditionBase* conditions; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
};

// Original name: DynArray_ActorStatusEffect
// Generated DynArray for base type: ActorStatusEffect
// Size: 0x8
struct DynArray_ActorStatusEffect {
    ActorStatusEffect* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_KeyframeModifierData
// Generated DynArray for base type: BuildingBlocks_KeyframeModifierData
// Size: 0x8
struct DynArray_BuildingBlocks_KeyframeModifierData {
    BuildingBlocks_KeyframeModifierData* m_data; // Offset: 0x0
};

// Original name: MobiGlasMissionAuthorization
// Size: 0x38
// VTable: 0x149a37010
struct MobiGlasMissionAuthorization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MobiGlasAuthorizationEntry* authorizationEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_EATransportTransitionGroupParams
// Generated DynArray for base type: EATransportTransitionGroupParams
// Size: 0x8
struct DynArray_EATransportTransitionGroupParams {
    EATransportTransitionGroupParams* m_data; // Offset: 0x0
};

// Original name: StarMapAmenityTypes
// Size: 0x38
// VTable: 0x149a8f640
struct StarMapAmenityTypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_StarMapAmenityTypeEntry* amenityTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LightningBehavior_Effect
// Size: 0x48
// VTable: 0x149979468
struct LightningBehavior_Effect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* lightningEffect; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_LightningTargetMode* targetModes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: PlanetDayNightTemperatureTemplateRef
// Size: 0x20
// VTable: 0x14999d1d0
struct PlanetDayNightTemperatureTemplateRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlanetDayNightTemperatureTemplate dayNightTemperatureParamsRecord; // Offset: 0x8
};

// Original name: BuidlingBlocks_FieldModifierAnimation
// Size: 0x50
// VTable: 0x14998c670
struct BuidlingBlocks_FieldModifierAnimation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Animation value; // Offset: 0x8
};

// Original name: DynArray_WorldDisplayEnvironmentBase
// Generated DynArray for base type: WorldDisplayEnvironmentBase
// Size: 0x8
struct DynArray_WorldDisplayEnvironmentBase {
    WorldDisplayEnvironmentBase* m_data; // Offset: 0x0
};

// Original name: DynArray_BoidsBehaviorRuleContainer
// Generated DynArray for base type: BoidsBehaviorRuleContainer
// Size: 0x8
struct DynArray_BoidsBehaviorRuleContainer {
    BoidsBehaviorRuleContainer* m_data; // Offset: 0x0
};

// Original name: SDegradationParams
// Size: 0x50
// VTable: 0x1499d7d98
struct SDegradationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool StopDegradingIfDestroyed; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    DynArray_SAccumulatorParams* accumulators; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: DynArray_WeaponProceduralClip
// Generated DynArray for base type: WeaponProceduralClip
// Size: 0x8
struct DynArray_WeaponProceduralClip {
    WeaponProceduralClip* m_data; // Offset: 0x0
};

// Original name: LiteralStringProviderComponentParams
// Size: 0x48
// VTable: 0x149993950
struct LiteralStringProviderComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_LiteralStringUserVariable* strings; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: DamageMapDamageForm
// Size: 0x88
// VTable: 0x1499374d8
struct DamageMapDamageForm {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageMapDamageTypes damageStrengthMultipliers; // Offset: 0x8
    DamageMapChannels innerRadiusMultipliers; // Offset: 0x40
    DamageMapChannels outerRadiusMultipliers; // Offset: 0x58
    DamageMapChannels noiseStrength; // Offset: 0x70
};

// Original name: CustomMaterialsEntityParams
// Size: 0x38
// VTable: 0x1499e7e90
struct CustomMaterialsEntityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CustomMaterialEntryParams* customMaterials; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: RaSTaRLibraryCategory
// Size: 0x48
// VTable: 0x14999d578
struct RaSTaRLibraryCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_RaSTaRLibraryElement* elements; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: TVMovieList
// Size: 0x38
// VTable: 0x149aa8470
struct TVMovieList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VideoComms* movies; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SEntityDensityClassOverwritesRef
// Size: 0x20
// VTable: 0x149ac45a0
struct SEntityDensityClassOverwritesRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SEntityDensityClassOverwritesRecord densityOverwritesRef; // Offset: 0x8
};

// Original name: DialogueContent
// Size: 0x50
// VTable: 0x149a8c7e0
struct DialogueContent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* localizedSubtitleText; // Offset: 0x8
    CryStringT* tempText; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    DynArray_DialogueExternalSource* externalSources; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: QuantumDriveSplineTraversalParams
// Size: 0xd8
// VTable: 0x149a52378
struct QuantumDriveSplineTraversalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuantumDriveSplineFXParams splineFX; // Offset: 0x8
    float rollUnderFullRotationDistance; // Offset: 0x60
    ARDataType rollUnderStartPhase; // Offset: 0x64
    float arrivalRadiusScalar; // Offset: 0x68
    float nearAlignmentThreshold; // Offset: 0x6c
    float nearTensionScalar; // Offset: 0x70
    float midTensionScalar; // Offset: 0x74
    float farTensionScalar; // Offset: 0x78
    float originNearTensionScalar; // Offset: 0x7c
    float originMidTensionScalar; // Offset: 0x80
    float originFarTensionScalar; // Offset: 0x84
    float targetNearTensionScalar; // Offset: 0x88
    float targetMidTensionScalar; // Offset: 0x8c
    float targetFarTensionScalar; // Offset: 0x90
    float angleDerivedTensionExponent; // Offset: 0x94
    float tensionModifiersExponent; // Offset: 0x98
    float baseTensionMin; // Offset: 0x9c
    float baseTensionMax; // Offset: 0xa0
    float tangentPlanetScalar; // Offset: 0xa4
    float maxAlignmentToUseTangentDirection; // Offset: 0xa8
    float nearEndingTargetOrientationRatio; // Offset: 0xac
    float midEndingTargetOrientationRatio; // Offset: 0xb0
    float farEndingTargetOrientationRatio; // Offset: 0xb4
    float nearArrivalOrientationThreshold; // Offset: 0xb8
    float midDerivedTargetPositionAlignment; // Offset: 0xbc
    float farDerivedTargetPositionAlignment; // Offset: 0xc0
    ARDataType rotationBehavior; // Offset: 0xc4
    QuantumDriveSplineRollbackParams rollbackParams; // Offset: 0xc8
};

// Original name: PlayerGroupManagerNotificationParams
// Size: 0x68
// VTable: 0x149aa2328
struct PlayerGroupManagerNotificationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlayerNotificationBannerParams notificationParams; // Offset: 0x8
    DynArray_ARDataType* groupSubscriptionTypes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: FriendManagerNotificationsParams
// Size: 0x98
// VTable: 0x149aa0470
struct FriendManagerNotificationsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlayerNotificationBannerParams friendAdded; // Offset: 0x8
    PlayerNotificationBannerParams friendRequestReceived; // Offset: 0x38
    PlayerNotificationBannerParams friendRequestDeclined; // Offset: 0x68
};

// Original name: SCharacterCustomizerSkinBaseMaterialList
// Size: 0x48
// VTable: 0x149a0def8
struct SCharacterCustomizerSkinBaseMaterialList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SGeometryModelTagBase modelTag; // Offset: 0x8
    DynArray_SCharacterCustomizerBaseMaterialSet* skinBaseMaterials; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SCharacterCustomizerWildlineCondition
// Size: 0x38
// VTable: 0x149a0cae0
struct SCharacterCustomizerWildlineCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCharacterCustomizerWildlineSubconditionBase* subconditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SpeedThrottleComponentParams
// Size: 0x30
// VTable: 0x149a61e60
struct SpeedThrottleComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    LocalPlayerSpeedThrottleComponent speedThrottleParamsRecord; // Offset: 0x18
};

// Original name: SecurityClearance_OutfitRequirement_OrDef
// Size: 0x38
// VTable: 0x149974540
struct SecurityClearance_OutfitRequirement_OrDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SecurityClearance_OutfitRequirementDef* requirementsToOr; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SecurityClearance_OutfitRequirement_AndDef
// Size: 0x38
// VTable: 0x1499745a0
struct SecurityClearance_OutfitRequirement_AndDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SecurityClearance_OutfitRequirementDef* requirementsToAnd; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SMineableHealthComponentParams
// Size: 0x1a8
// VTable: 0x1499e7d98
struct SMineableHealthComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SMiningDamageMapParams damageMapParamsCenter; // Offset: 0x18
    SMiningDamageMapParams damageMapParamsOuter; // Offset: 0xe0
};

// Original name: CameraRemoteTurretConfig
// Size: 0x120
// VTable: 0x1499e9590
struct CameraRemoteTurretConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x60
    DynArray_GlobalResourceTexture* postFlashUI; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0xc0
    float fovScale; // Offset: 0xe8
    float focusSpeed; // Offset: 0xec
    DynArray_float* zoomStages; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xf8
};

// Original name: CameraStaticFixedSpectatorConfig
// Size: 0xe8
// VTable: 0x149a017c8
struct CameraStaticFixedSpectatorConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x60
    CryStringT* focusTargetAttachmentName; // Offset: 0xb8
    uint8_t _pad_1[0x8]; // Offset: 0xc0
    Vec3 targetAttachmentPositionOffset; // Offset: 0xc8
    float targetAttachmentLerpFactor; // Offset: 0xe0
    uint8_t _pad_2[0x4]; // Offset: 0xe4
};

// Original name: CameraStaticConfig
// Size: 0xe8
// VTable: 0x149a01628
struct CameraStaticConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x60
    CryStringT* focusTargetAttachmentName; // Offset: 0xb8
    uint8_t _pad_1[0x8]; // Offset: 0xc0
    Vec3 targetAttachmentPositionOffset; // Offset: 0xc8
    float targetAttachmentLerpFactor; // Offset: 0xe0
    uint8_t _pad_2[0x4]; // Offset: 0xe4
};

// Original name: DynArray_AeroSurface
// Generated DynArray for base type: AeroSurface
// Size: 0x8
struct DynArray_AeroSurface {
    AeroSurface* m_data; // Offset: 0x0
};

// Original name: DynArray_SEntityPhysicsWheel
// Generated DynArray for base type: SEntityPhysicsWheel
// Size: 0x8
struct DynArray_SEntityPhysicsWheel {
    SEntityPhysicsWheel* m_data; // Offset: 0x0
};

// Original name: ARMarkerGlobalParams
// Size: 0x40
// VTable: 0x149a91080
struct ARMarkerGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARMarkerPlayerOffsetParams ARMarkerPlayerOffset; // Offset: 0x8
};

// Original name: SWeaponProceduralHeadRecoilCurveModifierDef
// Size: 0x88
// VTable: 0x149a71e90
struct SWeaponProceduralHeadRecoilCurveModifierDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SHeadRecoilNoiseModifier positionModifier; // Offset: 0x8
    SHeadRecoilNoiseModifier rotationModifier; // Offset: 0x40
    float headRecoilTimeModifier; // Offset: 0x78
    float frequencyModifier; // Offset: 0x7c
    float smoothingSpeedModifier; // Offset: 0x80
    uint8_t _pad_1[0x4]; // Offset: 0x84
};

// Original name: DynArray_CylinderFieldGeom
// Generated DynArray for base type: CylinderFieldGeom
// Size: 0x8
struct DynArray_CylinderFieldGeom {
    CylinderFieldGeom* m_data; // Offset: 0x0
};

// Original name: DynArray_SEffectInputParamsSound
// Generated DynArray for base type: SEffectInputParamsSound
// Size: 0x8
struct DynArray_SEffectInputParamsSound {
    SEffectInputParamsSound* m_data; // Offset: 0x0
};

// Original name: SEntityComponentPhysicsGridParams
// Size: 0x28
// VTable: 0x14999e6f0
struct SEntityComponentPhysicsGridParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntityBasePhysicsGridParams PhysGridType; // Offset: 0x18
};

// Original name: SGuidanceAndControlParams
// Size: 0x108
// VTable: 0x149a24bc0
struct SGuidanceAndControlParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isDumbMissile; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float dumbfireRotationScale; // Offset: 0xc
    float linearSpeed; // Offset: 0x10
    float boostPhaseDuration; // Offset: 0x14
    float terminalPhaseEngagementTime; // Offset: 0x18
    float terminalPhaseEngagementAngle; // Offset: 0x1c
    float fuelTankSize; // Offset: 0x20
    float pidIntegralTerm; // Offset: 0x24
    float pidDerivativeTerm; // Offset: 0x28
    float pidProportionalTerm; // Offset: 0x2c
    SGuidanceAndControlPhaseParams boostPhase; // Offset: 0x30
    SGuidanceAndControlPhaseParams interceptPhase; // Offset: 0x78
    SGuidanceAndControlPhaseParams terminalPhase; // Offset: 0xc0
};

// Original name: PlayerToPlayerCommsCallGlobalParams
// Size: 0x88
// VTable: 0x149a82898
struct PlayerToPlayerCommsCallGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WebRTCCommsCallProjectorLightParams faceLight; // Offset: 0x8
    WebRTCCommsCallProjectorLightParams environmentLight; // Offset: 0x48
};

// Original name: SSimpleRotationComponentParams
// Size: 0x60
// VTable: 0x1499e25b0
struct SSimpleRotationComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Ang3 angularVelocity; // Offset: 0x18
    bool stopRotationOnCollision; // Offset: 0x30
    bool rotateAroundCenterOfMass; // Offset: 0x31
    uint8_t _pad_1[0x2]; // Offset: 0x32
    float rotationSpeedMassFactor; // Offset: 0x34
    bool enableRuntimeParameterUpdates; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
    SimpleRotationComponentVariation variationParams; // Offset: 0x40
    SimpleRotationComponentOscillation oscillationParams; // Offset: 0x50
};

// Original name: TimeToTakeOffMinOverrideByDockingClass
// Size: 0x28
// VTable: 0x149a3e5f8
struct TimeToTakeOffMinOverrideByDockingClass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LandingPadSize dockingClass; // Offset: 0x8
    float timeToTakeOffMin; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: StayTimeMinOverrideByDockingClass
// Size: 0x28
// VTable: 0x149a3e678
struct StayTimeMinOverrideByDockingClass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LandingPadSize dockingClass; // Offset: 0x8
    float stayTimeMin; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: HeadMotionShakeSettings
// Size: 0xf0
// VTable: 0x149a98270
struct HeadMotionShakeSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabledForChaseCamera; // Offset: 0x8
    bool enabledForOrbitCamera; // Offset: 0x9
    bool enabledForOrbitFixedCamera; // Offset: 0xa
    uint8_t _pad_1[0x5]; // Offset: 0xb
    HeadMotionOffsetParams translationSettings; // Offset: 0x10
    HeadMotionOffsetParams rotationSettings; // Offset: 0x80
};

// Original name: DynArray_Texture3DFieldGeom
// Generated DynArray for base type: Texture3DFieldGeom
// Size: 0x8
struct DynArray_Texture3DFieldGeom {
    Texture3DFieldGeom* m_data; // Offset: 0x0
};

// Original name: ActorCameraOffsetFiltered
// Size: 0x80
// VTable: 0x1499b2a70
struct ActorCameraOffsetFiltered {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ARDataType filterByLocomotionSet; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    ActorCameraOffsetParams offset; // Offset: 0x50
};

// Original name: SpecificHandholdAttachSpotChoiceParams
// Size: 0x40
// VTable: 0x149a03518
struct SpecificHandholdAttachSpotChoiceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* attachSpotName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ClosestOrientationHandholdAttachSpotChoiceParams fallbackParams; // Offset: 0x18
    uint8_t _pad_2[0x18]; // Offset: 0x28
};

// Original name: DynArray_SObservablePointDef
// Generated DynArray for base type: SObservablePointDef
// Size: 0x8
struct DynArray_SObservablePointDef {
    SObservablePointDef* m_data; // Offset: 0x0
};

// Original name: DynArray_HandholdAttachSpotParams
// Generated DynArray for base type: HandholdAttachSpotParams
// Size: 0x8
struct DynArray_HandholdAttachSpotParams {
    HandholdAttachSpotParams* m_data; // Offset: 0x0
};

// Original name: SCarryableInteractionPointOffsets
// Size: 0x110
// VTable: 0x149a8ec30
struct SCarryableInteractionPointOffsets {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT interactionOffsetEquipped; // Offset: 0x8
    QuatT interactionOffsetCarried; // Offset: 0x60
    QuatT interactionOffsetInspected; // Offset: 0xb8
};

// Original name: SeatUserActorCDIKConfig
// Size: 0xa0
// VTable: 0x149a7d960
struct SeatUserActorCDIKConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* cdikTargetName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* IKLimbHandle; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* parentJointName; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    QuatT cdikTargetOffset; // Offset: 0x38
    CryStringT* userCDIKReferenceJoint; // Offset: 0x90
    uint8_t _pad_4[0x8]; // Offset: 0x98
};

// Original name: SAttachableObjectContainerData
// Size: 0x80
// VTable: 0x1499a31f0
struct SAttachableObjectContainerData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fileName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* guid; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    QuatT Offset; // Offset: 0x28
};

// Original name: NavLinkLedgeLocation
// Size: 0x60
// VTable: 0x1499ec6c0
struct NavLinkLedgeLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT relativeTransform; // Offset: 0x8
};

// Original name: SurfaceRaindrops_Acceleration
// Size: 0xa8
// VTable: 0x149998570
struct SurfaceRaindrops_Acceleration {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float speedMultiplier; // Offset: 0x8
    float maximumInfluenceSpeed; // Offset: 0xc
    Range rotationMultiplierSpeedRange; // Offset: 0x10
    Vec3 rotationMultiplierAxes; // Offset: 0x20
    float maximumAcceleration; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    CryStringT* helper; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
    QuatT offset; // Offset: 0x50
};

// Original name: UIAudioComponent_ManualOffset
// Size: 0x60
// VTable: 0x1499d3d28
struct UIAudioComponent_ManualOffset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT offset; // Offset: 0x8
};

// Original name: SVehicleObjectContainerParams
// Size: 0xa8
// VTable: 0x1499aac30
struct SVehicleObjectContainerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fileName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* guid; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    QuatT Offset; // Offset: 0x28
    CryStringT* boneName; // Offset: 0x80
    uint8_t _pad_3[0x8]; // Offset: 0x88
    bool shouldRequestNavMeshRegenerationOnLoad; // Offset: 0x90
    uint8_t _pad_4[0x7]; // Offset: 0x91
    CryStringT* resourceNetworkItemportName; // Offset: 0x98
    uint8_t _pad_5[0x8]; // Offset: 0xa0
};

// Original name: UIWorldDisplayHolographicSettings
// Size: 0xa8
// VTable: 0x149aa9748
struct UIWorldDisplayHolographicSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool spawnHoloVolume; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    ARDataType volumeShapeType; // Offset: 0xc
    Vec3 cubeSizeMultiplier; // Offset: 0x10
    GlobalResourceMaterial holographicVolumeMaterial; // Offset: 0x28
    float defaultGlow; // Offset: 0x40
    float fadeRatio; // Offset: 0x44
    float transparentListDepthBias; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    QuatT offsetFromAnchor; // Offset: 0x50
};

// Original name: UIAudioComponent_Offset
// Size: 0x60
// VTable: 0x1499d3d20
struct UIAudioComponent_Offset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT offset; // Offset: 0x8
};

// Original name: SCarryableIKInteraction
// Size: 0x80
// VTable: 0x149a8ed60
struct SCarryableIKInteraction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* helperName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* cdikTargetName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    QuatT targetOffset; // Offset: 0x28
};

// Original name: SCItemSeatDashboardScreenPos
// Size: 0x78
// VTable: 0x149a593e0
struct SCItemSeatDashboardScreenPos {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Helper; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float Scale; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    QuatT Offset; // Offset: 0x20
};

// Original name: SEffectParams
// Size: 0xe0
// VTable: 0x14999b450
struct SEffectParams {
    uint8_t _pad_0[0x28]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    CryStringT* tag; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    CryStringT* Helper; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
    QuatT Offset; // Offset: 0x58
    bool IsLooped; // Offset: 0xb0
    bool Enabled; // Offset: 0xb1
    bool Prime; // Offset: 0xb2
    bool Kill; // Offset: 0xb3
    float Timer; // Offset: 0xb4
    int32_t RenderSlot; // Offset: 0xb8
    uint32_t ContextFlags; // Offset: 0xbc
    bool MultiPosition; // Offset: 0xc0
    uint8_t _pad_4[0x7]; // Offset: 0xc1
    Vec3 Axis; // Offset: 0xc8
};

// Original name: NavLinkHelperLocation
// Size: 0x70
// VTable: 0x1499ec608
struct NavLinkHelperLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* helperName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    QuatT relativeTransformToHelper; // Offset: 0x18
};

// Original name: WorldDisplay_MeshEnvironment
// Size: 0xb0
// VTable: 0x149a30638
struct WorldDisplay_MeshEnvironment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType alignment; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    WorldDisplayEnvironmentColor environmentColor; // Offset: 0x10
    float size; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    QuatT offset; // Offset: 0x28
    GlobalResourceGeometry geometry; // Offset: 0x80
    GlobalResourceMaterial material; // Offset: 0x98
};

// Original name: InputPromptConfig
// Size: 0xc8
// VTable: 0x149a65958
struct InputPromptConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputAction actionName; // Offset: 0x8
    CLocIdentifier* displayName; // Offset: 0x38
    bool showLabel; // Offset: 0x40
    uint8_t _pad_1[0x3]; // Offset: 0x41
    ARDataType inputPromptMode; // Offset: 0x44
    ARDataType inputPromptBoundTo; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    CryStringT* helperName; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    int32_t objectSlot; // Offset: 0x60
    uint8_t _pad_4[0x4]; // Offset: 0x64
    QuatT offset; // Offset: 0x68
    bool isAngleConstrained; // Offset: 0xc0
    bool shouldShowOnSuccessEffect; // Offset: 0xc1
    uint8_t _pad_5[0x6]; // Offset: 0xc2
};

// Original name: SLootableMainInteractionsTarget
// Size: 0x78
// VTable: 0x149a453e8
struct SLootableMainInteractionsTarget {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* helperName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    QuatT offset; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x70
};

// Original name: SGrip
// Size: 0xb0
// VTable: 0x149a8b578
struct SGrip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* gripID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* optionalHelper; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    SGripShapeParams gripShapeParameters; // Offset: 0x28
    QuatT offset; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0xa8
};

// Original name: InstancedInteriorComponentParams
// Size: 0x80
// VTable: 0x1499e4cc0
struct InstancedInteriorComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t sizeId; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    CLocIdentifier* name; // Offset: 0x20
    QuatT spawnTransform; // Offset: 0x28
};

// Original name: NavLinkTransformLocation
// Size: 0x60
// VTable: 0x1499ec660
struct NavLinkTransformLocation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuatT relativeTransform; // Offset: 0x8
};

// Original name: DynArray_QuatT
// Generated DynArray for base type: QuatT
// Size: 0x8
struct DynArray_QuatT {
    QuatT* m_data; // Offset: 0x0
};

// Original name: SCItemAirlockParams
// Size: 0x38
// VTable: 0x1499f36a8
struct SCItemAirlockParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float MaxTimeToWaitForDoors; // Offset: 0x18
    float MinTimeToWaitAfterDoorsClosed; // Offset: 0x1c
    float CycleTime; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    AirlockAreaParams AreaOverride; // Offset: 0x28
};

// Original name: DynArray_TorusFieldGeom
// Generated DynArray for base type: TorusFieldGeom
// Size: 0x8
struct DynArray_TorusFieldGeom {
    TorusFieldGeom* m_data; // Offset: 0x0
};

// Original name: SCItemLandingGearParams
// Size: 0x50
// VTable: 0x149a51c48
struct SCItemLandingGearParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* scopeContext; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* vehicleScopeContext; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    bool alwaysVisible; // Offset: 0x38
    uint8_t _pad_3[0x7]; // Offset: 0x39
    VehicleLandingGearSpring spring; // Offset: 0x40
};

// Original name: VehicleLandingGear
// Size: 0x68
// VTable: 0x1499ab680
struct VehicleLandingGear {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* scopeContext; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* vehicleScopeContext; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* bone; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    float mass; // Offset: 0x38
    bool alwaysVisible; // Offset: 0x3c
    uint8_t _pad_4[0x3]; // Offset: 0x3d
    GlobalResourceGeometry geometry; // Offset: 0x40
    VehicleLandingGearSpring spring; // Offset: 0x58
};

// Original name: DynArray_SDecalParams
// Generated DynArray for base type: SDecalParams
// Size: 0x8
struct DynArray_SDecalParams {
    SDecalParams* m_data; // Offset: 0x0
};

// Original name: SItemPortDefHelper
// Size: 0x120
// VTable: 0x1499af858
struct SItemPortDefHelper {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    QuatT Offset; // Offset: 0x18
    CryStringT* ItemOffsetHelperName; // Offset: 0x70
    uint8_t _pad_2[0x8]; // Offset: 0x78
    SSimulationParamsBase SimulationParams; // Offset: 0x80
    uint8_t _pad_3[0x90]; // Offset: 0x90
};

// Original name: PlanetEffectLOD
// Size: 0x80
// VTable: 0x14999bc90
struct PlanetEffectLOD {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PlanetEffectLODDistance* LODList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    GlobalFogVolume globalFogVolume; // Offset: 0x38
    uint32_t tintColorSampleCells; // Offset: 0x70
    bool sortByViewDistance; // Offset: 0x74
    uint8_t _pad_2[0x3]; // Offset: 0x75
    float overrideHalfResInsertDepth; // Offset: 0x78
    uint8_t _pad_3[0x4]; // Offset: 0x7c
};

// Original name: DynArray_SWeaponAttachmentItemPort
// Generated DynArray for base type: SWeaponAttachmentItemPort
// Size: 0x8
struct DynArray_SWeaponAttachmentItemPort {
    SWeaponAttachmentItemPort* m_data; // Offset: 0x0
};

// Original name: DynArray_SEffectInputParamsParticle
// Generated DynArray for base type: SEffectInputParamsParticle
// Size: 0x8
struct DynArray_SEffectInputParamsParticle {
    SEffectInputParamsParticle* m_data; // Offset: 0x0
};

// Original name: SScenePlayerChoiceSettings
// Size: 0x80
// VTable: 0x149a8a310
struct SScenePlayerChoiceSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SConversationIconParams iconParams; // Offset: 0x8
};

// Original name: PlayerAnimatedInteractionFiltered
// Size: 0x78
// VTable: 0x149a8c310
struct PlayerAnimatedInteractionFiltered {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ARDataType filterByLocomotionSet; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    PlayerAnimatedInteractionWalkingRequestParams params; // Offset: 0x50
};

// Original name: FireHazardFogParams
// Size: 0x58
// VTable: 0x14997c928
struct FireHazardFogParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float softEdges; // Offset: 0x8
    float densityOffset; // Offset: 0xc
    float densityMultiplier; // Offset: 0x10
    float maximumDistance; // Offset: 0x14
    float saturationDensity; // Offset: 0x18
    float falloffSharpness; // Offset: 0x1c
    float noiseVolumeOffset; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    FireHazardFogNoiseParams noise; // Offset: 0x28
};

// Original name: SItemShopARParams
// Size: 0x98
// VTable: 0x1499ee120
struct SItemShopARParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool showOnCenter; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float distancePositionUpdate; // Offset: 0xc
    bool updateOrientationEveryFrame; // Offset: 0x10
    bool silhouetteWithRack; // Offset: 0x11
    uint8_t _pad_2[0x6]; // Offset: 0x12
    SItemShopReference bounds; // Offset: 0x18
    SItemShopReference position; // Offset: 0x40
    SItemShopReference orientation; // Offset: 0x68
    bool faceMinX; // Offset: 0x90
    bool faceMaxX; // Offset: 0x91
    bool faceMinY; // Offset: 0x92
    bool faceMaxY; // Offset: 0x93
    bool faceMinZ; // Offset: 0x94
    bool faceMaxZ; // Offset: 0x95
    uint8_t _pad_3[0x2]; // Offset: 0x96
};

// Original name: SFrontendS42Settings
// Size: 0x2c8
// VTable: 0x149a22b00
struct SFrontendS42Settings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SFrontendS42ActionSettings newGame; // Offset: 0x8
    SFrontendS42ActionSettings continue_; /* continue */ // Offset: 0x48
    SFrontendS42ActionSettings loadGame; // Offset: 0x88
    SFrontendS42ActionSettings quit; // Offset: 0xc8
    SFrontendS42ActionSettings options; // Offset: 0x108
    SFrontendS42ActionSettings hallway; // Offset: 0x148
    SFrontendS42ActionSettings room; // Offset: 0x188
    SFrontendS42ActionSettings galactapedia; // Offset: 0x1c8
    SFrontendS42ActionSettings changeCharacter; // Offset: 0x208
    SFrontendS42ActionSettings debugLevelSelect; // Offset: 0x248
    SFrontendS42ActionSettings missionSelect; // Offset: 0x288
};

// Original name: MiningControllerGlobalParams
// Size: 0xf0
// VTable: 0x149a7fb68
struct MiningControllerGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RGBA highlightColor; // Offset: 0x8
    RGBA highlightColorAbsorbable; // Offset: 0x20
    RGBA highlightColorDistant; // Offset: 0x38
    RGBA highlightColorDistantScanned; // Offset: 0x50
    float highlightOccludedAlpha; // Offset: 0x68
    float highlightOutlineWidth; // Offset: 0x6c
    float highlightDistantMineablesRange; // Offset: 0x70
    uint8_t _pad_1[0x4]; // Offset: 0x74
    MiningCameraShakeConfig cameraShakeConfig; // Offset: 0x78
    bool showChildRockRadarIcon; // Offset: 0xd8
    bool scalePowerGraphMin; // Offset: 0xd9
    uint8_t _pad_2[0x2]; // Offset: 0xda
    float noProgressHintTime; // Offset: 0xdc
    float noProgressHintPower; // Offset: 0xe0
    float fractureDoneFeedbackDuration; // Offset: 0xe4
    float maxScanRaycastDistance; // Offset: 0xe8
    uint8_t _pad_3[0x4]; // Offset: 0xec
};

// Original name: DynArray_CapsuleFieldGeom
// Generated DynArray for base type: CapsuleFieldGeom
// Size: 0x8
struct DynArray_CapsuleFieldGeom {
    CapsuleFieldGeom* m_data; // Offset: 0x0
};

// Original name: DynArray_ProceduralAnimationBone
// Generated DynArray for base type: ProceduralAnimationBone
// Size: 0x8
struct DynArray_ProceduralAnimationBone {
    ProceduralAnimationBone* m_data; // Offset: 0x0
};

// Original name: SUnifiedShakeParamsRecord
// Size: 0x68
// VTable: 0x149a2a2c0
struct SUnifiedShakeParamsRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SUnifiedShakeParamsDef shakeParams; // Offset: 0x8
};

// Original name: DynArray_ObjectiveMarkerLocation
// Generated DynArray for base type: ObjectiveMarkerLocation
// Size: 0x8
struct DynArray_ObjectiveMarkerLocation {
    ObjectiveMarkerLocation* m_data; // Offset: 0x0
};

// Original name: DynArray_CommsNotificationStageListItem
// Generated DynArray for base type: CommsNotificationStageListItem
// Size: 0x8
struct DynArray_CommsNotificationStageListItem {
    CommsNotificationStageListItem* m_data; // Offset: 0x0
};

// Original name: DynArray_EAPickupSpecialEventOverrideParams
// Generated DynArray for base type: EAPickupSpecialEventOverrideParams
// Size: 0x8
struct DynArray_EAPickupSpecialEventOverrideParams {
    EAPickupSpecialEventOverrideParams* m_data; // Offset: 0x0
};

// Original name: LedgeGrabbingParams
// Size: 0xd0
// VTable: 0x149ab0550
struct LedgeGrabbingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LedgeNearbyParams ledgeNearbyParams; // Offset: 0x8
    LedgeTransitionParams vaultTransitionParams; // Offset: 0x50
    LedgeTransitionParams mantleTransitionParams; // Offset: 0x90
};

// Original name: DynArray_SCEntranceItem
// Generated DynArray for base type: SCEntranceItem
// Size: 0x8
struct DynArray_SCEntranceItem {
    SCEntranceItem* m_data; // Offset: 0x0
};

// Original name: DynArray_SphereFieldGeom
// Generated DynArray for base type: SphereFieldGeom
// Size: 0x8
struct DynArray_SphereFieldGeom {
    SphereFieldGeom* m_data; // Offset: 0x0
};

// Original name: CameraThirdPersonBaseConfig
// Size: 0x168
// VTable: 0x149a010b0
struct CameraThirdPersonBaseConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
};

// Original name: CameraView2ShipsFrameParams
// Size: 0x168
// VTable: 0x149a017d0
struct CameraView2ShipsFrameParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
};

// Original name: CameraTimeCamConfig
// Size: 0x1b8
// VTable: 0x149a01760
struct CameraTimeCamConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    float radius; // Offset: 0x168
    float movementSpeed; // Offset: 0x16c
    float sprintSpeed; // Offset: 0x170
    float freeCamRotationScale; // Offset: 0x174
    CameraDOFFocusDistanceConfig DOFFocusDistanceConfig; // Offset: 0x178
    CameraCollisionConfig collisionConfig; // Offset: 0x190
};

// Original name: CameraFreeCamConfig
// Size: 0x1b8
// VTable: 0x149a01758
struct CameraFreeCamConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    float radius; // Offset: 0x168
    float movementSpeed; // Offset: 0x16c
    float sprintSpeed; // Offset: 0x170
    float freeCamRotationScale; // Offset: 0x174
    CameraDOFFocusDistanceConfig DOFFocusDistanceConfig; // Offset: 0x178
    CameraCollisionConfig collisionConfig; // Offset: 0x190
};

// Original name: CameraKillerDeathCamConfig
// Size: 0x1a8
// VTable: 0x149a017c0
struct CameraKillerDeathCamConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraKillerDeathCamParams killerDeathCamParams; // Offset: 0x168
};

// Original name: ItemPreview_TurntableOverride
// Size: 0x70
// VTable: 0x149a95198
struct ItemPreview_TurntableOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemPreview_TurntableSettings settings; // Offset: 0x8
    DynArray_ARDataType* itemTypes; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x48
};

// Original name: WeaponProceduralClipSway
// Size: 0x128
// VTable: 0x149aab5f8
struct WeaponProceduralClipSway {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    float easeFactorInc; // Offset: 0x10
    float easeFactorDec; // Offset: 0x14
    float strafeScopeFactor; // Offset: 0x18
    float rotateScopeFactor; // Offset: 0x1c
    float velocityInterpolationMultiplier; // Offset: 0x20
    float velocityLowPassFilter; // Offset: 0x24
    float accelerationSmoothing; // Offset: 0x28
    float accelerationFrontAugmentation; // Offset: 0x2c
    float verticalVelocityScale; // Offset: 0x30
    float sprintCameraAnimation; // Offset: 0x34
    bool lockStrafeRot; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
    Vec2 lookOffset; // Offset: 0x40
    Vec3 horizLookRot; // Offset: 0x50
    Vec3 vertLookRot; // Offset: 0x68
    Vec3 strafeOffset; // Offset: 0x80
    Vec3 sideStrafeRot; // Offset: 0x98
    Vec3 frontStrafeRot; // Offset: 0xb0
    SWeaponProceduralClipSwayOvershoot overshootParams; // Offset: 0xc8
};

// Original name: LadderAccessClimbParams
// Size: 0x30
// VTable: 0x149a6ab98
struct LadderAccessClimbParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float approachAngle; // Offset: 0x8
    float facingAngle; // Offset: 0xc
    float autoMountRadiusOffset; // Offset: 0x10
    float autoMountRadius; // Offset: 0x14
    bool enterAnimWillGoUnderneath; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    ExitCollisionCheckOverrideParams exitCollisionCheckOverride; // Offset: 0x20
};

// Original name: DynArray_SThrowMode
// Generated DynArray for base type: SThrowMode
// Size: 0x8
struct DynArray_SThrowMode {
    SThrowMode* m_data; // Offset: 0x0
};

// Original name: DynArray_CustomLookAtBB
// Generated DynArray for base type: CustomLookAtBB
// Size: 0x8
struct DynArray_CustomLookAtBB {
    CustomLookAtBB* m_data; // Offset: 0x0
};

// Original name: DynArray_CameraShopItemOffset
// Generated DynArray for base type: CameraShopItemOffset
// Size: 0x8
struct DynArray_CameraShopItemOffset {
    CameraShopItemOffset* m_data; // Offset: 0x0
};

// Original name: CameraSpringConfig
// Size: 0x230
// VTable: 0x1499b2790
struct CameraSpringConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float maxAtmosphericDensity; // Offset: 0xc
    CameraSpringAxesConfig positionalAxes; // Offset: 0x10
    CameraSpringAxesConfig rotationalAxes; // Offset: 0x100
    CameraWheeledVehicleConfig wheeledParams; // Offset: 0x1f0
};

// Original name: SActorProceduralHandsRecoilCurveModifiersDef
// Size: 0x178
// VTable: 0x149a71480
struct SActorProceduralHandsRecoilCurveModifiersDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float recoilTimeModifier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SXYZCurvesWithMaxValuesModifer positionModifiers; // Offset: 0x10
    SXYZCurvesWithMaxValuesModifer rotationModifiers; // Offset: 0x70
    float minDecayTimeModifier; // Offset: 0xd0
    float maxDecayTimeModifier; // Offset: 0xd4
    SActorProceduralHandsRecoilCurveDecayModifiersDef positionDecayModifiers; // Offset: 0xd8
    SActorProceduralHandsRecoilCurveDecayModifiersDef rotationDecayModifiers; // Offset: 0x128
};

// Original name: LightningRegionLightningParams
// Size: 0xe0
// VTable: 0x149996cc0
struct LightningRegionLightningParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle lightningEffect; // Offset: 0x8
    uint32_t targetingSeed; // Offset: 0x20
    int32_t appearanceSeed; // Offset: 0x24
    float strength; // Offset: 0x28
    bool strikeArea; // Offset: 0x2c
    uint8_t _pad_1[0x3]; // Offset: 0x2d
    EntityLinkTargetingParams strikeLinks; // Offset: 0x30
    bool strikeSurfaces; // Offset: 0x40
    uint8_t _pad_2[0x3]; // Offset: 0x41
    float conductiveSurfaceSpawnProbability; // Offset: 0x44
    float internalStrikeProbability; // Offset: 0x48
    float minimumInterval; // Offset: 0x4c
    float maximumInterval; // Offset: 0x50
    float spawnRadius; // Offset: 0x54
    float targetRadius; // Offset: 0x58
    float minimumLength; // Offset: 0x5c
    float maximumLength; // Offset: 0x60
    float minimumCameraDistance; // Offset: 0x64
    bool isCascadeTrigger; // Offset: 0x68
    uint8_t _pad_3[0x3]; // Offset: 0x69
    float cascadeRadius; // Offset: 0x6c
    float cascadeBuildUpScale; // Offset: 0x70
    float cascadeMinimumInterval; // Offset: 0x74
    float cascadeTriggerMinimumInterval; // Offset: 0x78
    uint8_t _pad_4[0x4]; // Offset: 0x7c
    Vec3 localScale; // Offset: 0x80
    float scaleMultiplier; // Offset: 0x98
    uint8_t _pad_5[0x4]; // Offset: 0x9c
    GlobalResourceAudio audioEmitterTrigger; // Offset: 0xa0
    GlobalResourceAudio audioTargetTrigger; // Offset: 0xc0
};

// Original name: DynArray_SCDynamicRigLightParams
// Generated DynArray for base type: SCDynamicRigLightParams
// Size: 0x8
struct DynArray_SCDynamicRigLightParams {
    SCDynamicRigLightParams* m_data; // Offset: 0x0
};

// Original name: SCThrustParams
// Size: 0x108
// VTable: 0x149a62ff8
struct SCThrustParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCMaxLinearVelocityParams MaxLinearVelocityParams; // Offset: 0x8
    SCLinearMovementParams LinearMovementParams; // Offset: 0x18
    SCAngularMovementParams AngularMovementParams; // Offset: 0x88
    SCBoostScaleParam BoostScaleParam; // Offset: 0xf8
};

// Original name: UIGroundingEffectsEntityComponentParams
// Size: 0x80
// VTable: 0x149993860
struct UIGroundingEffectsEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool manualEnable; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    CryStringT* materialName; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    float rayGradientToTextureRatio; // Offset: 0x30
    float rayExtensionFactor; // Offset: 0x34
    float rayBaseOpacity; // Offset: 0x38
    float rayFlickerOpacity; // Offset: 0x3c
    float rayPulseOpacity; // Offset: 0x40
    float rayPulseTime; // Offset: 0x44
    float rayMinSaturation; // Offset: 0x48
    float rayMaxDistance; // Offset: 0x4c
    DynArray_Vec3* rayOriginPoints; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
};

// Original name: LegacyCraftingRecipe_Default
// Size: 0x88
// VTable: 0x149a0f180
struct LegacyCraftingRecipe_Default {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float timeSeconds; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_LegacyCraftingOutput_Base* outputs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_LegacyCraftingCost_Base* costs; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
    CryStringT* iconImagePath; // Offset: 0x70
    uint8_t _pad_4[0x8]; // Offset: 0x78
    CLocIdentifier* recipeName; // Offset: 0x80
};

// Original name: GeomFont_Config
// Size: 0x78
// VTable: 0x149994ab8
struct GeomFont_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* geometryFile; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* metricsFile; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* rootNode; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    DynArray_GeomFont_LetterNode* letterNodes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_4[0x38]; // Offset: 0x40
};

// Original name: AreaServices
// Size: 0x50
// VTable: 0x149a90200
struct AreaServices {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_BaseService* service; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    float lingeringTimeout; // Offset: 0x48
    uint8_t _pad_3[0x4]; // Offset: 0x4c
};

// Original name: DrugEfficacyForItemType
// Size: 0x40
// VTable: 0x149a72ef8
struct DrugEfficacyForItemType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_DrugEfficacyConfigForItemSubTypeBase* drugEfficacyForItemSubType; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: ProcAimRigConfig
// Size: 0x88
// VTable: 0x149aaf610
struct ProcAimRigConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* rigName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* aimJointName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    Vec3 aimJointDirection; // Offset: 0x28
    float aimTargetSmoothDuration; // Offset: 0x40
    float aimTargetClampAngleDeg; // Offset: 0x44
    Range aimAngleBlendRange; // Offset: 0x48
    DynArray_ProcAimBaseJointTypeConfig* rotationJoints; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
};

// Original name: SHackingAIParams
// Size: 0x58
// VTable: 0x149a2b610
struct SHackingAIParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float rethinkTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SHackingAIAlertedStateModifiersParams alertedStateModifiers; // Offset: 0x10
    DynArray_SHackingAIDecisionParams* decisionParams; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: ActionAreaLightExtension
// Size: 0x38
// VTable: 0x149a449d0
struct ActionAreaLightExtension {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LightStatusMultiplier* lightStatusMultipliers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LinkedStat
// Size: 0x38
// VTable: 0x1499fdda0
struct LinkedStat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType linkedStat; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    LinkedStatSetup linkedStatSetup; // Offset: 0x10
};

// Original name: LinkedStatSetupPreset
// Size: 0x30
// VTable: 0x1499fdc80
struct LinkedStatSetupPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LinkedStatSetup setup; // Offset: 0x8
};

// Original name: SEntityComponentRoomParams
// Size: 0x88
// VTable: 0x14997d290
struct SEntityComponentRoomParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType roomType; // Offset: 0x18
    float minimumVolumeStrength; // Offset: 0x1c
    CLocIdentifier* roomName; // Offset: 0x20
    InteriorMapSectionDefinition interiorMapSection; // Offset: 0x28
    SEntityDensityClassOverwritesBase densityClassOverwrites; // Offset: 0x40
    DynArray_RoomExtension* roomExtensions; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    bool isPhysical; // Offset: 0x80
    uint8_t _pad_2[0x7]; // Offset: 0x81
};

// Original name: SEntityAttachParams
// Size: 0x38
// VTable: 0x1499a3250
struct SEntityAttachParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PlacementValidator* validators; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_TeamPhaseSettingsDef
// Generated DynArray for base type: TeamPhaseSettingsDef
// Size: 0x8
struct DynArray_TeamPhaseSettingsDef {
    TeamPhaseSettingsDef* m_data; // Offset: 0x0
};

// Original name: SEACriticalMessageParams
// Size: 0x68
// VTable: 0x149a1f660
struct SEACriticalMessageParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float lifetime; // Offset: 0x18
    int32_t maxAmountOfMessages; // Offset: 0x1c
    CryStringT* messageQueueIdentifier; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float fadeoutTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    DynArray_SEACriticalMessageDef* messages; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x40
};

// Original name: SActorForceReactionProceduralVanduulLeanPose
// Size: 0x50
// VTable: 0x149a4d7e0
struct SActorForceReactionProceduralVanduulLeanPose {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hipOffsetScaleFB; // Offset: 0x8
    float hipOffsetScaleLR; // Offset: 0xc
    float footOffsetScale; // Offset: 0x10
    float firstPersonLeanPitchScale; // Offset: 0x14
    float firstPersonLeanRollScale; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_SActorForceReactionLeanBoneDef* spineBones; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: SActorForceReactionProceduralXianLeanPose
// Size: 0x50
// VTable: 0x149a4d840
struct SActorForceReactionProceduralXianLeanPose {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hipOffsetScaleFB; // Offset: 0x8
    float hipOffsetScaleLR; // Offset: 0xc
    float footOffsetScale; // Offset: 0x10
    float firstPersonLeanPitchScale; // Offset: 0x14
    float firstPersonLeanRollScale; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_SActorForceReactionLeanBoneDef* spineBones; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: SActorForceReactionProceduralHumanLeanPose
// Size: 0x50
// VTable: 0x149a4d780
struct SActorForceReactionProceduralHumanLeanPose {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hipOffsetScaleFB; // Offset: 0x8
    float hipOffsetScaleLR; // Offset: 0xc
    float footOffsetScale; // Offset: 0x10
    float firstPersonLeanPitchScale; // Offset: 0x14
    float firstPersonLeanRollScale; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_SActorForceReactionLeanBoneDef* spineBones; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: BuildingBlocks_NumberCompareStatement
// Size: 0x40
// VTable: 0x149986fd8
struct BuildingBlocks_NumberCompareStatement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_NumberCompareCondition* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    int64_t result; // Offset: 0x38
};

// Original name: ProceduralEntityParams
// Size: 0xb0
// VTable: 0x14999d390
struct ProceduralEntityParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    PlanetWeatherParams Weather; // Offset: 0x18
    PlanetRoomParams Room; // Offset: 0x50
    ProceduralEntityAudioParams AudioParams; // Offset: 0x70
};

// Original name: AsteroidBehavior_WeatherParams
// Size: 0x50
// VTable: 0x149979a10
struct AsteroidBehavior_WeatherParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool defaultDustFade; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Range defaultDustFadeRange; // Offset: 0x10
    DynArray_WeatherEffects_Asteroid* effects; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: ItemResourceNetworkPowerParams
// Size: 0x38
// VTable: 0x1499a1170
struct ItemResourceNetworkPowerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ItemResourceNetworkPowerModifier* modifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: CraftingRecipeResults_RecordRef
// Size: 0x20
// VTable: 0x1499b8940
struct CraftingRecipeResults_RecordRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipeResultsRecord resultsRecord; // Offset: 0x8
};

// Original name: EntityClassGameplayPropertiesCraftingData
// Size: 0x38
// VTable: 0x1499b9760
struct EntityClassGameplayPropertiesCraftingData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CraftingGameplayProperty_Base* properties; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: EntityComponentRadiationVolumeParams
// Size: 0x40
// VTable: 0x14997b018
struct EntityComponentRadiationVolumeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    RadiationStateBase state; // Offset: 0x18
    RadiationBehavior behavior; // Offset: 0x28
};

// Original name: PersonalThoughtCategory
// Size: 0x48
// VTable: 0x149a99dd0
struct PersonalThoughtCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    DynArray_PersonalThoughtOption* optionArray; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: PersonalThoughtCategoryAction
// Size: 0x78
// VTable: 0x149a99d70
struct PersonalThoughtCategoryAction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* text; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    InputAction inputAction; // Offset: 0x18
    DynArray_PersonalThoughtOption* optionArray; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x50
};

// Original name: CockpitResponseVariation
// Size: 0x78
// VTable: 0x1499b35f0
struct CockpitResponseVariation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float initialDelay; // Offset: 0x8
    bool hasSfx; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float refireDelaySfx; // Offset: 0x10
    bool hasDialogue; // Offset: 0x14
    uint8_t _pad_2[0x3]; // Offset: 0x15
    float refireDelayDialogue; // Offset: 0x18
    float timeout; // Offset: 0x1c
    QueueingBehaviour queuingBehaviour; // Offset: 0x20
    CommunicationName communicationName; // Offset: 0x30
    DynArray_CockpitRuleBase* rules; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
};

// Original name: SHelmetStateBaseParams
// Size: 0x68
// VTable: 0x149a00458
struct SHelmetStateBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType state; // Offset: 0x8
    ARDataType nextState; // Offset: 0xc
    CryStringT* animationName; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    CryStringT* modelTag; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    float playbackSpeed; // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
    DynArray_SHelmetLinkedState* linkedStates; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x40
};

// Original name: SActorForceReactionGlobalStaggerConfig
// Size: 0x60
// VTable: 0x149a4c540
struct SActorForceReactionGlobalStaggerConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range movementReferenceVelocity; // Offset: 0x8
    Range staggerDistance; // Offset: 0x18
    DynArray_SActorForceReactionStaggerTagConfig* distanceTags; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    float viewPitchRangeDeg; // Offset: 0x58
    float viewYawRangeDeg; // Offset: 0x5c
};

// Original name: WeaponAimableAnglesDef
// Size: 0x38
// VTable: 0x149a61700
struct WeaponAimableAnglesDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SWeaponAimableAnglesParams* aimAngles; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_SUsableMovementAlignmentParams
// Generated DynArray for base type: SUsableMovementAlignmentParams
// Size: 0x8
struct DynArray_SUsableMovementAlignmentParams {
    SUsableMovementAlignmentParams* m_data; // Offset: 0x0
};

// Original name: CraftingBlueprint
// Size: 0x58
// VTable: 0x1499b8f30
struct CraftingBlueprint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BlueprintCategoryRecord category; // Offset: 0x8
    CLocIdentifier* blueprintName; // Offset: 0x20
    DynArray_CraftingBlueprintTier_Base* tiers; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: DynArray_SCItemControlPriorityTag
// Generated DynArray for base type: SCItemControlPriorityTag
// Size: 0x8
struct DynArray_SCItemControlPriorityTag {
    SCItemControlPriorityTag* m_data; // Offset: 0x0
};

// Original name: SpecialEventDay
// Size: 0x68
// VTable: 0x149aa5c88
struct SpecialEventDay {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SpecialEventManufacturer* manufacturers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_CLocIdentifier* displayNames; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: TransitDestinationParams
// Size: 0x60
// VTable: 0x1499d8618
struct TransitDestinationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CLocIdentifier* Name; // Offset: 0x18
    float radius; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    DynArray_SpecialEventManufacturer* unlockedManufacturers; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    bool importantLocation; // Offset: 0x58
    bool enabledByDefault; // Offset: 0x59
    uint8_t _pad_3[0x2]; // Offset: 0x5a
    int32_t priority; // Offset: 0x5c
};

// Original name: IntUserVariable
// Size: 0x50
// VTable: 0x149994400
struct IntUserVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int64_t defaultValue; // Offset: 0x18
    DynArray_IntUserVariableTask* tasks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: SScoreboard
// Size: 0x78
// VTable: 0x149a1fa70
struct SScoreboard {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ARDataType* validGameModes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_SScoreboardStat* stats; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
};

// Original name: DynArray_MeshFieldGeom
// Generated DynArray for base type: MeshFieldGeom
// Size: 0x8
struct DynArray_MeshFieldGeom {
    MeshFieldGeom* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_FontReplacementPair
// Generated DynArray for base type: BuildingBlocks_FontReplacementPair
// Size: 0x8
struct DynArray_BuildingBlocks_FontReplacementPair {
    BuildingBlocks_FontReplacementPair* m_data; // Offset: 0x0
};

// Original name: DynArray_BindingsOperations_IntegerStringFontStylePair
// Generated DynArray for base type: BindingsOperations_IntegerStringFontStylePair
// Size: 0x8
struct DynArray_BindingsOperations_IntegerStringFontStylePair {
    BindingsOperations_IntegerStringFontStylePair* m_data; // Offset: 0x0
};

// Original name: SpineBone
// Size: 0x50
// VTable: 0x149a9bfa0
struct SpineBone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* boneName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float weight; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    DynArray_BoneCounterRotateConfig* bonesToCounterRotate; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: SAccoladeRequirementOR
// Size: 0x38
// VTable: 0x149a23ae0
struct SAccoladeRequirementOR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SAccoladeRequirement* requirementsToOr; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SAccoladeRequirementAND
// Size: 0x38
// VTable: 0x149a23a80
struct SAccoladeRequirementAND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SAccoladeRequirement* requirementsToAnd; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_ItemTypeCategoryException
// Generated DynArray for base type: ItemTypeCategoryException
// Size: 0x8
struct DynArray_ItemTypeCategoryException {
    ItemTypeCategoryException* m_data; // Offset: 0x0
};

// Original name: DynArray_SJumpTunnelSectionControlPointGenerationParams
// Generated DynArray for base type: SJumpTunnelSectionControlPointGenerationParams
// Size: 0x8
struct DynArray_SJumpTunnelSectionControlPointGenerationParams {
    SJumpTunnelSectionControlPointGenerationParams* m_data; // Offset: 0x0
};

// Original name: WaterEffectsGlobalParams
// Size: 0x78
// VTable: 0x149994df8
struct WaterEffectsGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WaterInteractionEffectParams exitWaterEffect; // Offset: 0x8
    WaterInteractionEffectParams enterWaterEffect; // Offset: 0x40
};

// Original name: AtmosphericFlightEffects
// Size: 0xf8
// VTable: 0x149a1a380
struct AtmosphericFlightEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxAtmosphericPressure; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    TrailFadingSettings trailFading; // Offset: 0x10
    ReverseTrailsSetting reverseTrailDisabling; // Offset: 0x30
    GlobalEngineTrailsSetting engineTrails; // Offset: 0x40
    GlobalAtmosphericHeatingSettings atmosphericHeating; // Offset: 0x60
    GlobalAerodynamicTrailSettings aerodynamicTrails; // Offset: 0xb8
    GlobalEnvironmentEffectSettings customEnvironmentEffects; // Offset: 0xe8
};

// Original name: GlobalJumpTunnelEffectParams
// Size: 0x188
// VTable: 0x149a13bd0
struct GlobalJumpTunnelEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceParticle failEffect; // Offset: 0x8
    GlobalResourceParticle interiorExitEffect; // Offset: 0x20
    GlobalResourceParticle spaceloopEffect; // Offset: 0x38
    GlobalResourceParticle centralSplineEffect; // Offset: 0x50
    GlobalResourceParticle spaceFillingSplineEffect; // Offset: 0x68
    GlobalResourceParticle sunFlareEffect; // Offset: 0x80
    GlobalJumpTunnelLightParams sunLightParams; // Offset: 0x98
    GlobalJumpTunnelProbeParams probeParams; // Offset: 0xb8
    GlobalJumpTunnelFogParams fogParams; // Offset: 0xc8
    GlobalJumpTunnelPassByLightParams passByLightParams; // Offset: 0xf8
    float splineLength; // Offset: 0x180
    uint8_t _pad_1[0x4]; // Offset: 0x184
};

// Original name: LightningTargetMode_Vehicle
// Size: 0x78
// VTable: 0x1499792c8
struct LightningTargetMode_Vehicle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool localPlayerOnly; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    LightningStrengthDriver strength; // Offset: 0x10
};

// Original name: LightningTargetMode_Actor
// Size: 0x78
// VTable: 0x1499791e8
struct LightningTargetMode_Actor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool localPlayerOnly; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    LightningStrengthDriver strength; // Offset: 0x10
};

// Original name: LightningTargetMode_RoomOccupants
// Size: 0x70
// VTable: 0x149979240
struct LightningTargetMode_RoomOccupants {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LightningStrengthDriver strength; // Offset: 0x8
};

// Original name: DynArray_SurfaceRaindrops_Emitter
// Generated DynArray for base type: SurfaceRaindrops_Emitter
// Size: 0x8
struct DynArray_SurfaceRaindrops_Emitter {
    SurfaceRaindrops_Emitter* m_data; // Offset: 0x0
};

// Original name: SActorForceReactionSustainedForceDef
// Size: 0xc0
// VTable: 0x149a4b8b8
struct SActorForceReactionSustainedForceDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float leanForceSmoothing; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Range GForceToLeanForceRange; // Offset: 0x10
    Range windToLeanForceRange; // Offset: 0x20
    float impulseTriggerDelay; // Offset: 0x30
    float impulseUpdateDelay; // Offset: 0x34
    SActorForceReactionSustainedImpulseDef GForceImpulseConfig; // Offset: 0x38
    SActorForceReactionSustainedImpulseDef windImpulseConfig; // Offset: 0x68
    float sustainedForceSmoothing; // Offset: 0x98
    uint8_t _pad_2[0x4]; // Offset: 0x9c
    Range GForceToSustainedForceRange; // Offset: 0xa0
    Range windToSustainedForceRange; // Offset: 0xb0
};

// Original name: ThrusterEffectsComponentParams
// Size: 0x38
// VTable: 0x149a1d898
struct ThrusterEffectsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Range thrusterTrailAngles; // Offset: 0x18
    ShockDiamondParams shockDiamonds; // Offset: 0x28
};

// Original name: DifficultyLevelParams
// Size: 0x50
// VTable: 0x149a09fb0
struct DifficultyLevelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    VehicleDifficultyParams vehicleParams; // Offset: 0x10
    DynArray_DifficultyModifierRange* modifiers; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: ContextualCommunicationResponse
// Size: 0xd0
// VTable: 0x14997df00
struct ContextualCommunicationResponse {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType concept_; /* concept */ // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    CryStringT* customConcept; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    float refireDelay; // Offset: 0x30
    uint8_t _pad_4[0x4]; // Offset: 0x34
    DynArray_ContextualCommunicationCondition* rules; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x40
    CommunicationRequest response; // Offset: 0x68
    DynArray_CommunicationVariableBase* memoryVariables; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xa8
};

// Original name: HealthIconData
// Size: 0x40
// VTable: 0x1499fe480
struct HealthIconData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_HealthIconStatusEffect* healthIconStatusEffect; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool checkPlasmaDamage; // Offset: 0x38
    uint8_t _pad_2[0x3]; // Offset: 0x39
    int32_t plasmaDamageIconIndex; // Offset: 0x3c
};

// Original name: MissionPropertyValue_TimeTrialRace
// Size: 0x38
// VTable: 0x14996a500
struct MissionPropertyValue_TimeTrialRace {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TimeTrialSplit* targetSplits; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: GasCloudVDBParams
// Size: 0x98
// VTable: 0x1499cc910
struct GasCloudVDBParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool isChild; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    GasCloudVDBDataParams data; // Offset: 0x20
    GasCloudVDBLightingParams lighting; // Offset: 0x38
    GasCloudSunShadowParams shadow; // Offset: 0x70
    GasCloudVDBGamePlayParams gamePlay; // Offset: 0x88
};

// Original name: DirectRTT_AfterTonemappingParams
// Size: 0xf0
// VTable: 0x14993a5f0
struct DirectRTT_AfterTonemappingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float BlurRadius; // Offset: 0x8
    float OpacityInBrightScenes; // Offset: 0xc
    float OpacityInDarkScenes; // Offset: 0x10
    float AdditiveBlendFactor; // Offset: 0x14
    DirectRTT_ChromaticAberrationParams ChromaticAberrationParams; // Offset: 0x18
    DirectRTT_DropShadowParams DropShadowParams; // Offset: 0x50
    DirectRTT_BloomParams BloomParams; // Offset: 0x90
    DirectRTT_PixelGridParams PixelGridParams; // Offset: 0xb0
    DirectRTT_InterferenceParams ScreenInterferenceParams; // Offset: 0xd8
};

// Original name: HudColor_CustomEntry
// Size: 0x80
// VTable: 0x149aa11c0
struct HudColor_CustomEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    HudColor_HoloMatColors HoloMatColors; // Offset: 0x8
    SRGBA8 FlashColor; // Offset: 0x60
    CryStringT* Name; // Offset: 0x70
    uint8_t _pad_1[0x8]; // Offset: 0x78
};

// Original name: HudColor_Entry
// Size: 0x70
// VTable: 0x149aa1168
struct HudColor_Entry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    HudColor_HoloMatColors HoloMatColors; // Offset: 0x8
    SRGBA8 FlashColor; // Offset: 0x60
};

// Original name: DynArray_FactionPalette
// Generated DynArray for base type: FactionPalette
// Size: 0x8
struct DynArray_FactionPalette {
    FactionPalette* m_data; // Offset: 0x0
};

// Original name: DynArray_ChatManagerColor
// Generated DynArray for base type: ChatManagerColor
// Size: 0x8
struct DynArray_ChatManagerColor {
    ChatManagerColor* m_data; // Offset: 0x0
};

// Original name: SCItemToolArmParams
// Size: 0xc0
// VTable: 0x1499e9a10
struct SCItemToolArmParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool ignoreWarmupAndCooldown; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    CryStringT* fragment; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    CryStringT* fragmentDeploy; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
    CryStringT* fragmentRetract; // Offset: 0x40
    uint8_t _pad_4[0x8]; // Offset: 0x48
    CryStringT* fragmentIdle; // Offset: 0x50
    uint8_t _pad_5[0x8]; // Offset: 0x58
    CryStringT* fragmentStartup; // Offset: 0x60
    uint8_t _pad_6[0x8]; // Offset: 0x68
    CryStringT* fragmentRun; // Offset: 0x70
    uint8_t _pad_7[0x8]; // Offset: 0x78
    CryStringT* fragmentDeactivate; // Offset: 0x80
    uint8_t _pad_8[0x8]; // Offset: 0x88
    DynArray_SToolArmDeployCondition_Base* deployConditions; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x98
};

// Original name: LookAtTypes
// Size: 0x38
// VTable: 0x149a94200
struct LookAtTypes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LookAtType* types; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_SCItemRadarSensitivityModifier
// Generated DynArray for base type: SCItemRadarSensitivityModifier
// Size: 0x8
struct DynArray_SCItemRadarSensitivityModifier {
    SCItemRadarSensitivityModifier* m_data; // Offset: 0x0
};

// Original name: LadderAnimationParams
// Size: 0x70
// VTable: 0x149a9eab0
struct LadderAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LadderAnimationOffset* animationOffsets; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float animationTravelDistanceTransWalkToRun; // Offset: 0x38
    float animationTravelDistanceTransRunToWalk; // Offset: 0x3c
    float animationTravelDistanceTransRunToSprint; // Offset: 0x40
    float animationTravelDistanceTransSprintToRun; // Offset: 0x44
    float playerHorizontalOffset; // Offset: 0x48
    float getOnDistanceAwayTop; // Offset: 0x4c
    float getOnDistanceAwayTopSide; // Offset: 0x50
    float getOnDistanceAwayTopSideWalk; // Offset: 0x54
    float getOnDistanceAwayTopSideRun; // Offset: 0x58
    float getOnDistanceAwayTopSideSprint; // Offset: 0x5c
    float getOnDistanceAwayVerticalTopSide; // Offset: 0x60
    float getOnDistanceAwayBottom; // Offset: 0x64
    float getOnForwardDistanceAwayMiddle; // Offset: 0x68
    float getOnDistanceAwayMiddleSide; // Offset: 0x6c
};

// Original name: AudioValueOutput
// Size: 0x50
// VTable: 0x149a95be0
struct AudioValueOutput {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t pluginInstanceID; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* debugName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    DynArray_AudioValueOutputBehaviour* behaviours; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: OpenInventoryOccupantItemTypeProperties
// Size: 0x78
// VTable: 0x149a9dd38
struct OpenInventoryOccupantItemTypeProperties {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CargoGridOccupantProperties defaultProperties; // Offset: 0x10
};

// Original name: SHackingThreatLevelParams
// Size: 0x40
// VTable: 0x149a2b8e0
struct SHackingThreatLevelParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t increaseThreshold; // Offset: 0x8
    int32_t spawnedDefendersCount; // Offset: 0xc
    DynArray_SHackingThreatLevelConditionParams* threatLevelConditions; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: UIHoloVehicle_Config
// Size: 0x1d8
// VTable: 0x149aa7a48
struct UIHoloVehicle_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hitEffectTime; // Offset: 0x8
    float highlightEffectTime; // Offset: 0xc
    float flickerTime; // Offset: 0x10
    float shieldDistance; // Offset: 0x14
    float cameraFOV; // Offset: 0x18
    float ownCameraDistanceScaler; // Offset: 0x1c
    float ownAngularOffsetRange; // Offset: 0x20
    float ownDefaultViewAngle; // Offset: 0x24
    float ownTranslationSmoothingTime; // Offset: 0x28
    float ownTranslationOffsetRadiusRatio; // Offset: 0x2c
    float hitMaterialDarkenFactor; // Offset: 0x30
    float hitIndicatorAnimTime; // Offset: 0x34
    float targetCameraDistanceScaler; // Offset: 0x38
    float cameraIntroTime; // Offset: 0x3c
    float cameraIntroDistanceScaler; // Offset: 0x40
    ARDataType cameraIntroInterpolationMode; // Offset: 0x44
    uint8_t _pad_1[0x3]; // Offset: 0x45
    float cameraViewsTransitionTime; // Offset: 0x48
    ARDataType cameraViewTransitionMode; // Offset: 0x4c
    CryStringT* unknownMarkerProxyModel; // Offset: 0x50
    uint8_t _pad_2[0x8]; // Offset: 0x58
    CryStringT* shieldProxyModel; // Offset: 0x60
    uint8_t _pad_3[0x8]; // Offset: 0x68
    CryStringT* turretViewProxyModel; // Offset: 0x70
    uint8_t _pad_4[0x8]; // Offset: 0x78
    float turretViewLengthRatio; // Offset: 0x80
    float turretViewWidthRatio; // Offset: 0x84
    float turretViewPitch; // Offset: 0x88
    float turretViewRoll; // Offset: 0x8c
    float turretViewYaw; // Offset: 0x90
    uint8_t _pad_5[0x4]; // Offset: 0x94
    CryStringT* turretAimProxyModel; // Offset: 0x98
    uint8_t _pad_6[0x8]; // Offset: 0xa0
    float turretAimWidthRatio; // Offset: 0xa8
    uint8_t _pad_7[0x4]; // Offset: 0xac
    CryStringT* vehicleMaterial; // Offset: 0xb0
    uint8_t _pad_8[0x8]; // Offset: 0xb8
    CryStringT* itemHighlightMaterial; // Offset: 0xc0
    uint8_t _pad_9[0x8]; // Offset: 0xc8
    CryStringT* shieldMaterial; // Offset: 0xd0
    uint8_t _pad_10[0x8]; // Offset: 0xd8
    CryStringT* turretViewStandbyMaterial; // Offset: 0xe0
    uint8_t _pad_11[0x8]; // Offset: 0xe8
    CryStringT* turretViewFireMaterial; // Offset: 0xf0
    uint8_t _pad_12[0x8]; // Offset: 0xf8
    CryStringT* turretAimMaterial; // Offset: 0x100
    uint8_t _pad_13[0x8]; // Offset: 0x108
    CryStringT* vehicleHitMaterial; // Offset: 0x110
    uint8_t _pad_14[0x8]; // Offset: 0x118
    CryStringT* shieldHitMaterial; // Offset: 0x120
    uint8_t _pad_15[0x8]; // Offset: 0x128
    DynArray_ARDataType* itemTypeWhitelist; // Offset: 0x130 // Pointer to DynArray struct
    uint8_t _pad_16[0x28]; // Offset: 0x138
    SSilhouetteParamsDef silhouetteParams; // Offset: 0x160
    CryStringT* directionArrowGeomName; // Offset: 0x1a8
    uint8_t _pad_17[0x8]; // Offset: 0x1b0
    CryStringT* directionArrowTipGeomName; // Offset: 0x1b8
    uint8_t _pad_18[0x8]; // Offset: 0x1c0
    float directionArrowScale; // Offset: 0x1c8
    float directionArrowForwardOffset; // Offset: 0x1cc
    float directionArrowUpOffset; // Offset: 0x1d0
    float directionArrowRightOffset; // Offset: 0x1d4
};

// Original name: DynArray_SSalvageRepairHighlightColorParams
// Generated DynArray for base type: SSalvageRepairHighlightColorParams
// Size: 0x8
struct DynArray_SSalvageRepairHighlightColorParams {
    SSalvageRepairHighlightColorParams* m_data; // Offset: 0x0
};

// Original name: ExplosiveOrdnancePingGlobalParams
// Size: 0x110
// VTable: 0x149a24750
struct ExplosiveOrdnancePingGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ExplosiveOrdnancePingVFX vfxGhostPingParams; // Offset: 0x8
    ExplosiveOrdnancePingVFX vfxDesiredPingParams; // Offset: 0x60
    ExplosiveOrdnancePingVFX vfxPredictedPingParams; // Offset: 0xb8
};

// Original name: SChargeDrainTargetStateOutlineParams
// Size: 0xc8
// VTable: 0x149a779d8
struct SChargeDrainTargetStateOutlineParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SChargeDrainHighlightOutlineValues inoperableOutlineValues; // Offset: 0x8
    SChargeDrainHighlightOutlineValues jumpstartRequiredOutlineValues; // Offset: 0x38
    SChargeDrainHighlightOutlineValues jumpstartPossibleOutlineValues; // Offset: 0x68
    SChargeDrainHighlightOutlineValues validTargetOutlineValues; // Offset: 0x98
};

// Original name: DynArray_CameraLensGhostInstance
// Generated DynArray for base type: CameraLensGhostInstance
// Size: 0x8
struct DynArray_CameraLensGhostInstance {
    CameraLensGhostInstance* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerRandomColorDef
// Generated DynArray for base type: SCharacterCustomizerRandomColorDef
// Size: 0x8
struct DynArray_SCharacterCustomizerRandomColorDef {
    SCharacterCustomizerRandomColorDef* m_data; // Offset: 0x0
};

// Original name: SRenderToTextureRenderLayerParams
// Size: 0x98
// VTable: 0x1499b4df8
struct SRenderToTextureRenderLayerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType RenderLayer; // Offset: 0x8
    bool Visible; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    CryStringT* OverrideMaterial; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    STintParamsDef OverrideTintParams; // Offset: 0x20
    SObjectSilhouetteParamsDef OverrideSilhouetteParams; // Offset: 0x48
    bool DrawInGeneralPass; // Offset: 0x90
    uint8_t _pad_3[0x7]; // Offset: 0x91
};

// Original name: BreathableGasParams
// Size: 0x48
// VTable: 0x149a3c728
struct BreathableGasParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GasParams gasToInhale; // Offset: 0x8
    GasParams gasToExhale; // Offset: 0x20
    float gasMasRatio; // Offset: 0x38
    float gasConversionRate; // Offset: 0x3c
    float gasPressureMaxEffect; // Offset: 0x40
    ARDataType actorStatusToAffect; // Offset: 0x44
};

// Original name: SCItemSuitAtmosphereFuelConversionParams
// Size: 0x28
// VTable: 0x149a62908
struct SCItemSuitAtmosphereFuelConversionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GasParams Gas; // Offset: 0x8
    float massConversionRatio; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SGasProducerConsumerEntryParams
// Size: 0x28
// VTable: 0x149a14dc0
struct SGasProducerConsumerEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GasParams gas; // Offset: 0x8
    float massExchange; // Offset: 0x20
    bool isDependency; // Offset: 0x24
    uint8_t _pad_1[0x3]; // Offset: 0x25
};

// Original name: BreathableOxygenParams
// Size: 0x50
// VTable: 0x149a3c780
struct BreathableOxygenParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GasParams gasToInhale; // Offset: 0x8
    GasParams gasToExhale; // Offset: 0x20
    float gasMasRatio; // Offset: 0x38
    float gasConversionRate; // Offset: 0x3c
    float gasPressureMaxEffect; // Offset: 0x40
    ARDataType actorStatusToAffect; // Offset: 0x44
    float gasLowQualityPercentage; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
};

// Original name: ToxicGasDef
// Size: 0x30
// VTable: 0x1499ff890
struct ToxicGasDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GasParams toxicGas; // Offset: 0x8
    float minPressureThreshold; // Offset: 0x20
    float maxPressureThreshold; // Offset: 0x24
    float minBDLBuildupRate; // Offset: 0x28
    float maxBDLBuildupRate; // Offset: 0x2c
};

// Original name: SGasMass
// Size: 0x28
// VTable: 0x149a17488
struct SGasMass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GasParams Gas; // Offset: 0x8
    float Mass; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SGasAtmosphereEntryParams
// Size: 0x28
// VTable: 0x149979fa8
struct SGasAtmosphereEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GasParams gasParams; // Offset: 0x8
    float parts; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: GasTankFillerParams
// Size: 0x48
// VTable: 0x1499d70c8
struct GasTankFillerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float updateSeconds; // Offset: 0x18
    float selfRefillSpeed; // Offset: 0x1c
    float maxCapacity; // Offset: 0x20
    float maxUnitCapacity; // Offset: 0x24
    float transferSpeed; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    GasParams gasType; // Offset: 0x30
};

// Original name: JumpPointEffectParams
// Size: 0xd0
// VTable: 0x149a13028
struct JumpPointEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    JumpTunnelEffectTintingParams tunnelEffectTinting; // Offset: 0x8
    JumpTunnelCubeMapParams cubeMapParams; // Offset: 0x68
};

// Original name: EnvironmentLightComponentParams
// Size: 0x198
// VTable: 0x1499a3cd8
struct EnvironmentLightComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool active; // Offset: 0x18
    bool affectsThisAreaOnly; // Offset: 0x19
    bool useGBuffer; // Offset: 0x1a
    uint8_t _pad_1[0x1]; // Offset: 0x1b
    int32_t sortPriority; // Offset: 0x1c
    EnvironmentLightRuntimeParams runtimeParams; // Offset: 0x20
    EnvironmentLightSizeParams sizeParams; // Offset: 0x38
    EnvironmentLightStateParams_Default defaultState; // Offset: 0x50
    EnvironmentLightStateParams_Aux auxiliaryState; // Offset: 0x88
    EnvironmentLightStateParams_Emergency emergencyState; // Offset: 0xc0
    EnvironmentLightStateParams_Cinematic cinematicState; // Offset: 0xf8
    EnvironmentLightGroupParams groupParams; // Offset: 0x130
    EnvironmentLightProjectionParams projectionParams; // Offset: 0x140
    EnvironmentLightFadeParams fadeParams; // Offset: 0x158
    EnvironmentLightMiscParams miscParams; // Offset: 0x170
};

// Original name: LightComponentParams
// Size: 0x278
// VTable: 0x1499a4db0
struct LightComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool active; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    ARDataType lightType; // Offset: 0x1c
    ARDataType importance; // Offset: 0x20
    bool affectsThisAreaOnly; // Offset: 0x24
    bool affectsFog; // Offset: 0x25
    bool affectsObjects; // Offset: 0x26
    bool useTemperature; // Offset: 0x27
    bool distantImposter; // Offset: 0x28
    bool ignoreLightFlickerEntities; // Offset: 0x29
    uint8_t _pad_2[0x2]; // Offset: 0x2a
    ARDataType affectGI; // Offset: 0x2c
    ARDataType enabledWithGI; // Offset: 0x30
    uint8_t _pad_3[0x4]; // Offset: 0x34
    LightSizeParams sizeParams; // Offset: 0x38
    LightStateParams_Off offState; // Offset: 0x50
    LightStateParams_Default defaultState; // Offset: 0x68
    LightStateParams_Aux auxiliaryState; // Offset: 0xa8
    LightStateParams_Emergency emergencyState; // Offset: 0xe8
    LightStateParams_Cinematic cinematicState; // Offset: 0x128
    LightProjectorParams projectorParams; // Offset: 0x168
    LightShadowParams shadowParams; // Offset: 0x188
    LightStyleParams styleParams; // Offset: 0x1b0
    LightGroupParams groupParams; // Offset: 0x1e0
    LightClipBoxParams clipBoxParams; // Offset: 0x1f8
    LightFadeParams fadeParams; // Offset: 0x208
    LightMiscParams miscParams; // Offset: 0x220
    LightFlareParams flareParams; // Offset: 0x248
};

// Original name: InnerThought_LayoutClean
// Size: 0x48
// VTable: 0x149a98e20
struct InnerThought_LayoutClean {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    InnerThought_ColorParams selectedColor; // Offset: 0x10
    InnerThought_ColorParams unselectedColor; // Offset: 0x28
    float multiThoughtGapFactor; // Offset: 0x40
    uint8_t _pad_1[0x4]; // Offset: 0x44
};

// Original name: InnerThought_LayoutPIT
// Size: 0x58
// VTable: 0x149a98d70
struct InnerThought_LayoutPIT {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    InnerThought_ColorParams selectedColor; // Offset: 0x10
    InnerThought_ColorParams unselectedColor; // Offset: 0x28
    InnerThought_ColorParams inactiveColor; // Offset: 0x40
};

// Original name: SInteractableMenuTitleParams
// Size: 0x28
// VTable: 0x1499a0920
struct SInteractableMenuTitleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InnerThought_ColorParams titleColor; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x20
};

// Original name: BlockedColorParams
// Size: 0x40
// VTable: 0x149a8d4c0
struct BlockedColorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InnerThought_ColorParams selectedColor; // Offset: 0x8
    InnerThought_ColorParams unselectedColor; // Offset: 0x20
    bool applyImmediately; // Offset: 0x38
    uint8_t _pad_1[0x7]; // Offset: 0x39
};

// Original name: InnerThought_LayoutChoiceBase
// Size: 0xa0
// VTable: 0x149a98858
struct InnerThought_LayoutChoiceBase {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    InnerThought_ColorParams selectedColor; // Offset: 0x10
    InnerThought_ColorParams unselectedColor; // Offset: 0x28
    InnerThought_ColorParams secondaryColor; // Offset: 0x40
    Vec3 selectedOffset; // Offset: 0x58
    Vec3 unselectedOffset; // Offset: 0x70
    Vec3 secondaryOffset; // Offset: 0x88
};

// Original name: SInteractableMenuSetTitle
// Size: 0x30
// VTable: 0x1499a0980
struct SInteractableMenuSetTitle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InnerThought_ColorParams titleColor; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CLocIdentifier* title; // Offset: 0x28
};

// Original name: InnerThought_LayoutList
// Size: 0xd8
// VTable: 0x149a98ab8
struct InnerThought_LayoutList {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    InnerThought_ColorParams selectedColor; // Offset: 0x10
    InnerThought_ColorParams unselectedColor; // Offset: 0x28
    InnerThought_ColorParams secondaryColor; // Offset: 0x40
    Vec3 selectedOffset; // Offset: 0x58
    Vec3 unselectedOffset; // Offset: 0x70
    Vec3 secondaryOffset; // Offset: 0x88
    Vec3 elementIncrement; // Offset: 0xa0
    Vec3 elementCurve; // Offset: 0xb8
    bool focusOnSelection; // Offset: 0xd0
    uint8_t _pad_1[0x3]; // Offset: 0xd1
    ARDataType justification; // Offset: 0xd4
};

// Original name: GlobalRoomStateParams
// Size: 0xa8
// VTable: 0x14997d4c8
struct GlobalRoomStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Range* typeRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_RGB* typeDebugColors; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    GlobalResourceParticle debugParticles; // Offset: 0x68
    WeatherEffects_SpaceLoopEffect defaultSpaceDust; // Offset: 0x80
};

// Original name: DynArray_ActorStanceSpeedsInfo
// Generated DynArray for base type: ActorStanceSpeedsInfo
// Size: 0x8
struct DynArray_ActorStanceSpeedsInfo {
    ActorStanceSpeedsInfo* m_data; // Offset: 0x0
};

// Original name: SDynamicDifficultyParams
// Size: 0x78
// VTable: 0x149a0a190
struct SDynamicDifficultyParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SDynamicDifficultyPointsPerEvent* failPointsData; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SDynamicDifficultyPointsPerEvent* killPointsData; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    float failureResetTime; // Offset: 0x68
    int32_t minDifficultyPoints; // Offset: 0x6c
    int32_t maxDifficultyPoints; // Offset: 0x70
    uint8_t _pad_3[0x4]; // Offset: 0x74
};

// Original name: ActorStatusUIWarning
// Size: 0x40
// VTable: 0x1499fe190
struct ActorStatusUIWarning {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statType; // Offset: 0x8
    float warningDuration; // Offset: 0xc
    DynArray_ActorStatusUIWarningEntry* warningEntries; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: ActionStatusCosts
// Size: 0x40
// VTable: 0x1499fe738
struct ActionStatusCosts {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType actionCategory; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_StatusCost* instantStatusCost; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: AbilityStatusCosts
// Size: 0xb0
// VTable: 0x1499fe6b0
struct AbilityStatusCosts {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ARDataType ability; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    DynArray_StatusCost* lastingStatusCost; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
    DynArray_StatusCost* instantStatusCost; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x88
};

// Original name: EntityAudioControllerManagerParams
// Size: 0x38
// VTable: 0x1499b1410
struct EntityAudioControllerManagerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntityAudioControllerTypeManagementParams* params; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: EAPatchNoteCategoryParams
// Size: 0x40
// VTable: 0x1499f9fa8
struct EAPatchNoteCategoryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    DynArray_EAPatchNoteParams* notes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: DynArray_AbilityStaminaStates
// Generated DynArray for base type: AbilityStaminaStates
// Size: 0x8
struct DynArray_AbilityStaminaStates {
    AbilityStaminaStates* m_data; // Offset: 0x0
};

// Original name: DynArray_ActionStaminaCosts
// Generated DynArray for base type: ActionStaminaCosts
// Size: 0x8
struct DynArray_ActionStaminaCosts {
    ActionStaminaCosts* m_data; // Offset: 0x0
};

// Original name: EASimpodStateParams
// Size: 0x90
// VTable: 0x149a866c8
struct EASimpodStateParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GameRulesEAStatePreGameParams pregame; // Offset: 0x18
    GameRulesEAStatePostGameParams postgame; // Offset: 0x50
};

// Original name: EAStateParams
// Size: 0x90
// VTable: 0x149a3a978
struct EAStateParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GameRulesEAStatePreGameParams pregame; // Offset: 0x18
    GameRulesEAStatePostGameParams postgame; // Offset: 0x50
};

// Original name: DynArray_SCItemConditionalPriority
// Generated DynArray for base type: SCItemConditionalPriority
// Size: 0x8
struct DynArray_SCItemConditionalPriority {
    SCItemConditionalPriority* m_data; // Offset: 0x0
};

// Original name: SCItemControlCondition_And
// Size: 0x50
// VTable: 0x149a06cf0
struct SCItemControlCondition_And {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCItemControlCondition_Base* subConditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x40]; // Offset: 0x10
};

// Original name: AtmosphereStateRef
// Size: 0x20
// VTable: 0x14997a480
struct AtmosphereStateRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AtmosphereStateTemplate stateTemplate; // Offset: 0x8
};

// Original name: PersonalThoughtCameraEffectsParams
// Size: 0x30
// VTable: 0x149a996a8
struct PersonalThoughtCameraEffectsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float openingDelay; // Offset: 0x8
    float closingDelay; // Offset: 0xc
    float backgroundExposure; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynamicCameraEffects dynamicCameraEffectsRecord; // Offset: 0x18
};

// Original name: DynamicCameraEffectsList
// Size: 0x158
// VTable: 0x149a7ca58
struct DynamicCameraEffectsList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynamicCameraEffects conversation; // Offset: 0x8
    DynamicCameraEffects interactionModeFocus; // Offset: 0x20
    DynamicCameraEffects mobiglas; // Offset: 0x38
    DynamicCameraEffects personalInnerThought; // Offset: 0x50
    DynamicCameraEffects externalInventory; // Offset: 0x68
    DynamicCameraEffects personalInventory; // Offset: 0x80
    DynamicCameraEffects lootInventory; // Offset: 0x98
    DynamicCameraEffects onFoot; // Offset: 0xb0
    DynamicCameraEffects vehicleSeat; // Offset: 0xc8
    DynamicCameraEffects hacking; // Offset: 0xe0
    DynamicCameraEffects inspectMode; // Offset: 0xf8
    DynamicCameraEffects prototypeMobiGlas; // Offset: 0x110
    DynamicCameraEffects simpod; // Offset: 0x128
    DynamicCameraEffects jumpTravel; // Offset: 0x140
};

// Original name: ConversationStickyFilter
// Size: 0xe8
// VTable: 0x149a88238
struct ConversationStickyFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StickyFilterMovementParams movementParams; // Offset: 0x8
    StickyFilterRotationParams rotationParams; // Offset: 0x60
    StickyFilterAutocenterParams autoCenterParams; // Offset: 0x80
    DynamicCameraEffects dynamicCameraEffectsParams; // Offset: 0xd0
};

// Original name: DynArray_BuildingBlocks_IntegerNumberPair
// Generated DynArray for base type: BuildingBlocks_IntegerNumberPair
// Size: 0x8
struct DynArray_BuildingBlocks_IntegerNumberPair {
    BuildingBlocks_IntegerNumberPair* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsNumberArithmeticMulti
// Size: 0x88
// VTable: 0x149988828
struct BuildingBlocks_BindingsNumberArithmeticMulti {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
    DynArray_BuildingBlocks_BindingsNumberBase* inputs; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
};

// Original name: ScanDisplayCustomDataArraySetupParams
// Size: 0x88
// VTable: 0x1499c6c58
struct ScanDisplayCustomDataArraySetupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scanTable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool failIfNoBody; // Offset: 0x10
    bool checkDisplaySection; // Offset: 0x11
    uint8_t _pad_2[0x6]; // Offset: 0x12
    ScanDisplayVariableParams headerVariable; // Offset: 0x18
    ScanDisplayVariableParams bodyVariable; // Offset: 0x28
    ScanDisplayVariableParams capacityVariable; // Offset: 0x38
    ScanDisplayVariableParams extensionVariable; // Offset: 0x48
    DynArray_ScanDisplaySortInfoParams* sortInfoArray; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
};

// Original name: ScanDisplayStandardArraySetupParams
// Size: 0x88
// VTable: 0x1499c6c50
struct ScanDisplayStandardArraySetupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType scanTable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool failIfNoBody; // Offset: 0x10
    bool checkDisplaySection; // Offset: 0x11
    uint8_t _pad_2[0x6]; // Offset: 0x12
    ScanDisplayVariableParams headerVariable; // Offset: 0x18
    ScanDisplayVariableParams bodyVariable; // Offset: 0x28
    ScanDisplayVariableParams capacityVariable; // Offset: 0x38
    ScanDisplayVariableParams extensionVariable; // Offset: 0x48
    DynArray_ScanDisplaySortInfoParams* sortInfoArray; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
};

// Original name: ActorStatusPrioritySet
// Size: 0x40
// VTable: 0x1499c7938
struct ActorStatusPrioritySet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_StatusPriorityBase* actorStatusPriorities; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    int32_t actorStatusWidgetsMax; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: SReputationMissionRequirementsParams
// Size: 0x38
// VTable: 0x149a96cb0
struct SReputationMissionRequirementsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SReputationMissionRequirementExpressionElement* expression; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_TakeDownParams
// Generated DynArray for base type: TakeDownParams
// Size: 0x8
struct DynArray_TakeDownParams {
    TakeDownParams* m_data; // Offset: 0x0
};

// Original name: CraftingCost_Select
// Size: 0x60
// VTable: 0x1499b8400
struct CraftingCost_Select {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingNameInfo nameInfo; // Offset: 0x8
    int32_t count; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    DynArray_CraftingCost_Base* options; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
};

// Original name: InitialDamageOverride
// Size: 0x78
// VTable: 0x149a177c0
struct InitialDamageOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInitialDamage initialDmgOverride; // Offset: 0x8
};

// Original name: DynArray_ActorViewLimitPreset
// Generated DynArray for base type: ActorViewLimitPreset
// Size: 0x8
struct DynArray_ActorViewLimitPreset {
    ActorViewLimitPreset* m_data; // Offset: 0x0
};

// Original name: DynArray_ActorLookLimitsStateFilter
// Generated DynArray for base type: ActorLookLimitsStateFilter
// Size: 0x8
struct DynArray_ActorLookLimitsStateFilter {
    ActorLookLimitsStateFilter* m_data; // Offset: 0x0
};

// Original name: DynArray_ActorAimLimitsStateFilter
// Generated DynArray for base type: ActorAimLimitsStateFilter
// Size: 0x8
struct DynArray_ActorAimLimitsStateFilter {
    ActorAimLimitsStateFilter* m_data; // Offset: 0x0
};

// Original name: DynArray_TaggedSubHarvestableConfig
// Generated DynArray for base type: TaggedSubHarvestableConfig
// Size: 0x8
struct DynArray_TaggedSubHarvestableConfig {
    TaggedSubHarvestableConfig* m_data; // Offset: 0x0
};

// Original name: HandholdGripDatabase
// Size: 0x38
// VTable: 0x149a03110
struct HandholdGripDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_HandholdGripType* gripTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SItemPortMasterControllerParams
// Size: 0x38
// VTable: 0x1499b0580
struct SItemPortMasterControllerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SEnergyPipeDefinition* Pipes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AnimationGraph_Track
// Size: 0x50
// VTable: 0x149aa5e60
struct AnimationGraph_Track {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* trackName; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    DynArray_AnimationGraph_KeyFrame* keyFrames; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: ActorEnvironmentComponent
// Size: 0x88
// VTable: 0x149a3d370
struct ActorEnvironmentComponent {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    EnvironmentTemperatureParams temperatureParams; // Offset: 0x18
    ActorFrostedVisorParams frostedVisorParams; // Offset: 0x50
    float geigerCounterSensitivityFactor; // Offset: 0x78
    float geigerCounterMinimumFrequencyToActivate; // Offset: 0x7c
    float geigerCounterFrequencyLimit; // Offset: 0x80
    uint8_t _pad_1[0x4]; // Offset: 0x84
};

// Original name: SStatusFortitudeLevelModifier
// Size: 0x38
// VTable: 0x1499fd090
struct SStatusFortitudeLevelModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SStatusTriggerThresholdLevelModifier* triggerThresholdLevelModifier; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SActorLocomotionFidgetStateFilteredDef
// Size: 0xa8
// VTable: 0x149ab1c50
struct SActorLocomotionFidgetStateFilteredDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SLocomotionPersonalityStateFilter stateFilter; // Offset: 0x8
    bool enable; // Offset: 0x68
    uint8_t _pad_1[0x3]; // Offset: 0x69
    float cooldownMin; // Offset: 0x6c
    float cooldownMax; // Offset: 0x70
    uint8_t _pad_2[0x4]; // Offset: 0x74
    DynArray_SActorLocomotionFidgetSeverityParams* severities; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
};

// Original name: CraftingBlueprint_RecordRef
// Size: 0x20
// VTable: 0x1499b8ff0
struct CraftingBlueprint_RecordRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingBlueprintRecord blueprintRecord; // Offset: 0x8
};

// Original name: AnimationVariableLink
// Size: 0x20
// VTable: 0x1499a2748
struct AnimationVariableLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool invertValue; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    AnimationScalarVariable variable; // Offset: 0x10
};

// Original name: AnimationSetVariable
// Size: 0x30
// VTable: 0x1499a2c70
struct AnimationSetVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AnimationFloatVariable variable; // Offset: 0x8
    float value; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    AnimationVariableInterpolation overrideInterpolation; // Offset: 0x20
};

// Original name: AnimationJointBaseTranslation
// Size: 0x18
// VTable: 0x1499a2810
struct AnimationJointBaseTranslation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AnimationVariable variable; // Offset: 0x8
};

// Original name: AnimationJointLinearRotation
// Size: 0x28
// VTable: 0x1499a28e8
struct AnimationJointLinearRotation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AnimationVariable variable; // Offset: 0x8
    float fromStartValus; // Offset: 0x18
    float fromEndValus; // Offset: 0x1c
    float toStartAngle; // Offset: 0x20
    float toEndAngle; // Offset: 0x24
};

// Original name: AnimationJointTransform
// Size: 0x18
// VTable: 0x1499a2800
struct AnimationJointTransform {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AnimationVariable variable; // Offset: 0x8
};

// Original name: AnimationMovement
// Size: 0x30
// VTable: 0x1499a2b10
struct AnimationMovement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AnimationVariable variable; // Offset: 0x8
    CryStringT* animationName; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    int32_t layerId; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
};

// Original name: AnimationJointLinearTranslation
// Size: 0x28
// VTable: 0x1499a29b8
struct AnimationJointLinearTranslation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AnimationVariable variable; // Offset: 0x8
    float fromStartValus; // Offset: 0x18
    float fromEndValus; // Offset: 0x1c
    float toStartOffset; // Offset: 0x20
    float toEndOffset; // Offset: 0x24
};

// Original name: AnimationJointBaseRotation
// Size: 0x18
// VTable: 0x1499a2808
struct AnimationJointBaseRotation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AnimationVariable variable; // Offset: 0x8
};

// Original name: DynArray_AnimationVariable
// Generated DynArray for base type: AnimationVariable
// Size: 0x8
struct DynArray_AnimationVariable {
    AnimationVariable* m_data; // Offset: 0x0
};

// Original name: STeamScoring
// Size: 0x78
// VTable: 0x1499ba3c0
struct STeamScoring {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t startTeamScore; // Offset: 0x8
    bool useScoreAsTime; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    int32_t teamScoreValue; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    DynArray_ARDataType* playerToTeamScoring; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x20
    DynArray_SScoreEvent* teamScoreEvents; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x50
};

// Original name: SPlayerScoring
// Size: 0x38
// VTable: 0x1499ba2c0
struct SPlayerScoring {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SScoreEvent* playerScoreEvents; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: RemovableChipParams
// Size: 0x48
// VTable: 0x1499f87e0
struct RemovableChipParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_RemovableChipValue* values; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: DynArray_SMisfireEventParams
// Generated DynArray for base type: SMisfireEventParams
// Size: 0x8
struct DynArray_SMisfireEventParams {
    SMisfireEventParams* m_data; // Offset: 0x0
};

// Original name: ActorMovementSetsConfig
// Size: 0x38
// VTable: 0x149aa3f30
struct ActorMovementSetsConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorMovementSetTransition* transitions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AIContextualVisualFieldProfile
// Size: 0x50
// VTable: 0x149a936a8
struct AIContextualVisualFieldProfile {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AIVisualFieldParams defaultProfile; // Offset: 0x8
    DynArray_AIVisualFieldParams* alertnessLevelOverrides; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: CyclingChannelOption
// Size: 0x40
// VTable: 0x149a5c300
struct CyclingChannelOption {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint32_t cyclingChannelCount; // Offset: 0x8
    float cycleChannelConnectionWaitSecond; // Offset: 0xc
    DynArray_SChatChannelTypeBase* autoRegisterCyclingChannelTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: SChatChannelFilterBase
// Size: 0x40
// VTable: 0x149a9c860
struct SChatChannelFilterBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SChatChannelTypeBase* chatChannelType; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x10
};

// Original name: SChatChannelWhiteList
// Size: 0x40
// VTable: 0x149a9c868
struct SChatChannelWhiteList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SChatChannelTypeBase* chatChannelType; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x10
};

// Original name: SChatChannelBlackList
// Size: 0x40
// VTable: 0x149a9c870
struct SChatChannelBlackList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SChatChannelTypeBase* chatChannelType; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x10
};

// Original name: ItemMiningModifierParams
// Size: 0x98
// VTable: 0x1499f6bd0
struct ItemMiningModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    MiningLaserModifiers MiningLaserModifier; // Offset: 0x18
};

// Original name: ItemMineableRockModifierParams
// Size: 0x98
// VTable: 0x1499f6bd8
struct ItemMineableRockModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    MiningLaserModifiers MiningLaserModifier; // Offset: 0x18
};

// Original name: MiningFilterItemModifierParams
// Size: 0x30
// VTable: 0x1499f6f70
struct MiningFilterItemModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    MiningFilterParams filterParams; // Offset: 0x18
};

// Original name: DynArray_SSignaturesCategoryEntry
// Generated DynArray for base type: SSignaturesCategoryEntry
// Size: 0x8
struct DynArray_SSignaturesCategoryEntry {
    SSignaturesCategoryEntry* m_data; // Offset: 0x0
};

// Original name: SCItemRadarSensitivityModifierTypeSignatureCategory
// Size: 0x38
// VTable: 0x1499c60e0
struct SCItemRadarSensitivityModifierTypeSignatureCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_RadarSignatureCategoryEntry* signatureCategories; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: RadarSignatureCategoryDefinition
// Size: 0x50
// VTable: 0x1499c3928
struct RadarSignatureCategoryDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RadarSignatureCategoryEntry default_; /* default */ // Offset: 0x8
    DynArray_RadarSignatureCategoryEntry* types; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: ActionRuleNotAllowedInContext
// Size: 0x20
// VTable: 0x149a9b560
struct ActionRuleNotAllowedInContext {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActionRuleDisplayParams ruleDisplay; // Offset: 0x8
    ARDataType context; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: ActionRuleNotAllowedInGreenZone
// Size: 0x18
// VTable: 0x149a9b500
struct ActionRuleNotAllowedInGreenZone {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActionRuleDisplayParams ruleDisplay; // Offset: 0x8
};

// Original name: ActionRuleParams
// Size: 0x18
// VTable: 0x149a99780
struct ActionRuleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActionRuleDisplayParams ruleDisplay; // Offset: 0x8
};

// Original name: FloatUserVariable
// Size: 0x50
// VTable: 0x149994350
struct FloatUserVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float defaultValue; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    DynArray_FloatUserVariableTask* tasks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: ConversationNode_Hub
// Size: 0x40
// VTable: 0x149a8d168
struct ConversationNode_Hub {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType linkType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ConversationNode_Base* outputLinks; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: Conversation
// Size: 0x38
// VTable: 0x149a8d1c0
struct Conversation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ConversationNode_Base* fragments; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: InnerThought_LayoutCurve
// Size: 0x138
// VTable: 0x149a98cc8
struct InnerThought_LayoutCurve {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    bool shuffleSelectedToBottom; // Offset: 0x10
    uint8_t _pad_1[0x3]; // Offset: 0x11
    float radius; // Offset: 0x14
    float angle; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    Quat radiusOrientation; // Offset: 0x20
    Vec3 selectedOffset; // Offset: 0x50
    Vec3 unselectedOffset; // Offset: 0x68
    Deg3 selectedRotation; // Offset: 0x80
    Deg3 unselectedRotation; // Offset: 0xa0
    InnerThought_ColorParams selectedColor; // Offset: 0xc0
    InnerThought_ColorParams unselectedColorStart; // Offset: 0xd8
    InnerThought_ColorParams unselectedColorEnd; // Offset: 0xf0
    DynArray_InnerThought_CycleAnimBase* cycles; // Offset: 0x108 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x110
};

// Original name: StarMarineLoadoutEditorAdditionalParams
// Size: 0x38
// VTable: 0x149aaaf60
struct StarMarineLoadoutEditorAdditionalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LoadoutInfo* loadouts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_CommsNotificationSelector
// Generated DynArray for base type: CommsNotificationSelector
// Size: 0x8
struct DynArray_CommsNotificationSelector {
    CommsNotificationSelector* m_data; // Offset: 0x0
};

// Original name: DynArray_HaulingOrderBase
// Generated DynArray for base type: HaulingOrderBase
// Size: 0x8
struct DynArray_HaulingOrderBase {
    HaulingOrderBase* m_data; // Offset: 0x0
};

// Original name: EAScoringMessageParams
// Size: 0x48
// VTable: 0x149a28d58
struct EAScoringMessageParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ScoreMessage* scoreMessages; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float scoreDisplayTime; // Offset: 0x38
    int32_t maxPrimaryMessages; // Offset: 0x3c
    int32_t maxSecondaryMessages; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: LongTermPersistenceSubTypeList
// Size: 0x38
// VTable: 0x1499b9be0
struct LongTermPersistenceSubTypeList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LongTermPersistenceWhiteListSubTypeEntry* ItemSubTypeEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_LongTermPersistenceWhiteListEntry
// Generated DynArray for base type: LongTermPersistenceWhiteListEntry
// Size: 0x8
struct DynArray_LongTermPersistenceWhiteListEntry {
    LongTermPersistenceWhiteListEntry* m_data; // Offset: 0x0
};

// Original name: PlayerChoice_SignalConfig
// Size: 0xb0
// VTable: 0x149aa5bf8
struct PlayerChoice_SignalConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float zoneQueryFrequency; // Offset: 0x8
    float distantIndicatorZoneQueryFrequency; // Offset: 0xc
    RGBA baseColor; // Offset: 0x10
    float baseEffectWidth; // Offset: 0x28
    float viewMaxDistance; // Offset: 0x2c
    float viewMaxDistanceIM; // Offset: 0x30
    float viewMaxDistantIndicatorDist; // Offset: 0x34
    float viewFadeDistance; // Offset: 0x38
    float viewFadeDistanceIM; // Offset: 0x3c
    uint8_t maxVisibilityTraces; // Offset: 0x40
    uint8_t minVisibilityWait; // Offset: 0x41
    bool useTwoColors; // Offset: 0x42
    uint8_t _pad_1[0x5]; // Offset: 0x43
    RGBA secondaryColor; // Offset: 0x48
    float secondaryEffectWidth; // Offset: 0x60
    float maxDistanceFromCursorHighlight; // Offset: 0x64
    float maxDistanceFromCursorHighlightIM; // Offset: 0x68
    bool showSignalForInspectedItems; // Offset: 0x6c
    bool useHipDistance; // Offset: 0x6d
    uint8_t _pad_2[0x2]; // Offset: 0x6e
    DynArray_PlayerChoice_InteractionModifier* interactionModifiers; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x78
    float dashboardSwitchHighlightRadius; // Offset: 0xa0
    float dashboardSwitchHighlightCentreSize; // Offset: 0xa4
    ARDataType dashboardSwitchItemType; // Offset: 0xa8
    uint8_t _pad_4[0x4]; // Offset: 0xac
};

// Original name: DynArray_PersonalThoughtActionDescription
// Generated DynArray for base type: PersonalThoughtActionDescription
// Size: 0x8
struct DynArray_PersonalThoughtActionDescription {
    PersonalThoughtActionDescription* m_data; // Offset: 0x0
};

// Original name: DynArray_AnimatedAction
// Generated DynArray for base type: AnimatedAction
// Size: 0x8
struct DynArray_AnimatedAction {
    AnimatedAction* m_data; // Offset: 0x0
};

// Original name: PersonalThoughtGameModeDef
// Size: 0x38
// VTable: 0x149a9aa40
struct PersonalThoughtGameModeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_InputAction* disabledActions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: PersonalThoughtHologramActionsList
// Size: 0x38
// VTable: 0x149a99c30
struct PersonalThoughtHologramActionsList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_InputAction* hologramActions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: Camera
// Size: 0x18
// VTable: 0x1499b2b80
struct Camera {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseConfig baseConfig; // Offset: 0x8
};

// Original name: PostureGroup
// Size: 0x40
// VTable: 0x14997daa0
struct PostureGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType Type; // Offset: 0x8
    ARDataType Stance; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    DynArray_PostureData* Postures; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: UIStateColor
// Size: 0x38
// VTable: 0x149aa89a0
struct UIStateColor {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_UIStateColor_Threshold* thresholds; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SReputationGlobalContextBBParams
// Size: 0x70
// VTable: 0x149a964b0
struct SReputationGlobalContextBBParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CLocIdentifier* infoTabNames; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SReputationContextBBEntityListParams* entityTabs; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    ARDataType entitySortOrder; // Offset: 0x68
    uint8_t _pad_3[0x4]; // Offset: 0x6c
};

// Original name: SActorProceduralAimRecoilModifiers
// Size: 0xd0
// VTable: 0x149a71bc0
struct SActorProceduralAimRecoilModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 max; // Offset: 0x8
    float pull_left_percentage; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec2 shot_kick_first; // Offset: 0x20
    Vec2 shot_kick; // Offset: 0x30
    float random_pitch; // Offset: 0x40
    float random_yaw; // Offset: 0x44
    float decay; // Offset: 0x48
    float end_decay; // Offset: 0x4c
    float recoil_time; // Offset: 0x50
    float delay; // Offset: 0x54
    SActorProceduralAimRecoilCurveModifiersDef curveRecoil; // Offset: 0x58
};

// Original name: SAimRecoilModifier
// Size: 0xc0
// VTable: 0x1499de3b8
struct SAimRecoilModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 maxMultiplier; // Offset: 0x8
    Vec2 shotKickFirstMultiplier; // Offset: 0x18
    Vec2 shotKickMultiplier; // Offset: 0x28
    float randomPitchMultiplier; // Offset: 0x38
    float randomYawMultiplier; // Offset: 0x3c
    float decayMultiplier; // Offset: 0x40
    float endDecayMultiplier; // Offset: 0x44
    SActorProceduralAimRecoilCurveModifiersDef curveRecoil; // Offset: 0x48
};

// Original name: EntitlementAccountItemGlobalParams
// Size: 0x38
// VTable: 0x1499bb190
struct EntitlementAccountItemGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntitlementItemType* accountItemTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: EntitlementNonInventoryStorableItemGlobalParams
// Size: 0x38
// VTable: 0x1499bb1f0
struct EntitlementNonInventoryStorableItemGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_EntitlementItemType* itemTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SSalvageRepairLocalizationParams
// Size: 0x48
// VTable: 0x149a7af10
struct SSalvageRepairLocalizationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* hullLoc; // Offset: 0x8
    DynArray_SSalvageRepairItemTypeLocalizationPair* itemTypeLocalizationPairs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    CLocIdentifier* itemTypeNotFoundLoc; // Offset: 0x40
};

// Original name: SCItemShieldGeneratorParams
// Size: 0xb8
// VTable: 0x1499f40a0
struct SCItemShieldGeneratorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float MaxShieldHealth; // Offset: 0x18
    float MaxShieldRegen; // Offset: 0x1c
    float DecayRatio; // Offset: 0x20
    float ReservePoolInitialHealthRatio; // Offset: 0x24
    float ReservePoolMaxHealthRatio; // Offset: 0x28
    float ReservePoolRegenRateRatio; // Offset: 0x2c
    float ReservePoolDrainRateRatio; // Offset: 0x30
    float DownedRegenDelay; // Offset: 0x34
    float DamagedRegenDelay; // Offset: 0x38
    float ElectricalChargeDamageResistance; // Offset: 0x3c
    SShieldStunParams stunParams; // Offset: 0x40
    DynArray_SShieldResistance* ShieldResistance; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
    DynArray_SShieldAbsorption* ShieldAbsorption; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x90
};

// Original name: GlobalCargoLoadingParams
// Size: 0x2c0
// VTable: 0x149a755d8
struct GlobalCargoLoadingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float vehicleVelocityEpsilon; // Offset: 0x8
    float vehicleMovementTimeLimit; // Offset: 0xc
    float uiDisplayTimeLimit; // Offset: 0x10
    float revokeTimeDelay; // Offset: 0x14
    float uiTimeRemainingForTimeOutWarning; // Offset: 0x18
    float forfeitTimeBuffer; // Offset: 0x1c
    float initialMovementHintTimeBuffer; // Offset: 0x20
    float cargoDeckLoadingTimePerSCU; // Offset: 0x24
    float autoLoadingBaseLoadingTime; // Offset: 0x28
    float autoLoadingBaseUnloadingTime; // Offset: 0x2c
    SAutoLoadingBoxSizeLoadingTime autoLoadingBoxSizeLoadingTime; // Offset: 0x30
    SAutoLoadingBoxSizeLoadingTime autoLoadingBoxSizeUnloadingTime; // Offset: 0x60
    CargoLoadingNotificationParams warningCargoRemovalNotification; // Offset: 0x90
    CargoLoadingNotificationParams notifyCargoRemovalNotification; // Offset: 0xc8
    CargoLoadingNotificationParams reminderRetrieveCargoFromLoadingAreaNotification; // Offset: 0x100
    CargoLoadingNotificationParams notifyCargoTransferredNotification; // Offset: 0x138
    CargoLoadingNotificationParams notifyCargoTransferInterruptedObstructionNotification; // Offset: 0x170
    CargoLoadingNotificationParams notifyCargoTransferInterruptedShipMovingNotification; // Offset: 0x1a8
    CargoLoadingNotificationParams notifyCargoTransferInterruptedGenericNotification; // Offset: 0x1e0
    CargoLoadingNotificationParams initialMovementHintTimeBufferNotification; // Offset: 0x218
    CargoLoadingNotificationParams notifyLoadingAreaRevokedTimeoutNotification; // Offset: 0x250
    CargoLoadingNotificationParams notifyLoadingAreaRevokedGenericNotification; // Offset: 0x288
};

// Original name: RadiationStateTemplate
// Size: 0x50
// VTable: 0x14997ad40
struct RadiationStateTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RadiationStateTemplateInternal state; // Offset: 0x8
};

// Original name: ActivityData
// Size: 0x38
// VTable: 0x14997e220
struct ActivityData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActivityDataRecord* dataRecords; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SSCActorPhysicsControllerComponentParams
// Size: 0x28
// VTable: 0x149a6a200
struct SSCActorPhysicsControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntityBasePhysicsControllerParams physType; // Offset: 0x18
};

// Original name: SEntityPhysicsControllerParams
// Size: 0x28
// VTable: 0x1499e6110
struct SEntityPhysicsControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntityBasePhysicsControllerParams PhysType; // Offset: 0x18
};

// Original name: SObjectContainerPhysicsControllerParams
// Size: 0x28
// VTable: 0x1499a1660
struct SObjectContainerPhysicsControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntityBasePhysicsControllerParams PhysType; // Offset: 0x18
};

// Original name: SSoftbodyGeometryParams
// Size: 0xd8
// VTable: 0x1499a17a8
struct SSoftbodyGeometryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceGeometry Geometry; // Offset: 0x8
    SEntitySoftExPhysicsControllerParams SimulationParams; // Offset: 0x20
};

// Original name: DynArray_CraftingMaterialStatEntry
// Generated DynArray for base type: CraftingMaterialStatEntry
// Size: 0x8
struct DynArray_CraftingMaterialStatEntry {
    CraftingMaterialStatEntry* m_data; // Offset: 0x0
};

// Original name: CraftingMaterialStatDatabaseRecord
// Size: 0x38
// VTable: 0x1499b90d0
struct CraftingMaterialStatDatabaseRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CraftingMaterialStatTypeRecord* statTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: PlayerChoice_OptionList
// Size: 0x50
// VTable: 0x149a90508
struct PlayerChoice_OptionList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_PlayerChoice_Option* options; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x30]; // Offset: 0x20
};

// Original name: SEAActionItemMessageParams
// Size: 0x68
// VTable: 0x149a1f740
struct SEAActionItemMessageParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float lifetime; // Offset: 0x18
    int32_t maxAmountOfMessages; // Offset: 0x1c
    CryStringT* messageQueueIdentifier; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
    float fadeoutTime; // Offset: 0x30
    uint8_t _pad_2[0x4]; // Offset: 0x34
    DynArray_SEAActionItemMessageDef* messages; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x40
};

// Original name: DynArray_SControlledEntityRopeAttachmentPair
// Generated DynArray for base type: SControlledEntityRopeAttachmentPair
// Size: 0x8
struct DynArray_SControlledEntityRopeAttachmentPair {
    SControlledEntityRopeAttachmentPair* m_data; // Offset: 0x0
};

// Original name: DynArray_SControlledEntityStaticTransformParams
// Generated DynArray for base type: SControlledEntityStaticTransformParams
// Size: 0x8
struct DynArray_SControlledEntityStaticTransformParams {
    SControlledEntityStaticTransformParams* m_data; // Offset: 0x0
};

// Original name: SubsumptionDataComponentParams
// Size: 0x28
// VTable: 0x14996c810
struct SubsumptionDataComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    UsableGroupCoordinatorDataParams usableGroupCoordinatorData; // Offset: 0x18
};

// Original name: FrontendS42ActionData
// Size: 0xd8
// VTable: 0x149a22c78
struct FrontendS42ActionData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityReferenceDef positionEntity; // Offset: 0x8
    EntityReferenceDef modelPositionEntity; // Offset: 0x20
    CryStringT* model; // Offset: 0x38
    uint8_t _pad_1[0x8]; // Offset: 0x40
    EntityReferenceDef optionSelectedTrackview; // Offset: 0x48
    EntityReferenceDef idleTrackview; // Offset: 0x60
    EntityReferenceDef backToRoomTrackview; // Offset: 0x78
    DynArray_EntityReferenceDef* externalBindingsConsumerEntities; // Offset: 0x90 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x98
    EntityReferenceDef externalAudioController; // Offset: 0xc0
};

// Original name: DynArray_ActorSomaticShakeConfig
// Generated DynArray for base type: ActorSomaticShakeConfig
// Size: 0x8
struct DynArray_ActorSomaticShakeConfig {
    ActorSomaticShakeConfig* m_data; // Offset: 0x0
};

// Original name: DynArray_ForceFeedbackEffect
// Generated DynArray for base type: ForceFeedbackEffect
// Size: 0x8
struct DynArray_ForceFeedbackEffect {
    ForceFeedbackEffect* m_data; // Offset: 0x0
};

// Original name: AudioFootstepSurfacesDefinition
// Size: 0x38
// VTable: 0x149a68820
struct AudioFootstepSurfacesDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioFootstepSurfaceMapping* audioSurfaces; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_AsteroidProcedural
// Generated DynArray for base type: AsteroidProcedural
// Size: 0x8
struct DynArray_AsteroidProcedural {
    AsteroidProcedural* m_data; // Offset: 0x0
};

// Original name: GeometryInstancerComponentParams
// Size: 0xa0
// VTable: 0x14999e350
struct GeometryInstancerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GeometryInstancer_Serialized Serialized; // Offset: 0x18
};

// Original name: SCharacterCustomizerDNAHeadPool
// Size: 0x78
// VTable: 0x149a0e170
struct SCharacterCustomizerDNAHeadPool {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SGeometryModelTagBase tag; // Offset: 0x8
    DynArray_CryStringT* defaultMaterialPaths; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_SCharacterCustomizerDNAHeadParams* heads; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: S42FieldManual
// Size: 0x58
// VTable: 0x149a375b0
struct S42FieldManual {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* manualTitle; // Offset: 0x8
    DynArray_S42FieldManualContentPiece* contentPieces; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    S42FieldManualCategory manualCategory; // Offset: 0x40
};

// Original name: HandholdInteractionLink
// Size: 0x20
// VTable: 0x149a03668
struct HandholdInteractionLink {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool ignoreInteractionOnFail; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    HandholdAttachmentTriggerParams attachmentTrigger; // Offset: 0x10
};

// Original name: DynArray_HandholdAttachmentTriggerParams
// Generated DynArray for base type: HandholdAttachmentTriggerParams
// Size: 0x8
struct DynArray_HandholdAttachmentTriggerParams {
    HandholdAttachmentTriggerParams* m_data; // Offset: 0x0
};

// Original name: EAScoringAssistParams
// Size: 0x48
// VTable: 0x149a3a128
struct EAScoringAssistParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    bool teamSpecificScoring; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    int32_t timeout; // Offset: 0xc
    int32_t maxAssistScore; // Offset: 0x10
    float assistScoreMultiplier; // Offset: 0x14
    DynArray_EAScoringAssistThreshold* assistThresholds; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: CraftingGameplayPropertyImplSingleStatTier_Int
// Size: 0x38
// VTable: 0x1499b9300
struct CraftingGameplayPropertyImplSingleStatTier_Int {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CraftingGameplayPropertyImplValueRange_Int* valueRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BuildingBlocks_ColorTextFormatModifier
// Size: 0x20
// VTable: 0x149981c88
struct BuildingBlocks_ColorTextFormatModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType field; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    BuildingBlocks_ColorSolid value; // Offset: 0x10
};

// Original name: SCharacterCustomizerMakeupDefaultParams
// Size: 0x70
// VTable: 0x149a0c1a8
struct SCharacterCustomizerMakeupDefaultParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCharacterCustomizerMakeupChannelParams channelR; // Offset: 0x8
    SCharacterCustomizerMakeupChannelParams channelG; // Offset: 0x28
    SCharacterCustomizerMakeupChannelParams channelB; // Offset: 0x48
    float opacity; // Offset: 0x68
    uint8_t _pad_1[0x4]; // Offset: 0x6c
};

// Original name: DynArray_FireHazardSurfaceProperties
// Generated DynArray for base type: FireHazardSurfaceProperties
// Size: 0x8
struct DynArray_FireHazardSurfaceProperties {
    FireHazardSurfaceProperties* m_data; // Offset: 0x0
};

// Original name: DynArray_Flash_PaletteEntry
// Generated DynArray for base type: Flash_PaletteEntry
// Size: 0x8
struct DynArray_Flash_PaletteEntry {
    Flash_PaletteEntry* m_data; // Offset: 0x0
};

// Original name: LegacyCraftingRecipeListRecord
// Size: 0x38
// VTable: 0x149a0f360
struct LegacyCraftingRecipeListRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LegacyCraftingRecipeDef_Base* recipes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LegacyCraftingRecipeList_Direct
// Size: 0x38
// VTable: 0x149a0f300
struct LegacyCraftingRecipeList_Direct {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LegacyCraftingRecipeDef_Base* recipes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SHackingCodeCommandEntry
// Size: 0x70
// VTable: 0x149a2c6c8
struct SHackingCodeCommandEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isDisabled; // Offset: 0x8
    bool isAsync; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    DynArray_CryStringT* commandAliases; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_SHackingCodeCommandParam* params; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: DynArray_CraftingOptionalEntry
// Generated DynArray for base type: CraftingOptionalEntry
// Size: 0x8
struct DynArray_CraftingOptionalEntry {
    CraftingOptionalEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_ComponentMigration
// Generated DynArray for base type: ComponentMigration
// Size: 0x8
struct DynArray_ComponentMigration {
    ComponentMigration* m_data; // Offset: 0x0
};

// Original name: SCItemObservableScreenParams
// Size: 0x48
// VTable: 0x149a06f58
struct SCItemObservableScreenParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SCItemObservableScreenViewParams* views; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: DynArray_StatusEffectTrigger
// Generated DynArray for base type: StatusEffectTrigger
// Size: 0x8
struct DynArray_StatusEffectTrigger {
    StatusEffectTrigger* m_data; // Offset: 0x0
};

// Original name: UnitTest_Inheritance
// Size: 0x48
// VTable: 0x149a88f08
struct UnitTest_Inheritance {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_UnitTest_BaseTest* baseArray; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    UnitTest_BaseTest weakPtrBase; // Offset: 0x38
};

// Original name: ContractClass_Contract
// Size: 0x48
// VTable: 0x1499711b8
struct ContractClass_Contract {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActiveContractSettings additionalParams; // Offset: 0x8
    ContractAutoFinishSettings autoFinishSettings; // Offset: 0x18
};

// Original name: ScanDisplayConditionVariableParams
// Size: 0x58
// VTable: 0x1499c6908
struct ScanDisplayConditionVariableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint8_t truncateSize; // Offset: 0x8
    bool displayIsHidden; // Offset: 0x9
    bool displayInBrackets; // Offset: 0xa
    bool suffixArrayIndex; // Offset: 0xb
    bool suffixSemiColon; // Offset: 0xc
    ARDataType auxiliaryFlag; // Offset: 0xd
    uint8_t _pad_1[0x2]; // Offset: 0xe
    ScanDisplayVariableParams fallback_; /* fallback */ // Offset: 0x10
    CLocIdentifier* defaultValue; // Offset: 0x20
    DynArray_ScanDisplayConditionBaseParams* conditionValues; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: ScanOverrideDisplayBaseParams
// Size: 0x28
// VTable: 0x1499c7118
struct ScanOverrideDisplayBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ScanDisplayInstanceParams displayInstance; // Offset: 0x8
    ARDataType displaySection; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: ScanOverrideDisplayInjectParams
// Size: 0x30
// VTable: 0x1499c7198
struct ScanOverrideDisplayInjectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ScanDisplayInstanceParams displayInstance; // Offset: 0x8
    ARDataType displaySection; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    bool addToBoxoutDisplay; // Offset: 0x28
    uint8_t _pad_2[0x3]; // Offset: 0x29
    int32_t displayPriority; // Offset: 0x2c
};

// Original name: ScanOverrideDisplayRemoveParams
// Size: 0x28
// VTable: 0x1499c71a0
struct ScanOverrideDisplayRemoveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ScanDisplayInstanceParams displayInstance; // Offset: 0x8
    ARDataType displaySection; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: DynArray_ScanDisplayInstanceParams
// Generated DynArray for base type: ScanDisplayInstanceParams
// Size: 0x8
struct DynArray_ScanDisplayInstanceParams {
    ScanDisplayInstanceParams* m_data; // Offset: 0x0
};

// Original name: AudioBreathStyleConditionList
// Size: 0x38
// VTable: 0x149a6cdf0
struct AudioBreathStyleConditionList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioBreathStyleCondition* list; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ActorBreathingStyleStartup
// Size: 0x88
// VTable: 0x149a6cf40
struct ActorBreathingStyleStartup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool forceInhaleFirst; // Offset: 0x8
    bool forceExhaleFirst; // Offset: 0x9
    uint8_t _pad_1[0x6]; // Offset: 0xa
    GlobalResourceAudio overrideFirstInhale; // Offset: 0x10
    GlobalResourceAudio overrideFirstExhale; // Offset: 0x30
    bool firstBreathDurationFromOverride; // Offset: 0x50
    uint8_t _pad_2[0x3]; // Offset: 0x51
    float firstBreathDurationCompensation; // Offset: 0x54
    DynArray_AudioBreathStyleCondition* conditions; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
};

// Original name: ControlHintCondition_AND
// Size: 0x38
// VTable: 0x149a65ab0
struct ControlHintCondition_AND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ControlHintCondition* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ControlHintCondition_OR
// Size: 0x38
// VTable: 0x149a65b10
struct ControlHintCondition_OR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ControlHintCondition* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_BuildingBlocks_IntegerIntegerPair
// Generated DynArray for base type: BuildingBlocks_IntegerIntegerPair
// Size: 0x8
struct DynArray_BuildingBlocks_IntegerIntegerPair {
    BuildingBlocks_IntegerIntegerPair* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsIntegerArithmeticMulti
// Size: 0x88
// VTable: 0x1499873a8
struct BuildingBlocks_BindingsIntegerArithmeticMulti {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
    DynArray_BuildingBlocks_BindingsIntegerBase* inputs; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
};

// Original name: SReputationStandingJournalEntryParams
// Size: 0x40
// VTable: 0x149a96d60
struct SReputationStandingJournalEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationStandingParams standing; // Offset: 0x8
    ARDataType changeDirection; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    JournalEntry journalEntry; // Offset: 0x28
};

// Original name: Investigation_Clue_JournalEntry
// Size: 0x30
// VTable: 0x14996a8d0
struct Investigation_Clue_JournalEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* objectiveLongDescription; // Offset: 0x8
    CLocIdentifier* objectiveShortDescription; // Offset: 0x10
    JournalEntry journalEntry; // Offset: 0x18
};

// Original name: DynArray_JournalEntry
// Generated DynArray for base type: JournalEntry
// Size: 0x8
struct DynArray_JournalEntry {
    JournalEntry* m_data; // Offset: 0x0
};

// Original name: SSCSignatureEmissionModifier
// Size: 0x38
// VTable: 0x1499e9b00
struct SSCSignatureEmissionModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SModifierSignaturesEntry* modifierEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: EntityComponentMobiglasLauncherProviderParams
// Size: 0x48
// VTable: 0x1499f9840
struct EntityComponentMobiglasLauncherProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SMobiGlasLauncherApp* launcherApps; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SCustomizableMaterialLookupTable
// Size: 0x68
// VTable: 0x149a33fb8
struct SCustomizableMaterialLookupTable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCustomizableMaterialEntry* materials; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SCustomizableMaterialEntry* textures; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SCollectibleComponentParams
// Size: 0x38
// VTable: 0x149a23e68
struct SCollectibleComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCollectible associatedCollectibleRecord; // Offset: 0x18
    bool hideWhenCollected; // Offset: 0x30
    uint8_t _pad_1[0x7]; // Offset: 0x31
};

// Original name: FlashObjectBindingGroup
// Size: 0x48
// VTable: 0x149aa71d0
struct FlashObjectBindingGroup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_FlashVariableObject* variableObjects; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x38]; // Offset: 0x10
};

// Original name: SDockingAnimatorBaseParams
// Size: 0x40
// VTable: 0x149a40e30
struct SDockingAnimatorBaseParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float OverrideTime; // Offset: 0x8
    bool IgnoreGeometryOnDocking; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    DynArray_SDockingAnimatorStageTriggerParams* TriggerEntries; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: DynArray_CommonTacticScores
// Generated DynArray for base type: CommonTacticScores
// Size: 0x8
struct DynArray_CommonTacticScores {
    CommonTacticScores* m_data; // Offset: 0x0
};

// Original name: QuickAccessWheelMenuDef
// Size: 0x48
// VTable: 0x149a9aba8
struct QuickAccessWheelMenuDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool openContextMenuAsFolder; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CLocIdentifier* menuName; // Offset: 0x10
    DynArray_QuickAccessWheelElement* menuElements; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: PersonalThoughtQuickAccessWheel
// Size: 0xc0
// VTable: 0x149a9aeb0
struct PersonalThoughtQuickAccessWheel {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_InputAction* triggerInputActions; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    CryStringT* triggerEventHash; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
    DynArray_QuickAccessWheelElement* elements; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x60
    bool saveSelection; // Offset: 0x88
    uint8_t _pad_5[0x37]; // Offset: 0x89
};

// Original name: DynArray_SReputationStateModifierParams
// Generated DynArray for base type: SReputationStateModifierParams
// Size: 0x8
struct DynArray_SReputationStateModifierParams {
    SReputationStateModifierParams* m_data; // Offset: 0x0
};

// Original name: DynArray_CtxGraph_Dependency
// Generated DynArray for base type: CtxGraph_Dependency
// Size: 0x8
struct DynArray_CtxGraph_Dependency {
    CtxGraph_Dependency* m_data; // Offset: 0x0
};

// Original name: DefaultActionsEntityEntryCondition_AND
// Size: 0x38
// VTable: 0x149a8bb20
struct DefaultActionsEntityEntryCondition_AND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DefaultActionsEntityEntryCondition* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DefaultActionsEntityEntryCondition_OR
// Size: 0x38
// VTable: 0x149a8bb80
struct DefaultActionsEntityEntryCondition_OR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DefaultActionsEntityEntryCondition* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ActorStanceDimensions
// Size: 0xe8
// VTable: 0x149aade70
struct ActorStanceDimensions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float heightCollider; // Offset: 0x8
    float groundContactEps; // Offset: 0xc
    Vec2 groundTraceSpreadSizes; // Offset: 0x10
    Vec3 pivot; // Offset: 0x20
    Vec3 size; // Offset: 0x38
    Vec3 capsuleAxis; // Offset: 0x50
    Vec3 viewOffset; // Offset: 0x68
    Vec3 weaponOffset; // Offset: 0x80
    Vec3 headStabilization; // Offset: 0x98
    ARDataType upAlignMode; // Offset: 0xb0
    uint8_t _pad_1[0x4]; // Offset: 0xb4
    DynArray_SActorStanceDimensionsExtraDef* extraDefs; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xc0
};

// Original name: AsteroidStateRef
// Size: 0x20
// VTable: 0x149979960
struct AsteroidStateRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AsteroidStateTemplate stateTemplate; // Offset: 0x8
};

// Original name: SCharacterCustomizerTextureList
// Size: 0x38
// VTable: 0x149a0c3d0
struct SCharacterCustomizerTextureList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCharacterCustomizerTextureParams* textures; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_SActorForceReactionLeanFilterDef
// Generated DynArray for base type: SActorForceReactionLeanFilterDef
// Size: 0x8
struct DynArray_SActorForceReactionLeanFilterDef {
    SActorForceReactionLeanFilterDef* m_data; // Offset: 0x0
};

// Original name: DateTimeSchedule
// Size: 0x98
// VTable: 0x1499b9a98
struct DateTimeSchedule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DateTime start; // Offset: 0x8
    DateTime end; // Offset: 0x40
    ARDataType repeatType; // Offset: 0x78
    uint8_t _pad_1[0x4]; // Offset: 0x7c
    Date repeatEnd; // Offset: 0x80
};

// Original name: MobiGlasPersonalMessage_ShipChat
// Size: 0x50
// VTable: 0x149a36470
struct MobiGlasPersonalMessage_ShipChat {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DateTime dateTime; // Offset: 0x8
    CLocIdentifier* senderName; // Offset: 0x40
    CLocIdentifier* content; // Offset: 0x48
};

// Original name: SActorForceReactionMovementLaunchConfig
// Size: 0x40
// VTable: 0x149a4c740
struct SActorForceReactionMovementLaunchConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minDistance; // Offset: 0x8
    float maxDistance; // Offset: 0xc
    DynArray_SActorForceReactionFlightDurationConfig* durations; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: CraftingRecipe_RecordRef
// Size: 0x20
// VTable: 0x1499b8af0
struct CraftingRecipe_RecordRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipeRecord recipeRecord; // Offset: 0x8
};

// Original name: DynArray_BuildingBlocks_IntegerLocalizedPair
// Generated DynArray for base type: BuildingBlocks_IntegerLocalizedPair
// Size: 0x8
struct DynArray_BuildingBlocks_IntegerLocalizedPair {
    BuildingBlocks_IntegerLocalizedPair* m_data; // Offset: 0x0
};

// Original name: AINavigationDynamicTriggerComponent
// Size: 0x48
// VTable: 0x1499ecba0
struct AINavigationDynamicTriggerComponent {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_NavigationTriggerAdapter* adapters; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: DynArray_MobiGlasAppData
// Generated DynArray for base type: MobiGlasAppData
// Size: 0x8
struct DynArray_MobiGlasAppData {
    MobiGlasAppData* m_data; // Offset: 0x0
};

// Original name: SMobiGlasAppDataPacketEmbedded
// Size: 0x38
// VTable: 0x149a35fa0
struct SMobiGlasAppDataPacketEmbedded {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MobiGlasAppDataBase* data; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_MotionTurnSetupFiltered
// Generated DynArray for base type: MotionTurnSetupFiltered
// Size: 0x8
struct DynArray_MotionTurnSetupFiltered {
    MotionTurnSetupFiltered* m_data; // Offset: 0x0
};

// Original name: SCombatTargeting
// Size: 0x20
// VTable: 0x149a55b20
struct SCombatTargeting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    STargetingMethodRecord targetingMethodRecord; // Offset: 0x8
};

// Original name: SMiningTargeting
// Size: 0x20
// VTable: 0x149a55be0
struct SMiningTargeting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    STargetingMethodRecord targetingMethodRecord; // Offset: 0x8
};

// Original name: SScanTargeting
// Size: 0x20
// VTable: 0x149a55b80
struct SScanTargeting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    STargetingMethodRecord targetingMethodRecord; // Offset: 0x8
};

// Original name: ResourceNetworkPowerPoolSetup
// Size: 0x40
// VTable: 0x1499a2df8
struct ResourceNetworkPowerPoolSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PowerPool* itemPools; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool maxDefaultDistribution; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
};

// Original name: DynArray_MissionFlowTrigger
// Generated DynArray for base type: MissionFlowTrigger
// Size: 0x8
struct DynArray_MissionFlowTrigger {
    MissionFlowTrigger* m_data; // Offset: 0x0
};

// Original name: MissionFlowCondition_OR
// Size: 0x38
// VTable: 0x1499702a0
struct MissionFlowCondition_OR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionFlowConditionBase* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MissionFlowCondition_AND
// Size: 0x38
// VTable: 0x149970240
struct MissionFlowCondition_AND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionFlowConditionBase* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ActorMovementModifiers
// Size: 0x128
// VTable: 0x149aa3e00
struct ActorMovementModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorBaseMovementModifiers baseModifiers; // Offset: 0x8
    ActorExternalForceMovementModifiers externalForceModifiers; // Offset: 0xb0
    ActorEnvironmentalMovementModifiers environmentalModifiers; // Offset: 0x108
};

// Original name: DefaultActionsEntityState_OR
// Size: 0x38
// VTable: 0x149a8bf50
struct DefaultActionsEntityState_OR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DefaultActionsEntityState* states; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DefaultActionsEntityState_AND
// Size: 0x38
// VTable: 0x149a8bef0
struct DefaultActionsEntityState_AND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DefaultActionsEntityState* states; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SSequencerSequenceTaskEntryParams
// Size: 0x58
// VTable: 0x1499a0478
struct SSequencerSequenceTaskEntryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SSequencerDefTaskParams task; // Offset: 0x8
    float postDelay; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_SSequencerDefTaskParams* dependentTasks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    bool haltOnFailure; // Offset: 0x50
    uint8_t _pad_3[0x7]; // Offset: 0x51
};

// Original name: SStarGalaStageParams
// Size: 0x38
// VTable: 0x149a47480
struct SStarGalaStageParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SStarGalaWaveParams* waves; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: UIBindingsSubsumptionComponentParams
// Size: 0x50
// VTable: 0x149993088
struct UIBindingsSubsumptionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_Bindings_SubsumptionBroadcastEvent* broadcastEvents; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    bool subsumptionCallbackTrigger; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
};

// Original name: WingmanOrderList
// Size: 0x38
// VTable: 0x149a653b0
struct WingmanOrderList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_WingmanOrderInfo* WingmanOrders; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ChatCommandFastAccess
// Size: 0x38
// VTable: 0x149aa60a0
struct ChatCommandFastAccess {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ChatCommandName* commands; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MeleeAttackCombo
// Size: 0x40
// VTable: 0x149a02b38
struct MeleeAttackCombo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MeleeComboChainLink* comboChain; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float cooldown; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: BlueprintCategoryDatabaseRecord
// Size: 0x38
// VTable: 0x1499b8d40
struct BlueprintCategoryDatabaseRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BlueprintCategoryRecord* categories; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BlueprintCategoryAvailability_Whitelist
// Size: 0x38
// VTable: 0x1499b8db0
struct BlueprintCategoryAvailability_Whitelist {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BlueprintCategoryRecord* categories; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: PlayerShipRespawn
// Size: 0x38
// VTable: 0x149aa27d0
struct PlayerShipRespawn {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PlayerShipRespawnShipInfo* Ships; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ControlIntInteractiveVariable
// Size: 0x40
// VTable: 0x1499f7848
struct ControlIntInteractiveVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    IntInteractiveVariable variable; // Offset: 0x28
    int32_t amountToChange; // Offset: 0x38
    uint8_t _pad_3[0x4]; // Offset: 0x3c
};

// Original name: DynArray_IntInteractiveVariable
// Generated DynArray for base type: IntInteractiveVariable
// Size: 0x8
struct DynArray_IntInteractiveVariable {
    IntInteractiveVariable* m_data; // Offset: 0x0
};

// Original name: SEntityComponentMiningLaserParams
// Size: 0xd8
// VTable: 0x1499f0628
struct SEntityComponentMiningLaserParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    MiningLaserGlobalParams globalParams; // Offset: 0x18
    float throttleLerpSpeed; // Offset: 0x30
    float throttleMinimum; // Offset: 0x34
    MiningLaserModifiers miningLaserModifiers; // Offset: 0x38
    MiningFilterParams filterParams; // Offset: 0xb8
    bool usesPowerThrottle; // Offset: 0xd0
    uint8_t _pad_1[0x7]; // Offset: 0xd1
};

// Original name: ProceduralPlanetAudioAlgorithm
// Size: 0x48
// VTable: 0x149a109b0
struct ProceduralPlanetAudioAlgorithm {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_AudioRtpc* countRtpcs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x18
};

// Original name: ProceduralPlanetAudioAlgorithmCount
// Size: 0x48
// VTable: 0x149a10b88
struct ProceduralPlanetAudioAlgorithmCount {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_AudioRtpc* countRtpcs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x30]; // Offset: 0x18
};

// Original name: EntityAudioControllerRtpcSubscriberListDef
// Size: 0x38
// VTable: 0x1499a97b0
struct EntityAudioControllerRtpcSubscriberListDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioRtpc* rtpcs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_InnerThought_LayoutStates
// Generated DynArray for base type: InnerThought_LayoutStates
// Size: 0x8
struct DynArray_InnerThought_LayoutStates {
    InnerThought_LayoutStates* m_data; // Offset: 0x0
};

// Original name: BlueprintCategoryAvailability_Ref
// Size: 0x20
// VTable: 0x1499b8e70
struct BlueprintCategoryAvailability_Ref {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BlueprintCategoryAvailabilityRecord availabilityRecord; // Offset: 0x8
};

// Original name: ConstantDOFWeights
// Size: 0x50
// VTable: 0x149a7cc20
struct ConstantDOFWeights {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxPositionWeight; // Offset: 0x8
    float NPC; // Offset: 0xc
    float localPlayer; // Offset: 0x10
    float entity; // Offset: 0x14
    float actorLookingAtPlayer; // Offset: 0x18
    float door; // Offset: 0x1c
    DynArray_ConstantDOFPosWeights* positionWeights; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SCCommsSpeakerComponentParams
// Size: 0x48
// VTable: 0x1499cd550
struct SCCommsSpeakerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_CommsChannelDef* commsChannels; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SCCommsChannelAreaComponentParams
// Size: 0x50
// VTable: 0x149a4fed0
struct SCCommsChannelAreaComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_CommsChannelDef* commsChannels; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    float innerRadius; // Offset: 0x48
    float outerRadius; // Offset: 0x4c
};

// Original name: SpawnerPrerequisite_OR
// Size: 0x38
// VTable: 0x149a40750
struct SpawnerPrerequisite_OR {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BaseSpawnerPrerequisite* prerequisites; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SpawnerPrerequisite_AND
// Size: 0x38
// VTable: 0x149a406f0
struct SpawnerPrerequisite_AND {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BaseSpawnerPrerequisite* prerequisites; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ExtendedNameEntryTextConcatenateOptions
// Size: 0x38
// VTable: 0x149a931d0
struct ExtendedNameEntryTextConcatenateOptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ExtendedNameEntryTextBase* options; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ExtendedNameEntryTextRandomizedOptions
// Size: 0x38
// VTable: 0x149a93170
struct ExtendedNameEntryTextRandomizedOptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ExtendedNameEntryTextBase* options; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: StringUserVariable
// Size: 0x68
// VTable: 0x149994648
struct StringUserVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* defaultValue; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    RecordRefUserVariableTypeBase recordRefValue; // Offset: 0x28
    DynArray_StringUserVariableTask* tasks; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x40
};

// Original name: MusicEventResponse
// Size: 0x50
// VTable: 0x1499b5d30
struct MusicEventResponse {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MusicLogicNode* children; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MusicLogicEvent musicEvent; // Offset: 0x38
};

// Original name: MusicLogicCondition
// Size: 0x38
// VTable: 0x1499b5c50
struct MusicLogicCondition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MusicLogicNode* children; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ParentMusicLogicNode
// Size: 0x38
// VTable: 0x1499b5a00
struct ParentMusicLogicNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MusicLogicNode* children; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: CraftingCost_RecordRef
// Size: 0x28
// VTable: 0x1499b81d8
struct CraftingCost_RecordRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float multiplier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CraftingCostRecord costRecord; // Offset: 0x10
};

// Original name: SCIGTestBB
// Size: 0xa8
// VTable: 0x1499dac10
struct SCIGTestBB {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool bBase; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    bool bB; // Offset: 0x10
    uint8_t _pad_2[0x7]; // Offset: 0x11
    DynArray_bool* bBBs; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x20
    DynArray_float* nBBs; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x50
    DynArray_SCIGTestBase* osBBTestBases; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x80
};

// Original name: ItemportTraversingModifiersParams
// Size: 0x50
// VTable: 0x1499f7150
struct ItemportTraversingModifiersParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    ARDataType targetItemType; // Offset: 0x18
    ARDataType targetSubType; // Offset: 0x1c
    DynArray_BaseItemModifierParams* modifiers; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: ActorStateValidation
// Size: 0x88
// VTable: 0x149aad9f8
struct ActorStateValidation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorActionHandler_ValidationParams actorActionHandlerValidationParams; // Offset: 0x8
    ActorStateData_ValidationParams actorStateDataValidationParams; // Offset: 0x28
};

// Original name: ChatFilterOptions
// Size: 0x38
// VTable: 0x149aa6180
struct ChatFilterOptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ChatFilter* options; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_AudioRtpcWithBehaviour
// Generated DynArray for base type: AudioRtpcWithBehaviour
// Size: 0x8
struct DynArray_AudioRtpcWithBehaviour {
    AudioRtpcWithBehaviour* m_data; // Offset: 0x0
};

// Original name: ContractAvailability
// Size: 0x58
// VTable: 0x149973408
struct ContractAvailability {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ContractPrerequisiteBase* prerequisites; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool notifyOnAvailable; // Offset: 0x38
    uint8_t _pad_2[0x3]; // Offset: 0x39
    int32_t maxPlayersPerInstance; // Offset: 0x3c
    bool onceOnly; // Offset: 0x40
    bool availableInPrison; // Offset: 0x41
    bool canReacceptAfterAbandoning; // Offset: 0x42
    uint8_t _pad_3[0x1]; // Offset: 0x43
    float abandonedCooldownTime; // Offset: 0x44
    float abandonedCooldownTimeVariation; // Offset: 0x48
    bool canReacceptAfterFailing; // Offset: 0x4c
    bool hasPersonalCooldown; // Offset: 0x4d
    uint8_t _pad_4[0x2]; // Offset: 0x4e
    float personalCooldownTime; // Offset: 0x50
    float personalCooldownTimeVariation; // Offset: 0x54
};

// Original name: Developer
// Size: 0x30
// VTable: 0x149a91140
struct Developer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DevOwner team; // Offset: 0x18
};

// Original name: DynArray_SActorForceReactionFilterDef
// Generated DynArray for base type: SActorForceReactionFilterDef
// Size: 0x8
struct DynArray_SActorForceReactionFilterDef {
    SActorForceReactionFilterDef* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsIntegerFromStringSwitch
// Size: 0x98
// VTable: 0x1499874d0
struct BuildingBlocks_BindingsIntegerFromStringSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int64_t defaultValue; // Offset: 0x50
    DynArray_BuildingBlocks_StringIntegerPair* values; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
    BuildingBlocks_BindingsStringBase input; // Offset: 0x88
};

// Original name: BuildingBlocks_Border
// Size: 0x108
// VTable: 0x149982918
struct BuildingBlocks_Border {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_BorderSide top; // Offset: 0x8
    BuildingBlocks_BorderSide right; // Offset: 0x28
    BuildingBlocks_BorderSide bottom; // Offset: 0x48
    BuildingBlocks_BorderSide left; // Offset: 0x68
    BuildingBlocks_BorderRadiusCorner topLeftRadius; // Offset: 0x88
    BuildingBlocks_BorderRadiusCorner topRightRadius; // Offset: 0xa8
    BuildingBlocks_BorderRadiusCorner bottomRightRadius; // Offset: 0xc8
    BuildingBlocks_BorderRadiusCorner bottomLeftRadius; // Offset: 0xe8
};

// Original name: UI3DDisplayInputParams
// Size: 0x50
// VTable: 0x149a89470
struct UI3DDisplayInputParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool allowInputOutOfBounds; // Offset: 0x8
    bool disablePimWhenOverScreen; // Offset: 0x9
    bool allowPitch; // Offset: 0xa
    bool allowYaw; // Offset: 0xb
    bool allowPan; // Offset: 0xc
    bool allowZoom; // Offset: 0xd
    bool invertPitch; // Offset: 0xe
    uint8_t _pad_1[0x1]; // Offset: 0xf
    DynArray_UI3DDisplayInput* inputs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    bool allowAnalogZoom; // Offset: 0x40
    bool allowDigitalZoom; // Offset: 0x41
    uint8_t _pad_3[0x2]; // Offset: 0x42
    float analogZoomSensitivity; // Offset: 0x44
    float digitalZoomSensitivity; // Offset: 0x48
    float selectionScale; // Offset: 0x4c
};

// Original name: AtmosphereBehavior_WeatherParams
// Size: 0x58
// VTable: 0x14997a878
struct AtmosphereBehavior_WeatherParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float planetCloudCondensationAmount; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Range planetCloudDensityCondensationRange; // Offset: 0x10
    bool enableSurfaceWaterEffects; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
    DynArray_WeatherEffects_Atmosphere* effects; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x30
};

// Original name: ReputationValueSettings
// Size: 0x70
// VTable: 0x149a90fa8
struct ReputationValueSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float rangeMin; // Offset: 0x8
    float rangeMax; // Offset: 0xc
    DynArray_ReputationValueSetting* modificationValues; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    DynArray_ReputationComparisonRange* comparisonValues; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
};

// Original name: CraftingGameplayProperty_RecordRef
// Size: 0x20
// VTable: 0x1499b96a0
struct CraftingGameplayProperty_RecordRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingGameplayPropertyRecord gameplayPropertyRecord; // Offset: 0x8
};

// Original name: LootingItemPortSizeClass
// Size: 0x40
// VTable: 0x149a9a508
struct LootingItemPortSizeClass {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t sizeClass; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_TypeSubtypeParams* itemPortTypeSubtypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: PersonalThoughtInventoryItemUIIcon
// Size: 0x48
// VTable: 0x149a9a308
struct PersonalThoughtInventoryItemUIIcon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* displayIconType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_TypeSubtypeParams* itemCategories; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: DynArray_QuantumDriveLocTypeMusicMap
// Generated DynArray for base type: QuantumDriveLocTypeMusicMap
// Size: 0x8
struct DynArray_QuantumDriveLocTypeMusicMap {
    QuantumDriveLocTypeMusicMap* m_data; // Offset: 0x0
};

// Original name: DynArray_TransitStationAnnouncement
// Generated DynArray for base type: TransitStationAnnouncement
// Size: 0x8
struct DynArray_TransitStationAnnouncement {
    TransitStationAnnouncement* m_data; // Offset: 0x0
};

// Original name: WheelAudioSurfaceMapping
// Size: 0x60
// VTable: 0x149a116d8
struct WheelAudioSurfaceMapping {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* surfaceName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    WheelAudioParams audio; // Offset: 0x18
};

// Original name: DynArray_QuantumDriveStateMusicMap
// Generated DynArray for base type: QuantumDriveStateMusicMap
// Size: 0x8
struct DynArray_QuantumDriveStateMusicMap {
    QuantumDriveStateMusicMap* m_data; // Offset: 0x0
};

// Original name: SSalvageAudioParams
// Size: 0x58
// VTable: 0x149a7f1a0
struct SSalvageAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalResourceAudio salvageCargoFilledAudioTrigger; // Offset: 0x8
    GlobalResourceAudio switchSalvageModifierAudioTrigger; // Offset: 0x28
    SSalvageStructuralAudioParams structuralAudio; // Offset: 0x48
};

// Original name: SCItemLocalization
// Size: 0xb0
// VTable: 0x1499af028
struct SCItemLocalization {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* Name; // Offset: 0x8
    CLocIdentifier* ShortName; // Offset: 0x10
    CLocIdentifier* Description; // Offset: 0x18
    SCExtendedLocalizationLevelParams displayFeatures; // Offset: 0x20
};

// Original name: SBeamParticleAudioParams
// Size: 0x30
// VTable: 0x149a5f7d8
struct SBeamParticleAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* subParticlePath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    GPUParticleAudio gpuParticleAudio; // Offset: 0x18
};

// Original name: DynArray_GPUParticleAudio
// Generated DynArray for base type: GPUParticleAudio
// Size: 0x8
struct DynArray_GPUParticleAudio {
    GPUParticleAudio* m_data; // Offset: 0x0
};

// Original name: DynArray_JumpDriveStateAudioMap
// Generated DynArray for base type: JumpDriveStateAudioMap
// Size: 0x8
struct DynArray_JumpDriveStateAudioMap {
    JumpDriveStateAudioMap* m_data; // Offset: 0x0
};

// Original name: SCItemCommsComponentParams
// Size: 0x30
// VTable: 0x149a506c0
struct SCItemCommsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCItemCommsComponentSetup setup; // Offset: 0x18
};

// Original name: SCItemATCCommsComponentParams
// Size: 0x60
// VTable: 0x149a04e58
struct SCItemATCCommsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCItemCommsComponentSetup setup; // Offset: 0x18
    CommsChannelDef landingCommsChannel; // Offset: 0x30
    CommsChannelDef cargoCommsChannel; // Offset: 0x48
};

// Original name: SCItemCommsReceiverComponentParams
// Size: 0x70
// VTable: 0x1499cc0d8
struct SCItemCommsReceiverComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCItemCommsComponentSetup setup; // Offset: 0x18
    DynArray_CommsChannelDef* commsChannels; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
    CryStringT* audioCommsEffectOverride; // Offset: 0x60
    uint8_t _pad_2[0x8]; // Offset: 0x68
};

// Original name: DynArray_PlanetOceanDepthAssignment
// Generated DynArray for base type: PlanetOceanDepthAssignment
// Size: 0x8
struct DynArray_PlanetOceanDepthAssignment {
    PlanetOceanDepthAssignment* m_data; // Offset: 0x0
};

// Original name: DynArray_SWeaponAudioReportEnvironment
// Generated DynArray for base type: SWeaponAudioReportEnvironment
// Size: 0x8
struct DynArray_SWeaponAudioReportEnvironment {
    SWeaponAudioReportEnvironment* m_data; // Offset: 0x0
};

// Original name: DynArray_ShipWideAudioObject
// Generated DynArray for base type: ShipWideAudioObject
// Size: 0x8
struct DynArray_ShipWideAudioObject {
    ShipWideAudioObject* m_data; // Offset: 0x0
};

// Original name: DynArray_PhysicalAudioCollisionTrigger
// Generated DynArray for base type: PhysicalAudioCollisionTrigger
// Size: 0x8
struct DynArray_PhysicalAudioCollisionTrigger {
    PhysicalAudioCollisionTrigger* m_data; // Offset: 0x0
};

// Original name: ScanSharedParams
// Size: 0x78
// VTable: 0x1499c4a58
struct ScanSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableNewBindings; // Offset: 0x8
    bool requireLockedTarget; // Offset: 0x9
    bool enableManualFocusScan; // Offset: 0xa
    bool enableAutoFocusScan; // Offset: 0xb
    bool enablePassiveScan; // Offset: 0xc
    bool enablePingWaveScan; // Offset: 0xd
    bool allowPassiveUnlockContactType; // Offset: 0xe
    uint8_t _pad_1[0x1]; // Offset: 0xf
    ScanSFXSharedParams sfxParams; // Offset: 0x10
};

// Original name: DynArray_SurfaceAudioProperties
// Generated DynArray for base type: SurfaceAudioProperties
// Size: 0x8
struct DynArray_SurfaceAudioProperties {
    SurfaceAudioProperties* m_data; // Offset: 0x0
};

// Original name: GasCloudLightParams
// Size: 0xd8
// VTable: 0x1499ccf00
struct GasCloudLightParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool active; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    RGB color; // Offset: 0x20
    float intensity; // Offset: 0x38
    float innerRadius; // Offset: 0x3c
    float outerRadius; // Offset: 0x40
    bool affectsFog; // Offset: 0x44
    bool affectsObjects; // Offset: 0x45
    bool affectsGI; // Offset: 0x46
    bool specular; // Offset: 0x47
    GasCloudLightShadowParams shadow; // Offset: 0x48
    GasCloudLightFadeParams fade; // Offset: 0x60
    GasCloudLightNoiseParams noise; // Offset: 0x78
    GasCloudLightAudioParams audio; // Offset: 0x90
};

// Original name: JumpDriveStateMusicMap
// Size: 0x50
// VTable: 0x1499f51f8
struct JumpDriveStateMusicMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    JumpDriveMusicEvent musicEvent; // Offset: 0x8
    ARDataType jumpDriveState; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
};

// Original name: DynArray_SGalactapediaEntry
// Generated DynArray for base type: SGalactapediaEntry
// Size: 0x8
struct DynArray_SGalactapediaEntry {
    SGalactapediaEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_QuantumStateMusicMap
// Generated DynArray for base type: QuantumStateMusicMap
// Size: 0x8
struct DynArray_QuantumStateMusicMap {
    QuantumStateMusicMap* m_data; // Offset: 0x0
};

// Original name: ParticleEffectParams
// Size: 0x258
// VTable: 0x1499976e0
struct ParticleEffectParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceParticle particleEffect; // Offset: 0x18
    CryStringT* comment; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x38
    bool activate; // Offset: 0x40
    uint8_t _pad_2[0x3]; // Offset: 0x41
    float spawnProbability; // Offset: 0x44
    bool primed; // Offset: 0x48
    uint8_t _pad_3[0x7]; // Offset: 0x49
    CustomFloat scale; // Offset: 0x50
    Vec3 emissionSizeScale; // Offset: 0x60
    CustomFloat speedScale; // Offset: 0x78
    CustomFloat timeScale; // Offset: 0x88
    CustomFloat countScale; // Offset: 0x98
    bool countPerUnit; // Offset: 0xa8
    uint8_t _pad_4[0x7]; // Offset: 0xa9
    CustomFloat strength; // Offset: 0xb0
    CustomFloat alphaScale; // Offset: 0xc0
    CustomFloat pulsePeriod; // Offset: 0xd0
    ParticleEffectNoneTintingParams externalTint; // Offset: 0xe0
    ARDataType attachType; // Offset: 0xf0
    ARDataType attachForm; // Offset: 0xf4
    bool registerByBbox; // Offset: 0xf8
    uint8_t _pad_5[0x3]; // Offset: 0xf9
    ARDataType clipToVisArea; // Offset: 0xfc
    ARDataType gpuVisAreaCullingMode; // Offset: 0x100
    bool forceDisableShadows; // Offset: 0x104
    uint8_t _pad_6[0x3]; // Offset: 0x105
    ARDataType tesselationAmount; // Offset: 0x108
    ARDataType attachToZone; // Offset: 0x10c
    ParticleEffectAudioParams audio; // Offset: 0x110
    GPUParticleAudioStruct gpuAudio; // Offset: 0x148
    int32_t seed; // Offset: 0x250
    ARDataType renderLayer; // Offset: 0x254
    uint8_t _pad_7[0x3]; // Offset: 0x255
};

// Original name: QuantumMusicTripCategory
// Size: 0x68
// VTable: 0x149a52938
struct QuantumMusicTripCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* description; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    double minDistance; // Offset: 0x18
    QuantumMusicEventBase categoryEvent; // Offset: 0x20
    float preArrivalDurationSecs; // Offset: 0x60
    uint8_t _pad_2[0x4]; // Offset: 0x64
};

// Original name: QuantumEffectMusic
// Size: 0x1c8
// VTable: 0x149a52860
struct QuantumEffectMusic {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    QuantumMusicEventBase spoolStart; // Offset: 0x8
    QuantumMusicEventBase pinch; // Offset: 0x48
    QuantumMusicEventBase entryFlash; // Offset: 0x88
    QuantumMusicEventBase trailStart; // Offset: 0xc8
    QuantumMusicEventBase travelStart; // Offset: 0x108
    QuantumMusicEventBase travelEnd; // Offset: 0x148
    QuantumMusicEventBase exitTrigger; // Offset: 0x188
};

// Original name: DynArray_ProceduralPlanetAudioDisturbanceDef
// Generated DynArray for base type: ProceduralPlanetAudioDisturbanceDef
// Size: 0x8
struct DynArray_ProceduralPlanetAudioDisturbanceDef {
    ProceduralPlanetAudioDisturbanceDef* m_data; // Offset: 0x0
};

// Original name: AudioSignal
// Size: 0xa8
// VTable: 0x1499a96e8
struct AudioSignal {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_AudioSwitch* switches; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_AudioSignalRtpc* rtpcs; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    DynArray_GlobalResourceAudio* audioTriggers; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x80
};

// Original name: CraftingRecipeCosts_RecordRef
// Size: 0x20
// VTable: 0x1499b87b0
struct CraftingRecipeCosts_RecordRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingRecipeCostsRecord costsRecord; // Offset: 0x8
};

// Original name: DefaultActionsParams
// Size: 0x68
// VTable: 0x149a8b888
struct DefaultActionsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DefaultActionsEntityState* states; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_DefaultActionDef* defaultActions; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: HarvestBehaviourParams
// Size: 0x48
// VTable: 0x1499f0008
struct HarvestBehaviourParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_HarvestConditionBase* harvestConditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    HarvestDespawnTimerParams despawnTimer; // Offset: 0x38
};

// Original name: ServiceBeaconBaseTemplateParams
// Size: 0x88
// VTable: 0x149970740
struct ServiceBeaconBaseTemplateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* objectiveTitle; // Offset: 0x8
    CLocIdentifier* objectiveDescription; // Offset: 0x10
    bool canBeCreatedInMobiglas; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    ARDataType serviceBeaconType; // Offset: 0x1c
    CLocIdentifier* serviceBeaconName; // Offset: 0x20
    int32_t beaconTaxPercentage; // Offset: 0x28
    int32_t beaconMaxPaymentAmount; // Offset: 0x2c
    MissionPropertyValue_AIName npcRequesterNameDef; // Offset: 0x30
    SServiceBeaconCreatorParamsBase npcCreatorParams; // Offset: 0x78
};

// Original name: PersonalTransportBeaconParams
// Size: 0xa8
// VTable: 0x149970898
struct PersonalTransportBeaconParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* objectiveTitle; // Offset: 0x8
    CLocIdentifier* objectiveDescription; // Offset: 0x10
    bool canBeCreatedInMobiglas; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    ARDataType serviceBeaconType; // Offset: 0x1c
    CLocIdentifier* serviceBeaconName; // Offset: 0x20
    int32_t beaconTaxPercentage; // Offset: 0x28
    int32_t beaconMaxPaymentAmount; // Offset: 0x2c
    MissionPropertyValue_AIName npcRequesterNameDef; // Offset: 0x30
    SServiceBeaconCreatorParamsBase npcCreatorParams; // Offset: 0x78
    CLocIdentifier* pickUpObjectiveTitle; // Offset: 0x88
    CLocIdentifier* pickUpObjectiveDescription; // Offset: 0x90
    CLocIdentifier* deliveryObjectiveTitle; // Offset: 0x98
    CLocIdentifier* deliveryObjectiveDescription; // Offset: 0xa0
};

// Original name: Investigation_Clue_CorpseScanInfo
// Size: 0x68
// VTable: 0x14996a958
struct Investigation_Clue_CorpseScanInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* objectiveLongDescription; // Offset: 0x8
    CLocIdentifier* objectiveShortDescription; // Offset: 0x10
    MissionPropertyValue_AIName name; // Offset: 0x18
    CLocIdentifier* causeOfDeath; // Offset: 0x60
};

// Original name: Investigation_Suspect
// Size: 0x58
// VTable: 0x14996a7f0
struct Investigation_Suspect {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionPropertyValue_AIName name; // Offset: 0x8
    bool initialSuspect; // Offset: 0x50
    bool isGuilty; // Offset: 0x51
    uint8_t _pad_1[0x6]; // Offset: 0x52
};

// Original name: ConsumableSubtype
// Size: 0x60
// VTable: 0x149a252c8
struct ConsumableSubtype {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* typeName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* consumableName; // Offset: 0x18
    DynArray_ConsumableEffect* effectsPerMicroSCU; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    RGBA tintOverride; // Offset: 0x50
};

// Original name: ContactHighlightStateParams
// Size: 0x28
// VTable: 0x1499c5848
struct ContactHighlightStateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ContactHighlightStateBaseParams defaultParams; // Offset: 0x8
    ContactHighlightStateBaseParams occludedParams; // Offset: 0x18
};

// Original name: UIWorldDisplayPathParams
// Size: 0xc8
// VTable: 0x149aaa4f8
struct UIWorldDisplayPathParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enabled; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    UIWorldDisplayPathStateParams validStateSettings; // Offset: 0x10
    UIWorldDisplayPathStateParams invalidStateSettings; // Offset: 0x50
    UIWorldDisplayPathLineParams pathLineSettings; // Offset: 0x90
};

// Original name: SCPersonalThoughtDisplayParams
// Size: 0x78
// VTable: 0x149a3c5f8
struct SCPersonalThoughtDisplayParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_TypeSubtypeParams* itemPortTypeSubtypes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    HUDSilhouetteParams lootEntitySilhouette; // Offset: 0x48
};

// Original name: AudioGameContextGlobals
// Size: 0x68
// VTable: 0x149a95788
struct AudioGameContextGlobals {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioSwitch* globalStates; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_AudioRtpcWithDefault* globalRTPCs; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: DynArray_SpawnDescriptionEntry
// Generated DynArray for base type: SpawnDescriptionEntry
// Size: 0x8
struct DynArray_SpawnDescriptionEntry {
    SpawnDescriptionEntry* m_data; // Offset: 0x0
};

// Original name: ObjectiveProperty_Embedded
// Size: 0x40
// VTable: 0x14996d8b0
struct ObjectiveProperty_Embedded {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionProperty property; // Offset: 0x8
};

// Original name: DataSetMatchCondition_ExcludeNearbyLocationsDef
// Size: 0x20
// VTable: 0x149969ac8
struct DataSetMatchCondition_ExcludeNearbyLocationsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionProperty locationProperty; // Offset: 0x8
    float exclusionRangeKm; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: DataSetMatchCondition_ExcludeDistantLocationsDef
// Size: 0x20
// VTable: 0x149969b48
struct DataSetMatchCondition_ExcludeDistantLocationsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionProperty locationProperty; // Offset: 0x8
    float exclusionRangeKm; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: DataSetMatchCondition_ExcludeProperty
// Size: 0x18
// VTable: 0x149969a40
struct DataSetMatchCondition_ExcludeProperty {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionProperty excludedProperty; // Offset: 0x8
};

// Original name: ObjectiveProperty_Output
// Size: 0x40
// VTable: 0x14996d8b8
struct ObjectiveProperty_Output {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionProperty property; // Offset: 0x8
};

// Original name: ContractCommsNotification
// Size: 0x20
// VTable: 0x149971298
struct ContractCommsNotification {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionProperty communicationTags; // Offset: 0x8
    float delay; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
};

// Original name: ContractResult_ItemsWeighting
// Size: 0x120
// VTable: 0x149972858
struct ContractResult_ItemsWeighting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MissionProperty targetLocation; // Offset: 0x38
    bool awardOnlyToMissionOwner; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
    DynArray_ItemAwardWeightingsBase* itemAwardStructure; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
    RewardNotification notification; // Offset: 0x80
};

// Original name: ObjectiveProperty_Referenced
// Size: 0x38
// VTable: 0x14996d9c0
struct ObjectiveProperty_Referenced {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* missionVariableName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* extendedTextToken; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    MissionProperty property; // Offset: 0x28
};

// Original name: ContractEndCommsNotification
// Size: 0x28
// VTable: 0x149971340
struct ContractEndCommsNotification {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType reason; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    MissionProperty communicationTags; // Offset: 0x10
    float delay; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
};

// Original name: DynArray_MissionProperty
// Generated DynArray for base type: MissionProperty
// Size: 0x8
struct DynArray_MissionProperty {
    MissionProperty* m_data; // Offset: 0x0
};

// Original name: DynArray_AttackCategoryParamsBase
// Generated DynArray for base type: AttackCategoryParamsBase
// Size: 0x8
struct DynArray_AttackCategoryParamsBase {
    AttackCategoryParamsBase* m_data; // Offset: 0x0
};

// Original name: DamageParams
// Size: 0x48
// VTable: 0x1499ae118
struct DamageParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageMacro damageMacro; // Offset: 0x8
    float damageTotal; // Offset: 0x20
    uint8_t _pad_1[0x24]; // Offset: 0x24
};

// Original name: SInitialDamageSpecifierFraction
// Size: 0x28
// VTable: 0x149a17578
struct SInitialDamageSpecifierFraction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageMacro damageMacro; // Offset: 0x8
    float HealthFraction; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: CraftingGameplayPropertyImplSingleStatTier_Float
// Size: 0x38
// VTable: 0x1499b9490
struct CraftingGameplayPropertyImplSingleStatTier_Float {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CraftingGameplayPropertyImplValueRange_Float* valueRanges; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_SFortitudeLevelStats
// Generated DynArray for base type: SFortitudeLevelStats
// Size: 0x8
struct DynArray_SFortitudeLevelStats {
    SFortitudeLevelStats* m_data; // Offset: 0x0
};

// Original name: DynArray_STakedownTechniqueLevelStats
// Generated DynArray for base type: STakedownTechniqueLevelStats
// Size: 0x8
struct DynArray_STakedownTechniqueLevelStats {
    STakedownTechniqueLevelStats* m_data; // Offset: 0x0
};

// Original name: DynArray_SReflexLevelStats
// Generated DynArray for base type: SReflexLevelStats
// Size: 0x8
struct DynArray_SReflexLevelStats {
    SReflexLevelStats* m_data; // Offset: 0x0
};

// Original name: DynArray_SPlayerRoleShakeMultipliers
// Generated DynArray for base type: SPlayerRoleShakeMultipliers
// Size: 0x8
struct DynArray_SPlayerRoleShakeMultipliers {
    SPlayerRoleShakeMultipliers* m_data; // Offset: 0x0
};

// Original name: DynArray_SStrengthLevelStats
// Generated DynArray for base type: SStrengthLevelStats
// Size: 0x8
struct DynArray_SStrengthLevelStats {
    SStrengthLevelStats* m_data; // Offset: 0x0
};

// Original name: DynArray_SLightStatePreset
// Generated DynArray for base type: SLightStatePreset
// Size: 0x8
struct DynArray_SLightStatePreset {
    SLightStatePreset* m_data; // Offset: 0x0
};

// Original name: DynArray_PingDetectionLevelParams
// Generated DynArray for base type: PingDetectionLevelParams
// Size: 0x8
struct DynArray_PingDetectionLevelParams {
    PingDetectionLevelParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SVaultingTechniqueLevelStats
// Generated DynArray for base type: SVaultingTechniqueLevelStats
// Size: 0x8
struct DynArray_SVaultingTechniqueLevelStats {
    SVaultingTechniqueLevelStats* m_data; // Offset: 0x0
};

// Original name: DynArray_SFitnessLevelStats
// Generated DynArray for base type: SFitnessLevelStats
// Size: 0x8
struct DynArray_SFitnessLevelStats {
    SFitnessLevelStats* m_data; // Offset: 0x0
};

// Original name: DynArray_SAimableGameModeRoleParams
// Generated DynArray for base type: SAimableGameModeRoleParams
// Size: 0x8
struct DynArray_SAimableGameModeRoleParams {
    SAimableGameModeRoleParams* m_data; // Offset: 0x0
};

// Original name: DynArray_OperatorModeAvailability
// Generated DynArray for base type: OperatorModeAvailability
// Size: 0x8
struct DynArray_OperatorModeAvailability {
    OperatorModeAvailability* m_data; // Offset: 0x0
};

// Original name: DynArray_ContractResultBase
// Generated DynArray for base type: ContractResultBase
// Size: 0x8
struct DynArray_ContractResultBase {
    ContractResultBase* m_data; // Offset: 0x0
};

// Original name: DynArray_WebCustomizationItemTypeName
// Generated DynArray for base type: WebCustomizationItemTypeName
// Size: 0x8
struct DynArray_WebCustomizationItemTypeName {
    WebCustomizationItemTypeName* m_data; // Offset: 0x0
};

// Original name: ItemPreview_CameraSettingsOverride
// Size: 0x98
// VTable: 0x149a95098
struct ItemPreview_CameraSettingsOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemPreview_CameraSettings settings; // Offset: 0x8
    DynArray_ARDataType* itemTypes; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x70
};

// Original name: SHealingBeamBodyPartParams
// Size: 0xc8
// VTable: 0x149a768f8
struct SHealingBeamBodyPartParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BodyPart bodyPart; // Offset: 0x8
    CLocIdentifier* displayName; // Offset: 0x20
    SHealingBeamBoneEntryParams boneEntry; // Offset: 0x28
    SHealingBeamBodyPartHighlightingParams highlightParams; // Offset: 0x70
};

// Original name: DynArray_GameModeCustomSetting
// Generated DynArray for base type: GameModeCustomSetting
// Size: 0x8
struct DynArray_GameModeCustomSetting {
    GameModeCustomSetting* m_data; // Offset: 0x0
};

// Original name: DynArray_ItemPreview_SkinnedLoadoutOverride
// Generated DynArray for base type: ItemPreview_SkinnedLoadoutOverride
// Size: 0x8
struct DynArray_ItemPreview_SkinnedLoadoutOverride {
    ItemPreview_SkinnedLoadoutOverride* m_data; // Offset: 0x0
};

// Original name: DynArray_STargetableItemType
// Generated DynArray for base type: STargetableItemType
// Size: 0x8
struct DynArray_STargetableItemType {
    STargetableItemType* m_data; // Offset: 0x0
};

// Original name: DynArray_MasterModeExclusion
// Generated DynArray for base type: MasterModeExclusion
// Size: 0x8
struct DynArray_MasterModeExclusion {
    MasterModeExclusion* m_data; // Offset: 0x0
};

// Original name: AISyncedMeleeAttack
// Size: 0x50
// VTable: 0x149a02a38
struct AISyncedMeleeAttack {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType attackType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* globalFragmentTags; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    float minDistanceToTarget2d; // Offset: 0x20
    float maxDistanceToTarget2d; // Offset: 0x24
    float minRelativeTargetHeight; // Offset: 0x28
    float maxRelativeTargetHeight; // Offset: 0x2c
    float maxAngleToTarget; // Offset: 0x30
    bool ignoreAttackObstructionClearance; // Offset: 0x34
    uint8_t _pad_3[0x3]; // Offset: 0x35
    float maxAngleTargetToAttacker; // Offset: 0x38
    uint8_t _pad_4[0x4]; // Offset: 0x3c
    SyncedAttackCategoryParams meleeAttackParams; // Offset: 0x40
};

// Original name: DynArray_InventoryContainerItemTypeFilter
// Generated DynArray for base type: InventoryContainerItemTypeFilter
// Size: 0x8
struct DynArray_InventoryContainerItemTypeFilter {
    InventoryContainerItemTypeFilter* m_data; // Offset: 0x0
};

// Original name: DynArray_StatusEffectAbilityLock
// Generated DynArray for base type: StatusEffectAbilityLock
// Size: 0x8
struct DynArray_StatusEffectAbilityLock {
    StatusEffectAbilityLock* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemTypeFilter
// Generated DynArray for base type: SItemTypeFilter
// Size: 0x8
struct DynArray_SItemTypeFilter {
    SItemTypeFilter* m_data; // Offset: 0x0
};

// Original name: DynArray_OrificeBloodParams
// Generated DynArray for base type: OrificeBloodParams
// Size: 0x8
struct DynArray_OrificeBloodParams {
    OrificeBloodParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SocialTab
// Generated DynArray for base type: SocialTab
// Size: 0x8
struct DynArray_SocialTab {
    SocialTab* m_data; // Offset: 0x0
};

// Original name: ItemControlComponentParams
// Size: 0x60
// VTable: 0x149a07820
struct ItemControlComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool forceOn; // Offset: 0x18
    bool turnedOnByDefault; // Offset: 0x19
    uint8_t _pad_1[0x2]; // Offset: 0x1a
    ARDataType asopSpawnState; // Offset: 0x1c
    DynArray_ItemThrottleParamsBase* throttleParams; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    MasterModeExclusionsOverride masterModeExclusionsOverride; // Offset: 0x50
};

// Original name: ARMarkerTrackingParams
// Size: 0xc0
// VTable: 0x149a4a3c0
struct ARMarkerTrackingParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* namespace_; /* namespace */ // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    MarkerTrackingBoxoutParameters boxout; // Offset: 0x28
    Vec2 clipBoundTopLeft; // Offset: 0x58
    Vec2 clipBoundTopLeftVehicle; // Offset: 0x68
    Vec2 clipBoundBottomRight; // Offset: 0x78
    Vec2 clipBoundBottomRightVehicle; // Offset: 0x88
    float aspectRatio; // Offset: 0x98
    float aspectRatioVehicle; // Offset: 0x9c
    float clipRadius; // Offset: 0xa0
    float clipRadiusVehicle; // Offset: 0xa4
    MarkerDeclutteringCullingOrder declutteringParams; // Offset: 0xa8
};

// Original name: MovieClipTransformationInterpolatorParams
// Size: 0xf0
// VTable: 0x149aa8698
struct MovieClipTransformationInterpolatorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* movieClipName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    TransformationInterpolatorParams transformationInterpolatorParams; // Offset: 0x18
};

// Original name: TransformationInterpolator
// Size: 0xe8
// VTable: 0x149aa8798
struct TransformationInterpolator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float interpolationTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    TransformationInterpolatorParams transformationInterpolatorParams; // Offset: 0x10
};

// Original name: DynArray_SUninsuredItem
// Generated DynArray for base type: SUninsuredItem
// Size: 0x8
struct DynArray_SUninsuredItem {
    SUninsuredItem* m_data; // Offset: 0x0
};

// Original name: DefaultEntitlementEntityParams
// Size: 0x28
// VTable: 0x1499b0ec8
struct DefaultEntitlementEntityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DefaultEntitlementRecord entitlementPolicy; // Offset: 0x8
    bool canEntitleThroughWebsite; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
};

// Original name: DynArray_ItemResourceNetworkMapTriggerEntry
// Generated DynArray for base type: ItemResourceNetworkMapTriggerEntry
// Size: 0x8
struct DynArray_ItemResourceNetworkMapTriggerEntry {
    ItemResourceNetworkMapTriggerEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemSuitThrusterParams
// Generated DynArray for base type: SCItemSuitThrusterParams
// Size: 0x8
struct DynArray_SCItemSuitThrusterParams {
    SCItemSuitThrusterParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SItemPortDefTypes
// Generated DynArray for base type: SItemPortDefTypes
// Size: 0x8
struct DynArray_SItemPortDefTypes {
    SItemPortDefTypes* m_data; // Offset: 0x0
};

// Original name: SHearingComponentParams
// Size: 0x70
// VTable: 0x149a02528
struct SHearingComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    AIObservableFilterFlags movementSoundOriginFilter; // Offset: 0x18
    DynArray_ARDataType* soundTypeFilter; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x38]; // Offset: 0x38
};

// Original name: DynArray_AIObservableFilterFlags
// Generated DynArray for base type: AIObservableFilterFlags
// Size: 0x8
struct DynArray_AIObservableFilterFlags {
    AIObservableFilterFlags* m_data; // Offset: 0x0
};

// Original name: SStandardPlayerStats
// Size: 0x88
// VTable: 0x149a31018
struct SStandardPlayerStats {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float secondsToMergeHits; // Offset: 0x18
    int32_t deathScreenMaxItemsPerColumn; // Offset: 0x1c
    int32_t deathScreenMaxSecondsStatValid; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    SEAFriendlyFireKickParams friendlyFireKickParams; // Offset: 0x28
};

// Original name: SS42PlayerStats
// Size: 0x88
// VTable: 0x149a3c2e0
struct SS42PlayerStats {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float secondsToMergeHits; // Offset: 0x18
    int32_t deathScreenMaxItemsPerColumn; // Offset: 0x1c
    int32_t deathScreenMaxSecondsStatValid; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    SEAFriendlyFireKickParams friendlyFireKickParams; // Offset: 0x28
};

// Original name: SFPSPlayerStats
// Size: 0x88
// VTable: 0x149a34098
struct SFPSPlayerStats {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float secondsToMergeHits; // Offset: 0x18
    int32_t deathScreenMaxItemsPerColumn; // Offset: 0x1c
    int32_t deathScreenMaxSecondsStatValid; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    SEAFriendlyFireKickParams friendlyFireKickParams; // Offset: 0x28
};

// Original name: DynArray_ArmsLockSingleAbility
// Generated DynArray for base type: ArmsLockSingleAbility
// Size: 0x8
struct DynArray_ArmsLockSingleAbility {
    ArmsLockSingleAbility* m_data; // Offset: 0x0
};

// Original name: DynArray_OperatorModeDefinitions
// Generated DynArray for base type: OperatorModeDefinitions
// Size: 0x8
struct DynArray_OperatorModeDefinitions {
    OperatorModeDefinitions* m_data; // Offset: 0x0
};

// Original name: DynArray_PassengerScanStatusMappings
// Generated DynArray for base type: PassengerScanStatusMappings
// Size: 0x8
struct DynArray_PassengerScanStatusMappings {
    PassengerScanStatusMappings* m_data; // Offset: 0x0
};

// Original name: DynArray_PersonalThoughtForceCloseActionList
// Generated DynArray for base type: PersonalThoughtForceCloseActionList
// Size: 0x8
struct DynArray_PersonalThoughtForceCloseActionList {
    PersonalThoughtForceCloseActionList* m_data; // Offset: 0x0
};

// Original name: ActorSkeletonConfig
// Size: 0x150
// VTable: 0x149ab0930
struct ActorSkeletonConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LocomotionAnimSyncConfig locomotionAnimSyncConfig; // Offset: 0x8
    RagdollRecoveryConfig ragdollRecoveryConfig; // Offset: 0x60
    ActorFootJointPairDef estimatedCyclePhaseFootConfig; // Offset: 0xd0
    ActorFootJointPairDef preciseCyclePhaseFootConfig; // Offset: 0x100
    ActorMeleeDef meleeConfig; // Offset: 0x130
};

// Original name: DynArray_DockingSlotVisibilityTagSet
// Generated DynArray for base type: DockingSlotVisibilityTagSet
// Size: 0x8
struct DynArray_DockingSlotVisibilityTagSet {
    DockingSlotVisibilityTagSet* m_data; // Offset: 0x0
};

// Original name: LandingAnimationSetup
// Size: 0x68
// VTable: 0x149aa2e00
struct LandingAnimationSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType landingStrength; // Offset: 0x8
    float minVelocity; // Offset: 0xc
    ARDataType condition; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    FragmentInfo fragment; // Offset: 0x18
    bool playProceduralLanding; // Offset: 0x60
    bool lockMovement; // Offset: 0x61
    uint8_t _pad_2[0x2]; // Offset: 0x62
    ARDataType exitStance; // Offset: 0x64
};

// Original name: ActorFallOverlayNode
// Size: 0xf0
// VTable: 0x149aa2fd8
struct ActorFallOverlayNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType configVariant; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    FragmentInfo arc; // Offset: 0x10
    FragmentRequiredInfo loop; // Offset: 0x58
    FragmentInfo outro; // Offset: 0xa0
    float transitionFromInterruptDelay; // Offset: 0xe8
    float transitionFromInterruptDuration; // Offset: 0xec
};

// Original name: SSCActorEffectsControllerParams
// Size: 0xd8
// VTable: 0x149a67e30
struct SSCActorEffectsControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* footstepMFXEntry; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    VectorFieldParams vectorFieldParams; // Offset: 0x28
    ActorUndergroundEffects undergroundEffects; // Offset: 0x98
};

// Original name: VehicleItemInteriorController
// Size: 0x70
// VTable: 0x149aa0290
struct VehicleItemInteriorController {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GameTokens GameTokenList; // Offset: 0x8
};

// Original name: DynArray_SWeaponOnAttachParams
// Generated DynArray for base type: SWeaponOnAttachParams
// Size: 0x8
struct DynArray_SWeaponOnAttachParams {
    SWeaponOnAttachParams* m_data; // Offset: 0x0
};

// Original name: DynArray_DisabledLoadoutInteraction
// Generated DynArray for base type: DisabledLoadoutInteraction
// Size: 0x8
struct DynArray_DisabledLoadoutInteraction {
    DisabledLoadoutInteraction* m_data; // Offset: 0x0
};

// Original name: DynArray_DurationTags
// Generated DynArray for base type: DurationTags
// Size: 0x8
struct DynArray_DurationTags {
    DurationTags* m_data; // Offset: 0x0
};

// Original name: DynArray_Fidget
// Generated DynArray for base type: Fidget
// Size: 0x8
struct DynArray_Fidget {
    Fidget* m_data; // Offset: 0x0
};

// Original name: PlayerAnimatedInteractionCustom
// Size: 0x70
// VTable: 0x1499a0340
struct PlayerAnimatedInteractionCustom {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlayerAnimatedInteraction playerAnimatedInteraction; // Offset: 0x8
};

// Original name: PlayerAnimatedInteractionTemplate
// Size: 0x70
// VTable: 0x1499a02e0
struct PlayerAnimatedInteractionTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlayerAnimatedInteraction playerAnimatedInteraction; // Offset: 0x8
};

// Original name: DynArray_PersonalThoughtContextualActionsMenu
// Generated DynArray for base type: PersonalThoughtContextualActionsMenu
// Size: 0x8
struct DynArray_PersonalThoughtContextualActionsMenu {
    PersonalThoughtContextualActionsMenu* m_data; // Offset: 0x0
};

// Original name: EAVotingModule
// Size: 0x60
// VTable: 0x149a3acc8
struct EAVotingModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    VoteGenericLocParams genericLocParams; // Offset: 0x18
    VoteNextLevelParams nextLevelParams; // Offset: 0x50
};

// Original name: DynArray_ChatEmoteData
// Generated DynArray for base type: ChatEmoteData
// Size: 0x8
struct DynArray_ChatEmoteData {
    ChatEmoteData* m_data; // Offset: 0x0
};

// Original name: InfractionDefinition
// Size: 0xc8
// VTable: 0x14996f068
struct InfractionDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* name; // Offset: 0x8
    CLocIdentifier* description; // Offset: 0x10
    DynArray_ARDataType* triggers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    InfractionParameters defaultParameters; // Offset: 0x48
};

// Original name: SHackingVisualParamsPreset
// Size: 0x170
// VTable: 0x149a2c4c0
struct SHackingVisualParamsPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float wallEffectInnerRadius; // Offset: 0x8
    float wallEffectOuterRadius; // Offset: 0xc
    float nodeTransitionOutDuration; // Offset: 0x10
    float introDuration; // Offset: 0x14
    float outroDuration; // Offset: 0x18
    float boardSpawnDelay; // Offset: 0x1c
    float boardSpawnWaveDelay; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    SHackingEntitySpawnParams nodeSpawnParams; // Offset: 0x28
    SHackingEntitySpawnParams agentSpawnParams; // Offset: 0x48
    SHackingEntitySpawnParams linkPointSpawnParams; // Offset: 0x68
    SHackingEntitySpawnParams pickupSpawnParams; // Offset: 0x88
    float agentSpawnInterval; // Offset: 0xa8
    float linkPointSpawnInterval; // Offset: 0xac
    float pingWaveMaxAmplitude; // Offset: 0xb0
    float pingWaveMinInnerAmplitude; // Offset: 0xb4
    float pingWaveOuterAmplitude; // Offset: 0xb8
    float pingWaveOscillationSpeed; // Offset: 0xbc
    int32_t passwordSegmentLength; // Offset: 0xc0
    int32_t commandLogSize; // Offset: 0xc4
    SHackingCameraParams cameraParams; // Offset: 0xc8
    SHackingCodeWindowParams codeWindowParams; // Offset: 0x128
};

// Original name: SLightFlickerVolumeComponentParams
// Size: 0xb0
// VTable: 0x1499e1618
struct SLightFlickerVolumeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    LightFlickerWaveParams waveControlParams; // Offset: 0x18
    SLightFlickerAnimParams animParams; // Offset: 0x28
    uint32_t randomSeed; // Offset: 0x90
    float searchRadius; // Offset: 0x94
    int32_t wavePasses; // Offset: 0x98
    uint8_t _pad_1[0x4]; // Offset: 0x9c
    SLightFlickerFilteringParams filteringParams; // Offset: 0xa0
};

// Original name: DynArray_AwardService_Award
// Generated DynArray for base type: AwardService_Award
// Size: 0x8
struct DynArray_AwardService_Award {
    AwardService_Award* m_data; // Offset: 0x0
};

// Original name: DynArray_SApplicationFormBodyTypeOption
// Generated DynArray for base type: SApplicationFormBodyTypeOption
// Size: 0x8
struct DynArray_SApplicationFormBodyTypeOption {
    SApplicationFormBodyTypeOption* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorCapabilities
// Generated DynArray for base type: VehicleEditorCapabilities
// Size: 0x8
struct DynArray_VehicleEditorCapabilities {
    VehicleEditorCapabilities* m_data; // Offset: 0x0
};

// Original name: DynArray_SSCSignatureSystemAudioRule
// Generated DynArray for base type: SSCSignatureSystemAudioRule
// Size: 0x8
struct DynArray_SSCSignatureSystemAudioRule {
    SSCSignatureSystemAudioRule* m_data; // Offset: 0x0
};

// Original name: ActorRestrainConfig
// Size: 0x88
// VTable: 0x149a57a20
struct ActorRestrainConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool immuneToRestrain; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_ActorRestrainPerAttackerConfig* perAttackerConfigs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_CryStringT* restrainVisibilityCheckJoints; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x40]; // Offset: 0x48
};

// Original name: DynArray_BoolUserVariable
// Generated DynArray for base type: BoolUserVariable
// Size: 0x8
struct DynArray_BoolUserVariable {
    BoolUserVariable* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_TextEmphasisModifierList
// Generated DynArray for base type: BuildingBlocks_TextEmphasisModifierList
// Size: 0x8
struct DynArray_BuildingBlocks_TextEmphasisModifierList {
    BuildingBlocks_TextEmphasisModifierList* m_data; // Offset: 0x0
};

// Original name: RadarDisplay_Config
// Size: 0x330
// VTable: 0x149aa91e8
struct RadarDisplay_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SimpleSpriteSlot LocalEntity; // Offset: 0x8
    SimpleSpriteSlot Line; // Offset: 0x30
    SimpleSpriteSlot Number; // Offset: 0x58
    SimpleSpriteSlot Missile; // Offset: 0x80
    SimpleSpriteSlot Core; // Offset: 0xa8
    SimpleSpriteSlot Beacon; // Offset: 0xd0
    SimpleSpriteSlot Blob; // Offset: 0xf8
    SimpleSpriteSlot ArrowUp; // Offset: 0x120
    SimpleSpriteSlot ArrowDown; // Offset: 0x148
    SimpleSpriteSlot FocusedArrowUp; // Offset: 0x170
    SimpleSpriteSlot FocusedArrowDown; // Offset: 0x198
    float LineThickness; // Offset: 0x1c0
    float QuadSize; // Offset: 0x1c4
    Vec2 ActivePingUV_Start; // Offset: 0x1c8
    Vec2 ActivePingUV_Size; // Offset: 0x1d8
    ARDataType ActivePingColor; // Offset: 0x1e8
    uint8_t _pad_1[0x6]; // Offset: 0x1ea
    RadarDisplayEntryEffects_Config radarEntryEffects; // Offset: 0x1f0
    RadarPlate_Config radarPlateSettings; // Offset: 0x210
};

// Original name: DynArray_WorldDisplay_PlaneEnvironment_Ring
// Generated DynArray for base type: WorldDisplay_PlaneEnvironment_Ring
// Size: 0x8
struct DynArray_WorldDisplay_PlaneEnvironment_Ring {
    WorldDisplay_PlaneEnvironment_Ring* m_data; // Offset: 0x0
};

// Original name: WorldDisplayRadar
// Size: 0x160
// VTable: 0x149a04370
struct WorldDisplayRadar {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hoverSizeMultiplier; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    WorldDisplayRadar_Icon unknown; // Offset: 0x10
    WorldDisplayRadar_Icon defaultUp; // Offset: 0x48
    WorldDisplayRadar_Icon defaultDown; // Offset: 0x80
    WorldDisplayRadar_Icon missile; // Offset: 0xb8
    WorldDisplayRadar_Line horizontalLine; // Offset: 0xf0
    WorldDisplayRadar_Line verticalLine; // Offset: 0x128
};

// Original name: VisibleElement
// Size: 0x40
// VTable: 0x149a4a838
struct VisibleElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VisibilityCondition* conditions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool visibleByDefault; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
};

// Original name: StatusEffectBuffMacro
// Size: 0x40
// VTable: 0x1499fc9b8
struct StatusEffectBuffMacro {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float threshold; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ActorStatusAddBuff* buffEffects; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: BuildingBlocks_BindingsStringFromStringSwitch
// Size: 0xb0
// VTable: 0x149989d78
struct BuildingBlocks_BindingsStringFromStringSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsStringBase defaultOverride; // Offset: 0x50
    CryStringT* defaultValue; // Offset: 0x60
    uint8_t _pad_1[0x8]; // Offset: 0x68
    DynArray_BuildingBlocks_StringStringPair* values; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x78
    BuildingBlocks_BindingsStringBase input; // Offset: 0xa0
};

// Original name: BuildingBlocks_BindingsStringFromNumberCompare
// Size: 0xb0
// VTable: 0x149989f18
struct BuildingBlocks_BindingsStringFromNumberCompare {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsStringBase defaultOverride; // Offset: 0x50
    CryStringT* defaultValue; // Offset: 0x60
    uint8_t _pad_1[0x8]; // Offset: 0x68
    DynArray_BuildingBlocks_NumberStringPair* values; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x78
    BuildingBlocks_BindingsNumberBase input; // Offset: 0xa0
};

// Original name: BuildingBlocks_BindingsStringFromIntegerSwitch
// Size: 0xb0
// VTable: 0x149989b48
struct BuildingBlocks_BindingsStringFromIntegerSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsStringBase defaultOverride; // Offset: 0x50
    CryStringT* defaultValue; // Offset: 0x60
    uint8_t _pad_1[0x8]; // Offset: 0x68
    DynArray_BuildingBlocks_IntegerStringPair* values; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x78
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0xa0
};

// Original name: EntityComponentVibrationParams
// Size: 0x30
// VTable: 0x149a151a0
struct EntityComponentVibrationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SVibrationDef vibrationRecord; // Offset: 0x18
};

// Original name: BuildingBlocks_BindingsColorFromIntegerSwitch
// Size: 0xa0
// VTable: 0x1499862f0
struct BuildingBlocks_BindingsColorFromIntegerSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_ColorBase defaultValue; // Offset: 0x50
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x60
    DynArray_BuildingBlocks_ColorIntegerPairDef* pairs; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x78
};

// Original name: DynArray_MissionScenarioCycle
// Generated DynArray for base type: MissionScenarioCycle
// Size: 0x8
struct DynArray_MissionScenarioCycle {
    MissionScenarioCycle* m_data; // Offset: 0x0
};

// Original name: DynArray_InnerThought_LayoutGridSetThought
// Generated DynArray for base type: InnerThought_LayoutGridSetThought
// Size: 0x8
struct DynArray_InnerThought_LayoutGridSetThought {
    InnerThought_LayoutGridSetThought* m_data; // Offset: 0x0
};

// Original name: DynArray_BoxFieldGeom
// Generated DynArray for base type: BoxFieldGeom
// Size: 0x8
struct DynArray_BoxFieldGeom {
    BoxFieldGeom* m_data; // Offset: 0x0
};

// Original name: BodyMapping
// Size: 0x90
// VTable: 0x149a81178
struct BodyMapping {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* vehicleCollisionJointName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_BodyJoint* joints; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x70]; // Offset: 0x20
};

// Original name: DynArray_BodyPartConfig
// Generated DynArray for base type: BodyPartConfig
// Size: 0x8
struct DynArray_BodyPartConfig {
    BodyPartConfig* m_data; // Offset: 0x0
};

// Original name: DamageResistanceReference
// Size: 0x20
// VTable: 0x1499adf10
struct DamageResistanceReference {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageResistanceMacro damageResistanceRecord; // Offset: 0x8
};

// Original name: DynArray_EAMarkerTrackerBase
// Generated DynArray for base type: EAMarkerTrackerBase
// Size: 0x8
struct DynArray_EAMarkerTrackerBase {
    EAMarkerTrackerBase* m_data; // Offset: 0x0
};

// Original name: SSCLocalPlayerChoiceComponentParams
// Size: 0x60
// VTable: 0x149a80528
struct SSCLocalPlayerChoiceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    PlayerChoice_MarkerNearestFace markerNearestFace; // Offset: 0x18
    DynArray_PlayerChoice_SoftwareCursorEntry* softwareCursors; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
};

// Original name: PointOfInterestList
// Size: 0x38
// VTable: 0x1499f96b0
struct PointOfInterestList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PointOfInterestData* pointsOfInterest; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SMinigameAppParams
// Size: 0x20
// VTable: 0x149a37fa0
struct SMinigameAppParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MiniGameRecordDef miniGameRecordDef; // Offset: 0x8
};

// Original name: DynArray_SMiniGameSpriteParams
// Generated DynArray for base type: SMiniGameSpriteParams
// Size: 0x8
struct DynArray_SMiniGameSpriteParams {
    SMiniGameSpriteParams* m_data; // Offset: 0x0
};

// Original name: CameraActorVibrationShakeConfig
// Size: 0x190
// VTable: 0x1499b2078
struct CameraActorVibrationShakeConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Ang3 offsetAngle; // Offset: 0x8
    Vec3 offsetPosition; // Offset: 0x20
    float timePeriod; // Offset: 0x38
    bool enabled; // Offset: 0x3c
    uint8_t _pad_1[0x3]; // Offset: 0x3d
    float frequencyNoiseFactor; // Offset: 0x40
    float translationNoise; // Offset: 0x44
    float rotationNoise; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    float frequency; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
    BezierCurve vibrationOutputMapping; // Offset: 0x58
    bool processOnlyOnVibrationIncrease; // Offset: 0xe8
    uint8_t _pad_4[0x3]; // Offset: 0xe9
    float processOnlyOnVibrationIncreaseDuration; // Offset: 0xec
    BezierCurve processOnlyOnVibrationIncreaseTimeMapping; // Offset: 0xf0
    float scaleFirstPerson; // Offset: 0x180
    float scaleThirdPerson; // Offset: 0x184
    float smoothFactor; // Offset: 0x188
    uint8_t _pad_5[0x4]; // Offset: 0x18c
};

// Original name: AeroParams
// Size: 0x230
// VTable: 0x149a1b410
struct AeroParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enableControlSurfaces; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Vec3 controlTorque; // Offset: 0x10
    Vec3 dampingTorque; // Offset: 0x28
    Vec3 stabilityTorque; // Offset: 0x40
    float minPressureForFullControlSurfaces; // Offset: 0x58
    float stallSpeedThresholdModifier; // Offset: 0x5c
    float peakTorqueScaleSpeed; // Offset: 0x60
    uint8_t _pad_2[0x4]; // Offset: 0x64
    AerodynamicCurveParams liftCurve; // Offset: 0x68
    AerodynamicCurveParams sideLiftCurve; // Offset: 0x98
    BezierCurve controlTorqueForSpeedCurve; // Offset: 0xc8
    float controlTorqueForSpeedCurveMax; // Offset: 0x158
    uint8_t _pad_3[0x4]; // Offset: 0x15c
    DragCurveParams drag; // Offset: 0x160
    float forwardBackThrustMultiplier; // Offset: 0x178
    float zeroGLiftMultiplier; // Offset: 0x17c
    float zeroGDragMultiplier; // Offset: 0x180
    float zeroGTorqueMultiplier; // Offset: 0x184
    float maxAtmosphereDensity; // Offset: 0x188
    uint8_t _pad_4[0x4]; // Offset: 0x18c
    Vec3 angularThrustAtmosphericMultiplier; // Offset: 0x190
    Vec3 angularVelocityAtmosphericMultiplier; // Offset: 0x1a8
    float peakVibrationAoA; // Offset: 0x1c0
    float minVibrationAoA; // Offset: 0x1c4
    CryStringT* pitchAnimationVariable; // Offset: 0x1c8
    uint8_t _pad_5[0x8]; // Offset: 0x1d0
    CryStringT* yawAnimationVariable; // Offset: 0x1d8
    uint8_t _pad_6[0x8]; // Offset: 0x1e0
    CryStringT* rollAnimationVariable; // Offset: 0x1e8
    uint8_t _pad_7[0x8]; // Offset: 0x1f0
    STurbulenceParams turbulence; // Offset: 0x1f8
};

// Original name: JumpTunnelVibrationParams
// Size: 0x248
// VTable: 0x149a15538
struct JumpTunnelVibrationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve enteringCurve; // Offset: 0x8
    BezierCurve wallProximityCurve; // Offset: 0x98
    BezierCurve offAxisCurve; // Offset: 0x128
    BezierCurve failingCurve; // Offset: 0x1b8
};

// Original name: TargetTrackingAutoZoomDef
// Size: 0xb0
// VTable: 0x149a64978
struct TargetTrackingAutoZoomDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve zoomByDistance; // Offset: 0x8
    float referenceDistance; // Offset: 0x98
    float zoomAngleMin; // Offset: 0x9c
    float zoomAngleMax; // Offset: 0xa0
    float zoomLerpSpeedIn; // Offset: 0xa4
    float zoomLerpSpeedOut; // Offset: 0xa8
    uint8_t _pad_1[0x4]; // Offset: 0xac
};

// Original name: FunctionalityModifierCurve
// Size: 0x98
// VTable: 0x1499a78b0
struct FunctionalityModifierCurve {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve functionalityModifierCurve; // Offset: 0x8
};

// Original name: FullscreenTutorial
// Size: 0x180
// VTable: 0x149a67d88
struct FullscreenTutorial {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* headerText; // Offset: 0x8
    CLocIdentifier* bodyText; // Offset: 0x10
    CryStringT* imagePath; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* moviePath; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    float lerpTime; // Offset: 0x38
    uint8_t _pad_3[0x4]; // Offset: 0x3c
    BezierCurve timeScaleCurveIn; // Offset: 0x40
    BezierCurve timeScaleCurveOut; // Offset: 0xd0
    float timeout; // Offset: 0x160
    uint8_t _pad_4[0x4]; // Offset: 0x164
    CryStringT* subsumptionName; // Offset: 0x168
    uint8_t _pad_5[0x8]; // Offset: 0x170
    float minTime; // Offset: 0x178
    uint8_t _pad_6[0x4]; // Offset: 0x17c
};

// Original name: AreaMapCameraParams
// Size: 0x150
// VTable: 0x1499ca070
struct AreaMapCameraParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float cameraDist; // Offset: 0x8
    float cameraPitch; // Offset: 0xc
    float cameraYaw; // Offset: 0x10
    float cameraZoomMax; // Offset: 0x14
    float cameraZoomMin; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    BezierCurve cameraPanCurve; // Offset: 0x20
    float cameraPanMultiplier; // Offset: 0xb0
    uint8_t _pad_2[0x4]; // Offset: 0xb4
    BezierCurve cameraZoomCurve; // Offset: 0xb8
    float cameraZoomMultiplier; // Offset: 0x148
    uint8_t _pad_3[0x4]; // Offset: 0x14c
};

// Original name: CapacitorAssignmentInputOutputDef
// Size: 0x98
// VTable: 0x1499f6340
struct CapacitorAssignmentInputOutputDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve inputOutputMapping; // Offset: 0x8
};

// Original name: SQuantumBoostRotationParams
// Size: 0x138
// VTable: 0x149a53b60
struct SQuantumBoostRotationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 maxAngVelocity; // Offset: 0x8
    Vec3 timeToFullAngVelocity; // Offset: 0x20
    BezierCurve vibrationBoostAngleOffset; // Offset: 0x38
    Vec3 driftKickMin; // Offset: 0xc8
    Vec3 driftKickMax; // Offset: 0xe0
    float driftKickExitScalar; // Offset: 0xf8
    float driftKickExitRollScalar; // Offset: 0xfc
    Vec3 turbulenceSpeeds; // Offset: 0x100
    float turbulenceSourceMaxAngle; // Offset: 0x118
    float turbulenceMaxPitchYawSpeed; // Offset: 0x11c
    float turbulenceTimeToFullPitchYawSpeed; // Offset: 0x120
    float turbulenceEffectiveYawPitchRange; // Offset: 0x124
    float turbulenceMaxRollSpeed; // Offset: 0x128
    float turbulenceTimeToFullRollSpeed; // Offset: 0x12c
    float turbulenceEffectiveRollRange; // Offset: 0x130
    uint8_t _pad_1[0x4]; // Offset: 0x134
};

// Original name: SQuantumBoostBubbleIntegrityParams
// Size: 0x300
// VTable: 0x149a53d28
struct SQuantumBoostBubbleIntegrityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float referenceAngle; // Offset: 0x8
    float alignmentCrossoverPointRatio; // Offset: 0xc
    BezierCurve increaseValueMapping; // Offset: 0x10
    BezierCurve decreaseValueMapping; // Offset: 0xa0
    float bestIntegrityIncreaseTime; // Offset: 0x130
    float worstIntegrityDecreaseTime; // Offset: 0x134
    float collapseTime; // Offset: 0x138
    uint8_t _pad_1[0x4]; // Offset: 0x13c
    BezierCurve relativeCoastSpeedFactor; // Offset: 0x140
    BezierCurve relativeCapacityCostFactor; // Offset: 0x1d0
    BezierCurve vibrationBubbleIntegrity; // Offset: 0x260
    uint8_t _pad_2[0x10]; // Offset: 0x2f0
};

// Original name: AITimeSinceTargetSeen
// Size: 0xa8
// VTable: 0x1499b73d8
struct AITimeSinceTargetSeen {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float decayDelayTimeSeconds; // Offset: 0x8
    float decayRate; // Offset: 0xc
    float capTimeSeconds; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    BezierCurve accuracyOverTimeCurve; // Offset: 0x18
};

// Original name: CombatMarker
// Size: 0x150
// VTable: 0x149aa68b8
struct CombatMarker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* objectName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float minimumScale; // Offset: 0x18
    float inverseScaleMultiplier; // Offset: 0x1c
    float hitAnimTotalTime; // Offset: 0x20
    float hitAnimationOffsetSize; // Offset: 0x24
    ARDataType easeType; // Offset: 0x28
    uint8_t _pad_2[0x3]; // Offset: 0x29
    float textOffset; // Offset: 0x2c
    float introAnimTime; // Offset: 0x30
    float introAnimPitchRotationFrequency; // Offset: 0x34
    float introAnimYawRotationFrequency; // Offset: 0x38
    float introAnimRollRotationFrequency; // Offset: 0x3c
    ARDataType introAnimEaseType; // Offset: 0x40
    uint8_t _pad_3[0x3]; // Offset: 0x41
    float introStartingScale; // Offset: 0x44
    float introStartingOffsetScale; // Offset: 0x48
    float introAnimOffset; // Offset: 0x4c
    float transitionAnimLength; // Offset: 0x50
    ARDataType transitionAnimEaseType; // Offset: 0x54
    uint8_t _pad_4[0x3]; // Offset: 0x55
    float rotationalAnimationClamp; // Offset: 0x58
    float rotationalAnimationIntegrationTime; // Offset: 0x5c
    float signalLostAnimationTime; // Offset: 0x60
    float signalLostAnimationPulseFrequency; // Offset: 0x64
    CryStringT* unfocusedObjectName; // Offset: 0x68
    uint8_t _pad_5[0x8]; // Offset: 0x70
    float unfocusedMarkerScale; // Offset: 0x78
    uint8_t _pad_6[0x4]; // Offset: 0x7c
    RGB hitAnimationColor; // Offset: 0x80
    float hitAnimationFlickerTime; // Offset: 0x98
    float hitAnimOffsetFactor; // Offset: 0x9c
    BezierCurve transitionScaleCurve; // Offset: 0xa0
    float gainedFocusAnimTotalTime; // Offset: 0x130
    float gainedFocusAnimFlickerTime; // Offset: 0x134
    float unFocusedRotationFactor; // Offset: 0x138
    uint8_t _pad_7[0x14]; // Offset: 0x13c
};

// Original name: SJumpDriveFlightTurbulenceParams
// Size: 0x1e0
// VTable: 0x1499f5b30
struct SJumpDriveFlightTurbulenceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SJumpDriveFlightTurbulenceNoiseParams noiseTurbulence; // Offset: 0x8
    SJumpDriveFlightTurbulenceNoiseParams noiseGust; // Offset: 0x38
    BezierCurve turbulenceByDistanceToSpline; // Offset: 0x68
    BezierCurve gustByDistanceToSpline; // Offset: 0xf8
    ARDataType pitchYawLimiterType; // Offset: 0x188
    uint8_t _pad_1[0x4]; // Offset: 0x18c
    Vec3 maxAngularVelocity; // Offset: 0x190
    Vec3 maxAngularAcceleration; // Offset: 0x1a8
    bool useTurbulenceParams; // Offset: 0x1c0
    bool useGustParams; // Offset: 0x1c1
    uint8_t _pad_2[0x1e]; // Offset: 0x1c2
};

// Original name: SWeaponMisfireEntry
// Size: 0xb8
// VTable: 0x149a74540
struct SWeaponMisfireEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve misfireProbabilityCurve; // Offset: 0x8
    DamageBase damage; // Offset: 0x98
    CryStringT* hitType; // Offset: 0xa8
    uint8_t _pad_1[0x8]; // Offset: 0xb0
};

// Original name: VideoCommsShaderParams
// Size: 0x388
// VTable: 0x149a9bab8
struct VideoCommsShaderParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve fadeInSplineHighTech; // Offset: 0x8
    BezierCurve fadeOutSplineHighTech; // Offset: 0x98
    BezierCurve switchCommsSplineHighTech; // Offset: 0x128
    BezierCurve fadeInSplineLowTech; // Offset: 0x1b8
    BezierCurve fadeOutSplineLowTech; // Offset: 0x248
    BezierCurve switchCommsSplineLowTech; // Offset: 0x2d8
    CryStringT* lowTechMaterial; // Offset: 0x368
    uint8_t _pad_1[0x8]; // Offset: 0x370
    CryStringT* highTechMaterial; // Offset: 0x378
    uint8_t _pad_2[0x8]; // Offset: 0x380
};

// Original name: JumpTunnelForcesParams
// Size: 0xc0
// VTable: 0x1499f5e20
struct JumpTunnelForcesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float angularAccelerationLimit; // Offset: 0x8
    float angularAccelerationDecay; // Offset: 0xc
    float angularSpeedLimit; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    BezierCurve angularCorrectionForceCurve; // Offset: 0x18
    bool useAngularForces; // Offset: 0xa8
    uint8_t _pad_2[0x3]; // Offset: 0xa9
    float linearAccelerationLimit; // Offset: 0xac
    float linearAccelerationDecay; // Offset: 0xb0
    float linearSpeedLimit; // Offset: 0xb4
    bool useWallRepelForces; // Offset: 0xb8
    uint8_t _pad_3[0x7]; // Offset: 0xb9
};

// Original name: SQuantumBoostBubbleIntegrityParams_NEW
// Size: 0x300
// VTable: 0x149a542e8
struct SQuantumBoostBubbleIntegrityParams_NEW {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float referenceAngle; // Offset: 0x8
    float alignmentCrossoverPointRatio; // Offset: 0xc
    BezierCurve increaseValueMapping; // Offset: 0x10
    BezierCurve decreaseValueMapping; // Offset: 0xa0
    float bestIntegrityIncreaseTime; // Offset: 0x130
    float worstIntegrityDecreaseTime; // Offset: 0x134
    float collapseTime; // Offset: 0x138
    uint8_t _pad_1[0x4]; // Offset: 0x13c
    BezierCurve relativeCoastSpeedFactor; // Offset: 0x140
    BezierCurve relativeCapacityCostFactor; // Offset: 0x1d0
    BezierCurve vibrationBubbleIntegrity; // Offset: 0x260
    uint8_t _pad_2[0x10]; // Offset: 0x2f0
};

// Original name: SWeaponAIShootingTimeAccuracyData
// Size: 0xa0
// VTable: 0x149a60948
struct SWeaponAIShootingTimeAccuracyData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxShootingTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    BezierCurve timePrecisionCurve; // Offset: 0x10
};

// Original name: SAimableControllerHudParams
// Size: 0x188
// VTable: 0x1499e9390
struct SAimableControllerHudParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float hudAutoGimbalTrackingMarkerAnimationTime; // Offset: 0x8
    bool showAutoGimbalCombinedAllPIP; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float leadPipFadingAngle; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    BezierCurve leadPipFadingCurve; // Offset: 0x18
    float lagPipFadingAngle; // Offset: 0xa8
    uint8_t _pad_3[0x4]; // Offset: 0xac
    BezierCurve lagPipFadingCurve; // Offset: 0xb0
    float borderOffsetAngleMin; // Offset: 0x140
    float borderOffsetAngleMax; // Offset: 0x144
    DynArray_int32_t* crosshairShapes; // Offset: 0x148 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x150
    float gimbalAlignmentAngle; // Offset: 0x178
    bool gimbalAlignmentExcludeOutOfAngle; // Offset: 0x17c
    uint8_t _pad_5[0xb]; // Offset: 0x17d
};

// Original name: SuspensionSprings
// Size: 0xb0
// VTable: 0x149a05060
struct SuspensionSprings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float undampedFrequency; // Offset: 0x8
    float dampingRatio; // Offset: 0xc
    float forceBlendOutDelay; // Offset: 0x10
    float forceBlendInRate; // Offset: 0x14
    float forceBlendOutRate; // Offset: 0x18
    float bumpStop; // Offset: 0x1c
    BezierCurve compressionForceCurve; // Offset: 0x20
};

// Original name: SVehicleAfterburnerParams
// Size: 0x2c8
// VTable: 0x1499ce188
struct SVehicleAfterburnerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float preDelayTime; // Offset: 0x8
    float rampUpTime; // Offset: 0xc
    float rampDownTime; // Offset: 0x10
    float thresholdRatio; // Offset: 0x14
    float capacity; // Offset: 0x18
    float costPerSec; // Offset: 0x1c
    BezierCurve assignmentCostModifier; // Offset: 0x20
    float regenPerSec; // Offset: 0xb0
    uint8_t _pad_1[0x4]; // Offset: 0xb4
    BezierCurve assignmentRegenModifier; // Offset: 0xb8
    float regenDelayAfterUse; // Offset: 0x148
    uint8_t _pad_2[0x4]; // Offset: 0x14c
    Vec3 linearAccelMultiplierPositive; // Offset: 0x150
    Vec3 linearAccelMultiplierNegative; // Offset: 0x168
    BezierCurve assignmentModifierLin; // Offset: 0x180
    Vec3 angularAccelMultiplier; // Offset: 0x210
    BezierCurve assignmentModifierAng; // Offset: 0x228
    bool allowTriggerDuringRampdown; // Offset: 0x2b8
    bool enableAntiSpam; // Offset: 0x2b9
    bool startAtFullCapacity; // Offset: 0x2ba
    uint8_t _pad_3[0xd]; // Offset: 0x2bb
};

// Original name: SInputDeflectionTimeParams
// Size: 0xa0
// VTable: 0x149a64770
struct SInputDeflectionTimeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minDeflectionTime; // Offset: 0x8
    float maxDeflectionTime; // Offset: 0xc
    BezierCurve penaltyMapping; // Offset: 0x10
};

// Original name: ActorLookAheadRoll
// Size: 0xa8
// VTable: 0x149a64378
struct ActorLookAheadRoll {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float inputThreshold; // Offset: 0x8
    float outputMaxRollAngle; // Offset: 0xc
    BezierCurve angleMap; // Offset: 0x10
    bool enabled; // Offset: 0xa0
    uint8_t _pad_1[0x7]; // Offset: 0xa1
};

// Original name: GlobalGasCloudVDB_GameplayParams
// Size: 0xa8
// VTable: 0x1499cc998
struct GlobalGasCloudVDB_GameplayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range opticalDensityRange; // Offset: 0x8
    BezierCurve gameplayDensityCurve; // Offset: 0x18
};

// Original name: SJumpTunnelEllipticalParams
// Size: 0x140
// VTable: 0x149a14170
struct SJumpTunnelEllipticalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minRadius; // Offset: 0x8
    float maxRadius; // Offset: 0xc
    BezierCurve radiusMultiplier; // Offset: 0x10
    float minAspectRatio; // Offset: 0xa0
    float maxAspectRatio; // Offset: 0xa4
    BezierCurve aspectRatioMultiplier; // Offset: 0xa8
    float chanceToFollowCurvature; // Offset: 0x138
    uint8_t _pad_1[0x4]; // Offset: 0x13c
};

// Original name: STurretESP
// Size: 0xc0
// VTable: 0x149a5af08
struct STurretESP {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve triggerZoneRampInCurve; // Offset: 0x8
    float maxTrackingStrength; // Offset: 0x98
    float distanceFalloffStart; // Offset: 0x9c
    float distanceFalloffEnd; // Offset: 0xa0
    float outerZoneDeg; // Offset: 0xa4
    float innerZoneRatio; // Offset: 0xa8
    float adsZoneMinSizeDeg; // Offset: 0xac
    float inputScalerMin; // Offset: 0xb0
    float inputScalerMax; // Offset: 0xb4
    bool allowWithRelativeMouseModes; // Offset: 0xb8
    uint8_t _pad_1[0x7]; // Offset: 0xb9
};

// Original name: AIPerceptionProfile
// Size: 0x8f0
// VTable: 0x149a023a8
struct AIPerceptionProfile {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AIPerceptionMeterThresholds perceptionMeterThresholds; // Offset: 0x8
    AIPerceptionMeterThresholds perceptionMeterThresholdsforThreatened; // Offset: 0x20
    BezierCurve hostileTargetDistanceCurve; // Offset: 0x38
    BezierCurve neutralTargetDistanceCurve; // Offset: 0xc8
    BezierCurve bulletHitAudioIntensityCurve; // Offset: 0x158
    BezierCurve bulletWhizAudioIntensityCurve; // Offset: 0x1e8
    BezierCurve weaponAudioIntensityCurve; // Offset: 0x278
    BezierCurve movementAudioIntensityCurve; // Offset: 0x308
    BezierCurve explosionAudioIntensityCurve; // Offset: 0x398
    BezierCurve collisionAudioIntensityCurve; // Offset: 0x428
    BezierCurve grenadeAudioIntensityCurve; // Offset: 0x4b8
    BezierCurve ragdollAudioIntensityCurve; // Offset: 0x548
    BezierCurve takedownAudioIntensityCurve; // Offset: 0x5d8
    BezierCurve vehicleAudioIntensityCurve; // Offset: 0x668
    BezierCurve lightIntensityCurve; // Offset: 0x6f8
    BezierCurve customAudioIntensityCurve; // Offset: 0x788
    float vehicleMeterCap; // Offset: 0x818
    float bulletHitMeterCap; // Offset: 0x81c
    float bulletWhizMeterCap; // Offset: 0x820
    float weaponMeterCap; // Offset: 0x824
    float movementMeterCap; // Offset: 0x828
    float explosionMeterCap; // Offset: 0x82c
    float collisionMeterCap; // Offset: 0x830
    float grenadeMeterCap; // Offset: 0x834
    float ragdollMeterCap; // Offset: 0x838
    float takedownMeterCap; // Offset: 0x83c
    float customMeterCap; // Offset: 0x840
    float audioFillMeterThreshold; // Offset: 0x844
    float angleToTargetScale; // Offset: 0x848
    float lowStanceScale; // Offset: 0x84c
    float sixthSenseScale; // Offset: 0x850
    uint8_t _pad_1[0x4]; // Offset: 0x854
    BezierCurve disguisedScaleCurve; // Offset: 0x858
    float decreaseRatePerSecond; // Offset: 0x8e8
    int32_t disruptionReactionTriggerThreshold; // Offset: 0x8ec
};

// Original name: SWearAccumulatorParams
// Size: 0x130
// VTable: 0x1499d7998
struct SWearAccumulatorParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float InitialAccumulationRatio; // Offset: 0x8
    bool AccumulateWhenUnstreamed; // Offset: 0xc
    bool AccumulateOnlyAfterTractorBeam; // Offset: 0xd
    bool AccumulateOnlyWhenAttached; // Offset: 0xe
    bool StopAccumulationWhenAttached; // Offset: 0xf
    float AccumulationEventThreshold; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    CryStringT* PortTags; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* RequiredPortTags; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    float MaxLifetimeHours; // Offset: 0x38
    bool UseAsTimer; // Offset: 0x3c
    uint8_t _pad_4[0x3]; // Offset: 0x3d
    float InitialAgeRatio; // Offset: 0x40
    float InitialUsageRatio; // Offset: 0x44
    float BasePowerMultiplier; // Offset: 0x48
    float DrawPowerMultiplier; // Offset: 0x4c
    float AtmosphereMultiplier; // Offset: 0x50
    uint8_t _pad_5[0x4]; // Offset: 0x54
    HeatDegradation HeatMultipliers; // Offset: 0x58
    float DamageConversionRate; // Offset: 0x68
    uint8_t _pad_6[0x4]; // Offset: 0x6c
    BezierCurve EffectCurve; // Offset: 0x70
    uint8_t degradeFromParentParams[0x10]; // Opaque struct field (type resolution failed) // Offset: 0x100
    AudioRtpc DegradationPercentageRTPC; // Offset: 0x110
};

// Original name: BuildingBlocks_TimingFunctionCustomCurve
// Size: 0x98
// VTable: 0x14998d180
struct BuildingBlocks_TimingFunctionCustomCurve {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve curve; // Offset: 0x8
};

// Original name: ProcBreathingCurve
// Size: 0x98
// VTable: 0x149a6c4b0
struct ProcBreathingCurve {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve curve; // Offset: 0x8
};

// Original name: ESPParams
// Size: 0xd0
// VTable: 0x149a1bcd0
struct ESPParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve triggerZoneRampInCurve; // Offset: 0x8
    float trackingStrength; // Offset: 0x98
    float distanceFalloffStart; // Offset: 0x9c
    float distanceFalloffEnd; // Offset: 0xa0
    float outerZoneDeg; // Offset: 0xa4
    float innerZoneRatio; // Offset: 0xa8
    float adsZoneMinSizeDeg; // Offset: 0xac
    float inputDisengageCurve; // Offset: 0xb0
    float directionSimilaritySmoothSpeed; // Offset: 0xb4
    float assistRelaxSpeed; // Offset: 0xb8
    float alignmentAngleCurve; // Offset: 0xbc
    float dampeningMin; // Offset: 0xc0
    float dampeningMax; // Offset: 0xc4
    bool allowPulling; // Offset: 0xc8
    bool allowWithRelativeMouseModes; // Offset: 0xc9
    uint8_t _pad_1[0x6]; // Offset: 0xca
};

// Original name: BezierModifierInterpolator
// Size: 0xa0
// VTable: 0x1499f69d0
struct BezierModifierInterpolator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float startTime; // Offset: 0x8
    float duration; // Offset: 0xc
    BezierCurve curve; // Offset: 0x10
};

// Original name: SEntityEffectSystem_PatternModifier
// Size: 0xa8
// VTable: 0x149999bc8
struct SEntityEffectSystem_PatternModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float startDelay; // Offset: 0x8
    float maximumValue; // Offset: 0xc
    float duration; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    BezierCurve patternCurve; // Offset: 0x18
};

// Original name: SActorForceReactionCurve
// Size: 0xa8
// VTable: 0x149a4b9e8
struct SActorForceReactionCurve {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* curveName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BezierCurve curve; // Offset: 0x18
};

// Original name: UIDataBankDisplay3DInterpolateParams
// Size: 0xa8
// VTable: 0x149aa9e50
struct UIDataBankDisplay3DInterpolateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float openDuration; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    BezierCurve openCurve; // Offset: 0x10
    float staggeredDelay; // Offset: 0xa0
    uint8_t _pad_2[0x4]; // Offset: 0xa4
};

// Original name: ActorGForceHeadBob
// Size: 0x1b0
// VTable: 0x149a18a40
struct ActorGForceHeadBob {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 maxGforce; // Offset: 0x8
    Vec3 undampedFrequencyTranslation; // Offset: 0x20
    Vec3 dampingRatioTranslation; // Offset: 0x38
    Vec3 maxHeadTranslation; // Offset: 0x50
    float translationSmoothing; // Offset: 0x68
    uint8_t _pad_1[0x4]; // Offset: 0x6c
    Vec3 undampedFrequencyRotation; // Offset: 0x70
    Vec3 dampingRatioRotation; // Offset: 0x88
    Ang3 maxHeadRotation; // Offset: 0xa0
    Ang3 maxHeadRotationMagLaunch; // Offset: 0xb8
    float rotationSmoothing; // Offset: 0xd0
    uint8_t _pad_2[0x4]; // Offset: 0xd4
    Vec3 headTranslationLimitsPositive; // Offset: 0xd8
    Vec3 headTranslationLimitsNegative; // Offset: 0xf0
    float rotationalAccelerationInputModifier; // Offset: 0x108
    float boostZoomAngleOuter; // Offset: 0x10c
    float boostZoomAngleInner; // Offset: 0x110
    float boostZoomMaxG; // Offset: 0x114
    BezierCurve boostZoomGMapping; // Offset: 0x118
    float jumpDriveFlightModifierTranslation; // Offset: 0x1a8
    float jumpDriveFlightModifierRotation; // Offset: 0x1ac
};

// Original name: DistressCommsSignalComponentParams
// Size: 0x1d0
// VTable: 0x149a4e9a8
struct DistressCommsSignalComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float signalRadius; // Offset: 0x18
    float detectionRadius; // Offset: 0x1c
    float stopBroadcastRadius; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    Vec3 detectionOffset; // Offset: 0x28
    BezierCurve distanceStrengthCurve; // Offset: 0x40
    BezierCurve directionStrengthCurve; // Offset: 0xd0
    float maxDirectionScale; // Offset: 0x160
    int32_t commsCallPriority; // Offset: 0x164
    GlobalResourceAudio startLoopingSound; // Offset: 0x168
    GlobalResourceAudio stopLoopingSound; // Offset: 0x188
    AudioRtpc loopingSoundSignalStrengthRTPC; // Offset: 0x1a8
    bool useCommsSignatureStrength; // Offset: 0x1c8
    bool applyDistanceScaleToStrength; // Offset: 0x1c9
    bool applyDirectionScaleToStrength; // Offset: 0x1ca
    uint8_t _pad_2[0x5]; // Offset: 0x1cb
};

// Original name: AudioBreathInterrupt
// Size: 0xd8
// VTable: 0x149a6c350
struct AudioBreathInterrupt {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* description; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BezierCurve curve; // Offset: 0x18
    ARDataType breathEvent; // Offset: 0xa8
    uint8_t _pad_2[0x4]; // Offset: 0xac
    GlobalResourceAudio customEvent; // Offset: 0xb0
    bool triggerCustomEventOnly; // Offset: 0xd0
    uint8_t _pad_3[0x7]; // Offset: 0xd1
};

// Original name: SCurve
// Size: 0x98
// VTable: 0x149a5de40
struct SCurve {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve curve; // Offset: 0x8
};

// Original name: SBezierCurveRecord
// Size: 0x98
// VTable: 0x1499adb00
struct SBezierCurveRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve curve; // Offset: 0x8
};

// Original name: SCBoatMovementParams
// Size: 0x290
// VTable: 0x149a2eac8
struct SCBoatMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCBoatMovementInputParams inputParams; // Offset: 0x8
    SCBoatMovementBuoyancyParams buoyancyParams; // Offset: 0x18
    float minimumSubmersionDepth; // Offset: 0x30
    float maxSpeed; // Offset: 0x34
    float maxSpeedBoost; // Offset: 0x38
    float maxSpeedReverse; // Offset: 0x3c
    float propellerAcceleration; // Offset: 0x40
    float propellerAccelerationBoost; // Offset: 0x44
    float propellerAccelerationReverse; // Offset: 0x48
    float brakeAccelerationMultiplier; // Offset: 0x4c
    Vec3 propellerPivot; // Offset: 0x50
    float propellerAccelerationAngle; // Offset: 0x68
    float propellerTurningModifierAngleMax; // Offset: 0x6c
    float propellerTurningModifier; // Offset: 0x70
    uint8_t _pad_1[0x4]; // Offset: 0x74
    Vec3 rudderPivot; // Offset: 0x78
    float maxRudderAngle; // Offset: 0x90
    float maxRudderAngleBoost; // Offset: 0x94
    float rudderTurnRate; // Offset: 0x98
    float rudderForceMultiplier; // Offset: 0x9c
    float minTurningPower; // Offset: 0xa0
    float rudderForceRollDamping; // Offset: 0xa4
    float counterSteeringMultiplier; // Offset: 0xa8
    uint8_t _pad_2[0x4]; // Offset: 0xac
    BezierCurve rudderForceBySpeedRatio; // Offset: 0xb0
    float hydroDynamicScalar; // Offset: 0x140
    float hydroDynamicAngle; // Offset: 0x144
    float hydroDynamicRollDamping; // Offset: 0x148
    uint8_t _pad_3[0x4]; // Offset: 0x14c
    Vec3 hydroDynamicPivot; // Offset: 0x150
    float maxDriftAngle; // Offset: 0x168
    uint8_t _pad_4[0x4]; // Offset: 0x16c
    BezierCurve hydroDynamicMomentByDriftAngle; // Offset: 0x170
    BezierCurve hydroDynamicMomentBySpeedRatio; // Offset: 0x200
};

// Original name: SXYZCurves
// Size: 0x1b8
// VTable: 0x149aabd00
struct SXYZCurves {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve xCurve; // Offset: 0x8
    BezierCurve yCurve; // Offset: 0x98
    BezierCurve zCurve; // Offset: 0x128
};

// Original name: AudioValueOutputBehaviourCamera
// Size: 0x1a0
// VTable: 0x149a95b28
struct AudioValueOutputBehaviourCamera {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool enableShake; // Offset: 0x18
    uint8_t _pad_2[0x3]; // Offset: 0x19
    float localModifier; // Offset: 0x1c
    Ang3 offsetAngle; // Offset: 0x20
    ARDataType offsetAngleInput; // Offset: 0x38
    uint8_t _pad_3[0x4]; // Offset: 0x3c
    BezierCurve offsetAngleModifier; // Offset: 0x40
    bool offsetAngleModifierUse; // Offset: 0xd0
    uint8_t _pad_4[0x7]; // Offset: 0xd1
    Vec3 offsetPosition; // Offset: 0xd8
    ARDataType offsetPositionInput; // Offset: 0xf0
    uint8_t _pad_5[0x4]; // Offset: 0xf4
    BezierCurve offsetPositionModifier; // Offset: 0xf8
    bool offsetPositionModifierUse; // Offset: 0x188
    uint8_t _pad_6[0x3]; // Offset: 0x189
    float shakesPerSecond; // Offset: 0x18c
    float translationNoise; // Offset: 0x190
    float rotationNoise; // Offset: 0x194
    float smoothFactor; // Offset: 0x198
    uint8_t _pad_7[0x4]; // Offset: 0x19c
};

// Original name: ToxiInputModifierDistortion
// Size: 0x140
// VTable: 0x149a64b78
struct ToxiInputModifierDistortion {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    BezierCurve amplitudeInterpolant; // Offset: 0x10
    BezierCurve axesInputScale; // Offset: 0xa0
    float minAmplitude; // Offset: 0x130
    float maxAmplitude; // Offset: 0x134
    float frequency; // Offset: 0x138
    uint8_t _pad_2[0x4]; // Offset: 0x13c
};

// Original name: RadiationBehavior_AsteroidDesignCurveSurfaceRadiationParams
// Size: 0xb0
// VTable: 0x14997ae88
struct RadiationBehavior_AsteroidDesignCurveSurfaceRadiationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float scaleOnLargestAsteroid; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Range radiusRange; // Offset: 0x10
    BezierCurve curve; // Offset: 0x20
};

// Original name: ItemResourceSignatureEntry
// Size: 0x20
// VTable: 0x1499a7f20
struct ItemResourceSignatureEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float nominalSignature; // Offset: 0x8
    float decayRate; // Offset: 0xc
    BezierCurve functionalityCurve; // Offset: 0x10
};

// Original name: HoverTilting
// Size: 0xa8
// VTable: 0x149a05258
struct HoverTilting {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float strafeBankFactor; // Offset: 0x8
    float forwardBackTiltFactor; // Offset: 0xc
    float turnBankFactor; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    BezierCurve bankPerSpeedCurve; // Offset: 0x18
};

// Original name: STargetSelectorHudParams
// Size: 0x138
// VTable: 0x149a56168
struct STargetSelectorHudParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool calculateLockedTargetBracket; // Offset: 0x8
    bool calculateSelectedTargetBracket; // Offset: 0x9
    uint8_t _pad_1[0x2]; // Offset: 0xa
    float hudTargetPointerAngleOffset; // Offset: 0xc
    float hudTargetPointerHeadFollowAngleInner; // Offset: 0x10
    float hudTargetPointerHeadFollowAngleOuter; // Offset: 0x14
    float hudTargetPointerHeadFollowSwapTime; // Offset: 0x18
    float relativeAttitudePointerPosition; // Offset: 0x1c
    BezierCurve targetPointerAlpha; // Offset: 0x20
    STargetSelectorColorHighlighting outlineSubtargetsLocked; // Offset: 0xb0
    STargetSelectorColorHighlighting outlineSubtargetsAvailable; // Offset: 0xf0
    uint8_t _pad_2[0x8]; // Offset: 0x130
};

// Original name: GlobalJumpPointOpeningParams
// Size: 0xc8
// VTable: 0x149a12c20
struct GlobalJumpPointOpeningParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float projectileTime; // Offset: 0x8
    float tuningCollapseTime; // Offset: 0xc
    float openEffectStartDelay; // Offset: 0x10
    float revealTime; // Offset: 0x14
    BezierCurve revealAnimCurve; // Offset: 0x18
    float revealFadeDelay; // Offset: 0xa8
    float openingTime; // Offset: 0xac
    float openingEndDelay; // Offset: 0xb0
    uint8_t _pad_1[0x4]; // Offset: 0xb4
    Range apertureTimeScaleRange; // Offset: 0xb8
};

// Original name: SYawPitchRollCurves
// Size: 0x1b8
// VTable: 0x149a5e990
struct SYawPitchRollCurves {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve yawCurve; // Offset: 0x8
    BezierCurve pitchCurve; // Offset: 0x98
    BezierCurve rollCurve; // Offset: 0x128
};

// Original name: SJumpDriveFlightSteeringParams
// Size: 0x140
// VTable: 0x1499f58c8
struct SJumpDriveFlightSteeringParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxAcceleration; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    BezierCurve modifierCurve; // Offset: 0x10
    float maxAccelerationBoost; // Offset: 0xa0
    uint8_t _pad_2[0x4]; // Offset: 0xa4
    BezierCurve modifierCurveBoost; // Offset: 0xa8
    bool allowUsingBoost; // Offset: 0x138
    bool useSteeringParams; // Offset: 0x139
    uint8_t _pad_3[0x6]; // Offset: 0x13a
};

// Original name: BezierDamage
// Size: 0x98
// VTable: 0x1499e18d0
struct BezierDamage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve curve; // Offset: 0x8
};

// Original name: JumpDriveVibrationParams
// Size: 0x388
// VTable: 0x149a15460
struct JumpDriveVibrationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve tuningCurve; // Offset: 0x8
    BezierCurve distortionCurve; // Offset: 0x98
    BezierCurve turbulenceCurve; // Offset: 0x128
    BezierCurve gustCurve; // Offset: 0x1b8
    BezierCurve boostCurve; // Offset: 0x248
    float postExitStrength; // Offset: 0x2d8
    float postFailStrength; // Offset: 0x2dc
    float onStartedEnteringTunnelStrength; // Offset: 0x2e0
    float enteredTunnelStrength; // Offset: 0x2e4
    bool enablePostTunedVibrations; // Offset: 0x2e8
    uint8_t _pad_1[0x3]; // Offset: 0x2e9
    float jumpDriveNormalSuppressionIncreaseTime; // Offset: 0x2ec
    float jumpDriveNormalSuppressionDecayTime; // Offset: 0x2f0
    uint8_t _pad_2[0x4]; // Offset: 0x2f4
    BezierCurve jumpDriveNormalSuppressionCurve; // Offset: 0x2f8
};

// Original name: HoverHandling
// Size: 0x140
// VTable: 0x149a05478
struct HoverHandling {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float turnFriction; // Offset: 0x8
    float selfRightingAccelBoost; // Offset: 0xc
    float hoverMaxSpeed; // Offset: 0x10
    float airControlMultiplier; // Offset: 0x14
    float antiFallMultiplier; // Offset: 0x18
    float lateralStrafeMultiplier; // Offset: 0x1c
    BezierCurve maxSpeedMultiplierByHeight; // Offset: 0x20
    BezierCurve turnFrictionMultiplierByHeight; // Offset: 0xb0
};

// Original name: SCharacterEyeValidationParams
// Size: 0x250
// VTable: 0x149a0d518
struct SCharacterEyeValidationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minHue; // Offset: 0x8
    float maxHue; // Offset: 0xc
    BezierCurve sMaxCurve; // Offset: 0x10
    BezierCurve sMinCurve; // Offset: 0xa0
    BezierCurve vMaxCurve; // Offset: 0x130
    BezierCurve vMinCurve; // Offset: 0x1c0
};

// Original name: BuildingBlocks_BindingsNumberCurve
// Size: 0xf0
// VTable: 0x149988f18
struct BuildingBlocks_BindingsNumberCurve {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BezierCurve curve; // Offset: 0x50
    BuildingBlocks_BindingsNumberBase input; // Offset: 0xe0
};

// Original name: STurretHealthModifierDef
// Size: 0x98
// VTable: 0x149a5a830
struct STurretHealthModifierDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve damageMovementModifier; // Offset: 0x8
};

// Original name: SeatAdsDef
// Size: 0xf0
// VTable: 0x1499cde78
struct SeatAdsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float zoomSpeed; // Offset: 0x8
    float minFovWithTarget; // Offset: 0xc
    float minFovWithoutTarget; // Offset: 0x10
    float minFovStableZoom; // Offset: 0x14
    float crosshairAngle; // Offset: 0x18
    float maxPitch; // Offset: 0x1c
    float maxYaw; // Offset: 0x20
    float timeToKeepZoomAfterTargetLoss; // Offset: 0x24
    bool trackSubtargets; // Offset: 0x28
    bool useScalingOutsideAds; // Offset: 0x29
    uint8_t _pad_1[0x6]; // Offset: 0x2a
    DynArray_bool* allowedForOperatorMode; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x38
    BezierCurve recoilFovCurve; // Offset: 0x60
};

// Original name: SCItemDisplayScreenUISourceParams
// Size: 0xd8
// VTable: 0x149a08930
struct SCItemDisplayScreenUISourceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType UIModel; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    EntityReferenceDef sourceProvider; // Offset: 0x10
    ARDataType overrideState; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    BezierCurve switchStateSpline; // Offset: 0x30
    SCItemDisplayScreenPreset screenPreset; // Offset: 0xc0
};

// Original name: CameraTransitionInterpolationCurveRecord
// Size: 0x98
// VTable: 0x149a93760
struct CameraTransitionInterpolationCurveRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve curve; // Offset: 0x8
};

// Original name: SAmplitudeFreqencyDecayCurves
// Size: 0x128
// VTable: 0x149a5f208
struct SAmplitudeFreqencyDecayCurves {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BezierCurve frequencyDecayCurve; // Offset: 0x8
    BezierCurve amplitudeDecayCurve; // Offset: 0x98
};

// Original name: ControlHint_DisplayInfoSet
// Size: 0x98
// VTable: 0x149a67778
struct ControlHint_DisplayInfoSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ControlHints_HintDisplayInfoAction overrideHint; // Offset: 0x8
    ControlHints_HintDisplayInfoAction gamepadHint; // Offset: 0x70
    ControlHints_HintDisplayInfoAction joystickHint; // Offset: 0x80
    bool alwaysShowIfBound; // Offset: 0x90
    uint8_t _pad_1[0x7]; // Offset: 0x91
};

// Original name: DialogueBundleEmbedded
// Size: 0x50
// VTable: 0x149a8cdc0
struct DialogueBundleEmbedded {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool usePooling; // Offset: 0x8
    uint8_t _pad_1[0x17]; // Offset: 0x9
    DynArray_DialogueBundleEntry* dialogueEntries; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: DialogueBundleWeightedEmbedded
// Size: 0x50
// VTable: 0x149a8ce80
struct DialogueBundleWeightedEmbedded {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool usePooling; // Offset: 0x8
    uint8_t _pad_1[0x17]; // Offset: 0x9
    DynArray_WeightedDialogueBundleEntry* dialogueEntries; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: DynArray_VehicleCareer
// Generated DynArray for base type: VehicleCareer
// Size: 0x8
struct DynArray_VehicleCareer {
    VehicleCareer* m_data; // Offset: 0x0
};

// Original name: DynArray_ActorStatData
// Generated DynArray for base type: ActorStatData
// Size: 0x8
struct DynArray_ActorStatData {
    ActorStatData* m_data; // Offset: 0x0
};

// Original name: SReputationScopeParams
// Size: 0x98
// VTable: 0x149a95f90
struct SReputationScopeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* scopeName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CLocIdentifier* displayName; // Offset: 0x18
    CLocIdentifier* description; // Offset: 0x20
    CryStringT* icon; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    SReputationStandingMapParams standingMap; // Offset: 0x38
    uint8_t _pad_3[0x18]; // Offset: 0x80
};

// Original name: DynArray_RadarDeltaSignatureDetectionParams
// Generated DynArray for base type: RadarDeltaSignatureDetectionParams
// Size: 0x8
struct DynArray_RadarDeltaSignatureDetectionParams {
    RadarDeltaSignatureDetectionParams* m_data; // Offset: 0x0
};

// Original name: SignatureSystemGlobalParams
// Size: 0xf8
// VTable: 0x1499c4630
struct SignatureSystemGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float globalDBFactor; // Offset: 0x8
    float globalAmbientIRFactor; // Offset: 0xc
    float nearbyInfluenceThresholdFactor; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    SignatureUIGlobalParams signatureUIParams; // Offset: 0x18
    ActorSignatureMultiplierGlobalParams actorMultiplierParams; // Offset: 0x38
    CrossSectionGlobalParams crossSectionParams; // Offset: 0x50
    DynArray_SignatureTypeGlobalParams* signatureTypeParams; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x80
    MasterModeSwitchDeltaSignatureTypes masterModeDeltaSignatureType; // Offset: 0xa8
    RadarDeltaSignatureEntry scanWaveTriggeredDeltaSignatureType; // Offset: 0xe0
};

// Original name: RadarDeltaSignatureDefinition
// Size: 0x38
// VTable: 0x1499c4010
struct RadarDeltaSignatureDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_RadarDeltaSignatureEntry* types; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_ItemAwardWeightings
// Generated DynArray for base type: ItemAwardWeightings
// Size: 0x8
struct DynArray_ItemAwardWeightings {
    ItemAwardWeightings* m_data; // Offset: 0x0
};

// Original name: DynArray_S42CommendationRulesEntry
// Generated DynArray for base type: S42CommendationRulesEntry
// Size: 0x8
struct DynArray_S42CommendationRulesEntry {
    S42CommendationRulesEntry* m_data; // Offset: 0x0
};

// Original name: UIElement
// Size: 0x58
// VTable: 0x1499b4570
struct UIElement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* sourceFile; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    UIElementSoundsRecord soundsRecord; // Offset: 0x18
    CryStringT* fontFile; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
    ARDataType alignMode; // Offset: 0x40
    bool alignScale; // Offset: 0x44
    bool alignMax; // Offset: 0x45
    uint8_t _pad_3[0x2]; // Offset: 0x46
    int32_t layer; // Offset: 0x48
    bool skipFirstFrameInit; // Offset: 0x4c
    bool keyEvents; // Offset: 0x4d
    bool eventsExclusive; // Offset: 0x4e
    bool noDepthTest; // Offset: 0x4f
    bool forceNoUnload; // Offset: 0x50
    bool noPostProcessing; // Offset: 0x51
    uint8_t _pad_4[0x6]; // Offset: 0x52
};

// Original name: BuildingBlocks_StaticVariableArray
// Size: 0x50
// VTable: 0x14998a7e0
struct BuildingBlocks_StaticVariableArray {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    BuildingBlocks_StaticArrayEntry value; // Offset: 0x18
};

// Original name: DynArray_BuildingBlocks_StaticArrayEntry
// Generated DynArray for base type: BuildingBlocks_StaticArrayEntry
// Size: 0x8
struct DynArray_BuildingBlocks_StaticArrayEntry {
    BuildingBlocks_StaticArrayEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_FoleyLoop
// Generated DynArray for base type: FoleyLoop
// Size: 0x8
struct DynArray_FoleyLoop {
    FoleyLoop* m_data; // Offset: 0x0
};

// Original name: DynArray_FoleyOneShot
// Generated DynArray for base type: FoleyOneShot
// Size: 0x8
struct DynArray_FoleyOneShot {
    FoleyOneShot* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemPriorityGroupParam
// Generated DynArray for base type: SCItemPriorityGroupParam
// Size: 0x8
struct DynArray_SCItemPriorityGroupParam {
    SCItemPriorityGroupParam* m_data; // Offset: 0x0
};

// Original name: BlobVFXSharedParams
// Size: 0x40
// VTable: 0x1499c4db8
struct BlobVFXSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool snapBlobTimescaleToLifeTime; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_BlobVFXDistanceParams* blobVFXs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: PingVFXSharedParams
// Size: 0x38
// VTable: 0x1499c5120
struct PingVFXSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PingWaveVFXParams quickPingWaveVFXParams; // Offset: 0x8
    PingWaveVFXParams chargedPingWaveVFXParams; // Offset: 0x18
    PingWaveVFXParams blockedPingWaveVFXParams; // Offset: 0x28
};

// Original name: DynArray_BuildingBlocks_StyleConditionList
// Generated DynArray for base type: BuildingBlocks_StyleConditionList
// Size: 0x8
struct DynArray_BuildingBlocks_StyleConditionList {
    BuildingBlocks_StyleConditionList* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_Keyframe
// Size: 0x40
// VTable: 0x149986668
struct BuildingBlocks_Keyframe {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float percent; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_BuildingBlocks_KeyframeModifierData* modifiers; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: EATransportControllerComponentParams
// Size: 0x58
// VTable: 0x149a28830
struct EATransportControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t activePhase; // Offset: 0x18
    float spawnDelay; // Offset: 0x1c
    bool onlyTransferActiveSpawns; // Offset: 0x20
    bool replaceSpawningTransport; // Offset: 0x21
    uint8_t _pad_1[0x6]; // Offset: 0x22
    DynArray_EATransportTransitionGroupParams* transitionGroups; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: DynArray_LightningBehavior_Effect
// Generated DynArray for base type: LightningBehavior_Effect
// Size: 0x8
struct DynArray_LightningBehavior_Effect {
    LightningBehavior_Effect* m_data; // Offset: 0x0
};

// Original name: WorldDisplayEnvironment
// Size: 0x38
// VTable: 0x149a30950
struct WorldDisplayEnvironment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_WorldDisplayEnvironmentBase* environments; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: WeaponProceduralClipsSetUp
// Size: 0x78
// VTable: 0x149aac1f0
struct WeaponProceduralClipsSetUp {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    DynArray_WeaponProceduralClip* weaponProceduralClips; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: DamageMapGlobalParams
// Size: 0x130
// VTable: 0x1499375a8
struct DamageMapGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageMapDamageForm impact; // Offset: 0x8
    DamageMapDamageForm squib; // Offset: 0x90
    DamageMapExplosionParams explosions; // Offset: 0x118
    float impactSizeExponent; // Offset: 0x128
    uint8_t _pad_1[0x4]; // Offset: 0x12c
};

// Original name: DynArray_RaSTaRLibraryCategory
// Generated DynArray for base type: RaSTaRLibraryCategory
// Size: 0x8
struct DynArray_RaSTaRLibraryCategory {
    RaSTaRLibraryCategory* m_data; // Offset: 0x0
};

// Original name: DynArray_DialogueContent
// Generated DynArray for base type: DialogueContent
// Size: 0x8
struct DynArray_DialogueContent {
    DialogueContent* m_data; // Offset: 0x0
};

// Original name: PlayerGroupManagerNotificationsParams
// Size: 0x620
// VTable: 0x149aa25b0
struct PlayerGroupManagerNotificationsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlayerGroupManagerNotificationParams inviteSent; // Offset: 0x8
    PlayerGroupManagerNotificationParams inviteReceived; // Offset: 0x70
    PlayerGroupManagerNotificationParams memberJoined; // Offset: 0xd8
    PlayerGroupManagerNotificationParams inviteDeclined; // Offset: 0x140
    PlayerGroupManagerNotificationParams localPlayerJoined; // Offset: 0x1a8
    PlayerGroupManagerNotificationParams localPlayerJoinedAuto; // Offset: 0x210
    PlayerGroupManagerNotificationParams localPlayerLeft; // Offset: 0x278
    PlayerGroupManagerNotificationParams localPlayerKicked; // Offset: 0x2e0
    PlayerGroupManagerNotificationParams groupDisbanded; // Offset: 0x348
    PlayerGroupManagerNotificationParams groupCreated; // Offset: 0x3b0
    PlayerGroupManagerNotificationParams leaderChanged; // Offset: 0x418
    PlayerGroupManagerNotificationParams memberLeft; // Offset: 0x480
    PlayerGroupManagerNotificationParams memberKicked; // Offset: 0x4e8
    PlayerGroupManagerNotificationParams inviteTimeout; // Offset: 0x550
    PlayerGroupManagerNotificationParams invitationFailed; // Offset: 0x5b8
};

// Original name: FriendManagerGlobalParams
// Size: 0xa0
// VTable: 0x149aa04d0
struct FriendManagerGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FriendManagerNotificationsParams notificationsParams; // Offset: 0x8
};

// Original name: DynArray_SCharacterCustomizerSkinBaseMaterialList
// Generated DynArray for base type: SCharacterCustomizerSkinBaseMaterialList
// Size: 0x8
struct DynArray_SCharacterCustomizerSkinBaseMaterialList {
    SCharacterCustomizerSkinBaseMaterialList* m_data; // Offset: 0x0
};

// Original name: DynArray_SCharacterCustomizerWildlineCondition
// Generated DynArray for base type: SCharacterCustomizerWildlineCondition
// Size: 0x8
struct DynArray_SCharacterCustomizerWildlineCondition {
    SCharacterCustomizerWildlineCondition* m_data; // Offset: 0x0
};

// Original name: SEntityWheeledPhysicsComponentParams
// Size: 0x58
// VTable: 0x1499e78c0
struct SEntityWheeledPhysicsComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntityBasePhysicsControllerParams PhysType; // Offset: 0x18
    DynArray_SEntityPhysicsWheel* wheels; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: SActorProceduralHeadRecoilModifiers
// Size: 0x100
// VTable: 0x149a72148
struct SActorProceduralHeadRecoilModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float frequency; // Offset: 0x8
    float smoothFactor; // Offset: 0xc
    float frequencyNoiseFactor; // Offset: 0x10
    float maxDistance; // Offset: 0x14
    float phase; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 translation; // Offset: 0x20
    float translationNoise; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    Ang3 rotation; // Offset: 0x40
    float rotationNoise; // Offset: 0x58
    bool usePerlinNoise; // Offset: 0x5c
    uint8_t _pad_3[0x3]; // Offset: 0x5d
    float referenceSpeed; // Offset: 0x60
    float minSpeed; // Offset: 0x64
    float minScale; // Offset: 0x68
    float maxSpeed; // Offset: 0x6c
    float maxScale; // Offset: 0x70
    uint8_t _pad_4[0x4]; // Offset: 0x74
    SWeaponProceduralHeadRecoilCurveModifierDef curveRecoil; // Offset: 0x78
};

// Original name: SEffectParamSound
// Size: 0x110
// VTable: 0x14999b770
struct SEffectParamSound {
    uint8_t _pad_0[0x28]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    CryStringT* tag; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    CryStringT* Helper; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
    QuatT Offset; // Offset: 0x58
    bool IsLooped; // Offset: 0xb0
    bool Enabled; // Offset: 0xb1
    bool Prime; // Offset: 0xb2
    bool Kill; // Offset: 0xb3
    float Timer; // Offset: 0xb4
    int32_t RenderSlot; // Offset: 0xb8
    uint32_t ContextFlags; // Offset: 0xbc
    bool MultiPosition; // Offset: 0xc0
    uint8_t _pad_4[0x7]; // Offset: 0xc1
    Vec3 Axis; // Offset: 0xc8
    DynArray_SEffectInputParamsSound* InputVariables; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xe8
};

// Original name: DynArray_TimeToTakeOffMinOverrideByDockingClass
// Generated DynArray for base type: TimeToTakeOffMinOverrideByDockingClass
// Size: 0x8
struct DynArray_TimeToTakeOffMinOverrideByDockingClass {
    TimeToTakeOffMinOverrideByDockingClass* m_data; // Offset: 0x0
};

// Original name: DynArray_StayTimeMinOverrideByDockingClass
// Generated DynArray for base type: StayTimeMinOverrideByDockingClass
// Size: 0x8
struct DynArray_StayTimeMinOverrideByDockingClass {
    StayTimeMinOverrideByDockingClass* m_data; // Offset: 0x0
};

// Original name: HeadMotionConfig
// Size: 0x138
// VTable: 0x149a982d0
struct HeadMotionConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    HeadMotionShakeSettings settings; // Offset: 0x48
};

// Original name: DynArray_ActorCameraOffsetFiltered
// Generated DynArray for base type: ActorCameraOffsetFiltered
// Size: 0x8
struct DynArray_ActorCameraOffsetFiltered {
    ActorCameraOffsetFiltered* m_data; // Offset: 0x0
};

// Original name: SObservableComponentParams
// Size: 0xf8
// VTable: 0x149a01d48
struct SObservableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_ARDataType* perceptionTypes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_ARDataType* excludedSenses; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    DynArray_SObservablePointDef* observablePoints; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
    SObservablePointDef defaultEntityObservablePoint; // Offset: 0xa8
    SObservablePointDef defaultAimingObservablePoint; // Offset: 0xb8
    DynArray_IObservableExtender* observableExtensions; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xd0
};

// Original name: HandholdParams
// Size: 0xe0
// VTable: 0x149a03338
struct HandholdParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool startEnabled; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    QuatT transform; // Offset: 0x20
    HandholdGripType gripType; // Offset: 0x78
    AngYPR gripOrientation; // Offset: 0x90
    float gripSizeCm; // Offset: 0xa8
    float gripLengthCm; // Offset: 0xac
    DynArray_HandholdAttachSpotParams* attachSpots; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xb8
};

// Original name: DynArray_SeatUserActorCDIKConfig
// Generated DynArray for base type: SeatUserActorCDIKConfig
// Size: 0x8
struct DynArray_SeatUserActorCDIKConfig {
    SeatUserActorCDIKConfig* m_data; // Offset: 0x0
};

// Original name: DynArray_SAttachableObjectContainerData
// Generated DynArray for base type: SAttachableObjectContainerData
// Size: 0x8
struct DynArray_SAttachableObjectContainerData {
    SAttachableObjectContainerData* m_data; // Offset: 0x0
};

// Original name: DynArray_SVehicleObjectContainerParams
// Generated DynArray for base type: SVehicleObjectContainerParams
// Size: 0x8
struct DynArray_SVehicleObjectContainerParams {
    SVehicleObjectContainerParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCarryableIKInteraction
// Generated DynArray for base type: SCarryableIKInteraction
// Size: 0x8
struct DynArray_SCarryableIKInteraction {
    SCarryableIKInteraction* m_data; // Offset: 0x0
};

// Original name: SCItemSeatDashboardScreen
// Size: 0xd0
// VTable: 0x149a59560
struct SCItemSeatDashboardScreen {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* GeomName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* MaterialOverride; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    SCItemSeatDashboardScreenStyle Style; // Offset: 0x38
    SCItemSeatDashboardScreenPos Position; // Offset: 0x58
};

// Original name: QTERequestConfig
// Size: 0x60
// VTable: 0x149a65a50
struct QTERequestConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool blockActions; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    InputAction actionName; // Offset: 0x10
    int32_t totalPressNum; // Offset: 0x40
    float maxQTETime; // Offset: 0x44
    InputPromptConfig inputPromptConfig; // Offset: 0x48
};

// Original name: SCarryableGrip
// Size: 0x128
// VTable: 0x149a8e378
struct SCarryableGrip {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* carryStyleID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType canBeUsedBy; // Offset: 0x18
    ARDataType handMode; // Offset: 0x1c
    ARDataType gripAction; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    SGrip handGrip; // Offset: 0x28
    SGrip offHandGrip; // Offset: 0xd8
    SCarryAnimationParams animationParameters; // Offset: 0xe8
    SCarryParams carryParameters; // Offset: 0x110
};

// Original name: DynArray_VehicleLandingGear
// Generated DynArray for base type: VehicleLandingGear
// Size: 0x8
struct DynArray_VehicleLandingGear {
    VehicleLandingGear* m_data; // Offset: 0x0
};

// Original name: SEntityComponentDecalParams
// Size: 0x48
// VTable: 0x149a2d860
struct SEntityComponentDecalParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SDecalParams* decalParams; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SEffectParamParticle
// Size: 0x110
// VTable: 0x14999b710
struct SEffectParamParticle {
    uint8_t _pad_0[0x28]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x28
    uint8_t _pad_1[0x8]; // Offset: 0x30
    CryStringT* tag; // Offset: 0x38
    uint8_t _pad_2[0x8]; // Offset: 0x40
    CryStringT* Helper; // Offset: 0x48
    uint8_t _pad_3[0x8]; // Offset: 0x50
    QuatT Offset; // Offset: 0x58
    bool IsLooped; // Offset: 0xb0
    bool Enabled; // Offset: 0xb1
    bool Prime; // Offset: 0xb2
    bool Kill; // Offset: 0xb3
    float Timer; // Offset: 0xb4
    int32_t RenderSlot; // Offset: 0xb8
    uint32_t ContextFlags; // Offset: 0xbc
    bool MultiPosition; // Offset: 0xc0
    uint8_t _pad_4[0x7]; // Offset: 0xc1
    Vec3 Axis; // Offset: 0xc8
    DynArray_SEffectInputParamsParticle* InputVariables; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xe8
};

// Original name: DynArray_PlayerAnimatedInteractionFiltered
// Generated DynArray for base type: PlayerAnimatedInteractionFiltered
// Size: 0x8
struct DynArray_PlayerAnimatedInteractionFiltered {
    PlayerAnimatedInteractionFiltered* m_data; // Offset: 0x0
};

// Original name: SCItemShopPedestalParams
// Size: 0x50
// VTable: 0x1499ee4c8
struct SCItemShopPedestalParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* entityLinkName; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* itemPortName; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    int32_t itemPortIndex; // Offset: 0x38
    uint8_t _pad_3[0x4]; // Offset: 0x3c
    SItemShopARParams arParams; // Offset: 0x40
};

// Original name: SCItemMiningControllerParams
// Size: 0x78
// VTable: 0x149a7fc60
struct SCItemMiningControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    MiningControllerAudioParams audioParams; // Offset: 0x18
    MiningControllerGlobalParams globalParams; // Offset: 0x40
    bool forceCrosshairOnline; // Offset: 0x58
    uint8_t _pad_1[0x7]; // Offset: 0x59
    CryStringT* modifierPortTag; // Offset: 0x60
    uint8_t _pad_2[0x8]; // Offset: 0x68
    bool applyModifierPortTagOnStart; // Offset: 0x70
    uint8_t _pad_3[0x7]; // Offset: 0x71
};

// Original name: ProceduralAnimationSequence
// Size: 0xd0
// VTable: 0x149aa29d0
struct ProceduralAnimationSequence {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float duration; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    BezierCurve animationCurve; // Offset: 0x10
    DynArray_ProceduralAnimationBone* boneAnimations; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xa8
};

// Original name: SObjectiveMarkerLocationParams
// Size: 0x48
// VTable: 0x14996c730
struct SObjectiveMarkerLocationParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_ObjectiveMarkerLocation* locations; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: CommsNotificationStage
// Size: 0xb0
// VTable: 0x149974fb0
struct CommsNotificationStage {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CommsNotificationStageCamera camera; // Offset: 0x8
    CommsNotificationStageActorMark actorMark; // Offset: 0x48
    DynArray_CommsNotificationStageListItem* objects; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x88
};

// Original name: EAPickupParams
// Size: 0x130
// VTable: 0x149a27bc8
struct EAPickupParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType type_; /* type */ // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_GlobalResourceAudio* audioTriggers; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    CryStringT* geometryTag; // Offset: 0x50
    uint8_t _pad_3[0x8]; // Offset: 0x58
    EAPickupVehicleParams vehicleParams; // Offset: 0x60
    EAPickupFPSParams FPSParams; // Offset: 0xb0
    DynArray_EAPickupSpecialEventOverrideParams* specialEventParams; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x108
};

// Original name: SEntrancesDef
// Size: 0x68
// VTable: 0x149a83b30
struct SEntrancesDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 boundingBoxScale; // Offset: 0x8
    Vec3 boundingBoxOffset; // Offset: 0x20
    DynArray_SCEntranceItem* entranceArray; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: DynArray_ItemPreview_TurntableOverride
// Generated DynArray for base type: ItemPreview_TurntableOverride
// Size: 0x8
struct DynArray_ItemPreview_TurntableOverride {
    ItemPreview_TurntableOverride* m_data; // Offset: 0x0
};

// Original name: LadderAccessPointParams
// Size: 0xa0
// VTable: 0x149a6ace0
struct LadderAccessPointParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t rungNumber; // Offset: 0x8
    bool directionIncludesLeft; // Offset: 0xc
    bool directionIncludesRight; // Offset: 0xd
    bool directionIncludesFront; // Offset: 0xe
    uint8_t _pad_1[0x1]; // Offset: 0xf
    LadderAccessClimbParams leftEntryParams; // Offset: 0x10
    LadderAccessClimbParams rightEntryParams; // Offset: 0x40
    LadderAccessClimbParams frontEntryParams; // Offset: 0x70
};

// Original name: SThrowableParams
// Size: 0x100
// VTable: 0x149a8e930
struct SThrowableParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SThrowMode* throwModes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    CryStringT* reticle; // Offset: 0x48
    uint8_t _pad_2[0x8]; // Offset: 0x50
    bool faceUpWhenSettled; // Offset: 0x58
    bool allowHologramTiltRotation; // Offset: 0x59
    uint8_t _pad_3[0x2]; // Offset: 0x5a
    float placementRange; // Offset: 0x5c
    float placementRangeHysteresis; // Offset: 0x60
    uint8_t _pad_4[0x4]; // Offset: 0x64
    Vec3 defaultPlacementUpDirection; // Offset: 0x68
    float yawOffset; // Offset: 0x80
    bool applyBoundingBoxPlacementOffset; // Offset: 0x84
    uint8_t _pad_5[0x3]; // Offset: 0x85
    SThrowAudioParams audioParams; // Offset: 0x88
    bool combatThrowable; // Offset: 0xf8
    uint8_t _pad_6[0x7]; // Offset: 0xf9
};

// Original name: EntityComponentPointOfInterestParams
// Size: 0x50
// VTable: 0x1499ed518
struct EntityComponentPointOfInterestParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType lookAtType; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_CustomLookAtBB* customLookAtBBs; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: CameraShopConfig
// Size: 0x88
// VTable: 0x1499b2eb8
struct CameraShopConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 initialPositionOffset; // Offset: 0x8
    DynArray_CameraShopItemOffset* itemOffsets; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    float minVerticalRotationAngle; // Offset: 0x50
    float maxVerticalRotationAngle; // Offset: 0x54
    float minHorizontalRotationAngle; // Offset: 0x58
    float maxHorizontalRotationAngle; // Offset: 0x5c
    float inTranslationSpeed; // Offset: 0x60
    float outTranslationSpeed; // Offset: 0x64
    float inRotationSpeed; // Offset: 0x68
    float outRotationSpeed; // Offset: 0x6c
    float rotationSpeed; // Offset: 0x70
    float zoomMin; // Offset: 0x74
    float zoomMax; // Offset: 0x78
    float zoomSpeed; // Offset: 0x7c
    float twirlSpeed; // Offset: 0x80
    float timeToActivateTwirl; // Offset: 0x84
};

// Original name: SActorProceduralHandsRecoilModifiers
// Size: 0x1d8
// VTable: 0x149a71738
struct SActorProceduralHandsRecoilModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float decay; // Offset: 0x8
    float endDecay; // Offset: 0xc
    float fireRecoilTime; // Offset: 0x10
    float fireRecoilStrengthFirst; // Offset: 0x14
    float fireRecoilStrength; // Offset: 0x18
    float angleRecoilStrength; // Offset: 0x1c
    bool useRandomRotation; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    Ang3 rotation; // Offset: 0x28
    float randomness; // Offset: 0x40
    float randomnessBackPush; // Offset: 0x44
    float frontalOscillationRotation; // Offset: 0x48
    float frontalOscillationStrength; // Offset: 0x4c
    float frontalOscillationDecay; // Offset: 0x50
    float frontalOscillationRandomness; // Offset: 0x54
    bool resetCurveRecoilWhenApplying; // Offset: 0x58
    uint8_t _pad_2[0x7]; // Offset: 0x59
    SActorProceduralHandsRecoilCurveModifiersDef curveRecoil; // Offset: 0x60
};

// Original name: LightningRegionParams
// Size: 0x110
// VTable: 0x149996eb0
struct LightningRegionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool active; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    LightningRegionLightningParams lightning; // Offset: 0x20
    InterferenceParams interference; // Offset: 0x100
};

// Original name: SCDynamicLightingRigGlobalParams
// Size: 0x80
// VTable: 0x1499e1030
struct SCDynamicLightingRigGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* projectorTexture; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Vec3 offsetPerAxis; // Offset: 0x18
    float frameOfReferenceVerticalOffset; // Offset: 0x30
    float colorLerpTime; // Offset: 0x34
    float positionLerpTime; // Offset: 0x38
    float minIntensityScaleWhileLerping; // Offset: 0x3c
    float minRepositionDistanceFromPlayer; // Offset: 0x40
    float minRepositionMovementDistance; // Offset: 0x44
    float extendedProjectorFOVScale; // Offset: 0x48
    bool allowRigWithHelmetOn; // Offset: 0x4c
    uint8_t _pad_2[0x3]; // Offset: 0x4d
    DynArray_SCDynamicRigLightParams* lights; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
};

// Original name: InnerThought_Config
// Size: 0x28
// VTable: 0x149a98610
struct InnerThought_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GeomFont_Config geomFont; // Offset: 0x8
    float tracking; // Offset: 0x20
    ARDataType forceCase; // Offset: 0x24
};

// Original name: DynArray_DrugEfficacyForItemType
// Generated DynArray for base type: DrugEfficacyForItemType
// Size: 0x8
struct DynArray_DrugEfficacyForItemType {
    DrugEfficacyForItemType* m_data; // Offset: 0x0
};

// Original name: DynArray_ProcAimRigConfig
// Generated DynArray for base type: ProcAimRigConfig
// Size: 0x8
struct DynArray_ProcAimRigConfig {
    ProcAimRigConfig* m_data; // Offset: 0x0
};

// Original name: SHackingAgentParamsPreset
// Size: 0x78
// VTable: 0x149a2b7b0
struct SHackingAgentParamsPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float size; // Offset: 0x8
    float speed; // Offset: 0xc
    float visibilityRadius; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    SHackingAIParams aiParams; // Offset: 0x18
    SHackingAbilityParams nodeSwapAbilityParams; // Offset: 0x28
    SHackingAbilityParams injectAbilityParams; // Offset: 0x38
    SHackingAbilityPingParams pingAbilityParams; // Offset: 0x48
    SHackingAbilitySlowdownParams slowdownAbilityParams; // Offset: 0x58
    SHackingAbilityParams wrapAroundAbilityParams; // Offset: 0x68
};

// Original name: LinkedStatPreset
// Size: 0x20
// VTable: 0x1499fdd40
struct LinkedStatPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType linkedStat; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    LinkedStatSetupPreset preset; // Offset: 0x10
};

// Original name: DynArray_LinkedStatSetupPreset
// Generated DynArray for base type: LinkedStatSetupPreset
// Size: 0x8
struct DynArray_LinkedStatSetupPreset {
    LinkedStatSetupPreset* m_data; // Offset: 0x0
};

// Original name: EAObjectiveControlPhase
// Size: 0x38
// VTable: 0x149a29ff0
struct EAObjectiveControlPhase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TeamPhaseSettingsDef* teamSettings; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_SActorForceReactionProceduralVanduulLeanPose
// Generated DynArray for base type: SActorForceReactionProceduralVanduulLeanPose
// Size: 0x8
struct DynArray_SActorForceReactionProceduralVanduulLeanPose {
    SActorForceReactionProceduralVanduulLeanPose* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionProceduralXianLeanPose
// Generated DynArray for base type: SActorForceReactionProceduralXianLeanPose
// Size: 0x8
struct DynArray_SActorForceReactionProceduralXianLeanPose {
    SActorForceReactionProceduralXianLeanPose* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionProceduralHumanLeanPose
// Generated DynArray for base type: SActorForceReactionProceduralHumanLeanPose
// Size: 0x8
struct DynArray_SActorForceReactionProceduralHumanLeanPose {
    SActorForceReactionProceduralHumanLeanPose* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_NumberCompareStatement
// Generated DynArray for base type: BuildingBlocks_NumberCompareStatement
// Size: 0x8
struct DynArray_BuildingBlocks_NumberCompareStatement {
    BuildingBlocks_NumberCompareStatement* m_data; // Offset: 0x0
};

// Original name: DynArray_CockpitResponseVariation
// Generated DynArray for base type: CockpitResponseVariation
// Size: 0x8
struct DynArray_CockpitResponseVariation {
    CockpitResponseVariation* m_data; // Offset: 0x0
};

// Original name: DynArray_SHelmetStateBaseParams
// Generated DynArray for base type: SHelmetStateBaseParams
// Size: 0x8
struct DynArray_SHelmetStateBaseParams {
    SHelmetStateBaseParams* m_data; // Offset: 0x0
};

// Original name: SUsableAnimationParams
// Size: 0x58
// VTable: 0x1499b0b90
struct SUsableAnimationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* FragmentId; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* FragmentTag; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    DynArray_SUsableMovementAlignmentParams* UsableMovementAlignmentSlots; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x30
};

// Original name: SCItemControlPriorityTable
// Size: 0x78
// VTable: 0x149a07360
struct SCItemControlPriorityTable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SCItemControlPriorityValue defaultPriority; // Offset: 0x10
    DynArray_SCItemControlPriorityTag* tagPrioritiesTable; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x50]; // Offset: 0x28
};

// Original name: DynArray_SpecialEventDay
// Generated DynArray for base type: SpecialEventDay
// Size: 0x8
struct DynArray_SpecialEventDay {
    SpecialEventDay* m_data; // Offset: 0x0
};

// Original name: DynArray_IntUserVariable
// Generated DynArray for base type: IntUserVariable
// Size: 0x8
struct DynArray_IntUserVariable {
    IntUserVariable* m_data; // Offset: 0x0
};

// Original name: DynArray_SScoreboard
// Generated DynArray for base type: SScoreboard
// Size: 0x8
struct DynArray_SScoreboard {
    SScoreboard* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_LanguageSpecificFontReplacement
// Size: 0x38
// VTable: 0x149992270
struct BuildingBlocks_LanguageSpecificFontReplacement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_FontReplacementPair* fontReplacementList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BindingsOperations_StringFromIntegerSwitchFontStyle
// Size: 0xa8
// VTable: 0x149989ca0
struct BindingsOperations_StringFromIntegerSwitchFontStyle {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    DynArray_BindingsOperations_IntegerStringFontStylePair* values; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
    BuildingBlocks_FontStyle defaultValue; // Offset: 0x80
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x98
};

// Original name: DynArray_SpineBone
// Generated DynArray for base type: SpineBone
// Size: 0x8
struct DynArray_SpineBone {
    SpineBone* m_data; // Offset: 0x0
};

// Original name: ItemTypeCategoryMap
// Size: 0x50
// VTable: 0x149aa7c00
struct ItemTypeCategoryMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemTypeCategory defaultCategory; // Offset: 0x8
    DynArray_ItemTypeCategoryException* exceptions; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    bool showInElectronicAccess; // Offset: 0x48
    uint8_t _pad_2[0x7]; // Offset: 0x49
};

// Original name: DynArray_DifficultyLevelParams
// Generated DynArray for base type: DifficultyLevelParams
// Size: 0x8
struct DynArray_DifficultyLevelParams {
    DifficultyLevelParams* m_data; // Offset: 0x0
};

// Original name: DynArray_ContextualCommunicationResponse
// Generated DynArray for base type: ContextualCommunicationResponse
// Size: 0x8
struct DynArray_ContextualCommunicationResponse {
    ContextualCommunicationResponse* m_data; // Offset: 0x0
};

// Original name: DynArray_HudColor_CustomEntry
// Generated DynArray for base type: HudColor_CustomEntry
// Size: 0x8
struct DynArray_HudColor_CustomEntry {
    HudColor_CustomEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_HudColor_Entry
// Generated DynArray for base type: HudColor_Entry
// Size: 0x8
struct DynArray_HudColor_Entry {
    HudColor_Entry* m_data; // Offset: 0x0
};

// Original name: FactionPalettes
// Size: 0x38
// VTable: 0x149a90ca0
struct FactionPalettes {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_FactionPalette* Palettes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ChatManagerGlobalParams
// Size: 0x58
// VTable: 0x1499e3d48
struct ChatManagerGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ChatManagerDefaultChannelColor defaultChannelColor; // Offset: 0x8
    DynArray_ChatManagerColor* colorOptions; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: LadderConfig
// Size: 0x110
// VTable: 0x149a9ef90
struct LadderConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LadderAnimationParams animationParams; // Offset: 0x8
    LadderMovementParams movementParams; // Offset: 0x78
    float horizontalViewLimit; // Offset: 0xb0
    float verticalUpViewLimit; // Offset: 0xb4
    ActorViewLimits leaningViewLimits; // Offset: 0xb8
    LadderJumpParams jumpParams; // Offset: 0xe0
    LadderLookAroundParams lookAroundParams; // Offset: 0x100
};

// Original name: DynArray_AudioValueOutput
// Generated DynArray for base type: AudioValueOutput
// Size: 0x8
struct DynArray_AudioValueOutput {
    AudioValueOutput* m_data; // Offset: 0x0
};

// Original name: DynArray_OpenInventoryOccupantItemTypeProperties
// Generated DynArray for base type: OpenInventoryOccupantItemTypeProperties
// Size: 0x8
struct DynArray_OpenInventoryOccupantItemTypeProperties {
    OpenInventoryOccupantItemTypeProperties* m_data; // Offset: 0x0
};

// Original name: DynArray_SHackingThreatLevelParams
// Generated DynArray for base type: SHackingThreatLevelParams
// Size: 0x8
struct DynArray_SHackingThreatLevelParams {
    SHackingThreatLevelParams* m_data; // Offset: 0x0
};

// Original name: SGlobalChargeDrainBeamParams
// Size: 0x140
// VTable: 0x149a77bd0
struct SGlobalChargeDrainBeamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SChargeDrainTargetStateOutlineParams targetStateOutlineParams; // Offset: 0x8
    SChargeDrainCardParams targetCardParams; // Offset: 0xd0
    SChargeDrainCardParams chargeCardParams; // Offset: 0x108
};

// Original name: CameraLensGhostSet
// Size: 0x70
// VTable: 0x149a90930
struct CameraLensGhostSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* SetName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float Radius; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    CameraLensDistortion Distortion; // Offset: 0x20
    CameraLensChromaticAberration ChromaticAberration; // Offset: 0x30
    DynArray_CameraLensGhostInstance* Instances; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: SCharacterCustomizerEyeRandomizationParams
// Size: 0x38
// VTable: 0x149a0c7c0
struct SCharacterCustomizerEyeRandomizationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCharacterCustomizerRandomColorDef* irisColors; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_SRenderToTextureRenderLayerParams
// Generated DynArray for base type: SRenderToTextureRenderLayerParams
// Size: 0x8
struct DynArray_SRenderToTextureRenderLayerParams {
    SRenderToTextureRenderLayerParams* m_data; // Offset: 0x0
};

// Original name: DynArray_BreathableGasParams
// Generated DynArray for base type: BreathableGasParams
// Size: 0x8
struct DynArray_BreathableGasParams {
    BreathableGasParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SCItemSuitAtmosphereFuelConversionParams
// Generated DynArray for base type: SCItemSuitAtmosphereFuelConversionParams
// Size: 0x8
struct DynArray_SCItemSuitAtmosphereFuelConversionParams {
    SCItemSuitAtmosphereFuelConversionParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SGasProducerConsumerEntryParams
// Generated DynArray for base type: SGasProducerConsumerEntryParams
// Size: 0x8
struct DynArray_SGasProducerConsumerEntryParams {
    SGasProducerConsumerEntryParams* m_data; // Offset: 0x0
};

// Original name: DynArray_ToxicGasDef
// Generated DynArray for base type: ToxicGasDef
// Size: 0x8
struct DynArray_ToxicGasDef {
    ToxicGasDef* m_data; // Offset: 0x0
};

// Original name: ConsumableEffectGas
// Size: 0x38
// VTable: 0x149a255d0
struct ConsumableEffectGas {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* effectDescription; // Offset: 0x8
    SGasMass gasMass; // Offset: 0x10
};

// Original name: DynArray_SGasMass
// Generated DynArray for base type: SGasMass
// Size: 0x8
struct DynArray_SGasMass {
    SGasMass* m_data; // Offset: 0x0
};

// Original name: DynArray_SGasAtmosphereEntryParams
// Generated DynArray for base type: SGasAtmosphereEntryParams
// Size: 0x8
struct DynArray_SGasAtmosphereEntryParams {
    SGasAtmosphereEntryParams* m_data; // Offset: 0x0
};

// Original name: SJumpPointParams
// Size: 0x148
// VTable: 0x149a14a90
struct SJumpPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* jumpGateSuperGuid; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    SJumpPointPushAreaParams entrancePushAreaParams; // Offset: 0x28
    CryStringT* pushAreaRadarGeometryName; // Offset: 0x48
    uint8_t _pad_2[0x8]; // Offset: 0x50
    LandingPadSize largestShipSize; // Offset: 0x58
    JumpPointEffectParams effectParams; // Offset: 0x70
    float linkingRange; // Offset: 0x140
    float requiredFuel; // Offset: 0x144
};

// Original name: ConditionProhibitedItemsDisplayParams
// Size: 0x28
// VTable: 0x149a8d5a8
struct ConditionProhibitedItemsDisplayParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BlockedTextParams autoStoreText; // Offset: 0x8
    BlockedColorParams autoStoreColor; // Offset: 0x18
};

// Original name: DynArray_ActorStatusUIWarning
// Generated DynArray for base type: ActorStatusUIWarning
// Size: 0x8
struct DynArray_ActorStatusUIWarning {
    ActorStatusUIWarning* m_data; // Offset: 0x0
};

// Original name: DynArray_ActionStatusCosts
// Generated DynArray for base type: ActionStatusCosts
// Size: 0x8
struct DynArray_ActionStatusCosts {
    ActionStatusCosts* m_data; // Offset: 0x0
};

// Original name: DynArray_AbilityStatusCosts
// Generated DynArray for base type: AbilityStatusCosts
// Size: 0x8
struct DynArray_AbilityStatusCosts {
    AbilityStatusCosts* m_data; // Offset: 0x0
};

// Original name: DynArray_EAPatchNoteCategoryParams
// Generated DynArray for base type: EAPatchNoteCategoryParams
// Size: 0x8
struct DynArray_EAPatchNoteCategoryParams {
    EAPatchNoteCategoryParams* m_data; // Offset: 0x0
};

// Original name: StaminaCostParams
// Size: 0x88
// VTable: 0x149a3cba0
struct StaminaCostParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float staminaRegenerationBase; // Offset: 0x8
    float staminaRegenerationBonus; // Offset: 0xc
    float staminaForMaxRegenBonus; // Offset: 0x10
    float staminaCostScale; // Offset: 0x14
    float staminaRegenScale; // Offset: 0x18
    float staminaSlopeCostScale; // Offset: 0x1c
    float costPerWeight; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    DynArray_AbilityStaminaStates* abilityStaminaStates; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    DynArray_ActionStaminaCosts* actionStaminaCosts; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x60
};

// Original name: SCItemConditionalControllableGroupParams
// Size: 0x58
// VTable: 0x149a06e20
struct SCItemConditionalControllableGroupParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_SCItemConditionalPriority* conditionalPriorities; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x40]; // Offset: 0x18
};

// Original name: DynArray_PersonalThoughtCameraEffectsParams
// Generated DynArray for base type: PersonalThoughtCameraEffectsParams
// Size: 0x8
struct DynArray_PersonalThoughtCameraEffectsParams {
    PersonalThoughtCameraEffectsParams* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsNumberFromIntegerSwitch
// Size: 0xa8
// VTable: 0x149989268
struct BuildingBlocks_BindingsNumberFromIntegerSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsNumberBase defaultOverride; // Offset: 0x50
    float defaultValue; // Offset: 0x60
    uint8_t _pad_1[0x4]; // Offset: 0x64
    DynArray_BuildingBlocks_IntegerNumberPair* values; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x70
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x98
};

// Original name: ActorViewLimitPresetDatabase
// Size: 0x48
// VTable: 0x149aac660
struct ActorViewLimitPresetDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorViewLimitPreset* presets; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x38]; // Offset: 0x10
};

// Original name: ActorLookLimits
// Size: 0x38
// VTable: 0x149aac550
struct ActorLookLimits {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorLookLimitsStateFilter* lookLimitsStateFilters; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ActorAimLimits
// Size: 0x38
// VTable: 0x149aac4f0
struct ActorAimLimits {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorAimLimitsStateFilter* aimLimitsStateFilters; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SubHarvestableMultiConfig
// Size: 0x50
// VTable: 0x1499efc40
struct SubHarvestableMultiConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SubHarvestableConfigSingleBase defaultConfig; // Offset: 0x8
    bool ignoreAttachableTagsForTaggedConfigs; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    DynArray_TaggedSubHarvestableConfig* taggedConfigs; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: DynArray_AnimationGraph_Track
// Generated DynArray for base type: AnimationGraph_Track
// Size: 0x8
struct DynArray_AnimationGraph_Track {
    AnimationGraph_Track* m_data; // Offset: 0x0
};

// Original name: ProbabilisticStatusTrigger
// Size: 0x40
// VTable: 0x1499fd390
struct ProbabilisticStatusTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SStatusFortitudeLevelModifier fortitudeLevelModifier; // Offset: 0x8
    float statusTriggerMinThreshold; // Offset: 0x18
    float probabilityInterpMinThreshold; // Offset: 0x1c
    float probabilityInterpMaxThreshold; // Offset: 0x20
    float statusTriggerGuaranteedThreshold; // Offset: 0x24
    float maxStatusRangeThreshold; // Offset: 0x28
    float probabilityMin; // Offset: 0x2c
    float probabilityMax; // Offset: 0x30
    float probabilityCooldown; // Offset: 0x34
    ARDataType probabilityCheckType; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: PercentageStatusTrigger
// Size: 0x20
// VTable: 0x1499fd1f8
struct PercentageStatusTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SStatusFortitudeLevelModifier fortitudeLevelModifier; // Offset: 0x8
    float triggerMinPercentage; // Offset: 0x18
    float triggerMaxPercentage; // Offset: 0x1c
};

// Original name: DefaultStatusTrigger
// Size: 0x20
// VTable: 0x1499fd178
struct DefaultStatusTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SStatusFortitudeLevelModifier fortitudeLevelModifier; // Offset: 0x8
    float triggerMinThreshold; // Offset: 0x18
    float triggerMaxThreshold; // Offset: 0x1c
};

// Original name: StatusTriggerBase
// Size: 0x18
// VTable: 0x1499fd0f0
struct StatusTriggerBase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SStatusFortitudeLevelModifier fortitudeLevelModifier; // Offset: 0x8
};

// Original name: DynArray_SActorLocomotionFidgetStateFilteredDef
// Generated DynArray for base type: SActorLocomotionFidgetStateFilteredDef
// Size: 0x8
struct DynArray_SActorLocomotionFidgetStateFilteredDef {
    SActorLocomotionFidgetStateFilteredDef* m_data; // Offset: 0x0
};

// Original name: DynArray_AnimationVariableLink
// Generated DynArray for base type: AnimationVariableLink
// Size: 0x8
struct DynArray_AnimationVariableLink {
    AnimationVariableLink* m_data; // Offset: 0x0
};

// Original name: DynArray_AnimationJointBaseTranslation
// Generated DynArray for base type: AnimationJointBaseTranslation
// Size: 0x8
struct DynArray_AnimationJointBaseTranslation {
    AnimationJointBaseTranslation* m_data; // Offset: 0x0
};

// Original name: DynArray_AnimationMovement
// Generated DynArray for base type: AnimationMovement
// Size: 0x8
struct DynArray_AnimationMovement {
    AnimationMovement* m_data; // Offset: 0x0
};

// Original name: DynArray_AnimationJointBaseRotation
// Generated DynArray for base type: AnimationJointBaseRotation
// Size: 0x8
struct DynArray_AnimationJointBaseRotation {
    AnimationJointBaseRotation* m_data; // Offset: 0x0
};

// Original name: SIScoringModule
// Size: 0x58
// VTable: 0x1499ba4e8
struct SIScoringModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool countScoreDown; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    SPlayerScoring playerScoring; // Offset: 0x20
    STeamScoring teamScoring; // Offset: 0x30
    EAGameCompletionAwardBaseParams gameCompletionAward; // Offset: 0x40
    float RECMultiplier; // Offset: 0x50
    ARDataType mvpType; // Offset: 0x54
};

// Original name: SMisfireEvents
// Size: 0x98
// VTable: 0x149a08110
struct SMisfireEvents {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SMisfireEventParams* MinorMisfires; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SMisfireEventParams* MajorMisfires; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_SMisfireEventParams* CriticalMisfires; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: DynArray_AIContextualVisualFieldProfile
// Generated DynArray for base type: AIContextualVisualFieldProfile
// Size: 0x8
struct DynArray_AIContextualVisualFieldProfile {
    AIContextualVisualFieldProfile* m_data; // Offset: 0x0
};

// Original name: VoiceChannelSettingsRecord
// Size: 0x88
// VTable: 0x149a5c410
struct VoiceChannelSettingsRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SChatChannelTypeBase autoConnectProximityChannelType; // Offset: 0x8
    DynArray_SChatChannelTypeBase* autoConnectPrimaryChannelType; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    CyclingChannelOption cyclingChannelOption; // Offset: 0x48
};

// Original name: AutoSubscribeChatProviderSettings
// Size: 0x18
// VTable: 0x1499f9980
struct AutoSubscribeChatProviderSettings {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SChatChannelFilterBase autoSubscribeChannelTypes; // Offset: 0x8
};

// Original name: ChatChannelFilterRecord
// Size: 0x18
// VTable: 0x149a5c360
struct ChatChannelFilterRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SChatChannelFilterBase chatChannelFilter; // Offset: 0x8
};

// Original name: DynArray_ActionRuleParams
// Generated DynArray for base type: ActionRuleParams
// Size: 0x8
struct DynArray_ActionRuleParams {
    ActionRuleParams* m_data; // Offset: 0x0
};

// Original name: DynArray_FloatUserVariable
// Generated DynArray for base type: FloatUserVariable
// Size: 0x8
struct DynArray_FloatUserVariable {
    FloatUserVariable* m_data; // Offset: 0x0
};

// Original name: Announcement
// Size: 0x88
// VTable: 0x1499d6f18
struct Announcement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Conversation conversation; // Offset: 0x18
    CryStringT* gameToken; // Offset: 0x30
    uint8_t _pad_2[0x8]; // Offset: 0x38
    ARDataType gameTokenType; // Offset: 0x40
    uint8_t _pad_3[0x4]; // Offset: 0x44
    DynArray_AnnouncementGameToken* gameTokens; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x50
    ARDataType priority; // Offset: 0x78
    float retriggerDelay; // Offset: 0x7c
    float playProbability; // Offset: 0x80
    bool playWhenDead; // Offset: 0x84
    bool playWhenSpectating; // Offset: 0x85
    uint8_t _pad_5[0x2]; // Offset: 0x86
};

// Original name: DynArray_Conversation
// Generated DynArray for base type: Conversation
// Size: 0x8
struct DynArray_Conversation {
    Conversation* m_data; // Offset: 0x0
};

// Original name: EntityComponentPlayerEAUIProviderParams
// Size: 0x60
// VTable: 0x149a28db0
struct EntityComponentPlayerEAUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    EAScoringMessageParams scoringMessageParams; // Offset: 0x18
};

// Original name: LongTermPersistenceGlobalParams
// Size: 0x38
// VTable: 0x1499b9cc0
struct LongTermPersistenceGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LongTermPersistenceWhiteListEntry* LongTermPersistenceWhiteList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: PersonalThoughtActionDescriptionsList
// Size: 0x38
// VTable: 0x149a99bd0
struct PersonalThoughtActionDescriptionsList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PersonalThoughtActionDescription* actionDescriptions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_PersonalThoughtGameModeDef
// Generated DynArray for base type: PersonalThoughtGameModeDef
// Size: 0x8
struct DynArray_PersonalThoughtGameModeDef {
    PersonalThoughtGameModeDef* m_data; // Offset: 0x0
};

// Original name: SpectatorModeParams
// Size: 0x30
// VTable: 0x149aa0630
struct SpectatorModeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType spectatorMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Camera cameraRecord; // Offset: 0x10
    bool availableToPlayers; // Offset: 0x28
    uint8_t _pad_2[0x7]; // Offset: 0x29
};

// Original name: SCRTTCameraParams
// Size: 0x50
// VTable: 0x149a38fe0
struct SCRTTCameraParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Camera onFootCameraView; // Offset: 0x18
    Camera vehicleCameraView; // Offset: 0x30
    float defaultCamDistance; // Offset: 0x48
    uint8_t _pad_1[0x4]; // Offset: 0x4c
};

// Original name: SControlledEntityCameraParams
// Size: 0x50
// VTable: 0x1499cfe08
struct SControlledEntityCameraParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Camera cameraRecord; // Offset: 0x8
    EntityReferenceDef groupCameraEntity; // Offset: 0x20
    int32_t uiLayerIndex; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    CryStringT* uiLayerViewName; // Offset: 0x40
    uint8_t _pad_2[0x8]; // Offset: 0x48
};

// Original name: CameraAlternativeViewsConfig
// Size: 0x38
// VTable: 0x1499b2968
struct CameraAlternativeViewsConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Camera alternativeView; // Offset: 0x8
    Camera defaultView; // Offset: 0x20
};

// Original name: SCamerasBaseModule
// Size: 0x70
// VTable: 0x149a740d0
struct SCamerasBaseModule {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    Camera gameEndCameraRecord; // Offset: 0x18
    Camera onFootDeathCameraRecord; // Offset: 0x30
    Camera vehicleDeathCameraRecord; // Offset: 0x48
    float deathCameraDuration; // Offset: 0x60
    bool useFadeOut; // Offset: 0x64
    uint8_t _pad_1[0x3]; // Offset: 0x65
    float fadeOutTriggerTime; // Offset: 0x68
    bool allowConstantDOF; // Offset: 0x6c
    uint8_t _pad_2[0x3]; // Offset: 0x6d
};

// Original name: AdsCameraParams
// Size: 0x38
// VTable: 0x149a7dde8
struct AdsCameraParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Camera adsCamera; // Offset: 0x8
    Vec3 adsCameraOffset; // Offset: 0x20
};

// Original name: DynArray_Camera
// Generated DynArray for base type: Camera
// Size: 0x8
struct DynArray_Camera {
    Camera* m_data; // Offset: 0x0
};

// Original name: DynArray_PostureGroup
// Generated DynArray for base type: PostureGroup
// Size: 0x8
struct DynArray_PostureGroup {
    PostureGroup* m_data; // Offset: 0x0
};

// Original name: SRecoilModifier
// Size: 0x318
// VTable: 0x1499de690
struct SRecoilModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float decayMultiplier; // Offset: 0x8
    float endDecayMultiplier; // Offset: 0xc
    float fireRecoilTimeMultiplier; // Offset: 0x10
    float fireRecoilStrengthFirstMultiplier; // Offset: 0x14
    float fireRecoilStrengthMultiplier; // Offset: 0x18
    float angleRecoilStrengthMultiplier; // Offset: 0x1c
    float randomnessMultiplier; // Offset: 0x20
    float randomnessBackPushMultiplier; // Offset: 0x24
    float frontalOscillationRotationMultiplier; // Offset: 0x28
    float frontalOscillationStrengthMultiplier; // Offset: 0x2c
    float frontalOscillationDecayMultiplier; // Offset: 0x30
    float frontalOscillationRandomnessMultiplier; // Offset: 0x34
    float animatedRecoilMultiplier; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
    Vec3 headRotationMultiplier; // Offset: 0x40
    SAimRecoilModifier aimRecoilModifier; // Offset: 0x58
    SActorProceduralHandsRecoilCurveModifiersDef curveRecoil; // Offset: 0x118
    SWeaponProceduralHeadRecoilCurveModifierDef curveRecoilHead; // Offset: 0x290
};

// Original name: RadiationStateRef
// Size: 0x20
// VTable: 0x14997ada0
struct RadiationStateRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    RadiationStateTemplate stateTemplate; // Offset: 0x8
};

// Original name: SubsumptionComponentParams
// Size: 0x80
// VTable: 0x14997e1a8
struct SubsumptionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* subsumptionMastergraph; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* subsumptionActivity; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    DynArray_SMastergraphStateOverride* mastergraphStateOverrides; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x40
    ActivityData activityData; // Offset: 0x68
};

// Original name: EntityClassRawMaterialCraftingData
// Size: 0x38
// VTable: 0x1499b9700
struct EntityClassRawMaterialCraftingData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CraftingMaterialStatEntry* rawMaterialStats; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ResourceTypeCraftingData
// Size: 0x48
// VTable: 0x1499b91e0
struct ResourceTypeCraftingData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_CraftingMaterialStatEntry* stats; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: DynArray_PlayerChoice_OptionList
// Generated DynArray for base type: PlayerChoice_OptionList
// Size: 0x8
struct DynArray_PlayerChoice_OptionList {
    PlayerChoice_OptionList* m_data; // Offset: 0x0
};

// Original name: SControlledEntityRopeAttachmentPairs
// Size: 0x38
// VTable: 0x1499cf330
struct SControlledEntityRopeAttachmentPairs {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SControlledEntityRopeAttachmentPair* attachmentPairs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: FrontendS42Actions
// Size: 0x950
// VTable: 0x149a22e60
struct FrontendS42Actions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FrontendS42ActionData newGame; // Offset: 0x8
    FrontendS42ActionData continue_; /* continue */ // Offset: 0xe0
    FrontendS42ActionData loadGame; // Offset: 0x1b8
    FrontendS42ActionData quit; // Offset: 0x290
    FrontendS42ActionData options; // Offset: 0x368
    FrontendS42ActionData hallway; // Offset: 0x440
    FrontendS42ActionData room; // Offset: 0x518
    FrontendS42ActionData galactapedia; // Offset: 0x5f0
    FrontendS42ActionData changeCharacter; // Offset: 0x6c8
    FrontendS42ActionData debugLevelSelect; // Offset: 0x7a0
    FrontendS42ActionData missionSelect; // Offset: 0x878
};

// Original name: ActorSomaticShakeParams
// Size: 0x80
// VTable: 0x1499ff718
struct ActorSomaticShakeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float frequencyStart; // Offset: 0x8
    float frequencyEnd; // Offset: 0xc
    float amplitudeStart; // Offset: 0x10
    float amplitudeEnd; // Offset: 0x14
    float blendDuration; // Offset: 0x18
    float breathingInfluence; // Offset: 0x1c
    ActorShudderConfig shudder; // Offset: 0x20
    DynArray_ActorSomaticShakeConfig* somaticShakeConfigs; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
};

// Original name: ForceFeedback
// Size: 0x98
// VTable: 0x1499b48d0
struct ForceFeedback {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ForceFeedbackPattern* Patterns; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ForceFeedbackEnvelope* Envelopes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_ForceFeedbackEffect* Effects; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: FoleyFootstepDefinition
// Size: 0x130
// VTable: 0x149a68b00
struct FoleyFootstepDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t priority; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* heelLandAudioTrigger; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    CryStringT* toeLandAudioTrigger; // Offset: 0x20
    uint8_t _pad_3[0x8]; // Offset: 0x28
    CryStringT* footLiftAudioTrigger; // Offset: 0x30
    uint8_t _pad_4[0x8]; // Offset: 0x38
    CryStringT* velocityRTPCName; // Offset: 0x40
    uint8_t _pad_5[0x8]; // Offset: 0x48
    CryStringT* playerViewRotationRTPCName; // Offset: 0x50
    uint8_t _pad_6[0x8]; // Offset: 0x58
    CryStringT* equipmentMassRTPCName; // Offset: 0x60
    uint8_t _pad_7[0x8]; // Offset: 0x68
    CryStringT* playerSkillModifierRTPCName; // Offset: 0x70
    uint8_t _pad_8[0x8]; // Offset: 0x78
    float velocityRTPCMinimum; // Offset: 0x80
    float velocityRTPCMaximum; // Offset: 0x84
    float footMovementThreshold; // Offset: 0x88
    float footRotationThreshold; // Offset: 0x8c
    float relativeSpeedThreshold; // Offset: 0x90
    float heightThreshold; // Offset: 0x94
    DynArray_UserRTPC* userRTPCs; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0xa0
    AudioFootstepSurfacesDefinition surfaceMap; // Offset: 0xc8
    DynArray_FoleyBone* footBones; // Offset: 0x100 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x108
};

// Original name: AsteroidFieldComposition
// Size: 0x58
// VTable: 0x14999f138
struct AsteroidFieldComposition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fogDensity; // Offset: 0x8
    float fogNoiseScale; // Offset: 0xc
    RGB fogAlbedo; // Offset: 0x10
    DynArray_AsteroidProcedural* asteroids; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: DynArray_SCharacterCustomizerDNAHeadPool
// Generated DynArray for base type: SCharacterCustomizerDNAHeadPool
// Size: 0x8
struct DynArray_SCharacterCustomizerDNAHeadPool {
    SCharacterCustomizerDNAHeadPool* m_data; // Offset: 0x0
};

// Original name: EAScoringParams
// Size: 0xe0
// VTable: 0x149a3a400
struct EAScoringParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool countScoreDown; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    SPlayerScoring playerScoring; // Offset: 0x20
    STeamScoring teamScoring; // Offset: 0x30
    EAGameCompletionAwardBaseParams gameCompletionAward; // Offset: 0x40
    float RECMultiplier; // Offset: 0x50
    ARDataType mvpType; // Offset: 0x54
    int32_t killsForAceKill; // Offset: 0x58
    int32_t aceBonusCap; // Offset: 0x5c
    int32_t killsForKillingSpree; // Offset: 0x60
    int32_t killingSpreeBonusCap; // Offset: 0x64
    int32_t killsForNemesisKill; // Offset: 0x68
    int32_t deathCountForResurgentKill; // Offset: 0x6c
    float underdogBonusScalar; // Offset: 0x70
    float saviorTime; // Offset: 0x74
    float teamRevengeKillTime; // Offset: 0x78
    float itemDamageFactor; // Offset: 0x7c
    bool enableScoreBalancing; // Offset: 0x80
    uint8_t _pad_2[0x3]; // Offset: 0x81
    float scoreBalancingMirrorScore; // Offset: 0x84
    EAScoringAssistParams assistParams; // Offset: 0x88
    bool useCompetitiveScoring; // Offset: 0xd0
    uint8_t _pad_3[0x3]; // Offset: 0xd1
    float positiveCurveHeight; // Offset: 0xd4
    float negativeCurveHeight; // Offset: 0xd8
    ARDataType ratingScoreMultiplier; // Offset: 0xdc
};

// Original name: DynArray_CraftingGameplayPropertyImplSingleStatTier_Int
// Generated DynArray for base type: CraftingGameplayPropertyImplSingleStatTier_Int
// Size: 0x8
struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Int {
    CraftingGameplayPropertyImplSingleStatTier_Int* m_data; // Offset: 0x0
};

// Original name: SCharacterCustomizerMakeupParams
// Size: 0xe8
// VTable: 0x149a0c4a8
struct SCharacterCustomizerMakeupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* texturePath; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    int32_t numTilesU; // Offset: 0x18
    int32_t numTilesV; // Offset: 0x1c
    int32_t offsetU; // Offset: 0x20
    int32_t offsetV; // Offset: 0x24
    bool supportsHueRotation; // Offset: 0x28
    uint8_t _pad_2[0x7]; // Offset: 0x29
    SCharacterCustomizerMakeupDefaultParams defaultParams; // Offset: 0x30
    SCharacterCustomizerClampedValueParams smoothLimits; // Offset: 0xa0
    SCharacterCustomizerClampedValueParams metalLimits; // Offset: 0xb8
    SCharacterCustomizerClampedValueParams opacityLimits; // Offset: 0xd0
};

// Original name: FireHazardPermanentEffects
// Size: 0xb0
// VTable: 0x14997c610
struct FireHazardPermanentEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float burnSize; // Offset: 0x8
    float heightmapSize; // Offset: 0xc
    float fireSize; // Offset: 0x10
    float triplanarDitherRepeat; // Offset: 0x14
    float triplanarDitherMaxAngle; // Offset: 0x18
    float breakupSize; // Offset: 0x1c
    DynArray_FireHazardFireProperties* fire; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
    FireHazardAfterglowProperties afterglow; // Offset: 0x50
    DynArray_FireHazardSurfaceProperties* surfaces; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x88
};

// Original name: Flash_Palette
// Size: 0x38
// VTable: 0x149aa13d0
struct Flash_Palette {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Flash_PaletteEntry* Entries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LegacyCraftingRecipeList_Record
// Size: 0x20
// VTable: 0x149a0f3c0
struct LegacyCraftingRecipeList_Record {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    LegacyCraftingRecipeListRecord recipesRecord; // Offset: 0x8
};

// Original name: DynArray_SHackingCodeCommandEntry
// Generated DynArray for base type: SHackingCodeCommandEntry
// Size: 0x8
struct DynArray_SHackingCodeCommandEntry {
    SHackingCodeCommandEntry* m_data; // Offset: 0x0
};

// Original name: CraftingRecipeCosts
// Size: 0x58
// VTable: 0x1499b86f0
struct CraftingRecipeCosts {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TimeValue_Base craftTime; // Offset: 0x8
    CraftingCost_Base mandatoryCost; // Offset: 0x18
    DynArray_CraftingOptionalEntry* optionalCosts; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
};

// Original name: DynArray_SCItemObservableScreenParams
// Generated DynArray for base type: SCItemObservableScreenParams
// Size: 0x8
struct DynArray_SCItemObservableScreenParams {
    SCItemObservableScreenParams* m_data; // Offset: 0x0
};

// Original name: DynArray_ScanOverrideDisplayBaseParams
// Generated DynArray for base type: ScanOverrideDisplayBaseParams
// Size: 0x8
struct DynArray_ScanOverrideDisplayBaseParams {
    ScanOverrideDisplayBaseParams* m_data; // Offset: 0x0
};

// Original name: ScanDisplaySectionParams
// Size: 0x38
// VTable: 0x1499c6d90
struct ScanDisplaySectionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ScanDisplayInstanceParams* displayInstances; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_ActorBreathingStyleStartup
// Generated DynArray for base type: ActorBreathingStyleStartup
// Size: 0x8
struct DynArray_ActorBreathingStyleStartup {
    ActorBreathingStyleStartup* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_BindingsIntegerFromIntegerSwitch
// Size: 0xa8
// VTable: 0x149987158
struct BuildingBlocks_BindingsIntegerFromIntegerSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsIntegerBase defaultOverride; // Offset: 0x50
    int64_t defaultValue; // Offset: 0x60
    DynArray_BuildingBlocks_IntegerIntegerPair* values; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x70
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x98
};

// Original name: DynArray_SReputationStandingJournalEntryParams
// Generated DynArray for base type: SReputationStandingJournalEntryParams
// Size: 0x8
struct DynArray_SReputationStandingJournalEntryParams {
    SReputationStandingJournalEntryParams* m_data; // Offset: 0x0
};

// Original name: ContractResult_JournalEntry
// Size: 0x98
// VTable: 0x149971f78
struct ContractResult_JournalEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_bool* missionResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_JournalEntry* journalEntriesToAdd; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_JournalEntry* journalEntriesToRemove; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: ContractPrerequisite_JournalEntries
// Size: 0x38
// VTable: 0x149972f90
struct ContractPrerequisite_JournalEntries {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_JournalEntry* requiredJournalEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SFrontendSpawning
// Size: 0x38
// VTable: 0x149a56830
struct SFrontendSpawning {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float respawnTimeKilled; // Offset: 0x18
    bool pressXToRespawn; // Offset: 0x1c
    bool allowForceRespawnSuicide; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    SCustomizableMaterialLookupTable customizableMaterialsLookupTable; // Offset: 0x20
};

// Original name: SSCSpawningBase
// Size: 0x38
// VTable: 0x149a34088
struct SSCSpawningBase {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float respawnTimeKilled; // Offset: 0x18
    bool pressXToRespawn; // Offset: 0x1c
    bool allowForceRespawnSuicide; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    SCustomizableMaterialLookupTable customizableMaterialsLookupTable; // Offset: 0x20
};

// Original name: SPUSpawning
// Size: 0x70
// VTable: 0x149a16ea8
struct SPUSpawning {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float respawnTimeKilled; // Offset: 0x18
    bool pressXToRespawn; // Offset: 0x1c
    bool allowForceRespawnSuicide; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    SCustomizableMaterialLookupTable customizableMaterialsLookupTable; // Offset: 0x20
    float prisonExitWaitTilBlackScreen; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    DynArray_JournalEntry* initialJournalEntries; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: DockingDoorAnimatorComponentParams
// Size: 0x58
// VTable: 0x149a41470
struct DockingDoorAnimatorComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SDockingAnimatorBaseParams DockingAnimatorParams; // Offset: 0x18
};

// Original name: DockingAnimatorComponentParams
// Size: 0x158
// VTable: 0x149a41408
struct DockingAnimatorComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SDockingAnimatorBaseParams DockingAnimatorParams; // Offset: 0x18
    bool ProvidesExclusionArea; // Offset: 0x58
    uint8_t _pad_1[0x7]; // Offset: 0x59
    Vec3 AreaExclusionDimensions; // Offset: 0x60
    bool OverridesDockingPoint; // Offset: 0x78
    uint8_t _pad_2[0x7]; // Offset: 0x79
    CryStringT* fragment; // Offset: 0x80
    uint8_t _pad_3[0x8]; // Offset: 0x88
    CryStringT* fragmentUnready; // Offset: 0x90
    uint8_t _pad_4[0x8]; // Offset: 0x98
    CryStringT* fragmentUnreadying; // Offset: 0xa0
    uint8_t _pad_5[0x8]; // Offset: 0xa8
    CryStringT* fragmentReadying; // Offset: 0xb0
    uint8_t _pad_6[0x8]; // Offset: 0xb8
    CryStringT* fragmentReady; // Offset: 0xc0
    uint8_t _pad_7[0x8]; // Offset: 0xc8
    float animationDuration; // Offset: 0xd0
    uint8_t _pad_8[0x4]; // Offset: 0xd4
    GlobalResourceAudio dockingArmExtendingLoopStart; // Offset: 0xd8
    GlobalResourceAudio dockingArmExtendingLoopStop; // Offset: 0xf8
    GlobalResourceAudio dockingArmRetractingLoopStart; // Offset: 0x118
    GlobalResourceAudio dockingArmRetractingLoopStop; // Offset: 0x138
};

// Original name: TacticScoringProfile
// Size: 0x38
// VTable: 0x1499b7510
struct TacticScoringProfile {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CommonTacticScores* tactics; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_PersonalThoughtQuickAccessWheel
// Generated DynArray for base type: PersonalThoughtQuickAccessWheel
// Size: 0x8
struct DynArray_PersonalThoughtQuickAccessWheel {
    PersonalThoughtQuickAccessWheel* m_data; // Offset: 0x0
};

// Original name: SReputationStateMissionResultModifierListParams
// Size: 0x38
// VTable: 0x149a96af0
struct SReputationStateMissionResultModifierListParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SReputationStateModifierParams* stateModifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: CtxGraph_Context
// Size: 0x78
// VTable: 0x149aa6bb0
struct CtxGraph_Context {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_CtxGraph_Component* components; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_CtxGraph_Dependency* dependencies; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
};

// Original name: UIGraph_Context
// Size: 0x98
// VTable: 0x149aa7280
struct UIGraph_Context {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_CtxGraph_Component* components; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_CtxGraph_Dependency* dependencies; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x30]; // Offset: 0x50
    UIGraph_ControllerComponent UIController; // Offset: 0x80
    ARDataType renderTarget; // Offset: 0x90
    uint8_t _pad_4[0x3]; // Offset: 0x91
    ARDataType BackBehavior; // Offset: 0x94
};

// Original name: ActorStanceDimensionsInfo
// Size: 0x140
// VTable: 0x149aadf78
struct ActorStanceDimensionsInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorMotionStateFilter stateFilter; // Offset: 0x8
    ActorStanceDimensions dimensions; // Offset: 0x58
};

// Original name: SActorForceReactionLeanConfigDef
// Size: 0x50
// VTable: 0x149a4da38
struct SActorForceReactionLeanConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float forceSmoothDuration; // Offset: 0x8
    float minLeanForceForEffort; // Offset: 0xc
    DynArray_SActorForceReactionLeanFilterDef* leanFilters; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    SActorForceReactionProceduralLeanPoseList procLeanPoseDef; // Offset: 0x40
};

// Original name: DynArray_DateTimeSchedule
// Generated DynArray for base type: DateTimeSchedule
// Size: 0x8
struct DynArray_DateTimeSchedule {
    DateTimeSchedule* m_data; // Offset: 0x0
};

// Original name: MobiGlasPersonalMessage_ShipChatScheduleEntry
// Size: 0x60
// VTable: 0x149a364f8
struct MobiGlasPersonalMessage_ShipChatScheduleEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float delayTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    MobiGlasPersonalMessage_ShipChat chatParams; // Offset: 0x10
};

// Original name: BuildingBlocks_BindingsLocalizationFromIntegerSwitch
// Size: 0xa8
// VTable: 0x149987f68
struct BuildingBlocks_BindingsLocalizationFromIntegerSwitch {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    BuildingBlocks_BindingsLocalizedBase defaultOverride; // Offset: 0x50
    CLocIdentifier* defaultValue; // Offset: 0x60
    DynArray_BuildingBlocks_IntegerLocalizedPair* values; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x70
    BuildingBlocks_BindingsIntegerBase input; // Offset: 0x98
};

// Original name: SMobiGlasAppDataPacketReferenced
// Size: 0x38
// VTable: 0x149a36000
struct SMobiGlasAppDataPacketReferenced {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MobiGlasAppData* data; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: MotionTurnSetupList
// Size: 0x38
// VTable: 0x149aad260
struct MotionTurnSetupList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MotionTurnSetupFiltered* setupList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: STargetSelectorGlobalTargetingParams
// Size: 0x68
// VTable: 0x149a55c90
struct STargetSelectorGlobalTargetingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCombatTargeting combatTargetingMethodRecord; // Offset: 0x8
    SScanTargeting scanningTargetingMethodRecord; // Offset: 0x28
    SMiningTargeting miningTargetingMethodRecord; // Offset: 0x48
};

// Original name: MissionFlow
// Size: 0x38
// VTable: 0x149970570
struct MissionFlow {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionFlowTrigger* triggers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_SSequencerSequenceTaskEntryParams
// Generated DynArray for base type: SSequencerSequenceTaskEntryParams
// Size: 0x8
struct DynArray_SSequencerSequenceTaskEntryParams {
    SSequencerSequenceTaskEntryParams* m_data; // Offset: 0x0
};

// Original name: DynArray_SStarGalaStageParams
// Generated DynArray for base type: SStarGalaStageParams
// Size: 0x8
struct DynArray_SStarGalaStageParams {
    SStarGalaStageParams* m_data; // Offset: 0x0
};

// Original name: DynArray_MeleeAttackCombo
// Generated DynArray for base type: MeleeAttackCombo
// Size: 0x8
struct DynArray_MeleeAttackCombo {
    MeleeAttackCombo* m_data; // Offset: 0x0
};

// Original name: DynArray_ControlIntInteractiveVariable
// Generated DynArray for base type: ControlIntInteractiveVariable
// Size: 0x8
struct DynArray_ControlIntInteractiveVariable {
    ControlIntInteractiveVariable* m_data; // Offset: 0x0
};

// Original name: DynArray_EntityAudioControllerRtpcSubscriberListDef
// Generated DynArray for base type: EntityAudioControllerRtpcSubscriberListDef
// Size: 0x8
struct DynArray_EntityAudioControllerRtpcSubscriberListDef {
    EntityAudioControllerRtpcSubscriberListDef* m_data; // Offset: 0x0
};

// Original name: InnerThought_Params
// Size: 0x70
// VTable: 0x149a98ff0
struct InnerThought_Params {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float fontSize; // Offset: 0x8
    bool radialSelection; // Offset: 0xc
    bool loopedSelection; // Offset: 0xd
    bool useDepthTest; // Offset: 0xe
    uint8_t _pad_1[0x1]; // Offset: 0xf
    DynArray_InnerThought_LayoutStates* states; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    InnerThought_Anim stateAnim; // Offset: 0x40
    InnerThought_Anim selectionAnim; // Offset: 0x58
};

// Original name: ConstantDOFGlobalData
// Size: 0x90
// VTable: 0x149a7ce90
struct ConstantDOFGlobalData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float movementThresholdToIgnorePlayer; // Offset: 0x8
    float rotationThresholdToDisable; // Offset: 0xc
    int32_t pierceability; // Offset: 0x10
    float nonEntityDistanceScale; // Offset: 0x14
    int32_t LODBiasOnTarget; // Offset: 0x18
    float maxRangeScale; // Offset: 0x1c
    float circleOfConfusion; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    ConstantDOFGrid gridParams; // Offset: 0x28
    ConstantDOFWeights weights; // Offset: 0x40
};

// Original name: DynArray_StringUserVariable
// Generated DynArray for base type: StringUserVariable
// Size: 0x8
struct DynArray_StringUserVariable {
    StringUserVariable* m_data; // Offset: 0x0
};

// Original name: DynArray_SCIGTestBB
// Generated DynArray for base type: SCIGTestBB
// Size: 0x8
struct DynArray_SCIGTestBB {
    SCIGTestBB* m_data; // Offset: 0x0
};

// Original name: VibrationAudioEntry
// Size: 0x148
// VTable: 0x149a11360
struct VibrationAudioEntry {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    DynArray_AudioRtpcWithBehaviour* vibrationRtpcs; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
    GlobalResourceAudio loopStart; // Offset: 0x58
    GlobalResourceAudio loopStop; // Offset: 0x78
    GlobalResourceAudio jostleEvent; // Offset: 0x98
    float jostleCooldown; // Offset: 0xb8
    float jostleThreshold; // Offset: 0xbc
    AudioRtpc jostleRtpc; // Offset: 0xc0
    DynArray_ARDataType* usedVibrationTypes; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xe8
    DynArray_float* vibrationInputModifiers; // Offset: 0x110 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x118
    ARDataType calculationType; // Offset: 0x140
    uint8_t _pad_5[0x4]; // Offset: 0x144
};

// Original name: AudioEnvironmentMovementRtpcBehavior
// Size: 0x38
// VTable: 0x149a1a590
struct AudioEnvironmentMovementRtpcBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioRtpcWithBehaviour* rtpcs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ThrusterOutputToRtpcList
// Size: 0x40
// VTable: 0x149a1cd60
struct ThrusterOutputToRtpcList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType thrusterOutput; // Offset: 0x8
    bool calculateOnlyOnPlayerVehicle; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    DynArray_AudioRtpcWithBehaviour* RTPCs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: IFCSOutputToRtpcList
// Size: 0x48
// VTable: 0x149a191d0
struct IFCSOutputToRtpcList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType ifcsOutput; // Offset: 0x8
    float defaultValue; // Offset: 0xc
    bool calculateOnlyOnPlayerVehicle; // Offset: 0x10
    bool sendToChildEmitters; // Offset: 0x11
    uint8_t _pad_1[0x6]; // Offset: 0x12
    DynArray_AudioRtpcWithBehaviour* RTPCs; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: AudioPassByRtpcParams
// Size: 0x40
// VTable: 0x1499aa288
struct AudioPassByRtpcParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioRtpcWithBehaviour* RTPCs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool setToAllProxies; // Offset: 0x38
    uint8_t _pad_2[0x7]; // Offset: 0x39
};

// Original name: DynArray_LootingItemPortSizeClass
// Generated DynArray for base type: LootingItemPortSizeClass
// Size: 0x8
struct DynArray_LootingItemPortSizeClass {
    LootingItemPortSizeClass* m_data; // Offset: 0x0
};

// Original name: DynArray_PersonalThoughtInventoryItemUIIcon
// Generated DynArray for base type: PersonalThoughtInventoryItemUIIcon
// Size: 0x8
struct DynArray_PersonalThoughtInventoryItemUIIcon {
    PersonalThoughtInventoryItemUIIcon* m_data; // Offset: 0x0
};

// Original name: TransitStationAnnouncements
// Size: 0x38
// VTable: 0x1499d87d0
struct TransitStationAnnouncements {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TransitStationAnnouncement* announcements; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_WheelAudioSurfaceMapping
// Generated DynArray for base type: WheelAudioSurfaceMapping
// Size: 0x8
struct DynArray_WheelAudioSurfaceMapping {
    WheelAudioSurfaceMapping* m_data; // Offset: 0x0
};

// Original name: DynArray_SBeamParticleAudioParams
// Generated DynArray for base type: SBeamParticleAudioParams
// Size: 0x8
struct DynArray_SBeamParticleAudioParams {
    SBeamParticleAudioParams* m_data; // Offset: 0x0
};

// Original name: GPUParticleAudioList
// Size: 0x38
// VTable: 0x1499aa170
struct GPUParticleAudioList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_GPUParticleAudio* particleAudioList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: JumpDriveAudioParams
// Size: 0x550
// VTable: 0x1499f50f8
struct JumpDriveAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_JumpDriveStateAudioMap* stateMap; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    AudioRtpc tunnelProgressRtpc; // Offset: 0x38
    AudioRtpc inJumpTunnelRtpc; // Offset: 0x58
    AudioRtpc distanceFromSplineRtpc; // Offset: 0x78
    float wallImpactSpeedThreshold; // Offset: 0x98
    float wallImpactDistanceThreshold; // Offset: 0x9c
    AudioRtpc tunnelWallImpactSpeedRtpc; // Offset: 0xa0
    GlobalResourceAudio tunnelWallImpactOneShot; // Offset: 0xc0
    GlobalResourceAudio startTunnelWallContactLoop; // Offset: 0xe0
    GlobalResourceAudio stopTunnelWallContactLoop; // Offset: 0x100
    AudioRtpc splineVelRtpc; // Offset: 0x120
    AudioRtpc distortionRtpc; // Offset: 0x140
    GlobalResourceAudio startSplineCenterLoop; // Offset: 0x160
    GlobalResourceAudio stopSplineCenterLoop; // Offset: 0x180
    GlobalResourceAudio startShipTunnelMidpointLoop; // Offset: 0x1a0
    GlobalResourceAudio stopShipTunnelMidpointLoop; // Offset: 0x1c0
    float passByLightDistanceThreshold; // Offset: 0x1e0
    uint8_t _pad_2[0x4]; // Offset: 0x1e4
    AudioRtpc passByLightDistanceNormRtpc; // Offset: 0x1e8
    AudioRtpc passByLightDotRtpc; // Offset: 0x208
    JumpDriveAudioMovementParams movementParams; // Offset: 0x228
};

// Original name: SWeaponAudioReportEnvironmentParams
// Size: 0x40
// VTable: 0x149a61308
struct SWeaponAudioReportEnvironmentParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t maxTriggers; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_SWeaponAudioReportEnvironment* reportEnvironments; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: SurfaceAudioPropertiesDefinition
// Size: 0x38
// VTable: 0x1499df380
struct SurfaceAudioPropertiesDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SurfaceAudioProperties* surfaceAudioProps; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_JumpDriveStateMusicMap
// Generated DynArray for base type: JumpDriveStateMusicMap
// Size: 0x8
struct DynArray_JumpDriveStateMusicMap {
    JumpDriveStateMusicMap* m_data; // Offset: 0x0
};

// Original name: SGalactapediaUnlockableComponentParams
// Size: 0x50
// VTable: 0x149a23f48
struct SGalactapediaUnlockableComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool unlockedByScan; // Offset: 0x18
    bool unlockedByInteraction; // Offset: 0x19
    bool unlockedByPickingUp; // Offset: 0x1a
    uint8_t _pad_1[0x5]; // Offset: 0x1b
    DynArray_SGalactapediaEntry* entriesToUnlock; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: SGalactapediaCategory
// Size: 0x48
// VTable: 0x149a37e80
struct SGalactapediaCategory {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* indexName; // Offset: 0x8
    CLocIdentifier* name; // Offset: 0x10
    DynArray_SGalactapediaEntry* entries; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: DynArray_QuantumMusicTripCategory
// Generated DynArray for base type: QuantumMusicTripCategory
// Size: 0x8
struct DynArray_QuantumMusicTripCategory {
    QuantumMusicTripCategory* m_data; // Offset: 0x0
};

// Original name: ProceduralPlanetAudioDisturbanceList
// Size: 0x38
// VTable: 0x149a10da0
struct ProceduralPlanetAudioDisturbanceList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ProceduralPlanetAudioDisturbanceDef* disturbances; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_AudioSignal
// Generated DynArray for base type: AudioSignal
// Size: 0x8
struct DynArray_AudioSignal {
    AudioSignal* m_data; // Offset: 0x0
};

// Original name: DynArray_DefaultActionsParams
// Generated DynArray for base type: DefaultActionsParams
// Size: 0x8
struct DynArray_DefaultActionsParams {
    DefaultActionsParams* m_data; // Offset: 0x0
};

// Original name: ContractClass_ServiceBeacon
// Size: 0x18
// VTable: 0x149971210
struct ContractClass_ServiceBeacon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ServiceBeaconBaseTemplateParams params; // Offset: 0x8
};

// Original name: DynArray_Investigation_Suspect
// Generated DynArray for base type: Investigation_Suspect
// Size: 0x8
struct DynArray_Investigation_Suspect {
    Investigation_Suspect* m_data; // Offset: 0x0
};

// Original name: DrugTypeToApply
// Size: 0x20
// VTable: 0x149a72f50
struct DrugTypeToApply {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConsumableSubtype consumableSubtype; // Offset: 0x8
};

// Original name: ConsumableContent
// Size: 0x28
// VTable: 0x149a25948
struct ConsumableContent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConsumableSubtype consumableSubtype; // Offset: 0x8
    float ratio; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SHealingBeamConsumableType
// Size: 0x28
// VTable: 0x149a76198
struct SHealingBeamConsumableType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConsumableSubtype consumableSubtype; // Offset: 0x8
    ARDataType valueType; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: DrugEfficacyForConsumableType
// Size: 0x38
// VTable: 0x149a72c48
struct DrugEfficacyForConsumableType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ConsumableSubtype consumableSubtype; // Offset: 0x8
    DrugEfficacy drugEfficacyForConsumableType; // Offset: 0x20
};

// Original name: DynArray_ConsumableSubtype
// Generated DynArray for base type: ConsumableSubtype
// Size: 0x8
struct DynArray_ConsumableSubtype {
    ConsumableSubtype* m_data; // Offset: 0x0
};

// Original name: DynArray_ContactHighlightStateParams
// Generated DynArray for base type: ContactHighlightStateParams
// Size: 0x8
struct DynArray_ContactHighlightStateParams {
    ContactHighlightStateParams* m_data; // Offset: 0x0
};

// Original name: DynArray_UIWorldDisplayPathParams
// Generated DynArray for base type: UIWorldDisplayPathParams
// Size: 0x8
struct DynArray_UIWorldDisplayPathParams {
    UIWorldDisplayPathParams* m_data; // Offset: 0x0
};

// Original name: SpawnDescriptions
// Size: 0x38
// VTable: 0x149a94bd0
struct SpawnDescriptions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SpawnDescriptionEntry* spawnDescriptions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ObjectiveHandler_Hauling
// Size: 0x170
// VTable: 0x14996e940
struct ObjectiveHandler_Hauling {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectivePropertyBase organization; // Offset: 0x8
    ObjectiveProperty_Output collectedCargoOutput; // Offset: 0x18
    Hauling_ObjectiveSettings objectiveSettings; // Offset: 0x28
    DynArray_HaulingOrderBase* haulingOrders; // Offset: 0x130 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x138
    ObjectivePropertyBase haulingLimitProperty; // Offset: 0x160
};

// Original name: ObjectiveProperty_Input
// Size: 0x50
// VTable: 0x14996d910
struct ObjectiveProperty_Input {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MissionProperty property; // Offset: 0x8
    ObjectiveProperty_Output linkedOutput; // Offset: 0x40
};

// Original name: DynArray_ContractEndCommsNotification
// Generated DynArray for base type: ContractEndCommsNotification
// Size: 0x8
struct DynArray_ContractEndCommsNotification {
    ContractEndCommsNotification* m_data; // Offset: 0x0
};

// Original name: SMissionLocationModule
// Size: 0x80
// VTable: 0x149975f08
struct SMissionLocationModule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool isPersistent; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    CryStringT* missionModule; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    DynArray_AbstractMissionInitParam* missionInputs; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    DynArray_MissionProperty* properties; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x58
};

// Original name: MissionPropertyValue_CombinedDataSetEntries
// Size: 0x38
// VTable: 0x149969ed0
struct MissionPropertyValue_CombinedDataSetEntries {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MissionProperty* dataSetEntryProperties; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_CraftingGameplayPropertyImplSingleStatTier_Float
// Generated DynArray for base type: CraftingGameplayPropertyImplSingleStatTier_Float
// Size: 0x8
struct DynArray_CraftingGameplayPropertyImplSingleStatTier_Float {
    CraftingGameplayPropertyImplSingleStatTier_Float* m_data; // Offset: 0x0
};

// Original name: STakedownTechnique
// Size: 0x48
// VTable: 0x149a850b8
struct STakedownTechnique {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_STakedownTechniqueLevelStats* takedownTechniqueLevelStats; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    STakedownTechniqueGains takedownTechniqueGains; // Offset: 0x38
};

// Original name: PingSettingsParams
// Size: 0x40
// VTable: 0x1499c4cb0
struct PingSettingsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxActiveDistance; // Offset: 0x8
    float cooldownRate; // Offset: 0xc
    DynArray_PingDetectionLevelParams* detectionLevelParams; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: SVaultingTechnique
// Size: 0x48
// VTable: 0x149a85038
struct SVaultingTechnique {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SVaultingTechniqueLevelStats* vaultingTechniqueLevelStats; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SVaultingTechniqueGains vaultingTechniqueGains; // Offset: 0x38
};

// Original name: SAimableGameModeParams
// Size: 0x38
// VTable: 0x1499e5840
struct SAimableGameModeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SAimableGameModeRoleParams* aimableUsers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: OperatorModeAvailabilityParams
// Size: 0x70
// VTable: 0x149a07500
struct OperatorModeAvailabilityParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType defaultMode; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_ARDataType* availableModes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_OperatorModeAvailability* masterModes; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: ContractResults
// Size: 0x50
// VTable: 0x149972928
struct ContractResults {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ContractResultBase* contractResults; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    int32_t contractBuyInAmount; // Offset: 0x38
    float timeToComplete; // Offset: 0x3c
    ContractDifficulty difficulty; // Offset: 0x40
};

// Original name: WebCustomizationGlobalParams
// Size: 0x40
// VTable: 0x1499b1308
struct WebCustomizationGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* defaultLoadoutKitName; // Offset: 0x8
    DynArray_WebCustomizationItemTypeName* typeNames; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
};

// Original name: DynArray_ItemPreview_CameraSettingsOverride
// Generated DynArray for base type: ItemPreview_CameraSettingsOverride
// Size: 0x8
struct DynArray_ItemPreview_CameraSettingsOverride {
    ItemPreview_CameraSettingsOverride* m_data; // Offset: 0x0
};

// Original name: DynArray_SHealingBeamBodyPartParams
// Generated DynArray for base type: SHealingBeamBodyPartParams
// Size: 0x8
struct DynArray_SHealingBeamBodyPartParams {
    SHealingBeamBodyPartParams* m_data; // Offset: 0x0
};

// Original name: STargetableItemTypesRecord
// Size: 0x68
// VTable: 0x149a55ac8
struct STargetableItemTypesRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_STargetableItemType* targetableItemTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_STargetableItemType* squadronTargetableItemTypes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: MasterModeExclusionGlobalParams
// Size: 0x38
// VTable: 0x149a07a60
struct MasterModeExclusionGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MasterModeExclusion* exclusions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: InventoryOpenContainerType
// Size: 0xa8
// VTable: 0x149a9e210
struct InventoryOpenContainerType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InventoryContainerGridCellSizeBase gridCellSize; // Offset: 0x8
    Vec3 minPermittedItemSize; // Offset: 0x18
    Vec3 maxPermittedItemSize; // Offset: 0x30
    bool isExternalContainer; // Offset: 0x48
    uint8_t _pad_1[0x7]; // Offset: 0x49
    Vec3 gridPosOffset; // Offset: 0x50
    int32_t maxPercentageErasedOnParentDestruction; // Offset: 0x68
    float randomDestructionDistributionExponent; // Offset: 0x6c
    float appliedForceOnParentDestruction; // Offset: 0x70
    uint8_t _pad_2[0x4]; // Offset: 0x74
    DynArray_InventoryContainerItemTypeFilter* overrideStorableItemTypes; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
};

// Original name: InventoryOpenAlwaysContainerType
// Size: 0xa8
// VTable: 0x149a9e218
struct InventoryOpenAlwaysContainerType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InventoryContainerGridCellSizeBase gridCellSize; // Offset: 0x8
    Vec3 minPermittedItemSize; // Offset: 0x18
    Vec3 maxPermittedItemSize; // Offset: 0x30
    bool isExternalContainer; // Offset: 0x48
    uint8_t _pad_1[0x7]; // Offset: 0x49
    Vec3 gridPosOffset; // Offset: 0x50
    int32_t maxPercentageErasedOnParentDestruction; // Offset: 0x68
    float randomDestructionDistributionExponent; // Offset: 0x6c
    float appliedForceOnParentDestruction; // Offset: 0x70
    uint8_t _pad_2[0x4]; // Offset: 0x74
    DynArray_InventoryContainerItemTypeFilter* overrideStorableItemTypes; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x80
};

// Original name: SSalvageRepairHighlightParams
// Size: 0xb0
// VTable: 0x149a7acc0
struct SSalvageRepairHighlightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSalvageRepairHighlightColorParams* colors; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SSalvageRepairHighlightOutlineValues validOutlineValues; // Offset: 0x38
    RGB invalidTargetColor; // Offset: 0x50
    SSalvageRepairHighlightOutlineValues invalidOutlineValues; // Offset: 0x68
    DynArray_SItemTypeFilter* filterItemTypes; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x88
};

// Original name: StatusBloodParams
// Size: 0x48
// VTable: 0x1499ffbe8
struct StatusBloodParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_OrificeBloodParams* orificeBloodParams; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float globalMinBloodInterval; // Offset: 0x38
    float bloodTimeToDryAfterDeath; // Offset: 0x3c
    float bloodToHygieneDecayMultiplier; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: DynArray_MovieClipTransformationInterpolatorParams
// Generated DynArray for base type: MovieClipTransformationInterpolatorParams
// Size: 0x8
struct DynArray_MovieClipTransformationInterpolatorParams {
    MovieClipTransformationInterpolatorParams* m_data; // Offset: 0x0
};

// Original name: ShipInsurancePolicyRecord
// Size: 0x38
// VTable: 0x149a168d0
struct ShipInsurancePolicyRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SUninsuredItem* uninsuredItemTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ItemResourceNetworkUIParams
// Size: 0x128
// VTable: 0x1499a10b8
struct ItemResourceNetworkUIParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ItemResourceNetworkTypeUIData* typeData; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ARDataType* exclusiveTypes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_float* healthRanges; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_float* wearRanges; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_EngineeringStateMessages* notificationMessages; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
    DynArray_ItemResourceNetworkMapTriggerEntry* mapTriggerArray; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x100
};

// Original name: SMFDParamsDiagnostics
// Size: 0x70
// VTable: 0x149a5bde8
struct SMFDParamsDiagnostics {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float healthThresholdDamaged; // Offset: 0x8
    float healthThresholdCritical; // Offset: 0xc
    DynArray_SItemPortDefTypes* excludedItemTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    DynArray_SItemPortDefTypes* includedItemTypes; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
};

// Original name: VehicleEditorCategoryData
// Size: 0x50
// VTable: 0x149a58700
struct VehicleEditorCategoryData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CryStringT* displayIcon; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    DynArray_SItemPortDefTypes* allowableTypes; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: VehicleEditorPortsData
// Size: 0x68
// VTable: 0x149a58bd8
struct VehicleEditorPortsData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* names; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SItemPortDefTypes* types; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SLocalPlayerShoppingPredefinedARParams
// Size: 0xe0
// VTable: 0x149a56d60
struct SLocalPlayerShoppingPredefinedARParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* debugName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SItemPortDefTypes* itemTypes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    SItemShopARParams arParams; // Offset: 0x48
};

// Original name: VehicleEditorItemStatData
// Size: 0x68
// VTable: 0x149a58578
struct VehicleEditorItemStatData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SItemPortDefTypes* itemTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ARDataType* statTypes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: AIObservableFilters
// Size: 0x38
// VTable: 0x149a93450
struct AIObservableFilters {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AIObservableFilterFlags* types; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: OperatorModeDefinitionParams
// Size: 0x38
// VTable: 0x149a07610
struct OperatorModeDefinitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_OperatorModeDefinitions* operatorModes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: PersonalThoughtForceCloseActionsParams
// Size: 0x88
// VTable: 0x149a9b198
struct PersonalThoughtForceCloseActionsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PersonalThoughtForceCloseActionList globalActions; // Offset: 0x8
    DynArray_PersonalThoughtForceCloseActionList* actionsPerGameMode; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
};

// Original name: DockingSlotVisibilityRule
// Size: 0x70
// VTable: 0x149a2f808
struct DockingSlotVisibilityRule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* modes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_DockingSlotVisibilityTagSet* tagSets; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x30]; // Offset: 0x40
};

// Original name: DynArray_LandingAnimationSetup
// Generated DynArray for base type: LandingAnimationSetup
// Size: 0x8
struct DynArray_LandingAnimationSetup {
    LandingAnimationSetup* m_data; // Offset: 0x0
};

// Original name: DynArray_ActorFallOverlayNode
// Generated DynArray for base type: ActorFallOverlayNode
// Size: 0x8
struct DynArray_ActorFallOverlayNode {
    ActorFallOverlayNode* m_data; // Offset: 0x0
};

// Original name: FidgetConfig
// Size: 0x58
// VTable: 0x149a9dc38
struct FidgetConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float RepeatTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* FragmentId; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    DynArray_Fidget* Fidgets; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
    float BreakTime; // Offset: 0x50
    uint8_t _pad_4[0x4]; // Offset: 0x54
};

// Original name: PlayerAnimatedInteractionTemplateRef
// Size: 0x20
// VTable: 0x1499a03a0
struct PlayerAnimatedInteractionTemplateRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlayerAnimatedInteractionTemplate playerAnimatedInteractionTemplate; // Offset: 0x8
};

// Original name: ChatEmotePack
// Size: 0x48
// VTable: 0x149a8a8e8
struct ChatEmotePack {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* packType; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ChatEmoteData* emotes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SandboxInfractionDefinitionTrigger
// Size: 0x20
// VTable: 0x149a97870
struct SandboxInfractionDefinitionTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InfractionDefinition sandboxInfractionDefinitionTrigger; // Offset: 0x8
};

// Original name: SInfractionGameplayTrigger
// Size: 0x20
// VTable: 0x1499684c0
struct SInfractionGameplayTrigger {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InfractionDefinition infractionDefinition; // Offset: 0x8
};

// Original name: Infraction
// Size: 0xa0
// VTable: 0x14996f0e8
struct Infraction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InfractionDefinition definition; // Offset: 0x8
    InfractionParameters parameterOverrides; // Offset: 0x20
};

// Original name: DynArray_InfractionDefinition
// Generated DynArray for base type: InfractionDefinition
// Size: 0x8
struct DynArray_InfractionDefinition {
    InfractionDefinition* m_data; // Offset: 0x0
};

// Original name: AwardService_Config
// Size: 0x68
// VTable: 0x149a8a698
struct AwardService_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AwardService_Award* Awards; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_AwardService_Award* Played; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: SApplicationFormHeadHomeworld
// Size: 0x58
// VTable: 0x149a0eb78
struct SApplicationFormHeadHomeworld {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* displayName; // Offset: 0x8
    CLocIdentifier* displayDescription; // Offset: 0x10
    CryStringT* imagePath; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    DynArray_SApplicationFormBodyTypeOption* bodyTypes; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x30
};

// Original name: SSCSignatureSystemAudioRuleset
// Size: 0x38
// VTable: 0x1499ea2f0
struct SSCSignatureSystemAudioRuleset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSCSignatureSystemAudioRule* rules; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: WorldDisplay_PlaneEnvironment
// Size: 0x58
// VTable: 0x149a308f8
struct WorldDisplay_PlaneEnvironment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType alignment; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    WorldDisplayEnvironmentColor environmentColor; // Offset: 0x10
    uint8_t segments; // Offset: 0x20
    uint8_t _pad_2[0x7]; // Offset: 0x21
    DynArray_WorldDisplay_PlaneEnvironment_Ring* rings; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x30
};

// Original name: Marker_AbilityVisibility
// Size: 0x148
// VTable: 0x149a4a930
struct Marker_AbilityVisibility {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    VisibleElement icon; // Offset: 0x8
    VisibleElement distanceText; // Offset: 0x48
    VisibleElement nameText; // Offset: 0x88
    VisibleElement objectiveText; // Offset: 0xc8
    VisibleElement offscreenIcon; // Offset: 0x108
};

// Original name: DynArray_StatusEffectBuffMacro
// Generated DynArray for base type: StatusEffectBuffMacro
// Size: 0x8
struct DynArray_StatusEffectBuffMacro {
    StatusEffectBuffMacro* m_data; // Offset: 0x0
};

// Original name: MissionScenario
// Size: 0xa0
// VTable: 0x149971b88
struct MissionScenario {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* description; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    DynArray_MissionVariableBase* variables; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x30
    DynArray_MissionScenarioCycle* cycles; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x60
    MissionScenarioSchedule schedule; // Offset: 0x88
    bool auto_create; // Offset: 0x98
    uint8_t _pad_5[0x7]; // Offset: 0x99
};

// Original name: InnerThought_LayoutGridSet
// Size: 0x38
// VTable: 0x149a98960
struct InnerThought_LayoutGridSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_InnerThought_LayoutGridSetThought* thoughts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: QuantumObstacleParams
// Size: 0x178
// VTable: 0x1499e90a8
struct QuantumObstacleParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DefaultSphereGeom defaultSphereFieldGeometry; // Offset: 0x18
    DynArray_SphereFieldGeom* sphereFieldGeometries; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    DynArray_BoxFieldGeom* boxFieldGeometries; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
    DynArray_CylinderFieldGeom* cylinderFieldGeometries; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x90
    DynArray_CapsuleFieldGeom* capsuleFieldGeometries; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xc0
    DynArray_TorusFieldGeom* torusFieldGeometries; // Offset: 0xe8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xf0
    DynArray_MeshFieldGeom* meshFieldGeometries; // Offset: 0x118 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x120
    DynArray_Texture3DFieldGeom* texture3DFieldGeometries; // Offset: 0x148 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x150
};

// Original name: BodyHealthConfig
// Size: 0x80
// VTable: 0x149a81408
struct BodyHealthConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc bleedingRtpc; // Offset: 0x8
    AudioRtpc bleedRateRtpc; // Offset: 0x28
    bool isInvulnerable; // Offset: 0x48
    bool isVulnerableOnlyToPlayer; // Offset: 0x49
    bool setDamageEffectRatioOnChildren; // Offset: 0x4a
    uint8_t _pad_1[0x5]; // Offset: 0x4b
    DynArray_BodyPartConfig* bodyPartConfigs; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x58
};

// Original name: SSCLocalPlayerMarkerTrackerComponentParams
// Size: 0x78
// VTable: 0x149a26658
struct SSCLocalPlayerMarkerTrackerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_EAMarkerTrackerBase* eaTrackersParams; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    IncapacitatedPlayerMarkerParams incapacitatedPlayerMarkerParams; // Offset: 0x48
};

// Original name: EntityComponentPointOfInterestProvider
// Size: 0x30
// VTable: 0x1499f9710
struct EntityComponentPointOfInterestProvider {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    PointOfInterestList pointsOfInterestList; // Offset: 0x18
};

// Original name: DynArray_CameraActorVibrationShakeConfig
// Generated DynArray for base type: CameraActorVibrationShakeConfig
// Size: 0x8
struct DynArray_CameraActorVibrationShakeConfig {
    CameraActorVibrationShakeConfig* m_data; // Offset: 0x0
};

// Original name: LocalPlayerTargetTrackingAutoZoomComponentParams
// Size: 0x30
// VTable: 0x149a649d0
struct LocalPlayerTargetTrackingAutoZoomComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    TargetTrackingAutoZoomDef zoomDef; // Offset: 0x18
};

// Original name: AfterburnerParams
// Size: 0x198
// VTable: 0x149a1ab98
struct AfterburnerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 afterburnAccelMultiplier; // Offset: 0x8
    Vec3 afterburnAccelMultiplierPositive; // Offset: 0x20
    Vec3 afterburnAccelMultiplierNegative; // Offset: 0x38
    bool usePerDirectionModifiers; // Offset: 0x50
    uint8_t _pad_1[0x7]; // Offset: 0x51
    Vec3 afterburnAngVelocityMultiplier; // Offset: 0x58
    Vec3 afterburnAngAccelMultiplier; // Offset: 0x70
    bool afterburnerAngCapacitorScaling; // Offset: 0x88
    uint8_t _pad_2[0x7]; // Offset: 0x89
    BezierCurve afterburnerAngCapacitorScalingCurve; // Offset: 0x90
    float afterburnAccelMultiplierControlSurface; // Offset: 0x120
    float afterburnerPreDelayTime; // Offset: 0x124
    float afterburnerRampUpTime; // Offset: 0x128
    float afterburnerRampDownTime; // Offset: 0x12c
    float afterburnerCapacitorThresholdRatio; // Offset: 0x130
    float capacitorMax; // Offset: 0x134
    float capacitorAfterburnerIdleCost; // Offset: 0x138
    float capacitorAfterburnerLinearCost; // Offset: 0x13c
    float capacitorAfterburnerAngularCost; // Offset: 0x140
    float capacitorRegenDelayAfterUse; // Offset: 0x144
    float capacitorRegenPerSec; // Offset: 0x148
    uint8_t _pad_3[0x4]; // Offset: 0x14c
    CapacitorAssignmentInputOutputDef capacitorAssignmentInputOutputRegen; // Offset: 0x150
    CapacitorAssignmentInputOutputDef capacitorAssignmentInputOutputRegenNavMode; // Offset: 0x168
    CapacitorAssignmentInputOutputDef capacitorAssignmentInputOutputUsage; // Offset: 0x180
};

// Original name: SCItemWeaponRegenPoolComponentParams
// Size: 0x70
// VTable: 0x149a73138
struct SCItemWeaponRegenPoolComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float regenFillRate; // Offset: 0x18
    float ammoLoad; // Offset: 0x1c
    bool respectsCapacitorAssignments; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    CapacitorAssignmentInputOutputDef capacitorAssignmentInputOutputRegen; // Offset: 0x28
    CapacitorAssignmentInputOutputDef capacitorAssignmentInputOutputRegenNavMode; // Offset: 0x40
    CapacitorAssignmentInputOutputDef capacitorAssignmentInputOutputAmmoLoad; // Offset: 0x58
};

// Original name: CharacterAccuracyModifiers
// Size: 0xb8
// VTable: 0x1499b7458
struct CharacterAccuracyModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AITimeSinceTargetSeen timeSinceTargetSeen; // Offset: 0x8
    float targetStanceModifier; // Offset: 0xb0
    uint8_t _pad_1[0x4]; // Offset: 0xb4
};

// Original name: WeaponMisfireDef
// Size: 0x230
// VTable: 0x149a745f0
struct WeaponMisfireDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SWeaponMisfireEntry minorMisfire; // Offset: 0x8
    SWeaponMisfireEntry majorMisfire; // Offset: 0xc0
    SWeaponMisfireEntry criticalMisfire; // Offset: 0x178
};

// Original name: SQuantumMovementParams
// Size: 0x7d8
// VTable: 0x149a54610
struct SQuantumMovementParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxSpeed; // Offset: 0x8
    float timeToMaxSpeed; // Offset: 0xc
    float useTime; // Offset: 0x10
    float rechargeTime; // Offset: 0x14
    float minJumpDistance; // Offset: 0x18
    float approachSpeed; // Offset: 0x1c
    float stopTime; // Offset: 0x20
    float phasePoint; // Offset: 0x24
    float gasCloudSpeed; // Offset: 0x28
    float gasCloudCutoff; // Offset: 0x2c
    BezierCurve vibrationPreparing; // Offset: 0x30
    BezierCurve vibrationSpeed; // Offset: 0xc0
    BezierCurve vibrationCancel; // Offset: 0x150
    BezierCurve vibrationCooldown; // Offset: 0x1e0
    float ifcsHandoverDownTime; // Offset: 0x270
    float ifcsHandoverRespoolTime; // Offset: 0x274
    SQuantumBoostAudioParams audio; // Offset: 0x278
    SQuantumBoostRotationParams rotation; // Offset: 0x3a0
    SQuantumBoostBubbleIntegrityParams_NEW bubbleIntegrity; // Offset: 0x4d8
};

// Original name: SWeaponAIDataParams
// Size: 0x1a8
// VTable: 0x149a60f18
struct SWeaponAIDataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range accuracyRange; // Offset: 0x8
    BezierCurve accuracyRangeCurve; // Offset: 0x18
    SWeaponAIShootingTimeAccuracyData shootingTimeAccuracyData; // Offset: 0xa8
    float idealCombatRange; // Offset: 0x148
    ARDataType CombatRangeCategory; // Offset: 0x14c
    float baseAccuracy; // Offset: 0x150
    float impactRadiusForFriendlyFire; // Offset: 0x154
    float firingValidationAngleTolerance; // Offset: 0x158
    float bulletBendingAngleLimit; // Offset: 0x15c
    bool canShootWhenObstructed; // Offset: 0x160
    uint8_t _pad_1[0x7]; // Offset: 0x161
    WeaponAIAimingMethod weaponAimingMethod; // Offset: 0x168
    DynArray_SWeaponActionAIParams* aiFiringActionParams; // Offset: 0x178 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x180
};

// Original name: SCItemAimableControllerParams
// Size: 0x38
// VTable: 0x1499e9498
struct SCItemAimableControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SAimableControllerHudParams hudParamsOverride; // Offset: 0x18
    float predictionAccelerationFactor; // Offset: 0x30
    uint8_t _pad_1[0x4]; // Offset: 0x34
};

// Original name: TurretInputDeflectionTimeParams
// Size: 0xa8
// VTable: 0x149a64850
struct TurretInputDeflectionTimeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInputDeflectionTimeParams angularMovement; // Offset: 0x8
};

// Original name: IfcsInputDeflectionTimeParams
// Size: 0x148
// VTable: 0x149a647f8
struct IfcsInputDeflectionTimeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SInputDeflectionTimeParams linearMovement; // Offset: 0x8
    SInputDeflectionTimeParams angularMovement; // Offset: 0xa8
};

// Original name: DynArray_ActorLookAheadRoll
// Generated DynArray for base type: ActorLookAheadRoll
// Size: 0x8
struct DynArray_ActorLookAheadRoll {
    ActorLookAheadRoll* m_data; // Offset: 0x0
};

// Original name: GlobalGasCloudVDBParams
// Size: 0xb0
// VTable: 0x1499cc9f0
struct GlobalGasCloudVDBParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalGasCloudVDB_GameplayParams gameplay; // Offset: 0x8
};

// Original name: SEntityPerceptionComponentParams
// Size: 0x38
// VTable: 0x149a02428
struct SEntityPerceptionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool ignoreHostiles; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    AIPerceptionProfile perceptionProfile; // Offset: 0x20
};

// Original name: ProcBreathingGraph
// Size: 0x58
// VTable: 0x149a6c610
struct ProcBreathingGraph {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float magnitude; // Offset: 0x8
    float magnitudeADS; // Offset: 0xc
    ProcBreathingCurve curveX; // Offset: 0x10
    ProcBreathingCurve curveY; // Offset: 0x28
    ProcBreathingCurve curveZ; // Offset: 0x40
};

// Original name: DynArray_ProcBreathingCurve
// Generated DynArray for base type: ProcBreathingCurve
// Size: 0x8
struct DynArray_ProcBreathingCurve {
    ProcBreathingCurve* m_data; // Offset: 0x0
};

// Original name: SActorForceReactionCurveConfig
// Size: 0x28
// VTable: 0x149a4bae0
struct SActorForceReactionCurveConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SActorForceReactionCurve returnCurve; // Offset: 0x8
    float attackDuration; // Offset: 0x18
    float returnDuration; // Offset: 0x1c
    float returnYieldDelay; // Offset: 0x20
    float returnYieldMagnitude; // Offset: 0x24
};

// Original name: DynArray_SActorForceReactionCurve
// Generated DynArray for base type: SActorForceReactionCurve
// Size: 0x8
struct DynArray_SActorForceReactionCurve {
    SActorForceReactionCurve* m_data; // Offset: 0x0
};

// Original name: AbilityBreathAction
// Size: 0x28
// VTable: 0x149a39540
struct AbilityBreathAction {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioBreathInterrupt audioBreathInterrupt; // Offset: 0x8
    float interruptParam; // Offset: 0x20
    bool resumeBreathingWhenAudioEnds; // Offset: 0x24
    bool forceInhaleAfterResume; // Offset: 0x25
    bool forceExhaleAfterResume; // Offset: 0x26
    uint8_t _pad_1[0x1]; // Offset: 0x27
};

// Original name: BreathingTriggerDef
// Size: 0x28
// VTable: 0x149a6c450
struct BreathingTriggerDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioBreathInterrupt audioBreathInterrupt; // Offset: 0x8
    float interruptParam; // Offset: 0x20
    bool resumeBreathingWhenAudioEnds; // Offset: 0x24
    bool forceInhaleAfterResume; // Offset: 0x25
    bool forceExhaleAfterResume; // Offset: 0x26
    uint8_t _pad_1[0x1]; // Offset: 0x27
};

// Original name: DynArray_SCurve
// Generated DynArray for base type: SCurve
// Size: 0x8
struct DynArray_SCurve {
    SCurve* m_data; // Offset: 0x0
};

// Original name: ShakeComponentParams
// Size: 0x50
// VTable: 0x149a2d340
struct ShakeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool enabled; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    SUnifiedShakeParamsRecord unifiedShakeParams; // Offset: 0x20
    SBezierCurveRecord distanceIntensityCurve; // Offset: 0x38
};

// Original name: BuildingBlocks_TimingFunctionCurveRecord
// Size: 0x20
// VTable: 0x14998d120
struct BuildingBlocks_TimingFunctionCurveRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SBezierCurveRecord curveRecord; // Offset: 0x8
};

// Original name: ActorLocomotionRotateParams
// Size: 0x30
// VTable: 0x149ab1630
struct ActorLocomotionRotateParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxDeltaAngleRateNormal; // Offset: 0x8
    float maxDeltaAngleRateCatchup; // Offset: 0xc
    float maxDeltaAngleRateCombat; // Offset: 0x10
    float maxDeltaAngleRateExactPositioning; // Offset: 0x14
    SBezierCurveRecord turnSpeedCurveDefault; // Offset: 0x18
};

// Original name: SWeaponSimplifiedHeatParamsTemperatureCurveParams
// Size: 0x40
// VTable: 0x149a60320
struct SWeaponSimplifiedHeatParamsTemperatureCurveParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SBezierCurveRecord temperatureCurve; // Offset: 0x8
    Vec2 xAxisMinMaxValues; // Offset: 0x20
    Vec2 yAxisMinMaxValues; // Offset: 0x30
};

// Original name: SWeaponSimplifiedHeatGlowParams
// Size: 0x40
// VTable: 0x149a603f8
struct SWeaponSimplifiedHeatGlowParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SBezierCurveRecord glowCurve; // Offset: 0x8
    RGB glowColor; // Offset: 0x20
    float maxGlowValue; // Offset: 0x38
    float fadeoutTime; // Offset: 0x3c
};

// Original name: SControlledEntityAutoCraneCurve
// Size: 0x48
// VTable: 0x1499cf5a8
struct SControlledEntityAutoCraneCurve {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SBezierCurveRecord autoStartupCurve; // Offset: 0x8
    float fullStartupDistance; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    SBezierCurveRecord autoSlowdownCurve; // Offset: 0x28
    float fullSlowdownDistance; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
};

// Original name: WeaponPoseXYZCurvesMaxValues
// Size: 0x1d0
// VTable: 0x149aabdd8
struct WeaponPoseXYZCurvesMaxValues {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xMaxValue; // Offset: 0x8
    float yMaxValue; // Offset: 0xc
    float zMaxValue; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    SXYZCurves curves; // Offset: 0x18
};

// Original name: SHandsRecoilTimeModifier
// Size: 0x380
// VTable: 0x149a5e440
struct SHandsRecoilTimeModifier {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float recoilModifierTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SXYZCurves positionMaxValueCurves; // Offset: 0x10
    SXYZCurves rotationMaxValueCurves; // Offset: 0x1c8
};

// Original name: SDecayTimesAndCurves
// Size: 0x80
// VTable: 0x149a5e390
struct SDecayTimesAndCurves {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 decayTimeMultipliers; // Offset: 0x8
    SDecayCurveMaxValues decayCurveMaxValues; // Offset: 0x20
    SXYZCurves decayCurves; // Offset: 0x70
};

// Original name: IntoxicationIFCSModifierParams
// Size: 0x3a8
// VTable: 0x149a64de8
struct IntoxicationIFCSModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ToxiInputModifierDistortion rotationDistortion; // Offset: 0x8
    ToxiInputModifierAxis yaw; // Offset: 0x148
    ToxiInputModifierAxis pitch; // Offset: 0x170
    ToxiInputModifierAxis roll; // Offset: 0x198
    ToxiInputModifierDelay rotationDelay; // Offset: 0x1c0
    ToxiInputModifierDistortion linearDistortion; // Offset: 0x1d8
    ToxiInputModifierAxis forward; // Offset: 0x318
    ToxiInputModifierAxis left; // Offset: 0x340
    ToxiInputModifierAxis up; // Offset: 0x368
    ToxiInputModifierDelay linearDelay; // Offset: 0x390
};

// Original name: IntoxicationWheeledModifierParams
// Size: 0x188
// VTable: 0x149a64f60
struct IntoxicationWheeledModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ToxiInputModifierDistortion distortion; // Offset: 0x8
    ToxiInputModifierDelay delay; // Offset: 0x148
    ToxiInputModifierAxis yaw; // Offset: 0x160
};

// Original name: IntoxicationBoatModifierParams
// Size: 0x308
// VTable: 0x149a65010
struct IntoxicationBoatModifierParams {
    uint8_t _pad_0[0x188]; // Offset: 0x0
    ToxiInputModifierDistortion distortion; // Offset: 0x188
    ToxiInputModifierDelay delay; // Offset: 0x2c8
    ToxiInputModifierAxis yaw; // Offset: 0x2e0
};

// Original name: IntoxicationTurretModifierParams
// Size: 0x1b0
// VTable: 0x149a64eb8
struct IntoxicationTurretModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ToxiInputModifierDistortion distortion; // Offset: 0x8
    ToxiInputModifierDelay delay; // Offset: 0x148
    ToxiInputModifierAxis yaw; // Offset: 0x160
    ToxiInputModifierAxis pitch; // Offset: 0x188
};

// Original name: ItemResourceSignatureParams
// Size: 0x48
// VTable: 0x1499a7fa8
struct ItemResourceSignatureParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemResourceSignatureEntry EMSignature; // Offset: 0x8
    ItemResourceSignatureEntry IRSignature; // Offset: 0x28
};

// Original name: GlobalJumpPointEffectParams
// Size: 0xf8
// VTable: 0x149a12d80
struct GlobalJumpPointEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    GlobalJumpPointTuningParams tuningParams; // Offset: 0x8
    GlobalJumpPointOpeningParams openingParams; // Offset: 0x18
    GlobalJumpPointClosingParams closingParams; // Offset: 0xe0
};

// Original name: SAimRecoilNoiseCurves
// Size: 0x28
// VTable: 0x149a5ea68
struct SAimRecoilNoiseCurves {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float yawNoiseMaxValue; // Offset: 0x8
    float pitchNoiseMaxValue; // Offset: 0xc
    float rollNoiseMaxValue; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    SYawPitchRollCurves yawPitchRollNoiseCurves; // Offset: 0x18
};

// Original name: JumpDriveFlightParams
// Size: 0x6d8
// VTable: 0x1499f5c80
struct JumpDriveFlightParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SJumpDriveFlightRotationParams rotation; // Offset: 0x8
    SJumpDriveFlightLinearParams linear; // Offset: 0x90
    SJumpDriveFlightSteeringParams steering; // Offset: 0xe8
    SVehicleAfterburnerParams afterburner; // Offset: 0x228
    SJumpDriveFlightTurbulenceParams turbulence; // Offset: 0x4f0
    float respoolTime; // Offset: 0x6d0
    float exitRecoverySpeed; // Offset: 0x6d4
};

// Original name: JumpSystemVibrationParams
// Size: 0x5e8
// VTable: 0x149a155e0
struct JumpSystemVibrationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    JumpPointVibrationParams jumpPoint; // Offset: 0x8
    JumpDriveVibrationParams jumpDrive; // Offset: 0x18
    JumpTunnelVibrationParams jumpTunnel; // Offset: 0x3a0
};

// Original name: GravlevParams
// Size: 0x370
// VTable: 0x149a055e8
struct GravlevParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    HoverPlane hoverPlane; // Offset: 0x18
    SuspensionSprings springs; // Offset: 0x40
    HoverHeight height; // Offset: 0xf0
    HoverTilting tilting; // Offset: 0x130
    HoverCollisions collisions; // Offset: 0x1d8
    HoverHandling handling; // Offset: 0x1f0
    AudioRtpc hoverHeightRtpc; // Offset: 0x330
    AudioRtpc hoverHeightDifferentialRtpc; // Offset: 0x350
};

// Original name: CinematicFlythroughPoint
// Size: 0x70
// VTable: 0x149a93930
struct CinematicFlythroughPoint {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 position; // Offset: 0x8
    Quat rotation; // Offset: 0x20
    float duration; // Offset: 0x50
    ARDataType relativeTo; // Offset: 0x54
    CameraTransitionInterpolationCurveRecord interpolationToPoint; // Offset: 0x58
};

// Original name: CameraTransitionParams
// Size: 0x30
// VTable: 0x149a93838
struct CameraTransitionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float transitionTime; // Offset: 0x8
    bool isCinematic; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    float nearFaceDistanceSq; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    CameraTransitionInterpolationCurveRecord interpolationToPoint; // Offset: 0x18
};

// Original name: SWeaponProceduralHeadRecoilCurveConfigDef
// Size: 0xa8
// VTable: 0x149a5f328
struct SWeaponProceduralHeadRecoilCurveConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SVecWithNoiseParams position; // Offset: 0x8
    SVecWithNoiseParams rotation; // Offset: 0x48
    SAmplitudeFreqencyDecayCurves curves; // Offset: 0x88
    float headRecoilTime; // Offset: 0x98
    float frequency; // Offset: 0x9c
    float smoothingSpeed; // Offset: 0xa0
    uint8_t _pad_1[0x4]; // Offset: 0xa4
};

// Original name: DynArray_ControlHint_DisplayInfoSet
// Generated DynArray for base type: ControlHint_DisplayInfoSet
// Size: 0x8
struct DynArray_ControlHint_DisplayInfoSet {
    ControlHint_DisplayInfoSet* m_data; // Offset: 0x0
};

// Original name: DialogueBundlePreset
// Size: 0x58
// VTable: 0x149a8cee0
struct DialogueBundlePreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DialogueBundleEmbedded dialogueBundle; // Offset: 0x8
};

// Original name: DialogueBundlePresetWeighted
// Size: 0x58
// VTable: 0x149a8cf40
struct DialogueBundlePresetWeighted {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DialogueBundleWeightedEmbedded weightedDialogueBundle; // Offset: 0x8
};

// Original name: VehicleCareerList
// Size: 0x38
// VTable: 0x1499aab20
struct VehicleCareerList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VehicleCareer* careerList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SPerkReputationParams
// Size: 0x48
// VTable: 0x149a970e0
struct SPerkReputationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationScopeParams scope; // Offset: 0x8
    SReputationStandingParams standing; // Offset: 0x20
    SPerkParamsBase perk; // Offset: 0x38
};

// Original name: PartialContractRewardRepAdjustment
// Size: 0x28
// VTable: 0x1499729a8
struct PartialContractRewardRepAdjustment {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationScopeParams reputationScope; // Offset: 0x8
    float reputationRewardMultiplier; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
};

// Original name: SReputationScopeContextUI
// Size: 0x50
// VTable: 0x149a96278
struct SReputationScopeContextUI {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationScopeParams scope; // Offset: 0x8
    DynArray_SReputationContextBBPropertyParams* propertiesBB; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: RelationStandingParams
// Size: 0x58
// VTable: 0x149a97620
struct RelationStandingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationScopeParams scope; // Offset: 0x8
    SReputationStandingParams standing; // Offset: 0x20
    RelationMarkerParams markerParams; // Offset: 0x38
};

// Original name: ReputationRewardBaseDef
// Size: 0x38
// VTable: 0x149a97758
struct ReputationRewardBaseDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationScopeParams scope; // Offset: 0x8
    SReputationRewardAmount reward; // Offset: 0x20
};

// Original name: RadarSystemGlobalParams
// Size: 0x108
// VTable: 0x1499c46b8
struct RadarSystemGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint32_t paramsVersion; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SignatureSystemGlobalParams signatureSystemParams; // Offset: 0x10
};

// Original name: ItemAwardWeightingsRecord
// Size: 0x38
// VTable: 0x149972720
struct ItemAwardWeightingsRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ItemAwardWeightings* itemAwardStructure; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: S42CommendationRules
// Size: 0x38
// VTable: 0x149a36d40
struct S42CommendationRules {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_S42CommendationRulesEntry* rules; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_BuildingBlocks_StaticVariableArray
// Generated DynArray for base type: BuildingBlocks_StaticVariableArray
// Size: 0x8
struct DynArray_BuildingBlocks_StaticVariableArray {
    BuildingBlocks_StaticVariableArray* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_StaticArrayDataArray
// Size: 0x48
// VTable: 0x14998aa20
struct BuildingBlocks_StaticArrayDataArray {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_BuildingBlocks_StaticArrayEntry* values; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: FoleyItem
// Size: 0x128
// VTable: 0x149a68548
struct FoleyItem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FoleyBone bone; // Offset: 0x8
    FoleyBone trackedBoneOverride; // Offset: 0x20
    FoleyBone referenceBone; // Offset: 0x38
    CryStringT* velocityRTPCName; // Offset: 0x50
    uint8_t _pad_1[0x8]; // Offset: 0x58
    float velocityRTPCMinimum; // Offset: 0x60
    float velocityRTPCMaximum; // Offset: 0x64
    CryStringT* collisionImpactRTPCName; // Offset: 0x68
    uint8_t _pad_2[0x8]; // Offset: 0x70
    CryStringT* collisionScuffRTPCName; // Offset: 0x78
    uint8_t _pad_3[0x8]; // Offset: 0x80
    CryStringT* equipmentMassRTPCName; // Offset: 0x88
    uint8_t _pad_4[0x8]; // Offset: 0x90
    DynArray_FoleyOneShot* oneShots; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xa0
    DynArray_FoleyLoop* loops; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xd0
    DynArray_FoleyCollision* collisions; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x100
};

// Original name: SCItemControllableGroupParams
// Size: 0x58
// VTable: 0x149a06bd0
struct SCItemControllableGroupParams {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_SCItemPriorityGroupParam* priorityGroups; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x40]; // Offset: 0x18
};

// Original name: PingSharedParams
// Size: 0x98
// VTable: 0x1499c55b0
struct PingSharedParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PingBlobLifeTime blobLifeTime; // Offset: 0x8
    float blobOffsetScalar; // Offset: 0x18
    float blobSizeScalar; // Offset: 0x1c
    float blobScaleMinPixels; // Offset: 0x20
    float blobScaleMaxPixels; // Offset: 0x24
    float blobScaleFixedResolution; // Offset: 0x28
    float blobScaleFov; // Offset: 0x2c
    PingContactLifeTime contactLifeTime; // Offset: 0x30
    float pingWaveAcceleration; // Offset: 0x40
    float pingWaveJerk; // Offset: 0x44
    float pingWaveJerkDistance; // Offset: 0x48
    bool useADSMode; // Offset: 0x4c
    uint8_t _pad_1[0x3]; // Offset: 0x4d
    float ADSFovFocusAngleMultiplier; // Offset: 0x50
    uint8_t _pad_2[0x4]; // Offset: 0x54
    BlobVFXSharedParams blobVFXParams; // Offset: 0x58
    PingSFXSharedParams pingSFXParams; // Offset: 0x68
    PingVFXSharedParams pingVFXParams; // Offset: 0x78
    PingTypeParams pingTypeParams; // Offset: 0x88
};

// Original name: BuildingBlocks_StyleEntry
// Size: 0xb0
// VTable: 0x149981af8
struct BuildingBlocks_StyleEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_BuildingBlocks_StyleConditionList* conditionsList; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_BuildingBlocks_FieldModifierBase* modifiers; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    DynArray_BuildingBlocks_FieldTransitionBase* transitions; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_4[0x30]; // Offset: 0x80
};

// Original name: DynArray_BuildingBlocks_Keyframe
// Generated DynArray for base type: BuildingBlocks_Keyframe
// Size: 0x8
struct DynArray_BuildingBlocks_Keyframe {
    BuildingBlocks_Keyframe* m_data; // Offset: 0x0
};

// Original name: LightningBehavior
// Size: 0x38
// VTable: 0x1499794c0
struct LightningBehavior {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_LightningBehavior_Effect* effects; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: RadarDisplayProviderParams
// Size: 0x70
// VTable: 0x149a040c0
struct RadarDisplayProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float displayRange; // Offset: 0x18
    ARDataType overridePlaneAlignment; // Offset: 0x1c
    ARDataType overrideFollowOrientation; // Offset: 0x20
    ARDataType overrideUseInputOrientation; // Offset: 0x24
    WorldDisplayRadar radarDisplaySettings; // Offset: 0x28
    WorldDisplayEnvironment environmentSettings; // Offset: 0x40
    WorldDisplayEnvironment collapsedEnvironmentSettings; // Offset: 0x58
};

// Original name: DynArray_WeaponProceduralClipsSetUp
// Generated DynArray for base type: WeaponProceduralClipsSetUp
// Size: 0x8
struct DynArray_WeaponProceduralClipsSetUp {
    WeaponProceduralClipsSetUp* m_data; // Offset: 0x0
};

// Original name: RaSTaRLibrary
// Size: 0x38
// VTable: 0x14999d5d0
struct RaSTaRLibrary {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_RaSTaRLibraryCategory* categories; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DialogueContentBank
// Size: 0x68
// VTable: 0x149a8c890
struct DialogueContentBank {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DialogueRealm realm; // Offset: 0x8
    Character character; // Offset: 0x20
    DynArray_DialogueContent* contents; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: PlayerGroupManagerGlobalParams
// Size: 0x6d0
// VTable: 0x149aa2660
struct PlayerGroupManagerGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    PlayerGroupManagerObjectsLocStringParams objectLocStrings; // Offset: 0x8
    PlayerGroupManagerLocStringParams localizationStringParams; // Offset: 0x18
    PlayerGroupManagerNotificationsParams notificationsParams; // Offset: 0xb0
};

// Original name: SCharacterCustomizerDialogueEntry
// Size: 0x70
// VTable: 0x149a0cbb8
struct SCharacterCustomizerDialogueEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryGUID* guid; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_SCharacterCustomizerWildlineCondition* conditions; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    GlobalResourceAudio audioTrigger; // Offset: 0x48
    bool playOnlyOnce; // Offset: 0x68
    uint8_t _pad_3[0x7]; // Offset: 0x69
};

// Original name: DynArray_HeadMotionConfig
// Generated DynArray for base type: HeadMotionConfig
// Size: 0x8
struct DynArray_HeadMotionConfig {
    HeadMotionConfig* m_data; // Offset: 0x0
};

// Original name: DynArray_HandholdParams
// Generated DynArray for base type: HandholdParams
// Size: 0x8
struct DynArray_HandholdParams {
    HandholdParams* m_data; // Offset: 0x0
};

// Original name: SeatUserActorCDIKMapping
// Size: 0x50
// VTable: 0x149a7d9e8
struct SeatUserActorCDIKMapping {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorSkeletonConfig userSkeleton; // Offset: 0x8
    DynArray_SeatUserActorCDIKConfig* defaultCDIKTargets; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SAttachableObjectContainerSpawnerParams
// Size: 0x48
// VTable: 0x1499a5960
struct SAttachableObjectContainerSpawnerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SAttachableObjectContainerData* ObjectContainers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SCarryableIKInteractionList
// Size: 0x38
// VTable: 0x149a8edc0
struct SCarryableIKInteractionList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCarryableIKInteraction* ikInteractions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AuxiliaryVehicleScreenEntityComponentParams
// Size: 0xe8
// VTable: 0x149a38f20
struct AuxiliaryVehicleScreenEntityComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCItemSeatDashboardScreen dashboardScreen; // Offset: 0x18
};

// Original name: DynArray_SCItemSeatDashboardScreen
// Generated DynArray for base type: SCItemSeatDashboardScreen
// Size: 0x8
struct DynArray_SCItemSeatDashboardScreen {
    SCItemSeatDashboardScreen* m_data; // Offset: 0x0
};

// Original name: TakeDownConfig
// Size: 0x58
// VTable: 0x149aa0228
struct TakeDownConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_TakeDownParams* takeDownParams; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    bool isTakedownImmune; // Offset: 0x38
    uint8_t _pad_2[0x3]; // Offset: 0x39
    float takedownStimulusRange; // Offset: 0x3c
    QTERequestConfig QTEConfig; // Offset: 0x40
};

// Original name: WeaponMisfireFixConfig
// Size: 0x40
// VTable: 0x149a746a0
struct WeaponMisfireFixConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputPromptConfig misfireInputPromptConfig; // Offset: 0x8
    QTERequestConfig misfireFixQTEConfig; // Offset: 0x20
    float transitionToIdleTime; // Offset: 0x38
    uint8_t _pad_1[0x4]; // Offset: 0x3c
};

// Original name: SSequencerPickupCarryableTaskParams
// Size: 0x30
// VTable: 0x149a8e990
struct SSequencerPickupCarryableTaskParams {
    uint8_t _pad_0[0x20]; // Offset: 0x0
    SCarryableGrip grip; // Offset: 0x20
};

// Original name: DynArray_SCarryableGrip
// Generated DynArray for base type: SCarryableGrip
// Size: 0x8
struct DynArray_SCarryableGrip {
    SCarryableGrip* m_data; // Offset: 0x0
};

// Original name: VehicleLandingGearSystem
// Size: 0x80
// VTable: 0x1499ab7a8
struct VehicleLandingGearSystem {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fragment; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* fragmentDeploy; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* fragmentRetract; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    CryStringT* fragmentCompress; // Offset: 0x38
    uint8_t _pad_4[0x8]; // Offset: 0x40
    float altitudeToExtraGears; // Offset: 0x48
    uint8_t _pad_5[0x4]; // Offset: 0x4c
    DynArray_VehicleLandingGear* gears; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x58
};

// Original name: PlayerAnimatedInteractionConfig
// Size: 0x88
// VTable: 0x149a8c3c0
struct PlayerAnimatedInteractionConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WalkToAlignParams walkToAlignParams; // Offset: 0x8
    DynArray_PlayerAnimatedInteractionFiltered* PlayerAnimatedInteractionStanceConfigs; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    DynArray_AnimatedAction* AnimActionList; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
};

// Original name: DynArray_ProceduralAnimationSequence
// Generated DynArray for base type: ProceduralAnimationSequence
// Size: 0x8
struct DynArray_ProceduralAnimationSequence {
    ProceduralAnimationSequence* m_data; // Offset: 0x0
};

// Original name: EntranceDisplayComponentParams
// Size: 0x30
// VTable: 0x149a83b90
struct EntranceDisplayComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SEntrancesDef entrancesRecord; // Offset: 0x18
};

// Original name: DynArray_LadderAccessPointParams
// Generated DynArray for base type: LadderAccessPointParams
// Size: 0x8
struct DynArray_LadderAccessPointParams {
    LadderAccessPointParams* m_data; // Offset: 0x0
};

// Original name: ActorProceduralRecoilModifiers
// Size: 0x3d8
// VTable: 0x149a72218
struct ActorProceduralRecoilModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SActorProceduralHandsRecoilModifiers actorProceduralHandsRecoilModifiers; // Offset: 0x8
    SActorProceduralAimRecoilModifiers actorProceduralAimRecoilModifiers; // Offset: 0x1e0
    SActorProceduralBodyRecoilModifiers actorProceduralBodyRecoilModifiers; // Offset: 0x2b0
    SActorProceduralHeadRecoilModifiers actorProceduralHeadRecoilModifiers; // Offset: 0x2d8
};

// Original name: SCDynamicLightingRigComponentParams
// Size: 0x68
// VTable: 0x1499e0b60
struct SCDynamicLightingRigComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SCDynamicLightingRigGlobalParams settings; // Offset: 0x18
    bool enabled; // Offset: 0x30
    uint8_t _pad_1[0x7]; // Offset: 0x31
    DynArray_SCDynamicRigLightEnabledParams* enabledLights; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: FontSupportParams
// Size: 0x50
// VTable: 0x1499ca408
struct FontSupportParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* letterMaterial; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    InnerThought_Config fontParams; // Offset: 0x28
};

// Original name: ProceduralAimRigRecord
// Size: 0x50
// VTable: 0x149aaf698
struct ProceduralAimRigRecord {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t aimLayer; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_ProcAimRigConfig* aimRigs; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: DynArray_EAObjectiveControlPhase
// Generated DynArray for base type: EAObjectiveControlPhase
// Size: 0x8
struct DynArray_EAObjectiveControlPhase {
    EAObjectiveControlPhase* m_data; // Offset: 0x0
};

// Original name: SActorForceReactionProceduralVanduulLeanPoseList
// Size: 0x38
// VTable: 0x149a4d900
struct SActorForceReactionProceduralVanduulLeanPoseList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SActorForceReactionProceduralVanduulLeanPose* poseTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SActorForceReactionProceduralXianLeanPoseList
// Size: 0x38
// VTable: 0x149a4d960
struct SActorForceReactionProceduralXianLeanPoseList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SActorForceReactionProceduralXianLeanPose* poseTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SActorForceReactionProceduralHumanLeanPoseList
// Size: 0x38
// VTable: 0x149a4d8a0
struct SActorForceReactionProceduralHumanLeanPoseList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SActorForceReactionProceduralHumanLeanPose* poseTypes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: BuildingBlocks_BindingsIntegerFromNumberCompare
// Size: 0x98
// VTable: 0x149987080
struct BuildingBlocks_BindingsIntegerFromNumberCompare {
    uint8_t _pad_0[0x50]; // Offset: 0x0
    int64_t default_; /* default */ // Offset: 0x50
    DynArray_BuildingBlocks_NumberCompareStatement* statements; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
    BuildingBlocks_BindingsNumberBase input; // Offset: 0x88
};

// Original name: CockpitResponse
// Size: 0x50
// VTable: 0x1499b36c8
struct CockpitResponse {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* concept_; /* concept */ // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool canPlayWhenLanded; // Offset: 0x18
    bool canPlayWhenRacing; // Offset: 0x19
    uint8_t _pad_2[0x6]; // Offset: 0x1a
    DynArray_CockpitResponseVariation* variations; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: SHelmetStateMachineParams
// Size: 0x48
// VTable: 0x149a00500
struct SHelmetStateMachineParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType stateMachine; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_SHelmetStateBaseParams* states; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    ARDataType startState; // Offset: 0x40
    uint8_t _pad_3[0x4]; // Offset: 0x44
};

// Original name: DynArray_SCItemControlPriorityTable
// Generated DynArray for base type: SCItemControlPriorityTable
// Size: 0x8
struct DynArray_SCItemControlPriorityTable {
    SCItemControlPriorityTable* m_data; // Offset: 0x0
};

// Original name: SpecialEventDatabase
// Size: 0x38
// VTable: 0x149aa5ce0
struct SpecialEventDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SpecialEventDay* days; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SEAUIScoreboardComponentParams
// Size: 0x80
// VTable: 0x149a1fbd8
struct SEAUIScoreboardComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SScoreboard* scoreboards; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    ContextMenu contextMenu; // Offset: 0x48
};

// Original name: ActorDuckingParams
// Size: 0xd0
// VTable: 0x149a9c218
struct ActorDuckingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* heightRefBone; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* hipBone; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    CryStringT* headLowpassBone; // Offset: 0x28
    uint8_t _pad_3[0x8]; // Offset: 0x30
    float refBoneDesiredClearance; // Offset: 0x38
    uint8_t _pad_4[0x4]; // Offset: 0x3c
    Vec3 collisionCheckOrigin; // Offset: 0x40
    float collisionCheckDistance; // Offset: 0x58
    float minDuckHeight; // Offset: 0x5c
    DuckPose noWeaponPoseParams; // Offset: 0x60
    DuckPose stockedPoseParams; // Offset: 0x80
    DynArray_SpineBone* spine; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xa8
};

// Original name: ItemTypeInfo
// Size: 0x68
// VTable: 0x149aa7cb0
struct ItemTypeInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* typeName; // Offset: 0x8
    bool showInPlayerAssetManager; // Offset: 0x10
    uint8_t _pad_1[0x7]; // Offset: 0x11
    ItemTypeCategoryMap categoryMap; // Offset: 0x18
};

// Original name: GameDifficultyModifiers
// Size: 0x38
// VTable: 0x149a0a010
struct GameDifficultyModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DifficultyLevelParams* difficulties; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ContextualCommunicationConfig
// Size: 0x38
// VTable: 0x14997df60
struct ContextualCommunicationConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ContextualCommunicationResponse* responseEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: HudColor_Palette
// Size: 0x78
// VTable: 0x149aa1270
struct HudColor_Palette {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* Name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_HudColor_Entry* StandardEntries; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_HudColor_CustomEntry* CustomEntries; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
};

// Original name: AudioValueOutputSetup
// Size: 0x38
// VTable: 0x149a95c40
struct AudioValueOutputSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioValueOutput* outputs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SHackingDifficultyPresetOverride
// Size: 0xa8
// VTable: 0x149a2bc48
struct SHackingDifficultyPresetOverride {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t boardWidthOverride; // Offset: 0x8
    int32_t boardHeightOverride; // Offset: 0xc
    float timelimitOverride; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_int32_t* linkGroupsOverride; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    int32_t minSpawnPointsCountOverride; // Offset: 0x48
    int32_t maxSpawnPointsCountOverride; // Offset: 0x4c
    float defenseAlertDurationOverride; // Offset: 0x50
    int32_t seedOverride; // Offset: 0x54
    ARDataType codeOnlyInputFlagOverride; // Offset: 0x58
    uint8_t _pad_3[0x4]; // Offset: 0x5c
    SHackingCodeInputModifiersParams codeInputModifiersOverride; // Offset: 0x60
    int32_t finalStageRepetitionsOverride; // Offset: 0x70
    uint8_t _pad_4[0x4]; // Offset: 0x74
    DynArray_SHackingThreatLevelParams* threatLevelsOverride; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x80
};

// Original name: SHackingThreatLevelsPreset
// Size: 0x40
// VTable: 0x149a2b968
struct SHackingThreatLevelsPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t finalStageRepetitions; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_SHackingThreatLevelParams* threatLevels; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: DynArray_CameraLensGhostSet
// Generated DynArray for base type: CameraLensGhostSet
// Size: 0x8
struct DynArray_CameraLensGhostSet {
    CameraLensGhostSet* m_data; // Offset: 0x0
};

// Original name: SRenderToTextureViewParams
// Size: 0x128
// VTable: 0x1499f8690
struct SRenderToTextureViewParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* FlashString; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    bool EnableFlashColourCorrection; // Offset: 0x28
    uint8_t _pad_2[0x7]; // Offset: 0x29
    CryStringT* OverrideMaterial; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
    float AspectRatio; // Offset: 0x40
    float MipSelectionBias; // Offset: 0x44
    bool Active; // Offset: 0x48
    bool EnableExposureControl; // Offset: 0x49
    bool IsStaticContent; // Offset: 0x4a
    bool EnableSSDO; // Offset: 0x4b
    bool EnableSubsurfaceScattering; // Offset: 0x4c
    bool EnableTAA; // Offset: 0x4d
    ARDataType AcceptedRenderType; // Offset: 0x4e
    uint8_t _pad_4[0x1]; // Offset: 0x4f
    Vec3 LightDirection; // Offset: 0x50
    RGB SunColour; // Offset: 0x68
    RGB AmbientColour; // Offset: 0x80
    SSilhouetteParamsDef SilhouetteParams; // Offset: 0x98
    bool enableSunLight; // Offset: 0xe0
    bool EnableCubemapBackdrop; // Offset: 0xe1
    bool EnableSkyboxRendering; // Offset: 0xe2
    bool EnableLightWeightNodesRendering; // Offset: 0xe3
    bool DisablePortalCulling; // Offset: 0xe4
    bool DisableVisareaCulling; // Offset: 0xe5
    bool DisableLODCulling; // Offset: 0xe6
    bool DisableTransparencySorting; // Offset: 0xe7
    bool DisableRecursiveRTTs; // Offset: 0xe8
    uint8_t _pad_5[0x3]; // Offset: 0xe9
    float ObjectFadeDistance; // Offset: 0xec
    ARDataType imageSource; // Offset: 0xf0
    ARDataType OutputType; // Offset: 0xf4
    uint8_t _pad_6[0x3]; // Offset: 0xf5
    DynArray_SRenderToTextureRenderLayerParams* RenderLayers; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x100
};

// Original name: SCItemGasProducerConsumerParams
// Size: 0x60
// VTable: 0x149a14f18
struct SCItemGasProducerConsumerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SGasProducerConsumerEntryParams* producerConsumerParams; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    bool autoAssignToRoom; // Offset: 0x48
    uint8_t _pad_2[0x3]; // Offset: 0x49
    float duration; // Offset: 0x4c
    SGasPressureRangeParams atmosphericPressureRange; // Offset: 0x50
};

// Original name: ActorToxicGasParams
// Size: 0x38
// VTable: 0x1499ff8f0
struct ActorToxicGasParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ToxicGasDef* toxicGases; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCItemGasTankParams
// Size: 0x60
// VTable: 0x149a14ff8
struct SCItemGasTankParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SGasMass* tankComposition; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    double recipientIdealPressure; // Offset: 0x48
    double recipientTransferRate; // Offset: 0x50
    double selfRefillRate; // Offset: 0x58
};

// Original name: SAtmosphericCompositionParams
// Size: 0x38
// VTable: 0x14997a010
struct SAtmosphericCompositionParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SGasAtmosphereEntryParams* gases; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ActorStatusUIData
// Size: 0xe0
// VTable: 0x1499fe580
struct ActorStatusUIData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CLocIdentifier* lifeExpectancyWarning; // Offset: 0x8
    CLocIdentifier* downedRescueNotification; // Offset: 0x10
    ActorStatusIncapacitatedUIData incapacitatedWarningStrings; // Offset: 0x18
    DynArray_ActorStatusUIWarning* actorStatusWarnings; // Offset: 0x70 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x78
    HealthIconData healthIconData; // Offset: 0xa0
};

// Original name: ActorStaminaComponent
// Size: 0x1e8
// VTable: 0x149a3cef8
struct ActorStaminaComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BreathableOxygenParams oxygenGasParams; // Offset: 0x8
    DynArray_BreathableGasParams* breathableGasesParams; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x60
    StaminaCostParams staminaCostParams; // Offset: 0x88
    HudFeedbackParams hudFeedbackParams; // Offset: 0x110
    BreathingHelperParams breathingHelper; // Offset: 0x1a8
    NpcBreathingParams npcBreathingParams; // Offset: 0x1d8
};

// Original name: SubHarvestableMultiConfigManual
// Size: 0x58
// VTable: 0x1499efd00
struct SubHarvestableMultiConfigManual {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SubHarvestableMultiConfig multiConfigManual; // Offset: 0x8
};

// Original name: SubHarvestableMultiConfigRecord
// Size: 0x58
// VTable: 0x1499efca0
struct SubHarvestableMultiConfigRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SubHarvestableMultiConfig multiConfig; // Offset: 0x8
};

// Original name: AnimationGraph_Timeline
// Size: 0x50
// VTable: 0x149aa5f10
struct AnimationGraph_Timeline {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* timerID; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    uint32_t frameRate; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    DynArray_AnimationGraph_Track* tracks; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x28
};

// Original name: StatusMaskedRetriggerSetup
// Size: 0x20
// VTable: 0x1499fd5e8
struct StatusMaskedRetriggerSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType statusType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    StatusTriggerBase statusTrigger; // Offset: 0x10
};

// Original name: ActorStatusData
// Size: 0x50
// VTable: 0x1499fd440
struct ActorStatusData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType actorStatusType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    StatusTriggerBase statusTrigger; // Offset: 0x10
    DynArray_StatusEffectTrigger* statusEffectTriggers; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: SActorLocomotionFidgetDef
// Size: 0x40
// VTable: 0x149ab1cd8
struct SActorLocomotionFidgetDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool enable; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_SActorLocomotionFidgetStateFilteredDef* stateDefs; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: AnimationCombineVariable
// Size: 0x70
// VTable: 0x1499a27a0
struct AnimationCombineVariable {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    Range range; // Offset: 0x18
    float defaultValue; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    AnimationVariableInterpolation defaultInterpolation; // Offset: 0x30
    DynArray_AnimationVariableLink* links; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: AnimationJointMovement
// Size: 0x78
// VTable: 0x1499a2a60
struct AnimationJointMovement {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* joint; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_AnimationJointBaseRotation* rotations; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_AnimationJointBaseTranslation* translations; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
};

// Original name: EntityComponentPowerConnection
// Size: 0x100
// VTable: 0x149a08418
struct EntityComponentPowerConnection {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float PowerBase; // Offset: 0x18
    float PowerDraw; // Offset: 0x1c
    float TimeToReachDrawRequest; // Offset: 0x20
    int32_t SafeguardPriority; // Offset: 0x24
    bool DisplayedInPoweredItemList; // Offset: 0x28
    bool IsThrottleable; // Offset: 0x29
    bool IsOverclockable; // Offset: 0x2a
    uint8_t _pad_1[0x1]; // Offset: 0x2b
    float OverclockThresholdMin; // Offset: 0x2c
    float OverclockThresholdMax; // Offset: 0x30
    float OverpowerPerformance; // Offset: 0x34
    float OverclockPerformance; // Offset: 0x38
    float PowerToEM; // Offset: 0x3c
    float DecayRateOfEM; // Offset: 0x40
    float WarningDelayTime; // Offset: 0x44
    float WarningDisplayTime; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    CLocIdentifier* MisfireItemTypeLocID; // Offset: 0x50
    SMisfireGenerationParams MisfireGenerationParams; // Offset: 0x58
    SMisfireEvents MisfireEvents; // Offset: 0x68
};

// Original name: AIVisualFieldProfile
// Size: 0x38
// VTable: 0x149a93700
struct AIVisualFieldProfile {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AIContextualVisualFieldProfile* profile; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ChatSystemOptions
// Size: 0x48
// VTable: 0x149a5c248
struct ChatSystemOptions {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ChatChannelFilterRecord chatChannelFilterRecord; // Offset: 0x18
    VoiceChannelSettingsRecord voiceChannelSettingsRecord; // Offset: 0x30
};

// Original name: PersonalInnerThoughtActionRulePreset
// Size: 0x38
// VTable: 0x149a997e0
struct PersonalInnerThoughtActionRulePreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActionRuleParams* rules; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_Announcement
// Generated DynArray for base type: Announcement
// Size: 0x8
struct DynArray_Announcement {
    Announcement* m_data; // Offset: 0x0
};

// Original name: ConversationBank
// Size: 0x48
// VTable: 0x149a8d248
struct ConversationBank {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* region; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_Conversation* conversations; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: PersonalThoughtContextualActionsMenusParams
// Size: 0x68
// VTable: 0x149a9aac8
struct PersonalThoughtContextualActionsMenusParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PersonalThoughtContextualActionsMenu* contextualMenus; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_PersonalThoughtGameModeDef* gameModeDef; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: DynArray_SpectatorModeParams
// Generated DynArray for base type: SpectatorModeParams
// Size: 0x8
struct DynArray_SpectatorModeParams {
    SpectatorModeParams* m_data; // Offset: 0x0
};

// Original name: SOverrideControlledEntityCameraParams
// Size: 0x60
// VTable: 0x1499cfe88
struct SOverrideControlledEntityCameraParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool shouldOverride; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    SControlledEntityCameraParams cameraData; // Offset: 0x10
};

// Original name: CameraOrbitEntityConfig
// Size: 0x578
// VTable: 0x149a01340
struct CameraOrbitEntityConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
    DynArray_ActorCameraOffsetFiltered* actorOffsetConfig; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x550
};

// Original name: CameraOrbitPointConfig
// Size: 0x548
// VTable: 0x149a012e8
struct CameraOrbitPointConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
};

// Original name: CameraOrbitSpectatorFollowConfig
// Size: 0x578
// VTable: 0x149a01630
struct CameraOrbitSpectatorFollowConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
    DynArray_ActorCameraOffsetFiltered* actorOffsetConfig; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x550
};

// Original name: CameraOrbitSpectatorFollowVehicleConfig
// Size: 0x578
// VTable: 0x149a01638
struct CameraOrbitSpectatorFollowVehicleConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
    DynArray_ActorCameraOffsetFiltered* actorOffsetConfig; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x550
};

// Original name: CameraOrbitFPSDeathCamConfig
// Size: 0x578
// VTable: 0x149a01768
struct CameraOrbitFPSDeathCamConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
    DynArray_ActorCameraOffsetFiltered* actorOffsetConfig; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x550
};

// Original name: CameraOrbitSCItemSeatConfig
// Size: 0x578
// VTable: 0x149a013f8
struct CameraOrbitSCItemSeatConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
    DynArray_ActorCameraOffsetFiltered* actorOffsetConfig; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x550
};

// Original name: CameraOrbitPassengerSCItemSeatConfig
// Size: 0x578
// VTable: 0x149a01400
struct CameraOrbitPassengerSCItemSeatConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
    DynArray_ActorCameraOffsetFiltered* actorOffsetConfig; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x550
};

// Original name: CameraOrbitConfig
// Size: 0x548
// VTable: 0x149a012b0
struct CameraOrbitConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
};

// Original name: CameraOrbitEntityCinematicConfig
// Size: 0x5b0
// VTable: 0x149a013f0
struct CameraOrbitEntityCinematicConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
    DynArray_ActorCameraOffsetFiltered* actorOffsetConfig; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x550
    DynArray_OrbitEntityCinematicEvent* cinematicEvents; // Offset: 0x578 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x580
    int32_t expiryViewIndex; // Offset: 0x5a8
    float expiryAutomaticDollySpeed; // Offset: 0x5ac
};

// Original name: SSCLocalPlayerCameraComponentParams
// Size: 0x48
// VTable: 0x149a48450
struct SSCLocalPlayerCameraComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_Camera* views; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SEntityComponentZoneCamerasParams
// Size: 0x78
// VTable: 0x1499ede28
struct SEntityComponentZoneCamerasParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_Camera* views; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_Camera* QTViews; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: PostureDatabase
// Size: 0x38
// VTable: 0x14997db00
struct PostureDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PostureGroup* Groups; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SWeaponStats
// Size: 0x3c8
// VTable: 0x1499ded40
struct SWeaponStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t fireRate; // Offset: 0x8
    float fireRateMultiplier; // Offset: 0xc
    float damageMultiplier; // Offset: 0x10
    float damageOverTimeMultiplier; // Offset: 0x14
    float projectileSpeedMultiplier; // Offset: 0x18
    int32_t pellets; // Offset: 0x1c
    int32_t burstShots; // Offset: 0x20
    int32_t ammoCost; // Offset: 0x24
    float ammoCostMultiplier; // Offset: 0x28
    float heatGenerationMultiplier; // Offset: 0x2c
    float soundRadiusMultiplier; // Offset: 0x30
    float chargeTimeMultiplier; // Offset: 0x34
    SRecoilModifier recoilModifier; // Offset: 0x38
    SSpreadModifier spreadModifier; // Offset: 0x350
    SAimModifier aimModifier; // Offset: 0x370
    SRegenConsumerModifier regenModifier; // Offset: 0x390
    SSalvageModifier salvageModifier; // Offset: 0x3a8
    bool useAlternateProjectileVisuals; // Offset: 0x3c0
    bool useAugmentedRealityProjectiles; // Offset: 0x3c1
    uint8_t _pad_1[0x6]; // Offset: 0x3c2
};

// Original name: EntityClassCraftingData
// Size: 0x28
// VTable: 0x1499b97e8
struct EntityClassCraftingData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    EntityClassRawMaterialCraftingData rawMaterialData; // Offset: 0x8
    EntityClassGameplayPropertiesCraftingData gameplayPropertiesData; // Offset: 0x18
};

// Original name: PlayerChoice_Library
// Size: 0x38
// VTable: 0x149a90560
struct PlayerChoice_Library {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PlayerChoice_OptionList* optionLists; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ActorSomaticShakingParams
// Size: 0x108
// VTable: 0x1499ff798
struct ActorSomaticShakingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorSomaticShakeParams shiveringParams; // Offset: 0x8
    ActorSomaticShakeParams armsLockShakeParams; // Offset: 0x88
};

// Original name: SCItemSuitArmorParams
// Size: 0x170
// VTable: 0x1499fbd60
struct SCItemSuitArmorParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DamageResistanceMacro damageResistance; // Offset: 0x18
    DynArray_BodyPart* protectedBodyParts; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x38
    WearMovementMultipliers wearMovementMultipliers; // Offset: 0x60
    FoleyFootstepDefinition automaticFootstepDef; // Offset: 0x78
    FoleyFootstepDefinition automaticFootstepDefNLPC; // Offset: 0x90
    FoleyFootstepDefinition foleyDef; // Offset: 0xa8
    FoleyFootstepDefinition foleyDefNLPC; // Offset: 0xc0
    FoleySuitAmbienceDefinition suitAmbienceDef; // Offset: 0xd8
    CryStringT* hitEffectLibName; // Offset: 0xf0
    uint8_t _pad_2[0x8]; // Offset: 0xf8
    CryStringT* remoteHitEffectLibName; // Offset: 0x100
    uint8_t _pad_3[0x8]; // Offset: 0x108
    ActorAimLimits actorAimLimits; // Offset: 0x110
    DynArray_ItemSuitArmorSignatureParams* signatureParams; // Offset: 0x128 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x130
    MoveViewRestrictionPenalty restrictedMoveViewPenalty; // Offset: 0x158
};

// Original name: AsteroidFieldShapeLinkParams
// Size: 0x80
// VTable: 0x14999f398
struct AsteroidFieldShapeLinkParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* shapeLinkName; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    int32_t rngSeed; // Offset: 0x38
    uint8_t viewDistRatio; // Offset: 0x3c
    uint8_t lodRatio; // Offset: 0x3d
    uint8_t _pad_2[0x2]; // Offset: 0x3e
    AsteroidFieldComposition composition; // Offset: 0x40
    float noiseAmplitude; // Offset: 0x58
    float noiseGranularity; // Offset: 0x5c
    float densityScale; // Offset: 0x60
    float noiseRoughness; // Offset: 0x64
    float falloffCeiling; // Offset: 0x68
    float shapeStrength; // Offset: 0x6c
    float noiseFrequencyX; // Offset: 0x70
    float noiseFrequencyY; // Offset: 0x74
    float noiseFrequencyZ; // Offset: 0x78
    uint8_t _pad_3[0x4]; // Offset: 0x7c
};

// Original name: CraftingGameplayPropertyImpl_SingleStat_Int
// Size: 0x50
// VTable: 0x1499b9388
struct CraftingGameplayPropertyImpl_SingleStat_Int {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingMaterialStatTypeRecord scaledByStat; // Offset: 0x8
    DynArray_CraftingGameplayPropertyImplSingleStatTier_Int* tiers; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SHackingCodeParamsPreset
// Size: 0x98
// VTable: 0x149a2c820
struct SHackingCodeParamsPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SHackingCodeErrorEntry* errorEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SHackingCodeCommandEntry* commandEntries; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_SHackingCodeSystemLogEntry* systemLogEntries; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: SCItemObservableGroupParams
// Size: 0xa0
// VTable: 0x149a06fd8
struct SCItemObservableGroupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_SCItemObservableScreenParams* screens; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x88]; // Offset: 0x18
};

// Original name: DynArray_ScanDisplaySectionParams
// Generated DynArray for base type: ScanDisplaySectionParams
// Size: 0x8
struct DynArray_ScanDisplaySectionParams {
    ScanDisplaySectionParams* m_data; // Offset: 0x0
};

// Original name: AudioBreathStyle
// Size: 0x3d0
// VTable: 0x149a6d388
struct AudioBreathStyle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorBreathingStyleStartup* firstBreathCustomisation; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ARDataType VO2InputParam; // Offset: 0x38
    float minInputValue; // Offset: 0x3c
    float maxInputValue; // Offset: 0x40
    float InputFallingPredictionTime; // Offset: 0x44
    float InputRisingPredictionTime; // Offset: 0x48
    bool allowBreathShortening; // Offset: 0x4c
    uint8_t _pad_2[0x3]; // Offset: 0x4d
    BezierCurve VO2FromInput; // Offset: 0x50
    float maxVO2FallRate; // Offset: 0xe0
    float maxVO2RiseRate; // Offset: 0xe4
    BezierCurve durationFromVO2; // Offset: 0xe8
    BezierCurve volumeFromVO2; // Offset: 0x178
    BezierCurve inhaleExhaleRatioFromVO2Delta; // Offset: 0x208
    BezierCurve durationVolumeScaleFromVO2Delta; // Offset: 0x298
    float minVolume; // Offset: 0x328
    float maxVolume; // Offset: 0x32c
    float maxVolumeDrop; // Offset: 0x330
    float maxVolumeRise; // Offset: 0x334
    float minDuration; // Offset: 0x338
    float maxDuration; // Offset: 0x33c
    float maxDurationDrop; // Offset: 0x340
    float maxDurationRise; // Offset: 0x344
    GlobalResourceAudio audioEventOnEnter; // Offset: 0x348
    GlobalResourceAudio audioEventOnExit; // Offset: 0x368
    DynArray_GlobalResourceAudio* audioEvents; // Offset: 0x388 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x390
    AudioBreathInterrupt landingInterrupt; // Offset: 0x3b8
};

// Original name: SReputationJournalGroupParams
// Size: 0x38
// VTable: 0x149a96dc0
struct SReputationJournalGroupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SReputationStandingJournalEntryParams* standingEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: PersonalThoughtQuickAccessWheels
// Size: 0x50
// VTable: 0x149a9b0b0
struct PersonalThoughtQuickAccessWheels {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float mouseCursorRadius; // Offset: 0x8
    float nonMouseCursorRadius; // Offset: 0xc
    DynArray_PersonalThoughtQuickAccessWheel* quickAccessWheels; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    float angularSelectWheelRadius; // Offset: 0x40
    float angularSelectWheelRadiusSubmenu; // Offset: 0x44
    float angularSelectWheelRadiusV2; // Offset: 0x48
    float angularSelectWheelRadiusSubmenuV2; // Offset: 0x4c
};

// Original name: DynArray_SReputationStateMissionResultModifierListParams
// Generated DynArray for base type: SReputationStateMissionResultModifierListParams
// Size: 0x8
struct DynArray_SReputationStateMissionResultModifierListParams {
    SReputationStateMissionResultModifierListParams* m_data; // Offset: 0x0
};

// Original name: DynArray_CtxGraph_Context
// Generated DynArray for base type: CtxGraph_Context
// Size: 0x8
struct DynArray_CtxGraph_Context {
    CtxGraph_Context* m_data; // Offset: 0x0
};

// Original name: DynArray_ActorStanceDimensionsInfo
// Generated DynArray for base type: ActorStanceDimensionsInfo
// Size: 0x8
struct DynArray_ActorStanceDimensionsInfo {
    ActorStanceDimensionsInfo* m_data; // Offset: 0x0
};

// Original name: ContractPrerequisite_DateSchedule
// Size: 0x38
// VTable: 0x149973070
struct ContractPrerequisite_DateSchedule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DateTimeSchedule* availableDateSchedule; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_MobiGlasPersonalMessage_ShipChatScheduleEntry
// Generated DynArray for base type: MobiGlasPersonalMessage_ShipChatScheduleEntry
// Size: 0x8
struct DynArray_MobiGlasPersonalMessage_ShipChatScheduleEntry {
    MobiGlasPersonalMessage_ShipChatScheduleEntry* m_data; // Offset: 0x0
};

// Original name: EntityAudioControllerRtpcSubscriberParams
// Size: 0x78
// VTable: 0x1499aa1f8
struct EntityAudioControllerRtpcSubscriberParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_AudioRtpc* rtpcs; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_EntityAudioControllerRtpcSubscriberListDef* rtpcLists; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
};

// Original name: EntityComponentVehicleAudioPointParams
// Size: 0x138
// VTable: 0x149a115c8
struct EntityComponentVehicleAudioPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceAudio loopStart; // Offset: 0x18
    GlobalResourceAudio loopStop; // Offset: 0x38
    GlobalResourceAudio soundSimOnOneshot; // Offset: 0x58
    GlobalResourceAudio soundSimOffOneshot; // Offset: 0x78
    GlobalResourceAudio shipAudioOnOneshot; // Offset: 0x98
    GlobalResourceAudio shipAudioOffOneshot; // Offset: 0xb8
    DynArray_AudioRtpc* rtpcs; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0xe0
    DynArray_EntityAudioControllerRtpcSubscriberListDef* rtpcLists; // Offset: 0x108 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x110
};

// Original name: InnerThought_InteractionSystemConfig
// Size: 0x30
// VTable: 0x149a99288
struct InnerThought_InteractionSystemConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minDistance; // Offset: 0x8
    float maxDistance; // Offset: 0xc
    float rotationRate; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    InnerThought_Params innerThought; // Offset: 0x18
};

// Original name: InnerThought_LegacyUseSystemConfig
// Size: 0x38
// VTable: 0x149a993a8
struct InnerThought_LegacyUseSystemConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float targetDistance; // Offset: 0x8
    float minDistance; // Offset: 0xc
    float maxDistance; // Offset: 0x10
    float rotationRate; // Offset: 0x14
    float translationRate; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    InnerThought_Params innerThought; // Offset: 0x20
};

// Original name: InnerThought_ConversationSystemConfig
// Size: 0x78
// VTable: 0x149a991b8
struct InnerThought_ConversationSystemConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float translationRate; // Offset: 0x8
    float rotationRate; // Offset: 0xc
    float minDistance; // Offset: 0x10
    float maxDistance; // Offset: 0x14
    float maxHorizontalAngle; // Offset: 0x18
    float maxVerticalAngle; // Offset: 0x1c
    ARDataType bone; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    Vec3 boneOffset; // Offset: 0x28
    Deg3 rotation; // Offset: 0x40
    InnerThought_Params innerThought; // Offset: 0x60
};

// Original name: UserVariablesComponentParams
// Size: 0x110
// VTable: 0x1499947e8
struct UserVariablesComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool AlwaysUseDefaultValues; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    DynArray_FloatUserVariable* floats; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    DynArray_IntUserVariable* ints; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
    DynArray_BoolUserVariable* bools; // Offset: 0x80 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x88
    DynArray_StringUserVariable* strings; // Offset: 0xb0 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xb8
    DynArray_LocStringUserVariable* locStrings; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xe8
};

// Original name: SEntityComponentCIGTestAParams
// Size: 0x950
// VTable: 0x1499db9f0
struct SEntityComponentCIGTestAParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool Bool_0; // Offset: 0x18
    bool Bool_1; // Offset: 0x19
    uint8_t _pad_1[0x6]; // Offset: 0x1a
    DynArray_bool* Bool_2; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
    DynArray_bool* Bool_3; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x58
    int8_t SInt8_0; // Offset: 0x80
    int8_t SInt8_1; // Offset: 0x81
    uint8_t _pad_4[0x6]; // Offset: 0x82
    DynArray_int8_t* SInt8_2; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x90
    DynArray_int8_t* SInt8_3; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xc0
    int16_t SInt16_0; // Offset: 0xe8
    int16_t SInt16_1; // Offset: 0xea
    uint8_t _pad_7[0x4]; // Offset: 0xec
    DynArray_int16_t* SInt16_2; // Offset: 0xf0 // Pointer to DynArray struct
    uint8_t _pad_8[0x28]; // Offset: 0xf8
    DynArray_int16_t* SInt16_3; // Offset: 0x120 // Pointer to DynArray struct
    uint8_t _pad_9[0x28]; // Offset: 0x128
    int32_t SInt32_0; // Offset: 0x150
    int32_t SInt32_1; // Offset: 0x154
    DynArray_int32_t* SInt32_2; // Offset: 0x158 // Pointer to DynArray struct
    uint8_t _pad_10[0x28]; // Offset: 0x160
    DynArray_int32_t* SInt32_3; // Offset: 0x188 // Pointer to DynArray struct
    uint8_t _pad_11[0x28]; // Offset: 0x190
    int64_t SInt64_0; // Offset: 0x1b8
    int64_t SInt64_1; // Offset: 0x1c0
    DynArray_int64_t* SInt64_2; // Offset: 0x1c8 // Pointer to DynArray struct
    uint8_t _pad_12[0x28]; // Offset: 0x1d0
    DynArray_int64_t* SInt64_3; // Offset: 0x1f8 // Pointer to DynArray struct
    uint8_t _pad_13[0x28]; // Offset: 0x200
    uint8_t UInt8_0; // Offset: 0x228
    uint8_t UInt8_1; // Offset: 0x229
    uint8_t _pad_14[0x6]; // Offset: 0x22a
    DynArray_uint8_t* UInt8_2; // Offset: 0x230 // Pointer to DynArray struct
    uint8_t _pad_15[0x28]; // Offset: 0x238
    DynArray_uint8_t* UInt8_3; // Offset: 0x260 // Pointer to DynArray struct
    uint8_t _pad_16[0x28]; // Offset: 0x268
    uint16_t UInt16_0; // Offset: 0x290
    uint16_t UInt16_1; // Offset: 0x292
    uint8_t _pad_17[0x4]; // Offset: 0x294
    DynArray_uint16_t* UInt16_2; // Offset: 0x298 // Pointer to DynArray struct
    uint8_t _pad_18[0x28]; // Offset: 0x2a0
    DynArray_uint16_t* UInt16_3; // Offset: 0x2c8 // Pointer to DynArray struct
    uint8_t _pad_19[0x28]; // Offset: 0x2d0
    uint32_t UInt32_0; // Offset: 0x2f8
    uint32_t UInt32_1; // Offset: 0x2fc
    DynArray_uint32_t* UInt32_2; // Offset: 0x300 // Pointer to DynArray struct
    uint8_t _pad_20[0x28]; // Offset: 0x308
    DynArray_uint32_t* UInt32_3; // Offset: 0x330 // Pointer to DynArray struct
    uint8_t _pad_21[0x28]; // Offset: 0x338
    uint64_t UInt64_0; // Offset: 0x360
    uint64_t UInt64_1; // Offset: 0x368
    DynArray_uint64_t* UInt64_2; // Offset: 0x370 // Pointer to DynArray struct
    uint8_t _pad_22[0x28]; // Offset: 0x378
    DynArray_uint64_t* UInt64_3; // Offset: 0x3a0 // Pointer to DynArray struct
    uint8_t _pad_23[0x28]; // Offset: 0x3a8
    float Float_0; // Offset: 0x3d0
    float Float_1; // Offset: 0x3d4
    DynArray_float* Float_2; // Offset: 0x3d8 // Pointer to DynArray struct
    uint8_t _pad_24[0x28]; // Offset: 0x3e0
    DynArray_float* Float_3; // Offset: 0x408 // Pointer to DynArray struct
    uint8_t _pad_25[0x28]; // Offset: 0x410
    double Double_0; // Offset: 0x438
    double Double_1; // Offset: 0x440
    DynArray_double* Double_2; // Offset: 0x448 // Pointer to DynArray struct
    uint8_t _pad_26[0x28]; // Offset: 0x450
    DynArray_double* Double_3; // Offset: 0x478 // Pointer to DynArray struct
    uint8_t _pad_27[0x28]; // Offset: 0x480
    ARDataType Enum_0; // Offset: 0x4a8
    ARDataType Enum_1; // Offset: 0x4ac
    DynArray_ARDataType* Enum_2; // Offset: 0x4b0 // Pointer to DynArray struct
    uint8_t _pad_28[0x28]; // Offset: 0x4b8
    DynArray_ARDataType* Enum_3; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_29[0x28]; // Offset: 0x4e8
    CryStringT* String_0; // Offset: 0x510
    uint8_t _pad_30[0x8]; // Offset: 0x518
    CryStringT* String_1; // Offset: 0x520
    uint8_t _pad_31[0x8]; // Offset: 0x528
    DynArray_CryStringT* String_2; // Offset: 0x530 // Pointer to DynArray struct
    uint8_t _pad_32[0x28]; // Offset: 0x538
    DynArray_CryStringT* String_3; // Offset: 0x560 // Pointer to DynArray struct
    uint8_t _pad_33[0x28]; // Offset: 0x568
    CryStringT* FilePath_0; // Offset: 0x590
    uint8_t _pad_34[0x8]; // Offset: 0x598
    CryStringT* FilePath_1; // Offset: 0x5a0
    uint8_t _pad_35[0x8]; // Offset: 0x5a8
    DynArray_CryStringT* FilePath_2; // Offset: 0x5b0 // Pointer to DynArray struct
    uint8_t _pad_36[0x28]; // Offset: 0x5b8
    DynArray_CryStringT* FilePath_3; // Offset: 0x5e0 // Pointer to DynArray struct
    uint8_t _pad_37[0x28]; // Offset: 0x5e8
    CryStringT* VFX_0; // Offset: 0x610
    uint8_t _pad_38[0x8]; // Offset: 0x618
    CryStringT* VFX_1; // Offset: 0x620
    uint8_t _pad_39[0x8]; // Offset: 0x628
    DynArray_CryStringT* VFX_2; // Offset: 0x630 // Pointer to DynArray struct
    uint8_t _pad_40[0x28]; // Offset: 0x638
    DynArray_CryStringT* VFX_3; // Offset: 0x660 // Pointer to DynArray struct
    uint8_t _pad_41[0x28]; // Offset: 0x668
    CLocIdentifier* LocId_0; // Offset: 0x690
    CLocIdentifier* LocId_1; // Offset: 0x698
    DynArray_CLocIdentifier* LocId_2; // Offset: 0x6a0 // Pointer to DynArray struct
    uint8_t _pad_42[0x28]; // Offset: 0x6a8
    DynArray_CLocIdentifier* LocId_3; // Offset: 0x6d0 // Pointer to DynArray struct
    uint8_t _pad_43[0x28]; // Offset: 0x6d8
    SCIGTestBase wpTestBase_0; // Offset: 0x700
    SCIGTestBase wpTestBase_1; // Offset: 0x710
    DynArray_SCIGTestBase* wpTestBase_2; // Offset: 0x720 // Pointer to DynArray struct
    uint8_t _pad_44[0x28]; // Offset: 0x728
    DynArray_SCIGTestBase* wpTestBase_3; // Offset: 0x750 // Pointer to DynArray struct
    uint8_t _pad_45[0x28]; // Offset: 0x758
    SCIGTestA wpTestA_0; // Offset: 0x780
    SCIGTestA wpTestA_1; // Offset: 0x790
    DynArray_SCIGTestA* wpTestA_2; // Offset: 0x7a0 // Pointer to DynArray struct
    uint8_t _pad_46[0x28]; // Offset: 0x7a8
    DynArray_SCIGTestA* wpTestA_3; // Offset: 0x7d0 // Pointer to DynArray struct
    uint8_t _pad_47[0x28]; // Offset: 0x7d8
    SCIGTestBase osTestBase_0; // Offset: 0x800
    SCIGTestBase osTestBase_1; // Offset: 0x810
    DynArray_SCIGTestBase* osTestBase_2; // Offset: 0x820 // Pointer to DynArray struct
    uint8_t _pad_48[0x28]; // Offset: 0x828
    DynArray_SCIGTestBase* osTestBase_3; // Offset: 0x850 // Pointer to DynArray struct
    uint8_t _pad_49[0x28]; // Offset: 0x858
    SCIGTestBB osTestBB_0; // Offset: 0x880
    SCIGTestBB osTestBB_1; // Offset: 0x890
    DynArray_SCIGTestBB* osTestBB_2; // Offset: 0x8a0 // Pointer to DynArray struct
    uint8_t _pad_50[0x28]; // Offset: 0x8a8
    DynArray_SCIGTestBB* osTestBB_3; // Offset: 0x8d0 // Pointer to DynArray struct
    uint8_t _pad_51[0x28]; // Offset: 0x8d8
    SCIGTestA osTestA; // Offset: 0x900
    SCIGTestAA osTestAA; // Offset: 0x910
    SCIGTestAAA osTestAAA; // Offset: 0x920
    SCIGTestB osTestB; // Offset: 0x930
    SCIGTestC osTestC; // Offset: 0x940
};

// Original name: DynArray_VibrationAudioEntry
// Generated DynArray for base type: VibrationAudioEntry
// Size: 0x8
struct DynArray_VibrationAudioEntry {
    VibrationAudioEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_AudioEnvironmentMovementRtpcBehavior
// Generated DynArray for base type: AudioEnvironmentMovementRtpcBehavior
// Size: 0x8
struct DynArray_AudioEnvironmentMovementRtpcBehavior {
    AudioEnvironmentMovementRtpcBehavior* m_data; // Offset: 0x0
};

// Original name: DynArray_ThrusterOutputToRtpcList
// Generated DynArray for base type: ThrusterOutputToRtpcList
// Size: 0x8
struct DynArray_ThrusterOutputToRtpcList {
    ThrusterOutputToRtpcList* m_data; // Offset: 0x0
};

// Original name: DynArray_IFCSOutputToRtpcList
// Generated DynArray for base type: IFCSOutputToRtpcList
// Size: 0x8
struct DynArray_IFCSOutputToRtpcList {
    IFCSOutputToRtpcList* m_data; // Offset: 0x0
};

// Original name: AudioPassByComponentParams
// Size: 0x1b8
// VTable: 0x1499aa510
struct AudioPassByComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    GlobalResourceAudio loopStart; // Offset: 0x18
    GlobalResourceAudio loopStop; // Offset: 0x38
    GlobalResourceAudio oneShot; // Offset: 0x58
    float chargeMax; // Offset: 0x78
    float dischargeTime; // Offset: 0x7c
    float chargeThreshold; // Offset: 0x80
    float minChargeForPassByMusicEvent; // Offset: 0x84
    float normalizedSpeed; // Offset: 0x88
    float modifier; // Offset: 0x8c
    float minTimeBetweenOneShots; // Offset: 0x90
    uint8_t _pad_1[0x4]; // Offset: 0x94
    AudioRtpc timeSinceLastOneShotRtpc; // Offset: 0x98
    AudioPassByRtpcParams shiftRtpc; // Offset: 0xb8
    AudioPassByRtpcParams shiftChargeRtpc; // Offset: 0xf8
    AudioPassByRtpcParams relativeVelocityRtpc; // Offset: 0x138
    AudioPassByRtpcParams relativeVelocityAccelerationRtpc; // Offset: 0x178
};

// Original name: TransitDisplayPanelStationAnnouncements
// Size: 0x30
// VTable: 0x1499d89a0
struct TransitDisplayPanelStationAnnouncements {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    TransitStationAnnouncements announcements; // Offset: 0x8
    bool postDepartureAnnouncement; // Offset: 0x20
    uint8_t _pad_1[0x3]; // Offset: 0x21
    float postDepartureAlertTime; // Offset: 0x24
    bool preArrivalAnnouncement; // Offset: 0x28
    uint8_t _pad_2[0x3]; // Offset: 0x29
    float preArrivalAlertTime; // Offset: 0x2c
};

// Original name: WheelAudioSurfaceMap
// Size: 0x110
// VTable: 0x149a117a8
struct WheelAudioSurfaceMap {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WheelAudioParams generic; // Offset: 0x8
    WheelAudioParams default_; /* default */ // Offset: 0x50
    WheelAudioParams invalidSurface; // Offset: 0x98
    DynArray_WheelAudioSurfaceMapping* surfaceMappings; // Offset: 0xe0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0xe8
};

// Original name: SBeamEffectParams
// Size: 0xa8
// VTable: 0x149a5f9c0
struct SBeamEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* helper; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool killParticlesOnDeactivate; // Offset: 0x18
    uint8_t _pad_2[0x7]; // Offset: 0x19
    GlobalResourceParticle particleEffect; // Offset: 0x20
    GlobalResourceParticle thirdPersonParticleEffect; // Offset: 0x38
    ARDataType modifierSource; // Offset: 0x50
    float startPointStrength; // Offset: 0x54
    float endPointStrength; // Offset: 0x58
    bool useMultiSpline; // Offset: 0x5c
    uint8_t _pad_3[0x3]; // Offset: 0x5d
    float multiSplineOffset; // Offset: 0x60
    uint8_t _pad_4[0x4]; // Offset: 0x64
    RGB tintColor; // Offset: 0x68
    DynArray_SBeamParticleAudioParams* particleAudioParams; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x80
};

// Original name: JumpDriveMusicParams
// Size: 0xa0
// VTable: 0x1499f52c8
struct JumpDriveMusicParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AudioRtpc tunnelProgressRtpc; // Offset: 0x8
    DynArray_JumpDriveStateMusicMap* stateMap; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    float preArrivalDurationSecs; // Offset: 0x58
    uint8_t _pad_2[0x4]; // Offset: 0x5c
    JumpDriveMusicEvent preArrivalMusicEvent; // Offset: 0x60
};

// Original name: DynArray_SGalactapediaCategory
// Generated DynArray for base type: SGalactapediaCategory
// Size: 0x8
struct DynArray_SGalactapediaCategory {
    SGalactapediaCategory* m_data; // Offset: 0x0
};

// Original name: QuantumMusicParams
// Size: 0x340
// VTable: 0x149a52af8
struct QuantumMusicParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_QuantumDriveStateMusicMap* stateMap; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_QuantumStateMusicMap* stateMapNew; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    QuantumEffectMusic effectMusic; // Offset: 0x68
    DynArray_QuantumMusicTripCategory* tripCategory; // Offset: 0x230 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x238
    float preArrivalDurationSecs; // Offset: 0x260
    uint8_t _pad_4[0x4]; // Offset: 0x264
    QuantumMusicEventBase preArrivalMusicEvent; // Offset: 0x268
    AudioRtpc journeyProgressRTPC; // Offset: 0x2a8
    QuantumMusicEventBase onStopUseMusicEvent; // Offset: 0x2c8
    bool enableMusic; // Offset: 0x308
    uint8_t _pad_5[0x7]; // Offset: 0x309
    DynArray_QuantumDriveLocTypeMusicMap* locationTypeMap; // Offset: 0x310 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x318
};

// Original name: DynArray_ProceduralPlanetAudioDisturbanceList
// Generated DynArray for base type: ProceduralPlanetAudioDisturbanceList
// Size: 0x8
struct DynArray_ProceduralPlanetAudioDisturbanceList {
    ProceduralPlanetAudioDisturbanceList* m_data; // Offset: 0x0
};

// Original name: AudioSignalList
// Size: 0x38
// VTable: 0x1499a9740
struct AudioSignalList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AudioSignal* Signals; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DefaultActions
// Size: 0x38
// VTable: 0x149a8b8e0
struct DefaultActions {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DefaultActionsParams* defaultActionsPerState; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_DrugTypeToApply
// Generated DynArray for base type: DrugTypeToApply
// Size: 0x8
struct DynArray_DrugTypeToApply {
    DrugTypeToApply* m_data; // Offset: 0x0
};

// Original name: DynArray_ConsumableContent
// Generated DynArray for base type: ConsumableContent
// Size: 0x8
struct DynArray_ConsumableContent {
    ConsumableContent* m_data; // Offset: 0x0
};

// Original name: DynArray_SHealingBeamConsumableType
// Generated DynArray for base type: SHealingBeamConsumableType
// Size: 0x8
struct DynArray_SHealingBeamConsumableType {
    SHealingBeamConsumableType* m_data; // Offset: 0x0
};

// Original name: DynArray_DrugEfficacyForConsumableType
// Generated DynArray for base type: DrugEfficacyForConsumableType
// Size: 0x8
struct DynArray_DrugEfficacyForConsumableType {
    DrugEfficacyForConsumableType* m_data; // Offset: 0x0
};

// Original name: ConsumableType
// Size: 0x48
// VTable: 0x149a25348
struct ConsumableType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* typeName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ConsumableSubtype* subtypes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: HaulingOrder_DropOff
// Size: 0x38
// VTable: 0x14996e540
struct HaulingOrder_DropOff {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ObjectivePropertyBase pickUpLocation; // Offset: 0x8
    ObjectivePropertyBase dropOffLocation; // Offset: 0x18
    ObjectiveProperty_Input collectedCargoInput; // Offset: 0x28
};

// Original name: DynArray_SMissionLocationModule
// Generated DynArray for base type: SMissionLocationModule
// Size: 0x8
struct DynArray_SMissionLocationModule {
    SMissionLocationModule* m_data; // Offset: 0x0
};

// Original name: CraftingGameplayPropertyImpl_SingleStat_Float
// Size: 0x50
// VTable: 0x1499b9518
struct CraftingGameplayPropertyImpl_SingleStat_Float {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CraftingMaterialStatTypeRecord scaledByStat; // Offset: 0x8
    DynArray_CraftingGameplayPropertyImplSingleStatTier_Float* tiers; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: BasicPingTypeParams
// Size: 0x58
// VTable: 0x1499c5250
struct BasicPingTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float pingChargeUIShowTime; // Offset: 0x8
    float pingChargeUIJammedTime; // Offset: 0xc
    float pingChargeUIHideTime; // Offset: 0x10
    float pingChargeUIUnavailableTime; // Offset: 0x14
    PingSettingsParams pingSettingsParams; // Offset: 0x18
};

// Original name: DynArray_PingSettingsParams
// Generated DynArray for base type: PingSettingsParams
// Size: 0x8
struct DynArray_PingSettingsParams {
    PingSettingsParams* m_data; // Offset: 0x0
};

// Original name: SPlayerSkillsTechniques
// Size: 0x98
// VTable: 0x149a85138
struct SPlayerSkillsTechniques {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SVaultingTechnique vaultingTechnique; // Offset: 0x8
    STakedownTechnique takedownTechnique; // Offset: 0x50
};

// Original name: SCItemRemoteConnectionParams
// Size: 0x30
// VTable: 0x149a039a0
struct SCItemRemoteConnectionParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    OperatorModeAvailabilityParams availableOperatorModes; // Offset: 0x18
};

// Original name: SCItemAIModuleParams
// Size: 0x48
// VTable: 0x149a03940
struct SCItemAIModuleParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    OperatorModeAvailabilityParams availableOperatorModes; // Offset: 0x18
    CryStringT* communicationConfigName; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x38
    bool automaticallyEnableItems; // Offset: 0x40
    bool useGameRulesActivation; // Offset: 0x41
    bool isHostilityPrimaryChild; // Offset: 0x42
    uint8_t _pad_2[0x5]; // Offset: 0x43
};

// Original name: HygieneParams
// Size: 0x28
// VTable: 0x1499ffc68
struct HygieneParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StatusSweatingParams sweatingParams; // Offset: 0x8
    StatusBloodParams bloodParams; // Offset: 0x18
};

// Original name: MovieClipTransformationInterpolator
// Size: 0x40
// VTable: 0x149aa8718
struct MovieClipTransformationInterpolator {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float interpolationTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_MovieClipTransformationInterpolatorParams* movieClipTransformationInterpolatorParams; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: DynArray_VehicleEditorCategoryData
// Generated DynArray for base type: VehicleEditorCategoryData
// Size: 0x8
struct DynArray_VehicleEditorCategoryData {
    VehicleEditorCategoryData* m_data; // Offset: 0x0
};

// Original name: DynArray_SLocalPlayerShoppingPredefinedARParams
// Generated DynArray for base type: SLocalPlayerShoppingPredefinedARParams
// Size: 0x8
struct DynArray_SLocalPlayerShoppingPredefinedARParams {
    SLocalPlayerShoppingPredefinedARParams* m_data; // Offset: 0x0
};

// Original name: DynArray_VehicleEditorItemStatData
// Generated DynArray for base type: VehicleEditorItemStatData
// Size: 0x8
struct DynArray_VehicleEditorItemStatData {
    VehicleEditorItemStatData* m_data; // Offset: 0x0
};

// Original name: DynArray_AIObservableFilters
// Generated DynArray for base type: AIObservableFilters
// Size: 0x8
struct DynArray_AIObservableFilters {
    AIObservableFilters* m_data; // Offset: 0x0
};

// Original name: DynArray_DockingSlotVisibilityRule
// Generated DynArray for base type: DockingSlotVisibilityRule
// Size: 0x8
struct DynArray_DockingSlotVisibilityRule {
    DockingSlotVisibilityRule* m_data; // Offset: 0x0
};

// Original name: DynArray_ChatEmotePack
// Generated DynArray for base type: ChatEmotePack
// Size: 0x8
struct DynArray_ChatEmotePack {
    ChatEmotePack* m_data; // Offset: 0x0
};

// Original name: DynArray_Infraction
// Generated DynArray for base type: Infraction
// Size: 0x8
struct DynArray_Infraction {
    Infraction* m_data; // Offset: 0x0
};

// Original name: DynArray_SApplicationFormHeadHomeworld
// Generated DynArray for base type: SApplicationFormHeadHomeworld
// Size: 0x8
struct DynArray_SApplicationFormHeadHomeworld {
    SApplicationFormHeadHomeworld* m_data; // Offset: 0x0
};

// Original name: DynArray_SSCSignatureSystemAudioRuleset
// Generated DynArray for base type: SSCSignatureSystemAudioRuleset
// Size: 0x8
struct DynArray_SSCSignatureSystemAudioRuleset {
    SSCSignatureSystemAudioRuleset* m_data; // Offset: 0x0
};

// Original name: GForceParams
// Size: 0x50
// VTable: 0x149a186b8
struct GForceParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float tolerance; // Offset: 0x8
    float maxGees; // Offset: 0xc
    float safeGStress; // Offset: 0x10
    float stressMaxoutTime; // Offset: 0x14
    float stressRecoveryTime; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_StatusEffectBuffMacro* stressEffects; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: DynArray_MissionScenario
// Generated DynArray for base type: MissionScenario
// Size: 0x8
struct DynArray_MissionScenario {
    MissionScenario* m_data; // Offset: 0x0
};

// Original name: DynArray_InnerThought_LayoutGridSet
// Generated DynArray for base type: InnerThought_LayoutGridSet
// Size: 0x8
struct DynArray_InnerThought_LayoutGridSet {
    InnerThought_LayoutGridSet* m_data; // Offset: 0x0
};

// Original name: HealthTemplate
// Size: 0x38
// VTable: 0x149a81488
struct HealthTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BodyMapping bodyMapping; // Offset: 0x8
    BodyHealthConfig healthConfig; // Offset: 0x20
};

// Original name: SActorExternalForceResponseCameraShakeDef
// Size: 0x68
// VTable: 0x149a4e1a8
struct SActorExternalForceResponseCameraShakeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CameraActorVibrationShakeConfig* vibrationShakes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SPlayerRoleShakeMultipliers* roleShakeMultipliers; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: CharacterSkills
// Size: 0x110
// VTable: 0x1499b7598
struct CharacterSkills {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Aiming aiming; // Offset: 0x8
    CharacterAccuracyModifiers modifiers; // Offset: 0x58
};

// Original name: AuxiliaryWeaponActionMisfireParams
// Size: 0x58
// VTable: 0x149a695a0
struct AuxiliaryWeaponActionMisfireParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WeaponMisfireDef misfireProbabilities; // Offset: 0x8
    WeaponFlickerParams flickerParams; // Offset: 0x20
    float misfireEvaluationPeriod; // Offset: 0x50
    uint8_t _pad_1[0x4]; // Offset: 0x54
};

// Original name: ActorLookAheadVehicle
// Size: 0x280
// VTable: 0x149a64660
struct ActorLookAheadVehicle {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorLookAheadPoint* lookAheadPoints; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ActorLookAheadRoll* lookAheadRolls; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    Vec3 undampedFrequency; // Offset: 0x68
    Vec3 dampingRatio; // Offset: 0x80
    float vehicleVelocityTranslationLengthMax; // Offset: 0x98
    uint8_t _pad_3[0x4]; // Offset: 0x9c
    BezierCurve vehicleVelocityTranslationWeightModifier; // Offset: 0xa0
    float horizonAlignRollDampeningMaxAngle; // Offset: 0x130
    uint8_t _pad_4[0x4]; // Offset: 0x134
    BezierCurve horizonAlignRollDampening; // Offset: 0x138
    float yawPitchInputDivergenceThreshold; // Offset: 0x1c8
    float jumpPointSplineLookAheadDistance; // Offset: 0x1cc
    ActorLookAheadTargetTracking targetTracking; // Offset: 0x1d0
    BezierCurve dampeningZoneCurve; // Offset: 0x1e8
    float customPointWeight; // Offset: 0x278
    uint8_t _pad_5[0x4]; // Offset: 0x27c
};

// Original name: ProcBreathingGraphEntry
// Size: 0xd8
// VTable: 0x149a6c738
struct ProcBreathingGraphEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* joint; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float additionalScale; // Offset: 0x18
    bool relativeToShoulder; // Offset: 0x1c
    bool firstPersonOnly; // Offset: 0x1d
    uint8_t _pad_2[0x2]; // Offset: 0x1e
    ProcBreathingGraph translation; // Offset: 0x20
    ProcBreathingGraph rotation; // Offset: 0x78
    uint8_t _pad_3[0x8]; // Offset: 0xd0
};

// Original name: ProcBreathingCurveDatabase
// Size: 0x38
// VTable: 0x149a6c510
struct ProcBreathingCurveDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ProcBreathingCurve* breathAnimationCurves; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SActorForceReactionWeaponTwitchConfig
// Size: 0x40
// VTable: 0x149a4bfa0
struct SActorForceReactionWeaponTwitchConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float adsZoomScaleFactor; // Offset: 0x8
    float offsetAtMinImpulse; // Offset: 0xc
    float offsetAtMaxImpulse; // Offset: 0x10
    float offsetRandomAtMaxImpulse; // Offset: 0x14
    SActorForceReactionCurveConfig curveConfig; // Offset: 0x18
};

// Original name: SActorForceReactionHeadRecoilConfig
// Size: 0xb0
// VTable: 0x149a4c1b8
struct SActorForceReactionHeadRecoilConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float planarADSZoomScaleFactor; // Offset: 0x8
    float rollADSZoomScaleFactor; // Offset: 0xc
    float planarDirConeAngle; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    Range horizontalRecoilRange; // Offset: 0x18
    float horizontalRandomRecoilAtMaxImpulse; // Offset: 0x28
    uint8_t _pad_2[0x4]; // Offset: 0x2c
    Range verticalRecoilRange; // Offset: 0x30
    float verticalRandomRecoilAtMaxImpulse; // Offset: 0x40
    uint8_t _pad_3[0x4]; // Offset: 0x44
    Range rollRecoilRange; // Offset: 0x48
    float rollRandomRecoilAtMaxImpulse; // Offset: 0x58
    float rollAxisInfluencePct; // Offset: 0x5c
    SActorForceReactionCurveConfig planarCurveConfig; // Offset: 0x60
    SActorForceReactionCurveConfig rollCurveConfig; // Offset: 0x88
};

// Original name: SActorForceReactionAimPunchConfig
// Size: 0x60
// VTable: 0x149a4bea0
struct SActorForceReactionAimPunchConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float adsZoomScaleFactor; // Offset: 0x8
    float aimPunchDirConeAngle; // Offset: 0xc
    Range horizontalAimPunchRange; // Offset: 0x10
    Range verticalAimPunchRange; // Offset: 0x20
    float horizontalRandomAimPunchAtMaxImpulse; // Offset: 0x30
    float verticalRandomAimPunchAtMaxImpulse; // Offset: 0x34
    SActorForceReactionCurveConfig curveConfig; // Offset: 0x38
};

// Original name: SActorForceReactionGlobalEffectConfig
// Size: 0xc0
// VTable: 0x149a4bd58
struct SActorForceReactionGlobalEffectConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SActorForceReactionCurve* effectCurves; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    SActorForceReactionEffectDefaults aimPunchDefaults; // Offset: 0x38
    SActorForceReactionEffectDefaults weaponTwitchDefaults; // Offset: 0x50
    SActorForceReactionEffectDefaults headRecoilPlanarDefaults; // Offset: 0x68
    SActorForceReactionEffectDefaults headRecoilRollDefaults; // Offset: 0x80
    float aimPunchFrontMaxAngle; // Offset: 0x98
    float aimPunchBackMaxAngle; // Offset: 0x9c
    float headRecoilFrontMaxAngle; // Offset: 0xa0
    float headRecoilBackMaxAngle; // Offset: 0xa4
    Vec3 headRecoilRollAxis; // Offset: 0xa8
};

// Original name: DynArray_AbilityBreathAction
// Generated DynArray for base type: AbilityBreathAction
// Size: 0x8
struct DynArray_AbilityBreathAction {
    AbilityBreathAction* m_data; // Offset: 0x0
};

// Original name: ArmsLockConfig
// Size: 0xd0
// VTable: 0x1499fea48
struct ArmsLockConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minWeight; // Offset: 0x8
    float maxWeight; // Offset: 0xc
    float baseMinDuration; // Offset: 0x10
    float baseMaxDuration; // Offset: 0x14
    float baseMinShaking; // Offset: 0x18
    float baseMaxShaking; // Offset: 0x1c
    float heavyItemDropDelay; // Offset: 0x20
    float shakingDecayRate; // Offset: 0x24
    DynArray_ArmsLockSingleAbility* singleUseAbilities; // Offset: 0x28 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x30
    DynArray_ARDataType* abilitiesToLock; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x60
    DynArray_ARDataType* abilitiesThatPreventArmsLowering; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x90
    BreathingTriggerDef breathTriggerOnDrop; // Offset: 0xb8
};

// Original name: SXYZCurvesArrays
// Size: 0x98
// VTable: 0x149a5def0
struct SXYZCurvesArrays {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCurve* xCurves; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SCurve* yCurves; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_SCurve* zCurves; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: SWeaponSimplifiedHeatParams
// Size: 0x78
// VTable: 0x149a60590
struct SWeaponSimplifiedHeatParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minTemperature; // Offset: 0x8
    float overheatTemperature; // Offset: 0xc
    float coolingPerSecond; // Offset: 0x10
    float temperatureAfterOverheatFix; // Offset: 0x14
    float timeTillCoolingStarts; // Offset: 0x18
    float overheatFixTime; // Offset: 0x1c
    SWeaponSimplifiedHeatParamsTemperatureCurveParams temperatureCurveParams; // Offset: 0x20
    SWeaponSimplifiedHeatGlowParams glowParams; // Offset: 0x30
    bool whitelistFPSOverheat; // Offset: 0x70
    uint8_t _pad_1[0x7]; // Offset: 0x71
};

// Original name: SControlledEntityAutoCraneData
// Size: 0xf0
// VTable: 0x1499cf718
struct SControlledEntityAutoCraneData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec3 autoCraneDirectionPerUnitToGround; // Offset: 0x8
    Vec3 autoCraneDropOffset; // Offset: 0x20
    Vec3 autoCraneGrabOffset; // Offset: 0x38
    float autoCraneSpeed; // Offset: 0x50
    float autoCranePullLockTolerance; // Offset: 0x54
    SControlledEntityAutoCraneCurve loweringCurves; // Offset: 0x58
    SControlledEntityAutoCraneCurve raisingCurves; // Offset: 0xa0
    float secondsDelayBeforeRaise; // Offset: 0xe8
    uint8_t _pad_1[0x4]; // Offset: 0xec
};

// Original name: WeaponPoseInterpolationCurves
// Size: 0x438
// VTable: 0x149aabe80
struct WeaponPoseInterpolationCurves {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    WeaponPoseXYZCurvesMaxValues positonCurves; // Offset: 0x8
    WeaponPoseXYZCurvesMaxValues rotationCurves; // Offset: 0x1d8
    BezierCurve cameraZoomCurve; // Offset: 0x3a8
};

// Original name: IFCSParams
// Size: 0x680
// VTable: 0x149a1ba40
struct IFCSParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float scmSpeed; // Offset: 0x18
    float boostSpeedForward; // Offset: 0x1c
    float boostSpeedBackward; // Offset: 0x20
    float maxSpeed; // Offset: 0x24
    float maxSpeedPrecisionModeFullProximityAssist; // Offset: 0x28
    float maxSpeedPrecisionModeZeroProximityAssist; // Offset: 0x2c
    Vec3 maxAngularVelocity; // Offset: 0x30
    ARDataType linearLimiterType; // Offset: 0x48
    ARDataType pitchYawLimiterType; // Offset: 0x4c
    AfterburnerParams afterburner; // Offset: 0x50
    float torqueDistanceThreshold; // Offset: 0x1e8
    float torqueImbalanceMultiplier; // Offset: 0x1ec
    DynArray_bool* thrusterTypesForAngularControl; // Offset: 0x1f0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x1f8
    bool refreshCachesOnLandingMode; // Offset: 0x220
    uint8_t _pad_2[0x7]; // Offset: 0x221
    DynArray_AeroSurface* aeroSurfaces; // Offset: 0x228 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x230
    float liftMultiplier; // Offset: 0x258
    float dragMultiplier; // Offset: 0x25c
    float turbulenceAmplitude; // Offset: 0x260
    float groundTurbulenceAmplitude; // Offset: 0x264
    float precisionMinDistance; // Offset: 0x268
    float precisionMaxDistance; // Offset: 0x26c
    float precisionLandingMultiplier; // Offset: 0x270
    uint8_t _pad_4[0x4]; // Offset: 0x274
    BezierCurve precisionAccelCurve; // Offset: 0x278
    float linearAccelDecay; // Offset: 0x308
    float angularAccelDecay; // Offset: 0x30c
    float scmMaxDragMultiplier; // Offset: 0x310
    uint8_t _pad_5[0x4]; // Offset: 0x314
    CLocIdentifier* thrusterImbalanceMessage; // Offset: 0x318
    Vec3 positiveLinearScale; // Offset: 0x320
    Vec3 negativeLinearScale; // Offset: 0x338
    Vec3 positiveAngularScale; // Offset: 0x350
    Vec3 negativeAngularScale; // Offset: 0x368
    IntoxicationIFCSModifierParams intoxicationModifierRef; // Offset: 0x380
    AeroParams aeroParams; // Offset: 0x398
    BezierCurve selfPowerToThrusterPowerCurve; // Offset: 0x5c8
    SIFCSAuthoredMotionLimits authoredMotionLimits; // Offset: 0x658
};

// Original name: GlobalJumpPointParams
// Size: 0x138
// VTable: 0x149a14ce0
struct GlobalJumpPointParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float alignmentAngle; // Offset: 0x8
    float alignmentTolerance; // Offset: 0xc
    float alignmentRange; // Offset: 0x10
    float startClosingTime; // Offset: 0x14
    float debrisPushOutAcceleration; // Offset: 0x18
    float debrisPushOutMaximumSpeed; // Offset: 0x1c
    float shipPullInDelayTime; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    GlobalJumpPointEffectParams effectParams; // Offset: 0x28
    JumpDriveUIConeParams uiConeParams; // Offset: 0x120
};

// Original name: SWeaponProceduralAimRecoilCurveConfigDef
// Size: 0xa8
// VTable: 0x149a5eca0
struct SWeaponProceduralAimRecoilCurveConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float yawMaxDegrees; // Offset: 0x8
    float pitchMaxDegrees; // Offset: 0xc
    float rollMaxDegrees; // Offset: 0x10
    float maxFireTime; // Offset: 0x14
    float recoilSmoothTime; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 minLimits; // Offset: 0x20
    Vec3 maxLimits; // Offset: 0x38
    SYawPitchRollCurves yawPitchRollCurves; // Offset: 0x50
    float decayStartTime; // Offset: 0x60
    float minDecayTime; // Offset: 0x64
    float maxDecayTime; // Offset: 0x68
    uint8_t _pad_2[0x4]; // Offset: 0x6c
    SYawPitchRollCurves yawPitchRollDecayCurves; // Offset: 0x70
    SAimRecoilNoiseCurves noiseCurves; // Offset: 0x80
};

// Original name: SVibrationVehicleDef
// Size: 0x878
// VTable: 0x149a15938
struct SVibrationVehicleDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool listensToVehicleHitEvents; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float vehicleHitDamageMaxRatio; // Offset: 0xc
    float vehicleHitSuppressionDecayTime; // Offset: 0x10
    uint8_t _pad_2[0x4]; // Offset: 0x14
    BezierCurve vehicleHitSuppressionCurve; // Offset: 0x18
    BezierCurve vehicleHitDamageVibrationMapping; // Offset: 0xa8
    float dragModifier; // Offset: 0x138
    float liftModifier; // Offset: 0x13c
    float masterModeDragModifier; // Offset: 0x140
    float thrusterModifier; // Offset: 0x144
    float thrusterNormalSuppressionIncreaseTime; // Offset: 0x148
    float thrusterNormalSuppressionDecayTime; // Offset: 0x14c
    BezierCurve thrusterNormalSuppressionCurve; // Offset: 0x150
    float thrusterBoostRumbleStrength; // Offset: 0x1e0
    float thrusterBoostSuppressionIncreaseTime; // Offset: 0x1e4
    float thrusterBoostSuppressionDecayTime; // Offset: 0x1e8
    uint8_t _pad_3[0x4]; // Offset: 0x1ec
    BezierCurve thrusterBoostSuppressionCurve; // Offset: 0x1f0
    float electricalChargeModifier; // Offset: 0x280
    bool deactivateWindCheckOnPlanets; // Offset: 0x284
    uint8_t _pad_4[0x3]; // Offset: 0x285
    float magLaunchInputModifier; // Offset: 0x288
    uint8_t _pad_5[0x4]; // Offset: 0x28c
    JumpSystemVibrationParams jumpSystemVibrations; // Offset: 0x290
};

// Original name: DynArray_CinematicFlythroughPoint
// Generated DynArray for base type: CinematicFlythroughPoint
// Size: 0x8
struct DynArray_CinematicFlythroughPoint {
    CinematicFlythroughPoint* m_data; // Offset: 0x0
};

// Original name: PlayerUsableView
// Size: 0x38
// VTable: 0x1499cdb60
struct PlayerUsableView {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool focusOnUser; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    Camera cameraView; // Offset: 0x10
    CameraTransitionParams transitionParams; // Offset: 0x28
};

// Original name: SWeaponProceduralHeadRecoilConfigDef
// Size: 0x120
// VTable: 0x149a5f5d8
struct SWeaponProceduralHeadRecoilConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float frequency; // Offset: 0x8
    float smoothFactor; // Offset: 0xc
    float frequencyNoiseFactor; // Offset: 0x10
    float maxDistance; // Offset: 0x14
    float phase; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec3 translation; // Offset: 0x20
    float translationNoise; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
    Ang3 rotation; // Offset: 0x40
    float rotationNoise; // Offset: 0x58
    bool usePerlinNoise; // Offset: 0x5c
    uint8_t _pad_3[0x3]; // Offset: 0x5d
    float referenceSpeed; // Offset: 0x60
    float minSpeed; // Offset: 0x64
    float minScale; // Offset: 0x68
    float maxSpeed; // Offset: 0x6c
    float maxScale; // Offset: 0x70
    uint8_t _pad_4[0x4]; // Offset: 0x74
    SWeaponProceduralHeadRecoilCurveConfigDef curveRecoil; // Offset: 0x78
};

// Original name: ControlHintDef
// Size: 0x68
// VTable: 0x149a67848
struct ControlHintDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* description; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ControlHintCondition condition; // Offset: 0x18
    ControlHintAlwaysDisplayCondition alwaysDisplayCondition; // Offset: 0x28
    DynArray_ControlHint_DisplayInfoSet* hintDisplayInfoSet; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: DialogueBundleReference
// Size: 0x38
// VTable: 0x149a8cd60
struct DialogueBundleReference {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool usePooling; // Offset: 0x8
    uint8_t _pad_1[0x17]; // Offset: 0x9
    DialogueBundlePreset dialoguePreset; // Offset: 0x20
};

// Original name: DialogueBundleWeightedReference
// Size: 0x38
// VTable: 0x149a8ce20
struct DialogueBundleWeightedReference {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool usePooling; // Offset: 0x8
    uint8_t _pad_1[0x17]; // Offset: 0x9
    DialogueBundlePresetWeighted dialoguePreset; // Offset: 0x20
};

// Original name: DynArray_SPerkReputationParams
// Generated DynArray for base type: SPerkReputationParams
// Size: 0x8
struct DynArray_SPerkReputationParams {
    SPerkReputationParams* m_data; // Offset: 0x0
};

// Original name: DynArray_PartialContractRewardRepAdjustment
// Generated DynArray for base type: PartialContractRewardRepAdjustment
// Size: 0x8
struct DynArray_PartialContractRewardRepAdjustment {
    PartialContractRewardRepAdjustment* m_data; // Offset: 0x0
};

// Original name: DynArray_SReputationScopeContextUI
// Generated DynArray for base type: SReputationScopeContextUI
// Size: 0x8
struct DynArray_SReputationScopeContextUI {
    SReputationScopeContextUI* m_data; // Offset: 0x0
};

// Original name: DynArray_ReputationRewardBaseDef
// Generated DynArray for base type: ReputationRewardBaseDef
// Size: 0x8
struct DynArray_ReputationRewardBaseDef {
    ReputationRewardBaseDef* m_data; // Offset: 0x0
};

// Original name: ItemAwardWeightingsParams
// Size: 0x20
// VTable: 0x149972780
struct ItemAwardWeightingsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemAwardWeightingsRecord awardsRecord; // Offset: 0x8
};

// Original name: DynArray_FoleyItem
// Generated DynArray for base type: FoleyItem
// Size: 0x8
struct DynArray_FoleyItem {
    FoleyItem* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_StyleEntry
// Generated DynArray for base type: BuildingBlocks_StyleEntry
// Size: 0x8
struct DynArray_BuildingBlocks_StyleEntry {
    BuildingBlocks_StyleEntry* m_data; // Offset: 0x0
};

// Original name: BuildingBlocks_TimelineTypeEmbedded
// Size: 0x38
// VTable: 0x149986730
struct BuildingBlocks_TimelineTypeEmbedded {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_Keyframe* keyframes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: WeaponProceduralAnimation
// Size: 0x38
// VTable: 0x149aac250
struct WeaponProceduralAnimation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_WeaponProceduralClipsSetUp* weaponProceduralClipsSetUp; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_SCharacterCustomizerDialogueEntry
// Generated DynArray for base type: SCharacterCustomizerDialogueEntry
// Size: 0x8
struct DynArray_SCharacterCustomizerDialogueEntry {
    SCharacterCustomizerDialogueEntry* m_data; // Offset: 0x0
};

// Original name: CameraSeatCockpitConfig
// Size: 0xc0
// VTable: 0x149a59c10
struct CameraSeatCockpitConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    DynArray_HeadMotionConfig* headMotionConfig; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x68
    CameraDistanceConfig distanceConfig; // Offset: 0x90
    float fovScale; // Offset: 0xb8
    float focusSpeed; // Offset: 0xbc
};

// Original name: CameraFirstPersonBaseConfig
// Size: 0x90
// VTable: 0x149a00cb0
struct CameraFirstPersonBaseConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    DynArray_HeadMotionConfig* headMotionConfig; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x68
};

// Original name: CameraPlayerHeadConfig
// Size: 0x5a8
// VTable: 0x149a01830
struct CameraPlayerHeadConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraBaseSettingsConfig baseSettings; // Offset: 0x8
    CameraBlendConfig blendConfig; // Offset: 0x28
    CameraFOVConfig FOVConfig; // Offset: 0x38
    CameraShakeConfig operatorShake; // Offset: 0x60
    CameraSpeedShakeConfig speedShake; // Offset: 0xb0
    CameraGForceShakeConfig gforceShake; // Offset: 0x110
    CameraTargetOffsetConfig targetOffsetConfig; // Offset: 0x168
    CameraDistanceConfig distanceConfig; // Offset: 0x1c0
    CameraRotationConfig rotationConfig; // Offset: 0x1e8
    CameraSpringConfig springConfig; // Offset: 0x288
    CameraCollisionConfig collisionConfig; // Offset: 0x4b8
    DynArray_SCameraViewStateOrbit* defaultViews; // Offset: 0x4e0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x4e8
    CameraAlternativeViewsConfig alternativeViewsConfig; // Offset: 0x510
    DynArray_ActorCameraOffsetFiltered* actorOffsetConfig; // Offset: 0x548 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x550
    DynArray_HeadMotionConfig* headMotionConfig; // Offset: 0x578 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x580
};

// Original name: DynArray_SeatUserActorCDIKMapping
// Generated DynArray for base type: SeatUserActorCDIKMapping
// Size: 0x8
struct DynArray_SeatUserActorCDIKMapping {
    SeatUserActorCDIKMapping* m_data; // Offset: 0x0
};

// Original name: SCItemSeatDashboardUIDesc
// Size: 0x58
// VTable: 0x149a5b758
struct SCItemSeatDashboardUIDesc {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCItemSeatDashboardScreen* Screens; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    MarkerAR_ConfigDef markerConfig; // Offset: 0x38
    bool playCommsOnLens; // Offset: 0x50
    bool showTargetOnLens; // Offset: 0x51
    uint8_t _pad_2[0x6]; // Offset: 0x52
};

// Original name: SCItemVisorDashboardConfig
// Size: 0x38
// VTable: 0x149a39040
struct SCItemVisorDashboardConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCItemSeatDashboardScreen* screens; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SGripContainer
// Size: 0x40
// VTable: 0x149a8ecb8
struct SGripContainer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool gripOverrideUsingLOS; // Offset: 0x8
    uint8_t _pad_1[0x7]; // Offset: 0x9
    DynArray_SCarryableGrip* grips; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: ProceduralAnimation
// Size: 0x38
// VTable: 0x149aa2a30
struct ProceduralAnimation {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ProceduralAnimationSequence* sequences; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: LadderComponentParams
// Size: 0xf0
// VTable: 0x149a6b060
struct LadderComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float height; // Offset: 0x18
    bool userIgnoreStaticCollisions; // Offset: 0x1c
    bool slideable; // Offset: 0x1d
    bool autoMountable; // Offset: 0x1e
    uint8_t _pad_1[0x1]; // Offset: 0x1f
    AutoMountRadiusParams autoMountableRadiusParametersAtBottom; // Offset: 0x20
    float approachAngleAtBottom; // Offset: 0x38
    float facingAngleAtBottom; // Offset: 0x3c
    float remountDelayAtBottom; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
    AutoMountRadiusParams autoMountableRadiusParametersAtTop; // Offset: 0x48
    float approachAngleAtTop; // Offset: 0x60
    float facingAngleAtTop; // Offset: 0x64
    float remountDelayAtTop; // Offset: 0x68
    bool directionAtTopIncludesBack; // Offset: 0x6c
    uint8_t _pad_3[0x3]; // Offset: 0x6d
    ExitCollisionCheckOverrideParams topBackExitCollisionCheckOverride; // Offset: 0x70
    bool directionAtTopIncludesLeft; // Offset: 0x80
    uint8_t _pad_4[0x7]; // Offset: 0x81
    ExitCollisionCheckOverrideParams topLeftExitCollisionCheckOverride; // Offset: 0x88
    bool directionAtTopIncludesRight; // Offset: 0x98
    uint8_t _pad_5[0x7]; // Offset: 0x99
    ExitCollisionCheckOverrideParams topRightExitCollisionCheckOverride; // Offset: 0xa0
    bool autoDismountOnHighestMidPointWhenNoTopAvailable; // Offset: 0xb0
    uint8_t _pad_6[0x7]; // Offset: 0xb1
    DynArray_LadderAccessPointParams* midAccessPoints; // Offset: 0xb8 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0xc0
    bool HACKUseParentZoneExitingLadderTopHACK; // Offset: 0xe8
    uint8_t _pad_8[0x7]; // Offset: 0xe9
};

// Original name: ActorProceduralRecoilSetup
// Size: 0x60
// VTable: 0x149a72270
struct ActorProceduralRecoilSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ActorProceduralRecoilModifiers actorProceduralRecoilModifiers; // Offset: 0x48
};

// Original name: ProceduralAimRigComponent
// Size: 0x30
// VTable: 0x149aaf6f0
struct ProceduralAimRigComponent {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ProceduralAimRigRecord record; // Offset: 0x18
};

// Original name: DynArray_CockpitResponse
// Generated DynArray for base type: CockpitResponse
// Size: 0x8
struct DynArray_CockpitResponse {
    CockpitResponse* m_data; // Offset: 0x0
};

// Original name: DynArray_SHelmetStateMachineParams
// Generated DynArray for base type: SHelmetStateMachineParams
// Size: 0x8
struct DynArray_SHelmetStateMachineParams {
    SHelmetStateMachineParams* m_data; // Offset: 0x0
};

// Original name: SCItemControlPriorities
// Size: 0x58
// VTable: 0x149a073c0
struct SCItemControlPriorities {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_SCItemControlPriorityTable* itemControlPriorities; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x40]; // Offset: 0x18
};

// Original name: DynArray_ItemTypeInfo
// Generated DynArray for base type: ItemTypeInfo
// Size: 0x8
struct DynArray_ItemTypeInfo {
    ItemTypeInfo* m_data; // Offset: 0x0
};

// Original name: S42DifficultyParams
// Size: 0x128
// VTable: 0x149a3c570
struct S42DifficultyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType defaultDifficulty; // Offset: 0x18
    bool enableDynamicScaling; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
    SDynamicDifficultyParams fpsDynamicScaling; // Offset: 0x20
    SDynamicDifficultyParams shipDynamicScaling; // Offset: 0x98
    GameDifficultyModifiers difficultyModifiers; // Offset: 0x110
};

// Original name: BaseDifficultyParams
// Size: 0x128
// VTable: 0x149a0a290
struct BaseDifficultyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ARDataType defaultDifficulty; // Offset: 0x18
    bool enableDynamicScaling; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
    SDynamicDifficultyParams fpsDynamicScaling; // Offset: 0x20
    SDynamicDifficultyParams shipDynamicScaling; // Offset: 0x98
    GameDifficultyModifiers difficultyModifiers; // Offset: 0x110
};

// Original name: DynArray_HudColor_Palette
// Generated DynArray for base type: HudColor_Palette
// Size: 0x8
struct DynArray_HudColor_Palette {
    HudColor_Palette* m_data; // Offset: 0x0
};

// Original name: SHackingDifficultyPreset
// Size: 0x88
// VTable: 0x149a2be08
struct SHackingDifficultyPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t boardWidth; // Offset: 0x8
    int32_t boardHeight; // Offset: 0xc
    float timelimit; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_uint32_t* linkGroups; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    int32_t minSpawnPointsCount; // Offset: 0x48
    int32_t maxSpawnPointsCount; // Offset: 0x4c
    float defenseAlertDuration; // Offset: 0x50
    bool codeOnlyInput; // Offset: 0x54
    uint8_t _pad_3[0x3]; // Offset: 0x55
    SHackingCodeInputModifiersParams codeInputModifiersParams; // Offset: 0x58
    SHackingThreatLevelsPreset threatLevelsPreset; // Offset: 0x70
};

// Original name: CameraLensParams
// Size: 0x50
// VTable: 0x149a90a08
struct CameraLensParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float BloomIntensity; // Offset: 0x8
    float FlareIntensity; // Offset: 0xc
    CameraLensStreak Streak; // Offset: 0x10
    DynArray_CameraLensGhostSet* GhostSets; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: AtmosphericCompositionTemplate
// Size: 0x40
// VTable: 0x14997a080
struct AtmosphericCompositionTemplate {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SAtmosphericCompositionParams composition; // Offset: 0x8
};

// Original name: SubHarvestableMultiConfigRef
// Size: 0x20
// VTable: 0x1499efd60
struct SubHarvestableMultiConfigRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SubHarvestableMultiConfigRecord multiConfigRef; // Offset: 0x8
};

// Original name: DynArray_AnimationGraph_Timeline
// Generated DynArray for base type: AnimationGraph_Timeline
// Size: 0x8
struct DynArray_AnimationGraph_Timeline {
    AnimationGraph_Timeline* m_data; // Offset: 0x0
};

// Original name: StatusMaskedRetriggerPreset
// Size: 0x18
// VTable: 0x1499fd640
struct StatusMaskedRetriggerPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StatusMaskedRetriggerSetup retriggerSetup; // Offset: 0x8
};

// Original name: DynArray_ActorStatusData
// Generated DynArray for base type: ActorStatusData
// Size: 0x8
struct DynArray_ActorStatusData {
    ActorStatusData* m_data; // Offset: 0x0
};

// Original name: ActorLocomotionPersonality
// Size: 0x100
// VTable: 0x149ab1ed0
struct ActorLocomotionPersonality {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* locomotionStyleMannequinTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    SMannequinActionDefRecord basePlayerMovementMannequinAction; // Offset: 0x18
    ActorLocomotionRotateParams rotation; // Offset: 0x30
    ActorLocomotionTurnOnSpotParams turnOnSpotNormal; // Offset: 0x60
    ActorLocomotionTurnOnSpotParams turnOnSpotCombat; // Offset: 0x78
    ActorLocomotionSharpTurnParams sharpTurns; // Offset: 0x90
    ActorLocomotionAvoidanceParams avoidance; // Offset: 0xa8
    SActorLocomotionFidgetDef fidget; // Offset: 0xd8
    SActorLocomotionFeatureDef_Slope slope; // Offset: 0xf0
};

// Original name: DynArray_AnimationJointMovement
// Generated DynArray for base type: AnimationJointMovement
// Size: 0x8
struct DynArray_AnimationJointMovement {
    AnimationJointMovement* m_data; // Offset: 0x0
};

// Original name: ActionRuleList
// Size: 0x80
// VTable: 0x149a99890
struct ActionRuleList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InputAction inputAction; // Offset: 0x8
    PersonalInnerThoughtActionRulePreset preset; // Offset: 0x38
    DynArray_ActionRuleParams* ruleParams; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x58
};

// Original name: Announcer
// Size: 0x50
// VTable: 0x1499d6f98
struct Announcer {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Announcer base; // Offset: 0x8
    DynArray_Announcement* announcements; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: SPUSpectator
// Size: 0x50
// VTable: 0x149a20b10
struct SPUSpectator {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SpectatorModeParams* modes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    ARDataType defaultSpectatorCamera; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: SFPSSpectator
// Size: 0x50
// VTable: 0x149a20b00
struct SFPSSpectator {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SpectatorModeParams* modes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    ARDataType defaultSpectatorCamera; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: SISpectatorBase
// Size: 0x50
// VTable: 0x149a39b48
struct SISpectatorBase {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SpectatorModeParams* modes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    ARDataType defaultSpectatorCamera; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
};

// Original name: SDFMSpectator
// Size: 0x58
// VTable: 0x149a20af0
struct SDFMSpectator {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SpectatorModeParams* modes; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    ARDataType defaultSpectatorCamera; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    float minDistanceForSecondaryTarget; // Offset: 0x50
    uint8_t _pad_3[0x4]; // Offset: 0x54
};

// Original name: SCoverSystemComponentParams
// Size: 0x48
// VTable: 0x14997dc28
struct SCoverSystemComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float distanceToCover; // Offset: 0x18
    float agentRadius; // Offset: 0x1c
    float inCoverRadius; // Offset: 0x20
    float effectiveCoverHeight; // Offset: 0x24
    float effectiveHighCoverHeight; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    PostureDatabase postureData; // Offset: 0x30
};

// Original name: SRangedWeaponStats
// Size: 0x408
// VTable: 0x1499dee18
struct SRangedWeaponStats {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Range range; // Offset: 0x8
    SMannequinTagParams mannequinTag; // Offset: 0x18
    bool interpolate; // Offset: 0x38
    uint8_t _pad_1[0x7]; // Offset: 0x39
    SWeaponStats weaponStats; // Offset: 0x40
};

// Original name: SWeaponModifierParams
// Size: 0x3d0
// VTable: 0x1499dee70
struct SWeaponModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SWeaponStats weaponStats; // Offset: 0x8
};

// Original name: DynArray_AsteroidFieldShapeLinkParams
// Generated DynArray for base type: AsteroidFieldShapeLinkParams
// Size: 0x8
struct DynArray_AsteroidFieldShapeLinkParams {
    AsteroidFieldShapeLinkParams* m_data; // Offset: 0x0
};

// Original name: SHackingGeneralSettingsPreset
// Size: 0x78
// VTable: 0x149a2c970
struct SHackingGeneralSettingsPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SHackingAgentParamsPreset intruderParamsPreset; // Offset: 0x8
    SHackingAgentParamsPreset defenderParamsPreset; // Offset: 0x20
    SHackingCodeParamsPreset codeParamsPreset; // Offset: 0x38
    SHackingVisualParamsPreset visualParamsPreset; // Offset: 0x50
    float linkPointRadius; // Offset: 0x68
    float generalAINodeSwapCooldown; // Offset: 0x6c
    int32_t helpPagesCount; // Offset: 0x70
    uint8_t _pad_1[0x4]; // Offset: 0x74
};

// Original name: DynArray_SCItemObservableGroupParams
// Generated DynArray for base type: SCItemObservableGroupParams
// Size: 0x8
struct DynArray_SCItemObservableGroupParams {
    SCItemObservableGroupParams* m_data; // Offset: 0x0
};

// Original name: ScanDisplayLayoutParams
// Size: 0x48
// VTable: 0x1499c6e18
struct ScanDisplayLayoutParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ScanDisplaySectionParams* displaySections; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ScanDisplaySetupParams contactDisplay; // Offset: 0x38
};

// Original name: DynArray_AudioBreathStyle
// Generated DynArray for base type: AudioBreathStyle
// Size: 0x8
struct DynArray_AudioBreathStyle {
    AudioBreathStyle* m_data; // Offset: 0x0
};

// Original name: DynArray_SReputationJournalGroupParams
// Generated DynArray for base type: SReputationJournalGroupParams
// Size: 0x8
struct DynArray_SReputationJournalGroupParams {
    SReputationJournalGroupParams* m_data; // Offset: 0x0
};

// Original name: SReputationStateMissionResultModifierParams
// Size: 0x38
// VTable: 0x149a96b50
struct SReputationStateMissionResultModifierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SReputationStateMissionResultModifierListParams* missionResultStateModifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: CtxGraph_Group
// Size: 0x38
// VTable: 0x149aa6c10
struct CtxGraph_Group {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CtxGraph_Context* contexts; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ActorStanceConfig
// Size: 0x68
// VTable: 0x149ab09b8
struct ActorStanceConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorStanceSpeedsInfo* stanceSpeeds; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ActorStanceDimensionsInfo* stanceDimensions; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: MobiGlasPersonalMessage_ShipChatSchedule
// Size: 0x78
// VTable: 0x149a365c8
struct MobiGlasPersonalMessage_ShipChatSchedule {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DateTime startDateTime; // Offset: 0x8
    DynArray_MobiGlasPersonalMessage_ShipChatScheduleEntry* chatEntries; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x48
    float minDelayTime; // Offset: 0x70
    float maxDelayTime; // Offset: 0x74
};

// Original name: PlayerChoice_RemoteCommsConfig
// Size: 0x68
// VTable: 0x149aa4b68
struct PlayerChoice_RemoteCommsConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    InnerThought_ConversationSystemConfig mobiglasConfig; // Offset: 0x8
    InnerThought_ConversationSystemConfig MFDConfig; // Offset: 0x20
    InnerThought_ConversationSystemConfig visorConfig; // Offset: 0x38
    InnerThought_ConversationSystemConfig hologramConfig; // Offset: 0x50
};

// Original name: VibrationAudioPointDef
// Size: 0x40
// VTable: 0x149a113e8
struct VibrationAudioPointDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VibrationAudioEntry* vibrationAudioEntries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    float customFalloff; // Offset: 0x38
    uint8_t _pad_2[0x4]; // Offset: 0x3c
};

// Original name: TransitDisplayPanelParams
// Size: 0xa0
// VTable: 0x1499d8a50
struct TransitDisplayPanelParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool playAnnouncements; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    TransitDisplayPanelGenericAnnouncements genericAnnouncments; // Offset: 0x20
    TransitDisplayPanelStationAnnouncements stationAnnouncements; // Offset: 0x70
};

// Original name: TrackWheeledVehicleAudioComponentParams
// Size: 0x540
// VTable: 0x149a123d0
struct TrackWheeledVehicleAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* engineSoundPosition; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    GlobalResourceAudio engineStartupOneShot; // Offset: 0x28
    GlobalResourceAudio engineRunLoopStart; // Offset: 0x48
    GlobalResourceAudio engineRunLoopStop; // Offset: 0x68
    CryStringT* hornSoundPosition; // Offset: 0x88
    uint8_t _pad_2[0x8]; // Offset: 0x90
    GlobalResourceAudio hornLoopStart; // Offset: 0x98
    GlobalResourceAudio hornLoopStop; // Offset: 0xb8
    GlobalResourceAudio suspensionBumpSound; // Offset: 0xd8
    GlobalResourceAudio gearChangeSound; // Offset: 0xf8
    GlobalResourceAudio throttleOnSound; // Offset: 0x118
    GlobalResourceAudio throttleOffSound; // Offset: 0x138
    GlobalResourceAudio damagedSound; // Offset: 0x158
    GlobalResourceAudio destroyedSound; // Offset: 0x178
    GlobalResourceAudio boostStartTrigger; // Offset: 0x198
    GlobalResourceAudio boostStopTrigger; // Offset: 0x1b8
    AudioRtpc speedRtpc; // Offset: 0x1d8
    AudioRtpc throttleRtpc; // Offset: 0x1f8
    AudioRtpc throttleLoadRtpc; // Offset: 0x218
    AudioRtpc throttleOnAtLoadRtpc; // Offset: 0x238
    AudioRtpc throttleOffAtLoadRtpc; // Offset: 0x258
    AudioRtpc rpmRtpc; // Offset: 0x278
    AudioRtpc rpmLoadRtpc; // Offset: 0x298
    AudioRtpc rpmAccelerationRtpc; // Offset: 0x2b8
    AudioRtpc slipRtpc; // Offset: 0x2d8
    AudioRtpc slipForwardsRtpc; // Offset: 0x2f8
    AudioRtpc slipLateralRtpc; // Offset: 0x318
    AudioRtpc steerRtpc; // Offset: 0x338
    AudioRtpc steerStrainRtpc; // Offset: 0x358
    AudioRtpc groundContactsRtpc; // Offset: 0x378
    AudioRtpc airTimeRtpc; // Offset: 0x398
    AudioRtpc suspensionCompressionRtpc; // Offset: 0x3b8
    AudioRtpc suspensionStrokeRtpc; // Offset: 0x3d8
    AudioRtpc bumpCompressionRtpc; // Offset: 0x3f8
    AudioRtpc surfaceRoughnessRtpc; // Offset: 0x418
    AudioRtpc boostDurationRtpc; // Offset: 0x438
    AudioRtpc remainingBoostRtpc; // Offset: 0x458
    float bumpMinSusp; // Offset: 0x478
    float bumpMinSpeed; // Offset: 0x47c
    float bumpIntensityMult; // Offset: 0x480
    float bumpMinTime; // Offset: 0x484
    float throttleLoadLerpUpTime; // Offset: 0x488
    float throttleLoadLerpDownTime; // Offset: 0x48c
    float skidLerpSpeed; // Offset: 0x490
    float skidCentrifugalFactor; // Offset: 0x494
    float skidBrakeFactor; // Offset: 0x498
    float skidPowerLockFactor; // Offset: 0x49c
    float skidLateralFactor; // Offset: 0x4a0
    float skidForwardFactor; // Offset: 0x4a4
    AudioRtpc treadCountRtpc; // Offset: 0x4a8
    AudioRtpc treadIndexRtpc; // Offset: 0x4c8
    AudioRtpc treadRotationSpeedRtpc; // Offset: 0x4e8
    AudioRtpc treadGroundContactRtpc; // Offset: 0x508
    WheelAudioSurfaceMap treadAudioSurfaceMap; // Offset: 0x528
};

// Original name: WheeledVehicleAudioComponentParams
// Size: 0x708
// VTable: 0x149a122d0
struct WheeledVehicleAudioComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* engineSoundPosition; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    GlobalResourceAudio engineStartupOneShot; // Offset: 0x28
    GlobalResourceAudio engineRunLoopStart; // Offset: 0x48
    GlobalResourceAudio engineRunLoopStop; // Offset: 0x68
    CryStringT* hornSoundPosition; // Offset: 0x88
    uint8_t _pad_2[0x8]; // Offset: 0x90
    GlobalResourceAudio hornLoopStart; // Offset: 0x98
    GlobalResourceAudio hornLoopStop; // Offset: 0xb8
    GlobalResourceAudio suspensionBumpSound; // Offset: 0xd8
    GlobalResourceAudio gearChangeSound; // Offset: 0xf8
    GlobalResourceAudio throttleOnSound; // Offset: 0x118
    GlobalResourceAudio throttleOffSound; // Offset: 0x138
    GlobalResourceAudio damagedSound; // Offset: 0x158
    GlobalResourceAudio destroyedSound; // Offset: 0x178
    GlobalResourceAudio boostStartTrigger; // Offset: 0x198
    GlobalResourceAudio boostStopTrigger; // Offset: 0x1b8
    AudioRtpc speedRtpc; // Offset: 0x1d8
    AudioRtpc throttleRtpc; // Offset: 0x1f8
    AudioRtpc throttleLoadRtpc; // Offset: 0x218
    AudioRtpc throttleOnAtLoadRtpc; // Offset: 0x238
    AudioRtpc throttleOffAtLoadRtpc; // Offset: 0x258
    AudioRtpc rpmRtpc; // Offset: 0x278
    AudioRtpc rpmLoadRtpc; // Offset: 0x298
    AudioRtpc rpmAccelerationRtpc; // Offset: 0x2b8
    AudioRtpc slipRtpc; // Offset: 0x2d8
    AudioRtpc slipForwardsRtpc; // Offset: 0x2f8
    AudioRtpc slipLateralRtpc; // Offset: 0x318
    AudioRtpc steerRtpc; // Offset: 0x338
    AudioRtpc steerStrainRtpc; // Offset: 0x358
    AudioRtpc groundContactsRtpc; // Offset: 0x378
    AudioRtpc airTimeRtpc; // Offset: 0x398
    AudioRtpc suspensionCompressionRtpc; // Offset: 0x3b8
    AudioRtpc suspensionStrokeRtpc; // Offset: 0x3d8
    AudioRtpc bumpCompressionRtpc; // Offset: 0x3f8
    AudioRtpc surfaceRoughnessRtpc; // Offset: 0x418
    AudioRtpc boostDurationRtpc; // Offset: 0x438
    AudioRtpc remainingBoostRtpc; // Offset: 0x458
    float bumpMinSusp; // Offset: 0x478
    float bumpMinSpeed; // Offset: 0x47c
    float bumpIntensityMult; // Offset: 0x480
    float bumpMinTime; // Offset: 0x484
    float throttleLoadLerpUpTime; // Offset: 0x488
    float throttleLoadLerpDownTime; // Offset: 0x48c
    float skidLerpSpeed; // Offset: 0x490
    float skidCentrifugalFactor; // Offset: 0x494
    float skidBrakeFactor; // Offset: 0x498
    float skidPowerLockFactor; // Offset: 0x49c
    float skidLateralFactor; // Offset: 0x4a0
    float skidForwardFactor; // Offset: 0x4a4
    AudioRtpc wheelRotationSpeedRtpc; // Offset: 0x4a8
    AudioRtpc wheelFrictionRtpc; // Offset: 0x4c8
    AudioRtpc wheelInlineTractionRtpc; // Offset: 0x4e8
    AudioRtpc wheelLateralTractionRtpc; // Offset: 0x508
    AudioRtpc wheelCurrentSuspensionSpringLengthRtpc; // Offset: 0x528
    AudioRtpc wheelRelaxedSuspensionSpringLengthRtpc; // Offset: 0x548
    AudioRtpc wheelInitialSuspensionSpringLengthRtpc; // Offset: 0x568
    AudioRtpc wheelRadiusRtpc; // Offset: 0x588
    AudioRtpc wheelDrivingTorqueRtpc; // Offset: 0x5a8
    AudioRtpc wheelSteerRtpc; // Offset: 0x5c8
    AudioRtpc wheelSlipVelocityRtpc; // Offset: 0x5e8
    AudioRtpc wheelSlipVelocityLateralRtpc; // Offset: 0x608
    AudioRtpc wheelSuspensionRtpc; // Offset: 0x628
    AudioRtpc wheelCompressionRtpc; // Offset: 0x648
    AudioRtpc wheelGroundContactRtpc; // Offset: 0x668
    AudioRtpc wheelMassRtpc; // Offset: 0x688
    AudioRtpc wheelCountRtpc; // Offset: 0x6a8
    AudioRtpc wheelIndexRtpc; // Offset: 0x6c8
    float wheelMaxAudibleDistance; // Offset: 0x6e8
    int32_t wheelAudioStopDelay; // Offset: 0x6ec
    WheelAudioSurfaceMap wheelAudioSurfaceMap; // Offset: 0x6f0
};

// Original name: DynArray_SBeamEffectParams
// Generated DynArray for base type: SBeamEffectParams
// Size: 0x8
struct DynArray_SBeamEffectParams {
    SBeamEffectParams* m_data; // Offset: 0x0
};

// Original name: SGalactapediaData
// Size: 0x38
// VTable: 0x149a37ee0
struct SGalactapediaData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SGalactapediaCategory* categories; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ProceduralPlanetAudioEntry
// Size: 0x60
// VTable: 0x149a10e78
struct ProceduralPlanetAudioEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* audioName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float listenerMovementThreshold; // Offset: 0x18
    uint8_t _pad_2[0x4]; // Offset: 0x1c
    ProceduralPlanetAudioAlgorithm algorithm; // Offset: 0x20
    DynArray_ProceduralPlanetAudioDisturbanceList* disturbances; // Offset: 0x30 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x38
};

// Original name: DefaultActionsEntry
// Size: 0x80
// VTable: 0x149a8ba10
struct DefaultActionsEntry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* description; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_DefaultActionsEntityEntryCondition* conditions; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DefaultActions defaultActions; // Offset: 0x48
};

// Original name: MedBedTierParams
// Size: 0x40
// VTable: 0x149a72cf0
struct MedBedTierParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType medBedTier; // Offset: 0x8
    bool canRespawnHere; // Offset: 0xc
    uint8_t _pad_1[0x3]; // Offset: 0xd
    DynArray_DrugEfficacyForConsumableType* drugEfficacyForConsumableTypes; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: DrugEfficacyForItemSubType
// Size: 0x38
// VTable: 0x149a72db0
struct DrugEfficacyForItemSubType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DrugEfficacyForConsumableType* drugEfficacyForItemSubType; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_ConsumableType
// Generated DynArray for base type: ConsumableType
// Size: 0x8
struct DynArray_ConsumableType {
    ConsumableType* m_data; // Offset: 0x0
};

// Original name: ChargePingTypeParams
// Size: 0x50
// VTable: 0x1499c52d8
struct ChargePingTypeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float pingChargeUIShowTime; // Offset: 0x8
    float pingChargeUIJammedTime; // Offset: 0xc
    float pingChargeUIHideTime; // Offset: 0x10
    float pingChargeUIUnavailableTime; // Offset: 0x14
    float chargeTime; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_PingSettingsParams* pingSettingsParams; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: SPlayerSkillsParams
// Size: 0x1e8
// VTable: 0x149a852f8
struct SPlayerSkillsParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SFitnessLevelStats* fitnessLevelStats; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_SStrengthLevelStats* strengthLevelStats; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_SReflexLevelStats* reflexLevelStats; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_SFortitudeLevelStats* fortitudeLevelStats; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    SFitnessXPGains fitnessXPGains; // Offset: 0xc8
    SStrengthXPGains strengthXPGains; // Offset: 0xe0
    SReflexXPGains reflexXPGains; // Offset: 0x100
    SFortitudeXPGains fortitudeXPGains; // Offset: 0x118
    SPlayerSkillsTechniques techniques; // Offset: 0x138
    SActivityThresholds activityThresholds; // Offset: 0x1d0
};

// Original name: UIGraph_MovieClipTransformationInterpolatorComponent
// Size: 0x20
// VTable: 0x149a2f8d0
struct UIGraph_MovieClipTransformationInterpolatorComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MovieClipTransformationInterpolator movieClipTransformationInterpolator; // Offset: 0x8
};

// Original name: VehicleEditorEditableCategoriesData
// Size: 0x38
// VTable: 0x149a589f0
struct VehicleEditorEditableCategoriesData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_VehicleEditorCategoryData* categories; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SLocalPlayerShoppingData
// Size: 0x150
// VTable: 0x149a56eb0
struct SLocalPlayerShoppingData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SItemShopARParams defaultARParams; // Offset: 0x8
    DynArray_SLocalPlayerShoppingPredefinedARParams* predefinedARParams; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0xa8
    HUDSilhouetteParams silhouette; // Offset: 0xd0
    float keyHoldDuration; // Offset: 0x100
    uint8_t _pad_2[0x4]; // Offset: 0x104
    SLocalPlayerShoppingNotificationConfiguration notificationConfig; // Offset: 0x108
    CLocIdentifier* transactionComplete; // Offset: 0x140
    CLocIdentifier* transactionFail; // Offset: 0x148
};

// Original name: AIObservableFiltersProfile
// Size: 0x38
// VTable: 0x149a934b0
struct AIObservableFiltersProfile {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AIObservableFilters* observableFilters; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DockingSlotVisibility
// Size: 0x38
// VTable: 0x149a2f860
struct DockingSlotVisibility {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_DockingSlotVisibilityRule* rules; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ChatEmoteRecord
// Size: 0x38
// VTable: 0x149a8a940
struct ChatEmoteRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ChatEmotePack* packs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: InfractionSet
// Size: 0x38
// VTable: 0x14996f140
struct InfractionSet {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_Infraction* infractions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SSCSignatureSystemAudioParams
// Size: 0x38
// VTable: 0x1499ea350
struct SSCSignatureSystemAudioParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SSCSignatureSystemAudioRuleset* rulesets; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_GForceParams
// Generated DynArray for base type: GForceParams
// Size: 0x8
struct DynArray_GForceParams {
    GForceParams* m_data; // Offset: 0x0
};

// Original name: InnerThought_LayoutGrid
// Size: 0x100
// VTable: 0x149a989e8
struct InnerThought_LayoutGrid {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    InnerThought_ColorParams selectedColor; // Offset: 0x10
    InnerThought_ColorParams unselectedColor; // Offset: 0x28
    InnerThought_ColorParams secondaryColor; // Offset: 0x40
    Vec3 selectedOffset; // Offset: 0x58
    Vec3 unselectedOffset; // Offset: 0x70
    Vec3 secondaryOffset; // Offset: 0x88
    DynArray_InnerThought_LayoutGridSet* primarySets; // Offset: 0xa0 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0xa8
    DynArray_InnerThought_LayoutGridSet* secondarySets; // Offset: 0xd0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0xd8
};

// Original name: BodyHealthComponentParams
// Size: 0x48
// VTable: 0x149a81ce8
struct BodyHealthComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    HealthTemplate bodyHealthParamsRecord; // Offset: 0x18
    HealthTemplate bodyHealthParamsRecordSQ42Override; // Offset: 0x30
};

// Original name: AIProfile
// Size: 0x1f8
// VTable: 0x1499b77e0
struct AIProfile {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CharacterSkills character; // Offset: 0x8
    SeatOperatorSkills seatOperator; // Offset: 0x118
    TacticScoringProfile tacticSelectionScores; // Offset: 0x190
    SharedTacticParams sharedTacticParams; // Offset: 0x1c8
    ShootingParams shootingParams; // Offset: 0x1e0
};

// Original name: ActorLookAheadComponentParams
// Size: 0x30
// VTable: 0x149a646c0
struct ActorLookAheadComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    ActorLookAheadVehicle defaultLookAheadRecord; // Offset: 0x18
};

// Original name: DynArray_ProcBreathingGraphEntry
// Generated DynArray for base type: ProcBreathingGraphEntry
// Size: 0x8
struct DynArray_ProcBreathingGraphEntry {
    ProcBreathingGraphEntry* m_data; // Offset: 0x0
};

// Original name: SActorForceReactionKnockdownRangeDef
// Size: 0x1e8
// VTable: 0x149a4d328
struct SActorForceReactionKnockdownRangeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectRangeMin; // Offset: 0x8
    float effectRangeMax; // Offset: 0xc
    SActorForceReactionAimPunchConfig aimPunch; // Offset: 0x10
    SActorForceReactionWeaponTwitchConfig weaponTwitch; // Offset: 0x70
    SActorForceReactionHeadRecoilConfig headRecoil; // Offset: 0xb0
    SActorForceReactionFOVScaleConfig FOVScale; // Offset: 0x160
    SActorForceReactionMovementLaunchConfig launch; // Offset: 0x190
    SActorForceReactionBlockADSConfig blockADS; // Offset: 0x1d0
};

// Original name: SActorForceReactionFlinchRangeDef
// Size: 0x1b8
// VTable: 0x149a4cdc8
struct SActorForceReactionFlinchRangeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectRangeMin; // Offset: 0x8
    float effectRangeMax; // Offset: 0xc
    SActorForceReactionAimPunchConfig aimPunch; // Offset: 0x10
    SActorForceReactionWeaponTwitchConfig weaponTwitch; // Offset: 0x70
    SActorForceReactionHeadRecoilConfig headRecoil; // Offset: 0xb0
    SActorForceReactionFOVScaleConfig FOVScale; // Offset: 0x160
    SActorForceReactionAnimationFlinchConfig animationFlinch; // Offset: 0x190
    SActorForceReactionBlockADSConfig blockADS; // Offset: 0x1a0
};

// Original name: SActorForceReactionStaggerRangeDef
// Size: 0x1c8
// VTable: 0x149a4cfe8
struct SActorForceReactionStaggerRangeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectRangeMin; // Offset: 0x8
    float effectRangeMax; // Offset: 0xc
    SActorForceReactionAimPunchConfig aimPunch; // Offset: 0x10
    SActorForceReactionWeaponTwitchConfig weaponTwitch; // Offset: 0x70
    SActorForceReactionHeadRecoilConfig headRecoil; // Offset: 0xb0
    SActorForceReactionFOVScaleConfig FOVScale; // Offset: 0x160
    SActorForceReactionAnimationStaggerConfig animationStagger; // Offset: 0x190
    SActorForceReactionBlockADSConfig blockADS; // Offset: 0x1b0
};

// Original name: SActorForceReactionTwitchRangeDef
// Size: 0x1b8
// VTable: 0x149a4cb88
struct SActorForceReactionTwitchRangeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float effectRangeMin; // Offset: 0x8
    float effectRangeMax; // Offset: 0xc
    SActorForceReactionAimPunchConfig aimPunch; // Offset: 0x10
    SActorForceReactionWeaponTwitchConfig weaponTwitch; // Offset: 0x70
    SActorForceReactionHeadRecoilConfig headRecoil; // Offset: 0xb0
    SActorForceReactionFOVScaleConfig FOVScale; // Offset: 0x160
    SActorForceReactionAnimationTwitchConfig animationTwitch; // Offset: 0x190
    SActorForceReactionBlockADSConfig blockADS; // Offset: 0x1a0
};

// Original name: AbilityBreathingParams
// Size: 0x38
// VTable: 0x149a395a0
struct AbilityBreathingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AbilityBreathAction* breathActions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SXYZCurvesWithMaxValues
// Size: 0x78
// VTable: 0x149a5e160
struct SXYZCurvesWithMaxValues {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float xMaxValue; // Offset: 0x8
    float yMaxValue; // Offset: 0xc
    float zMaxValue; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    Vec3 minLimits; // Offset: 0x18
    Vec3 maxLimits; // Offset: 0x30
    SXYZCurvesArrays curves; // Offset: 0x48
    SHandsRecoilCurveNoiseParams noiseParams; // Offset: 0x58
};

// Original name: WeaponProceduralClipPose
// Size: 0x490
// VTable: 0x149aabfd0
struct WeaponProceduralClipPose {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float blendTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    ARDataType poseType; // Offset: 0x10
    float zoomTransitionAngle; // Offset: 0x14
    Vec3 position; // Offset: 0x18
    Ang3 rotation; // Offset: 0x30
    float zoomTransitionTimeMultiplier; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    WeaponPoseInterpolationCurves interpolationCurves; // Offset: 0x50
    bool useAimHelperOffset; // Offset: 0x488
    uint8_t _pad_3[0x7]; // Offset: 0x489
};

// Original name: SWeaponProceduralAimRecoilConfigDef
// Size: 0x100
// VTable: 0x149a5ee90
struct SWeaponProceduralAimRecoilConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Vec2 max; // Offset: 0x8
    float pull_left_percentage; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    Vec2 shot_kick_first; // Offset: 0x20
    Vec2 shot_kick; // Offset: 0x30
    float random_pitch; // Offset: 0x40
    float random_yaw; // Offset: 0x44
    float decay; // Offset: 0x48
    float end_decay; // Offset: 0x4c
    float recoil_time; // Offset: 0x50
    float delay; // Offset: 0x54
    SWeaponProceduralAimRecoilCurveConfigDef curveAimRecoil; // Offset: 0x58
};

// Original name: EntityComponentVibrationVehicleParams
// Size: 0x48
// VTable: 0x149a15990
struct EntityComponentVibrationVehicleParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    SVibrationDef vibrationRecord; // Offset: 0x18
    SVibrationVehicleDef vibrationVehicleRecord; // Offset: 0x30
};

// Original name: CinematicFlightPointsRecord
// Size: 0x38
// VTable: 0x149a93990
struct CinematicFlightPointsRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CinematicFlythroughPoint* flightPoints; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_PlayerUsableView
// Generated DynArray for base type: PlayerUsableView
// Size: 0x8
struct DynArray_PlayerUsableView {
    PlayerUsableView* m_data; // Offset: 0x0
};

// Original name: DynArray_ControlHintDef
// Generated DynArray for base type: ControlHintDef
// Size: 0x8
struct DynArray_ControlHintDef {
    ControlHintDef* m_data; // Offset: 0x0
};

// Original name: SPerkReputationListParams
// Size: 0x38
// VTable: 0x149a97140
struct SPerkReputationListParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SPerkReputationParams* perks; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: PartialContractRewardRange
// Size: 0x48
// VTable: 0x149972a78
struct PartialContractRewardRange {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t minPercentage; // Offset: 0x8
    int32_t maxPercentage; // Offset: 0xc
    float currencyRewardMultiplier; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_PartialContractRewardRepAdjustment* reputationMultipliers; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: SReputationContextUI
// Size: 0x90
// VTable: 0x149a96320
struct SReputationContextUI {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType sortOrderScope; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    SReputationScopeContextUI primaryScopeContext; // Offset: 0x10
    DynArray_SReputationScopeContextUI* scopeContextList; // Offset: 0x60 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x68
};

// Original name: SandboxTriggerManualParams
// Size: 0x50
// VTable: 0x149a97920
struct SandboxTriggerManualParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SandboxInfractionBaseDef infractionTrigger; // Offset: 0x8
    bool triggerOnInnocentsOnly; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    DynArray_ReputationRewardBaseDef* outcomes; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: FoleyDefinition
// Size: 0x70
// VTable: 0x149a68670
struct FoleyDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t priority; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_FoleyItem* items; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_UserRTPC* userRTPCs; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x48
};

// Original name: BuildingBlocks_Style
// Size: 0x98
// VTable: 0x149981df0
struct BuildingBlocks_Style {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_BuildingBlocks_StyleEntry* entries; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_BuildingBlocks_ColorBase* colorStyles; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_BuildingBlocks_TextEmphasisModifierList* textFieldModifiers; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: BuildingBlocks_Timeline
// Size: 0x40
// VTable: 0x149986790
struct BuildingBlocks_Timeline {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_TimelineTypeEmbedded timeline; // Offset: 0x8
};

// Original name: SCMeleeWeaponParams
// Size: 0x70
// VTable: 0x149a7d370
struct SCMeleeWeaponParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* helper; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* audioTriggerName; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* matFxTriggerName; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    bool canBeUsedForTakeDown; // Offset: 0x48
    uint8_t _pad_4[0x7]; // Offset: 0x49
    WeaponProceduralAnimation proceduralAnimationRecord; // Offset: 0x50
    bool canBlock; // Offset: 0x68
    bool canBeUsedInProne; // Offset: 0x69
    bool canDodge; // Offset: 0x6a
    uint8_t _pad_5[0x1]; // Offset: 0x6b
    float stanceTransitionMeleeDelay; // Offset: 0x6c
};

// Original name: SCharacterCustomizerDialogueData
// Size: 0xa8
// VTable: 0x149a0ccd8
struct SCharacterCustomizerDialogueData {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float minTimeBetweenMainLines; // Offset: 0x8
    float minTimeBetweenWildlines; // Offset: 0xc
    float maxTimeBetweenWildlines; // Offset: 0x10
    uint8_t _pad_1[0x4]; // Offset: 0x14
    DynArray_SCharacterCustomizerDialogueEntry* wildlineEntries; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
    DynArray_SCharacterCustomizerDialogueEntry* stepTriggers; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x50
    DynArray_SCharacterCustomizerDialogueEntry* featureTriggers; // Offset: 0x78 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x80
};

// Original name: SeatUserActorCDIKRecord
// Size: 0x38
// VTable: 0x149a7da40
struct SeatUserActorCDIKRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SeatUserActorCDIKMapping* filters; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCItemVisorDisplayParams
// Size: 0x48
// VTable: 0x149a39168
struct SCItemVisorDisplayParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float globalConstraint; // Offset: 0x18
    float topConstraintOffset; // Offset: 0x1c
    float rightConstraintOffset; // Offset: 0x20
    float bottomConstraintOffset; // Offset: 0x24
    float leftConstraintOffset; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    SCItemVisorDashboardConfig dashboardConfig; // Offset: 0x30
};

// Original name: ProceduralLandingFilter
// Size: 0x68
// VTable: 0x149aa2ab8
struct ProceduralLandingFilter {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* filterName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x18
    ARDataType filterByMotionSpeed; // Offset: 0x1c
    ARDataType filterByPoseState; // Offset: 0x20
    ARDataType filterByStanceState; // Offset: 0x24
    ARDataType filterByAimStanceState; // Offset: 0x28
    ARDataType filterByLeanState; // Offset: 0x2c
    ARDataType filterByHeldItemType; // Offset: 0x30
    ARDataType filterBySkeleton; // Offset: 0x34
    ARDataType filterByCharacterType; // Offset: 0x38
    ARDataType filterByRestrainedState; // Offset: 0x3c
    ARDataType filterByPlayerCamera; // Offset: 0x40
    ARDataType filterByAimingRestriction; // Offset: 0x44
    ARDataType filterByLandingStrength; // Offset: 0x48
    uint8_t _pad_2[0x4]; // Offset: 0x4c
    ProceduralAnimation animationRecord; // Offset: 0x50
};

// Original name: AttackCategoryParams
// Size: 0x60
// VTable: 0x149aa4390
struct AttackCategoryParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DamageInfo damageInfo; // Offset: 0x8
    ARDataType actionCategory; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    ProceduralAnimation cameraShakeParams; // Offset: 0x30
    float stunRecoveryModifier; // Offset: 0x48
    float blockStunReductionModifier; // Offset: 0x4c
    float blockStunStaminaModifier; // Offset: 0x50
    float attackImpulse; // Offset: 0x54
    bool ignoreBodyPartImpulseScale; // Offset: 0x58
    bool fullbodyAnimation; // Offset: 0x59
    uint8_t _pad_2[0x2]; // Offset: 0x5a
    ARDataType forceKnockdown; // Offset: 0x5c
};

// Original name: DynArray_ActorProceduralRecoilSetup
// Generated DynArray for base type: ActorProceduralRecoilSetup
// Size: 0x8
struct DynArray_ActorProceduralRecoilSetup {
    ActorProceduralRecoilSetup* m_data; // Offset: 0x0
};

// Original name: CockpitResponses
// Size: 0x38
// VTable: 0x1499b3720
struct CockpitResponses {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CockpitResponse* responses; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ShipComputerPreset
// Size: 0x70
// VTable: 0x149a95528
struct ShipComputerPreset {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    CryStringT* name; // Offset: 0x10
    uint8_t _pad_1[0x8]; // Offset: 0x18
    ShipComputerPreset base; // Offset: 0x20
    CLocIdentifier* displayText; // Offset: 0x38
    DynArray_CockpitResponse* responses; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
};

// Original name: AnimatedHelmetParams
// Size: 0x38
// VTable: 0x149a00560
struct AnimatedHelmetParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SHelmetStateMachineParams* stateMachines; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ItemControllerComponentParams
// Size: 0x48
// VTable: 0x149a076c0
struct ItemControllerComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool allowTogglePowerObservedItems; // Offset: 0x18
    uint8_t _pad_1[0x7]; // Offset: 0x19
    OperatorModeDefinitionParams operatorModeDefinitionsOverride; // Offset: 0x20
    SCItemControlPriorities additionalItemControlPriorities; // Offset: 0x38
};

// Original name: ItemTypeDefinition
// Size: 0x88
// VTable: 0x149aa7db0
struct ItemTypeDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemTypeCategory defaultCategory; // Offset: 0x8
    DynArray_ItemTypeCategory* categories; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    DynArray_ItemTypeInfo* typeInfo; // Offset: 0x48 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x50
    CLocIdentifier* allCategoriesLabel; // Offset: 0x78
    CLocIdentifier* allTypesLabel; // Offset: 0x80
};

// Original name: HudColors
// Size: 0x68
// VTable: 0x149aa12f8
struct HudColors {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_HudColor_HoloParam* HoloMatParams; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_HudColor_Palette* Palettes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: CameraEffectsModifiers
// Size: 0x158
// VTable: 0x149a7c7f8
struct CameraEffectsModifiers {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float smoothing; // Offset: 0x8
    float chromaticAbberation; // Offset: 0xc
    float fStopMin; // Offset: 0x10
    float fStopMax; // Offset: 0x14
    ARDataType suggestedFOVMode; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    BezierCurve fovMapping; // Offset: 0x20
    BezierCurve cameraEffectsMapping; // Offset: 0xb0
    CameraLensParams opticsLensPreset; // Offset: 0x140
};

// Original name: CameraSourceComponentParams
// Size: 0x108
// VTable: 0x1499cc538
struct CameraSourceComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float FOV; // Offset: 0x18
    float NearZ; // Offset: 0x1c
    float FarZ; // Offset: 0x20
    float FStop; // Offset: 0x24
    float FocalDistance; // Offset: 0x28
    uint8_t _pad_1[0x4]; // Offset: 0x2c
    Camera DFCameraRecord; // Offset: 0x30
    CameraSourceShakeParams ShakeParams; // Offset: 0x48
    bool CanUseAsViewOverride; // Offset: 0xe8
    bool CamOverrideExcludeFromLocalCapture; // Offset: 0xe9
    uint8_t _pad_2[0x6]; // Offset: 0xea
    CameraLensParams OpticsLensPreset; // Offset: 0xf0
};

// Original name: FireHazardGlobalSmokeParams
// Size: 0x58
// VTable: 0x14997b7e8
struct FireHazardGlobalSmokeParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AtmosphericCompositionTemplate defaultSmokeComposition; // Offset: 0x8
    float dynamicPart; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    GasParams particulateMatter; // Offset: 0x28
    GasParams waterVapor; // Offset: 0x40
};

// Original name: SAtmosphericCompositionTemplateRef
// Size: 0x20
// VTable: 0x14997a0e0
struct SAtmosphericCompositionTemplateRef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    AtmosphericCompositionTemplate compositionRecord; // Offset: 0x8
};

// Original name: AnimatedMarker_Marker
// Size: 0x98
// VTable: 0x149aa6230
struct AnimatedMarker_Marker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_CryStringT* matrixStackID; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_AnimationGraph_Timeline* timelines; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_AnimationGraph_Timer* timers; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: StatusMaskedRetriggerSetupPreset
// Size: 0x18
// VTable: 0x1499fd6a0
struct StatusMaskedRetriggerSetupPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StatusMaskedRetriggerPreset preset; // Offset: 0x8
};

// Original name: DynArray_StatusMaskedRetriggerPreset
// Generated DynArray for base type: StatusMaskedRetriggerPreset
// Size: 0x8
struct DynArray_StatusMaskedRetriggerPreset {
    StatusMaskedRetriggerPreset* m_data; // Offset: 0x0
};

// Original name: StatusEffectSetup
// Size: 0x38
// VTable: 0x1499fd4a0
struct StatusEffectSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorStatusData* actorStatuses; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: AnimationJointControl
// Size: 0x98
// VTable: 0x1499a2bc0
struct AnimationJointControl {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AnimationVariable* variables; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_AnimationJointMovement* movements; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_AnimationMovement* animations; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: DynArray_ActionRuleList
// Generated DynArray for base type: ActionRuleList
// Size: 0x8
struct DynArray_ActionRuleList {
    ActionRuleList* m_data; // Offset: 0x0
};

// Original name: SGameRulesAnnouncerParams
// Size: 0x30
// VTable: 0x1499d4688
struct SGameRulesAnnouncerParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Announcer announcer; // Offset: 0x8
    CryStringT* announcerGameModeTokenName; // Offset: 0x20
    uint8_t _pad_1[0x8]; // Offset: 0x28
};

// Original name: DynArray_SRangedWeaponStats
// Generated DynArray for base type: SRangedWeaponStats
// Size: 0x8
struct DynArray_SRangedWeaponStats {
    SRangedWeaponStats* m_data; // Offset: 0x0
};

// Original name: ItemWeaponModifiersParams
// Size: 0x3f8
// VTable: 0x1499f7048
struct ItemWeaponModifiersParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ItemModifierLifetime modifierLifetime; // Offset: 0x8
    int32_t fireActionIndex; // Offset: 0x18
    bool setFireActionOnEnable; // Offset: 0x1c
    uint8_t _pad_1[0x3]; // Offset: 0x1d
    SWeaponModifierParams weaponModifier; // Offset: 0x20
    bool showInUI; // Offset: 0x3f0
    uint8_t _pad_2[0x7]; // Offset: 0x3f1
};

// Original name: DynArray_SWeaponModifierParams
// Generated DynArray for base type: SWeaponModifierParams
// Size: 0x8
struct DynArray_SWeaponModifierParams {
    SWeaponModifierParams* m_data; // Offset: 0x0
};

// Original name: SAsteroidShapeComponentParams
// Size: 0xb8
// VTable: 0x14999f858
struct SAsteroidShapeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    int32_t rngSeed; // Offset: 0x18
    uint8_t viewDistRatio; // Offset: 0x1c
    uint8_t lodRatio; // Offset: 0x1d
    uint8_t _pad_1[0x2]; // Offset: 0x1e
    CryStringT* composition; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    float noiseAmplitude; // Offset: 0x30
    float noiseGranularity; // Offset: 0x34
    float noiseRoughness; // Offset: 0x38
    uint8_t _pad_3[0xc]; // Offset: 0x3c
    float densityScale; // Offset: 0x48
    float noiseFrequencyX; // Offset: 0x4c
    float noiseFrequencyY; // Offset: 0x50
    float noiseFrequencyZ; // Offset: 0x54
    DynArray_AsteroidFieldShapeLinkParams* shapeLinks; // Offset: 0x58 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x60
    DynArray_CryStringT* exclusionShapeLinks; // Offset: 0x88 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x90
};

// Original name: SCItemObservableParams
// Size: 0x50
// VTable: 0x149a07030
struct SCItemObservableParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SCItemObservableGroupParams* observableGroups; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x40]; // Offset: 0x10
};

// Original name: DynArray_CtxGraph_Group
// Generated DynArray for base type: CtxGraph_Group
// Size: 0x8
struct DynArray_CtxGraph_Group {
    CtxGraph_Group* m_data; // Offset: 0x0
};

// Original name: EntityComponentVibrationAudioPointParams
// Size: 0x30
// VTable: 0x149a11440
struct EntityComponentVibrationAudioPointParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    VibrationAudioPointDef pointDefinition; // Offset: 0x18
};

// Original name: SBeamGroupParams
// Size: 0x1d0
// VTable: 0x149a5fd40
struct SBeamGroupParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* hitEffectName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    bool cuttableImpacts; // Offset: 0x18
    bool detachOnActivate; // Offset: 0x19
    bool tractorBeam; // Offset: 0x1a
    bool skipListIncludeOwner; // Offset: 0x1b
    bool useADSHelper; // Offset: 0x1c
    bool immediateRaycast; // Offset: 0x1d
    uint8_t _pad_2[0x2]; // Offset: 0x1e
    AudioSwitch beamSizeSwitch; // Offset: 0x20
    GlobalResourceAudio beamAudioOneShot; // Offset: 0x58
    GlobalResourceAudio beamLoopAudioTrigger; // Offset: 0x78
    GlobalResourceAudio beamStopAudioTrigger; // Offset: 0x98
    AudioRtpc beamActiveRTPC; // Offset: 0xb8
    AudioRtpc beamModifierRTPC; // Offset: 0xd8
    ARDataType beamModifierRTPCSource; // Offset: 0xf8
    ARDataType beamImpactModifierSource; // Offset: 0xfc
    GlobalResourceAudio beamImpactStartTriggerOneShot; // Offset: 0x100
    GlobalResourceAudio beamImpactStopTriggerOneShot; // Offset: 0x120
    GlobalResourceAudio beamImpactStartTrigger; // Offset: 0x140
    GlobalResourceAudio beamImpactStopTrigger; // Offset: 0x160
    AudioRtpc targetAttractionRTPC; // Offset: 0x180
    DynArray_SBeamEffectParams* beamEffects; // Offset: 0x1a0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x1a8
};

// Original name: SS42GalactapediaSourceDataParams
// Size: 0x20
// VTable: 0x149a37f40
struct SS42GalactapediaSourceDataParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SGalactapediaData sourceList; // Offset: 0x8
};

// Original name: DynArray_ProceduralPlanetAudioEntry
// Generated DynArray for base type: ProceduralPlanetAudioEntry
// Size: 0x8
struct DynArray_ProceduralPlanetAudioEntry {
    ProceduralPlanetAudioEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_DefaultActionsEntry
// Generated DynArray for base type: DefaultActionsEntry
// Size: 0x8
struct DynArray_DefaultActionsEntry {
    DefaultActionsEntry* m_data; // Offset: 0x0
};

// Original name: DynArray_MedBedTierParams
// Generated DynArray for base type: MedBedTierParams
// Size: 0x8
struct DynArray_MedBedTierParams {
    MedBedTierParams* m_data; // Offset: 0x0
};

// Original name: DrugEfficacyConfigForItemSubType
// Size: 0x48
// VTable: 0x149a72e10
struct DrugEfficacyConfigForItemSubType {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemSubType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DrugEfficacyForItemSubType drugEfficacyForItemSubType; // Offset: 0x10
};

// Original name: DynArray_DrugEfficacyForItemSubType
// Generated DynArray for base type: DrugEfficacyForItemSubType
// Size: 0x8
struct DynArray_DrugEfficacyForItemSubType {
    DrugEfficacyForItemSubType* m_data; // Offset: 0x0
};

// Original name: ConsumableTypeDatabase
// Size: 0x38
// VTable: 0x149a253a0
struct ConsumableTypeDatabase {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ConsumableType* types; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SSCLocalPlayerUIComponentParams
// Size: 0x40
// VTable: 0x149a56f88
struct SSCLocalPlayerUIComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    bool showRespawnTextForSameLocation; // Offset: 0x18
    uint8_t _pad_1[0x3]; // Offset: 0x19
    float respawnScreenWaitTimeAfterTextFinishedSeconds; // Offset: 0x1c
    float respawnScreenMaxTextWaitTimeSeconds; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    SLocalPlayerShoppingData shoppingData; // Offset: 0x28
};

// Original name: SVisionComponentParams
// Size: 0x50
// VTable: 0x149a02648
struct SVisionComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    AIVisualFieldProfile visualFieldProfile; // Offset: 0x18
    AIObservableFiltersProfile filterProfile; // Offset: 0x30
    uint8_t _pad_1[0x8]; // Offset: 0x48
};

// Original name: DynArray_InfractionSet
// Generated DynArray for base type: InfractionSet
// Size: 0x8
struct DynArray_InfractionSet {
    InfractionSet* m_data; // Offset: 0x0
};

// Original name: ActorGForceComponent
// Size: 0x38
// VTable: 0x149a18710
struct ActorGForceComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_GForceParams* gForceParams; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ProcBreathingExertion
// Size: 0x50
// VTable: 0x149a6c808
struct ProcBreathingExertion {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    float maxStamina; // Offset: 0x18
    float maxFullness; // Offset: 0x1c
    DynArray_ProcBreathingGraphEntry* entries; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: DynArray_SActorForceReactionKnockdownRangeDef
// Generated DynArray for base type: SActorForceReactionKnockdownRangeDef
// Size: 0x8
struct DynArray_SActorForceReactionKnockdownRangeDef {
    SActorForceReactionKnockdownRangeDef* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionFlinchRangeDef
// Generated DynArray for base type: SActorForceReactionFlinchRangeDef
// Size: 0x8
struct DynArray_SActorForceReactionFlinchRangeDef {
    SActorForceReactionFlinchRangeDef* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionStaggerRangeDef
// Generated DynArray for base type: SActorForceReactionStaggerRangeDef
// Size: 0x8
struct DynArray_SActorForceReactionStaggerRangeDef {
    SActorForceReactionStaggerRangeDef* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionTwitchRangeDef
// Generated DynArray for base type: SActorForceReactionTwitchRangeDef
// Size: 0x8
struct DynArray_SActorForceReactionTwitchRangeDef {
    SActorForceReactionTwitchRangeDef* m_data; // Offset: 0x0
};

// Original name: AbilityDefinition
// Size: 0x78
// VTable: 0x149a39650
struct AbilityDefinition {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ARDataType* abilitiesToLock; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ARDataType* abilitiesToInterrupt; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    AbilityBreathingParams breathingParams; // Offset: 0x68
};

// Original name: SWeaponProceduralHandsRecoilCurveConfigDef
// Size: 0x268
// VTable: 0x149a5e658
struct SWeaponProceduralHandsRecoilCurveConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float totalRecoilTime; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    Vec3 positionRecoilTimeModifiers; // Offset: 0x10
    Vec3 rotationRecoilTimeModifiers; // Offset: 0x28
    float limitTransitionTime; // Offset: 0x40
    uint8_t _pad_2[0x4]; // Offset: 0x44
    SXYZCurvesWithMaxValues positionCurves; // Offset: 0x48
    SXYZCurvesWithMaxValues rotationCurves; // Offset: 0xc0
    float minDecayTime; // Offset: 0x138
    float maxDecayTime; // Offset: 0x13c
    SDecayTimesAndCurves positionDecay; // Offset: 0x140
    SDecayTimesAndCurves rotationDecay; // Offset: 0x1c0
    Vec3 rotationOffset; // Offset: 0x240
    SHandsRecoilTimeModifier timeModifier; // Offset: 0x258
};

// Original name: ControlHint_Entry
// Size: 0x48
// VTable: 0x149a678c8
struct ControlHint_Entry {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    DynArray_ControlHintDef* controlHintList; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x20
};

// Original name: DynArray_SPerkReputationListParams
// Generated DynArray for base type: SPerkReputationListParams
// Size: 0x8
struct DynArray_SPerkReputationListParams {
    SPerkReputationListParams* m_data; // Offset: 0x0
};

// Original name: DynArray_PartialContractRewardRange
// Generated DynArray for base type: PartialContractRewardRange
// Size: 0x8
struct DynArray_PartialContractRewardRange {
    PartialContractRewardRange* m_data; // Offset: 0x0
};

// Original name: SReputationContextPropertiesUI
// Size: 0x20
// VTable: 0x149a96380
struct SReputationContextPropertiesUI {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SReputationContextUI context; // Offset: 0x8
};

// Original name: DynArray_SandboxTriggerManualParams
// Generated DynArray for base type: SandboxTriggerManualParams
// Size: 0x8
struct DynArray_SandboxTriggerManualParams {
    SandboxTriggerManualParams* m_data; // Offset: 0x0
};

// Original name: SCItemFoleyParams
// Size: 0x30
// VTable: 0x1499faa50
struct SCItemFoleyParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    FoleyDefinition FoleyDef; // Offset: 0x18
};

// Original name: EASpecialEventInformationParams
// Size: 0x98
// VTable: 0x1499fa298
struct EASpecialEventInformationParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    uint32_t badgeId; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CLocIdentifier* eventTitle; // Offset: 0x10
    CLocIdentifier* eventDescription; // Offset: 0x18
    CryStringT* bannerImage; // Offset: 0x20
    uint8_t _pad_2[0x8]; // Offset: 0x28
    CryStringT* loadscreenOverride; // Offset: 0x30
    uint8_t _pad_3[0x8]; // Offset: 0x38
    CryStringT* backgroundVideoOverride; // Offset: 0x40
    uint8_t _pad_4[0x8]; // Offset: 0x48
    DynArray_ARDataType* modesActiveWithEvent; // Offset: 0x50 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x58
    BuildingBlocks_Style style; // Offset: 0x80
};

// Original name: BuildingBlocks_BrandStyles
// Size: 0x68
// VTable: 0x149981f20
struct BuildingBlocks_BrandStyles {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Style brandIdentifier; // Offset: 0x8
    BuildingBlocks_Style sharedStyles; // Offset: 0x20
    DynArray_BuildingBlocks_StyleEntry* entries; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x40
};

// Original name: BuildingBlocks_DefaultStyles
// Size: 0x50
// VTable: 0x149981e78
struct BuildingBlocks_DefaultStyles {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Style sharedStyles; // Offset: 0x8
    DynArray_BuildingBlocks_StyleEntry* entries; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x28
};

// Original name: BuildingBlocks_TimelineTypeReference
// Size: 0x20
// VTable: 0x1499866d0
struct BuildingBlocks_TimelineTypeReference {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    BuildingBlocks_Timeline timelineRecord; // Offset: 0x8
};

// Original name: DynArray_ProceduralLandingFilter
// Generated DynArray for base type: ProceduralLandingFilter
// Size: 0x8
struct DynArray_ProceduralLandingFilter {
    ProceduralLandingFilter* m_data; // Offset: 0x0
};

// Original name: MeleeAttackCategoryInfo
// Size: 0x28
// VTable: 0x149aa4418
struct MeleeAttackCategoryInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* fragmentTag; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    AttackCategoryParams attackCategoryParams; // Offset: 0x18
};

// Original name: DynArray_AttackCategoryParams
// Generated DynArray for base type: AttackCategoryParams
// Size: 0x8
struct DynArray_AttackCategoryParams {
    AttackCategoryParams* m_data; // Offset: 0x0
};

// Original name: ActorProceduralRecoilConfig
// Size: 0x38
// VTable: 0x149a722d0
struct ActorProceduralRecoilConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorProceduralRecoilSetup* actorProceduralRecoilSetup; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_ShipComputerPreset
// Generated DynArray for base type: ShipComputerPreset
// Size: 0x8
struct DynArray_ShipComputerPreset {
    ShipComputerPreset* m_data; // Offset: 0x0
};

// Original name: ActorGForceCameraEffects
// Size: 0x180
// VTable: 0x149a18bb8
struct ActorGForceCameraEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    bool effectsOnlyAppliedForward; // Offset: 0x8
    uint8_t _pad_1[0x3]; // Offset: 0x9
    float gForceBoostAngleOuter; // Offset: 0xc
    float gForceBoostAngleInner; // Offset: 0x10
    float gForceBoostMin; // Offset: 0x14
    float gForceBoostMax; // Offset: 0x18
    float gForceBoostFOV; // Offset: 0x1c
    float focusDistance; // Offset: 0x20
    uint8_t _pad_2[0x4]; // Offset: 0x24
    CameraEffectsModifiers genericModifiers; // Offset: 0x28
};

// Original name: SQuantumCameraEffectsDef
// Size: 0x170
// VTable: 0x149a54a30
struct SQuantumCameraEffectsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float angleOuter; // Offset: 0x8
    float angleInner; // Offset: 0xc
    float fovChange; // Offset: 0x10
    float focusDistance; // Offset: 0x14
    CameraEffectsModifiers genericModifiers; // Offset: 0x18
};

// Original name: ActorSpeedCameraEffects
// Size: 0x170
// VTable: 0x149a9c310
struct ActorSpeedCameraEffects {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float speedBoostMin; // Offset: 0x8
    float speedBoostMax; // Offset: 0xc
    float speedBoostFOV; // Offset: 0x10
    float focusDistance; // Offset: 0x14
    CameraEffectsModifiers genericModifiers; // Offset: 0x18
};

// Original name: JumpTravelCameraParams
// Size: 0x3e8
// VTable: 0x1499f5ea8
struct JumpTravelCameraParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CameraEffectsModifiers genericModifiers; // Offset: 0x8
    GlobalJumpTunnelCameraEffectParams cameraEffectParams; // Offset: 0x160
};

// Original name: FireHazardGlobalParams
// Size: 0x448
// VTable: 0x14997cb38
struct FireHazardGlobalParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    FireHazardGlobalUpdate update; // Offset: 0x8
    FireHazardGlobalIgnition ignition; // Offset: 0x18
    FireHazardGlobalPropagation propagation; // Offset: 0xf0
    FireHazardGlobalSmokeParams smoke; // Offset: 0x120
    FireHazardGlobalDamageToHealthParams damageToHealth; // Offset: 0x178
    FireHazardGlobalExtinguishing extinguishing; // Offset: 0x190
    FireHazardGlobalDefaultEffects defaultEffects; // Offset: 0x1c8
    FireHazardGlobalLightParams lightParams; // Offset: 0x268
    FireHazardGlobalRoomConnectorParams roomConnector; // Offset: 0x2e8
    FireHazardSpawnParams particleSpawning; // Offset: 0x328
    FireHazardFogParams fog; // Offset: 0x340
    FireHazardPermanentEffects permanentEffects; // Offset: 0x398
};

// Original name: DynArray_AnimatedMarker_Marker
// Generated DynArray for base type: AnimatedMarker_Marker
// Size: 0x8
struct DynArray_AnimatedMarker_Marker {
    AnimatedMarker_Marker* m_data; // Offset: 0x0
};

// Original name: ActorStatusPreset
// Size: 0x40
// VTable: 0x1499fd500
struct ActorStatusPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    StatusEffectSetup effectSetup; // Offset: 0x8
};

// Original name: SAnimationControllerParams
// Size: 0x148
// VTable: 0x1499a2558
struct SAnimationControllerParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* AnimationDatabase; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* AnimationController; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    DynArray_CryStringT* Tags; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x40
    DynArray_SAnimationScopeContext* ScopeContexts; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x70
    AnimationJointControl AnimationJointControls; // Offset: 0x98
    DynArray_AnimationControlActorIK* AnimationControlActorIKs; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xb0
    DynArray_SSequencerAnimationTaskParamsBase* AnimationTasks; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0xe0
    SSequencerAnimationTaskParamsBase defaultAnimation; // Offset: 0x108
    uint8_t _pad_7[0x30]; // Offset: 0x118
};

// Original name: PersonalThoughtActionsRulesParams
// Size: 0x38
// VTable: 0x149a998f0
struct PersonalThoughtActionsRulesParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActionRuleList* actionRulesList; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: WeaponGimbalModeModifierDef
// Size: 0x38
// VTable: 0x149a61760
struct WeaponGimbalModeModifierDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SWeaponModifierParams* weaponGimbalModeModifiers; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SCItemControlAIModuleParams
// Size: 0x28
// VTable: 0x149a07118
struct SCItemControlAIModuleParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCItemObservableParams aiModuleObserve; // Offset: 0x8
    SCItemControllableParams aiModuleControl; // Offset: 0x18
};

// Original name: SCItemControlSeatParams
// Size: 0x38
// VTable: 0x149a071c0
struct SCItemControlSeatParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SCItemObservableParams observables; // Offset: 0x8
    SCItemControllableParams usableControl; // Offset: 0x18
    SCItemControllableParams userControl; // Offset: 0x28
};

// Original name: CtxGraph
// Size: 0x70
// VTable: 0x149aa6c98
struct CtxGraph {
    uint8_t _pad_0[0x10]; // Offset: 0x0
    DynArray_CtxGraph_Group* groups; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x18
    DynArray_CtxGraph_Node* nodes; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x48
};

// Original name: SAuxiliaryWeaponActionBeamParams
// Size: 0x30
// VTable: 0x149a694f0
struct SAuxiliaryWeaponActionBeamParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float range; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* helper; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    SBeamGroupParams beamGroup; // Offset: 0x20
};

// Original name: SWeaponModifierBeamEffectParams
// Size: 0x1f0
// VTable: 0x149a690b0
struct SWeaponModifierBeamEffectParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float beamRange; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* fireHelper; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    SBeamGroupParams beamGroup; // Offset: 0x20
};

// Original name: ActorDefaultActionsConfig
// Size: 0x80
// VTable: 0x149a8bac0
struct ActorDefaultActionsConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t versionID; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_DefaultActionsEntry* defaultActionsList; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    DynArray_DefaultActionDescriptionOverride* defaultActionsDescriptions; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_3[0x38]; // Offset: 0x48
};

// Original name: MedicalItemTierConfig
// Size: 0x98
// VTable: 0x149a73000
struct MedicalItemTierConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MedBedTierParams* medBedConfigs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_DrugEfficacyForItemType* drugEfficacyConfig; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_DrugTypeToApply* availableDrugTypes; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
};

// Original name: DrugEfficacyConfigForItemSubTypeWeapon
// Size: 0x40
// VTable: 0x149a72e70
struct DrugEfficacyConfigForItemSubTypeWeapon {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType itemSubType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_DrugEfficacyForItemSubType* drugEfficacyForItemSubType; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
};

// Original name: DynArray_ProcBreathingExertion
// Generated DynArray for base type: ProcBreathingExertion
// Size: 0x8
struct DynArray_ProcBreathingExertion {
    ProcBreathingExertion* m_data; // Offset: 0x0
};

// Original name: SActorForceReactionKnockdownConfigDef
// Size: 0x70
// VTable: 0x149a4d3a8
struct SActorForceReactionKnockdownConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SActorForceReactionBlockConfig reactionBlock; // Offset: 0x8
    DynArray_SActorForceReactionKnockdownRangeDef* knockdownRanges; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x48
};

// Original name: SActorForceReactionFlinchConfigDef
// Size: 0x48
// VTable: 0x149a4cec0
struct SActorForceReactionFlinchConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType filterByAimStanceState; // Offset: 0x8
    ARDataType filterByHeldItemType; // Offset: 0xc
    ARDataType filterByStanceState; // Offset: 0x10
    ARDataType filterByState; // Offset: 0x14
    DynArray_SActorForceReactionFlinchRangeDef* flinchRanges; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
};

// Original name: SActorForceReactionFilteredStaggerRangeDef
// Size: 0x50
// VTable: 0x149a4d108
struct SActorForceReactionFilteredStaggerRangeDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType filterByForceType; // Offset: 0x8
    ARDataType filterByAimStanceState; // Offset: 0xc
    ARDataType filterByHeldItemType; // Offset: 0x10
    ARDataType filterByStanceState; // Offset: 0x14
    ARDataType filterByState; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_SActorForceReactionStaggerRangeDef* staggerRanges; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: SActorForceReactionUnfilteredStaggerConfigDef
// Size: 0x70
// VTable: 0x149a4d208
struct SActorForceReactionUnfilteredStaggerConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SActorForceReactionBlockConfig reactionBlock; // Offset: 0x8
    DynArray_SActorForceReactionStaggerRangeDef* staggerRanges; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x48
};

// Original name: SActorForceReactionTwitchConfigDef
// Size: 0x50
// VTable: 0x149a4cca8
struct SActorForceReactionTwitchConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType filterByForceType; // Offset: 0x8
    ARDataType filterByAimStanceState; // Offset: 0xc
    ARDataType filterByHeldItemType; // Offset: 0x10
    ARDataType filterByStanceState; // Offset: 0x14
    ARDataType filterByState; // Offset: 0x18
    uint8_t _pad_1[0x4]; // Offset: 0x1c
    DynArray_SActorForceReactionTwitchRangeDef* twitchRanges; // Offset: 0x20 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x28
};

// Original name: DynArray_AbilityDefinition
// Generated DynArray for base type: AbilityDefinition
// Size: 0x8
struct DynArray_AbilityDefinition {
    AbilityDefinition* m_data; // Offset: 0x0
};

// Original name: SWeaponProceduralHandsRecoilConfigDef
// Size: 0x2c0
// VTable: 0x149a5e8e0
struct SWeaponProceduralHandsRecoilConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float decay; // Offset: 0x8
    float endDecay; // Offset: 0xc
    float fireRecoilTime; // Offset: 0x10
    float fireRecoilStrengthFirst; // Offset: 0x14
    float fireRecoilStrength; // Offset: 0x18
    float angleRecoilStrength; // Offset: 0x1c
    bool useRandomRotation; // Offset: 0x20
    uint8_t _pad_1[0x7]; // Offset: 0x21
    Ang3 rotation; // Offset: 0x28
    float randomness; // Offset: 0x40
    float randomnessBackPush; // Offset: 0x44
    float frontalOscillationRotation; // Offset: 0x48
    float frontalOscillationStrength; // Offset: 0x4c
    float frontalOscillationDecay; // Offset: 0x50
    float frontalOscillationRandomness; // Offset: 0x54
    SWeaponProceduralHandsRecoilCurveConfigDef curveRecoil; // Offset: 0x58
};

// Original name: DynArray_ControlHint_Entry
// Generated DynArray for base type: ControlHint_Entry
// Size: 0x8
struct DynArray_ControlHint_Entry {
    ControlHint_Entry* m_data; // Offset: 0x0
};

// Original name: PartialContractRewards
// Size: 0x38
// VTable: 0x149972ad0
struct PartialContractRewards {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_PartialContractRewardRange* percentageThresholds; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SandboxTriggerRecord
// Size: 0x38
// VTable: 0x149a97980
struct SandboxTriggerRecord {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_SandboxTriggerManualParams* triggerManualParams; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: DynArray_EASpecialEventInformationParams
// Generated DynArray for base type: EASpecialEventInformationParams
// Size: 0x8
struct DynArray_EASpecialEventInformationParams {
    EASpecialEventInformationParams* m_data; // Offset: 0x0
};

// Original name: DynArray_BuildingBlocks_BrandStyles
// Generated DynArray for base type: BuildingBlocks_BrandStyles
// Size: 0x8
struct DynArray_BuildingBlocks_BrandStyles {
    BuildingBlocks_BrandStyles* m_data; // Offset: 0x0
};

// Original name: ProceduralLandingSetup
// Size: 0x68
// VTable: 0x149aa2b38
struct ProceduralLandingSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ProceduralLandingFilter* landingAnimations; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ProceduralLandingFilter* firstPersonLandingAnimations; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
};

// Original name: AIBasicMeleeAttack
// Size: 0x78
// VTable: 0x149a02938
struct AIBasicMeleeAttack {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType attackType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    CryStringT* globalFragmentTags; // Offset: 0x10
    uint8_t _pad_2[0x8]; // Offset: 0x18
    float minDistanceToTarget2d; // Offset: 0x20
    float maxDistanceToTarget2d; // Offset: 0x24
    float minRelativeTargetHeight; // Offset: 0x28
    float maxRelativeTargetHeight; // Offset: 0x2c
    float maxAngleToTarget; // Offset: 0x30
    bool ignoreAttackObstructionClearance; // Offset: 0x34
    uint8_t _pad_3[0x3]; // Offset: 0x35
    MeleeAttackCategoryInfo meleeAttackCategoryInfo; // Offset: 0x38
    float animationSpeedBias; // Offset: 0x48
    uint8_t _pad_4[0x4]; // Offset: 0x4c
    CryStringT* targetDistanceFragmentTag; // Offset: 0x50
    uint8_t _pad_5[0x8]; // Offset: 0x58
    float motionWarpTranslationExtension; // Offset: 0x60
    float motionWarpRotationExtension; // Offset: 0x64
    float attackSwipeLeftLimitAngle; // Offset: 0x68
    float attackSwipeRightLimitAngle; // Offset: 0x6c
    float attackWeaponLength; // Offset: 0x70
    uint8_t _pad_6[0x4]; // Offset: 0x74
};

// Original name: MeleeFragInfo
// Size: 0x20
// VTable: 0x149aa4498
struct MeleeFragInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType attackType; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    MeleeAttackCategoryInfo meleeAttackCategoryInfo; // Offset: 0x10
};

// Original name: DynArray_MeleeAttackCategoryInfo
// Generated DynArray for base type: MeleeAttackCategoryInfo
// Size: 0x8
struct DynArray_MeleeAttackCategoryInfo {
    MeleeAttackCategoryInfo* m_data; // Offset: 0x0
};

// Original name: ShipComputerPresetList
// Size: 0x38
// VTable: 0x149a95580
struct ShipComputerPresetList {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ShipComputerPreset* presets; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: ActorSlidingParams
// Size: 0xd8
// VTable: 0x149a9c500
struct ActorSlidingParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float maxSlideTime; // Offset: 0x8
    float minSlideStartSpeed; // Offset: 0xc
    float minDistanceToObstacleForSlide; // Offset: 0x10
    float slideDeceleration; // Offset: 0x14
    float minSlideStopSpeed; // Offset: 0x18
    float yawBreakAngle; // Offset: 0x1c
    float slideInertia; // Offset: 0x20
    float slideDropDuration; // Offset: 0x24
    bool useCurveForSlideSpeed; // Offset: 0x28
    uint8_t _pad_1[0x7]; // Offset: 0x29
    BezierCurve slideSpeedCurve; // Offset: 0x30
    ActorSpeedCameraEffects speedCameraEffectsRecord; // Offset: 0xc0
};

// Original name: AnimatedMarker
// Size: 0x70
// VTable: 0x149aa63d0
struct AnimatedMarker {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* name; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    CryStringT* objectName; // Offset: 0x18
    uint8_t _pad_2[0x8]; // Offset: 0x20
    bool doOriginOffsetScale; // Offset: 0x28
    uint8_t _pad_3[0x3]; // Offset: 0x29
    float originOffsetScaleMin; // Offset: 0x2c
    float originOffsetTargetBoundInc; // Offset: 0x30
    float matrixBlendRate; // Offset: 0x34
    float lockLostLength; // Offset: 0x38
    uint32_t additionAttachments; // Offset: 0x3c
    DynArray_AnimatedMarker_Marker* markers; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x48
};

// Original name: StatusEffectSetupPreset
// Size: 0x18
// VTable: 0x1499fd560
struct StatusEffectSetupPreset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ActorStatusPreset preset; // Offset: 0x8
};

// Original name: DynArray_ActorStatusPreset
// Generated DynArray for base type: ActorStatusPreset
// Size: 0x8
struct DynArray_ActorStatusPreset {
    ActorStatusPreset* m_data; // Offset: 0x0
};

// Original name: ProcBreathingSetup
// Size: 0x48
// VTable: 0x149a6c908
struct ProcBreathingSetup {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ProcBreathingExertion* exertionGraphs; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    ProcBreathingHoldBreathNoise holdBreathNoise; // Offset: 0x38
};

// Original name: DynArray_SActorForceReactionFlinchConfigDef
// Generated DynArray for base type: SActorForceReactionFlinchConfigDef
// Size: 0x8
struct DynArray_SActorForceReactionFlinchConfigDef {
    SActorForceReactionFlinchConfigDef* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionFilteredStaggerRangeDef
// Generated DynArray for base type: SActorForceReactionFilteredStaggerRangeDef
// Size: 0x8
struct DynArray_SActorForceReactionFilteredStaggerRangeDef {
    SActorForceReactionFilteredStaggerRangeDef* m_data; // Offset: 0x0
};

// Original name: DynArray_SActorForceReactionTwitchConfigDef
// Generated DynArray for base type: SActorForceReactionTwitchConfigDef
// Size: 0x8
struct DynArray_SActorForceReactionTwitchConfigDef {
    SActorForceReactionTwitchConfigDef* m_data; // Offset: 0x0
};

// Original name: ActorAbilityComponent
// Size: 0x38
// VTable: 0x149a396b0
struct ActorAbilityComponent {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_AbilityDefinition* abilityDefinitions; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: WeaponProceduralRecoilConfigDef
// Size: 0x510
// VTable: 0x149a5f6a8
struct WeaponProceduralRecoilConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SWeaponProceduralHandsRecoilConfigDef weaponProceduralHandsRecoil; // Offset: 0x8
    SWeaponProceduralAimRecoilConfigDef weaponProceduralAimRecoil; // Offset: 0x2c8
    SWeaponProceduralBodyRecoilConfigDef weaponProceduralBodyRecoil; // Offset: 0x3c8
    SWeaponProceduralHeadRecoilConfigDef weaponProceduralHeadRecoil; // Offset: 0x3f0
};

// Original name: ControlHints_Preset
// Size: 0x38
// VTable: 0x149a67920
struct ControlHints_Preset {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ControlHint_Entry* hintSlots; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SandboxTriggerRecordParams
// Size: 0x20
// VTable: 0x149a979e0
struct SandboxTriggerRecordParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SandboxTriggerRecord triggerRecord; // Offset: 0x8
};

// Original name: SEntityComponentFrontendEAUIProviderParams
// Size: 0x188
// VTable: 0x1499fa570
struct SEntityComponentFrontendEAUIProviderParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    DynArray_SMatchNetworkTypeParams* matchNetworkTypeNames; // Offset: 0x18 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x20
    CLocIdentifier* anyMapOptionName; // Offset: 0x48
    CLocIdentifier* anyMapOptionDescription; // Offset: 0x50
    CryStringT* anyMapOptionThumbnail; // Offset: 0x58
    uint8_t _pad_2[0x8]; // Offset: 0x60
    CLocIdentifier* anyTeamOptionName; // Offset: 0x68
    CLocIdentifier* anyTeamOptionDescription; // Offset: 0x70
    CLocIdentifier* locReadyCount; // Offset: 0x78
    CLocIdentifier* locErrorReadyCheck; // Offset: 0x80
    CLocIdentifier* locErrorPlayerLimit; // Offset: 0x88
    CLocIdentifier* locErrorMissingBadge; // Offset: 0x90
    CLocIdentifier* locErrorMinPlayers; // Offset: 0x98
    ARDataType featuredGameMode; // Offset: 0xa0
    uint8_t _pad_3[0x4]; // Offset: 0xa4
    DynArray_PopupParams* popupParams; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xb0
    DynArray_EAPatchNoteCategoryParams* patchNoteCategories; // Offset: 0xd8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xe0
    DynArray_SocialTab* socialTabs; // Offset: 0x108 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x110
    EAExperimentalModeResetTimeParams experimentalModeResetTime; // Offset: 0x138
    DynArray_EASpecialEventInformationParams* specialEventInformation; // Offset: 0x158 // Pointer to DynArray struct
    uint8_t _pad_7[0x28]; // Offset: 0x160
};

// Original name: ActorLandingNode
// Size: 0x58
// VTable: 0x149aa2eb0
struct ActorLandingNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType configVariant; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    DynArray_LandingAnimationSetup* landingAnimations; // Offset: 0x10 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x18
    ProceduralLandingSetup proceduralLandingSetup; // Offset: 0x40
};

// Original name: DynArray_MeleeFragInfo
// Generated DynArray for base type: MeleeFragInfo
// Size: 0x8
struct DynArray_MeleeFragInfo {
    MeleeFragInfo* m_data; // Offset: 0x0
};

// Original name: AIMeleeCombatConfig
// Size: 0xc8
// VTable: 0x149a02c08
struct AIMeleeCombatConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MeleeAttackCategoryInfo* meleeAttackCategoryInfo; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_AttackCategoryParamsBase* attackCategoryParams; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_AIMeleeAttack* meleeAttacks; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_MeleeAttackCombo* combos; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
};

// Original name: PlayerChoice_IMConfig
// Size: 0x318
// VTable: 0x149aa5758
struct PlayerChoice_IMConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    int32_t cursorScreenPercentage; // Offset: 0x8
    int32_t interactionScreenPercentage; // Offset: 0xc
    PlayerChoice_SignalConfig signalConfig; // Offset: 0x10
    InnerThought_InteractionSystemConfig interactionConfig; // Offset: 0x28
    InnerThought_ConversationSystemConfig conversationConfig; // Offset: 0x40
    PlayerChoice_RemoteCommsConfig remoteConfig; // Offset: 0x58
    float IMFOVFactor; // Offset: 0xc0
    float FOVLerpSpeed; // Offset: 0xc4
    float focusModeLerpSpeed; // Offset: 0xc8
    float focusModeFOVFactor; // Offset: 0xcc
    bool useFocusModeDOF; // Offset: 0xd0
    uint8_t _pad_1[0x3]; // Offset: 0xd1
    float maxMouseDistanceToThought; // Offset: 0xd4
    float mouseDistanceToDriveSelection; // Offset: 0xd8
    bool showItemInnerThoughtsInNormalMode; // Offset: 0xdc
    uint8_t _pad_2[0x3]; // Offset: 0xdd
    float interactionPointStickinessFactor; // Offset: 0xe0
    float maxSelectableIPAngle; // Offset: 0xe4
    float maxAlwaysSelectRadius; // Offset: 0xe8
    bool quickInteractUseScoreSystem; // Offset: 0xec
    uint8_t _pad_3[0x3]; // Offset: 0xed
    float quickInteractOnScreenPoints; // Offset: 0xf0
    float quickInteractAnglePoints; // Offset: 0xf4
    float quickInteractDistancePoints; // Offset: 0xf8
    float thoughtPosClampFactor; // Offset: 0xfc
    float throwPercentageIncreaseFactor; // Offset: 0x100
    float quickPlaceThrowPercentage; // Offset: 0x104
    float quickPlaceDropTime; // Offset: 0x108
    float throwMaxImpulse; // Offset: 0x10c
    float throwMaxEpsilon; // Offset: 0x110
    uint8_t _pad_4[0x4]; // Offset: 0x114
    RGBA loosePlacementColor; // Offset: 0x118
    RGBA snapPlacementColor; // Offset: 0x130
    RGBA placementAttacherValidColor; // Offset: 0x148
    UIElementSoundsRecord soundsRecord; // Offset: 0x160
    CryStringT* holoSnapAudioID; // Offset: 0x178
    uint8_t _pad_5[0x8]; // Offset: 0x180
    float screenSpaceHoloSnapDistance; // Offset: 0x188
    float cursorSpeedMouseFactorIM; // Offset: 0x18c
    float cursorSpeedMouseFactorFM; // Offset: 0x190
    float cursorSpeedPadFactorIM; // Offset: 0x194
    float cursorSpeedPadFactorFM; // Offset: 0x198
    float cursorSpeedAimingVehicleFactor; // Offset: 0x19c
    DynArray_ARDataType* allowedCameraViewsForIM; // Offset: 0x1a0 // Pointer to DynArray struct
    uint8_t _pad_6[0x28]; // Offset: 0x1a8
    bool snapToFirstPerson; // Offset: 0x1d0
    uint8_t _pad_7[0x7]; // Offset: 0x1d1
    ProcBreathingSetup procBreathingSetup; // Offset: 0x1d8
    float xDirTowardsCenterFactor; // Offset: 0x1f0
    float xDirAwayFromCenterFactor; // Offset: 0x1f4
    float yDirTowardsCenterFactor; // Offset: 0x1f8
    float yDirAwayFromCenterFactor; // Offset: 0x1fc
    float zoomChangePerInput; // Offset: 0x200
    float zoomAccPeriod; // Offset: 0x204
    float zoomAccFactor; // Offset: 0x208
    float IMFOVFactorMin; // Offset: 0x20c
    PlayerChoice_HeadLookParams focusModeDeadzone; // Offset: 0x210
    PlayerChoice_HeadLookParams IMDefaultZoomDeadzone; // Offset: 0x228
    PlayerChoice_HeadLookParams IMFullZoomDeadzone; // Offset: 0x240
    PlayerChoice_HeadLookParams IMDefaultVehicleSeatZoomDeadzone; // Offset: 0x258
    PlayerChoice_HeadLookParams IMFullVehicleSeatZoomDeadzone; // Offset: 0x270
    PlayerChoice_HeadLookParams conversationDeadzone; // Offset: 0x288
    PlayerChoice_HeadLookParams PITDeadzone; // Offset: 0x2a0
    PlayerChoice_HeadLookParams worldDisplayDeadzone; // Offset: 0x2b8
    PlayerChoice_HeadLookParams screenFocusDeadzone; // Offset: 0x2d0
    float screenFocusLerpSpeed; // Offset: 0x2e8
    float screenFocusCancelDistance; // Offset: 0x2ec
    float screenFocusSelectionAngleRange; // Offset: 0x2f0
    float blockedConditionCheckTimer; // Offset: 0x2f4
    float cursorEdgeRotationSpeed; // Offset: 0x2f8
    bool includeOriginalTextInBlockedText; // Offset: 0x2fc
    uint8_t _pad_8[0x3]; // Offset: 0x2fd
    float quickSelectTimer; // Offset: 0x300
    float heldEntityMaxCursorDistance; // Offset: 0x304
    float promptDisplayFullRadius; // Offset: 0x308
    float promptDisplayCentreRadius; // Offset: 0x30c
    float IMSelectionScoreCutoff; // Offset: 0x310
    float interactionPromptPreviousUpdateTime; // Offset: 0x314
};

// Original name: SCItemRadarDisplayHoloVolumeParams
// Size: 0x40
// VTable: 0x149a5beb8
struct SCItemRadarDisplayHoloVolumeParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    float fullScreenFOVScale; // Offset: 0x18
    float fullScreenLerpSpeed; // Offset: 0x1c
    float finalForceLookAtLerpTime; // Offset: 0x20
    uint8_t _pad_1[0x4]; // Offset: 0x24
    ProcBreathingSetup fullScreenRadarProcBreathingSetup; // Offset: 0x28
};

// Original name: MobiGlasRemoteParams
// Size: 0xa0
// VTable: 0x149aa1bd8
struct MobiGlasRemoteParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MobiGlasPositionParams armPositionParams; // Offset: 0x8
    MobiGlasPositionParams headPositionParams; // Offset: 0x38
    ProcBreathingSetup procBreathingSetup; // Offset: 0x68
    float materialGlow; // Offset: 0x80
    uint8_t _pad_1[0x4]; // Offset: 0x84
    GlobalResourceGeometry objModel; // Offset: 0x88
};

// Original name: MobiGlasClientParams
// Size: 0x80
// VTable: 0x149aa1b50
struct MobiGlasClientParams {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    MobiGlasPositionParams armPositionParams; // Offset: 0x8
    MobiGlasPositionParams headPositionParams; // Offset: 0x38
    ProcBreathingSetup procBreathingSetup; // Offset: 0x68
};

// Original name: SActorForceReactionFilteredStaggerConfigDef
// Size: 0x70
// VTable: 0x149a4d188
struct SActorForceReactionFilteredStaggerConfigDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    SActorForceReactionBlockConfig reactionBlock; // Offset: 0x8
    DynArray_SActorForceReactionFilteredStaggerRangeDef* staggerFilters; // Offset: 0x40 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x48
};

// Original name: ControlHintGameModeRecords
// Size: 0xb0
// VTable: 0x149a67a70
struct ControlHintGameModeRecords {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ControlHints_Preset onFootControlHints; // Offset: 0x8
    ControlHints_Preset vehicleControlHints; // Offset: 0x20
    ControlHints_Preset groundVehicleControlHints; // Offset: 0x38
    ControlHints_Preset turretControlHints; // Offset: 0x50
    ControlHints_Preset boatVehicleControlHints; // Offset: 0x68
    ControlHints_Preset mobiglasControlHints; // Offset: 0x80
    ControlHints_Preset transportedControlHints; // Offset: 0x98
};

// Original name: LandingSelection
// Size: 0x28
// VTable: 0x149aa3058
struct LandingSelection {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    CryStringT* animEventName; // Offset: 0x8
    uint8_t _pad_1[0x8]; // Offset: 0x10
    ActorLandingNode landing; // Offset: 0x18
};

// Original name: DynArray_ActorLandingNode
// Generated DynArray for base type: ActorLandingNode
// Size: 0x8
struct DynArray_ActorLandingNode {
    ActorLandingNode* m_data; // Offset: 0x0
};

// Original name: MeleeAttackInfo
// Size: 0x38
// VTable: 0x149aa44f0
struct MeleeAttackInfo {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MeleeFragInfo* meleeAttacks; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
};

// Original name: SAISpecialActionsParams
// Size: 0x60
// VTable: 0x149a02e20
struct SAISpecialActionsParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    AIMeleeCombatConfig aiMeleeCombatConfig; // Offset: 0x18
    AIHealthThresholdsConfig aiHealthThresholdsConfig; // Offset: 0x30
    AIAvailableSpecialRangedAttacksConfig aiAvailableSpecialRangedAttacksConfig; // Offset: 0x48
};

// Original name: SCItemMobiGlasParams
// Size: 0x148
// VTable: 0x149a803f0
struct SCItemMobiGlasParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    MobiGlasClientParams clientParams; // Offset: 0x18
    MobiGlasRemoteParams remoteParams; // Offset: 0x98
    MobiGlasEffectParams effectSettings; // Offset: 0x138
};

// Original name: SActorForceReactionsDef
// Size: 0x6d0
// VTable: 0x149a4e120
struct SActorForceReactionsDef {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    float physicsImpulseScale; // Offset: 0x8
    float explosionsImpulseScale; // Offset: 0xc
    float meleeImpulseScale; // Offset: 0x10
    float bulletImpulseScale; // Offset: 0x14
    SActorForceReactionExternalImpulseDef externalImpulseConfig; // Offset: 0x18
    SActorForceReactionSustainedForceDef sustainedForceConfig; // Offset: 0x38
    DynArray_SActorForceReactionsVehicleForceDampeningDef* vehicleForceDampeningConfig; // Offset: 0xf8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x100
    SActorForceReactionsStunDef stunConfig; // Offset: 0x128
    SActorForceReactionLimitDef reactionLimits; // Offset: 0x148
    SActorForceReactionGlobalEffectConfig effectGlobalConfig; // Offset: 0x168
    SActorForceReactionGlobalStaggerConfig staggerGlobalConfig; // Offset: 0x228
    SActorForceReactionImpulseAccumulationConfig impulseAccumulationConfig; // Offset: 0x288
    DynArray_SActorForceReactionFilterDef* filters; // Offset: 0x2a0 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x2a8
    DynArray_SActorForceReactionTwitchConfigDef* twitchConfigs; // Offset: 0x2d0 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x2d8
    DynArray_SActorForceReactionFlinchConfigDef* flinchConfigs; // Offset: 0x300 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0x308
    DynArray_SActorForceReactionFlinchConfigDef* sustainedDeltaFlinchConfigs; // Offset: 0x330 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x338
    SActorForceReactionFilteredStaggerConfigDef directStaggerConfig; // Offset: 0x360
    SActorForceReactionFilteredStaggerConfigDef indirectStaggerConfig; // Offset: 0x3d0
    SActorForceReactionUnfilteredStaggerConfigDef sustainedDeltaStaggerConfig; // Offset: 0x440
    SActorForceReactionKnockdownConfigDef directKnockdownConfig; // Offset: 0x4b0
    SActorForceReactionKnockdownConfigDef indirectKnockdownConfig; // Offset: 0x520
    SActorForceReactionKnockdownConfigDef sustainedDeltaKnockdownConfig; // Offset: 0x590
    SActorForceReactionKnockdownConfigDef sustainedKnockdownConfig; // Offset: 0x600
    SActorForceReactionStumbleConfigDef sustainedStumbleConfig; // Offset: 0x670
    SActorForceReactionLeanConfigDef leanConfig; // Offset: 0x680
};

// Original name: Visor_ControlHintsConfig
// Size: 0x168
// VTable: 0x149a67af8
struct Visor_ControlHintsConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ControlHintGameModeRecords controlHintsPU; // Offset: 0x8
    ControlHintGameModeRecords controlHintsSQ42; // Offset: 0xb8
};

// Original name: DynArray_LandingSelection
// Generated DynArray for base type: LandingSelection
// Size: 0x8
struct DynArray_LandingSelection {
    LandingSelection* m_data; // Offset: 0x0
};

// Original name: DynArray_MeleeAttackInfo
// Generated DynArray for base type: MeleeAttackInfo
// Size: 0x8
struct DynArray_MeleeAttackInfo {
    MeleeAttackInfo* m_data; // Offset: 0x0
};

// Original name: VisorHUD_Config
// Size: 0x20
// VTable: 0x149a67b50
struct VisorHUD_Config {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    Visor_ControlHintsConfig controlHintsDef; // Offset: 0x8
};

// Original name: ActorFallNode
// Size: 0x190
// VTable: 0x149aa34c8
struct ActorFallNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType configVariant; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    FragmentInfo intro; // Offset: 0x10
    FragmentRequiredInfo loop; // Offset: 0x58
    FragmentInfo outro; // Offset: 0xa0
    bool introUseHandOverlay; // Offset: 0xe8
    bool loopUseHandOverlay; // Offset: 0xe9
    bool outroUseHandOverlay; // Offset: 0xea
    bool introAllowTurning; // Offset: 0xeb
    bool loopAllowTurning; // Offset: 0xec
    bool outroAllowTurning; // Offset: 0xed
    uint8_t _pad_2[0x2]; // Offset: 0xee
    StanceCheckConfig introStanceCheck; // Offset: 0xf0
    float loopStanceCheckDelay; // Offset: 0x100
    uint8_t _pad_3[0x4]; // Offset: 0x104
    StanceCheckConfig loopStanceCheck; // Offset: 0x108
    StanceCheckConfig outroStanceCheck; // Offset: 0x118
    float loopBlendStartTime; // Offset: 0x128
    float loopBlendEndTime; // Offset: 0x12c
    float outroTimeToLand; // Offset: 0x130
    float outroMinDelay; // Offset: 0x134
    float outroMinSpeed; // Offset: 0x138
    uint8_t _pad_4[0x4]; // Offset: 0x13c
    ActorFallOverlayNode fallOverlay; // Offset: 0x140
    ActorLandingNode landing; // Offset: 0x150
    DynArray_LandingSelection* alternateLandings; // Offset: 0x160 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0x168
};

// Original name: MeleeCombatConfig
// Size: 0xe8
// VTable: 0x149aa4618
struct MeleeCombatConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_MeleeAttackInfo* attackNodes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_MeleeAttackInfo* attackNodesZeroG; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_MeleeAttackCategoryInfo* meleeAttackCategoryInfo; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_AttackCategoryParams* attackCategoryParams; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    float zLockTriggerTime; // Offset: 0xc8
    uint8_t _pad_5[0x4]; // Offset: 0xcc
    ConversationStickyFilter zLockStickyFilter; // Offset: 0xd0
};

// Original name: ActorJumpNode
// Size: 0x108
// VTable: 0x149aa3660
struct ActorJumpNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType configVariant; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    FragmentInfo launch; // Offset: 0x10
    FragmentInfo arc; // Offset: 0x58
    bool arcUseHandOverlay; // Offset: 0xa0
    bool arcAllowTurning; // Offset: 0xa1
    uint8_t _pad_2[0x6]; // Offset: 0xa2
    DynArray_DurationTags* durationTags; // Offset: 0xa8 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0xb0
    ActorFallOverlayNode fallOverlay; // Offset: 0xd8
    ActorFallNode fall; // Offset: 0xe8
    ActorLandingNode landing; // Offset: 0xf8
};

// Original name: DynArray_ActorFallNode
// Generated DynArray for base type: ActorFallNode
// Size: 0x8
struct DynArray_ActorFallNode {
    ActorFallNode* m_data; // Offset: 0x0
};

// Original name: SMeleeWeaponComponentParams
// Size: 0x88
// VTable: 0x149a7d3d0
struct SMeleeWeaponComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* helper; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* audioTriggerName; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* matFxTriggerName; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    bool canBeUsedForTakeDown; // Offset: 0x48
    uint8_t _pad_4[0x7]; // Offset: 0x49
    WeaponProceduralAnimation proceduralAnimationRecord; // Offset: 0x50
    bool canBlock; // Offset: 0x68
    bool canBeUsedInProne; // Offset: 0x69
    bool canDodge; // Offset: 0x6a
    uint8_t _pad_5[0x1]; // Offset: 0x6b
    float stanceTransitionMeleeDelay; // Offset: 0x6c
    MeleeCombatConfig meleeCombatConfig; // Offset: 0x70
};

// Original name: SMeleeComponentParams
// Size: 0x88
// VTable: 0x149a341f0
struct SMeleeComponentParams {
    uint8_t _pad_0[0x18]; // Offset: 0x0
    CryStringT* helper; // Offset: 0x18
    uint8_t _pad_1[0x8]; // Offset: 0x20
    CryStringT* audioTriggerName; // Offset: 0x28
    uint8_t _pad_2[0x8]; // Offset: 0x30
    CryStringT* matFxTriggerName; // Offset: 0x38
    uint8_t _pad_3[0x8]; // Offset: 0x40
    bool canBeUsedForTakeDown; // Offset: 0x48
    uint8_t _pad_4[0x7]; // Offset: 0x49
    WeaponProceduralAnimation proceduralAnimationRecord; // Offset: 0x50
    bool canBlock; // Offset: 0x68
    bool canBeUsedInProne; // Offset: 0x69
    bool canDodge; // Offset: 0x6a
    uint8_t _pad_5[0x1]; // Offset: 0x6b
    float stanceTransitionMeleeDelay; // Offset: 0x6c
    MeleeCombatConfig meleeCombatConfig; // Offset: 0x70
};

// Original name: ActorJumpFallLandVariantConfigNode
// Size: 0x40
// VTable: 0x149aa3738
struct ActorJumpFallLandVariantConfigNode {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    ARDataType variant; // Offset: 0x8
    uint8_t _pad_1[0x4]; // Offset: 0xc
    ActorJumpNode jump; // Offset: 0x10
    ActorFallNode fall; // Offset: 0x20
    ActorLandingNode land; // Offset: 0x30
};

// Original name: DynArray_ActorJumpNode
// Generated DynArray for base type: ActorJumpNode
// Size: 0x8
struct DynArray_ActorJumpNode {
    ActorJumpNode* m_data; // Offset: 0x0
};

// Original name: DynArray_ActorJumpFallLandVariantConfigNode
// Generated DynArray for base type: ActorJumpFallLandVariantConfigNode
// Size: 0x8
struct DynArray_ActorJumpFallLandVariantConfigNode {
    ActorJumpFallLandVariantConfigNode* m_data; // Offset: 0x0
};

// Original name: JumpFallLandConfig
// Size: 0xf8
// VTable: 0x149aa3830
struct JumpFallLandConfig {
    uint8_t _pad_0[0x8]; // Offset: 0x0
    DynArray_ActorJumpNode* jumpNodes; // Offset: 0x8 // Pointer to DynArray struct
    uint8_t _pad_1[0x28]; // Offset: 0x10
    DynArray_ActorFallNode* fallNodes; // Offset: 0x38 // Pointer to DynArray struct
    uint8_t _pad_2[0x28]; // Offset: 0x40
    DynArray_ActorLandingNode* landingNodes; // Offset: 0x68 // Pointer to DynArray struct
    uint8_t _pad_3[0x28]; // Offset: 0x70
    DynArray_ActorFallOverlayNode* fallOverlayNodes; // Offset: 0x98 // Pointer to DynArray struct
    uint8_t _pad_4[0x28]; // Offset: 0xa0
    DynArray_ActorJumpFallLandVariantConfigNode* variantConfigNodes; // Offset: 0xc8 // Pointer to DynArray struct
    uint8_t _pad_5[0x28]; // Offset: 0xd0
};
